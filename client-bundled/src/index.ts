import {Vector3,Vector2,IEntity,IPed,IPlayer,IVehicle,IObject,IBlip,ICamera} from '@risinglife/fivem-shared'

export function invokeNative<T = void>(hash: string, ...args: any[]): T {
    return Citizen.invokeNative<T>(hash, ...args)
}

export function startProfiling(name?: string): void {
    Citizen.startProfiling(name);
}

export function stopProfiling(name?: string): {} {
    return Citizen.stopProfiling(name);
}

export namespace events {
    interface api {
        onNet: (eventName: string, handler: Function) => void;
        emitNet: (eventName: string, ...args: any[]) => void;
        on: (eventName: string, handler: Function) => void;
        emit: (eventName: string, ...args: any[]) => void;
    }
    class EventEmitter {
        private listeners: Map<string, Array<(...args: any[]) => void>> = new Map();

        on(eventName: string, callback: (...args: any[]) => void): void {
            if (!this.listeners.has(eventName)) {
                this.listeners.set(eventName, []);
            }
            this.listeners.get(eventName)!.push(callback);
        }

        once(eventName: string, callback: (...args: any[]) => void): void {
            const onceWrapper = (...args: any[]) => {
                this.off(eventName, onceWrapper);
                callback(...args);
            };
            this.on(eventName, onceWrapper);
        }

        emit(eventName: string, ...args: any[]): void {
            const callbacks = this.listeners.get(eventName);
            if (callbacks) {
                callbacks.forEach((callback) => {
                    try {
                        callback(...args);
                    } catch (error) {
                        EventLogger.logError(eventName, error);
                    }
                });
            }
        }

        off(eventName: string, callback: (...args: any[]) => void): void {
            const callbacks = this.listeners.get(eventName);
            if (callbacks) {
                const index = callbacks.indexOf(callback);
                if (index !== -1) {
                    callbacks.splice(index, 1);
                }
            }
        }

        removeAllListeners(eventName?: string): void {
            if (eventName) {
                this.listeners.delete(eventName);
            } else {
                this.listeners.clear();
            }
        }
    }
    class EventParsingUtils {
        static parseArgument(arg: any): any {
            if (typeof arg === 'string') {
                try {
                    return JSON.parse(arg);
                } catch {
                    return arg;
                }
            }

            if (Array.isArray(arg)) {
                return arg.map((item) => this.parseArgument(item));
            }

            if (arg && typeof arg === 'object') {
                const result: any = {};
                for (const [key, value] of Object.entries(arg)) {
                    result[key] = this.parseArgument(value);
                }
                return result;
            }

            return arg;
        }

        static parseAllArguments(args: any[]): any[] {
            return args.map((arg) => this.parseArgument(arg));
        }

        static assignFields(target: any, source: any): any {
            if (typeof target === 'object' && target !== null && typeof source === 'object' && source !== null) {
                return Object.assign(target, source);
            }
            return source;
        }
    }
    class EventRegistry {
        private static networkEvents = new Set<string>();
        private static localEvents = new Set<string>();
        private static networkEmitter = new EventEmitter();
        private static localEmitter = new EventEmitter();

        static getNetworkRegistry() {
            return {
                events: this.networkEvents,
                emitter: this.networkEmitter
            };
        }

        static getLocalRegistry() {
            return {
                events: this.localEvents,
                emitter: this.localEmitter
            };
        }
    }
    class EventLogger {

        static logErrors: boolean = true;
        static logEvents: boolean = false;

        static logEvent(type: 'NETWORK' | 'LOCAL', eventName: string, ...args: any[]): void {
            if (this.logEvents) console.log(`[${type}] ${eventName}`, ...args);
        }

        static logError(eventName: string, error: any): void {
            if (this.logErrors) console.error(`Error in event handler for "${eventName}":`, error);
        }
    }

    class RemoteEventUtils {
        private static api: api = {
            // @ts-ignore
            onNet: (eventName: string, handler: Function) => onNet(eventName, handler),
            // @ts-ignore
            emitNet: (eventName: string, ...args: any[]) => emitNet(eventName, ...args),
            // @ts-ignore
            on: (eventName: string, handler: Function) => addEventListener(eventName, handler),
            // @ts-ignore
            emit: (eventName: string, ...args: any[]) => TriggerEvent(eventName, ...args),
        };

        private static getNetworkEventName(eventName: string): string {
            return eventName.startsWith('net::') ? eventName : `net::${eventName}`;
        }

        private static setupListener(eventName: string): void {
            const {events, emitter} = EventRegistry.getNetworkRegistry();
            const networkEventName = this.getNetworkEventName(eventName);

            if (!events.has(eventName)) {
                events.add(eventName);

                const handler = (...args: any[]) => {
                    const parsedArgs = EventParsingUtils.parseAllArguments(args);
                    emitter.emit(eventName, ...parsedArgs);
                    EventLogger.logEvent('NETWORK', eventName, ...args);
                };

                this.api.onNet(networkEventName, handler);
            }
        }

        static registerEvent<T extends any[]>(eventName: string, callback: (...args: T) => void): void {
            this.setupListener(eventName);
            const {emitter} = EventRegistry.getNetworkRegistry();
            emitter.on(eventName, callback);
        }

        static registerEventOnce<T extends any[]>(eventName: string, callback: (...args: T) => void): void {
            this.setupListener(eventName);
            const {emitter} = EventRegistry.getNetworkRegistry();
            emitter.once(eventName, callback);
        }

        static removeListener<T extends any[]>(eventName: string, callback: (...args: T) => void): void {
            const {emitter} = EventRegistry.getNetworkRegistry();
            emitter.off(eventName, callback);
        }

        static removeAllListeners(eventName?: string): void {
            const {emitter} = EventRegistry.getNetworkRegistry();
            emitter.removeAllListeners(eventName);
        }

        static send(eventName: string, ...args: any[]): void {
            const networkEventName = this.getNetworkEventName(eventName);
            const parsedArgs = args.map((arg) => {
                if (arg instanceof IEntity) {
                    return arg.remoteId();
                }
                return arg;
            });

            EventLogger.logEvent('NETWORK', eventName, ...parsedArgs);
            this.api.emitNet(networkEventName, ...parsedArgs);
        }
    }
    class LocalEventUtils {
        private static api: api = {
            // @ts-ignore
            onNet: (eventName: string, handler: Function) => onNet(eventName, handler),
            // @ts-ignore
            emitNet: (eventName: string, ...args: any[]) => emitNet(eventName, ...args),
            // @ts-ignore
            on: (eventName: string, handler: Function) => addEventListener(eventName, handler),
            // @ts-ignore
            emit: (eventName: string, ...args: any[]) => TriggerEvent(eventName, ...args),
        };

        private static setupListener(eventName: string): void {
            const {events, emitter} = EventRegistry.getLocalRegistry();

            if (!events.has(eventName)) {
                events.add(eventName);

                const handler = (...args: any[]) => {
                    const parsedArgs = EventParsingUtils.parseAllArguments(args);
                    emitter.emit(eventName, ...parsedArgs);
                    EventLogger.logEvent('LOCAL', eventName, ...args);
                };

                this.api.on(eventName, handler);
            }
        }

        static registerEvent<T extends any[]>(eventName: string, callback: (...args: T) => void): void {
            this.setupListener(eventName);
            const {emitter} = EventRegistry.getLocalRegistry();
            emitter.on(eventName, callback);
        }

        static registerEventOnce<T extends any[]>(eventName: string, callback: (...args: T) => void): void {
            this.setupListener(eventName);
            const {emitter} = EventRegistry.getLocalRegistry();
            emitter.once(eventName, callback);
        }

        static removeListener<T extends any[]>(eventName: string, callback: (...args: T) => void): void {
            const {emitter} = EventRegistry.getLocalRegistry();
            emitter.off(eventName, callback);
        }

        static removeAllListeners(eventName?: string): void {
            const {emitter} = EventRegistry.getLocalRegistry();
            emitter.removeAllListeners(eventName);
        }

        static send(eventName: string, ...args: any[]): void {
            const parsedArgs = args.map((arg) => {
                if (arg instanceof IEntity) {
                    return arg.remoteId();
                }
                return arg;
            });

            EventLogger.logEvent('LOCAL', eventName, ...parsedArgs);
            this.api.emit(eventName, ...parsedArgs);
        }
    }

    export function removeAllListeners(key?: string): void {
        LocalEventUtils.removeAllListeners(key)
        RemoteEventUtils.removeAllListeners(key)
    }

    /**
     * Enable or disable the error event logging.
     * Default state: true
     *
     * @param value Is the new state
     */
    export function setLogEventErrors(value: boolean): void {
        EventLogger.logErrors = value;
    }

    /**
     * Enable or disable the event logging.
     * This could be helpful when you have to debug some errors.
     *
     * Default state: false
     *
     * @param value Is the new state
     */
    export function setLogEvents(value: boolean): void {
        EventLogger.logEvents = value;
    }

    /**
     * Registers a listener for a local emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    export function on(key: string, callback: (...args: any[]) => void): void {
        LocalEventUtils.registerEvent(key, callback);
    }
    /**
     * Registers a onetime listener for a local emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    export function once(key: string, callback: (...args: any[]) => void): void {
        LocalEventUtils.registerEventOnce(key, callback);
    }
    /**
     * Removes a listener for a local emitted event
     * @param key The event key which should be removed
     * @param callback Must be the callback
     */
    export function off(key: string, callback: (...args: any[]) => void): void {
        LocalEventUtils.removeListener(key, callback);
    }

    /**
     * Registers a listener for the server emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    export function onServer(key: string, callback: (...args: any[]) => void): void {
        RemoteEventUtils.registerEvent(key, callback);
    }
    /**
     * Registers a onetime listener for the server emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    export function onceServer(key: string, callback: (...args: any[]) => void): void {
        RemoteEventUtils.registerEventOnce(key, callback);
    }
    /**
     * Removes a listener for the server emitted event
     * @param key The event key which should be removed
     * @param callback Must be the callback
     */
    export function offServer(key: string, callback: (...args: any[]) => void): void {
        RemoteEventUtils.removeListener(key, callback);
    }

    /**
     * Sends data local, which can be listened by any resource
     * @param key The event key
     * @param args All parameters
     */
    export function emit(key: string, ...args: any[]): void {
        LocalEventUtils.send(key, ...args)
    }
    /**
     * Sends data to the server, which can be listened by any resource
     * @param key The event key
     * @param args All parameters
     */
    export function emitServer(key: string, ...args: any[]): void {
        RemoteEventUtils.send(key, ...args)
    }

    // Implementations

    /**
     * Will be triggered when the current resource nui sends a message
     */
    export function onNui(name: string, callback: (data: any, cb: (key: any) => void) => void) {
        nui.registerCallback(name, callback)
    }

    /**
     * Will be triggered when a resource is started
     */
    export function onResourceStart(callback: (name: string) => void) {
        on("onResourceStart", (name) => {
            callback(name)
        });
    }

    /**
     * Will be triggered when a resource is being starting
     * You can use {@link misc.cancelEvent()} to cancel the start
     */
    export function onResourceStarting(callback: (name: string) => void) {
        on("onResourceStarting", (name) => {
            callback(name)
        });
    }

    /**
     * Will be triggered when a resource is being stopped
     */
    export function onResourceStop(callback: (name: string) => void) {
        on("onResourceStop", (name) => {
            callback(name)
        });
    }

    /**
     * Will be triggered when a game event is fired.
     * You can find a list of all game events here: https://docs.fivem.net/docs/game-references/game-events/
     */
    export function onGameEvent(callback: (name: string, ...args: any[]) => void) {
        on("gameEventTriggered", (name, args) => {
            callback(name, args)
        });
    }

    /**
     * Will be triggered when a population ped is being creating.
     * You can use {@link misc.cancelEvent()} to cancel this event.
     */
    export function onPopulationPedCreating(callback: (position: Vector3,  model: number,  setters: { setModel: (model: string) => void, setPosition: (x: number, y: number, z: number) => void }) => void) {
        on('populationPedCreating', (x, y, z, model, setters) => {
            callback(new Vector3(x, y, z), model, setters)
        })
    }

    /**
     * Will be triggered when an Entity got damage
     */
    export function onEntityDamaged(callback: (victim: number, culprit: number, weapon: number, baseDamage: number) => void) {
        on('entityDamaged', (victim: number, culprit: number, weapon: number, baseDamage: number) => {
            callback(victim, culprit, weapon, baseDamage)
        })
    }

    /**
     * Will be triggered when mumble is connected
     */
    export function onMumbleConnected(callback: (address: string, reconnecting: boolean) => void) {
        on('mumbleConnected', (address: string, reconnecting: boolean) => {
            callback(address, reconnecting)
        })
    }

    /**
     * Will be triggered when mumble is disconnected
     */
    export function onMumbleDisconnected(callback: (address: string) => void) {
        on('mumbleDisconnected', (address: string) => {
            callback(address)
        })
    }
}

// All below is auto-generated code

export namespace audio {
    /**
     * Allows StaticEmitter's without a linked entity to make use of environment features like occlusion and reverb even if they are located higher than 20.0 units above any static collision inside interiors.
     *
     * This native allows you to extend the probe range up to 150.0 units.
     *
     * Hash: 0x8AA1F3C2 | Since: unknown | API-Set: client
     */
    export function setEmitterProbeLength(probeLength: number): void {
        SetEmitterProbeLength(probeLength);
    }

    /**
     * Adds an output for the specified audio submix.
     *
     * Hash: 0xAC6E290D | Since: unknown | API-Set: client
     */
    export function addSubmixOutput(submixId: number, outputSubmixId: number): void {
        AddAudioSubmixOutput(submixId, outputSubmixId);
    }

    /**
     * Creates an audio submix with the specified name, or gets the existing audio submix by that name.
     *
     * Hash: 0x658D2BC8 | Since: unknown | API-Set: client
     */
    export function createSubmix(name: string): number {
        return CreateAudioSubmix(name);
    }

    /**
     * Sets a floating-point parameter for a submix effect.
     *
     * Hash: 0x9A209B3C | Since: unknown | API-Set: client
     */
    export function setSubmixEffectParamFloat(submixId: number, effectSlot: number, paramIndex: number, paramValue: number): void {
        SetAudioSubmixEffectParamFloat(submixId, effectSlot, paramIndex, paramValue);
    }

    /**
     * Sets an integer parameter for a submix effect.
     *
     * Hash: 0x77FAE2B8 | Since: unknown | API-Set: client
     */
    export function setSubmixEffectParamInt(submixId: number, effectSlot: number, paramIndex: number, paramValue: number): void {
        SetAudioSubmixEffectParamInt(submixId, effectSlot, paramIndex, paramValue);
    }

    /**
     * Assigns a RadioFX effect to a submix effect slot.
     *
     * The parameter values for this effect are as follows (backticks are used to represent hashes):
     *
     * | Index | Type | Description |
     * |-|-|-|
     * | \`enabled\` | int | Enables or disables RadioFX on this DSP. |
     * | \`default\` | int | Sets default parameters for the RadioFX DSP and enables it. |
     * | \`freq_low\` | float |  |
     * | \`freq_hi\` | float |  |
     * | \`fudge\` | float |  |
     * | \`rm_mod_freq\` | float |  |
     * | \`rm_mix\` | float |  |
     * | \`o_freq_lo\` | float |  |
     * | \`o_freq_hi\` | float |  |
     *
     * Hash: 0xAAA94D53 | Since: unknown | API-Set: client
     */
    export function setSubmixEffectRadioFx(submixId: number, effectSlot: number): void {
        SetAudioSubmixEffectRadioFx(submixId, effectSlot);
    }

    /**
     * Sets the volumes for the sound channels in a submix effect.
     * Values can be between 0.0 and 1.0.
     * Channel 5 and channel 6 are not used in voice chat but are believed to be center and LFE channels.
     * Output slot starts at 0 for the first ADD_AUDIO_SUBMIX_OUTPUT call then incremented by 1 on each subsequent call.
     *
     * Hash: 0x825DC0D1 | Since: unknown | API-Set: client
     */
    export function setSubmixOutputVolumes(submixId: number, outputSlot: number, frontLeftVolume: number, frontRightVolume: number, rearLeftVolume: number, rearRightVolume: number, channel5Volume: number, channel6Volume: number): void {
        SetAudioSubmixOutputVolumes(submixId, outputSlot, frontLeftVolume, frontRightVolume, rearLeftVolume, rearRightVolume, channel5Volume, channel6Volume);
    }

    /**
     * mode can be any of these:
     * SLOWMO_T1_TRAILER_SMASH
     * SLOWMO_T1_RAYFIRE_EXPLOSION
     * SLOWMO_PROLOGUE_VAULT
     * NIGEL_02_SLOWMO_SETTING
     * JSH_EXIT_TUNNEL_SLOWMO
     * SLOWMO_BIG_SCORE_JUMP
     * SLOWMO_FIB4_TRUCK_SMASH
     * SLOWMO_EXTREME_04
     * SLOW_MO_METH_HOUSE_RAYFIRE
     * BARRY_02_SLOWMO
     * BARRY_01_SLOWMO
     *
     * Hash: 0xD01005D2BA2EB778 | Since: 323 | API-Set: unknown
     */
    export function activateSlowmoMode(mode: string): void {
        ActivateAudioSlowmoMode(mode);
    }

    /**
     * All found occurrences in b678d:
     * https://pastebin.com/ceu67jz8
     *
     * Hash: 0x153973AB99FE8980 | Since: 323 | API-Set: unknown
     */
    export function addEntityToMixGroup(entity: number | IEntity, groupName: string): void {
        AddEntityToAudioMixGroup(entity, groupName, 0);
    }

    /**
     * NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
     * GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
     *
     * p0 is -1, 0 - 35
     * p1 is a char or string (whatever you wanna call it)
     * p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
     * p3 is again -1, 0 - 35
     * p4 is again -1, 0 - 35
     * p5 is either 0 or 1 (bool ?)
     * p6 is either 0 or 1 (The func to determine this is bool)
     * p7 is either 0 or 1 (The func to determine this is bool)
     * p8 is either 0 or 1 (The func to determine this is bool)
     * p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
     * p10 is either 0 or 1 (The func to determine this is bool)
     * p11 is either 0 or 1 (The func to determine this is bool)
     * p12 is unknown as in TU27 X360 scripts it only goes to p11.
     *
     * Hash: 0xC5EF963405593646 | Since: 323 | API-Set: unknown
     */
    export function addLineToConversation(index: number): void {
        AddLineToConversation(index, undefined, undefined, 0, 0, false, false, false, false, 0, false, false, false);
    }

    /**
     * 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
     *
     * `AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");`
     *
     * =================================================
     * One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
     *
     * Hash: 0x95D9F4BC443956E7 | Since: 323 | API-Set: unknown
     */
    export function addPedToConversation(index: number, ped: number | IPed): void {
        AddPedToConversation(index, ped, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x845FFC3A4FEEFA3E | Since: 323 | API-Set: unknown
     */
    export function isMusicPlaying(): boolean {
        return AudioIsScriptedMusicPlaying();
    }

    /**
     * This is an alias of AUDIO_IS_MUSIC_PLAYING.
     *
     * Hash: 0x2DD39BF3E2F9C47F | Since: 463 | API-Set: unknown
     */
    export function isScriptedMusicPlaying(): boolean {
        return Citizen.invokeNative('0x2DD39BF3E2F9C47F');
    }

    /**
     * Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
     * Only works on vehicles with a police siren.
     *
     * Hash: 0x1B9025BDA76822B6 | Since: 323 | API-Set: unknown
     */
    export function blipSiren(vehicle: number | IVehicle): void {
        BlipSiren(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF8AD2EED7C47E8FE | Since: 1734 | API-Set: unknown
     */
    export function blockAllSpeechFromPed(ped: number | IPed): void {
        BlockAllSpeechFromPed(ped, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF154B8D1775B2DEC | Since: 323 | API-Set: unknown
     */
    export function blockDeathJingle(toggle: boolean): void {
        BlockDeathJingle(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8A7D434AFB4B97B | Since: 1493 | API-Set: unknown
     */
    export function blockSpeechContextGroup(): void {
        BlockSpeechContextGroup(undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB4F90FAF7670B16F | Since: 323 | API-Set: unknown
     */
    export function cancelAllPoliceReports(): void {
        CancelAllPoliceReports();
    }

    /**
     * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
     * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
     *
     * Hash: 0x5B17A90291133DA5 | Since: 323 | API-Set: unknown
     */
    export function cancelMusicEvent(eventName: string): boolean {
        return CancelMusicEvent(eventName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x032A116663A4D5AC | Since: 323 | API-Set: unknown
     */
    export function canVehicleReceiveCbRadio(vehicle: number | IVehicle): boolean {
        return CanVehicleReceiveCbRadio(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB32209EFFDC04913 | Since: 323 | API-Set: unknown
     */
    export function clearAllBrokenGlass(): void {
        ClearAllBrokenGlass();
    }

    /**
     * No comment provided
     *
     * Hash: 0x120C48C614909FA4 | Since: 323 | API-Set: unknown
     */
    export function clearAmbientZoneListState(ambientZone: string): void {
        ClearAmbientZoneListState(ambientZone, false);
    }

    /**
     * `This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);`
     *
     * Still needs more research.
     *
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0x218DD44AAAC964FF | Since: 323 | API-Set: unknown
     */
    export function clearAmbientZoneState(zoneName: string): void {
        ClearAmbientZoneState(zoneName, false);
    }

    /**
     * 3 calls in the b617d scripts, removed duplicate.
     *
     * `AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");`
     * `AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");`
     *
     * Hash: 0x1654F24A88A8E3FE | Since: 323 | API-Set: unknown
     */
    export function clearCustomRadioTrackList(radioStation: string): void {
        ClearCustomRadioTrackList(radioStation);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2C91A0B572AAE56 | Since: 323 | API-Set: unknown
     */
    export function createNewScriptedConversation(): void {
        CreateNewScriptedConversation();
    }

    /**
     * see ACTIVATE_AUDIO_SLOWMO_MODE for modes
     *
     * Hash: 0xDDC635D5B3262C56 | Since: 323 | API-Set: unknown
     */
    export function deactivateSlowmoMode(mode: string): void {
        DeactivateAudioSlowmoMode(mode);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9A41C1E940FB0E8 | Since: 323 | API-Set: unknown
     */
    export function disablePedPain(ped: number | IPed, toggle: boolean): void {
        DisablePedPainAudio(ped, toggle);
    }

    /**
     * If value is set to true, and ambient siren sound will be played.
     * Appears to enable/disable an audio flag.
     *
     * Hash: 0x552369F549563AD5 | Since: 323 | API-Set: unknown
     */
    export function distantCopCarSirens(value: boolean): void {
        DistantCopCarSirens(value);
    }

    /**
     * Checks if the ped can play the speech or has the speech file, p2 is usually false.
     *
     * Hash: 0x49B99BF3FDA89A7A | Since: 323 | API-Set: unknown
     */
    export function doesContextExistForThisPed(ped: number | IPed, speechName: string): boolean {
        return DoesContextExistForThisPed(ped, speechName, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x109697E2FFBAC8A1 | Since: 323 | API-Set: unknown
     */
    export function doesPlayerVehHaveRadio(): boolean {
        return DoesPlayerVehHaveRadio();
    }

    /**
     * Works for planes only.
     *
     * Hash: 0xC15907D667F7CFB2 | Since: 323 | API-Set: unknown
     */
    export function enableStallWarningSounds(vehicle: number | IVehicle, toggle: boolean): void {
        EnableStallWarningSounds(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB81CF134AEB56FFB | Since: 791 | API-Set: unknown
     */
    export function enableStuntJump(): void {
        EnableStuntJumpAudio();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2BE4BC731D039D5A | Since: 323 | API-Set: unknown
     */
    export function enableVehicleExhaustPops(vehicle: number | IVehicle, toggle: boolean): void {
        EnableVehicleExhaustPops(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C073274E065C6D2 | Since: 323 | API-Set: unknown
     */
    export function enableVehicleFanbeltDamage(vehicle: number | IVehicle, toggle: boolean): void {
        EnableVehicleFanbeltDamage(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D67489793FF428B | Since: 323 | API-Set: unknown
     */
    export function findRadioStationIndex(stationNameHash: number | string): number {
        if (typeof stationNameHash === 'string') stationNameHash = misc.getHashKey(stationNameHash)
        return FindRadioStationIndex(stationNameHash);
    }

    /**
     * Changes start time of a tracklist (milliseconds)
     * `R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)`
     *
     * Hash: 0x4E0AF9114608257C | Since: 2372 | API-Set: unknown
     */
    export function forceMusicTrackList(radioStation: string, trackListName: string, milliseconds: number): void {
        ForceMusicTrackList(radioStation, trackListName, milliseconds);
    }

    /**
     * No comment provided
     *
     * Hash: 0x062D5EAD4DA2FA6A | Since: 323 | API-Set: unknown
     */
    export function forcePedPanicWalla(): void {
        ForcePedPanicWalla();
    }

    /**
     * This native sets the audio of the specified vehicle to the audioName (p1).
     *
     * Use the audioNameHash found in vehicles.meta
     *
     * Example:
     * _SET_VEHICLE_AUDIO(veh, "ADDER");
     * The selected vehicle will now have the audio of the Adder.
     *
     * Hash: 0x4F0C413926060B38 | Since: 323 | API-Set: unknown
     */
    export function forceUseGameObject(vehicle: number | IVehicle, audioName: string): void {
        ForceUseAudioGameObject(vehicle, audioName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD57AAAE0E2214D11 | Since: 323 | API-Set: unknown
     */
    export function freezeMicrophone(): void {
        FreezeMicrophone();
    }

    /**
     * No comment provided
     *
     * Hash: 0x344F393B027E38C3 | Since: 323 | API-Set: unknown
     */
    export function freezeRadioStation(radioStation: string): void {
        FreezeRadioStation(radioStation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E203DA2BA15D436 | Since: 463 | API-Set: unknown
     */
    export function getAmbientVoiceNameHash(ped: number | IPed): number {
        return GetAmbientVoiceNameHash(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50B196FC9ED6545B | Since: 323 | API-Set: unknown
     */
    export function getAudibleMusicTrackTextId(): number {
        return GetAudibleMusicTrackTextId();
    }

    /**
     * No comment provided
     *
     * Hash: 0x480357EE890C295A | Since: 323 | API-Set: unknown
     */
    export function getCurrentScriptedConversationLine(): number {
        return GetCurrentScriptedConversationLine();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E65CDE5215832C1 | Since: 1493 | API-Set: unknown
     */
    export function getCurrentTrackPlayTime(radioStationName: string): number {
        return GetCurrentRadioTrackPlaybackTime(radioStationName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34D66BC058019CE0 | Since: 1493 | API-Set: unknown
     */
    export function getCurrentTrackSoundName(radioStationName: string): number {
        return GetCurrentTrackSoundName(radioStationName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD3AA743AB7D4D75 | Since: 3095 | API-Set: unknown
     */
    export function getCurrentTvShowPlayTime(): number {
        return Citizen.invokeNative('0xDD3AA743AB7D4D75');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE73364DB90778FFA | Since: 323 | API-Set: unknown
     */
    export function getIsPreloadedConversationReady(): boolean {
        return GetIsPreloadedConversationReady();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7A0D23DC414507B | Since: 323 | API-Set: unknown
     */
    export function getMusicPlaytime(): number {
        return GetMusicPlaytime();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A48AB4445D499BE | Since: 323 | API-Set: unknown
     */
    export function getMusicVolSlider(): number {
        return GetMusicVolSlider();
    }

    /**
     * Could this be used alongside either,
     * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
     *
     * Hash: 0x2DE3F0A134FFBC0D | Since: 323 | API-Set: unknown
     */
    export function getNetworkIdFromSoundId(soundId: number): number {
        return GetNetworkIdFromSoundId(soundId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC64A06D939F826F5 | Since: 1493 | API-Set: unknown
     */
    export function getNextAudibleBeat(): [boolean, number, number, number] {
        return GetNextAudibleBeat();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1620ECB50E01DE7 | Since: 323 | API-Set: unknown
     */
    export function getNumUnlockedRadioStations(): number {
        return GetNumUnlockedRadioStations();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA571991A7FE6CCEB | Since: 323 | API-Set: unknown
     */
    export function getPlayerRadioStationGenre(): number {
        return GetPlayerRadioStationGenre();
    }

    /**
     * Returns 255 (radio off index) if the function fails.
     *
     * Hash: 0xE8AF77C4C06ADC93 | Since: 323 | API-Set: unknown
     */
    export function getPlayerRadioStationIndex(): number {
        return GetPlayerRadioStationIndex();
    }

    /**
     * Returns active radio station name
     *
     * Hash: 0xF6D733C32076AD03 | Since: 323 | API-Set: unknown
     */
    export function getPlayerRadioStationName(): string {
        return GetPlayerRadioStationName();
    }

    /**
     * `Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.`
     *
     * Hash: 0xB28ECA15046CA8B9 | Since: 323 | API-Set: unknown
     */
    export function getRadioStationName(radioStation: number): string {
        return GetRadioStationName(radioStation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x430386FE9BF80B45 | Since: 323 | API-Set: unknown
     */
    export function getSoundId(): number {
        return GetSoundId();
    }

    /**
     * No comment provided
     *
     * Hash: 0x75262FD12D0A1C84 | Since: 323 | API-Set: unknown
     */
    export function getSoundIdFromNetworkId(netId: number): number {
        return GetSoundIdFromNetworkId(netId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E72BBDBCA58A3DB | Since: 323 | API-Set: unknown
     */
    export function getStreamPlayTime(): number {
        return GetStreamPlayTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA19F5572C38B564 | Since: 323 | API-Set: unknown
     */
    export function getVariationChosenForScriptedLine(): [number, any] {
        return GetVariationChosenForScriptedLine();
    }

    /**
     * Returns hash of default vehicle horn
     *
     * Hash is stored in audVehicleAudioEntity
     *
     * Hash: 0x02165D55000219AC | Since: 323 | API-Set: unknown
     */
    export function getVehicleDefaultHorn(vehicle: number | IVehicle): number {
        return GetVehicleDefaultHorn(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xACB5DCCA1EC76840 | Since: 323 | API-Set: unknown
     */
    export function getVehicleDefaultHornIgnoreMods(vehicle: number | IVehicle): number {
        return GetVehicleDefaultHornIgnoreMods(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD53F3A29BCE2580E | Since: 1365 | API-Set: unknown
     */
    export function getVehicleHornSoundIndex(vehicle: number | IVehicle): number {
        return GetVehicleHornSoundIndex(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x544810ED9DB6BBE6 | Since: 323 | API-Set: unknown
     */
    export function hasLoadedMpDataSet(): boolean {
        return HasLoadedMpDataSet();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B50ABB1FE3746F4 | Since: 323 | API-Set: unknown
     */
    export function hasLoadedSpDataSet(): boolean {
        return HasLoadedSpDataSet();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCBDCE714A7C88E5 | Since: 323 | API-Set: unknown
     */
    export function hasSoundFinished(soundId: number): boolean {
        return HasSoundFinished(soundId);
    }

    /**
     * p2 is always -1
     *
     * Hash: 0x8F8C0E370AE62F5C | Since: 323 | API-Set: unknown
     */
    export function hintAmbientBank(audioBank: string): boolean {
        return HintAmbientAudioBank(audioBank, false, undefined);
    }

    /**
     * p2 is always -1
     *
     * Hash: 0x40763EA7B9B783E7 | Since: 573 | API-Set: unknown
     */
    export function hintMissionBank(audioBank: string): boolean {
        return HintMissionAudioBank(audioBank, false, undefined);
    }

    /**
     * p2 is always -1
     *
     * Hash: 0xFB380A29641EC31A | Since: 323 | API-Set: unknown
     */
    export function hintScriptBank(audioBank: string): boolean {
        return HintScriptAudioBank(audioBank, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x950A154B8DAB6185 | Since: 323 | API-Set: unknown
     */
    export function initSynchSceneWithEntity(audioEvent: string, entity: number | IEntity): void {
        InitSynchSceneAudioWithEntity(audioEvent, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8EDE9BDBCCBA6D4 | Since: 323 | API-Set: unknown
     */
    export function initSynchSceneWithPosition(audioEvent: string, pos: Vector3): void {
        InitSynchSceneAudioWithPosition(audioEvent, pos.x, pos.y, pos.z);
    }

    /**
     * `Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");`
     * Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.
     *
     * Hash: 0xA018A12E5C5C2FA6 | Since: 323 | API-Set: unknown
     */
    export function interruptConversation(ped: number | IPed, voiceline: string, speaker: string): void {
        InterruptConversation(ped, voiceline, speaker);
    }

    /**
     * One call found in the b617d scripts:
     *
     * `AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0\/\*1\*\/]), "CONV_INTERRUPT_QUIT_IT", "LESTER");`
     *
     * Hash: 0x8A694D7A68F8DC38 | Since: 323 | API-Set: unknown
     */
    export function interruptConversationAndPause(ped: number | IPed, speaker: string): void {
        InterruptConversationAndPause(ped, undefined, speaker);
    }

    /**
     * Example:
     *
     * `bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");`
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0x226435CB96CCFC8C | Since: 323 | API-Set: unknown
     */
    export function isAlarmPlaying(alarmName: string): boolean {
        return IsAlarmPlaying(alarmName);
    }

    /**
     * Common in the scripts:
     * `AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());`
     *
     * Hash: 0x932C2D096A2C3FFF | Since: 323 | API-Set: unknown
     */
    export function isAmbientSpeechDisabled(ped: number | IPed): boolean {
        return IsAmbientSpeechDisabled(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9072C8B49907BFAD | Since: 323 | API-Set: unknown
     */
    export function isAmbientSpeechPlaying(ped: number | IPed): boolean {
        return IsAmbientSpeechPlaying(ped);
    }

    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0x01E2817A479A7F9B | Since: 323 | API-Set: unknown
     */
    export function isAmbientZoneEnabled(ambientZone: string): boolean {
        return IsAmbientZoneEnabled(ambientZone);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC265DF9FB44A9FBD | Since: 323 | API-Set: unknown
     */
    export function isAnimalVocalizationPlaying(pedHandle: number | IPed): boolean {
        return IsAnimalVocalizationPlaying(pedHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x30CA2EF91D15ADF8 | Since: 2189 | API-Set: unknown
     */
    export function isAnyPositionalSpeechPlaying(): boolean {
        return IsAnyPositionalSpeechPlaying();
    }

    /**
     * No comment provided
     *
     * Hash: 0x729072355FA39EC9 | Since: 323 | API-Set: unknown
     */
    export function isAnySpeechPlaying(ped: number | IPed): boolean {
        return IsAnySpeechPlaying(ped);
    }

    /**
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0xB65B60556E2A9225 | Since: 323 | API-Set: unknown
     */
    export function isSceneActive(scene: string): boolean {
        return IsAudioSceneActive(scene);
    }

    /**
     * Hardcoded to return 1
     *
     * Hash: 0x6D28DC1671E334FD | Since: 323 | API-Set: unknown
     */
    export function isGameInControlOfMusic(): boolean {
        return IsGameInControlOfMusic();
    }

    /**
     * Checks whether the horn of a vehicle is currently played.
     *
     * Hash: 0x9D6BFC12B05C6121 | Since: 323 | API-Set: unknown
     */
    export function isHornActive(vehicle: number | IVehicle): boolean {
        return IsHornActive(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19A30C23F5827F8A | Since: 323 | API-Set: unknown
     */
    export function isMissionCompletePlaying(): boolean {
        return IsMissionCompletePlaying();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F259F82D873B8B8 | Since: 323 | API-Set: unknown
     */
    export function isMissionCompleteReadyForUi(): boolean {
        return IsMissionCompleteReadyForUi();
    }

    /**
     * No comment provided
     *
     * Hash: 0x66E49BF55B4B1874 | Since: 323 | API-Set: unknown
     */
    export function isMissionNewsStoryUnlocked(newsStory: number): boolean {
        return IsMissionNewsStoryUnlocked(newsStory);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8B1B2425604CDD0 | Since: 323 | API-Set: unknown
     */
    export function isMobileInterferenceActive(): boolean {
        return IsMobileInterferenceActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7497D2CE2C30D24C | Since: 323 | API-Set: unknown
     */
    export function isMobilePhoneCallOngoing(): boolean {
        return IsMobilePhoneCallOngoing();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB35CE999E8EF317E | Since: 323 | API-Set: unknown
     */
    export function isMobilePhoneRadioActive(): boolean {
        return IsMobilePhoneRadioActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA097AB275061FB21 | Since: 323 | API-Set: unknown
     */
    export function isMusicOneshotPlaying(): boolean {
        return IsMusicOneshotPlaying();
    }

    /**
     * No comment provided
     *
     * Hash: 0x049E937F18F4020C | Since: 323 | API-Set: unknown
     */
    export function isPedInCurrentConversation(ped: number | IPed): boolean {
        return IsPedInCurrentConversation(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E8E5E20937E3137 | Since: 323 | API-Set: unknown
     */
    export function isPedRingtonePlaying(ped: number | IPed): boolean {
        return IsPedRingtonePlaying(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F43D83FD6738741 | Since: 323 | API-Set: unknown
     */
    export function isPlayerVehRadioEnable(): boolean {
        return IsPlayerVehRadioEnable();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0626A247D2405330 | Since: 323 | API-Set: unknown
     */
    export function isRadioFadedOut(): boolean {
        return IsRadioFadedOut();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA151A7394A214E65 | Since: 323 | API-Set: unknown
     */
    export function isRadioRetuning(): boolean {
        return IsRadioRetuning();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B1784DB08AFEA79 | Since: 2699 | API-Set: unknown
     */
    export function isRadioStationFavourited(radioStation: string): boolean {
        return IsRadioStationFavourited(radioStation);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF0D54BE7A776737 | Since: 323 | API-Set: unknown
     */
    export function isScriptedConversationLoaded(): boolean {
        return IsScriptedConversationLoaded();
    }

    /**
     * No comment provided
     *
     * Hash: 0x16754C556D2EDE3D | Since: 323 | API-Set: unknown
     */
    export function isScriptedConversationOngoing(): boolean {
        return IsScriptedConversationOngoing();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCC9AA18DCC7084F4 | Since: 323 | API-Set: unknown
     */
    export function isScriptedSpeechPlaying(p0: number | IPed): boolean {
        return IsScriptedSpeechPlaying(p0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD11FA52EB849D978 | Since: 323 | API-Set: unknown
     */
    export function isStreamPlaying(): boolean {
        return IsStreamPlaying();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5DB8010EE71FDEF2 | Since: 323 | API-Set: unknown
     */
    export function isVehicleAudiblyDamaged(vehicle: number | IVehicle): boolean {
        return IsVehicleAudiblyDamaged(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BE4BE946463F917 | Since: 505 | API-Set: unknown
     */
    export function isVehicleRadioOn(vehicle: number | IVehicle): boolean {
        return IsVehicleRadioOn(vehicle);
    }

    /**
     * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
     *
     * Hash: 0x651D3228960D08AF | Since: 505 | API-Set: unknown
     */
    export function linkStaticEmitterToEntity(emitterName: string, entity: number | IEntity): void {
        LinkStaticEmitterToEntity(emitterName, entity);
    }

    /**
     * Example:
     * `AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");`
     *
     * All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w
     *
     * Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
     *
     * soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x1F1F957154EC51DF | Since: 323 | API-Set: unknown
     */
    export function loadStream(streamName: string, soundSet: string): boolean {
        return LoadStream(streamName, soundSet);
    }

    /**
     * Example:
     * `AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");`
     *
     * Only called a few times in the scripts.
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x59C16B79F53B3712 | Since: 323 | API-Set: unknown
     */
    export function loadStreamWithStartOffset(streamName: string, startOffset: number, soundSet: string): boolean {
        return LoadStreamWithStartOffset(streamName, startOffset, soundSet);
    }

    /**
     * Disables the radio station (hides it from the radio wheel).
     *
     * Hash: 0x477D9DB48F889591 | Since: 1493 | API-Set: unknown
     */
    export function lockRadioStation(radioStationName: string, toggle: boolean): void {
        LockRadioStation(radioStationName, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF5E5EA2DCEEACF3 | Since: 2372 | API-Set: unknown
     */
    export function lockRadioStationTrackList(radioStation: string, trackListName: string): void {
        LockRadioStationTrackList(radioStation, trackListName);
    }

    /**
     * Sets audio flag "OverrideMicrophoneSettings"
     *
     * Hash: 0x75773E11BA459E90 | Since: 323 | API-Set: unknown
     */
    export function overrideMicrophoneSettings(hash: number | string, toggle: boolean): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        OverrideMicrophoneSettings(hash, toggle);
    }

    /**
     * Sets audio flag "OverridePlayerGroundMaterial"
     *
     * Hash: 0xD2CC78CD3D0B50F9 | Since: 323 | API-Set: unknown
     */
    export function overridePlayerGroundMaterial(hash: number | string, toggle: boolean): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        OverridePlayerGroundMaterial(hash, toggle);
    }

    /**
     * This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
     *
     * Hash: 0x13AD665062541A7E | Since: 323 | API-Set: unknown
     */
    export function overrideTrevorRage(voiceEffect: string): void {
        OverrideTrevorRage(voiceEffect);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2A9CDABCEA04BD6 | Since: 323 | API-Set: unknown
     */
    export function overrideUnderwaterStream(): void {
        OverrideUnderwaterStream(undefined, false);
    }

    /**
     * Overrides the vehicle's horn hash.
     * When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)
     *
     * vehicle - the vehicle whose horn should be overwritten
     *
     * Hash: 0x3CDC1E622CCE0356 | Since: 323 | API-Set: unknown
     */
    export function overrideVehHorn(vehicle: number | IVehicle, override: boolean, hornHash: number): void {
        OverrideVehHorn(vehicle, override, hornHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8530AD776CD72B12 | Since: 323 | API-Set: unknown
     */
    export function pauseScriptedConversation(): void {
        PauseScriptedConversation(false);
    }

    /**
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0xED640017ED337E45 | Since: 323 | API-Set: unknown
     */
    export function playAmbientSpeechFromPositionNative(speechName: string, voiceName: string, pos: Vector3, speechParam: string): void {
        PlayAmbientSpeechFromPositionNative(speechName, voiceName, pos.x, pos.y, pos.z, speechParam);
    }

    /**
     * Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
     * This native is works only when you call it on the ped with right model (ac_chop only ?)
     * Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
     *
     * Hash: 0xEE066C7006C49C0A | Since: 323 | API-Set: unknown
     */
    export function playAnimalVocalization(pedHandle: number | IPed, speechName: string): void {
        PlayAnimalVocalization(pedHandle, 0, speechName);
    }

    /**
     * Only call found in the b617d scripts:
     *
     * `AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");`
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0xCADA5A0D0702381E | Since: 323 | API-Set: unknown
     */
    export function playDeferredSoundFrontend(soundName: string, soundsetName: string): void {
        PlayDeferredSoundFrontend(soundName, soundsetName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD536C4D33DCC900 | Since: 323 | API-Set: unknown
     */
    export function playEndCreditsMusic(play: boolean): void {
        PlayEndCreditsMusic(play);
    }

    /**
     * Called 38 times in the scripts. There are 5 different audioNames used.
     * One unknown removed below.
     *
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");`
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");`
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");`
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");`
     *
     * Hash: 0xB138AAB8A70D3C69 | Since: 323 | API-Set: unknown
     */
    export function playMissionComplete(audioName: string): void {
        PlayMissionCompleteAudio(audioName);
    }

    /**
     * `Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);`
     *
     * Last 2 parameters always seem to be 0.
     *
     * EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
     *
     * Known Pain IDs
     * ________________________
     *
     * 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
     * 6 - Scream (Short)
     * 7 - Scared Scream (Kinda Long)
     * 8 - On Fire
     *
     *
     * Hash: 0xBC9AE166038A5CEC | Since: 323 | API-Set: unknown
     */
    export function playPain(ped: number | IPed, painID: number): void {
        PlayPain(ped, painID, 0, undefined);
    }

    /**
     * Plays ambient speech. See also _0x5C57B85D.
     *
     * See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.
     *
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0xC6941B4A3A8FBBB9 | Since: 323 | API-Set: unknown
     */
    export function playPedAmbientSpeechAndCloneNative(ped: number | IPed, speechName: string, speechParam: string): void {
        PlayPedAmbientSpeechAndCloneNative(ped, speechName, speechParam, undefined);
    }

    /**
     * Plays ambient speech. See also _0x444180DB.
     *
     * ped: The ped to play the ambient speech.
     * speechName: Name of the speech to play, eg. "GENERIC_HI".
     * speechParam: Can be one of the following:
     * SPEECH_PARAMS_STANDARD
     * SPEECH_PARAMS_ALLOW_REPEAT
     * SPEECH_PARAMS_BEAT
     * SPEECH_PARAMS_FORCE
     * SPEECH_PARAMS_FORCE_FRONTEND
     * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
     * SPEECH_PARAMS_FORCE_NORMAL
     * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
     * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
     * SPEECH_PARAMS_FORCE_SHOUTED
     * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
     * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
     * SPEECH_PARAMS_MEGAPHONE
     * SPEECH_PARAMS_HELI
     * SPEECH_PARAMS_FORCE_MEGAPHONE
     * SPEECH_PARAMS_FORCE_HELI
     * SPEECH_PARAMS_INTERRUPT
     * SPEECH_PARAMS_INTERRUPT_SHOUTED
     * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
     * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
     * SPEECH_PARAMS_INTERRUPT_NO_FORCE
     * SPEECH_PARAMS_INTERRUPT_FRONTEND
     * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
     * SPEECH_PARAMS_ADD_BLIP
     * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
     * SPEECH_PARAMS_ADD_BLIP_FORCE
     * SPEECH_PARAMS_ADD_BLIP_SHOUTED
     * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
     * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
     * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
     * SPEECH_PARAMS_SHOUTED
     * SPEECH_PARAMS_SHOUTED_CLEAR
     * SPEECH_PARAMS_SHOUTED_CRITICAL
     *
     * Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL
     *
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0x8E04FEDD28D42462 | Since: 323 | API-Set: unknown
     */
    export function playPedAmbientSpeechNative(ped: number | IPed, speechName: string, speechParam: string): void {
        PlayPedAmbientSpeechNative(ped, speechName, speechParam, undefined);
    }

    /**
     * This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
     *
     * EX (C#):
     * GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
     *
     * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
     *
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0x3523634255FC3318 | Since: 323 | API-Set: unknown
     */
    export function playPedAmbientSpeechWithVoiceNative(ped: number | IPed, speechName: string, voiceName: string, speechParam: string): void {
        PlayPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, false);
    }

    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny
     *
     * `AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);`
     * `AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);`
     *
     *
     * Hash: 0xF9E56683CA8E11A5 | Since: 323 | API-Set: unknown
     */
    export function playPedRingtone(ringtoneName: string, ped: number | IPed): void {
        PlayPedRingtone(ringtoneName, ped, false);
    }

    /**
     * Plays the given police radio message.
     *
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
     * Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
     *
     * Hash: 0xDFEBD56D9BD1EB16 | Since: 323 | API-Set: unknown
     */
    export function playPoliceReport(name: string): number {
        return PlayPoliceReport(name, 0);
    }

    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x7FF4944CC209192D | Since: 323 | API-Set: unknown
     */
    export function playSound(soundId: number, audioName: string, audioRef: string): void {
        PlaySound(soundId, audioName, audioRef, false, undefined, false);
    }

    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW
     *
     * gtaforums.com/topic/795622-audio-for-mods
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x8D8686B622B88120 | Since: 323 | API-Set: unknown
     */
    export function playSoundFromCoord(soundId: number, audioName: string, pos: Vector3, audioRef: string, isNetwork: boolean, range: number): void {
        PlaySoundFromCoord(soundId, audioName, pos.x, pos.y, pos.z, audioRef, isNetwork, range, false);
    }

    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0
     * No changes made in b678d.
     *
     * gtaforums.com/topic/795622-audio-for-mods
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0xE65F427EB70AB1ED | Since: 323 | API-Set: unknown
     */
    export function playSoundFromEntity(soundId: number, audioName: string, entity: number | IEntity, audioRef: string, isNetwork: boolean): void {
        PlaySoundFromEntity(soundId, audioName, entity, audioRef, isNetwork, undefined);
    }

    /**
     * Only used with "formation_flying_blips_soundset" and "biker_formation_blips_soundset".
     * p1 is always the model of p2
     *
     * Hash: 0x5B9853296731E88D | Since: 877 | API-Set: unknown
     */
    export function playSoundFromEntityHash(soundId: number, model: number | string, entity: number | IEntity, soundSetHash: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        if (typeof soundSetHash === 'string') soundSetHash = misc.getHashKey(soundSetHash)
        Citizen.invokeNative('0x5B9853296731E88D', soundId, model, entity, soundSetHash, undefined, undefined);
    }

    /**
     * List: https://pastebin.com/DCeRiaLJ
     *
     * All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x67C540AA08E4A6F5 | Since: 323 | API-Set: unknown
     */
    export function playSoundFrontend(soundId: number, audioName: string, audioRef: string): void {
        PlaySoundFrontend(soundId, audioName, audioRef, false);
    }

    /**
     * `Used with AUDIO::LOAD_STREAM`
     *
     * Example from finale_heist2b.c4:
     * `TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2\/\*14\*\/], l_4C8[2\/\*14\*\/]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);`
     * `PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2\/\*14\*\/]._f7, 0.0);`
     * `PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2\/\*14\*\/], 0, 0);`
     * `PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2\/\*14\*\/], 38, 1);`
     * `PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2\/\*14\*\/], 1);`
     * `if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {`
     * `AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0\/\*1\*\/]);`
     * }
     *
     * Hash: 0xEBAA9B64D76356FD | Since: 323 | API-Set: unknown
     */
    export function playStreamFromObject(_object: number | IObject): void {
        PlayStreamFromObject(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x89049DD63C08B5D1 | Since: 323 | API-Set: unknown
     */
    export function playStreamFromPed(ped: number | IPed): void {
        PlayStreamFromPed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x21442F412E8DE56B | Since: 323 | API-Set: unknown
     */
    export function playStreamFromPosition(pos: Vector3): void {
        PlayStreamFromPosition(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB70374A758007DFA | Since: 323 | API-Set: unknown
     */
    export function playStreamFromVehicle(vehicle: number | IVehicle): void {
        PlayStreamFromVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58FCE43488F9F5F4 | Since: 323 | API-Set: unknown
     */
    export function playStreamFrontend(): void {
        PlayStreamFrontend();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B2FD4560E55DD2D | Since: 323 | API-Set: unknown
     */
    export function playSynchronizedEvent(sceneID: number): boolean {
        return PlaySynchronizedAudioEvent(sceneID);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x62A456AA4769EF34 | Since: 323 | API-Set: unknown
     */
    export function playVehicleDoorCloseSound(vehicle: number | IVehicle, doorId: number): void {
        PlayVehicleDoorCloseSound(vehicle, doorId);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x3A539D52857EA82D | Since: 323 | API-Set: unknown
     */
    export function playVehicleDoorOpenSound(vehicle: number | IVehicle, doorId: number): void {
        PlayVehicleDoorOpenSound(vehicle, doorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3B3CAD6166916D87 | Since: 323 | API-Set: unknown
     */
    export function preloadScriptConversation(): void {
        PreloadScriptConversation(false, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6004BCB0E226AAEA | Since: 323 | API-Set: unknown
     */
    export function preloadScriptPhoneConversation(): void {
        PreloadScriptPhoneConversation(false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA4CEA6AE0000A7E | Since: 1180 | API-Set: unknown
     */
    export function preloadVehicleBank(vehicleModel: number | string): void {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        PreloadVehicleAudioBank(vehicleModel);
    }

    /**
     * Example:
     *
     * `bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");`
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0x9D74AE343DB65533 | Since: 323 | API-Set: unknown
     */
    export function prepareAlarm(alarmName: string): boolean {
        return PrepareAlarm(alarmName);
    }

    /**
     * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
     * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
     *
     * Hash: 0x1E5185B72EF5158A | Since: 323 | API-Set: unknown
     */
    export function prepareMusicEvent(eventName: string): boolean {
        return PrepareMusicEvent(eventName);
    }

    /**
     * p1 is always 0 in the scripts
     *
     * Hash: 0xC7ABCACA4985A766 | Since: 323 | API-Set: unknown
     */
    export function prepareSynchronizedEvent(audioEvent: string): boolean {
        return PrepareSynchronizedAudioEvent(audioEvent, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x029FE7CD1B7E2E75 | Since: 323 | API-Set: unknown
     */
    export function prepareSynchronizedEventForScene(sceneID: number, audioEvent: string): boolean {
        return PrepareSynchronizedAudioEventForScene(sceneID, audioEvent);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFBE20329593DEC9D | Since: 323 | API-Set: unknown
     */
    export function recordBrokenGlass(pos: Vector3, radius: number): void {
        RecordBrokenGlass(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D2BFAAB8D956E0E | Since: 573 | API-Set: unknown
     */
    export function refreshClosestOceanShoreline(): void {
        RefreshClosestOceanShoreline();
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xC6ED9D5092438D91 | Since: 323 | API-Set: unknown
     */
    export function registerScriptWith(): void {
        RegisterScriptWithAudio(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x65475A218FFAA93D | Since: 323 | API-Set: unknown
     */
    export function releaseAmbientBank(): void {
        ReleaseAmbientAudioBank();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EC92A1BF0857187 | Since: 323 | API-Set: unknown
     */
    export function releaseMissionBank(): void {
        ReleaseMissionAudioBank();
    }

    /**
     * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
     *
     * Hash: 0x77ED170667F50170 | Since: 323 | API-Set: unknown
     */
    export function releaseNamedScriptBank(audioBank: string): void {
        ReleaseNamedScriptAudioBank(audioBank);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A2D8AD0A9EB9C3F | Since: 323 | API-Set: unknown
     */
    export function releaseScriptBank(): void {
        ReleaseScriptAudioBank();
    }

    /**
     * No comment provided
     *
     * Hash: 0x353FC880830B88FA | Since: 323 | API-Set: unknown
     */
    export function releaseSoundId(soundId: number): void {
        ReleaseSoundId(soundId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCE4AC0439F607045 | Since: 323 | API-Set: unknown
     */
    export function releaseWeapon(): void {
        ReleaseWeaponAudio();
    }

    /**
     * No comment provided
     *
     * Hash: 0x18EB48CFC41F2EA0 | Since: 323 | API-Set: unknown
     */
    export function removeEntityFromMixGroup(entity: number | IEntity): void {
        RemoveEntityFromAudioMixGroup(entity, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EF105736194F80C | Since: 3570 | API-Set: unknown
     */
    export function removeIndividualPortalSettingsOverride(interiorNameHash: number | string, roomIndex: number, doorIndex: number): void {
        if (typeof interiorNameHash === 'string') interiorNameHash = misc.getHashKey(interiorNameHash)
        Citizen.invokeNative('0x8EF105736194F80C', interiorNameHash, roomIndex, doorIndex);
    }

    /**
     * Found in the b617d scripts, duplicates removed:
     *
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");`
     *
     * Hash: 0xB4BBFD9CD8B3922B | Since: 323 | API-Set: unknown
     */
    export function removePortalSettingsOverride(): void {
        RemovePortalSettingsOverride(undefined);
    }

    /**
     * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
     * Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
     * p2 is always -1
     *
     * Hash: 0xFE02FFBED8CA9D99 | Since: 323 | API-Set: unknown
     */
    export function requestAmbientBank(audioBank: string): boolean {
        return RequestAmbientAudioBank(audioBank, false, undefined);
    }

    /**
     * All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
     * Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
     * p2 is always -1
     *
     * Hash: 0x7345BDD95E62E0F2 | Since: 323 | API-Set: unknown
     */
    export function requestMissionBank(audioBank: string): boolean {
        return RequestMissionAudioBank(audioBank, false, undefined);
    }

    /**
     * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
     * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
     * p2 is always -1
     *
     * Hash: 0x2F844A8B08D76685 | Since: 323 | API-Set: unknown
     */
    export function requestScriptBank(audioBank: string): boolean {
        return RequestScriptAudioBank(audioBank, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4ADA3F19BE4A6047 | Since: 323 | API-Set: unknown
     */
    export function requestTennisBanks(ped: number | IPed): void {
        RequestTennisBanks(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF54BB7B61036F335 | Since: 323 | API-Set: unknown
     */
    export function resetPedFlags(ped: number | IPed): void {
        ResetPedAudioFlags(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE78503B10C4314E0 | Since: 323 | API-Set: unknown
     */
    export function resetTrevorRage(): void {
        ResetTrevorRage();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2DCCD8E16E20997 | Since: 323 | API-Set: unknown
     */
    export function resetVehicleStartupRevSound(vehicle: number | IVehicle): void {
        ResetVehicleStartupRevSound(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AEB285D1818C9AC | Since: 323 | API-Set: unknown
     */
    export function restartScriptedConversation(): void {
        RestartScriptedConversation();
    }

    /**
     * No comment provided
     *
     * Hash: 0x70B8EC8FC108A634 | Since: 323 | API-Set: unknown
     */
    export function scriptOverridesWindElevation(): void {
        ScriptOverridesWindElevation(false, undefined);
    }

    /**
     * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
     *
     * Hash: 0x395BF71085D1B1D9 | Since: 323 | API-Set: unknown
     */
    export function setAggressiveHorns(toggle: boolean): void {
        SetAggressiveHorns(toggle);
    }

    /**
     * Audio List
     * gtaforums.com/topic/795622-audio-for-mods/
     *
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ
     *
     * Hash: 0x6C8065A3B780185B | Since: 323 | API-Set: unknown
     */
    export function setAmbientVoiceName(ped: number | IPed, name: string): void {
        SetAmbientVoiceName(ped, name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A53DED9921DE990 | Since: 463 | API-Set: unknown
     */
    export function setAmbientVoiceNameHash(ped: number | IPed, hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        SetAmbientVoiceNameHash(ped, hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9748FA4DE50CCE3E | Since: 323 | API-Set: unknown
     */
    export function setAmbientZoneListState(ambientZone: string): void {
        SetAmbientZoneListState(ambientZone, false, false);
    }

    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0xF3638DAE8C4045E1 | Since: 323 | API-Set: unknown
     */
    export function setAmbientZoneListStatePersistent(ambientZone: string): void {
        SetAmbientZoneListStatePersistent(ambientZone, false, false);
    }

    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0xBDA07E5950085E46 | Since: 323 | API-Set: unknown
     */
    export function setAmbientZoneState(zoneName: string): void {
        SetAmbientZoneState(zoneName, false, false);
    }

    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0x1D6650420CEC9D3B | Since: 323 | API-Set: unknown
     */
    export function setAmbientZoneStatePersistent(ambientZone: string): void {
        SetAmbientZoneStatePersistent(ambientZone, false, false);
    }

    /**
     * mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
     *
     * Hash: 0xCC97B29285B1DC3B | Since: 323 | API-Set: unknown
     */
    export function setAnimalMood(animal: number | IPed, mood: number): void {
        SetAnimalMood(animal, mood);
    }

    /**
     * Possible flag names:
     * "ActivateSwitchWheelAudio"
     * "AllowAmbientSpeechInSlowMo"
     * "AllowCutsceneOverScreenFade"
     * "AllowForceRadioAfterRetune"
     * "AllowPainAndAmbientSpeechToPlayDuringCutscene"
     * "AllowPlayerAIOnMission"
     * "AllowPoliceScannerWhenPlayerHasNoControl"
     * "AllowRadioDuringSwitch"
     * "AllowRadioOverScreenFade"
     * "AllowScoreAndRadio"
     * "AllowScriptedSpeechInSlowMo"
     * "AvoidMissionCompleteDelay"
     * "DisableAbortConversationForDeathAndInjury"
     * "DisableAbortConversationForRagdoll"
     * "DisableBarks"
     * "DisableFlightMusic"
     * "DisableReplayScriptStreamRecording"
     * "EnableHeadsetBeep"
     * "ForceConversationInterrupt"
     * "ForceSeamlessRadioSwitch"
     * "ForceSniperAudio"
     * "FrontendRadioDisabled"
     * "HoldMissionCompleteWhenPrepared"
     * "IsDirectorModeActive"
     * "IsPlayerOnMissionForSpeech"
     * "ListenerReverbDisabled"
     * "LoadMPData"
     * "MobileRadioInGame"
     * "OnlyAllowScriptTriggerPoliceScanner"
     * "PlayMenuMusic"
     * "PoliceScannerDisabled"
     * "ScriptedConvListenerMaySpeak"
     * "SpeechDucksScore"
     * "SuppressPlayerScubaBreathing"
     * "WantedMusicDisabled"
     * "WantedMusicOnMission"
     *
     * -------------------------------
     * No added flag names between b393d and b573d, including b573d.
     *
     * #######################################################################
     *
     * "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
     *
     * -----------------------------------------------------------------------
     *
     * All flag IDs and hashes:
     *
     * ID: 00 | Hash: 0x0FED7A7F
     * ID: 01 | Hash: 0x20A7858F
     * ID: 02 | Hash: 0xA11C2259
     * ID: 03 | Hash: 0x08DE4700
     * ID: 04 | Hash: 0x989F652F
     * ID: 05 | Hash: 0x3C9E76BA
     * ID: 06 | Hash: 0xA805FEB0
     * ID: 07 | Hash: 0x4B94EA26
     * ID: 08 | Hash: 0x803ACD34
     * ID: 09 | Hash: 0x7C741226
     * ID: 10 | Hash: 0x31DB9EBD
     * ID: 11 | Hash: 0xDF386F18
     * ID: 12 | Hash: 0x669CED42
     * ID: 13 | Hash: 0x51F22743
     * ID: 14 | Hash: 0x2052B35C
     * ID: 15 | Hash: 0x071472DC
     * ID: 16 | Hash: 0xF9928BCC
     * ID: 17 | Hash: 0x7ADBDD48
     * ID: 18 | Hash: 0xA959BA1A
     * ID: 19 | Hash: 0xBBE89B60
     * ID: 20 | Hash: 0x87A08871
     * ID: 21 | Hash: 0xED1057CE
     * ID: 22 | Hash: 0x1584AD7A
     * ID: 23 | Hash: 0x8582CFCB
     * ID: 24 | Hash: 0x7E5E2FB0
     * ID: 25 | Hash: 0xAE4F72DB
     * ID: 26 | Hash: 0x5D16D1FA
     * ID: 27 | Hash: 0x06B2F4B8
     * ID: 28 | Hash: 0x5D4CDC96
     * ID: 29 | Hash: 0x8B5A48BA
     * ID: 30 | Hash: 0x98FBD539
     * ID: 31 | Hash: 0xD8CB0473
     * ID: 32 | Hash: 0x5CBB4874
     * ID: 33 | Hash: 0x2E9F93A9
     * ID: 34 | Hash: 0xD93BEA86
     * ID: 35 | Hash: 0x92109B7D
     * ID: 36 | Hash: 0xB7EC9E4D
     * ID: 37 | Hash: 0xCABDBB1D
     * ID: 38 | Hash: 0xB3FD4A52
     * ID: 39 | Hash: 0x370D94E5
     * ID: 40 | Hash: 0xA0F7938F
     * ID: 41 | Hash: 0xCBE1CE81
     * ID: 42 | Hash: 0xC27F1271
     * ID: 43 | Hash: 0x9E3258EB
     * ID: 44 | Hash: 0x551CDA5B
     * ID: 45 | Hash: 0xCB6D663C
     * ID: 46 | Hash: 0x7DACE87F
     * ID: 47 | Hash: 0xF9DE416F
     * ID: 48 | Hash: 0x882E6E9E
     * ID: 49 | Hash: 0x16B447E7
     * ID: 50 | Hash: 0xBD867739
     * ID: 51 | Hash: 0xA3A58604
     * ID: 52 | Hash: 0x7E046BBC
     * ID: 53 | Hash: 0xD95FDB98
     * ID: 54 | Hash: 0x5842C0ED
     * ID: 55 | Hash: 0x285FECC6
     * ID: 56 | Hash: 0x9351AC43
     * ID: 57 | Hash: 0x50032E75
     * ID: 58 | Hash: 0xAE6D0D59
     * ID: 59 | Hash: 0xD6351785
     * ID: 60 | Hash: 0xD25D71BC
     * ID: 61 | Hash: 0x1F7F6423
     * ID: 62 | Hash: 0xE24C3AA6
     * ID: 63 | Hash: 0xBFFDD2B7
     *
     * Hash: 0xB9EFD5C25018725A | Since: 323 | API-Set: unknown
     */
    export function setFlag(flagName: string, toggle: boolean): void {
        SetAudioFlag(flagName, toggle);
    }

    /**
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0xEF21A9EF089A2668 | Since: 323 | API-Set: unknown
     */
    export function setSceneVariable(scene: string, variable: string, value: number): void {
        SetAudioSceneVariable(scene, variable, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA5F377B175A699C5 | Since: 323 | API-Set: unknown
     */
    export function setScriptCleanupTime(time: number): void {
        SetAudioScriptCleanupTime(time);
    }

    /**
     * Needs to be called every frame.
     * Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
     *
     * Hash: 0x12561FCBB62D5B9C | Since: 323 | API-Set: unknown
     */
    export function setSpecialEffectMode(mode: number): void {
        SetAudioSpecialEffectMode(mode);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE5564483E407F914 | Since: 323 | API-Set: unknown
     */
    export function setVehiclePriority(vehicle: number | IVehicle): void {
        SetAudioVehiclePriority(vehicle, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B568201DD99F0EB | Since: 323 | API-Set: unknown
     */
    export function setConversationControlledByAnim(): void {
        SetConversationAudioControlledByAnim(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61631F5DF50D1C34 | Since: 323 | API-Set: unknown
     */
    export function setConversationPlaceholder(): void {
        SetConversationAudioPlaceholder(false);
    }

    /**
     * Examples:
     *
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);`
     *
     * Hash: 0x4E404A9361F75BB2 | Since: 323 | API-Set: unknown
     */
    export function setCustomRadioTrackList(radioStation: string, trackListName: string): void {
        SetCustomRadioTrackList(radioStation, trackListName, false);
    }

    /**
     * All occurrences found in b617d, sorted alphabetically and identical lines removed:
     *
     * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");`
     * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");`
     * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");`
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x3B4BF5F0859204D9 | Since: 323 | API-Set: unknown
     */
    export function setCutsceneOverride(name: string): void {
        SetCutsceneAudioOverride(name);
    }

    /**
     * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
     *
     * Hash: 0xACF57305B12AF907 | Since: 323 | API-Set: unknown
     */
    export function setEmitterRadioStation(emitterName: string, radioStation: string): void {
        SetEmitterRadioStation(emitterName, radioStation, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x892B6AB8F33606F5 | Since: 323 | API-Set: unknown
     */
    export function setEntityForNullConvPed(entity: number | IEntity): void {
        SetEntityForNullConvPed(0, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF7F26C6E9CC9EBB8 | Since: 323 | API-Set: unknown
     */
    export function setFrontendRadioActive(active: boolean): void {
        SetFrontendRadioActive(active);
    }

    /**
     * No comment provided
     *
     * Hash: 0x159B7318403A1CD8 | Since: 1103 | API-Set: unknown
     */
    export function setGlobalRadioSignalLevel(): void {
        SetGlobalRadioSignalLevel(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3BD3F52BA9B1E4E8 | Since: 323 | API-Set: unknown
     */
    export function setGpsActive(active: boolean): void {
        SetGpsActive(active);
    }

    /**
     * No comment provided
     *
     * Hash: 0x76D683C108594D0E | Since: 323 | API-Set: unknown
     */
    export function setHornEnabled(vehicle: number | IVehicle, toggle: boolean): void {
        SetHornEnabled(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C11908013EA4715 | Since: 323 | API-Set: unknown
     */
    export function setHornPermanentlyOn(vehicle: number | IVehicle): void {
        SoundVehicleHornThisFrame(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D3AF56E94C9AE98 | Since: 323 | API-Set: unknown
     */
    export function setHornPermanentlyOnTime(vehicle: number | IVehicle, time: number): void {
        Citizen.invokeNative('0x9D3AF56E94C9AE98', vehicle, time);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9D623C5A3D8FD5D | Since: 3570 | API-Set: unknown
     */
    export function setIndividualPortalSettingsOverride(interiorNameHash: number | string, roomIndex: number, doorIndex: number, newPortalSettingsName: string): void {
        if (typeof interiorNameHash === 'string') interiorNameHash = misc.getHashKey(interiorNameHash)
        Citizen.invokeNative('0xC9D623C5A3D8FD5D', interiorNameHash, roomIndex, doorIndex, newPortalSettingsName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88795F13FACDA88D | Since: 323 | API-Set: unknown
     */
    export function setInitialPlayerStation(radioStation: string): void {
        SetInitialPlayerStation(radioStation);
    }

    /**
     * This native controls where the game plays audio from. By default the microphone is positioned on the player.
     * When p0 is true the game will play audio from the 3 positions inputted.
     * It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
     * The scripts mostly use it with only one position such as in fbi3.c:
     * `AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));`
     *
     * Hash: 0xB6AE90EDDE95C762 | Since: 323 | API-Set: unknown
     */
    export function setMicrophonePosition(toggle: boolean, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number): void {
        SetMicrophonePosition(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF286C554784F3DF | Since: 323 | API-Set: unknown
     */
    export function setMobilePhoneRadioState(state: boolean): void {
        SetMobilePhoneRadioState(state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1098355A16064BB3 | Since: 323 | API-Set: unknown
     */
    export function setMobileRadioEnabledDuringGameplay(toggle: boolean): void {
        SetMobileRadioEnabledDuringGameplay(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x55ECF4D13D9903B0 | Since: 1868 | API-Set: unknown
     */
    export function setNextRadioTrack(radioName: string, radioTrack: string): void {
        Citizen.invokeNative('0x55ECF4D13D9903B0', radioName, radioTrack, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB542DE8C3D1CB210 | Since: 323 | API-Set: unknown
     */
    export function setNoDuckingForConversation(): void {
        Citizen.invokeNative('0xB542DE8C3D1CB210', false);
    }

    /**
     * Enables/disables ped's "quiet" footstep sound.
     *
     * Hash: 0x29DA3CA8D8B2692D | Since: 1493 | API-Set: unknown
     */
    export function setPedClothEventsEnabled(ped: number | IPed, toggle: boolean): void {
        SetPedClothEventsEnabled(ped, toggle);
    }

    /**
     * Enables/disables ped's "loud" footstep sound.
     *
     * Hash: 0x0653B735BFBDFE87 | Since: 1493 | API-Set: unknown
     */
    export function setPedFootstepsEventsEnabled(ped: number | IPed, toggle: boolean): void {
        SetPedAudioFootstepLoud(ped, toggle);
    }

    /**
     * BOOL p1: 0 = Female; 1 = Male
     *
     * Hash: 0xA5342D390CDA41D6 | Since: 323 | API-Set: unknown
     */
    export function setPedGender(ped: number | IPed): void {
        SetPedAudioGender(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8BF907833BE275DE | Since: 323 | API-Set: unknown
     */
    export function setPedInteriorWallaDensity(): void {
        Citizen.invokeNative('0x8BF907833BE275DE', 0, 0);
    }

    /**
     * Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
     *
     * ====================================================
     *
     * As mentioned above, this only sets the drunk sound to ped/player.
     *
     * To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
     *
     * Below is an example
     *
     * if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
     * {
     * Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
     * }
     * Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
     *
     *
     *
     * And to stop the effect use
     * RESET_PED_MOVEMENT_CLIPSET
     *
     * Hash: 0x95D2D383D5396B8A | Since: 323 | API-Set: unknown
     */
    export function setPedIsDrunk(ped: number | IPed, toggle: boolean): void {
        SetPedIsDrunk(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B7ABE26CBCBF8C7 | Since: 372 | API-Set: unknown
     */
    export function setPedRaceAndVoiceGroup(ped: number | IPed, voiceGroup: number | string): void {
        if (typeof voiceGroup === 'string') voiceGroup = misc.getHashKey(voiceGroup)
        SetPedRaceAndVoiceGroup(ped, 0, voiceGroup);
    }

    /**
     * Assigns some ambient voice to the ped.
     *
     * Hash: 0x40CF0D12D142A9E8 | Since: 323 | API-Set: unknown
     */
    export function setPedVoiceFull(ped: number | IPed): void {
        SetPedVoiceFull(ped);
    }

    /**
     * From the scripts:
     *
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));`
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));`
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));`
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));`
     *
     * Hash: 0x7CDC8C3B89F661B3 | Since: 323 | API-Set: unknown
     */
    export function setPedVoiceGroup(ped: number | IPed, voiceGroupHash: number | string): void {
        if (typeof voiceGroupHash === 'string') voiceGroupHash = misc.getHashKey(voiceGroupHash)
        SetPedVoiceGroup(ped, voiceGroupHash);
    }

    /**
     * Dat151RelType == 29
     *
     * Hash: 0x0BABC1345ABBFB16 | Since: 2699 | API-Set: unknown
     */
    export function setPedVoiceGroupFromRaceToPvg(ped: number | IPed, voiceGroupHash: number | string): void {
        if (typeof voiceGroupHash === 'string') voiceGroupHash = misc.getHashKey(voiceGroupHash)
        SetPedVoiceGroupRace(ped, voiceGroupHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x149AEE66F0CB3A99 | Since: 323 | API-Set: unknown
     */
    export function setPedWallaDensity(): void {
        SetPedWallaDensity(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA241BB04110F091 | Since: 323 | API-Set: unknown
     */
    export function setPlayerAngry(ped: number | IPed, toggle: boolean): void {
        SetPlayerAngry(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6FDDAD856E36988A | Since: 323 | API-Set: unknown
     */
    export function setPlayerVehicleAlarmActive(vehicle: number | IVehicle, toggle: boolean): void {
        SetPlayerVehicleAlarmAudioActive(vehicle, toggle);
    }

    /**
     * Found in the b617d scripts, duplicates removed:
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");`
     *
     * Hash: 0x044DBAD7A7FA2BE5 | Since: 323 | API-Set: unknown
     */
    export function setPortalSettingsOverride(): void {
        SetPortalSettingsOverride(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA07819E452FFE8F | Since: 505 | API-Set: unknown
     */
    export function setPositionedPlayerVehicleRadioEmitterEnabled(): void {
        SetPositionedPlayerVehicleRadioEmitterEnabled(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33E3C6C6F2F0B506 | Since: 323 | API-Set: unknown
     */
    export function setPositionForNullConvPed(): void {
        SetPositionForNullConvPed(undefined, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1AA9F53CE982990 | Since: 323 | API-Set: unknown
     */
    export function setRadioAutoUnfreeze(toggle: boolean): void {
        SetRadioAutoUnfreeze(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C96CDB04FCA358E | Since: 323 | API-Set: unknown
     */
    export function setRadioFrontendFadeTime(fadeTime: number): void {
        SetRadioFrontendFadeTime(fadeTime);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x02E93C796ABD3A97 | Since: 323 | API-Set: unknown
     */
    export function setRadioPositionMute(): void {
        Citizen.invokeNative('0x02E93C796ABD3A97', false);
    }

    /**
     * Tune Backwards...
     *
     * Hash: 0xDD6BCF9E94425DF9 | Since: 323 | API-Set: unknown
     */
    export function setRadioRetuneDown(): void {
        Citizen.invokeNative('0xDD6BCF9E94425DF9');
    }

    /**
     * Tune Forward...
     *
     * Hash: 0xFF266D1D0EB1195D | Since: 323 | API-Set: unknown
     */
    export function setRadioRetuneUp(): void {
        Citizen.invokeNative('0xFF266D1D0EB1195D');
    }

    /**
     * Doesn't have an effect in Story Mode.
     *
     * Hash: 0x4CAFEBFA21EC188D | Since: 2372 | API-Set: unknown
     */
    export function setRadioStationAsFavourite(radioStation: string, toggle: boolean): void {
        SetRadioStationIsVisible(radioStation, toggle);
    }

    /**
     * 6 calls in the b617d scripts, removed identical lines:
     *
     * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);`
     * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);`
     * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);`
     *
     * Hash: 0x774BD811F656A122 | Since: 323 | API-Set: unknown
     */
    export function setRadioStationMusicOnly(radioStation: string, toggle: boolean): void {
        SetRadioStationMusicOnly(radioStation, toggle);
    }

    /**
     * Sets radio station by index.
     *
     * Hash: 0xA619B168B8A8570F | Since: 323 | API-Set: unknown
     */
    export function setRadioToStationIndex(radioStation: number): void {
        SetRadioToStationIndex(radioStation);
    }

    /**
     * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
     * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
     *
     * Hash: 0xC69EDA28699D5107 | Since: 323 | API-Set: unknown
     */
    export function setRadioToStationName(stationName: string): void {
        SetRadioToStationName(stationName);
    }

    /**
     * Only found this one in the decompiled scripts:
     *
     * `AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");`
     *
     *
     * Hash: 0xB39786F201FEE30B | Since: 323 | API-Set: unknown
     */
    export function setRadioTrack(radioStation: string, radioTrack: string): void {
        SetRadioTrack(radioStation, radioTrack);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CB0075110BE1E56 | Since: 1493 | API-Set: unknown
     */
    export function setRadioTrackWithStartOffset(radioStationName: string, mixName: string): void {
        SetRadioTrackMix(radioStationName, mixName, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06C0023BED16DD6B | Since: 323 | API-Set: unknown
     */
    export function setScriptUpdateDoor(doorHash: number | string, toggle: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        SetScriptUpdateDoorAudio(doorHash, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF584CF8529B51434 | Since: 2372 | API-Set: unknown
     */
    export function setSirenBypassMpDriverCheck(vehicle: number | IVehicle, toggle: boolean): void {
        SetSirenKeepOn(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43FA0DFC5DF87815 | Since: 323 | API-Set: unknown
     */
    export function setSirenCanBeControlledBy(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x43FA0DFC5DF87815', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1FEF0683B96EBCF2 | Since: 323 | API-Set: unknown
     */
    export function setSirenWithNoDriver(vehicle: number | IVehicle, toggle: boolean): void {
        SetSirenWithNoDriver(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEF34B1D9624D5DD | Since: 323 | API-Set: unknown
     */
    export function setSkipMinigunSpinUp(): void {
        Citizen.invokeNative('0xBEF34B1D9624D5DD', false);
    }

    /**
     * Example:
     * `AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);`
     *
     * This turns off surrounding sounds not connected directly to peds.
     *
     * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
     *
     * Hash: 0x399D2D3B33F1B8EB | Since: 323 | API-Set: unknown
     */
    export function setStaticEmitterEnabled(emitterName: string, toggle: boolean): void {
        SetStaticEmitterEnabled(emitterName, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19F21E63AE6EAE4E | Since: 323 | API-Set: unknown
     */
    export function setUserRadioControlEnabled(toggle: boolean): void {
        SetUserRadioControlEnabled(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAD6B3148A78AE9B6 | Since: 323 | API-Set: unknown
     */
    export function setVariableOnSound(soundId: number, variable: string): void {
        SetVariableOnSound(soundId, variable, 0);
    }

    /**
     * From the scripts, p0:
     *
     * "ArmWrestlingIntensity",
     * "INOUT",
     * "Monkey_Stream",
     * "ZoomLevel"
     *
     * Hash: 0x2F9D3834AEB9EF79 | Since: 323 | API-Set: unknown
     */
    export function setVariableOnStream(variable: string): void {
        SetVariableOnStream(variable, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCC29F935ED07688 | Since: 323 | API-Set: unknown
     */
    export function setVariableOnSynchScene(variableName: string, value: number): void {
        SetVariableOnCutsceneAudio(variableName, value);
    }

    /**
     * `AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);`
     * `AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);`
     *
     * Hash: 0x733ADF241531E5C2 | Since: 323 | API-Set: unknown
     */
    export function setVariableOnUnderWaterStream(variableName: string, value: number): void {
        SetVariableOnUnderWaterStream(variableName, value);
    }

    /**
     * intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
     * Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
     *
     * Hash: 0x01BB4D577D38BD9E | Since: 323 | API-Set: unknown
     */
    export function setVehicleBodyDamageFactor(vehicle: number | IVehicle, intensity: number): void {
        SetVehicleAudioBodyDamageFactor(vehicle, intensity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x59E7B488451F4D3A | Since: 323 | API-Set: unknown
     */
    export function setVehicleEngineDamageFactor(vehicle: number | IVehicle, damageFactor: number): void {
        SetVehicleAudioEngineDamageFactor(vehicle, damageFactor);
    }

    /**
     * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
     * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
     *
     * Will give a boost-soundeffect.
     *
     * Hash: 0x4A04DE7CAB2739A1 | Since: 323 | API-Set: unknown
     */
    export function setVehicleBoostActive(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleBoostActive(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58BB377BEC7CD5F4 | Since: 323 | API-Set: unknown
     */
    export function setVehicleConversationsPersist(): void {
        Citizen.invokeNative('0x58BB377BEC7CD5F4', false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9BD7BD55E4533183 | Since: 1290 | API-Set: unknown
     */
    export function setVehicleConversationsPersistNew(): void {
        Citizen.invokeNative('0x9BD7BD55E4533183', false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97FFB4ADEED08066 | Since: 2372 | API-Set: unknown
     */
    export function setVehicleForceReverseWarning(): void {
        Citizen.invokeNative('0x97FFB4ADEED08066', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0350E7E17BA767D0 | Since: 1365 | API-Set: unknown
     */
    export function setVehicleHornSoundIndex(vehicle: number | IVehicle, value: number): void {
        SetVehicleHornVariation(vehicle, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3365489E0DD50F9 | Since: 323 | API-Set: unknown
     */
    export function setVehicleMissileWarningEnabled(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xF3365489E0DD50F9', vehicle, toggle);
    }

    /**
     * can't seem to enable radio on cop cars etc
     *
     * Hash: 0x3B988190C0AA6C0B | Since: 323 | API-Set: unknown
     */
    export function setVehicleRadioEnabled(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleRadioEnabled(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB6F1CAEC68B0BCE | Since: 323 | API-Set: unknown
     */
    export function setVehicleRadioLoud(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleRadioLoud(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1F8157B8C3F171C | Since: 323 | API-Set: unknown
     */
    export function setVehicleStartupRevSound(vehicle: number | IVehicle): void {
        SetVehicleStartupRevSound(vehicle, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1805D05E6D4FE10 | Since: 323 | API-Set: unknown
     */
    export function setVehForcedRadioThisFrame(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xC1805D05E6D4FE10', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E45765F3FBB582F | Since: 2372 | API-Set: unknown
     */
    export function setVehHasNormalRadio(vehicle: number | IVehicle): void {
        SetVehHasRadioOverride(vehicle);
    }

    /**
     * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
     * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
     *
     * Hash: 0x1B9C0099CB942AC6 | Since: 323 | API-Set: unknown
     */
    export function setVehRadioStation(vehicle: number | IVehicle, radioStation: string): void {
        SetVehRadioStation(vehicle, radioStation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6DDBBDD98E2E9C25 | Since: 323 | API-Set: unknown
     */
    export function skipRadioForward(): void {
        SkipRadioForward();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9663FE6B7A61EB00 | Since: 323 | API-Set: unknown
     */
    export function skipToNextScriptedConversationLine(): void {
        SkipToNextScriptedConversationLine();
    }

    /**
     * Example:
     *
     * This will start the alarm at Fort Zancudo.
     *
     * `AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);`
     *
     * First parameter (char) is the name of the alarm.
     * Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
     *
     * ----------
     *
     * It DOES make a difference but it has to do with the duration or something I dunno yet
     *
     * ----------
     *
     * Found in the b617d scripts:
     *
     * `AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);`
     * `AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);`
     * `AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);`
     * `AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);`
     * `AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);`
     * `AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);`
     * `AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);`
     * `AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);`
     * `AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);`
     * `AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);`
     * `AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);`
     * `AUDIO::START_ALARM("PRISON_ALARMS", 0);`
     * `AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);`
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0x0355EF116C4C97B2 | Since: 323 | API-Set: unknown
     */
    export function startAlarm(alarmName: string): void {
        StartAlarm(alarmName, false);
    }

    /**
     * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
     *
     * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0x013A80FC08F6E4F2 | Since: 323 | API-Set: unknown
     */
    export function startScene(scene: string): boolean {
        return StartAudioScene(scene);
    }

    /**
     * No comment provided
     *
     * Hash: 0x23641AFE870AF385 | Since: 323 | API-Set: unknown
     */
    export function startPreloadedConversation(): void {
        StartPreloadedConversation();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B17C62C9635D2DC | Since: 323 | API-Set: unknown
     */
    export function startScriptConversation(): void {
        StartScriptConversation(false, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x252E5F915EABB675 | Since: 323 | API-Set: unknown
     */
    export function startScriptPhoneConversation(): void {
        StartScriptPhoneConversation(false, false);
    }

    /**
     * Example:
     *
     * This will stop the alarm at Fort Zancudo.
     *
     * `AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);`
     *
     * First parameter (char) is the name of the alarm.
     * Second parameter (bool) has to be true (1) to have any effect.
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0xA1CADDCD98415A41 | Since: 323 | API-Set: unknown
     */
    export function stopAlarm(alarmName: string, toggle: boolean): void {
        StopAlarm(alarmName, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F794A877ADD4C92 | Since: 323 | API-Set: unknown
     */
    export function stopAllAlarms(stop: boolean): void {
        StopAllAlarms(stop);
    }

    /**
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0xDFE8422B3B94E688 | Since: 323 | API-Set: unknown
     */
    export function stopScene(scene: string): void {
        StopAudioScene(scene);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAC7FC81A75EC1A1 | Since: 323 | API-Set: unknown
     */
    export function stopScenes(): void {
        StopAudioScenes();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8BEC0CA6F0EDB0F | Since: 323 | API-Set: unknown
     */
    export function stopCurrentPlayingAmbientSpeech(ped: number | IPed): void {
        StopCurrentPlayingAmbientSpeech(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A73D05A607734C7 | Since: 323 | API-Set: unknown
     */
    export function stopCurrentPlayingSpeech(ped: number | IPed): void {
        StopCurrentPlayingSpeech(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x806058BBDC136E06 | Since: 323 | API-Set: unknown
     */
    export function stopCutscene(): void {
        StopCutsceneAudio();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6C5AE23EFA885092 | Since: 323 | API-Set: unknown
     */
    export function stopPedRingtone(ped: number | IPed): void {
        StopPedRingtone(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D64D7405520E3D3 | Since: 323 | API-Set: unknown
     */
    export function stopPedSpeaking(ped: number | IPed, shaking: boolean): void {
        StopPedSpeaking(ped, shaking);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAB6781A5F3101470 | Since: 1868 | API-Set: unknown
     */
    export function stopPedSpeakingSynced(ped: number | IPed): void {
        StopPedSpeakingSynced(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD79DEEFB53455EBA | Since: 323 | API-Set: unknown
     */
    export function stopScriptedConversation(): number {
        return StopScriptedConversation(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4E6DD5566D28C82 | Since: 323 | API-Set: unknown
     */
    export function stopSmokeGrenadeExplosionSounds(): void {
        StopSmokeGrenadeExplosionSounds();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA3B0C41BA5CC0BB5 | Since: 323 | API-Set: unknown
     */
    export function stopSound(soundId: number): void {
        StopSound(soundId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA4718A1419D18151 | Since: 323 | API-Set: unknown
     */
    export function stopStream(): void {
        StopStream();
    }

    /**
     * No comment provided
     *
     * Hash: 0x92D6A88E64A94430 | Since: 323 | API-Set: unknown
     */
    export function stopSynchronizedEvent(sceneID: number): boolean {
        return StopSynchronizedAudioEvent(sceneID);
    }

    /**
     * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W
     *
     * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
     * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
     *
     * Hash: 0x706D57B0F50DA710 | Since: 323 | API-Set: unknown
     */
    export function triggerMusicEvent(eventName: string): boolean {
        return TriggerMusicEvent(eventName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66C3FB05206041BA | Since: 1290 | API-Set: unknown
     */
    export function triggerSiren(vehicle: number | IVehicle): void {
        TriggerSiren(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2ACABED337622DF2 | Since: 1493 | API-Set: unknown
     */
    export function unblockSpeechContextGroup(): void {
        UnblockSpeechContextGroup(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC00454CF60B91DD | Since: 323 | API-Set: unknown
     */
    export function unfreezeRadioStation(radioStation: string): void {
        UnfreezeRadioStation(radioStation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19AF7ED9B9D23058 | Since: 323 | API-Set: unknown
     */
    export function unhintAmbientBank(): void {
        Citizen.invokeNative('0x19AF7ED9B9D23058');
    }

    /**
     * No comment provided
     *
     * Hash: 0x11579D940949C49E | Since: 678 | API-Set: unknown
     */
    export function unhintNamedScriptBank(audioBank: string): void {
        Citizen.invokeNative('0x11579D940949C49E', audioBank);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AC92EED5E4793AB | Since: 323 | API-Set: unknown
     */
    export function unhintScriptBank(): void {
        Citizen.invokeNative('0x9AC92EED5E4793AB');
    }

    /**
     * "news" that play on the radio after you've done something in story mode(?)
     *
     * Hash: 0xB165AB7C248B2DC1 | Since: 323 | API-Set: unknown
     */
    export function unlockMissionNewsStory(newsStory: number): void {
        UnlockMissionNewsStory(newsStory);
    }

    /**
     * `AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");`
     *
     * Hash: 0x031ACB6ABA18C729 | Since: 323 | API-Set: unknown
     */
    export function unlockRadioStationTrackList(radioStation: string, trackListName: string): void {
        UnlockRadioStationTrackList(radioStation, trackListName);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xA8638BE228D4751A | Since: 323 | API-Set: unknown
     */
    export function unregisterScriptWith(): void {
        UnregisterScriptWithAudio();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0150B6FF25A9E2E5 | Since: 323 | API-Set: unknown
     */
    export function unrequestTennisBanks(): void {
        UnrequestTennisBanks();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7EC3C679D0E7E46B | Since: 678 | API-Set: unknown
     */
    export function updateSoundCoord(soundId: number, pos: Vector3): void {
        UpdateSoundCoord(soundId, pos.x, pos.y, pos.z);
    }

    /**
     * Just a nullsub (i.e. does absolutely nothing) since build 1604.
     *
     * Hash: 0x47AED84213A47510 | Since: 1493 | API-Set: unknown
     */
    export function updateUnlockableDjRadioTracks(enableMixes: boolean): void {
        UpdateUnlockableDjRadioTracks(enableMixes);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF4DC1784BE94DFA | Since: 323 | API-Set: unknown
     */
    export function useFootstepScriptSweeteners(ped: number | IPed, hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        UseFootstepScriptSweeteners(ped, false, hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA932DE350266EF8 | Since: 323 | API-Set: unknown
     */
    export function useSirenAsHorn(vehicle: number | IVehicle, toggle: boolean): void {
        UseSirenAsHorn(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEFB80290414FD4F | Since: 3095 | API-Set: unknown
     */
    export function enableDragRaceStationaryWarningSounds(vehicle: number | IVehicle, enable: boolean): void {
        Citizen.invokeNative('0xBEFB80290414FD4F', vehicle, enable);
    }

    /**
     * Called together with SET_VEHICLE_TYRES_CAN_BURST
     *
     * Hash: 0xEB7D0E1FCC8FE17A | Since: 3258 | API-Set: unknown
     */
    export function forceVehicleEngineSynth(vehicle: number | IVehicle, force: boolean): void {
        ForceVehicleEngineSynth(vehicle, force);
    }

}


export namespace entity {
    /**
     * Returns entity's archetype name, if available.
     *
     * Hash: 0x47B870F5 | Since: unknown | API-Set: client
     */
    export function getArchetypeName(entity: number | IEntity): string {
        return GetEntityArchetypeName(entity);
    }

    /**
     * Returns the transient entity index for a specified mapdata/entity pair.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xEE43540D | Since: unknown | API-Set: client
     */
    export function getIndexFromMapdata(mapdata: number, entity: number): number {
        return GetEntityIndexFromMapdata(mapdata, entity);
    }

    /**
     * Retrieves the map data and entity handles from a specific entity.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xF6B815C5 | Since: unknown | API-Set: client
     */
    export function getMapdataOwner(entity: number | IEntity): [boolean, number, number] {
        return GetEntityMapdataOwner(entity);
    }

    /**
     * Resets mapdata entity transform matrix to its original state.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x8143FA4F | Since: unknown | API-Set: client
     */
    export function resetMapdataMatrix(mapDataHash: number, entityInternalIdx: number): boolean {
        return ResetMapdataEntityMatrix(mapDataHash, entityInternalIdx);
    }

    /**
     * Gets the selected entity at the current mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x3DD8130F | Since: unknown | API-Set: client
     */
    export function selectAtCursor(hitFlags: number, precise: boolean): number {
        return SelectEntityAtCursor(hitFlags, precise);
    }

    /**
     * Gets the selected entity at the specified mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xAFE8D405 | Since: unknown | API-Set: client
     */
    export function selectAtPos(fracX: number, fracY: number, hitFlags: number, precise: boolean): number {
        return SelectEntityAtPos(fracX, fracY, hitFlags, precise);
    }

    /**
     * Sets an entity's matrix. Arguments are in the same order as with GET_ENTITY_MATRIX.
     *
     * Hash: 0xFB0639B | Since: unknown | API-Set: client
     */
    export function setMatrix(entity: number | IEntity, forwardX: number, forwardY: number, forwardZ: number, rightX: number, rightY: number, rightZ: number, upX: number, upY: number, upZ: number, atX: number, atY: number, atZ: number): void {
        SetEntityMatrix(entity, forwardX, forwardY, forwardZ, rightX, rightY, rightZ, upX, upY, upZ, atX, atY, atZ);
    }

    /**
     * A getter for [FREEZE_ENTITY_POSITION](#\_0x428CA6DBD1094446).
     *
     * Hash: 0xEDBE6ADD | Since: unknown | API-Set: shared
     */
    export function isPositionFrozen(entity: number | IEntity): boolean {
        return IsEntityPositionFrozen(entity);
    }

    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Returns the memory address of an entity.
     *
     * This native is intended for singleplayer debugging, and may not be available during multiplayer.
     *
     * Hash: 0x9A3144BC | Since: unknown | API-Set: client
     */
    export function getAddress(entity: number | IEntity): any {
        return GetEntityAddress(entity);
    }

    /**
     * Internal function for ensuring an entity has a state bag.
     *
     * Hash: 0x3BB78F05 | Since: unknown | API-Set: shared
     */
    export function ensureStateBag(entity: number | IEntity): void {
        EnsureEntityStateBag(entity);
    }

    /**
     * ### Supported types
     *
     * *   \[1] : Peds (including animals) and players.
     * *   \[2] : Vehicles.
     * *   \[3] : Objects (props), doors, and projectiles.
     *
     * ### Coordinates need to be send unpacked (x,y,z)
     *
     * ```lua
     *
     * -- Define the allowed model hashes
     * local allowedModelHashes = { GetHashKey("p_crate03x"), GetHashKey("p_crate22x") }
     *
     * -- Get the player's current coordinates
     * local playerCoords = GetEntityCoords(PlayerPedId())
     *
     * -- Retrieve all entities of type Object (type 3) within a radius of 10.0 units
     * -- that match the allowed model hashes
     * -- and sort output entities by distance
     * local entities = GetEntitiesInRadius(playerCoords.x, playerCoords.y, playerCoords.z, 10.0, 3, true, allowedModelHashes)
     *
     * -- Iterate through the list of entities and print their ids
     * for i = 1, #entities do
     * local entity = entities[i]
     * print(entity)
     * end
     *
     * ```
     *
     * Hash: 0xDFFBA12F | Since: unknown | API-Set: shared
     */
    export function getEntitiesInRadius(pos: Vector3, radius: number, entityType: number, sortByDistance: boolean, models: number | IObject): number {
        return GetEntitiesInRadius(pos.x, pos.y, pos.z, radius, entityType, sortByDistance, models);
    }

    /**
     * Returns the entity handle for the specified state bag name. For use with [ADD_STATE_BAG_CHANGE_HANDLER](#\_0x5BA35AAF).
     *
     * Hash: 0x4BDF1867 | Since: unknown | API-Set: shared
     */
    export function getFromStateBagName(bagName: string): number {
        return GetEntityFromStateBagName(bagName);
    }

    /**
     * Documented here:
     * gtaforums.com/topic/885669-precisely-define-object-physics/
     * gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
     *
     * forceFlags:
     * First bit (lowest): Strong force flag, factor 100
     * Second bit: Unkown flag
     * Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
     * If higher bits are unequal 0 the function doesn't applay any forces at all.
     * (As integer possible values are 0-7)
     *
     * 0: weak force
     * 1: strong force
     * 2: same as 0 (2nd bit?)
     * 3: same as 1
     * 4: weak momentum
     * 5: strong momentum
     * 6: same as 4
     * 7: same as 5
     *
     * isLocal: vector defined in local (body-fixed) coordinate frame
     * isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.
     *
     * p8 !!! Whenever I set this !=0, my script stopped.
     *
     * Hash: 0xC5F68BE9613E2D18 | Since: 323 | API-Set: unknown
     */
    export function applyForceTo(entity: number | IEntity, forceFlags: number, pos: Vector3, offX: number, offY: number, offZ: number, boneIndex: number, isDirectionRel: boolean, ignoreUpVec: boolean, isForceRel: boolean): void {
        ApplyForceToEntity(entity, forceFlags, pos.x, pos.y, pos.z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, false, false);
    }

    /**
     * Applies a force to the specified entity.
     *
     * **List of force types (p1)**:
     * public enum ForceType
     * {
     * MinForce = 0,
     * MaxForceRot = 1,
     * MinForce2 = 2,
     * MaxForceRot2 = 3,
     * ForceNoRot = 4,
     * ForceRotPlusForce = 5
     * }
     * Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
     *
     * p6/relative - makes the xyz force not relative to world coords, but to something else
     * p7/highForce - setting false will make the force really low
     *
     * Hash: 0x18FF00FC7EFF559E | Since: 323 | API-Set: unknown
     */
    export function applyForceToCenterOfMass(entity: number | IEntity, forceType: number, pos: Vector3, isDirectionRel: boolean, isForceRel: boolean): void {
        ApplyForceToEntityCenterOfMass(entity, forceType, pos.x, pos.y, pos.z, false, isDirectionRel, isForceRel, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C48B75732C8456C | Since: 791 | API-Set: unknown
     */
    export function attachBoneToEntityBone(entity1: number | IEntity, entity2: number | IEntity, boneIndex1: number, boneIndex2: number): void {
        AttachEntityBoneToEntityBone(entity1, entity2, boneIndex1, boneIndex2, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD1695C5D3B05439 | Since: 791 | API-Set: unknown
     */
    export function attachBoneToEntityBoneYForward(entity1: number | IEntity, entity2: number | IEntity, boneIndex1: number, boneIndex2: number): void {
        AttachEntityBoneToEntityBonePhysically(entity1, entity2, boneIndex1, boneIndex2, false, false);
    }

    /**
     * Attaches entity1 to bone (boneIndex) of entity2.
     *
     * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
     *
     * useSoftPinning - if set to false attached entity will not detach when fixed
     * collision - controls collision between the two entities (FALSE disables collision).
     * isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
     * vertexIndex - position of vertex
     * fixedRot - if false it ignores entity vector
     *
     *
     * Hash: 0x6B9BBD38AB0796DF | Since: 323 | API-Set: unknown
     */
    export function attachToEntity(entity1: number | IEntity, entity2: number | IEntity, boneIndex: number, pos: Vector3, rot: Vector3, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: number, fixedRot: boolean): void {
        AttachEntityToEntity(entity1, entity2, boneIndex, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, false, useSoftPinning, collision, isPed, vertexIndex, fixedRot, undefined);
    }

    /**
     * breakForce is the amount of force required to break the bond.
     * p14 - is always 1 in scripts
     * p15 - is 1 or 0 in scripts - unknoun what it does
     * p16 - controls collision between the two entities (FALSE disables collision).
     * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
     * p18 - is always 2 in scripts.
     *
     *
     *
     * Hash: 0xC3675780C92F90F9 | Since: 323 | API-Set: unknown
     */
    export function attachToEntityPhysically(entity1: number | IEntity, entity2: number | IEntity, boneIndex1: number, boneIndex2: number, xPos1: number, yPos1: number, zPos1: number, xPos2: number, yPos2: number, zPos2: number, rot: Vector3, breakForce: number, fixedRot: boolean, collision: boolean): void {
        AttachEntityToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, rot.x, rot.y, rot.z, breakForce, fixedRot, false, collision, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x168A09D1B25B0BA4 | Since: 2944 | API-Set: unknown
     */
    export function attachToEntityPhysicallyOverrideInverseMass(firstEntityIndex: number | IEntity, secondEntityIndex: number | IEntity, firstEntityBoneIndex: number, secondEntityBoneIndex: number, secondEntityOffsetX: number, secondEntityOffsetY: number, secondEntityOffsetZ: number, firstEntityOffsetX: number, firstEntityOffsetY: number, firstEntityOffsetZ: number, vecRotationX: number, vecRotationY: number, vecRotationZ: number, physicalStrength: number, constrainRotation: boolean, doInitialWarp: boolean, collideWithEntity: boolean, addInitialSeperation: boolean, rotOrder: number, invMassScaleA: number, invMassScaleB: number): void {
        Citizen.invokeNative('0x168A09D1B25B0BA4', firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength, constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, invMassScaleA, invMassScaleB);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA72CD9CA74A5ECBA | Since: 323 | API-Set: unknown
     */
    export function clearLastDamageEntity(entity: number | IEntity): void {
        ClearEntityLastDamageEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x150E808B375A385A | Since: 323 | API-Set: unknown
     */
    export function createForcedObject(pos: Vector3, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        CreateForcedObject(pos.x, pos.y, pos.z, undefined, modelHash, false);
    }

    /**
     * p5 = sets as true in scripts
     * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
     *
     * Network players do not see changes done with this.
     *
     * Hash: 0x8A97BCA30A0CE478 | Since: 323 | API-Set: unknown
     */
    export function createModelHide(pos: Vector3, radius: number, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        CreateModelHide(pos.x, pos.y, pos.z, radius, modelHash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A52AE588830BF7F | Since: 323 | API-Set: unknown
     */
    export function createModelHideExcludingScriptObjects(pos: Vector3, radius: number, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        CreateModelHideExcludingScriptObjects(pos.x, pos.y, pos.z, radius, modelHash, false);
    }

    /**
     * Only works with objects!
     *
     * Hash: 0x92C47782FDA8B2A3 | Since: 323 | API-Set: unknown
     */
    export function createModelSwap(pos: Vector3, radius: number, originalModel: number | string, newModel: number | string): void {
        if (typeof originalModel === 'string') originalModel = misc.getHashKey(originalModel)
        if (typeof newModel === 'string') newModel = misc.getHashKey(newModel)
        CreateModelSwap(pos.x, pos.y, pos.z, radius, originalModel, newModel, false);
    }

    /**
     * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0xAE3CBE5BF394C9C9 | Since: 323 | API-Set: unknown
     */
    export function deleteEntity(entity: number | IEntity): void {
        DeleteEntity(entity);
    }

    /**
     * If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
     * Set `dynamic` to true to keep velocity after dettaching
     *
     * Hash: 0x961AC54BF0613F5D | Since: 323 | API-Set: unknown
     */
    export function detach(entity: number | IEntity, dynamic: boolean, collision: boolean): void {
        DetachEntity(entity, dynamic, collision);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDDE6DF5AE89981D2 | Since: 323 | API-Set: unknown
     */
    export function doesBelongToThisScript(entity: number | IEntity): boolean {
        return DoesEntityBelongToThisScript(entity, false);
    }

    /**
     * Checks whether an entity exists in the game world.
     *
     * Hash: 0x7239B21A38F536BA | Since: 323 | API-Set: unknown
     */
    export function doesExist(entity: number | IEntity): boolean {
        return DoesEntityExist(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2158E81A6AF65EA9 | Since: 2699 | API-Set: unknown
     */
    export function doesHaveAnimDirector(entity: number | IEntity): boolean {
        return DoesEntityHaveAnimDirector(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x060D6E96F8B8E48D | Since: 323 | API-Set: unknown
     */
    export function doesHaveDrawable(entity: number | IEntity): boolean {
        return DoesEntityHaveDrawable(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA95EA3317CC5064 | Since: 323 | API-Set: unknown
     */
    export function doesHavePhysics(entity: number | IEntity): boolean {
        return DoesEntityHavePhysics(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x764EB96874EFFDC1 | Since: 2699 | API-Set: unknown
     */
    export function doesHaveSkeleton(entity: number | IEntity): boolean {
        return DoesEntityHaveSkeletonData(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6CE177D014502E8A | Since: 877 | API-Set: unknown
     */
    export function enableBulletCollision(entity: number | IEntity): void {
        EnableEntityUnk(entity);
    }

    /**
     * In the script "player_scene_t_bbfight.c4":
     * `"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4\/\*16\*\/], v_9, &v_A, &v_B))"`
     * -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
     * -- &l_19F[v_4\/\*16\*\/] (p1) is used in other natives in the script as the "animation" param.
     * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
     * --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
     * `"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"`
     * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x07F1BE2BCCAA27A7 | Since: 323 | API-Set: unknown
     */
    export function findAnimEventPhase(animDictionary: string, animName: string): [boolean, any, any] {
        return FindAnimEventPhase(animDictionary, animName, undefined);
    }

    /**
     * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
     *
     * Hash: 0x40FDEDB72F8293B2 | Since: 323 | API-Set: unknown
     */
    export function forceAiAndAnimationUpdate(entity: number | IEntity): void {
        ForceEntityAiAndAnimationUpdate(entity);
    }

    /**
     * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
     *
     * Hash: 0x428CA6DBD1094446 | Since: 323 | API-Set: unknown
     */
    export function freezePosition(entity: number | IEntity, toggle: boolean): void {
        FreezeEntityPosition(entity, toggle);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xFEDDF04D62B8D790 | Since: 323 | API-Set: unknown
     */
    export function getAnimDuration(animDict: string, animName: string): number {
        return GetAnimDuration(animDict, animName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE465D4AB7CA6AE72 | Since: 323 | API-Set: unknown
     */
    export function getCollisionNormalOfLastHitFor(entity: number | IEntity): Vector3 {
        return new Vector3(GetCollisionNormalOfLastHitForEntity(entity));
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A47B3B5E63E94C6 | Since: 323 | API-Set: unknown
     */
    export function getAlpha(entity: number | IEntity): number {
        return GetEntityAlpha(entity);
    }

    /**
     * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
     *
     * Example:
     * 0.000000 - mark the starting of animation.
     * 0.500000 - mark the midpoint of the animation.
     * 1.000000 - mark the end of animation.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x346D81500D088F42 | Since: 323 | API-Set: unknown
     */
    export function getAnimCurrentTime(entity: number | IEntity, animDict: string, animName: string): number {
        return GetEntityAnimCurrentTime(entity, animDict, animName);
    }

    /**
     * Returns a float value representing animation's total playtime in milliseconds.
     *
     * Example:
     * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
     * return 20800.000000
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x50BD2730B191E360 | Since: 323 | API-Set: unknown
     */
    export function getAnimTotalTime(entity: number | IEntity, animDict: string, animName: string): number {
        return GetEntityAnimTotalTime(entity, animDict, animName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x48C2BED9180FE123 | Since: 323 | API-Set: unknown
     */
    export function getAttachedTo(entity: number | IEntity): number {
        return GetEntityAttachedTo(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB328DCC3A3AA401B | Since: 791 | API-Set: unknown
     */
    export function getBoneCount(entity: number | IEntity): number {
        return GetEntityBoneCount(entity);
    }

    /**
     * Returns the index of the bone. If the bone was not found, -1 will be returned.
     *
     * list:
     * https://pastebin.com/D7JMnX1g
     *
     * BoneNames:
     * chassis,
     * windscreen,
     * seat_pside_r,
     * seat_dside_r,
     * bodyshell,
     * suspension_lm,
     * suspension_lr,
     * platelight,
     * attach_female,
     * attach_male,
     * bonnet,
     * boot,
     * chassis_dummy,  //Center of the dummy
     * chassis_Control,    //Not found yet
     * door_dside_f,   //Door left, front
     * door_dside_r,   //Door left, back
     * door_pside_f,   //Door right, front
     * door_pside_r,   //Door right, back
     * Gun_GripR,
     * windscreen_f,
     * platelight, //Position where the light above the numberplate is located
     * VFX_Emitter,
     * window_lf,  //Window left, front
     * window_lr,  //Window left, back
     * window_rf,  //Window right, front
     * window_rr,  //Window right, back
     * engine, //Position of the engine
     * gun_ammo,
     * ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
     * wheel_lf,   //Wheel left, front
     * wheel_lr,   //Wheel left, back
     * wheel_rf,   //Wheel right, front
     * wheel_rr,   //Wheel right, back
     * exhaust,    //Exhaust. shows only the position of the stock-exhaust
     * overheat,   //A position on the engine(not exactly sure, how to name it)
     * misc_e, //Not a car-bone.
     * seat_dside_f,   //Driver-seat
     * seat_pside_f,   //Seat next to driver
     * Gun_Nuzzle,
     * seat_r
     *
     * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
     *
     *
     *
     * Hash: 0xFB71170B7E76ACBA | Since: 323 | API-Set: unknown
     */
    export function getBoneIndexByName(entity: number | IEntity, boneName: string): number {
        return GetEntityBoneIndexByName(entity, boneName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF1247CC86961FD6 | Since: 2802 | API-Set: unknown
     */
    export function getBoneObjectPostion(entity: number | IEntity, boneIndex: number): Vector3 {
        return new Vector3(Citizen.invokeNative('0xCF1247CC86961FD6', entity, boneIndex));
    }

    /**
     * Gets the local rotation of the specified bone of the specified entity.
     *
     * Hash: 0xBD8D32550E5CEBFE | Since: 1734 | API-Set: unknown
     */
    export function getBoneObjectRotation(entity: number | IEntity, boneIndex: number): Vector3 {
        return new Vector3(GetEntityBoneRotationLocal(entity, boneIndex));
    }

    /**
     * Gets the world position of the specified bone of the specified entity.
     *
     * Hash: 0x46F8696933A63C9B | Since: 877 | API-Set: unknown
     */
    export function getBonePostion(entity: number | IEntity, boneIndex: number): Vector3 {
        return new Vector3(GetEntityBonePosition2(entity, boneIndex));
    }

    /**
     * Gets the world rotation of the specified bone of the specified entity.
     *
     * Hash: 0xCE6294A232D03786 | Since: 791 | API-Set: unknown
     */
    export function getBoneRotation(entity: number | IEntity, boneIndex: number): Vector3 {
        return new Vector3(GetEntityBoneRotation(entity, boneIndex));
    }

    /**
     * No comment provided
     *
     * Hash: 0xD95CC5D2AB15A09F | Since: 757 | API-Set: unknown
     */
    export function getCanBeDamaged(entity: number | IEntity): boolean {
        return GetEntityCanBeDamaged(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCF1E97BEFDAE480 | Since: 323 | API-Set: unknown
     */
    export function getCollisionDisabled(entity: number | IEntity): boolean {
        return GetEntityCollisionDisabled(entity);
    }

    /**
     * Gets the current coordinates for a specified entity.
     * `entity` = The entity to get the coordinates from.
     * `alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
     *
     * Hash: 0x3FEF770D40960D5A | Since: 323 | API-Set: unknown
     */
    export function getCoords(entity: number | IEntity, alive: boolean): Vector3 {
        return new Vector3(GetEntityCoords(entity, alive));
    }

    /**
     * Gets the entity's forward vector.
     *
     * Hash: 0x0A794A5A57F8DF91 | Since: 323 | API-Set: unknown
     */
    export function getForwardVector(entity: number | IEntity): Vector3 {
        return new Vector3(GetEntityForwardVector(entity));
    }

    /**
     * Gets the X-component of the entity's forward vector.
     *
     * Hash: 0x8BB4EF4214E0E6D5 | Since: 323 | API-Set: unknown
     */
    export function getForwardX(entity: number | IEntity): number {
        return GetEntityForwardX(entity);
    }

    /**
     * Gets the Y-component of the entity's forward vector.
     *
     * Hash: 0x866A4A5FAE349510 | Since: 323 | API-Set: unknown
     */
    export function getForwardY(entity: number | IEntity): number {
        return GetEntityForwardY(entity);
    }

    /**
     * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
     *
     * Hash: 0xE83D4F9BA2A38914 | Since: 323 | API-Set: unknown
     */
    export function getHeading(entity: number | IEntity): number {
        return GetEntityHeading(entity);
    }

    /**
     * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
     *
     * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
     *
     * Hash: 0x846BF6291198A71E | Since: 323 | API-Set: unknown
     */
    export function getHeadingFromEulers(entity: number | IEntity): number {
        return GetEntityHeadingFromEulers(entity);
    }

    /**
     * Returns an integer value of entity's current health.
     *
     * Example of range for ped:
     * - Player [0 to 200]
     * - Ped [100 to 200]
     * - Vehicle [0 to 1000]
     * - Object [0 to 1000]
     *
     * Health is actually a float value but this native casts it to int.
     * In order to get the actual value, do:
     * float health = *(float *)(entityAddress + 0x280);
     *
     * Hash: 0xEEF059FAD016D209 | Since: 323 | API-Set: unknown
     */
    export function getHealth(entity: number | IEntity): number {
        return GetEntityHealth(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A504562485944DD | Since: 323 | API-Set: unknown
     */
    export function getHeight(entity: number | IEntity, pos: Vector3, atTop: boolean, inWorldCoords: boolean): number {
        return GetEntityHeight(entity, pos.x, pos.y, pos.z, atTop, inWorldCoords);
    }

    /**
     * Return height (z-dimension) above ground.
     * Example: The pilot in a titan plane is 1.844176 above ground.
     *
     * How can i convert it to meters?
     * Everything seems to be in meters, probably this too.
     *
     * Hash: 0x1DD55701034110E5 | Since: 323 | API-Set: unknown
     */
    export function getHeightAboveGround(entity: number | IEntity): number {
        return GetEntityHeightAboveGround(entity);
    }

    /**
     * Returns the LOD distance of an entity.
     *
     * Hash: 0x4159C2762B5791D6 | Since: 323 | API-Set: unknown
     */
    export function getLodDist(entity: number | IEntity): number {
        return GetEntityLodDist(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xECB2FC7235A7D137 | Since: 323 | API-Set: unknown
     */
    export function getMatrix(entity: number | IEntity): [Vector3, Vector3, Vector3, Vector3] {
        return GetEntityMatrix(entity);
    }

    /**
     * Return an integer value of entity's maximum health.
     *
     * Example:
     * - Player = 200
     * - Ped = 150
     *
     * Hash: 0x15D757606D170C3C | Since: 323 | API-Set: unknown
     */
    export function getMaxHealth(entity: number | IEntity): number {
        return GetEntityMaxHealth(entity);
    }

    /**
     * Returns the model hash from the entity
     *
     * Hash: 0x9F47B058362C84B5 | Since: 323 | API-Set: unknown
     */
    export function getModel(entity: number | IEntity): number {
        return GetEntityModel(entity);
    }

    /**
     * Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
     * This native does not appear to have anything to do with pickups as in scripts it is used with objects.
     *
     * Example from fm_mission_controller_2020.c:
     *
     * `iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard"));`
     *
     * Hash: 0x1F922734E259BD26 | Since: 1180 | API-Set: unknown
     */
    export function getOfTypeAttachedToEntity(entity: number | IEntity, modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetEntityPickup(entity, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD45DC2893621E1FE | Since: 323 | API-Set: unknown
     */
    export function getPitch(entity: number | IEntity): number {
        return GetEntityPitch(entity);
    }

    /**
     * A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
     *
     * Hash: 0xF6F5161F4534EDFF | Since: 323 | API-Set: unknown
     */
    export function getPopulationType(entity: number | IEntity): number {
        return GetEntityPopulationType(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE8CD9BE829BBEBF | Since: 1604 | API-Set: unknown
     */
    export function getProofs(entity: number | IEntity): [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean] {
        return GetEntityProofs(entity);
    }

    /**
     * w is the correct parameter name!
     *
     * Hash: 0x7B3703D2D32DFA18 | Since: 323 | API-Set: unknown
     */
    export function getQuaternion(entity: number | IEntity): [number, number, number, number] {
        return GetEntityQuaternion(entity);
    }

    /**
     * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
     * (Sideways Roll) such as a vehicle tipped on its side
     *
     * Hash: 0x831E0242595560DF | Since: 323 | API-Set: unknown
     */
    export function getRoll(entity: number | IEntity): number {
        return GetEntityRoll(entity);
    }

    /**
     * rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.
     *
     * rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
     * What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
     *
     * What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif
     *
     * Rotation Orders:
     * 0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
     * 1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
     * 2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
     * 3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
     * 4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
     * 5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
     *
     * Hash: 0xAFBD61CC738D9EB9 | Since: 323 | API-Set: unknown
     */
    export function getRotation(entity: number | IEntity, rotationOrder: number): Vector3 {
        return new Vector3(GetEntityRotation(entity, rotationOrder));
    }

    /**
     * No comment provided
     *
     * Hash: 0x213B91045D09B983 | Since: 323 | API-Set: unknown
     */
    export function getRotationVelocity(entity: number | IEntity): Vector3 {
        return new Vector3(GetEntityRotationVelocity(entity));
    }

    /**
     * Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
     *
     * Hash: 0xA6E9C38DB51D7748 | Since: 323 | API-Set: unknown
     */
    export function getScript(entity: number | IEntity): [string, number] {
        return GetEntityScript(entity);
    }

    /**
     * result is in meters per second
     *
     * ------------------------------------------------------------
     * So would the conversion to mph and km/h, be along the lines of this.
     *
     * float speed = GET_ENTITY_SPEED(veh);
     * float kmh = (speed * 3.6);
     * float mph = (speed * 2.236936);
     * ------------------------------------------------------------
     *
     * Hash: 0xD5037BA82E12416F | Since: 323 | API-Set: unknown
     */
    export function getSpeed(entity: number | IEntity): number {
        return GetEntitySpeed(entity);
    }

    /**
     * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
     *
     * Hash: 0x9A8D700A51CB7B0D | Since: 323 | API-Set: unknown
     */
    export function getSpeedVector(entity: number | IEntity, relative: boolean): Vector3 {
        return new Vector3(GetEntitySpeedVector(entity, relative));
    }

    /**
     * Get how much of the entity is submerged.  1.0f is whole entity.
     *
     * Hash: 0xE81AFC1BC4CC41CE | Since: 323 | API-Set: unknown
     */
    export function getSubmergedLevel(entity: number | IEntity): number {
        return GetEntitySubmergedLevel(entity);
    }

    /**
     * Returns:
     * 0 = no entity
     * 1 = ped
     * 2 = vehicle
     * 3 = object
     *
     * Hash: 0x8ACD366038D14505 | Since: 323 | API-Set: unknown
     */
    export function getType(entity: number | IEntity): number {
        return GetEntityType(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95EED5A694951F9F | Since: 323 | API-Set: unknown
     */
    export function getUprightValue(entity: number | IEntity): number {
        return GetEntityUprightValue(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4805D2B1D8CF94A9 | Since: 323 | API-Set: unknown
     */
    export function getVelocity(entity: number | IEntity): Vector3 {
        return new Vector3(GetEntityVelocity(entity));
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C3D0A935F535C4C | Since: 323 | API-Set: unknown
     */
    export function getLastMaterialHitBy(entity: number | IEntity): number {
        return GetLastMaterialHitByEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFBD7052D65BE0FF | Since: 2944 | API-Set: unknown
     */
    export function getNearestParticipantTo(entity: number | IEntity): number {
        return Citizen.invokeNative('0xFFBD7052D65BE0FF', entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7196842CB375CDB3 | Since: 323 | API-Set: unknown
     */
    export function getNearestPlayerTo(entity: number | IEntity): number | string {
        return GetNearestPlayerToEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4DC9A62F844D9337 | Since: 323 | API-Set: unknown
     */
    export function getNearestPlayerToOnTeam(entity: number | IEntity, team: number): number | string {
        return GetNearestPlayerToEntityOnTeam(entity, team);
    }

    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0xD7E3B9735C0F89D6 | Since: 323 | API-Set: unknown
     */
    export function getObjectIndexFromIndex(entity: number | IEntity): number {
        return GetObjectIndexFromEntityIndex(entity);
    }

    /**
     * Converts world coords (posX - Z) to coords relative to the entity
     *
     * Example:
     * posX is given as 50
     * entity's x coord is 40
     * the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
     *
     * Hash: 0x2274BC1C4885E333 | Since: 323 | API-Set: unknown
     */
    export function getOffsetFromGivenWorldCoords(entity: number | IEntity, pos: Vector3): Vector3 {
        return new Vector3(GetOffsetFromEntityGivenWorldCoords(entity, pos.x, pos.y, pos.z));
    }

    /**
     * Offset values are relative to the entity.
     *
     * x = left/right
     * y = forward/backward
     * z = up/down
     *
     * Hash: 0x1899F328B0E12848 | Since: 323 | API-Set: unknown
     */
    export function getOffsetFromInWorldCoords(entity: number | IEntity, offsetX: number, offsetY: number, offsetZ: number): Vector3 {
        return new Vector3(GetOffsetFromEntityInWorldCoords(entity, offsetX, offsetY, offsetZ));
    }

    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x04A2A40C73395041 | Since: 323 | API-Set: unknown
     */
    export function getPedIndexFromIndex(entity: number | IEntity): number {
        return GetPedIndexFromEntityIndex(entity);
    }

    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x4B53F92932ADFAC0 | Since: 323 | API-Set: unknown
     */
    export function getVehicleIndexFromIndex(entity: number | IEntity): number {
        return GetVehicleIndexFromEntityIndex(entity);
    }

    /**
     * Returns the coordinates of an entity-bone.
     *
     * Hash: 0x44A8FCB8ED227738 | Since: 323 | API-Set: unknown
     */
    export function getWorldPositionOfBone(entity: number | IEntity, boneIndex: number): Vector3 {
        return new Vector3(GetWorldPositionOfEntityBone(entity, boneIndex));
    }

    /**
     * `if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))`
     *
     * Hash: 0xEAF4CD9EA3E7E922 | Since: 323 | API-Set: unknown
     */
    export function hasAnimEventFired(entity: number | IEntity, actionHash: number | string): boolean {
        if (typeof actionHash === 'string') actionHash = misc.getHashKey(actionHash)
        return HasAnimEventFired(entity, actionHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE9676F61BC0B3321 | Since: 323 | API-Set: unknown
     */
    export function hasCollisionLoadedAround(entity: number | IEntity): boolean {
        return HasCollisionLoadedAroundEntity(entity);
    }

    /**
     * P3 is always 3 as far as i cant tell
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x20B711662962B472 | Since: 323 | API-Set: unknown
     */
    export function hasAnimFinished(entity: number | IEntity, animDict: string, animName: string): boolean {
        return HasEntityAnimFinished(entity, animDict, animName, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95EB9964FF5C5C65 | Since: 323 | API-Set: unknown
     */
    export function hasBeenDamagedByAnyObject(entity: number | IEntity): boolean {
        return HasEntityBeenDamagedByAnyObject(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x605F5A140F202491 | Since: 323 | API-Set: unknown
     */
    export function hasBeenDamagedByAnyPed(entity: number | IEntity): boolean {
        return HasEntityBeenDamagedByAnyPed(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFD5033FDBA0A9C8 | Since: 323 | API-Set: unknown
     */
    export function hasBeenDamagedByAnyVehicle(entity: number | IEntity): boolean {
        return HasEntityBeenDamagedByAnyVehicle(entity);
    }

    /**
     * Entity 1 = Victim
     * Entity 2 = Attacker
     *
     * p2 seems to always be 1
     *
     * Hash: 0xC86D67D52A707CF8 | Since: 323 | API-Set: unknown
     */
    export function hasBeenDamagedByEntity(entity1: number | IEntity, entity2: number | IEntity): boolean {
        return HasEntityBeenDamagedByEntity(entity1, entity2, false);
    }

    /**
     * traceType is always 17 in the scripts.
     *
     * There is other codes used for traceType:
     * 19 - in jewelry_prep1a
     * 126 - in am_hunt_the_beast
     * 256 & 287 - in fm_mission_controller
     *
     * Hash: 0xFCDFF7B72D23A1AC | Since: 323 | API-Set: unknown
     */
    export function hasClearLosToEntity(entity1: number | IEntity, entity2: number | IEntity, traceType: number): boolean {
        return HasEntityClearLosToEntity(entity1, entity2, traceType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x394BDE2A7BBA031E | Since: 1868 | API-Set: unknown
     */
    export function hasClearLosToEntityAdjustForCover(entity1: number | IEntity, entity2: number | IEntity, traceType: number): boolean {
        return HasEntityClearLosToEntity2(entity1, entity2, traceType);
    }

    /**
     * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
     * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
     *
     * Hash: 0x0267D00AF114F17A | Since: 323 | API-Set: unknown
     */
    export function hasClearLosToEntityInFront(entity1: number | IEntity, entity2: number | IEntity): boolean {
        return HasEntityClearLosToEntityInFront(entity1, entity2);
    }

    /**
     * Called on tick.
     * Tested with vehicles, returns true whenever the vehicle is touching any entity.
     *
     * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
     *
     * Hash: 0x8BAD02F0368D9E14 | Since: 323 | API-Set: unknown
     */
    export function hasCollidedWithAnything(entity: number | IEntity): boolean {
        return HasEntityCollidedWithAnything(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x731EC8A916BD11A1 | Since: 323 | API-Set: unknown
     */
    export function isAn(handle: number): boolean {
        return IsAnEntity(handle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D68C8FD0FACA94E | Since: 323 | API-Set: unknown
     */
    export function isAnObject(entity: number | IEntity): boolean {
        return IsEntityAnObject(entity);
    }

    /**
     * Whether the entity is attached to any other entity.
     *
     * Hash: 0xB346476EF1A64897 | Since: 323 | API-Set: unknown
     */
    export function isAttached(entity: number | IEntity): boolean {
        return IsEntityAttached(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF511840CEEDE0CC | Since: 323 | API-Set: unknown
     */
    export function isAttachedToAnyObject(entity: number | IEntity): boolean {
        return IsEntityAttachedToAnyObject(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1632E9A5F988D11 | Since: 323 | API-Set: unknown
     */
    export function isAttachedToAnyPed(entity: number | IEntity): boolean {
        return IsEntityAttachedToAnyPed(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x26AA915AD89BFB4B | Since: 323 | API-Set: unknown
     */
    export function isAttachedToAnyVehicle(entity: number | IEntity): boolean {
        return IsEntityAttachedToAnyVehicle(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFBE71898A993728 | Since: 323 | API-Set: unknown
     */
    export function isAttachedToEntity(_from: number | IEntity, to: number | IEntity): boolean {
        return IsEntityAttachedToEntity(_from, to);
    }

    /**
     * Checks if entity is within x/y/zSize distance of x/y/z.
     *
     * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
     *
     * Hash: 0x20B60995556D004F | Since: 323 | API-Set: unknown
     */
    export function isAtCoord(entity: number | IEntity, pos: Vector3, xSize: number, ySize: number, zSize: number): boolean {
        return IsEntityAtCoord(entity, pos.x, pos.y, pos.z, xSize, ySize, zSize, false, false, 0);
    }

    /**
     * Checks if entity1 is within the box defined by x/y/zSize of entity2.
     *
     * Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
     *
     * Hash: 0x751B70C3D034E187 | Since: 323 | API-Set: unknown
     */
    export function isAtEntity(entity1: number | IEntity, entity2: number | IEntity, xSize: number, ySize: number, zSize: number): boolean {
        return IsEntityAtEntity(entity1, entity2, xSize, ySize, zSize, false, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A7B270912999B3C | Since: 323 | API-Set: unknown
     */
    export function isAMissionEntity(entity: number | IEntity): boolean {
        return IsEntityAMissionEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x524AC5ECEA15343E | Since: 323 | API-Set: unknown
     */
    export function isAPed(entity: number | IEntity): boolean {
        return IsEntityAPed(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6AC7003FA6E5575E | Since: 323 | API-Set: unknown
     */
    export function isAVehicle(entity: number | IEntity): boolean {
        return IsEntityAVehicle(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F9532F3B5CC2551 | Since: 323 | API-Set: unknown
     */
    export function isDead(entity: number | IEntity): boolean {
        return IsEntityDead(entity, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x886E37EC497200B6 | Since: 323 | API-Set: unknown
     */
    export function isInAir(entity: number | IEntity): boolean {
        return IsEntityInAir(entity);
    }

    /**
     * `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
     * `p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x51210CED3DA1C78A | Since: 323 | API-Set: unknown
     */
    export function isInAngledArea(entity: number | IEntity, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean): boolean {
        return IsEntityInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54736AA40E271165 | Since: 323 | API-Set: unknown
     */
    export function isInArea(entity: number | IEntity, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsEntityInArea(entity, x1, y1, z1, x2, y2, z2, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFB0A0D8EDD145A3 | Since: 323 | API-Set: unknown
     */
    export function isInWater(entity: number | IEntity): boolean {
        return IsEntityInWater(entity);
    }

    /**
     * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
     *
     * Hash: 0xB6463CF6AF527071 | Since: 323 | API-Set: unknown
     */
    export function isInZone(entity: number | IEntity, zone: string): boolean {
        return IsEntityInZone(entity, zone);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE31C2C72B8692B64 | Since: 323 | API-Set: unknown
     */
    export function isOccluded(entity: number | IEntity): boolean {
        return IsEntityOccluded(entity);
    }

    /**
     * Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.
     * This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
     * Chipping
     *
     * Hash: 0xE659E47AF827484B | Since: 323 | API-Set: unknown
     */
    export function isOnScreen(entity: number | IEntity): boolean {
        return IsEntityOnScreen(entity);
    }

    /**
     * `See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447`
     *
     * `Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)`
     *
     * p4 is always 3 in the scripts.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x1F0B79228E461EC9 | Since: 323 | API-Set: unknown
     */
    export function isPlayingAnim(entity: number | IEntity, animDict: string, animName: string, taskFlag: number): boolean {
        return IsEntityPlayingAnim(entity, animDict, animName, taskFlag);
    }

    /**
     * `a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.`
     *
     * Hash: 0x1218E6886D3D8327 | Since: 323 | API-Set: unknown
     */
    export function isStatic(entity: number | IEntity): boolean {
        return IsEntityStatic(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x17FFC1B2BA35A494 | Since: 323 | API-Set: unknown
     */
    export function isTouchingEntity(entity: number | IEntity, targetEntity: number | IEntity): boolean {
        return IsEntityTouchingEntity(entity, targetEntity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F42323798A58C8C | Since: 323 | API-Set: unknown
     */
    export function isTouchingModel(entity: number | IEntity, modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return IsEntityTouchingModel(entity, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5333F526F6AB19AA | Since: 323 | API-Set: unknown
     */
    export function isUpright(entity: number | IEntity, angle: number): boolean {
        return IsEntityUpright(entity, angle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DBD58820FA61D71 | Since: 323 | API-Set: unknown
     */
    export function isUpsidedown(entity: number | IEntity): boolean {
        return IsEntityUpsidedown(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x47D6F43D77935C75 | Since: 323 | API-Set: unknown
     */
    export function isVisible(entity: number | IEntity): boolean {
        return IsEntityVisible(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD796CB5BA8F20E32 | Since: 323 | API-Set: unknown
     */
    export function isVisibleToScript(entity: number | IEntity): boolean {
        return IsEntityVisibleToScript(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD05BFF0C0A12C68F | Since: 323 | API-Set: unknown
     */
    export function isWaitingForWorldCollision(entity: number | IEntity): boolean {
        return IsEntityWaitingForWorldCollision(entity);
    }

    /**
     * delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
     *
     * The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x7FB218262B810701 | Since: 323 | API-Set: unknown
     */
    export function playAnim(entity: number | IEntity, animName: string, animDict: string, loop: boolean, stayInAnim: boolean, delta: number, bitset: any): boolean {
        return PlayEntityAnim(entity, animName, animDict, 0, loop, stayInAnim, false, delta, bitset);
    }

    /**
     * p4 and p7 are usually 1000.0f.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xC77720A12FE14A86 | Since: 323 | API-Set: unknown
     */
    export function playSynchronizedAnim(entity: number | IEntity, syncedScene: number, animation: string, propName: string): boolean {
        return PlaySynchronizedEntityAnim(entity, syncedScene, animation, propName, 0, 0, undefined, 0);
    }

    /**
     * p6,p7 probably animname and animdict
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xB9C54555ED30FBC4 | Since: 323 | API-Set: unknown
     */
    export function playSynchronizedMapAnim(x1: number, y1: number, z1: number, x2: number, y2: any, z2: number): boolean {
        return PlaySynchronizedMapEntityAnim(x1, y1, z1, x2, y2, z2, undefined, undefined, 0, 0, undefined, 0);
    }

    /**
     * Called to update entity attachments.
     *
     * Hash: 0xF4080490ADC51C6F | Since: 323 | API-Set: unknown
     */
    export function processAttachments(entity: number | IEntity): void {
        ProcessEntityAttachments(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61B6775E83C0DB6F | Since: 323 | API-Set: unknown
     */
    export function removeForcedObject(pos: Vector3, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        RemoveForcedObject(pos.x, pos.y, pos.z, 0, modelHash);
    }

    /**
     * This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
     * p5 should be false, true does nothing
     *
     * Hash: 0xD9E3006FB3CBD765 | Since: 323 | API-Set: unknown
     */
    export function removeModelHide(pos: Vector3, radius: number, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        RemoveModelHide(pos.x, pos.y, pos.z, radius, modelHash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x033C0F9A64E229AE | Since: 323 | API-Set: unknown
     */
    export function removeModelSwap(pos: Vector3, radius: number, originalModel: number | string, newModel: number | string): void {
        if (typeof originalModel === 'string') originalModel = misc.getHashKey(originalModel)
        if (typeof newModel === 'string') newModel = misc.getHashKey(newModel)
        RemoveModelSwap(pos.x, pos.y, pos.z, radius, originalModel, newModel, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B1E824FFBB7027A | Since: 323 | API-Set: unknown
     */
    export function resetAlpha(entity: number | IEntity): void {
        ResetEntityAlpha(entity);
    }

    /**
     * Similar to RESET_ENTITY_ALPHA
     *
     * Hash: 0x490861B88F4FD846 | Since: 944 | API-Set: unknown
     */
    export function resetPickupGlow(entity: number | IEntity): void {
        Citizen.invokeNative('0x490861B88F4FD846', entity);
    }

    /**
     * p1 is always set to 1
     *
     * Hash: 0x36F32DE87082343E | Since: 1011 | API-Set: unknown
     */
    export function setAllowMigrateToSpectator(entity: number | IEntity): void {
        Citizen.invokeNative('0x36F32DE87082343E', entity, undefined);
    }

    /**
     * p1 always false.
     *
     * Hash: 0xE12ABE5E3A389A6C | Since: 323 | API-Set: unknown
     */
    export function setCanAutoVaultOn(entity: number | IEntity, toggle: boolean): void {
        SetCanAutoVaultOnEntity(entity, toggle);
    }

    /**
     * p1 always false.
     *
     * Hash: 0xA80AE305E0A3044F | Since: 323 | API-Set: unknown
     */
    export function setCanClimbOn(entity: number | IEntity, toggle: boolean): void {
        SetCanClimbOnEntity(entity, toggle);
    }

    /**
     * skin - everything alpha except skin
     * Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
     *
     * Hash: 0x44A0870B7E92D7C0 | Since: 323 | API-Set: unknown
     */
    export function setAlpha(entity: number | IEntity, alphaLevel: number, skin: boolean): void {
        SetEntityAlpha(entity, alphaLevel, skin);
    }

    /**
     * No comment provided
     *
     * Hash: 0xACAD101E1FB66689 | Since: 323 | API-Set: unknown
     */
    export function setAlwaysPrerender(entity: number | IEntity, toggle: boolean): void {
        SetEntityAlwaysPrerender(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8339643499D1222E | Since: 2372 | API-Set: unknown
     */
    export function setAngularVelocity(entity: number | IEntity, pos: Vector3): void {
        SetEntityAngularVelocity(entity, pos.x, pos.y, pos.z);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x4487C259F0F70977 | Since: 323 | API-Set: unknown
     */
    export function setAnimCurrentTime(entity: number | IEntity, animDictionary: string, animName: string, time: number): void {
        SetEntityAnimCurrentTime(entity, animDictionary, animName, time);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x28D1A16553C51776 | Since: 323 | API-Set: unknown
     */
    export function setAnimSpeed(entity: number | IEntity, animDictionary: string, animName: string, speedMultiplier: number): void {
        SetEntityAnimSpeed(entity, animDictionary, animName, speedMultiplier);
    }

    /**
     * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
     *
     * p1 has no effect when either its on or off
     * maybe a quick disassembly will tell us what it does
     *
     * p2 has no effect when either its on or off
     * maybe a quick disassembly will tell us what it does
     *
     * Hash: 0xAD738C3085FE7E11 | Since: 323 | API-Set: unknown
     */
    export function setAsMissionEntity(entity: number | IEntity): void {
        SetEntityAsMissionEntity(entity, false, false);
    }

    /**
     * Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
     * If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
     * Entities marked as no longer needed, will be deleted as the engine sees fit.
     * Use this if you just want to just let the game delete the ped:
     * void MarkPedAsAmbientPed(Ped ped) {
     * auto addr = getScriptHandleBaseAddress(ped);
     *
     * if (!addr) {
     * return;
     * }
     *
     * //the game uses only lower 4 bits as entity population type
     * BYTE origValue = *(BYTE *)(addr + 0xDA);
     * `*(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);`
     * }
     *
     * Hash: 0xB736A491E64A32CF | Since: 323 | API-Set: unknown
     */
    export function setAsNoLongerNeeded(entity: number | IEntity): void {
        SetEntityAsNoLongerNeeded(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x68B562E124CC0AEF | Since: 1180 | API-Set: unknown
     */
    export function setCantCauseCollisionDamagedEntity(entity1: number | IEntity, entity2: number | IEntity): void {
        Citizen.invokeNative('0x68B562E124CC0AEF', entity1, entity2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1760FFA8AB074D66 | Since: 323 | API-Set: unknown
     */
    export function setCanBeDamaged(entity: number | IEntity, toggle: boolean): void {
        SetEntityCanBeDamaged(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE22D8FDE858B8119 | Since: 323 | API-Set: unknown
     */
    export function setCanBeDamagedByRelationshipGroup(entity: number | IEntity, bCanBeDamaged: boolean, relGroup: number): void {
        SetEntityCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup);
    }

    /**
     * Sets whether the entity can be targeted without being in line-of-sight.
     *
     * Hash: 0xD3997889736FD899 | Since: 323 | API-Set: unknown
     */
    export function setCanBeTargetedWithoutLos(entity: number | IEntity, toggle: boolean): void {
        SetEntityCanBeTargetedWithoutLos(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB17BC6453F6CF5AC | Since: 944 | API-Set: unknown
     */
    export function setCanOnlyBeDamagedByEntity(entity1: number | IEntity, entity2: number | IEntity): void {
        Citizen.invokeNative('0xB17BC6453F6CF5AC', entity1, entity2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x352E2B5CF420BF3B | Since: 573 | API-Set: unknown
     */
    export function setCanOnlyBeDamagedByScriptParticipants(entity: number | IEntity, toggle: boolean): void {
        Citizen.invokeNative('0x352E2B5CF420BF3B', entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A9205C1B9EE827F | Since: 323 | API-Set: unknown
     */
    export function setCollision(entity: number | IEntity, toggle: boolean, keepPhysics: boolean): void {
        SetEntityCollision(entity, toggle, keepPhysics);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9EBC85ED0FFFE51C | Since: 323 | API-Set: unknown
     */
    export function setCompletelyDisableCollision(entity: number | IEntity, toggle: boolean, keepPhysics: boolean): void {
        SetEntityCompletelyDisableCollision(entity, toggle, keepPhysics);
    }

    /**
     * p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.
     *
     * Often ends with 1, 0, 0, 1); in the scripts. It works.
     *
     * Axis - Invert Axis Flags
     *
     * Hash: 0x06843DA7060A026B | Since: 323 | API-Set: unknown
     */
    export function setCoords(entity: number | IEntity, pos: Vector3, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void {
        SetEntityCoords(entity, pos.x, pos.y, pos.z, xAxis, yAxis, zAxis, clearArea);
    }

    /**
     * Axis - Invert Axis Flags
     *
     * Hash: 0x239A3351AC1DA385 | Since: 323 | API-Set: unknown
     */
    export function setCoordsNoOffset(entity: number | IEntity, pos: Vector3, xAxis: boolean, yAxis: boolean, zAxis: boolean): void {
        SetEntityCoordsNoOffset(entity, pos.x, pos.y, pos.z, xAxis, yAxis, zAxis);
    }

    /**
     * No comment provided
     *
     * Hash: 0x621873ECE1178967 | Since: 323 | API-Set: unknown
     */
    export function setCoordsWithoutPlantsReset(entity: number | IEntity, pos: Vector3, alive: boolean, deadFlag: boolean, ragdollFlag: boolean, clearArea: boolean): void {
        SetEntityCoordsWithoutPlantsReset(entity, pos.x, pos.y, pos.z, alive, deadFlag, ragdollFlag, clearArea);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1718DE8E3F2823CA | Since: 323 | API-Set: unknown
     */
    export function setDynamic(entity: number | IEntity, toggle: boolean): void {
        SetEntityDynamic(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A4722448F18EEF5 | Since: 323 | API-Set: unknown
     */
    export function setHasGravity(entity: number | IEntity, toggle: boolean): void {
        SetEntityHasGravity(entity, toggle);
    }

    /**
     * Set the heading of an entity in degrees also known as "Yaw".
     *
     * Hash: 0x8E2530AA8ADA980E | Since: 323 | API-Set: unknown
     */
    export function setHeading(entity: number | IEntity, heading: number): void {
        SetEntityHeading(entity, heading);
    }

    /**
     * health >= 0
     * male ped ~= 100 - 200
     * female ped ~= 0 - 100
     *
     * Hash: 0x6B76DC1F3AE6E6A3 | Since: 323 | API-Set: unknown
     */
    export function setHealth(entity: number | IEntity, health: number, instigator: number | IEntity, weaponType: number | string): void {
        if (typeof weaponType === 'string') weaponType = misc.getHashKey(weaponType)
        SetEntityHealth(entity, health, instigator, weaponType);
    }

    /**
     * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
     *
     * If you use this for a ped and you want Ragdoll to stay enabled, then do:
     * *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
     *
     * Use this if you want to get the invincibility status:
     * bool IsPedInvincible(Ped ped)
     * {
     * auto addr = getScriptHandleBaseAddress(ped);
     *
     * if (addr)
     * {
     * DWORD flag = *(DWORD *)(addr + 0x188);
     * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
     * }
     *
     * return false;
     * }
     *
     * Hash: 0x3882114BDE571AD4 | Since: 323 | API-Set: unknown
     */
    export function setInvincible(entity: number | IEntity, toggle: boolean, dontResetOnCleanup: boolean): void {
        SetEntityInvincible(entity, toggle, dontResetOnCleanup);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78E8E3A640178255 | Since: 323 | API-Set: unknown
     */
    export function setIsInVehicle(entity: number | IEntity): void {
        Citizen.invokeNative('0x78E8E3A640178255', entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA02E132F5C68722 | Since: 323 | API-Set: unknown
     */
    export function setIsTargetPriority(entity: number | IEntity): void {
        SetEntityIsTargetPriority(entity, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7CFBA6A80BDF3874 | Since: 323 | API-Set: unknown
     */
    export function setLights(entity: number | IEntity, toggle: boolean): void {
        SetEntityLights(entity, toggle);
    }

    /**
     * Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
     * Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
     *
     * Hash: 0x0DC7CABAB1E9B67E | Since: 323 | API-Set: unknown
     */
    export function setLoadCollisionFlag(entity: number | IEntity, toggle: boolean): void {
        SetEntityLoadCollisionFlag(entity, toggle, undefined);
    }

    /**
     * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
     *
     * Hash: 0x5927F96A78577363 | Since: 323 | API-Set: unknown
     */
    export function setLodDist(entity: number | IEntity, value: number): void {
        SetEntityLodDist(entity, value);
    }

    /**
     * `For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849`
     *
     * Hash: 0x166E7CF68597D8B5 | Since: 323 | API-Set: unknown
     */
    export function setMaxHealth(entity: number | IEntity, value: number): void {
        SetEntityMaxHealth(entity, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0E46A3FCBDE2A1B1 | Since: 323 | API-Set: unknown
     */
    export function setMaxSpeed(entity: number | IEntity, speed: number): void {
        SetEntityMaxSpeed(entity, speed);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE66377CDDADA4810 | Since: 1734 | API-Set: unknown
     */
    export function setMirrorReflectionFlag(entity: number | IEntity): void {
        Citizen.invokeNative('0xE66377CDDADA4810', entity, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x295D82A8559F9150 | Since: 323 | API-Set: unknown
     */
    export function setMotionBlur(entity: number | IEntity, toggle: boolean): void {
        SetEntityMotionBlur(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C2E3DC128F44309 | Since: 323 | API-Set: unknown
     */
    export function setNoweapondecals(entity: number | IEntity): void {
        SetEntityDecalsDisabled(entity, false);
    }

    /**
     * Calling this function disables collision between two entities.
     * The importance of the order for entity1 and entity2 is unclear.
     * The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
     *
     * Hash: 0xA53ED5520C07654A | Since: 323 | API-Set: unknown
     */
    export function setNoCollisionEntity(entity1: number | IEntity, entity2: number | IEntity, thisFrameOnly: boolean): void {
        SetEntityNoCollisionEntity(entity1, entity2, thisFrameOnly);
    }

    /**
     * No comment provided
     *
     * Hash: 0x79F020FF9EDC0748 | Since: 323 | API-Set: unknown
     */
    export function setOnlyDamagedByPlayer(entity: number | IEntity, toggle: boolean): void {
        SetEntityOnlyDamagedByPlayer(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7022BD828FA0B082 | Since: 323 | API-Set: unknown
     */
    export function setOnlyDamagedByRelationshipGroup(entity: number | IEntity): void {
        SetEntityOnlyDamagedByRelationshipGroup(entity, false, undefined);
    }

    /**
     * Enable / disable each type of damage.
     *
     * waterProof is damage related to water not drowning
     * --------------
     * `p7 is to to '1' in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0->f_19, true, true, true, true, true, true, 1, true);`
     *
     *
     * Hash: 0xFAEE099C6F890BB8 | Since: 323 | API-Set: unknown
     */
    export function setProofs(entity: number | IEntity, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, steamProof: boolean, dontResetOnCleanup: boolean, waterProof: boolean): void {
        SetEntityProofs(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, dontResetOnCleanup, waterProof);
    }

    /**
     * w is the correct parameter name!
     *
     * Hash: 0x77B21BE7AC540F07 | Since: 323 | API-Set: unknown
     */
    export function setQuaternion(entity: number | IEntity, pos: Vector3, w: number): void {
        SetEntityQuaternion(entity, pos.x, pos.y, pos.z, w);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A50A1EEDAD01E65 | Since: 323 | API-Set: unknown
     */
    export function setRecordsCollisions(entity: number | IEntity, toggle: boolean): void {
        SetEntityRecordsCollisions(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x730F5F8D3F0F2050 | Since: 323 | API-Set: unknown
     */
    export function setRenderScorched(entity: number | IEntity, toggle: boolean): void {
        SetEntityRenderScorched(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x694E00132F2823ED | Since: 323 | API-Set: unknown
     */
    export function setRequiresMoreExpensiveRiverCheck(entity: number | IEntity, toggle: boolean): void {
        SetEntityRequiresMoreExpensiveRiverCheck(entity, toggle);
    }

    /**
     * rotationOrder refers to the order yaw pitch roll is applied
     * value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.
     * Unsure what value corresponds to what rotation order, more testing will be needed for that.
     * For the most part R* uses 1 or 2 as the order.
     * p5 is usually set as true
     *
     *
     * Hash: 0x8524A8B0171D5E07 | Since: 323 | API-Set: unknown
     */
    export function setRotation(entity: number | IEntity, pitch: number, roll: number, yaw: number, rotationOrder: number): void {
        SetEntityRotation(entity, pitch, roll, yaw, rotationOrder, false);
    }

    /**
     * True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
     *
     * "Allow Freeze If No Collision"
     *
     * Hash: 0x3910051CCECDB00C | Since: 323 | API-Set: unknown
     */
    export function setShouldFreezeWaitingOnCollision(entity: number | IEntity, toggle: boolean): void {
        SetEntityCleanupByEngine(entity, toggle);
    }

    /**
     * Only called once in the scripts.
     *
     * Related to weapon objects.
     *
     *
     * Hash: 0x5C3B791D580E0BC2 | Since: 323 | API-Set: unknown
     */
    export function setSortBias(entity: number | IEntity): void {
        Citizen.invokeNative('0x5C3B791D580E0BC2', entity, 0);
    }

    /**
     * Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
     *
     * 0 = green
     * 1 = red
     * 2 = yellow
     * 3 = reset changes
     * changing lights may not change the behavior of vehicles
     *
     * Hash: 0x57C5DB656185EAC4 | Since: 323 | API-Set: unknown
     */
    export function setTrafficlightOverride(entity: number | IEntity, state: number): void {
        SetEntityTrafficlightOverride(entity, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A092BB0C3808B96 | Since: 323 | API-Set: unknown
     */
    export function setUseMaxDistanceForWaterReflection(entity: number | IEntity): void {
        Citizen.invokeNative('0x1A092BB0C3808B96', entity, false);
    }

    /**
     * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
     *
     * Hash: 0x1C99BB7B6E96D16F | Since: 323 | API-Set: unknown
     */
    export function setVelocity(entity: number | IEntity, pos: Vector3): void {
        SetEntityVelocity(entity, pos.x, pos.y, pos.z);
    }

    /**
     * p2 is always 0.
     *
     * Hash: 0xEA1C610A04DB6BBB | Since: 323 | API-Set: unknown
     */
    export function setVisible(entity: number | IEntity, toggle: boolean): void {
        SetEntityVisible(entity, toggle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC34BC448DA29F5E9 | Since: 573 | API-Set: unknown
     */
    export function setWaterReflectionFlag(entity: number | IEntity, toggle: boolean): void {
        Citizen.invokeNative('0xC34BC448DA29F5E9', entity, toggle);
    }

    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x3AE22DEB5BA5A3E6 | Since: 323 | API-Set: unknown
     */
    export function setObjectAsNoLongerNeeded(_object: number | IObject): void {
        SetObjectAsNoLongerNeeded(_object);
    }

    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x2595DD4236549CE3 | Since: 323 | API-Set: unknown
     */
    export function setPedAsNoLongerNeeded(ped: number | IPed): void {
        SetPedAsNoLongerNeeded(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEA7C8E1B48FF68C | Since: 678 | API-Set: unknown
     */
    export function setPickupCollidesWithProjectiles(): void {
        Citizen.invokeNative('0xCEA7C8E1B48FF68C', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD7B80E7C3BEFC396 | Since: 1180 | API-Set: unknown
     */
    export function setPickUpByCargobobDisabled(entity: number | IEntity, toggle: boolean): void {
        SetPickUpByCargobobDisabled(entity, toggle);
    }

    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x629BFA74418D6239 | Since: 323 | API-Set: unknown
     */
    export function setVehicleAsNoLongerNeeded(vehicle: number | IVehicle): void {
        SetVehicleAsNoLongerNeeded(vehicle);
    }

    /**
     * Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
     *
     * Ran after these 2 natives,
     * set_object_targettable(uParam0, 0);
     * set_entity_invincible(uParam0, 1);
     *
     * Hash: 0xDC6F8601FAF2E893 | Since: 323 | API-Set: unknown
     */
    export function setWaitForCollisionsBeforeProbe(entity: number | IEntity, toggle: boolean): void {
        SetWaitForCollisionsBeforeProbe(entity, toggle);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
     *
     * Hash: 0x28004F88151E03E0 | Since: 323 | API-Set: unknown
     */
    export function stopAnim(entity: number | IEntity, animation: string, animGroup: string): boolean {
        return StopEntityAnim(entity, animation, animGroup, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43D3807C077261E3 | Since: 323 | API-Set: unknown
     */
    export function stopSynchronizedAnim(entity: number | IEntity): boolean {
        return StopSynchronizedEntityAnim(entity, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11E79CAB7183B6F5 | Since: 323 | API-Set: unknown
     */
    export function stopSynchronizedMapAnim(x1: number, y1: number, z1: number, x2: number, y2: any, z2: number): boolean {
        return StopSynchronizedMapEntityAnim(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE5D2A122E09EC42 | Since: 323 | API-Set: unknown
     */
    export function wouldBeOccluded(entityModelHash: number | string, pos: Vector3): boolean {
        if (typeof entityModelHash === 'string') entityModelHash = misc.getHashKey(entityModelHash)
        return WouldEntityBeOccluded(entityModelHash, pos.x, pos.y, pos.z, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA75EE4F689B85391 | Since: 2802 | API-Set: unknown
     */
    export function getLastHitByEntity(entity: number | IEntity): number {
        return Citizen.invokeNative('0xA75EE4F689B85391', entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A27A7827347B3B1 | Since: 3407 | API-Set: unknown
     */
    export function setNoCollisionWithNetworkedEntity(entity1: number | IEntity, entity2: number | IEntity): void {
        Citizen.invokeNative('0x0A27A7827347B3B1', entity1, entity2);
    }

}


export namespace graphics {
    /**
     * Loads a minimap overlay from a GFx file in the current resource.
     *
     * If you need to control the depth of overlay use [`ADD_MINIMAP_OVERLAY_WITH_DEPTH`](#\_0xED0935B5).
     *
     * Hash: 0x4AFD2499 | Since: unknown | API-Set: client
     */
    export function addMinimapOverlay(name: string): number {
        return AddMinimapOverlay(name);
    }

    /**
     * Loads a minimap overlay from a GFx file in the current resource.
     *
     * Hash: 0xED0935B5 | Since: unknown | API-Set: client
     */
    export function addMinimapOverlayWithDepth(name: string, depth: number): number {
        return AddMinimapOverlayWithDepth(name, depth);
    }

    /**
     * Experimental natives, please do not use in a live environment.
     *
     * Hash: 0xA66F8F75 | Since: unknown | API-Set: client
     */
    export function addReplaceTexture(origTxd: string, origTxn: string, newTxd: string, newTxn: string): void {
        AddReplaceTexture(origTxd, origTxn, newTxd, newTxn);
    }

    /**
     * This is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay.
     *
     * Hash: 0x4C89C0ED | Since: unknown | API-Set: client
     */
    export function callMinimapScaleformFunction(miniMap: number, fnName: string): boolean {
        return CallMinimapScaleformFunction(miniMap, fnName);
    }

    /**
     * Commits the backing pixels to the specified runtime texture.
     *
     * Hash: 0x19D81F4E | Since: unknown | API-Set: client
     */
    export function commitRuntimeTexture(tex: number): void {
        CommitRuntimeTexture(tex);
    }

    /**
     * Creates a blank runtime texture.
     *
     * Hash: 0xFEC3766D | Since: unknown | API-Set: client
     */
    export function createRuntimeTexture(txd: number, txn: string, width: number, height: number): number {
        return CreateRuntimeTexture(txd, txn, width, height);
    }

    /**
     * Creates a runtime texture from a DUI handle.
     *
     * Hash: 0xB135472B | Since: unknown | API-Set: client
     */
    export function createRuntimeTextureFromDuiHandle(txd: number, txn: string, duiHandle: string): number {
        return CreateRuntimeTextureFromDuiHandle(txd, txn, duiHandle);
    }

    /**
     * Creates a runtime texture from the specified file in the current resource or a base64 data URL.
     *
     * Hash: 0x786D8BC3 | Since: unknown | API-Set: client
     */
    export function createRuntimeTextureFromImage(txd: number, txn: string, fileName: string): number {
        return CreateRuntimeTextureFromImage(txd, txn, fileName);
    }

    /**
     * Creates a runtime texture dictionary with the specified name.
     * Example:
     *
     * ```lua
     * local txd = CreateRuntimeTxd('meow')
     * ```
     *
     * Hash: 0x1F3AC778 | Since: unknown | API-Set: client
     */
    export function createRuntimeTxd(name: string): number {
        return CreateRuntimeTxd(name);
    }

    /**
     * Allows drawing advanced light effects, known as coronas, which support flares, volumetric lighting, and customizable glow properties.
     *
     * Hash: 0xFF44780E | Since: unknown | API-Set: client
     */
    export function drawCorona(pos: Vector3, size: number, red: number, green: number, blue: number, alpha: number, intensity: number, zBias: number, dirX: number, dirY: number, dirZ: number, viewThreshold: number, innerAngle: number, outerAngle: number, flags: number): void {
        DrawCorona(pos.x, pos.y, pos.z, size, red, green, blue, alpha, intensity, zBias, dirX, dirY, dirZ, viewThreshold, innerAngle, outerAngle, flags);
    }

    /**
     * Draws a gizmo. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * This should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.
     *
     * Matrix layout is as follows:
     *
     * *   Element \[0], \[1] and \[2] should represent the right vector.
     * *   Element \[4], \[5] and \[6] should represent the forward vector.
     * *   Element \[8], \[9] and \[10] should represent the up vector.
     * *   Element \[12], \[13] and \[14] should represent X, Y and Z translation coordinates.
     * *   All other elements should be \[0, 0, 0, 1].
     *
     * Hash: 0xEB2EDCA2 | Since: unknown | API-Set: client
     */
    export function drawGizmo(matrixPtr: number, id: string): boolean {
        return DrawGizmo(matrixPtr, id);
    }

    /**
     * Draw a glow sphere this frame. Up to 256 per single frame.
     *
     * Hash: 0xBD25EC89 | Since: unknown | API-Set: client
     */
    export function drawGlowSphere(pos: Vector3, radius: number, colorR: number, colorG: number, colorB: number, intensity: number, invert: boolean, marker: boolean): void {
        DrawGlowSphere(pos.x, pos.y, pos.z, radius, colorR, colorG, colorB, intensity, invert, marker);
    }

    /**
     * Like DRAW_RECT, but it's a line.
     *
     * Hash: 0xB856A90 | Since: unknown | API-Set: client
     */
    export function drawLine2d(x1: number, y1: number, x2: number, y2: number, width: number, r: number, g: number, b: number, a: number): void {
        DrawLine2d(x1, y1, x2, y2, width, r, g, b, a);
    }

    /**
     * DRAW_RECT, but with a rotation. Seems to be broken.
     *
     * Hash: 0xEC37C168 | Since: unknown | API-Set: client
     */
    export function drawRectRotated(x: number, y: number, width: number, height: number, rotation: number, r: number, g: number, b: number, a: number): void {
        DrawRectRotated(x, y, width, height, rotation, r, g, b, a);
    }

    /**
     * Forces the game snow pass to render.
     *
     * Hash: 0xE6E16170 | Since: unknown | API-Set: client
     */
    export function forceSnowPass(enabled: boolean): void {
        ForceSnowPass(enabled);
    }

    /**
     * Returns the world position the pointer is hovering on the pause map.
     *
     * Hash: 0xE5AF7A82 | Since: unknown | API-Set: client
     */
    export function getPauseMapPointerWorldPosition(): Vector3 {
        return new Vector3(GetPauseMapPointerWorldPosition());
    }

    /**
     * Gets the height of the specified runtime texture.
     *
     * Hash: 0x3574AACE | Since: unknown | API-Set: client
     */
    export function getRuntimeTextureHeight(tex: number): number {
        return GetRuntimeTextureHeight(tex);
    }

    /**
     * Gets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`.
     *
     * Hash: 0xCA0A085F | Since: unknown | API-Set: client
     */
    export function getRuntimeTexturePitch(tex: number): number {
        return GetRuntimeTexturePitch(tex);
    }

    /**
     * Gets the width of the specified runtime texture.
     *
     * Hash: 0xC9F55558 | Since: unknown | API-Set: client
     */
    export function getRuntimeTextureWidth(tex: number): number {
        return GetRuntimeTextureWidth(tex);
    }

    /**
     * Returns whether or not the specific minimap overlay has loaded.
     *
     * Hash: 0xF7535F32 | Since: unknown | API-Set: client
     */
    export function hasMinimapOverlayLoaded(id: number): boolean {
        return HasMinimapOverlayLoaded(id);
    }

    /**
     * Experimental natives, please do not use in a live environment.
     *
     * Hash: 0xA896B20A | Since: unknown | API-Set: client
     */
    export function removeReplaceTexture(origTxd: string, origTxn: string): void {
        RemoveReplaceTexture(origTxd, origTxn);
    }

    /**
     * This function undoes changes made by [`SET_ENTITY_DRAW_OUTLINE_RENDER_TECHNIQUE`](#\_0x68DFF2DD), restoring the original outline rendering behavior. The default render technique group is `unlit`.
     *
     * Hash: 0x8EB6EC38 | Since: unknown | API-Set: client
     */
    export function resetEntityDrawOutlineRenderTechnique(): void {
        ResetEntityDrawOutlineRenderTechnique();
    }

    /**
     * Draws an outline around a given entity. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x76180407 | Since: unknown | API-Set: client
     */
    export function setEntityDrawOutline(entity: number | IEntity, enabled: boolean): void {
        SetEntityDrawOutline(entity, enabled);
    }

    /**
     * Sets color for entity outline. `255, 0, 255, 255` by default.
     *
     * Hash: 0xB41A56C2 | Since: unknown | API-Set: client
     */
    export function setEntityDrawOutlineColor(red: number, green: number, blue: number, alpha: number): void {
        SetEntityDrawOutlineColor(red, green, blue, alpha);
    }

    /**
     * Sets the render technique for drawing an entity's outline. This function allows you to specify a technique group name to control how the entity's outline is rendered in the game.
     *
     * List of known technique group's:
     *
     * ```
     * alt0
     * alt1
     * alt2
     * alt3
     * alt4
     * alt5
     * alt6
     * alt7
     * alt8
     * blit
     * cube
     * default
     * geometry
     * imposter
     * imposterdeferred
     * lightweight0
     * lightweight0CutOut
     * lightweight0CutOutTint
     * lightweight0WaterRefractionAlpha
     * lightweight4
     * lightweight4CutOut
     * lightweight4CutOutTint
     * lightweight4WaterRefractionAlpha
     * lightweight8
     * lightweight8CutOut
     * lightweight8CutOutTint
     * lightweight8WaterRefractionAlpha
     * lightweightHighQuality0
     * lightweightHighQuality0CutOut
     * lightweightHighQuality0WaterRefractionAlpha
     * lightweightHighQuality4
     * lightweightHighQuality4CutOut
     * lightweightHighQuality4WaterRefractionAlpha
     * lightweightHighQuality8
     * lightweightHighQuality8CutOut
     * lightweightHighQuality8WaterRefractionAlpha
     * lightweightNoCapsule4
     * lightweightNoCapsule8
     * multilight
     * tessellate
     * ui
     * unlit
     * waterreflection
     * waterreflectionalphaclip
     * waterreflectionalphacliptint
     * wdcascade
     * ```
     *
     * Hash: 0x68DFF2DD | Since: unknown | API-Set: client
     */
    export function setEntityDrawOutlineRenderTechnique(techniqueGroup: string): void {
        SetEntityDrawOutlineRenderTechnique(techniqueGroup);
    }

    /**
     * Sets variant of shader that will be used to draw entity outline.
     *
     * Variants are:
     *
     * *   **0**: Default value, gauss shader.
     * *   **1**: 2px wide solid color outline.
     * *   **2**: Fullscreen solid color except for entity.
     *
     * Hash: 0x5261A01A | Since: unknown | API-Set: client
     */
    export function setEntityDrawOutlineShader(shader: number): void {
        SetEntityDrawOutlineShader(shader);
    }

    /**
     * This completely disables rendering of fog volumes (vfxfogvolumeinfo.ymt).
     *
     * Hash: 0xFBC64DA3 | Since: unknown | API-Set: client
     */
    export function setFogVolumeRenderDisabled(state: boolean): void {
        SetFogVolumeRenderDisabled(state);
    }

    /**
     * Sets the type for the minimap blip clipping object to be either rectangular or rounded.
     *
     * Hash: 0xB8B4490C | Since: unknown | API-Set: client
     */
    export function setMinimapClipType(_type: number): void {
        SetMinimapClipType(_type);
    }

    /**
     * Overrides the minimap component data (from `common:/data/ui/frontend.xml`) for a specified component.
     *
     * Hash: 0x3E882B23 | Since: unknown | API-Set: client
     */
    export function setMinimapComponentPosition(name: string, alignX: string, alignY: string, posX: number, posY: number, sizeX: number, sizeY: number): void {
        SetMinimapComponentPosition(name, alignX, alignY, posX, posY, sizeX, sizeY);
    }

    /**
     * Sets the display info for a minimap overlay.
     *
     * Hash: 0x6A48B3CA | Since: unknown | API-Set: client
     */
    export function setMinimapOverlayDisplay(miniMap: number, x: number, y: number, xScale: number, yScale: number, alpha: number): void {
        SetMinimapOverlayDisplay(miniMap, x, y, xScale, yScale, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3963D527 | Since: unknown | API-Set: client
     */
    export function setRuntimeTextureArgbData(tex: number, buffer: string, length: number): boolean {
        return SetRuntimeTextureArgbData(tex, buffer, length);
    }

    /**
     * Replaces the pixel data in a runtime texture with the image data from a file in the current resource, or a data URL.
     *
     * If the bitmap is a different size compared to the existing texture, it will be resampled.
     *
     * This command may end up executed asynchronously, and only update the texture data at a later time.
     *
     * Hash: 0x28FC4ECB | Since: unknown | API-Set: client
     */
    export function setRuntimeTextureImage(tex: number, fileName: string): boolean {
        return SetRuntimeTextureImage(tex, fileName);
    }

    /**
     * Sets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect.
     *
     * Hash: 0xAB65ACEE | Since: unknown | API-Set: client
     */
    export function setRuntimeTexturePixel(tex: number, x: number, y: number, r: number, g: number, b: number, a: number): void {
        SetRuntimeTexturePixel(tex, x, y, r, g, b, a);
    }

    /**
     * Modifies the radius scale used in the simulation of wet cloth physics.
     * This affects how cloth behaves when wet, changing how it sticks or reacts to movement.
     *
     * Hash: 0xF1BD2CEF | Since: unknown | API-Set: client
     */
    export function setWetClothPinRadiusScale(scale: number): void {
        SetWetClothPinRadiusScale(scale);
    }

    /**
     * Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\_0xE10198D5) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\_0xE10198D5) for further information.
     *
     * Hash: 0xDD76B263 | Since: unknown | API-Set: client
     */
    export function clearDrawOrigin(): void {
        ClearDrawOrigin();
    }

    /**
     * In compare to `0x31DC8D3F216D8509` return true if texture its created when `0x31DC8D3F216D8509` return true if you put there any id in valid range
     *
     * Hash: 0x8B25BC20 | Since: unknown | API-Set: client
     */
    export function doesTextureExist(textureId: number): boolean {
        return DoesTextureExist(textureId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD4D9DD5 | Since: unknown | API-Set: client
     */
    export function drawBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void {
        DrawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3426BCC | Since: unknown | API-Set: client
     */
    export function drawLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void {
        DrawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xABD19253 | Since: unknown | API-Set: client
     */
    export function drawPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number): void {
        DrawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
    }

    /**
     * Gets the current aspect ratio
     *
     * ```lua
     * local ratio = GetAspectRatio()
     * print(string.format("%.2f", ratio))
     * ```
     *
     * Hash: 0x2CA8F641 | Since: unknown | API-Set: client
     */
    export function getAspectRatio(): number {
        return GetAspectRatio();
    }

    /**
     * Gets the current screen resolution.
     *
     * ```lua
     * local  width, height = GetCurrentScreenResolution()
     * print(string.format("Current screen resolution: %dx%d", width, height))
     *
     * ```
     *
     * Hash: 0x337F0116 | Since: unknown | API-Set: client
     */
    export function getCurrentScreenResolution(): [number, number] {
        return GetCurrentScreenResolution();
    }

    /**
     * Removes the specified texture and remove it from the ped.
     * Unlike `0x6BEFAA907B076859` which only marks the texture as "can be reused" (and keeps it until will be reused), this function deletes it right away. Can fix some sync issues. `DOES_TEXTURE_EXIST` can be use to wait until fully unloaded by game
     *
     * ```lua
     * RemoveTexture(textureId)
     * while DoesTextureExist(textureId) do
     * Wait(0)
     * end
     * ```
     *
     * Hash: 0x1582C7F2 | Since: unknown | API-Set: client
     */
    export function removeTexture(textureId: number): void {
        RemoveTexture(textureId);
    }

    /**
     * Sets the on-screen drawing origin for draw-functions in world coordinates.
     *
     * The effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\_0xDD76B263) and is limited to 32 different origins each frame.
     *
     * Hash: 0xE10198D5 | Since: unknown | API-Set: client
     */
    export function setDrawOrigin(pos: Vector3, is2d: boolean): void {
        SetDrawOrigin(pos.x, pos.y, pos.z, is2d);
    }

    /**
     * Sets the text font for the current text drawing command.
     *
     * Hash: 0xADA9255D | Since: unknown | API-Set: client
     */
    export function setTextFontForCurrentCommand(fontId: number): void {
        SetTextFontForCurrentCommand(fontId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x68CDFA60 | Since: unknown | API-Set: client
     */
    export function setTextJustification(justifyType: number): void {
        SetTextJustification(justifyType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F60AB54 | Since: unknown | API-Set: client
     */
    export function setTextWrap(start: number, end: number): void {
        SetTextWrap(start, end);
    }

    /**
     * A getter for [SET_VISUAL_SETTING_FLOAT](#\_0xD1D31681).
     *
     * Hash: 0x15346B4D | Since: unknown | API-Set: client
     */
    export function getVisualSettingFloat(name: string): number {
        return GetVisualSettingFloat(name);
    }

    /**
     * Overrides a floating point value from `visualsettings.dat` temporarily.
     *
     * Hash: 0xD1D31681 | Since: unknown | API-Set: client
     */
    export function setVisualSettingFloat(name: string, value: number): void {
        SetVisualSettingFloat(name, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82ACC484FFA3B05F | Since: 372 | API-Set: unknown
     */
    export function abortVehicleCrewEmblemRequest(): [boolean, number] {
        return Citizen.invokeNative('0x82ACC484FFA3B05F');
    }

    /**
     * decal types:
     *
     * public enum DecalTypes
     * {
     * splatters_blood = 1010,
     * splatters_blood_dir = 1015,
     * splatters_blood_mist = 1017,
     * splatters_mud = 1020,
     * splatters_paint = 1030,
     * splatters_water = 1040,
     * splatters_water_hydrant = 1050,
     * splatters_blood2 = 1110,
     * weapImpact_metal = 4010,
     * weapImpact_concrete = 4020,
     * weapImpact_mattress = 4030,
     * weapImpact_mud = 4032,
     * weapImpact_wood = 4050,
     * weapImpact_sand = 4053,
     * weapImpact_cardboard = 4040,
     * weapImpact_melee_glass = 4100,
     * weapImpact_glass_blood = 4102,
     * weapImpact_glass_blood2 = 4104,
     * weapImpact_shotgun_paper = 4200,
     * weapImpact_shotgun_mattress,
     * weapImpact_shotgun_metal,
     * weapImpact_shotgun_wood,
     * weapImpact_shotgun_dirt,
     * weapImpact_shotgun_tvscreen,
     * weapImpact_shotgun_tvscreen2,
     * weapImpact_shotgun_tvscreen3,
     * weapImpact_melee_concrete = 4310,
     * weapImpact_melee_wood = 4312,
     * weapImpact_melee_metal = 4314,
     * burn1 = 4421,
     * burn2,
     * burn3,
     * burn4,
     * burn5,
     * bang_concrete_bang = 5000,
     * bang_concrete_bang2,
     * bang_bullet_bang,
     * bang_bullet_bang2 = 5004,
     * bang_glass = 5031,
     * bang_glass2,
     * solidPool_water = 9000,
     * solidPool_blood,
     * solidPool_oil,
     * solidPool_petrol,
     * solidPool_mud,
     * porousPool_water,
     * porousPool_blood,
     * porousPool_oil,
     * porousPool_petrol,
     * porousPool_mud,
     * porousPool_water_ped_drip,
     * liquidTrail_water = 9050
     * }
     *
     * Hash: 0xB302244A1839BDAD | Since: 323 | API-Set: unknown
     */
    export function addDecal(decalType: number, pos: Vector3, width: number, height: number, rCoef: number, gCoef: number, bCoef: number, opacity: number, timeout: number): number {
        return AddDecal(decalType, pos.x, pos.y, pos.z, 0, 0, 0, 0, 0, 0, width, height, rCoef, gCoef, bCoef, opacity, timeout, false, false, false);
    }

    /**
     * Example:
     * `GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");`
     *
     * I tried this and nothing happened...
     *
     * Hash: 0x9CD43EEE12BF4DD0 | Since: 323 | API-Set: unknown
     */
    export function addEntityIcon(entity: number | IEntity, icon: string): number {
        return AddEntityIcon(entity, icon);
    }

    /**
     * No comment provided
     *
     * Hash: 0x126D7F89FE859A5E | Since: 2699 | API-Set: unknown
     */
    export function addOilDecal(pos: Vector3, groundLvl: number, width: number, transparency: number): number {
        return AddOilDecal(pos.x, pos.y, pos.z, groundLvl, width, transparency);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4F5212C7AD880DF8 | Since: 323 | API-Set: unknown
     */
    export function addPetrolDecal(pos: Vector3, groundLvl: number, width: number, transparency: number): number {
        return AddPetrolDecal(pos.x, pos.y, pos.z, groundLvl, width, transparency);
    }

    /**
     * No comment provided
     *
     * Hash: 0x967278682CB6967A | Since: 323 | API-Set: unknown
     */
    export function addPetrolTrailDecalInfo(pos: Vector3): void {
        AddPetrolTrailDecalInfo(pos.x, pos.y, pos.z, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A8E2C8B9CF4549C | Since: 323 | API-Set: unknown
     */
    export function addTcmodifierOverride(modifierName1: string, modifierName2: string): void {
        AddTcmodifierOverride(modifierName1, modifierName2);
    }

    /**
     * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
     *
     * Hash: 0x428BDCB9DA58DA53 | Since: 323 | API-Set: unknown
     */
    export function addVehicleCrewEmblem(vehicle: number | IVehicle, ped: number | IPed, boneIndex: number, x1: number, x2: number, x3: number, y1: number, y2: number, y3: number, z1: number, z2: number, z3: number, scale: number, alpha: number): boolean {
        return AddVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, undefined, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFABC7722293DA7C | Since: 323 | API-Set: unknown
     */
    export function adjustNextPosSizeAsNormalized169(): void {
        Citizen.invokeNative('0xEFABC7722293DA7C');
    }

    /**
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0xE35B38A27E8E7179 | Since: 877 | API-Set: unknown
     */
    export function animpostfxGetCurrentTime(effectName: string): number {
        return AnimpostfxGetUnk(effectName);
    }

    /**
     * Returns whether the specified effect is active.
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0x36AD3E690DA5ACEB | Since: 323 | API-Set: unknown
     */
    export function animpostfxIsRunning(effectName: string): boolean {
        return AnimpostfxIsRunning(effectName);
    }

    /**
     * duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
     * if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0x2206BF9A37B7F724 | Since: 323 | API-Set: unknown
     */
    export function animpostfxPlay(effectName: string, duration: number, looped: boolean): void {
        AnimpostfxPlay(effectName, duration, looped);
    }

    /**
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0x068E835A1D0DC0E3 | Since: 323 | API-Set: unknown
     */
    export function animpostfxStop(effectName: string): void {
        AnimpostfxStop(effectName);
    }

    /**
     * Stops ALL currently playing effects.
     *
     * Hash: 0xB4EDDC19532BFB85 | Since: 323 | API-Set: unknown
     */
    export function animpostfxStopAll(): void {
        AnimpostfxStopAll();
    }

    /**
     * Stops the effect and sets a value (bool) in its data (+0x199) to false.
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0xD2209BE128B5418C | Since: 323 | API-Set: unknown
     */
    export function animpostfxStopAndFlushRequests(effectName: string): void {
        AnimpostfxStopAndDoUnk(effectName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x845BAD77CC770633 | Since: 323 | API-Set: unknown
     */
    export function attachTvAudioToEntity(entity: number | IEntity): void {
        AttachTvAudioToEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x759650634F07B6B4 | Since: 323 | API-Set: unknown
     */
    export function beginCreateLowQualityCopyOfPhoto(): boolean {
        return Citizen.invokeNative('0x759650634F07B6B4', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FA5D82B8F58EC06 | Since: 323 | API-Set: unknown
     */
    export function beginCreateMissionCreatorPhotoPreview(): boolean {
        return Citizen.invokeNative('0x7FA5D82B8F58EC06');
    }

    /**
     * Push a function from the Scaleform onto the stack
     *
     *
     * Hash: 0xF6E48914C7A8694E | Since: 323 | API-Set: unknown
     */
    export function beginScaleformMovieMethod(scaleform: number, methodName: string): boolean {
        return BeginScaleformMovieMethod(scaleform, methodName);
    }

    /**
     * Starts frontend (pause menu) scaleform movie methods.
     * This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
     * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
     *
     * Hash: 0xAB58C27C2E6123C6 | Since: 323 | API-Set: unknown
     */
    export function beginScaleformMovieMethodOnFrontend(methodName: string): boolean {
        return BeginScaleformMovieMethodOnFrontend(methodName);
    }

    /**
     * Starts frontend (pause menu) scaleform movie methods for header options.
     * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
     *
     * Hash: 0xB9449845F73F5E9C | Since: 323 | API-Set: unknown
     */
    export function beginScaleformMovieMethodOnFrontendHeader(methodName: string): boolean {
        return BeginScaleformMovieMethodOnFrontendHeader(methodName);
    }

    /**
     * `Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.`
     *
     * Known components:
     * 19 - MP_RANK_BAR
     * 20 - HUD_DIRECTOR_MODE
     *
     * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
     *
     * Hash: 0x98C494FD5BDFBFD5 | Since: 323 | API-Set: unknown
     */
    export function beginScaleformScriptHudMovieMethod(hudComponent: number, methodName: string): boolean {
        return BeginScaleformScriptHudMovieMethod(hudComponent, methodName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA67C35C56EB1BD9D | Since: 323 | API-Set: unknown
     */
    export function beginTakeHighQualityPhoto(): boolean {
        return BeginTakeHighQualityPhoto();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DD2139A9A20DCE8 | Since: 323 | API-Set: unknown
     */
    export function beginTakeMissionCreatorPhoto(): boolean {
        return BeginTakeMissionCreatorPhoto();
    }

    /**
     * `Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.`
     *
     * Examples:
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");`
     * `HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * Hash: 0x80338406F3475E55 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandScaleformString(componentType: string): void {
        BeginTextCommandScaleformString(componentType);
    }

    /**
     * Calls the Scaleform function.
     *
     * Hash: 0xFBD96D87AC96D533 | Since: 323 | API-Set: unknown
     */
    export function callScaleformMovieMethod(scaleform: number, method: string): void {
        CallScaleformMovieMethod(scaleform, method);
    }

    /**
     * Calls the Scaleform function and passes the parameters as floats.
     *
     * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
     *
     * Hash: 0xD0837058AE2E4BEE | Since: 323 | API-Set: unknown
     */
    export function callScaleformMovieMethodWithNumber(scaleform: number, methodName: string, param1: number, param2: number, param3: number, param4: number, param5: number): void {
        CallScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5);
    }

    /**
     * Calls the Scaleform function and passes both float and string parameters (in their respective order).
     *
     * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
     *
     * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
     *
     * Examples:
     * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
     * `GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);`
     *
     * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
     * `GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);`
     *
     * Hash: 0xEF662D8D57E290B1 | Since: 323 | API-Set: unknown
     */
    export function callScaleformMovieMethodWithNumberAndString(scaleform: number, methodName: string, floatParam1: number, floatParam2: number, floatParam3: number, floatParam4: number, floatParam5: number, stringParam1: string, stringParam2: string, stringParam3: string, stringParam4: string, stringParam5: string): void {
        CallScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
    }

    /**
     * Calls the Scaleform function and passes the parameters as strings.
     *
     * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
     *
     * Hash: 0x51BC1ED3CC44E8F7 | Since: 323 | API-Set: unknown
     */
    export function callScaleformMovieMethodWithString(scaleform: number, methodName: string, param1: string, param2: string, param3: string, param4: string, param5: string): void {
        CallScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5);
    }

    /**
     * No comment provided
     *
     * Hash: 0x27CB772218215325 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsClearShadowSampleType(): void {
        CascadeShadowsClearShadowSampleType();
    }

    /**
     * When this is set to ON, shadows only draw as you get nearer.
     *
     * When OFF, they draw from a further distance.
     *
     * Hash: 0x80ECBC0C856D3B0B | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsEnableEntityTracker(toggle: boolean): void {
        CascadeShadowsEnableEntityTracker(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0AE73D8DF3A762B2 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsEnableFreezer(): void {
        Citizen.invokeNative('0x0AE73D8DF3A762B2', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x03FC694AE06C5A20 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsInitSession(): void {
        CascadeShadowsInitSession();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6DDBF9DFFC4AC080 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetAircraftMode(): void {
        CascadeShadowsSetAircraftMode(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x259BA6D4E6F808F1 | Since: 1011 | API-Set: unknown
     */
    export function cascadeShadowsSetBoundPosition(): void {
        Citizen.invokeNative('0x259BA6D4E6F808F1', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2936CAB8B58FCBD | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetCascadeBounds(): void {
        CascadeShadowsSetCascadeBounds(undefined, false, 0, 0, 0, 0, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F0F3F56635809EF | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetCascadeBoundsScale(): void {
        CascadeShadowsSetCascadeBoundsScale(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD39D13C9FEBF0511 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetDynamicDepthMode(): void {
        CascadeShadowsSetDynamicDepthMode(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02AC28F3A01FA04A | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetDynamicDepthValue(): void {
        CascadeShadowsSetDynamicDepthValue(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E9DAF5A20F15908 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetEntityTrackerScale(): void {
        CascadeShadowsSetEntityTrackerScale(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25FC3E33A31AD0C9 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetScreenSizeCheckEnabled(): void {
        Citizen.invokeNative('0x25FC3E33A31AD0C9', false);
    }

    /**
     * Possible values:
     * "CSM_ST_POINT"
     * "CSM_ST_LINEAR"
     * "CSM_ST_TWOTAP"
     * "CSM_ST_BOX3x3"
     * "CSM_ST_BOX4x4"
     * "CSM_ST_DITHER2_LINEAR"
     * "CSM_ST_CUBIC"
     * "CSM_ST_DITHER4"
     * "CSM_ST_DITHER16"
     * "CSM_ST_SOFT16"
     * "CSM_ST_DITHER16_RPDB"
     * "CSM_ST_POISSON16_RPDB_GNORM"
     * "CSM_ST_HIGHRES_BOX4x4"
     * "CSM_ST_CLOUDS_SIMPLE"
     * "CSM_ST_CLOUDS_LINEAR"
     * "CSM_ST_CLOUDS_TWOTAP"
     * "CSM_ST_CLOUDS_BOX3x3"
     * "CSM_ST_CLOUDS_BOX4x4"
     * "CSM_ST_CLOUDS_DITHER2_LINEAR"
     * "CSM_ST_CLOUDS_SOFT16"
     * "CSM_ST_CLOUDS_DITHER16_RPDB"
     * "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
     *
     * Hash: 0xB11D94BC55F41932 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetShadowSampleType(_type: string): void {
        CascadeShadowsSetShadowSampleType(_type);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36F6626459D91457 | Since: 323 | API-Set: unknown
     */
    export function cascadeShadowsSetSplitZExpWeight(): void {
        Citizen.invokeNative('0x36F6626459D91457', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x15E33297C3E8DC60 | Since: 323 | API-Set: unknown
     */
    export function clearAllTcmodifierOverrides(): void {
        RemoveTcmodifierOverride(undefined);
    }

    /**
     * Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
     *
     * Hash: 0x92CCC17A7A2285DA | Since: 323 | API-Set: unknown
     */
    export function clearExtraTcmodifier(): void {
        ClearExtraTimecycleModifier();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A251AA48B2B46DB | Since: 323 | API-Set: unknown
     */
    export function clearParticleFxShootoutBoat(): void {
        Citizen.invokeNative('0x2A251AA48B2B46DB');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4AF92ACD3141D96C | Since: 323 | API-Set: unknown
     */
    export function clearStatusOfSortedListOperation(): void {
        Citizen.invokeNative('0x4AF92ACD3141D96C');
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F07E7745A236711 | Since: 323 | API-Set: unknown
     */
    export function clearTimecycleModifier(): void {
        ClearTimecycleModifier();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEB3D46BB7F043C0 | Since: 323 | API-Set: unknown
     */
    export function clearTvChannelPlaylist(tvChannel: number): void {
        ClearTvChannelPlaylist(tvChannel);
    }

    /**
     * Creates a checkpoint. Returns the handle of the checkpoint.
     *
     * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
     *
     * Parameters:
     * * type - The type of checkpoint to create. See below for a list of checkpoint types.
     * * pos1 - The position of the checkpoint.
     * * pos2 - The position of the next checkpoint to point to.
     * * radius - The radius of the checkpoint.
     * * color - The color of the checkpoint.
     * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
     *
     * Checkpoint types:
     * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
     * 39----------?
     * 40----------Ring: just a ring
     * 41----------?
     * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
     * 45-47-------Cylinder no arrow or number
     *
     * If using type 42-44, reserved sets number / number and shape to display
     *
     * 0-99------------Just numbers (0-99)
     * 100-109-----------------Arrow (0-9)
     * 110-119------------Two arrows (0-9)
     * 120-129----------Three arrows (0-9)
     * 130-139----------------Circle (0-9)
     * 140-149------------CycleArrow (0-9)
     * 150-159----------------Circle (0-9)
     * 160-169----Circle  w/ pointer (0-9)
     * 170-179-------Perforated ring (0-9)
     * 180-189----------------Sphere (0-9)
     *
     * Hash: 0x0134F0835AB6BFCB | Since: 323 | API-Set: unknown
     */
    export function createCheckpoint(_type: number, posX1: number, posY1: number, posZ1: number, posX2: number, posY2: number, posZ2: number, diameter: number, red: number, green: number, blue: number, alpha: number, reserved: number): number {
        return CreateCheckpoint(_type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);
    }

    /**
     * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
     *
     * Hash: 0xE2C9439ED45DEA60 | Since: 323 | API-Set: unknown
     */
    export function createTrackedPoint(): number {
        return CreateTrackedPoint();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF5ED37F54CD4D52E | Since: 323 | API-Set: unknown
     */
    export function deleteCheckpoint(checkpoint: number): void {
        DeleteCheckpoint(checkpoint);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB25DC90BAD56CA42 | Since: 323 | API-Set: unknown
     */
    export function destroyTrackedPoint(point: number): void {
        DestroyTrackedPoint(point);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0E4299C549F0D1F1 | Since: 323 | API-Set: unknown
     */
    export function disableCompositeShotgunDecals(toggle: boolean): void {
        Citizen.invokeNative('0x0E4299C549F0D1F1', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F6DF3D92271E8A1 | Since: 323 | API-Set: unknown
     */
    export function disableDownwashPtfx(toggle: boolean): void {
        Citizen.invokeNative('0x5F6DF3D92271E8A1', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC35A6D07C93802B2 | Since: 323 | API-Set: unknown
     */
    export function disableHdtexThisFrame(): void {
        Citizen.invokeNative('0xC35A6D07C93802B2');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFD16F0DB5A3535C | Since: 2060 | API-Set: unknown
     */
    export function disableInWaterPtfx(toggle: boolean): void {
        Citizen.invokeNative('0xCFD16F0DB5A3535C', toggle);
    }

    /**
     * Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
     *
     * Hash: 0x2BF72AD5B41AA739 | Since: 323 | API-Set: unknown
     */
    export function disableMoonCycleOverride(): void {
        DisableMoonCycleOverride();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3669F1B198DCAA4F | Since: 323 | API-Set: unknown
     */
    export function disableOcclusionThisFrame(): void {
        DisableOcclusionThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1612C45F9E3E0D44 | Since: 323 | API-Set: unknown
     */
    export function disableProcobjCreation(): void {
        Citizen.invokeNative('0x1612C45F9E3E0D44');
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFD97FF47B745B8D | Since: 791 | API-Set: unknown
     */
    export function disableRegionVfx(): void {
        DisableScriptAmbientEffects(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE81239437E8C5A8 | Since: 323 | API-Set: unknown
     */
    export function disableScreenblurFade(): void {
        DisableScreenblurFade();
    }

    /**
     * No comment provided
     *
     * Hash: 0x02369D5C8A51FDCF | Since: 323 | API-Set: unknown
     */
    export function disableScuffDecals(toggle: boolean): void {
        Citizen.invokeNative('0x02369D5C8A51FDCF', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9F98AC1884E73A2 | Since: 323 | API-Set: unknown
     */
    export function disableVehicleDistantlights(toggle: boolean): void {
        DisableVehicleDistantlights(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E657EF1099EDD65 | Since: 323 | API-Set: unknown
     */
    export function doesLatestBriefStringExist(): boolean {
        return DoesLatestBriefStringExist(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x74AFEF0D2E1E409B | Since: 323 | API-Set: unknown
     */
    export function doesParticleFxLoopedExist(ptfxHandle: number): boolean {
        return DoesParticleFxLoopedExist(ptfxHandle);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xE791DF1F73ED2C8B | Since: 323 | API-Set: unknown
     */
    export function doesThisPhotoSlotContainAValidPhoto(): boolean {
        return Citizen.invokeNative('0xE791DF1F73ED2C8B', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x060D935D3981A275 | Since: 323 | API-Set: unknown
     */
    export function doesVehicleHaveCrewEmblem(vehicle: number | IVehicle): boolean {
        return DoesVehicleHaveCrewEmblem(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x22A249A53034450A | Since: 323 | API-Set: unknown
     */
    export function dontRenderInGameUi(): void {
        DontRenderInGameUi(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7118E83EEB9F7238 | Since: 1290 | API-Set: unknown
     */
    export function drawBinkMovie(binkMovie: number, r: number, g: number, b: number, a: number): void {
        DrawBinkMovie(binkMovie, 0, 0, 0, 0, 0, r, g, b, a);
    }

    /**
     * No comment provided
     *
     * Hash: 0x083A2CA4F2E573BD | Since: 323 | API-Set: unknown
     */
    export function drawDebugBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void {
        DrawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x73B1189623049839 | Since: 323 | API-Set: unknown
     */
    export function drawDebugCross(pos: Vector3, size: number, red: number, green: number, blue: number, alpha: number): void {
        DrawDebugCross(pos.x, pos.y, pos.z, size, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FDFADE676AA3CB0 | Since: 323 | API-Set: unknown
     */
    export function drawDebugLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void {
        DrawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xD8B9A8AC5608FF94 | Since: 323 | API-Set: unknown
     */
    export function drawDebugLineWithTwoColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, alpha1: number, alpha2: number): void {
        DrawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xAAD68E1AB39DA632 | Since: 323 | API-Set: unknown
     */
    export function drawDebugSphere(pos: Vector3, radius: number, red: number, green: number, blue: number, alpha: number): void {
        DrawDebugSphere(pos.x, pos.y, pos.z, radius, red, green, blue, alpha);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x3903E216620488E8 | Since: 323 | API-Set: unknown
     */
    export function drawDebugText(text: string, pos: Vector3, red: number, green: number, blue: number, alpha: number): void {
        DrawDebugText(text, pos.x, pos.y, pos.z, red, green, blue, alpha);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xA3BB2E9555C05A8F | Since: 323 | API-Set: unknown
     */
    export function drawDebugText2d(text: string, pos: Vector3, red: number, green: number, blue: number, alpha: number): void {
        DrawDebugText2d(text, pos.x, pos.y, pos.z, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2A1B2771A01DBD4 | Since: 323 | API-Set: unknown
     */
    export function drawLightWithRange(pos: Vector3, colorR: number, colorG: number, colorB: number, range: number, intensity: number): void {
        DrawLightWithRange(pos.x, pos.y, pos.z, colorR, colorG, colorB, range, intensity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF49E9A9716A04595 | Since: 323 | API-Set: unknown
     */
    export function drawLightWithRangeex(pos: Vector3, r: number, g: number, b: number, range: number, intensity: number, shadow: number): void {
        DrawLightWithRangeAndShadow(pos.x, pos.y, pos.z, r, g, b, range, intensity, shadow);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1072F115DAB0717E | Since: 323 | API-Set: unknown
     */
    export function drawLowQualityPhotoToPhone(): void {
        DrawLowQualityPhotoToPhone(false, false);
    }

    /**
     * enum MarkerTypes
     * {
     * MarkerTypeUpsideDownCone = 0,
     * MarkerTypeVerticalCylinder = 1,
     * MarkerTypeThickChevronUp = 2,
     * MarkerTypeThinChevronUp = 3,
     * MarkerTypeCheckeredFlagRect = 4,
     * MarkerTypeCheckeredFlagCircle = 5,
     * MarkerTypeVerticleCircle = 6,
     * MarkerTypePlaneModel = 7,
     * MarkerTypeLostMCDark = 8,
     * MarkerTypeLostMCLight = 9,
     * MarkerTypeNumber0 = 10,
     * MarkerTypeNumber1 = 11,
     * MarkerTypeNumber2 = 12,
     * MarkerTypeNumber3 = 13,
     * MarkerTypeNumber4 = 14,
     * MarkerTypeNumber5 = 15,
     * MarkerTypeNumber6 = 16,
     * MarkerTypeNumber7 = 17,
     * MarkerTypeNumber8 = 18,
     * MarkerTypeNumber9 = 19,
     * MarkerTypeChevronUpx1 = 20,
     * MarkerTypeChevronUpx2 = 21,
     * MarkerTypeChevronUpx3 = 22,
     * MarkerTypeHorizontalCircleFat = 23,
     * MarkerTypeReplayIcon = 24,
     * MarkerTypeHorizontalCircleSkinny = 25,
     * MarkerTypeHorizontalCircleSkinny_Arrow = 26,
     * MarkerTypeHorizontalSplitArrowCircle = 27,
     * MarkerTypeDebugSphere = 28,
     * MarkerTypeDallorSign = 29,
     * MarkerTypeHorizontalBars = 30,
     * MarkerTypeWolfHead = 31
     * };
     *
     * dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
     *
     * faceCamera - Rotates only the y-axis (the heading) towards the camera
     *
     * p19 - no effect, default value in script is 2
     *
     * rotate - Rotates only on the y-axis (the heading)
     *
     * textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
     *
     * textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
     *
     * drawOnEnts - Draws the marker onto any entities that intersect it
     *
     * basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
     *
     * `bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);`
     *
     * his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
     *
     * `GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);`
     *
     *
     *
     * Hash: 0x28477EC23D892089 | Since: 323 | API-Set: unknown
     */
    export function drawMarker(_type: number, pos: Vector3, dirX: number, dirY: number, dirZ: number, rot: Vector3, scale: Vector3, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void {
        DrawMarker(_type, pos.x, pos.y, pos.z, dirX, dirY, dirZ, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z, red, green, blue, alpha, bobUpAndDown, faceCamera, 0, rotate, textureDict, textureName, drawOnEnts);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE82728F0DE75D13A | Since: 573 | API-Set: unknown
     */
    export function drawMarkerEx(_type: number, pos: Vector3, dirX: number, dirY: number, dirZ: number, rot: Vector3, scale: Vector3, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void {
        DrawMarker2(_type, pos.x, pos.y, pos.z, dirX, dirY, dirZ, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z, red, green, blue, alpha, bobUpAndDown, faceCamera, undefined, rotate, textureDict, textureName, drawOnEnts, false, false);
    }

    /**
     * Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
     * Example https://imgur.com/nCbtS4H
     *
     * alpha - The alpha for the sphere. Goes from 0.0 to 1.0.
     *
     * Hash: 0x799017F9E3B10112 | Since: 463 | API-Set: unknown
     */
    export function drawMarkerSphere(pos: Vector3, radius: number, red: number, green: number, blue: number, alpha: number): void {
        DrawSphere(pos.x, pos.y, pos.z, radius, red, green, blue, alpha);
    }

    /**
     * Draws a rectangle on the screen.
     *
     * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
     *
     * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
     *
     * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
     *
     * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
     *
     * -R: Red part of the color. (0-255)
     *
     * -G: Green part of the color. (0-255)
     *
     * -B: Blue part of the color. (0-255)
     *
     * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
     *
     * The total number of rectangles to be drawn in one frame is apparently limited to 399.
     *
     *
     * Hash: 0x3A618A217E5154F0 | Since: 323 | API-Set: unknown
     */
    export function drawRect(x: number, y: number, width: number, height: number, r: number, g: number, b: number, a: number): void {
        DrawRect(x, y, width, height, r, g, b, a, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54972ADAF0294A93 | Since: 323 | API-Set: unknown
     */
    export function drawScaleformMovie(scaleformHandle: number, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number): void {
        DrawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x87D51D72255D4E78 | Since: 323 | API-Set: unknown
     */
    export function drawScaleformMovie3d(scaleform: number, pos: Vector3, rot: Vector3, scale: Vector3, rotationOrder: number): void {
        DrawScaleformMovie3d(scaleform, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0, 0, scale.x, scale.y, scale.z, rotationOrder);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1CE592FDC749D6F5 | Since: 323 | API-Set: unknown
     */
    export function drawScaleformMovie3dSolid(scaleform: number, pos: Vector3, rot: Vector3, scale: Vector3, rotationOrder: number): void {
        DrawScaleformMovie3dSolid(scaleform, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0, 0, scale.x, scale.y, scale.z, rotationOrder);
    }

    /**
     * unk is not used so no need
     *
     * Hash: 0x0DF606929C105BE1 | Since: 323 | API-Set: unknown
     */
    export function drawScaleformMovieFullscreen(scaleform: number, red: number, green: number, blue: number, alpha: number): void {
        DrawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF537FDE4FBD4CE5 | Since: 323 | API-Set: unknown
     */
    export function drawScaleformMovieFullscreenMasked(scaleform1: number, scaleform2: number, red: number, green: number, blue: number, alpha: number): void {
        DrawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BCA583A583194DB | Since: 323 | API-Set: unknown
     */
    export function drawShadowedSpotLight(pos: Vector3, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number, shadowId: number): void {
        DrawSpotLightWithShadow(pos.x, pos.y, pos.z, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
    }

    /**
     * Parameters:
     * * pos - coordinate where the spotlight is located
     * * dir - the direction vector the spotlight should aim at from its current position
     * * r,g,b - color of the spotlight
     * * distance - the maximum distance the light can reach
     * * brightness - the brightness of the light
     * * roundness - "smoothness" of the circle edge
     * * radius - the radius size of the spotlight
     * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
     *
     * Example in C# (spotlight aims at the closest vehicle):
     * Vector3 myPos = Game.Player.Character.Position;
     * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
     * Vector3 destinationCoords = nearest.Position;
     * Vector3 dirVector = destinationCoords - myPos;
     * dirVector.Normalize();
     * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
     *
     * Hash: 0xD0F64B265C8C8B33 | Since: 323 | API-Set: unknown
     */
    export function drawSpotLight(pos: Vector3, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, hardness: number, radius: number, falloff: number): void {
        DrawSpotLight(pos.x, pos.y, pos.z, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
    }

    /**
     * Draws a 2D sprite on the screen.
     *
     * Parameters:
     * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
     *
     * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
     *
     * screenX/Y - Screen offset (0.5 = center)
     * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
     *
     * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
     *
     * red,green,blue - Sprite color (default = 255/255/255)
     *
     * alpha - opacity level
     *
     * Hash: 0xE7FFAE5EBF23D890 | Since: 323 | API-Set: unknown
     */
    export function drawSprite(textureDict: string, textureName: string, screenSize: Vector2, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number): void {
        DrawSprite(textureDict, textureName, screenSize.x, screenSize.y, width, height, heading, red, green, blue, alpha, false, undefined);
    }

    /**
     * Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
     * x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
     * y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
     * width 0.0 - 1.0 is the reasonable amount generally
     * height 0.0 - 1.0 is the reasonable amount generally
     * p6 almost always 0.0
     * p11 seems to be unknown but almost always 0 int
     *
     * Hash: 0x2D3B147AFAD49DE0 | Since: 1290 | API-Set: unknown
     */
    export function drawSpriteArx(textureDict: string, textureName: string, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number): void {
        Citizen.invokeNative('0x2D3B147AFAD49DE0', textureDict, textureName, x, y, width, height, 0, red, green, blue, alpha, undefined, undefined);
    }

    /**
     * Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
     *
     * u1, v1 - texture coordinates for the top-left corner
     * u2, v2 - texture coordinates for the bottom-right corner
     *
     * Hash: 0x95812F9B26074726 | Since: 1868 | API-Set: unknown
     */
    export function drawSpriteArxWithUv(textureDict: string, textureName: string, x: number, y: number, width: number, height: number, u1: number, v1: number, u2: number, v2: number, heading: number, red: number, green: number, blue: number, alpha: number): void {
        DrawSpriteUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, undefined);
    }

    /**
     * Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
     * These seem to be the only dicts ever requested by this native:
     *
     * prop_screen_biker_laptop
     * Prop_Screen_GR_Disruption
     * Prop_Screen_TaleOfUs
     * prop_screen_nightclub
     * Prop_Screen_IE_Adhawk
     * prop_screen_sm_free_trade_shipping
     * prop_screen_hacker_truck
     * MPDesktop
     * Prop_Screen_Nightclub
     * And a few others
     *
     *
     * Hash: 0x2BC54A8188768488 | Since: 877 | API-Set: unknown
     */
    export function drawSpriteNamedRendertarget(textureDict: string, textureName: string, screenSize: Vector2, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number): void {
        DrawInteractiveSprite(textureDict, textureName, screenSize.x, screenSize.y, width, height, heading, red, green, blue, alpha, undefined);
    }

    /**
     * Used for drawling Deadline trailing lights, see deadline.ytd
     *
     * p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
     * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
     *
     * Hash: 0x29280002282F1928 | Since: 877 | API-Set: unknown
     */
    export function drawTexturedPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void {
        DrawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
    }

    /**
     * Used for drawling Deadline trailing lights, see deadline.ytd
     *
     * Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
     * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
     *
     * Hash: 0x736D7AA1B750856B | Since: 877 | API-Set: unknown
     */
    export function drawTexturedPolyWithThreeColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red1: number, green1: number, blue1: number, alpha1: number, red2: number, green2: number, blue2: number, alpha2: number, red3: number, green3: number, blue3: number, alpha3: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void {
        DrawSpritePoly2(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
    }

    /**
     * `All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.`
     *
     * "act_cinema.ysc", line 1483:
     * `HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);`
     * `HUD::SET_TEXT_RENDER_ID(l_AE);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);`
     * `if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {`
     * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);`
     * } else {
     * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);`
     * }
     *
     * "am_mp_property_int.ysc", line 102545:
     * `if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {`
     * `if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {`
     * `HUD::SET_TEXT_RENDER_ID(a_2._f1);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);`
     * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);`
     * `if (GRAPHICS::GET_TV_CHANNEL() == -1) {`
     * sub_a8fa5(a_2, 1);
     * } else {
     * sub_a8fa5(a_2, 1);
     * `GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);`
     * }
     * `HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());`
     * }
     * }
     *
     *
     * Hash: 0xFDDC2B4ED3C69DF0 | Since: 323 | API-Set: unknown
     */
    export function drawTvChannel(xPos: number, yPos: number, xScale: number, yScale: number, rotation: number, red: number, green: number, blue: number, alpha: number): void {
        DrawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
    }

    /**
     * Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
     *
     * Hash: 0x9DCE1F0F78260875 | Since: 323 | API-Set: unknown
     */
    export function enableAlienBloodVfx(toggle: boolean): void {
        EnableAlienBloodVfx(toggle);
    }

    /**
     * Creates cartoon effect when Michel smokes the weed
     *
     * Hash: 0xD821490579791273 | Since: 323 | API-Set: unknown
     */
    export function enableClownBloodVfx(toggle: boolean): void {
        EnableClownBloodVfx(toggle);
    }

    /**
     * The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
     *
     * Hash: 0x2C328AF17210F009 | Since: 323 | API-Set: unknown
     */
    export function enableMoonCycleOverride(strength: number): void {
        EnableMoonCycleOverride(strength);
    }

    /**
     * No comment provided
     *
     * Hash: 0x74C180030FDE4B69 | Since: 323 | API-Set: unknown
     */
    export function enableMovieKeyframeWait(toggle: boolean): void {
        EnableMovieKeyframeWait(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x873FA65C778AD970 | Since: 323 | API-Set: unknown
     */
    export function enableMovieSubtitles(toggle: boolean): void {
        EnableMovieSubtitles(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5DEBD9C4DC995692 | Since: 323 | API-Set: unknown
     */
    export function enableProcobjCreation(): void {
        Citizen.invokeNative('0x5DEBD9C4DC995692');
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A123435A26C36CD | Since: 323 | API-Set: unknown
     */
    export function endPetrolTrailDecals(): void {
        EndPetrolTrailDecals();
    }

    /**
     * Pops and calls the Scaleform function on the stack
     *
     * Hash: 0xC6796A8FFA375E53 | Since: 323 | API-Set: unknown
     */
    export function endScaleformMovieMethod(): void {
        EndScaleformMovieMethod();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC50AA39A577AF886 | Since: 323 | API-Set: unknown
     */
    export function endScaleformMovieMethodReturnValue(): number {
        return EndScaleformMovieMethodReturnValue();
    }

    /**
     * No comment provided
     *
     * Hash: 0x362E2D3FE93A9959 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandScaleformString(): void {
        EndTextCommandScaleformString();
    }

    /**
     * Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
     *
     * Hash: 0xAE4E8157D9ECF087 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandUnparsedScaleformString(): void {
        EndTextCommandUnparsedScaleformString();
    }

    /**
     * Fades nearby decals within the range specified
     *
     * Hash: 0xD77EDADB0420E6E0 | Since: 323 | API-Set: unknown
     */
    export function fadeDecalsInRange(pos: Vector3): void {
        FadeDecalsInRange(pos.x, pos.y, pos.z, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9B18B4619F48F7B | Since: 323 | API-Set: unknown
     */
    export function fadeUpPedLight(): void {
        FadeUpPedLight(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x814AF7DCAACC597B | Since: 372 | API-Set: unknown
     */
    export function forceExposureReadback(toggle: boolean): void {
        Citizen.invokeNative('0x814AF7DCAACC597B', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA0127DA25FD54C9 | Since: 372 | API-Set: unknown
     */
    export function forceParticleFxInVehicleInterior(): void {
        Citizen.invokeNative('0xBA0127DA25FD54C9', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B079E5221D984D3 | Since: 323 | API-Set: unknown
     */
    export function forcePostfxBulletImpactsAfterHud(): void {
        Citizen.invokeNative('0x9B079E5221D984D3', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC459CFA0CCE245B | Since: 323 | API-Set: unknown
     */
    export function forceRenderInGameUi(toggle: boolean): void {
        ForceRenderInGameUi(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD801CC02177FA3F1 | Since: 323 | API-Set: unknown
     */
    export function freeMemoryForHighQualityPhoto(): void {
        FreeMemoryForHighQualityPhoto();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A12D88881435DCA | Since: 323 | API-Set: unknown
     */
    export function freeMemoryForLowQualityPhoto(): void {
        FreeMemoryForLowQualityPhoto();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A46AF8A78DC5E0A | Since: 323 | API-Set: unknown
     */
    export function freeMemoryForMissionCreatorPhoto(): void {
        FreeMemoryForMissionCreatorPhoto();
    }

    /**
     * No comment provided
     *
     * Hash: 0x346EF3ECAAAB149E | Since: 323 | API-Set: unknown
     */
    export function freeMemoryForMissionCreatorPhotoPreview(): void {
        Citizen.invokeNative('0x346EF3ECAAAB149E');
    }

    /**
     * Returns current screen resolution.
     *
     * Hash: 0x873C9F3104101DD3 | Since: 323 | API-Set: unknown
     */
    export function getActualScreenResolution(): [number, number] {
        return GetActualScreenResolution();
    }

    /**
     * In percentage: 0.0 - 100.0
     *
     * Hash: 0x8E17DDD6B9D5BF29 | Since: 1734 | API-Set: unknown
     */
    export function getBinkMovieTime(binkMovie: number): number {
        return GetBinkMovieTime(binkMovie);
    }

    /**
     * No comment provided
     *
     * Hash: 0x473151EBC762C6DA | Since: 323 | API-Set: unknown
     */
    export function getCurrentNumberOfCloudPhotos(): number {
        return GetCurrentNumberOfCloudPhotos();
    }

    /**
     * No comment provided
     *
     * Hash: 0x30432A0118736E00 | Since: 1493 | API-Set: unknown
     */
    export function getCurrentTvClipNamehash(): number {
        return Citizen.invokeNative('0x30432A0118736E00');
    }

    /**
     * No comment provided
     *
     * Hash: 0x323F647679A09103 | Since: 323 | API-Set: unknown
     */
    export function getDecalWashLevel(decal: number): number {
        return GetDecalWashLevel(decal);
    }

    /**
     * See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
     * Returns an integer representing the Timecycle modifier
     *
     * Hash: 0xBB0527EC6341496D | Since: 323 | API-Set: unknown
     */
    export function getExtraTcmodifier(): number {
        return GetExtraTimecycleModifierIndex();
    }

    /**
     * false = Any resolution < 1280x720
     * true = Any resolution >= 1280x720
     *
     * Hash: 0x84ED31191CC5D2C9 | Since: 323 | API-Set: unknown
     */
    export function getIsHidef(): boolean {
        return GetIsHidef();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F09F7976C512404 | Since: 323 | API-Set: unknown
     */
    export function getIsPetrolDecalInRange(xCoord: number, yCoord: number, zCoord: number, radius: number): boolean {
        return GetIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x98D18905BF723B99 | Since: 1493 | API-Set: unknown
     */
    export function getIsTimecycleTransitioningOut(): boolean {
        return Citizen.invokeNative('0x98D18905BF723B99');
    }

    /**
     * Setting Aspect Ratio Manually in game will return:
     *
     * false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
     * true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
     *
     * Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
     *
     * Hash: 0x30CF4BDA4FCB1905 | Since: 323 | API-Set: unknown
     */
    export function getIsWidescreen(): boolean {
        return GetIsWidescreen();
    }

    /**
     * No comment provided
     *
     * Hash: 0x393BD2275CEB7793 | Since: 1103 | API-Set: unknown
     */
    export function getLightOverrideMaxIntensityScale(): number {
        return Citizen.invokeNative('0x393BD2275CEB7793');
    }

    /**
     * Hardcoded to always return 2.
     *
     * Hash: 0x40AFB081F8ADD4EE | Since: 323 | API-Set: unknown
     */
    export function getLoadHighQualityPhotoStatus(): number {
        return ReturnTwo(0);
    }

    /**
     * This function is hard-coded to always return 96.
     *
     * Hash: 0xDC54A7AF8B3A14EF | Since: 323 | API-Set: unknown
     */
    export function getMaximumNumberOfCloudPhotos(): number {
        return GetMaximumNumberOfCloudPhotos();
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x34D23450F028B0BF | Since: 323 | API-Set: unknown
     */
    export function getMaximumNumberOfPhotos(): number {
        return GetMaximumNumberOfPhotos();
    }

    /**
     * Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
     *
     * Hash: 0xE59343E9E96529E7 | Since: 323 | API-Set: unknown
     */
    export function getMotionblurMaxVelScaler(): number {
        return Citizen.invokeNative('0xE59343E9E96529E7');
    }

    /**
     * No comment provided
     *
     * Hash: 0x35FB78DC42B7BD21 | Since: 323 | API-Set: unknown
     */
    export function getRequestingnightvision(): boolean {
        return GetRequestingnightvision();
    }

    /**
     * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
     *
     * Hash: 0xBAF107B6BB2C97F0 | Since: 323 | API-Set: unknown
     */
    export function getSafeZoneSize(): number {
        return GetSafeZoneSize();
    }

    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     *
     * Hash: 0xD80A80346A45D761 | Since: 757 | API-Set: unknown
     */
    export function getScaleformMovieMethodReturnValueBool(methodReturn: number): boolean {
        return GetScaleformMovieMethodReturnValueBool(methodReturn);
    }

    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     * Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
     *
     * Hash: 0x2DE7EFA66B906036 | Since: 323 | API-Set: unknown
     */
    export function getScaleformMovieMethodReturnValueInt(methodReturn: number): number {
        return GetScaleformMovieMethodReturnValueInt(methodReturn);
    }

    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     * Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
     *
     * Hash: 0xE1E258829A885245 | Since: 323 | API-Set: unknown
     */
    export function getScaleformMovieMethodReturnValueString(methodReturn: number): string {
        return GetScaleformMovieMethodReturnValueString(methodReturn);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CCABFFCA31DDE33 | Since: 323 | API-Set: unknown
     */
    export function getScreenblurFadeCurrentTime(): number {
        return GetScreenblurFadeCurrentTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2EBE8CBC58B90E9 | Since: 323 | API-Set: unknown
     */
    export function getScreenAspectRatio(): number {
        return Citizen.invokeNative('0xB2EBE8CBC58B90E9');
    }

    /**
     * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
     *
     * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
     *
     *
     * For .NET users...
     *
     * VB:
     * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
     *
     * Dim x2dp, y2dp As New Native.OutputArgument
     *
     * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
     * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
     *
     * End Function
     *
     * C#:
     * Vector2 World3DToScreen2d(Vector3 pos)
     * {
     * var x2dp = new OutputArgument();
     * var y2dp = new OutputArgument();
     *
     * Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
     * return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
     * }
     * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
     *
     * Used to be called _WORLD3D_TO_SCREEN2D
     *
     * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
     *
     * Hash: 0x34E82F05DF2974F5 | Since: 323 | API-Set: unknown
     */
    export function getScreenCoordFromWorldCoord(worldPos: Vector3): [boolean, number, number] {
        return GetScreenCoordFromWorldCoord(worldPos.x, worldPos.y, worldPos.z);
    }

    /**
     * int screenresx,screenresy;
     * GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
     *
     * Hash: 0x888D57E407E63624 | Since: 323 | API-Set: unknown
     */
    export function getScreenResolution(): [number, number] {
        return GetScreenResolution();
    }

    /**
     * Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
     *
     * Hash: 0x6DD8F5AA635EB4B2 | Since: 323 | API-Set: unknown
     */
    export function getScriptGfxAlignPosition(x: number, y: number): [number, number] {
        return GetScriptGfxPosition(x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB82A0BF0E3E3265 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfCreateLowQualityCopyOfPhoto(): number {
        return Citizen.invokeNative('0xCB82A0BF0E3E3265', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B0316762AFD4A64 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfCreateMissionCreatorPhotoPreview(): number {
        return Citizen.invokeNative('0x5B0316762AFD4A64');
    }

    /**
     * No comment provided
     *
     * Hash: 0x1670F8D05056F257 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfLoadMissionCreatorPhoto(): [number, any] {
        return GetStatusOfLoadMissionCreatorPhoto();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C0C4E81E1AC60A0 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfSaveHighQualityPhoto(): number {
        return GetStatusOfSaveHighQualityPhoto();
    }

    /**
     * 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
     * appcamera, appmedia, and cellphone_controller.
     *
     * Hash: 0xF5BED327CEA362B1 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfSortedListOperation(): number {
        return GetStatusOfSortedListOperation(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0D6CA79EEEBD8CA3 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfTakeHighQualityPhoto(): number {
        return GetStatusOfTakeHighQualityPhoto();
    }

    /**
     * No comment provided
     *
     * Hash: 0x90A78ECAA4E78453 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfTakeMissionCreatorPhoto(): number {
        return GetStatusOfTakeMissionCreatorPhoto();
    }

    /**
     * Returns the texture resolution of the passed texture dict+name.
     *
     * Note: Most texture resolutions are doubled compared to the console version of the game.
     *
     * Hash: 0x35736EE65BD00C11 | Since: 323 | API-Set: unknown
     */
    export function getTextureResolution(textureDict: string, textureName: string): Vector3 {
        return new Vector3(GetTextureResolution(textureDict, textureName));
    }

    /**
     * Only use for this in the PC scripts is:
     *
     * `if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)`
     *
     * Hash: 0xFDF3D97C674AFB66 | Since: 323 | API-Set: unknown
     */
    export function getTimecycleModifierIndex(): number {
        return GetTimecycleModifierIndex();
    }

    /**
     * No comment provided
     *
     * Hash: 0x459FD2C8D0AB78BC | Since: 323 | API-Set: unknown
     */
    export function getTimecycleTransitionModifierIndex(): number {
        return GetTimecycleTransitionModifierIndex();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB3DAC2C86001E5E | Since: 323 | API-Set: unknown
     */
    export function getTogglePausedRenderphasesStatus(): boolean {
        return GetTogglePausedRenderphasesStatus();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC1E275A90D39995 | Since: 323 | API-Set: unknown
     */
    export function getTvChannel(): number {
        return GetTvChannel();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2170813D3DD8661B | Since: 323 | API-Set: unknown
     */
    export function getTvVolume(): number {
        return GetTvVolume();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2202A3F42C8E5F79 | Since: 323 | API-Set: unknown
     */
    export function getUsingnightvision(): boolean {
        return GetUsingnightvision();
    }

    /**
     * No comment provided
     *
     * Hash: 0x44B80ABAB9D80BD3 | Since: 323 | API-Set: unknown
     */
    export function getUsingseethrough(): boolean {
        return GetUsingseethrough();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE26117A5841B2FF | Since: 323 | API-Set: unknown
     */
    export function getVehicleCrewEmblemRequestState(vehicle: number | IVehicle): number {
        return GetVehicleCrewEmblemRequestState(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA4819F5E23E2FFAD | Since: 323 | API-Set: unknown
     */
    export function golfTrailGetMaxHeight(): number {
        return GolfTrailGetMaxHeight();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA4664972A9B8F8BA | Since: 323 | API-Set: unknown
     */
    export function golfTrailGetVisualControlPoint(): Vector3 {
        return new Vector3(GolfTrailGetVisualControlPoint(0));
    }

    /**
     * No comment provided
     *
     * Hash: 0x12995F2E53FFA601 | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetColour(): void {
        GolfTrailSetColour(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA51C4B86B71652AE | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetEnabled(toggle: boolean): void {
        GolfTrailSetEnabled(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06F761EA47C1D3ED | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetFacing(): void {
        GolfTrailSetFacing(false);
    }

    /**
     * 12 matches across 4 scripts. All 4 scripts were job creators.
     *
     * type ranged from 0 - 2.
     * p4 was always 0.2f. Likely scale.
     * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
     *
     * Tested but noticed nothing.
     *
     * Hash: 0xB1BB03742917A5D6 | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetFixedControlPoint(_type: number, pos: Vector3, red: number, green: number, blue: number, alpha: number): void {
        GolfTrailSetFixedControlPoint(_type, pos.x, pos.y, pos.z, 0, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC0416B061F2B7E5E | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetFixedControlPointEnable(): void {
        Citizen.invokeNative('0xC0416B061F2B7E5E', false);
    }

    /**
     * p8 seems to always be false.
     *
     * Hash: 0x312342E1A4874F3F | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetPath(): void {
        GolfTrailSetPath(0, 0, 0, 0, 0, 0, 0, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2485D34E50A22E84 | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetRadius(): void {
        GolfTrailSetRadius(0, 0, 0);
    }

    /**
     * Only appeared in Golf & Golf_mp. Parameters were all ptrs
     *
     * Hash: 0x9CFDD90B2B844BF7 | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetShaderParams(): void {
        GolfTrailSetShaderParams(0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDBAA5EC848BA2D46 | Since: 323 | API-Set: unknown
     */
    export function golfTrailSetTessellation(): void {
        GolfTrailSetTessellation(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x851CD923176EBA7C | Since: 323 | API-Set: unknown
     */
    export function grabPausemenuOwnership(): void {
        Citizen.invokeNative('0x851CD923176EBA7C');
    }

    /**
     * No comment provided
     *
     * Hash: 0x302C91AB2D477F7E | Since: 323 | API-Set: unknown
     */
    export function grassbatchDisableFlattening(): void {
        GrassLodResetScriptAreas();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAAE9BE70EC7C69AB | Since: 1290 | API-Set: unknown
     */
    export function grassbatchEnableFlatteningExtInSphere(pos: Vector3, scale: number): void {
        Citizen.invokeNative('0xAAE9BE70EC7C69AB', pos.x, pos.y, pos.z, undefined, 0, 0, 0, scale);
    }

    /**
     * Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7
     *
     * Hash: 0x6D955F6A9E0295B1 | Since: 323 | API-Set: unknown
     */
    export function grassbatchEnableFlatteningInSphere(pos: Vector3, radius: number): void {
        GrassLodShrinkScriptAreas(pos.x, pos.y, pos.z, radius, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8217150E1217EBFD | Since: 323 | API-Set: unknown
     */
    export function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle: number): boolean {
        return HasScaleformContainerMovieLoadedIntoParent(scaleformHandle);
    }

    /**
     * Only values used in the scripts are:
     *
     * "heist_mp"
     * "heistmap_mp"
     * "instructional_buttons"
     * "heist_pre"
     *
     * Hash: 0x0C1C5D756FB5F337 | Since: 323 | API-Set: unknown
     */
    export function hasScaleformMovieFilenameLoaded(scaleformName: string): boolean {
        return HasScaleformMovieFilenameLoaded(scaleformName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x85F01B8D5B90570E | Since: 323 | API-Set: unknown
     */
    export function hasScaleformMovieLoaded(scaleformHandle: number): boolean {
        return HasScaleformMovieLoaded(scaleformHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF6E5987D2B4D140 | Since: 323 | API-Set: unknown
     */
    export function hasScaleformScriptHudMovieLoaded(hudComponent: number): boolean {
        return HasScaleformScriptHudMovieLoaded(hudComponent);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0145F696AAAAD2E4 | Since: 323 | API-Set: unknown
     */
    export function hasStreamedTextureDictLoaded(textureDict: string): boolean {
        return HasStreamedTextureDictLoaded(textureDict);
    }

    /**
     * val is 1-20 (0 will return false)
     *
     * Hash: 0x2FCB133CA50A49EB | Since: 1290 | API-Set: unknown
     */
    export function isActiveScaleformMovieDeleting(val: number): boolean {
        return Citizen.invokeNative('0x2FCB133CA50A49EB', val);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC694D74949CAFD0C | Since: 323 | API-Set: unknown
     */
    export function isDecalAlive(decal: number): boolean {
        return IsDecalAlive(decal);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F710BFF7DAE6261 | Since: 1604 | API-Set: unknown
     */
    export function isPlaylistOnChannel(tvChannel: number): boolean {
        return IsPlaylistUnk(tvChannel, undefined);
    }

    /**
     * val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
     *
     * Hash: 0x86255B1FC929E33E | Since: 1290 | API-Set: unknown
     */
    export function isScaleformMovieDeleting(val: number): boolean {
        return IsScaleformMovieDeleting(val);
    }

    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     * Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
     *
     * Hash: 0x768FF8961BA904D6 | Since: 323 | API-Set: unknown
     */
    export function isScaleformMovieMethodReturnValueReady(methodReturn: number): boolean {
        return IsScaleformMovieMethodReturnValueReady(methodReturn);
    }

    /**
     * Returns whether screen transition to blur/from blur is running.
     *
     * Hash: 0x7B226C785A52A0A9 | Since: 323 | API-Set: unknown
     */
    export function isScreenblurFadeRunning(): boolean {
        return IsScreenblurFadeRunning();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC45CCDAAC9221CA8 | Since: 323 | API-Set: unknown
     */
    export function isTrackedPointVisible(point: number): boolean {
        return IsTrackedPointVisible(point);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0AD973CA1E077B60 | Since: 323 | API-Set: unknown
     */
    export function isTvshowCurrentlyPlaying(videoCliphash: number | string): boolean {
        if (typeof videoCliphash === 'string') videoCliphash = misc.getHashKey(videoCliphash)
        return IsTvPlaylistItemPlaying(videoCliphash);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xEC72C258667BE5EA | Since: 323 | API-Set: unknown
     */
    export function loadHighQualityPhoto(): boolean {
        return Citizen.invokeNative('0xEC72C258667BE5EA', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4862437A486F91B0 | Since: 323 | API-Set: unknown
     */
    export function loadMissionCreatorPhoto(): [boolean, any] {
        return LoadMissionCreatorPhoto(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB66064452270E8F1 | Since: 323 | API-Set: unknown
     */
    export function loadMovieMeshSet(movieMeshSetName: string): number {
        return LoadMovieMeshSet(movieMeshSetName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84C8D7C2D30D3280 | Since: 323 | API-Set: unknown
     */
    export function moveVehicleDecals(): void {
        MoveVehicleDecals(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFB55E7C25D3B3BE | Since: 323 | API-Set: unknown
     */
    export function overrideInteriorSmokeEnd(): void {
        OverrideInteriorSmokeEnd();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1600FD8CF72EBC12 | Since: 323 | API-Set: unknown
     */
    export function overrideInteriorSmokeLevel(level: number): void {
        OverrideInteriorSmokeLevel(level);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A2A52824DB96700 | Since: 323 | API-Set: unknown
     */
    export function overrideInteriorSmokeName(name: string): void {
        OverrideInteriorSmokeName(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43FA7CBE20DAB219 | Since: 1290 | API-Set: unknown
     */
    export function overrideNightvisionLightRange(): void {
        Citizen.invokeNative('0x43FA7CBE20DAB219', 0);
    }

    /**
     * Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
     *
     * Hash: 0x95EB5E34F821BABE | Since: 877 | API-Set: unknown
     */
    export function overridePedCrewLogoTexture(ped: number | IPed, txd: string, txn: string): boolean {
        return OverridePedBadgeTexture(ped, txd, txn);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1C7CB175E012964 | Since: 323 | API-Set: unknown
     */
    export function passKeyboardInputToScaleform(scaleformHandle: number): boolean {
        return PassKeyboardInputToScaleform(scaleformHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A35C742130C6080 | Since: 323 | API-Set: unknown
     */
    export function patchDecalDiffuseMap(decalType: number, textureDict: string, textureName: string): void {
        PatchDecalDiffuseMap(decalType, textureDict, textureName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCEDB009461DA156 | Since: 323 | API-Set: unknown
     */
    export function phonephotoeditorIsActive(): boolean {
        return Citizen.invokeNative('0xBCEDB009461DA156');
    }

    /**
     * No comment provided
     *
     * Hash: 0x27FEB5254759CDE3 | Since: 323 | API-Set: unknown
     */
    export function phonephotoeditorSetFrameTxd(textureDict: string): boolean {
        return Citizen.invokeNative('0x27FEB5254759CDE3', textureDict, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7AC24EAB6D74118D | Since: 323 | API-Set: unknown
     */
    export function phonephotoeditorToggle(): boolean {
        return Citizen.invokeNative('0x7AC24EAB6D74118D', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70D2CC8A542A973C | Since: 1290 | API-Set: unknown
     */
    export function playBinkMovie(binkMovie: number): void {
        PlayBinkMovie(binkMovie);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C8938D7D872211E | Since: 323 | API-Set: unknown
     */
    export function popTimecycleModifier(): void {
        PopTimecycleModifier();
    }

    /**
     * Only one match in the scripts:
     *
     * `GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");`
     *
     * Hash: 0xD7021272EB0A451E | Since: 323 | API-Set: unknown
     */
    export function presetInteriorAmbientCache(timecycleModifierName: string): void {
        PresetInteriorAmbientCache(timecycleModifierName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0218BA067D249DEA | Since: 323 | API-Set: unknown
     */
    export function procgrassDisableAmbscalescan(): void {
        Citizen.invokeNative('0x0218BA067D249DEA');
    }

    /**
     * No comment provided
     *
     * Hash: 0x649C97D52332341A | Since: 323 | API-Set: unknown
     */
    export function procgrassDisableCullsphere(handle: number): void {
        Citizen.invokeNative('0x649C97D52332341A', handle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x14FC5833464340A8 | Since: 323 | API-Set: unknown
     */
    export function procgrassEnableAmbscalescan(): void {
        Citizen.invokeNative('0x14FC5833464340A8');
    }

    /**
     * No comment provided
     *
     * Hash: 0xAE51BC858F32BA66 | Since: 323 | API-Set: unknown
     */
    export function procgrassEnableCullsphere(handle: number, pos: Vector3, scale: number): void {
        Citizen.invokeNative('0xAE51BC858F32BA66', handle, pos.x, pos.y, pos.z, scale);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C42340F916C5930 | Since: 323 | API-Set: unknown
     */
    export function procgrassIsCullsphereEnabled(handle: number): boolean {
        return Citizen.invokeNative('0x2C42340F916C5930', handle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58F735290861E6B4 | Since: 323 | API-Set: unknown
     */
    export function pushTimecycleModifier(): void {
        PushTimecycleModifier();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B6E70C5CEEF4EEB | Since: 323 | API-Set: unknown
     */
    export function queryMovieMeshSetState(): number {
        return QueryMovieMeshSetState(undefined);
    }

    /**
     * 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
     *
     * Hash: 0x2A893980E96B659A | Since: 323 | API-Set: unknown
     */
    export function queueOperationToCreateSortedListOfPhotos(): boolean {
        return QueueOperationToCreateSortedListOfPhotos(undefined);
    }

    /**
     * Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
     *
     * Hash: 0xA44FF770DFBC5DAE | Since: 323 | API-Set: unknown
     */
    export function registerNoirLensEffect(): void {
        RegisterNoirScreenEffectThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x170911F37F646F29 | Since: 2802 | API-Set: unknown
     */
    export function registerPostfxBulletImpact(weaponWorldPosX: number, weaponWorldPosY: number, weaponWorldPosZ: number, intensity: number): void {
        Citizen.invokeNative('0x170911F37F646F29', weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x04D950EEFA4EED8C | Since: 1290 | API-Set: unknown
     */
    export function releaseBinkMovie(binkMovie: number): void {
        ReleaseBinkMovie(binkMovie);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB119AA014E89183 | Since: 323 | API-Set: unknown
     */
    export function releaseMovieMeshSet(movieMeshSet: number): void {
        ReleaseMovieMeshSet(movieMeshSet);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED3F346429CCD659 | Since: 323 | API-Set: unknown
     */
    export function removeDecal(decal: number): void {
        RemoveDecal(decal);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCF71CBDDF5B6CB9 | Since: 323 | API-Set: unknown
     */
    export function removeDecalsFromObject(obj: number | IObject): void {
        RemoveDecalsFromObject(obj);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6F6F70FDC6D144C | Since: 323 | API-Set: unknown
     */
    export function removeDecalsFromObjectFacing(obj: number | IObject, pos: Vector3): void {
        RemoveDecalsFromObjectFacing(obj, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE91F1B65F2B48D57 | Since: 323 | API-Set: unknown
     */
    export function removeDecalsFromVehicle(vehicle: number | IVehicle): void {
        RemoveDecalsFromVehicle(vehicle);
    }

    /**
     * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
     *
     * Hash: 0x5D6B2D4830A67C62 | Since: 323 | API-Set: unknown
     */
    export function removeDecalsInRange(pos: Vector3, range: number): void {
        RemoveDecalsInRange(pos.x, pos.y, pos.z, range);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x61F95E5BB3E0A8C6 | Since: 323 | API-Set: unknown
     */
    export function removeGrassCullSphere(handle: number): void {
        Citizen.invokeNative('0x61F95E5BB3E0A8C6', handle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC401503DFE8D53CF | Since: 323 | API-Set: unknown
     */
    export function removeParticleFx(ptfxHandle: number): void {
        RemoveParticleFx(ptfxHandle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8FEAEEBCC127425 | Since: 323 | API-Set: unknown
     */
    export function removeParticleFxFromEntity(entity: number | IEntity): void {
        RemoveParticleFxFromEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD19FA1C6D657305 | Since: 323 | API-Set: unknown
     */
    export function removeParticleFxInRange(pos: Vector3, radius: number): void {
        RemoveParticleFxInRange(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF44A5456AC3F4F97 | Since: 323 | API-Set: unknown
     */
    export function removeScaleformScriptHudMovie(hudComponent: number): void {
        RemoveScaleformScriptHudMovie(hudComponent);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2300034310557E4 | Since: 323 | API-Set: unknown
     */
    export function removeVehicleCrewEmblem(vehicle: number | IVehicle): void {
        RemoveVehicleCrewEmblem(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x03300B57FCAC6DDB | Since: 323 | API-Set: unknown
     */
    export function renderShadowedLightsWithNoShadows(): void {
        Citizen.invokeNative('0x03300B57FCAC6DDB', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x98EDF76A7271E4F2 | Since: 323 | API-Set: unknown
     */
    export function requestEarlyLightCheck(): void {
        Citizen.invokeNative('0x98EDF76A7271E4F2');
    }

    /**
     * No comment provided
     *
     * Hash: 0x11FE353CF9733E6F | Since: 323 | API-Set: unknown
     */
    export function requestScaleformMovie(scaleformName: string): number {
        return RequestScaleformMovie(scaleformName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC514489CFB8AF806 | Since: 323 | API-Set: unknown
     */
    export function requestScaleformMovieInstance(scaleformName: string): number {
        return RequestScaleformMovieInstance(scaleformName);
    }

    /**
     * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
     *
     * These seem to be the only scaleforms ever requested by this native:
     * "breaking_news"
     * "desktop_pc"
     * "ECG_MONITOR"
     * "Hacking_PC"
     * "TEETH_PULLING"
     *
     * Note: Unless this hash is out-of-order, this native is next-gen only.
     *
     *
     * Hash: 0xBD06C611BB9048C2 | Since: 323 | API-Set: unknown
     */
    export function requestScaleformMovieSkipRenderWhilePaused(scaleformName: string): number {
        return RequestScaleformMovieSkipRenderWhilePaused(scaleformName);
    }

    /**
     * Another REQUEST_SCALEFORM_MOVIE equivalent.
     *
     * Hash: 0x65E7E78842E74CDB | Since: 372 | API-Set: unknown
     */
    export function requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName: string): number {
        return RequestScaleformMovieWithIgnoreSuperWidescreen(scaleformName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9304881D6F6537EA | Since: 323 | API-Set: unknown
     */
    export function requestScaleformScriptHudMovie(hudComponent: number): void {
        RequestScaleformScriptHudMovie(hudComponent);
    }

    /**
     * This function can requests texture dictonaries from following RPFs:
     * scaleform_generic.rpf
     * scaleform_minigames.rpf
     * scaleform_minimap.rpf
     * scaleform_web.rpf
     *
     * last param isnt a toggle
     *
     * Hash: 0xDFA2EF8E04127DD5 | Since: 323 | API-Set: unknown
     */
    export function requestStreamedTextureDict(textureDict: string): void {
        RequestStreamedTextureDict(textureDict, false);
    }

    /**
     * Sets an value related to timecycles.
     *
     * Hash: 0xE3E2C1B4C59DBC77 | Since: 323 | API-Set: unknown
     */
    export function resetAdaptation(): void {
        Citizen.invokeNative('0xE3E2C1B4C59DBC77', 0);
    }

    /**
     * Resets the effect of SET_PARTICLE_FX_OVERRIDE
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x89C8553DD3274AAE | Since: 323 | API-Set: unknown
     */
    export function resetParticleFxOverride(name: string): void {
        ResetParticleFxOverride(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE1C8709406F2C41C | Since: 323 | API-Set: unknown
     */
    export function resetPausedRenderphases(): void {
        ResetPausedRenderphases();
    }

    /**
     * This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
     * This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
     *
     * Hash: 0xE3A3DB414A373DAB | Since: 323 | API-Set: unknown
     */
    export function resetScriptGfxAlign(): void {
        ResetScriptGfxAlign();
    }

    /**
     * 1 match in 1 script. cellphone_controller.
     * p0 is -1 in scripts.
     *
     * Hash: 0x3DEC726C25A11BAC | Since: 323 | API-Set: unknown
     */
    export function saveHighQualityPhoto(unused: number): boolean {
        return SaveHighQualityPhoto(unused);
    }

    /**
     * Pushes a boolean for the Scaleform function onto the stack.
     *
     * Hash: 0xC58424BA936EB458 | Since: 323 | API-Set: unknown
     */
    export function scaleformMovieMethodAddParamBool(value: boolean): void {
        ScaleformMovieMethodAddParamBool(value);
    }

    /**
     * Pushes a float for the Scaleform function onto the stack.
     *
     * Hash: 0xD69736AAE04DB51A | Since: 323 | API-Set: unknown
     */
    export function scaleformMovieMethodAddParamFloat(value: number): void {
        ScaleformMovieMethodAddParamFloat(value);
    }

    /**
     * Pushes an integer for the Scaleform function onto the stack.
     *
     * Hash: 0xC3D0841A0CC546A6 | Since: 323 | API-Set: unknown
     */
    export function scaleformMovieMethodAddParamInt(value: number): void {
        ScaleformMovieMethodAddParamInt(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC52C631A1831C03 | Since: 323 | API-Set: unknown
     */
    export function scaleformMovieMethodAddParamLatestBriefString(value: number): void {
        ScaleformMovieMethodAddParamLatestBriefString(value);
    }

    /**
     * Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
     * Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).
     *
     * Hash: 0x77FE3402004CD1B0 | Since: 573 | API-Set: unknown
     */
    export function scaleformMovieMethodAddParamLiteralString(_string: string): void {
        ScaleformMovieMethodAddParamLiteralString(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE83A3E3557A56640 | Since: 323 | API-Set: unknown
     */
    export function scaleformMovieMethodAddParamPlayerNameString(_string: string): void {
        ScaleformMovieMethodAddParamPlayerNameString(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA7148484BD90365 | Since: 323 | API-Set: unknown
     */
    export function scaleformMovieMethodAddParamTextureNameString(_string: string): void {
        ScaleformMovieMethodAddParamTextureNameString(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43DBAE39626CE83F | Since: 1290 | API-Set: unknown
     */
    export function seethroughGetMaxThickness(): number {
        return SeethroughGetMaxThickness();
    }

    /**
     * No comment provided
     *
     * Hash: 0x70A64C0234EF522C | Since: 323 | API-Set: unknown
     */
    export function seethroughReset(): void {
        SeethroughReset();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1086127B3A63505E | Since: 573 | API-Set: unknown
     */
    export function seethroughSetColorNear(red: number, green: number, blue: number): void {
        SeethroughSetColorNear(red, green, blue);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D75795B9DC6EBBF | Since: 573 | API-Set: unknown
     */
    export function seethroughSetFadeEnddistance(distance: number): void {
        SeethroughSetFadeEndDistance(distance);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA78DE25577300BA1 | Since: 573 | API-Set: unknown
     */
    export function seethroughSetFadeStartdistance(distance: number): void {
        SeethroughSetFadeStartDistance(distance);
    }

    /**
     * min: 0.0
     * max: 0.75
     *
     * Hash: 0xD7D0B00177485411 | Since: 323 | API-Set: unknown
     */
    export function seethroughSetHeatscale(index: number, heatScale: number): void {
        SeethroughSetHeatscale(index, heatScale);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1636D7FC127B10D2 | Since: 573 | API-Set: unknown
     */
    export function seethroughSetHighlightNoise(noise: number): void {
        SeethroughSetHiLightNoise(noise);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19E50EB6E33E1D28 | Since: 573 | API-Set: unknown
     */
    export function seethroughSetHilightIntensity(intensity: number): void {
        SeethroughSetHiLightIntensity(intensity);
    }

    /**
     * 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
     * min: 1.0
     * max: 10000.0
     *
     * Hash: 0x0C8FAC83902A62DF | Since: 573 | API-Set: unknown
     */
    export function seethroughSetMaxThickness(thickness: number): void {
        SeethroughSetMaxThickness(thickness);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFEBFBFDFB66039DE | Since: 573 | API-Set: unknown
     */
    export function seethroughSetNoiseMax(amount: number): void {
        SeethroughSetNoiseAmountMax(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF5992E1C9E65D05 | Since: 573 | API-Set: unknown
     */
    export function seethroughSetNoiseMin(amount: number): void {
        SeethroughSetNoiseAmountMin(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3F776ADA161E47D | Since: 1604 | API-Set: unknown
     */
    export function setArenaThemeAndVariationForTakenPhoto(): void {
        Citizen.invokeNative('0xF3F776ADA161E47D', undefined, 0);
    }

    /**
     * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
     * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
     *
     * Used in Humane Labs Heist for EMP.
     *
     * state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
     *
     * Hash: 0x1268615ACE24D504 | Since: 323 | API-Set: unknown
     */
    export function setArtificialLightsState(state: boolean): void {
        SetArtificialLightsState(state);
    }

    /**
     * If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
     *
     * Hash: 0xE2B187C0939B3D32 | Since: 2060 | API-Set: unknown
     */
    export function setArtificialVehicleLightsState(toggle: boolean): void {
        SetArtificialLightsStateAffectsVehicles(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x23BA6B0C2AD7B0D3 | Since: 323 | API-Set: unknown
     */
    export function setBackfaceculling(toggle: boolean): void {
        SetBackfaceculling(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x338D9F609FD632DB | Since: 1290 | API-Set: unknown
     */
    export function setBinkMovie(name: string): number {
        return SetBinkMovie(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF816F2933752322D | Since: 1868 | API-Set: unknown
     */
    export function setBinkMovieAudioFrontend(binkMovie: number): void {
        SetBinkMovieUnk2(binkMovie, false);
    }

    /**
     * In percentage: 0.0 - 100.0
     *
     * Hash: 0x0CB6B3446855B57A | Since: 1290 | API-Set: unknown
     */
    export function setBinkMovieTime(binkMovie: number, progress: number): void {
        SetBinkMovieTime(binkMovie, progress);
    }

    /**
     * `binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)`
     *
     * Hash: 0xAFF33B1178172223 | Since: 1290 | API-Set: unknown
     */
    export function setBinkMovieVolume(binkMovie: number, value: number): void {
        SetBinkMovieVolume(binkMovie, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6805D58CAA427B72 | Since: 1290 | API-Set: unknown
     */
    export function setBinkShouldSkip(binkMovie: number, bShouldSkip: boolean): void {
        SetBinkShouldSkip(binkMovie, bShouldSkip);
    }

    /**
     * This does not move an existing checkpoint... so wtf.
     *
     * Hash: 0xF51D36185993515D | Since: 323 | API-Set: unknown
     */
    export function setCheckpointClipplaneWithPosNorm(checkpoint: number, pos: Vector3, unkX: number, unkY: number, unkZ: number): void {
        Citizen.invokeNative('0xF51D36185993515D', checkpoint, pos.x, pos.y, pos.z, unkX, unkY, unkZ);
    }

    /**
     * Sets the cylinder height of the checkpoint.
     *
     * Parameters:
     * * nearHeight - The height of the checkpoint when inside of the radius.
     * * farHeight - The height of the checkpoint when outside of the radius.
     * * radius - The radius of the checkpoint.
     *
     * Hash: 0x2707AAE9D9297D89 | Since: 323 | API-Set: unknown
     */
    export function setCheckpointCylinderHeight(checkpoint: number, nearHeight: number, farHeight: number, radius: number): void {
        SetCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius);
    }

    /**
     * Unknown. Called after creating a checkpoint (type: 51) in the creators.
     *
     * Hash: 0x615D3925E87A3B26 | Since: 323 | API-Set: unknown
     */
    export function setCheckpointDecalRotAlignedToCameraRot(checkpoint: number): void {
        Citizen.invokeNative('0x615D3925E87A3B26', checkpoint);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C788E7F6438754D | Since: 1180 | API-Set: unknown
     */
    export function setCheckpointDirection(checkpoint: number, pos: Vector3): void {
        Citizen.invokeNative('0x3C788E7F6438754D', checkpoint, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB1EA9411C8911EC | Since: 1180 | API-Set: unknown
     */
    export function setCheckpointForceDirection(checkpoint: number): void {
        Citizen.invokeNative('0xDB1EA9411C8911EC', checkpoint);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCF6788FC4860CD4 | Since: 1734 | API-Set: unknown
     */
    export function setCheckpointForceOldArrowPointing(checkpoint: number): void {
        Citizen.invokeNative('0xFCF6788FC4860CD4', checkpoint);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B5B4DA5D79F1943 | Since: 323 | API-Set: unknown
     */
    export function setCheckpointInsideCylinderHeightScale(checkpoint: number, scale: number): void {
        SetCheckpointIconHeight(checkpoint, scale);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44621483FF966526 | Since: 877 | API-Set: unknown
     */
    export function setCheckpointInsideCylinderScale(checkpoint: number, scale: number): void {
        SetCheckpointIconScale(checkpoint, scale);
    }

    /**
     * Sets the checkpoint color.
     *
     * Hash: 0x7167371E8AD747F7 | Since: 323 | API-Set: unknown
     */
    export function setCheckpointRgba(checkpoint: number, red: number, green: number, blue: number, alpha: number): void {
        SetCheckpointRgba(checkpoint, red, green, blue, alpha);
    }

    /**
     * Sets the checkpoint icon color.
     *
     * Hash: 0xB9EA40907C680580 | Since: 323 | API-Set: unknown
     */
    export function setCheckpointRgba2(checkpoint: number, red: number, green: number, blue: number, alpha: number): void {
        SetCheckpointRgba2(checkpoint, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBF327DED94E4DEB | Since: 323 | API-Set: unknown
     */
    export function setCurrentPlayerTcmodifier(modifierName: string): void {
        SetCurrentPlayerTcmodifier(modifierName);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x175B6BFC15CDD0C5 | Since: 323 | API-Set: unknown
     */
    export function setDebugLinesAndSpheresDrawingActive(enabled: boolean): void {
        SetDebugLinesAndSpheresDrawingActive(enabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46D1A61A21F566FC | Since: 323 | API-Set: unknown
     */
    export function setDecalBulletImpactRangeScale(): void {
        Citizen.invokeNative('0x46D1A61A21F566FC', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5C8F970D4EDFF71 | Since: 877 | API-Set: unknown
     */
    export function setDepthwriting(toggle: boolean): void {
        Citizen.invokeNative('0xC5C8F970D4EDFF71', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B5CFC83122DF602 | Since: 323 | API-Set: unknown
     */
    export function setDisableDecalRenderingThisFrame(): void {
        SetDisableDecalRenderingThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9454B5752C857DC | Since: 323 | API-Set: unknown
     */
    export function setDisablePetrolDecalsIgnitingThisFrame(): void {
        SetDisablePetrolDecalsIgnitingThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x27CFB1B1E078CB2D | Since: 323 | API-Set: unknown
     */
    export function setDisablePetrolDecalsRecyclingThisFrame(): void {
        Citizen.invokeNative('0x27CFB1B1E078CB2D');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE2892E7E55D7073A | Since: 323 | API-Set: unknown
     */
    export function setDistanceBlurStrengthOverride(): void {
        Citizen.invokeNative('0xE2892E7E55D7073A', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D5F595CCAE2E238 | Since: 323 | API-Set: unknown
     */
    export function setEntityIconColor(entity: number | IEntity, red: number, green: number, blue: number, alpha: number): void {
        SetEntityIconColor(entity, red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0E8BEECCA96BA31 | Since: 323 | API-Set: unknown
     */
    export function setEntityIconVisibility(entity: number | IEntity, toggle: boolean): void {
        SetEntityIconVisibility(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF398BEEE4EF45F9 | Since: 323 | API-Set: unknown
     */
    export function setExposuretweak(toggle: boolean): void {
        Citizen.invokeNative('0xEF398BEEE4EF45F9', toggle);
    }

    /**
     * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
     *
     * Hash: 0x5096FD9CCB49056D | Since: 323 | API-Set: unknown
     */
    export function setExtraTcmodifier(modifierName: string): void {
        SetExtraTimecycleModifier(modifierName);
    }

    /**
     * Purpose of p0 and p1 unknown.
     *
     * Hash: 0x0AB84296FED9CFC6 | Since: 323 | API-Set: unknown
     */
    export function setFlash(fadeIn: number, duration: number, fadeOut: number): void {
        SetFlash(0, 0, fadeIn, duration, fadeOut);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A51F78772175A51 | Since: 1011 | API-Set: unknown
     */
    export function setForceMotionblur(toggle: boolean): void {
        Citizen.invokeNative('0x6A51F78772175A51', toggle);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xBE197EAA669238F4 | Since: 323 | API-Set: unknown
     */
    export function setGrassCullSphere(): number {
        return Citizen.invokeNative('0xBE197EAA669238F4', 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA3D65906822BED5 | Since: 323 | API-Set: unknown
     */
    export function setHidofOverride(nearplaneOut: number, nearplaneIn: number, farplaneOut: number, farplaneIn: number): void {
        SetHidofOverride(false, false, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9641588DAB93B4B5 | Since: 877 | API-Set: unknown
     */
    export function setLightOverrideMaxIntensityScale(): void {
        Citizen.invokeNative('0x9641588DAB93B4B5', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB569F41F3E7E83A4 | Since: 1103 | API-Set: unknown
     */
    export function setLockAdaptiveDofDistance(): void {
        Citizen.invokeNative('0xB569F41F3E7E83A4', false);
    }

    /**
     * Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
     *
     * Hash: 0xB3C641F3630BF6DA | Since: 323 | API-Set: unknown
     */
    export function setMotionblurMaxVelScaler(): void {
        Citizen.invokeNative('0xB3C641F3630BF6DA', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF59707B3E5ED531 | Since: 323 | API-Set: unknown
     */
    export function setNextPlayerTcmodifier(modifierName: string): void {
        SetNextPlayerTcmodifier(modifierName);
    }

    /**
     * Enables Night Vision.
     *
     * Example:
     * C#: Function.Call(Hash.SET_NIGHTVISION, true);
     * `C++: GRAPHICS::SET_NIGHTVISION(true);`
     *
     * BOOL toggle:
     * true = turns night vision on for your player.
     * false = turns night vision off for your player.
     *
     * Hash: 0x18F621F7A5B1F85D | Since: 323 | API-Set: unknown
     */
    export function setNightvision(toggle: boolean): void {
        SetNightvision(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE787BF1C5CF823C9 | Since: 323 | API-Set: unknown
     */
    export function setNoiseoveride(toggle: boolean): void {
        SetNoiseoveride(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB6A7C3BB17A0C67 | Since: 323 | API-Set: unknown
     */
    export function setNoisinessoveride(value: number): void {
        SetNoisinessoveride(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xADD6627C4D325458 | Since: 2189 | API-Set: unknown
     */
    export function setOnIslandXForTakenPhoto(): void {
        Citizen.invokeNative('0xADD6627C4D325458', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54E22EA2C1956A8D | Since: 323 | API-Set: unknown
     */
    export function setParticleFxBangScrapeLodrangeScale(): void {
        Citizen.invokeNative('0x54E22EA2C1956A8D', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x908311265D42A820 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxBloodScale(): void {
        Citizen.invokeNative('0x908311265D42A820', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB90E12CAC1DAB25 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxBulletImpactLodrangeScale(): void {
        Citizen.invokeNative('0xBB90E12CAC1DAB25', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x27E32866E9A5C416 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxBulletImpactScale(scale: number): void {
        SetParticleFxBulletImpactScale(scale);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA4AE345A153D573 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxBulletTraceNoAngleReject(): void {
        Citizen.invokeNative('0xCA4AE345A153D573', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xACEE6F360FC1F6B6 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxCamInsideNonplayerVehicle(vehicle: number | IVehicle): void {
        SetParticleFxCamInsideNonplayerVehicle(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEEC4047028426510 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxCamInsideVehicle(): void {
        SetParticleFxCamInsideVehicle(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x949F397A288B28B3 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxFootLodrangeScale(): void {
        Citizen.invokeNative('0x949F397A288B28B3', 0);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xBA3D194057C79A7B | Since: 877 | API-Set: unknown
     */
    export function setParticleFxFootOverrideName(): void {
        Citizen.invokeNative('0xBA3D194057C79A7B', undefined);
    }

    /**
     * Used only once in the scripts (taxi_clowncar)
     *
     * Hash: 0x8CDE909A0370BB3A | Since: 323 | API-Set: unknown
     */
    export function setParticleFxForceVehicleInterior(toggle: boolean): void {
        Citizen.invokeNative('0x8CDE909A0370BB3A', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x726845132380142E | Since: 323 | API-Set: unknown
     */
    export function setParticleFxLoopedAlpha(ptfxHandle: number, alpha: number): void {
        SetParticleFxLoopedAlpha(ptfxHandle, alpha);
    }

    /**
     * only works on some fx's
     *
     * p4 = 0
     *
     * Hash: 0x7F8F65877F88783B | Since: 323 | API-Set: unknown
     */
    export function setParticleFxLoopedColour(ptfxHandle: number, r: number, g: number, b: number): void {
        SetParticleFxLoopedColour(ptfxHandle, r, g, b, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F0C4B5B1C393BE2 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxLoopedEvolution(ptfxHandle: number, propertyName: string, amount: number, noNetwork: boolean): void {
        SetParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCB194B85EF7B541 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxLoopedFarClipDist(ptfxHandle: number, range: number): void {
        SetParticleFxLoopedFarClipDist(ptfxHandle, range);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF7DDEBEC43483C43 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxLoopedOffsets(ptfxHandle: number, pos: Vector3, rot: Vector3): void {
        SetParticleFxLoopedOffsets(ptfxHandle, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB44250AAA456492D | Since: 323 | API-Set: unknown
     */
    export function setParticleFxLoopedScale(ptfxHandle: number, scale: number): void {
        SetParticleFxLoopedScale(ptfxHandle, scale);
    }

    /**
     * Usage example for C#:
     *
     * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
     *
     * Note: the argument alpha ranges from 0.0f-1.0f !
     *
     * Hash: 0x77168D722C58B2FC | Since: 323 | API-Set: unknown
     */
    export function setParticleFxNonLoopedAlpha(alpha: number): void {
        SetParticleFxNonLoopedAlpha(alpha);
    }

    /**
     * only works on some fx's, not networked
     *
     * Hash: 0x26143A59EF48B262 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxNonLoopedColour(r: number, g: number, b: number): void {
        SetParticleFxNonLoopedColour(r, g, b);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E2E01C00837D26E | Since: 2699 | API-Set: unknown
     */
    export function setParticleFxNonLoopedEmitterSize(scale: number): void {
        SetParticleFxNonLoopedEmitterScale(0, 0, scale);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB7EF5850C39FABCA | Since: 2802 | API-Set: unknown
     */
    export function setParticleFxNonLoopedScale(scale: number): void {
        Citizen.invokeNative('0xB7EF5850C39FABCA', scale);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xEA1E2D93F6F75ED9 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxOverride(oldAsset: string, newAsset: string): void {
        SetParticleFxOverride(oldAsset, newAsset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x96EF97DAEB89BEF5 | Since: 323 | API-Set: unknown
     */
    export function setParticleFxShootoutBoat(): void {
        SetParticleFxShootoutBoat(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B40A97646381508 | Since: 1011 | API-Set: unknown
     */
    export function setParticleFxSlipstreamLodrangeScale(scale: number): void {
        Citizen.invokeNative('0x2B40A97646381508', scale);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBDEB86F4D5809204 | Since: 323 | API-Set: unknown
     */
    export function setPlayerTcmodifierTransition(value: number): void {
        SetPlayerTcmodifierTransition(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6730E0D14E50703 | Since: 2545 | API-Set: unknown
     */
    export function setPtfxForceVehicleInteriorFlag(): void {
        Citizen.invokeNative('0xC6730E0D14E50703', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D132D614DD86811 | Since: 323 | API-Set: unknown
     */
    export function setScaleformMovieAsNoLongerNeeded(scaleformHandle: number): void {
        SetScaleformMovieAsNoLongerNeeded(scaleformHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x32F34FF7F617643B | Since: 573 | API-Set: unknown
     */
    export function setScaleformMovieToUseLargeRt(scaleformHandle: number, toggle: boolean): void {
        SetScaleformMovieToUseLargeRt(scaleformHandle, toggle);
    }

    /**
     * This native is used in some casino scripts to fit the scaleform in the rendertarget.
     *
     * Hash: 0xE6A9F00D4240B519 | Since: 877 | API-Set: unknown
     */
    export function setScaleformMovieToUseSuperLargeRt(scaleformHandle: number, toggle: boolean): void {
        SetScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D8EB211944DCE08 | Since: 323 | API-Set: unknown
     */
    export function setScaleformMovieToUseSystemTime(scaleform: number, toggle: boolean): void {
        SetScaleformMovieToUseSystemTime(scaleform, toggle);
    }

    /**
     * horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
     * verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').
     *
     * This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.
     *
     * These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.
     *
     * Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).
     *
     * For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.
     *
     * To reset the value, use RESET_SCRIPT_GFX_ALIGN.
     *
     * Hash: 0xB8A850F20A067EB6 | Since: 323 | API-Set: unknown
     */
    export function setScriptGfxAlign(horizontalAlign: number, verticalAlign: number): void {
        SetScriptGfxAlign(horizontalAlign, verticalAlign);
    }

    /**
     * Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
     *
     * Hash: 0xF5A2C681787E579D | Since: 323 | API-Set: unknown
     */
    export function setScriptGfxAlignParams(x: number, y: number, w: number, h: number): void {
        SetScriptGfxAlignParams(x, y, w, h);
    }

    /**
     * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
     *
     * Hash: 0xC6372ECD45D73BCD | Since: 323 | API-Set: unknown
     */
    export function setScriptGfxDrawBehindPausemenu(toggle: boolean): void {
        SetScriptGfxDrawBehindPausemenu(toggle);
    }

    /**
     * Sets the draw order for script draw commands.
     *
     * Examples from decompiled scripts:
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);`
     * `GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);`
     *
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);`
     * `GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);`
     *
     * Hash: 0x61BB1D9B3A95D802 | Since: 323 | API-Set: unknown
     */
    export function setScriptGfxDrawOrder(drawOrder: number): void {
        SetScriptGfxDrawOrder(drawOrder);
    }

    /**
     * Toggles Heatvision on/off.
     *
     * Hash: 0x7E08924259E08CE0 | Since: 323 | API-Set: unknown
     */
    export function setSeethrough(toggle: boolean): void {
        SetSeethrough(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5DBF05DB5926D089 | Since: 1011 | API-Set: unknown
     */
    export function setSkidmarkRangeScale(scale: number): void {
        Citizen.invokeNative('0x5DBF05DB5926D089', scale);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE2CACCF5A8AA805 | Since: 323 | API-Set: unknown
     */
    export function setStreamedTextureDictAsNoLongerNeeded(textureDict: string): void {
        SetStreamedTextureDictAsNoLongerNeeded(textureDict);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1BBC135A4D25EDDE | Since: 323 | API-Set: unknown
     */
    export function setTakenPhotoIsMugshot(toggle: boolean): void {
        Citizen.invokeNative('0x1BBC135A4D25EDDE', toggle);
    }

    /**
     * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
     *
     * Parameters:
     * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
     *
     * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
     *
     * Hash: 0x2C933ABF17A1DF41 | Since: 323 | API-Set: unknown
     */
    export function setTimecycleModifier(modifierName: string): void {
        SetTimecycleModifier(modifierName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82E7FFCD5B2326B3 | Since: 323 | API-Set: unknown
     */
    export function setTimecycleModifierStrength(strength: number): void {
        SetTimecycleModifierStrength(strength);
    }

    /**
     * No comment provided
     *
     * Hash: 0x164ECBB3CF750CB0 | Since: 323 | API-Set: unknown
     */
    export function setTrackedPointInfo(point: number, pos: Vector3, radius: number): void {
        SetTrackedPointInfo(point, pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1CBA05AE7BD7EE05 | Since: 323 | API-Set: unknown
     */
    export function setTransitionOutOfTimecycleModifier(strength: number): void {
        Citizen.invokeNative('0x1CBA05AE7BD7EE05', strength);
    }

    /**
     * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
     *
     * Hash: 0x3BCF567485E1971C | Since: 323 | API-Set: unknown
     */
    export function setTransitionTimecycleModifier(modifierName: string, transition: number): void {
        SetTransitionTimecycleModifier(modifierName, transition);
    }

    /**
     * Probably changes tvs from being a 3d audio to being "global" audio
     *
     * Hash: 0x113D2C5DC57E1774 | Since: 323 | API-Set: unknown
     */
    export function setTvAudioFrontend(toggle: boolean): void {
        SetTvAudioFrontend(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAABBB23EB6E484E | Since: 323 | API-Set: unknown
     */
    export function setTvChannel(channel: number): void {
        SetTvChannel(channel);
    }

    /**
     * Loads specified video sequence into the TV Channel
     * TV_Channel ranges from 0-2
     * VideoSequence can be any of the following:
     * "PL_STD_CNT" CNT Standard Channel
     * "PL_STD_WZL" Weazel Standard Channel
     * "PL_LO_CNT"
     * "PL_LO_WZL"
     * "PL_SP_WORKOUT"
     * "PL_SP_INV" - Jay Norris Assassination Mission Fail
     * "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
     * "PL_LO_RS" - Righteous Slaughter Ad
     * "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
     * "PL_SP_PLSH1_INTRO"
     * "PL_LES1_FAME_OR_SHAME"
     * "PL_STD_WZL_FOS_EP2"
     * "PL_MP_WEAZEL" - Weazel Logo on loop
     * "PL_MP_CCTV" - Generic CCTV loop
     *
     * Restart:
     * 0=video sequence continues as normal
     * 1=sequence restarts from beginning every time that channel is selected
     *
     *
     * The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
     * https://pastebin.com/zUzGB6h7
     *
     * Hash: 0xF7B38B8305F1FE8B | Since: 323 | API-Set: unknown
     */
    export function setTvChannelPlaylist(tvChannel: number, playlistName: string, restart: boolean): void {
        SetTvChannelPlaylist(tvChannel, playlistName, restart);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2201C576FACAEBE8 | Since: 323 | API-Set: unknown
     */
    export function setTvChannelPlaylistAtHour(tvChannel: number, playlistName: string, hour: number): void {
        SetTvChannelPlaylistAtHour(tvChannel, playlistName, hour);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1C55B110E4DF534 | Since: 323 | API-Set: unknown
     */
    export function setTvPlayerWatchingThisFrame(): void {
        Citizen.invokeNative('0xD1C55B110E4DF534', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2982BF73F66E9DDC | Since: 323 | API-Set: unknown
     */
    export function setTvVolume(volume: number): void {
        SetTvVolume(volume);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF78B803082D4386F | Since: 323 | API-Set: unknown
     */
    export function setWeatherPtfxOverrideCurrLevel(): void {
        Citizen.invokeNative('0xF78B803082D4386F', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA46B73FAA3460AE1 | Since: 323 | API-Set: unknown
     */
    export function setWeatherPtfxUseOverrideSettings(): void {
        Citizen.invokeNative('0xA46B73FAA3460AE1', false);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x6F60E89A7B64EE1D | Since: 323 | API-Set: unknown
     */
    export function startNetworkedParticleFxLoopedOnEntity(effectName: string, entity: number | IEntity, xOffset: number, yOffset: number, zOffset: number, rot: Vector3, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number {
        return StartNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis, r, g, b, a);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xDDE23F30CC5A0F03 | Since: 323 | API-Set: unknown
     */
    export function startNetworkedParticleFxLoopedOnEntityBone(effectName: string, entity: number | IEntity, xOffset: number, yOffset: number, zOffset: number, rot: Vector3, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number {
        return StartNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xF56B8137DF10135D | Since: 323 | API-Set: unknown
     */
    export function startNetworkedParticleFxNonLoopedAtCoord(effectName: string, pos: Vector3, rot: Vector3, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean {
        return StartNetworkedParticleFxNonLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis, false);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xC95EB1DB6E92113D | Since: 323 | API-Set: unknown
     */
    export function startNetworkedParticleFxNonLoopedOnEntity(effectName: string, entity: number | IEntity, offsetX: number, offsetY: number, offsetZ: number, rot: Vector3, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
        return StartNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, scale, axisX, axisY, axisZ);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xA41B6A43642AC2CF | Since: 323 | API-Set: unknown
     */
    export function startNetworkedParticleFxNonLoopedOnPedBone(effectName: string, ped: number | IPed, offsetX: number, offsetY: number, offsetZ: number, rot: Vector3, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
        return StartNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }

    /**
     * `GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)`
     *
     *
     * p11 seems to be always 0
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xE184F4F0DC5910E7 | Since: 323 | API-Set: unknown
     */
    export function startParticleFxLoopedAtCoord(effectName: string, pos: Vector3, rot: Vector3, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
        return StartParticleFxLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis, false);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x1AE42C1660FD6517 | Since: 323 | API-Set: unknown
     */
    export function startParticleFxLoopedOnEntity(effectName: string, entity: number | IEntity, xOffset: number, yOffset: number, zOffset: number, rot: Vector3, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
        return StartParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xC6EB449E33977F0B | Since: 323 | API-Set: unknown
     */
    export function startParticleFxLoopedOnEntityBone(effectName: string, entity: number | IEntity, xOffset: number, yOffset: number, zOffset: number, rot: Vector3, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
        return StartParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xF28DA9F38CD1787C | Since: 323 | API-Set: unknown
     */
    export function startParticleFxLoopedOnPedBone(effectName: string, ped: number | IPed, xOffset: number, yOffset: number, zOffset: number, rot: Vector3, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number {
        return StartParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis);
    }

    /**
     * `GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);`
     *
     * Axis - Invert Axis Flags
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     *
     * -------------------------------------------------------------------
     * C#
     *
     * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
     *
     * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
     *
     * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
     *
     * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
     *
     * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
     *
     * bool xaxis, yaxis, zaxis = To bool the axis values.
     *
     * example:
     * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
     *
     * Hash: 0x25129531F77B9ED3 | Since: 323 | API-Set: unknown
     */
    export function startParticleFxNonLoopedAtCoord(effectName: string, pos: Vector3, rot: Vector3, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean {
        return StartParticleFxNonLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis);
    }

    /**
     * Starts a particle effect on an entity for example your player.
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Example:
     * C#:
     * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
     *
     * `Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE`
     * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
     *
     * -can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
     *
     * Hash: 0x0D53A3B8DA0809D2 | Since: 323 | API-Set: unknown
     */
    export function startParticleFxNonLoopedOnEntity(effectName: string, entity: number | IEntity, offsetX: number, offsetY: number, offsetZ: number, rot: Vector3, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
        return StartParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, scale, axisX, axisY, axisZ);
    }

    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x02B1F2A72E0F5325 | Since: 2189 | API-Set: unknown
     */
    export function startParticleFxNonLoopedOnEntityBone(effectName: string, entity: number | IEntity, offsetX: number, offsetY: number, offsetZ: number, rot: Vector3, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
        return StartNetworkedParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }

    /**
     * `GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);`
     *
     * Axis - Invert Axis Flags
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x0E7E72961BA18619 | Since: 323 | API-Set: unknown
     */
    export function startParticleFxNonLoopedOnPedBone(effectName: string, ped: number | IPed, offsetX: number, offsetY: number, offsetZ: number, rot: Vector3, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean {
        return StartParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0x99AC7F0D8B9C893D | Since: 323 | API-Set: unknown
     */
    export function startPetrolTrailDecals(): void {
        StartPetrolTrailDecals(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x63606A61DE68898A | Since: 1290 | API-Set: unknown
     */
    export function stopBinkMovie(binkMovie: number): void {
        StopBinkMovie(binkMovie);
    }

    /**
     * p1 is always 0 in the native scripts
     *
     * Hash: 0x8F75998877616996 | Since: 323 | API-Set: unknown
     */
    export function stopParticleFxLooped(ptfxHandle: number): void {
        StopParticleFxLooped(ptfxHandle, false);
    }

    /**
     * This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
     * This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
     *
     * Hash: 0xA356990E161C9E65 | Since: 323 | API-Set: unknown
     */
    export function terraingridActivate(toggle: boolean): void {
        TerraingridActivate(toggle);
    }

    /**
     * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
     * This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
     * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
     *
     * Hash: 0x5CE62918F8D703C7 | Since: 323 | API-Set: unknown
     */
    export function terraingridSetColours(lowR: number, lowG: number, lowB: number, lowAlpha: number, r: number, g: number, b: number, alpha: number, highR: number, highG: number, highB: number, highAlpha: number): void {
        TerraingridSetColours(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
    }

    /**
     * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
     * This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
     *
     * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
     *
     * This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
     * The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
     * normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.
     *
     * Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
     *
     * Hash: 0x1C4FC5752BCD8E48 | Since: 323 | API-Set: unknown
     */
    export function terraingridSetParams(pos: Vector3, forwardX: number, forwardY: number, forwardZ: number, sizeX: number, sizeY: number, sizeZ: number, gridScale: number, glowIntensity: number, normalHeight: number, heightDiff: number): void {
        TerraingridSetParams(pos.x, pos.y, pos.z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFC252D8A3E15AB7 | Since: 323 | API-Set: unknown
     */
    export function togglePausedRenderphases(toggle: boolean): void {
        TogglePausedRenderphases(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE63D7C6EECECB66B | Since: 323 | API-Set: unknown
     */
    export function togglePlayerDamageOverlay(toggle: boolean): void {
        Citizen.invokeNative('0xE63D7C6EECECB66B', toggle);
    }

    /**
     * time in ms to transition to fully blurred screen
     *
     * Hash: 0xA328A24AAA6B7FDC | Since: 323 | API-Set: unknown
     */
    export function triggerScreenblurFadeIn(transitionTime: number): boolean {
        return TriggerScreenblurFadeIn(transitionTime);
    }

    /**
     * time in ms to transition from fully blurred to normal
     *
     * Hash: 0xEFACC8AEF94430D5 | Since: 323 | API-Set: unknown
     */
    export function triggerScreenblurFadeOut(transitionTime: number): boolean {
        return TriggerScreenblurFadeOut(transitionTime);
    }

    /**
     * It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET
     *
     * presetName was always "CELEBRATION_WINNER"
     * All presets can be found in common\data\ui\uiscenes.meta
     *
     * Hash: 0x98C4FE6EC34154CA | Since: 323 | API-Set: unknown
     */
    export function ui3dsceneAssignPedToSlot(presetName: string, ped: number | IPed, slot: number, pos: Vector3): boolean {
        return DrawShowroom(presetName, ped, slot, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A42B2E236E71415 | Since: 323 | API-Set: unknown
     */
    export function ui3dsceneClearPatchedData(): void {
        Citizen.invokeNative('0x7A42B2E236E71415');
    }

    /**
     * No comment provided
     *
     * Hash: 0xD3A10FC7FD8D98CD | Since: 323 | API-Set: unknown
     */
    export function ui3dsceneIsAvailable(): boolean {
        return Ui3dsceneIsAvailable();
    }

    /**
     * No comment provided
     *
     * Hash: 0x108BE26959A9D9BB | Since: 323 | API-Set: unknown
     */
    export function ui3dsceneMakePushedPresetPersistent(toggle: boolean): void {
        Citizen.invokeNative('0x108BE26959A9D9BB', toggle);
    }

    /**
     * All presets can be found in common\data\ui\uiscenes.meta
     *
     * Hash: 0xF1CEA8A4198D8E9A | Since: 323 | API-Set: unknown
     */
    export function ui3dscenePushPreset(presetName: string): boolean {
        return Ui3dscenePushPreset(presetName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB7ED70C49521A61D | Since: 323 | API-Set: unknown
     */
    export function unpatchDecalDiffuseMap(decalType: number): void {
        UnpatchDecalDiffuseMap(decalType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEADC0DEDEADC0DE | Since: 323 | API-Set: unknown
     */
    export function updateLightsOnEntity(entity: number | IEntity): void {
        UpdateLightsOnEntity(entity);
    }

    /**
     * From the b678d decompiled scripts:
     *
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("FM_Mission_Controler");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_apartment_mp");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_indep_fireworks");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_cig_plane");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_creator");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_ornate_heist");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_prison_break_heist_station");`
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x6C38AF3693A69A91 | Since: 323 | API-Set: unknown
     */
    export function useParticleFxAsset(name: string): void {
        UseParticleFxAsset(name);
    }

    /**
     * Forces footstep tracks on all surfaces.
     *
     * Hash: 0xAEEDAD1420C65CC0 | Since: 323 | API-Set: unknown
     */
    export function useSnowFootVfxWhenUnsheltered(toggle: boolean): void {
        SetForcePedFootstepsTracks(toggle);
    }

    /**
     * Forces vehicle trails on all surfaces.
     *
     * Hash: 0x4CC7F0FEA5283FE0 | Since: 323 | API-Set: unknown
     */
    export function useSnowWheelVfxWhenUnsheltered(toggle: boolean): void {
        SetForceVehicleTrails(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B712761429DBC14 | Since: 323 | API-Set: unknown
     */
    export function washDecalsFromVehicle(vehicle: number | IVehicle): void {
        WashDecalsFromVehicle(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C30613D50A6ADEF | Since: 323 | API-Set: unknown
     */
    export function washDecalsInRange(pos: Vector3, range: number): void {
        WashDecalsInRange(pos.x, pos.y, pos.z, range, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA465D9CC0D231BA | Since: 1011 | API-Set: unknown
     */
    export function waterReflectionSetScriptObjectVisibility(): void {
        Citizen.invokeNative('0xCA465D9CC0D231BA', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA342A3763B3AFB6C | Since: 3095 | API-Set: unknown
     */
    export function forceAllowSnowFootVfxOnIce(toggle: boolean): void {
        Citizen.invokeNative('0xA342A3763B3AFB6C', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E9EF3A33C8899F8 | Since: 3095 | API-Set: unknown
     */
    export function forceGroundSnowPass(toggle: boolean): void {
        Citizen.invokeNative('0x6E9EF3A33C8899F8', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9743BCCF7CD6E1F6 | Since: 3407 | API-Set: unknown
     */
    export function hasScaleformMovieNamedLoaded(scaleformName: string): [boolean, number] {
        return Citizen.invokeNative('0x9743BCCF7CD6E1F6', scaleformName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4100BF0346A8D2C3 | Since: 3095 | API-Set: unknown
     */
    export function setParticleFxLoopedCameraBias(ptfxHandle: number): void {
        Citizen.invokeNative('0x4100BF0346A8D2C3', ptfxHandle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FDFB1B04C76E9C3 | Since: 3407 | API-Set: unknown
     */
    export function setScaleformMovieNamedAsNoLongerNeeded(scaleformHandle: number, scaleformName: string): void {
        Citizen.invokeNative('0x2FDFB1B04C76E9C3', scaleformHandle, scaleformName);
    }

    /**
     * Does not actually return anything.
     *
     * Hash: 0xEE831F15A8D0D94A | Since: 3095 | API-Set: unknown
     */
    export function setTvChannelPlaylistDirty(tvChannel: number): any {
        return Citizen.invokeNative('0xEE831F15A8D0D94A', tvChannel, false);
    }

    /**
     * Returns ptfxHandle
     * effectName: scr_sv_drag_burnout
     *
     * Hash: 0xDF269BE2909E181A | Since: 3095 | API-Set: unknown
     */
    export function startVehicleParticleFxLooped(vehicle: number | IVehicle, effectName: string, frontBack: boolean, leftRight: boolean, localOnly: boolean): number {
        return Citizen.invokeNative('0xDF269BE2909E181A', vehicle, effectName, frontBack, leftRight, localOnly);
    }

}


export namespace hud {
    /**
     * See [SET_SCRIPT_GFX_ALIGN](#\_0xB8A850F20A067EB6) for details about how gfx align works.
     *
     * Hash: 0xCD949E20 | Since: unknown | API-Set: client
     */
    export function getComponentAlign(id: number): [number, number] {
        return GetHudComponentAlign(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA91866BC | Since: unknown | API-Set: client
     */
    export function getComponentName(id: number): string {
        return GetHudComponentName(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x12217D33 | Since: unknown | API-Set: client
     */
    export function getComponentSize(id: number): Vector3 {
        return new Vector3(GetHudComponentSize(id));
    }

    /**
     * Returns the zoom level data by index from mapzoomdata.meta file.
     *
     * Hash: 0x1363A998 | Since: unknown | API-Set: client
     */
    export function getMapZoomDataLevel(index: number): [boolean, number, number, number, number, number] {
        return GetMapZoomDataLevel(index);
    }

    /**
     * Returns true if the minimap is currently expanded. False if it's the normal minimap state.
     * Use [`IsBigmapFull`](#\_0x66EE14B2) to check if the full map is currently revealed on the minimap.
     *
     * Hash: 0xFFF65C63 | Since: unknown | API-Set: client
     */
    export function isBigmapActive(): boolean {
        return IsBigmapActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x66EE14B2 | Since: unknown | API-Set: client
     */
    export function isBigmapFull(): boolean {
        return IsBigmapFull();
    }

    /**
     * Resets values from the zoom level data by index to defaults from mapzoomdata.meta.
     *
     * Hash: 0x11A5B7ED | Since: unknown | API-Set: client
     */
    export function resetMapZoomDataLevel(index: number): void {
        ResetMapZoomDataLevel(index);
    }

    /**
     * See [SET_SCRIPT_GFX_ALIGN](#\_0xB8A850F20A067EB6) for details about how gfx align works.
     *
     * Hash: 0xEED219F2 | Since: unknown | API-Set: client
     */
    export function setComponentAlign(id: number, horizontalAlign: number, verticalAlign: number): void {
        SetHudComponentAlign(id, horizontalAlign, verticalAlign);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7644A9FA | Since: unknown | API-Set: client
     */
    export function setComponentSize(id: number, x: number, y: number): void {
        SetHudComponentSize(id, x, y);
    }

    /**
     * Sets values to the zoom level data by index.
     *
     * Hash: 0x447C718E | Since: unknown | API-Set: client
     */
    export function setMapZoomDataLevel(index: number, zoomScale: number, zoomSpeed: number, scrollSpeed: number, tilesX: number, tilesY: number): void {
        SetMapZoomDataLevel(index, zoomScale, zoomSpeed, scrollSpeed, tilesX, tilesY);
    }

    /**
     * Get the minimap type:
     *
     * ```
     * 0 = Off,
     * 1 = Regular,
     * 2 = Expanded,
     * 3 = Simple,
     * ```
     *
     * Hash: 0xA6FF71C9 | Since: unknown | API-Set: client
     */
    export function getMinimapType(): number {
        return GetMinimapType();
    }

    /**
     * Possible Types:
     *
     * ```
     * 0 = Off,
     * 1 = Regular,
     * 2 = Expanded,
     * 3 = Simple,
     * ```
     *
     * Hash: 0x5FB53015 | Since: unknown | API-Set: client
     */
    export function setMinimapType(_type: number): void {
        SetMinimapType(_type);
    }

    /**
     * Does stuff like this:
     * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
     *
     * Example:
     * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
     * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
     *
     * BOOL p1 is a toggle to define the game in pause.
     * int p2 is unknown but -1 always works, not sure why though.
     *
     * [30/03/2017] ins1de :
     *
     * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
     *
     * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
     * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
     * - FE_MENU_VERSION_SP_PAUSE
     * - FE_MENU_VERSION_MP_PAUSE
     * - FE_MENU_VERSION_CREATOR_PAUSE
     * - FE_MENU_VERSION_CUTSCENE_PAUSE
     * - FE_MENU_VERSION_SAVEGAME
     * - FE_MENU_VERSION_PRE_LOBBY
     * - FE_MENU_VERSION_LOBBY
     * - FE_MENU_VERSION_MP_CHARACTER_SELECT
     * - FE_MENU_VERSION_MP_CHARACTER_CREATION
     * - FE_MENU_VERSION_EMPTY
     * - FE_MENU_VERSION_EMPTY_NO_BACKGROUND
     * - FE_MENU_VERSION_TEXT_SELECTION
     * - FE_MENU_VERSION_CORONA
     * - FE_MENU_VERSION_CORONA_LOBBY
     * - FE_MENU_VERSION_CORONA_JOINED_PLAYERS
     * - FE_MENU_VERSION_CORONA_INVITE_PLAYERS
     * - FE_MENU_VERSION_CORONA_INVITE_FRIENDS
     * - FE_MENU_VERSION_CORONA_INVITE_CREWS
     * - FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
     * - FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
     * - FE_MENU_VERSION_CORONA_RACE
     * - FE_MENU_VERSION_CORONA_BETTING
     * - FE_MENU_VERSION_JOINING_SCREEN
     * - FE_MENU_VERSION_LANDING_MENU
     * - FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
     *
     * Hash: 0xEF01D36B9C9D0C7B | Since: 323 | API-Set: unknown
     */
    export function activateFrontendMenu(menuhash: number | string, togglePause: boolean, component: number): void {
        if (typeof menuhash === 'string') menuhash = misc.getHashKey(menuhash)
        ActivateFrontendMenu(menuhash, togglePause, component);
    }

    /**
     * Adds a rectangular blip for the specified coordinates/area.
     *
     * It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.
     *
     * By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.
     *
     * Example image:
     * minimap https://w.wew.wtf/pdcjig.png
     * big map https://w.wew.wtf/zgcjcm.png
     *
     * (Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
     *
     * Hash: 0xCE5D0E5E315DB238 | Since: 463 | API-Set: unknown
     */
    export function addBlipForArea(pos: Vector3, width: number, height: number): number {
        return AddBlipForArea(pos.x, pos.y, pos.z, width, height);
    }

    /**
     * Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
     *
     * Hash: 0x5A039BB0BCA604B6 | Since: 323 | API-Set: unknown
     */
    export function addBlipForCoord(pos: Vector3): number {
        return AddBlipForCoord(pos.x, pos.y, pos.z);
    }

    /**
     * Returns red ( default ) blip attached to entity.
     *
     * Example:
     * Blip blip; //Put this outside your case or option
     * `blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);`
     * `HUD::SET_BLIP_AS_FRIENDLY(blip, true);`
     *
     * Hash: 0x5CDE92C702A8FCE7 | Since: 323 | API-Set: unknown
     */
    export function addBlipForEntity(entity: number | IEntity): number {
        return AddBlipForEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE339365C863BD36 | Since: 323 | API-Set: unknown
     */
    export function addBlipForPickup(pickup: any): number {
        return AddBlipForPickup(pickup);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46818D79B1F7499A | Since: 323 | API-Set: unknown
     */
    export function addBlipForRadius(pos: Vector3, radius: number): number {
        return AddBlipForRadius(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x60296AF4BA14ABC5 | Since: 323 | API-Set: unknown
     */
    export function addNextMessageToPreviousBriefs(): void {
        AddNextMessageToPreviousBriefs(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x311438A071DD9B1A | Since: 323 | API-Set: unknown
     */
    export function addPointToGpsCustomRoute(pos: Vector3): void {
        AddPointToGpsCustomRoute(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA905192A6781C41B | Since: 323 | API-Set: unknown
     */
    export function addPointToGpsMultiRoute(pos: Vector3): void {
        AddPointToGpsMultiRoute(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7DCB5B874BCD96E | Since: 323 | API-Set: unknown
     */
    export function addTextComponentFloat(value: number, decimalPlaces: number): void {
        AddTextComponentFloat(value, decimalPlaces);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0E4C749FF9DE9CC4 | Since: 323 | API-Set: unknown
     */
    export function addTextComponentFormattedInteger(value: number, commaSeparated: boolean): void {
        AddTextComponentFormattedInteger(value, commaSeparated);
    }

    /**
     * No comment provided
     *
     * Hash: 0x03B504CF259931BC | Since: 323 | API-Set: unknown
     */
    export function addTextComponentInteger(value: number): void {
        AddTextComponentInteger(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80EAD8E2E1D5D52E | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringBlipName(blip: number | IBlip): void {
        AddTextComponentSubstringBlipName(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F68520888E69014 | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringKeyboardDisplay(_string: string): void {
        AddTextComponentSubstringKeyboardDisplay(_string);
    }

    /**
     * p1 was always -1
     *
     * Hash: 0x761B77454205A61D | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringPhoneNumber(): void {
        AddTextComponentSubstringPhoneNumber(undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6C188BE134E074AA | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringPlayerName(text: string): void {
        AddTextComponentSubstringPlayerName(text);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC63CD5D2920ACBE7 | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringTextLabel(labelName: string): void {
        AddTextComponentSubstringTextLabel(labelName);
    }

    /**
     * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
     *
     * Hash: 0x17299B63C7683A2B | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringTextLabelHashKey(gxtEntryHash: number | string): void {
        if (typeof gxtEntryHash === 'string') gxtEntryHash = misc.getHashKey(gxtEntryHash)
        AddTextComponentSubstringTextLabelHashKey(gxtEntryHash);
    }

    /**
     * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
     *
     * Hash: 0x1115F16B8AB9E8BF | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringTime(timestamp: number, flags: number): void {
        AddTextComponentSubstringTime(timestamp, flags);
    }

    /**
     * This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)
     *
     * Hash: 0x94CF4AC034C9C986 | Since: 323 | API-Set: unknown
     */
    export function addTextComponentSubstringWebsite(website: string): void {
        AddTextComponentSubstringWebsite(website);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4C3B169876D33D7 | Since: 1290 | API-Set: unknown
     */
    export function addValidVehicleHitHash(): void {
        Citizen.invokeNative('0xE4C3B169876D33D7', undefined);
    }

    /**
     * Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)
     *
     * Hash: 0xE67C6DFD386EA5E7 | Since: 323 | API-Set: unknown
     */
    export function allowDisplayOfMultiplayerCashText(allow: boolean): void {
        Citizen.invokeNative('0xE67C6DFD386EA5E7', allow);
    }

    /**
     * Allows opening the pause menu this frame, when the player is dead.
     *
     * Hash: 0xCC3FDDED67BCFC63 | Since: 323 | API-Set: unknown
     */
    export function allowPauseWhenNotInStateOfPlayThisFrame(): void {
        AllowPauseMenuWhenDeadThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x60734CC207C9833C | Since: 323 | API-Set: unknown
     */
    export function allowSonarBlips(toggle: boolean): void {
        AllowSonarBlips(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF13FE2A80C05C561 | Since: 323 | API-Set: unknown
     */
    export function areOnlinePoliciesUpToDate(): boolean {
        return Citizen.invokeNative('0xF13FE2A80C05C561');
    }

    /**
     * No comment provided
     *
     * Hash: 0x23D69E0465570028 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandAddDirectlyToPreviousBriefs(): void {
        BeginTextCommandObjective(undefined);
    }

    /**
     * Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
     *
     *
     * e.g
     * void StartLoadingMessage(char *text, int spinnerType = 3)
     * {
     * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
     * }
     * \/\*OR\*\/
     * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
     * {
     * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
     * WAIT(timeMs);
     * BUSYSPINNER_OFF();
     * }
     *
     *
     * These are some localized strings used in the loading spinner.
     * "PM_WAIT"                   = Please Wait
     * "CELEB_WPLYRS"              = Waiting For Players.
     * "CELL_SPINNER2"             = Scanning storage.
     * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
     * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
     * "FM_COR_AUTOD"                        = Just spinner no text
     * "FM_IHELP_WAT2"                        = Waiting for other players
     * "FM_JIP_WAITO"                            = Game options are being set
     * "FMMC_DOWNLOAD"                    = Downloading
     * "FMMC_PLYLOAD"                         = Loading
     * "FMMC_STARTTRAN"                    = Launching session
     * "HUD_QUITTING"                           =  Quiting session
     * "KILL_STRIP_IDM"                         = Waiting for to accept
     * "MP_SPINLOADING"                      = Loading
     *
     * Hash: 0xABA17D7CE615ADBF | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandBusyspinnerOn(_string: string): void {
        BeginTextCommandBusyspinnerOn(_string);
    }

    /**
     * clears a print text command with this text
     *
     * Hash: 0xE124FA80A759019C | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandClearPrint(text: string): void {
        BeginTextCommandClearPrint(text);
    }

    /**
     * Used to be known as _SET_TEXT_COMPONENT_FORMAT
     *
     * Hash: 0x8509B634FBE7DA11 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandDisplayHelp(inputType: string): void {
        BeginTextCommandDisplayHelp(inputType);
    }

    /**
     * The following were found in the decompiled script files:
     * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
     *
     * ESDOLLA - cash
     * ESMINDOLLA - cash (negative)
     *
     * Used to be known as _SET_TEXT_ENTRY
     *
     * Hash: 0x25FBB336DF1804CB | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandDisplayText(text: string): void {
        BeginTextCommandDisplayText(text);
    }

    /**
     * int GetLineCount(char *text, float x, float y)
     * {
     * BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
     * }
     *
     * Hash: 0x521FB041D93DD0E4 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandGetNumberOfLinesForString(entry: string): void {
        BeginTextCommandLineCount(entry);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54CE8AC98E120CAB | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandGetScreenWidthOfDisplayText(text: string): void {
        BeginTextCommandGetWidth(text);
    }

    /**
     * nothin doin.
     *
     * BOOL Message(const char* text)
     * {
     * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
     * }
     *
     * Hash: 0x853648FD1063A213 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandIsMessageDisplayed(text: string): void {
        BeginTextCommandIsMessageDisplayed(text);
    }

    /**
     * BOOL IsContextActive(char *ctx)
     * {
     * BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
     * return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
     * }
     *
     * Hash: 0x0A24DA3A41B718F5 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName: string): void {
        BeginTextCommandIsThisHelpMessageBeingDisplayed(labelName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F9EE5687F8EECCD | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandOverrideButtonText(gxtEntry: string): void {
        BeginTextCommandOverrideButtonText(gxtEntry);
    }

    /**
     * void ShowSubtitle(const char *text)
     * {
     * BEGIN_TEXT_COMMAND_PRINT("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_PRINT(2000, true);
     * }
     *
     * Hash: 0xB87A37EEB7FAA67D | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandPrint(GxtEntry: string): void {
        BeginTextCommandPrint(GxtEntry);
    }

    /**
     * Starts a text command to change the name of a blip displayed in the pause menu.
     * This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
     * Example:
     *
     * `HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");`
     * `HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);`
     *
     * Hash: 0xF9113A30DE5C6670 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandSetBlipName(textLabel: string): void {
        BeginTextCommandSetBlipName(textLabel);
    }

    /**
     * Declares the entry type of a notification, for example "STRING".
     *
     * int ShowNotification(char *text)
     * {
     * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
     * }
     *
     * Hash: 0x202709F4C58A0424 | Since: 323 | API-Set: unknown
     */
    export function beginTextCommandThefeedPost(text: string): void {
        BeginTextCommandThefeedPost(text);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2A592B04648A9CB | Since: 323 | API-Set: unknown
     */
    export function busyspinnerIsDisplaying(): boolean {
        return BusyspinnerIsDisplaying();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD422FCC5F239A915 | Since: 323 | API-Set: unknown
     */
    export function busyspinnerIsOn(): boolean {
        return BusyspinnerIsOn();
    }

    /**
     * Removes the loading prompt at the bottom right of the screen.
     *
     * Hash: 0x10D373323E5B9C0D | Since: 323 | API-Set: unknown
     */
    export function busyspinnerOff(): void {
        BusyspinnerOff();
    }

    /**
     * Displays cash change notifications on HUD.
     *
     * Hash: 0x0772DF77852C2E30 | Since: 323 | API-Set: unknown
     */
    export function changeFakeMpCash(cash: number, bank: number): void {
        ChangeFakeMpCash(cash, bank);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A179DF17CCF04CD | Since: 323 | API-Set: unknown
     */
    export function clearAdditionalText(): void {
        ClearAdditionalText(0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD12882D3FF82BF11 | Since: 877 | API-Set: unknown
     */
    export function clearAllBlipRoutes(): void {
        ClearAllBlipRoutes();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6178F68A87A4D3A0 | Since: 323 | API-Set: unknown
     */
    export function clearAllHelpMessages(): void {
        ClearAllHelpMessages();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D292F73ADBD9313 | Since: 323 | API-Set: unknown
     */
    export function clearBrief(): void {
        ClearBrief();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7792424AA0EAC32E | Since: 323 | API-Set: unknown
     */
    export function clearDynamicPauseMenuErrorMessage(): void {
        ClearDynamicPauseMenuErrorMessage();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8410C5E0CD847B9D | Since: 1290 | API-Set: unknown
     */
    export function clearFakeConeArray(): void {
        Citizen.invokeNative('0x8410C5E0CD847B9D');
    }

    /**
     * No comment provided
     *
     * Hash: 0x50085246ABD3FEFA | Since: 323 | API-Set: unknown
     */
    export function clearFloatingHelp(hudIndex: number): void {
        ClearFloatingHelp(hudIndex, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6DE0561D9232A64 | Since: 323 | API-Set: unknown
     */
    export function clearGpsCustomRoute(): void {
        ClearGpsCustomRoute();
    }

    /**
     * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
     *
     * Doesn't seem like the flags are actually read by the game at all.
     *
     * Hash: 0x21986729D6A3A830 | Since: 323 | API-Set: unknown
     */
    export function clearGpsFlags(): void {
        ClearGpsFlags();
    }

    /**
     * Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
     *
     * Hash: 0x67EEDEA1B9BAFD94 | Since: 323 | API-Set: unknown
     */
    export function clearGpsMultiRoute(): void {
        ClearGpsMultiRoute();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF4FB7C8CDFA3DA7 | Since: 323 | API-Set: unknown
     */
    export function clearGpsPlayerWaypoint(): void {
        ClearGpsPlayerWaypoint();
    }

    /**
     * Does the same as SET_RACE_TRACK_RENDER(false);
     *
     * Hash: 0x7AA5B4CE533C858B | Since: 323 | API-Set: unknown
     */
    export function clearGpsRaceTrack(): void {
        ClearGpsRaceTrack();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8DFCED7A656F8802 | Since: 323 | API-Set: unknown
     */
    export function clearHelp(toggle: boolean): void {
        ClearHelp(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E62BE5DC58E9E06 | Since: 323 | API-Set: unknown
     */
    export function clearPedInPauseMenu(): void {
        ClearPedInPauseMenu();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCC33FA791322B9D9 | Since: 323 | API-Set: unknown
     */
    export function clearPrints(): void {
        ClearPrints();
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xB57D8DD645CFA2CF | Since: 323 | API-Set: unknown
     */
    export function clearReminderMessage(): void {
        ClearReminderMessage();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CEA2839313C09AC | Since: 323 | API-Set: unknown
     */
    export function clearSmallPrints(): void {
        ClearSmallPrints();
    }

    /**
     * p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z
     *
     * Hash: 0xCF708001E1E536DD | Since: 323 | API-Set: unknown
     */
    export function clearThisPrint(): void {
        ClearThisPrint(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB81A3DADD503187 | Since: 1290 | API-Set: unknown
     */
    export function clearValidVehicleHitHashes(): void {
        Citizen.invokeNative('0xEB81A3DADD503187');
    }

    /**
     * No comment provided
     *
     * Hash: 0x1AC8F4AD40E22127 | Since: 323 | API-Set: unknown
     */
    export function closeMpTextChat(): void {
        CloseMultiplayerChat();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2B32BE3FC1626C6 | Since: 323 | API-Set: unknown
     */
    export function closeSocialClubMenu(): void {
        CloseSocialClubMenu();
    }

    /**
     * No comment provided
     *
     * Hash: 0x66E7CB63C97B7D20 | Since: 323 | API-Set: unknown
     */
    export function codeWantsScriptToTakeControl(): boolean {
        return Citizen.invokeNative('0x66E7CB63C97B7D20');
    }

    /**
     * clanFlag: takes a number 0-5
     *
     * Hash: 0xBFEFE3321A3F5015 | Since: 323 | API-Set: unknown
     */
    export function createFakeMpGamerTag(ped: number | IPed, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: number): number {
        return CreateFakeMpGamerTag(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
    }

    /**
     * clanFlag: takes a number 0-5
     *
     * Hash: 0x6DD05E9D83EFA4C9 | Since: 323 | API-Set: unknown
     */
    export function createMpGamerTagWithCrewColor(player: number | string | IPlayer, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: number, r: number, g: number, b: number): void {
        CreateMpGamerTagWithCrewColor(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2708FC083123F9FF | Since: 323 | API-Set: unknown
     */
    export function customMinimapClearBlips(): void {
        ClearRaceGalleryBlips();
    }

    /**
     * Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
     *
     * Hash: 0x551DF99658DB6EE8 | Since: 323 | API-Set: unknown
     */
    export function customMinimapCreateBlip(pos: Vector3): number {
        return RaceGalleryAddBlip(pos.x, pos.y, pos.z);
    }

    /**
     * If toggle is true, the map is shown in full screen
     * If toggle is false, the map is shown in normal mode
     *
     * Hash: 0x5354C5BA2EA868A4 | Since: 323 | API-Set: unknown
     */
    export function customMinimapSetActive(toggle: boolean): void {
        RaceGalleryFullscreen(toggle);
    }

    /**
     * Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
     *
     * Hash: 0x1EAE6DD17B7A5EFA | Since: 323 | API-Set: unknown
     */
    export function customMinimapSetBlipObject(spriteId: number): void {
        RaceGalleryNextBlipSprite(spriteId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD8E694757BCEA8E9 | Since: 323 | API-Set: unknown
     */
    export function deleteWaypointsFromThisPlayer(): void {
        DeleteWaypoint();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D3465A73092F0E6 | Since: 323 | API-Set: unknown
     */
    export function disableFrontendThisFrame(): void {
        DisableFrontendThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9245E81072704B8A | Since: 323 | API-Set: unknown
     */
    export function disablePausemenuSpinner(): void {
        PauseMenuDisableBusyspinner(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA5E78BA2B1331C55 | Since: 323 | API-Set: unknown
     */
    export function displayAmmoThisFrame(display: boolean): void {
        DisplayAmmoThisFrame(display);
    }

    /**
     * No comment provided
     *
     * Hash: 0x276B6CE369C33678 | Since: 323 | API-Set: unknown
     */
    export function displayAreaName(toggle: boolean): void {
        DisplayAreaName(toggle);
    }

    /**
     * "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
     * "DISPLAY_CASH(true);" disables cash amount rendering
     *
     * Hash: 0x96DEC8D5430208B7 | Since: 323 | API-Set: unknown
     */
    export function displayCash(toggle: boolean): void {
        DisplayCash(toggle);
    }

    /**
     * The messages are localized strings.
     * Examples:
     * "No_bus_money"
     * "Enter_bus"
     * "Tour_help"
     * "LETTERS_HELP2"
     * "Dummy"
     *
     * <strong>The bool appears to always be false (if it even is a bool, as it's represented by a zero)</strong>
     * --------
     * p1 doesn't seem to make a difference, regardless of the state it's in.
     *
     *
     * picture of where on the screen this is displayed?
     *
     * Hash: 0x960C9FF8F616E41C | Since: 323 | API-Set: unknown
     */
    export function displayHelpTextThisFrame(message: string): void {
        DisplayHelpTextThisFrame(message, false);
    }

    /**
     * If Hud should be displayed
     *
     * Hash: 0xA6294919E56FF02A | Since: 323 | API-Set: unknown
     */
    export function display(toggle: boolean): void {
        DisplayHud(toggle);
    }

    /**
     * Enables drawing some hud components, such as help labels, this frame, when the player is dead.
     *
     * Hash: 0x7669F9E39DC17063 | Since: 323 | API-Set: unknown
     */
    export function displayWhenNotInStateOfPlayThisFrame(): void {
        DisplayHudWhenDeadThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x402F9ED62087E898 | Since: 323 | API-Set: unknown
     */
    export function displayWhenPausedThisFrame(): void {
        DisplayHudWhenPausedThisFrame();
    }

    /**
     * Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
     * Doesn't need to be called every frame.
     * Preview: https://i.imgur.com/DfqKWfJ.png
     *
     * Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
     *
     * Hash: 0x82CEDC33687E1F50 | Since: 323 | API-Set: unknown
     */
    export function displayPlayerNameTagsOnBlips(toggle: boolean): void {
        DisplayPlayerNameTagsOnBlips(toggle);
    }

    /**
     * If Minimap / Radar should be displayed.
     *
     * Hash: 0xA0EBB943C300E693 | Since: 323 | API-Set: unknown
     */
    export function displayRadar(toggle: boolean): void {
        DisplayRadar(toggle);
    }

    /**
     * Displays the crosshair for this frame.
     *
     * Hash: 0x73115226F4814E62 | Since: 323 | API-Set: unknown
     */
    export function displaySniperScopeThisFrame(): void {
        DisplaySniperScopeThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6DB27D19ECBB7DA | Since: 323 | API-Set: unknown
     */
    export function doesBlipExist(blip: number | IBlip): boolean {
        return DoesBlipExist(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD2238F57B977751 | Since: 323 | API-Set: unknown
     */
    export function doesBlipHaveGpsRoute(blip: number | IBlip): boolean {
        return DoesBlipHaveGpsRoute(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x15B8ECF844EE67ED | Since: 323 | API-Set: unknown
     */
    export function doesPedHaveAiBlip(ped: number | IPed): boolean {
        return DoesPedHaveAiBlip(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C7302E725259789 | Since: 323 | API-Set: unknown
     */
    export function doesTextBlockExist(gxt: string): boolean {
        return DoesTextBlockExist(gxt);
    }

    /**
     * Checks if the passed gxt name exists in the game files.
     *
     * Hash: 0xAC09CA973C564252 | Since: 323 | API-Set: unknown
     */
    export function doesTextLabelExist(gxt: string): boolean {
        return DoesTextLabelExist(gxt);
    }

    /**
     * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
     *
     * Hash: 0x6D14BFDC33B34F55 | Since: 323 | API-Set: unknown
     */
    export function dontTiltMinimapThisFrame(): void {
        DontTiltMinimapThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x89DA85D949CE57A0 | Since: 2802 | API-Set: unknown
     */
    export function dontZoomMinimapWhenRunningThisFrame(): void {
        Citizen.invokeNative('0x89DA85D949CE57A0');
    }

    /**
     * No comment provided
     *
     * Hash: 0x55F5A5F07134DE60 | Since: 1180 | API-Set: unknown
     */
    export function dontZoomMinimapWhenSnipingThisFrame(): void {
        Citizen.invokeNative('0x55F5A5F07134DE60');
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x211C4EF450086857 | Since: 323 | API-Set: unknown
     */
    export function drawFrontendBackgroundThisFrame(): void {
        Citizen.invokeNative('0x211C4EF450086857');
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF4F34A85CA2970C | Since: 323 | API-Set: unknown
     */
    export function drawOverFadeThisFrame(): void {
        Citizen.invokeNative('0xBF4F34A85CA2970C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFDBDF5AE59BA0F4 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandAddDirectlyToPreviousBriefs(): void {
        EndTextCommandObjective(false);
    }

    /**
     * enum eBusySpinnerType
     * {
     * BUSY_SPINNER_LEFT,
     * BUSY_SPINNER_LEFT_2,
     * BUSY_SPINNER_LEFT_3,
     * BUSY_SPINNER_SAVE,
     * BUSY_SPINNER_RIGHT,
     * };
     *
     * Hash: 0xBD12F8228410D9B4 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandBusyspinnerOn(busySpinnerType: number): void {
        EndTextCommandBusyspinnerOn(busySpinnerType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCC75460ABA29378 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandClearPrint(): void {
        EndTextCommandClearPrint();
    }

    /**
     * shape goes from -1 to 50 (may be more).
     * p0 is always 0.
     *
     * Example:
     * void FloatingHelpText(const char* text)
     * {
     * BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
     * }
     *
     * Image:
     * - imgbin.org/images/26209.jpg
     *
     * more inputs/icons:
     * - https://pastebin.com/nqNYWMSB
     *
     * Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
     *
     * Hash: 0x238FFE5C7B0498A6 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandDisplayHelp(loop: boolean, beep: boolean, shape: number): void {
        EndTextCommandDisplayHelp(0, loop, beep, shape);
    }

    /**
     * `After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.`
     *
     * Used to be known as _DRAW_TEXT
     *
     * Hash: 0xCD015E5BB0D96A57 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandDisplayText(x: number, y: number): void {
        EndTextCommandDisplayText(x, y, 0);
    }

    /**
     * Determines how many lines the text string will use when drawn on screen.
     * Must use 0x521FB041D93DD0E4 for setting up
     *
     * Hash: 0x9040DFB09BE75706 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandGetNumberOfLinesForString(x: number, y: number): number {
        return EndTextCommandLineCount(x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0x85F061DA64ED2F67 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandGetScreenWidthOfDisplayText(): number {
        return EndTextCommandGetWidth(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A9BA1AB3E237613 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandIsMessageDisplayed(): boolean {
        return EndTextCommandIsMessageDisplayed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x10BDDBFC529428DD | Since: 323 | API-Set: unknown
     */
    export function endTextCommandIsThisHelpMessageBeingDisplayed(): boolean {
        return EndTextCommandIsThisHelpMessageBeingDisplayed(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA86911979638106F | Since: 323 | API-Set: unknown
     */
    export function endTextCommandOverrideButtonText(): void {
        EndTextCommandOverrideButtonText(0);
    }

    /**
     * Draws the subtitle at middle center of the screen.
     *
     * int duration = time in milliseconds to show text on screen before disappearing
     *
     * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
     *
     * Used to be known as _DRAW_SUBTITLE_TIMED
     *
     * Hash: 0x9D77056A530643F6 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandPrint(duration: number, drawImmediately: boolean): void {
        EndTextCommandPrint(duration, drawImmediately);
    }

    /**
     * Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
     *
     * Hash: 0xBC38B49BCB83BC9B | Since: 323 | API-Set: unknown
     */
    export function endTextCommandSetBlipName(blip: number | IBlip): void {
        EndTextCommandSetBlipName(blip);
    }

    /**
     * Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
     * Example:
     *
     * `HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");`
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");`
     *
     * Hash: 0xAA295B6F28BD587D | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostAward(textureDict: string, textureName: string, rpBonus: number, colorOverlay: number, titleLabel: string): number {
        return EndTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97C9E4E7024A8F2C | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostCrewtag(isLeader: boolean, unk0: boolean, clanDesc: number, R: number, G: number, B: number): [number, number] {
        return EndTextCommandThefeedPostCrewtag(false, false, 0, isLeader, unk0, clanDesc, R, G, B);
    }

    /**
     * No comment provided
     *
     * Hash: 0x137BC35589E34E1E | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostCrewtagWithGameName(isLeader: boolean, unk0: boolean, clanDesc: number, playerName: string, R: number, G: number, B: number): [number, number] {
        return EndTextCommandThefeedPostCrewtagWithGameName(false, false, 0, isLeader, unk0, clanDesc, playerName, R, G, B);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EFCCF6EC66D85E4 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostCrewRankupWithLiteralFlag(): number {
        return EndTextCommandThefeedPostCrewRankup(undefined, undefined, undefined, false, false);
    }

    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames: https://pastebin.com/XdpJVbHz
     *
     *
     * flash is a bool for fading in.
     * iconTypes:
     * 1 : Chat Box
     * 2 : Email
     * 3 : Add Friend Request
     * 4 : Nothing
     * 5 : Nothing
     * 6 : Nothing
     * 7 : Right Jumping Arrow
     * 8 : RP Icon
     * 9 : $ Icon
     *
     * "sender" is the very top header. This can be any old string.
     * "subject" is the header under the sender.
     *
     * Hash: 0x1CCD9A37359072CF | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostMessagetext(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number {
        return EndTextCommandThefeedPostMessagetext(txdName, textureName, flash, iconType, sender, subject);
    }

    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * Needs more research.
     *
     * Only one type of usage in the scripts:
     *
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);`
     *
     * Hash: 0xC6F580E4C94926AC | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostMessagetextSubtitleLabel(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number {
        return EndTextCommandThefeedPostMessagetextGxtEntry(txdName, textureName, flash, iconType, sender, subject);
    }

    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
     *
     * Example, only occurrence in the scripts:
     * `v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);`
     *
     * Hash: 0x1E6611149DB3DB6B | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostMessagetextTu(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number): number {
        return EndTextCommandThefeedPostMessagetextTu(txdName, textureName, flash, iconType, sender, subject, duration);
    }

    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames https://pastebin.com/XdpJVbHz
     *
     * flash is a bool for fading in.
     * iconTypes:
     * 1 : Chat Box
     * 2 : Email
     * 3 : Add Friend Request
     * 4 : Nothing
     * 5 : Nothing
     * 6 : Nothing
     * 7 : Right Jumping Arrow
     * 8 : RP Icon
     * 9 : $ Icon
     *
     * "sender" is the very top header. This can be any old string.
     * "subject" is the header under the sender.
     * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
     * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
     *
     * Hash: 0x5CBF7BADE20DB93E | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostMessagetextWithCrewTag(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number, clanTag: string): number {
        return EndTextCommandThefeedPostMessagetextWithCrewTag(txdName, textureName, flash, iconType, sender, subject, duration, clanTag);
    }

    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames:  https://pastebin.com/XdpJVbHz
     *
     * flash is a bool for fading in.
     * iconTypes:
     * 1 : Chat Box
     * 2 : Email
     * 3 : Add Friend Request
     * 4 : Nothing
     * 5 : Nothing
     * 6 : Nothing
     * 7 : Right Jumping Arrow
     * 8 : RP Icon
     * 9 : $ Icon
     *
     * "sender" is the very top header. This can be any old string.
     * "subject" is the header under the sender.
     * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
     * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
     * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
     *
     *
     * int IconNotification(char *text, char *text2, char *Subject)
     * {
     * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
     * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
     * }
     *
     * Hash: 0x531B84E7DA981FB6 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName: string, textureName: string, flash: boolean, iconType1: number, sender: string, subject: string, duration: number, clanTag: string, iconType2: number): number {
        return EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF020C96915705B3A | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostMpticker(blink: boolean): number {
        return EndTextCommandThefeedPostMpticker(blink, false);
    }

    /**
     * returns a notification handle, prints out a notification like below:
     * type range: 0 - 2
     * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
     *
     * example:
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");`
     * - https://imgur.com/lGBPCz3
     *
     * Hash: 0xD202B92CBF1D816F | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostReplay(_type: number, image: number, text: string): number {
        return EndTextCommandThefeedPostReplayIcon(_type, image, text);
    }

    /**
     * returns a notification handle, prints out a notification like below:
     * type range: 0 - 2
     * if you set type to 1, button accepts "~INPUT_SOMETHING~"
     *
     * example:
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");`
     * - https://imgur.com/UPy0Ial
     *
     *
     * Examples from the scripts:
     * `l_D1[1\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");`
     * `l_D1[2\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");`
     * `l_D1[1\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");`
     * `l_D1[2\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");`
     *
     *
     * Hash: 0xDD6CB2CCE7C2735C | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostReplayInput(_type: number, button: string, text: string): number {
        return EndTextCommandThefeedPostReplayInput(_type, button, text);
    }

    /**
     * List of picture names: https://pastebin.com/XdpJVbHz
     * Example result: https://i.imgur.com/SdEZ22m.png
     *
     * Hash: 0x2B7E9A4EAAA93C89 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostStats(statTitle: string, iconEnum: number, stepVal: boolean, barValue: number, isImportant: boolean, pictureTextureDict: string, pictureTextureName: string): number {
        return EndTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2ED7843F8F801023 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostTicker(blink: boolean): number {
        return EndTextCommandThefeedPostTicker(blink, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44FA03975424A0EE | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostTickerForced(blink: boolean): number {
        return EndTextCommandThefeedPostTickerForced(blink, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x378E809BF61EC840 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostTickerWithTokens(blink: boolean): number {
        return EndTextCommandThefeedPostTickerWithTokens(blink, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33EE12743CCD6343 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostUnlock(gxtLabel1: string, gxtLabel2: string): number {
        return EndTextCommandThefeedPostUnlock(gxtLabel1, 0, gxtLabel2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8F3AAF93D0600BF | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostUnlockTu(gxtLabel1: string, gxtLabel2: string): number {
        return EndTextCommandThefeedPostUnlockTu(gxtLabel1, 0, gxtLabel2, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7AE0589093A2E088 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostUnlockTuWithColor(): number {
        return EndTextCommandThefeedPostUnlockTuWithColor(undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames: https://pastebin.com/XdpJVbHz
     * HUD colors and their values: https://pastebin.com/d9aHPbXN
     *
     * Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
     *
     * Hash: 0xB6871B0555B02996 | Since: 323 | API-Set: unknown
     */
    export function endTextCommandThefeedPostVersusTu(txdName1: string, textureName1: string, count1: number, txdName2: string, textureName2: string, count2: number, hudColor1: number, hudColor2: number): number {
        return EndTextCommandThefeedPostVersusTu(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEF214315D276FD1 | Since: 323 | API-Set: unknown
     */
    export function flagPlayerContextInTournament(toggle: boolean): void {
        FlagPlayerContextInTournament(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02CFBA0C9E9275CE | Since: 323 | API-Set: unknown
     */
    export function flashAbilityBar(millisecondsToFlash: number): void {
        FlashAbilityBar(millisecondsToFlash);
    }

    /**
     * adds a short flash to the Radar/Minimap
     * Usage: UI.FLASH_MINIMAP_DISPLAY
     *
     * Hash: 0xF2DD778C22B15BDA | Since: 323 | API-Set: unknown
     */
    export function flashMinimapDisplay(): void {
        FlashMinimapDisplay();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B1DE27EE78E6A19 | Since: 323 | API-Set: unknown
     */
    export function flashMinimapDisplayWithColor(hudColorIndex: number): void {
        FlashMinimapDisplayWithColor(hudColorIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA18AFB39081B6A1F | Since: 323 | API-Set: unknown
     */
    export function flashWantedDisplay(): void {
        FlashWantedDisplay(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE4C0E6DBC6F2C6F | Since: 323 | API-Set: unknown
     */
    export function forceCloseReportugcMenu(): void {
        ForceCloseReportugcMenu();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8817605C2BA76200 | Since: 323 | API-Set: unknown
     */
    export function forceCloseTextInputBox(): void {
        ForceCloseTextInputBox();
    }

    /**
     * No comment provided
     *
     * Hash: 0x57D760D55F54E071 | Since: 323 | API-Set: unknown
     */
    export function forceNextMessageToPreviousBriefsList(): void {
        Citizen.invokeNative('0x57D760D55F54E071', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA8D65C1C65702E5 | Since: 323 | API-Set: unknown
     */
    export function forceOffWantedStarFlash(toggle: boolean): void {
        Citizen.invokeNative('0xBA8D65C1C65702E5', toggle);
    }

    /**
     * Not present in retail version of the game, actual definiton seems to be
     * _LOG_DEBUG_INFO(const char* category, const char* debugText);
     *
     * Hash: 0x2162C446DFDF38FD | Since: 323 | API-Set: unknown
     */
    export function forceScriptedGfxWhenFrontendActive(): void {
        LogDebugInfo(undefined);
    }

    /**
     * Doesn't actually return anything.
     *
     * Hash: 0x1121BFA1A1A522A8 | Since: 323 | API-Set: unknown
     */
    export function forceSonarBlipsThisFrame(): boolean {
        return ForceSonarBlipsThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7CD934010E115C2C | Since: 323 | API-Set: unknown
     */
    export function getAiPedPedBlipIndex(ped: number | IPed): number {
        return GetAiBlip2(ped);
    }

    /**
     * Returns the current AI BLIP for the specified ped
     *
     * Hash: 0x56176892826A4FE8 | Since: 323 | API-Set: unknown
     */
    export function getAiPedVehicleBlipIndex(ped: number | IPed): number {
        return GetAiBlip(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x970F608F0EE6C885 | Since: 323 | API-Set: unknown
     */
    export function getBlipAlpha(blip: number | IBlip): number {
        return GetBlipAlpha(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF729E8D20CF7327 | Since: 323 | API-Set: unknown
     */
    export function getBlipColour(blip: number | IBlip): number {
        return GetBlipColour(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x586AFE3FF72D996E | Since: 323 | API-Set: unknown
     */
    export function getBlipCoords(blip: number | IBlip): Vector3 {
        return new Vector3(GetBlipCoords(blip));
    }

    /**
     * Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
     *
     * Hash: 0x2C173AE2BDB9385E | Since: 463 | API-Set: unknown
     */
    export function getBlipFadeDirection(blip: number | IBlip): number {
        return Citizen.invokeNative('0x2C173AE2BDB9385E', blip);
    }

    /**
     * Returns the Blip handle of given Entity.
     *
     * Hash: 0xBC8DBDCA2436F7E8 | Since: 323 | API-Set: unknown
     */
    export function getBlipFromEntity(entity: number | IEntity): number {
        return GetBlipFromEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x729B5F1EFBC0AAEE | Since: 323 | API-Set: unknown
     */
    export function getBlipHudColour(blip: number | IBlip): number {
        return GetBlipHudColour(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA7C7F0AADF25D09 | Since: 323 | API-Set: unknown
     */
    export function getBlipInfoIdCoord(blip: number | IBlip): Vector3 {
        return new Vector3(GetBlipInfoIdCoord(blip));
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E314167F701DC3B | Since: 323 | API-Set: unknown
     */
    export function getBlipInfoIdDisplay(blip: number | IBlip): number {
        return GetBlipInfoIdDisplay(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4BA4E2553AFEDC2C | Since: 323 | API-Set: unknown
     */
    export function getBlipInfoIdEntityIndex(blip: number | IBlip): number {
        return GetBlipInfoIdEntityIndex(blip);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x9B6786E4C03DD382 | Since: 323 | API-Set: unknown
     */
    export function getBlipInfoIdPickupIndex(blip: number | IBlip): any {
        return GetBlipInfoIdPickupIndex(blip);
    }

    /**
     * Returns a value based on what the blip is attached to
     * 1 - Vehicle
     * 2 - Ped
     * 3 - Object
     * 4 - Coord
     * 5 - unk
     * 6 - Pickup
     * 7 - Radius
     *
     * Hash: 0xBE9B0959FFD0779B | Since: 323 | API-Set: unknown
     */
    export function getBlipInfoIdType(blip: number | IBlip): number {
        return GetBlipInfoIdType(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x003E92BA477F9D7F | Since: 2060 | API-Set: unknown
     */
    export function getBlipRotation(blip: number | IBlip): number {
        return GetBlipRotation(blip);
    }

    /**
     * Blips Images + IDs:
     * gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
     *
     * Hash: 0x1FC877464A04FC4F | Since: 323 | API-Set: unknown
     */
    export function getBlipSprite(blip: number | IBlip): number {
        return GetBlipSprite(blip);
    }

    /**
     * Returns a substring of a specified length starting at a specified position.
     *
     * Example:
     * // Get "STRING" text from "MY_STRING"
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME("MY_STRING", 3, 6);`
     *
     * Hash: 0x169BD9382084C8C0 | Since: 323 | API-Set: unknown
     */
    export function getCharacterFromAudioConversationFilename(text: string, position: number, length: number): string {
        return GetTextSubstring(text, position, length);
    }

    /**
     * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
     *
     * Example:
     * // Get "STRING" text from "MY_STRING"
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 9);`
     * // Overflows are possibly replaced with underscores (needs verification)
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 10); // "STRING_"?`
     *
     * Hash: 0xCE94AEBA5D82908A | Since: 323 | API-Set: unknown
     */
    export function getCharacterFromAudioConversationFilenameBytes(text: string, startPosition: number, endPosition: number): string {
        return GetTextSubstringSlice(text, startPosition, endPosition);
    }

    /**
     * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
     *
     * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
     *
     * Example:
     * // Condensed example of how Rockstar uses this function
     * `strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());`
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);`
     *
     * --
     *
     * "fm_race_creator.ysc", line 85115:
     * // parameters modified for clarity
     * BOOL sub_8e5aa(char *text, int length) {
     * for (i = 0; i <= (length - 2); i += 1) {
     * `if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), " ")) {`
     * return FALSE;
     * }
     * }
     * return TRUE;
     * }
     *
     * Hash: 0xB2798643312205C5 | Since: 323 | API-Set: unknown
     */
    export function getCharacterFromAudioConversationFilenameWithByteLimit(text: string, position: number, length: number, maxLength: number): string {
        return GetTextSubstringSafe(text, position, length, maxLength);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F08017F9D7C47BD | Since: 323 | API-Set: unknown
     */
    export function getCharacterMenuPedFloatStat(statHash: number): [boolean, number] {
        return Citizen.invokeNative('0x8F08017F9D7C47BD', statHash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA6B2F7CE32AB653 | Since: 323 | API-Set: unknown
     */
    export function getCharacterMenuPedIntStat(): [boolean, any] {
        return Citizen.invokeNative('0xCA6B2F7CE32AB653', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x24A49BEAF468DC90 | Since: 323 | API-Set: unknown
     */
    export function getCharacterMenuPedMaskedIntStat(statHash: number | string, mask: number): [boolean, any] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return Citizen.invokeNative('0x24A49BEAF468DC90', statHash, 0, mask, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD484BF71050CA1EE | Since: 1180 | API-Set: unknown
     */
    export function getClosestBlipInfoId(blipSprite: number): number {
        return GetClosestBlipOfType(blipSprite);
    }

    /**
     * `if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))`
     *
     * Hash: 0x2309595AD6145265 | Since: 323 | API-Set: unknown
     */
    export function getCurrentFrontendMenuVersion(): number {
        return GetCurrentFrontendMenuVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0x01A358D9128B7A86 | Since: 323 | API-Set: unknown
     */
    export function getCurrentWebpageId(): number {
        return GetCurrentWebpageId();
    }

    /**
     * No comment provided
     *
     * Hash: 0x97D47996FC48CBAD | Since: 323 | API-Set: unknown
     */
    export function getCurrentWebsiteId(): number {
        return GetCurrentWebsiteId();
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x52F0982D7FD156B6 | Since: 323 | API-Set: unknown
     */
    export function getDefaultScriptRendertargetRenderId(): number {
        return GetDefaultScriptRendertargetRenderId();
    }

    /**
     * Getter for SET_FAKE_SPECTATOR_MODE
     *
     * Hash: 0xC2D2AD9EAAE265B8 | Since: 505 | API-Set: unknown
     */
    export function getFakeSpectatorMode(): boolean {
        return Citizen.invokeNative('0xC2D2AD9EAAE265B8');
    }

    /**
     * `Gets a localized string literal from a label name. Can be used for output of e.g. VEHICLE::GET_LIVERY_NAME. To check if a GXT label can be localized with this, HUD::DOES_TEXT_LABEL_EXIST can be used.`
     *
     * Hash: 0x7B5280EBA9840C72 | Since: 323 | API-Set: unknown
     */
    export function getFilenameForAudioConversation(labelName: string): string {
        return GetFilenameForAudioConversation(labelName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1BEDE233E6CD2A1F | Since: 323 | API-Set: unknown
     */
    export function getFirstBlipInfoId(blipSprite: number): number {
        return GetFirstBlipInfoId(blipSprite);
    }

    /**
     * No comment provided
     *
     * Hash: 0x98C3CF913D895111 | Since: 505 | API-Set: unknown
     */
    export function getFirstNCharactersOfLiteralString(_string: string, length: number): string {
        return Citizen.invokeNative('0x98C3CF913D895111', _string, length);
    }

    /**
     * Returns the ActionScript flagValue.
     * ActionScript flags are global flags that scaleforms use
     * Flags found during testing
     * 0: Returns 1 if the web_browser keyboard is open, otherwise 0
     * 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
     * 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
     * 9: Returns the current selection on the mobile phone scaleform
     *
     * There are 20 flags in total.
     *
     * Hash: 0xE3B05614DCE1D014 | Since: 323 | API-Set: unknown
     */
    export function getGlobalActionscriptFlag(flagIndex: number): number {
        return GetGlobalActionscriptFlag(flagIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C9C91AB74A0360F | Since: 323 | API-Set: unknown
     */
    export function getColour(hudColorIndex: number): [number, number, number, number] {
        return GetHudColour(hudColorIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x223CA69A8C4417FD | Since: 323 | API-Set: unknown
     */
    export function getComponentPosition(id: number): Vector3 {
        return new Vector3(GetHudComponentPosition(id));
    }

    /**
     * World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
     *
     * Hash: 0xF9904D11F1ACBEC3 | Since: 323 | API-Set: unknown
     */
    export function getScreenPositionFromWorldPosition(worldPos: Vector3): [number, number, number] {
        return GetHudScreenPositionFromWorldPosition(worldPos.x, worldPos.y, worldPos.z);
    }

    /**
     * Returns the length of the string passed (much like strlen).
     *
     * Hash: 0xF030907CCBB8A9FD | Since: 323 | API-Set: unknown
     */
    export function getLengthOfLiteralString(_string: string): number {
        return GetLengthOfLiteralString(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43E4111189E54F0E | Since: 323 | API-Set: unknown
     */
    export function getLengthOfLiteralStringInBytes(_string: string): number {
        return GetLengthOfLiteralStringInBytes(_string);
    }

    /**
     * Returns the string length of the string from the gxt string .
     *
     * Hash: 0x801BD273D3A23F74 | Since: 323 | API-Set: unknown
     */
    export function getLengthOfStringWithThisTextLabel(gxt: string): number {
        return GetLengthOfStringWithThisTextLabel(gxt);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCD4EC3F419D02FA | Since: 323 | API-Set: unknown
     */
    export function getMainPlayerBlipId(): number {
        return GetMainPlayerBlipId();
    }

    /**
     * lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
     * selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
     * selectedItemUniqueId: this is uniqueID of the currently selected menu item
     *
     * when the pausemenu is closed:
     * lastItemMenuId = -1
     * selectedItemMenuId = -1
     * selectedItemUniqueId = 0
     *
     * when the header gains focus:
     * lastItemMenuId updates as normal or 0 if the pausemenu was just opened
     * selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
     * selectedItemUniqueId = -1
     *
     * when focus is moved from the header to a pausemenu page:
     * lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
     * selectedItemMenuId = -1
     * selectedItemUniqueId updates as normal
     *
     * Hash: 0x7E17BE53E1AAABAF | Since: 323 | API-Set: unknown
     */
    export function getMenuLayoutChangedEventDetails(): [number, number, number] {
        return GetPauseMenuSelectionData();
    }

    /**
     * p0 was always 0xAE2602A3.
     *
     * Hash: 0x052991E59076E4E4 | Since: 323 | API-Set: unknown
     */
    export function getMenuPedBoolStat(statHash: number | string): [boolean, boolean] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return GetMenuPedBoolStat(statHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5FBD7095FE7AE57F | Since: 323 | API-Set: unknown
     */
    export function getMenuPedFloatStat(statHash: number | string): [boolean, number] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return GetMenuPedFloatStat(statHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF4CED81CEBEDC6D | Since: 323 | API-Set: unknown
     */
    export function getMenuPedIntStat(): [boolean, any] {
        return GetMenuPedIntStat(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90A6526CF0381030 | Since: 323 | API-Set: unknown
     */
    export function getMenuPedMaskedIntStat(statHash: number | string, mask: number): [boolean, number] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return GetMenuPedMaskedIntStat(statHash, mask, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36C1451A88A09630 | Since: 323 | API-Set: unknown
     */
    export function getMenuTriggerEventDetails(): [number, number] {
        return GetPauseMenuSelection();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E31B91145873922 | Since: 323 | API-Set: unknown
     */
    export function getMinimapFowCoordinateIsRevealed(pos: Vector3): boolean {
        return GetMinimapFowCoordinateIsRevealed(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0130B41D3CF4574 | Since: 323 | API-Set: unknown
     */
    export function getMinimapFowDiscoveryRatio(): number {
        return GetMinimapFowDiscoveryRatio();
    }

    /**
     * No comment provided
     *
     * Hash: 0x632B2940C67F4EA9 | Since: 323 | API-Set: unknown
     */
    export function getMouseEvent(scaleformHandle: number): [boolean, any, any, any] {
        return GetScaleformMovieCursorSelection(scaleformHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A6478B61C6BDC3B | Since: 323 | API-Set: unknown
     */
    export function getNamedRendertargetRenderId(name: string): number {
        return GetNamedRendertargetRenderId(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C90988E7C8E1AF4 | Since: 323 | API-Set: unknown
     */
    export function getNewSelectedMissionCreatorBlip(): number {
        return GetNewSelectedMissionCreatorBlip();
    }

    /**
     * No comment provided
     *
     * Hash: 0x14F96AA50D6FBEA7 | Since: 323 | API-Set: unknown
     */
    export function getNextBlipInfoId(blipSprite: number): number {
        return GetNextBlipInfoId(blipSprite);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F0CF9CB7E589B88 | Since: 463 | API-Set: unknown
     */
    export function getNorthBlidIndex(): number {
        return GetNorthRadarBlip();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A3FF3DE163034E8 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfActiveBlips(): number {
        return GetNumberOfActiveBlips();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BFF36D6ED83E0AE | Since: 323 | API-Set: unknown
     */
    export function getPauseMenuPosition(): Vector3 {
        return new Vector3(GetPauseMenuCursorPosition());
    }

    /**
     * Returns:
     *
     * 0
     * 5
     * 10
     * 15
     * 20
     * 25
     * 30
     * 35
     *
     *
     * Hash: 0x272ACD84970869C5 | Since: 323 | API-Set: unknown
     */
    export function getPauseMenuState(): number {
        return GetPauseMenuState();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA238192F33110615 | Since: 323 | API-Set: unknown
     */
    export function getPmPlayerCrewColor(): [boolean, number, number, number] {
        return Citizen.invokeNative('0xA238192F33110615');
    }

    /**
     * This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
     *
     * Hash: 0xDB88A37483346780 | Since: 323 | API-Set: unknown
     */
    export function getRenderedCharacterHeight(size: number, font: number): number {
        return GetRenderedCharacterHeight(size, font);
    }

    /**
     * No comment provided
     *
     * Hash: 0x593FEAE1F73392D4 | Since: 323 | API-Set: unknown
     */
    export function getScreenCodeWantsScriptToControl(): number {
        return Citizen.invokeNative('0x593FEAE1F73392D4');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A9923385BDB9DAD | Since: 323 | API-Set: unknown
     */
    export function getStandardBlipEnumId(): number {
        return GetStandardBlipEnumId();
    }

    /**
     * This functions converts the hash of a street name into a readable string.
     *
     * `For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.`
     *
     * Hash: 0xD0EF8A959B8A4CB9 | Since: 323 | API-Set: unknown
     */
    export function getStreetNameFromHashKey(hash: number | string): string {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return GetStreetNameFromHashKey(hash);
    }

    /**
     * Has to do with the confirmation overlay (E.g. confirm exit)
     *
     * Hash: 0x81DF9ABA6C83DFF9 | Since: 1290 | API-Set: unknown
     */
    export function getWarningScreenMessageHash(): number {
        return GetWarningMessageTitleHash();
    }

    /**
     * No comment provided
     *
     * Hash: 0x186E5D252FA50E7D | Since: 323 | API-Set: unknown
     */
    export function getWaypointBlipEnumId(): number {
        return GetWaypointBlipEnumId();
    }

    /**
     * p1 is either 1 or 2 in the PC scripts.
     *
     * Hash: 0xAC0BFBDC3BE00E14 | Since: 323 | API-Set: unknown
     */
    export function givePedToPauseMenu(ped: number | IPed): void {
        GivePedToPauseMenu(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02245FE4BED318B8 | Since: 323 | API-Set: unknown
     */
    export function hasAdditionalTextLoaded(slot: number): boolean {
        return HasAdditionalTextLoaded(slot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA277800A9EAE340E | Since: 323 | API-Set: unknown
     */
    export function hasDirectorModeBeenLaunchedByCode(): boolean {
        return HasDirectorModeBeenTriggered();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E22FEFA0100275E | Since: 323 | API-Set: unknown
     */
    export function hasMenuLayoutChangedEventOccurred(): boolean {
        return Citizen.invokeNative('0x2E22FEFA0100275E');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF284AC67940C6812 | Since: 323 | API-Set: unknown
     */
    export function hasMenuTriggerEventOccurred(): boolean {
        return Citizen.invokeNative('0xF284AC67940C6812');
    }

    /**
     * No comment provided
     *
     * Hash: 0x214CD562A939246A | Since: 323 | API-Set: unknown
     */
    export function hasScriptHiddenHelpThisFrame(): boolean {
        return Citizen.invokeNative('0x214CD562A939246A');
    }

    /**
     * Checks if the specified gxt has loaded into the passed slot.
     *
     * Hash: 0xADBF060E2B30C5BC | Since: 323 | API-Set: unknown
     */
    export function hasThisAdditionalTextLoaded(gxt: string, slot: number): boolean {
        return HasThisAdditionalTextLoaded(gxt, slot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD46923FC481CA285 | Since: 323 | API-Set: unknown
     */
    export function hideHelpTextThisFrame(): void {
        HideHelpTextThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x243296A510B562B6 | Since: 2060 | API-Set: unknown
     */
    export function hidemarkersThisFrame(): void {
        Citizen.invokeNative('0x243296A510B562B6');
    }

    /**
     * Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)
     *
     * Hash: 0x719FF505F097FD20 | Since: 323 | API-Set: unknown
     */
    export function hideAndRadarThisFrame(): void {
        HideHudAndRadarThisFrame();
    }

    /**
     * This function hides various HUD (Heads-up Display) components.
     * Listed below are the integers and the corresponding HUD component.
     * - 1 : WANTED_STARS
     * - 2 : WEAPON_ICON
     * - 3 : CASH
     * - 4 : MP_CASH
     * - 5 : MP_MESSAGE
     * - 6 : VEHICLE_NAME
     * - 7 : AREA_NAME
     * - 8 : VEHICLE_CLASS
     * - 9 : STREET_NAME
     * - 10 : HELP_TEXT
     * - 11 : FLOATING_HELP_TEXT_1
     * - 12 : FLOATING_HELP_TEXT_2
     * - 13 : CASH_CHANGE
     * - 14 : RETICLE
     * - 15 : SUBTITLE_TEXT
     * - 16 : RADIO_STATIONS
     * - 17 : SAVING_GAME
     * - 18 : GAME_STREAM
     * - 19 : WEAPON_WHEEL
     * - 20 : WEAPON_WHEEL_STATS
     * - 21 : HUD_COMPONENTS
     * - 22 : HUD_WEAPONS
     *
     * These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
     *
     * Hash: 0x6806C51AD12B83B8 | Since: 323 | API-Set: unknown
     */
    export function hideComponentThisFrame(id: number): void {
        HideHudComponentThisFrame(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B0311D3CDC4648F | Since: 323 | API-Set: unknown
     */
    export function hideLoadingOnFadeThisFrame(): void {
        HideLoadingOnFadeThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5FBAE526203990C9 | Since: 323 | API-Set: unknown
     */
    export function hideMinimapExteriorMapThisFrame(): void {
        HideMinimapExteriorMapThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x20FE7FDFEEAD38C0 | Since: 323 | API-Set: unknown
     */
    export function hideMinimapInteriorMapThisFrame(): void {
        HideMinimapInteriorMapThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x532CFF637EF80148 | Since: 323 | API-Set: unknown
     */
    export function hideNumberOnBlip(blip: number | IBlip): void {
        HideNumberOnBlip(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE374C498D8BADC14 | Since: 323 | API-Set: unknown
     */
    export function hideScriptedComponentThisFrame(id: number): void {
        HideScriptedHudComponentThisFrame(id);
    }

    /**
     * Hides area and vehicle name HUD components for one frame.
     *
     * Hash: 0xA4DEDE28B1814289 | Since: 323 | API-Set: unknown
     */
    export function hideStreetAndCarNamesThisFrame(): void {
        HideAreaAndVehicleNameThisFrame();
    }

    /**
     * Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.
     *
     * Hash: 0x488043841BBE156F | Since: 1011 | API-Set: unknown
     */
    export function forceSpecialVehicleWeaponWheel(): void {
        HudDisplayLoadingScreenTips();
    }

    /**
     * Forces the weapon wheel to show/hide.
     *
     * Hash: 0xEB354E5376BC81A7 | Since: 323 | API-Set: unknown
     */
    export function forceWeaponWheel(show: boolean): void {
        HudForceWeaponWheel(show);
    }

    /**
     * Returns the weapon hash to the selected/highlighted weapon in the wheel
     *
     * Hash: 0xA48931185F0536FE | Since: 323 | API-Set: unknown
     */
    export function getWeaponWheelCurrentlyHighlighted(): number {
        return HudWeaponWheelGetSelectedHash();
    }

    /**
     * Returns the weapon hash active in a specific weapon wheel slotList
     *
     * Hash: 0xA13E93403F26C812 | Since: 323 | API-Set: unknown
     */
    export function getWeaponWheelTopSlot(weaponTypeIndex: number): number {
        return HudWeaponWheelGetSlotHash(weaponTypeIndex);
    }

    /**
     * Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
     *
     * Hash: 0x72C1056D678BB7D8 | Since: 323 | API-Set: unknown
     */
    export function setWeaponWheelTopSlot(weaponHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        HudSetWeaponWheelTopSlot(weaponHash);
    }

    /**
     * Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
     *
     * Hash: 0x14C9FDCC41F81F63 | Since: 323 | API-Set: unknown
     */
    export function showingCharacterSwitchSelection(toggle: boolean): void {
        HudWeaponWheelIgnoreControlInput(toggle);
    }

    /**
     * Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
     *
     * Hash: 0x0AFC4AF510774B47 | Since: 323 | API-Set: unknown
     */
    export function suppressWeaponWheelResultsThisFrame(): void {
        HudWeaponWheelIgnoreSelection();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA5E41FD83AD6CEF0 | Since: 323 | API-Set: unknown
     */
    export function isBlipFlashing(blip: number | IBlip): boolean {
        return IsBlipFlashing(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE41CA53051197A27 | Since: 323 | API-Set: unknown
     */
    export function isBlipOnMinimap(blip: number | IBlip): boolean {
        return IsBlipOnMinimap(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA5F8727EB75B926 | Since: 323 | API-Set: unknown
     */
    export function isBlipShortRange(blip: number | IBlip): boolean {
        return IsBlipShortRange(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2432784ACA090DA4 | Since: 323 | API-Set: unknown
     */
    export function isFloatingHelpTextOnScreen(hudIndex: number): boolean {
        return IsFloatingHelpTextOnScreen(hudIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3BAB9A4E4F2FF5C7 | Since: 323 | API-Set: unknown
     */
    export function isFrontendReadyForControl(): boolean {
        return IsFrontendReadyForControl();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D79439A6B55AC67 | Since: 323 | API-Set: unknown
     */
    export function isHelpMessageBeingDisplayed(): boolean {
        return IsHelpMessageBeingDisplayed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x327EDEEEAC55C369 | Since: 323 | API-Set: unknown
     */
    export function isHelpMessageFadingOut(): boolean {
        return IsHelpMessageFadingOut();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDAD37F45428801AE | Since: 323 | API-Set: unknown
     */
    export function isHelpMessageOnScreen(): boolean {
        return IsHelpMessageOnScreen();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4167EFE0527D706E | Since: 323 | API-Set: unknown
     */
    export function isHoveringOverMissionCreatorBlip(): boolean {
        return IsHoveringOverMissionCreatorBlip();
    }

    /**
     * Full list of components below
     *
     * HUD = 0;
     * HUD_WANTED_STARS = 1;
     * HUD_WEAPON_ICON = 2;
     * HUD_CASH = 3;
     * HUD_MP_CASH = 4;
     * HUD_MP_MESSAGE = 5;
     * HUD_VEHICLE_NAME = 6;
     * HUD_AREA_NAME = 7;
     * HUD_VEHICLE_CLASS = 8;
     * HUD_STREET_NAME = 9;
     * HUD_HELP_TEXT = 10;
     * HUD_FLOATING_HELP_TEXT_1 = 11;
     * HUD_FLOATING_HELP_TEXT_2 = 12;
     * HUD_CASH_CHANGE = 13;
     * HUD_RETICLE = 14;
     * HUD_SUBTITLE_TEXT = 15;
     * HUD_RADIO_STATIONS = 16;
     * HUD_SAVING_GAME = 17;
     * HUD_GAME_STREAM = 18;
     * HUD_WEAPON_WHEEL = 19;
     * HUD_WEAPON_WHEEL_STATS = 20;
     * MAX_HUD_COMPONENTS = 21;
     * MAX_HUD_WEAPONS = 22;
     * MAX_SCRIPTED_HUD_COMPONENTS = 141;
     *
     * Hash: 0xBC4C9EA5391ECC0D | Since: 323 | API-Set: unknown
     */
    export function isComponentActive(id: number): boolean {
        return IsHudComponentActive(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA86478C6958735C5 | Since: 323 | API-Set: unknown
     */
    export function isHidden(): boolean {
        return IsHudHidden();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1930DFA731813EC4 | Since: 323 | API-Set: unknown
     */
    export function isPreferenceSwitchedOn(): boolean {
        return IsHudPreferenceSwitchedOn();
    }

    /**
     * No comment provided
     *
     * Hash: 0x801879A9B4F4B2FB | Since: 372 | API-Set: unknown
     */
    export function isImeInProgress(): boolean {
        return Citizen.invokeNative('0x801879A9B4F4B2FB');
    }

    /**
     * No comment provided
     *
     * Hash: 0x7984C03AA5CC2F41 | Since: 323 | API-Set: unknown
     */
    export function isMessageBeingDisplayed(): boolean {
        return IsMessageBeingDisplayed();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAF754F20EB5CD51A | Since: 323 | API-Set: unknown
     */
    export function isMinimapRendering(): boolean {
        return IsMinimapRendering();
    }

    /**
     * No comment provided
     *
     * Hash: 0x26F49BF3381D933D | Since: 323 | API-Set: unknown
     */
    export function isMissionCreatorBlip(blip: number | IBlip): boolean {
        return IsMissionCreatorBlip(blip);
    }

    /**
     * Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
     *
     * Hash: 0x3D9ACB1EB139E702 | Since: 323 | API-Set: unknown
     */
    export function isMouseRolledOverInstructionalButtons(): boolean {
        return IsMouseRolledOverInstructionalButtons();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E929E7A5796FD26 | Since: 323 | API-Set: unknown
     */
    export function isMpGamerTagActive(gamerTagId: number): boolean {
        return IsMpGamerTagActive(gamerTagId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x595B5178E412E199 | Since: 323 | API-Set: unknown
     */
    export function isMpGamerTagFree(gamerTagId: number): boolean {
        return IsMpGamerTagFree(gamerTagId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E0EB3EB47C8D7AA | Since: 323 | API-Set: unknown
     */
    export function isMpGamerTagMovieActive(): boolean {
        return IsMpGamerTagMovieActive();
    }

    /**
     * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
     *
     * Hash: 0xB118AF58B5F332A1 | Since: 323 | API-Set: unknown
     */
    export function isMpTextChatTyping(): boolean {
        return IsMultiplayerChatActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x113750538FA31298 | Since: 323 | API-Set: unknown
     */
    export function isNamedRendertargetLinked(modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return IsNamedRendertargetLinked(modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78DCDC15C9F116B4 | Since: 323 | API-Set: unknown
     */
    export function isNamedRendertargetRegistered(name: string): boolean {
        return IsNamedRendertargetRegistered(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E3CD0EF8A489541 | Since: 323 | API-Set: unknown
     */
    export function isNavigatingMenuContent(): boolean {
        return IsNavigatingMenuContent();
    }

    /**
     * Returns the same as IS_SOCIAL_CLUB_ACTIVE
     *
     * Hash: 0x6F72CD94F7B5B68C | Since: 323 | API-Set: unknown
     */
    export function isOnlinePoliciesMenuActive(): boolean {
        return IsOnlinePoliciesMenuActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9049FE339D5F6F6F | Since: 323 | API-Set: unknown
     */
    export function isPausemapInInteriorMode(): boolean {
        return IsPausemapInInteriorMode();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB0034A223497FFCB | Since: 323 | API-Set: unknown
     */
    export function isPauseMenuActive(): boolean {
        return IsPauseMenuActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C491717107431C7 | Since: 323 | API-Set: unknown
     */
    export function isPauseMenuRestarting(): boolean {
        return IsPauseMenuRestarting();
    }

    /**
     * No comment provided
     *
     * Hash: 0x157F93B036700462 | Since: 323 | API-Set: unknown
     */
    export function isRadarHidden(): boolean {
        return IsRadarHidden();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9EB6522EA68F22FE | Since: 323 | API-Set: unknown
     */
    export function isRadarPreferenceSwitchedOn(): boolean {
        return IsRadarPreferenceSwitchedOn();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9135584D09A3437E | Since: 323 | API-Set: unknown
     */
    export function isReportugcMenuOpen(): boolean {
        return IsReportugcMenuOpen();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD100EB17A94FF65 | Since: 323 | API-Set: unknown
     */
    export function isScriptedComponentActive(id: number): boolean {
        return IsScriptedHudComponentActive(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x09C0403ED9A751C2 | Since: 323 | API-Set: unknown
     */
    export function isScriptedComponentHiddenThisFrame(id: number): boolean {
        return IsScriptedHudComponentHiddenThisFrame(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC406BE343FC4B9AF | Since: 323 | API-Set: unknown
     */
    export function isSocialClubActive(): boolean {
        return IsSocialClubActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F057596F2BD0061 | Since: 323 | API-Set: unknown
     */
    export function isStorePendingNetworkShutdownToOpen(): boolean {
        return Citizen.invokeNative('0x2F057596F2BD0061');
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B6817B71B85EBF0 | Since: 323 | API-Set: unknown
     */
    export function isStreamingAdditionalText(): boolean {
        return IsStreamingAdditionalText(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAD6DACA4BA53E0A4 | Since: 323 | API-Set: unknown
     */
    export function isSubtitlePreferenceSwitchedOn(): boolean {
        return IsSubtitlePreferenceSwitchedOn();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB709A36958ABE0D | Since: 323 | API-Set: unknown
     */
    export function isUpdatingMpGamerTagNameAndCrewDetails(gamerTagId: number): boolean {
        return IsValidMpGamerTagMovie(gamerTagId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE18B138FABC53103 | Since: 323 | API-Set: unknown
     */
    export function isWarningMessageActive(): boolean {
        return IsWarningMessageActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAF42195A42C63BBA | Since: 323 | API-Set: unknown
     */
    export function isWarningMessageReadyForControl(): boolean {
        return IsWarningMessageActive2();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DD1F58F493F1DA5 | Since: 323 | API-Set: unknown
     */
    export function isWaypointActive(): boolean {
        return IsWaypointActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6C09E276AEB3F2D | Since: 323 | API-Set: unknown
     */
    export function linkNamedRendertarget(modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        LinkNamedRendertarget(modelHash);
    }

    /**
     * Locks the minimap to the specified angle in integer degrees.
     *
     * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
     *
     * Hash: 0x299FAEBB108AE05B | Since: 323 | API-Set: unknown
     */
    export function lockMinimapAngle(angle: number): void {
        LockMinimapAngle(angle);
    }

    /**
     * Locks the minimap to the specified world position.
     *
     * Hash: 0x1279E861A329E73F | Since: 323 | API-Set: unknown
     */
    export function lockMinimapPosition(x: number, y: number): void {
        LockMinimapPosition(x, y);
    }

    /**
     * Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
     *
     * Hash: 0x1DB21A44B09E8BA3 | Since: 323 | API-Set: unknown
     */
    export function mpTextChatDisable(toggle: boolean): void {
        DisableMultiplayerChat(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C226D5346D4D10A | Since: 372 | API-Set: unknown
     */
    export function mpTextChatIsTeamJob(): void {
        Citizen.invokeNative('0x7C226D5346D4D10A', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x805D7CBB36FD6C4C | Since: 323 | API-Set: unknown
     */
    export function openOnlinePoliciesMenu(): void {
        OpenOnlinePoliciesMenu();
    }

    /**
     * Shows a menu for reporting UGC content.
     *
     * Hash: 0x523A590C1A3CC0D3 | Since: 323 | API-Set: unknown
     */
    export function openReportugcMenu(): void {
        OpenReportugcMenu();
    }

    /**
     * Uses the `SOCIAL_CLUB2` scaleform.
     * menu: GALLERY, MISSIONS, CREWS, MIGRATE, PLAYLISTS, JOBS
     *
     * Hash: 0x75D3691713C3B05A | Since: 323 | API-Set: unknown
     */
    export function openSocialClubMenu(menu: number | string): void {
        if (typeof menu === 'string') menu = misc.getHashKey(menu)
        OpenSocialClubMenu(menu);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF47E567B3630DD12 | Since: 678 | API-Set: unknown
     */
    export function overrideMpTextChatColor(hudColor: number): void {
        OverrideMultiplayerChatColour(0, hudColor);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A1738B4323FE2D9 | Since: 573 | API-Set: unknown
     */
    export function overrideMpTextChatTeamString(gxtEntryHash: number | string): void {
        if (typeof gxtEntryHash === 'string') gxtEntryHash = misc.getHashKey(gxtEntryHash)
        OverrideMultiplayerChatPrefix(gxtEntryHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77F16B447824DA6C | Since: 323 | API-Set: unknown
     */
    export function pauseMenuceptionGoDeeper(page: number): void {
        PauseMenuceptionGoDeeper(page);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCDCA26E80FAECB8F | Since: 323 | API-Set: unknown
     */
    export function pauseMenuceptionTheKick(): void {
        PauseMenuceptionTheKick();
    }

    /**
     * Activates the specified frontend menu context.
     * pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.
     * The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
     * The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
     * This basically allows you to hide certain menu sections, or things like instructional buttons.
     *
     * Hash: 0xDD564BDD0472C936 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuActivateContext(contextHash: number | string): void {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        PauseMenuActivateContext(contextHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x444D8CF241EC25C5 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuDeactivateContext(contextHash: number | string): void {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        PauseMenuDeactivateContext(contextHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE03620F8703A9DF | Since: 323 | API-Set: unknown
     */
    export function pauseMenuGetHairColourIndex(): number {
        return Citizen.invokeNative('0xDE03620F8703A9DF');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8E1071177A23BE5 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuGetMouseClickEvent(): [boolean, any, any, any] {
        return Citizen.invokeNative('0xC8E1071177A23BE5');
    }

    /**
     * No comment provided
     *
     * Hash: 0x359AF31A4B52F5ED | Since: 323 | API-Set: unknown
     */
    export function pauseMenuGetMouseHoverIndex(): number {
        return PauseMenuGetIndexOfMouseHoveredSlot();
    }

    /**
     * No comment provided
     *
     * Hash: 0x13C4B962653A5280 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuGetMouseHoverUniqueId(): number {
        return PauseMenuGetUniqueIdOfMouseHoveredSlot();
    }

    /**
     * No comment provided
     *
     * Hash: 0x84698AB38D0C6636 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuIsContextActive(contextHash: number | string): boolean {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        return PauseMenuIsContextActive(contextHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A25ADC48F87841F | Since: 323 | API-Set: unknown
     */
    export function pauseMenuIsContextMenuActive(): boolean {
        return PauseMenuIsContextMenuActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4895BDEA16E7C080 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuRedrawInstructionalButtons(): void {
        PauseMenuRedrawInstructionalButtons(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC78E239AC5B2DDB9 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuSetBusySpinner(position: number, spinnerIndex: number): void {
        PauseMenuSetBusySpinner(false, position, spinnerIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF06EBB91A81E09E3 | Since: 323 | API-Set: unknown
     */
    export function pauseMenuSetWarnOnTabChange(): void {
        PauseMenuSetWarnOnTabChange(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DE6C5E2E996F178 | Since: 372 | API-Set: unknown
     */
    export function pauseToggleFullscreenMap(): void {
        PauseToggleFullscreenMap(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC65AB383CD91DF98 | Since: 323 | API-Set: unknown
     */
    export function preloadBusyspinner(): void {
        PreloadBusyspinner();
    }

    /**
     * No comment provided
     *
     * Hash: 0x742D6FD43115AF73 | Since: 323 | API-Set: unknown
     */
    export function pulseBlip(blip: number | IBlip): void {
        PulseBlip(blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x81FA173F170560D1 | Since: 323 | API-Set: unknown
     */
    export function refreshWaypoint(): void {
        RefreshWaypoint();
    }

    /**
     * No comment provided
     *
     * Hash: 0x57D9C12635E25CE3 | Since: 323 | API-Set: unknown
     */
    export function registerNamedRendertarget(name: string): boolean {
        return RegisterNamedRendertarget(name, false);
    }

    /**
     * Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
     * To disable the keys, use `0xEC9264727EEC0F28`
     *
     * Hash: 0x14621BB1DF14E2B2 | Since: 323 | API-Set: unknown
     */
    export function releaseControlOfFrontend(): void {
        ReleaseControlOfFrontend();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE9F6FFE837354DD4 | Since: 323 | API-Set: unknown
     */
    export function releaseNamedRendertarget(name: string): boolean {
        return ReleaseNamedRendertarget(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2916A928514C9827 | Since: 573 | API-Set: unknown
     */
    export function reloadMapMenu(): void {
        ReloadMapMenu();
    }

    /**
     * In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
     *
     * E.g.:
     *
     * `Ped pped = PLAYER::PLAYER_PED_ID();`
     * `Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);`
     * `Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);`
     *
     * works fine.
     * But later attempting to delete it with:
     *
     * `Blip b = HUD::GET_BLIP_FROM_ENTITY(v);`
     * `if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);`
     *
     * doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
     *
     * `Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.`
     * -------------
     *
     * Passing the address of the variable instead of the value works for me.
     * e.g.
     * `int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);`
     * `HUD::REMOVE_BLIP(&blip);`
     *
     *
     * Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
     *
     * Hash: 0x86A652570E5F25DD | Since: 323 | API-Set: unknown
     */
    export function removeBlip(blip: number | IBlip): void {
        RemoveBlip(blip);
    }

    /**
     * Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
     *
     * Hash: 0xC594B315EDF2D4AF | Since: 323 | API-Set: unknown
     */
    export function removeCopBlipFromPed(ped: number | IPed): void {
        Citizen.invokeNative('0xC594B315EDF2D4AF', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35A3CD97B2C0A6D2 | Since: 1290 | API-Set: unknown
     */
    export function removeFakeConeData(blip: number | IBlip): void {
        Citizen.invokeNative('0x35A3CD97B2C0A6D2', blip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31698AA80E0223F8 | Since: 323 | API-Set: unknown
     */
    export function removeMpGamerTag(gamerTagId: number): void {
        RemoveMpGamerTag(gamerTagId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7C6789AA1CFEDD0 | Since: 323 | API-Set: unknown
     */
    export function removeMultiplayerBankCash(): void {
        RemoveMultiplayerBankCash();
    }

    /**
     * Removes multiplayer cash hud each frame
     *
     * Hash: 0x968F270E39141ECA | Since: 323 | API-Set: unknown
     */
    export function removeMultiplayerCash(): void {
        RemoveMultiplayerHudCash();
    }

    /**
     * No comment provided
     *
     * Hash: 0x95CF81BD06EE1887 | Since: 323 | API-Set: unknown
     */
    export function removeMultiplayerWalletCash(): void {
        RemoveMultiplayerWalletCash();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6EF54AB721DC6242 | Since: 323 | API-Set: unknown
     */
    export function removeWarningMessageOptionItems(): void {
        RemoveWarningMessageListItems();
    }

    /**
     * makes hudColorIndex2 color into hudColorIndex color
     *
     * Hash: 0x1CCC708F0F850613 | Since: 323 | API-Set: unknown
     */
    export function replaceColour(hudColorIndex: number, hudColorIndex2: number): void {
        ReplaceHudColour(hudColorIndex, hudColorIndex2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF314CF4F0211894E | Since: 323 | API-Set: unknown
     */
    export function replaceColourWithRgba(hudColorIndex: number, r: number, g: number, b: number, a: number): void {
        ReplaceHudColourWithRgba(hudColorIndex, r, g, b, a);
    }

    /**
     * Request a gxt into the passed slot.
     *
     * Hash: 0x71A78003C8E71424 | Since: 323 | API-Set: unknown
     */
    export function requestAdditionalText(gxt: string, slot: number): void {
        RequestAdditionalText(gxt, slot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6009F9F1AE90D8A6 | Since: 323 | API-Set: unknown
     */
    export function requestAdditionalTextForDlc(gxt: string, slot: number): void {
        RequestAdditionalTextForDlc(gxt, slot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB99C4E4D9499DF29 | Since: 323 | API-Set: unknown
     */
    export function resetGlobalActionscriptFlag(flagIndex: number): void {
        ResetGlobalActionscriptFlag(flagIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x450930E616475D0D | Since: 323 | API-Set: unknown
     */
    export function resetComponentValues(id: number): void {
        ResetHudComponentValues(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x12782CE0A636E9F0 | Since: 323 | API-Set: unknown
     */
    export function resetReticuleValues(): void {
        ResetReticuleValues();
    }

    /**
     * Before using this native click the native above and look at the decription.
     *
     * Example:
     * int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
     * Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
     * Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
     *
     * This native refreshes the frontend menu.
     *
     * p1 = Hash of Menu
     * p2 = Unknown but always works with -1.
     *
     * Hash: 0x10706DC6AD2D49C0 | Since: 323 | API-Set: unknown
     */
    export function restartFrontendMenu(menuHash: number | string): void {
        if (typeof menuHash === 'string') menuHash = misc.getHashKey(menuHash)
        RestartFrontendMenu(menuHash, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF83D0FEBE75E62C9 | Since: 1290 | API-Set: unknown
     */
    export function setupFakeConeData(blip: number | IBlip): void {
        Citizen.invokeNative('0xF83D0FEBE75E62C9', blip, 0, 0, 0, 0, 0, 0, undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9969599CCFF5D85E | Since: 323 | API-Set: unknown
     */
    export function setAbilityBarValue(): void {
        SetAbilityBarValue(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DFEDD15019315A9 | Since: 1493 | API-Set: unknown
     */
    export function setAbilityBarVisibility(visible: boolean): void {
        SetAbilityBarVisibilityInMultiplayer(visible);
    }

    /**
     * No comment provided
     *
     * Hash: 0x889329C80FE5963C | Since: 1868 | API-Set: unknown
     */
    export function setAllowAbilityBar(toggle: boolean): void {
        SetAllowAbilityBarInMultiplayer(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x577599CCED639CA2 | Since: 505 | API-Set: unknown
     */
    export function setAllowCommaOnTextInput(): void {
        SetAllowCommaOnTextInput(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE76FF7E6A0166B0 | Since: 323 | API-Set: unknown
     */
    export function setAllMpGamerTagsVisibility(gamerTagId: number, toggle: boolean): void {
        SetMpGamerTagVisibilityAll(gamerTagId, toggle);
    }

    /**
     * Toggles the big minimap state like in GTA:Online.
     *
     * Hash: 0x231C8F89D0539D8F | Since: 323 | API-Set: unknown
     */
    export function setBigmapActive(toggleBigMap: boolean, showFullMap: boolean): void {
        SetBigmapActive(toggleBigMap, showFullMap);
    }

    /**
     * Sets alpha-channel for blip color.
     *
     * Example:
     *
     * `Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);`
     * `HUD::SET_BLIP_COLOUR(blip , 3);`
     * `HUD::SET_BLIP_ALPHA(blip , 64);`
     *
     *
     * Hash: 0x45FF974EEE1C8734 | Since: 323 | API-Set: unknown
     */
    export function setBlipAlpha(blip: number | IBlip, alpha: number): void {
        SetBlipAlpha(blip, alpha);
    }

    /**
     * false for enemy
     * true for friendly
     *
     * Hash: 0x6F6F290102C02AB4 | Since: 323 | API-Set: unknown
     */
    export function setBlipAsFriendly(blip: number | IBlip, toggle: boolean): void {
        SetBlipAsFriendly(blip, toggle);
    }

    /**
     * Makes a blip go small when off the minimap.
     *
     * Hash: 0x2B6D467DAB714E8D | Since: 323 | API-Set: unknown
     */
    export function setBlipAsMinimalOnEdge(blip: number | IBlip, toggle: boolean): void {
        SetBlipShrink(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x24AC0137444F9FD5 | Since: 323 | API-Set: unknown
     */
    export function setBlipAsMissionCreatorBlip(blip: number | IBlip, toggle: boolean): void {
        SetBlipAsMissionCreatorBlip(blip, toggle);
    }

    /**
     * Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
     *
     * Hash: 0xBE8BE4FE60E27B72 | Since: 323 | API-Set: unknown
     */
    export function setBlipAsShortRange(blip: number | IBlip, toggle: boolean): void {
        SetBlipAsShortRange(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB203913733F27884 | Since: 323 | API-Set: unknown
     */
    export function setBlipBright(blip: number | IBlip, toggle: boolean): void {
        SetBlipBright(blip, toggle);
    }

    /**
     * Example: https://i.imgur.com/skY6vAJ.png
     *
     * Index:
     * 1 = No distance shown in legend
     * 2 = Distance shown in legend
     * 7 = "Other Players" category, also shows distance in legend
     * 10 = "Property" category
     * 11 = "Owned Property" category
     *
     * Any other value behaves like index = 1, index wraps around after 255
     * Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
     * Legend entries:
     * 7 = Other Players (BLIP_OTHPLYR)
     * 10 = Property (BLIP_PROPCAT)
     * 11 = Owned Property (BLIP_APARTCAT)
     *
     * Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
     *
     * Hash: 0x234CDD44D996FD9A | Since: 323 | API-Set: unknown
     */
    export function setBlipCategory(blip: number | IBlip, index: number): void {
        SetBlipCategory(blip, index);
    }

    /**
     * https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
     *
     * Hash: 0x03D7FB09E75D6B7E | Since: 323 | API-Set: unknown
     */
    export function setBlipColour(blip: number | IBlip, color: number): void {
        SetBlipColour(blip, color);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAE2AF67E9D9AF65D | Since: 323 | API-Set: unknown
     */
    export function setBlipCoords(blip: number | IBlip, pos: Vector3): void {
        SetBlipCoords(blip, pos.x, pos.y, pos.z);
    }

    /**
     * Display Id behaviours:
     * 0 = Doesn't show up, ever, anywhere.
     * 1 = Doesn't show up, ever, anywhere.
     * 2 = Shows on both main map and minimap. (Selectable on map)
     * 3 = Shows on main map only. (Selectable on map)
     * 4 = Shows on main map only. (Selectable on map)
     * 5 = Shows on minimap only.
     * 6 = Shows on both main map and minimap. (Selectable on map)
     * 7 = Doesn't show up, ever, anywhere.
     * 8 = Shows on both main map and minimap. (Not selectable on map)
     * 9 = Shows on minimap only.
     * 10 = Shows on both main map and minimap. (Not selectable on map)
     *
     * Anything higher than 10 seems to be exactly the same as 10.
     *
     * Hash: 0x9029B2F3DA924928 | Since: 323 | API-Set: unknown
     */
    export function setBlipDisplay(blip: number | IBlip, displayId: number): void {
        SetBlipDisplay(blip, displayId);
    }

    /**
     * Must be toggled before being queued for animation
     *
     * Hash: 0xC4278F70131BAA6D | Since: 323 | API-Set: unknown
     */
    export function setBlipExtendedHeightThreshold(blip: number | IBlip, toggle: boolean): void {
        SetBlipDisplayIndicatorOnBlip(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2AEE8F8390D2298C | Since: 323 | API-Set: unknown
     */
    export function setBlipFade(blip: number | IBlip, opacity: number, duration: number): void {
        SetBlipFade(blip, opacity, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB14552383D39CE3E | Since: 323 | API-Set: unknown
     */
    export function setBlipFlashes(blip: number | IBlip, toggle: boolean): void {
        SetBlipFlashes(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E8D9498C56DD0D1 | Since: 323 | API-Set: unknown
     */
    export function setBlipFlashesAlternate(blip: number | IBlip, toggle: boolean): void {
        SetBlipFlashesAlternate(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA51DB313C010A7E | Since: 323 | API-Set: unknown
     */
    export function setBlipFlashInterval(blip: number | IBlip): void {
        SetBlipFlashInterval(blip, undefined);
    }

    /**
     * Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
     *
     * Hash: 0xD3CD6FD297AE87CC | Since: 323 | API-Set: unknown
     */
    export function setBlipFlashTimer(blip: number | IBlip, duration: number): void {
        SetBlipFlashTimer(blip, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54318C915D27E4CE | Since: 323 | API-Set: unknown
     */
    export function setBlipHiddenOnLegend(blip: number | IBlip, toggle: boolean): void {
        SetBlipHiddenOnLegend(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE2590BC29220CEBB | Since: 323 | API-Set: unknown
     */
    export function setBlipHighDetail(blip: number | IBlip, toggle: boolean): void {
        SetBlipHighDetail(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB552929B85FC27EC | Since: 573 | API-Set: unknown
     */
    export function setBlipMarkerLongDistance(): void {
        Citizen.invokeNative('0xB552929B85FC27EC', undefined, undefined);
    }

    /**
     * Doesn't work if the label text of gxtEntry is >= 80.
     *
     * Hash: 0xEAA0FFE120D92784 | Since: 323 | API-Set: unknown
     */
    export function setBlipNameFromTextFile(blip: number | IBlip, gxtEntry: string): void {
        SetBlipNameFromTextFile(blip, gxtEntry);
    }

    /**
     * No comment provided
     *
     * Hash: 0x127DE7B20C60A6A3 | Since: 323 | API-Set: unknown
     */
    export function setBlipNameToPlayerName(blip: number | IBlip, player: number | string | IPlayer): void {
        SetBlipNameToPlayerName(blip, player);
    }

    /**
     * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
     *
     * Hash: 0xAE9FC9EF6A9FAC79 | Since: 323 | API-Set: unknown
     */
    export function setBlipPriority(blip: number | IBlip, priority: number): void {
        SetBlipPriority(blip, priority);
    }

    /**
     * After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
     *
     * Hash: 0xF87683CDF73C3F6E | Since: 323 | API-Set: unknown
     */
    export function setBlipRotation(blip: number | IBlip, rotation: number): void {
        SetBlipRotation(blip, rotation);
    }

    /**
     * Does not require whole number/integer rotations.
     *
     * Hash: 0xA8B6AFDAC320AC87 | Since: 877 | API-Set: unknown
     */
    export function setBlipRotationWithFloat(blip: number | IBlip, heading: number): void {
        SetBlipSquaredRotation(blip, heading);
    }

    /**
     * Enable / disable showing route for the Blip-object.
     *
     * Hash: 0x4F7D8A9BFB0B43E9 | Since: 323 | API-Set: unknown
     */
    export function setBlipRoute(blip: number | IBlip, enabled: boolean): void {
        SetBlipRoute(blip, enabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0x837155CD2F63DA09 | Since: 323 | API-Set: unknown
     */
    export function setBlipRouteColour(blip: number | IBlip, colour: number): void {
        SetBlipRouteColour(blip, colour);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD38744167B2FA257 | Since: 323 | API-Set: unknown
     */
    export function setBlipScale(blip: number | IBlip, scale: number): void {
        SetBlipScale(blip, scale);
    }

    /**
     * See https://imgur.com/a/lLkEsMN
     *
     * Hash: 0xCD6524439909C979 | Since: 1734 | API-Set: unknown
     */
    export function setBlipScale2d(blip: number | IBlip, xScale: number, yScale: number): void {
        SetBlipScaleTransformation(blip, xScale, yScale);
    }

    /**
     * Can be used to give blips any RGB colour with SET_BLIP_COLOUR(blip, 84).
     *
     * Hash: 0x14892474891E09EB | Since: 323 | API-Set: unknown
     */
    export function setBlipSecondaryColour(blip: number | IBlip, r: number, g: number, b: number): void {
        SetBlipSecondaryColour(blip, r, g, b);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B5B620C9B59ED34 | Since: 678 | API-Set: unknown
     */
    export function setBlipShortHeightThreshold(): void {
        Citizen.invokeNative('0x4B5B620C9B59ED34', undefined, undefined);
    }

    /**
     * As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
     *
     * Hash: 0x13127EC3665E8EE1 | Since: 323 | API-Set: unknown
     */
    export function setBlipShowCone(blip: number | IBlip, toggle: boolean, hudColorIndex: number): void {
        SetBlipShowCone(blip, toggle, hudColorIndex);
    }

    /**
     * Sets the displayed sprite for a specific blip..
     *
     * You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
     * https://pastebin.com/Bpj9Sfft
     *
     * Blips Images + IDs:
     * https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
     *
     * Hash: 0xDF735600A4696DAF | Since: 323 | API-Set: unknown
     */
    export function setBlipSprite(blip: number | IBlip, spriteId: number): void {
        SetBlipSprite(blip, spriteId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C9F302398E13141 | Since: 1103 | API-Set: unknown
     */
    export function setBlipUseHeightIndicatorOnEdge(blip: number | IBlip): void {
        Citizen.invokeNative('0x2C9F302398E13141', blip, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1942374085C8469 | Since: 505 | API-Set: unknown
     */
    export function setBlockWantedFlash(disabled: boolean): void {
        Citizen.invokeNative('0xD1942374085C8469', disabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0x39BBF623FC803EAC | Since: 323 | API-Set: unknown
     */
    export function setColourOfNextTextComponent(hudColor: number): void {
        SetColourOfNextTextComponent(hudColor);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9FCB3CBFB3EAD69A | Since: 1734 | API-Set: unknown
     */
    export function setCopBlipSprite(): void {
        Citizen.invokeNative('0x9FCB3CBFB3EAD69A', 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB7B873520C84C118 | Since: 1734 | API-Set: unknown
     */
    export function setCopBlipSpriteAsStandard(): void {
        Citizen.invokeNative('0xB7B873520C84C118');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2ACCB195F3CCD9DE | Since: 2545 | API-Set: unknown
     */
    export function setCustomMpColor(hudColorId: number): void {
        SetCustomMpHudColor(hudColorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x817B86108EB94E51 | Since: 323 | API-Set: unknown
     */
    export function setDescriptionForUgcMissionEightStrings(): void {
        Citizen.invokeNative('0x817B86108EB94E51', false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x04655F9D075D0AE5 | Since: 323 | API-Set: unknown
     */
    export function setDirectorModeAvailable(toggle: boolean): void {
        Citizen.invokeNative('0x04655F9D075D0AE5', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2632482FD6B9AB87 | Since: 323 | API-Set: unknown
     */
    export function setDirectorModeLaunchedByScript(): void {
        SetDirectorModeClearTriggeredFlag();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA17784FCA9548D15 | Since: 877 | API-Set: unknown
     */
    export function setFakeGpsPlayerPositionThisFrame(pos: Vector3): void {
        Citizen.invokeNative('0xA17784FCA9548D15', pos.x, pos.y, pos.z);
    }

    /**
     * Argument must be 0.0f or above 38.0f, or it will be ignored.
     *
     * Hash: 0xD201F3FF917A506D | Since: 323 | API-Set: unknown
     */
    export function setFakeMinimapMaxAltimeterHeight(altitude: number): void {
        SetMinimapAltitudeIndicatorLevel(altitude, false, undefined);
    }

    /**
     * Sets the position of the arrow icon representing the player on both the minimap and world map.
     *
     * Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
     *
     * Hash: 0x77E2DD177910E1CF | Since: 323 | API-Set: unknown
     */
    export function setFakePausemapPlayerPositionThisFrame(x: number, y: number): void {
        SetFakePausemapPlayerPositionThisFrame(x, y);
    }

    /**
     * Setter for GET_FAKE_SPECTATOR_MODE
     *
     * Hash: 0xCD74233600C4EA6B | Since: 505 | API-Set: unknown
     */
    export function setFakeSpectatorMode(toggle: boolean): void {
        Citizen.invokeNative('0xCD74233600C4EA6B', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7679CC1BCEBE3D4C | Since: 323 | API-Set: unknown
     */
    export function setFloatingHelpTextScreenPosition(hudIndex: number, x: number, y: number): void {
        SetFloatingHelpTextScreenPosition(hudIndex, x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0x788E7FD431BD67F1 | Since: 323 | API-Set: unknown
     */
    export function setFloatingHelpTextStyle(hudIndex: number): void {
        SetFloatingHelpTextStyle(hudIndex, 0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB094BC1DB4018240 | Since: 323 | API-Set: unknown
     */
    export function setFloatingHelpTextToEntity(hudIndex: number, entity: number | IEntity, offsetX: number, offsetY: number): void {
        SetFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY);
    }

    /**
     * No comment provided
     *
     * Hash: 0x784BA7E0ECEB4178 | Since: 323 | API-Set: unknown
     */
    export function setFloatingHelpTextWorldPosition(hudIndex: number, pos: Vector3): void {
        SetFloatingHelpTextWorldPosition(hudIndex, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2790F4B17D098E26 | Since: 573 | API-Set: unknown
     */
    export function setForceShowGps(toggle: boolean): void {
        Citizen.invokeNative('0x2790F4B17D098E26', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x745711A75AB09277 | Since: 323 | API-Set: unknown
     */
    export function setFrontendActive(active: boolean): void {
        SetFrontendActive(active);
    }

    /**
     * radarThickness: The width of the GPS route on the radar
     * mapThickness: The width of the GPS route on the map
     *
     * Hash: 0x900086F371220B6F | Since: 323 | API-Set: unknown
     */
    export function setGpsCustomRouteRender(toggle: boolean, radarThickness: number, mapThickness: number): void {
        SetGpsCustomRouteRender(toggle, radarThickness, mapThickness);
    }

    /**
     * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
     *
     * Doesn't seem like the flags are actually read by the game at all.
     *
     * Hash: 0x5B440763A4C8D15B | Since: 323 | API-Set: unknown
     */
    export function setGpsFlags(): void {
        SetGpsFlags(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x320D0E0D936A0E9B | Since: 323 | API-Set: unknown
     */
    export function setGpsFlashes(toggle: boolean): void {
        SetGpsFlashes(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DDA37128DD1ACA8 | Since: 323 | API-Set: unknown
     */
    export function setGpsMultiRouteRender(toggle: boolean): void {
        SetGpsMultiRouteRender(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F5CC444DCAAA8F2 | Since: 323 | API-Set: unknown
     */
    export function setHealthDisplayValues(health: number, capacity: number, wasAdded: boolean): void {
        SetHealthHudDisplayValues(health, capacity, wasAdded);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9C362BABECDDC7A | Since: 463 | API-Set: unknown
     */
    export function setHelpMessageStyle(style: number, hudColor: number, alpha: number): void {
        SetHelpMessageTextStyle(style, hudColor, alpha, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAABB1F56E2A17CED | Since: 323 | API-Set: unknown
     */
    export function setComponentPosition(id: number, x: number, y: number): void {
        SetHudComponentPosition(id, x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7EC8ABA5E74B3D7A | Since: 2372 | API-Set: unknown
     */
    export function setInsideVeryLargeInterior(toggle: boolean): void {
        SetInteriorZoomLevelDecreased(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x504DFE62A1692296 | Since: 1493 | API-Set: unknown
     */
    export function setInsideVerySmallInterior(toggle: boolean): void {
        SetInteriorZoomLevelIncreased(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06A320535F5F0248 | Since: 323 | API-Set: unknown
     */
    export function setMaxArmourDisplay(maximumValue: number): void {
        SetMaxArmourHudDisplay(maximumValue);
    }

    /**
     * No comment provided
     *
     * Hash: 0x975D66A0BC17064C | Since: 323 | API-Set: unknown
     */
    export function setMaxHealthDisplay(maximumValue: number): void {
        SetMaxHealthHudDisplay(maximumValue);
    }

    /**
     * This native does absolutely nothing on PC master builds, just a nullsub.
     *
     * Hash: 0xB09D42557C45EBA1 | Since: 3258 | API-Set: unknown
     */
    export function setMinimapBackgroundHidden(toggle: boolean): void {
        Citizen.invokeNative('0xB09D42557C45EBA1', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58FADDED207897DC | Since: 323 | API-Set: unknown
     */
    export function setMinimapBlockWaypoint(toggle: boolean): void {
        SetMinimapBlockWaypoint(toggle);
    }

    /**
     * This native is used to colorize certain map components like the army base at the top of the map.
     * p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra
     *
     * Hash: 0x75A9A10948D1DEA6 | Since: 323 | API-Set: unknown
     */
    export function setMinimapComponent(componentId: number, toggle: boolean, overrideColor: number): boolean {
        return SetMinimapComponent(componentId, toggle, overrideColor);
    }

    /**
     * No comment provided
     *
     * Hash: 0x62E849B7EB28E770 | Since: 323 | API-Set: unknown
     */
    export function setMinimapFowDoNotUpdate(): void {
        Citizen.invokeNative('0x62E849B7EB28E770', false);
    }

    /**
     * Up to eight coordinates may be revealed per frame
     *
     * Hash: 0x0923DBF87DFF735E | Since: 323 | API-Set: unknown
     */
    export function setMinimapFowRevealCoordinate(pos: Vector3): void {
        SetMinimapFowRevealCoordinate(pos.x, pos.y, pos.z);
    }

    /**
     * Not much is known so far on what it does _exactly_.
     * All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
     * You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
     * You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
     * Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
     *
     * Hash: 0x71BDB63DBAF8DA59 | Since: 323 | API-Set: unknown
     */
    export function setMinimapGolfCourse(hole: number): void {
        SetMinimapGolfCourse(hole);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35EDD5B2E3FF01C0 | Since: 323 | API-Set: unknown
     */
    export function setMinimapGolfCourseOff(): void {
        SetMinimapGolfCourseOff();
    }

    /**
     * If true, the entire map will be revealed.
     *
     * FOW = Fog of War
     *
     * Hash: 0xF8DEE0A5600CBB93 | Since: 323 | API-Set: unknown
     */
    export function setMinimapHideFow(toggle: boolean): void {
        SetMinimapHideFow(toggle);
    }

    /**
     * Toggles the North Yankton map
     *
     * Hash: 0x9133955F1A2DA957 | Since: 323 | API-Set: unknown
     */
    export function setMinimapInPrologue(toggle: boolean): void {
        SetMinimapInPrologue(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A5CD7752DD28CD3 | Since: 323 | API-Set: unknown
     */
    export function setMinimapInSpectatorMode(toggle: boolean, ped: number | IPed): void {
        SetMinimapInSpectatorMode(toggle, ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B50FC8749632EC1 | Since: 2189 | API-Set: unknown
     */
    export function setMinimapSonarSweep(toggle: boolean): void {
        SetMinimapSonarSweep(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F28ECF5FC84772F | Since: 323 | API-Set: unknown
     */
    export function setMissionName(name: string): void {
        SetMissionName(false, name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE45087D85F468BC2 | Since: 323 | API-Set: unknown
     */
    export function setMissionNameForUgcMission(name: string): void {
        SetMissionName2(false, name);
    }

    /**
     * Changes the mouse cursor's sprite.
     * 1 = Normal
     * 6 = Left Arrow
     * 7 = Right Arrow
     *
     * Hash: 0x8DB8CFFD58B62552 | Since: 323 | API-Set: unknown
     */
    export function setMouseCursorStyle(spriteId: number): void {
        SetMouseCursorStyle(spriteId);
    }

    /**
     * Shows the cursor on screen for one frame.
     *
     * Hash: 0xAAE7CE1D63167423 | Since: 323 | API-Set: unknown
     */
    export function setMouseCursorThisFrame(): void {
        SetMouseCursorThisFrame();
    }

    /**
     * Shows/hides the frontend cursor on the pause menu or similar menus.
     * Clicking off and then on the game window will show it again.
     *
     * Hash: 0x98215325A695E78A | Since: 323 | API-Set: unknown
     */
    export function setMouseCursorVisible(toggle: boolean): void {
        SetMouseCursorVisible(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1563FE35E9928E67 | Since: 1365 | API-Set: unknown
     */
    export function setMpGamerTagsPointHealth(gamerTagId: number, value: number, maximumValue: number): void {
        SetMpGamerTagOverridePlayerHealth(gamerTagId, value, maximumValue);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD29EC58C2F6B5014 | Since: 1365 | API-Set: unknown
     */
    export function setMpGamerTagsShouldUsePointsHealth(gamerTagId: number, toggle: boolean): void {
        SetMpGamerTagDisablePlayerHealthSync(gamerTagId, toggle);
    }

    /**
     * Displays a bunch of icons above the players name, and level, and their name twice
     *
     * Hash: 0xA67F9C46D612B6F1 | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagsShouldUseVehicleHealth(gamerTagId: number, toggle: boolean): void {
        SetMpGamerTagUseVehicleHealth(gamerTagId, toggle);
    }

    /**
     * Sets flag's sprite transparency. 0-255.
     *
     * Hash: 0xD48FE545CD46F857 | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagAlpha(gamerTagId: number, component: number, alpha: number): void {
        SetMpGamerTagAlpha(gamerTagId, component, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7B7723747CCB55B6 | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagBigText(gamerTagId: number, _string: string): void {
        SetMpGamerTagBigText(gamerTagId, _string);
    }

    /**
     * Sets a gamer tag's component colour
     *
     * gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
     * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
     *
     * Hash: 0x613ED644950626AE | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagColour(gamerTagId: number, component: number, hudColorIndex: number): void {
        SetMpGamerTagColour(gamerTagId, component, hudColorIndex);
    }

    /**
     * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
     * Should be enabled as flag (2). Has 0 opacity by default.
     *
     * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
     * -> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
     *
     * Hash: 0x3158C77A7E888AB4 | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagHealthBarColour(gamerTagId: number, hudColorIndex: number): void {
        SetMpGamerTagHealthBarColour(gamerTagId, hudColorIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEA2B8283BAA3944 | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagName(gamerTagId: number, _string: string): void {
        SetMpGamerTagName(gamerTagId, _string);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C16459B2324B2CF | Since: 877 | API-Set: unknown
     */
    export function setMpGamerTagNumPackages(gamerTagId: number): void {
        SetMpGamerTagMpBagLargeCount(gamerTagId, 0);
    }

    /**
     * enum eMpGamerTagComponent
     * {
     * MP_TAG_GAMER_NAME,
     * MP_TAG_CREW_TAG,
     * MP_TAG_HEALTH_ARMOUR,
     * MP_TAG_BIG_TEXT,
     * MP_TAG_AUDIO_ICON,
     * MP_TAG_USING_MENU,
     * MP_TAG_PASSIVE_MODE,
     * MP_TAG_WANTED_STARS,
     * MP_TAG_DRIVER,
     * MP_TAG_CO_DRIVER,
     * MP_TAG_TAGGED,
     * MP_TAG_GAMER_NAME_NEARBY,
     * MP_TAG_ARROW,
     * MP_TAG_PACKAGES,
     * MP_TAG_INV_IF_PED_FOLLOWING,
     * MP_TAG_RANK_TEXT,
     * MP_TAG_TYPING,
     * MP_TAG_BAG_LARGE,
     * MP_TAG_ARROW,
     * MP_TAG_GANG_CEO,
     * MP_TAG_GANG_BIKER,
     * MP_TAG_BIKER_ARROW,
     * MP_TAG_MC_ROLE_PRESIDENT,
     * MP_TAG_MC_ROLE_VICE_PRESIDENT,
     * MP_TAG_MC_ROLE_ROAD_CAPTAIN,
     * MP_TAG_MC_ROLE_SARGEANT,
     * MP_TAG_MC_ROLE_ENFORCER,
     * MP_TAG_MC_ROLE_PROSPECT,
     * MP_TAG_TRANSMITTER,
     * MP_TAG_BOMB
     * };
     *
     * Hash: 0x63BB75ABEDC1F6A0 | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagVisibility(gamerTagId: number, component: number, toggle: boolean): void {
        SetMpGamerTagVisibility(gamerTagId, component, toggle, undefined);
    }

    /**
     * displays wanted star above head
     *
     * Hash: 0xCF228E2AA03099C3 | Since: 323 | API-Set: unknown
     */
    export function setMpGamerTagWantedLevel(gamerTagId: number, wantedlvl: number): void {
        SetMpGamerTagWantedLevel(gamerTagId, wantedlvl);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD21B55DF695CD0A | Since: 323 | API-Set: unknown
     */
    export function setMultiplayerBankCash(): void {
        SetMultiplayerBankCash();
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xFD1D220394BCB824 | Since: 323 | API-Set: unknown
     */
    export function setMultiplayerCash(): void {
        SetMultiplayerHudCash(0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC2D15BEF167E27BC | Since: 323 | API-Set: unknown
     */
    export function setMultiplayerWalletCash(): void {
        SetMultiplayerWalletCash();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE43368D2AA4F2FC | Since: 323 | API-Set: unknown
     */
    export function setNewWaypoint(x: number, y: number): void {
        SetNewWaypoint(x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF47FC56C71569CF | Since: 323 | API-Set: unknown
     */
    export function setPauseMenuActive(toggle: boolean): void {
        SetPauseMenuActive(toggle);
    }

    /**
     * Toggles the light state for the pause menu ped in frontend menus.
     *
     * This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
     *
     *
     * Example:
     * Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
     * Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
     *
     * Hash: 0x3CA6050692BC61B0 | Since: 323 | API-Set: unknown
     */
    export function setPauseMenuPedLighting(state: boolean): void {
        SetPauseMenuPedLighting(state);
    }

    /**
     * Toggles the pause menu ped sleep state for frontend menus.
     *
     * Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif
     *
     * `state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
     *
     * Hash: 0xECF128344E9FF9F1 | Since: 323 | API-Set: unknown
     */
    export function setPauseMenuPedSleepState(state: boolean): void {
        SetPauseMenuPedSleepState(state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C4BBF625CA98C4E | Since: 323 | API-Set: unknown
     */
    export function setPedAiBlipForcedOn(ped: number | IPed, toggle: boolean): void {
        SetPedAiBlipForcedOn(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE52B8E7F85D39A08 | Since: 323 | API-Set: unknown
     */
    export function setPedAiBlipGangId(ped: number | IPed, gangId: number): void {
        SetPedAiBlipGangId(ped, gangId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3EED80DFF7325CAA | Since: 323 | API-Set: unknown
     */
    export function setPedAiBlipHasCone(ped: number | IPed, toggle: boolean): void {
        SetPedAiBlipHasCone(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97C65887D4B37FA9 | Since: 323 | API-Set: unknown
     */
    export function setPedAiBlipNoticeRange(ped: number | IPed, range: number): void {
        SetPedAiBlipNoticeRange(ped, range);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCFACD0DB9D7A57D | Since: 877 | API-Set: unknown
     */
    export function setPedAiBlipSprite(ped: number | IPed, spriteId: number): void {
        SetPedAiBlipSprite(ped, spriteId);
    }

    /**
     * This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
     *
     * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
     *
     * Hash: 0xD30C50DF888D58B5 | Since: 323 | API-Set: unknown
     */
    export function setPedHasAiBlip(ped: number | IPed, hasCone: boolean): void {
        SetPedHasAiBlip(ped, hasCone);
    }

    /**
     * color: see SET_BLIP_COLOUR
     *
     * Hash: 0xB13DCB4C6FAAD238 | Since: 505 | API-Set: unknown
     */
    export function setPedHasAiBlipWithColour(ped: number | IPed, hasCone: boolean, color: number): void {
        SetPedHasAiBlipWithColor(ped, hasCone, color);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7B21E0BB01E8224A | Since: 323 | API-Set: unknown
     */
    export function setPlayerIconColour(color: number): void {
        SetMainPlayerBlipColour(color);
    }

    /**
     * If toggle is true, hides special ability bar / character name in the pause menu
     * If toggle is false, shows special ability bar / character name in the pause menu
     *
     * Hash: 0x808519373FD336A3 | Since: 323 | API-Set: unknown
     */
    export function setPlayerIsInDirectorMode(toggle: boolean): void {
        SetPlayerIsInDirectorMode(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x41350B4FC28E3941 | Since: 323 | API-Set: unknown
     */
    export function setPmWarningscreenActive(): void {
        Citizen.invokeNative('0x41350B4FC28E3941', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1EAC5F91BCBC5073 | Since: 323 | API-Set: unknown
     */
    export function setRaceTrackRender(toggle: boolean): void {
        SetRaceTrackRender(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE81B7D2A3DAB2D81 | Since: 323 | API-Set: unknown
     */
    export function setRadarAsExteriorThisFrame(): void {
        SetRadarAsExteriorThisFrame();
    }

    /**
     * List of interior hashes: https://pastebin.com/1FUyXNqY
     * Not for every interior zoom > 0 available.
     *
     * Hash: 0x59E727A1C9D3E31A | Since: 323 | API-Set: unknown
     */
    export function setRadarAsInteriorThisFrame(interior: number | string, pos: Vector3, zoom: number): void {
        if (typeof interior === 'string') interior = misc.getHashKey(interior)
        SetRadarAsInteriorThisFrame(interior, pos.x, pos.y, pos.z, zoom);
    }

    /**
     * zoomLevel ranges from 0 to 1400 in R* Scripts
     *
     * Hash: 0x096EF57A0C999BBA | Since: 323 | API-Set: unknown
     */
    export function setRadarZoom(zoomLevel: number): void {
        SetRadarZoom(zoomLevel);
    }

    /**
     * zoom ranges from 0 to 90f in R* Scripts
     *
     * Hash: 0xBD12C5EEE184C337 | Since: 323 | API-Set: unknown
     */
    export function setRadarZoomPrecise(zoom: number): void {
        SetRadarZoomPrecise(zoom);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF98E4B3E56AFC7B1 | Since: 323 | API-Set: unknown
     */
    export function setRadarZoomToBlip(blip: number | IBlip, zoom: number): void {
        SetRadarZoomToBlip(blip, zoom);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB7CC0D58405AD41 | Since: 323 | API-Set: unknown
     */
    export function setRadarZoomToDistance(zoom: number): void {
        SetRadarZoomToDistance(zoom);
    }

    /**
     * Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
     *
     * Hash: 0x25615540D894B814 | Since: 323 | API-Set: unknown
     */
    export function setRadiusBlipEdge(blip: number | IBlip, toggle: boolean): void {
        SetRadiusBlipEdge(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0CF54F20DE43879C | Since: 323 | API-Set: unknown
     */
    export function setSavegameListUniqueId(): void {
        Citizen.invokeNative('0x0CF54F20DE43879C', undefined);
    }

    /**
     * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
     *
     * Hash: 0xD68A5FF8A3A89874 | Since: 323 | API-Set: unknown
     */
    export function setScriptVariableColour(r: number, g: number, b: number, a: number): void {
        SetScriptVariableHudColour(r, g, b, a);
    }

    /**
     * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
     *
     * Hash: 0x16A304E6CB2BFAB9 | Since: 323 | API-Set: unknown
     */
    export function setSecondScriptVariableColour(r: number, g: number, b: number, a: number): void {
        SetScriptVariable2HudColour(r, g, b, a);
    }

    /**
     * `HUD::SET_SOCIAL_CLUB_TOUR("Gallery");`
     * `HUD::SET_SOCIAL_CLUB_TOUR("Missions");`
     * `HUD::SET_SOCIAL_CLUB_TOUR("General");`
     * `HUD::SET_SOCIAL_CLUB_TOUR("Playlists");`
     *
     * Hash: 0x9E778248D6685FE0 | Since: 323 | API-Set: unknown
     */
    export function setSocialClubTour(name: string): void {
        SetSocialClubTour(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC02F4DBFB51D988B | Since: 323 | API-Set: unknown
     */
    export function setTextCentre(align: boolean): void {
        SetTextCentre(align);
    }

    /**
     * colors you input not same as you think?
     * A: for some reason its R B G A
     *
     * Hash: 0xBE6B23FFA53FB442 | Since: 323 | API-Set: unknown
     */
    export function setTextColour(red: number, green: number, blue: number, alpha: number): void {
        SetTextColour(red, green, blue, alpha);
    }

    /**
     * distance - shadow distance in pixels, both horizontal and vertical
     * r, g, b, a - color
     *
     * Hash: 0x465C84BC39F1C351 | Since: 323 | API-Set: unknown
     */
    export function setTextDropshadow(distance: number, r: number, g: number, b: number, a: number): void {
        SetTextDropshadow(distance, r, g, b, a);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1CA3E9EAC9D93E5E | Since: 323 | API-Set: unknown
     */
    export function setTextDropShadow(): void {
        SetTextDropShadow();
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x441603240D202FA6 | Since: 323 | API-Set: unknown
     */
    export function setTextEdge(r: number, g: number, b: number, a: number): void {
        SetTextEdge(0, r, g, b, a);
    }

    /**
     * fonts that mess up your text where made for number values/misc stuff
     *
     * Hash: 0x66E0276CC5F6B9DA | Since: 323 | API-Set: unknown
     */
    export function setTextFont(fontType: number): void {
        SetTextFont(fontType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1185A8087587322C | Since: 323 | API-Set: unknown
     */
    export function setTextInputBoxEnabled(): void {
        SetTextInputBoxEnabled(false);
    }

    /**
     * Types -
     * 0: Center-Justify
     * 1: Left-Justify
     * 2: Right-Justify
     *
     * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
     *
     * Hash: 0x4E096588B13FFECA | Since: 323 | API-Set: unknown
     */
    export function setTextJustification(justifyType: number): void {
        SetTextJustification(justifyType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA50ABC31E3CDFAFF | Since: 323 | API-Set: unknown
     */
    export function setTextLeading(): void {
        SetTextLeading(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F4624F76E6953D1 | Since: 3095 | API-Set: unknown
     */
    export function setTextLineHeightMult(lineHeightMult: number): void {
        Citizen.invokeNative('0x9F4624F76E6953D1', lineHeightMult);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2513DFB0FB8400FE | Since: 323 | API-Set: unknown
     */
    export function setTextOutline(): void {
        SetTextOutline();
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x038C1F517D7FDCF8 | Since: 323 | API-Set: unknown
     */
    export function setTextProportional(): void {
        SetTextProportional(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F15302936E07111 | Since: 323 | API-Set: unknown
     */
    export function setTextRenderId(renderId: number): void {
        SetTextRenderId(renderId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B3C4650BC8BEE47 | Since: 323 | API-Set: unknown
     */
    export function setTextRightJustify(toggle: boolean): void {
        SetTextRightJustify(toggle);
    }

    /**
     * Size range : 0F to 1.0F
     * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
     *
     * Hash: 0x07C837F9A01C34C9 | Since: 323 | API-Set: unknown
     */
    export function setTextScale(scale: number, size: number): void {
        SetTextScale(scale, size);
    }

    /**
     * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
     *
     * start - left boundry on screen position (0.0 - 1.0)
     * end - right boundry on screen position (0.0 - 1.0)
     *
     * Hash: 0x63145D9C883A1A70 | Since: 323 | API-Set: unknown
     */
    export function setTextWrap(start: number, end: number): void {
        SetTextWrap(start, end);
    }

    /**
     * Toggles the Cayo Perico map.
     *
     * Hash: 0x5E1460624D194A38 | Since: 2189 | API-Set: unknown
     */
    export function setUseIslandMap(toggle: boolean): void {
        SetUseIslandMap(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6CDD58146A436083 | Since: 573 | API-Set: unknown
     */
    export function setUseSetDestinationInPauseMap(toggle: boolean): void {
        SetUseWaypointAsDestination(toggle);
    }

    /**
     * You can only use text entries. No custom text.
     *
     * Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
     * errorCode: shows an error code at the bottom left if nonzero
     *
     * Hash: 0x7B1776B3B53F8D74 | Since: 323 | API-Set: unknown
     */
    export function setWarningMessage(titleMsg: string, flags: number, promptMsg: string, showBackground: boolean, errorCode: number): void {
        SetWarningMessage(titleMsg, flags, promptMsg, false, 0, undefined, undefined, showBackground, errorCode);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDAF87174BE7454FF | Since: 323 | API-Set: unknown
     */
    export function setWarningMessageOptionHighlight(): boolean {
        return Citizen.invokeNative('0xDAF87174BE7454FF', undefined);
    }

    /**
     * Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
     * Param names copied from the corresponding scaleform function "SET_LIST_ROW".
     * Example: https://i.imgur.com/arKvOYx.png
     *
     * Hash: 0x0C5A80A9E096D529 | Since: 323 | API-Set: unknown
     */
    export function setWarningMessageOptionItems(index: number, name: string, cash: number, rp: number, lvl: number, colour: number): boolean {
        return SetWarningMessageListRow(index, name, cash, rp, lvl, colour);
    }

    /**
     * Shows a warning message on screen with a header.
     * Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
     * Example: https://i.imgur.com/ITJt8bJ.png
     *
     * Hash: 0xDC38CC1E35B6A5D7 | Since: 323 | API-Set: unknown
     */
    export function setWarningMessageWithHeader(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string): [any, any] {
        return SetWarningMessageWithHeader(entryHeader, entryLine1, instructionalKey, entryLine2, false, undefined, false, undefined);
    }

    /**
     * You can use this native for custom input, without having to use any scaleform-related natives.
     * The native must be called on tick.
     * The entryHeader must be a valid label.
     * For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
     * Notes:
     * - additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
     * - additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
     * - additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
     * - showBackground: shows black background of the warning screen
     * - errorCode: shows an error code at the bottom left if nonzero
     * Example of usage:
     * SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
     * Screenshot:
     * https://imgur.com/a/IYA7vJ8
     *
     * Hash: 0x701919482C74B5AB | Since: 323 | API-Set: unknown
     */
    export function setWarningMessageWithHeaderAndSubstringFlags(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string, additionalIntInfo: any, additionalTextInfoLine1: string, additionalTextInfoLine2: string, showBackground: boolean, errorCode: number): void {
        SetWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, false, undefined, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode);
    }

    /**
     * labelTitle: Label of the alert's title.
     * labelMsg: Label of the alert's message.
     * p2: This is an enum, check the description for a list.
     * p3: This is an enum, check the description for a list.
     * labelMsg2: Label of another message line
     * p5: usually 0
     * p6: usually -1
     * p7: usually 0
     * p8: unknown label
     * p9: unknown label
     * background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
     * errorCode: Error code, shown at the bottom left if set to value other than 0.
     *
     * instructionalKey enum list:
     * Buttons = {
     * Empty = 0,
     * Select = 1, -- (RETURN)
     * Ok = 2, -- (RETURN)
     * Yes = 4, -- (RETURN)
     * Back = 8, -- (ESC)
     * Cancel = 16, -- (ESC)
     * No = 32, -- (ESC)
     * RetrySpace = 64, -- (SPACE)
     * Restart = 128, -- (SPACE)
     * Skip = 256, -- (SPACE)
     * Quit = 512, -- (ESC)
     * Adjust = 1024, -- (ARROWS)
     * SpaceKey = 2048, -- (SPACE)
     * Share = 4096, -- (SPACE)
     * SignIn = 8192, -- (SPACE)
     * Continue = 16384, -- (RETURN)
     * AdjustLeftRight = 32768, -- (SCROLL L/R)
     * AdjustUpDown = 65536, -- (SCROLL U/D)
     * Overwrite = 131072, -- (SPACE)
     * SocialClubSignup = 262144, -- (RETURN)
     * Confirm = 524288, -- (RETURN)
     * Queue = 1048576, -- (RETURN)
     * RetryReturn = 2097152, -- (RETURN)
     * BackEsc = 4194304, -- (ESC)
     * SocialClub = 8388608, -- (RETURN)
     * Spectate = 16777216, -- (SPACE)
     * OkEsc = 33554432, -- (ESC)
     * CancelTransfer = 67108864, -- (ESC)
     * LoadingSpinner = 134217728,
     * NoReturnToGTA = 268435456, -- (ESC)
     * CancelEsc = 536870912, -- (ESC)
     * }
     *
     * Alt = {
     * Empty = 0,
     * No = 1, -- (SPACE)
     * Host = 2, -- (ESC)
     * SearchForJob = 4, -- (RETURN)
     * ReturnKey = 8, -- (TURN)
     * Freemode = 16, -- (ESC)
     * }
     *
     * Example: https://i.imgur.com/TvmNF4k.png
     *
     * Hash: 0x15803FEC3B9A872B | Since: 573 | API-Set: unknown
     */
    export function setWarningMessageWithHeaderAndSubstringFlagsExtended(labelTitle: string, labelMessage: string, labelMessage2: string, background: boolean, errorCode: number): void {
        SetWarningMessageWithAlert(labelTitle, labelMessage, 0, 0, labelMessage2, false, 0, 0, undefined, undefined, background, errorCode);
    }

    /**
     * No comment provided
     *
     * Hash: 0x38B55259C2E078ED | Since: 1493 | API-Set: unknown
     */
    export function setWarningMessageWithHeaderExtended(entryHeader: string, entryLine1: string, flags: number, entryLine2: string, showBg: boolean): [any, any] {
        return SetWarningMessageWithHeaderExtended(entryHeader, entryLine1, flags, entryLine2, false, undefined, showBg, undefined, undefined);
    }

    /**
     * This native removes the current waypoint from the map.
     *
     * Example:
     * C#:
     * Function.Call(Hash.SET_WAYPOINT_OFF);
     *
     * C++:
     * `HUD::SET_WAYPOINT_OFF();`
     *
     * Hash: 0xA7E4E2D361C2627F | Since: 323 | API-Set: unknown
     */
    export function setWaypointOff(): void {
        SetWaypointOff();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3B07BA00A83B0F1 | Since: 323 | API-Set: unknown
     */
    export function setWidescreenFormat(): void {
        SetWidescreenFormat(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x60E892BA4F5BDCA4 | Since: 323 | API-Set: unknown
     */
    export function showAccountPicker(): void {
        ShowSigninUi();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC772A904CDE1186F | Since: 2545 | API-Set: unknown
     */
    export function showContactInstructionalButton(toggle: boolean): void {
        ShowContactInstructionalButton(toggle);
    }

    /**
     * Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
     *
     * Hash: 0xDCFB5D4DB8BF367E | Since: 323 | API-Set: unknown
     */
    export function showCrewIndicatorOnBlip(blip: number | IBlip, toggle: boolean): void {
        ShowCrewIndicatorOnBlip(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19BD6E3C0E16A8FA | Since: 2802 | API-Set: unknown
     */
    export function showForSaleIconOnBlip(blip: number | IBlip, toggle: boolean): void {
        Citizen.invokeNative('0x19BD6E3C0E16A8FA', blip, toggle);
    }

    /**
     * Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
     * .Indicating that that player is a friend (in GTA:O). This color can not be changed.
     * To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
     *
     * Hash: 0x23C3EB807312F01A | Since: 323 | API-Set: unknown
     */
    export function showFriendIndicatorOnBlip(blip: number | IBlip, toggle: boolean): void {
        ShowFriendIndicatorOnBlip(blip, toggle);
    }

    /**
     * Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
     * _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
     *
     * Hash: 0xCAC2031EBF79B1A8 | Since: 2699 | API-Set: unknown
     */
    export function showGoldTickOnBlip(blip: number | IBlip, toggle: boolean): void {
        ShowHasCompletedIndicatorOnBlip(blip, toggle);
    }

    /**
     * Adds the GTA: Online player heading indicator to a blip.
     *
     * Hash: 0x5FBCA48327B914DF | Since: 323 | API-Set: unknown
     */
    export function showHeadingIndicatorOnBlip(blip: number | IBlip, toggle: boolean): void {
        ShowHeadingIndicatorOnBlip(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75A16C3DA34F1245 | Since: 323 | API-Set: unknown
     */
    export function showHeightOnBlip(blip: number | IBlip, toggle: boolean): void {
        ShowHeightOnBlip(blip, toggle);
    }

    /**
     * This function hides various HUD (Heads-up Display) components.
     * Listed below are the integers and the corresponding HUD component.
     * - 1 : WANTED_STARS
     * - 2 : WEAPON_ICON
     * - 3 : CASH
     * - 4 : MP_CASH
     * - 5 : MP_MESSAGE
     * - 6 : VEHICLE_NAME
     * - 7 : AREA_NAME
     * - 8 : VEHICLE_CLASS
     * - 9 : STREET_NAME
     * - 10 : HELP_TEXT
     * - 11 : FLOATING_HELP_TEXT_1
     * - 12 : FLOATING_HELP_TEXT_2
     * - 13 : CASH_CHANGE
     * - 14 : RETICLE
     * - 15 : SUBTITLE_TEXT
     * - 16 : RADIO_STATIONS
     * - 17 : SAVING_GAME
     * - 18 : GAME_STREAM
     * - 19 : WEAPON_WHEEL
     * - 20 : WEAPON_WHEEL_STATS
     * - 21 : HUD_COMPONENTS
     * - 22 : HUD_WEAPONS
     *
     * These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
     *
     * Hash: 0x0B4DF1FA60C0E664 | Since: 323 | API-Set: unknown
     */
    export function showComponentThisFrame(id: number): void {
        ShowHudComponentThisFrame(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA3C0B359DCB848B6 | Since: 323 | API-Set: unknown
     */
    export function showNumberOnBlip(blip: number | IBlip, _number: number): void {
        ShowNumberOnBlip(blip, _number);
    }

    /**
     * Highlights a blip by a cyan color circle.
     *
     * Color can be changed with SET_BLIP_SECONDARY_COLOUR
     *
     * Hash: 0xB81656BC81FE24D1 | Since: 323 | API-Set: unknown
     */
    export function showOutlineIndicatorOnBlip(blip: number | IBlip, toggle: boolean): void {
        ShowOutlineIndicatorOnBlip(blip, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4F38DCA127DAAEA2 | Since: 1734 | API-Set: unknown
     */
    export function showScriptedComponentThisFrame(id: number): void {
        ShowScriptedHudComponentThisFrame(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1A6C18B35BCADE6 | Since: 323 | API-Set: unknown
     */
    export function showStartMissionInstructionalButton(toggle: boolean): void {
        ShowStartMissionInstructionalButton(toggle);
    }

    /**
     * Adds a green checkmark on top of a blip.
     *
     * Hash: 0x74513EA3E505181E | Since: 323 | API-Set: unknown
     */
    export function showTickOnBlip(blip: number | IBlip, toggle: boolean): void {
        ShowTickOnBlip(blip, toggle);
    }

    /**
     * Starts a new GPS custom-route, allowing you to plot lines on the map.
     * Lines are drawn directly between points.
     * The GPS custom route works like the GPS multi route, except it does not follow roads.
     * Example result: https://i.imgur.com/BDm5pzt.png
     * hudColor: The HUD color of the GPS path.
     * displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
     * followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
     *
     * Hash: 0xDB34E8D56FC13B08 | Since: 323 | API-Set: unknown
     */
    export function startGpsCustomRoute(hudColor: number, displayOnFoot: boolean, followPlayer: boolean): void {
        StartGpsCustomRoute(hudColor, displayOnFoot, followPlayer);
    }

    /**
     * Starts a new GPS multi-route, allowing you to create custom GPS paths.
     * GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
     * Once the player has passed a point, the GPS will no longer force its path through it.
     *
     * Works independently from the player-placed waypoint and blip routes.
     * Example result: https://i.imgur.com/ZZHQatX.png
     * hudColor: The HUD color of the GPS path.
     * routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
     * displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
     *
     * Hash: 0x3D3D15AF7BCAAF83 | Since: 323 | API-Set: unknown
     */
    export function startGpsMultiRoute(hudColor: number, routeFromPlayer: boolean, displayOnFoot: boolean): void {
        StartGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA751764F0821256 | Since: 323 | API-Set: unknown
     */
    export function suppressFrontendRenderingThisFrame(): void {
        SuppressFrontendRenderingThisFrame();
    }

    /**
     * Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
     *
     * To enable the keys again, use `0x14621BB1DF14E2B2`.
     *
     * Hash: 0xEC9264727EEC0F28 | Since: 323 | API-Set: unknown
     */
    export function takeControlOfFrontend(): void {
        TakeControlOfFrontend();
    }

    /**
     * Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
     *
     * Hash: 0xADED7F5748ACAFE6 | Since: 323 | API-Set: unknown
     */
    export function thefeedAutoPostGametipsOff(): void {
        ThefeedCommentTeleportPoolOff();
    }

    /**
     * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.
     *
     * Hash: 0x56C8B608CFD49854 | Since: 323 | API-Set: unknown
     */
    export function thefeedAutoPostGametipsOn(): void {
        ThefeedCommentTeleportPoolOn();
    }

    /**
     * No comment provided
     *
     * Hash: 0x80FE4F3AB4E1B62A | Since: 323 | API-Set: unknown
     */
    export function thefeedClearFrozenPost(): void {
        ThefeedClearFrozenPost();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8FDB297A8D25FBA | Since: 323 | API-Set: unknown
     */
    export function thefeedFlushQueue(): void {
        ThefeedFlushQueue();
    }

    /**
     * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
     *
     * Hash: 0x583049884A2EEE3C | Since: 323 | API-Set: unknown
     */
    export function thefeedForceRenderOff(): void {
        ThefeedForceRenderOff();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA13C11E1B5C06BFC | Since: 323 | API-Set: unknown
     */
    export function thefeedForceRenderOn(): void {
        ThefeedForceRenderOn();
    }

    /**
     * Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
     *
     * Hash: 0xFDEC055AB549E328 | Since: 323 | API-Set: unknown
     */
    export function thefeedFreezeNextPost(): void {
        ThefeedFreezeNextPost();
    }

    /**
     * Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
     *
     * Hash: 0x82352748437638CA | Since: 323 | API-Set: unknown
     */
    export function thefeedGetLastShownPhoneActivatableFeedId(): number {
        return ThefeedGetFirstVisibleDeleteRemaining();
    }

    /**
     * Stops loading screen tips shown by invoking `THEFEED_SHOW`
     *
     * Hash: 0x32888337579A5970 | Since: 463 | API-Set: unknown
     */
    export function thefeedHide(): void {
        ThefeedDisableLoadingScreenTips();
    }

    /**
     * Once called each frame hides all above radar notifications.
     *
     * Hash: 0x25F87B30C382FCA7 | Since: 323 | API-Set: unknown
     */
    export function thefeedHideThisFrame(): void {
        ThefeedHideThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9CBFD40B3FA3010 | Since: 323 | API-Set: unknown
     */
    export function thefeedIsPaused(): boolean {
        return ThefeedIsPaused();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F1554B0CC2089FA | Since: 323 | API-Set: unknown
     */
    export function thefeedOnlyShowTooltips(toggle: boolean): void {
        ThefeedOnlyShowTooltips(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFDB423997FA30340 | Since: 323 | API-Set: unknown
     */
    export function thefeedPause(): void {
        ThefeedPause();
    }

    /**
     * Removes a notification instantly instead of waiting for it to disappear
     *
     * Hash: 0xBE4390CB40B3E627 | Since: 323 | API-Set: unknown
     */
    export function thefeedRemoveItem(notificationId: number): void {
        ThefeedRemoveItem(notificationId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB695E2CD0A2DA9EE | Since: 323 | API-Set: unknown
     */
    export function thefeedReportLogoOff(): void {
        ThefeedSpsExtendWidescreenOff();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4438C0564490E63 | Since: 323 | API-Set: unknown
     */
    export function thefeedReportLogoOn(): void {
        ThefeedSpsExtendWidescreenOn();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFDD85225B2DEA55E | Since: 323 | API-Set: unknown
     */
    export function thefeedResetAllParameters(): void {
        ThefeedResetAllParameters();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE1CD1E48E025E661 | Since: 323 | API-Set: unknown
     */
    export function thefeedResume(): void {
        ThefeedResume();
    }

    /**
     * From the decompiled scripts:
     * `HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);`
     * `HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);`
     * `HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);`
     *
     * sets background color for the next notification
     * 6 = red
     * 184 = green
     * 190 = yellow
     *
     * Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15
     *
     * Hash: 0x92F0DA1E27DB96DC | Since: 323 | API-Set: unknown
     */
    export function thefeedSetBackgroundColorForNextPost(hudColorIndex: number): void {
        ThefeedSetNextPostBackgroundColor(hudColorIndex);
    }

    /**
     * Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.
     *
     * Hash: 0x17AD8C9706BDD88A | Since: 323 | API-Set: unknown
     */
    export function thefeedSetFlashDurationParameterForNextMessage(count: number): void {
        ThefeedSetAnimpostfxCount(count);
    }

    /**
     * No comment provided
     *
     * Hash: 0x17430B918701C342 | Since: 323 | API-Set: unknown
     */
    export function thefeedSetRgbaParameterForNextMessage(red: number, green: number, blue: number, alpha: number): void {
        ThefeedSetAnimpostfxColor(red, green, blue, alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0x55598D21339CB998 | Since: 323 | API-Set: unknown
     */
    export function thefeedSetScriptedMenuHeight(pos: number): void {
        ThefeedSetScriptedMenuHeight(pos);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAE4F9B97CD43B30 | Since: 323 | API-Set: unknown
     */
    export function thefeedSetSnapFeedItemPositions(): void {
        ThefeedSetFlushAnimpostfx(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A0C7C9BB10ABB36 | Since: 323 | API-Set: unknown
     */
    export function thefeedSetVibrateParameterForNextMessage(toggle: boolean): void {
        ThefeedSetAnimpostfxSound(toggle);
    }

    /**
     * Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.
     *
     * Hash: 0x15CFA549788D35EF | Since: 463 | API-Set: unknown
     */
    export function thefeedShow(): void {
        ThefeedDisplayLoadingScreenTips();
    }

    /**
     * Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
     *
     * Hash: 0x317EBA71D7543F52 | Since: 323 | API-Set: unknown
     */
    export function thefeedUpdateItemTexture(txdString1: string, txnString1: string, txdString2: string, txnString2: string): void {
        ThefeedUpdateItemTexture(txdString1, txnString1, txdString2, txnString2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6AFDFB93754950C7 | Since: 323 | API-Set: unknown
     */
    export function toggleStealthRadar(toggle: boolean): void {
        ToggleStealthRadar(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x72DD432F3CDFC0EE | Since: 323 | API-Set: unknown
     */
    export function triggerSonarBlip(pos: Vector3, radius: number): void {
        TriggerSonarBlip(pos.x, pos.y, pos.z, radius, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8183455E16C42E3A | Since: 323 | API-Set: unknown
     */
    export function unlockMinimapAngle(): void {
        UnlockMinimapAngle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E93E06DB8EF1F30 | Since: 323 | API-Set: unknown
     */
    export function unlockMinimapPosition(): void {
        UnlockMinimapPosition();
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xD2049635DEB9C375 | Since: 323 | API-Set: unknown
     */
    export function updateRadarZoomToBlip(): void {
        Citizen.invokeNative('0xD2049635DEB9C375');
    }

    /**
     * Related to displaying cash on the HUD
     * `Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts`
     *
     * Hash: 0x170F541E1CADD1DE | Since: 323 | API-Set: unknown
     */
    export function useFakeMpCash(toggle: boolean): void {
        UseFakeMpCash(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C698D8F099174C7 | Since: 1180 | API-Set: unknown
     */
    export function useVehicleTargetingReticule(): void {
        Citizen.invokeNative('0x0C698D8F099174C7', undefined);
    }

    /**
     * Applies to new eBlipParams _BLIP_CHANGE_46* and _BLIP_CHANGE_47*
     *
     * Hash: 0x25D984CFB64ED6DE | Since: 3095 | API-Set: unknown
     */
    export function setBlipGpsRouteDisplayDistance(blip: number | IBlip, blipChangeParam46: number, blipChangeParam47: boolean): void {
        Citizen.invokeNative('0x25D984CFB64ED6DE', blip, blipChangeParam46, blipChangeParam47);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35CCE12EAECB4A51 | Since: 2944 | API-Set: unknown
     */
    export function setPauseExteriorRenderingWhileInInterior(): void {
        Citizen.invokeNative('0x35CCE12EAECB4A51');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6865E26067B708C | Since: 3407 | API-Set: unknown
     */
    export function showPurchaseInstructionalButton(toggle: boolean): void {
        Citizen.invokeNative('0xF6865E26067B708C', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1BC0EA2912708625 | Since: 3095 | API-Set: unknown
     */
    export function useVehicleTargetingReticuleOnVehicles(enable: boolean): void {
        Citizen.invokeNative('0x1BC0EA2912708625', enable);
    }

}


export namespace misc {
    /**
     * Adds the given model name hash to the list of valid models for the player ped's parachute.
     *
     * Hash: 0x8AC7AE9 | Since: unknown | API-Set: client
     */
    export function addAuthorizedParachuteModel(modelNameHash: number): void {
        AddAuthorizedParachuteModel(modelNameHash);
    }

    /**
     * Adds the given model name hash to the list of valid models for the player ped's parachute pack.
     *
     * Hash: 0x2E86DEA5 | Since: unknown | API-Set: client
     */
    export function addAuthorizedParachutePackModel(modelNameHash: number): void {
        AddAuthorizedParachutePackModel(modelNameHash);
    }

    /**
     * Adds new health config.
     *
     * Hash: 0x9CBFD5C1 | Since: unknown | API-Set: client
     */
    export function addHealthConfig(configName: string, defaultHealth: number, defaultArmor: number, defaultEndurance: number, fatiguedHealthThreshold: number, injuredHealthThreshold: number, dyingHealthThreshold: number, hurtHealthThreshold: number, dogTakedownThreshold: number, writheFromBulletThreshold: number, meleeCardinalFatalAttack: boolean, invincible: boolean): void {
        AddHealthConfig(configName, defaultHealth, defaultArmor, defaultEndurance, fatiguedHealthThreshold, injuredHealthThreshold, dyingHealthThreshold, hurtHealthThreshold, dogTakedownThreshold, writheFromBulletThreshold, meleeCardinalFatalAttack, invincible);
    }

    /**
     * Disables the editor runtime mode, changing game behavior to not track entity metadata.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xB1622B17 | Since: unknown | API-Set: client
     */
    export function disableEditorRuntime(): void {
        DisableEditorRuntime();
    }

    /**
     * Disables the game's afk camera that starts panning around after 30 seconds of inactivity.
     *
     * Hash: 0x3D5AB7F0 | Since: unknown | API-Set: client
     */
    export function disableIdleCamera(state: boolean): void {
        DisableIdleCamera(state);
    }

    /**
     * Enables the editor runtime mode, changing game behavior to track entity metadata.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xC383871D | Since: unknown | API-Set: client
     */
    export function enableEditorRuntime(): void {
        EnableEditorRuntime();
    }

    /**
     * Enters cursor mode, suppressing mouse movement to the game and displaying a mouse cursor instead. This function supports
     * SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x780DA86 | Since: unknown | API-Set: client
     */
    export function enterCursorMode(): void {
        EnterCursorMode();
    }

    /**
     * A getter for [SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME](#\_0x0B919E1FB47CC4E0).
     *
     * Hash: 0xB550232D | Since: unknown | API-Set: client
     */
    export function getAmbientPedRangeMultiplier(): number {
        return GetAmbientPedRangeMultiplier();
    }

    /**
     * This native returns the index of a calming quad if the given point is inside its bounds.
     *
     * Hash: 0x870E8B40 | Since: unknown | API-Set: client
     */
    export function getCalmingQuadAtCoords(x: number, y: number): number {
        return GetCalmingQuadAtCoords(x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF60E63 | Since: unknown | API-Set: client
     */
    export function getCalmingQuadBounds(waterQuad: number): [boolean, number, number, number, number] {
        return GetCalmingQuadBounds(waterQuad);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEBFC42 | Since: unknown | API-Set: client
     */
    export function getCalmingQuadCount(): number {
        return GetCalmingQuadCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB0E3A058 | Since: unknown | API-Set: client
     */
    export function getCalmingQuadDampening(waterQuad: number): [boolean, number] {
        return GetCalmingQuadDampening(waterQuad);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5550BF9F | Since: unknown | API-Set: client
     */
    export function getFuelConsumptionRateMultiplier(): number {
        return GetFuelConsumptionRateMultiplier();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC66CD90C | Since: unknown | API-Set: client
     */
    export function getFuelConsumptionState(): boolean {
        return GetFuelConsumptionState();
    }

    /**
     * A getter for [SET_GLOBAL_PASSENGER_MASS_MULTIPLIER](#\_0x3422291C).
     *
     * Hash: 0x78951816 | Since: unknown | API-Set: client
     */
    export function getGlobalPassengerMassMultiplier(): number {
        return GetGlobalPassengerMassMultiplier();
    }

    /**
     * Retrieves the map data entity handle.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x30AA6911 | Since: unknown | API-Set: client
     */
    export function getMapdataEntityHandle(mapDataHash: number, entityInternalIdx: number): [boolean, number] {
        return GetMapdataEntityHandle(mapDataHash, entityInternalIdx);
    }

    /**
     * Returns mapdata's entity matrix. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * This should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.
     *
     * Matrix layout is as follows:
     *
     * *   Element \[0], \[1] and \[2] should represent the right vector.
     * *   Element \[4], \[5] and \[6] should represent the forward vector.
     * *   Element \[8], \[9] and \[10] should represent the up vector.
     * *   Element \[12], \[13] and \[14] should represent X, Y and Z translation coordinates.
     * *   All other elements should be \[0, 0, 0, 1].
     *
     * Hash: 0x2C3CDA93 | Since: unknown | API-Set: client
     */
    export function getMapdataEntityMatrix(mapDataHash: number, entityInternalIdx: number, matrixPtr: number): boolean {
        return GetMapdataEntityMatrix(mapDataHash, entityInternalIdx, matrixPtr);
    }

    /**
     * Returns the transient map data index for a specified hash.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xD29D8EDD | Since: unknown | API-Set: client
     */
    export function getMapdataFromHashKey(mapdataHandle: number | string): number {
        if (typeof mapdataHandle === 'string') mapdataHandle = misc.getHashKey(mapdataHandle)
        return GetMapdataFromHashKey(mapdataHandle);
    }

    /**
     * A getter for [SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\_0xEAE6DCC7EEE3DB1D).
     *
     * Hash: 0xFF72DF84 | Since: unknown | API-Set: client
     */
    export function getParkedVehicleDensityMultiplier(): number {
        return GetParkedVehicleDensityMultiplier();
    }

    /**
     * A getter for [SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\_0xB3B3359379FE77D3).
     * Same as vehicle density multiplier.
     *
     * Hash: 0x7B0D00C5 | Since: unknown | API-Set: client
     */
    export function getRandomVehicleDensityMultiplier(): number {
        return GetRandomVehicleDensityMultiplier();
    }

    /**
     * A getter for [SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\_0x7A556143A1C03898).
     *
     * Hash: 0x77C598B2 | Since: unknown | API-Set: client
     */
    export function getScenarioPedDensityMultiplier(): number {
        return GetScenarioPedDensityMultiplier();
    }

    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Returns whether an asynchronous streaming file registration completed.
     *
     * Hash: 0xA194934D | Since: unknown | API-Set: client
     */
    export function isStreamingFileReady(registerAs: string): boolean {
        return IsStreamingFileReady(registerAs);
    }

    /**
     * Leaves cursor mode. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xADECF19E | Since: unknown | API-Set: client
     */
    export function leaveCursorMode(): void {
        LeaveCursorMode();
    }

    /**
     * Toggles a check that prevents attaching (networked) entities to remotely owned peds. This is disabled by default.
     *
     * Hash: 0x30CE39D8 | Since: unknown | API-Set: client
     */
    export function onesyncEnableRemoteAttachmentSanitization(enable: boolean): void {
        OnesyncEnableRemoteAttachmentSanitization(enable);
    }

    /**
     * Replaces the `popgroups` (CPopGroupList) meta file with the file in the specified path.
     *
     * Hash: 0xD3BC438F | Since: unknown | API-Set: client
     */
    export function overridePopGroups(path: string): void {
        OverridePopGroups(path);
    }

    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game.
     *
     * Hash: 0x3C2F9037 | Since: unknown | API-Set: client
     */
    export function registerArchetypes(factory: Function): void {
        RegisterArchetypes(factory);
    }

    /**
     * Registers a specified .gfx file as GFx font library.
     * The .gfx file has to be registered with the streamer already.
     *
     * Hash: 0x1B3A363 | Since: unknown | API-Set: client
     */
    export function registerFontFile(fileName: string): void {
        RegisterFontFile(fileName);
    }

    /**
     * Registers a specified font name for use with text draw commands.
     *
     * Hash: 0xACF6D8EE | Since: unknown | API-Set: client
     */
    export function registerFontId(fontName: string): number {
        return RegisterFontId(fontName);
    }

    /**
     * Registers a key mapping for the current resource.
     *
     * See the related [cookbook post](https://cookbook.fivem.net/2020/01/06/using-the-new-console-key-bindings/) for more information.
     *
     * Below you can find some examples on how to create these keybindings as well as the alternate keybinding syntax, which is preceded by `~!` to indicate that it's an alternate key.
     *
     * Hash: 0xD7664FD1 | Since: unknown | API-Set: client
     */
    export function registerKeyMapping(commandString: string, description: string, defaultMapper: string, defaultParameter: string): void {
        RegisterKeyMapping(commandString, description, defaultMapper, defaultParameter);
    }

    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a dynamic streaming asset from the server with the GTA streaming module system.
     *
     * Hash: 0xCEAD2D4B | Since: unknown | API-Set: client
     */
    export function registerStreamingFileFromCache(resourceName: string, fileName: string, cacheString: string): void {
        RegisterStreamingFileFromCache(resourceName, fileName, cacheString);
    }

    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a KVP value as an asset with the GTA streaming module system. This function currently won't work.
     *
     * Hash: 0x1493DCC1 | Since: unknown | API-Set: client
     */
    export function registerStreamingFileFromKvs(kvsKey: string): void {
        RegisterStreamingFileFromKvs(kvsKey);
    }

    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored.
     *
     * Use `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully.
     *
     * Hash: 0xF44BFB95 | Since: unknown | API-Set: client
     */
    export function registerStreamingFileFromUrl(registerAs: string, url: string): void {
        RegisterStreamingFileFromUrl(registerAs, url);
    }

    /**
     * Removes health config.
     *
     * Hash: 0xE0ED5FB | Since: unknown | API-Set: client
     */
    export function removeHealthConfig(configName: string): void {
        RemoveHealthConfig(configName);
    }

    /**
     * Adds a cooldown between instances of moving and then aiming.
     * Can be optionally used to hinder 'speedboosting'
     * To turn off, set value to 0
     *
     * Hash: 0xA42A3DBF | Since: unknown | API-Set: client
     */
    export function setAimCooldown(value: number): void {
        SetAimCooldown(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5945BD9 | Since: unknown | API-Set: client
     */
    export function setCalmingQuadBounds(waterQuad: number, minX: number, minY: number, maxX: number, maxY: number): boolean {
        return SetCalmingQuadBounds(waterQuad, minX, minY, maxX, maxY);
    }

    /**
     * No comment provided
     *
     * Hash: 0x67977501 | Since: unknown | API-Set: client
     */
    export function setCalmingQuadDampening(calmingQuad: number, dampening: number): boolean {
        return SetCalmingQuadDampening(calmingQuad, dampening);
    }

    /**
     * Allows Weapon-Flashlight beams to stay visible while moving. Normally it only stays on while aiming.
     *
     * Hash: 0x7635B349 | Since: unknown | API-Set: client
     */
    export function setFlashLightKeepOnWhileMoving(state: boolean): void {
        SetFlashLightKeepOnWhileMoving(state);
    }

    /**
     * Sets fuel consumption rate multiplier for all vehicles operated by a player. This is a way to slow down or speed up fuel consumption for all vehicles at a time. If 0 - it practically means that fuel will not be consumed. By default is set to 1.
     *
     * When the multiplier is set to 1 a default 65 litre gas tank car with average fuel consumption can stay idle for ~16.67 hours or run with max RPM for ~2.5 hours.
     *
     * To customize fuel consumption per vehicle / vehicle class use [`SET_HANDLING_FLOAT`](#\_0x90DD01C)/[`SET_VEHICLE_HANDLING_FLOAT`](#\_0x488C86D2) natives with `fieldName` equal to `fPetrolConsumptionRate`. By default it is set to 0.5 for all vehicles.
     *
     * Hash: 0x845F3E5C | Since: unknown | API-Set: client
     */
    export function setFuelConsumptionRateMultiplier(multiplier: number): void {
        SetFuelConsumptionRateMultiplier(multiplier);
    }

    /**
     * Turns on and off fuel consumption in all vehicles operated by a player. NPC operated vehicles will not consume fuel to avoid traffic disruptions.
     *
     * The default Gta5 behaviour is fuel consumption turned off.
     *
     * Hash: 0x81DAD03E | Since: unknown | API-Set: client
     */
    export function setFuelConsumptionState(state: boolean): void {
        SetFuelConsumptionState(state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C47F6AC | Since: unknown | API-Set: client
     */
    export function setGlobalPassengerMassMultiplier(massMul: number): void {
        SetGlobalPassengerMassMultiplier(massMul);
    }

    /**
     * Sets default armor value for specific health config.
     *
     * Hash: 0x20A1E6A2 | Since: unknown | API-Set: client
     */
    export function setHealthConfigDefaultArmor(configName: string, newValue: number): void {
        SetHealthConfigDefaultArmor(configName, newValue);
    }

    /**
     * Sets default endurance value for specific health config.
     *
     * Hash: 0x60F20B81 | Since: unknown | API-Set: client
     */
    export function setHealthConfigDefaultEndurance(configName: string, newValue: number): void {
        SetHealthConfigDefaultEndurance(configName, newValue);
    }

    /**
     * Sets default health value for specific health config.
     *
     * Hash: 0xC705C778 | Since: unknown | API-Set: client
     */
    export function setHealthConfigDefaultHealth(configName: string, newValue: number): void {
        SetHealthConfigDefaultHealth(configName, newValue);
    }

    /**
     * Sets default dog takedown threshold value for specific health config.
     *
     * Hash: 0x9A995E96 | Since: unknown | API-Set: client
     */
    export function setHealthConfigDogTakedownThreshold(configName: string, newValue: number): void {
        SetHealthConfigDogTakedownThreshold(configName, newValue);
    }

    /**
     * Sets default dying health threshold value for specific health config.
     *
     * Hash: 0x9B00FD77 | Since: unknown | API-Set: client
     */
    export function setHealthConfigDyingThreshold(configName: string, newValue: number): void {
        SetHealthConfigDyingThreshold(configName, newValue);
    }

    /**
     * Sets default fatigued health threshold value for specific health config.
     *
     * Hash: 0xC58953FD | Since: unknown | API-Set: client
     */
    export function setHealthConfigFatiguedThreshold(configName: string, newValue: number): void {
        SetHealthConfigFatiguedThreshold(configName, newValue);
    }

    /**
     * Sets default hurt health threshold value for specific health config.
     *
     * Hash: 0x98DF1A83 | Since: unknown | API-Set: client
     */
    export function setHealthConfigHurtThreshold(configName: string, newValue: number): void {
        SetHealthConfigHurtThreshold(configName, newValue);
    }

    /**
     * Sets default injured health threshold value for specific health config.
     *
     * Hash: 0xF9D9B647 | Since: unknown | API-Set: client
     */
    export function setHealthConfigInjuredThreshold(configName: string, newValue: number): void {
        SetHealthConfigInjuredThreshold(configName, newValue);
    }

    /**
     * Sets default invincible value for specific health config.
     *
     * Hash: 0x4A9EEDE6 | Since: unknown | API-Set: client
     */
    export function setHealthConfigInvincible(configName: string, newValue: boolean): void {
        SetHealthConfigInvincible(configName, newValue);
    }

    /**
     * Sets default melee cardinal fatal attack value for specific health config.
     *
     * Hash: 0xDD443E53 | Since: unknown | API-Set: client
     */
    export function setHealthConfigMeleeFatalAttack(configName: string, newValue: boolean): void {
        SetHealthConfigMeleeFatalAttack(configName, newValue);
    }

    /**
     * Sets default writhe from bullet threshold value for specific health config.
     *
     * Hash: 0xE97633CB | Since: unknown | API-Set: client
     */
    export function setHealthConfigWritheFromBulletThreshold(configName: string, newValue: number): void {
        SetHealthConfigWritheFromBulletThreshold(configName, newValue);
    }

    /**
     * Overrides how many real ms are equal to one game minute.
     * A setter for [`GetMillisecondsPerGameMinute`](#\_0x2F8B4D1C595B11DB).
     *
     * Hash: 0x36CA2554 | Since: unknown | API-Set: client
     */
    export function setMillisecondsPerGameMinute(value: number): void {
        SetMillisecondsPerGameMinute(value);
    }

    /**
     * <strong>This native is deprecated and does nothing!</strong>
     *
     * Hash: 0x7F6B8D75 | Since: unknown | API-Set: client
     */
    export function setModelHeadlightConfiguration(modelHash: number | string, ratePerSecond: number, headlightRotation: number, invertRotation: boolean): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetModelHeadlightConfiguration(modelHash, ratePerSecond, headlightRotation, invertRotation);
    }

    /**
     * Sets whether all tags should group (normal game behavior) or should remain independent and above each ped's respective head when in a vehicle.
     *
     * Hash: 0x7A27BC93 | Since: unknown | API-Set: client
     */
    export function setMpGamerTagsUseVehicleBehavior(enabled: boolean): void {
        SetMpGamerTagsUseVehicleBehavior(enabled);
    }

    /**
     * Sets the maximum distance at which all tags will be visible and which beyond will not be displayed. Distance is measured from the camera position.
     *
     * Hash: 0xD61676B3 | Since: unknown | API-Set: client
     */
    export function setMpGamerTagsVisibleDistance(distance: number): void {
        SetMpGamerTagsVisibleDistance(distance);
    }

    /**
     * Registers a keymap that will be triggered whenever `rawKeyIndex` is pressed or released.
     *
     * `onKeyUp` and `onKeyDown` will not provide any arguments.
     *
     * ```ts
     * function onStateChange();
     * ```
     *
     * Hash: 0x49C1F6DC | Since: unknown | API-Set: client
     */
    export function registerRawKeymap(keymapName: string, onKeyDown: Function, onKeyUp: Function, rawKeyIndex: number, canBeDisabled: boolean): void {
        RegisterRawKeymap(keymapName, onKeyDown, onKeyUp, rawKeyIndex, canBeDisabled);
    }

    /**
     * Remaps the keymap bound to `keymapName` to `newRawKeyIndex`
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x6E38C1B9 | Since: unknown | API-Set: client
     */
    export function remapRawKeymap(keymapName: string, newRawKeyIndex: number): void {
        RemapRawKeymap(keymapName, newRawKeyIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC44C2F44 | Since: unknown | API-Set: client
     */
    export function setBackfaceculling(toggle: boolean): void {
        SetBackfaceculling(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A7A8DAC | Since: unknown | API-Set: client
     */
    export function setCursorLocation(x: number, y: number): boolean {
        return SetCursorLocation(x, y);
    }

    /**
     * Sets whether or not ownership checks should be performed while trying to stow a carriable on a hunting wagon.
     *
     * Hash: 0x85A10FFD | Since: unknown | API-Set: client
     */
    export function setIgnoreVehicleOwnershipForStowing(ignore: boolean): void {
        SetIgnoreVehicleOwnershipForStowing(ignore);
    }

    /**
     * Activates built-in timecycle editing tool.
     *
     * Hash: 0xEEB9B76A | Since: unknown | API-Set: client
     */
    export function activateTimecycleEditor(): void {
        ActivateTimecycleEditor();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3422291C | Since: unknown | API-Set: client
     */
    export function applyWeatherCycles(numEntries: number, msPerCycle: number): boolean {
        return ApplyWeatherCycles(numEntries, msPerCycle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54D636B3 | Since: unknown | API-Set: client
     */
    export function cloneTimecycleModifier(sourceModifierName: string, clonedModifierName: string): number {
        return CloneTimecycleModifier(sourceModifierName, clonedModifierName);
    }

    /**
     * Create a clean timecycle modifier. See [`SET_TIMECYCLE_MODIFIER_VAR`](#\_0x6E0A422B) to add variables.
     *
     * Hash: 0x70FA2AFA | Since: unknown | API-Set: client
     */
    export function createTimecycleModifier(modifierName: string): number {
        return CreateTimecycleModifier(modifierName);
    }

    /**
     * Disables the game's world horizon lods rendering (see `farlods.#dd`).
     * Using the island hopper natives might also affect this state.
     *
     * Hash: 0xA9C92CDC | Since: unknown | API-Set: client
     */
    export function disableWorldhorizonRendering(state: boolean): void {
        DisableWorldhorizonRendering(state);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC53BB6D3 | Since: unknown | API-Set: client
     */
    export function doesTimecycleModifierHasVar(modifierName: string, varName: string): boolean {
        return DoesTimecycleModifierHasVar(modifierName, varName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEDA4E50 | Since: unknown | API-Set: client
     */
    export function endFindObject(findHandle: number): void {
        EndFindObject(findHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9615C2AD | Since: unknown | API-Set: client
     */
    export function endFindPed(findHandle: number): void {
        EndFindPed(findHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C407D53 | Since: unknown | API-Set: client
     */
    export function endFindPickup(findHandle: number): void {
        EndFindPickup(findHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9227415A | Since: unknown | API-Set: client
     */
    export function endFindVehicle(findHandle: number): void {
        EndFindVehicle(findHandle);
    }

    /**
     * This native is not implemented.
     *
     * Hash: 0xD2CB95A3 | Since: unknown | API-Set: client
     */
    export function experimentalLoadCloneCreate(data: string, objectId: number, tree: string): number {
        return ExperimentalLoadCloneCreate(data, objectId, tree);
    }

    /**
     * This native is not implemented.
     *
     * Hash: 0x6BC189AC | Since: unknown | API-Set: client
     */
    export function experimentalLoadCloneSync(entity: number | IEntity, data: string): void {
        ExperimentalLoadCloneSync(entity, data);
    }

    /**
     * This native is not implemented.
     *
     * Hash: 0x9D65CAD2 | Since: unknown | API-Set: client
     */
    export function experimentalSaveCloneCreate(entity: number | IEntity): string {
        return ExperimentalSaveCloneCreate(entity);
    }

    /**
     * This native is not implemented.
     *
     * Hash: 0x38D19210 | Since: unknown | API-Set: client
     */
    export function experimentalSaveCloneSync(entity: number | IEntity): string {
        return ExperimentalSaveCloneSync(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAA6CB5D | Since: unknown | API-Set: client
     */
    export function findFirstObject(): [number, number] {
        return FindFirstObject();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB012961 | Since: unknown | API-Set: client
     */
    export function findFirstPed(): [number, number] {
        return FindFirstPed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FF9D340 | Since: unknown | API-Set: client
     */
    export function findFirstPickup(): [number, number] {
        return FindFirstPickup();
    }

    /**
     * No comment provided
     *
     * Hash: 0x15E55694 | Since: unknown | API-Set: client
     */
    export function findFirstVehicle(): [number, number] {
        return FindFirstVehicle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E129DBF | Since: unknown | API-Set: client
     */
    export function findNextObject(findHandle: number): [boolean, number] {
        return FindNextObject(findHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAB09B548 | Since: unknown | API-Set: client
     */
    export function findNextPed(findHandle: number): [boolean, number] {
        return FindNextPed(findHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4107EF0F | Since: unknown | API-Set: client
     */
    export function findNextPickup(findHandle: number): [boolean, number] {
        return FindNextPickup(findHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8839120D | Since: unknown | API-Set: client
     */
    export function findNextVehicle(findHandle: number): [boolean, number] {
        return FindNextVehicle(findHandle);
    }

    /**
     * This native returns the currently used game's name.
     *
     * Hash: 0xACA18ECD | Since: unknown | API-Set: client
     */
    export function getCurrentGameName(): string {
        return GetCurrentGameName();
    }

    /**
     * Returns the peer address of the remote game server that the user is currently connected to.
     *
     * Hash: 0xEA11BFBA | Since: unknown | API-Set: client
     */
    export function getCurrentServerEndpoint(): string {
        return GetCurrentServerEndpoint();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE2A1D4D | Since: unknown | API-Set: client
     */
    export function getTimecycleModifierCount(): number {
        return GetTimecycleModifierCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F4CD0E2 | Since: unknown | API-Set: client
     */
    export function getTimecycleModifierIndexByName(modifierName: string): number {
        return GetTimecycleModifierIndexByName(modifierName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28CB8608 | Since: unknown | API-Set: client
     */
    export function getTimecycleModifierNameByIndex(modifierIndex: number): string {
        return GetTimecycleModifierNameByIndex(modifierIndex);
    }

    /**
     * A getter for [SET_TIMECYCLE_MODIFIER_STRENGTH](#\_0x82E7FFCD5B2326B3).
     *
     * Hash: 0xBE54124A | Since: unknown | API-Set: client
     */
    export function getTimecycleModifierStrength(): number {
        return GetTimecycleModifierStrength();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7109E12 | Since: unknown | API-Set: client
     */
    export function getTimecycleModifierVar(modifierName: string, varName: string): [boolean, number, number] {
        return GetTimecycleModifierVar(modifierName, varName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x60FB60FE | Since: unknown | API-Set: client
     */
    export function getTimecycleModifierVarCount(modifierName: string): number {
        return GetTimecycleModifierVarCount(modifierName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE874AB1D | Since: unknown | API-Set: client
     */
    export function getTimecycleModifierVarNameByIndex(modifierName: string, modifierVarIndex: number): string {
        return GetTimecycleModifierVarNameByIndex(modifierName, modifierVarIndex);
    }

    /**
     * Returns the amount of variables available to be applied on timecycle modifiers.
     *
     * Hash: 0x838B34D8 | Since: unknown | API-Set: client
     */
    export function getTimecycleVarCount(): number {
        return GetTimecycleVarCount();
    }

    /**
     * See [GET_TIMECYCLE_VAR_COUNT](#\_0x838B34D8).
     *
     * Hash: 0x3B90238 | Since: unknown | API-Set: client
     */
    export function getTimecycleVarDefaultValueByIndex(varIndex: number): number {
        return GetTimecycleVarDefaultValueByIndex(varIndex);
    }

    /**
     * See [GET_TIMECYCLE_VAR_COUNT](#\_0x838B34D8).
     *
     * Hash: 0xC6C55AAF | Since: unknown | API-Set: client
     */
    export function getTimecycleVarNameByIndex(varIndex: number): string {
        return GetTimecycleVarNameByIndex(varIndex);
    }

    /**
     * Converts a screen coordinate into its relative world coordinate.
     *
     * Hash: 0xC81D0659 | Since: unknown | API-Set: client
     */
    export function getWorldCoordFromScreenCoord(screenSize: Vector2): [Vector3, Vector3] {
        return GetWorldCoordFromScreenCoord(screenSize.x, screenSize.y);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36DF8612 | Since: unknown | API-Set: client
     */
    export function removeTimecycleModifier(modifierName: string): void {
        RemoveTimecycleModifier(modifierName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A5E0D05 | Since: unknown | API-Set: client
     */
    export function removeTimecycleModifierVar(modifierName: string, varName: string): void {
        RemoveTimecycleModifierVar(modifierName, varName);
    }

    /**
     * Requests a resource file set with the specified name to be downloaded and mounted on top of the current resource.
     *
     * Resource file sets are specified in `fxmanifest.lua` with the following syntax:
     *
     * ```lua
     * file_set 'addon_ui' {
     * 'ui/addon/index.html',
     * 'ui/addon\/\**.js',
     * }
     * ```
     *
     * This command will trigger a script error if the request failed.
     *
     * Hash: 0xE7490533 | Since: unknown | API-Set: client
     */
    export function requestResourceFileSet(setName: string): boolean {
        return RequestResourceFileSet(setName);
    }

    /**
     * Sends a message to the `loadingScreen` NUI frame, which contains the HTML page referenced in `loadscreen` resources.
     *
     * Hash: 0x8BBE6CC0 | Since: unknown | API-Set: client
     */
    export function sendLoadingScreenMessage(jsonString: string): boolean {
        return SendLoadingScreenMessage(jsonString);
    }

    /**
     * Toggles the visibility of resource names in the FiveM key mapping page.
     *
     * Hash: 0xCB0241B5 | Since: unknown | API-Set: client
     */
    export function setKeyMappingHideResources(hide: boolean): void {
        SetKeyMappingHideResources(hide);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7DD3209 | Since: unknown | API-Set: client
     */
    export function setSnakeoilForEntry(name: string, path: string, data: string): void {
        SetSnakeoilForEntry(name, path, data);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97B2F9F8 | Since: unknown | API-Set: client
     */
    export function setTextChatEnabled(enabled: boolean): boolean {
        return SetTextChatEnabled(enabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E0A422B | Since: unknown | API-Set: client
     */
    export function setTimecycleModifierVar(modifierName: string, varName: string, value1: number, value2: number): void {
        SetTimecycleModifierVar(modifierName, varName, value1, value2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD264D4E1 | Since: unknown | API-Set: client
     */
    export function setWeatherCycleEntry(index: number, typeName: string, timeMult: number): boolean {
        return SetWeatherCycleEntry(index, typeName, timeMult);
    }

    /**
     * Sets whether or not the weather should be owned by the network subsystem.
     *
     * To be able to use [\_SET_WEATHER_TYPE_TRANSITION](#\_0x578C752848ECFA0C), this has to be set to false.
     *
     * Hash: 0x2703D582 | Since: unknown | API-Set: client
     */
    export function setWeatherOwnedByNetwork(network: boolean): void {
        SetWeatherOwnedByNetwork(network);
    }

    /**
     * The backing function for TriggerLatentServerEvent.
     *
     * Hash: 0x128737EA | Since: unknown | API-Set: client
     */
    export function triggerLatentServerEventInternal(eventName: string, eventPayload: string, payloadLength: number, bps: number): void {
        TriggerLatentServerEventInternal(eventName, eventPayload, payloadLength, bps);
    }

    /**
     * The backing function for TriggerServerEvent.
     *
     * Hash: 0x7FDD1128 | Since: unknown | API-Set: client
     */
    export function triggerServerEventInternal(eventName: string, eventPayload: string, payloadLength: number): void {
        TriggerServerEventInternal(eventName, eventPayload, payloadLength);
    }

    /**
     * Adds a listener for Console Variable changes.
     *
     * The function called expects to match the following signature:
     *
     * ```ts
     * function ConVarChangeListener(conVarName: string, reserved: any);
     * ```
     *
     * *   **conVarName**: The ConVar that changed.
     * *   **reserved**: Currently unused.
     *
     * Hash: 0xAB7F7241 | Since: unknown | API-Set: shared
     */
    export function addConvarChangeListener(conVarFilter: string, handler: Function): number {
        return AddConvarChangeListener(conVarFilter, handler);
    }

    /**
     * Adds a handler for changes to a state bag.
     *
     * The function called expects to match the following signature:
     *
     * ```ts
     * function StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);
     * ```
     *
     * *   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`
     * or `localEntity:Handle`.
     * *   **key**: The changed key.
     * *   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.
     * *   **reserved**: Currently unused.
     * *   **replicated**: Whether the set is meant to be replicated.
     *
     * At this time, the change handler can't opt to reject changes.
     *
     * If bagName refers to an entity, use [GET_ENTITY_FROM_STATE_BAG_NAME](#\_0x4BDF1867) to get the entity handle
     * If bagName refers to a player, use [GET_PLAYER_FROM_STATE_BAG_NAME](#\_0xA56135E0) to get the player handle
     *
     * Hash: 0x5BA35AAF | Since: unknown | API-Set: shared
     */
    export function addStateBagChangeHandler(keyFilter: string, bagFilter: string, handler: Function): number {
        return AddStateBagChangeHandler(keyFilter, bagFilter, handler);
    }

    /**
     * Cancels the currently executing event.
     *
     * Hash: 0xFA29D35D | Since: unknown | API-Set: shared
     */
    export function cancelEvent(): void {
        CancelEvent();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E86F206 | Since: unknown | API-Set: shared
     */
    export function deleteFunctionReference(referenceIdentity: string): void {
        DeleteFunctionReference(referenceIdentity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF4E2079D | Since: unknown | API-Set: shared
     */
    export function duplicateFunctionReference(referenceIdentity: string): string {
        return DuplicateFunctionReference(referenceIdentity);
    }

    /**
     * Depending on your use case you may need to use `add_acl resource.<your_resource_name> command.<command_name> allow` to use this native in your resource.
     *
     * Hash: 0x561C060B | Since: unknown | API-Set: shared
     */
    export function executeCommand(commandString: string): void {
        ExecuteCommand(commandString);
    }

    /**
     * An internal function for converting a stack trace object to a string.
     *
     * Hash: 0xD70C3BCA | Since: unknown | API-Set: shared
     */
    export function formatStackTrace(traceData: number | IObject): string {
        return FormatStackTrace(traceData);
    }

    /**
     * Can be used to get a console variable of type `char*`, for example a string.
     *
     * Hash: 0x6CCD2564 | Since: unknown | API-Set: shared
     */
    export function getConvar(varName: string, default_: string): string {
        return GetConvar(varName, default_);
    }

    /**
     * Can be used to get a console variable casted back to `bool`.
     *
     * Hash: 0x7E8EBFE5 | Since: unknown | API-Set: shared
     */
    export function getConvarBool(varName: string, defaultValue: boolean): boolean {
        return GetConvarBool(varName, defaultValue);
    }

    /**
     * This will have floating point inaccuracy.
     *
     * Hash: 0x9E666D | Since: unknown | API-Set: shared
     */
    export function getConvarFloat(varName: string, defaultValue: number): number {
        return GetConvarFloat(varName, defaultValue);
    }

    /**
     * Can be used to get a console variable casted back to `int` (an integer value).
     *
     * Hash: 0x935C0AB2 | Since: unknown | API-Set: shared
     */
    export function getConvarInt(varName: string, default_: number): number {
        return GetConvarInt(varName, default_);
    }

    /**
     * Returns the internal build number of the current game being executed.
     *
     * Possible values:
     *
     * *   FiveM
     * *   1604
     * *   2060
     * *   2189
     * *   2372
     * *   2545
     * *   2612
     * *   2699
     * *   2802
     * *   2944
     * *   3095
     * *   3258
     * *   3323
     * *   3407
     * *   3570
     * *   RedM
     * *   1311
     * *   1355
     * *   1436
     * *   1491
     * *   LibertyM
     * *   43
     * *   FXServer
     * *   0
     *
     * Hash: 0x804B9F7B | Since: unknown | API-Set: shared
     */
    export function getGameBuildNumber(): number {
        return GetGameBuildNumber();
    }

    /**
     * Returns the current game being executed.
     *
     * Possible values:
     *
     * | Return value | Meaning                        |
     * | ------------ | ------------------------------ |
     * | `fxserver`   | Server-side code ('Duplicity') |
     * | `fivem`      | FiveM for GTA V                |
     * | `libertym`   | LibertyM for GTA IV            |
     * | `redm`       | RedM for Red Dead Redemption 2 |
     *
     * Hash: 0xE8EAA18B | Since: unknown | API-Set: shared
     */
    export function getGameName(): string {
        return GetGameName();
    }

    /**
     * Returns a list of entity handles (script GUID) for all entities in the specified pool - the data returned is an array as
     * follows:
     *
     * ```json
     * [ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]
     * ```
     *
     * ### Supported pools
     *
     * *   `CPed`: Peds (including animals) and players.
     * *   `CObject`: Objects (props), doors, and projectiles.
     * *   `CNetObject`: Networked objects
     * *   `CVehicle`: Vehicles.
     * *   `CPickup`: Pickups.
     *
     * Hash: 0x2B9D4F50 | Since: unknown | API-Set: shared
     */
    export function getGamePool(poolName: string): number {
        return GetGamePool(poolName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F1C4383 | Since: unknown | API-Set: shared
     */
    export function getInstanceId(): number {
        return GetInstanceId();
    }

    /**
     * Returns all commands that are registered in the command system.
     * The data returned adheres to the following layout:
     *
     * ```
     * [
     * {
     * "name": "cmdlist",
     * "resource": "resource",
     * "arity" = -1,
     * },
     * {
     * "name": "command1"
     * "resource": "resource_2",
     * "arity" = -1,
     * }
     * ]
     * ```
     *
     * Hash: 0xD4BEF069 | Since: unknown | API-Set: shared
     */
    export function getRegisteredCommands(): number {
        return GetRegisteredCommands();
    }

    /**
     * No comment provided
     *
     * Hash: 0x78D864C7 | Since: unknown | API-Set: shared
     */
    export function getStateBagKeys(bagName: string): number {
        return GetStateBagKeys(bagName);
    }

    /**
     * Returns the value of a state bag key.
     *
     * Hash: 0x637F4C75 | Since: unknown | API-Set: shared
     */
    export function getStateBagValue(bagName: string, key: string): number {
        return GetStateBagValue(bagName, key);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7EBB9929 | Since: unknown | API-Set: shared
     */
    export function isAceAllowed(_object: string): boolean {
        return IsAceAllowed(_object);
    }

    /**
     * Gets whether or not this is the CitizenFX server.
     *
     * Hash: 0xCF24C52E | Since: unknown | API-Set: shared
     */
    export function isDuplicityVersion(): boolean {
        return IsDuplicityVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0x37CF52CE | Since: unknown | API-Set: shared
     */
    export function isPrincipalAceAllowed(principal: string, _object: string): boolean {
        return IsPrincipalAceAllowed(principal, _object);
    }

    /**
     * Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.
     *
     * Commands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\_0x561C060B).
     *
     * The restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).
     *
     * **Example result**:
     *
     * ![](https://i.imgur.com/TaCnG09.png)
     *
     * Hash: 0x5FA79B0F | Since: unknown | API-Set: shared
     */
    export function registerCommand(commandName: string, handler: Function, restricted: boolean): void {
        RegisterCommand(commandName, handler, restricted);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAC49841 | Since: unknown | API-Set: shared
     */
    export function removeConvarChangeListener(cookie: number): void {
        RemoveConvarChangeListener(cookie);
    }

    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Removes a handler for changes to a state bag.
     *
     * Hash: 0xD36BE661 | Since: unknown | API-Set: shared
     */
    export function removeStateBagChangeHandler(cookie: number): void {
        RemoveStateBagChangeHandler(cookie);
    }

    /**
     * Internal function for setting a state bag value.
     *
     * Hash: 0x8D50E33A | Since: unknown | API-Set: shared
     */
    export function setStateBagValue(bagName: string, keyName: string, valueData: string, valueLength: number, replicated: boolean): void {
        SetStateBagValue(bagName, keyName, valueData, valueLength, replicated);
    }

    /**
     * No comment provided
     *
     * Hash: 0x12A330 | Since: unknown | API-Set: shared
     */
    export function stateBagHasKey(bagName: string, key: string): boolean {
        return StateBagHasKey(bagName, key);
    }

    /**
     * The backing function for TriggerEvent.
     *
     * Hash: 0x91310870 | Since: unknown | API-Set: shared
     */
    export function triggerEventInternal(eventName: string, eventPayload: string, payloadLength: number): void {
        TriggerEventInternal(eventName, eventPayload, payloadLength);
    }

    /**
     * Returns whether or not the currently executing event was canceled.
     *
     * Hash: 0x58382A19 | Since: unknown | API-Set: shared
     */
    export function wasEventCanceled(): boolean {
        return WasEventCanceled();
    }

    /**
     * No comment provided
     *
     * Hash: 0x73D57CFFDD12C355 | Since: 323 | API-Set: unknown
     */
    export function absf(value: number): number {
        return Absf(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF0D31AD191A74F87 | Since: 323 | API-Set: unknown
     */
    export function absi(value: number): number {
        return Absi(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D08B970013C34B6 | Since: 323 | API-Set: unknown
     */
    export function acos(): number {
        return Acos(0);
    }

    /**
     * Appears to remove stealth kill action from memory
     *
     * Hash: 0xA6A12939F16D85BE | Since: 323 | API-Set: unknown
     */
    export function actionManagerEnableAction(hash: number | string, enable: boolean): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        RemoveStealthKill(hash, enable);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0xEB078CA2B5E82ADD | Since: 323 | API-Set: unknown
     */
    export function activityFeedActionStartWithCommandLine(): void {
        Citizen.invokeNative('0xEB078CA2B5E82ADD', undefined, undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x703CC7F60CBB2B57 | Since: 323 | API-Set: unknown
     */
    export function activityFeedActionStartWithCommandLineAdd(): void {
        Citizen.invokeNative('0x703CC7F60CBB2B57', undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x97E7E2C04245115B | Since: 323 | API-Set: unknown
     */
    export function activityFeedAddIntToCaption(): void {
        Citizen.invokeNative('0x97E7E2C04245115B', undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0xEBD3205A207939ED | Since: 323 | API-Set: unknown
     */
    export function activityFeedAddLiteralSubstringToCaption(): void {
        Citizen.invokeNative('0xEBD3205A207939ED', undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x31125FD509D9043F | Since: 323 | API-Set: unknown
     */
    export function activityFeedAddSubstringToCaption(): void {
        Citizen.invokeNative('0x31125FD509D9043F', undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x4DCDF92BF64236CD | Since: 323 | API-Set: unknown
     */
    export function activityFeedCreate(): void {
        ActivityFeedCreate(undefined, undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x916CA67D26FD1E37 | Since: 2060 | API-Set: unknown
     */
    export function activityFeedLargeImageUrl(): void {
        Citizen.invokeNative('0x916CA67D26FD1E37', undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"
     *
     * Hash: 0xBA4B8D83BDC75551 | Since: 323 | API-Set: unknown
     */
    export function activityFeedOnlinePlayedWithPost(): void {
        Citizen.invokeNative('0xBA4B8D83BDC75551', undefined);
    }

    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x8951EB9C6906D3C8 | Since: 323 | API-Set: unknown
     */
    export function activityFeedPost(): void {
        Citizen.invokeNative('0x8951EB9C6906D3C8');
    }

    /**
     * To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x918C7B2D2FF3928B | Since: 323 | API-Set: unknown
     */
    export function addDispatchSpawnAngledBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number {
        return AddDispatchSpawnBlockingAngledArea(x1, y1, z1, x2, y2, z2, width);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D4259F1FEB81DA9 | Since: 323 | API-Set: unknown
     */
    export function addDispatchSpawnSphereBlockingArea(x1: number, y1: number, x2: number, y2: number): number {
        return AddDispatchSpawnBlockingArea(x1, y1, x2, y2);
    }

    /**
     * Returns the index of the newly created hospital spawn point.
     *
     * p3 might be radius?
     *
     * Hash: 0x1F464EF988465A81 | Since: 323 | API-Set: unknown
     */
    export function addHospitalRestart(pos: Vector3): number {
        return AddHospitalRestart(pos.x, pos.y, pos.z, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x452736765B31FC4B | Since: 323 | API-Set: unknown
     */
    export function addPoliceRestart(): number {
        return AddPoliceRestart(0, 0, 0, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x67F6413D3220E18D | Since: 323 | API-Set: unknown
     */
    export function addPopMultiplierArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return AddPopMultiplierArea(x1, y1, z1, x2, y2, z2, 0, 0, false, false);
    }

    /**
     * This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
     *
     * Hash: 0x32C7A7E8C43A1F80 | Since: 323 | API-Set: unknown
     */
    export function addPopMultiplierSphere(pos: Vector3, radius: number, pedMultiplier: number, vehicleMultiplier: number): number {
        return AddPopMultiplierSphere(pos.x, pos.y, pos.z, radius, pedMultiplier, vehicleMultiplier, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69FE6DC87BD2A5E9 | Since: 323 | API-Set: unknown
     */
    export function addReplayStatValue(value: any): void {
        AddReplayStatValue(value);
    }

    /**
     * See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
     *
     * Hash: 0x1A992DA297A4630C | Since: 323 | API-Set: unknown
     */
    export function addStuntJump(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, camX: number, camY: number, camZ: number): number {
        return AddStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, 0, 0, 0);
    }

    /**
     * Creates a new stunt jump.
     *
     * The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.
     *
     * Info about the specific 'parameter sections':
     *
     *
     * <strong>x1, y1, z1, x2, y2, z2 and radius1:</strong>
     *
     * First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
     *
     *
     * <strong>x3, y3, z3, x4, y4, z4 and radius2:</strong>
     *
     * Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
     *
     *
     * <strong>camX, camY and camZ:</strong>
     *
     * The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
     *
     *
     * <strong>unk1, unk2 and unk3:</strong>
     *
     * Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
     *
     * Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
     *
     * Hash: 0xBBE5D803A5360CBF | Since: 323 | API-Set: unknown
     */
    export function addStuntJumpAngled(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius1: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, radius2: number, camX: number, camY: number, camZ: number): number {
        return AddStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8721407EE9C3FF6 | Since: 323 | API-Set: unknown
     */
    export function addTacticalNavMeshPoint(pos: Vector3): void {
        AddTacticalAnalysisPoint(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEA36202FC3382DF | Since: 323 | API-Set: unknown
     */
    export function allowMissionCreatorWarp(toggle: boolean): void {
        AllowMissionCreatorWarp(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD19C0826DC20CF1C | Since: 2802 | API-Set: unknown
     */
    export function areCreditsRunning(): boolean {
        return Citizen.invokeNative('0xD19C0826DC20CF1C');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5AA3BEFA29F03AD4 | Since: 323 | API-Set: unknown
     */
    export function areProfileSettingsValid(): boolean {
        return AreProfileSettingsValid();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C515FAB3FF9EA92 | Since: 323 | API-Set: unknown
     */
    export function areStringsEqual(string1: string, string2: string): boolean {
        return AreStringsEqual(string1, string2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC843060B5765DCE7 | Since: 323 | API-Set: unknown
     */
    export function asin(): number {
        return Asin(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9D1795CD5043663 | Since: 323 | API-Set: unknown
     */
    export function atan(): number {
        return Atan(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8927CBF9D22261A4 | Since: 323 | API-Set: unknown
     */
    export function atan2(): number {
        return Atan2(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0E500246FF73D66 | Since: 323 | API-Set: unknown
     */
    export function beginReplayStats(): void {
        BeginReplayStats(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B2BD3773123EA2F | Since: 323 | API-Set: unknown
     */
    export function blockDispatchServiceResourceCreation(dispatchService: number, toggle: boolean): void {
        BlockDispatchServiceResourceCreation(dispatchService, toggle);
    }

    /**
     * DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
     * Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
     *
     * Hash: 0x58A39BE597CE99CD | Since: 757 | API-Set: unknown
     */
    export function cancelOnscreenKeyboard(): void {
        CancelOnscreenKeyboard();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6B7B0ACD4E4B75E | Since: 323 | API-Set: unknown
     */
    export function cancelStuntJump(): void {
        CancelStuntJump();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC79AE21974B01FB2 | Since: 323 | API-Set: unknown
     */
    export function cleanupAsyncInstall(): void {
        CleanupAsyncInstall();
    }

    /**
     * No comment provided
     *
     * Hash: 0x11DB3500F042A8AA | Since: 323 | API-Set: unknown
     */
    export function clearAngledAreaOfVehicles(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): void {
        ClearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width, false, false, false, false, false, undefined, undefined);
    }

    /**
     * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
     *
     * Hash: 0xA56F01F3765B93A0 | Since: 323 | API-Set: unknown
     */
    export function clearArea(pos: Vector3, radius: number, ignoreCopCars: boolean, ignoreObjects: boolean): void {
        ClearArea(pos.x, pos.y, pos.z, radius, false, ignoreCopCars, ignoreObjects, false);
    }

    /**
     * `MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.`
     *
     * Hash: 0x957838AAF91BD12D | Since: 323 | API-Set: unknown
     */
    export function clearAreaLeaveVehicleHealth(pos: Vector3, radius: number): void {
        ClearAreaLeaveVehicleHealth(pos.x, pos.y, pos.z, radius, false, false, false, false);
    }

    /**
     * flags appears to always be 0
     *
     * Hash: 0x04F8FC8FCF58F88D | Since: 323 | API-Set: unknown
     */
    export function clearAreaOfCops(pos: Vector3, radius: number, flags: number): void {
        ClearAreaOfCops(pos.x, pos.y, pos.z, radius, flags);
    }

    /**
     * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
     *
     * Hash: 0xDD9B9B385AAC7F5B | Since: 323 | API-Set: unknown
     */
    export function clearAreaOfObjects(pos: Vector3, radius: number, flags: number): void {
        ClearAreaOfObjects(pos.x, pos.y, pos.z, radius, flags);
    }

    /**
     * Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
     *
     * Hash: 0xBE31FD6CE464AC59 | Since: 323 | API-Set: unknown
     */
    export function clearAreaOfPeds(pos: Vector3, radius: number, flags: number): void {
        ClearAreaOfPeds(pos.x, pos.y, pos.z, radius, flags);
    }

    /**
     * flags is usually 0 in the scripts.
     *
     * Hash: 0x0A1CB9094635D1A6 | Since: 323 | API-Set: unknown
     */
    export function clearAreaOfProjectiles(pos: Vector3, radius: number, flags: number): void {
        ClearAreaOfProjectiles(pos.x, pos.y, pos.z, radius, flags);
    }

    /**
     * Example:
     * CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
     *
     * Hash: 0x01C7B9B38428AEB6 | Since: 323 | API-Set: unknown
     */
    export function clearAreaOfVehicles(pos: Vector3, radius: number): void {
        ClearAreaOfVehicles(pos.x, pos.y, pos.z, radius, false, false, false, false, false, false, undefined);
    }

    /**
     * This sets bit [offset] of [address] to off.
     *
     * Example:
     * `MISC::CLEAR_BIT(&bitAddress, 1);`
     *
     * To check if this bit has been enabled:
     * `MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards`
     *
     * Hash: 0xE80492A9AC099A93 | Since: 323 | API-Set: unknown
     */
    export function clearBit(offset: number): number {
        return ClearBit(offset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06462A961E94B67C | Since: 323 | API-Set: unknown
     */
    export function clearCodeRequestedAutosave(): void {
        Citizen.invokeNative('0x06462A961E94B67C');
    }

    /**
     * No comment provided
     *
     * Hash: 0x338D2E3477711050 | Since: 323 | API-Set: unknown
     */
    export function clearOverrideWeather(): void {
        ClearOverrideWeather();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B1AB132A16FDA55 | Since: 323 | API-Set: unknown
     */
    export function clearReplayStats(): void {
        ClearReplayStats();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2716D40842EAF79 | Since: 323 | API-Set: unknown
     */
    export function clearRestartCoordOverride(): void {
        ClearRestartCustomPosition();
    }

    /**
     * Possibly used to clear scenario points.
     *
     * Hash: 0x7EC6F9A478A6A512 | Since: 323 | API-Set: unknown
     */
    export function clearScenarioSpawnHistory(): void {
        Citizen.invokeNative('0x7EC6F9A478A6A512');
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3CD58CCA6CDA852 | Since: 323 | API-Set: unknown
     */
    export function clearTacticalNavMeshPoints(): void {
        ClearTacticalAnalysisPoints();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0CF97F497FE7D048 | Since: 1103 | API-Set: unknown
     */
    export function clearWeatherTypeNowPersistNetwork(milliseconds: number): void {
        ClearWeatherTypeNowPersistNetwork(milliseconds);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCC39339BEF76CF5 | Since: 323 | API-Set: unknown
     */
    export function clearWeatherTypePersist(): void {
        ClearWeatherTypePersist();
    }

    /**
     * Compares two strings up to a specified number of characters.
     *
     * Parameters:
     * str1 - String to be compared.
     * str2 - String to be compared.
     * matchCase - Comparison will be case-sensitive.
     * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
     *
     * Returns:
     * A value indicating the relationship between the strings:
     * <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
     * 0 - The contents of both strings are equal.
     * >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
     *
     * Examples:
     * `MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal`
     * `MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal`
     * `MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal`
     * `MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'`
     * `MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal`
     *
     * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
     * `MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'`
     * `MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'`
     *
     * Hash: 0x1E34710ECD4AB0EB | Since: 323 | API-Set: unknown
     */
    export function compareStrings(str1: string, str2: string, matchCase: boolean, maxLength: number): number {
        return CompareStrings(str1, str2, matchCase, maxLength);
    }

    /**
     * No comment provided
     *
     * Hash: 0x213AEB2B90CBA7AC | Since: 877 | API-Set: unknown
     */
    export function copyScriptStruct(size: number): [any, any] {
        return CopyMemory(size);
    }

    /**
     * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
     *
     * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
     *
     * Side Note 2: I say it breaks as if you call this proper,
     * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
     * =====================================================
     *
     * Hash: 0x3F892CAF67444AE7 | Since: 323 | API-Set: unknown
     */
    export function createIncident(dispatchService: number, pos: Vector3, numUnits: number, radius: number): [boolean, number] {
        return CreateIncident(dispatchService, pos.x, pos.y, pos.z, numUnits, radius, undefined, undefined);
    }

    /**
     * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
     *
     * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
     *
     * Side Note 2: I say it breaks as if you call this proper,
     * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
     * =====================================================
     *
     * Hash: 0x05983472F0494E60 | Since: 323 | API-Set: unknown
     */
    export function createIncidentWithEntity(dispatchService: number, ped: number | IPed, numUnits: number, radius: number): [boolean, number] {
        return CreateIncidentWithEntity(dispatchService, ped, numUnits, radius, undefined, undefined);
    }

    /**
     * Delete an incident with a given id.
     *
     * =======================================================
     * Correction, I have change this to int, instead of int*
     * as it doesn't use a pointer to the createdIncident.
     * If you try it you will crash (or) freeze.
     * =======================================================
     *
     * Hash: 0x556C1AA270D5A207 | Since: 323 | API-Set: unknown
     */
    export function deleteIncident(incidentId: number): void {
        DeleteIncident(incidentId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC518000E39DAE1F | Since: 323 | API-Set: unknown
     */
    export function deleteStuntJump(): void {
        DeleteStuntJump(0);
    }

    /**
     * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
     *
     * Hash: 0xC8535819C450EBA8 | Since: 323 | API-Set: unknown
     */
    export function disableHospitalRestart(hospitalIndex: number, toggle: boolean): void {
        DisableHospitalRestart(hospitalIndex, toggle);
    }

    /**
     * Disables the spawn point at the police house on the specified index.
     *
     * policeIndex: The police house index.
     * toggle: true to enable the spawn point, false to disable.
     *
     * - Nacorpio
     *
     * Hash: 0x23285DED6EBD7EA3 | Since: 323 | API-Set: unknown
     */
    export function disablePoliceRestart(policeIndex: number, toggle: boolean): void {
        DisablePoliceRestart(policeIndex, toggle);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x23227DF0B2115469 | Since: 323 | API-Set: unknown
     */
    export function disableScreenDimmingThisFrame(): void {
        Citizen.invokeNative('0x23227DF0B2115469');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA5272EBEDD4747F6 | Since: 323 | API-Set: unknown
     */
    export function disableStuntJumpSet(): void {
        DisableStuntJumpSet(0);
    }

    /**
     * `sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.`
     *
     * NOTE: windowTitle uses text labels, and an invalid value will display nothing.
     *
     * www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
     *
     * windowTitle's
     * -----------------
     * CELL_EMAIL_BOD  =   "Enter your Eyefind message"
     * CELL_EMAIL_BODE =   "Message too long. Try again"
     * CELL_EMAIL_BODF    =   "Forbidden message. Try again"
     * CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
     * CELL_EMAIL_SODE =   "Subject too long. Try again"
     * CELL_EMAIL_SODF    =   "Forbidden text. Try again"
     * CELL_EMASH_BOD   =   "Enter your Eyefind message"
     * CELL_EMASH_BODE =   "Message too long. Try again"
     * CELL_EMASH_BODF    =   "Forbidden message. Try again"
     * CELL_EMASH_SOD    =   "Enter your Eyefind subject"
     * CELL_EMASH_SODE =   "Subject too long. Try again"
     * CELL_EMASH_SODF    =   "Forbidden Text. Try again"
     * FMMC_KEY_TIP10   =   "Enter Synopsis"
     * FMMC_KEY_TIP12  =   "Enter Custom Team Name"
     * FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
     * FMMC_KEY_TIP12N  =   "Custom Team Name"
     * FMMC_KEY_TIP8 =   "Enter Message"
     * FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
     * FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
     * FMMC_KEY_TIP8S  =   "Enter Message"
     * FMMC_KEY_TIP9    =   "Enter Outfit Name"
     * FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
     * FMMC_KEY_TIP9N  =   "Outfit Name"
     * PM_NAME_CHALL  =   "Enter Challenge Name"
     *
     * Hash: 0x00DC833F2568DBF6 | Since: 323 | API-Set: unknown
     */
    export function displayOnscreenKeyboard(windowTitle: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, maxInputLength: number): void {
        DisplayOnscreenKeyboard(0, windowTitle, undefined, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA78CFA0366592FE | Since: 323 | API-Set: unknown
     */
    export function displayOnscreenKeyboardWithLongerInitialString(windowTitle: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, defaultConcat4: string, defaultConcat5: string, defaultConcat6: string, defaultConcat7: string, maxInputLength: number): any {
        return DisplayOnscreenKeyboardWithLongerInitialString(0, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1327E2FE9746BAEE | Since: 323 | API-Set: unknown
     */
    export function doesPopMultiplierAreaExist(id: number): boolean {
        return DoesPopMultiplierAreaExist(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x171BAFB3C60389F4 | Since: 791 | API-Set: unknown
     */
    export function doesPopMultiplierSphereExist(id: number): boolean {
        return DoesPopMultiplierSphereExist(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50EEAAD86232EE55 | Since: 323 | API-Set: unknown
     */
    export function doAutoSave(): void {
        DoAutoSave();
    }

    /**
     * https://alloc8or.re/gta5/doc/enums/DispatchType.txt
     *
     * Hash: 0xDC0F817884CDD856 | Since: 323 | API-Set: unknown
     */
    export function enableDispatchService(dispatchService: number, toggle: boolean): void {
        EnableDispatchService(dispatchService, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE369A5783B866016 | Since: 323 | API-Set: unknown
     */
    export function enableStuntJumpSet(): void {
        EnableStuntJumpSet(0);
    }

    /**
     * Makes the ped jump around like they're in a tennis match
     *
     * Hash: 0x28A04B411933F8A6 | Since: 323 | API-Set: unknown
     */
    export function enableTennisMode(ped: number | IPed, toggle: boolean): void {
        EnableTennisMode(ped, toggle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA23E821FBDF8A5F2 | Since: 323 | API-Set: unknown
     */
    export function endReplayStats(): void {
        EndReplayStats();
    }

    /**
     * Finds a position ahead of the player by predicting the players next actions.
     * The positions match path finding node positions.
     * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
     *
     * Hash: 0x6874E2190B0C1972 | Since: 323 | API-Set: unknown
     */
    export function findSpawnPointInDirection(pos: Vector3, fwdVecX: number, fwdVecY: number, fwdVecZ: number, distance: number): [boolean, Vector3] {
        return FindSpawnPointInDirection(pos.x, pos.y, pos.z, fwdVecX, fwdVecY, fwdVecZ, distance);
    }

    /**
     * Sets the localplayer playerinfo state back to playing (State 0)
     *
     * States are:
     * -1: "Invalid"
     * 0: "Playing"
     * 1: "Died"
     * 2: "Arrested"
     * 3: "Failed Mission"
     * 4: "Left Game"
     * 5: "Respawn"
     * 6: "In MP Cutscene"
     *
     * Hash: 0xC0AA53F866B3134D | Since: 323 | API-Set: unknown
     */
    export function forceGameStatePlaying(): void {
        ForceGameStatePlaying();
    }

    /**
     * creates single lightning+thunder at random position
     *
     * Hash: 0xF6062E089251C898 | Since: 323 | API-Set: unknown
     */
    export function forceLightningFlash(): void {
        ForceLightningFlash();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B3CA62B1EF19B62 | Since: 323 | API-Set: unknown
     */
    export function getAllocatedStackSize(): number {
        return GetAllocatedStackSize();
    }

    /**
     * No comment provided
     *
     * Hash: 0x186FC4BE848E1C92 | Since: 323 | API-Set: unknown
     */
    export function getAngleBetween2dVectors(x1: number, y1: number, x2: number, y2: number): number {
        return GetAngleBetween2dVectors(x1, y1, x2, y2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB335F761606DB47C | Since: 323 | API-Set: unknown
     */
    export function getBaseElementLocationFromMetadataBlock(): [boolean, any, any] {
        return GetBaseElementMetadata(undefined, false);
    }

    /**
     * Returns value of the '-benchmarkIterations' command line option.
     *
     * Hash: 0x4750FC27570311EC | Since: 323 | API-Set: unknown
     */
    export function getBenchmarkIterations(): number {
        return GetBenchmarkIterationsFromCommandLine();
    }

    /**
     * Returns value of the '-benchmarkPass' command line option.
     *
     * Hash: 0x1B2366C3F2A5C8DF | Since: 323 | API-Set: unknown
     */
    export function getBenchmarkPass(): number {
        return GetBenchmarkPassFromCommandLine();
    }

    /**
     * No comment provided
     *
     * Hash: 0x53158863FCC0893A | Since: 323 | API-Set: unknown
     */
    export function getBitsInRange(_var: number, rangeStart: number, rangeEnd: number): number {
        return GetBitsInRange(_var, rangeStart, rangeEnd);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD10282B6E3751BA0 | Since: 323 | API-Set: unknown
     */
    export function getCityDensity(): number {
        return Citizen.invokeNative('0xD10282B6E3751BA0');
    }

    /**
     * clamp: sets whether the product should be clamped between the given coordinates
     *
     * Hash: 0x21C235BC64831E5A | Since: 323 | API-Set: unknown
     */
    export function getClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): Vector3 {
        return new Vector3(Citizen.invokeNative('0x21C235BC64831E5A', x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp));
    }

    /**
     * No comment provided
     *
     * Hash: 0x20AC25E781AE4A84 | Since: 323 | API-Set: unknown
     */
    export function getCloudsAlpha(): number {
        return GetCloudHatOpacity();
    }

    /**
     * No comment provided
     *
     * Hash: 0xECF041186C5A94DC | Since: 2612 | API-Set: unknown
     */
    export function getContentIdIndex(contentId: number | string): number {
        if (typeof contentId === 'string') contentId = misc.getHashKey(contentId)
        return Citizen.invokeNative('0xECF041186C5A94DC', contentId);
    }

    /**
     * Returns pointer to an empty string.
     *
     * Hash: 0x24DA7D7667FD7B09 | Since: 323 | API-Set: unknown
     */
    export function getContentToLoad(): string {
        return GetGlobalCharBuffer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DA8C28346B62CED | Since: 2802 | API-Set: unknown
     */
    export function getCoordsOfProjectileTypeInAngledArea(vecAngledAreaPoint1X: number, vecAngledAreaPoint1Y: number, vecAngledAreaPoint1Z: number, vecAngledAreaPoint2X: number, vecAngledAreaPoint2Y: number, vecAngledAreaPoint2Z: number, distanceOfOppositeFace: number, weaponType: number | string, bIsPlayer: boolean): [boolean, Vector3] {
        if (typeof weaponType === 'string') weaponType = misc.getHashKey(weaponType)
        return Citizen.invokeNative('0x3DA8C28346B62CED', vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace, weaponType, bIsPlayer);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D7A43EC6A5FEA45 | Since: 323 | API-Set: unknown
     */
    export function getCoordsOfProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, projectileHash: number | string, ownedByPlayer: boolean): [boolean, Vector3] {
        if (typeof projectileHash === 'string') projectileHash = misc.getHashKey(projectileHash)
        return GetCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFB4138EEFED7B81 | Since: 323 | API-Set: unknown
     */
    export function getCoordsOfProjectileTypeWithinDistance(ped: number | IPed, weaponHash: number | string, distance: number): [boolean, Vector3] {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3BBE884A14BB413 | Since: 323 | API-Set: unknown
     */
    export function getCurrWeatherState(): [number, number, number] {
        return GetWeatherTypeTransition();
    }

    /**
     * Returns the distance between two three-dimensional points, optionally ignoring the Z values.
     * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
     *
     * `Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.`
     *
     * Hash: 0xF1B760881820C952 | Since: 323 | API-Set: unknown
     */
    export function getDistanceBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, useZ: boolean): number {
        return GetDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C9296CBCD1B971E | Since: 323 | API-Set: unknown
     */
    export function getFakeWantedLevel(): number {
        return GetFakeWantedLevel();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC8202EFC642E6F2 | Since: 323 | API-Set: unknown
     */
    export function getFrameCount(): number {
        return GetFrameCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x15C40837039FFAF7 | Since: 323 | API-Set: unknown
     */
    export function getFrameTime(): number {
        return GetFrameTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9CD27B0045628463 | Since: 323 | API-Set: unknown
     */
    export function getGameTimer(): number {
        return GetGameTimer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8BDC7BFC57A81E76 | Since: 323 | API-Set: unknown
     */
    export function getGroundZAndNormalFor3dCoord(pos: Vector3): [boolean, number, Vector3] {
        return GetGroundZAndNormalFor3dCoord(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E82F0F362881B29 | Since: 505 | API-Set: unknown
     */
    export function getGroundZExcludingObjectsFor3dCoord(pos: Vector3): [boolean, number] {
        return GetGroundZExcludingObjectsFor3dCoord(pos.x, pos.y, pos.z, false, false);
    }

    /**
     * Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
     *
     * x: Position on the X-axis to get ground elevation at.
     * y: Position on the Y-axis to get ground elevation at.
     * z: Position on the Z-axis to get ground elevation at.
     * groundZ: The ground elevation at the specified position.
     * ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket
     *
     * Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
     *
     * Hash: 0xC906A7DAB05C8D2B | Since: 323 | API-Set: unknown
     */
    export function getGroundZFor3dCoord(pos: Vector3, ignoreWater: boolean): [boolean, number] {
        return GetGroundZFor3dCoord(pos.x, pos.y, pos.z, ignoreWater, false);
    }

    /**
     * This native converts its past string to hash. It is hashed using jenkins one at a time method.
     *
     * Hash: 0xD24D37CC275948CC | Since: 323 | API-Set: unknown
     */
    export function getHashKey(_string: string): number {
        return GetHashKey(_string);
    }

    /**
     * dx = x1 - x2
     * dy = y1 - y2
     *
     * Hash: 0x2FFB6B224F4B2926 | Since: 323 | API-Set: unknown
     */
    export function getHeadingFromVector2d(dx: number, dy: number): number {
        return GetHeadingFromVector2d(dx, dy);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCBAD6729F7B1F4FC | Since: 323 | API-Set: unknown
     */
    export function getIndexOfCurrentLevel(): number {
        return GetIndexOfCurrentLevel();
    }

    /**
     * Returns true if profile setting 208 is equal to 0.
     *
     * Hash: 0x6E04F06094C87047 | Since: 323 | API-Set: unknown
     */
    export function getIsAutoSaveOff(): boolean {
        return GetIsAutoSaveOff();
    }

    /**
     * Although we don't have a jenkins hash for this one, the name is 100% confirmed.
     *
     * Hash: 0x9689123E3F213AA5 | Since: 323 | API-Set: unknown
     */
    export function getIsPlayerInAnimalForm(): boolean {
        return GetIsPlayerInAnimalForm();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF56DFB7B61BE7276 | Since: 323 | API-Set: unknown
     */
    export function getLinePlaneIntersection(): [boolean, number] {
        return GetLinePlaneIntersection(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA33CDCCDA663159E | Since: 323 | API-Set: unknown
     */
    export function getMissionFlag(): boolean {
        return GetMissionFlag();
    }

    /**
     * Gets the dimensions of a model.
     *
     * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
     *
     * `Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);`
     *
     * Hash: 0x03E8D3D5F549087A | Since: 323 | API-Set: unknown
     */
    export function getModelDimensions(modelHash: number | string): [Vector3, Vector3] {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetModelDimensions(modelHash);
    }

    /**
     * Returns weather name hash
     *
     * Hash: 0x711327CD09C8F162 | Since: 323 | API-Set: unknown
     */
    export function getNextWeatherTypeHashName(): number {
        return GetNextWeatherTypeHashName();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFEAD16FC8F9DFC0F | Since: 323 | API-Set: unknown
     */
    export function getNumberOfFreeStacksOfThisSize(stackSize: number): number {
        return GetNumberOfFreeStacksOfThisSize(stackSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB4A0C2D56441717 | Since: 323 | API-Set: unknown
     */
    export function getNumberResourcesAllocatedToWantedLevel(dispatchService: number): number {
        return GetNumDispatchedUnitsForPlayer(dispatchService);
    }

    /**
     * No comment provided
     *
     * Hash: 0x996DD1E1E02F1008 | Since: 323 | API-Set: unknown
     */
    export function getNumSuccessfulStuntJumps(): number {
        return GetNumSuccessfulStuntJumps();
    }

    /**
     * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
     *
     * Hash: 0x8362B09B91893647 | Since: 323 | API-Set: unknown
     */
    export function getOnscreenKeyboardResult(): string {
        return GetOnscreenKeyboardResult();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0AD167E4B39D9A2 | Since: 2189 | API-Set: unknown
     */
    export function getPointAreaOverlap(): boolean {
        return Citizen.invokeNative('0xA0AD167E4B39D9A2', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * Returns current weather name hash
     *
     * Hash: 0x564B884A05EC45A3 | Since: 323 | API-Set: unknown
     */
    export function getPrevWeatherTypeHashName(): number {
        return GetPrevWeatherTypeHashName();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC488FF2356EA7791 | Since: 323 | API-Set: unknown
     */
    export function getProfileSetting(profileSetting: number): number {
        return GetProfileSetting(profileSetting);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82FDE6A57EE4EE44 | Since: 323 | API-Set: unknown
     */
    export function getProjectileOfProjectileTypeWithinDistance(ped: number | IPed, weaponHash: number | string, distance: number): [boolean, Vector3, number] {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetProjectileNearPed(ped, weaponHash, distance, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x96695E368AD855F3 | Since: 323 | API-Set: unknown
     */
    export function getRainLevel(): number {
        return GetRainLevel();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2D57F1D764117B1 | Since: 323 | API-Set: unknown
     */
    export function getRandomEventFlag(): boolean {
        return GetRandomEventFlag();
    }

    /**
     * No comment provided
     *
     * Hash: 0x313CE5879CEB6FCD | Since: 323 | API-Set: unknown
     */
    export function getRandomFloatInRange(startRange: number, endRange: number): number {
        return GetRandomFloatInRange(startRange, endRange);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD53343AA4FB7DD28 | Since: 323 | API-Set: unknown
     */
    export function getRandomIntInRange(startRange: number, endRange: number): number {
        return GetRandomIntInRange(startRange, endRange);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2D49816A804D134 | Since: 1734 | API-Set: unknown
     */
    export function getRandomMwcIntInRange(startRange: number, endRange: number): number {
        return GetRandomIntInRange2(startRange, endRange);
    }

    /**
     * returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
     *
     * Hash: 0x7F8F6405F4777AF6 | Since: 323 | API-Set: unknown
     */
    export function getRatioOfClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): number {
        return Citizen.invokeNative('0x7F8F6405F4777AF6', x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
    }

    /**
     * GET_GAME_TIMER() / 1000
     *
     * Hash: 0x3F60413F5DF65748 | Since: 2612 | API-Set: unknown
     */
    export function getRealWorldTime(): number {
        return Citizen.invokeNative('0x3F60413F5DF65748');
    }

    /**
     * No comment provided
     *
     * Hash: 0x8098C8D6597AAE18 | Since: 323 | API-Set: unknown
     */
    export function getReplayStatAtIndex(index: number): number {
        return GetReplayStatAtIndex(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC9274A7EF6B2867 | Since: 323 | API-Set: unknown
     */
    export function getReplayStatCount(): number {
        return GetReplayStatCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B1F2E327B6B6FE1 | Since: 323 | API-Set: unknown
     */
    export function getReplayStatMissionId(): number {
        return Citizen.invokeNative('0x5B1F2E327B6B6FE1');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B626A0150E4D449 | Since: 323 | API-Set: unknown
     */
    export function getReplayStatMissionType(): number {
        return GetReplayStatMissionType();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA4A0065E39C9F25C | Since: 323 | API-Set: unknown
     */
    export function getSaveHouseDetailsAfterSuccessfulLoad(): [boolean, Vector3, number, boolean, boolean] {
        return Citizen.invokeNative('0xA4A0065E39C9F25C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA09F896CE912481F | Since: 323 | API-Set: unknown
     */
    export function getSizeOfSaveData(): number {
        return GetSizeOfSaveData(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5868A966E5BE3AE | Since: 323 | API-Set: unknown
     */
    export function getSnowLevel(): number {
        return GetSnowLevel();
    }

    /**
     * No comment provided
     *
     * Hash: 0x397BAA01068BAA96 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfManualSave(): number {
        return Citizen.invokeNative('0x397BAA01068BAA96');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B5E102E4A42F2BF | Since: 323 | API-Set: unknown
     */
    export function getStatusOfMissionRepeatSave(): number {
        return GetStatusOfMissionRepeatSave();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE599A503B3837E1B | Since: 323 | API-Set: unknown
     */
    export function getSystemTimeStep(): number {
        return GetBenchmarkTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0x19BFED045C647C49 | Since: 323 | API-Set: unknown
     */
    export function getTennisSwingAnimCanBeInterrupted(ped: number | IPed): boolean {
        return Citizen.invokeNative('0x19BFED045C647C49', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x17DF68D720AA77F8 | Since: 323 | API-Set: unknown
     */
    export function getTennisSwingAnimComplete(ped: number | IPed): boolean {
        return GetTennisSwingAnimComplete(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE95B0C7D5BA3B96B | Since: 323 | API-Set: unknown
     */
    export function getTennisSwingAnimSwung(ped: number | IPed): boolean {
        return Citizen.invokeNative('0xE95B0C7D5BA3B96B', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6856EC3D35C81EA4 | Since: 323 | API-Set: unknown
     */
    export function getTotalSuccessfulStuntJumps(): number {
        return GetTotalSuccessfulStuntJumps();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F400FEF721170DA | Since: 323 | API-Set: unknown
     */
    export function getWindDirection(): Vector3 {
        return new Vector3(GetWindDirection());
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8CF1CC0AFCD3F12 | Since: 323 | API-Set: unknown
     */
    export function getWindSpeed(): number {
        return GetWindSpeed();
    }

    /**
     * Hardcoded to always return true.
     *
     * Hash: 0x14832BF2ABA53FC5 | Since: 323 | API-Set: unknown
     */
    export function hasAsyncInstallFinished(): boolean {
        return HasAsyncInstallFinished();
    }

    /**
     * p3 - possibly radius?
     *
     * Hash: 0x9870ACFB89A90995 | Since: 323 | API-Set: unknown
     */
    export function hasBulletImpactedInArea(pos: Vector3): boolean {
        return HasBulletImpactedInArea(pos.x, pos.y, pos.z, 0, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC8C5D7CFEAB8394 | Since: 323 | API-Set: unknown
     */
    export function hasBulletImpactedInBox(): boolean {
        return HasBulletImpactedInBox(0, 0, 0, 0, 0, 0, false, false);
    }

    /**
     * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
     *
     * INT_SCORES_SCORTED was a hash collision
     *
     * Hash: 0x071E2A839DE82D90 | Since: 323 | API-Set: unknown
     */
    export function hasCheatWithHashBeenActivated(hash: number | string, amount: number): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return HasButtonCombinationJustBeenEntered(hash, amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2107A3773771186D | Since: 323 | API-Set: unknown
     */
    export function hasCodeRequestedAutosave(): boolean {
        return Citizen.invokeNative('0x2107A3773771186D');
    }

    /**
     * No comment provided
     *
     * Hash: 0x6FDDF453C0C756EC | Since: 323 | API-Set: unknown
     */
    export function hasGameInstalledThisSession(): boolean {
        return Citizen.invokeNative('0x6FDDF453C0C756EC');
    }

    /**
     * Get inputted "Cheat code", for example:
     *
     * while (TRUE)
     * {
     * `if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))`
     * {
     * // Do something.
     * }
     * `SYSTEM::WAIT(0);`
     * }
     *
     * Calling this will also set the last saved string hash to zero.
     *
     *
     * Hash: 0x557E43C447E700A8 | Since: 323 | API-Set: unknown
     */
    export function hasPcCheatWithHashBeenActivated(hash: number | string): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return HasCheatStringJustBeenEntered(hash);
    }

    /**
     * Hardcoded to return false.
     *
     * Hash: 0xE8B9C0EC9E183F35 | Since: 323 | API-Set: unknown
     */
    export function hasResumedFromSuspend(): boolean {
        return HasResumedFromSuspend();
    }

    /**
     * No comment provided
     *
     * Hash: 0x075F1D57402C93BA | Since: 323 | API-Set: unknown
     */
    export function haveCreditsReachedEnd(): boolean {
        return HaveCreditsReachedEnd();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD642319C54AADEB6 | Since: 323 | API-Set: unknown
     */
    export function haveReplayStatsBeenStored(): boolean {
        return Citizen.invokeNative('0xD642319C54AADEB6');
    }

    /**
     * No comment provided
     *
     * Hash: 0x21FFB63D8C615361 | Since: 323 | API-Set: unknown
     */
    export function ignoreNextRestart(toggle: boolean): void {
        IgnoreNextRestart(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D74E26F54B4E5C3 | Since: 323 | API-Set: unknown
     */
    export function informCodeOfContentIdOfCurrentUgcMission(): void {
        Citizen.invokeNative('0x8D74E26F54B4E5C3', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA61B4DF533DCB56E | Since: 323 | API-Set: unknown
     */
    export function isAreaOccupied(): boolean {
        return IsAreaOccupied(0, 0, 0, 0, 0, 0, false, false, false, false, false, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x39455BF4F4F55186 | Since: 1868 | API-Set: unknown
     */
    export function isAreaOccupiedSlow(): boolean {
        return Citizen.invokeNative('0x39455BF4F4F55186', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * Used to block some of the prostitute stuff due to laws in Australia.
     *
     * Hash: 0x9F1935CA1F724008 | Since: 323 | API-Set: unknown
     */
    export function isAussieVersion(): boolean {
        return IsAussieVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0x69240733738C19A0 | Since: 323 | API-Set: unknown
     */
    export function isAutoSaveInProgress(): boolean {
        return IsAutoSaveInProgress();
    }

    /**
     * For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     * Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
     *
     * Hash: 0x1A8B5F3C01E2B477 | Since: 323 | API-Set: unknown
     */
    export function isBulletInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, ownedByPlayer: boolean): boolean {
        return IsBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F2023999AD51C1F | Since: 323 | API-Set: unknown
     */
    export function isBulletInArea(pos: Vector3, radius: number, ownedByPlayer: boolean): boolean {
        return IsBulletInArea(pos.x, pos.y, pos.z, radius, ownedByPlayer);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE0F6D7450D37351 | Since: 323 | API-Set: unknown
     */
    export function isBulletInBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean {
        return IsBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer);
    }

    /**
     * Returns true if command line option '-benchmark' is set.
     *
     * Hash: 0xA049A5BE0F04F2F8 | Since: 323 | API-Set: unknown
     */
    export function isCommandlineEndUserBenchmark(): boolean {
        return IsCommandLineBenchmarkValueSet();
    }

    /**
     * XBOX ONE
     *
     * Hash: 0x4D982ADB1978442D | Since: 323 | API-Set: unknown
     */
    export function isDurangoVersion(): boolean {
        return IsDurangoVersion();
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x7EA2B6AF97ECA6ED | Since: 323 | API-Set: unknown
     */
    export function isFrontendFading(): boolean {
        return IsFrontendFading();
    }

    /**
     * =======================================================
     * Correction, I have change this to int, instead of int*
     * as it doesn't use a pointer to the createdIncident.
     * If you try it you will crash (or) freeze.
     * =======================================================
     *
     * Hash: 0xC8BC6461E629BEAA | Since: 323 | API-Set: unknown
     */
    export function isIncidentValid(incidentId: number): boolean {
        return IsIncidentValid(incidentId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8C0BB75D8A77DB3 | Since: 2545 | API-Set: unknown
     */
    export function isJapaneseVersion(): boolean {
        return IsJapaneseVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A75CE2956274ADD | Since: 323 | API-Set: unknown
     */
    export function isMemoryCardInUse(): boolean {
        return IsMemoryCardInUse();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B4A15E44DE0F478 | Since: 323 | API-Set: unknown
     */
    export function isMinigameInProgress(): boolean {
        return IsMinigameInProgress();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FAA3A30BEC0F25D | Since: 323 | API-Set: unknown
     */
    export function isNextWeatherType(weatherType: string): boolean {
        return IsNextWeatherType(weatherType);
    }

    /**
     * PS4
     *
     * Hash: 0xA72BC0B675B1519E | Since: 323 | API-Set: unknown
     */
    export function isOrbisVersion(): boolean {
        return IsOrbisVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0x48AF36444B965238 | Since: 323 | API-Set: unknown
     */
    export function isPcVersion(): boolean {
        return IsPcVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE54E209C35FFA18D | Since: 323 | API-Set: unknown
     */
    export function isPointObscuredByAMissionEntity(): boolean {
        return IsPointObscuredByAMissionEntity(0, 0, 0, 0, 0, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1312F4B242609CE3 | Since: 1290 | API-Set: unknown
     */
    export function isPopMultiplierAreaNetworked(id: number): boolean {
        return IsPopMultiplierAreaUnk(id);
    }

    /**
     * `range`: The range, seems to not be very accurate during testing.
     * `p4`: Unknown, when set to true it seems to always return true no matter what I try.
     * `checkVehicle`: Check for any vehicles in that area.
     * `checkPeds`: Check for any peds in that area.
     * `ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
     * The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
     *
     * Returns true if there is anything in that location matching the provided parameters.
     *
     * Hash: 0xADCDE75E1C60F32D | Since: 323 | API-Set: unknown
     */
    export function isPositionOccupied(pos: Vector3, range: number, checkVehicles: boolean, checkPeds: boolean, ignoreEntity: number | IEntity): boolean {
        return IsPositionOccupied(pos.x, pos.y, pos.z, range, false, checkVehicles, checkPeds, false, false, ignoreEntity, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44F28F86433B10A9 | Since: 323 | API-Set: unknown
     */
    export function isPrevWeatherType(weatherType: string): boolean {
        return IsPrevWeatherType(weatherType);
    }

    /**
     * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
     *
     * - Nacorpio
     *
     *
     * ownedByPlayer = only projectiles fired by the player will be detected.
     *
     * Hash: 0x5270A8FBC098C3F8 | Since: 323 | API-Set: unknown
     */
    export function isProjectileInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean {
        return IsProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer);
    }

    /**
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0xF0BC12401061DEA0 | Since: 323 | API-Set: unknown
     */
    export function isProjectileTypeInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, ownedByPlayer: boolean): boolean {
        return IsProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, undefined, ownedByPlayer);
    }

    /**
     * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
     *
     * Hash: 0x2E0DC353342C4A6D | Since: 323 | API-Set: unknown
     */
    export function isProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, _type: number, ownedByPlayer: boolean): boolean {
        return IsProjectileTypeInArea(x1, y1, z1, x2, y2, z2, _type, ownedByPlayer);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34318593248C8FB2 | Since: 323 | API-Set: unknown
     */
    export function isProjectileTypeWithinDistance(pos: Vector3, projectileHash: number | string, radius: number, ownedByPlayer: boolean): boolean {
        if (typeof projectileHash === 'string') projectileHash = misc.getHashKey(projectileHash)
        return IsProjectileTypeWithinDistance(pos.x, pos.y, pos.z, projectileHash, radius, ownedByPlayer);
    }

    /**
     * PS5 (Prospero) version...
     *
     * Hash: 0x807ABE1AB65C24D2 | Since: 2612 | API-Set: unknown
     */
    export function isProsperoVersion(): boolean {
        return Citizen.invokeNative('0x807ABE1AB65C24D2');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCA1072C29D096C2 | Since: 323 | API-Set: unknown
     */
    export function isPs3Version(): boolean {
        return IsPs3Version();
    }

    /**
     * Xbox Series (Scarlett) version...
     *
     * Hash: 0xC545AB1CF97ABB34 | Since: 2612 | API-Set: unknown
     */
    export function isScarlettVersion(): boolean {
        return Citizen.invokeNative('0xC545AB1CF97ABB34');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF911E695C1EB8518 | Since: 2612 | API-Set: unknown
     */
    export function isScePlatform(): boolean {
        return Citizen.invokeNative('0xF911E695C1EB8518');
    }

    /**
     * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
     *
     * Hash: 0xFEFCF11B01287125 | Since: 323 | API-Set: unknown
     */
    export function isSniperBulletInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsSniperBulletInArea(x1, y1, z1, x2, y2, z2);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x61A23B7EDA9BDA24 | Since: 323 | API-Set: unknown
     */
    export function isSniperInverted(): boolean {
        return IsSniperInverted();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A27B2B6282F7169 | Since: 2545 | API-Set: unknown
     */
    export function isSteamVersion(): boolean {
        return IsSteamVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF22B6C47C6EAB066 | Since: 323 | API-Set: unknown
     */
    export function isStringNull(_string: string): boolean {
        return IsStringNull(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA042B6957743895 | Since: 323 | API-Set: unknown
     */
    export function isStringNullOrEmpty(_string: string): boolean {
        return IsStringNullOrEmpty(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A3F19700A4D0525 | Since: 323 | API-Set: unknown
     */
    export function isStuntJumpInProgress(): boolean {
        return IsStuntJumpInProgress();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2272B0A1343129F4 | Since: 323 | API-Set: unknown
     */
    export function isStuntJumpMessageShowing(): boolean {
        return IsStuntJumpMessageShowing();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D5479D115290C3F | Since: 323 | API-Set: unknown
     */
    export function isTennisMode(ped: number | IPed): boolean {
        return IsTennisMode(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7B30F65D7B710098 | Since: 323 | API-Set: unknown
     */
    export function isThisAMinigameScript(): boolean {
        return IsThisAMinigameScript();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6201B4DAF662A9D | Since: 323 | API-Set: unknown
     */
    export function isXbox360Version(): boolean {
        return IsXbox360Version();
    }

    /**
     * No comment provided
     *
     * Hash: 0x138679CA01E21F53 | Since: 2612 | API-Set: unknown
     */
    export function isXboxPlatform(): boolean {
        return Citizen.invokeNative('0x138679CA01E21F53');
    }

    /**
     * Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
     *
     * Hash: 0x3BBBD13E5041A79E | Since: 323 | API-Set: unknown
     */
    export function landingScreenStartedEndUserBenchmark(): boolean {
        return LandingMenuIsActive();
    }

    /**
     * The following cloudhats are useable:
     * altostratus
     * Cirrus
     * cirrocumulus
     * Clear 01
     * Cloudy 01
     * Contrails
     * Horizon
     * horizonband1
     * horizonband2
     * horizonband3
     * horsey
     * Nimbus
     * Puffs
     * RAIN
     * Snowy 01
     * Stormy 01
     * stratoscumulus
     * Stripey
     * shower
     * Wispy
     *
     *
     * Hash: 0xFC4842A34657BFCB | Since: 323 | API-Set: unknown
     */
    export function loadCloudHat(name: string, transitionTime: number): void {
        LoadCloudHat(name, transitionTime);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9243BAC96D64C050 | Since: 323 | API-Set: unknown
     */
    export function networkSetScriptIsSafeForNetworkGame(): void {
        NetworkSetScriptIsSafeForNetworkGame();
    }

    /**
     * p0 was always 2 in R* scripts.
     * Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
     *
     * Hash: 0x3ED1438C1F5C6612 | Since: 323 | API-Set: unknown
     */
    export function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(): void {
        NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA3FFB0EEBC288A3 | Since: 2060 | API-Set: unknown
     */
    export function overrideFreezeFlags(): void {
        Citizen.invokeNative('0xFA3FFB0EEBC288A3', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1162EA8AE9D24EEA | Since: 323 | API-Set: unknown
     */
    export function overrideSaveHouse(): boolean {
        return OverrideSaveHouse(false, 0, 0, 0, 0, false, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C2B3493FBF51C71 | Since: 323 | API-Set: unknown
     */
    export function pauseDeathArrestRestart(toggle: boolean): void {
        PauseDeathArrestRestart(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8FA9C42FC5D7C64B | Since: 323 | API-Set: unknown
     */
    export function playTennisDiveAnim(ped: number | IPed): void {
        PlayTennisDiveAnim(ped, 0, 0, 0, 0, false);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xE266ED23311F24D4 | Since: 323 | API-Set: unknown
     */
    export function playTennisSwingAnim(ped: number | IPed, animDict: string, animName: string): void {
        PlayTennisSwingAnim(ped, animDict, animName, 0, 0, false);
    }

    /**
     * Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
     *
     * Hash: 0xABB2FA71C83A1B72 | Since: 323 | API-Set: unknown
     */
    export function plmGetConstrainedDurationMs(): number {
        return GetPowerSavingModeDuration();
    }

    /**
     * aka "constrained"
     *
     * Hash: 0x684A41975F077262 | Since: 323 | API-Set: unknown
     */
    export function plmIsInConstrainedMode(): boolean {
        return IsInPowerSavingMode();
    }

    /**
     * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
     *
     * Hash: 0x7472BB270D7B4F3E | Since: 323 | API-Set: unknown
     */
    export function populateNow(): void {
        PopulateNow();
    }

    /**
     * No comment provided
     *
     * Hash: 0x11B56FBBF7224868 | Since: 323 | API-Set: unknown
     */
    export function preloadCloudHat(name: string): void {
        PreloadCloudHat(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3D969D2785FFB5E | Since: 323 | API-Set: unknown
     */
    export function preventArrestStateThisFrame(): void {
        Citizen.invokeNative('0xE3D969D2785FFB5E');
    }

    /**
     * No comment provided
     *
     * Hash: 0x72DE52178C291CB5 | Since: 323 | API-Set: unknown
     */
    export function queueMissionRepeatLoad(): boolean {
        return QueueMissionRepeatLoad();
    }

    /**
     * Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
     * Returns 1 if the message isn't currently on screen
     *
     * Hash: 0x44A0BDC559B35F6E | Since: 323 | API-Set: unknown
     */
    export function queueMissionRepeatSave(): boolean {
        return QueueMissionRepeatSave();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB2104E905C6F2E9 | Since: 323 | API-Set: unknown
     */
    export function queueMissionRepeatSaveForBenchmarkTest(): boolean {
        return Citizen.invokeNative('0xEB2104E905C6F2E9');
    }

    /**
     * Exits the game and downloads a fresh social club update on next restart.
     *
     * Hash: 0xEB6891F03362FB12 | Since: 323 | API-Set: unknown
     */
    export function quitGame(): void {
        QuitGame();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8F4131414C835A1 | Since: 323 | API-Set: unknown
     */
    export function registerBoolToSave(name: string): any {
        return RegisterBoolToSave(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x10C2FA78D0E128A1 | Since: 323 | API-Set: unknown
     */
    export function registerEnumToSave(name: string): any {
        return RegisterEnumToSave(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7CAEC29ECB5DFEBB | Since: 323 | API-Set: unknown
     */
    export function registerFloatToSave(name: string): any {
        return RegisterFloatToSave(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA735353C77334EA0 | Since: 323 | API-Set: unknown
     */
    export function registerInt64ToSave(name: string): any {
        return RegisterInt64ToSave(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34C9EE5986258415 | Since: 323 | API-Set: unknown
     */
    export function registerIntToSave(name: string): any {
        return RegisterIntToSave(name);
    }

    /**
     * returns savehouseHandle
     *
     * Hash: 0xC0714D0A7EEECA54 | Since: 323 | API-Set: unknown
     */
    export function registerSaveHouse(pos: Vector3): number {
        return RegisterSaveHouse(pos.x, pos.y, pos.z, 0, undefined, undefined, undefined);
    }

    /**
     * `MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");`
     * `MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");`
     * `MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText");`
     *
     * Hash: 0x6F7794F28C6B2535 | Since: 323 | API-Set: unknown
     */
    export function registerTextLabel15ToSave(name: string): any {
        return RegisterTextLabelToSave2(name);
    }

    /**
     * Only found 3 times in decompiled scripts.
     *
     * `MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");`
     * `MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");`
     * `MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A\/\*6\*\/], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"`
     *
     * Hash: 0x48F069265A0E4BEC | Since: 323 | API-Set: unknown
     */
    export function registerTextLabel23ToSave(name: string): any {
        return Citizen.invokeNative('0x48F069265A0E4BEC', name);
    }

    /**
     * Only found 2 times in decompiled scripts.
     *
     * `MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0\/\*8\*\/], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"`
     * `MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A\/\*8\*\/], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"`
     *
     * Hash: 0x8269816F6CFD40F8 | Since: 323 | API-Set: unknown
     */
    export function registerTextLabel31ToSave(name: string): any {
        return Citizen.invokeNative('0x8269816F6CFD40F8', name);
    }

    /**
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A\/\*16\*\/], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION");`
     *
     * Hash: 0xFAA457EF263E8763 | Since: 323 | API-Set: unknown
     */
    export function registerTextLabel63ToSave(name: string): any {
        return Citizen.invokeNative('0xFAA457EF263E8763', name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDB1232C5BEAE62F | Since: 323 | API-Set: unknown
     */
    export function registerTextLabelToSave(name: string): any {
        return RegisterTextLabelToSave(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x264AC28B01B353A5 | Since: 323 | API-Set: unknown
     */
    export function removeDispatchSpawnBlockingArea(): void {
        RemoveDispatchSpawnBlockingArea(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB129E447A2EDA4BF | Since: 323 | API-Set: unknown
     */
    export function removePopMultiplierArea(id: number): void {
        RemovePopMultiplierArea(id, false);
    }

    /**
     * Removes population multiplier sphere
     *
     * Hash: 0xE6869BECDD8F2403 | Since: 323 | API-Set: unknown
     */
    export function removePopMultiplierSphere(id: number): void {
        RemovePopMultiplierSphere(id, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77A84429DD9F0A15 | Since: 323 | API-Set: unknown
     */
    export function resetDispatchIdealSpawnDistance(): void {
        ResetDispatchIdealSpawnDistance();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC7BFD5C1D83EA75 | Since: 323 | API-Set: unknown
     */
    export function resetDispatchSpawnBlockingAreas(): void {
        ResetDispatchSpawnBlockingAreas();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5896F2BD5683A4E1 | Since: 1868 | API-Set: unknown
     */
    export function resetDispatchSpawnLocation(): void {
        ResetDispatchSpawnLocation();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB2DB0CAD13154B3 | Since: 323 | API-Set: unknown
     */
    export function resetDispatchTimeBetweenSpawnAttempts(): void {
        ResetDispatchTimeBetweenSpawnAttempts(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x437138B6A830166A | Since: 323 | API-Set: unknown
     */
    export function resetEndUserBenchmark(): void {
        ResetBenchmarkRecording();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9F692D349249528 | Since: 323 | API-Set: unknown
     */
    export function resetWantedResponseNumPedsToSpawn(): void {
        Citizen.invokeNative('0xD9F692D349249528');
    }

    /**
     * In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
     *
     * Hash: 0xE574A662ACAEFBB1 | Since: 372 | API-Set: unknown
     */
    export function restartGame(): void {
        RestartGame();
    }

    /**
     * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
     *
     * Hash: 0x37DEB0AA183FB6D8 | Since: 323 | API-Set: unknown
     */
    export function saveEndUserBenchmark(): void {
        SaveBenchmarkRecording();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EF5573A1F801A5C | Since: 323 | API-Set: unknown
     */
    export function scriptRaceGetPlayerSplitTime(player: number | string | IPlayer): [boolean, number, number] {
        return ScriptRaceGetPlayerSplitTime(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A60017F841A54F2 | Since: 323 | API-Set: unknown
     */
    export function scriptRaceInit(): void {
        ScriptRaceInit(0, 0, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1BB299305C3E8C13 | Since: 323 | API-Set: unknown
     */
    export function scriptRacePlayerHitCheckpoint(player: number | string | IPlayer): void {
        ScriptRacePlayerHitCheckpoint(player, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1FF6BF9A63E5757F | Since: 323 | API-Set: unknown
     */
    export function scriptRaceShutdown(): void {
        ScriptRaceShutdown();
    }

    /**
     * No comment provided
     *
     * Hash: 0x438822C279B73B93 | Since: 573 | API-Set: unknown
     */
    export function setBeastJumpThisFrame(player: number | string | IPlayer): void {
        SetBeastModeActive(player);
    }

    /**
     * This sets bit [offset] of [address] to on.
     *
     * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
     *
     * Example:
     * `MISC::SET_BIT(&bitAddress, 1);`
     *
     * To check if this bit has been enabled:
     * `MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards`
     *
     * Please note, this method may assign a value to [address] when used.
     *
     * Hash: 0x933D6A9EEC1BACD0 | Since: 323 | API-Set: unknown
     */
    export function setBit(offset: number): number {
        return SetBit(offset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EF07E15701D61ED | Since: 323 | API-Set: unknown
     */
    export function setBitsInRange(rangeStart: number, rangeEnd: number): number {
        return SetBitsInRange(rangeStart, rangeEnd, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF36199225D6D8C86 | Since: 323 | API-Set: unknown
     */
    export function setCloudsAlpha(opacity: number): void {
        SetCloudsAlpha(opacity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02DEAAC8F8EA7FE7 | Since: 323 | API-Set: unknown
     */
    export function setCloudSettingsOverride(): void {
        SetCloudSettingsOverride(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B82FA6F2D624634 | Since: 2612 | API-Set: unknown
     */
    export function setContentIdIndex(contentId: number | string, index: number): void {
        if (typeof contentId === 'string') contentId = misc.getHashKey(contentId)
        Citizen.invokeNative('0x4B82FA6F2D624634', contentId, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB938B7E6D3C0620C | Since: 323 | API-Set: unknown
     */
    export function setCreditsActive(toggle: boolean): void {
        SetCreditsActive(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB51B9AB9EF81868C | Since: 323 | API-Set: unknown
     */
    export function setCreditsFadeOutWithScreen(toggle: boolean): void {
        Citizen.invokeNative('0xB51B9AB9EF81868C', toggle);
    }

    /**
     * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
     *
     * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
     *
     * Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
     *
     * CLEAR  0x36A83D84
     * EXTRASUNNY  0x97AA0A79
     * CLOUDS  0x30FDAF5C
     * OVERCAST    0xBB898D2D
     * RAIN    0x54A69840
     * CLEARING    0x6DB1A50D
     * THUNDER 0xB677829F
     * SMOG    0x10DCF4B5
     * FOGGY   0xAE737644
     * XMAS    0xAAC9C895
     * SNOWLIGHT   0x23FB812B
     * BLIZZARD    0x27EA2814
     *
     *
     *
     *
     *
     * \/\* OLD INVALID INFO BELOW \*\/
     * Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
     *
     * If an invalid hash is specified for sourceWeather, the current weather type will be used.
     * If an invalid hash is specified for targetWeather, the next weather type will be used.
     * If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
     *
     * Hash: 0x578C752848ECFA0C | Since: 323 | API-Set: unknown
     */
    export function setCurrWeatherState(weatherType1: number | string, weatherType2: number | string, percentWeather2: number): void {
        if (typeof weatherType1 === 'string') weatherType1 = misc.getHashKey(weatherType1)
        if (typeof weatherType2 === 'string') weatherType2 = misc.getHashKey(weatherType2)
        SetWeatherTypeTransition(weatherType1, weatherType2, percentWeather2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6FE601A64180D423 | Since: 323 | API-Set: unknown
     */
    export function setDispatchIdealSpawnDistance(distance: number): void {
        SetDispatchIdealSpawnDistance(distance);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD10F442036302D50 | Since: 323 | API-Set: unknown
     */
    export function setDispatchSpawnLocation(pos: Vector3): void {
        SetDispatchSpawnLocation(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44F7CBC1BEB3327D | Since: 323 | API-Set: unknown
     */
    export function setDispatchTimeBetweenSpawnAttempts(): void {
        SetDispatchTimeBetweenSpawnAttempts(undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x48838ED9937A15D1 | Since: 323 | API-Set: unknown
     */
    export function setDispatchTimeBetweenSpawnAttemptsMultiplier(): void {
        SetDispatchTimeBetweenSpawnAttemptsMultiplier(undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA66C71C98D5F2CFB | Since: 323 | API-Set: unknown
     */
    export function setExplosiveAmmoThisFrame(player: number | string | IPlayer): void {
        SetExplosiveAmmoThisFrame(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF1BED81BFDC0FE0 | Since: 323 | API-Set: unknown
     */
    export function setExplosiveMeleeThisFrame(player: number | string | IPlayer): void {
        SetExplosiveMeleeThisFrame(player);
    }

    /**
     * Sets whether the game should fade in after the player dies or is arrested.
     *
     * Hash: 0xDA66D2796BA33F12 | Since: 323 | API-Set: unknown
     */
    export function setFadeInAfterDeathArrest(toggle: boolean): void {
        SetFadeInAfterDeathArrest(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3D78F59DFE18D79 | Since: 323 | API-Set: unknown
     */
    export function setFadeInAfterLoad(toggle: boolean): void {
        SetFadeInAfterLoad(toggle);
    }

    /**
     * Sets whether the game should fade out after the player is arrested.
     *
     * Hash: 0x1E0B4DC0D990A4E7 | Since: 323 | API-Set: unknown
     */
    export function setFadeOutAfterArrest(toggle: boolean): void {
        SetFadeOutAfterArrest(toggle);
    }

    /**
     * Sets whether the game should fade out after the player dies.
     *
     * Hash: 0x4A18E01DF2C87B86 | Since: 323 | API-Set: unknown
     */
    export function setFadeOutAfterDeath(toggle: boolean): void {
        SetFadeOutAfterDeath(toggle);
    }

    /**
     * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
     *
     * Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
     *
     * Hash: 0x1454F2448DE30163 | Since: 323 | API-Set: unknown
     */
    export function setFakeWantedLevel(fakeWantedLevel: number): void {
        SetFakeWantedLevel(fakeWantedLevel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11879CDD803D30F4 | Since: 323 | API-Set: unknown
     */
    export function setFireAmmoThisFrame(player: number | string | IPlayer): void {
        SetFireAmmoThisFrame(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1183BCFEE0F93D1 | Since: 1180 | API-Set: unknown
     */
    export function setForcedJumpThisFrame(player: number | string | IPlayer): void {
        SetForcePlayerToJump(player);
    }

    /**
     * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
     *
     * Hash: 0x577D1284D6873711 | Since: 323 | API-Set: unknown
     */
    export function setGamePaused(toggle: boolean): void {
        SetGamePaused(toggle);
    }

    /**
     * level can be from 0 to 3
     * 0: 9.8 - normal
     * 1: 2.4 - low
     * 2: 0.1 - very low
     * 3: 0.0 - off
     *
     * Hash: 0x740E14FAD5842351 | Since: 323 | API-Set: unknown
     */
    export function setGravityLevel(level: number): void {
        SetGravityLevel(level);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD261BA3E7E998072 | Since: 323 | API-Set: unknown
     */
    export function setIdealSpawnDistanceForIncident(incidentId: number): void {
        SetIncidentUnk(incidentId, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB08B85D860E7BA3C | Since: 323 | API-Set: unknown
     */
    export function setIncidentRequestedUnits(incidentId: number, dispatchService: number, numUnits: number): void {
        SetIncidentRequestedUnits(incidentId, dispatchService, numUnits);
    }

    /**
     * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
     *
     * Hash: 0xC5F0A8EBD3F361CE | Since: 323 | API-Set: unknown
     */
    export function setInstancePriorityHint(flag: number): void {
        SetInstancePriorityHint(flag);
    }

    /**
     * Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
     * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
     *
     * In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
     *
     * Hash: 0x9BAE5AD2508DF078 | Since: 323 | API-Set: unknown
     */
    export function setInstancePriorityMode(): void {
        SetInstancePriorityMode(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19E00D7322C6F85B | Since: 323 | API-Set: unknown
     */
    export function setMinigameInProgress(toggle: boolean): void {
        SetMinigameInProgress(toggle);
    }

    /**
     * If true, the player can't save the game.
     *
     *
     * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
     *
     * ^ also, if the mission flag is already set, the function does nothing at all
     *
     * Hash: 0xC4301E5121A0ED73 | Since: 323 | API-Set: unknown
     */
    export function setMissionFlag(toggle: boolean): void {
        SetMissionFlag(toggle);
    }

    /**
     * Appears to have an optional bool parameter that is unused in the scripts.
     *
     * If you pass true, something will be set to zero.
     *
     * Hash: 0xA43D5C6FE51ADBEF | Since: 323 | API-Set: unknown
     */
    export function setOverrideWeather(weatherType: string): void {
        SetOverrideWeather(weatherType);
    }

    /**
     * Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true
     *
     * Hash: 0x1178E104409FE58C | Since: 2189 | API-Set: unknown
     */
    export function setOverrideWeatherex(weatherType: string): void {
        Citizen.invokeNative('0x1178E104409FE58C', weatherType, false);
    }

    /**
     * If toggle is true, the ped's head is shown in the pause menu
     * If toggle is false, the ped's head is not shown in the pause menu
     *
     * Hash: 0x4EBB7E87AA0DBED4 | Since: 323 | API-Set: unknown
     */
    export function setPlayerIsInAnimalForm(toggle: boolean): void {
        SetPlayerIsInAnimalForm(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D8D44ADBBA61EF2 | Since: 323 | API-Set: unknown
     */
    export function setPlayerIsRepeatingAMission(toggle: boolean): void {
        SetPlayerRockstarEditorDisabled(toggle);
    }

    /**
     * With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
     * With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
     * To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
     *
     * Hash: 0x643E26EA6E024D92 | Since: 323 | API-Set: unknown
     */
    export function setRain(intensity: number): void {
        SetRainLevel(intensity);
    }

    /**
     * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
     * Does nothing if the mission flag is set.
     *
     * Hash: 0x971927086CFD2158 | Since: 323 | API-Set: unknown
     */
    export function setRandomEventFlag(toggle: boolean): void {
        SetRandomEventFlag(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x444D98F98C11F3EC | Since: 323 | API-Set: unknown
     */
    export function setRandomSeed(seed: number): void {
        SetRandomSeed(seed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B05F884CF7E8020 | Since: 323 | API-Set: unknown
     */
    export function setRandomWeatherType(): void {
        SetRandomWeatherType();
    }

    /**
     * No comment provided
     *
     * Hash: 0x706B5EDCAA7FA663 | Since: 323 | API-Set: unknown
     */
    export function setRestartCoordOverride(pos: Vector3, heading: number): void {
        SetRestartCustomPosition(pos.x, pos.y, pos.z, heading);
    }

    /**
     * Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
     *
     * Hash: 0x2587A48BC88DFADF | Since: 323 | API-Set: unknown
     */
    export function setRiotModeEnabled(toggle: boolean): void {
        SetRiotModeEnabled(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4F548CABEAE553BC | Since: 323 | API-Set: unknown
     */
    export function setSaveHouse(savehouseHandle: number): void {
        SetSaveHouse(savehouseHandle, false, false);
    }

    /**
     * ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
     *
     * Hash: 0xC9BF75D28165FF77 | Since: 323 | API-Set: unknown
     */
    export function setSaveMenuActive(ignoreVehicle: boolean): void {
        SetSaveMenuActive(ignoreVehicle);
    }

    /**
     * Sets GtaThread+0x14A
     *
     * Hash: 0x65D2EBB47E1CEC21 | Since: 323 | API-Set: unknown
     */
    export function setScriptHighPrio(toggle: boolean): void {
        Citizen.invokeNative('0x65D2EBB47E1CEC21', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F06937B0CDCBC1A | Since: 1868 | API-Set: unknown
     */
    export function setSnow(level: number): void {
        SetSnowLevel(level);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD79185689F8FD5DF | Since: 323 | API-Set: unknown
     */
    export function setStuntJumpsCanTrigger(toggle: boolean): void {
        SetStuntJumpsCanTrigger(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57FFF03E423A4C0B | Since: 323 | API-Set: unknown
     */
    export function setSuperJumpThisFrame(player: number | string | IPlayer): void {
        SetSuperJumpThisFrame(player);
    }

    /**
     * From the scripts:
     *
     * `MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);`
     *
     * Related to tennis mode.
     *
     * Hash: 0x54F157E0336A3822 | Since: 323 | API-Set: unknown
     */
    export function setTennisMoveNetworkSignalFloat(ped: number | IPed): void {
        Citizen.invokeNative('0x54F157E0336A3822', ped, undefined, 0);
    }

    /**
     * Sets bit 3 in GtaThread+0x150
     *
     * Hash: 0x6F2135B6129620C1 | Since: 323 | API-Set: unknown
     */
    export function setThisIsATriggerScript(toggle: boolean): void {
        Citizen.invokeNative('0x6F2135B6129620C1', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA391C728106F7AF | Since: 323 | API-Set: unknown
     */
    export function setThisScriptCanBePaused(toggle: boolean): void {
        SetThisScriptCanBePaused(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB98236CAAECEF897 | Since: 323 | API-Set: unknown
     */
    export function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: boolean): void {
        SetThisScriptCanRemoveBlipsCreatedByAnyScript(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB00CA71DA386228 | Since: 323 | API-Set: unknown
     */
    export function setTickerJohnmarstonIsDone(): void {
        Citizen.invokeNative('0xFB00CA71DA386228');
    }

    /**
     * Maximum value is 1.
     * At a value of 0 the game will still run at a minimum time scale.
     *
     * Slow Motion 1: 0.6
     * Slow Motion 2: 0.4
     * Slow Motion 3: 0.2
     *
     * Hash: 0x1D408577D440E81E | Since: 323 | API-Set: unknown
     */
    export function setTimeScale(timeScale: number): void {
        SetTimeScale(timeScale);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE532EC1A63231B4F | Since: 323 | API-Set: unknown
     */
    export function setWantedResponseNumPedsToSpawn(): void {
        Citizen.invokeNative('0xE532EC1A63231B4F', 0, 0);
    }

    /**
     * The following weatherTypes are used in the scripts:
     * "CLEAR"
     * "EXTRASUNNY"
     * "CLOUDS"
     * "OVERCAST"
     * "RAIN"
     * "CLEARING"
     * "THUNDER"
     * "SMOG"
     * "FOGGY"
     * "XMAS"
     * "SNOW"
     * "SNOWLIGHT"
     * "BLIZZARD"
     * "HALLOWEEN"
     * "NEUTRAL"
     *
     * Hash: 0x29B487C359E19889 | Since: 323 | API-Set: unknown
     */
    export function setWeatherTypeNow(weatherType: string): void {
        SetWeatherTypeNow(weatherType);
    }

    /**
     * The following weatherTypes are used in the scripts:
     * "CLEAR"
     * "EXTRASUNNY"
     * "CLOUDS"
     * "OVERCAST"
     * "RAIN"
     * "CLEARING"
     * "THUNDER"
     * "SMOG"
     * "FOGGY"
     * "XMAS"
     * "SNOW"
     * "SNOWLIGHT"
     * "BLIZZARD"
     * "HALLOWEEN"
     * "NEUTRAL"
     *
     * Hash: 0xED712CA327900C8A | Since: 323 | API-Set: unknown
     */
    export function setWeatherTypeNowPersist(weatherType: string): void {
        SetWeatherTypeNowPersist(weatherType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB5045B7C42B75BF | Since: 323 | API-Set: unknown
     */
    export function setWeatherTypeOvertimePersist(weatherType: string, time: number): void {
        SetWeatherTypeOvertimePersist(weatherType, time);
    }

    /**
     * The following weatherTypes are used in the scripts:
     * "CLEAR"
     * "EXTRASUNNY"
     * "CLOUDS"
     * "OVERCAST"
     * "RAIN"
     * "CLEARING"
     * "THUNDER"
     * "SMOG"
     * "FOGGY"
     * "XMAS"
     * "SNOW"
     * "SNOWLIGHT"
     * "BLIZZARD"
     * "HALLOWEEN"
     * "NEUTRAL"
     *
     * Hash: 0x704983DF373B198F | Since: 323 | API-Set: unknown
     */
    export function setWeatherTypePersist(weatherType: string): void {
        SetWeatherTypePersist(weatherType);
    }

    /**
     * Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
     *
     * Hash: 0xAC3A74E8384A9919 | Since: 323 | API-Set: unknown
     */
    export function setWind(speed: number): void {
        SetWind(speed);
    }

    /**
     * The wind direction in radians
     * 180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
     *
     * Hash: 0xEB0F4468467B4528 | Since: 323 | API-Set: unknown
     */
    export function setWindDirection(direction: number): void {
        SetWindDirection(direction);
    }

    /**
     * Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
     *
     * Hash: 0xEE09ECEDBABE47FC | Since: 323 | API-Set: unknown
     */
    export function setWindSpeed(speed: number): void {
        SetWindSpeed(speed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x867654CBC7606F2C | Since: 323 | API-Set: unknown
     */
    export function shootSingleBulletBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, weaponHash: number | string, ownerPed: number | IPed, isAudible: boolean, isInvisible: boolean, speed: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        ShootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, false, weaponHash, ownerPed, isAudible, isInvisible, speed);
    }

    /**
     * entity - entity to ignore
     *
     * Hash: 0xE3A7742E0B7A2F8B | Since: 323 | API-Set: unknown
     */
    export function shootSingleBulletBetweenCoordsIgnoreEntity(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, weaponHash: number | string, ownerPed: number | IPed, isAudible: boolean, isInvisible: boolean, speed: number, entity: number | IEntity): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        ShootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, false, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, undefined);
    }

    /**
     * entity - entity to ignore
     * targetEntity - entity to home in on, if the weapon hash provided supports homing
     *
     * Hash: 0xBFE5756E7407064A | Since: 323 | API-Set: unknown
     */
    export function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, weaponHash: number | string, ownerPed: number | IPed, isAudible: boolean, isInvisible: boolean, speed: number, entity: number | IEntity, targetEntity: number | IEntity): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        ShootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, false, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, false, false, targetEntity, false, undefined, undefined, undefined);
    }

    /**
     * Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
     *
     * Hash: 0xD3D15555431AB793 | Since: 323 | API-Set: unknown
     */
    export function shouldUseMetricMeasurements(): boolean {
        return ShouldUseMetricMeasurements();
    }

    /**
     * This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
     *
     * Hash: 0xF2F6A2FA49278625 | Since: 323 | API-Set: unknown
     */
    export function slerpNearQuaternion(t: number, pos: Vector3, w: number, x1: number, y1: number, z1: number, w1: number): [number, number, number, number] {
        return SlerpNearQuaternion(t, pos.x, pos.y, pos.z, w, x1, y1, z1, w1);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92790862E36C2ADA | Since: 323 | API-Set: unknown
     */
    export function startEndUserBenchmark(): void {
        StartBenchmarkRecording();
    }

    /**
     * No comment provided
     *
     * Hash: 0x60FE567DF1B1AF9D | Since: 323 | API-Set: unknown
     */
    export function startSaveArrayWithSize(size: number, arrayName: string): any {
        return StartSaveArrayWithSize(size, arrayName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9575F812C6A7997 | Since: 323 | API-Set: unknown
     */
    export function startSaveData(): any {
        return StartSaveData(undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF737600CDDBEADD | Since: 323 | API-Set: unknown
     */
    export function startSaveStructWithSize(size: number, structName: string): any {
        return StartSaveStructWithSize(size, structName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7DB36C24634F52B | Since: 323 | API-Set: unknown
     */
    export function stopEndUserBenchmark(): void {
        StopBenchmarkRecording();
    }

    /**
     * No comment provided
     *
     * Hash: 0x04456F95153C6BE4 | Since: 323 | API-Set: unknown
     */
    export function stopSaveArray(): void {
        StopSaveArray();
    }

    /**
     * No comment provided
     *
     * Hash: 0x74E20C9145FB66FD | Since: 323 | API-Set: unknown
     */
    export function stopSaveData(): void {
        StopSaveData();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB1774DF12BB9F12 | Since: 323 | API-Set: unknown
     */
    export function stopSaveStruct(): void {
        StopSaveStruct();
    }

    /**
     * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
     *
     * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
     *
     * Hash: 0x5A5F40FE637EB584 | Since: 323 | API-Set: unknown
     */
    export function stringToInt(_string: string): [boolean, number] {
        return StringToInt(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1EAE0A6E978894A2 | Since: 323 | API-Set: unknown
     */
    export function supressRandomEventThisFrame(eventType: number, suppress: boolean): void {
        SupressRandomEventThisFrame(eventType, suppress);
    }

    /**
     * No comment provided
     *
     * Hash: 0x632106CC96E82E91 | Since: 323 | API-Set: unknown
     */
    export function tan(): number {
        return Tan(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DC711BC69C548DF | Since: 323 | API-Set: unknown
     */
    export function terminateAllScriptsWithThisName(scriptName: string): void {
        TerminateAllScriptsWithThisName(scriptName);
    }

    /**
     * Toggles some stunt jump stuff.
     *
     * Hash: 0xFB80AB299D2EE1BD | Since: 757 | API-Set: unknown
     */
    export function toggleShowOptionalStuntJumpCamera(toggle: boolean): void {
        ToggleShowOptionalStuntJumpCamera(toggle);
    }

    /**
     * Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
     *
     * Hash: 0xEA2F2061875EED90 | Since: 323 | API-Set: unknown
     */
    export function uiStartedEndUserBenchmark(): boolean {
        return UiStartedEndUserBenchmark();
    }

    /**
     * No comment provided
     *
     * Hash: 0x957E790EA1727B64 | Since: 323 | API-Set: unknown
     */
    export function unloadAllCloudHats(): void {
        ClearCloudHat();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA74802FB8D0B7814 | Since: 323 | API-Set: unknown
     */
    export function unloadCloudHat(name: string): void {
        UnloadCloudHat(name, 0);
    }

    /**
     * Returns the current status of the onscreen keyboard, and updates the output.
     *
     * Status Codes:
     *
     * -1: Keyboard isn't active
     * 0: User still editing
     * 1: User has finished editing
     * 2: User has canceled editing
     *
     * Hash: 0x0CF2B696BBF945AE | Since: 323 | API-Set: unknown
     */
    export function updateOnscreenKeyboard(): number {
        return UpdateOnscreenKeyboard();
    }

    /**
     * No comment provided
     *
     * Hash: 0x693478ACBD7F18E7 | Since: 1103 | API-Set: unknown
     */
    export function useActiveCameraForTimeslicingCentre(): void {
        Citizen.invokeNative('0x693478ACBD7F18E7');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF14878FC50BEC6EE | Since: 323 | API-Set: unknown
     */
    export function usingMissionCreator(toggle: boolean): void {
        UsingMissionCreator(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8434F1DFF41D6E7 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideFadeIn(): void {
        WaterOverrideFadeIn(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3C221ADDDE31A11 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideFadeOut(): void {
        WaterOverrideFadeOut(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31727907B2C43C55 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetOceannoiseminamplitude(minAmplitude: number): void {
        WaterOverrideSetOceannoiseminamplitude(minAmplitude);
    }

    /**
     * No comment provided
     *
     * Hash: 0x405591EC8FD9096D | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetOceanwaveamplitude(amplitude: number): void {
        WaterOverrideSetOceanwaveamplitude(amplitude);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3E6360DDE733E82 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetOceanwavemaxamplitude(maxAmplitude: number): void {
        WaterOverrideSetOceanwavemaxamplitude(maxAmplitude);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF751B16FB32ABC1D | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetOceanwaveminamplitude(minAmplitude: number): void {
        WaterOverrideSetOceanwaveminamplitude(minAmplitude);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C9C0B1EEB1F9072 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetRipplebumpiness(bumpiness: number): void {
        WaterOverrideSetRipplebumpiness(bumpiness);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9854DFDE0D833D6 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetRippledisturb(disturb: number): void {
        WaterOverrideSetRippledisturb(disturb);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F5E6BB6B34540DA | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetRipplemaxbumpiness(maxBumpiness: number): void {
        WaterOverrideSetRipplemaxbumpiness(maxBumpiness);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6216B116083A7CB4 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetRippleminbumpiness(minBumpiness: number): void {
        WaterOverrideSetRippleminbumpiness(minBumpiness);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8F87EAD7533B176 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetShorewaveamplitude(amplitude: number): void {
        WaterOverrideSetShorewaveamplitude(amplitude);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7A1127490312C36 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetShorewavemaxamplitude(maxAmplitude: number): void {
        WaterOverrideSetShorewavemaxamplitude(maxAmplitude);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3EAD29AB273ECE8 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetShorewaveminamplitude(minAmplitude: number): void {
        WaterOverrideSetShorewaveminamplitude(minAmplitude);
    }

    /**
     * This seems to edit the water wave, intensity around your current location.
     *
     * 0.0f = Normal
     * 1.0f = So Calm and Smooth, a boat will stay still.
     * 3.0f = Really Intense.
     *
     * Hash: 0xC54A08C85AE4D410 | Since: 323 | API-Set: unknown
     */
    export function waterOverrideSetStrength(strength: number): void {
        WaterOverrideSetStrength(strength);
    }

    /**
     * Returns prop type for given model hash
     *
     * Hash: 0x8BAF8AD59F47AAFC | Since: 3095 | API-Set: unknown
     */
    export function getContentPropType(model: number | string): number {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return Citizen.invokeNative('0x8BAF8AD59F47AAFC', model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE2BCD0EFAE90D1F4 | Since: 3504 | API-Set: unknown
     */
    export function isXboxpcVersion(): boolean {
        return Citizen.invokeNative('0xE2BCD0EFAE90D1F4');
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA4583AF4C678A9B | Since: 3095 | API-Set: unknown
     */
    export function setContentPropType(model: number | string, _type: number): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        Citizen.invokeNative('0xBA4583AF4C678A9B', model, _type);
    }

}


export namespace ped {
    /**
     * An analogue of [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\_0x27561561732A7842) that returns number of drawable variations inside a single collection instead of the total number across all collections.
     *
     * Hash: 0x310D0271 | Since: unknown | API-Set: client
     */
    export function getNumberOfCollectionDrawableVariations(ped: number | IPed, componentId: number, collection: string): number {
        return GetNumberOfPedCollectionDrawableVariations(ped, componentId, collection);
    }

    /**
     * An analogue of [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\_0x5FAF9754E789FB47) that returns number of prop variations inside a single collection instead of the total number across all collections.
     *
     * Hash: 0x3B6A13E1 | Since: unknown | API-Set: client
     */
    export function getNumberOfCollectionPropDrawableVariations(ped: number | IPed, anchorPoint: number, collection: string): number {
        return GetNumberOfPedCollectionPropDrawableVariations(ped, anchorPoint, collection);
    }

    /**
     * An alternative to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\_0xA6E7F1CEB523E171) that uses local collection indexing instead of the global one.
     *
     * Hash: 0x75CAF9CC | Since: unknown | API-Set: client
     */
    export function getNumberOfCollectionPropTextureVariations(ped: number | IPed, anchorPoint: number, collection: string, propIndex: number): number {
        return GetNumberOfPedCollectionPropTextureVariations(ped, anchorPoint, collection, propIndex);
    }

    /**
     * An alternative to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\_0x8F7156A3142A6BAD) that uses local collection indexing instead of the global one.
     *
     * Hash: 0xD2C15D7 | Since: unknown | API-Set: client
     */
    export function getNumberOfCollectionTextureVariations(ped: number | IPed, componentId: number, collection: string, drawableId: number): number {
        return GetNumberOfPedCollectionTextureVariations(ped, componentId, collection, drawableId);
    }

    /**
     * Returns number of variation collections available for the given Ped.
     *
     * Collections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA), [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB), [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\_0x310D0271) etc natives for more details on how to work with collections.
     *
     * `GET_PED_COLLECTIONS_COUNT` can be used together with [GET_PED_COLLECTION_NAME](#\_0xFED5D83A) to list all collections attached to Ped.
     *
     * Hash: 0x45946359 | Since: unknown | API-Set: client
     */
    export function getCollectionsCount(ped: number | IPed): number {
        return GetPedCollectionsCount(ped);
    }

    /**
     * Gets local index inside a collection (which can be obtained using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B)) for the given global drawable ID. The collection name and index are used in functions like [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA).
     *
     * Hash: 0x94EB1FE4 | Since: unknown | API-Set: client
     */
    export function getCollectionLocalIndexFromDrawable(ped: number | IPed, componentId: number, drawableId: number): number {
        return GetPedCollectionLocalIndexFromDrawable(ped, componentId, drawableId);
    }

    /**
     * Gets local index inside a collection (which can be obtained using [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17)) for the given global prop index. The collection name and index are used in functions like [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB).
     *
     * Hash: 0xFBDB885F | Since: unknown | API-Set: client
     */
    export function getCollectionLocalIndexFromProp(ped: number | IPed, anchorPoint: number, propIndex: number): number {
        return GetPedCollectionLocalIndexFromProp(ped, anchorPoint, propIndex);
    }

    /**
     * Returns name of collection under given index for the given Ped.
     *
     * Collections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA), [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB), [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\_0x310D0271) etc natives for more details on how to work with collections.
     *
     * `GET_PED_COLLECTION_NAME` can be used together with [GET_PED_COLLECTIONS_COUNT](#\_0x45946359) to list all collections attached to Ped.
     *
     * Hash: 0xFED5D83A | Since: unknown | API-Set: client
     */
    export function getCollectionName(ped: number | IPed, index: number): string {
        return GetPedCollectionName(ped, index);
    }

    /**
     * Gets collection name for the given global drawable ID. Together with [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) is used to get collection and local index (inside the given collection) of the drawable. The collection name and index are used in functions like [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA).
     *
     * Hash: 0xD6BBA48B | Since: unknown | API-Set: client
     */
    export function getCollectionNameFromDrawable(ped: number | IPed, componentId: number, drawableId: number): string {
        return GetPedCollectionNameFromDrawable(ped, componentId, drawableId);
    }

    /**
     * Gets collection name for the given global prop index. Together with [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) is used to get collection and local index (inside the given collection) of the prop. The collection name and index are used in functions like [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB).
     *
     * Hash: 0x8ED0C17 | Since: unknown | API-Set: client
     */
    export function getCollectionNameFromProp(ped: number | IPed, anchorPoint: number, propIndex: number): string {
        return GetPedCollectionNameFromProp(ped, anchorPoint, propIndex);
    }

    /**
     * Returns a list of decorations applied to a ped.
     *
     * The data returned adheres to the following layout:
     *
     * ```
     * [ [ collectionHash1, overlayHash1 ], ..., [c ollectionHashN, overlayHashN ] ]
     * ```
     *
     * This command will return undefined data if invoked on a remote player ped.
     *
     * Hash: 0x7CCE1163 | Since: unknown | API-Set: client
     */
    export function getDecorations(ped: number | IPed): number {
        return GetPedDecorations(ped);
    }

    /**
     * A getter for [SET_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\_0x95E3D6257B166CF2).
     *
     * Hash: 0xF5A904F9 | Since: unknown | API-Set: client
     */
    export function getDensityMultiplier(): number {
        return GetPedDensityMultiplier();
    }

    /**
     * Returns global drawable index based on the local one. Is it a reverse to [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Drawables are stored inside collections. Each collection usually corresponds to a certain DCL or the base game.
     *
     * If all drawables from all collections are placed into one continuous array - the global index will correspond to the index of drawable in such array. Local index is index of drawable in this array relative to the start of the given collection.
     *
     * Hash: 0x280F1FC3 | Since: unknown | API-Set: client
     */
    export function getDrawableGlobalIndexFromCollection(ped: number | IPed, componentId: number, collection: string, drawableId: number): number {
        return GetPedDrawableGlobalIndexFromCollection(ped, componentId, collection, drawableId);
    }

    /**
     * An analogue to [GET_PED_DRAWABLE_VARIATION](#\_0x67F3780DD425D4FC) that returns collection local drawable index (inside [GET_PED_DRAWABLE_VARIATION_COLLECTION_NAME](#\_0xBCE0AB63) collection) instead of the global drawable index.
     *
     * Hash: 0x9970386F | Since: unknown | API-Set: client
     */
    export function getDrawableVariationCollectionLocalIndex(ped: number | IPed, componentId: number): number {
        return GetPedDrawableVariationCollectionLocalIndex(ped, componentId);
    }

    /**
     * An analogue to [GET_PED_DRAWABLE_VARIATION](#\_0x67F3780DD425D4FC) that returns collection name instead of the global drawable index.
     *
     * Should be used together with [GET_PED_DRAWABLE_VARIATION_COLLECTION_LOCAL_INDEX](#\_0x9970386F).
     *
     * Hash: 0xBCE0AB63 | Since: unknown | API-Set: client
     */
    export function getDrawableVariationCollectionName(ped: number | IPed, componentId: number): string {
        return GetPedDrawableVariationCollectionName(ped, componentId);
    }

    /**
     * A getter for [\_SET_PED_EYE_COLOR](#\_0x50B56988B170AFDF). Returns -1 if fails to get.
     *
     * Hash: 0xA47B860F | Since: unknown | API-Set: client
     */
    export function getEyeColor(ped: number | IPed): number {
        return GetPedEyeColor(ped);
    }

    /**
     * A getter for [\_SET_PED_FACE_FEATURE](#\_0x71A5C1DBA060049E). Returns 0.0 if fails to get.
     *
     * Hash: 0xBA352ADD | Since: unknown | API-Set: client
     */
    export function getFaceFeature(ped: number | IPed, index: number): number {
        return GetPedFaceFeature(ped, index);
    }

    /**
     * A getter for [\_SET_PED_HAIR_COLOR](#\_0x4CFFC65454C93A49). Returns -1 if fails to get.
     *
     * Hash: 0xA3EA2893 | Since: unknown | API-Set: client
     */
    export function getHairColor(ped: number | IPed): number {
        return GetPedHairColor(ped);
    }

    /**
     * A getter for [\_SET_PED_HAIR_COLOR](#\_0x4CFFC65454C93A49). Returns -1 if fails to get.
     *
     * Hash: 0x4B087305 | Since: unknown | API-Set: client
     */
    export function getHairHighlightColor(ped: number | IPed): number {
        return GetPedHairHighlightColor(ped);
    }

    /**
     * A getter for [SET_PED_HEAD_OVERLAY](#\_0x48F44967FA05CC1E) and [\_SET_PED_HEAD_OVERLAY_COLOR](#\_0x497BF74A7B9CB952) natives.
     *
     * Hash: 0xC46EE605 | Since: unknown | API-Set: client
     */
    export function getHeadOverlayData(ped: number | IPed, index: number): [boolean, number, number, number, number, number] {
        return GetPedHeadOverlayData(ped, index);
    }

    /**
     * Gets a ped model's health config.
     *
     * Hash: 0xF71542F7 | Since: unknown | API-Set: client
     */
    export function getModelHealthConfig(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetPedModelHealthConfig(modelHash);
    }

    /**
     * Gets a ped model's personality type.
     *
     * Hash: 0xFE08CAD6 | Since: unknown | API-Set: client
     */
    export function getModelPersonality(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetPedModelPersonality(modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69E81E3D | Since: unknown | API-Set: client
     */
    export function getMovementClipset(ped: number | IPed): number {
        return GetPedMovementClipset(ped);
    }

    /**
     * An analogue to [GET_PED_PROP_INDEX](#\_0x898CC20EA75BACD8) that returns collection local prop index (inside [GET_PED_PROP_COLLECTION_NAME](#\_0x6B5653E4) collection) instead of the global prop index.
     *
     * Hash: 0xCD420AD1 | Since: unknown | API-Set: client
     */
    export function getPropCollectionLocalIndex(ped: number | IPed, anchorPoint: number): number {
        return GetPedPropCollectionLocalIndex(ped, anchorPoint);
    }

    /**
     * An analogue to [GET_PED_PROP_INDEX](#\_0x898CC20EA75BACD8) that returns collection name instead of the global drawable index.
     *
     * Should be used together with [GET_PED_PROP_COLLECTION_LOCAL_INDEX](#\_0xCD420AD1).
     *
     * Hash: 0x6B5653E4 | Since: unknown | API-Set: client
     */
    export function getPropCollectionName(ped: number | IPed, anchorPoint: number): string {
        return GetPedPropCollectionName(ped, anchorPoint);
    }

    /**
     * Returns global prop index based on the local one. Is it a reverse to [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) natives.
     *
     * Props are stored inside collections. Each collection usually corresponds to a certain DCL or the base game.
     *
     * If all props from all collections are placed into one continuous array - the global index will correspond to the index of the prop in such array. Local index is index of the prop in this array relative to the start of the given collection.
     *
     * Hash: 0x2CB45CDC | Since: unknown | API-Set: client
     */
    export function getPropGlobalIndexFromCollection(ped: number | IPed, anchorPoint: number, collection: string, propIndex: number): number {
        return GetPedPropGlobalIndexFromCollection(ped, anchorPoint, collection, propIndex);
    }

    /**
     * A getter for [SET_PED_SWEAT](#\_0x27B0405F59637D1F).
     *
     * Hash: 0x44B91E94 | Since: unknown | API-Set: client
     */
    export function getSweat(ped: number | IPed): number {
        return GetPedSweat(ped);
    }

    /**
     * An alternative to [IS_PED_COMPONENT_VARIATION_GEN9\_EXCLUSIVE](#\_0xC767B581) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0x33B2AFA2 | Since: unknown | API-Set: client
     */
    export function isCollectionComponentVariationGen9Exclusive(ped: number | IPed, componentId: number, collection: string, drawableId: number): boolean {
        return IsPedCollectionComponentVariationGen9Exclusive(ped, componentId, collection, drawableId);
    }

    /**
     * An alternative to [IS_PED_COMPONENT_VARIATION_VALID](#\_0xE825F6B6CEA7671D) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0xCA63A52A | Since: unknown | API-Set: client
     */
    export function isCollectionComponentVariationValid(ped: number | IPed, componentId: number, collection: string, drawableId: number, textureId: number): boolean {
        return IsPedCollectionComponentVariationValid(ped, componentId, collection, drawableId, textureId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC767B581 | Since: unknown | API-Set: client
     */
    export function isComponentVariationGen9Exclusive(ped: number | IPed, componentId: number, drawableId: number): boolean {
        return IsPedComponentVariationGen9Exclusive(ped, componentId, drawableId);
    }

    /**
     * Sets whether peds can stand on top of *all* vehicles without falling off.
     *
     * Note this flag is not replicated automatically, you will have to manually do so.
     *
     * Hash: 0x90A9E0B2 | Since: unknown | API-Set: client
     */
    export function overridesCanStandOnTopFlag(flag: boolean): void {
        OverridePedsCanStandOnTopFlag(flag);
    }

    /**
     * Allows the bypassing of default game behavior that prevents the use of [SET_PED_DRIVE_BY_CLIPSET_OVERRIDE](#\_0xED34AB6C5CB36520) in certain scenarios to avoid clipping issues (e.g., when there is more than one Ped in a vehicle).
     *
     * Note: This flag and the overridden clipset are not replicated values and require synchronization through user scripts. Additionally, current game behavior also restricts applying this clipset locally when in first-person mode and will require a temporary workaround.
     *
     * Hash: 0xB14F8EAD | Since: unknown | API-Set: client
     */
    export function overridesUseDefaultDriveByClipset(flag: boolean): void {
        OverridePedsUseDefaultDriveByClipset(flag);
    }

    /**
     * Restores an overridden ped model personality type to the default value.
     *
     * Hash: 0x79A12861 | Since: unknown | API-Set: client
     */
    export function resetModelPersonality(modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        ResetPedModelPersonality(modelHash);
    }

    /**
     * An alternative to [SET_PED_COMPONENT_VARIATION](#\_0x262B14F48D29DE80) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0x88711BBA | Since: unknown | API-Set: client
     */
    export function setCollectionComponentVariation(ped: number | IPed, componentId: number, collection: string, drawableId: number, textureId: number, paletteId: number): void {
        SetPedCollectionComponentVariation(ped, componentId, collection, drawableId, textureId, paletteId);
    }

    /**
     * An alternative to [SET_PED_PRELOAD_PROP_DATA](#\_0x2B16A3BFF1FBCE49) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) natives.
     *
     * Hash: 0x14B5BBE0 | Since: unknown | API-Set: client
     */
    export function setCollectionPreloadPropData(ped: number | IPed, anchorPoint: number, collection: string, propIndex: number, textureId: number): void {
        SetPedCollectionPreloadPropData(ped, anchorPoint, collection, propIndex, textureId);
    }

    /**
     * An alternative to [SET_PED_PRELOAD_VARIATION_DATA](#\_0x39D55A620FCB6A3A) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0x3EC75558 | Since: unknown | API-Set: client
     */
    export function setCollectionPreloadVariationData(ped: number | IPed, componentId: number, collection: string, drawableId: number, textureId: number): void {
        SetPedCollectionPreloadVariationData(ped, componentId, collection, drawableId, textureId);
    }

    /**
     * An alternative to [SET_PED_PROP_INDEX](#\_0x93376B65A266EB5F) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) natives.
     *
     * Hash: 0x75240BCB | Since: unknown | API-Set: client
     */
    export function setCollectionPropIndex(ped: number | IPed, anchorPoint: number, collection: string, propIndex: number, textureId: number, attach: boolean): void {
        SetPedCollectionPropIndex(ped, anchorPoint, collection, propIndex, textureId, attach);
    }

    /**
     * Override the limits on the number and types of melee combatants. The game is limited to at most ten combatants among the three types: primary, secondary, and observers.
     *
     * This native infers the number of observers based on the primary and secondary counts.
     *
     * Hash: 0x8E51EC29 | Since: unknown | API-Set: client
     */
    export function setMeleeCombatLimits(primaryCount: number, secondaryCount: number, populationPedCount: number): void {
        SetPedMeleeCombatLimits(primaryCount, secondaryCount, populationPedCount);
    }

    /**
     * Sets a ped model's health config.
     * Takes effect only after setting player model with `SET_PLAYER_MODEL`.
     *
     * Hash: 0xAF12A05D | Since: unknown | API-Set: client
     */
    export function setModelHealthConfig(modelHash: number | string, configName: string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetPedModelHealthConfig(modelHash, configName);
    }

    /**
     * Overrides a ped model personality type.
     *
     * Hash: 0x46F6B38B | Since: unknown | API-Set: client
     */
    export function setModelPersonality(modelHash: number | string, personalityHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        if (typeof personalityHash === 'string') personalityHash = misc.getHashKey(personalityHash)
        SetPedModelPersonality(modelHash, personalityHash);
    }

    /**
     * Purpose: The game's default values for these make shooting while traveling Left quite a bit slower than shooting while traveling right (This could be a game-balance thing?)
     *
     * Default Min: -45 Degrees
     * Default Max: 135 Degrees
     *
     * ```
     * \ ,- ~ ||~ - ,
     * , ' \    x   x    ' ,
     * ```
     *
     * ,      \    x    x   x  ,
     * ,         \  x     x      ,
     * ,            \     x    x  ,
     * ,              \      x    ,
     * ,                \   x     ,
     * ,                 \   x x ,
     * ,                  \  x ,
     * ,                 , '
     * ' - , \_ \_ \_ ,  '  \\
     *
     * If the transition angle is within the shaded portion (x), there will be no transition(Quicker)
     * The angle corresponds to where you are looking(North on the circle) vs. the heading of your Ped.
     * Note: For some reason,
     *
     * You can set these values to whatever you'd like with this native, but keep in mind that the transitional spin is only clockwise for some reason.
     *
     * I'd personally recommend something like -135/135
     *
     * Hash: 0xB300F03 | Since: unknown | API-Set: client
     */
    export function setTurningThresholds(min: number, max: number): void {
        SetPedTurningThresholds(min, max);
    }

    /**
     * Returns the bone matrix of the specified bone id. usefull for entity attachment
     *
     * Hash: 0x9C5E7C9C | Since: unknown | API-Set: client
     */
    export function getBoneMatrix(ped: number | IPed, boneId: number): [Vector3, Vector3, Vector3, Vector3] {
        return GetPedBoneMatrix(ped, boneId);
    }

    /**
     * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
     *
     * Hash: 0x5BA652A0CD14DF2F | Since: 323 | API-Set: unknown
     */
    export function addArmourTo(ped: number | IPed, amount: number): void {
        AddArmourToPed(ped, amount);
    }

    /**
     * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
     *
     * collection - PedDecorationCollection filename hash
     * overlay - Item name hash
     *
     * Example:
     * Entry inside "mpbeach_overlays.xml" -
     * <Item>
     * <uvPos x="0.500000" y="0.500000" />
     * <scale x="0.600000" y="0.500000" />
     * <rotation value="0.000000" />
     * <nameHash>FM_Hair_Fuzz</nameHash>
     * <txdHash>mp_hair_fuzz</txdHash>
     * <txtHash>mp_hair_fuzz</txtHash>
     * <zone>ZONE_HEAD</zone>
     * <type>TYPE_TATTOO</type>
     * <faction>FM</faction>
     * <garment>All</garment>
     * <gender>GENDER_DONTCARE</gender>
     * <award />
     * <awardLevel />
     * </Item>
     *
     * Code:
     * `PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))`
     *
     * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
     *
     * Hash: 0x5F5D1665E352A839 | Since: 323 | API-Set: unknown
     */
    export function addDecorationFromHashes(ped: number | IPed, collection: number | string, overlay: number | string): void {
        if (typeof collection === 'string') collection = misc.getHashKey(collection)
        if (typeof overlay === 'string') overlay = misc.getHashKey(overlay)
        AddPedDecorationFromHashes(ped, collection, overlay);
    }

    /**
     * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
     *
     * Hash: 0x5619BFA07CFD7833 | Since: 323 | API-Set: unknown
     */
    export function addDecorationFromHashesInCorona(ped: number | IPed, collection: number | string, overlay: number | string): void {
        if (typeof collection === 'string') collection = misc.getHashKey(collection)
        if (typeof overlay === 'string') overlay = misc.getHashKey(overlay)
        AddPedDecorationFromHashesInCorona(ped, collection, overlay);
    }

    /**
     * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
     *
     * Hash: 0xF372BC22FCB88606 | Since: 323 | API-Set: unknown
     */
    export function addRelationshipGroup(name: string): [boolean, number] {
        return AddRelationshipGroup(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B5C85C612E5256E | Since: 323 | API-Set: unknown
     */
    export function addScenarioBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return AddScenarioBlockingArea(x1, y1, z1, x2, y2, z2, false, false, false, false, undefined);
    }

    /**
     * damages a ped with the given amount
     *
     * Hash: 0x697157CED63F18D4 | Since: 323 | API-Set: unknown
     */
    export function applyDamageTo(ped: number | IPed, damageAmount: number, weaponType: number | string): void {
        if (typeof weaponType === 'string') weaponType = misc.getHashKey(weaponType)
        ApplyDamageToPed(ped, damageAmount, false, undefined, weaponType);
    }

    /**
     * woundTypes:
     * - soak_splat
     * - wound_sheet
     * - BulletSmall
     * - BulletLarge
     * - ShotgunSmall
     * - ShotgunSmallMonolithic
     * - ShotgunLarge
     * - ShotgunLargeMonolithic
     * - NonFatalHeadshot
     * - stab
     * - BasicSlash
     * - Scripted_Ped_Splash_Back
     * - BackSplash
     *
     * Hash: 0x83F7E01C7B769A26 | Since: 323 | API-Set: unknown
     */
    export function applyBlood(ped: number | IPed, boneIndex: number, rot: Vector3, woundType: string): void {
        ApplyPedBlood(ped, boneIndex, rot.x, rot.y, rot.z, woundType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3311E47B91EDCBBC | Since: 323 | API-Set: unknown
     */
    export function applyBloodByZone(ped: number | IPed): void {
        ApplyPedBloodByZone(ped, 0, 0, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x816F6981C60BF53B | Since: 323 | API-Set: unknown
     */
    export function applyBloodDamageByZone(ped: number | IPed): void {
        ApplyPedBloodDamageByZone(ped, undefined, 0, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF0D582CBF2D9B0F | Since: 323 | API-Set: unknown
     */
    export function applyBloodSpecific(ped: number | IPed): void {
        ApplyPedBloodSpecific(ped, 0, 0, 0, 0, 0, 0, 0, undefined);
    }

    /**
     * enum eDamageZone
     * {
     * DZ_Torso = 0,
     * DZ_Head,
     * DZ_LeftArm,
     * DZ_RightArm,
     * DZ_LeftLeg,
     * DZ_RightLeg,
     * };
     *
     * Decal Names:
     * scar
     * blushing
     * cs_flush_anger
     * cs_flush_anger_face
     * bruise
     * bruise_large
     * herpes
     * ArmorBullet
     * basic_dirt_cloth
     * basic_dirt_skin
     * cs_trev1_dirt
     *
     * APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
     *
     * Hash: 0x397C38AA7B4A5F83 | Since: 323 | API-Set: unknown
     */
    export function applyDamageDecal(ped: number | IPed, damageZone: number, xOffset: number, yOffset: number, heading: number, scale: number, alpha: number, variation: number, fadeIn: boolean, decalName: string): void {
        ApplyPedDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
    }

    /**
     * Damage Packs:
     *
     * "SCR_TrevorTreeBang"
     * "HOSPITAL_0"
     * "HOSPITAL_1"
     * "HOSPITAL_2"
     * "HOSPITAL_3"
     * "HOSPITAL_4"
     * "HOSPITAL_5"
     * "HOSPITAL_6"
     * "HOSPITAL_7"
     * "HOSPITAL_8"
     * "HOSPITAL_9"
     * "SCR_Dumpster"
     * "BigHitByVehicle"
     * "SCR_Finale_Michael_Face"
     * "SCR_Franklin_finb"
     * "SCR_Finale_Michael"
     * "SCR_Franklin_finb2"
     * "Explosion_Med"
     * "SCR_Torture"
     * "SCR_TracySplash"
     * "Skin_Melee_0"
     *
     * Additional damage packs:
     *
     * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
     * Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
     *
     * Hash: 0x46DF918788CB093F | Since: 323 | API-Set: unknown
     */
    export function applyDamagePack(ped: number | IPed, damagePack: string, damage: number, mult: number): void {
        ApplyPedDamagePack(ped, damagePack, damage, mult);
    }

    /**
     * No comment provided
     *
     * Hash: 0x272E4723B56A3B96 | Since: 323 | API-Set: unknown
     */
    export function attachSynchronizedSceneToEntity(sceneID: number, entity: number | IEntity, boneIndex: number): void {
        AttachSynchronizedSceneToEntity(sceneID, entity, boneIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE43A13C9E4CCCBCF | Since: 323 | API-Set: unknown
     */
    export function blockFromGeneratingDeadBodyEventsWhenDead(ped: number | IPed, toggle: boolean): void {
        BlockPedDeadBodyShockingEvents(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEACEEDA81751915C | Since: 323 | API-Set: unknown
     */
    export function canCreateRandomBikeRider(): boolean {
        return CanCreateRandomBikeRider();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5EE2CAFF7F17770D | Since: 323 | API-Set: unknown
     */
    export function canCreateRandomCops(): boolean {
        return CanCreateRandomCops();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8EB95E5B4E56978 | Since: 323 | API-Set: unknown
     */
    export function canCreateRandomDriver(): boolean {
        return CanCreateRandomDriver();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E8349C08E4B82E4 | Since: 323 | API-Set: unknown
     */
    export function canCreateRandom(): boolean {
        return CanCreateRandomPed(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x51AC07A44D4F5B8A | Since: 323 | API-Set: unknown
     */
    export function canKnockOffVehicle(ped: number | IPed): boolean {
        return CanKnockPedOffVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAD42DE3610D0721 | Since: 323 | API-Set: unknown
     */
    export function canInCombatSeeTarget(ped: number | IPed, target: number | IPed): boolean {
        return CanPedInCombatSeeTarget(ped, target);
    }

    /**
     * Prevents the ped from going limp.
     *
     * [Example: Can prevent peds from falling when standing on moving vehicles.]
     *
     * Hash: 0x128F79EDCECE4FD5 | Since: 323 | API-Set: unknown
     */
    export function canRagdoll(ped: number | IPed): boolean {
        return CanPedRagdoll(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6CD5A433374D4CFB | Since: 323 | API-Set: unknown
     */
    export function canSeeHatedPed(ped1: number | IPed, ped2: number | IPed): boolean {
        return CanPedSeeHatedPed(ped1, ped2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DFC81C9B9608549 | Since: 944 | API-Set: unknown
     */
    export function canShuffleToOrFromExtraSeat(ped: number | IPed): [boolean, number] {
        return Citizen.invokeNative('0x2DFC81C9B9608549', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C6A6C19B6C0C496 | Since: 323 | API-Set: unknown
     */
    export function canShuffleToOrFromTurretSeat(ped: number | IPed): [boolean, number] {
        return Citizen.invokeNative('0x9C6A6C19B6C0C496', ped);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xCD8A7537A9B52F06 | Since: 323 | API-Set: unknown
     */
    export function clearAllProps(ped: number | IPed): void {
        ClearAllPedProps(ped, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6CA85E7259CE16B | Since: 323 | API-Set: unknown
     */
    export function clearAllVehicleForcedSeatUsage(ped: number | IPed): void {
        ClearAllPedVehicleForcedSeatUsage(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x637822DC2AFEEBF8 | Since: 1493 | API-Set: unknown
     */
    export function clearCoverPointFor(ped: number | IPed): void {
        ClearFacialClipsetOverride(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x726256CC1EEB182F | Since: 323 | API-Set: unknown
     */
    export function clearFacialIdleAnimOverride(ped: number | IPed): void {
        ClearFacialIdleAnimOverride(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD8D19675ED5FBDCE | Since: 323 | API-Set: unknown
     */
    export function clearAlternateMovementAnim(ped: number | IPed, stance: number): void {
        ClearPedAlternateMovementAnim(ped, stance, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8844BBFCE30AA9E9 | Since: 323 | API-Set: unknown
     */
    export function clearAlternateWalkAnim(ped: number | IPed): void {
        ClearPedAlternateWalkAnim(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8FE22675A5A45817 | Since: 323 | API-Set: unknown
     */
    export function clearBloodDamage(ped: number | IPed): void {
        ClearPedBloodDamage(ped);
    }

    /**
     * Somehow related to changing ped's clothes.
     *
     * Hash: 0x56E3B78C5408D9F4 | Since: 323 | API-Set: unknown
     */
    export function clearBloodDamageByZone(ped: number | IPed): void {
        ClearPedBloodDamageByZone(ped, 0);
    }

    /**
     * p1: from 0 to 5 in the b617d scripts.
     * p2: "blushing" and "ALL" found in the b617d scripts.
     *
     * Hash: 0x523C79AEEFCC4A2A | Since: 323 | API-Set: unknown
     */
    export function clearDamageDecalByZone(ped: number | IPed): void {
        ClearPedDamageDecalByZone(ped, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0E5173C163976E38 | Since: 323 | API-Set: unknown
     */
    export function clearDecorations(ped: number | IPed): void {
        ClearPedDecorations(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3B27E70CEAB9F0C | Since: 323 | API-Set: unknown
     */
    export function clearDecorationsLeaveScars(ped: number | IPed): void {
        ClearPedDecorationsLeaveScars(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4AFE3690D7E0B5AC | Since: 323 | API-Set: unknown
     */
    export function clearDriveByClipsetOverride(ped: number | IPed): void {
        ClearPedDriveByClipsetOverride(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6585D955A68452A5 | Since: 323 | API-Set: unknown
     */
    export function clearEnvDirt(ped: number | IPed): void {
        ClearPedEnvDirt(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80054D7FCC70EEC6 | Since: 323 | API-Set: unknown
     */
    export function clearFallUpperBodyClipsetOverride(ped: number | IPed): void {
        Citizen.invokeNative('0x80054D7FCC70EEC6', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EF6B7AC68E2F01B | Since: 323 | API-Set: unknown
     */
    export function clearLastDamageBone(ped: number | IPed): void {
        ClearPedLastDamageBone(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC79196DCB36F6121 | Since: 323 | API-Set: unknown
     */
    export function clearMotionInCoverClipsetOverride(ped: number | IPed): void {
        ClearPedCoverClipsetOverride(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E05208086BA0651 | Since: 323 | API-Set: unknown
     */
    export function clearNonCreationArea(): void {
        ClearPedNonCreationArea();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1280804F7CFD2D6C | Since: 323 | API-Set: unknown
     */
    export function clearParachutePackVariation(ped: number | IPed): void {
        ClearPedParachutePackVariation(ped);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x0943E5B8E078E76E | Since: 323 | API-Set: unknown
     */
    export function clearProp(ped: number | IPed, propId: number): void {
        ClearPedProp(ped, propId, undefined);
    }

    /**
     * Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
     *
     * Hash: 0xB50EB4CCB29704AC | Since: 323 | API-Set: unknown
     */
    export function clearScubaGearVariation(ped: number | IPed): void {
        ClearPedScubaGearVariation(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x687C0B594907D2E8 | Since: 323 | API-Set: unknown
     */
    export function clearStoredHatProp(ped: number | IPed): void {
        ClearPedStoredHatProp(ped);
    }

    /**
     * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
     *
     * Hash: 0x9C720776DAA43E7E | Since: 323 | API-Set: unknown
     */
    export function clearWetness(ped: number | IPed): void {
        ClearPedWetness(ped);
    }

    /**
     * See SET_RAGDOLL_BLOCKING_FLAGS for flags
     *
     * Hash: 0xD86D101FCFD00A4B | Since: 323 | API-Set: unknown
     */
    export function clearRagdollBlockingFlags(ped: number | IPed, blockingFlag: number): void {
        ClearRagdollBlockingFlags(ped, blockingFlag);
    }

    /**
     * Clears the relationship between two groups. This should be called twice (once for each group).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     * (Credits: Inco)
     *
     * Example:
     * `PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);`
     * `PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);`
     *
     * Hash: 0x5E29243FB56FC6D4 | Since: 323 | API-Set: unknown
     */
    export function clearRelationshipBetweenGroups(relationship: number, group1: number | string, group2: number | string): void {
        if (typeof group1 === 'string') group1 = misc.getHashKey(group1)
        if (typeof group2 === 'string') group2 = misc.getHashKey(group2)
        ClearRelationshipBetweenGroups(relationship, group1, group2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF29A16337FACADB | Since: 323 | API-Set: unknown
     */
    export function clone(ped: number | IPed, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean): number {
        return ClonePed(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
    }

    /**
     * No comment provided
     *
     * Hash: 0x668FD40BCBA5DE48 | Since: 463 | API-Set: unknown
     */
    export function cloneAlt(ped: number | IPed, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean): number {
        return ClonePedEx(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, false);
    }

    /**
     * Copies ped's components and props to targetPed.
     *
     * Hash: 0xE952D6431689AD9A | Since: 323 | API-Set: unknown
     */
    export function cloneToTarget(ped: number | IPed, targetPed: number | IPed): void {
        ClonePedToTarget(ped, targetPed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x148B08C2D2ACB884 | Since: 463 | API-Set: unknown
     */
    export function cloneToTargetAlt(ped: number | IPed, targetPed: number | IPed): void {
        ClonePedToTargetEx(ped, targetPed, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5407B7288D0478B7 | Since: 323 | API-Set: unknown
     */
    export function countsInCombatWithTarget(ped: number | IPed): number {
        return Citizen.invokeNative('0x5407B7288D0478B7', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x336B3D200AB007CB | Since: 323 | API-Set: unknown
     */
    export function countsInCombatWithTargetWithinRadius(ped: number | IPed, pos: Vector3, radius: number): number {
        return Citizen.invokeNative('0x336B3D200AB007CB', ped, pos.x, pos.y, pos.z, radius);
    }

    /**
     * Creates a new ped group.
     * Groups can contain up to 8 peds.
     *
     * The parameter is unused.
     *
     * Returns a handle to the created group, or 0 if a group couldn't be created.
     *
     * Hash: 0x90370EBE0FEE1A3D | Since: 323 | API-Set: unknown
     */
    export function createGroup(unused: number): number {
        return CreateGroup(unused);
    }

    /**
     * Creates a new NaturalMotion message.
     *
     * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
     * messageId: The ID of the NaturalMotion message.
     *
     * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
     *
     * Hash: 0x418EF2A1BCE56685 | Since: 323 | API-Set: unknown
     */
    export function createNmMessage(startImmediately: boolean, messageId: number): void {
        CreateNmMessage(startImmediately, messageId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C4F3BF23B6237DB | Since: 323 | API-Set: unknown
     */
    export function createParachuteBagObject(ped: number | IPed): number {
        return CreateParachuteBagObject(ped, false, false);
    }

    /**
     * https://alloc8or.re/gta5/doc/enums/ePedType.txt
     *
     * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
     *
     * Hash: 0xD49F9B0955C367DE | Since: 323 | API-Set: unknown
     */
    export function create(pedType: number, modelHash: number | string, pos: Vector3, heading: number, isNetwork: boolean, bScriptHostPed: boolean): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreatePed(pedType, modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostPed);
    }

    /**
     * pedType: see CREATE_PED
     *
     * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
     *
     * Hash: 0x7DD959874C1FD534 | Since: 323 | API-Set: unknown
     */
    export function createInsideVehicle(vehicle: number | IVehicle, pedType: number, modelHash: number | string, seat: number, isNetwork: boolean, bScriptHostPed: boolean): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreatePedInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);
    }

    /**
     * vb.net
     * Dim ped_handle As Integer
     * With Game.Player.Character
     * Dim pos As Vector3 = .Position + .ForwardVector * 3
     * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
     * End With
     *
     * Creates a Ped at the specified location, returns the Ped Handle.
     * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
     *
     * Hash: 0xB4AC7D0CF06BFE8F | Since: 323 | API-Set: unknown
     */
    export function createRandom(pos: Vector3): number {
        return CreateRandomPed(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B62392B474F44A0 | Since: 323 | API-Set: unknown
     */
    export function createRandomAsDriver(vehicle: number | IVehicle, returnHandle: boolean): number {
        return CreateRandomPedAsDriver(vehicle, returnHandle);
    }

    /**
     * p6 always 2 (but it doesnt seem to matter...)
     *
     * roll and pitch 0
     * yaw to Ped.rotation
     *
     * Hash: 0x8C18E0F9080ADD73 | Since: 323 | API-Set: unknown
     */
    export function createSynchronizedScene(pos: Vector3, roll: number, pitch: number, yaw: number): number {
        return CreateSynchronizedScene(pos.x, pos.y, pos.z, roll, pitch, yaw, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x62EC273D00187DCA | Since: 323 | API-Set: unknown
     */
    export function createSynchronizedSceneAtMapObject(pos: Vector3, radius: number, _object: number | string): number {
        if (typeof _object === 'string') _object = misc.getHashKey(_object)
        return CreateSynchronizedScene2(pos.x, pos.y, pos.z, radius, _object);
    }

    /**
     * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0x9614299DCB53E54B | Since: 323 | API-Set: unknown
     */
    export function deletePed(ped: number | IPed): void {
        DeletePed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D38F1F04CBB37EA | Since: 323 | API-Set: unknown
     */
    export function detachSynchronizedScene(sceneID: number): void {
        DetachSynchronizedScene(sceneID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA21C118553BBDF02 | Since: 323 | API-Set: unknown
     */
    export function disableHeadBlendPaletteColor(ped: number | IPed): void {
        DisableHeadBlendPaletteColor(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x600048C60D5C2C51 | Since: 323 | API-Set: unknown
     */
    export function disableHeatscaleOverride(ped: number | IPed): void {
        DisablePedHeatscaleOverride(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x733C87D4CE22BEA2 | Since: 323 | API-Set: unknown
     */
    export function disableInjuredOnGroundBehaviour(ped: number | IPed): void {
        Citizen.invokeNative('0x733C87D4CE22BEA2', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C6B0C22F9F40BBE | Since: 323 | API-Set: unknown
     */
    export function doesGroupExist(groupId: number): boolean {
        return DoesGroupExist(groupId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCC6E3B6BB69501F1 | Since: 505 | API-Set: unknown
     */
    export function doesRelationshipGroupExist(groupHash: number | string): boolean {
        if (typeof groupHash === 'string') groupHash = misc.getHashKey(groupHash)
        return DoesRelationshipGroupExist(groupHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A24B067D175A7BD | Since: 678 | API-Set: unknown
     */
    export function doesScenarioBlockingAreaExists(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return DoesScenarioBlockingAreaExist(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFF4710E2A0A6C12 | Since: 323 | API-Set: unknown
     */
    export function dropAmbientProp(ped: number | IPed): void {
        DropAmbientProp(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE2476B9EE4A094F | Since: 1493 | API-Set: unknown
     */
    export function enableMpLight(ped: number | IPed, toggle: boolean): void {
        SetEnableScubaGearLight(ped, toggle);
    }

    /**
     * Forces the ped to fall back and kills it.
     *
     * It doesn't really explode the ped's head but it kills the ped
     *
     * Hash: 0x2D05CED3A38D0F3A | Since: 323 | API-Set: unknown
     */
    export function explodeHead(ped: number | IPed, weaponHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        ExplodePedHead(ped, weaponHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4668D80430D6C299 | Since: 323 | API-Set: unknown
     */
    export function finalizeHeadBlend(ped: number | IPed): void {
        FinalizeHeadBlend(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF287323B0E2C69A | Since: 323 | API-Set: unknown
     */
    export function forceAllHeadingValuesToAlign(ped: number | IPed): void {
        FreezePedCameraRotation(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED3C76ADFA6D07C4 | Since: 323 | API-Set: unknown
     */
    export function forceInstantLegIkSetup(ped: number | IPed): void {
        Citizen.invokeNative('0xED3C76ADFA6D07C4', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2208438012482A1A | Since: 323 | API-Set: unknown
     */
    export function forceAiAndAnimationUpdate(ped: number | IPed): void {
        ForcePedAiAndAnimationUpdate(ped, false, false);
    }

    /**
     * Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.
     *
     * enum eMotionState // 0x92A659FE
     * {
     * MotionState_None = 0xEE717723,
     * MotionState_Idle = 0x9072A713,
     * MotionState_Walk = 0xD827C3DB,
     * MotionState_Run = 0xFFF7E7A4,
     * MotionState_Sprint = 0xBD8817DB,
     * MotionState_Crouch_Idle = 0x43FB099E,
     * MotionState_Crouch_Walk = 0x08C31A98,
     * MotionState_Crouch_Run = 0x3593CF09,
     * MotionState_DoNothing = 0x0EC17E58,
     * MotionState_AnimatedVelocity = 0x551AAC43,
     * MotionState_InVehicle = 0x94D9D58D,
     * MotionState_Aiming = 0x3F67C6AF,
     * MotionState_Diving_Idle = 0x4848CDED,
     * MotionState_Diving_Swim = 0x916E828C,
     * MotionState_Swimming_TreadWater = 0xD1BF11C7,
     * MotionState_Dead = 0x0DBB071C,
     * MotionState_Stealth_Idle = 0x422D7A25,
     * MotionState_Stealth_Walk = 0x042AB6A2,
     * MotionState_Stealth_Run = 0xFB0B79E1,
     * MotionState_Parachuting = 0xBAC0F10B,
     * MotionState_ActionMode_Idle = 0xDA40A0DC,
     * MotionState_ActionMode_Walk = 0xD2905EA7,
     * MotionState_ActionMode_Run = 0x31BADE14,
     * MotionState_Jetpack = 0x535E6A5E
     * };
     *
     * Hash: 0xF28965D04F570DCA | Since: 323 | API-Set: unknown
     */
    export function forceMotionState(ped: number | IPed, motionStateHash: number | string): boolean {
        if (typeof motionStateHash === 'string') motionStateHash = misc.getHashKey(motionStateHash)
        return ForcePedMotionState(ped, motionStateHash, false, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x16E42E800B472221 | Since: 323 | API-Set: unknown
     */
    export function forceToOpenParachute(ped: number | IPed): void {
        ForcePedToOpenParachute(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD33DAA36272177C4 | Since: 323 | API-Set: unknown
     */
    export function forceZeroMassInCollisions(ped: number | IPed): void {
        Citizen.invokeNative('0xD33DAA36272177C4', ped);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xBE22B26DD764C040 | Since: 323 | API-Set: unknown
     */
    export function getAnimInitialOffsetPosition(animDict: string, animName: string, pos: Vector3, rot: Vector3): Vector3 {
        return new Vector3(GetAnimInitialOffsetPosition(animDict, animName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0));
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x4B805E6046EE9E47 | Since: 323 | API-Set: unknown
     */
    export function getAnimInitialOffsetRotation(animDict: string, animName: string, pos: Vector3, rot: Vector3): Vector3 {
        return new Vector3(GetAnimInitialOffsetRotation(animDict, animName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0));
    }

    /**
     * No comment provided
     *
     * Hash: 0x03EA03AF85A85CB7 | Since: 323 | API-Set: unknown
     */
    export function getCanBeGrabbedByScript(ped: number | IPed): boolean {
        return Citizen.invokeNative('0x03EA03AF85A85CB7', ped, false, false, false, false, false, false, false, undefined);
    }

    /**
     * Gets the closest ped in a radius.
     *
     * Ped Types:
     * Any ped = -1
     * Player = 1
     * Male = 4
     * Female = 5
     * Cop = 6
     * Human = 26
     * SWAT = 27
     * Animal = 28
     * Army = 29
     *
     * ------------------
     * P4 P5 P7 P8
     * 1  0  x  x  = return nearest walking Ped
     * 1  x  0  x  = return nearest walking Ped
     * x  1  1  x  = return Ped you are using
     * 0  0  x  x  = no effect
     * 0  x  0  x  = no effect
     *
     * x = can be 1 or 0. Does not have any obvious changes.
     *
     * This function does not return ped who is:
     * 1. Standing still
     * 2. Driving
     * 3. Fleeing
     * 4. Attacking
     *
     * This function only work if the ped is:
     * 1. walking normally.
     * 2. waiting to cross a road.
     *
     * `Note: PED::GET_PED_NEARBY_PEDS works for more peds.`
     *
     * Hash: 0xC33AB876A77F8164 | Since: 323 | API-Set: unknown
     */
    export function getClosest(pos: Vector3, radius: number, pedType: number): [boolean, number] {
        return GetClosestPed(pos.x, pos.y, pos.z, radius, false, false, false, false, pedType);
    }

    /**
     * p0: Ped Handle
     * p1: int i | 0 <= i <= 27
     *
     * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
     *
     * <BlindFireChance value="0.1"/>
     * <WeaponShootRateModifier value="1.0"/>
     * <TimeBetweenBurstsInCover value="1.25"/>
     * <BurstDurationInCover value="2.0"/>
     * <TimeBetweenPeeks value="10.0"/>
     * <WeaponAccuracy value="0.18"/>
     * <FightProficiency value="0.8"/>
     * <StrafeWhenMovingChance value="1.0"/>
     * <WalkWhenStrafingChance value="0.0"/>
     * <AttackWindowDistanceForCover value="55.0"/>
     * <TimeToInvalidateInjuredTarget value="9.0"/>
     * <TriggerChargeTime_Near value="4.0"/>
     * <TriggerChargeTime_Far value="10.0"/>
     *
     * -------------Confirmed by editing combatbehavior.meta:
     * p1:
     * 0=BlindFireChance
     * 1=BurstDurationInCover
     * 3=TimeBetweenBurstsInCover
     * 4=TimeBetweenPeeks
     * 5=StrafeWhenMovingChance
     * 8=WalkWhenStrafingChance
     * 11=AttackWindowDistanceForCover
     * 12=TimeToInvalidateInjuredTarget
     * 16=OptimalCoverDistance
     *
     *
     * Hash: 0x52DFF8A10508090A | Since: 323 | API-Set: unknown
     */
    export function getCombatFloat(ped: number | IPed): number {
        return GetCombatFloat(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD5003B097200F36 | Since: 323 | API-Set: unknown
     */
    export function getDeadPickupCoords(ped: number | IPed): Vector3 {
        return new Vector3(GetDeadPedPickupCoords(ped, 0, 0));
    }

    /**
     * No comment provided
     *
     * Hash: 0xAAA6A3698A69E048 | Since: 323 | API-Set: unknown
     */
    export function getDefaultSecondaryTintForBarber(colorID: number): number {
        return Citizen.invokeNative('0xAAA6A3698A69E048', colorID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA9960D07DADCF10 | Since: 323 | API-Set: unknown
     */
    export function getDefaultSecondaryTintForCreator(colorId: number): number {
        return Citizen.invokeNative('0xEA9960D07DADCF10', colorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF033419D1B81FAE8 | Since: 323 | API-Set: unknown
     */
    export function getFmFemaleShopApparelItemIndex(): number {
        return Citizen.invokeNative('0xF033419D1B81FAE8', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E77FA7A62EE6C4C | Since: 323 | API-Set: unknown
     */
    export function getFmMaleShopApparelItemIndex(): number {
        return Citizen.invokeNative('0x1E77FA7A62EE6C4C', 0);
    }

    /**
     * p1 may be a BOOL representing whether or not the group even exists
     *
     * Hash: 0x8DE69FE35CA09A45 | Since: 323 | API-Set: unknown
     */
    export function getGroupSize(groupID: number): [any, number] {
        return GetGroupSize(groupID);
    }

    /**
     * A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
     *
     * Hash: 0x76BBA2CEE66D47E9 | Since: 1011 | API-Set: unknown
     */
    export function getHeadBlendEyeColor(ped: number | IPed): number {
        return GetPedEyeColor(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5486A79D9FBD342D | Since: 323 | API-Set: unknown
     */
    export function getJackTarget(ped: number | IPed): number {
        return GetJackTarget(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x18A3E9EE1297FD39 | Since: 323 | API-Set: unknown
     */
    export function getMeleeTargetFor(ped: number | IPed): number {
        return GetMeleeTargetForPed(ped);
    }

    /**
     *
     * Function just returns 0
     * void __fastcall ped__get_mount(NativeContext *a1)
     * {
     * NativeContext *v1; // rbx@1
     *
     * v1 = a1;
     * GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
     * v1->Returns->Item1= 0;
     * }
     *
     * Hash: 0xE7E11B8DCBED1058 | Since: 323 | API-Set: unknown
     */
    export function getMount(ped: number | IPed): number {
        return GetMount(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88274C11CF0D866D | Since: 1493 | API-Set: unknown
     */
    export function getMpLightEnabled(ped: number | IPed): boolean {
        return IsScubaGearLightEnabled(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E30E91FB03A2CAF | Since: 323 | API-Set: unknown
     */
    export function getMpOutfitDataFromMetadata(): [boolean, any, any] {
        return Citizen.invokeNative('0x9E30E91FB03A2CAF');
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x27561561732A7842 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfDrawableVariations(ped: number | IPed, componentId: number): number {
        return GetNumberOfPedDrawableVariations(ped, componentId);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x5FAF9754E789FB47 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfPropDrawableVariations(ped: number | IPed, propId: number): number {
        return GetNumberOfPedPropDrawableVariations(ped, propId);
    }

    /**
     * Need to check behavior when drawableId = -1
     *
     * - Doofy.Ass
     * Why this function doesn't work and return nill value?
     * GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
     *
     * tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
     *
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xA6E7F1CEB523E171 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfPropTextureVariations(ped: number | IPed, propId: number, drawableId: number): number {
        return GetNumberOfPedPropTextureVariations(ped, propId, drawableId);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x8F7156A3142A6BAD | Since: 323 | API-Set: unknown
     */
    export function getNumberOfTextureVariations(ped: number | IPed, componentId: number, drawableId: number): number {
        return GetNumberOfPedTextureVariations(ped, componentId, drawableId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE5C0CF872C2AD150 | Since: 323 | API-Set: unknown
     */
    export function getNumHairTints(): number {
        return GetNumHairColors();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1F7CA1535D22818 | Since: 323 | API-Set: unknown
     */
    export function getNumMakeupTints(): number {
        return GetNumMakeupColors();
    }

    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0xDB4EACD4AD0A5D6B | Since: 323 | API-Set: unknown
     */
    export function getheadshotTxdString(id: number): string {
        return GetPedheadshotTxdString(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B128DC36C1E04CF | Since: 323 | API-Set: unknown
     */
    export function getsJacker(ped: number | IPed): number {
        return GetPedsJacker(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x37F4AD56ECBC0CD6 | Since: 323 | API-Set: unknown
     */
    export function getAccuracy(ped: number | IPed): number {
        return GetPedAccuracy(ped);
    }

    /**
     * Returns the ped's alertness (0-3).
     *
     * Values :
     *
     * 0 : Neutral
     * 1 : Heard something (gun shot, hit, etc)
     * 2 : Knows (the origin of the event)
     * 3 : Fully alerted (is facing the event?)
     *
     * If the Ped does not exist, returns -1.
     *
     * Hash: 0xF6AA118530443FD2 | Since: 323 | API-Set: unknown
     */
    export function getAlertness(ped: number | IPed): number {
        return GetPedAlertness(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9483AF821605B1D8 | Since: 323 | API-Set: unknown
     */
    export function getArmour(ped: number | IPed): number {
        return GetPedArmour(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CCE68DBD5FE93EC | Since: 323 | API-Set: unknown
     */
    export function getAsGroupLeader(groupID: number): number {
        return GetPedAsGroupLeader(groupID);
    }

    /**
     * from fm_mission_controller.c4 (variable names changed for clarity):
     *
     * `int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());`
     * `PED::GET_GROUP_SIZE(group, &unused, &groupSize);`
     * if (groupSize >= 1) {
     * . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
     * `. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);`
     * . . . . . . . . //and so on
     *
     * Hash: 0x51455483CF23ED97 | Since: 323 | API-Set: unknown
     */
    export function getAsGroupMember(groupID: number, memberNumber: number): number {
        return GetPedAsGroupMember(groupID, memberNumber);
    }

    /**
     * Gets the position of the specified bone of the specified ped.
     *
     * ped: The ped to get the position of a bone from.
     * boneId: The ID of the bone to get the position from. This is NOT the index.
     * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
     * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
     * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
     *
     * Hash: 0x17C07FC640E86B4E | Since: 323 | API-Set: unknown
     */
    export function getBoneCoords(ped: number | IPed, boneId: number, offsetX: number, offsetY: number, offsetZ: number): Vector3 {
        return new Vector3(GetPedBoneCoords(ped, boneId, offsetX, offsetY, offsetZ));
    }

    /**
     * no bone= -1
     *
     * boneIds:
     * SKEL_ROOT = 0x0,
     * SKEL_Pelvis = 0x2e28,
     * SKEL_L_Thigh = 0xe39f,
     * SKEL_L_Calf = 0xf9bb,
     * SKEL_L_Foot = 0x3779,
     * SKEL_L_Toe0 = 0x83c,
     * IK_L_Foot = 0xfedd,
     * PH_L_Foot = 0xe175,
     * MH_L_Knee = 0xb3fe,
     * SKEL_R_Thigh = 0xca72,
     * SKEL_R_Calf = 0x9000,
     * SKEL_R_Foot = 0xcc4d,
     * SKEL_R_Toe0 = 0x512d,
     * IK_R_Foot = 0x8aae,
     * PH_R_Foot = 0x60e6,
     * MH_R_Knee = 0x3fcf,
     * RB_L_ThighRoll = 0x5c57,
     * RB_R_ThighRoll = 0x192a,
     * SKEL_Spine_Root = 0xe0fd,
     * SKEL_Spine0 = 0x5c01,
     * SKEL_Spine1 = 0x60f0,
     * SKEL_Spine2 = 0x60f1,
     * SKEL_Spine3 = 0x60f2,
     * SKEL_L_Clavicle = 0xfcd9,
     * SKEL_L_UpperArm = 0xb1c5,
     * SKEL_L_Forearm = 0xeeeb,
     * SKEL_L_Hand = 0x49d9,
     * SKEL_L_Finger00 = 0x67f2,
     * SKEL_L_Finger01 = 0xff9,
     * SKEL_L_Finger02 = 0xffa,
     * SKEL_L_Finger10 = 0x67f3,
     * SKEL_L_Finger11 = 0x1049,
     * SKEL_L_Finger12 = 0x104a,
     * SKEL_L_Finger20 = 0x67f4,
     * SKEL_L_Finger21 = 0x1059,
     * SKEL_L_Finger22 = 0x105a,
     * SKEL_L_Finger30 = 0x67f5,
     * SKEL_L_Finger31 = 0x1029,
     * SKEL_L_Finger32 = 0x102a,
     * SKEL_L_Finger40 = 0x67f6,
     * SKEL_L_Finger41 = 0x1039,
     * SKEL_L_Finger42 = 0x103a,
     * PH_L_Hand = 0xeb95,
     * IK_L_Hand = 0x8cbd,
     * RB_L_ForeArmRoll = 0xee4f,
     * RB_L_ArmRoll = 0x1470,
     * MH_L_Elbow = 0x58b7,
     * SKEL_R_Clavicle = 0x29d2,
     * SKEL_R_UpperArm = 0x9d4d,
     * SKEL_R_Forearm = 0x6e5c,
     * SKEL_R_Hand = 0xdead,
     * SKEL_R_Finger00 = 0xe5f2,
     * SKEL_R_Finger01 = 0xfa10,
     * SKEL_R_Finger02 = 0xfa11,
     * SKEL_R_Finger10 = 0xe5f3,
     * SKEL_R_Finger11 = 0xfa60,
     * SKEL_R_Finger12 = 0xfa61,
     * SKEL_R_Finger20 = 0xe5f4,
     * SKEL_R_Finger21 = 0xfa70,
     * SKEL_R_Finger22 = 0xfa71,
     * SKEL_R_Finger30 = 0xe5f5,
     * SKEL_R_Finger31 = 0xfa40,
     * SKEL_R_Finger32 = 0xfa41,
     * SKEL_R_Finger40 = 0xe5f6,
     * SKEL_R_Finger41 = 0xfa50,
     * SKEL_R_Finger42 = 0xfa51,
     * PH_R_Hand = 0x6f06,
     * IK_R_Hand = 0x188e,
     * RB_R_ForeArmRoll = 0xab22,
     * RB_R_ArmRoll = 0x90ff,
     * MH_R_Elbow = 0xbb0,
     * SKEL_Neck_1 = 0x9995,
     * SKEL_Head = 0x796e,
     * IK_Head = 0x322c,
     * FACIAL_facialRoot = 0xfe2c,
     * FB_L_Brow_Out_000 = 0xe3db,
     * FB_L_Lid_Upper_000 = 0xb2b6,
     * FB_L_Eye_000 = 0x62ac,
     * FB_L_CheekBone_000 = 0x542e,
     * FB_L_Lip_Corner_000 = 0x74ac,
     * FB_R_Lid_Upper_000 = 0xaa10,
     * FB_R_Eye_000 = 0x6b52,
     * FB_R_CheekBone_000 = 0x4b88,
     * FB_R_Brow_Out_000 = 0x54c,
     * FB_R_Lip_Corner_000 = 0x2ba6,
     * FB_Brow_Centre_000 = 0x9149,
     * FB_UpperLipRoot_000 = 0x4ed2,
     * FB_UpperLip_000 = 0xf18f,
     * FB_L_Lip_Top_000 = 0x4f37,
     * FB_R_Lip_Top_000 = 0x4537,
     * FB_Jaw_000 = 0xb4a0,
     * FB_LowerLipRoot_000 = 0x4324,
     * FB_LowerLip_000 = 0x508f,
     * FB_L_Lip_Bot_000 = 0xb93b,
     * FB_R_Lip_Bot_000 = 0xc33b,
     * FB_Tongue_000 = 0xb987,
     * RB_Neck_1 = 0x8b93,
     * IK_Root = 0xdd1c
     *
     * Hash: 0x3F428D08BE5AAE31 | Since: 323 | API-Set: unknown
     */
    export function getBoneIndex(ped: number | IPed, boneId: number): number {
        return GetPedBoneIndex(ped, boneId);
    }

    /**
     * Returns the hash of the weapon/model/object that killed the ped.
     *
     * Hash: 0x16FFE42AB2D2DC59 | Since: 323 | API-Set: unknown
     */
    export function getCauseOfDeath(ped: number | IPed): number {
        return GetPedCauseOfDeath(ped);
    }

    /**
     * See SET_PED_COMBAT_MOVEMENT
     *
     * Hash: 0xDEA92412FCAEB3F5 | Since: 323 | API-Set: unknown
     */
    export function getCombatMovement(ped: number | IPed): number {
        return GetPedCombatMovement(ped);
    }

    /**
     * See SET_PED_COMBAT_RANGE
     *
     * Hash: 0xF9D9F7F2DB8E2FA0 | Since: 323 | API-Set: unknown
     */
    export function getCombatRange(ped: number | IPed): number {
        return GetPedCombatRange(ped);
    }

    /**
     * See SET_PED_CONFIG_FLAG
     *
     * Hash: 0x7EE53118C892B513 | Since: 323 | API-Set: unknown
     */
    export function getConfigFlag(ped: number | IPed, flagId: number): boolean {
        return GetPedConfigFlag(ped, flagId, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF60165E1D2C5370B | Since: 323 | API-Set: unknown
     */
    export function getCurrentMoveBlendRatio(ped: number | IPed): [boolean, number, number] {
        return GetPedCurrentMovementSpeed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71EAB450D86954A1 | Since: 323 | API-Set: unknown
     */
    export function getDecorationsState(ped: number | IPed): number {
        return GetPedDecorationsState(ped);
    }

    /**
     * Returns the zoneID for the overlay if it is a member of collection.
     * enum ePedDecorationZone
     * {
     * ZONE_TORSO = 0,
     * ZONE_HEAD = 1,
     * ZONE_LEFT_ARM = 2,
     * ZONE_RIGHT_ARM = 3,
     * ZONE_LEFT_LEG = 4,
     * ZONE_RIGHT_LEG = 5,
     * ZONE_MEDALS = 6,
     * ZONE_INVALID = 7
     * };
     *
     * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
     *
     * Hash: 0x9FD452BFBE7A7A8B | Since: 323 | API-Set: unknown
     */
    export function getDecorationZoneFromHashes(collection: number | string, overlay: number | string): number {
        if (typeof collection === 'string') collection = misc.getHashKey(collection)
        if (typeof overlay === 'string') overlay = misc.getHashKey(overlay)
        return GetPedDecorationZoneFromHashes(collection, overlay);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C06B8786DD94CD1 | Since: 323 | API-Set: unknown
     */
    export function getDefensiveAreaPosition(ped: number | IPed): Vector3 {
        return new Vector3(GetPedDefensiveAreaPosition(ped, false));
    }

    /**
     * No comment provided
     *
     * Hash: 0x65671A4FB8218930 | Since: 2699 | API-Set: unknown
     */
    export function getDiesInWater(ped: number | IPed): boolean {
        return GetPedDiesInWater(ped);
    }

    /**
     * Ids
     * 0 - Head
     * 1 - Beard
     * 2 - Hair
     * 3 - Torso
     * 4 - Legs
     * 5 - Hands
     * 6 - Foot
     * 7 - ------
     * 8 - Accessories 1
     * 9 - Accessories 2
     * 10- Decals
     * 11 - Auxiliary parts for torso
     *
     * Hash: 0x67F3780DD425D4FC | Since: 323 | API-Set: unknown
     */
    export function getDrawableVariation(ped: number | IPed, componentId: number): number {
        return GetPedDrawableVariation(ped, componentId);
    }

    /**
     * Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
     * Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
     *
     * Hash: 0x1461B28A06717D68 | Since: 944 | API-Set: unknown
     */
    export function getEmissiveScale(ped: number | IPed): number {
        return GetPedEmissiveIntensity(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C14D30395A51A3C | Since: 323 | API-Set: unknown
     */
    export function getEnveffScale(ped: number | IPed): number {
        return GetPedEnveffScale(ped);
    }

    /**
     * Gets the offset the specified ped has moved since the previous tick.
     *
     * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
     *
     * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
     *
     * Hash: 0xE0AF41401ADF87E3 | Since: 323 | API-Set: unknown
     */
    export function getExtractedDisplacement(ped: number | IPed, worldSpace: boolean): Vector3 {
        return new Vector3(GetPedExtractedDisplacement(ped, worldSpace));
    }

    /**
     * Returns the group id of which the specified ped is a member of.
     *
     * Hash: 0xF162E133B4E7A675 | Since: 323 | API-Set: unknown
     */
    export function getGroupIndex(ped: number | IPed): number {
        return GetPedGroupIndex(ped);
    }

    /**
     * Input: Haircolor index, value between 0 and 63 (inclusive).
     * Output: RGB values for the haircolor specified in the input.
     *
     * This is used with the hair color swatches scaleform.
     * Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.
     *
     * Hash: 0x4852FC386E2E1BB5 | Since: 323 | API-Set: unknown
     */
    export function getHairTintColor(hairColorIndex: number): [number, number, number] {
        return GetPedHairRgbColor(hairColorIndex);
    }

    /**
     * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
     * pass this struct in the second parameter
     * struct headBlendData
     * {
     * int shapeFirst;
     * int padding1;
     * int shapeSecond;
     * int padding2;
     * int shapeThird;
     * int padding3;
     * int skinFirst;
     * int padding4;
     * int skinSecond;
     * int padding5;
     * int skinThird;
     * int padding6;
     * float shapeMix;
     * int padding7;
     * float skinMix;
     * int padding8;
     * float thirdMix;
     * int padding9;
     * bool isParent;
     * };
     *
     * Hash: 0x2746BD9D88C5C5D0 | Since: 323 | API-Set: unknown
     */
    export function getHeadBlendData(ped: number | IPed): [boolean, any] {
        return GetPedHeadBlendData(ped);
    }

    /**
     * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
     *
     * Used when calling SET_PED_HEAD_BLEND_DATA.
     *
     * Hash: 0x68D353AB88B97E0C | Since: 323 | API-Set: unknown
     */
    export function getHeadBlendFirstIndex(_type: number): number {
        return GetPedHeadBlendFirstIndex(_type);
    }

    /**
     * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
     *
     * Hash: 0x5EF37013A6539C9D | Since: 323 | API-Set: unknown
     */
    export function getHeadBlendNumHeads(_type: number): number {
        return GetPedHeadBlendNumHeads(_type);
    }

    /**
     * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
     *
     * This might be the once removed native GET_PED_HEAD_OVERLAY.
     *
     * Hash: 0xA60EF3B6461A4D43 | Since: 323 | API-Set: unknown
     */
    export function getHeadOverlay(ped: number | IPed, overlayID: number): number {
        return GetPedHeadOverlayValue(ped, overlayID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF1CE768BB43480E | Since: 323 | API-Set: unknown
     */
    export function getHeadOverlayNum(overlayID: number): number {
        return GetPedHeadOverlayNum(overlayID);
    }

    /**
     * No comment provided
     *
     * Hash: 0x451294E859ECC018 | Since: 323 | API-Set: unknown
     */
    export function getHelmetStoredHatPropIndex(ped: number | IPed): number {
        return GetPedHelmetStoredHatPropIndex(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D728C1E12BF5518 | Since: 323 | API-Set: unknown
     */
    export function getHelmetStoredHatTexIndex(ped: number | IPed): number {
        return GetPedHelmetStoredHatTexIndex(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD75960F6BD9EA49C | Since: 323 | API-Set: unknown
     */
    export function getLastDamageBone(ped: number | IPed): [boolean, number] {
        return GetPedLastDamageBone(ped);
    }

    /**
     * Input: Makeup color index, value between 0 and 63 (inclusive).
     * Output: RGB values for the makeup color specified in the input.
     *
     * This is used with the makeup color swatches scaleform.
     * Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.
     *
     * Hash: 0x013E5CFC38CD5387 | Since: 323 | API-Set: unknown
     */
    export function getMakeupTintColor(makeupColorIndex: number): [number, number, number] {
        return GetPedMakeupRgbColor(makeupColorIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4700A416E8324EF3 | Since: 323 | API-Set: unknown
     */
    export function getMaxHealth(ped: number | IPed): number {
        return GetPedMaxHealth(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F69145BBA87BAE7 | Since: 323 | API-Set: unknown
     */
    export function getMoney(ped: number | IPed): number {
        return GetPedMoney(ped);
    }

    /**
     * sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
     * ignore - ped type to ignore
     *
     * Return value is the number of peds found and added to the array passed.
     *
     * -----------------------------------
     *
     * To make this work in most menu bases at least in C++ do it like so,
     *
     * Formatted Example: https://pastebin.com/D8an9wwp
     *
     * -----------------------------------
     *
     * Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
     *
     * Hash: 0x23F8F5FC7E8C4A6B | Since: 323 | API-Set: unknown
     */
    export function getNearbyPeds(ped: number | IPed, ignore: number): [number, any] {
        return GetPedNearbyPeds(ped, ignore);
    }

    /**
     * Returns size of array, passed into the second variable.
     *
     * See below for usage information.
     *
     * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
     *
     * //Setup the array
     * const int numElements = 10;
     * const int arrSize = numElements * 2 + 2;
     * Any veh[arrSize];
     * //0 index is the size of the array
     * veh[0] = numElements;
     *
     * `int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);`
     *
     * if (veh != NULL)
     * {
     * //Simple loop to go through results
     * for (int i = 0; i < count; i++)
     * {
     * int offsettedID = i * 2 + 2;
     * //Make sure it exists
     * `if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))`
     * {
     * //Do something
     * }
     * }
     * }
     *
     * Hash: 0xCFF869CBFA210D82 | Since: 323 | API-Set: unknown
     */
    export function getNearbyVehicles(ped: number | IPed): [number, any] {
        return GetPedNearbyVehicles(ped);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xE3DD5F2A84B42281 | Since: 323 | API-Set: unknown
     */
    export function getPaletteVariation(ped: number | IPed, componentId: number): number {
        return GetPedPaletteVariation(ped, componentId);
    }

    /**
     * -1: no landing
     * 0: landing on both feet
     * 1: stumbling
     * 2: rolling
     * 3: ragdoll
     *
     * Hash: 0x8B9F1FC6AE8166C0 | Since: 323 | API-Set: unknown
     */
    export function getParachuteLandingType(ped: number | IPed): number {
        return GetPedParachuteLandingType(ped);
    }

    /**
     * Returns:
     *
     * -1: Normal
     * 0: Wearing parachute on back
     * 1: Parachute opening
     * 2: Parachute open
     * 3: Falling to doom (e.g. after exiting parachute)
     *
     * Normal means no parachute?
     *
     * Hash: 0x79CFD9827CC979B6 | Since: 323 | API-Set: unknown
     */
    export function getParachuteState(ped: number | IPed): number {
        return GetPedParachuteState(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAF5F7E5AE7C6C9D | Since: 323 | API-Set: unknown
     */
    export function getParachuteTintIndex(ped: number | IPed): number {
        return GetPedParachuteTintIndex(ped);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x898CC20EA75BACD8 | Since: 323 | API-Set: unknown
     */
    export function getPropIndex(ped: number | IPed, componentId: number): number {
        return GetPedPropIndex(ped, componentId, undefined);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xE131A28626F81AB2 | Since: 323 | API-Set: unknown
     */
    export function getPropTextureIndex(ped: number | IPed, componentId: number): number {
        return GetPedPropTextureIndex(ped, componentId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2057EF813397A772 | Since: 323 | API-Set: unknown
     */
    export function getRagdollBoneIndex(ped: number | IPed, bone: number): number {
        return GetPedRagdollBoneIndex(ped, bone);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42FDD0F017B1E38E | Since: 323 | API-Set: unknown
     */
    export function getRelationshipGroupDefaultHash(ped: number | IPed): number {
        return GetPedRelationshipGroupDefaultHash(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7DBDD04862D95F04 | Since: 323 | API-Set: unknown
     */
    export function getRelationshipGroupHash(ped: number | IPed): number {
        return GetPedRelationshipGroupHash(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAF9E59B1B1FBF2A0 | Since: 323 | API-Set: unknown
     */
    export function getResetFlag(ped: number | IPed, flagId: number): boolean {
        return GetPedResetFlag(ped, flagId);
    }

    /**
     * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
     *
     * Is best to check if the Ped is dead before asking for its killer.
     *
     * Hash: 0x93C8B64DEB84728C | Since: 323 | API-Set: unknown
     */
    export function getSourceOfDeath(ped: number | IPed): number {
        return GetPedSourceOfDeath(ped);
    }

    /**
     * Returns whether the entity is in stealth mode
     *
     * Hash: 0x7C2AC9CA66575FBF | Since: 323 | API-Set: unknown
     */
    export function getStealthMovement(ped: number | IPed): boolean {
        return GetPedStealthMovement(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x32C27A11307B01CC | Since: 2372 | API-Set: unknown
     */
    export function getTargetFromCombatPed(ped: number | IPed): number {
        return GetPedTaskCombatTarget(ped, undefined);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x04A355E041E004E6 | Since: 323 | API-Set: unknown
     */
    export function getTextureVariation(ped: number | IPed, componentId: number): number {
        return GetPedTextureVariation(ped, componentId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E98817B311AE98A | Since: 323 | API-Set: unknown
     */
    export function getTimeOfDeath(ped: number | IPed): number {
        return GetPedTimeOfDeath(ped);
    }

    /**
     * https://alloc8or.re/gta5/doc/enums/ePedType.txt
     *
     * Hash: 0xFF059E1E4C01E63C | Since: 323 | API-Set: unknown
     */
    export function getType(ped: number | IPed): number {
        return GetPedType(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF2C71A32CAD5FBD | Since: 1493 | API-Set: unknown
     */
    export function getVisualFieldCenterAngle(ped: number | IPed): number {
        return GetPedVisualFieldCenterAngle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A3975DEA89F9A17 | Since: 323 | API-Set: unknown
     */
    export function getPlayerIsFollowing(ped: number | IPed): number | string {
        return GetPlayerPedIsFollowing(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA656A3BB01BDEA3 | Since: 2189 | API-Set: unknown
     */
    export function getPosFromFiredEvent(ped: number | IPed, eventType: number): [boolean, any] {
        return GetPedEventData(ped, eventType);
    }

    /**
     * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
     *
     * Ped Types:
     * Any = -1
     * Player = 1
     * Male = 4
     * Female = 5
     * Cop = 6
     * Human = 26
     * SWAT = 27
     * Animal = 28
     * Army = 29
     *
     * Hash: 0x876046A8E3A4B71C | Since: 323 | API-Set: unknown
     */
    export function getRandomAtCoord(pos: Vector3, xRadius: number, yRadius: number, zRadius: number, pedType: number): number {
        return GetRandomPedAtCoord(pos.x, pos.y, pos.z, xRadius, yRadius, zRadius, pedType);
    }

    /**
     * Gets the relationship between two groups. This should be called twice (once for each group).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     *
     * Example:
     * `PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);`
     * `PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);`
     *
     * Hash: 0x9E6B70061662AE5C | Since: 323 | API-Set: unknown
     */
    export function getRelationshipBetweenGroups(group1: number | string, group2: number | string): number {
        if (typeof group1 === 'string') group1 = misc.getHashKey(group1)
        if (typeof group2 === 'string') group2 = misc.getHashKey(group2)
        return GetRelationshipBetweenGroups(group1, group2);
    }

    /**
     * Gets the relationship between two peds. This should be called twice (once for each ped).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     * (Credits: Inco)
     *
     * Example:
     * `PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);`
     * `PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);`
     *
     * Hash: 0xEBA5AD3A0EAF7121 | Since: 323 | API-Set: unknown
     */
    export function getRelationshipBetweens(ped1: number | IPed, ped2: number | IPed): number {
        return GetRelationshipBetweenPeds(ped1, ped2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F4C85ACD641BCD2 | Since: 323 | API-Set: unknown
     */
    export function getSeatIsTryingToEnter(ped: number | IPed): number {
        return GetSeatPedIsTryingToEnter(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4A310B1D7FA73CC | Since: 323 | API-Set: unknown
     */
    export function getSynchronizedScenePhase(sceneID: number): number {
        return GetSynchronizedScenePhase(sceneID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD80932D577274D40 | Since: 323 | API-Set: unknown
     */
    export function getSynchronizedSceneRate(sceneID: number): number {
        return GetSynchronizedSceneRate(sceneID);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36B77BB84687C318 | Since: 323 | API-Set: unknown
     */
    export function getTimeDamagedByWeapon(ped: number | IPed, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetTimeOfLastPedWeaponDamage(ped, weaponHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC56FBF2F228E1DAC | Since: 323 | API-Set: unknown
     */
    export function getTintIndexForLastGenHairTexture(modelHash: number | string, drawableId: number, textureId: number): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return Citizen.invokeNative('0xC56FBF2F228E1DAC', modelHash, drawableId, textureId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x511F1A683387C7E2 | Since: 323 | API-Set: unknown
     */
    export function getTrackedPixelcount(ped: number | IPed): number {
        return Citizen.invokeNative('0x511F1A683387C7E2', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF92691AED837A5FC | Since: 323 | API-Set: unknown
     */
    export function getVehicleIsEntering(ped: number | IPed): number {
        return GetVehiclePedIsEntering(ped);
    }

    /**
     * Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
     *
     * Hash: 0x9A9112A0FE9A4713 | Since: 323 | API-Set: unknown
     */
    export function getVehicleIsIn(ped: number | IPed, includeEntering: boolean): number {
        return GetVehiclePedIsIn(ped, includeEntering);
    }

    /**
     * No comment provided
     *
     * Hash: 0x814FA8BE5449445D | Since: 323 | API-Set: unknown
     */
    export function getVehicleIsTryingToEnter(ped: number | IPed): number {
        return GetVehiclePedIsTryingToEnter(ped);
    }

    /**
     * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
     *
     * Hash: 0x6094AD011A2EA87D | Since: 323 | API-Set: unknown
     */
    export function getVehicleIsUsing(ped: number | IPed): number {
        return GetVehiclePedIsUsing(ped);
    }

    /**
     * PoliceMotorcycleHelmet   1024
     * RegularMotorcycleHelmet   4096
     * FiremanHelmet 16384
     * PilotHeadset  32768
     * PilotHelmet   65536
     * --
     * p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
     *
     * Hash: 0x54C7C4A94367717E | Since: 323 | API-Set: unknown
     */
    export function giveHelmet(ped: number | IPed, cannotRemove: boolean, helmetFlag: number, textureIndex: number): void {
        GivePedHelmet(ped, cannotRemove, helmetFlag, textureIndex);
    }

    /**
     * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
     *
     * If a message hasn't been created already, this function does nothing.
     * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
     * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
     *
     * Call order:
     * SET_PED_TO_RAGDOLL
     * CREATE_NM_MESSAGE
     * GIVE_PED_NM_MESSAGE
     *
     * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
     * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
     * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
     * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
     * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
     * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
     * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
     * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
     *
     * Hash: 0xB158DFCCC56E5C5B | Since: 323 | API-Set: unknown
     */
    export function giveNmMessage(ped: number | IPed): void {
        GivePedNmMessage(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4B5F4BF2CB24E65 | Since: 323 | API-Set: unknown
     */
    export function hasActionModeAssetLoaded(asset: string): boolean {
        return HasActionModeAssetLoaded(asset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x876928DDDFCCC9CD | Since: 323 | API-Set: unknown
     */
    export function hasheadshotImgUploadFailed(): boolean {
        return HasPedheadshotImgUploadFailed();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE8A169E666CBC541 | Since: 323 | API-Set: unknown
     */
    export function hasheadshotImgUploadSucceeded(): boolean {
        return HasPedheadshotImgUploadSucceeded();
    }

    /**
     * No comment provided
     *
     * Hash: 0x654CD0A825161131 | Since: 323 | API-Set: unknown
     */
    export function hasHeadBlendFinished(ped: number | IPed): boolean {
        return HasPedHeadBlendFinished(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x784002A632822099 | Since: 323 | API-Set: unknown
     */
    export function hasPreloadPropDataFinished(ped: number | IPed): boolean {
        return HasPedPreloadPropDataFinished(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66680A92700F43DF | Since: 323 | API-Set: unknown
     */
    export function hasPreloadVariationDataFinished(ped: number | IPed): boolean {
        return HasPedPreloadVariationDataFinished(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8507BCB710FA6DC0 | Since: 323 | API-Set: unknown
     */
    export function hasReceivedEvent(ped: number | IPed, eventId: number): boolean {
        return HasPedReceivedEvent(ped, eventId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE977FC5B08AF3441 | Since: 323 | API-Set: unknown
     */
    export function hasStealthModeAssetLoaded(asset: string): boolean {
        return HasStealthModeAssetLoaded(asset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7350823473013C02 | Since: 323 | API-Set: unknown
     */
    export function haveAllStreamingRequestsCompleted(ped: number | IPed): boolean {
        return HaveAllStreamingRequestsCompleted(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x62AB793144DE75DC | Since: 323 | API-Set: unknown
     */
    export function hideBloodDamageByZone(ped: number | IPed): void {
        HidePedBloodDamageByZone(ped, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4759CC730F947C81 | Since: 323 | API-Set: unknown
     */
    export function instantlyFillPopulation(): void {
        InstantlyFillPedPopulation();
    }

    /**
     * No comment provided
     *
     * Hash: 0x68772DB2B2526F9F | Since: 323 | API-Set: unknown
     */
    export function isAnyHostileNearPoint(ped: number | IPed, pos: Vector3, radius: number): boolean {
        return IsAnyHostilePedNearPoint(ped, pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x083961498679DC9F | Since: 323 | API-Set: unknown
     */
    export function isAnyNearPoint(pos: Vector3, radius: number): boolean {
        return IsAnyPedNearPoint(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0D3D71EA1086C55 | Since: 323 | API-Set: unknown
     */
    export function isAnyShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsAnyPedShootingInArea(x1, y1, z1, x2, y2, z2, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0A0AEC214B1FABA | Since: 323 | API-Set: unknown
     */
    export function isConversationDead(ped: number | IPed): boolean {
        return IsConversationPedDead(ped);
    }

    /**
     * xyz - relative to the world origin.
     *
     * Hash: 0x16EC4839969F9F5E | Since: 323 | API-Set: unknown
     */
    export function isCopInArea3d(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsCopPedInArea3d(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2385935BFFD4D92 | Since: 323 | API-Set: unknown
     */
    export function isCurrentHeadPropAHelmet(): boolean {
        return Citizen.invokeNative('0xF2385935BFFD4D92', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA3F3564A5B3646C0 | Since: 323 | API-Set: unknown
     */
    export function isMobilePhoneToEar(ped: number | IPed): boolean {
        return Citizen.invokeNative('0xA3F3564A5B3646C0', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEBB376779A760AA8 | Since: 323 | API-Set: unknown
     */
    export function isheadshotImgUploadAvailable(): boolean {
        return IsPedheadshotImgUploadAvailable();
    }

    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0x7085228842B13A67 | Since: 323 | API-Set: unknown
     */
    export function isheadshotReady(id: number): boolean {
        return IsPedheadshotReady(id);
    }

    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0xA0A9668F158129A2 | Since: 323 | API-Set: unknown
     */
    export function isheadshotValid(id: number): boolean {
        return IsPedheadshotValid(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3998B1276A3300E5 | Since: 323 | API-Set: unknown
     */
    export function isAimingFromCover(ped: number | IPed): boolean {
        return IsPedAimingFromCover(ped);
    }

    /**
     * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
     *
     * Hash: 0x12534C348C6CB68B | Since: 323 | API-Set: unknown
     */
    export function isAPlayer(ped: number | IPed): boolean {
        return IsPedAPlayer(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A497FE2DF198913 | Since: 323 | API-Set: unknown
     */
    export function isBeingJacked(ped: number | IPed): boolean {
        return IsPedBeingJacked(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x863B23EFDE9C5DF2 | Since: 323 | API-Set: unknown
     */
    export function isBeingStealthKilled(ped: number | IPed): boolean {
        return IsPedBeingStealthKilled(ped);
    }

    /**
     * p1 is always 0
     *
     * Hash: 0x4FBACCE3B4138EE8 | Since: 323 | API-Set: unknown
     */
    export function isBeingStunned(ped: number | IPed): boolean {
        return IsPedBeingStunned(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x09E7ECA981D9B210 | Since: 1290 | API-Set: unknown
     */
    export function isBlushFacepaintTintForBarber(colorId: number): boolean {
        return IsPedBodyBlemishValid(colorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x604E810189EE3A59 | Since: 323 | API-Set: unknown
     */
    export function isBlushTintForBarber(colorID: number): boolean {
        return IsPedBlushColorValid(colorID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF41B5D290C99A3D6 | Since: 323 | API-Set: unknown
     */
    export function isBlushTintForCreator(colorId: number): boolean {
        return IsPedBlushColorValid2(colorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x53E8CB4F48BFE623 | Since: 323 | API-Set: unknown
     */
    export function isClimbing(ped: number | IPed): boolean {
        return IsPedClimbing(ped);
    }

    /**
     * Checks if the component variation is valid, this works great for randomizing components using loops.
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0xE825F6B6CEA7671D | Since: 323 | API-Set: unknown
     */
    export function isComponentVariationValid(ped: number | IPed, componentId: number, drawableId: number, textureId: number): boolean {
        return IsPedComponentVariationValid(ped, componentId, drawableId, textureId);
    }

    /**
     * Seems to consistently return true if the ped is dead.
     *
     * p1 is always passed 1 in the scripts.
     *
     * I suggest to remove "OR_DYING" part, because it does not detect dying phase.
     *
     * That's what the devs call it, cry about it.
     *
     * lol
     *
     * Hash: 0x3317DEDB88C95038 | Since: 323 | API-Set: unknown
     */
    export function isDeadOrDying(ped: number | IPed): boolean {
        return IsPedDeadOrDying(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA63D9FE45412247 | Since: 323 | API-Set: unknown
     */
    export function isDefensiveAreaActive(ped: number | IPed): boolean {
        return IsPedDefensiveAreaActive(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5527B8246FEF9B11 | Since: 323 | API-Set: unknown
     */
    export function isDiving(ped: number | IPed): boolean {
        return IsPedDiving(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x451D05012CCEC234 | Since: 573 | API-Set: unknown
     */
    export function isDoingABeastJump(): boolean {
        return IsPedDoingBeastJump(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2C086CC1BF8F2BF | Since: 323 | API-Set: unknown
     */
    export function isDoingDriveby(ped: number | IPed): boolean {
        return IsPedDoingDriveby(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD125AE748725C6BC | Since: 323 | API-Set: unknown
     */
    export function isDucking(ped: number | IPed): boolean {
        return IsPedDucking(ped);
    }

    /**
     * Presumably returns the Entity that the Ped is currently diving out of the way of.
     *
     * var num3;
     * `if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)`
     * `if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)`
     *
     * Hash: 0x414641C26E105898 | Since: 323 | API-Set: unknown
     */
    export function isEvasiveDiving(ped: number | IPed): [boolean, number] {
        return IsPedEvasiveDiving(ped);
    }

    /**
     * angle is ped's view cone
     *
     * Hash: 0xD71649DB0A545AA3 | Since: 323 | API-Set: unknown
     */
    export function isFacingPed(ped: number | IPed, otherPed: number | IPed, angle: number): boolean {
        return IsPedFacingPed(ped, otherPed, angle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB92A102F1C4DFA3 | Since: 323 | API-Set: unknown
     */
    export function isFalling(ped: number | IPed): boolean {
        return IsPedFalling(ped);
    }

    /**
     * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
     * If the handle is invalid, the function returns true.
     *
     * Hash: 0xD839450756ED5A80 | Since: 323 | API-Set: unknown
     */
    export function isFatallyInjured(ped: number | IPed): boolean {
        return IsPedFatallyInjured(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBCCE00B381F8482 | Since: 323 | API-Set: unknown
     */
    export function isFleeing(ped: number | IPed): boolean {
        return IsPedFleeing(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC30BDAEE47256C13 | Since: 1868 | API-Set: unknown
     */
    export function isGesturing(): boolean {
        return Citizen.invokeNative('0xC30BDAEE47256C13', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB062B2B5722478E | Since: 323 | API-Set: unknown
     */
    export function isGettingIntoAVehicle(ped: number | IPed): boolean {
        return IsPedGettingIntoAVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F65DBC537E59AD5 | Since: 323 | API-Set: unknown
     */
    export function isGoingIntoCover(ped: number | IPed): boolean {
        return IsPedGoingIntoCover(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9BB01E3834671191 | Since: 323 | API-Set: unknown
     */
    export function isGroupMember(ped: number | IPed, groupId: number): boolean {
        return IsPedGroupMember(ped, groupId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0D36E5D9E99CC21 | Since: 323 | API-Set: unknown
     */
    export function isHairTintForBarber(colorID: number): boolean {
        return IsPedHairColorValid(colorID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED6D8E27A43B8CDE | Since: 323 | API-Set: unknown
     */
    export function isHairTintForCreator(colorId: number): boolean {
        return IsPedHairColorValid2(colorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C86D8AEF8254B78 | Since: 323 | API-Set: unknown
     */
    export function isHangingOnToVehicle(ped: number | IPed): boolean {
        return IsPedHangingOnToVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCF37A457CB96DC0 | Since: 323 | API-Set: unknown
     */
    export function isHeadingTowardsPosition(ped: number | IPed, pos: Vector3): boolean {
        return IsPedHeadingTowardsPosition(ped, pos.x, pos.y, pos.z, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x813A0A7C9D2E831F | Since: 323 | API-Set: unknown
     */
    export function isHeadtrackingEntity(ped: number | IPed, entity: number | IEntity): boolean {
        return IsPedHeadtrackingEntity(ped, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CD3CB88A7F8850D | Since: 323 | API-Set: unknown
     */
    export function isHeadtrackingPed(ped1: number | IPed, ped2: number | IPed): boolean {
        return IsPedHeadtrackingPed(ped1, ped2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9496CE47546DB2C | Since: 791 | API-Set: unknown
     */
    export function isHelmetVisorUp(ped: number | IPed): boolean {
        return IsPedHelmetUnk(ped);
    }

    /**
     * Returns true/false if the ped is/isn't humanoid.
     *
     * Hash: 0xB980061DA992779D | Since: 323 | API-Set: unknown
     */
    export function isHuman(ped: number | IPed): boolean {
        return IsPedHuman(ped);
    }

    /**
     * Returns whether the specified ped is hurt.
     *
     * Hash: 0x5983BB449D7FDB12 | Since: 323 | API-Set: unknown
     */
    export function isHurt(ped: number | IPed): boolean {
        return IsPedHurt(ped);
    }

    /**
     * Gets a value indicating whether this ped's health is below its injured threshold.
     *
     * The default threshold is 100.
     *
     * Hash: 0x84A2DD9AC37C35C1 | Since: 323 | API-Set: unknown
     */
    export function isInjured(ped: number | IPed): boolean {
        return IsPedInjured(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E0E1C2B4F6CB339 | Since: 323 | API-Set: unknown
     */
    export function isInAnyBoat(ped: number | IPed): boolean {
        return IsPedInAnyBoat(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x298B91AE825E5705 | Since: 323 | API-Set: unknown
     */
    export function isInAnyHeli(ped: number | IPed): boolean {
        return IsPedInAnyHeli(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5FFF4CFC74D8FB80 | Since: 323 | API-Set: unknown
     */
    export function isInAnyPlane(ped: number | IPed): boolean {
        return IsPedInAnyPlane(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BD04E29640C9C12 | Since: 323 | API-Set: unknown
     */
    export function isInAnyPoliceVehicle(ped: number | IPed): boolean {
        return IsPedInAnyPoliceVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFBFC01CCFB35D99E | Since: 323 | API-Set: unknown
     */
    export function isInAnySub(ped: number | IPed): boolean {
        return IsPedInAnySub(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E575D6A898AB852 | Since: 323 | API-Set: unknown
     */
    export function isInAnyTaxi(ped: number | IPed): boolean {
        return IsPedInAnyTaxi(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F972C1AB75A1ED0 | Since: 323 | API-Set: unknown
     */
    export function isInAnyTrain(ped: number | IPed): boolean {
        return IsPedInAnyTrain(ped);
    }

    /**
     * Gets a value indicating whether the specified ped is in any vehicle.
     *
     * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
     *
     * Hash: 0x997ABD671D25CA0B | Since: 323 | API-Set: unknown
     */
    export function isInAnyVehicle(ped: number | IPed, atGetIn: boolean): boolean {
        return IsPedInAnyVehicle(ped, atGetIn);
    }

    /**
     * Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
     *
     * `p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4\/\*14\*\/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794`
     *
     * Hash: 0x4859F1FC66A6278E | Since: 323 | API-Set: unknown
     */
    export function isInCombat(ped: number | IPed, target: number | IPed): boolean {
        return IsPedInCombat(ped, target);
    }

    /**
     * p1 is nearly always 0 in the scripts.
     *
     * Hash: 0x60DFD0691A170B88 | Since: 323 | API-Set: unknown
     */
    export function isInCover(ped: number | IPed, exceptUseWeapon: boolean): boolean {
        return IsPedInCover(ped, exceptUseWeapon);
    }

    /**
     * No comment provided
     *
     * Hash: 0x845333B3150583AB | Since: 323 | API-Set: unknown
     */
    export function isInCoverFacingLeft(ped: number | IPed): boolean {
        return IsPedInCoverFacingLeft(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9134873537FA419C | Since: 323 | API-Set: unknown
     */
    export function isInFlyingVehicle(ped: number | IPed): boolean {
        return IsPedInFlyingVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5891CAC5D4ACFF74 | Since: 323 | API-Set: unknown
     */
    export function isInGroup(ped: number | IPed): boolean {
        return IsPedInGroup(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A03BF943D767C93 | Since: 323 | API-Set: unknown
     */
    export function isInHighCover(ped: number | IPed): boolean {
        return IsPedInHighCover(ped);
    }

    /**
     * Notes: The function only returns true while the ped is:
     * A.) Swinging a random melee attack (including pistol-whipping)
     *
     * B.) Reacting to being hit by a melee attack (including pistol-whipping)
     *
     * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
     *
     * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
     *
     * Hash: 0x4E209B2C1EAD5159 | Since: 323 | API-Set: unknown
     */
    export function isInMeleeCombat(ped: number | IPed): boolean {
        return IsPedInMeleeCombat(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x796D90EFB19AA332 | Since: 323 | API-Set: unknown
     */
    export function isInModel(ped: number | IPed, modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return IsPedInModel(ped, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7DCE8BDA0F1C1200 | Since: 323 | API-Set: unknown
     */
    export function isInParachuteFreeFall(ped: number | IPed): boolean {
        return IsPedInParachuteFreeFall(ped);
    }

    /**
     * Gets a value indicating whether the specified ped is in the specified vehicle.
     *
     * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
     *
     * Hash: 0xA3EE4A07279BB9DB | Since: 323 | API-Set: unknown
     */
    export function isInVehicle(ped: number | IPed, vehicle: number | IVehicle, atGetIn: boolean): boolean {
        return IsPedInVehicle(ped, vehicle, atGetIn);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4AE4FF911DFB61DA | Since: 323 | API-Set: unknown
     */
    export function isJacking(ped: number | IPed): boolean {
        return IsPedJacking(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEDABC5900A0BF97 | Since: 323 | API-Set: unknown
     */
    export function isJumping(ped: number | IPed): boolean {
        return IsPedJumping(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x433DDFFE2044B636 | Since: 323 | API-Set: unknown
     */
    export function isJumpingOutOfVehicle(ped: number | IPed): boolean {
        return IsPedJumpingOutOfVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x412F1364FA066CFB | Since: 573 | API-Set: unknown
     */
    export function isLanding(): boolean {
        return Citizen.invokeNative('0x412F1364FA066CFB', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0525A2C2562F3CD4 | Since: 323 | API-Set: unknown
     */
    export function isLipstickTintForBarber(colorID: number): boolean {
        return IsPedLipstickColorValid(colorID);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E802F11FBE27674 | Since: 323 | API-Set: unknown
     */
    export function isLipstickTintForCreator(colorId: number): boolean {
        return IsPedLipstickColorValid2(colorId);
    }

    /**
     * Returns true/false if the ped is/isn't male.
     *
     * Hash: 0x6D9F5FAA7488BA46 | Since: 323 | API-Set: unknown
     */
    export function isMale(ped: number | IPed): boolean {
        return IsPedMale(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9D55B1A358A5BF7 | Since: 323 | API-Set: unknown
     */
    export function isModel(ped: number | IPed, modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return IsPedModel(ped, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x94495889E22C6479 | Since: 323 | API-Set: unknown
     */
    export function isOnAnyBike(ped: number | IPed): boolean {
        return IsPedOnAnyBike(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01FEE67DB37F59B2 | Since: 323 | API-Set: unknown
     */
    export function isOnFoot(ped: number | IPed): boolean {
        return IsPedOnFoot(ped);
    }

    /**
     * `Same function call as PED::GET_MOUNT, aka just returns 0`
     *
     * Hash: 0x460BC76A0E10655E | Since: 323 | API-Set: unknown
     */
    export function isOnMount(ped: number | IPed): boolean {
        return IsPedOnMount(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC5F66E459AF3BB2 | Since: 323 | API-Set: unknown
     */
    export function isOnSpecificVehicle(ped: number | IPed, vehicle: number | IVehicle): boolean {
        return IsPedOnSpecificVehicle(ped, vehicle);
    }

    /**
     * Gets a value indicating whether the specified ped is on top of any vehicle.
     *
     * Return 1 when ped is on vehicle.
     * Return 0 when ped is not on a vehicle.
     *
     *
     * Hash: 0x67722AEB798E5FAB | Since: 323 | API-Set: unknown
     */
    export function isOnVehicle(ped: number | IPed): boolean {
        return IsPedOnVehicle(ped);
    }

    /**
     * Returns true if the ped is currently opening a door (CTaskOpenDoor).
     *
     * Hash: 0x26AF0E8E30BD2A2C | Since: 323 | API-Set: unknown
     */
    export function isOpeningDoor(ped: number | IPed): boolean {
        return IsPedOpeningADoor(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEBD0EDBA5BE957CF | Since: 323 | API-Set: unknown
     */
    export function isPerformingACounterAttack(ped: number | IPed): boolean {
        return IsPedPerformingDependentComboLimit(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCCA191DF9980FD7 | Since: 323 | API-Set: unknown
     */
    export function isPerformingMeleeAction(ped: number | IPed): boolean {
        return IsPedPerformingMeleeAction(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD4CCDBCC59941B7 | Since: 323 | API-Set: unknown
     */
    export function isPerformingStealthKill(ped: number | IPed): boolean {
        return IsPedPerformingStealthKill(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC70B5FAE151982D8 | Since: 323 | API-Set: unknown
     */
    export function isPlantingBomb(ped: number | IPed): boolean {
        return IsPedPlantingBomb(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD6A86331A537A7B9 | Since: 323 | API-Set: unknown
     */
    export function isProne(ped: number | IPed): boolean {
        return IsPedProne(ped);
    }

    /**
     * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
     *
     * Hash: 0x47E4E977581C5B55 | Since: 323 | API-Set: unknown
     */
    export function isRagdoll(ped: number | IPed): boolean {
        return IsPedRagdoll(ped);
    }

    /**
     * Returns whether the specified ped is reloading.
     *
     * Hash: 0x24B100C68C645951 | Since: 323 | API-Set: unknown
     */
    export function isReloading(ped: number | IPed): boolean {
        return IsPedReloading(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x625B774D75C87068 | Since: 323 | API-Set: unknown
     */
    export function isRespondingToEvent(ped: number | IPed, event: any): boolean {
        return IsPedRespondingToEvent(ped, event);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1871251F3B5ACD7 | Since: 323 | API-Set: unknown
     */
    export function isRunningMeleeTask(ped: number | IPed): boolean {
        return IsPedRunningMeleeTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2AFE52F782F25775 | Since: 323 | API-Set: unknown
     */
    export function isRunningMobilePhoneTask(ped: number | IPed): boolean {
        return IsPedRunningMobilePhoneTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3B6097CC25AA69E | Since: 323 | API-Set: unknown
     */
    export function isRunningRagdollTask(ped: number | IPed): boolean {
        return IsPedRunningRagdollTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x81AA517FBBA05D39 | Since: 944 | API-Set: unknown
     */
    export function isShaderReady(ped: number | IPed): boolean {
        return IsPedShaderEffectValid(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8B52E498014F5B0 | Since: 323 | API-Set: unknown
     */
    export function isSheltered(ped: number | IPed): boolean {
        return Citizen.invokeNative('0xB8B52E498014F5B0', ped);
    }

    /**
     * Returns whether the specified ped is shooting.
     *
     * Hash: 0x34616828CD07F1A1 | Since: 323 | API-Set: unknown
     */
    export function isShooting(ped: number | IPed): boolean {
        return IsPedShooting(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E9DFE24AC1E58EF | Since: 323 | API-Set: unknown
     */
    export function isShootingInArea(ped: number | IPed, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsPedShootingInArea(ped, x1, y1, z1, x2, y2, z2, false, false);
    }

    /**
     * Detect if ped is in any vehicle
     * [True/False]
     *
     * Hash: 0x826AA586EDB9FEF8 | Since: 323 | API-Set: unknown
     */
    export function isSittingInAnyVehicle(ped: number | IPed): boolean {
        return IsPedSittingInAnyVehicle(ped);
    }

    /**
     * Detect if ped is sitting in the specified vehicle
     * [True/False]
     *
     * Hash: 0xA808AA1D79230FC2 | Since: 323 | API-Set: unknown
     */
    export function isSittingInVehicle(ped: number | IPed, vehicle: number | IVehicle): boolean {
        return IsPedSittingInVehicle(ped, vehicle);
    }

    /**
     * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
     *
     * Hash: 0x530944F6F4B8A214 | Since: 323 | API-Set: unknown
     */
    export function isStopped(ped: number | IPed): boolean {
        return IsPedStopped(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DE327631295B4C2 | Since: 323 | API-Set: unknown
     */
    export function isSwimming(ped: number | IPed): boolean {
        return IsPedSwimming(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC024869A53992F34 | Since: 323 | API-Set: unknown
     */
    export function isSwimmingUnderWater(ped: number | IPed): boolean {
        return IsPedSwimmingUnderWater(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3795688A307E1EB6 | Since: 505 | API-Set: unknown
     */
    export function isSwitchingWeapon(Ped: number | IPed): boolean {
        return IsPedSwappingWeapon(Ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x14590DDBEDB1EC85 | Since: 323 | API-Set: unknown
     */
    export function isTakingOffHelmet(ped: number | IPed): boolean {
        return IsPedTakingOffHelmet(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C5E1F087CD10BB7 | Since: 323 | API-Set: unknown
     */
    export function isTracked(ped: number | IPed): boolean {
        return IsPedTracked(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44D28D5DDFE5F68C | Since: 323 | API-Set: unknown
     */
    export function isTryingToEnterALockedVehicle(ped: number | IPed): boolean {
        return IsPedTryingToEnterALockedVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x00E73468D085F745 | Since: 323 | API-Set: unknown
     */
    export function isUsingActionMode(ped: number | IPed): boolean {
        return IsPedUsingActionMode(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57AB4A3080F85143 | Since: 323 | API-Set: unknown
     */
    export function isUsingAnyScenario(ped: number | IPed): boolean {
        return IsPedUsingAnyScenario(ped);
    }

    /**
     * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     *
     * Hash: 0x1BF094736DD62C2E | Since: 323 | API-Set: unknown
     */
    export function isUsingScenario(ped: number | IPed, scenario: string): boolean {
        return IsPedUsingScenario(ped, scenario);
    }

    /**
     * No comment provided
     *
     * Hash: 0x117C70D1F5730B5E | Since: 323 | API-Set: unknown
     */
    export function isVaulting(ped: number | IPed): boolean {
        return IsPedVaulting(ped);
    }

    /**
     * Returns true if the ped passed through the parenthesis is wearing a helmet.
     *
     * Hash: 0xF33BDFE19B309B19 | Since: 323 | API-Set: unknown
     */
    export function isWearingHelmet(ped: number | IPed): boolean {
        return IsPedWearingHelmet(ped);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x6EC47A344923E1ED | Since: 323 | API-Set: unknown
     */
    export function isScriptedScenarioUsingConditionalAnim(ped: number | IPed, animDict: string, anim: string): boolean {
        return IsScriptedScenarioPedUsingConditionalAnim(ped, animDict, anim);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F2F4F13AC5257EF | Since: 323 | API-Set: unknown
     */
    export function isSynchronizedSceneHoldLastFrame(sceneID: number): boolean {
        return IsSynchronizedSceneHoldLastFrame(sceneID);
    }

    /**
     * No comment provided
     *
     * Hash: 0x62522002E0C391BA | Since: 323 | API-Set: unknown
     */
    export function isSynchronizedSceneLoo(sceneID: number): boolean {
        return IsSynchronizedSceneLooped(sceneID);
    }

    /**
     * Returns true if a synchronized scene is running
     *
     * Hash: 0x25D39B935A038A26 | Since: 323 | API-Set: unknown
     */
    export function isSynchronizedSceneRunning(sceneId: number): boolean {
        return IsSynchronizedSceneRunning(sceneId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06087579E7AA85A9 | Since: 323 | API-Set: unknown
     */
    export function isTargetInPerceptionArea(ped: number | IPed, targetPed: number | IPed): boolean {
        return Citizen.invokeNative('0x06087579E7AA85A9', ped, targetPed, 0, 0, 0, 0);
    }

    /**
     * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
     *
     *
     * Target needs to be tracked.. won't work otherwise.
     *
     * Hash: 0x91C8E617F64188AC | Since: 323 | API-Set: unknown
     */
    export function isTrackedVisible(ped: number | IPed): boolean {
        return IsTrackedPedVisible(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFEC9A3B1820F3331 | Since: 323 | API-Set: unknown
     */
    export function isUsingScubaGearVariation(): boolean {
        return Citizen.invokeNative('0xFEC9A3B1820F3331', undefined);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x6FD7816A36615F48 | Since: 323 | API-Set: unknown
     */
    export function knockOffProp(ped: number | IPed): void {
        KnockOffPedProp(ped, false, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x45BBCBA77C29A841 | Since: 323 | API-Set: unknown
     */
    export function knockOffVehicle(ped: number | IPed): void {
        KnockPedOffVehicle(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B694AFCF64E6994 | Since: 323 | API-Set: unknown
     */
    export function markDecorationsAsClonedFromLocalPlayer(ped: number | IPed): void {
        Citizen.invokeNative('0x2B694AFCF64E6994', ped, false);
    }

    /**
     * Checks if the specified sexiness flag is set
     *
     * enum eSexinessFlags
     * {
     * SF_JEER_AT_HOT_PED = 0,
     * SF_HURRIEDFEMALES_SEXY = 1,
     * SF_HOT_PERSON = 2,
     * };
     *
     * Hash: 0x46B05BCAE43856B0 | Since: 323 | API-Set: unknown
     */
    export function hasSexinessFlagSet(ped: number | IPed, sexinessFlag: number): boolean {
        return Citizen.invokeNative('0x46B05BCAE43856B0', ped, sexinessFlag);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xE1E65CA8AC9C00ED | Since: 323 | API-Set: unknown
     */
    export function playFacialAnim(ped: number | IPed, animName: string, animDict: string): void {
        PlayFacialAnim(ped, animName, animDict);
    }

    /**
     * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
     *
     * Hash: 0x9222F300BF8354FE | Since: 323 | API-Set: unknown
     */
    export function registerHatedTargetsAround(ped: number | IPed, radius: number): void {
        RegisterHatedTargetsAroundPed(ped, radius);
    }

    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0x4462658788425076 | Since: 323 | API-Set: unknown
     */
    export function registerheadshot(ped: number | IPed): number {
        return RegisterPedheadshot(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA8805A1108A2515 | Since: 877 | API-Set: unknown
     */
    export function registerheadshotHires(ped: number | IPed): number {
        return RegisterPedheadshot3(ped);
    }

    /**
     * Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
     *
     * Hash: 0x953563CE563143AF | Since: 323 | API-Set: unknown
     */
    export function registerheadshotTransparent(ped: number | IPed): number {
        return RegisterPedheadshotTransparent(ped);
    }

    /**
     * `PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.`
     *
     * l_216 = RECSBRobber1
     *
     * Hash: 0x2F25D9AEFA34FBA2 | Since: 323 | API-Set: unknown
     */
    export function registerTarget(ped: number | IPed, target: number | IPed): void {
        RegisterTarget(ped, target);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D517B27CF6ECD04 | Since: 323 | API-Set: unknown
     */
    export function releaseheadshotImgUpload(id: number): void {
        ReleasePedheadshotImgUpload(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF79F9DEF0AADE61A | Since: 323 | API-Set: unknown
     */
    export function releasePreloadPropData(ped: number | IPed): void {
        ReleasePedPreloadPropData(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5AAB586FFEC0FD96 | Since: 323 | API-Set: unknown
     */
    export function releasePreloadVariationData(ped: number | IPed): void {
        ReleasePedPreloadVariationData(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x13E940F88470FA51 | Since: 323 | API-Set: unknown
     */
    export function removeActionModeAsset(asset: string): void {
        RemoveActionModeAsset(asset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EB2F69076AF7053 | Since: 323 | API-Set: unknown
     */
    export function removeGroup(groupId: number): void {
        RemoveGroup(groupId);
    }

    /**
     * Ped will no longer get angry when you stay near him.
     *
     * Hash: 0x74D4E028107450A9 | Since: 323 | API-Set: unknown
     */
    export function removeDefensiveArea(ped: number | IPed, toggle: boolean): void {
        RemovePedDefensiveArea(ped, toggle);
    }

    /**
     * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
     *
     * Hash: 0xAC6D445B994DF95E | Since: 323 | API-Set: unknown
     */
    export function removeElegantly(ped: number | IPed): void {
        RemovePedElegantly(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED74007FFB146BC2 | Since: 323 | API-Set: unknown
     */
    export function removeFromGroup(ped: number | IPed): void {
        RemovePedFromGroup(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7B2458D0AD6DED8 | Since: 323 | API-Set: unknown
     */
    export function removeHelmet(ped: number | IPed, instantly: boolean): void {
        RemovePedHelmet(ped, instantly);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFDDB234CF74073D9 | Since: 323 | API-Set: unknown
     */
    export function removePreferredCoverSet(ped: number | IPed): void {
        RemovePedPreferredCoverSet(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB6BA2444AB393DA2 | Since: 323 | API-Set: unknown
     */
    export function removeRelationshipGroup(groupHash: number | string): void {
        if (typeof groupHash === 'string') groupHash = misc.getHashKey(groupHash)
        RemoveRelationshipGroup(groupHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31D16B74C6E29D66 | Since: 323 | API-Set: unknown
     */
    export function removeScenarioBlockingArea(): void {
        RemoveScenarioBlockingArea(undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD37401D78A929A49 | Since: 323 | API-Set: unknown
     */
    export function removeScenarioBlockingAreas(): void {
        RemoveScenarioBlockingAreas();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9219857D21F0E842 | Since: 323 | API-Set: unknown
     */
    export function removeStealthModeAsset(asset: string): void {
        RemoveStealthModeAsset(asset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x290E2780BB7AA598 | Since: 323 | API-Set: unknown
     */
    export function requestActionModeAsset(asset: string): void {
        RequestActionModeAsset(asset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF0DAEF2F545BEE25 | Since: 323 | API-Set: unknown
     */
    export function requestheadshotImgUpload(id: number): boolean {
        return RequestPedheadshotImgUpload(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD018C591F94CB43 | Since: 323 | API-Set: unknown
     */
    export function requestRestrictedVehicleVisibilityTracking(ped: number | IPed): void {
        Citizen.invokeNative('0xCD018C591F94CB43', ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75BA1CB3B7D40CAF | Since: 323 | API-Set: unknown
     */
    export function requestUseSmallBboxVisibilityTracking(ped: number | IPed): void {
        Citizen.invokeNative('0x75BA1CB3B7D40CAF', ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2BC338A7B21F4608 | Since: 323 | API-Set: unknown
     */
    export function requestVehicleVisibilityTracking(ped: number | IPed): void {
        RequestPedVehicleVisibilityTracking(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D7A2E43E74E2EB8 | Since: 323 | API-Set: unknown
     */
    export function requestVisibilityTracking(ped: number | IPed): void {
        RequestPedVisibilityTracking(ped);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x1216E0BFA72CC703 | Since: 323 | API-Set: unknown
     */
    export function requestRagdollBoundsUpdate(): void {
        Citizen.invokeNative('0x1216E0BFA72CC703', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A0A62FCDEE16D4F | Since: 323 | API-Set: unknown
     */
    export function requestStealthModeAsset(asset: string): void {
        RequestStealthModeAsset(asset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46E56A7CD1D63C3F | Since: 323 | API-Set: unknown
     */
    export function resetAiMeleeWeaponDamageModifier(): void {
        ResetAiMeleeWeaponDamageModifier();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA16670E7BA4743C | Since: 323 | API-Set: unknown
     */
    export function resetAiWeaponDamageModifier(): void {
        ResetAiWeaponDamageModifier();
    }

    /**
     * No comment provided
     *
     * Hash: 0x007FDE5A7897E426 | Since: 2802 | API-Set: unknown
     */
    export function resetFacialIdleAnim(ped: number | IPed): void {
        Citizen.invokeNative('0x007FDE5A7897E426', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x63DAB4CCB3273205 | Since: 323 | API-Set: unknown
     */
    export function resetGroupFormationDefaultSpacing(groupHandle: number): void {
        ResetGroupFormationDefaultSpacing(groupHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x22EF8FF8778030EB | Since: 323 | API-Set: unknown
     */
    export function resetInVehicleContext(ped: number | IPed): void {
        ResetPedInVehicleContext(ped);
    }

    /**
     * Resets the value for the last vehicle driven by the Ped.
     *
     * Hash: 0xBB8DE8CF6A8DD8BB | Since: 323 | API-Set: unknown
     */
    export function resetLastVehicle(ped: number | IPed): void {
        ResetPedLastVehicle(ped);
    }

    /**
     * If p1 is 0.0, I believe you are back to normal.
     * If p1 is 1.0, it looks like you can only rotate the ped, not walk.
     *
     * Using the following code to reset back to normal
     * `PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);`
     *
     * Hash: 0xAA74EC0CB0AAEA2C | Since: 323 | API-Set: unknown
     */
    export function resetMovementClipset(ped: number | IPed): void {
        ResetPedMovementClipset(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9FA4664CF62E47E8 | Since: 323 | API-Set: unknown
     */
    export function resetRagdollTimer(ped: number | IPed): void {
        ResetPedRagdollTimer(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x20510814175EA477 | Since: 323 | API-Set: unknown
     */
    export function resetStrafeClipset(ped: number | IPed): void {
        ResetPedStrafeClipset(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3AC1F7B898F30C05 | Since: 323 | API-Set: unknown
     */
    export function resetVisibleDamage(ped: number | IPed): void {
        ResetPedVisibleDamage(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97B0DB5B4AA74E77 | Since: 323 | API-Set: unknown
     */
    export function resetWeaponMovementClipset(ped: number | IPed): void {
        ResetPedWeaponMovementClipset(ped);
    }

    /**
     * This function will simply bring the dead person back to life.
     *
     * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
     *
     * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
     *
     * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
     *
     * Hash: 0x71BC8E838B9C6035 | Since: 323 | API-Set: unknown
     */
    export function resurrect(ped: number | IPed): void {
        ResurrectPed(ped);
    }

    /**
     * It will revive/cure the injured ped. The condition is ped must not be dead.
     *
     * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
     *
     * This function is well suited there.
     *
     * Hash: 0x8D8ACD8388CD99CE | Since: 323 | API-Set: unknown
     */
    export function reviveInjured(ped: number | IPed): void {
        ReviveInjuredPed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66460DEDDD417254 | Since: 323 | API-Set: unknown
     */
    export function setAiMeleeWeaponDamageModifier(modifier: number): void {
        SetAiMeleeWeaponDamageModifier(modifier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B1E2A40A65B8521 | Since: 323 | API-Set: unknown
     */
    export function setAiWeaponDamageModifier(value: number): void {
        SetAiWeaponDamageModifier(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x061CB768363D6424 | Since: 323 | API-Set: unknown
     */
    export function setAllowLockonToIfFriendly(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0x061CB768363D6424', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAB944D4D481ACCB | Since: 1734 | API-Set: unknown
     */
    export function setAllowStuntJumpCamera(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0xFAB944D4D481ACCB', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x87DDEB611B329A9C | Since: 1103 | API-Set: unknown
     */
    export function setAmbientLawAccuracyModifier(multiplier: number): void {
        Citizen.invokeNative('0x87DDEB611B329A9C', multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B0E6172C9A4D902 | Since: 323 | API-Set: unknown
     */
    export function setAmbientsDropMoney(): void {
        SetAmbientPedsDropMoney(false);
    }

    /**
     * `works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him`
     *
     * Hash: 0x9F8AA94D6D97DBF4 | Since: 323 | API-Set: unknown
     */
    export function setBlockingOfNonTemporaryEvents(ped: number | IPed, toggle: boolean): void {
        SetBlockingOfNonTemporaryEvents(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9911F4A24485F653 | Since: 323 | API-Set: unknown
     */
    export function setBlockingOfNonTemporaryEventsForAmbientsThisFrame(): void {
        Citizen.invokeNative('0x9911F4A24485F653', false);
    }

    /**
     * Setting ped to true allows the ped to shoot "friendlies".
     *
     * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
     *
     * p1 = false & p2 = false for unable to aim at.
     * p1 = true & p2 = false for able to aim at.
     *
     * Hash: 0xB3B1CB349FF9C75D | Since: 323 | API-Set: unknown
     */
    export function setCanAttackFriendly(ped: number | IPed, toggle: boolean): void {
        SetCanAttackFriendly(ped, toggle, false);
    }

    /**
     * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
     *
     * Hash: 0xFF41B4B141ED981C | Since: 323 | API-Set: unknown
     */
    export function setCombatFloat(ped: number | IPed, combatType: number): void {
        SetCombatFloat(ped, combatType, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F074C904D85129E | Since: 393 | API-Set: unknown
     */
    export function setCopPerceptionOverrides(seeingRange: number, seeingRangePeripheral: number, hearingRange: number, visualFieldMinAzimuthAngle: number, visualFieldMaxAzimuthAngle: number, fieldOfGazeMaxAngle: number): void {
        Citizen.invokeNative('0x2F074C904D85129E', seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2735233A786B1BEF | Since: 323 | API-Set: unknown
     */
    export function setCorpseRagdollFriction(ped: number | IPed): void {
        Citizen.invokeNative('0x2735233A786B1BEF', ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x102E68B2024D536D | Since: 323 | API-Set: unknown
     */
    export function setCreateRandomCops(toggle: boolean): void {
        SetCreateRandomCops(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A4986851C4EF6E7 | Since: 323 | API-Set: unknown
     */
    export function setCreateRandomCopsNotOnScenarios(toggle: boolean): void {
        SetCreateRandomCopsNotOnScenarios(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x444CB7D7DBE6973D | Since: 323 | API-Set: unknown
     */
    export function setCreateRandomCopsOnScenarios(toggle: boolean): void {
        SetCreateRandomCopsOnScenarios(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x711794453CFD692B | Since: 463 | API-Set: unknown
     */
    export function setDisableHighFallDeath(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0x711794453CFD692B', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFE68C4B787E1BFB | Since: 1180 | API-Set: unknown
     */
    export function setDisableMapCollision(ped: number | IPed): void {
        Citizen.invokeNative('0xDFE68C4B787E1BFB', ped);
    }

    /**
     * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
     *
     * Hash: 0xB195FFA8042FC5C3 | Since: 323 | API-Set: unknown
     */
    export function setDriverAbility(driver: number | IPed, ability: number): void {
        SetDriverAbility(driver, ability);
    }

    /**
     * range 0.0f - 1.0f
     *
     * Hash: 0xA731F608CA104E3C | Since: 323 | API-Set: unknown
     */
    export function setDriverAggressiveness(driver: number | IPed, aggressiveness: number): void {
        SetDriverAggressiveness(driver, aggressiveness);
    }

    /**
     * Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
     *
     * Hash: 0xDED5AF5A0EA4B297 | Since: 323 | API-Set: unknown
     */
    export function setDriverRacingModifier(driver: number | IPed, modifier: number): void {
        SetDriverRacingModifier(driver, modifier);
    }

    /**
     * Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
     *
     * Hash: 0xC52E0F855C58FC2E | Since: 323 | API-Set: unknown
     */
    export function setEnableBoundAnkles(ped: number | IPed, toggle: boolean): void {
        SetEnableBoundAnkles(ped, toggle);
    }

    /**
     * ped can not pull out a weapon when true
     *
     * Hash: 0xDF1AF8B5D56542FA | Since: 323 | API-Set: unknown
     */
    export function setEnableHandcuffs(ped: number | IPed, toggle: boolean): void {
        SetEnableHandcuffs(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2C5AA0C0E8D0F1E | Since: 323 | API-Set: unknown
     */
    export function setEnableEnveffScale(ped: number | IPed, toggle: boolean): void {
        SetEnablePedEnveffScale(ped, toggle);
    }

    /**
     * Enables diving motion when underwater.
     *
     * Hash: 0xF99F62004024D506 | Since: 323 | API-Set: unknown
     */
    export function setEnableScuba(ped: number | IPed, toggle: boolean): void {
        SetEnableScuba(ped, toggle);
    }

    /**
     * Clipsets:
     * facials@gen_female@base
     * facials@gen_male@base
     * facials@p_m_zero@base
     *
     * Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
     * mood_drunk_1
     * mood_stressed_1
     * mood_happy_1
     * mood_talking_1
     *
     *
     * Hash: 0x5687C7F05B39E401 | Since: 1493 | API-Set: unknown
     */
    export function setFacialClipset(ped: number | IPed, animDict: string): void {
        SetFacialClipsetOverride(ped, animDict);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xFFC24B988B938B38 | Since: 323 | API-Set: unknown
     */
    export function setFacialIdleAnimOverride(ped: number | IPed, animName: string, animDict: string): void {
        SetFacialIdleAnimOverride(ped, animName, animDict);
    }

    /**
     * No comment provided
     *
     * Hash: 0x129466ED55140F8D | Since: 323 | API-Set: unknown
     */
    export function setForceFootstepUpdate(ped: number | IPed, toggle: boolean): void {
        SetForceFootstepUpdate(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB968B53FC7F916D | Since: 323 | API-Set: unknown
     */
    export function setForceStepType(ped: number | IPed, _type: number): void {
        SetForceStepType(ped, false, _type, 0);
    }

    /**
     * 0: Default
     * 1: Circle Around Leader
     * 2: Alternative Circle Around Leader
     * 3: Line, with Leader at center
     *
     * Hash: 0xCE2F5FC3AF7E8C1E | Since: 323 | API-Set: unknown
     */
    export function setGroupFormation(groupId: number, formationType: number): void {
        SetGroupFormation(groupId, formationType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D9D45004C28C916 | Since: 323 | API-Set: unknown
     */
    export function setGroupFormationSpacing(groupId: number, pos: Vector3): void {
        SetGroupFormationSpacing(groupId, pos.x, pos.y, pos.z);
    }

    /**
     * Sets the range at which members will automatically leave the group.
     *
     * Hash: 0x4102C7858CFEE4E4 | Since: 323 | API-Set: unknown
     */
    export function setGroupSeparationRange(groupHandle: number, separationRange: number): void {
        SetGroupSeparationRange(groupHandle, separationRange);
    }

    /**
     * Used for freemode (online) characters.
     *
     * For some reason, the scripts use a rounded float for the index.
     * Indexes:
     * 1. black
     * 2. very light blue/green
     * 3. dark blue
     * 4. brown
     * 5. darker brown
     * 6. light brown
     * 7. blue
     * 8. light blue
     * 9. pink
     * 10. yellow
     * 11. purple
     * 12. black
     * 13. dark green
     * 14. light brown
     * 15. yellow/black pattern
     * 16. light colored spiral pattern
     * 17. shiny red
     * 18. shiny half blue/half red
     * 19. half black/half light blue
     * 20. white/red perimter
     * 21. green snake
     * 22. red snake
     * 23. dark blue snake
     * 24. dark yellow
     * 25. bright yellow
     * 26. all black
     * 28. red small pupil
     * 29. devil blue/black
     * 30. white small pupil
     * 31. glossed over
     *
     * Hash: 0x50B56988B170AFDF | Since: 323 | API-Set: unknown
     */
    export function setHeadBlendEyeColor(ped: number | IPed, index: number): void {
        SetPedEyeColor(ped, index);
    }

    /**
     * p4 seems to vary from 0 to 3.
     * Preview: https://gfycat.com/MaleRareAmazonparrot
     *
     * Hash: 0xCC9682B8951C5229 | Since: 323 | API-Set: unknown
     */
    export function setHeadBlendPaletteColor(ped: number | IPed, r: number, g: number, b: number, id: number): void {
        SetHeadBlendPaletteColor(ped, r, g, b, id);
    }

    /**
     * Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
     *
     * Hash: 0xFF4803BC019852D9 | Since: 323 | API-Set: unknown
     */
    export function setHealthSnacksCarriedByAllNews(): void {
        Citizen.invokeNative('0xFF4803BC019852D9', 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC32779C16FCEECD9 | Since: 323 | API-Set: unknown
     */
    export function setIkTarget(ped: number | IPed, ikIndex: number, entityLookAt: number | IEntity, boneLookAt: number, offsetX: number, offsetY: number, offsetZ: number, blendInDuration: number, blendOutDuration: number): void {
        SetIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, undefined, blendInDuration, blendOutDuration);
    }

    /**
     * Only appears in lamar1 script.
     *
     * Hash: 0x1A330D297AAC6BC1 | Since: 323 | API-Set: unknown
     */
    export function setLadderClimbInputState(ped: number | IPed): void {
        Citizen.invokeNative('0x1A330D297AAC6BC1', ped, 0);
    }

    /**
     * name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
     *
     * Hash: 0x781DE8FA214E87D2 | Since: 323 | API-Set: unknown
     */
    export function setMovementModeOverride(ped: number | IPed, name: string): void {
        SetMovementModeOverride(ped, name);
    }

    /**
     * accuracy = 0-100, 100 being perfectly accurate
     *
     * Hash: 0x7AEFB85C1D49DEB6 | Since: 323 | API-Set: unknown
     */
    export function setAccuracy(ped: number | IPed, accuracy: number): void {
        SetPedAccuracy(ped, accuracy);
    }

    /**
     * value ranges from 0 to 3.
     *
     * Hash: 0xDBA71115ED9941A6 | Since: 323 | API-Set: unknown
     */
    export function setAlertness(ped: number | IPed, value: number): void {
        SetPedAlertness(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA1F1B7BE1A8766F | Since: 323 | API-Set: unknown
     */
    export function setAllowedToDuck(ped: number | IPed, toggle: boolean): void {
        SetPedAllowedToDuck(ped, toggle);
    }

    /**
     * ntoggle was always false except in one instance (b678).
     *
     * The one time this is set to true seems to do with when you fail the mission.
     *
     * Hash: 0xF2BEBCDFAFDAA19E | Since: 323 | API-Set: unknown
     */
    export function setAllowHurtCombatForAllMissionPeds(toggle: boolean): void {
        Citizen.invokeNative('0xF2BEBCDFAFDAA19E', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x49E50BDB8BA4DAB2 | Since: 323 | API-Set: unknown
     */
    export function setAllowMinorReactionsAsMissionPed(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0x49E50BDB8BA4DAB2', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C028C636A414ED9 | Since: 323 | API-Set: unknown
     */
    export function setAllowVehiclesOverride(ped: number | IPed, toggle: boolean): void {
        SetPedAllowVehiclesOverride(ped, toggle);
    }

    /**
     * stance:
     * 0 = idle
     * 1 = walk
     * 2 = running
     *
     * p5 = usually set to true
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x90A43CC281FFAB46 | Since: 323 | API-Set: unknown
     */
    export function setAlternateMovementAnim(ped: number | IPed, stance: number, animDictionary: string, animationName: string): void {
        SetPedAlternateMovementAnim(ped, stance, animDictionary, animationName, 0, false);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x6C60394CB4F75E9A | Since: 323 | API-Set: unknown
     */
    export function setAlternateWalkAnim(ped: number | IPed, animDict: string, animName: string): void {
        SetPedAlternateWalkAnim(ped, animDict, animName, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7F76DF27A5045A1 | Since: 323 | API-Set: unknown
     */
    export function setAngledDefensiveArea(ped: number | IPed): void {
        SetPedAngledDefensiveArea(ped, 0, 0, 0, 0, 0, 0, 0, false, false);
    }

    /**
     * Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
     *
     * Hash: 0x2B5AA717A181FB4C | Since: 323 | API-Set: unknown
     */
    export function setAoBlobRendering(ped: number | IPed, toggle: boolean): void {
        SetPedAoBlobRendering(ped, toggle);
    }

    /**
     * Sets the armor of the specified ped.
     *
     * ped: The Ped to set the armor of.
     * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
     *
     * Hash: 0xCEA04D83135264CC | Since: 323 | API-Set: unknown
     */
    export function setArmour(ped: number | IPed, amount: number): void {
        SetPedArmour(ped, amount);
    }

    /**
     * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
     *
     * Hash: 0xBB03C38DD3FB7FFD | Since: 323 | API-Set: unknown
     */
    export function setAsCop(ped: number | IPed, toggle: boolean): void {
        SetPedAsCop(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02A0C9720B854BFA | Since: 323 | API-Set: unknown
     */
    export function setAsEnemy(ped: number | IPed, toggle: boolean): void {
        SetPedAsEnemy(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A7819605465FBCE | Since: 323 | API-Set: unknown
     */
    export function setAsGroupLeader(ped: number | IPed, groupId: number): void {
        SetPedAsGroupLeader(ped, groupId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F3480FE65DB31B5 | Since: 323 | API-Set: unknown
     */
    export function setAsGroupMember(ped: number | IPed, groupId: number): void {
        SetPedAsGroupMember(ped, groupId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x137BBD05230DB22D | Since: 323 | API-Set: unknown
     */
    export function setBlendFromParents(ped: number | IPed): void {
        SetPedBlendFromParents(ped, undefined, undefined, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x576594E8D64375E2 | Since: 323 | API-Set: unknown
     */
    export function setBlocksPathingWhenDead(ped: number | IPed, toggle: boolean): void {
        SetPedBlocksPathingWhenDead(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4F5F651ACCC9C4CF | Since: 323 | API-Set: unknown
     */
    export function setBoundsOrientation(ped: number | IPed, pos: Vector3): void {
        SetPedBoundsOrientation(ped, 0, 0, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6C3B4D6D13B4C841 | Since: 323 | API-Set: unknown
     */
    export function setCanArmIk(ped: number | IPed, toggle: boolean): void {
        SetPedCanArmIk(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1670E958EEE24E5 | Since: 323 | API-Set: unknown
     */
    export function setCanBeDraggedOut(ped: number | IPed, toggle: boolean): void {
        SetPedCanBeDraggedOut(ped, toggle);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xB282749D5E028163 | Since: 877 | API-Set: unknown
     */
    export function setCanBeKnockedOffBike(): void {
        Citizen.invokeNative('0xB282749D5E028163', undefined, undefined);
    }

    /**
     * state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
     *
     * Hash: 0x7A6535691B477C48 | Since: 323 | API-Set: unknown
     */
    export function setCanBeKnockedOffVehicle(ped: number | IPed, state: number): void {
        SetPedCanBeKnockedOffVehicle(ped, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7EF1BA83230BA07 | Since: 323 | API-Set: unknown
     */
    export function setCanBeShotInVehicle(ped: number | IPed, toggle: boolean): void {
        SetPedCanBeShotInVehicle(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x638C03B0F9878F57 | Since: 323 | API-Set: unknown
     */
    export function setCanBeTargetedWhenInjured(ped: number | IPed, toggle: boolean): void {
        SetPedCanBeTargetedWhenInjured(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4328652AE5769C71 | Since: 323 | API-Set: unknown
     */
    export function setCanBeTargetedWithoutLos(ped: number | IPed, toggle: boolean): void {
        SetPedCanBeTargetedWithoutLos(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x63F58F7C80513AAD | Since: 323 | API-Set: unknown
     */
    export function setCanBeTargetted(ped: number | IPed, toggle: boolean): void {
        SetPedCanBeTargetted(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66B57B72E0836A76 | Since: 323 | API-Set: unknown
     */
    export function setCanBeTargettedByPlayer(ped: number | IPed, player: number | string | IPlayer, toggle: boolean): void {
        SetPedCanBeTargettedByPlayer(ped, player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF1CA77833E58F2C | Since: 323 | API-Set: unknown
     */
    export function setCanBeTargettedByTeam(ped: number | IPed, team: number, toggle: boolean): void {
        SetPedCanBeTargettedByTeam(ped, team, toggle);
    }

    /**
     * It simply makes the said ped to cower behind cover object(wall, desk, car)
     *
     * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
     *
     * Hash: 0xCB7553CDCEF4A735 | Since: 323 | API-Set: unknown
     */
    export function setCanCowerInCover(ped: number | IPed, toggle: boolean): void {
        SetPedCanCowerInCover(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B7A646C242A7059 | Since: 323 | API-Set: unknown
     */
    export function setCanEvasiveDive(ped: number | IPed, toggle: boolean): void {
        SetPedCanEvasiveDive(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC11C18092C5530DC | Since: 323 | API-Set: unknown
     */
    export function setCanHeadIk(ped: number | IPed, toggle: boolean): void {
        SetPedCanHeadIk(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x73518ECE2485412B | Since: 323 | API-Set: unknown
     */
    export function setCanLegIk(ped: number | IPed, toggle: boolean): void {
        SetPedCanLegIk(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE861D0B05C7662B8 | Since: 323 | API-Set: unknown
     */
    export function setCanLosePropsOnDamage(ped: number | IPed, toggle: boolean): void {
        SetPedCanLosePropsOnDamage(ped, toggle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC514825C507E3736 | Since: 323 | API-Set: unknown
     */
    export function setCanPeekInCover(ped: number | IPed, toggle: boolean): void {
        SetPedCanPeekInCover(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6373D1349925A70E | Since: 323 | API-Set: unknown
     */
    export function setCanPlayAmbientAnims(ped: number | IPed, toggle: boolean): void {
        SetPedCanPlayAmbientAnims(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EB0585D15254740 | Since: 323 | API-Set: unknown
     */
    export function setCanPlayAmbientBaseAnims(ped: number | IPed, toggle: boolean): void {
        SetPedCanPlayAmbientBaseAnims(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAF20C5432058024 | Since: 323 | API-Set: unknown
     */
    export function setCanPlayGestureAnims(ped: number | IPed, toggle: boolean): void {
        SetPedCanPlayGestureAnims(ped, toggle);
    }

    /**
     * Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.
     *
     * Hash: 0x820E9892A77E97CD | Since: 877 | API-Set: unknown
     */
    export function setCanPlayInCarIdles(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0x820E9892A77E97CD', ped, toggle);
    }

    /**
     * p2 usually 0
     *
     * Hash: 0xF833DDBA3B104D43 | Since: 323 | API-Set: unknown
     */
    export function setCanPlayVisemeAnims(ped: number | IPed, toggle: boolean): void {
        SetPedCanPlayVisemeAnims(ped, toggle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB128377056A54E2A | Since: 323 | API-Set: unknown
     */
    export function setCanRagdoll(ped: number | IPed, toggle: boolean): void {
        SetPedCanRagdoll(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF993EE5E90ABA25 | Since: 323 | API-Set: unknown
     */
    export function setCanRagdollFromPlayerImpact(ped: number | IPed, toggle: boolean): void {
        SetPedCanRagdollFromPlayerImpact(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1CCE141467FF42A2 | Since: 323 | API-Set: unknown
     */
    export function setCanSmashGlass(ped: number | IPed): void {
        SetPedCanSmashGlass(ped, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED7F7EFE9FABF340 | Since: 323 | API-Set: unknown
     */
    export function setCanSwitchWeapon(ped: number | IPed, toggle: boolean): void {
        SetPedCanSwitchWeapon(ped, toggle);
    }

    /**
     * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
     *
     * Only works in singleplayer
     *
     * Hash: 0x2E2F4240B3F24647 | Since: 323 | API-Set: unknown
     */
    export function setCanTeleportToGroupLeader(pedHandle: number | IPed, groupHandle: number, toggle: boolean): void {
        SetPedCanTeleportToGroupLeader(pedHandle, groupHandle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2B7106D37947CE0 | Since: 323 | API-Set: unknown
     */
    export function setCanTorsoIk(ped: number | IPed, toggle: boolean): void {
        SetPedCanTorsoIk(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF5846EDB26A98A24 | Since: 323 | API-Set: unknown
     */
    export function setCanTorsoReactIk(ped: number | IPed): void {
        SetPedCanTorsoReactIk(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6647C5F6F5792496 | Since: 323 | API-Set: unknown
     */
    export function setCanTorsoVehicleIk(ped: number | IPed): void {
        SetPedCanTorsoVehicleIk(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC4686EC06434678 | Since: 323 | API-Set: unknown
     */
    export function setCanUseAutoConversationLookat(ped: number | IPed, toggle: boolean): void {
        SetPedCanUseAutoConversationLookat(ped, toggle);
    }

    /**
     * Overrides the ped's collision capsule radius for the current tick.
     * Must be called every tick to be effective.
     *
     * Setting this to 0.001 will allow warping through some objects.
     *
     * Hash: 0x364DF566EC833DE2 | Since: 323 | API-Set: unknown
     */
    export function setCapsule(ped: number | IPed, value: number): void {
        SetPedCapsule(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82A3D6D9CC2CB8E3 | Since: 323 | API-Set: unknown
     */
    export function setClothPackageIndex(): void {
        SetPedClothProne(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78C4E9961DB3EB5B | Since: 323 | API-Set: unknown
     */
    export function setClothPinFrames(): void {
        SetPedClothPackageIndex(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA660FAF550EB37E5 | Since: 323 | API-Set: unknown
     */
    export function setClothProne(): void {
        Citizen.invokeNative('0xA660FAF550EB37E5', undefined, false);
    }

    /**
     * enum eCombatAbility // 0xE793438C
     * {
     * CA_Poor,
     * CA_Average,
     * CA_Professional,
     * CA_NumTypes
     * };
     *
     * Hash: 0xC7622C0D36B2FDA8 | Since: 323 | API-Set: unknown
     */
    export function setCombatAbility(ped: number | IPed, abilityLevel: number): void {
        SetPedCombatAbility(ped, abilityLevel);
    }

    /**
     * enum eCombatAttributes // 0x0E8E7201
     * {
     * BF_CanUseCover = 0,
     * BF_CanUseVehicles = 1,
     * BF_CanDoDrivebys = 2,
     * BF_CanLeaveVehicle = 3,
     * BF_CanUseDynamicStrafeDecisions = 4,
     * BF_AlwaysFight = 5,
     * BF_0x66BB9FCC = 6,
     * BF_0x6837DA41 = 7,
     * BF_0xB4A13A5A = 8,
     * BF_0xEE326AAD = 9,
     * BF_0x7DF2CCFA = 10,
     * BF_0x0036D422 = 11,
     * BF_BlindFireWhenInCover = 12,
     * BF_Aggressive = 13,
     * BF_CanInvestigate = 14,
     * BF_HasRadio = 15,
     * BF_0x6BDE28D1 = 16,
     * BF_AlwaysFlee = 17,
     * BF_0x7852797D = 18,
     * BF_0x33497B95 = 19,
     * BF_CanTauntInVehicle = 20,
     * BF_CanChaseTargetOnFoot = 21,
     * BF_WillDragInjuredPedsToSafety = 22,
     * BF_0xCD7168B8 = 23,
     * BF_UseProximityFiringRate = 24,
     * BF_0x48F914F8 = 25,
     * BF_0x2EA543D0 = 26,
     * BF_PerfectAccuracy = 27,
     * BF_CanUseFrustratedAdvance = 28,
     * BF_0x3D131AC1 = 29,
     * BF_0x3AD95F27 = 30,
     * BF_MaintainMinDistanceToTarget = 31,
     * BF_0xEAD68AD2 = 32,
     * BF_0xA206C2E0 = 33,
     * BF_CanUsePeekingVariations = 34,
     * BF_0xA5715184 = 35,
     * BF_0xD5265533 = 36,
     * BF_0x2B84C2BF = 37,
     * BF_DisableBulletReactions = 38,
     * BF_CanBust = 39,
     * BF_0xAA525726 = 40,
     * BF_CanCommandeerVehicles = 41,
     * BF_CanFlank = 42,
     * BF_SwitchToAdvanceIfCantFindCover = 43,
     * BF_SwitchToDefensiveIfInCover = 44,
     * BF_0xEB4786A0 = 45,
     * BF_CanFightArmedPedsWhenNotArmed = 46,
     * BF_0xA08E9402 = 47,
     * BF_0x952EAD7D = 48,
     * BF_UseEnemyAccuracyScaling = 49,
     * BF_CanCharge = 50,
     * BF_0xDA8C2BD3 = 51,
     * BF_0x6562F017 = 52,
     * BF_0xA2C3D53B = 53,
     * BF_AlwaysEquipBestWeapon = 54,
     * BF_CanSeeUnderwaterPeds = 55,
     * BF_0xF619486B = 56,
     * BF_0x61EB63A3 = 57,
     * BF_DisableFleeFromCombat = 58,
     * BF_0x8976D12B = 59,
     * BF_CanThrowSmokeGrenade = 60,
     * BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
     * BF_0x5452A10C = 62,
     * BF_FleesFromInvincibleOpponents = 63,
     * BF_DisableBlockFromPursueDuringVehicleChase = 64,
     * BF_DisableSpinOutDuringVehicleChase = 65,
     * BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
     * BF_0x0B404731 = 67,
     * BF_DisableReactToBuddyShot = 68,
     * BF_0x7FFD6AEB = 69,
     * BF_0x51F4AEF8 = 70,
     * BF_PermitChargeBeyondDefensiveArea = 71,
     * BF_0x63E0A8E2 = 72,
     * BF_0xDF974436 = 73,
     * BF_0x556C080B = 74,
     * BF_0xA4D50035 = 75,
     * BF_SetDisableShoutTargetPositionOnCombatStart = 76,
     * BF_DisableRespondedToThreatBroadcast = 77,
     * BF_0xCBB01765 = 78,
     * BF_0x4F862ED4 = 79,
     * BF_0xEF9C7C40 = 80,
     * BF_0xE51B494F = 81,
     * BF_0x054D0199 = 82,
     * BF_0xD36BCE94 = 83,
     * BF_0xFB11F690 = 84,
     * BF_0xD208A9AD = 85,
     * BF_AllowDogFighting = 86,
     * BF_0x07A6E531 = 87,
     * BF_0x34F9317B = 88,
     * BF_0x4240F5A9 = 89,
     * BF_0xEE129DBD = 90,
     * BF_0x053AEAD9 = 91
     * };
     *
     * Hash: 0x9F7794730795E019 | Since: 323 | API-Set: unknown
     */
    export function setCombatAttributes(ped: number | IPed, attributeId: number, enabled: boolean): void {
        SetPedCombatAttributes(ped, attributeId, enabled);
    }

    /**
     * enum eCombatMovement // 0x4F456B61
     * {
     * CM_Stationary,
     * CM_Defensive,
     * CM_WillAdvance,
     * CM_WillRetreat
     * };
     *
     * Hash: 0x4D9CA1009AFBD057 | Since: 323 | API-Set: unknown
     */
    export function setCombatMovement(ped: number | IPed, combatMovement: number): void {
        SetPedCombatMovement(ped, combatMovement);
    }

    /**
     * enum eCombatRange // 0xB69160F5
     * {
     * CR_Near,
     * CR_Medium,
     * CR_Far,
     * CR_VeryFar,
     * CR_NumRanges
     * };
     *
     * Hash: 0x3C606747B23E497B | Since: 323 | API-Set: unknown
     */
    export function setCombatRange(ped: number | IPed, combatRange: number): void {
        SetPedCombatRange(ped, combatRange);
    }

    /**
     * paletteId: 0 to 3.
     *
     * componentId:
     * enum ePedVarComp
     * {
     * PV_COMP_INVALID = -1,
     * PV_COMP_HEAD,
     * PV_COMP_BERD,
     * PV_COMP_HAIR,
     * PV_COMP_UPPR,
     * PV_COMP_LOWR,
     * PV_COMP_HAND,
     * PV_COMP_FEET,
     * PV_COMP_TEEF,
     * PV_COMP_ACCS,
     * PV_COMP_TASK,
     * PV_COMP_DECL,
     * PV_COMP_JBIB,
     * PV_COMP_MAX
     * };
     *
     * Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0x262B14F48D29DE80 | Since: 323 | API-Set: unknown
     */
    export function setComponentVariation(ped: number | IPed, componentId: number, drawableId: number, textureId: number, paletteId: number): void {
        SetPedComponentVariation(ped, componentId, drawableId, textureId, paletteId);
    }

    /**
     * enum ePedConfigFlags
     * {
     * _CPED_CONFIG_FLAG_0xC63DE95E = 1,
     * CPED_CONFIG_FLAG_NoCriticalHits = 2,
     * CPED_CONFIG_FLAG_DrownsInWater = 3,
     * CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
     * _CPED_CONFIG_FLAG_0x37D196F4 = 5,
     * _CPED_CONFIG_FLAG_0xE2462399 = 6,
     * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
     * _CPED_CONFIG_FLAG_0xEDDEB838 = 8,
     * _CPED_CONFIG_FLAG_0xB398B6FD = 9,
     * _CPED_CONFIG_FLAG_0xF6664E68 = 10,
     * _CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
     * _CPED_CONFIG_FLAG_0xCE394045 = 12,
     * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
     * _CPED_CONFIG_FLAG_0xCD8D1411 = 14,
     * _CPED_CONFIG_FLAG_0xB031F1A9 = 15,
     * _CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
     * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
     * _CPED_CONFIG_FLAG_0x380165BD = 18,
     * _CPED_CONFIG_FLAG_0x07C045C7 = 19,
     * _CPED_CONFIG_FLAG_0x583B5E2D = 20,
     * _CPED_CONFIG_FLAG_0x475EDA58 = 21,
     * _CPED_CONFIG_FLAG_0x8629D05B = 22,
     * _CPED_CONFIG_FLAG_0x1522968B = 23,
     * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
     * _CPED_CONFIG_FLAG_0x4CC09C4B = 25,
     * _CPED_CONFIG_FLAG_0x034F3053 = 26,
     * _CPED_CONFIG_FLAG_0xD91BA7CC = 27,
     * _CPED_CONFIG_FLAG_0x5C8DC66E = 28,
     * CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
     * _CPED_CONFIG_FLAG_0x6580B9D2 = 30,
     * _CPED_CONFIG_FLAG_0x0EF7A297 = 31,
     * CPED_CONFIG_FLAG_WillFlyThruWindscreen = 32,
     * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
     * CPED_CONFIG_FLAG_HasHelmet = 34,
     * CPED_CONFIG_FLAG_UseHelmet = 35,
     * CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
     * _CPED_CONFIG_FLAG_0xB130D17B = 37,
     * _CPED_CONFIG_FLAG_0x5F071200 = 38,
     * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
     * _CPED_CONFIG_FLAG_0xC287AAFF = 40,
     * _CPED_CONFIG_FLAG_0x203328CC = 41,
     * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
     * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
     * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
     * CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
     * _CPED_CONFIG_FLAG_0xDB115BFA = 46,
     * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
     * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
     * _CPED_CONFIG_FLAG_0xF8E99565 = 49,
     * _CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
     * _CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
     * _CPED_CONFIG_FLAG_NoCollison = 52,
     * _CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
     * _CPED_CONFIG_FLAG_0xD749FC41 = 54,
     * _CPED_CONFIG_FLAG_0x357F63F3 = 55,
     * _CPED_CONFIG_FLAG_0xC5E60961 = 56,
     * _CPED_CONFIG_FLAG_0x29275C3E = 57,
     * CPED_CONFIG_FLAG_IsFiring = 58,
     * CPED_CONFIG_FLAG_WasFiring = 59,
     * CPED_CONFIG_FLAG_IsStanding = 60,
     * CPED_CONFIG_FLAG_WasStanding = 61,
     * CPED_CONFIG_FLAG_InVehicle = 62,
     * CPED_CONFIG_FLAG_OnMount = 63,
     * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
     * CPED_CONFIG_FLAG_IsSwimming = 65,
     * CPED_CONFIG_FLAG_WasSwimming = 66,
     * CPED_CONFIG_FLAG_IsSkiing = 67,
     * CPED_CONFIG_FLAG_IsSitting = 68,
     * CPED_CONFIG_FLAG_KilledByStealth = 69,
     * CPED_CONFIG_FLAG_KilledByTakedown = 70,
     * CPED_CONFIG_FLAG_Knockedout = 71,
     * _CPED_CONFIG_FLAG_0x3E3C4560 = 72,
     * _CPED_CONFIG_FLAG_0x2994C7B7 = 73,
     * _CPED_CONFIG_FLAG_0x6D59D275 = 74,
     * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
     * CPED_CONFIG_FLAG_IsInTheAir = 76,
     * _CPED_CONFIG_FLAG_0x2D493FB7 = 77,
     * CPED_CONFIG_FLAG_IsAimingGun = 78,
     * _CPED_CONFIG_FLAG_0x14D69875 = 79,
     * _CPED_CONFIG_FLAG_0x40B05311 = 80,
     * _CPED_CONFIG_FLAG_0x8B230BC5 = 81,
     * _CPED_CONFIG_FLAG_0xC74E5842 = 82,
     * _CPED_CONFIG_FLAG_0x9EA86147 = 83,
     * _CPED_CONFIG_FLAG_0x674C746C = 84,
     * _CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
     * _CPED_CONFIG_FLAG_0xC144A1EF = 86,
     * _CPED_CONFIG_FLAG_0x0548512D = 87,
     * _CPED_CONFIG_FLAG_0x31C93909 = 88,
     * _CPED_CONFIG_FLAG_0xA0269315 = 89,
     * _CPED_CONFIG_FLAG_0xD4D59D4D = 90,
     * _CPED_CONFIG_FLAG_0x411D4420 = 91,
     * _CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
     * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
     * _CPED_CONFIG_FLAG_0x300E4CD3 = 94,
     * _CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
     * _CPED_CONFIG_FLAG_0x89C2EF13 = 96,
     * CPED_CONFIG_FLAG_VaultFromCover = 97,
     * _CPED_CONFIG_FLAG_0x02A852C8 = 98,
     * _CPED_CONFIG_FLAG_0x3D9407F1 = 99,
     * _CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
     * CPED_CONFIG_FLAG_ForcedAim = 101,
     * _CPED_CONFIG_FLAG_0xB942D71A = 102,
     * _CPED_CONFIG_FLAG_0xD26C55A8 = 103,
     * CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
     * CPED_CONFIG_FLAG_ForceReload = 105,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
     * _CPED_CONFIG_FLAG_0x83C0A4BF = 111,
     * _CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
     * CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
     * _CPED_CONFIG_FLAG_0x43B80B79 = 114,
     * _CPED_CONFIG_FLAG_0x0D2A9309 = 115,
     * CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
     * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
     * CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
     * CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
     * CPED_CONFIG_FLAG_IsHandCuffed = 120,
     * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
     * CPED_CONFIG_FLAG_DisableMelee = 122,
     * CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
     * CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
     * _CPED_CONFIG_FLAG_0x5FED6BFD = 125,
     * CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
     * CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
     * CPED_CONFIG_FLAG_CanBeAgitated = 128,
     * CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
     * CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
     * CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
     * CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
     * CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
     * CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
     * CPED_CONFIG_FLAG_IsScuba = 135,
     * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
     * CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
     * CPED_CONFIG_FLAG_RidingTrain = 138,
     * CPED_CONFIG_FLAG_ArrestResult = 139,
     * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
     * CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
     * _CPED_CONFIG_FLAG_0x6901E731 = 142,
     * _CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
     * CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
     * CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
     * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
     * CPED_CONFIG_FLAG_StairsDetected = 147,
     * CPED_CONFIG_FLAG_SlopeDetected = 148,
     * _CPED_CONFIG_FLAG_0x1A15670B = 149,
     * CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
     * CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
     * CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
     * CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
     * CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
     * CPED_CONFIG_FLAG_CanPerformArrest = 155,
     * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
     * CPED_CONFIG_FLAG_CanBeArrested = 157,
     * _CPED_CONFIG_FLAG_0xF7960FF5 = 158,
     * CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
     * _CPED_CONFIG_FLAG_0x0C6C3099 = 160,
     * _CPED_CONFIG_FLAG_0x645F927A = 161,
     * _CPED_CONFIG_FLAG_0xA86549B9 = 162,
     * _CPED_CONFIG_FLAG_0x8AAF337A = 163,
     * _CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
     * _CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
     * CPED_CONFIG_FLAG_IsInjured = 166,
     * CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
     * _CPED_CONFIG_FLAG_0xD8072639 = 168,
     * CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
     * CPED_CONFIG_FLAG_ForceDirectEntry = 170,
     * CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
     * CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
     * CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
     * CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
     * _CPED_CONFIG_FLAG_0x90008BFA = 175,
     * _CPED_CONFIG_FLAG_0x07C7A910 = 176,
     * CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
     * _CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
     * CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
     * CPED_CONFIG_FLAG_IsInCustody = 180,
     * CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
     * CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
     * CPED_CONFIG_FLAG_IsAgitated = 183,
     * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
     * CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
     * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
     * CPED_CONFIG_FLAG_HasHurtStarted = 187,
     * CPED_CONFIG_FLAG_DisableHurt = 188,
     * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
     * _CPED_CONFIG_FLAG_0x32FC208B = 190,
     * _CPED_CONFIG_FLAG_0x0C296E5A = 191,
     * _CPED_CONFIG_FLAG_0xE63B73EC = 192,
     * CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
     * CPED_CONFIG_FLAG_UsingScenario = 194,
     * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
     * _CPED_CONFIG_FLAG_0xD88C58A1 = 196,
     * _CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
     * _CPED_CONFIG_FLAG_0xEA02B420 = 198,
     * CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
     * CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
     * _CPED_CONFIG_FLAG_0x5E6466F6 = 201,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
     * CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
     * CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
     * CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
     * _CPED_CONFIG_FLAG_0x415B26B9 = 207,
     * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
     * CPED_CONFIG_FLAG_DodgedPlayer = 209,
     * CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
     * CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
     * CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
     * CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
     * CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
     * CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
     * CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
     * CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
     * _CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
     * _CPED_CONFIG_FLAG_0x848FFEF2 = 219,
     * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
     * CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
     * _CPED_CONFIG_FLAG_0x84F722FA = 222,
     * _CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
     * _CPED_CONFIG_FLAG_0x728AA918 = 224,
     * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
     * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
     * CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
     * _CPED_CONFIG_FLAG_0x1EA7225F = 228,
     * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
     * CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
     * _CPED_CONFIG_FLAG_0xFC3E572D = 231,
     * _CPED_CONFIG_FLAG_0x08E9F9CF = 232,
     * _CPED_CONFIG_FLAG_0x2D3BA52D = 233,
     * _CPED_CONFIG_FLAG_0xFD2F53EA = 234,
     * _CPED_CONFIG_FLAG_0x31A1B03B = 235,
     * CPED_CONFIG_FLAG_IsHoldingProp = 236,
     * CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
     * _CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
     * _CPED_CONFIG_FLAG_0x26149198 = 239,
     * CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
     * CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
     * CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
     * CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
     * CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
     * CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
     * CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
     * _CPED_CONFIG_FLAG_0x0C754ACA = 247,
     * CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
     * CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
     * CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
     * CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
     * CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
     * CPED_CONFIG_FLAG_OnStairs = 253,
     * _CPED_CONFIG_FLAG_0xE1A2F73F = 254,
     * CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
     * _CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
     * CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
     * _CPED_CONFIG_FLAG_0x329DCF1A = 258,
     * _CPED_CONFIG_FLAG_0x8D90DD1B = 259,
     * _CPED_CONFIG_FLAG_0xB8A292B7 = 260,
     * CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
     * _CPED_CONFIG_FLAG_0x2AF558F0 = 262,
     * _CPED_CONFIG_FLAG_0x82251455 = 263,
     * _CPED_CONFIG_FLAG_0x30CF498B = 264,
     * _CPED_CONFIG_FLAG_0xE1CD50AF = 265,
     * _CPED_CONFIG_FLAG_0x72E4AE48 = 266,
     * _CPED_CONFIG_FLAG_0xC2657EA1 = 267,
     * CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
     * CPED_CONFIG_FLAG_OnStairSlope = 270,
     * _CPED_CONFIG_FLAG_0xA0897933 = 271,
     * CPED_CONFIG_FLAG_DontBlipCop = 272,
     * CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
     * _CPED_CONFIG_FLAG_0xF7823618 = 274,
     * CPED_CONFIG_FLAG_KillWhenTrapped = 275,
     * CPED_CONFIG_FLAG_EdgeDetected = 276,
     * _CPED_CONFIG_FLAG_0x92B67896 = 277,
     * _CPED_CONFIG_FLAG_0xCAD677C9 = 278,
     * CPED_CONFIG_FLAG_AvoidTearGas = 279,
     * _CPED_CONFIG_FLAG_0x5276AC7B = 280,
     * CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
     * CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
     * _CPED_CONFIG_FLAG_0x9139724D = 283,
     * _CPED_CONFIG_FLAG_0xA1457461 = 284,
     * CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
     * CPED_CONFIG_FLAG_ShouldChargeNow = 286,
     * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
     * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
     * _CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
     * _CPED_CONFIG_FLAG_0xF3F5758C = 290,
     * _CPED_CONFIG_FLAG_0x2A9307F1 = 291,
     * _CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
     * _CPED_CONFIG_FLAG_0xA06A3C6C = 293,
     * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
     * _CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
     * CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
     * _CPED_CONFIG_FLAG_0xB31F1187 = 297,
     * _CPED_CONFIG_FLAG_0x84315402 = 298,
     * CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
     * _CPED_CONFIG_FLAG_0xC7829B67 = 300,
     * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
     * CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
     * _CPED_CONFIG_FLAG_0x2ADA871B = 303,
     * _CPED_CONFIG_FLAG_0x47BC8A58 = 304,
     * CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
     * _CPED_CONFIG_FLAG_0x4A133C50 = 306,
     * _CPED_CONFIG_FLAG_0xC58099C3 = 307,
     * _CPED_CONFIG_FLAG_0xF3D76D41 = 308,
     * _CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
     * CPED_CONFIG_FLAG_IsInCluster = 310,
     * CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
     * CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
     * _CPED_CONFIG_FLAG_0xD4136C22 = 313,
     * CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
     * CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
     * _CPED_CONFIG_FLAG_0xD5C98277 = 316,
     * CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
     * CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
     * _CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
     * CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
     * CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
     * CPED_CONFIG_FLAG_HasHighHeels = 322,
     * _CPED_CONFIG_FLAG_0x86B01E54 = 323,
     * CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
     * _CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
     * CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
     * CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
     * CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
     * CPED_CONFIG_FLAG_DisableTalkTo = 329,
     * CPED_CONFIG_FLAG_DontBlip = 330,
     * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
     * CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
     * _CPED_CONFIG_FLAG_0x150468FD = 333,
     * _CPED_CONFIG_FLAG_0x914EBD6B = 334,
     * _CPED_CONFIG_FLAG_0x79AF3B6D = 335,
     * _CPED_CONFIG_FLAG_0x75C7A632 = 336,
     * _CPED_CONFIG_FLAG_0x52D530E2 = 337,
     * _CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
     * CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
     * _CPED_CONFIG_FLAG_0x12ADB567 = 340,
     * _CPED_CONFIG_FLAG_0x105C8518 = 341,
     * CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
     * _CPED_CONFIG_FLAG_0xED152C3E = 343,
     * _CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
     * CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
     * _CPED_CONFIG_FLAG_0xCDDFE830 = 346,
     * CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
     * CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
     * CPED_CONFIG_FLAG_EquipJetpack = 349,
     * CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
     * _CPED_CONFIG_FLAG_0xE13D1F7C = 351,
     * _CPED_CONFIG_FLAG_0x40E25FB9 = 352,
     * _CPED_CONFIG_FLAG_0x930629D9 = 353,
     * _CPED_CONFIG_FLAG_0xECCF0C7F = 354,
     * _CPED_CONFIG_FLAG_0xB6E9613B = 355,
     * CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
     * CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
     * CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
     * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
     * CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
     * CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
     * CPED_CONFIG_FLAG_HasReserveParachute = 362,
     * CPED_CONFIG_FLAG_UseReserveParachute = 363,
     * CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
     * CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
     * CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
     * _CPED_CONFIG_FLAG_0xD7E07D37 = 367,
     * _CPED_CONFIG_FLAG_0x03C4FD24 = 368,
     * _CPED_CONFIG_FLAG_0x7675789A = 369,
     * _CPED_CONFIG_FLAG_0xB7288A88 = 370,
     * _CPED_CONFIG_FLAG_0xC06B6291 = 371,
     * CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
     * CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
     * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
     * CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
     * _CPED_CONFIG_FLAG_0x147F1FFB = 376,
     * _CPED_CONFIG_FLAG_0x4376DD79 = 377,
     * _CPED_CONFIG_FLAG_0xCD3DB518 = 378,
     * _CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
     * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
     * _CPED_CONFIG_FLAG_0xBCD816CD = 381,
     * _CPED_CONFIG_FLAG_0xCF02DD69 = 382,
     * _CPED_CONFIG_FLAG_0xF73AFA2E = 383,
     * _CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
     * _CPED_CONFIG_FLAG_0xF601F7EE = 385,
     * _CPED_CONFIG_FLAG_0xA91350FC = 386,
     * _CPED_CONFIG_FLAG_0x3AB23B96 = 387,
     * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
     * CPED_CONFIG_FLAG_HasBareFeet = 389,
     * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
     * CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
     * CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
     * _CPED_CONFIG_FLAG_0xC11D3E8F = 393,
     * CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
     * CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
     * CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
     * CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
     * CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
     * CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
     * CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
     * CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
     * CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
     * _CPED_CONFIG_FLAG_0x5E5B9591 = 403,
     * CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
     * _CPED_CONFIG_FLAG_0x77840177 = 405,
     * _CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
     * CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
     * CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
     * CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
     * CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
     * CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
     * CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
     * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
     * CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
     * CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
     * CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
     * CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
     * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
     * CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
     * _CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
     * CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
     * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
     * _CPED_CONFIG_FLAG_0xFE401D26 = 423,
     * CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
     * _CPED_CONFIG_FLAG_0x2B42AE82 = 425,
     * CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
     * CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
     * CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
     * CPED_CONFIG_FLAG_DisableStartEngine = 429,
     * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
     * CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
     * CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
     * CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
     * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
     * CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
     * CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
     * CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
     * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
     * _CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
     * _CPED_CONFIG_FLAG_0x50178878 = 440,
     * CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
     * CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
     * CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
     * CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
     * CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
     * CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
     * CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
     * CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
     * CPED_CONFIG_FLAG_FiresDummyRockets = 449,
     * CPED_CONFIG_FLAG_PedIsArresting = 450,
     * CPED_CONFIG_FLAG_IsDecoyPed = 451,
     * CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
     * CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
     * CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
     * _CPED_CONFIG_FLAG_0xB68D3EAB = 455,
     * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
     * _CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
     * CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
     * };
     *
     * Hash: 0x1913FE4CBF41C463 | Since: 323 | API-Set: unknown
     */
    export function setConfigFlag(ped: number | IPed, flagId: number, value: boolean): void {
        SetPedConfigFlag(ped, flagId, value);
    }

    /**
     * teleports ped to coords along with the vehicle ped is in
     *
     * Hash: 0x9AFEFF481A85AB2E | Since: 323 | API-Set: unknown
     */
    export function setCoordsKeepVehicle(ped: number | IPed, pos: Vector3): void {
        SetPedCoordsKeepVehicle(ped, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x87052FE446E07247 | Since: 323 | API-Set: unknown
     */
    export function setCoordsNoGang(ped: number | IPed, pos: Vector3): void {
        SetPedCoordsNoGang(ped, pos.x, pos.y, pos.z);
    }

    /**
     * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
     *
     * Hash: 0xA549131166868ED3 | Since: 323 | API-Set: unknown
     */
    export function setCowerHash(ped: number | IPed): void {
        SetPedCowerHash(ped, undefined);
    }

    /**
     * Sets Ped Default Clothes
     *
     * Hash: 0x45EEE61580806D63 | Since: 323 | API-Set: unknown
     */
    export function setDefaultComponentVariation(ped: number | IPed): void {
        SetPedDefaultComponentVariation(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4EF47FE21698A8B6 | Since: 323 | API-Set: unknown
     */
    export function setDefensiveAreaAttachedToPed(ped: number | IPed, attachPed: number | IPed): void {
        SetPedDefensiveAreaAttachedToPed(ped, attachPed, 0, 0, 0, 0, 0, 0, 0, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x413C6C763A4AFFAD | Since: 323 | API-Set: unknown
     */
    export function setDefensiveAreaDirection(ped: number | IPed): void {
        SetPedDefensiveAreaDirection(ped, 0, 0, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9B8F91AAD3B953E | Since: 323 | API-Set: unknown
     */
    export function setDefensiveSphereAttachedToPed(ped: number | IPed, target: number | IPed, xOffset: number, yOffset: number, zOffset: number, radius: number): void {
        SetPedDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4723DB6E736CCFF | Since: 323 | API-Set: unknown
     */
    export function setDefensiveSphereAttachedToVehicle(ped: number | IPed, target: number | IVehicle, xOffset: number, yOffset: number, zOffset: number, radius: number): void {
        SetPedDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95E3D6257B166CF2 | Since: 323 | API-Set: unknown
     */
    export function setDensityMultiplierThisFrame(multiplier: number): void {
        SetPedDensityMultiplierThisFrame(multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA5A7ECE2AA8FE70 | Since: 323 | API-Set: unknown
     */
    export function setDesiredHeading(ped: number | IPed, heading: number): void {
        SetPedDesiredHeading(ped, heading);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEEB64139BA29A7CF | Since: 323 | API-Set: unknown
     */
    export function setDiesInstantlyInWater(ped: number | IPed, toggle: boolean): void {
        SetPedDiesInstantlyInWater(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD718A22995E2B4BC | Since: 323 | API-Set: unknown
     */
    export function setDiesInSinkingVehicle(ped: number | IPed, toggle: boolean): void {
        SetPedDiesInSinkingVehicle(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A30922C90C9B42C | Since: 323 | API-Set: unknown
     */
    export function setDiesInVehicle(ped: number | IPed, toggle: boolean): void {
        SetPedDiesInVehicle(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x56CEF0AC79073BDE | Since: 323 | API-Set: unknown
     */
    export function setDiesInWater(ped: number | IPed, toggle: boolean): void {
        SetPedDiesInWater(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BA7919BED300023 | Since: 323 | API-Set: unknown
     */
    export function setDiesWhenInjured(ped: number | IPed, toggle: boolean): void {
        SetPedDiesWhenInjured(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED34AB6C5CB36520 | Since: 323 | API-Set: unknown
     */
    export function setDriveByClipsetOverride(ped: number | IPed, clipset: string): void {
        SetPedDriveByClipsetOverride(ped, clipset);
    }

    /**
     * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
     *
     * Hash: 0x030983CA930B692D | Since: 323 | API-Set: unknown
     */
    export function setDucking(ped: number | IPed, toggle: boolean): void {
        SetPedDucking(ped, toggle);
    }

    /**
     * intensity: 0.0f - 1.0f
     *
     * This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.
     *
     * Hash: 0x4E90D746056E273D | Since: 944 | API-Set: unknown
     */
    export function setEmissiveScale(ped: number | IPed, intensity: number): void {
        SetPedEmissiveIntensity(ped, intensity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE906EC930F5FE7C8 | Since: 791 | API-Set: unknown
     */
    export function setEnableCrewEmblem(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0xE906EC930F5FE7C8', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97A790315D3831FD | Since: 323 | API-Set: unknown
     */
    export function setEnableWeaponBlocking(ped: number | IPed, toggle: boolean): void {
        SetPedEnableWeaponBlocking(ped, toggle);
    }

    /**
     * Something related to the environmental effects natives.
     * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
     *
     * Hash: 0xD69411AA0CEBF9E9 | Since: 323 | API-Set: unknown
     */
    export function setEnveffColorModulator(ped: number | IPed): void {
        SetPedEnveffColorModulator(ped, 0, 0, 0);
    }

    /**
     * In agency_heist3b.c4, its like this 90% of the time:
     *
     * `PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);`
     * `PED::SET_PED_ENVEFF_SCALE(ped, 1.0);`
     * `PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);`
     * `PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);`
     *
     * and its like this 10% of the time:
     *
     * `PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);`
     * `PED::SET_PED_ENVEFF_SCALE(ped, 0.65);`
     * `PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);`
     * `PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);`
     *
     * Hash: 0x110F526AB784111F | Since: 323 | API-Set: unknown
     */
    export function setEnveffCpvAdd(ped: number | IPed): void {
        Citizen.invokeNative('0x110F526AB784111F', ped, 0);
    }

    /**
     * Values look to be between 0.0 and 1.0
     * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
     *
     * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
     *
     * Hash: 0xBF29516833893561 | Since: 323 | API-Set: unknown
     */
    export function setEnveffScale(ped: number | IPed, value: number): void {
        SetPedEnveffScale(ped, value);
    }

    /**
     * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
     * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
     * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
     * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
     * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
     * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
     * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
     * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
     * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
     * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
     * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
     * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
     * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
     * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
     * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
     * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
     *
     * Firing pattern info: https://pastebin.com/Px036isB
     *
     * Hash: 0x9AC577F5A12AD8A9 | Since: 323 | API-Set: unknown
     */
    export function setFiringPattern(ped: number | IPed, patternHash: number | string): void {
        if (typeof patternHash === 'string') patternHash = misc.getHashKey(patternHash)
        SetPedFiringPattern(ped, patternHash);
    }

    /**
     * bit 1 (0x2) = use vehicle
     * bit 15 (0x8000) = force cower
     *
     * Hash: 0x70A2D1137C8ED7C9 | Since: 323 | API-Set: unknown
     */
    export function setFleeAttributes(ped: number | IPed, attributeFlags: number, enable: boolean): void {
        SetPedFleeAttributes(ped, attributeFlags, enable);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FB17BA2E7DECA5B | Since: 323 | API-Set: unknown
     */
    export function setGeneratesDeadBodyEvents(ped: number | IPed, toggle: boolean): void {
        SetPedGeneratesDeadBodyEvents(ped, toggle);
    }

    /**
     * From the scripts:
     * `PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),`
     * "ANIM_GROUP_GESTURE_MISS_FRA0");
     * `PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),`
     * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
     *
     * Hash: 0xDDF803377F94AAA8 | Since: 323 | API-Set: unknown
     */
    export function setGestureGroup(ped: number | IPed, animGroupGesture: string): void {
        SetPedGestureGroup(ped, animGroupGesture);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC0ED94165A48BC2 | Since: 323 | API-Set: unknown
     */
    export function setGetOutUpsideDownVehicle(ped: number | IPed, toggle: boolean): void {
        SetPedGetOutUpsideDownVehicle(ped, toggle);
    }

    /**
     * enable or disable the gravity of a ped
     *
     * Examples:
     * `PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);`
     * `PED::SET_PED_GRAVITY(Local_289[iVar0 \/\*20\*\/], 0x00000001);`
     *
     * Hash: 0x9FF447B6B6AD960A | Since: 323 | API-Set: unknown
     */
    export function setGravity(ped: number | IPed, toggle: boolean): void {
        SetPedGravity(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BDDB8D9EC6BCF3C | Since: 323 | API-Set: unknown
     */
    export function setGroupMemberPassengerIndex(ped: number | IPed, index: number): void {
        SetPedGroupMemberPassengerIndex(ped, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4CFFC65454C93A49 | Since: 323 | API-Set: unknown
     */
    export function setHairTint(ped: number | IPed, colorID: number, highlightColorID: number): void {
        SetPedHairTint(ped, colorID, highlightColorID);
    }

    /**
     * The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
     *
     * The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
     *
     * !!!Can someone add working example for this???
     *
     * try this:
     * headBlendData headData;
     * GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
     *
     * SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
     * , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
     *
     *
     * For more info please refer to this topic.
     * gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
     *
     * Hash: 0x9414E18B9434C2FE | Since: 323 | API-Set: unknown
     */
    export function setHeadBlendData(ped: number | IPed, shapeFirstID: number, shapeSecondID: number, shapeThirdID: number, skinFirstID: number, skinSecondID: number, skinThirdID: number, shapeMix: number, skinMix: number, thirdMix: number, isParent: boolean): void {
        SetPedHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
    }

    /**
     * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
     *
     * overlayID       Part                  Index, to disable
     * 0               Blemishes             0 - 23, 255
     * 1               Facial Hair           0 - 28, 255
     * 2               Eyebrows              0 - 33, 255
     * 3               Ageing                0 - 14, 255
     * 4               Makeup                0 - 74, 255
     * 5               Blush                 0 - 6, 255
     * 6               Complexion            0 - 11, 255
     * 7               Sun Damage            0 - 10, 255
     * 8               Lipstick              0 - 9, 255
     * 9               Moles/Freckles        0 - 17, 255
     * 10              Chest Hair            0 - 16, 255
     * 11              Body Blemishes        0 - 11, 255
     * 12              Add Body Blemishes    0 - 1, 255
     *
     * Hash: 0x48F44967FA05CC1E | Since: 323 | API-Set: unknown
     */
    export function setHeadOverlay(ped: number | IPed, overlayID: number, index: number, opacity: number): void {
        SetPedHeadOverlay(ped, overlayID, index, opacity);
    }

    /**
     *
     *
     * ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
     *
     * Called after SET_PED_HEAD_OVERLAY().
     *
     * Hash: 0x497BF74A7B9CB952 | Since: 323 | API-Set: unknown
     */
    export function setHeadOverlayTint(ped: number | IPed, overlayID: number, colorType: number, colorID: number, secondColorID: number): void {
        SetPedHeadOverlayColor(ped, overlayID, colorType, colorID, secondColorID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3352E018D6F89DF | Since: 2699 | API-Set: unknown
     */
    export function setHealthPendingLastDamageEventOverrideFlag(toggle: boolean): void {
        Citizen.invokeNative('0xB3352E018D6F89DF', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33A8F7F7D5F7F33C | Since: 323 | API-Set: unknown
     */
    export function setHearingRange(ped: number | IPed, value: number): void {
        SetPedHearingRange(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1F6EBF9A3D55538 | Since: 323 | API-Set: unknown
     */
    export function setHeatscaleOverride(ped: number | IPed, heatScale: number): void {
        SetPedHeatscaleOverride(ped, heatScale);
    }

    /**
     * No comment provided
     *
     * Hash: 0x560A43136EB58105 | Since: 323 | API-Set: unknown
     */
    export function setHelmet(ped: number | IPed, canWearHelmet: boolean): void {
        SetPedHelmet(ped, canWearHelmet);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC0E78D5C2CE3EB25 | Since: 323 | API-Set: unknown
     */
    export function setHelmetFlag(ped: number | IPed, helmetFlag: number): void {
        SetPedHelmetFlag(ped, helmetFlag);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x26D83693ED99291C | Since: 323 | API-Set: unknown
     */
    export function setHelmetPropIndex(ped: number | IPed, propIndex: number): void {
        SetPedHelmetPropIndex(ped, propIndex, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1550C4BD22582E2 | Since: 323 | API-Set: unknown
     */
    export function setHelmetTextureIndex(ped: number | IPed, textureIndex: number): void {
        SetPedHelmetTextureIndex(ped, textureIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F7325574E41B44D | Since: 791 | API-Set: unknown
     */
    export function setHelmetVisorPropIndices(ped: number | IPed): void {
        SetPedHelmetUnk(ped, false, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x52D59AB61DDC05DD | Since: 323 | API-Set: unknown
     */
    export function setHighlyPerceptive(ped: number | IPed, toggle: boolean): void {
        SetPedHighlyPerceptive(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF107E836A70DCE05 | Since: 323 | API-Set: unknown
     */
    export function setIdRange(ped: number | IPed, value: number): void {
        SetPedIdRange(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x570389D1C3DE3C6B | Since: 323 | API-Set: unknown
     */
    export function setIncreasedAvoidanceRadius(ped: number | IPed): void {
        SetPedIncreasedAvoidanceRadius(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC4B4B3B9908052A | Since: 323 | API-Set: unknown
     */
    export function setInjuredOnGroundBehaviour(ped: number | IPed): void {
        Citizen.invokeNative('0xEC4B4B3B9908052A', ped, 0);
    }

    /**
     * Ped: The ped to warp.
     * vehicle: The vehicle to warp the ped into.
     * Seat_Index: [-1 is driver seat, -2 first free passenger seat]
     *
     * Moreinfo of Seat Index
     * DriverSeat = -1
     * Passenger = 0
     * Left Rear = 1
     * RightRear = 2
     *
     * Hash: 0xF75B0D629E1C063D | Since: 323 | API-Set: unknown
     */
    export function setIntoVehicle(ped: number | IPed, vehicle: number | IVehicle, seatIndex: number): void {
        SetPedIntoVehicle(ped, vehicle, seatIndex);
    }

    /**
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));`
     *
     * Hash: 0x530071295899A8C6 | Since: 323 | API-Set: unknown
     */
    export function setInVehicleContext(ped: number | IPed, context: number | string): void {
        if (typeof context === 'string') context = misc.getHashKey(context)
        SetPedInVehicleContext(ped, context);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9B61A329BFDCBEA | Since: 323 | API-Set: unknown
     */
    export function setIsAvoidedByOthers(): void {
        Citizen.invokeNative('0xA9B61A329BFDCBEA', undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33A60D8BDD6E508C | Since: 323 | API-Set: unknown
     */
    export function setIsIgnoredByAutoOpenDoors(ped: number | IPed): void {
        SetPedCanPlayInjuredAnims(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x971D38760FBC02EF | Since: 323 | API-Set: unknown
     */
    export function setKeepTask(ped: number | IPed, toggle: boolean): void {
        SetPedKeepTask(ped, toggle);
    }

    /**
     * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
     *
     * Hash: 0xC396F5B86FF9FEBD | Since: 323 | API-Set: unknown
     */
    export function setLegIkMode(ped: number | IPed, mode: number): void {
        SetPedLegIkMode(ped, mode);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC2C5C242AAC342B | Since: 323 | API-Set: unknown
     */
    export function setLodMultiplier(ped: number | IPed, multiplier: number): void {
        SetPedLodMultiplier(ped, multiplier);
    }

    /**
     * Sets the maximum health of a ped.
     *
     * Hash: 0xF5F6378C4F3419D3 | Since: 323 | API-Set: unknown
     */
    export function setMaxHealth(ped: number | IPed, value: number): void {
        SetPedMaxHealth(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x433083750C5E064A | Since: 323 | API-Set: unknown
     */
    export function setMaxMoveBlendRatio(ped: number | IPed, value: number): void {
        SetPedMaxMoveBlendRatio(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43C851690662113D | Since: 323 | API-Set: unknown
     */
    export function setMaxTimeInWater(ped: number | IPed, value: number): void {
        SetPedMaxTimeInWater(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6BA428C528D9E522 | Since: 323 | API-Set: unknown
     */
    export function setMaxTimeUnderwater(ped: number | IPed, value: number): void {
        SetPedMaxTimeUnderwater(ped, value);
    }

    /**
     * Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
     *
     *
     *
     * 0 - Nose Width (Thin/Wide)
     *
     * 1 - Nose Peak (Up/Down)
     *
     * 2 - Nose Length (Long/Short)
     *
     * 3 - Nose Bone Curveness (Crooked/Curved)
     *
     * 4 - Nose Tip (Up/Down)
     *
     * 5 - Nose Bone Twist (Left/Right)
     *
     * 6 - Eyebrow (Up/Down)
     *
     * 7 - Eyebrow (In/Out)
     *
     * 8 - Cheek Bones (Up/Down)
     *
     * 9 - Cheek Sideways Bone Size (In/Out)
     *
     * 10 - Cheek Bones Width (Puffed/Gaunt)
     *
     * 11 - Eye Opening (Both) (Wide/Squinted)
     *
     * 12 - Lip Thickness (Both) (Fat/Thin)
     *
     * 13 - Jaw Bone Width (Narrow/Wide)
     *
     * 14 - Jaw Bone Shape (Round/Square)
     *
     * 15 - Chin Bone (Up/Down)
     *
     * 16 - Chin Bone Length (In/Out or Backward/Forward)
     *
     * 17 - Chin Bone Shape (Pointed/Square)
     *
     * 18 - Chin Hole (Chin Bum)
     *
     * 19 - Neck Thickness (Thin/Thick)
     *
     * Hash: 0x71A5C1DBA060049E | Since: 323 | API-Set: unknown
     */
    export function setMicroMorph(ped: number | IPed, index: number, scale: number): void {
        SetPedFaceFeature(ped, index, scale);
    }

    /**
     * Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
     *
     * Hash: 0xFA0675AB151073FA | Since: 323 | API-Set: unknown
     */
    export function setMinGroundTimeForStungun(ped: number | IPed, ms: number): void {
        SetPedMinGroundTimeForStungun(ped, ms);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01A898D26E2333DD | Since: 323 | API-Set: unknown
     */
    export function setMinMoveBlendRatio(ped: number | IPed, value: number): void {
        SetPedMinMoveBlendRatio(ped, value);
    }

    /**
     * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
     *
     * Hash: 0xE163A4BCE4DE6F11 | Since: 323 | API-Set: unknown
     */
    export function setModelIsSuppressed(modelHash: number | string, toggle: boolean): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetPedModelIsSuppressed(modelHash, toggle);
    }

    /**
     * Maximum possible amount of money on MP is 2000. ~JX
     *
     * -----------------------------------------------------------------------------
     *
     * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
     *
     * Hash: 0xA9C8960E8684C1B5 | Since: 323 | API-Set: unknown
     */
    export function setMoney(ped: number | IPed, amount: number): void {
        SetPedMoney(ped, amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A986918B102B448 | Since: 323 | API-Set: unknown
     */
    export function setMotionBlur(ped: number | IPed, toggle: boolean): void {
        SetPedMotionBlur(ped, toggle);
    }

    /**
     * Found in the b617d scripts:
     * `PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h");`
     *
     * Hash: 0x9DBA107B4937F809 | Since: 323 | API-Set: unknown
     */
    export function setMotionInCoverClipsetOverride(ped: number | IPed): void {
        SetPedCoverClipsetOverride(ped, undefined);
    }

    /**
     * transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f
     *
     * List of movement clipsets:
     * Thanks to elsewhat for list.
     *
     * "ANIM_GROUP_MOVE_BALLISTIC"
     * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
     * "clipset@move@trash_fast_turn"
     * "FEMALE_FAST_RUNNER"
     * "missfbi4prepp1_garbageman"
     * "move_characters@franklin@fire"
     * "move_characters@Jimmy@slow@"
     * "move_characters@michael@fire"
     * "move_f@flee@a"
     * "move_f@scared"
     * "move_f@sexy@a"
     * "move_heist_lester"
     * "move_injured_generic"
     * "move_lester_CaneUp"
     * "move_m@bag"
     * "MOVE_M@BAIL_BOND_NOT_TAZERED"
     * "MOVE_M@BAIL_BOND_TAZERED"
     * "move_m@brave"
     * "move_m@casual@d"
     * "move_m@drunk@moderatedrunk"
     * "MOVE_M@DRUNK@MODERATEDRUNK"
     * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
     * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
     * "MOVE_M@DRUNK@VERYDRUNK"
     * "move_m@fire"
     * "move_m@gangster@var_e"
     * "move_m@gangster@var_f"
     * "move_m@gangster@var_i"
     * "move_m@JOG@"
     * "MOVE_M@PRISON_GAURD"
     * "MOVE_P_M_ONE"
     * "MOVE_P_M_ONE_BRIEFCASE"
     * "move_p_m_zero_janitor"
     * "move_p_m_zero_slow"
     * "move_ped_bucket"
     * "move_ped_crouched"
     * "move_ped_mop"
     * "MOVE_M@FEMME@"
     * "MOVE_F@FEMME@"
     * "MOVE_M@GANGSTER@NG"
     * "MOVE_F@GANGSTER@NG"
     * "MOVE_M@POSH@"
     * "MOVE_F@POSH@"
     * "MOVE_M@TOUGH_GUY@"
     * "MOVE_F@TOUGH_GUY@"
     *
     * ~ NotCrunchyTaco
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0xAF8A94EDE7712BEF | Since: 323 | API-Set: unknown
     */
    export function setMovementClipset(ped: number | IPed, clipSet: string, transitionSpeed: number): void {
        SetPedMovementClipset(ped, clipSet, transitionSpeed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E8C908F41584ECD | Since: 323 | API-Set: unknown
     */
    export function setMoveAnimsBlendOut(ped: number | IPed): void {
        SetPedMoveAnimsBlendOut(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B3E35AC043707D9 | Since: 573 | API-Set: unknown
     */
    export function setMoveRateInWaterOverride(ped: number | IPed): void {
        Citizen.invokeNative('0x0B3E35AC043707D9', ped, 0);
    }

    /**
     * Min: 0.00
     * Max: 10.00
     *
     * Can be used in combo with fast run cheat.
     *
     * When value is set to 10.00:
     * Sprinting without fast run cheat: 66 m/s
     * Sprinting with fast run cheat: 77 m/s
     *
     * Needs to be looped!
     *
     * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
     *
     * Hash: 0x085BF80FA50A39D1 | Since: 323 | API-Set: unknown
     */
    export function setMoveRateOverride(ped: number | IPed, value: number): void {
        SetPedMoveRateOverride(ped, value);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * *untested but char *name could also be a hash for a localized string
     *
     * Hash: 0x98EFA132A4117BE1 | Since: 323 | API-Set: unknown
     */
    export function setNameDebug(ped: number | IPed, name: string): void {
        SetPedNameDebug(ped, name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DBFC55D5C9BB447 | Since: 323 | API-Set: unknown
     */
    export function setNeverLeavesGroup(ped: number | IPed, toggle: boolean): void {
        SetPedNeverLeavesGroup(ped, toggle);
    }

    /**
     * The distance between these points, is the diagonal of a box (remember it's 3D).
     *
     * Hash: 0xEE01041D559983EA | Since: 323 | API-Set: unknown
     */
    export function setNonCreationArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
        SetPedNonCreationArea(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA52D5247A4227E14 | Since: 323 | API-Set: unknown
     */
    export function setNoTimeDelayBeforeShot(): void {
        Citizen.invokeNative('0xA52D5247A4227E14', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE07FF6495D52E2A | Since: 323 | API-Set: unknown
     */
    export function setPanicExitScenario(): boolean {
        return SetPedPanicExitScenario(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x333FC8DB079B7186 | Since: 323 | API-Set: unknown
     */
    export function setParachuteTintIndex(ped: number | IPed, tintIndex: number): void {
        SetPedParachuteTintIndex(ped, tintIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x83A169EABCDB10A2 | Since: 323 | API-Set: unknown
     */
    export function setPhonePaletteIdx(): void {
        SetPedPhonePaletteIdx(undefined, undefined);
    }

    /**
     * i could be time. Only example in the decompiled scripts uses it as -1.
     *
     * Hash: 0xAAD6D1ACF08F4612 | Since: 323 | API-Set: unknown
     */
    export function setPinnedDown(ped: number | IPed, pinned: boolean, i: number): boolean {
        return SetPedPinnedDown(ped, pinned, i);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x94D94BF1A75AED3D | Since: 323 | API-Set: unknown
     */
    export function setPlaysHeadOnHornAnimWhenDiesInVehicle(ped: number | IPed, toggle: boolean): void {
        SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8421EB4DA7E391B9 | Since: 323 | API-Set: unknown
     */
    export function setPreferredCoverSet(ped: number | IPed, itemSet: any): void {
        SetPedPreferredCoverSet(ped, itemSet);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x2B16A3BFF1FBCE49 | Since: 323 | API-Set: unknown
     */
    export function setPreloadPropData(ped: number | IPed, componentId: number, drawableId: number, TextureId: number): number {
        return SetPedPreloadPropData(ped, componentId, drawableId, TextureId);
    }

    /**
     * from extreme3.c4
     * `PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));`
     *
     * p1 is probably componentId
     *
     * Hash: 0x39D55A620FCB6A3A | Since: 323 | API-Set: unknown
     */
    export function setPreloadVariationData(ped: number | IPed, slot: number, drawableId: number, textureId: number): number {
        return SetPedPreloadVariationData(ped, slot, drawableId, textureId);
    }

    /**
     * This is only called once in the scripts.
     *
     * sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
     * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
     * `PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());`
     *
     * Hash: 0xCD17B554996A8D9E | Since: 323 | API-Set: unknown
     */
    export function setPrimaryLookat(ped: number | IPed, lookAt: number | IPed): void {
        SetPedPrimaryLookat(ped, lookAt);
    }

    /**
     * ComponentId can be set to various things based on what category you're wanting to set
     * enum PedPropsData
     * {
     * PED_PROP_HATS = 0,
     * PED_PROP_GLASSES = 1,
     * PED_PROP_EARS = 2,
     * PED_PROP_WATCHES = 3,
     * };
     * Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x93376B65A266EB5F | Since: 323 | API-Set: unknown
     */
    export function setPropIndex(ped: number | IPed, componentId: number, drawableId: number, TextureId: number, attach: boolean): void {
        SetPedPropIndex(ped, componentId, drawableId, TextureId, attach, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01F6594B923B9251 | Since: 323 | API-Set: unknown
     */
    export function setRagdollForceFall(ped: number | IPed): void {
        SetPedRagdollForceFall(ped);
    }

    /**
     * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
     *
     * Hash: 0xF0A4F1BBF4FA7497 | Since: 323 | API-Set: unknown
     */
    export function setRagdollOnCollision(ped: number | IPed, toggle: boolean): void {
        SetPedRagdollOnCollision(ped, toggle);
    }

    /**
     * p1 is always 0 in R* scripts.
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xC8A9481A01E63C28 | Since: 323 | API-Set: unknown
     */
    export function setRandomComponentVariation(ped: number | IPed): void {
        SetPedRandomComponentVariation(ped, 0);
    }

    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xC44AA05345C992C6 | Since: 323 | API-Set: unknown
     */
    export function setRandomProps(ped: number | IPed): void {
        SetPedRandomProps(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xADB3F206518799E8 | Since: 323 | API-Set: unknown
     */
    export function setRelationshipGroupDefaultHash(ped: number | IPed, hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        SetPedRelationshipGroupDefaultHash(ped, hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC80A74AC829DDD92 | Since: 323 | API-Set: unknown
     */
    export function setRelationshipGroupHash(ped: number | IPed, hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        SetPedRelationshipGroupHash(ped, hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE88DA0751C22A2AD | Since: 323 | API-Set: unknown
     */
    export function setReserveParachuteTintIndex(ped: number | IPed): void {
        SetPedReserveParachuteTintIndex(ped, undefined);
    }

    /**
     * `PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);`
     * Known values:
     * PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
     *
     * Hash: 0xC1E8A365BF3B29F2 | Since: 323 | API-Set: unknown
     */
    export function setResetFlag(ped: number | IPed, flagId: number, doReset: boolean): void {
        SetPedResetFlag(ped, flagId, doReset);
    }

    /**
     * This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
     *
     * Hash: 0x36C6984C3ED0C911 | Since: 323 | API-Set: unknown
     */
    export function setScubaGearVariation(ped: number | IPed): void {
        SetPedScubaGearVariation(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF29CF591C4BF6CEE | Since: 323 | API-Set: unknown
     */
    export function setSeeingRange(ped: number | IPed, value: number): void {
        SetPedSeeingRange(ped, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x96A05E4FB321B1BA | Since: 323 | API-Set: unknown
     */
    export function setShootsAtCoord(ped: number | IPed, pos: Vector3, toggle: boolean): void {
        SetPedShootsAtCoord(ped, pos.x, pos.y, pos.z, toggle);
    }

    /**
     * shootRate 0-1000
     *
     * Hash: 0x614DA022990752DC | Since: 323 | API-Set: unknown
     */
    export function setShootRate(ped: number | IPed, shootRate: number): void {
        SetPedShootRate(ped, shootRate);
    }

    /**
     * No comment provided
     *
     * Hash: 0x425AECF167663F48 | Since: 323 | API-Set: unknown
     */
    export function setShouldIgnoreScenarioExitCollisionChecks(ped: number | IPed): void {
        Citizen.invokeNative('0x425AECF167663F48', ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B6010B3CBC29095 | Since: 323 | API-Set: unknown
     */
    export function setShouldIgnoreScenarioNavChecks(): void {
        Citizen.invokeNative('0x5B6010B3CBC29095', undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC6935EBE0847B90 | Since: 323 | API-Set: unknown
     */
    export function setShouldPlayDirectedNormalScenarioExit(): boolean {
        return SetPedShouldPlayDirectedScenarioExit(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEEED8FAFEC331A70 | Since: 323 | API-Set: unknown
     */
    export function setShouldPlayFleeScenarioExit(ped: number | IPed): boolean {
        return SetPedShouldPlayFleeScenarioExit(ped, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1C03A5352243A30 | Since: 323 | API-Set: unknown
     */
    export function setShouldPlayImmediateScenarioExit(ped: number | IPed): void {
        SetPedShouldPlayImmediateScenarioExit(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA3A9299C4F2ADB98 | Since: 323 | API-Set: unknown
     */
    export function setShouldPlayNormalScenarioExit(ped: number | IPed): void {
        SetPedShouldPlayNormalScenarioExit(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEDA60A74219D064 | Since: 323 | API-Set: unknown
     */
    export function setShouldProbeForScenarioExitsInOneFrame(): void {
        Citizen.invokeNative('0xCEDA60A74219D064', undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D3151A373974804 | Since: 323 | API-Set: unknown
     */
    export function setSphereDefensiveArea(ped: number | IPed, pos: Vector3, radius: number): void {
        SetPedSphereDefensiveArea(ped, pos.x, pos.y, pos.z, radius, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDF4079F9D54C9A1 | Since: 323 | API-Set: unknown
     */
    export function setStayInVehicleWhenJacked(ped: number | IPed, toggle: boolean): void {
        SetPedStayInVehicleWhenJacked(ped, toggle);
    }

    /**
     * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
     *
     * Hash: 0x88CBB5CEB96B7BD2 | Since: 323 | API-Set: unknown
     */
    export function setStealthMovement(ped: number | IPed, action: string): void {
        SetPedStealthMovement(ped, false, action);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2016C603D6B8987C | Since: 323 | API-Set: unknown
     */
    export function setSteersAroundDeadBodies(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0x2016C603D6B8987C', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1509C089ADC208BF | Since: 323 | API-Set: unknown
     */
    export function setSteersAroundObjects(ped: number | IPed, toggle: boolean): void {
        SetPedSteersAroundObjects(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46F2193B3AD1D891 | Since: 323 | API-Set: unknown
     */
    export function setSteersAroundPeds(ped: number | IPed, toggle: boolean): void {
        SetPedSteersAroundPeds(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB6FB9D48DDE23EC | Since: 323 | API-Set: unknown
     */
    export function setSteersAroundVehicles(ped: number | IPed, toggle: boolean): void {
        SetPedSteersAroundVehicles(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x288DF530C92DAD6F | Since: 323 | API-Set: unknown
     */
    export function setSteerBias(ped: number | IPed, value: number): void {
        Citizen.invokeNative('0x288DF530C92DAD6F', ped, value);
    }

    /**
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x29A28F3F8CF6D854 | Since: 323 | API-Set: unknown
     */
    export function setStrafeClipset(ped: number | IPed, clipSet: string): void {
        SetPedStrafeClipset(ped, clipSet);
    }

    /**
     * Ped no longer takes critical damage modifiers if set to FALSE.
     * Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
     *
     * Hash: 0xEBD76F2359F190AC | Since: 323 | API-Set: unknown
     */
    export function setSuffersCriticalHits(ped: number | IPed, toggle: boolean): void {
        SetPedSuffersCriticalHits(ped, toggle);
    }

    /**
     * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
     *
     * Hash: 0x27B0405F59637D1F | Since: 323 | API-Set: unknown
     */
    export function setSweat(ped: number | IPed, sweat: number): void {
        SetPedSweat(ped, sweat);
    }

    /**
     * enum eTargetLossResponseType
     * {
     * TLR_ExitTask,
     * TLR_NeverLoseTarget,
     * TLR_SearchForTarget
     * };
     *
     * Hash: 0x0703B9079823DA4A | Since: 323 | API-Set: unknown
     */
    export function setTargetLossResponse(ped: number | IPed, responseType: number): void {
        SetPedTargetLossResponse(ped, responseType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x112942C6E708F70B | Since: 323 | API-Set: unknown
     */
    export function setToInformRespectedFriends(ped: number | IPed, radius: number, maxFriends: number): void {
        SetPedToInformRespectedFriends(ped, radius, maxFriends);
    }

    /**
     * No comment provided
     *
     * Hash: 0x332B562EEDA62399 | Since: 323 | API-Set: unknown
     */
    export function setToLoadCover(ped: number | IPed, toggle: boolean): void {
        SetPedToLoadCover(ped, toggle);
    }

    /**
     * p4/p5: Unused in TU27
     * Ragdoll Types:
     * **0**: CTaskNMRelax
     * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
     * **Else**: CTaskNMBalance
     * time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
     *
     * time2- Unknown time, in milliseconds
     *
     * ragdollType-
     * 0 : Normal ragdoll
     * 1 : Falls with stiff legs/body
     * 2 : Narrow leg stumble(may not fall)
     * 3 : Wide leg stumble(may not fall)
     *
     * p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
     *
     *
     *
     *
     * EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
     *
     * Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
     *
     * Hash: 0xAE99FB955581844A | Since: 323 | API-Set: unknown
     */
    export function setToRagdoll(ped: number | IPed, time1: number, time2: number, ragdollType: number): boolean {
        return SetPedToRagdoll(ped, time1, time2, ragdollType, false, false, false);
    }

    /**
     * Return variable is never used in R*'s scripts.
     *
     * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
     *
     * enum eRagdollType
     * {
     * RD_MALE=0,
     * RD_FEMALE = 1,
     * RD_MALE_LARGE = 2,
     * RD_CUSTOM = 3,
     * }
     *
     * x, y, and z are coordinates, most likely to where the ped will fall.
     *
     * p8 to p13 are always 0f in R*'s scripts.
     *
     * (Simplified) Example of the usage of the function from R*'s scripts:
     * `ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);`
     *
     *
     * Hash: 0xD76632D99E4966C8 | Since: 323 | API-Set: unknown
     */
    export function setToRagdollWithFall(ped: number | IPed, time: number, ragdollType: number, pos: Vector3, velocity: number): boolean {
        return SetPedToRagdollWithFall(ped, time, 0, ragdollType, pos.x, pos.y, pos.z, velocity, 0, 0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F62619393661D6E | Since: 877 | API-Set: unknown
     */
    export function setTreatedAsFriendly(): void {
        Citizen.invokeNative('0x0F62619393661D6E', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFC976FD0580C7B3 | Since: 323 | API-Set: unknown
     */
    export function setUpperBodyDamageOnly(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0xAFC976FD0580C7B3', ped, toggle);
    }

    /**
     * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
     *
     * Hash: 0xD75ACCF5E0FB5367 | Since: 323 | API-Set: unknown
     */
    export function setUsingActionMode(ped: number | IPed, action: string): void {
        SetPedUsingActionMode(ped, false, 0, action);
    }

    /**
     * seatIndex must be <= 2
     *
     * Hash: 0x952F06BEECD775CC | Since: 323 | API-Set: unknown
     */
    export function setVehicleForcedSeatUsage(ped: number | IPed, vehicle: number | IVehicle, seatIndex: number, flags: number): void {
        SetPedVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3B6405E8AB34A907 | Since: 323 | API-Set: unknown
     */
    export function setVisualFieldCenterAngle(ped: number | IPed, angle: number): void {
        SetPedVisualFieldCenterAngle(ped, angle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70793BDCA1E854D4 | Since: 323 | API-Set: unknown
     */
    export function setVisualFieldMaxAngle(ped: number | IPed, value: number): void {
        SetPedVisualFieldMaxAngle(ped, value);
    }

    /**
     * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
     *
     * Hash: 0x78D0B67629D75856 | Since: 323 | API-Set: unknown
     */
    export function setVisualFieldMaxElevationAngle(ped: number | IPed, angle: number): void {
        SetPedVisualFieldMaxElevationAngle(ped, angle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DB492222FB21E26 | Since: 323 | API-Set: unknown
     */
    export function setVisualFieldMinAngle(ped: number | IPed, value: number): void {
        SetPedVisualFieldMinAngle(ped, value);
    }

    /**
     * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
     * -90f should let the ped see 90 degrees below them, for example.
     *
     * Hash: 0x7A276EB2C224D70F | Since: 323 | API-Set: unknown
     */
    export function setVisualFieldMinElevationAngle(ped: number | IPed, angle: number): void {
        SetPedVisualFieldMinElevationAngle(ped, angle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C74B0BC831B753A | Since: 323 | API-Set: unknown
     */
    export function setVisualFieldPeripheralRange(ped: number | IPed, range: number): void {
        SetPedVisualFieldPeripheralRange(ped, range);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2622E35B77D3ACA2 | Since: 323 | API-Set: unknown
     */
    export function setWeaponMovementClipset(ped: number | IPed, clipSet: string): void {
        SetPedWeaponMovementClipset(ped, clipSet);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC0BB4D87777CAE2 | Since: 2802 | API-Set: unknown
     */
    export function setWetness(ped: number | IPed, wetLevel: number): void {
        Citizen.invokeNative('0xAC0BB4D87777CAE2', ped, wetLevel);
    }

    /**
     * `combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function`
     *
     * Hash: 0xB5485E4907B53019 | Since: 323 | API-Set: unknown
     */
    export function setWetnessEnabledThisFrame(ped: number | IPed): void {
        SetPedWetnessEnabledThisFrame(ped);
    }

    /**
     * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
     *
     *
     *
     * Hash: 0x44CB6447D2571AA0 | Since: 323 | API-Set: unknown
     */
    export function setWetnessHeight(ped: number | IPed, height: number): void {
        SetPedWetnessHeight(ped, height);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E9679C1DFCF422C | Since: 877 | API-Set: unknown
     */
    export function setWillOnlyAttackWantedPlayer(): void {
        Citizen.invokeNative('0x3E9679C1DFCF422C', undefined, undefined);
    }

    /**
     * Min and max are usually 100.0 and 200.0
     *
     * Hash: 0xD8C3BE3EE94CAF2D | Since: 323 | API-Set: unknown
     */
    export function setPopControlSphereThisFrame(pos: Vector3, min: number, max: number): void {
        SetPopControlSphereThisFrame(pos.x, pos.y, pos.z, min, max);
    }

    /**
     * Works for both player and peds,
     *
     * enum eRagdollBlockingFlags
     * {
     * RBF_BULLET_IMPACT = 0,
     * RBF_VEHICLE_IMPACT = 1,
     * RBF_FIRE = 2,
     * RBF_ELECTROCUTION = 3,
     * RBF_PLAYER_IMPACT = 4,
     * RBF_EXPLOSION = 5,0
     * RBF_IMPACT_OBJECT = 6,
     * RBF_MELEE = 7,
     * RBF_RUBBER_BULLET = 8,
     * RBF_FALLING = 9,
     * RBF_WATER_JET = 10,
     * RBF_DROWNING = 11,
     * _0x9F52E2C4 = 12,
     * RBF_PLAYER_BUMP = 13,
     * RBF_PLAYER_RAGDOLL_BUMP = 14,
     * RBF_PED_RAGDOLL_BUMP = 15,
     * RBF_VEHICLE_GRAB = 16,
     * RBF_SMOKE_GRENADE = 17,
     * };
     *
     *
     *
     * Hash: 0x26695EC767728D84 | Since: 323 | API-Set: unknown
     */
    export function setRagdollBlockingFlags(ped: number | IPed, blockingFlag: number): void {
        SetRagdollBlockingFlags(ped, blockingFlag);
    }

    /**
     * Sets the relationship between two groups. This should be called twice (once for each group).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     *
     * Example:
     * `PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);`
     * `PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);`
     *
     * Hash: 0xBF25EB89375A37AD | Since: 323 | API-Set: unknown
     */
    export function setRelationshipBetweenGroups(relationship: number, group1: number | string, group2: number | string): void {
        if (typeof group1 === 'string') group1 = misc.getHashKey(group1)
        if (typeof group2 === 'string') group2 = misc.getHashKey(group2)
        SetRelationshipBetweenGroups(relationship, group1, group2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5615E0C5EB2BC6E2 | Since: 877 | API-Set: unknown
     */
    export function setRelationshipGroupAffectsWantedLevel(group: number | string): void {
        if (typeof group === 'string') group = misc.getHashKey(group)
        SetRelationshipGroupDontAffectWantedLevel(group, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28157D43CF600981 | Since: 323 | API-Set: unknown
     */
    export function setScenariosSpawnInSphereArea(pos: Vector3, range: number): void {
        SetScenarioPedsSpawnInSphereArea(pos.x, pos.y, pos.z, range, 0);
    }

    /**
     * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
     *
     * Hash: 0x14F19A8782C8071E | Since: 323 | API-Set: unknown
     */
    export function setScenariosToBeReturnedByNextCommand(value: boolean): void {
        SetScenarioPedsToBeReturnedByNextCommand(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A556143A1C03898 | Since: 323 | API-Set: unknown
     */
    export function setScenarioDensityMultiplierThisFrame(): void {
        SetScenarioPedDensityMultiplierThisFrame(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5917BBA32D06C230 | Since: 323 | API-Set: unknown
     */
    export function setScriptedAnimSeatOffset(ped: number | IPed): void {
        SetScriptedAnimSeatOffset(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5086C7843552CF85 | Since: 323 | API-Set: unknown
     */
    export function setScriptedConversionCoordThisFrame(pos: Vector3): void {
        SetScriptedConversionCoordThisFrame(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x394B9CD12435C981 | Since: 323 | API-Set: unknown
     */
    export function setSynchronizedSceneHoldLastFrame(sceneID: number, toggle: boolean): void {
        SetSynchronizedSceneHoldLastFrame(sceneID, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9A897A4C6C2974F | Since: 323 | API-Set: unknown
     */
    export function setSynchronizedSceneLoo(sceneID: number, toggle: boolean): void {
        SetSynchronizedSceneLooped(sceneID, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6ACF6B7225801CD7 | Since: 323 | API-Set: unknown
     */
    export function setSynchronizedSceneOrigin(sceneID: number, pos: Vector3, roll: number, pitch: number, yaw: number): void {
        SetSynchronizedSceneOrigin(sceneID, pos.x, pos.y, pos.z, roll, pitch, yaw, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x734292F4F0ABF6D0 | Since: 323 | API-Set: unknown
     */
    export function setSynchronizedScenePhase(sceneID: number, phase: number): void {
        SetSynchronizedScenePhase(sceneID, phase);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB6C49F8A5E295A5D | Since: 323 | API-Set: unknown
     */
    export function setSynchronizedSceneRate(sceneID: number, rate: number): void {
        SetSynchronizedSceneRate(sceneID, rate);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F3C3D9F50681DE4 | Since: 323 | API-Set: unknown
     */
    export function setTreatAsAmbientForDriverLockon(ped: number | IPed): void {
        Citizen.invokeNative('0x2F3C3D9F50681DE4', ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD325494792302D7 | Since: 323 | API-Set: unknown
     */
    export function setUseCameraHeadingForDesiredDirectionLockOnTest(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0xFD325494792302D7', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFEE4A5459472A9F8 | Since: 323 | API-Set: unknown
     */
    export function spawnpointsCancelSearch(): void {
        SpawnpointsCancelSearch();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA635C11B8C44AFC2 | Since: 323 | API-Set: unknown
     */
    export function spawnpointsGetNumSearchResults(): number {
        return SpawnpointsGetNumSearchResults();
    }

    /**
     * No comment provided
     *
     * Hash: 0x280C7E3AC7F56E90 | Since: 323 | API-Set: unknown
     */
    export function spawnpointsGetSearchResult(randomInt: number): [number, number, number] {
        return SpawnpointsGetSearchResult(randomInt);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB782F8238512BAD5 | Since: 323 | API-Set: unknown
     */
    export function spawnpointsGetSearchResultFlags(): number {
        return SpawnpointsGetSearchResultFlags(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C67506996001F5E | Since: 323 | API-Set: unknown
     */
    export function spawnpointsIsSearchActive(): boolean {
        return SpawnpointsIsSearchActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA586FBEB32A53DBB | Since: 323 | API-Set: unknown
     */
    export function spawnpointsIsSearchComplete(): boolean {
        return SpawnpointsIsSearchComplete();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF445DE8DA80A1792 | Since: 323 | API-Set: unknown
     */
    export function spawnpointsIsSearchFailed(): boolean {
        return SpawnpointsIsSearchFailed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DF9038C90AD5264 | Since: 323 | API-Set: unknown
     */
    export function spawnpointsStartSearch(interiorFlags: number, scale: number, duration: number): void {
        SpawnpointsStartSearch(0, 0, 0, 0, 0, interiorFlags, scale, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2AFF10216DEFA2F | Since: 323 | API-Set: unknown
     */
    export function spawnpointsStartSearchInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, interiorFlags: number, scale: number, duration: number): void {
        SpawnpointsStartSearchInAngledArea(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration);
    }

    /**
     * p1 was always 1 (true).
     *
     * Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
     *
     * Hash: 0xF9ACF4A08098EA25 | Since: 323 | API-Set: unknown
     */
    export function specialFunctionDoNotUse(ped: number | IPed): void {
        SpecialFunctionDoNotUse(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB47BD05FA66B40CF | Since: 323 | API-Set: unknown
     */
    export function stopAnyModelBeingSuppressed(): void {
        StopAnyPedModelBeingSuppressed();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC158D28142A34608 | Since: 323 | API-Set: unknown
     */
    export function stopWeaponFiringWhenDropped(ped: number | IPed): void {
        StopPedWeaponFiringWhenDropped(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A7F62FDA59759BD | Since: 323 | API-Set: unknown
     */
    export function suppressAmbientAggressiveCleanupThisFrame(): void {
        Citizen.invokeNative('0x5A7F62FDA59759BD');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD9CC7E200A52A6F | Since: 323 | API-Set: unknown
     */
    export function takeOwnershipOfSynchronizedScene(scene: number): void {
        TakeOwnershipOfSynchronizedScene(scene);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAD27D957598E49E9 | Since: 1290 | API-Set: unknown
     */
    export function tellGroupsInAreaToAttack(ped: number | IPed, hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        Citizen.invokeNative('0xAD27D957598E49E9', ped, undefined, 0, hash, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A77DFD295E29B09 | Since: 323 | API-Set: unknown
     */
    export function toggleScenarioCowerInPlace(ped: number | IPed, toggle: boolean): void {
        Citizen.invokeNative('0x9A77DFD295E29B09', ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC2EE020F5FB4DB53 | Since: 323 | API-Set: unknown
     */
    export function triggerIdleAnimationOn(ped: number | IPed): void {
        Citizen.invokeNative('0xC2EE020F5FB4DB53', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25361A96E0F7E419 | Since: 323 | API-Set: unknown
     */
    export function triggerScenarioPanicexittoflee(): boolean {
        return Citizen.invokeNative('0x25361A96E0F7E419', undefined, undefined, undefined, undefined);
    }

    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0x96B1361D9B24C2FF | Since: 323 | API-Set: unknown
     */
    export function unregisterheadshot(id: number): void {
        UnregisterPedheadshot(id);
    }

    /**
     * See SET_PED_HEAD_BLEND_DATA().
     *
     * Hash: 0x723538F61C647C5A | Since: 323 | API-Set: unknown
     */
    export function updateHeadBlendData(ped: number | IPed, shapeMix: number, skinMix: number, thirdMix: number): void {
        UpdatePedHeadBlendData(ped, shapeMix, skinMix, thirdMix);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9800AA1A771B000 | Since: 323 | API-Set: unknown
     */
    export function wasKilledByStealth(ped: number | IPed): boolean {
        return WasPedKilledByStealth(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F08E26039C7347C | Since: 323 | API-Set: unknown
     */
    export function wasKilledByTakedown(ped: number | IPed): boolean {
        return WasPedKilledByTakedown(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61767F73EACEED21 | Since: 323 | API-Set: unknown
     */
    export function wasKnockedOut(ped: number | IPed): boolean {
        return WasPedKnockedOut(ped);
    }

    /**
     * Despite this function's name, it simply returns whether the specified handle is a Ped.
     *
     * Hash: 0x11B499C1E0FF8559 | Since: 323 | API-Set: unknown
     */
    export function wasSkeletonUpdated(ped: number | IPed): boolean {
        return WasPedSkeletonUpdated(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA32ABFEB2A03B306 | Since: 3095 | API-Set: unknown
     */
    export function hasClearLosToEntity(ped: number | IPed, entity: number | IEntity, pos: Vector3): boolean {
        return Citizen.invokeNative('0xA32ABFEB2A03B306', ped, entity, pos.x, pos.y, pos.z, 0, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC73EFFC5E043A8BA | Since: 3258 | API-Set: unknown
     */
    export function setBlockAmbientsFromDroppingWeaponsThisFrame(): void {
        SetBlockAmbientPedsFromDroppingWeaponsThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x100CD221F572F6E1 | Since: 3407 | API-Set: unknown
     */
    export function setSurvivesBeingOutOfWater(ped: number | IPed, toggle: boolean): boolean {
        return Citizen.invokeNative('0x100CD221F572F6E1', ped, toggle);
    }

}


export namespace physics {
    /**
     * Returns all rope handles. The data returned adheres to the following layout:
     *
     * ```
     * [ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]
     * ```
     *
     * Hash: 0x760A2D67 | Since: unknown | API-Set: client
     */
    export function getAllRopes(): number {
        return GetAllRopes();
    }

    /**
     * ```cpp
     * enum eRopeFlags
     * {
     * DrawShadowEnabled = 2,
     * Breakable = 4,
     * RopeUnwindingFront = 8,
     * RopeWinding = 32
     * }
     * ```
     *
     * Hash: 0xA80FFE99 | Since: unknown | API-Set: client
     */
    export function getRopeFlags(rope: number): number {
        return GetRopeFlags(rope);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66D70EA3 | Since: unknown | API-Set: client
     */
    export function getRopeLengthChangeRate(rope: number): number {
        return GetRopeLengthChangeRate(rope);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF341E6CA | Since: unknown | API-Set: client
     */
    export function getRopeTimeMultiplier(rope: number): number {
        return GetRopeTimeMultiplier(rope);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2AB2E0F6 | Since: unknown | API-Set: client
     */
    export function getRopeUpdateOrder(rope: number): number {
        return GetRopeUpdateOrder(rope);
    }

    /**
     * Registers a custom rope data with the game. For guidance on what these values should be use common:/data/ropedata.xml as a reference.
     * Returns a rope type which can be passed into [ADD_ROPE](#\_0xE832D760399EB220) to use a custom rope design.
     * Once a rope data is registered it can be used indefinitely and you should take caution not too register too many as to exceed the games limit.
     *
     * Hash: 0xF213AE8D | Since: unknown | API-Set: client
     */
    export function registerRopeData(numSections: number, radius: number, diffuseTextureName: string, normalMapName: string, distanceMappingScale: number, uvScaleX: number, uvScaleY: number, specularFresnel: number, specularFalloff: number, specularIntensity: number, bumpiness: number, color: number): number {
        return RegisterRopeData(numSections, radius, diffuseTextureName, normalMapName, distanceMappingScale, uvScaleX, uvScaleY, specularFresnel, specularFalloff, specularIntensity, bumpiness, color);
    }

    /**
     * Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.
     *
     * Hash: 0x6D712937 | Since: unknown | API-Set: client
     */
    export function resetFlyThroughWindscreenParams(): void {
        ResetFlyThroughWindscreenParams();
    }

    /**
     * Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.
     *
     * Hash: 0x4D3118ED | Since: unknown | API-Set: client
     */
    export function setFlyThroughWindscreenParams(vehMinSpeed: number, unkMinSpeed: number, unkModifier: number, minDamage: number): boolean {
        return SetFlyThroughWindscreenParams(vehMinSpeed, unkMinSpeed, unkModifier, minDamage);
    }

    /**
     * Toggles whether the usage of [ADD_ROPE](#\_0xE832D760399EB220) should create an underlying CNetworkRopeWorldStateData. By default this is set to false.
     *
     * Hash: 0xE62FC73 | Since: unknown | API-Set: client
     */
    export function setRopesCreateNetworkWorldState(shouldCreate: boolean): void {
        SetRopesCreateNetworkWorldState(shouldCreate);
    }

    /**
     * Set's the ropes length change rate, which is the speed that rope should wind if started.
     *
     * Hash: 0x69B680A7 | Since: unknown | API-Set: client
     */
    export function setRopeLengthChangeRate(rope: number, lengthChangeRate: number): void {
        SetRopeLengthChangeRate(rope, lengthChangeRate);
    }

    /**
     * No comment provided
     *
     * Hash: 0x710311ADF0E20730 | Since: 323 | API-Set: unknown
     */
    export function activate(entity: number | IEntity): void {
        ActivatePhysics(entity);
    }

    /**
     * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
     * __
     *
     * Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
     *
     * When attached, Position<vector> does not matter
     * When attached, Angle<vector> does not matter
     *
     * Rope Type:
     * 4 and bellow is a thick rope
     * 5 and up are small metal wires
     * 0 crashes the game
     *
     * Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
     *
     * windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.
     *
     * Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
     *
     * breakable - Whether or not shooting the rope will break it.
     *
     * unkPtr - unknown ptr, always 0 in orig scripts
     * __
     *
     * Lengths can be calculated like so:
     *
     * float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
     *
     *
     * NOTES:
     *
     * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
     *
     * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
     *
     * Hash: 0xE832D760399EB220 | Since: 323 | API-Set: unknown
     */
    export function addRope(pos: Vector3, rot: Vector3, length: number, ropeType: number, maxLength: number, minLength: number, windingSpeed: number, rigid: boolean, breakWhenShot: boolean): [number, any] {
        return AddRope(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, length, ropeType, maxLength, minLength, windingSpeed, false, false, rigid, 0, breakWhenShot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE37F721824571784 | Since: 323 | API-Set: unknown
     */
    export function applyImpulseToCloth(pos: Vector3, vecX: number, vecY: number, vecZ: number, impulse: number): void {
        ApplyImpulseToCloth(pos.x, pos.y, pos.z, vecX, vecY, vecZ, impulse);
    }

    /**
     * Attaches entity 1 to entity 2.
     *
     * Hash: 0x3D95EC8B6D940AC3 | Since: 323 | API-Set: unknown
     */
    export function attachEntitiesToRope(ropeId: number, ent1: number | IEntity, ent2: number | IEntity, ent1_x: number, ent1_y: number, ent1_z: number, ent2_x: number, ent2_y: number, ent2_z: number, length: number): [any, any] {
        return AttachEntitiesToRope(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, false, false);
    }

    /**
     * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
     *
     * Hash: 0x4B490A6832559A65 | Since: 323 | API-Set: unknown
     */
    export function attachRopeToEntity(ropeId: number, entity: number | IEntity, pos: Vector3): void {
        AttachRopeToEntity(ropeId, entity, pos.x, pos.y, pos.z, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E648D16F6E308F3 | Since: 323 | API-Set: unknown
     */
    export function breakEntityGlass(entity: number | IEntity): void {
        BreakEntityGlass(entity, 0, 0, 0, 0, 0, 0, 0, 0, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA5D6B1888E4DB20 | Since: 323 | API-Set: unknown
     */
    export function deleteChildRope(ropeId: number): void {
        DeleteChildRope(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x52B4829281364649 | Since: 323 | API-Set: unknown
     */
    export function deleteRope(ropeId: number): void {
        DeleteRope(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCF3026912A8647D | Since: 323 | API-Set: unknown
     */
    export function detachRopeFromEntity(ropeId: number, entity: number | IEntity): void {
        DetachRopeFromEntity(ropeId, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD5448BE3111ED96 | Since: 323 | API-Set: unknown
     */
    export function doesRopeExist(): [boolean, number] {
        return DoesRopeExist();
    }

    /**
     * No comment provided
     *
     * Hash: 0x271C9D3ACA5D6409 | Since: 323 | API-Set: unknown
     */
    export function doesScriptOwnRope(ropeId: number): boolean {
        return DoesRopeBelongToThisScript(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8214A4B5A7A33612 | Since: 323 | API-Set: unknown
     */
    export function getCgoffset(entity: number | IEntity): Vector3 {
        return new Vector3(GetCgoffset(entity));
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C520A929415BCD2 | Since: 3407 | API-Set: unknown
     */
    export function getDamping(entity: number | IEntity, _type: number): Vector3 {
        return new Vector3(Citizen.invokeNative('0x8C520A929415BCD2', entity, _type));
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C112765300C7E1E | Since: 505 | API-Set: unknown
     */
    export function getIsEntityAFrag(_object: number | IObject): boolean {
        return GetHasObjectFragInst(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x21BB0FBD3E217C2D | Since: 323 | API-Set: unknown
     */
    export function getRopeLastVertexCoord(ropeId: number): Vector3 {
        return new Vector3(GetRopeLastVertexCoord(ropeId));
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA61CA8E80F09E4D | Since: 323 | API-Set: unknown
     */
    export function getRopeVertexCoord(ropeId: number, vertex: number): Vector3 {
        return new Vector3(GetRopeVertexCoord(ropeId, vertex));
    }

    /**
     * No comment provided
     *
     * Hash: 0x3655F544CD30F0B5 | Since: 323 | API-Set: unknown
     */
    export function getRopeVertexCount(ropeId: number): number {
        return GetRopeVertexCount(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84DE3B5FB3E666F0 | Since: 323 | API-Set: unknown
     */
    export function isRopeAttachedAtBothEnds(): [boolean, number] {
        return Citizen.invokeNative('0x84DE3B5FB3E666F0');
    }

    /**
     * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
     *
     * Hash: 0xCBB203C04D1ABD27 | Since: 323 | API-Set: unknown
     */
    export function loadRopeData(ropeId: number, rope_preset: string): void {
        LoadRopeData(ropeId, rope_preset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B320CF14146B69A | Since: 323 | API-Set: unknown
     */
    export function pinRopeVertex(ropeId: number, vertex: number, pos: Vector3): void {
        PinRopeVertex(ropeId, vertex, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCC6E963682533882 | Since: 323 | API-Set: unknown
     */
    export function resetDisableBreaking(_object: number | IObject): void {
        Citizen.invokeNative('0xCC6E963682533882', _object);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2D0E6A75CC05597 | Since: 323 | API-Set: unknown
     */
    export function ropeAreTexturesLoaded(): boolean {
        return RopeAreTexturesLoaded();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC0CE682D4D05650 | Since: 323 | API-Set: unknown
     */
    export function ropeAttachVirtualBoundGeom(ropeId: number): void {
        Citizen.invokeNative('0xBC0CE682D4D05650', ropeId, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1B6216CA2E7B55E | Since: 323 | API-Set: unknown
     */
    export function ropeChangeScriptOwner(): void {
        Citizen.invokeNative('0xB1B6216CA2E7B55E', undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5389D48EFA2F079A | Since: 323 | API-Set: unknown
     */
    export function ropeConvertToSimple(ropeId: number): void {
        RopeConvertToSimple(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1AE736541B0FCA3 | Since: 1868 | API-Set: unknown
     */
    export function ropeDrawEnabled(): number {
        return Citizen.invokeNative('0xA1AE736541B0FCA3', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF159A63806BB5BA8 | Since: 323 | API-Set: unknown
     */
    export function ropeDrawShadowEnabled(toggle: boolean): number {
        return RopeDrawShadowEnabled(toggle);
    }

    /**
     * Forces a rope to a certain length.
     *
     * Hash: 0xD009F759A723DB1B | Since: 323 | API-Set: unknown
     */
    export function ropeForceLength(ropeId: number, length: number): void {
        RopeForceLength(ropeId, length);
    }

    /**
     * No comment provided
     *
     * Hash: 0x73040398DFF9A4A6 | Since: 323 | API-Set: unknown
     */
    export function ropeGetDistanceBetweenEnds(ropeId: number): number {
        return RopeGetDistanceBetweenEnds(ropeId);
    }

    /**
     * Loads rope textures for all ropes in the current scene.
     *
     * Hash: 0x9B9039DBF2D258C1 | Since: 323 | API-Set: unknown
     */
    export function ropeLoadTextures(): void {
        RopeLoadTextures();
    }

    /**
     * Reset a rope to a certain length.
     *
     * Hash: 0xC16DE94D9BEA14A0 | Since: 323 | API-Set: unknown
     */
    export function ropeResetLength(ropeId: number, length: number): void {
        RopeResetLength(ropeId, length);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB743F735C03D7810 | Since: 323 | API-Set: unknown
     */
    export function ropeSetRefframevelocityColliderorder(ropeId: number): void {
        Citizen.invokeNative('0xB743F735C03D7810', ropeId, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36CCB9BE67B970FD | Since: 323 | API-Set: unknown
     */
    export function ropeSetSmoothReelin(ropeId: number): void {
        Citizen.invokeNative('0x36CCB9BE67B970FD', ropeId, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC57A637A20006ED | Since: 323 | API-Set: unknown
     */
    export function ropeSetUpdateOrder(ropeId: number): void {
        RopeSetUpdateOrder(ropeId, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8D667EE52114ABA | Since: 323 | API-Set: unknown
     */
    export function ropeSetUpdatePinverts(ropeId: number): void {
        RopeSetUpdatePinverts(ropeId);
    }

    /**
     * Unloads rope textures for all ropes in the current scene.
     *
     * Hash: 0x6CE36C35C1AC8163 | Since: 323 | API-Set: unknown
     */
    export function ropeUnloadTextures(): void {
        RopeUnloadTextures();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD8FA3908D7B86904 | Since: 323 | API-Set: unknown
     */
    export function setCgoffset(entity: number | IEntity, pos: Vector3): void {
        SetCgoffset(entity, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE520D9761FF811F | Since: 323 | API-Set: unknown
     */
    export function setCgAtBoundcenter(entity: number | IEntity): void {
        SetCgAtBoundcenter(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEEA3B200A6FEB65B | Since: 323 | API-Set: unknown
     */
    export function setDamping(entity: number | IEntity, vertex: number, value: number): void {
        SetDamping(entity, vertex, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CEC1A84620E7D5B | Since: 323 | API-Set: unknown
     */
    export function setDisableBreaking(_object: number | IObject, toggle: boolean): void {
        SetDisableBreaking(_object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01BA3AED21C16CFB | Since: 323 | API-Set: unknown
     */
    export function setDisableFragDamage(_object: number | IObject, toggle: boolean): void {
        SetDisableFragDamage(_object, toggle);
    }

    /**
     * Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
     *
     * Hash: 0xAA6A6098851C396F | Since: 1604 | API-Set: unknown
     */
    export function setInArenaMode(toggle: boolean): void {
        SetLaunchControlEnabled(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9EBD751E5787BAF2 | Since: 791 | API-Set: unknown
     */
    export function setInStuntMode(): void {
        Citizen.invokeNative('0x9EBD751E5787BAF2', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x15F944730C832252 | Since: 463 | API-Set: unknown
     */
    export function setUseKinematic(entity: number | IEntity, toggle: boolean): void {
        SetEntityProofUnk(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x538D1179EC1AA9A9 | Since: 323 | API-Set: unknown
     */
    export function startRopeUnwindingFront(ropeId: number): void {
        StartRopeUnwindingFront(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1461C72C889E343E | Since: 323 | API-Set: unknown
     */
    export function startRopeWinding(ropeId: number): void {
        StartRopeWinding(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFF3A50779EFBBB3 | Since: 323 | API-Set: unknown
     */
    export function stopRopeUnwindingFront(ropeId: number): void {
        StopRopeUnwindingFront(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB2D4AB84A19AA7C | Since: 323 | API-Set: unknown
     */
    export function stopRopeWinding(ropeId: number): void {
        StopRopeWinding(ropeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B5AE2EEE4A8F180 | Since: 323 | API-Set: unknown
     */
    export function unpinRopeVertex(ropeId: number, vertex: number): void {
        UnpinRopeVertex(ropeId, vertex);
    }

}


export namespace player {
    /**
     * Unlike [GET_PLAYER_INVINCIBLE](#\_0xB721981B2B939E07) this native gets both [SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED](#\_0x6BC97F4F4BB3C04B) and [SET_PLAYER_INVINCIBLE](#\_0x239528EACDC3E7DE) invincibility state.
     *
     * Hash: 0xF2E3912B | Since: unknown | API-Set: client
     */
    export function getInvincible2(player: number | string | IPlayer): boolean {
        return GetPlayerInvincible2(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD014AB79 | Since: unknown | API-Set: client
     */
    export function getMaxStamina(playerId: number | string | IPlayer): number {
        return GetPlayerMaxStamina(playerId);
    }

    /**
     * A getter for [SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER](#\_0xAE540335B4ABC4E2).
     *
     * Hash: 0x27E94EF8 | Since: unknown | API-Set: client
     */
    export function getMeleeWeaponDefenseModifier(playerId: number | string | IPlayer): number {
        return GetPlayerMeleeWeaponDefenseModifier(playerId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE415EC5C | Since: unknown | API-Set: client
     */
    export function getStamina(playerId: number | string | IPlayer): number {
        return GetPlayerStamina(playerId);
    }

    /**
     * A getter for [SET_PLAYER_VEHICLE_DAMAGE_MODIFIER](#\_0xA50E117CDDF82F0C).
     *
     * Hash: 0x78F27B1F | Since: unknown | API-Set: client
     */
    export function getVehicleDamageModifier(playerId: number | string | IPlayer): number {
        return GetPlayerVehicleDamageModifier(playerId);
    }

    /**
     * A getter for [SET_PLAYER_VEHICLE_DEFENSE_MODIFIER](#\_0x4C60E6EFDAFF2462).
     *
     * Hash: 0x8326E7CD | Since: unknown | API-Set: client
     */
    export function getVehicleDefenseModifier(playerId: number | string | IPlayer): number {
        return GetPlayerVehicleDefenseModifier(playerId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35594F67 | Since: unknown | API-Set: client
     */
    export function setMaxStamina(playerId: number | string | IPlayer, maxStamina: number): boolean {
        return SetPlayerMaxStamina(playerId, maxStamina);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9EC16C7 | Since: unknown | API-Set: client
     */
    export function setStamina(playerId: number | string | IPlayer, stamina: number): boolean {
        return SetPlayerStamina(playerId, stamina);
    }

    /**
     * A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\_0x4A3DC7ECCC321032).
     *
     * Hash: 0x8689A825 | Since: unknown | API-Set: shared
     */
    export function getMeleeWeaponDamageModifier(playerId: number | string | IPlayer): number {
        return GetPlayerMeleeWeaponDamageModifier(playerId);
    }

    /**
     * A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\_0xCE07B9F7817AADA3).
     *
     * Hash: 0x2A3D7CDA | Since: unknown | API-Set: shared
     */
    export function getWeaponDamageModifier(playerId: number | string | IPlayer): number {
        return GetPlayerWeaponDamageModifier(playerId);
    }

    /**
     * A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\_0x2D83BC011CA14A3C).
     *
     * Hash: 0xF1543251 | Since: unknown | API-Set: shared
     */
    export function getWeaponDefenseModifier(playerId: number | string | IPlayer): number {
        return GetPlayerWeaponDefenseModifier(playerId);
    }

    /**
     * A getter for [\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\_2](#\_0xBCFDE9EDE4CF27DC).
     *
     * Hash: 0x986B65FF | Since: unknown | API-Set: shared
     */
    export function getWeaponDefenseModifier2(playerId: number | string | IPlayer): number {
        return GetPlayerWeaponDefenseModifier2(playerId);
    }

    /**
     * Returns all player indices for 'active' physical players known to the client.
     * The data returned adheres to the following layout:
     *
     * ```
     * [127, 42, 13, 37]
     * ```
     *
     * Hash: 0xCF143FB9 | Since: unknown | API-Set: client
     */
    export function getActives(): number {
        return GetActivePlayers();
    }

    /**
     * Gets a local client's Player ID from its server ID counterpart, assuming the passed `serverId` exists on the client.
     *
     * If no matching client is found, or an invalid value is passed over as the `serverId` native's parameter, the native result will be `-1`.
     *
     * It's worth noting that this native method can only retrieve information about clients that are culled to the connected client.
     *
     * Hash: 0x344EA166 | Since: unknown | API-Set: client
     */
    export function getFromServerId(serverId: number): number | string {
        return GetPlayerFromServerId(serverId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D97BCC7 | Since: unknown | API-Set: client
     */
    export function getServerId(player: number | string | IPlayer): number {
        return GetPlayerServerId(player);
    }

    /**
     * the status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation.
     * This function doesn't need to be called every frame, it works like a switcher.
     *
     * Hash: 0xFC02CAF6 | Since: unknown | API-Set: client
     */
    export function setTalkingOverride(player: number | string | IPlayer, state: boolean): void {
        SetPlayerTalkingOverride(player, state);
    }

    /**
     * On the server this will return the players source, on the client it will return the player handle.
     *
     * Hash: 0xA56135E0 | Since: unknown | API-Set: shared
     */
    export function getFromStateBagName(bagName: string): number {
        return GetPlayerFromStateBagName(bagName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9097EB6D4BB9A12A | Since: 1868 | API-Set: unknown
     */
    export function addTargetableEntity(player: number | string | IPlayer, entity: number | IEntity): void {
        Citizen.invokeNative('0x9097EB6D4BB9A12A', player, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F41A3BAE005E5FA | Since: 372 | API-Set: unknown
     */
    export function allowEvasionHudIfDisablingHiddenEvasionThisFrame(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x2F41A3BAE005E5FA', player, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFAF86043E5874E9 | Since: 323 | API-Set: unknown
     */
    export function areFlashingStarsAboutToDrop(player: number | string | IPlayer): boolean {
        return ArePlayerFlashingStarsAboutToDrop(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A6EB355EE14A2DB | Since: 323 | API-Set: unknown
     */
    export function areStarsGreyedOut(player: number | string | IPlayer): boolean {
        return ArePlayerStarsGreyedOut(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAEBF081FFC0A0E5E | Since: 323 | API-Set: unknown
     */
    export function assistedMovementCloseRoute(): void {
        AssistedMovementCloseRoute();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8621390F0CDCFE1F | Since: 323 | API-Set: unknown
     */
    export function assistedMovementFlushRoute(): void {
        AssistedMovementFlushRoute();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF297383AA91DCA29 | Since: 323 | API-Set: unknown
     */
    export function canPedHear(player: number | string | IPlayer, ped: number | IPed): boolean {
        return CanPedHearPlayer(player, ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE7465A27D403C06 | Since: 323 | API-Set: unknown
     */
    export function canStartMission(player: number | string | IPlayer): boolean {
        return CanPlayerStartMission(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x048189FAC643DEEE | Since: 323 | API-Set: unknown
     */
    export function changePed(player: number | string | IPlayer, ped: number | IPed, resetDamage: boolean): void {
        ChangePlayerPed(player, ped, false, resetDamage);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4AACB96203D11A31 | Since: 323 | API-Set: unknown
     */
    export function clearHasDamagedAtLeastOneNonAnimalPed(player: number | string | IPlayer): void {
        ClearPlayerHasDamagedAtLeastOneNonAnimalPed(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF0B67A4DE6AB5F98 | Since: 323 | API-Set: unknown
     */
    export function clearHasDamagedAtLeastOnePed(player: number | string | IPlayer): void {
        ClearPlayerHasDamagedAtLeastOnePed(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8753997EB5F6EE3F | Since: 323 | API-Set: unknown
     */
    export function clearParachuteModelOverride(player: number | string | IPlayer): void {
        ClearPlayerParachuteModelOverride(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x10C54E4389C12B42 | Since: 323 | API-Set: unknown
     */
    export function clearParachutePackModelOverride(player: number | string | IPlayer): void {
        ClearPlayerParachutePackModelOverride(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F4CC924CF8C7B21 | Since: 323 | API-Set: unknown
     */
    export function clearParachuteVariationOverride(player: number | string | IPlayer): void {
        ClearPlayerParachuteVariationOverride(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x290D248E25815AE8 | Since: 2372 | API-Set: unknown
     */
    export function clearReserveParachuteModelOverride(player: number | string | IPlayer): void {
        ClearPlayerReserveParachuteModelOverride(player);
    }

    /**
     * `This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);`
     *
     * `PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.`
     *
     * Hash: 0xB302540597885499 | Since: 323 | API-Set: unknown
     */
    export function clearWantedLevel(player: number | string | IPlayer): void {
        ClearPlayerWantedLevel(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5501B7A5CDB79D37 | Since: 323 | API-Set: unknown
     */
    export function disableCameraViewModeCycle(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x5501B7A5CDB79D37', player);
    }

    /**
     * Inhibits the player from using any method of combat including melee and firearms.
     *
     * NOTE: Only disables the firing for one frame
     *
     * Hash: 0x5E6CC07646BBEAB8 | Since: 323 | API-Set: unknown
     */
    export function disableFiring(player: number | string | IPlayer, toggle: boolean): void {
        DisablePlayerFiring(player, toggle);
    }

    /**
     * Needs to be called every frame.
     *
     * Hash: 0xBCB06442F7E52666 | Since: 2802 | API-Set: unknown
     */
    export function disableHealthRecharge(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xBCB06442F7E52666', player);
    }

    /**
     * Used only once in R* scripts (freemode.ysc).
     *
     * Hash: 0xB885852C39CC265D | Since: 323 | API-Set: unknown
     */
    export function disableThrowGrenadeWhileUsingGun(): void {
        Citizen.invokeNative('0xB885852C39CC265D');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC142BE3BB9CE125F | Since: 323 | API-Set: unknown
     */
    export function disableVehicleRewards(player: number | string | IPlayer): void {
        DisablePlayerVehicleRewards(player);
    }

    /**
     * Purpose of the BOOL currently unknown.
     * Both, true and false, work
     *
     * Hash: 0x94DD7888C10A979E | Since: 323 | API-Set: unknown
     */
    export function displaySystemSigninUi(): void {
        DisplaySystemSigninUi(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x181EC197DAEFE121 | Since: 323 | API-Set: unknown
     */
    export function enableSpecialAbility(player: number | string | IPlayer, toggle: boolean): void {
        EnableSpecialAbility(player, toggle, undefined);
    }

    /**
     * Appears only 3 times in the scripts, more specifically in michael1.ysc
     *
     * -
     * This can be used to prevent dying if you are "out of the world"
     *
     * Hash: 0x5006D96C995A5827 | Since: 323 | API-Set: unknown
     */
    export function extendWorldBoundaryFor(pos: Vector3): void {
        ExtendWorldBoundaryForPlayer(pos.x, pos.y, pos.z);
    }

    /**
     * used with 1,2,8,64,128 in the scripts
     *
     * Hash: 0xBC8983F38F78ED51 | Since: 323 | API-Set: unknown
     */
    export function forceCleanup(cleanupFlags: number): void {
        ForceCleanup(cleanupFlags);
    }

    /**
     * `PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation`
     *
     * Hash: 0x4C68DDDDF0097317 | Since: 323 | API-Set: unknown
     */
    export function forceCleanupForAllThreadsWithThisName(name: string, cleanupFlags: number): void {
        ForceCleanupForAllThreadsWithThisName(name, cleanupFlags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF745B37630DF176B | Since: 323 | API-Set: unknown
     */
    export function forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void {
        ForceCleanupForThreadWithThisId(id, cleanupFlags);
    }

    /**
     * This has been found in use in the decompiled files.
     *
     * Hash: 0xAD73CE5A09E42D12 | Since: 323 | API-Set: unknown
     */
    export function forceStartHiddenEvasion(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xAD73CE5A09E42D12', player);
    }

    /**
     * For Steam.
     * Always returns 0 in retail version of the game.
     *
     * Hash: 0x1C186837D0619335 | Since: 323 | API-Set: unknown
     */
    export function getAchievementProgress(achievementId: number): number {
        return GetAchievementProgress(achievementId);
    }

    /**
     * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
     *
     * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
     *
     * Hash: 0x7C814D2FB49F40C0 | Since: 323 | API-Set: unknown
     */
    export function getAreCameraControlsDisabled(): boolean {
        return IsPlayerCamControlDisabled();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A41CF4674A12272 | Since: 323 | API-Set: unknown
     */
    export function getCauseOfMostRecentForceCleanup(): number {
        return GetCauseOfMostRecentForceCleanup();
    }

    /**
     * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
     * Returns false if no entity found.
     *
     * Hash: 0x2975C866E6713290 | Since: 323 | API-Set: unknown
     */
    export function getEntityIsFreeAimingAt(player: number | string | IPlayer): [boolean, number] {
        return GetEntityPlayerIsFreeAimingAt(player);
    }

    /**
     * 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
     *
     * Hash: 0xDD2620B7B9D16FF1 | Since: 323 | API-Set: unknown
     */
    export function getIsMoppingAreaFreeInFrontOf(player: number | string | IPlayer): boolean {
        return Citizen.invokeNative('0xDD2620B7B9D16FF1', player, 0);
    }

    /**
     * Appears once in "re_dealgonewrong"
     *
     * Hash: 0x5FC472C501CCADB3 | Since: 323 | API-Set: unknown
     */
    export function getIsDrivingOnHighway(player: number | string | IPlayer): boolean {
        return GetIsPlayerDrivingOnHighway(player);
    }

    /**
     * Only 1 occurrence. p1 was 2.
     *
     * Hash: 0xF10B44FD479D69F3 | Since: 323 | API-Set: unknown
     */
    export function getIsDrivingWreckless(player: number | string | IPlayer): boolean {
        return IsPlayerDrivingDangerously(player, 0);
    }

    /**
     * Returns profile setting 237.
     *
     * Hash: 0xB9CF1F793A9F1BF1 | Since: 323 | API-Set: unknown
     */
    export function getIsUsingFpsThirdPersonCover(): boolean {
        return Citizen.invokeNative('0xB9CF1F793A9F1BF1');
    }

    /**
     * Returns profile setting 243.
     *
     * Hash: 0xCB645E85E97EA48B | Since: 372 | API-Set: unknown
     */
    export function getIsUsingHoodCamera(): boolean {
        return Citizen.invokeNative('0xCB645E85E97EA48B');
    }

    /**
     * Gets the maximum wanted level the player can get.
     * Ranges from 0 to 5.
     *
     * Hash: 0x462E0DB9B137DC5F | Since: 323 | API-Set: unknown
     */
    export function getMaxWantedLevel(): number {
        return GetMaxWantedLevel();
    }

    /**
     * Gets the number of players in the current session.
     * If not multiplayer, always returns 1.
     *
     * Hash: 0x407C7F91DDB46C16 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfs(): number {
        return GetNumberOfPlayers();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1FC200409F10E6F1 | Since: 1180 | API-Set: unknown
     */
    export function getNumberOfsInTeam(team: number): number {
        return GetNumberOfPlayersInTeam(team);
    }

    /**
     * Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
     *
     * Hash: 0xB6997A7EB3F5C8C0 | Since: 323 | API-Set: unknown
     */
    export function getsLastVehicle(): number {
        return GetPlayersLastVehicle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F395D61F3A1F877 | Since: 323 | API-Set: unknown
     */
    export function getCurrentStealthNoise(player: number | string | IPlayer): number {
        return GetPlayerCurrentStealthNoise(player);
    }

    /**
     * Always returns false.
     *
     * Hash: 0xDCC07526B8EC45AF | Since: 1868 | API-Set: unknown
     */
    export function getDebugInvincible(player: number | string | IPlayer): boolean {
        return Citizen.invokeNative('0xDCC07526B8EC45AF', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x56105E599CAB0EFA | Since: 323 | API-Set: unknown
     */
    export function getFakeWantedLevel(player: number | string | IPlayer): number {
        return GetPlayerFakeWantedLevel(player);
    }

    /**
     * Returns the group ID the player is member of.
     *
     * Hash: 0x0D127585F77030AF | Since: 323 | API-Set: unknown
     */
    export function getGroup(player: number | string | IPlayer): number {
        return GetPlayerGroup(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5DDFE2FF727F3CA3 | Since: 323 | API-Set: unknown
     */
    export function getHasReserveParachute(player: number | string | IPlayer): boolean {
        return GetPlayerHasReserveParachute(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8BC515BAE4AAF8FF | Since: 617 | API-Set: unknown
     */
    export function getHealthRechargeMaxPercent(player: number | string | IPlayer): number {
        return GetPlayerHealthRechargeLimit(player);
    }

    /**
     * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
     *
     * Hash: 0xA5EDC40EF369B48D | Since: 323 | API-Set: unknown
     */
    export function getIndex(): number | string {
        return GetPlayerIndex();
    }

    /**
     * Returns the Player's Invincible status.
     *
     * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
     *
     * bool IsPlayerInvincible(Player player)
     * {
     * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
     *
     * if (addr)
     * {
     * DWORD flag = *(DWORD *)(addr + 0x188);
     * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
     * }
     *
     * return false;
     * }
     *
     *
     *
     * Hash: 0xB721981B2B939E07 | Since: 323 | API-Set: unknown
     */
    export function getInvincible(player: number | string | IPlayer): boolean {
        return GetPlayerInvincible(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92659B4CE1863CB3 | Since: 323 | API-Set: unknown
     */
    export function getMaxArmour(player: number | string | IPlayer): number {
        return GetPlayerMaxArmour(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D0DE6A7B5DA71F8 | Since: 323 | API-Set: unknown
     */
    export function getName(player: number | string | IPlayer): string {
        return GetPlayerName(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC219887CA3E65C41 | Since: 2372 | API-Set: unknown
     */
    export function getParachuteModelOverride(player: number | string | IPlayer): number {
        return GetPlayerParachuteModelOverride(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E9C742F340CE5A2 | Since: 323 | API-Set: unknown
     */
    export function getParachutePackTintIndex(player: number | string | IPlayer): number {
        return GetPlayerParachutePackTintIndex(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF56DBABD3CD4887 | Since: 323 | API-Set: unknown
     */
    export function getParachuteSmokeTrailColor(player: number | string | IPlayer): [number, number, number] {
        return GetPlayerParachuteSmokeTrailColor(player);
    }

    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     * Hash: 0x75D3F7A1B0D9B145 | Since: 323 | API-Set: unknown
     */
    export function getParachuteTintIndex(player: number | string | IPlayer): number {
        return GetPlayerParachuteTintIndex(player);
    }

    /**
     * Gets the ped for a specified player index.
     *
     * Hash: 0x43A66C31C68491C0 | Since: 323 | API-Set: unknown
     */
    export function getPed(player: number | string | IPlayer): number {
        return GetPlayerPed(player);
    }

    /**
     * `Does the same like PLAYER::GET_PLAYER_PED`
     *
     * Hash: 0x50FAC3A3E030A6E1 | Since: 323 | API-Set: unknown
     */
    export function getPedScriptIndex(player: number | string | IPlayer): number {
        return GetPlayerPedScriptIndex(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC0753C9CA14B506 | Since: 323 | API-Set: unknown
     */
    export function getReceivedBattleEventRecently(player: number | string | IPlayer): boolean {
        return HasPlayerBeenShotByCop(player, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x37FAAA68DCA9D08D | Since: 2372 | API-Set: unknown
     */
    export function getReserveParachuteModelOverride(player: number | string | IPlayer): number {
        return GetPlayerReserveParachuteModelOverride(player);
    }

    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     * Hash: 0xD5A016BC3C09CF40 | Since: 323 | API-Set: unknown
     */
    export function getReserveParachuteTintIndex(player: number | string | IPlayer): number {
        return GetPlayerReserveParachuteTintIndex(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE902EF951DCE178F | Since: 323 | API-Set: unknown
     */
    export function getRgbColour(player: number | string | IPlayer): [number, number, number] {
        return GetPlayerRgbColour(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F9F16F8E65A7ED7 | Since: 323 | API-Set: unknown
     */
    export function getSprintStaminaRemaining(player: number | string | IPlayer): number {
        return GetPlayerSprintStaminaRemaining(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1885BC9B108B4C99 | Since: 323 | API-Set: unknown
     */
    export function getSprintTimeRemaining(player: number | string | IPlayer): number {
        return GetPlayerSprintTimeRemaining(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x875BDD898B99C8CE | Since: 3570 | API-Set: unknown
     */
    export function getTargetingMode(): number {
        return Citizen.invokeNative('0x875BDD898B99C8CE');
    }

    /**
     * Assigns the handle of locked-on melee target to *entity that you pass it.
     * Returns false if no entity found.
     *
     * Hash: 0x13EDE1A5DBF797C9 | Since: 323 | API-Set: unknown
     */
    export function getTargetEntity(player: number | string | IPlayer): [boolean, number] {
        return GetPlayerTargetEntity(player);
    }

    /**
     * Gets the player's team.
     * Does nothing in singleplayer.
     *
     * Hash: 0x37039302F4E0A008 | Since: 323 | API-Set: unknown
     */
    export function getTeam(player: number | string | IPlayer): number {
        return GetPlayerTeam(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1FCF8E6AF40B731 | Since: 323 | API-Set: unknown
     */
    export function getUnderwaterTimeRemaining(player: number | string | IPlayer): number {
        return GetPlayerUnderwaterTimeRemaining(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C92BA89F1AF26F8 | Since: 323 | API-Set: unknown
     */
    export function getWantedCentrePosition(player: number | string | IPlayer): Vector3 {
        return new Vector3(GetPlayerWantedCentrePosition(player));
    }

    /**
     * No comment provided
     *
     * Hash: 0xE28E54788CE8F12D | Since: 323 | API-Set: unknown
     */
    export function getWantedLevel(player: number | string | IPlayer): number {
        return GetPlayerWantedLevel(player);
    }

    /**
     * Returns the time since the character was arrested in (ms) milliseconds.
     *
     * example
     *
     * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
     *
     * UI.DrawSubtitle(time.ToString());
     *
     * if player has not been arrested, the int returned will be -1.
     *
     * Hash: 0x5063F92F07C2A316 | Since: 323 | API-Set: unknown
     */
    export function getTimeSinceLastArrest(): number {
        return GetTimeSinceLastArrest();
    }

    /**
     * Returns the time since the character died in (ms) milliseconds.
     *
     * example
     *
     * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
     *
     * UI.DrawSubtitle(time.ToString());
     *
     * if player has not died, the int returned will be -1.
     *
     * Hash: 0xC7034807558DDFCA | Since: 323 | API-Set: unknown
     */
    export function getTimeSinceLastDeath(): number {
        return GetTimeSinceLastDeath();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB89591E290D9182 | Since: 323 | API-Set: unknown
     */
    export function getTimeSinceDroveAgainstTraffic(player: number | string | IPlayer): number {
        return GetTimeSincePlayerDroveAgainstTraffic(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD559D2BE9E37853B | Since: 323 | API-Set: unknown
     */
    export function getTimeSinceDroveOnPavement(player: number | string | IPlayer): number {
        return GetTimeSincePlayerDroveOnPavement(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE36A25322DC35F42 | Since: 323 | API-Set: unknown
     */
    export function getTimeSinceHitPed(player: number | string | IPlayer): number {
        return GetTimeSincePlayerHitPed(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D35ECF3A81A0EE0 | Since: 323 | API-Set: unknown
     */
    export function getTimeSinceHitVehicle(player: number | string | IPlayer): number {
        return GetTimeSincePlayerHitVehicle(player);
    }

    /**
     * Remnant from GTA IV. Does nothing in GTA V.
     *
     * Hash: 0x085DEB493BE80812 | Since: 323 | API-Set: unknown
     */
    export function getWantedLevelRadius(player: number | string | IPlayer): number {
        return GetWantedLevelRadius(player);
    }

    /**
     * Drft
     *
     * Hash: 0xFDD179EAF45B556C | Since: 323 | API-Set: unknown
     */
    export function getWantedLevelThreshold(wantedLevel: number): number {
        return GetWantedLevelThreshold(wantedLevel);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA72200F51875FEA4 | Since: 2372 | API-Set: unknown
     */
    export function getWantedLevelTimeToEscape(): number {
        return GetWantedLevelParoleDuration();
    }

    /**
     * 1 - Welcome to Los Santos
     * 2 - A Friendship Resurrected
     * 3 - A Fair Day's Pay
     * 4 - The Moment of Truth
     * 5 - To Live or Die in Los Santos
     * 6 - Diamond Hard
     * 7 - Subversive
     * 8 - Blitzed
     * 9 - Small Town, Big Job
     * 10 - The Government Gimps
     * 11 - The Big One!
     * 12 - Solid Gold, Baby!
     * 13 - Career Criminal
     * 14 - San Andreas Sightseer
     * 15 - All's Fare in Love and War
     * 16 - TP Industries Arms Race
     * 17 - Multi-Disciplined
     * 18 - From Beyond the Stars
     * 19 - A Mystery, Solved
     * 20 - Waste Management
     * 21 - Red Mist
     * 22 - Show Off
     * 23 - Kifflom!
     * 24 - Three Man Army
     * 25 - Out of Your Depth
     * 26 - Altruist Acolyte
     * 27 - A Lot of Cheddar
     * 28 - Trading Pure Alpha
     * 29 - Pimp My Sidearm
     * 30 - Wanted: Alive Or Alive
     * 31 - Los Santos Customs
     * 32 - Close Shave
     * 33 - Off the Plane
     * 34 - Three-Bit Gangster
     * 35 - Making Moves
     * 36 - Above the Law
     * 37 - Numero Uno
     * 38 - The Midnight Club
     * 39 - Unnatural Selection
     * 40 - Backseat Driver
     * 41 - Run Like The Wind
     * 42 - Clean Sweep
     * 43 - Decorated
     * 44 - Stick Up Kid
     * 45 - Enjoy Your Stay
     * 46 - Crew Cut
     * 47 - Full Refund
     * 48 - Dialling Digits
     * 49 - American Dream
     * 50 - A New Perspective
     * 51 - Be Prepared
     * 52 - In the Name of Science
     * 53 - Dead Presidents
     * 54 - Parole Day
     * 55 - Shot Caller
     * 56 - Four Way
     * 57 - Live a Little
     * 58 - Can't Touch This
     * 59 - Mastermind
     * 60 - Vinewood Visionary
     * 61 - Majestic
     * 62 - Humans of Los Santos
     * 63 - First Time Director
     * 64 - Animal Lover
     * 65 - Ensemble Piece
     * 66 - Cult Movie
     * 67 - Location Scout
     * 68 - Method Actor
     * 69 - Cryptozoologist
     * 70 - Getting Started
     * 71 - The Data Breaches
     * 72 - The Bogdan Problem
     * 73 - The Doomsday Scenario
     * 74 - A World Worth Saving
     * 75 - Orbital Obliteration
     * 76 - Elitist
     * 77 - Masterminds
     *
     * Hash: 0xBEC7076D64130195 | Since: 323 | API-Set: unknown
     */
    export function giveAchievementTo(achievementId: number): boolean {
        return GiveAchievementToPlayer(achievementId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C49C870E66F0A28 | Since: 323 | API-Set: unknown
     */
    export function giveRagdollControl(player: number | string | IPlayer, toggle: boolean): void {
        GivePlayerRagdollControl(player, toggle);
    }

    /**
     * See GIVE_ACHIEVEMENT_TO_PLAYER
     *
     * Hash: 0x867365E111A3B6EB | Since: 323 | API-Set: unknown
     */
    export function hasAchievementBeenPassed(achievementId: number): boolean {
        return HasAchievementBeenPassed(achievementId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC968670BFACE42D9 | Since: 323 | API-Set: unknown
     */
    export function hasForceCleanupOccurred(cleanupFlags: number): boolean {
        return HasForceCleanupOccurred(cleanupFlags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD705740BB0A1CF4C | Since: 323 | API-Set: unknown
     */
    export function hasBeenSpottedInStolenVehicle(player: number | string | IPlayer): boolean {
        return HasPlayerBeenSpottedInStolenVehicle(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4B90F367BD81752 | Since: 323 | API-Set: unknown
     */
    export function hasDamagedAtLeastOneNonAnimalPed(player: number | string | IPlayer): boolean {
        return HasPlayerDamagedAtLeastOneNonAnimalPed(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x20CE80B0C2BF4ACC | Since: 323 | API-Set: unknown
     */
    export function hasDamagedAtLeastOnePed(player: number | string | IPlayer): boolean {
        return HasPlayerDamagedAtLeastOnePed(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD55DDFB47991A294 | Since: 323 | API-Set: unknown
     */
    export function hasLeftTheWorld(player: number | string | IPlayer): boolean {
        return HasPlayerLeftTheWorld(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9EDD76E87D5D51BA | Since: 323 | API-Set: unknown
     */
    export function increaseJumpSuppressionRange(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x9EDD76E87D5D51BA', player);
    }

    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     * --------------------------------------------------------
     * `if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))`
     *
     *
     * Hash: 0x9EC6603812C24710 | Since: 323 | API-Set: unknown
     */
    export function intToParticipantindex(value: number): number {
        return IntToParticipantindex(value);
    }

    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x41BD2A6B006AF756 | Since: 323 | API-Set: unknown
     */
    export function intToindex(value: number): number | string {
        return IntToPlayerindex(value);
    }

    /**
     * Returns true if an unk value is greater than 0.0f
     *
     * Hash: 0x38D28DA81E4E9BF9 | Since: 323 | API-Set: unknown
     */
    export function isBattleAware(player: number | string | IPlayer): boolean {
        return IsPlayerBattleAware(player);
    }

    /**
     * Return true while player is being arrested / busted.
     *
     * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
     *
     * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
     *
     * Hash: 0x388A47C51ABDAC8E | Since: 323 | API-Set: unknown
     */
    export function isBeingArrested(player: number | string | IPlayer, atArresting: boolean): boolean {
        return IsPlayerBeingArrested(player, atArresting);
    }

    /**
     * No comment provided
     *
     * Hash: 0x65FAEE425DE637B0 | Since: 323 | API-Set: unknown
     */
    export function isBluetoothEnable(player: number | string | IPlayer): boolean {
        return IsPlayerBluetoothEnable(player);
    }

    /**
     * Returns TRUE if the player ('s ped) is climbing at the moment.
     *
     * Hash: 0x95E8F73DC65EFB9C | Since: 323 | API-Set: unknown
     */
    export function isClimbing(player: number | string | IPlayer): boolean {
        return IsPlayerClimbing(player);
    }

    /**
     * Can the player control himself, used to disable controls for player for things like a cutscene.
     *
     * ---
     *
     * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
     *
     * Hash: 0x49C32D60007AFA47 | Since: 323 | API-Set: unknown
     */
    export function isControlOn(player: number | string | IPlayer): boolean {
        return IsPlayerControlOn(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x424D4687FA1E5652 | Since: 323 | API-Set: unknown
     */
    export function isDead(player: number | string | IPlayer): boolean {
        return IsPlayerDead(player);
    }

    /**
     * Gets a value indicating whether the specified player is currently aiming freely.
     *
     * Hash: 0x2E397FD2ECD37C87 | Since: 323 | API-Set: unknown
     */
    export function isFreeAiming(player: number | string | IPlayer): boolean {
        return IsPlayerFreeAiming(player);
    }

    /**
     * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
     *
     * Hash: 0x3C06B5C839B38F7B | Since: 323 | API-Set: unknown
     */
    export function isFreeAimingAtEntity(player: number | string | IPlayer, entity: number | IEntity): boolean {
        return IsPlayerFreeAimingAtEntity(player, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCCFD3F106C36AB4 | Since: 323 | API-Set: unknown
     */
    export function isFreeForAmbientTask(player: number | string | IPlayer): boolean {
        return IsPlayerFreeForAmbientTask(player);
    }

    /**
     * this function is hard-coded to always return 0.
     *
     * Hash: 0x74556E1420867ECA | Since: 323 | API-Set: unknown
     */
    export function isLoggingInNp(): boolean {
        return IsPlayerLoggingInNp();
    }

    /**
     * Returns TRUE if the game is in online mode and FALSE if in offline mode.
     *
     * This is an alias for NETWORK_IS_SIGNED_ONLINE.
     *
     * Hash: 0xF25D331DC2627BBC | Since: 323 | API-Set: unknown
     */
    export function isOnline(): boolean {
        return IsPlayerOnline();
    }

    /**
     * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
     *
     * Hash: 0x5E9564D8246B909A | Since: 323 | API-Set: unknown
     */
    export function isPlaying(player: number | string | IPlayer): boolean {
        return IsPlayerPlaying(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA1E2BF8B10598F9 | Since: 323 | API-Set: unknown
     */
    export function isPressingHorn(player: number | string | IPlayer): boolean {
        return IsPlayerPressingHorn(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x908CBECC2CAA3690 | Since: 323 | API-Set: unknown
     */
    export function isReadyForCutscene(player: number | string | IPlayer): boolean {
        return IsPlayerReadyForCutscene(player);
    }

    /**
     * Returns true if the player is riding a train.
     *
     * Hash: 0x4EC12697209F2196 | Since: 323 | API-Set: unknown
     */
    export function isRidingTrain(player: number | string | IPlayer): boolean {
        return IsPlayerRidingTrain(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A876A65283DD7D7 | Since: 323 | API-Set: unknown
     */
    export function isScriptControlOn(player: number | string | IPlayer): boolean {
        return IsPlayerScriptControlOn(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78CFE51896B6B8A4 | Since: 323 | API-Set: unknown
     */
    export function isTargettingAnything(player: number | string | IPlayer): boolean {
        return IsPlayerTargettingAnything(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7912F7FC4F6264B6 | Since: 323 | API-Set: unknown
     */
    export function isTargettingEntity(player: number | string | IPlayer, entity: number | IEntity): boolean {
        return IsPlayerTargettingEntity(player, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02B15662D7F8886F | Since: 323 | API-Set: unknown
     */
    export function isTeleportActive(): boolean {
        return IsPlayerTeleportActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E4361FF3E8CD7CA | Since: 1011 | API-Set: unknown
     */
    export function isVehicleWeaponToggledToNonHoming(): boolean {
        return Citizen.invokeNative('0x6E4361FF3E8CD7CA', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x238DB2A2C23EE9EF | Since: 323 | API-Set: unknown
     */
    export function isWantedLevelGreater(player: number | string | IPlayer, wantedLevel: number): boolean {
        return IsPlayerWantedLevelGreater(player, wantedLevel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x690A61A6D13583F6 | Since: 323 | API-Set: unknown
     */
    export function isRemoteInNonClonedVehicle(player: number | string | IPlayer): boolean {
        return Citizen.invokeNative('0x690A61A6D13583F6', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E5F7FC85D854E15 | Since: 323 | API-Set: unknown
     */
    export function isSpecialAbilityActive(player: number | string | IPlayer): boolean {
        return IsSpecialAbilityActive(player, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1D200FE26AEF3CB | Since: 323 | API-Set: unknown
     */
    export function isSpecialAbilityEnabled(player: number | string | IPlayer): boolean {
        return IsSpecialAbilityEnabled(player, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x05A1FE504B7F2587 | Since: 323 | API-Set: unknown
     */
    export function isSpecialAbilityMeterFull(player: number | string | IPlayer): boolean {
        return IsSpecialAbilityMeterFull(player, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6017F6A6CDFA694 | Since: 323 | API-Set: unknown
     */
    export function isSpecialAbilityUnlocked(playerModel: number | string): boolean {
        if (typeof playerModel === 'string') playerModel = misc.getHashKey(playerModel)
        return IsSpecialAbilityUnlocked(playerModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D511E3867C87139 | Since: 323 | API-Set: unknown
     */
    export function isSystemUiBeingDisplayed(): boolean {
        return IsSystemUiBeingDisplayed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E07C78925D5FD96 | Since: 372 | API-Set: unknown
     */
    export function isWantedAndHasBeenSeenByCops(player: number | string | IPlayer): boolean {
        return Citizen.invokeNative('0x7E07C78925D5FD96', player);
    }

    /**
     * Does exactly the same thing as PLAYER_ID()
     *
     * Hash: 0xEE68096F9F37341E | Since: 323 | API-Set: unknown
     */
    export function networkIdToInt(): number {
        return NetworkPlayerIdToInt();
    }

    /**
     * Only 1 match. ob_sofa_michael.
     *
     * `PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;`
     *
     * Hash: 0xED51733DC73AED51 | Since: 323 | API-Set: unknown
     */
    export function attachVirtualBound(): void {
        PlayerAttachVirtualBound(0, 0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
     *
     * Hash: 0x1DD5897E2FA6E7C9 | Since: 323 | API-Set: unknown
     */
    export function detachVirtualBound(): void {
        PlayerDetachVirtualBound();
    }

    /**
     * This returns YOUR 'identity' as a Player type.
     *
     * Always returns 0 in story mode.
     *
     * Hash: 0x4F8644AF03D0E0D6 | Since: 323 | API-Set: unknown
     */
    export function id(): number | string {
        return PlayerId();
    }

    /**
     * Returns current player ped
     *
     * Hash: 0xD80958FC74E988A6 | Since: 323 | API-Set: unknown
     */
    export function pedId(): number {
        return PlayerPedId();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3AC26D3CC576528 | Since: 323 | API-Set: unknown
     */
    export function removeHelmet(player: number | string | IPlayer): void {
        RemovePlayerHelmet(player, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F260BFB59ADBCA3 | Since: 1868 | API-Set: unknown
     */
    export function removeTargetableEntity(player: number | string | IPlayer, entity: number | IEntity): void {
        Citizen.invokeNative('0x9F260BFB59ADBCA3', player, entity);
    }

    /**
     * Resets values set by SET_SCRIPT_FIRE_POSITION
     *
     * Hash: 0x7148E0F43D11F0D9 | Since: 1604 | API-Set: unknown
     */
    export function removeScriptFirePosition(): void {
        Citizen.invokeNative('0x7148E0F43D11F0D9');
    }

    /**
     * `PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));`
     *
     * From am_armybase.ysc.c4:
     *
     * `PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));`
     *
     * -----
     *
     * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7
     *
     * -----
     * crimeType:
     * 1: Firearms possession
     * 2: Person running a red light ("5-0-5")
     * 3: Reckless driver
     * 4: Speeding vehicle (a "5-10")
     * 5: Traffic violation (a "5-0-5")
     * 6: Motorcycle rider without a helmet
     * 7: Vehicle theft (a "5-0-3")
     * 8: Grand Theft Auto
     * 9: ???
     * 10: ???
     * 11: Assault on a civilian (a "2-40")
     * 12: Assault on an officer
     * 13: Assault with a deadly weapon (a "2-45")
     * 14: Officer shot (a "2-45")
     * 15: Pedestrian struck by a vehicle
     * 16: Officer struck by a vehicle
     * 17: Helicopter down (an "AC"?)
     * 18: Civilian on fire (a "2-40")
     * 19: Officer set on fire (a "10-99")
     * 20: Car on fire
     * 21: Air unit down (an "AC"?)
     * 22: An explosion (a "9-96")
     * 23: A stabbing (a "2-45") (also something else I couldn't understand)
     * 24: Officer stabbed (also something else I couldn't understand)
     * 25: Attack on a vehicle ("MDV"?)
     * 26: Damage to property
     * 27: Suspect threatening officer with a firearm
     * 28: Shots fired
     * 29: ???
     * 30: ???
     * 31: ???
     * 32: ???
     * 33: ???
     * 34: A "2-45"
     * 35: ???
     * 36: A "9-25"
     * 37: ???
     * 38: ???
     * 39: ???
     * 40: ???
     * 41: ???
     * 42: ???
     * 43: Possible disturbance
     * 44: Civilian in need of assistance
     * 45: ???
     * 46: ???
     *
     * Hash: 0xE9B09589827545E7 | Since: 323 | API-Set: unknown
     */
    export function reportCrime(player: number | string | IPlayer, crimeType: number, wantedLvlThresh: number): void {
        ReportCrime(player, crimeType, wantedLvlThresh);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC64D2C53493ED12 | Since: 323 | API-Set: unknown
     */
    export function reportPoliceSpotted(player: number | string | IPlayer): void {
        ReportPoliceSpottedPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0032A6DBA562C518 | Since: 323 | API-Set: unknown
     */
    export function resetLawResponseDelayOverride(): void {
        Citizen.invokeNative('0x0032A6DBA562C518');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D03E13C460760D6 | Since: 323 | API-Set: unknown
     */
    export function resetArrestState(player: number | string | IPlayer): void {
        ResetPlayerArrestState(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19531C47A2ABD691 | Since: 323 | API-Set: unknown
     */
    export function resetInputGait(player: number | string | IPlayer): void {
        ResetPlayerInputGait(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6F312FCCE9C1DFE | Since: 323 | API-Set: unknown
     */
    export function resetStamina(player: number | string | IPlayer): void {
        ResetPlayerStamina(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9D0DD990DC141DD | Since: 323 | API-Set: unknown
     */
    export function resetWantedLevelDifficulty(player: number | string | IPlayer): void {
        ResetWantedLevelDifficulty(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x823EC8E82BA45986 | Since: 2060 | API-Set: unknown
     */
    export function resetWantedLevelHiddenEscapeTime(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x823EC8E82BA45986', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA1DF03D5A315F4E | Since: 323 | API-Set: unknown
     */
    export function resetWorldBoundaryFor(): void {
        ResetWorldBoundaryForPlayer();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA352C1B864CAFD33 | Since: 323 | API-Set: unknown
     */
    export function restoreStamina(player: number | string | IPlayer): void {
        RestorePlayerStamina(player, 0);
    }

    /**
     * For Steam.
     * Does nothing and always returns false in the retail version of the game.
     *
     * Hash: 0xC2AFFFDABBDC2C5C | Since: 323 | API-Set: unknown
     */
    export function setAchievementProgress(achievementId: number, progress: number): boolean {
        return SetAchievementProgress(achievementId, progress);
    }

    /**
     * This can be between 1.0f - 14.9f
     *
     * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
     *
     *
     *
     * Hash: 0xCA7DC8329F0A1E9E | Since: 323 | API-Set: unknown
     */
    export function setAirDragMultiplierForsVehicle(player: number | string | IPlayer, multiplier: number): void {
        SetAirDragMultiplierForPlayersVehicle(player, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE45D1A1EF45EE61 | Since: 323 | API-Set: unknown
     */
    export function setAllNeutralRandomPedsFlee(player: number | string | IPlayer, toggle: boolean): void {
        Citizen.invokeNative('0xDE45D1A1EF45EE61', player, toggle);
    }

    /**
     * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
     *
     *
     * Hash: 0xC3376F42B1FACCC6 | Since: 323 | API-Set: unknown
     */
    export function setAllNeutralRandomPedsFleeThisFrame(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xC3376F42B1FACCC6', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x056E0FE8534C2949 | Since: 323 | API-Set: unknown
     */
    export function setAllRandomPedsFlee(player: number | string | IPlayer, toggle: boolean): void {
        SetAllRandomPedsFlee(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x471D2FF42A94B4F2 | Since: 323 | API-Set: unknown
     */
    export function setAllRandomPedsFleeThisFrame(player: number | string | IPlayer): void {
        SetAllRandomPedsFleeThisFrame(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2382AB11450AE7BA | Since: 877 | API-Set: unknown
     */
    export function setApplyWaypointOf(player: number | string | IPlayer, hudColor: number): void {
        Citizen.invokeNative('0x2382AB11450AE7BA', player, hudColor);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F343285A00B4BB6 | Since: 323 | API-Set: unknown
     */
    export function setAutoGiveParachuteWhenEnterPlane(player: number | string | IPlayer, toggle: boolean): void {
        SetAutoGiveParachuteWhenEnterPlane(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2B315B6689D537D | Since: 323 | API-Set: unknown
     */
    export function setAutoGiveScubaGearWhenExitVehicle(player: number | string | IPlayer, toggle: boolean): void {
        SetAutoGiveScubaGearWhenExitVehicle(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E8AABFA40A84F8C | Since: 323 | API-Set: unknown
     */
    export function setDisableAmbientMeleeMove(player: number | string | IPlayer, toggle: boolean): void {
        SetDisableAmbientMeleeMove(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB172424876553F4 | Since: 323 | API-Set: unknown
     */
    export function setDispatchCopsFor(player: number | string | IPlayer, toggle: boolean): void {
        SetDispatchCopsForPlayer(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EEDA153AD141BA4 | Since: 323 | API-Set: unknown
     */
    export function setEveryoneIgnore(player: number | string | IPlayer, toggle: boolean): void {
        SetEveryoneIgnorePlayer(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x596976B02B6B5700 | Since: 323 | API-Set: unknown
     */
    export function setIgnoreLowPriorityShockingEvents(player: number | string | IPlayer, toggle: boolean): void {
        SetIgnoreLowPriorityShockingEvents(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAC75988A7D078D3 | Since: 463 | API-Set: unknown
     */
    export function setLawPedsCanAttackNonWantedThisFrame(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xFAC75988A7D078D3', player);
    }

    /**
     * `PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation`
     *
     * <strong></strong>
     *
     * In "am_hold_up.ysc" used once:
     *
     * `l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);`
     * `PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));`
     *
     * Hash: 0xB45EFF719D8427A6 | Since: 323 | API-Set: unknown
     */
    export function setLawResponseDelayOverride(): void {
        Citizen.invokeNative('0xB45EFF719D8427A6', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA5F02DB48D704B9 | Since: 323 | API-Set: unknown
     */
    export function setMaxWantedLevel(maxWantedLevel: number): void {
        SetMaxWantedLevel(maxWantedLevel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5DC40A8869C22141 | Since: 323 | API-Set: unknown
     */
    export function setBluetoothState(player: number | string | IPlayer, state: boolean): void {
        SetPlayerBluetoothState(player, state);
    }

    /**
     * Sets whether this player can be hassled by gangs.
     *
     * Hash: 0xD5E460AD7020A246 | Since: 323 | API-Set: unknown
     */
    export function setCanBeHassledByGangs(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerCanBeHassledByGangs(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCAC57395B151135F | Since: 323 | API-Set: unknown
     */
    export function setCanCollectDroppedMoney(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xCAC57395B151135F', player, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x55FCC0C390620314 | Since: 573 | API-Set: unknown
     */
    export function setCanDamagePlayer(player1: number | string | IPlayer, player2: number | string | IPlayer, toggle: boolean): void {
        Citizen.invokeNative('0x55FCC0C390620314', player1, player2, toggle);
    }

    /**
     * Set whether this player should be able to do drive-bys.
     *
     * "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
     *
     *
     * Hash: 0x6E8834B52EC20C77 | Since: 323 | API-Set: unknown
     */
    export function setCanDoDriveBy(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerCanDoDriveBy(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF401B182DBA8AF53 | Since: 323 | API-Set: unknown
     */
    export function setCanLeaveParachuteSmokeTrail(player: number | string | IPlayer, enabled: boolean): void {
        SetPlayerCanLeaveParachuteSmokeTrail(player, enabled);
    }

    /**
     * Sets whether this player can take cover.
     *
     * Hash: 0xD465A8599DFF6814 | Since: 323 | API-Set: unknown
     */
    export function setCanUseCover(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerCanUseCover(player, toggle);
    }

    /**
     * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
     *
     * Hash: 0x14D913B777DFF5DA | Since: 323 | API-Set: unknown
     */
    export function setClothLockCounter(value: number): void {
        SetPlayerClothLockCounter(value);
    }

    /**
     * Every occurrence was either 0 or 2.
     *
     * Hash: 0x9F7BBA2EA6372500 | Since: 323 | API-Set: unknown
     */
    export function setClothPackageIndex(index: number): void {
        SetPlayerClothPackageIndex(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x749FADDF97DFE930 | Since: 323 | API-Set: unknown
     */
    export function setClothPinFrames(player: number | string | IPlayer): void {
        SetPlayerClothPinFrames(player, 0);
    }

    /**
     * Flags:
     * SPC_AMBIENT_SCRIPT = (1 << 1),
     * SPC_CLEAR_TASKS = (1 << 2),
     * SPC_REMOVE_FIRES = (1 << 3),
     * SPC_REMOVE_EXPLOSIONS = (1 << 4),
     * SPC_REMOVE_PROJECTILES = (1 << 5),
     * SPC_DEACTIVATE_GADGETS = (1 << 6),
     * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
     * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
     * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
     * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
     * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
     * SPC_ALLOW_PAD_SHAKE = (1 << 12)
     *
     * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
     *
     * Hash: 0x8D32347D6D4C40A2 | Since: 323 | API-Set: unknown
     */
    export function setControl(player: number | string | IPlayer, bHasControl: boolean, flags: number): void {
        SetPlayerControl(player, bHasControl, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD821056B9ACF8052 | Since: 1011 | API-Set: unknown
     */
    export function setExplosiveDamageModifier(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xD821056B9ACF8052', player, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFD79FA81DFBA9CB | Since: 573 | API-Set: unknown
     */
    export function setFallDistanceToTriggerRagdollOverride(player: number | string | IPlayer): void {
        SetPlayerFallDistance(player, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0FEE4F80AC44A726 | Since: 323 | API-Set: unknown
     */
    export function setForcedAim(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerForcedAim(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75E7D505F2B15902 | Since: 323 | API-Set: unknown
     */
    export function setForcedZoom(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerForcedZoom(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7651BC64AE59E128 | Since: 323 | API-Set: unknown
     */
    export function setForceSkipAimIntro(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerForceSkipAimIntro(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7DDAB28D31FAC363 | Since: 323 | API-Set: unknown
     */
    export function setHasReserveParachute(player: number | string | IPlayer): void {
        SetPlayerHasReserveParachute(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC388A0F065F5BC34 | Since: 573 | API-Set: unknown
     */
    export function setHealthRechargeMaxPercent(player: number | string | IPlayer, limit: number): void {
        SetPlayerHealthRechargeLimit(player, limit);
    }

    /**
     * `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
     * Use 1.0 to reset it back to normal
     *
     * Hash: 0x5DB660B38DD98A31 | Since: 323 | API-Set: unknown
     */
    export function setHealthRechargeMultiplier(player: number | string | IPlayer, regenRate: number): void {
        SetPlayerHealthRechargeMultiplier(player, regenRate);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE4EBDD2593BA844 | Since: 1180 | API-Set: unknown
     */
    export function setHomingDisabledForAllVehicleWeapons(): void {
        SetPlayerHomingRocketDisabled(undefined, undefined);
    }

    /**
     * Simply sets you as invincible (Health will not deplete).
     *
     * Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
     * *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
     *
     * Hash: 0x239528EACDC3E7DE | Since: 323 | API-Set: unknown
     */
    export function setInvincible(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerInvincible(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6BC97F4F4BB3C04B | Since: 463 | API-Set: unknown
     */
    export function setInvincibleButHasReactions(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerInvincibleKeepRagdollEnabled(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF300C7649724A0B | Since: 323 | API-Set: unknown
     */
    export function setLeavePedBehind(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerLeavePedBehind(player, toggle);
    }

    /**
     * Example from fm_mission_controler.ysc.c4:
     *
     * `PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);`
     *
     * All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
     *
     * No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
     *
     * Hash: 0x5C8B2F450EE4328E | Since: 323 | API-Set: unknown
     */
    export function setLockon(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerLockon(player, toggle);
    }

    /**
     * Affects the range of auto aim target.
     *
     * Hash: 0x29961D490E5814FD | Since: 323 | API-Set: unknown
     */
    export function setLockonRangeOverride(player: number | string | IPlayer, range: number): void {
        SetPlayerLockonRangeOverride(player, range);
    }

    /**
     * `Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4`
     *
     * Hash: 0x77DFCCF5948B8C71 | Since: 323 | API-Set: unknown
     */
    export function setMaxArmour(player: number | string | IPlayer, value: number): void {
        SetPlayerMaxArmour(player, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D768602ADEF2245 | Since: 463 | API-Set: unknown
     */
    export function setMaxExplosiveDamage(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x8D768602ADEF2245', player, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DE37BBF9E9CC14A | Since: 323 | API-Set: unknown
     */
    export function setMayNotEnterAnyVehicle(player: number | string | IPlayer): void {
        SetPlayerMayNotEnterAnyVehicle(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8026FF78F208978A | Since: 323 | API-Set: unknown
     */
    export function setMayOnlyEnterThisVehicle(player: number | string | IPlayer, vehicle: number | IVehicle): void {
        SetPlayerMayOnlyEnterThisVehicle(player, vehicle);
    }

    /**
     * modifier's min value is 0.1
     *
     * Hash: 0x4A3DC7ECCC321032 | Since: 323 | API-Set: unknown
     */
    export function setMeleeWeaponDamageModifier(player: number | string | IPlayer, modifier: number): void {
        SetPlayerMeleeWeaponDamageModifier(player, modifier, false);
    }

    /**
     * modifier's min value is 0.1
     *
     * Hash: 0xAE540335B4ABC4E2 | Since: 323 | API-Set: unknown
     */
    export function setMeleeWeaponDefenseModifier(player: number | string | IPlayer, modifier: number): void {
        SetPlayerMeleeWeaponDefenseModifier(player, modifier);
    }

    /**
     * Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
     * Make sure to request the model first and wait until it has loaded.
     *
     * Hash: 0x00A1CADD00108836 | Since: 323 | API-Set: unknown
     */
    export function setModel(player: number | string | IPlayer, model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        SetPlayerModel(player, model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB89EF50FF25FCE9 | Since: 323 | API-Set: unknown
     */
    export function setNoiseMultiplier(player: number | string | IPlayer, multiplier: number): void {
        SetPlayerNoiseMultiplier(player, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x977DB4641F6FC3DB | Since: 323 | API-Set: unknown
     */
    export function setParachuteModelOverride(player: number | string | IPlayer, model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        SetPlayerParachuteModelOverride(player, model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC80A4C2F18A2B64 | Since: 323 | API-Set: unknown
     */
    export function setParachutePackModelOverride(player: number | string | IPlayer, model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        SetPlayerParachutePackModelOverride(player, model);
    }

    /**
     * tints 0- 13
     * 0 - unkown
     * 1 - unkown
     * 2 - unkown
     * 3 - unkown
     * 4 - unkown
     *
     * Hash: 0x93B0FB27C9A04060 | Since: 323 | API-Set: unknown
     */
    export function setParachutePackTintIndex(player: number | string | IPlayer, tintIndex: number): void {
        SetPlayerParachutePackTintIndex(player, tintIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8217FD371A4625CF | Since: 323 | API-Set: unknown
     */
    export function setParachuteSmokeTrailColor(player: number | string | IPlayer, r: number, g: number, b: number): void {
        SetPlayerParachuteSmokeTrailColor(player, r, g, b);
    }

    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     *
     * Hash: 0xA3D0E54541D9A5E5 | Since: 323 | API-Set: unknown
     */
    export function setParachuteTintIndex(player: number | string | IPlayer, tintIndex: number): void {
        SetPlayerParachuteTintIndex(player, tintIndex);
    }

    /**
     * p1 was always 5.
     * p4 was always false.
     *
     * Hash: 0xD9284A8C0D48352C | Since: 323 | API-Set: unknown
     */
    export function setParachuteVariationOverride(player: number | string | IPlayer): void {
        SetPlayerParachuteVariationOverride(player, 0, undefined, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11D5F725F0E780E0 | Since: 323 | API-Set: unknown
     */
    export function setPhonePaletteIdx(player: number | string | IPlayer, idx: number): void {
        SetPlayerResetFlagPreferRearSeats(player, idx);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7BAE68775557AE0B | Since: 1290 | API-Set: unknown
     */
    export function setPreviousVariationData(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x7BAE68775557AE0B', player, 0, 0, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0764486AEDE748DB | Since: 2372 | API-Set: unknown
     */
    export function setReserveParachuteModelOverride(player: number | string | IPlayer, model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        SetPlayerReserveParachuteModelOverride(player, model);
    }

    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     * Hash: 0xAF04C87F5DC1DF38 | Since: 323 | API-Set: unknown
     */
    export function setReserveParachuteTintIndex(player: number | string | IPlayer, index: number): void {
        SetPlayerReserveParachuteTintIndex(player, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC54C95DA968EC5B5 | Since: 323 | API-Set: unknown
     */
    export function setSimulateAiming(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerSimulateAiming(player, toggle);
    }

    /**
     * Values around 1.0f to 2.0f used in game scripts.
     *
     * Hash: 0xB2C1A29588A9F47C | Since: 323 | API-Set: unknown
     */
    export function setSneakingNoiseMultiplier(player: number | string | IPlayer, multiplier: number): void {
        SetPlayerSneakingNoiseMultiplier(player, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F7CEB6520288061 | Since: 323 | API-Set: unknown
     */
    export function setSpectatedVehicleRadioOverride(): void {
        Citizen.invokeNative('0x2F7CEB6520288061', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA01B8075D8B92DF4 | Since: 323 | API-Set: unknown
     */
    export function setSprint(player: number | string | IPlayer, toggle: boolean): void {
        SetPlayerSprint(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E9021C1FCDD507A | Since: 323 | API-Set: unknown
     */
    export function setStealthPerceptionModifier(player: number | string | IPlayer, value: number): void {
        SetPlayerStealthPerceptionModifier(player, value);
    }

    /**
     * Sets your targeting mode.
     * 0 = Assisted Aim - Full
     * 1 = Assisted Aim - Partial
     * 2 = Free Aim - Assisted
     * 3 = Free Aim
     *
     * Hash: 0xB1906895227793F3 | Since: 323 | API-Set: unknown
     */
    export function setTargetingMode(targetMode: number): void {
        SetPlayerTargetingMode(targetMode);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5702B917B99DB1CD | Since: 323 | API-Set: unknown
     */
    export function setTargetLevel(targetLevel: number): void {
        SetPlayerTargetLevel(targetLevel);
    }

    /**
     * Set player team on deathmatch and last team standing..
     *
     * Hash: 0x0299FA38396A4940 | Since: 323 | API-Set: unknown
     */
    export function setTeam(player: number | string | IPlayer, team: number): void {
        SetPlayerTeam(player, team);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0D3E4F7AAFB7E78 | Since: 757 | API-Set: unknown
     */
    export function setUnderwaterBreathPercentRemaining(player: number | string | IPlayer, time: number): number {
        return SetPlayerUnderwaterTimeRemaining(player, time);
    }

    /**
     * modifier's min value is 0.1
     *
     * Hash: 0xA50E117CDDF82F0C | Since: 323 | API-Set: unknown
     */
    export function setVehicleDamageModifier(player: number | string | IPlayer, modifier: number): void {
        SetPlayerVehicleDamageModifier(player, modifier);
    }

    /**
     * modifier's min value is 0.1
     *
     * Hash: 0x4C60E6EFDAFF2462 | Since: 323 | API-Set: unknown
     */
    export function setVehicleDefenseModifier(player: number | string | IPlayer, modifier: number): void {
        SetPlayerVehicleDefenseModifier(player, modifier);
    }

    /**
     * Unsets playerPed+330 if the current weapon has certain flags.
     *
     * Hash: 0x237440E46D918649 | Since: 1290 | API-Set: unknown
     */
    export function setVehicleWeaponToNonHoming(): void {
        Citizen.invokeNative('0x237440E46D918649', undefined);
    }

    /**
     * # Predominant call signatures
     * `PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));`
     *
     * # Parameter value ranges
     * `P0: PLAYER::PLAYER_ID()`
     * `P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)`
     * P2: Not set by any call
     *
     * Hash: 0x520E541A97A13354 | Since: 323 | API-Set: unknown
     */
    export function setWantedCentrePosition(player: number | string | IPlayer): Vector3 {
        return SetPlayerWantedCentrePosition(player, false, false);
    }

    /**
     * Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
     *
     * wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
     *
     * disableNoMission-  Disables When Off Mission- appears to always be false
     *
     *
     * Hash: 0x39FF19C64EF7DA5B | Since: 323 | API-Set: unknown
     */
    export function setWantedLevel(player: number | string | IPlayer, wantedLevel: number, disableNoMission: boolean): void {
        SetPlayerWantedLevel(player, wantedLevel, disableNoMission);
    }

    /**
     * Forces any pending wanted level to be applied to the specified player immediately.
     *
     * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
     *
     * Second parameter is unknown (always false).
     *
     * Hash: 0xE0A7D1E497FFCD6F | Since: 323 | API-Set: unknown
     */
    export function setWantedLevelNow(player: number | string | IPlayer): void {
        SetPlayerWantedLevelNow(player, false);
    }

    /**
     * p2 is always false in R* scripts
     *
     * Hash: 0x340E61DE7F471565 | Since: 323 | API-Set: unknown
     */
    export function setWantedLevelNoDrop(player: number | string | IPlayer, wantedLevel: number): void {
        SetPlayerWantedLevelNoDrop(player, wantedLevel, false);
    }

    /**
     * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
     *
     * Based on tests, it is unlikely to be a multiplier.
     *
     * modifier's min value is 0.1
     *
     * Hash: 0xCE07B9F7817AADA3 | Since: 323 | API-Set: unknown
     */
    export function setWeaponDamageModifier(player: number | string | IPlayer, modifier: number): void {
        SetPlayerWeaponDamageModifier(player, modifier);
    }

    /**
     * modifier's min value is 0.1
     *
     * Hash: 0x2D83BC011CA14A3C | Since: 323 | API-Set: unknown
     */
    export function setWeaponDefenseModifier(player: number | string | IPlayer, modifier: number): void {
        SetPlayerWeaponDefenseModifier(player, modifier);
    }

    /**
     * modifier's min value is 0.1
     *
     * Hash: 0xBCFDE9EDE4CF27DC | Since: 944 | API-Set: unknown
     */
    export function setWeaponMinigunDefenseModifier(player: number | string | IPlayer, modifier: number): void {
        SetPlayerWeaponDefenseModifier2(player, modifier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31E90B8873A4CD3B | Since: 617 | API-Set: unknown
     */
    export function setWeaponTakedownDefenseModifier(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x31E90B8873A4CD3B', player, 0);
    }

    /**
     * The player will be ignored by the police if toggle is set to true
     *
     * Hash: 0x32C62AA929C2DA6A | Since: 323 | API-Set: unknown
     */
    export function setPoliceIgnore(player: number | string | IPlayer, toggle: boolean): void {
        SetPoliceIgnorePlayer(player, toggle);
    }

    /**
     * If toggle is set to false:
     * The police won't be shown on the (mini)map
     *
     * If toggle is set to true:
     * The police will be shown on the (mini)map
     *
     * Hash: 0x43286D561B72B8BF | Since: 323 | API-Set: unknown
     */
    export function setPoliceRadarBlips(toggle: boolean): void {
        SetPoliceRadarBlips(toggle);
    }

    /**
     * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
     *
     * Just call it one time, it is not required to be called once every tick.
     *
     * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
     *
     * Hash: 0x6DB47AA77FD94E09 | Since: 323 | API-Set: unknown
     */
    export function setRunSprintMultiplierFor(player: number | string | IPlayer, multiplier: number): void {
        SetRunSprintMultiplierForPlayer(player, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70A382ADEC069DD3 | Since: 1604 | API-Set: unknown
     */
    export function setScriptFirePosition(coordX: number, coordY: number, coordZ: number): void {
        Citizen.invokeNative('0x70A382ADEC069DD3', coordX, coordY, coordZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB214D570EAD7F81A | Since: 678 | API-Set: unknown
     */
    export function setSpecialAbilityMp(player: number | string | IPlayer): void {
        SetSpecialAbility(player, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA49C426ED0CA4AB7 | Since: 323 | API-Set: unknown
     */
    export function setSpecialAbilityMultiplier(multiplier: number): void {
        SetSpecialAbilityMultiplier(multiplier);
    }

    /**
     * Swim speed multiplier.
     * Multiplier goes up to 1.49
     *
     * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
     *
     * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
     *
     * Hash: 0xA91C6F0FF7D16A13 | Since: 323 | API-Set: unknown
     */
    export function setSwimMultiplierFor(player: number | string | IPlayer, multiplier: number): void {
        SetSwimMultiplierForPlayer(player, multiplier);
    }

    /**
     * Max value is 1.0
     *
     * Hash: 0x9B0BB33B04405E7A | Since: 323 | API-Set: unknown
     */
    export function setWantedLevelDifficulty(player: number | string | IPlayer, difficulty: number): void {
        SetWantedLevelDifficulty(player, difficulty);
    }

    /**
     * No comment provided
     *
     * Hash: 0x49B856B1360C47C7 | Since: 2060 | API-Set: unknown
     */
    export function setWantedLevelHiddenEscapeTime(player: number | string | IPlayer, wantedLevel: number, lossTime: number): void {
        SetWantedLevelHiddenEvasionTime(player, wantedLevel, lossTime);
    }

    /**
     * No comment provided
     *
     * Hash: 0x020E5F00CDA207BA | Since: 323 | API-Set: unknown
     */
    export function setWantedLevelMultiplier(multiplier: number): void {
        SetWantedLevelMultiplier(multiplier);
    }

    /**
     * This is to make the player walk without accepting input from INPUT.
     *
     * gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
     *
     * p4 is always 1 and p5 is always 0.
     *
     * C# Example :
     *
     * Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
     *
     * Hash: 0x477D5D63E63ECA5D | Since: 323 | API-Set: unknown
     */
    export function simulateInputGait(player: number | string | IPlayer, amount: number, gaitType: number, speed: number): void {
        SimulatePlayerInputGait(player, amount, gaitType, speed, false, false, undefined);
    }

    /**
     * p1 is always 0 in the scripts
     *
     * Hash: 0x821FDC827D6F4090 | Since: 678 | API-Set: unknown
     */
    export function specialAbilityActivate(player: number | string | IPlayer): void {
        SpecialAbilityActivate(player, 0);
    }

    /**
     * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
     *
     * Hash: 0xB7B0870EB531D08D | Since: 323 | API-Set: unknown
     */
    export function specialAbilityChargeAbsolute(player: number | string | IPlayer): void {
        SpecialAbilityChargeAbsolute(player, 0, false, undefined);
    }

    /**
     * p1 appears to always be 1 (only comes up twice)
     *
     * Hash: 0xED481732DFF7E997 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityChargeContinuous(player: number | string | IPlayer, p1: number | IPed): void {
        SpecialAbilityChargeContinuous(player, p1, undefined);
    }

    /**
     * 2 matches. p1 was always true.
     *
     * Hash: 0xF733F45FA4497D93 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityChargeLarge(player: number | string | IPlayer): void {
        SpecialAbilityChargeLarge(player, false, false, undefined);
    }

    /**
     * Only 1 match. Both p1 & p2 were true.
     *
     * Hash: 0xF113E3AA9BC54613 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityChargeMedium(player: number | string | IPlayer): void {
        SpecialAbilityChargeMedium(player, false, false, undefined);
    }

    /**
     *
     * normalizedValue is from 0.0 - 1.0
     * p2 is always 1
     *
     * Hash: 0xA0696A65F009EE18 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityChargeNormalized(player: number | string | IPlayer, normalizedValue: number): void {
        SpecialAbilityChargeNormalized(player, normalizedValue, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9A763D8FE87436A | Since: 323 | API-Set: unknown
     */
    export function specialAbilityChargeOnMissionFailed(player: number | string | IPlayer): void {
        SpecialAbilityChargeOnMissionFailed(player, undefined);
    }

    /**
     * Every occurrence of p1 & p2 were both true.
     *
     * Hash: 0x2E7B9B683481687D | Since: 323 | API-Set: unknown
     */
    export function specialAbilityChargeSmall(player: number | string | IPlayer): void {
        SpecialAbilityChargeSmall(player, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD6A953C6D1492057 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityDeactivate(player: number | string | IPlayer): void {
        SpecialAbilityDeactivate(player, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9CB5CE07A3968D5A | Since: 323 | API-Set: unknown
     */
    export function specialAbilityDeactivateFast(player: number | string | IPlayer): void {
        SpecialAbilityDeactivateFast(player, undefined);
    }

    /**
     * p1 is always 0 in the scripts
     *
     * Hash: 0x17F7471EACA78290 | Since: 678 | API-Set: unknown
     */
    export function specialAbilityDeactivateMp(player: number | string | IPlayer): void {
        SpecialAbilityDeplete(player, 0);
    }

    /**
     * p1 was always true.
     *
     * Hash: 0x1D506DBBBC51E64B | Since: 323 | API-Set: unknown
     */
    export function specialAbilityDepleteMeter(player: number | string | IPlayer): void {
        SpecialAbilityDepleteMeter(player, false, undefined);
    }

    /**
     * Also known as _RECHARGE_SPECIAL_ABILITY
     *
     * Hash: 0x3DACA8DDC6FD4980 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityFillMeter(player: number | string | IPlayer): void {
        SpecialAbilityFillMeter(player, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A09D0D590A47D13 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityLock(playerModel: number | string): void {
        if (typeof playerModel === 'string') playerModel = misc.getHashKey(playerModel)
        SpecialAbilityLock(playerModel, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x375F0E738F861A94 | Since: 323 | API-Set: unknown
     */
    export function specialAbilityReset(player: number | string | IPlayer): void {
        SpecialAbilityReset(player, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF145F3BE2EFA9A3B | Since: 323 | API-Set: unknown
     */
    export function specialAbilityUnlock(playerModel: number | string): void {
        if (typeof playerModel === 'string') playerModel = misc.getHashKey(playerModel)
        SpecialAbilityUnlock(playerModel, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF9BD71691857E48 | Since: 323 | API-Set: unknown
     */
    export function startFiringAmnesty(duration: number): void {
        StartFiringAmnesty(duration);
    }

    /**
     * `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.
     *
     * Hash: 0xAD15F075A4DA0FDE | Since: 323 | API-Set: unknown
     */
    export function startTeleport(player: number | string | IPlayer, pos: Vector3, heading: number, findCollisionLand: boolean): void {
        StartPlayerTeleport(player, pos.x, pos.y, pos.z, heading, false, findCollisionLand, false);
    }

    /**
     * Disables the player's teleportation
     *
     * Hash: 0xC449EDED9D73009C | Since: 323 | API-Set: unknown
     */
    export function stopTeleport(): void {
        StopPlayerTeleport();
    }

    /**
     * crimeType: see REPORT_CRIME
     *
     * Hash: 0x9A987297ED8BD838 | Since: 323 | API-Set: unknown
     */
    export function suppressCrimeThisFrame(player: number | string | IPlayer, crimeType: number): void {
        SuppressCrimeThisFrame(player, crimeType);
    }

    /**
     * This has been found in use in the decompiled files.
     *
     * Hash: 0x4669B3ED80F24B4E | Since: 323 | API-Set: unknown
     */
    export function suppressLosingWantedLevelIfHiddenThisFrame(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x4669B3ED80F24B4E', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36F1B38855F2A8DF | Since: 323 | API-Set: unknown
     */
    export function suppressWitnessesCallingPoliceThisFrame(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x36F1B38855F2A8DF', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE23D5873C2394C61 | Since: 323 | API-Set: unknown
     */
    export function updateTeleport(player: number | string | IPlayer): boolean {
        return UpdatePlayerTeleport(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFEE8FA29AB9A18E | Since: 323 | API-Set: unknown
     */
    export function updateSpecialAbilityFromStat(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xFFEE8FA29AB9A18E', player, undefined);
    }

    /**
     * This native is used in both singleplayer and multiplayer scripts.
     *
     * Always used like this in scripts
     * `PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());`
     *
     * Hash: 0xBC9490CA15AEA8FB | Since: 323 | API-Set: unknown
     */
    export function updateWantedPositionThisFrame(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xBC9490CA15AEA8FB', player);
    }

}


export namespace streaming {
    /**
     * No comment provided
     *
     * Hash: 0x322B1192 | Since: unknown | API-Set: client
     */
    export function getInteriorEntitiesExtents(interiorId: number): [number, number, number, number, number, number] {
        return GetInteriorEntitiesExtents(interiorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF772BB2C | Since: unknown | API-Set: client
     */
    export function getInteriorPortalCornerPosition(interiorId: number, portalIndex: number, cornerIndex: number): [number, number, number] {
        return GetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD05BB8B1 | Since: unknown | API-Set: client
     */
    export function getInteriorPortalCount(interiorId: number): number {
        return GetInteriorPortalCount(interiorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A0E1700 | Since: unknown | API-Set: client
     */
    export function getInteriorPortalEntityArchetype(interiorId: number, portalIndex: number, entityIndex: number): number {
        return GetInteriorPortalEntityArchetype(interiorId, portalIndex, entityIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC68021B | Since: unknown | API-Set: client
     */
    export function getInteriorPortalEntityCount(interiorId: number, portalIndex: number): number {
        return GetInteriorPortalEntityCount(interiorId, portalIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DA2E811 | Since: unknown | API-Set: client
     */
    export function getInteriorPortalEntityFlag(interiorId: number, portalIndex: number, entityIndex: number): number {
        return GetInteriorPortalEntityFlag(interiorId, portalIndex, entityIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B7AB83C | Since: unknown | API-Set: client
     */
    export function getInteriorPortalEntityPosition(interiorId: number, portalIndex: number, entityIndex: number): [number, number, number] {
        return GetInteriorPortalEntityPosition(interiorId, portalIndex, entityIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F9CEB63 | Since: unknown | API-Set: client
     */
    export function getInteriorPortalEntityRotation(interiorId: number, portalIndex: number, entityIndex: number): [number, number, number, number] {
        return GetInteriorPortalEntityRotation(interiorId, portalIndex, entityIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC74DA47C | Since: unknown | API-Set: client
     */
    export function getInteriorPortalFlag(interiorId: number, portalIndex: number): number {
        return GetInteriorPortalFlag(interiorId, portalIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA9C141D | Since: unknown | API-Set: client
     */
    export function getInteriorPortalRoomFrom(interiorId: number, portalIndex: number): number {
        return GetInteriorPortalRoomFrom(interiorId, portalIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F47F0E8 | Since: unknown | API-Set: client
     */
    export function getInteriorPortalRoomTo(interiorId: number, portalIndex: number): number {
        return GetInteriorPortalRoomTo(interiorId, portalIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77A435B0 | Since: unknown | API-Set: client
     */
    export function getInteriorPosition(interiorId: number): [number, number, number] {
        return GetInteriorPosition(interiorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2737C2C | Since: unknown | API-Set: client
     */
    export function getInteriorRoomCount(interiorId: number): number {
        return GetInteriorRoomCount(interiorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9E795DD | Since: unknown | API-Set: client
     */
    export function getInteriorRoomExtents(interiorId: number, roomIndex: number): [number, number, number, number, number, number] {
        return GetInteriorRoomExtents(interiorId, roomIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B7AF743 | Since: unknown | API-Set: client
     */
    export function getInteriorRoomFlag(interiorId: number, roomIndex: number): number {
        return GetInteriorRoomFlag(interiorId, roomIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0EE05F8 | Since: unknown | API-Set: client
     */
    export function getInteriorRoomIndexByHash(interiorId: number, roomHash: number): number {
        return GetInteriorRoomIndexByHash(interiorId, roomHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11755DF2 | Since: unknown | API-Set: client
     */
    export function getInteriorRoomName(interiorId: number, roomIndex: number): string {
        return GetInteriorRoomName(interiorId, roomIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82BA3F88 | Since: unknown | API-Set: client
     */
    export function getInteriorRoomTimecycle(interiorId: number, roomIndex: number): number {
        return GetInteriorRoomTimecycle(interiorId, roomIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A039998 | Since: unknown | API-Set: client
     */
    export function getInteriorRotation(interiorId: number): [number, number, number, number] {
        return GetInteriorRotation(interiorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x87F43553 | Since: unknown | API-Set: client
     */
    export function setInteriorPortalCornerPosition(interiorId: number, portalIndex: number, cornerIndex: number, pos: Vector3): void {
        SetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8349CD76 | Since: unknown | API-Set: client
     */
    export function setInteriorPortalEntityFlag(interiorId: number, portalIndex: number, entityIndex: number, flag: number): void {
        SetInteriorPortalEntityFlag(interiorId, portalIndex, entityIndex, flag);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88B2355E | Since: unknown | API-Set: client
     */
    export function setInteriorPortalFlag(interiorId: number, portalIndex: number, flag: number): void {
        SetInteriorPortalFlag(interiorId, portalIndex, flag);
    }

    /**
     * No comment provided
     *
     * Hash: 0x298FC783 | Since: unknown | API-Set: client
     */
    export function setInteriorPortalRoomFrom(interiorId: number, portalIndex: number, roomFrom: number): void {
        SetInteriorPortalRoomFrom(interiorId, portalIndex, roomFrom);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58982680 | Since: unknown | API-Set: client
     */
    export function setInteriorPortalRoomTo(interiorId: number, portalIndex: number, roomTo: number): void {
        SetInteriorPortalRoomTo(interiorId, portalIndex, roomTo);
    }

    /**
     * Overwrite the games default CPortalTracker interior detection range.
     * This fixes potentially unwanted behaviour in the base game and allows you to build custom interiors with larger ceiling heights without running into graphical glitches.
     *
     * By default CPortalTracker will probe 4 units downward trying to reach collisions that are part of the interior the entity is in.
     * If no collision can be found 16 units are used in some circumstances.
     *
     * There are 30+ hard coded special cases, only some of them exposed via script (for example `ENABLE_STADIUM_PROBES_THIS_FRAME`).
     *
     * This native allows you to extend the probe range up to 150 units which is the same value the game uses for the `xs_arena_interior`
     *
     * Hash: 0x423F7E39 | Since: unknown | API-Set: client
     */
    export function setInteriorProbeLength(probeLength: number): void {
        SetInteriorProbeLength(probeLength);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4FDCF51E | Since: unknown | API-Set: client
     */
    export function setInteriorRoomExtents(interiorId: number, roomIndex: number, bbMinX: number, bbMinY: number, bbMinZ: number, bbMaxX: number, bbMaxY: number, bbMaxZ: number): void {
        SetInteriorRoomExtents(interiorId, roomIndex, bbMinX, bbMinY, bbMinZ, bbMaxX, bbMaxY, bbMaxZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5518D60B | Since: unknown | API-Set: client
     */
    export function setInteriorRoomFlag(interiorId: number, roomIndex: number, flag: number): void {
        SetInteriorRoomFlag(interiorId, roomIndex, flag);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31C9A848 | Since: unknown | API-Set: client
     */
    export function setInteriorRoomTimecycle(interiorId: number, roomIndex: number, timecycleHash: number): void {
        SetInteriorRoomTimecycle(interiorId, roomIndex, timecycleHash);
    }

    /**
     * Transiently updates the entity with the specified mapdata index and entity index.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xFC52CB91 | Since: unknown | API-Set: client
     */
    export function updateMapdataEntity(mapdata: number, entity: number, entityDef: number | IObject): void {
        UpdateMapdataEntity(mapdata, entity, entityDef);
    }

    /**
     * No comment provided
     *
     * Hash: 0x32CA01C3 | Since: unknown | API-Set: client
     */
    export function addTextEntry(entryKey: string, entryText: string): void {
        AddTextEntry(entryKey, entryText);
    }

    /**
     * No comment provided
     *
     * Hash: 0x289DA860 | Since: unknown | API-Set: client
     */
    export function addTextEntryByHash(entryKey: number | string, entryText: string): void {
        if (typeof entryKey === 'string') entryKey = misc.getHashKey(entryKey)
        AddTextEntryByHash(entryKey, entryText);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BC3144DEB678666 | Since: 323 | API-Set: unknown
     */
    export function addModelToCreatorBudget(modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return AddModelToCreatorBudget(modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8E2A065ABDAE6994 | Since: 323 | API-Set: unknown
     */
    export function allowPlayerSwitchAscent(): void {
        AllowPlayerSwitchAscent();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAD5FDF34B81BFE79 | Since: 323 | API-Set: unknown
     */
    export function allowPlayerSwitchDescent(): void {
        AllowPlayerSwitchDescent();
    }

    /**
     * No comment provided
     *
     * Hash: 0x74DE2E8739086740 | Since: 323 | API-Set: unknown
     */
    export function allowPlayerSwitchOutro(): void {
        AllowPlayerSwitchOutro();
    }

    /**
     * No comment provided
     *
     * Hash: 0x43D1680C6D19A8E9 | Since: 323 | API-Set: unknown
     */
    export function allowPlayerSwitchPan(): void {
        AllowPlayerSwitchPan();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9BADDC94EF83B823 | Since: 323 | API-Set: unknown
     */
    export function beginSrl(): void {
        BeginSrl();
    }

    /**
     * No comment provided
     *
     * Hash: 0x31B73D1EA9F01DA2 | Since: 323 | API-Set: unknown
     */
    export function clearFocus(): void {
        ClearFocus();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCE58B1CFB9290813 | Since: 323 | API-Set: unknown
     */
    export function clearHdArea(): void {
        ClearHdArea();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD605B8E0E18B3BB | Since: 323 | API-Set: unknown
     */
    export function disableSwitchOutroFx(): void {
        DisableSwitchOutroFx();
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x2DA49C3B79856961 | Since: 323 | API-Set: unknown
     */
    export function doesAnimDictExist(animDict: string): boolean {
        return DoesAnimDictExist(animDict);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4793DFF3AF2ABCD | Since: 323 | API-Set: unknown
     */
    export function enableSwitchPauseBeforeDescent(): void {
        EnableSwitchPauseBeforeDescent();
    }

    /**
     * Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
     *
     * Hash: 0x0A41540E63C9EE17 | Since: 323 | API-Set: unknown
     */
    export function endSrl(): void {
        EndSrl();
    }

    /**
     * No comment provided
     *
     * Hash: 0x03F1A106BDA7DD3E | Since: 323 | API-Set: unknown
     */
    export function forceAllowTimeBasedFadingThisFrame(): void {
        Citizen.invokeNative('0x03F1A106BDA7DD3E');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF741BD853611592D | Since: 2189 | API-Set: unknown
     */
    export function getGlobalWaterFile(): number {
        return GetGlobalWaterType();
    }

    /**
     * x1, y1, z1 -- Coords of your ped model
     * x2, y2, z2 -- Coords of the ped you want to switch to
     *
     * Hash: 0xB5D7B26B45720E05 | Since: 323 | API-Set: unknown
     */
    export function getIdealPlayerSwitchType(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return GetIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C15B0E443B2349D | Since: 323 | API-Set: unknown
     */
    export function getLodscale(): number {
        return GetLodscale();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4060057271CEBC89 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfRequests(): number {
        return GetNumberOfStreamingRequests();
    }

    /**
     * No comment provided
     *
     * Hash: 0x20F898A5D9782800 | Since: 323 | API-Set: unknown
     */
    export function getPlayerShortSwitchState(): number {
        return GetPlayerShortSwitchState();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B48A06DD0E792A5 | Since: 323 | API-Set: unknown
     */
    export function getPlayerSwitchInterpOutCurrentTime(): number {
        return GetPlayerSwitchInterpOutCurrentTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0x08C2D6C52A3104BB | Since: 323 | API-Set: unknown
     */
    export function getPlayerSwitchInterpOutDuration(): number {
        return GetPlayerSwitchInterpOutDuration();
    }

    /**
     * No comment provided
     *
     * Hash: 0x78C0D93253149435 | Since: 323 | API-Set: unknown
     */
    export function getPlayerSwitchJumpCutIndex(): number {
        return GetPlayerSwitchJumpCutIndex();
    }

    /**
     * No comment provided
     *
     * Hash: 0x470555300D10B2A5 | Since: 323 | API-Set: unknown
     */
    export function getPlayerSwitchState(): number {
        return GetPlayerSwitchState();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3C94A90D9FC9E62 | Since: 323 | API-Set: unknown
     */
    export function getPlayerSwitchType(): number {
        return GetPlayerSwitchType();
    }

    /**
     * 0.0 = no memory used
     * 1.0 = all memory used
     *
     * Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
     *
     * Hash: 0x3D3D8B3BE5A83D35 | Since: 323 | API-Set: unknown
     */
    export function getUsedCreatorBudget(): number {
        return GetUsedCreatorModelMemoryPercentage();
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xD031A9162D01088C | Since: 323 | API-Set: unknown
     */
    export function hasAnimDictLoaded(animDict: string): boolean {
        return HasAnimDictLoaded(animDict);
    }

    /**
     * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
     *
     * Animation set and clip set are synonymous.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0xC4EA073D86FB29B0 | Since: 323 | API-Set: unknown
     */
    export function hasAnimSetLoaded(animSet: string): boolean {
        return HasAnimSetLoaded(animSet);
    }

    /**
     * Alias for HAS_ANIM_SET_LOADED.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x318234F4F3738AF3 | Since: 323 | API-Set: unknown
     */
    export function hasClipSetLoaded(clipSet: string): boolean {
        return HasClipSetLoaded(clipSet);
    }

    /**
     * No comment provided
     *
     * Hash: 0x22CCA434E368F03A | Since: 323 | API-Set: unknown
     */
    export function hasCollisionForModelLoaded(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return HasCollisionForModelLoaded(model);
    }

    /**
     * Checks if the specified model has loaded into memory.
     *
     * Hash: 0x98A4EB5D89A0C952 | Since: 323 | API-Set: unknown
     */
    export function hasModelLoaded(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return HasModelLoaded(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8702416E512EC454 | Since: 323 | API-Set: unknown
     */
    export function hasNamedPtfxAssetLoaded(fxName: string): boolean {
        return HasNamedPtfxAssetLoaded(fxName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA7D9B86ECA7481B | Since: 323 | API-Set: unknown
     */
    export function hasPtfxAssetLoaded(): boolean {
        return HasPtfxAssetLoaded();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB5A4DB34FE89B88A | Since: 323 | API-Set: unknown
     */
    export function initCreatorBudget(): void {
        InitCreatorBudget();
    }

    /**
     * No comment provided
     *
     * Hash: 0x63EB2B972A218CAC | Since: 323 | API-Set: unknown
     */
    export function iplGroupSwapCancel(): void {
        Citizen.invokeNative('0x63EB2B972A218CAC');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF4A0DADB70F57FA6 | Since: 323 | API-Set: unknown
     */
    export function iplGroupSwapFinish(): void {
        Citizen.invokeNative('0xF4A0DADB70F57FA6');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5068F488DDB54DD8 | Since: 323 | API-Set: unknown
     */
    export function iplGroupSwapIsActive(): boolean {
        return Citizen.invokeNative('0x5068F488DDB54DD8');
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB199266061F820A | Since: 323 | API-Set: unknown
     */
    export function iplGroupSwapIsReady(): boolean {
        return Citizen.invokeNative('0xFB199266061F820A');
    }

    /**
     * No comment provided
     *
     * Hash: 0x95A7DABDDBB78AE7 | Since: 323 | API-Set: unknown
     */
    export function iplGroupSwapStart(iplName1: string, iplName2: string): void {
        Citizen.invokeNative('0x95A7DABDDBB78AE7', iplName1, iplName2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DDFF3FB9075D747 | Since: 323 | API-Set: unknown
     */
    export function isEntityFocus(entity: number | IEntity): boolean {
        return IsEntityFocus(entity);
    }

    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x88A741E44A2B3495 | Since: 323 | API-Set: unknown
     */
    export function isIplActive(iplName: string): boolean {
        return IsIplActive(iplName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75816577FEA6DAD5 | Since: 1103 | API-Set: unknown
     */
    export function isModelAPed(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsModelAPed(model);
    }

    /**
     * Returns whether the specified model represents a vehicle.
     *
     * Hash: 0x19AAC8F07BFEC53E | Since: 323 | API-Set: unknown
     */
    export function isModelAVehicle(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsModelAVehicle(model);
    }

    /**
     * Check if model is in cdimage(rpf)
     *
     * Hash: 0x35B9E0803292B641 | Since: 323 | API-Set: unknown
     */
    export function isModelInCdimage(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsModelInCdimage(model);
    }

    /**
     * Returns whether the specified model exists in the game.
     *
     * Hash: 0xC0296A2EDF545E92 | Since: 323 | API-Set: unknown
     */
    export function isModelValid(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsModelValid(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0x41CA5A33160EA4AB | Since: 323 | API-Set: unknown
     */
    export function isNetworkLoadingScene(): boolean {
        return IsNetworkLoadingScene();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA41A05B6CB741B85 | Since: 323 | API-Set: unknown
     */
    export function isNewLoadSceneActive(): boolean {
        return IsNewLoadSceneActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x01B8247A7A8B9AD1 | Since: 323 | API-Set: unknown
     */
    export function isNewLoadSceneLoaded(): boolean {
        return IsNewLoadSceneLoaded();
    }

    /**
     * Returns true if the player is currently switching, false otherwise.
     * (When the camera is in the sky moving from Trevor to Franklin for example)
     *
     * Hash: 0xD9D2CFFF49FAB35F | Since: 323 | API-Set: unknown
     */
    export function isPlayerSwitchInProgress(): boolean {
        return IsPlayerSwitchInProgress();
    }

    /**
     * No comment provided
     *
     * Hash: 0x71E7B2E657449AAD | Since: 323 | API-Set: unknown
     */
    export function isSafeToStartPlayerSwitch(): boolean {
        return Citizen.invokeNative('0x71E7B2E657449AAD');
    }

    /**
     * Returns true when the srl from BEGIN_SRL is loaded.
     *
     * Hash: 0xD0263801A4C5B0BB | Since: 323 | API-Set: unknown
     */
    export function isSrlLoaded(): boolean {
        return IsSrlLoaded();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC9823AB80A3DCAC | Since: 323 | API-Set: unknown
     */
    export function isStreamvolActive(): boolean {
        return IsStreamvolActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFA80CB25D0A19B3 | Since: 323 | API-Set: unknown
     */
    export function isSwitchReadyForDescent(): boolean {
        return IsSwitchReadyForDescent();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B74EA8CFD5E3E7E | Since: 323 | API-Set: unknown
     */
    export function isSwitchSkippingDescent(): boolean {
        return IsSwitchSkippingDescent();
    }

    /**
     * No comment provided
     *
     * Hash: 0x933BBEEB8C61B5F4 | Since: 323 | API-Set: unknown
     */
    export function isSwitchToMultiFirstpartFinished(): boolean {
        return Citizen.invokeNative('0x933BBEEB8C61B5F4');
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD6E84632DD4CB3F | Since: 323 | API-Set: unknown
     */
    export function loadAllObjectsNow(): void {
        LoadAllObjectsNow();
    }

    /**
     * 0 - default
     * 1 - HeistIsland
     *
     * Hash: 0x7E3F55ED251B76D3 | Since: 2189 | API-Set: unknown
     */
    export function loadGlobalWaterFile(waterType: number): void {
        LoadGlobalWaterType(waterType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4448EB75B4904BDB | Since: 323 | API-Set: unknown
     */
    export function loadScene(pos: Vector3): void {
        LoadScene(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC4582015556D1C46 | Since: 323 | API-Set: unknown
     */
    export function networkUpdateLoadScene(): boolean {
        return NetworkUpdateLoadScene();
    }

    /**
     * `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
     * `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
     * Returns True if success, used only 7 times in decompiled scripts of 1868
     *
     * Hash: 0x212A8D0D2BABFAC2 | Since: 323 | API-Set: unknown
     */
    export function newLoadSceneStart(pos: Vector3, offsetX: number, offsetY: number, offsetZ: number, radius: number): boolean {
        return NewLoadSceneStart(pos.x, pos.y, pos.z, offsetX, offsetY, offsetZ, radius, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xACCFB4ACF53551B0 | Since: 323 | API-Set: unknown
     */
    export function newLoadSceneStartSphere(pos: Vector3, radius: number): boolean {
        return NewLoadSceneStartSphere(pos.x, pos.y, pos.z, radius, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC197616D221FF4A4 | Since: 323 | API-Set: unknown
     */
    export function newLoadSceneStop(): void {
        NewLoadSceneStop();
    }

    /**
     * This allows you to override "extended distance scaling" setting. Needs to be called each frame.
     * Max scaling seems to be 200.0, normal is 1.0
     * See https://gfycat.com/DetailedHauntingIncatern
     *
     * Hash: 0xA76359FC80B2438E | Since: 323 | API-Set: unknown
     */
    export function overrideLodscaleThisFrame(scaling: number): void {
        OverrideLodscaleThisFrame(scaling);
    }

    /**
     * This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
     * For instance, GTA:O opening cutscene.
     * https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
     * https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
     *
     * Hash: 0x3D245789CE12982C | Since: 323 | API-Set: unknown
     */
    export function prefetchSrl(srl: string): void {
        PrefetchSrl(srl);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBED8CA5FF5E04113 | Since: 323 | API-Set: unknown
     */
    export function remapLodscaleRangeThisFrame(): void {
        Citizen.invokeNative('0xBED8CA5FF5E04113', 0, 0, 0, 0);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xF66A602F829E2A06 | Since: 323 | API-Set: unknown
     */
    export function removeAnimDict(animDict: string): void {
        RemoveAnimDict(animDict);
    }

    /**
     * Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
     *
     * Animation set and clip set are synonymous.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x16350528F93024B3 | Since: 323 | API-Set: unknown
     */
    export function removeAnimSet(animSet: string): void {
        RemoveAnimSet(animSet);
    }

    /**
     * Alias for REMOVE_ANIM_SET.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x01F73A131C18CD94 | Since: 323 | API-Set: unknown
     */
    export function removeClipSet(clipSet: string): void {
        RemoveClipSet(clipSet);
    }

    /**
     * Removes an IPL from the map.
     *
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Example:
     * C#:
     * Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
     *
     * C++:
     * `STREAMING::REMOVE_IPL("trevorstrailertidy");`
     *
     * iplName = Name of IPL you want to remove.
     *
     * Hash: 0xEE6C5AD3ECE0A82D | Since: 323 | API-Set: unknown
     */
    export function removeIpl(iplName: string): void {
        RemoveIpl(iplName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF086AD9354FAC3A3 | Since: 323 | API-Set: unknown
     */
    export function removeModelFromCreatorBudget(modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        RemoveModelFromCreatorBudget(modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F61EBBE1A00F96D | Since: 323 | API-Set: unknown
     */
    export function removeNamedPtfxAsset(fxName: string): void {
        RemoveNamedPtfxAsset(fxName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88C6814073DD4A73 | Since: 323 | API-Set: unknown
     */
    export function removePtfxAsset(): void {
        RemovePtfxAsset();
    }

    /**
     * Alias of REQUEST_COLLISION_AT_COORD.
     *
     * Hash: 0xC9156DC11411A9EA | Since: 323 | API-Set: unknown
     */
    export function requestAdditionalCollisionAtCoord(pos: Vector3): void {
        RequestAdditionalCollisionAtCoord(pos.x, pos.y, pos.z);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xD3BD40951412FEF6 | Since: 323 | API-Set: unknown
     */
    export function requestAnimDict(animDict: string): void {
        RequestAnimDict(animDict);
    }

    /**
     * Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x6EA47DAE7FAD0EED | Since: 323 | API-Set: unknown
     */
    export function requestAnimSet(animSet: string): void {
        RequestAnimSet(animSet);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0xD2A71E1A77418A49 | Since: 323 | API-Set: unknown
     */
    export function requestClipSet(clipSet: string): void {
        RequestClipSet(clipSet);
    }

    /**
     * No comment provided
     *
     * Hash: 0x07503F7948F491A7 | Since: 323 | API-Set: unknown
     */
    export function requestCollisionAtCoord(pos: Vector3): void {
        RequestCollisionAtCoord(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x923CB32A3B874FCB | Since: 323 | API-Set: unknown
     */
    export function requestCollisionForModel(model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        RequestCollisionForModel(model);
    }

    /**
     * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
     *
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x41B4893843BBDB74 | Since: 323 | API-Set: unknown
     */
    export function requestIpl(iplName: string): void {
        RequestIpl(iplName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0261AEF7ACFC51E | Since: 323 | API-Set: unknown
     */
    export function requestMenuPedModel(model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        RequestMenuPedModel(model);
    }

    /**
     * Request a model to be loaded into memory.
     *
     *
     * Hash: 0x963D27A58DF860AC | Since: 323 | API-Set: unknown
     */
    export function requestModel(model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        RequestModel(model);
    }

    /**
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");`
     *
     * Hash: 0x8A7A40100EDFEC58 | Since: 323 | API-Set: unknown
     */
    export function requestModelsInRoom(interior: number, roomName: string): void {
        RequestModelsInRoom(interior, roomName);
    }

    /**
     * From the b678d decompiled scripts:
     *
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");`
     *
     * Hash: 0xB80D8756B4668AB6 | Since: 323 | API-Set: unknown
     */
    export function requestNamedPtfxAsset(fxName: string): void {
        RequestNamedPtfxAsset(fxName);
    }

    /**
     * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
     *
     * Hash: 0x944955FB2A3935C8 | Since: 323 | API-Set: unknown
     */
    export function requestPtfxAsset(): void {
        RequestPtfxAsset();
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x4E52E752C76E7E7A | Since: 323 | API-Set: unknown
     */
    export function setAllMapdataCulled(): void {
        Citizen.invokeNative('0x4E52E752C76E7E7A', undefined);
    }

    /**
     * This is a NOP function. It does nothing at all.
     *
     * Hash: 0x42CBE54462D92634 | Since: 323 | API-Set: unknown
     */
    export function setDitchPoliceModels(toggle: boolean): void {
        SetDitchPoliceModels(toggle);
    }

    /**
     * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
     *
     * Hash: 0x198F77705FA0931D | Since: 323 | API-Set: unknown
     */
    export function setFocusEntity(entity: number | IEntity): void {
        SetFocusEntity(entity);
    }

    /**
     * Override the area where the camera will render the terrain.
     * p3, p4 and p5 are usually set to 0.0
     *
     *
     * Hash: 0xBB7454BAFF08FE25 | Since: 323 | API-Set: unknown
     */
    export function setFocusPosAndVel(pos: Vector3, offsetX: number, offsetY: number, offsetZ: number): void {
        SetFocusPosAndVel(pos.x, pos.y, pos.z, offsetX, offsetY, offsetZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0x717CD6E6FAEBBEDC | Since: 323 | API-Set: unknown
     */
    export function setGamePausesFor(toggle: boolean): void {
        SetGamePausesForStreaming(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB85F26619073E775 | Since: 323 | API-Set: unknown
     */
    export function setHdArea(pos: Vector3, radius: number): void {
        SetHdArea(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE37B76C387BE28ED | Since: 323 | API-Set: unknown
     */
    export function setInteriorActive(interiorID: number, toggle: boolean): void {
        SetInteriorActive(interiorID, toggle);
    }

    /**
     * Enables the specified island. For more information, see islandhopper.meta
     *
     * Hash: 0x9A9D1BA639675CF1 | Since: 2189 | API-Set: unknown
     */
    export function setIslandEnabled(name: string, toggle: boolean): void {
        SetIslandEnabled(name, toggle);
    }

    /**
     * Possible p0 values:
     *
     * "prologue"
     * "Prologue_Main"
     *
     * Hash: 0xAF12610C644A35C9 | Since: 323 | API-Set: unknown
     */
    export function setMapdatacullboxEnabled(name: string, toggle: boolean): void {
        SetMapdatacullboxEnabled(name, toggle);
    }

    /**
     * Unloads model from memory
     *
     * Hash: 0xE532F5D78798DAAB | Since: 323 | API-Set: unknown
     */
    export function setModelAsNoLongerNeeded(model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        SetModelAsNoLongerNeeded(model);
    }

    /**
     * Control how many new (ambient?) peds will spawn in the game world.
     * Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
     *
     * Hash: 0x8C95333CFC3340F3 | Since: 323 | API-Set: unknown
     */
    export function setPedPopulationBudget(): void {
        SetPedPopulationBudget(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F2013F8BC24EE69 | Since: 323 | API-Set: unknown
     */
    export function setPlayerShortSwitchStyle(): void {
        SetPlayerShortSwitchStyle(0);
    }

    /**
     * All names can be found in playerswitchestablishingshots.meta
     *
     * Hash: 0x0FDE9DBFC0A6BC65 | Since: 323 | API-Set: unknown
     */
    export function setPlayerSwitchEstablishingShot(name: string): void {
        SetPlayerSwitchEstablishingShot(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC208B673CE446B61 | Since: 323 | API-Set: unknown
     */
    export function setPlayerSwitchOutro(cameraCoordX: number, cameraCoordY: number, cameraCoordZ: number, camRotationX: number, camRotationY: number, camRotationZ: number, camFov: number, camFarClip: number, rotationOrder: number): void {
        SetPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77B5F9A36BF96710 | Since: 323 | API-Set: unknown
     */
    export function setReducePedModelBudget(toggle: boolean): void {
        SetReducePedModelBudget(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80C527893080CCF3 | Since: 323 | API-Set: unknown
     */
    export function setReduceVehicleModelBudget(toggle: boolean): void {
        SetReduceVehicleModelBudget(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x40AEFD1A244741F2 | Since: 323 | API-Set: unknown
     */
    export function setRenderHdOnly(toggle: boolean): void {
        SetRenderHdOnly(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0811381EF5062FEC | Since: 323 | API-Set: unknown
     */
    export function setRestoreFocusEntity(p0: number | IEntity): void {
        Citizen.invokeNative('0x0811381EF5062FEC', p0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E9057A74FD73E23 | Since: 323 | API-Set: unknown
     */
    export function setSceneTracksCamPosThisFrame(): void {
        Citizen.invokeNative('0x1E9057A74FD73E23');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF8155A7F03DDFC8E | Since: 323 | API-Set: unknown
     */
    export function setSrlForcePrestream(): void {
        Citizen.invokeNative('0xF8155A7F03DDFC8E', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x20C6C7E4EB082A7F | Since: 323 | API-Set: unknown
     */
    export function setSrlLongJumpMode(): void {
        Citizen.invokeNative('0x20C6C7E4EB082A7F', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF39EE20C537E98C | Since: 323 | API-Set: unknown
     */
    export function setSrlPostCutsceneCamera(): void {
        Citizen.invokeNative('0xEF39EE20C537E98C', undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEB2D9A1D9A8F55A | Since: 323 | API-Set: unknown
     */
    export function setSrlReadaheadTimes(): void {
        Citizen.invokeNative('0xBEB2D9A1D9A8F55A', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA74A541C6884E7B8 | Since: 323 | API-Set: unknown
     */
    export function setSrlTime(): void {
        SetSrlTime(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E0C692677008888 | Since: 323 | API-Set: unknown
     */
    export function setStreaming(toggle: boolean): void {
        SetStreaming(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB9E1EB3BE2AF4E9 | Since: 323 | API-Set: unknown
     */
    export function setVehiclePopulationBudget(): void {
        SetVehiclePopulationBudget(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCE26000E9A6FAD7 | Since: 323 | API-Set: unknown
     */
    export function shutdownCreatorBudget(): void {
        ShutdownCreatorBudget();
    }

    /**
     * // this enum comes directly from R* so don't edit this
     * enum ePlayerSwitchTypes
     * {
     * SWITCH_TYPE_AUTO,
     * SWITCH_TYPE_LONG,
     * SWITCH_TYPE_MEDIUM,
     * SWITCH_TYPE_SHORT
     * };
     *
     * Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
     *
     * ----------------------------------------------------
     *
     * Examples from the decompiled scripts:
     *
     * `STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);`
     * `STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);`
     * `STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);`
     * `STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);`
     *
     * Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
     *
     * Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
     * Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
     *
     * Hash: 0xFAA23F2CBA159D67 | Since: 323 | API-Set: unknown
     */
    export function startPlayerSwitch(_from: number | IPed, to: number | IPed, flags: number, switchType: number): void {
        StartPlayerSwitch(_from, to, flags, switchType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95C0A5BBDC189AA1 | Since: 323 | API-Set: unknown
     */
    export function stopPlayerSwitch(): void {
        StopPlayerSwitch();
    }

    /**
     * Always returns zero.
     *
     * Hash: 0x1F3F018BC3AFA77C | Since: 323 | API-Set: unknown
     */
    export function streamvolCreateFrustum(): number {
        return StreamvolCreateFrustum(0, 0, 0, 0, 0, 0, 0, undefined, undefined);
    }

    /**
     * Always returns zero.
     *
     * Hash: 0x0AD9710CEE2F590F | Since: 323 | API-Set: unknown
     */
    export function streamvolCreateLine(): number {
        return StreamvolCreateLine(0, 0, 0, 0, 0, 0, undefined);
    }

    /**
     * Always returns zero.
     *
     * Hash: 0x219C7B8D53E429FD | Since: 323 | API-Set: unknown
     */
    export function streamvolCreateSphere(pos: Vector3, rad: number): number {
        return StreamvolCreateSphere(pos.x, pos.y, pos.z, rad, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1EE7D8DF4425F053 | Since: 323 | API-Set: unknown
     */
    export function streamvolDelete(unused: any): void {
        StreamvolDelete(unused);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D41E9D2D17C5B2D | Since: 323 | API-Set: unknown
     */
    export function streamvolHasLoaded(unused: any): boolean {
        return StreamvolHasLoaded(unused);
    }

    /**
     * No comment provided
     *
     * Hash: 0x07C313F94746702C | Since: 323 | API-Set: unknown
     */
    export function streamvolIsValid(unused: any): boolean {
        return StreamvolIsValid(unused);
    }

    /**
     * No comment provided
     *
     * Hash: 0x472397322E92A856 | Since: 323 | API-Set: unknown
     */
    export function suppressHdMapThisFrame(): void {
        Citizen.invokeNative('0x472397322E92A856');
    }

    /**
     * doesn't act normally when used on mount chilliad
     * Flags is a bitflag:
     * 2^n - Enabled Functionality:
     * 0 - Skip camera rotate up
     * 3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
     * 6 - Invert Switch Direction (false = out, true = in)
     * 8 - Hang above ped
     *
     * switchType: 0 - 3
     * 0: 1 step towards ped
     * 1: 3 steps out from ped
     * 2: 1 step out from ped
     * 3: 1 step towards ped
     *
     * Hash: 0xAAB3200ED59016BC | Since: 323 | API-Set: unknown
     */
    export function switchToMultiFirstpart(ped: number | IPed, flags: number, switchType: number): void {
        SwitchToMultiFirstpart(ped, flags, switchType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD8295AF639FD9CB8 | Since: 323 | API-Set: unknown
     */
    export function switchToMultiSecondpart(ped: number | IPed): void {
        SwitchToMultiSecondpart(ped);
    }

}


export namespace track {
    /**
     * Returns all track junctions on the client
     * The data returned adheres to the following structure:
     *
     * ```
     * [1, 2, 4, 6, 69, 420]
     * ```
     *
     * Hash: 0x81A08523 | Since: unknown | API-Set: client
     */
    export function getAllJunctions(): number {
        return GetAllTrackJunctions();
    }

    /**
     * Get all track nodes and their track ids within the radius of the specified coordinates.
     *
     * Hash: 0x59FC24A7 | Since: unknown | API-Set: client
     */
    export function getClosestNodes(position: Vector3, radius: number): number {
        return GetClosestTrackNodes(position, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF482A5E | Since: unknown | API-Set: client
     */
    export function getBrakingDistance(track: number): number {
        return GetTrackBrakingDistance(track);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34EE2BF3 | Since: unknown | API-Set: client
     */
    export function getMaxSpeed(track: number): number {
        return GetTrackMaxSpeed(track);
    }

    /**
     * Gets the coordinates of a specific track node.
     *
     * Hash: 0x1628548E | Since: unknown | API-Set: client
     */
    export function getNodeCoords(trackIndex: number, trackNode: number): [boolean, Vector3] {
        return GetTrackNodeCoords(trackIndex, trackNode);
    }

    /**
     * Gets the specified tracks node count.
     *
     * Hash: 0x896A0C11 | Since: unknown | API-Set: client
     */
    export function getNodeCount(trackIndex: number): number {
        return GetTrackNodeCount(trackIndex);
    }

    /**
     * Getter for [SET_TRACK_ENABLED](#\_0x4B41E84C)
     *
     * Hash: 0x31E695CB | Since: unknown | API-Set: client
     */
    export function isEnabled(track: number): boolean {
        return IsTrackEnabled(track);
    }

    /**
     * Getter for [SWITCH_TRAIN_TRACK](#\_0xFD813BB7DB977F20). Determines if ambient trains are able to spawn on this track.
     *
     * Hash: 0xE0C53765 | Since: unknown | API-Set: client
     */
    export function isSwitchedOff(track: number): boolean {
        return IsTrackSwitchedOff(track);
    }

    /**
     * Registers a track junction that when enabled will cause a train on the defined trackIndex, node and direction to change its current track index and begin traveling on the new node
     *
     * Hash: 0x35F743B5 | Since: unknown | API-Set: client
     */
    export function registerJunction(trackIndex: number, trackNode: number, newIndex: number, newNode: number, direction: boolean): number {
        return RegisterTrackJunction(trackIndex, trackNode, newIndex, newNode, direction);
    }

    /**
     * Removes the specified track junction.
     *
     * Hash: 0x4F3D2B2A | Since: unknown | API-Set: client
     */
    export function removeJunction(junctionIndex: number): boolean {
        return RemoveTrackJunction(junctionIndex);
    }

    /**
     * Sets the braking distance of the track. Used by trains to determine the point to slow down when entering a station.
     *
     * Hash: 0x77EB78D0 | Since: unknown | API-Set: client
     */
    export function setBrakingDistance(track: number, brakingDistance: number): void {
        SetTrackBrakingDistance(track, brakingDistance);
    }

    /**
     * Toggles the track being active. If disabled mission trains will not be able to spawn on this track and will look for the next closest track to spawn
     *
     * Hash: 0x4B41E84C | Since: unknown | API-Set: client
     */
    export function setEnabled(track: number, enabled: boolean): void {
        SetTrackEnabled(track, enabled);
    }

    /**
     * Sets the state of a track junction.
     *
     * Hash: 0x537B449D | Since: unknown | API-Set: client
     */
    export function setJunctionActive(junctionIndex: number, state: boolean): boolean {
        return SetTrackJunctionActive(junctionIndex, state);
    }

    /**
     * Sets the max speed for the train tracks. Used by ambient trains and for station calculations
     *
     * Hash: 0x37BFC732 | Since: unknown | API-Set: client
     */
    export function setMaxSpeed(track: number, newSpeed: number): void {
        SetTrackMaxSpeed(track, newSpeed);
    }

}


export namespace vehicle {
    /**
     * Break off vehicle wheel by index. The `leaveDebrisTrail` flag requires `putOnFire` to be true.
     *
     * Hash: 0xA274CADB | Since: unknown | API-Set: client
     */
    export function breakOffWheel(vehicle: number | IVehicle, wheelIndex: number, leaveDebrisTrail: boolean, deleteWheel: boolean, unknownFlag: boolean, putOnFire: boolean): void {
        BreakOffVehicleWheel(vehicle, wheelIndex, leaveDebrisTrail, deleteWheel, unknownFlag, putOnFire);
    }

    /**
     * Removes vehicle xenon lights custom RGB color.
     *
     * Hash: 0x2867ED8C | Since: unknown | API-Set: client
     */
    export function clearXenonLightsCustomColor(vehicle: number | IVehicle): void {
        ClearVehicleXenonLightsCustomColor(vehicle);
    }

    /**
     * Disables the game's afk camera that starts panning around after 30 seconds of inactivity(While riding in a car as a passenger)
     *
     * Hash: 0x5C140555 | Since: unknown | API-Set: client
     */
    export function disablePassengerIdleCamera(state: boolean): void {
        DisableVehiclePassengerIdleCamera(state);
    }

    /**
     * Checks whether the vehicle consumes fuel. The check is done based on petrol tank volume and vehicle type. Bicycles and vehicles with petrol tank volume equal to zero (only bicycles by default) do not use fuel. All other vehicles do.
     *
     * You can customize petrol tank volume using [`SET_HANDLING_FLOAT`](#\_0x90DD01C)/[`SET_VEHICLE_HANDLING_FLOAT`](#\_0x488C86D2) natives with `fieldName` equal to `fPetrolTankVolume`.
     *
     * Hash: 0xEF30A696 | Since: unknown | API-Set: client
     */
    export function doesUseFuel(vehicle: number | IVehicle): boolean {
        return DoesVehicleUseFuel(vehicle);
    }

    /**
     * Returns all registered vehicle model names, including non-dlc vehicles and custom vehicles in no particular order.
     *
     * <strong>Example output</strong>
     *
     * ```
     * ["dubsta", "dubsta2", "dubsta3", "myverycoolcar", "sultan", "sultanrs", ...]
     * ```
     *
     * This native will not return vehicles that are unregistered (i.e from a resource being stopped) during runtime.
     *
     * Hash: 0xD7531645 | Since: unknown | API-Set: client
     */
    export function getAllModels(): number {
        return GetAllVehicleModels();
    }

    /**
     * A getter for [SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME](#\_0x90B6DA738A9A25DA).
     *
     * Hash: 0x667EC929 | Since: unknown | API-Set: client
     */
    export function getAmbientRangeMultiplier(): number {
        return GetAmbientVehicleRangeMultiplier();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE015E854 | Since: unknown | API-Set: client
     */
    export function getTrainCurrentTrackNode(train: number | IVehicle): number {
        return GetTrainCurrentTrackNode(train);
    }

    /**
     * Gets the door count for the specified train.
     *
     * Hash: 0x99974721 | Since: unknown | API-Set: client
     */
    export function getTrainDoorCount(train: number | IVehicle): number {
        return GetTrainDoorCount(train);
    }

    /**
     * Gets the ratio that a door is open for on a train.
     *
     * Hash: 0x40B16551 | Since: unknown | API-Set: client
     */
    export function getTrainDoorOpenRatio(train: number | IVehicle, doorIndex: number): number {
        return GetTrainDoorOpenRatio(train, doorIndex);
    }

    /**
     * Gets the speed the train is currently going.
     *
     * Hash: 0x428668B7 | Since: unknown | API-Set: client
     */
    export function getTrainSpeed(train: number | IVehicle): number {
        return GetTrainSpeed(train);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC62AAC98 | Since: unknown | API-Set: client
     */
    export function getAlarmTimeLeft(vehicle: number | IVehicle): number {
        return GetVehicleAlarmTimeLeft(vehicle);
    }

    /**
     * A getter for [SET_VEHICLE_CHEAT_POWER_INCREASE](#\_0xB59E4BD37AE292DB).
     *
     * Hash: 0xC3C93F28 | Since: unknown | API-Set: client
     */
    export function getCheatPowerIncrease(vehicle: number | IVehicle): number {
        return GetVehicleCheatPowerIncrease(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DAD4583 | Since: unknown | API-Set: client
     */
    export function getClutch(vehicle: number | IVehicle): number {
        return GetVehicleClutch(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB4F4E566 | Since: unknown | API-Set: client
     */
    export function getCurrentGear(vehicle: number | IVehicle): number {
        return GetVehicleCurrentGear(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7B12B54 | Since: unknown | API-Set: client
     */
    export function getCurrentRpm(vehicle: number | IVehicle): number {
        return GetVehicleCurrentRpm(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFFABA2A | Since: unknown | API-Set: client
     */
    export function getDashboardBoost(): number {
        return GetVehicleDashboardBoost();
    }

    /**
     * Retrieves the current gear displayed on the dashboard of the vehicle the player is in, returned as a float. This value represents the gear shown in the instrument cluster, such as "R" (0.0) or positive values (e.g., 1.0, 2.0, etc.) for drive gears.
     *
     * Hash: 0x435C86F4 | Since: unknown | API-Set: client
     */
    export function getDashboardCurrentGear(): number {
        return GetVehicleDashboardCurrentGear();
    }

    /**
     * No comment provided
     *
     * Hash: 0x19B0B2CE | Since: unknown | API-Set: client
     */
    export function getDashboardFuel(): number {
        return GetVehicleDashboardFuel();
    }

    /**
     * Gets the state of the player vehicle's dashboard lights as a bit set
     * indicator_left = 1
     * indicator_right = 2
     * handbrakeLight = 4
     * engineLight = 8
     * ABSLight = 16
     * gasLight = 32
     * oilLight = 64
     * headlights = 128
     * highBeam = 256
     * batteryLight = 512
     *
     * Hash: 0x500FFE9D | Since: unknown | API-Set: client
     */
    export function getDashboardLights(): number {
        return GetVehicleDashboardLights();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3856D767 | Since: unknown | API-Set: client
     */
    export function getDashboardOilPressure(): number {
        return GetVehicleDashboardOilPressure();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F5996AA | Since: unknown | API-Set: client
     */
    export function getDashboardOilTemp(): number {
        return GetVehicleDashboardOilTemp();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9716A11 | Since: unknown | API-Set: client
     */
    export function getDashboardRpm(): number {
        return GetVehicleDashboardRpm();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AAD420E | Since: unknown | API-Set: client
     */
    export function getDashboardSpeed(vehicle: number | IVehicle): number {
        return GetVehicleDashboardSpeed(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B6ADAFA | Since: unknown | API-Set: client
     */
    export function getDashboardTemp(): number {
        return GetVehicleDashboardTemp();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFABE67A9 | Since: unknown | API-Set: client
     */
    export function getDashboardVacuum(): number {
        return GetVehicleDashboardVacuum();
    }

    /**
     * A getter for [SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\_0x245A6883D966D537).
     *
     * Hash: 0xEF7C6538 | Since: unknown | API-Set: client
     */
    export function getDensityMultiplier(): number {
        return GetVehicleDensityMultiplier();
    }

    /**
     * Gets a vehicle's multiplier used with a wheel's GET_VEHICLE_WHEEL_STEERING_ANGLE to determine the angle the wheel is rendered.
     *
     * Hash: 0x21C1DA8E | Since: unknown | API-Set: client
     */
    export function getDrawnWheelAngleMult(vehicle: number | IVehicle): number {
        return GetVehicleDrawnWheelAngleMult(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF4F495CB | Since: unknown | API-Set: client
     */
    export function getEngineTemperature(vehicle: number | IVehicle): number {
        return GetVehicleEngineTemperature(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F739BB8 | Since: unknown | API-Set: client
     */
    export function getFuelLevel(vehicle: number | IVehicle): number {
        return GetVehicleFuelLevel(vehicle);
    }

    /**
     * Gets vehicles gear ratio on choosen gear.
     *
     * Hash: 0x82E794B7 | Since: unknown | API-Set: client
     */
    export function getGearRatio(vehicle: number | IVehicle, gear: number): number {
        return GetVehicleGearRatio(vehicle, gear);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB48A1292 | Since: unknown | API-Set: client
     */
    export function getGravityAmount(vehicle: number | IVehicle): number {
        return GetVehicleGravityAmount(vehicle);
    }

    /**
     * Returns the effective handling data of a vehicle as a floating-point value.
     * Example: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`
     *
     * Hash: 0x642FC12F | Since: unknown | API-Set: client
     */
    export function getHandlingFloat(vehicle: number | IVehicle, class_: string, fieldName: string): number {
        return GetVehicleHandlingFloat(vehicle, class_, fieldName);
    }

    /**
     * Returns the effective handling data of a vehicle as an integer value.
     * Example: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`
     *
     * Hash: 0x27396C75 | Since: unknown | API-Set: client
     */
    export function getHandlingInt(vehicle: number | IVehicle, class_: string, fieldName: string): number {
        return GetVehicleHandlingInt(vehicle, class_, fieldName);
    }

    /**
     * Returns the effective handling data of a vehicle as a vector value.
     * Example: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`
     *
     * Hash: 0xFB341304 | Since: unknown | API-Set: client
     */
    export function getHandlingVector(vehicle: number | IVehicle, class_: string, fieldName: string): Vector3 {
        return new Vector3(GetVehicleHandlingVector(vehicle, class_, fieldName));
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1D1D689 | Since: unknown | API-Set: client
     */
    export function getHighGear(vehicle: number | IVehicle): number {
        return GetVehicleHighGear(vehicle);
    }

    /**
     * Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both
     *
     * Hash: 0x83070354 | Since: unknown | API-Set: client
     */
    export function getIndicatorLights(vehicle: number | IVehicle): number {
        return GetVehicleIndicatorLights(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E6E219C | Since: unknown | API-Set: client
     */
    export function getLightMultiplier(vehicle: number | IVehicle): number {
        return GetVehicleLightMultiplier(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDDB298AE | Since: unknown | API-Set: client
     */
    export function getNextGear(vehicle: number | IVehicle): number {
        return GetVehicleNextGear(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDF4B0FC | Since: unknown | API-Set: client
     */
    export function getNumberOfWheels(vehicle: number | IVehicle): number {
        return GetVehicleNumberOfWheels(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC7F8EF4 | Since: unknown | API-Set: client
     */
    export function getOilLevel(vehicle: number | IVehicle): number {
        return GetVehicleOilLevel(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x954465DE | Since: unknown | API-Set: client
     */
    export function getSteeringScale(vehicle: number | IVehicle): number {
        return GetVehicleSteeringScale(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1D07351 | Since: unknown | API-Set: client
     */
    export function getThrottleOffset(vehicle: number | IVehicle): number {
        return GetVehicleThrottleOffset(vehicle);
    }

    /**
     * A getter for [MODIFY_VEHICLE_TOP_SPEED](#\_0x93A3996368C94158). Returns -1.0 if a modifier is not set.
     *
     * Hash: 0x998B7FEE | Since: unknown | API-Set: client
     */
    export function getTopSpeedModifier(vehicle: number | IVehicle): number {
        return GetVehicleTopSpeedModifier(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE02B51D7 | Since: unknown | API-Set: client
     */
    export function getTurboPressure(vehicle: number | IVehicle): number {
        return GetVehicleTurboPressure(vehicle);
    }

    /**
     * List of known states:
     *
     * ```
     * 1: Not wheeling.
     * 65: Vehicle is ready to do wheelie (burnouting).
     * 129: Vehicle is doing wheelie.
     * ```
     *
     * Hash: 0x137260D1 | Since: unknown | API-Set: client
     */
    export function getWheelieState(vehicle: number | IVehicle): number {
        return GetVehicleWheelieState(vehicle);
    }

    /**
     * Gets brake pressure of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * Normal values around 1.0f when braking.
     *
     * Hash: 0x70FE2EFF | Since: unknown | API-Set: client
     */
    export function getWheelBrakePressure(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelBrakePressure(vehicle, wheelIndex);
    }

    /**
     * Gets the flags of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xC70FA0C7 | Since: unknown | API-Set: client
     */
    export function getWheelFlags(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelFlags(vehicle, wheelIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54A677F5 | Since: unknown | API-Set: client
     */
    export function getWheelHealth(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelHealth(vehicle, wheelIndex);
    }

    /**
     * Gets whether the wheel is powered.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * This is a shortcut to a flag in GET_VEHICLE_WHEEL_FLAGS.
     *
     * Hash: 0x3CCF1B49 | Since: unknown | API-Set: client
     */
    export function getWheelIsPowered(vehicle: number | IVehicle, wheelIndex: number): boolean {
        return GetVehicleWheelIsPowered(vehicle, wheelIndex);
    }

    /**
     * Gets power being sent to a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xD203287 | Since: unknown | API-Set: client
     */
    export function getWheelPower(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelPower(vehicle, wheelIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEE21AB2 | Since: unknown | API-Set: client
     */
    export function getWheelRimColliderSize(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelRimColliderSize(vehicle, wheelIndex);
    }

    /**
     * Gets the rotation speed of a wheel.
     * This is used internally to calcuate GET_VEHICLE_WHEEL_SPEED.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xEA1859E5 | Since: unknown | API-Set: client
     */
    export function getWheelRotationSpeed(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelRotationSpeed(vehicle, wheelIndex);
    }

    /**
     * Returns vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels (returns 0 in case of default wheels).
     *
     * Hash: 0x4046B66 | Since: unknown | API-Set: client
     */
    export function getWheelSize(vehicle: number | IVehicle): number {
        return GetVehicleWheelSize(vehicle);
    }

    /**
     * Gets speed of a wheel at the tyre.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x149C9DA0 | Since: unknown | API-Set: client
     */
    export function getWheelSpeed(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelSpeed(vehicle, wheelIndex);
    }

    /**
     * Gets steering angle of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xA0867448 | Since: unknown | API-Set: client
     */
    export function getWheelSteeringAngle(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelSteeringAngle(vehicle, wheelIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7F04022 | Since: unknown | API-Set: client
     */
    export function getWheelSurfaceMaterial(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelSurfaceMaterial(vehicle, wheelIndex);
    }

    /**
     * Gets the current suspension compression of a wheel.
     * Returns a positive value. 0 means the suspension is fully extended, the wheel is off the ground.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x2B48175B | Since: unknown | API-Set: client
     */
    export function getWheelSuspensionCompression(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelSuspensionCompression(vehicle, wheelIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0BA9FE6 | Since: unknown | API-Set: client
     */
    export function getWheelTireColliderSize(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelTireColliderSize(vehicle, wheelIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF65929C | Since: unknown | API-Set: client
     */
    export function getWheelTireColliderWidth(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelTireColliderWidth(vehicle, wheelIndex);
    }

    /**
     * Gets the traction vector length of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x3BCFEE14 | Since: unknown | API-Set: client
     */
    export function getWheelTractionVectorLength(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelTractionVectorLength(vehicle, wheelIndex);
    }

    /**
     * Returns vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels (returns 0 in case of default wheels).
     *
     * Hash: 0x9C7B59F9 | Since: unknown | API-Set: client
     */
    export function getWheelWidth(vehicle: number | IVehicle): number {
        return GetVehicleWheelWidth(vehicle);
    }

    /**
     * Returns the offset of the specified wheel relative to the wheel's axle center.
     *
     * Hash: 0xCC90CBCA | Since: unknown | API-Set: client
     */
    export function getWheelXOffset(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelXOffset(vehicle, wheelIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2EA4AFFE | Since: unknown | API-Set: client
     */
    export function getWheelYRotation(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetVehicleWheelYRotation(vehicle, wheelIndex);
    }

    /**
     * Returns vehicle xenon lights custom RGB color values. Do note this native doesn't return non-RGB colors that was set with [\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\_0xE41033B25D003A07).
     *
     * Hash: 0xC715F730 | Since: unknown | API-Set: client
     */
    export function getXenonLightsCustomColor(vehicle: number | IVehicle): [boolean, number, number, number] {
        return GetVehicleXenonLightsCustomColor(vehicle);
    }

    /**
     * A getter for [SET_VEHICLE_XMAS_SNOW_FACTOR](#\_0x80CC4C9E).
     *
     * Hash: 0x16605B30 | Since: unknown | API-Set: client
     */
    export function getXmasSnowFactor(): number {
        return GetVehicleXmasSnowFactor();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC921211 | Since: unknown | API-Set: client
     */
    export function isAlarmSet(vehicle: number | IVehicle): boolean {
        return IsVehicleAlarmSet(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA411F72C | Since: unknown | API-Set: client
     */
    export function isInteriorLightOn(vehicle: number | IVehicle): boolean {
        return IsVehicleInteriorLightOn(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9933BF4 | Since: unknown | API-Set: client
     */
    export function isNeedsToBeHotwired(vehicle: number | IVehicle): boolean {
        return IsVehicleNeedsToBeHotwired(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF849ED67 | Since: unknown | API-Set: client
     */
    export function isPreviouslyOwnedByPlayer(vehicle: number | IVehicle): boolean {
        return IsVehiclePreviouslyOwnedByPlayer(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7DAF7C | Since: unknown | API-Set: client
     */
    export function isWanted(vehicle: number | IVehicle): boolean {
        return IsVehicleWanted(vehicle);
    }

    /**
     * Setting the state to true and a value between 0 and 2 will cause pedestrian vehicles to react accordingly to sirens.
     *
     * ```cpp
     * enum Reactions {
     * Left = 0,
     * Right = 1,
     * Stop = 2
     * }
     * ```
     *
     * Hash: 0x3F3EB3F7 | Since: unknown | API-Set: client
     */
    export function overrideReactionToSiren(state: boolean, reaction: number): void {
        OverrideReactionToVehicleSiren(state, reaction);
    }

    /**
     * Overrides whether or not peds can stand on top of the specified vehicle.
     *
     * Note this flag is not replicated automatically, you will have to manually do so.
     *
     * Hash: 0x7FA03E76 | Since: unknown | API-Set: client
     */
    export function overridePedsCanStandOnTopFlag(vehicle: number | IVehicle, can: boolean): void {
        OverrideVehiclePedsCanStandOnTopFlag(vehicle, can);
    }

    /**
     * Resets whether or not peds can stand on top of the specified vehicle.
     *
     * Note this flag is not replicated automatically, you will have to manually do so.
     *
     * Hash: 0xDF62CFE2 | Since: unknown | API-Set: client
     */
    export function resetPedsCanStandOnTopFlag(vehicle: number | IVehicle): void {
        ResetVehiclePedsCanStandOnTopFlag(vehicle);
    }

    /**
     * Sets the default number plate text pattern for vehicles seen on the local client with the specified plate index as their *default* index (`plateProbabilities` from carvariations).
     *
     * For consistency, this should be used with the same value on all clients, since vehicles *without* custom text will use a seeded random number generator with this pattern to determine the default plate text.
     *
     * The default value is `11AAA111`, and using this or a NULL string will revert to the default game RNG.
     *
     * ### Pattern string format
     *
     * *   `1` will lead to a random number from 0-9.
     * *   `A` will lead to a random letter from A-Z.
     * *   `.` will lead to a random letter *or* number, with 50% probability of being either.
     * *   `^1` will lead to a literal `1` being emitted.
     * *   `^A` will lead to a literal `A` being emitted.
     * *   Any other character will lead to said character being emitted.
     * *   A string shorter than 8 characters will be padded on the right.
     *
     * Hash: 0x79780FD2 | Since: unknown | API-Set: client
     */
    export function setDefaultNumberPlateTextPattern(plateIndex: number, pattern: string): void {
        SetDefaultVehicleNumberPlateTextPattern(plateIndex, pattern);
    }

    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     * Example: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0xFE8064E3 | Since: unknown | API-Set: client
     */
    export function setHandlingField(vehicle: string, class_: string, fieldName: string, value: any): void {
        SetHandlingField(vehicle, class_, fieldName, value);
    }

    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     * Example: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0x90DD01C | Since: unknown | API-Set: client
     */
    export function setHandlingFloat(vehicle: string, class_: string, fieldName: string, value: number): void {
        SetHandlingFloat(vehicle, class_, fieldName, value);
    }

    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     *
     * Hash: 0x8AB3F46C | Since: unknown | API-Set: client
     */
    export function setHandlingInt(vehicle: string, class_: string, fieldName: string, value: number): void {
        SetHandlingInt(vehicle, class_, fieldName, value);
    }

    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     * Example: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`
     *
     * Hash: 0x7F9D543 | Since: unknown | API-Set: client
     */
    export function setHandlingVector(vehicle: string, class_: string, fieldName: string, value: Vector3): void {
        SetHandlingVector(vehicle, class_, fieldName, value);
    }

    /**
     * This completely disables pedestrian vehicles from reacting to sirens. They will not try to do any maneuver to evade.
     *
     * Hash: 0xB90BBC6E | Since: unknown | API-Set: client
     */
    export function setReactionToWithSirenDisabled(state: boolean): void {
        SetReactionToVehicleWithSirenDisabled(state);
    }

    /**
     * Enables or disables whether train doors should be forced open whilst a player is inside the train. This is enabled by default in multiplayer.
     *
     * Hash: 0xD4D1BA63 | Since: unknown | API-Set: client
     */
    export function setTrainsForceDoorsOpen(forceOpen: boolean): void {
        SetTrainsForceDoorsOpen(forceOpen);
    }

    /**
     * Sets the ratio that a door is open for on a train.
     *
     * Hash: 0x2468DBE8 | Since: unknown | API-Set: client
     */
    export function setTrainDoorOpenRatio(train: number | IVehicle, doorIndex: number, ratio: number): void {
        SetTrainDoorOpenRatio(train, doorIndex, ratio);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61CB74A0 | Since: unknown | API-Set: client
     */
    export function setTrainState(train: number | IVehicle, state: number): void {
        SetTrainState(train, state);
    }

    /**
     * Toggles a train's ability to stop at stations
     *
     * Hash: 0xECB8B577 | Since: unknown | API-Set: client
     */
    export function setTrainStopAtStations(train: number | IVehicle, state: boolean): void {
        SetTrainStopAtStations(train, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC108EE6F | Since: unknown | API-Set: client
     */
    export function setAlarmTimeLeft(vehicle: number | IVehicle, time: number): void {
        SetVehicleAlarmTimeLeft(vehicle, time);
    }

    /**
     * Disables the vehicle from being repaired when a vehicle extra is enabled.
     *
     * Hash: 0x5F3A3574 | Since: unknown | API-Set: client
     */
    export function setAutoRepairDisabled(vehicle: number | IVehicle, value: boolean): void {
        SetVehicleAutoRepairDisabled(vehicle, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F70ACED | Since: unknown | API-Set: client
     */
    export function setClutch(vehicle: number | IVehicle, clutch: number): void {
        SetVehicleClutch(vehicle, clutch);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A01A8FC | Since: unknown | API-Set: client
     */
    export function setCurrentRpm(vehicle: number | IVehicle, rpm: number): void {
        SetVehicleCurrentRpm(vehicle, rpm);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6C93C4A9 | Since: unknown | API-Set: client
     */
    export function setEngineTemperature(vehicle: number | IVehicle, temperature: number): void {
        SetVehicleEngineTemperature(vehicle, temperature);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA970511 | Since: unknown | API-Set: client
     */
    export function setFuelLevel(vehicle: number | IVehicle, level: number): void {
        SetVehicleFuelLevel(vehicle, level);
    }

    /**
     * Sets the vehicles gear ratio on choosen gear, reverse gear needs to be a negative float and forward moving gear needs to be a positive float. Refer to the examples if confused.
     *
     * Hash: 0x496EF2F2 | Since: unknown | API-Set: client
     */
    export function setGearRatio(vehicle: number | IVehicle, gear: number, ratio: number): void {
        SetVehicleGearRatio(vehicle, gear, ratio);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A963E58 | Since: unknown | API-Set: client
     */
    export function setGravityAmount(vehicle: number | IVehicle, gravity: number): void {
        SetVehicleGravityAmount(vehicle, gravity);
    }

    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation.
     * Example: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0x2BA40795 | Since: unknown | API-Set: client
     */
    export function setVehicleHandlingField(vehicle: number | IVehicle, class_: string, fieldName: string, value: any): void {
        SetVehicleHandlingField(vehicle, class_, fieldName, value);
    }

    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation.
     * Example: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0x488C86D2 | Since: unknown | API-Set: client
     */
    export function setVehicleHandlingFloat(vehicle: number | IVehicle, class_: string, fieldName: string, value: number): void {
        SetVehicleHandlingFloat(vehicle, class_, fieldName, value);
    }

    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation.
     *
     * Hash: 0xC37F4CF9 | Since: unknown | API-Set: client
     */
    export function setVehicleHandlingInt(vehicle: number | IVehicle, class_: string, fieldName: string, value: number): void {
        SetVehicleHandlingInt(vehicle, class_, fieldName, value);
    }

    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation.
     *
     * Hash: 0x12497890 | Since: unknown | API-Set: client
     */
    export function setVehicleHandlingVector(vehicle: number | IVehicle, class_: string, fieldName: string, value: Vector3): void {
        SetVehicleHandlingVector(vehicle, class_, fieldName, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x20B1B3E6 | Since: unknown | API-Set: client
     */
    export function setHighGear(vehicle: number | IVehicle, gear: number): void {
        SetVehicleHighGear(vehicle, gear);
    }

    /**
     * Sets the maximum distance in which [\_SET_VEHICLE_NITRO_ENABLED](#\_0xC8E9B6B71B8E660D) PTFX are rendered. Distance is measured from the camera position.
     *
     * Hash: 0xA40CB822 | Since: unknown | API-Set: client
     */
    export function setNitroPtfxRange(range: number): void {
        SetVehicleNitroPtfxRange(range);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90D1CAD1 | Since: unknown | API-Set: client
     */
    export function setOilLevel(vehicle: number | IVehicle, level: number): void {
        SetVehicleOilLevel(vehicle, level);
    }

    /**
     * Set the vehicle's pitch bias. Only works on planes.
     *
     * Hash: 0x2A6CC9F2 | Since: unknown | API-Set: client
     */
    export function setPitchBias(vehicle: number | IVehicle, value: number): void {
        SetVehiclePitchBias(vehicle, value);
    }

    /**
     * Set the vehicle's roll bias. Only works on planes.
     *
     * Hash: 0x264B45DE | Since: unknown | API-Set: client
     */
    export function setRollBias(vehicle: number | IVehicle, value: number): void {
        SetVehicleRollBias(vehicle, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFCCC2EA | Since: unknown | API-Set: client
     */
    export function setSteeringAngle(vehicle: number | IVehicle, angle: number): void {
        SetVehicleSteeringAngle(vehicle, angle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB46596F | Since: unknown | API-Set: client
     */
    export function setSteeringScale(vehicle: number | IVehicle, scale: number): void {
        SetVehicleSteeringScale(vehicle, scale);
    }

    /**
     * Sets the height of the vehicle's suspension.
     * This changes the same value set by Suspension in the mod shop.
     * Negatives values raise the car. Positive values lower the car.
     *
     * This is change is visual only. The collision of the vehicle will not move.
     *
     * Hash: 0xB3439A01 | Since: unknown | API-Set: client
     */
    export function setSuspensionHeight(vehicle: number | IVehicle, newHeight: number): void {
        SetVehicleSuspensionHeight(vehicle, newHeight);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6485615E | Since: unknown | API-Set: client
     */
    export function setTurboPressure(vehicle: number | IVehicle, pressure: number): void {
        SetVehicleTurboPressure(vehicle, pressure);
    }

    /**
     * Example script: https://pastebin.com/J6XGbkCW
     *
     * List of known states:
     *
     * ```
     * 1: Not wheeling.
     * 65: Vehicle is ready to do wheelie (burnouting).
     * 129: Vehicle is doing wheelie.
     * ```
     *
     * Hash: 0xEAB8DB65 | Since: unknown | API-Set: client
     */
    export function setWheelieState(vehicle: number | IVehicle, state: number): void {
        SetVehicleWheelieState(vehicle, state);
    }

    /**
     * Sets brake pressure of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * Normal values around 1.0f
     *
     * Hash: 0xE80F4E31 | Since: unknown | API-Set: client
     */
    export function setWheelBrakePressure(vehicle: number | IVehicle, wheelIndex: number, pressure: number): void {
        SetVehicleWheelBrakePressure(vehicle, wheelIndex, pressure);
    }

    /**
     * Sets the flags of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xD2B9E90D | Since: unknown | API-Set: client
     */
    export function setWheelFlags(vehicle: number | IVehicle, wheelIndex: number, flags: number): void {
        SetVehicleWheelFlags(vehicle, wheelIndex, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB22ECEFD | Since: unknown | API-Set: client
     */
    export function setWheelHealth(vehicle: number | IVehicle, wheelIndex: number, health: number): void {
        SetVehicleWheelHealth(vehicle, wheelIndex, health);
    }

    /**
     * Sets whether the wheel is powered.
     * On all wheel drive cars this works to change which wheels receive power, but if a car's fDriveBiasFront doesn't send power to that wheel, it won't get power anyway. This can be fixed by changing the fDriveBiasFront with SET_VEHICLE_HANDLING_FLOAT.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * This is a shortcut to a flag in SET_VEHICLE_WHEEL_FLAGS.
     *
     * Hash: 0xBD5291A0 | Since: unknown | API-Set: client
     */
    export function setWheelIsPowered(vehicle: number | IVehicle, wheelIndex: number, powered: boolean): void {
        SetVehicleWheelIsPowered(vehicle, wheelIndex, powered);
    }

    /**
     * Sets power being sent to a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xC6146043 | Since: unknown | API-Set: client
     */
    export function setWheelPower(vehicle: number | IVehicle, wheelIndex: number, power: number): void {
        SetVehicleWheelPower(vehicle, wheelIndex, power);
    }

    /**
     * Not sure what this changes, probably determines physical rim size in case the tire is blown.
     *
     * Hash: 0xF380E184 | Since: unknown | API-Set: client
     */
    export function setWheelRimColliderSize(vehicle: number | IVehicle, wheelIndex: number, value: number): void {
        SetVehicleWheelRimColliderSize(vehicle, wheelIndex, value);
    }

    /**
     * Sets the rotation speed of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x35ED100D | Since: unknown | API-Set: client
     */
    export function setWheelRotationSpeed(vehicle: number | IVehicle, wheelIndex: number, speed: number): void {
        SetVehicleWheelRotationSpeed(vehicle, wheelIndex, speed);
    }

    /**
     * Sets vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels.
     * Returns whether change was successful (can be false if trying to set size for non-default wheels).
     *
     * Hash: 0x53AB5C35 | Since: unknown | API-Set: client
     */
    export function setWheelSize(vehicle: number | IVehicle, size: number): boolean {
        return SetVehicleWheelSize(vehicle, size);
    }

    /**
     * Use along with SetVehicleWheelSize to resize the wheels (this native sets the collider size affecting physics while SetVehicleWheelSize will change visual size).
     *
     * Hash: 0xB962D05C | Since: unknown | API-Set: client
     */
    export function setWheelTireColliderSize(vehicle: number | IVehicle, wheelIndex: number, value: number): void {
        SetVehicleWheelTireColliderSize(vehicle, wheelIndex, value);
    }

    /**
     * Use along with SetVehicleWheelWidth to resize the wheels (this native sets the collider width affecting physics while SetVehicleWheelWidth will change visual width).
     *
     * Hash: 0x47BD0270 | Since: unknown | API-Set: client
     */
    export function setWheelTireColliderWidth(vehicle: number | IVehicle, wheelIndex: number, value: number): void {
        SetVehicleWheelTireColliderWidth(vehicle, wheelIndex, value);
    }

    /**
     * Sets the traction vector length of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x85C85A3A | Since: unknown | API-Set: client
     */
    export function setWheelTractionVectorLength(vehicle: number | IVehicle, wheelIndex: number, length: number): void {
        SetVehicleWheelTractionVectorLength(vehicle, wheelIndex, length);
    }

    /**
     * Sets vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels.
     * Returns whether change was successful (can be false if trying to set width for non-default wheels).
     *
     * Hash: 0x64C3F1C0 | Since: unknown | API-Set: client
     */
    export function setWheelWidth(vehicle: number | IVehicle, width: number): boolean {
        return SetVehicleWheelWidth(vehicle, width);
    }

    /**
     * Adjusts the offset of the specified wheel relative to the wheel's axle center.
     * Needs to be called every frame in order to function properly, as GTA will reset the offset otherwise.
     * This function can be especially useful to set the track width of a vehicle, for example:
     *
     * ```
     * function SetVehicleFrontTrackWidth(vehicle, width)
     * SetVehicleWheelXOffset(vehicle, 0, -width/2)
     * SetVehicleWheelXOffset(vehicle, 1, width/2)
     * end
     * ```
     *
     * Hash: 0xBD6357D | Since: unknown | API-Set: client
     */
    export function setWheelXOffset(vehicle: number | IVehicle, wheelIndex: number, offset: number): void {
        SetVehicleWheelXOffset(vehicle, wheelIndex, offset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6C2171F | Since: unknown | API-Set: client
     */
    export function setWheelYRotation(vehicle: number | IVehicle, wheelIndex: number, value: number): void {
        SetVehicleWheelYRotation(vehicle, wheelIndex, value);
    }

    /**
     * Sets custom vehicle xenon lights color, allowing to use RGB palette. The game will ignore lights color set by [\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\_0xE41033B25D003A07) when custom color is active. This native is not synced between players. Requires xenon lights mod to be set on vehicle.
     *
     * Hash: 0x1683E7F0 | Since: unknown | API-Set: client
     */
    export function setXenonLightsCustomColor(vehicle: number | IVehicle, red: number, green: number, blue: number): void {
        SetVehicleXenonLightsCustomColor(vehicle, red, green, blue);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80CC4C9E | Since: unknown | API-Set: client
     */
    export function setXmasSnowFactor(gripFactor: number): void {
        SetVehicleXmasSnowFactor(gripFactor);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77CC80DC | Since: unknown | API-Set: shared
     */
    export function doesTrainStopAtStations(train: number | IVehicle): boolean {
        return DoesTrainStopAtStations(train);
    }

    /**
     * Gets the trains desired speed.
     *
     * Hash: 0xA4921EF5 | Since: unknown | API-Set: shared
     */
    export function getTrainCruiseSpeed(train: number | IVehicle): number {
        return GetTrainCruiseSpeed(train);
    }

    /**
     * Gets the direction the train is facing
     *
     * Hash: 0x8DAF79B6 | Since: unknown | API-Set: shared
     */
    export function getTrainDirection(train: number | IVehicle): boolean {
        return GetTrainDirection(train);
    }

    /**
     * No comment provided
     *
     * Hash: 0x81B50033 | Since: unknown | API-Set: shared
     */
    export function getTrainState(train: number | IVehicle): number {
        return GetTrainState(train);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AA339D | Since: unknown | API-Set: shared
     */
    export function getTrainTrackIndex(train: number | IVehicle): number {
        return GetTrainTrackIndex(train);
    }

    /**
     * No comment provided
     *
     * Hash: 0x483B013C | Since: unknown | API-Set: shared
     */
    export function getHandbrake(vehicle: number | IVehicle): boolean {
        return GetVehicleHandbrake(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1382FCEA | Since: unknown | API-Set: shared
     */
    export function getSteeringAngle(vehicle: number | IVehicle): number {
        return GetVehicleSteeringAngle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB340D04 | Since: unknown | API-Set: shared
     */
    export function isEngineStarting(vehicle: number | IVehicle): boolean {
        return IsVehicleEngineStarting(vehicle);
    }

    /**
     * **Note**: Flags are not the same based on your `gamebuild`. Please see [here](https://docs.fivem.net/docs/game-references/vehicle-references/vehicle-flags) to see a complete list of all vehicle flags.
     *
     * Get vehicle.meta flag by index. Useful examples include `FLAG_LAW_ENFORCEMENT` (31), `FLAG_RICH_CAR` (36), `FLAG_IS_ELECTRIC` (43), `FLAG_IS_OFFROAD_VEHICLE` (48).
     *
     * Hash: 0xD85C9F57 | Since: unknown | API-Set: client
     */
    export function getHasFlag(vehicle: number | IVehicle, flagIndex: number): boolean {
        return GetVehicleHasFlag(vehicle, flagIndex);
    }

    /**
     * Returns the model type of the vehicle as defined by:
     *
     * ```cpp
     * enum VehicleType
     * {
     * VEHICLE_TYPE_NONE = -1,
     * VEHICLE_TYPE_CAR = 0,
     * VEHICLE_TYPE_PLANE = 1,
     * VEHICLE_TYPE_TRAILER = 2,
     * VEHICLE_TYPE_QUADBIKE = 3,
     * VEHICLE_TYPE_DRAFT = 4,
     * VEHICLE_TYPE_SUBMARINECAR = 5,
     * VEHICLE_TYPE_AMPHIBIOUS_AUTOMOBILE = 6,
     * VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE = 7,
     * VEHICLE_TYPE_HELI = 8,
     * VEHICLE_TYPE_BLIMP = 9,
     * VEHICLE_TYPE_AUTOGYRO = 10,
     * VEHICLE_TYPE_BIKE = 11,
     * VEHICLE_TYPE_BICYCLE = 12,
     * VEHICLE_TYPE_BOAT = 13,
     * VEHICLE_TYPE_TRAIN = 14,
     * VEHICLE_TYPE_SUBMARINE = 15,
     * };
     * ```
     *
     * Hash: 0xDE73BC10 | Since: unknown | API-Set: client
     */
    export function getTypeRaw(vehicle: number | IVehicle): number {
        return GetVehicleTypeRaw(vehicle);
    }

    /**
     * Getter for [BREAK_OFF_VEHICLE_WHEEL](?\_0xA274CADB).
     *
     * Hash: 0xCF1BC668 | Since: unknown | API-Set: client
     */
    export function isWheelBrokenOff(vehicle: number | IVehicle, wheelIndex: number): boolean {
        return IsVehicleWheelBrokenOff(vehicle, wheelIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8923DD42 | Since: unknown | API-Set: client
     */
    export function setCurrentGear(vehicle: number | IVehicle, gear: number): void {
        SetVehicleCurrentGear(vehicle, gear);
    }

    /**
     * This native is a setter for [`GET_VEHICLE_HAS_FLAG`](#\_0xD85C9F57).
     *
     * Hash: 0x63AE1A34 | Since: unknown | API-Set: client
     */
    export function setFlag(vehicle: number | IVehicle, flagIndex: number, value: boolean): boolean {
        return SetVehicleFlag(vehicle, flagIndex, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A4566F4 | Since: unknown | API-Set: client
     */
    export function setNextGear(vehicle: number | IVehicle, nextGear: number): void {
        SetVehicleNextGear(vehicle, nextGear);
    }

    /**
     * Returns the type of the passed vehicle.
     *
     * For client scripts, reference the more detailed [GET_VEHICLE_TYPE_RAW](#\_0xDE73BC10) native.
     *
     * ### Vehicle types
     *
     * *   automobile
     * *   bike
     * *   boat
     * *   heli
     * *   plane
     * *   submarine
     * *   trailer
     * *   train
     *
     * Hash: 0xA273060E | Since: unknown | API-Set: shared
     */
    export function getType(vehicle: number | IVehicle): string {
        return GetVehicleType(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CE544C68FB812A0 | Since: 323 | API-Set: unknown
     */
    export function addRoadNodeSpeedZone(pos: Vector3, radius: number, speed: number): number {
        return AddRoadNodeSpeedZone(pos.x, pos.y, pos.z, radius, speed, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54B0F614960F4A5F | Since: 323 | API-Set: unknown
     */
    export function addCombatAngledAvoidanceArea(): number {
        return AddVehicleCombatAngledAvoidanceArea(0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x99AD4CCCB128CBC9 | Since: 323 | API-Set: unknown
     */
    export function addPhoneExplosiveDevice(vehicle: number | IVehicle): void {
        AddVehiclePhoneExplosiveDevice(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FA9923062DD396C | Since: 323 | API-Set: unknown
     */
    export function addStuckCheckWithWarp(): void {
        AddVehicleStuckCheckWithWarp(undefined, 0, undefined, false, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB72E26D81006005B | Since: 323 | API-Set: unknown
     */
    export function addUpsidedownCheck(vehicle: number | IVehicle): void {
        AddVehicleUpsidedownCheck(vehicle);
    }

    /**
     * This native doesn't seem to do anything, might be a debug-only native.
     *
     * Confirmed, it is a debug native.
     *
     * Hash: 0xB264C4D2F2B0A78B | Since: 323 | API-Set: unknown
     */
    export function allowAmbientsToAvoidAdverseConditions(vehicle: number | IVehicle): void {
        AllowAmbientVehiclesToAvoidAdverseConditions(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F3B4D4E43177236 | Since: 323 | API-Set: unknown
     */
    export function allowBoatBoomToAnimate(vehicle: number | IVehicle, toggle: boolean): void {
        GetBoatBoomPositionRatio3(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2310A8F9421EBF43 | Since: 2372 | API-Set: unknown
     */
    export function allowTrainToBeRemovedByPopulation(): void {
        Citizen.invokeNative('0x2310A8F9421EBF43', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x249249D74F813EB2 | Since: 3095 | API-Set: unknown
     */
    export function applyEmpEffect(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x249249D74F813EB2', vehicle);
    }

    /**
     * Appears to return false if any window is broken.
     *
     * Hash: 0x11D862A3E977A9EF | Since: 323 | API-Set: unknown
     */
    export function areAllWindowsIntact(vehicle: number | IVehicle): boolean {
        return AreAllVehicleWindowsIntact(vehicle);
    }

    /**
     * Returns false if every seat is occupied.
     *
     * Hash: 0x2D34FC3BC4ADB780 | Since: 323 | API-Set: unknown
     */
    export function areAnySeatsFree(vehicle: number | IVehicle): boolean {
        return AreAnyVehicleSeatsFree(vehicle);
    }

    /**
     * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
     *
     * Hash: 0xAEF12960FA943792 | Since: 1290 | API-Set: unknown
     */
    export function areFoldingWingsDeployed(vehicle: number | IVehicle): boolean {
        return AreHeliStubWingsDeployed(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF78F94D60248C737 | Since: 323 | API-Set: unknown
     */
    export function arePlaneControlPanelsIntact(vehicle: number | IVehicle): boolean {
        return ArePlaneControlPanelsIntact(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x755D6D5267CBBD7E | Since: 323 | API-Set: unknown
     */
    export function arePlanePropellersIntact(plane: number | IVehicle): boolean {
        return ArePlanePropellersIntact(plane);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5991A01434CE9677 | Since: 323 | API-Set: unknown
     */
    export function areWingsOfPlaneIntact(plane: number | IVehicle): boolean {
        return ArePlaneWingsIntact(plane);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A98C2ECF57FA5D4 | Since: 323 | API-Set: unknown
     */
    export function attachContainerToHandlerFrameWhenLinedUp(vehicle: number | IVehicle, entity: number | IEntity): void {
        AttachContainerToHandlerFrame(vehicle, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1DD82F3CCF9A01E | Since: 944 | API-Set: unknown
     */
    export function attachEntityToCargobob(): void {
        AttachEntityToCargobob(undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
     *
     * Hash: 0x16B5E274BDE402F8 | Since: 323 | API-Set: unknown
     */
    export function attachOnToTrailer(vehicle: number | IVehicle, trailer: number | IVehicle, offsetX: number, offsetY: number, offsetZ: number, coordsX: number, coordsY: number, coordsZ: number, rotationX: number, rotationY: number, rotationZ: number, disableCollisions: number): void {
        AttachVehicleOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4127F1D84E347769 | Since: 323 | API-Set: unknown
     */
    export function attachToCargobob(cargobob: number | IVehicle, vehicle: number | IVehicle, pos: Vector3): void {
        AttachVehicleToCargobob(cargobob, vehicle, 0, pos.x, pos.y, pos.z);
    }

    /**
     * HookOffset defines where the hook is attached. leave at 0 for default attachment.
     *
     * Hash: 0x29A16F8D621C4508 | Since: 323 | API-Set: unknown
     */
    export function attachToTowTruck(towTruck: number | IVehicle, vehicle: number | IVehicle, rear: boolean, hookOffsetX: number, hookOffsetY: number, hookOffsetZ: number): void {
        AttachVehicleToTowTruck(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C7D42D58F770B54 | Since: 323 | API-Set: unknown
     */
    export function attachToTrailer(vehicle: number | IVehicle, trailer: number | IVehicle, radius: number): void {
        AttachVehicleToTrailer(vehicle, trailer, radius);
    }

    /**
     * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
     *
     * . distance defines how far it will travel until stopping. Garage doors use 3.0.
     *
     * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
     *
     * Hash: 0x260BE8F09E326A20 | Since: 323 | API-Set: unknown
     */
    export function bringToHalt(vehicle: number | IVehicle, distance: number, duration: number): void {
        BringVehicleToHalt(vehicle, distance, duration, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x26C10ECBDA5D043B | Since: 323 | API-Set: unknown
     */
    export function canAnchorBoatHere(vehicle: number | IVehicle): boolean {
        return CanAnchorBoatHere(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x24F4121D07579880 | Since: 678 | API-Set: unknown
     */
    export function canAnchorBoatHereIgnorePlayers(vehicle: number | IVehicle): boolean {
        return CanAnchorBoatHereIgnorePlayers(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C1D8B3B19E517CC | Since: 757 | API-Set: unknown
     */
    export function canCargobobPickUpEntity(): boolean {
        return CanCargobobPickUpEntity(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x30785D90C956BF35 | Since: 323 | API-Set: unknown
     */
    export function canShuffleSeat(vehicle: number | IVehicle, seatIndex: number): boolean {
        return CanShuffleSeat(vehicle, seatIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE01903C47C7AC89E | Since: 323 | API-Set: unknown
     */
    export function clearLastDriven(): void {
        ClearLastDrivenVehicle();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC889AE921400E1ED | Since: 3095 | API-Set: unknown
     */
    export function clearNitrous(vehicle: number | IVehicle): void {
        ClearNitrous(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x55E1D2758F34E437 | Since: 323 | API-Set: unknown
     */
    export function clearCustomPrimaryColour(vehicle: number | IVehicle): void {
        ClearVehicleCustomPrimaryColour(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5FFBDEEC3E8E2009 | Since: 323 | API-Set: unknown
     */
    export function clearCustomSecondaryColour(vehicle: number | IVehicle): void {
        ClearVehicleCustomSecondaryColour(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A436B8643716D14 | Since: 323 | API-Set: unknown
     */
    export function clearGeneratorAreaOfInterest(): void {
        ClearVehicleGeneratorAreaOfInterest();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4419966C9936071A | Since: 463 | API-Set: unknown
     */
    export function clearPetroltankFireCulprit(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x4419966C9936071A', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA3F739ABDDCF21F | Since: 463 | API-Set: unknown
     */
    export function clearPhoneExplosiveDevice(): void {
        ClearVehiclePhoneExplosiveDevice();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D6AF961B72728AE | Since: 323 | API-Set: unknown
     */
    export function clearRouteHistory(vehicle: number | IVehicle): void {
        ClearVehicleRouteHistory(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3556041742A0DC74 | Since: 323 | API-Set: unknown
     */
    export function closeBombBayDoors(vehicle: number | IVehicle): void {
        CloseBombBayDoors(vehicle);
    }

    /**
     * Works for vehicles with a retractable landing gear
     *
     * Landing gear states:
     *
     * 0: Deployed
     * 1: Closing
     * 2: Opening
     * 3: Retracted
     *
     * Hash: 0xCFC8BE9A5E1FE575 | Since: 323 | API-Set: unknown
     */
    export function controlLandingGear(vehicle: number | IVehicle, state: number): void {
        ControlLandingGear(vehicle, state);
    }

    /**
     * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
     *
     * Hash: 0xE44A982368A4AF23 | Since: 323 | API-Set: unknown
     */
    export function copyDamages(sourceVehicle: number | IVehicle, targetVehicle: number | IVehicle): void {
        CopyVehicleDamages(sourceVehicle, targetVehicle);
    }

    /**
     * Train models HAVE TO be loaded (requested) before you use this.
     * For variation 15 - request:
     *
     * freight
     * freightcar
     * freightgrain
     * freightcont1
     * freightcont2
     * freighttrailer
     *
     *
     *
     * Hash: 0x63C6CCA8E68AE8C8 | Since: 323 | API-Set: unknown
     */
    export function createMissionTrain(variation: number, pos: Vector3, direction: boolean): number {
        return CreateMissionTrain(variation, pos.x, pos.y, pos.z, direction, undefined, undefined);
    }

    /**
     * Drops the Hook/Magnet on a cargobob
     *
     * state
     * enum eCargobobHook
     * {
     * CARGOBOB_HOOK = 0,
     * CARGOBOB_MAGNET = 1,
     * };
     *
     * Hash: 0x7BEB0C7A235F6F3B | Since: 323 | API-Set: unknown
     */
    export function createPickUpRopeForCargobob(cargobob: number | IVehicle, state: number): void {
        CreatePickUpRopeForCargobob(cargobob, state);
    }

    /**
     * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
     *
     * Parameters:
     * x/y/z - Generator position
     * heading - Generator heading
     * p4 - Unknown (always 5.0)
     * p5 - Unknown (always 3.0)
     * modelHash - Vehicle model hash
     * p7/8/9/10 - Unknown (always -1)
     * p11 - Unknown (usually TRUE, only one instance of FALSE)
     * p12/13 - Unknown (always FALSE)
     * p14 - Unknown (usally FALSE, only two instances of TRUE)
     * p15 - Unknown (always TRUE)
     * p16 - Unknown (always -1)
     *
     * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
     *
     * Hash: 0x9DEF883114668116 | Since: 323 | API-Set: unknown
     */
    export function createScriptGenerator(pos: Vector3, heading: number, modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreateScriptVehicleGenerator(pos.x, pos.y, pos.z, heading, 0, 0, modelHash, 0, 0, 0, 0, false, false, false, false, false, 0);
    }

    /**
     * p7 when set to true allows you to spawn vehicles under -100 z.
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xAF35D0D2583051B0 | Since: 323 | API-Set: unknown
     */
    export function create(modelHash: number | string, pos: Vector3, heading: number, isNetwork: boolean, bScriptHostVeh: boolean): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreateVehicle(modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostVeh, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x736A718577F39C7D | Since: 323 | API-Set: unknown
     */
    export function deleteAllTrains(): void {
        DeleteAllTrains();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B76B14AE875C795 | Since: 323 | API-Set: unknown
     */
    export function deleteMissionTrain(train: number | IVehicle): void {
        DeleteMissionTrain(train);
    }

    /**
     * No comment provided
     *
     * Hash: 0x22102C9ABFCF125D | Since: 323 | API-Set: unknown
     */
    export function deleteScriptGenerator(vehicleGenerator: number): void {
        DeleteScriptVehicleGenerator(vehicleGenerator);
    }

    /**
     * Deletes a vehicle.
     * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
     *
     * eg how to use:
     * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
     * DELETE_VEHICLE(&vehicle);
     *
     * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0xEA386986E786A54F | Since: 323 | API-Set: unknown
     */
    export function deleteVehicle(vehicle: number | IVehicle): void {
        DeleteVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C0043FDFF6436BC | Since: 323 | API-Set: unknown
     */
    export function detachContainerFromHandlerFrame(vehicle: number | IVehicle): void {
        DetachContainerFromHandlerFrame(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAF03011701811146 | Since: 678 | API-Set: unknown
     */
    export function detachEntityFromCargobob(cargobob: number | IVehicle, entity: number | IEntity): boolean {
        return DetachEntityFromCargobob(cargobob, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xADF7BE450512C12F | Since: 323 | API-Set: unknown
     */
    export function detachFromAnyCargobob(vehicle: number | IVehicle): boolean {
        return DetachVehicleFromAnyCargobob(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD0E9CE05A1E68CD8 | Since: 323 | API-Set: unknown
     */
    export function detachFromAnyTowTruck(vehicle: number | IVehicle): boolean {
        return DetachVehicleFromAnyTowTruck(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0E21D3DF1051399D | Since: 323 | API-Set: unknown
     */
    export function detachFromCargobob(vehicle: number | IVehicle, cargobob: number | IVehicle): void {
        DetachVehicleFromCargobob(vehicle, cargobob);
    }

    /**
     * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
     *
     * Hash: 0xC2DB6B6708350ED8 | Since: 323 | API-Set: unknown
     */
    export function detachFromTowTruck(towTruck: number | IVehicle, vehicle: number | IVehicle): void {
        DetachVehicleFromTowTruck(towTruck, vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90532EDF0D2BDD86 | Since: 323 | API-Set: unknown
     */
    export function detachFromTrailer(vehicle: number | IVehicle): void {
        DetachVehicleFromTrailer(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF49CF0270307CBE | Since: 323 | API-Set: unknown
     */
    export function detonatePhoneExplosiveDevice(): void {
        DetonateVehiclePhoneExplosiveDevice();
    }

    /**
     * No comment provided
     *
     * Hash: 0x500873A45724C863 | Since: 323 | API-Set: unknown
     */
    export function disableIndividualPlanePropeller(vehicle: number | IVehicle, propeller: number): void {
        DisableIndividualPlanePropeller(vehicle, propeller);
    }

    /**
     * No comment provided
     *
     * Hash: 0x23428FC53C60919C | Since: 323 | API-Set: unknown
     */
    export function disablePlaneAileron(vehicle: number | IVehicle): void {
        DisablePlaneAileron(vehicle, false, false);
    }

    /**
     * Adds some kind of shadow to the vehicle.
     *
     * p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.
     *
     * Hash: 0xF0E4BA16D1DB546C | Since: 323 | API-Set: unknown
     */
    export function disableVehcileDynamicAmbientScales(vehicle: number | IVehicle): void {
        SetVehicleShadowEffect(vehicle, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF25E02CB9C5818F8 | Since: 323 | API-Set: unknown
     */
    export function disableExplosionBreakOffParts(): void {
        Citizen.invokeNative('0xF25E02CB9C5818F8');
    }

    /**
     * No comment provided
     *
     * Hash: 0x32CAEDF24A583345 | Since: 463 | API-Set: unknown
     */
    export function disableTurretMovementThisFrame(vehicle: number | IVehicle): void {
        DisableVehicleTurretMovementThisFrame(vehicle);
    }

    /**
     * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF4FC6A6F67D8D856 | Since: 323 | API-Set: unknown
     */
    export function disableWeapon(disabled: boolean, weaponHash: number | string, vehicle: number | IVehicle, owner: number | IPed): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        DisableVehicleWeapon(disabled, weaponHash, vehicle, owner);
    }

    /**
     * Returns true only when the magnet is active, will return false if the hook is active
     *
     * Hash: 0x6E08BF5B3722BAC9 | Since: 323 | API-Set: unknown
     */
    export function doesCargobobHavePickupMagnet(cargobob: number | IVehicle): boolean {
        return DoesCargobobHavePickupMagnet(cargobob);
    }

    /**
     * Returns true only when the hook is active, will return false if the magnet is active
     *
     * Hash: 0x1821D91AD4B56108 | Since: 323 | API-Set: unknown
     */
    export function doesCargobobHavePickUpRope(cargobob: number | IVehicle): boolean {
        return DoesCargobobHavePickUpRope(cargobob);
    }

    /**
     * Checks via CVehicleModelInfo
     *
     * Hash: 0x1262D55792428154 | Since: 323 | API-Set: unknown
     */
    export function doesExtraExist(vehicle: number | IVehicle, extraId: number): boolean {
        return DoesExtraExist(vehicle, extraId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6086BC836400876 | Since: 323 | API-Set: unknown
     */
    export function doesScriptGeneratorExist(vehicleGenerator: number): boolean {
        return DoesScriptVehicleGeneratorExist(vehicleGenerator);
    }

    /**
     * Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
     *
     * Hash: 0x4E417C547182C84D | Since: 757 | API-Set: unknown
     */
    export function doesAllowRappel(vehicle: number | IVehicle): boolean {
        return DoesVehicleAllowRappel(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x956B409B984D9BF7 | Since: 323 | API-Set: unknown
     */
    export function doesExistWithDecorator(decorator: string): number {
        return DoesVehicleExistWithDecorator(decorator);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8AC862B0B32C5B80 | Since: 323 | API-Set: unknown
     */
    export function doesHaveRoof(vehicle: number | IVehicle): boolean {
        return DoesVehicleHaveRoof(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x99015ED7DBEA5113 | Since: 2189 | API-Set: unknown
     */
    export function doesHaveSearchlight(vehicle: number | IVehicle): boolean {
        return DoesVehicleHaveSearchlight(vehicle);
    }

    /**
     * Maximum amount of vehicles with vehicle stuck check appears to be 16.
     *
     * Hash: 0x57E4C39DE5EE8470 | Since: 323 | API-Set: unknown
     */
    export function doesHaveStuckVehicleCheck(vehicle: number | IVehicle): boolean {
        return DoesVehicleHaveStuckVehicleCheck(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25ECB9F8017D98E0 | Since: 323 | API-Set: unknown
     */
    export function doesHaveWeapons(vehicle: number | IVehicle): boolean {
        return DoesVehicleHaveWeapons(vehicle);
    }

    /**
     * Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
     *
     * Hash: 0xF87D9F2301F7D206 | Since: 323 | API-Set: unknown
     */
    export function enableDynamicAmbientScales(vehicle: number | IVehicle): void {
        RemoveVehicleShadowEffect(vehicle);
    }

    /**
     * Explodes a selected vehicle.
     *
     * Vehicle vehicle = Vehicle you want to explode.
     * BOOL isAudible = If explosion makes a sound.
     * BOOL isInvisible = If the explosion is invisible or not.
     *
     * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
     *
     * Hash: 0xBA71116ADF5B514C | Since: 323 | API-Set: unknown
     */
    export function explode(vehicle: number | IVehicle, isAudible: boolean, isInvisible: boolean): void {
        ExplodeVehicle(vehicle, isAudible, isInvisible);
    }

    /**
     * No comment provided
     *
     * Hash: 0x786A4EB67B01BF0B | Since: 323 | API-Set: unknown
     */
    export function explodeInCutscene(vehicle: number | IVehicle): void {
        ExplodeVehicleInCutscene(vehicle, false);
    }

    /**
     * Finds the vehicle that is carrying this entity with a handler frame.
     * The model of the entity must be prop_contr_03b_ld or the function will return 0.
     *
     * Hash: 0x375E7FC44F21C8AB | Since: 323 | API-Set: unknown
     */
    export function findHandlerContainerIsAttachedTo(entity: number | IEntity): number {
        return FindVehicleCarryingThisEntity(entity);
    }

    /**
     * Native is significantly more complicated than simply generating a random vector & length.
     * `The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible`
     *
     * Hash: 0x8DC9675797123522 | Since: 1290 | API-Set: unknown
     */
    export function findSpawnCoordinatesForHeli(ped: number | IPed): Vector3 {
        return new Vector3(FindRandomPointInSpace(ped));
    }

    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.
     *
     * Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
     *
     * Hash: 0x772282EBEB95E682 | Since: 323 | API-Set: unknown
     */
    export function fixWindow(vehicle: number | IVehicle, windowIndex: number): void {
        FixVehicleWindow(vehicle, windowIndex);
    }

    /**
     * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
     *
     * Hash: 0x1F2E4E06DEA8992B | Since: 323 | API-Set: unknown
     */
    export function forcePlaybackRecordedUpdate(vehicle: number | IVehicle): void {
        ForcePlaybackRecordedVehicleUpdate(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC67DB108A9ADE3BE | Since: 2189 | API-Set: unknown
     */
    export function forceSubmarineNeurtalBuoyancy(): void {
        ForceSubmarineNeurtalBuoyancy(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33506883545AC0DF | Since: 323 | API-Set: unknown
     */
    export function forceSubmarineSurfaceMode(vehicle: number | IVehicle, toggle: boolean): void {
        ForceSubmarineSurfaceMode(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x99CAD8E7AFDB60FA | Since: 323 | API-Set: unknown
     */
    export function forceSubThrottleForTime(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x99CAD8E7AFDB60FA', vehicle, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A2BCC8C636F9226 | Since: 3095 | API-Set: unknown
     */
    export function fullyChargeNitrous(vehicle: number | IVehicle): void {
        FullyChargeNitrous(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA4822F1CF23F4810 | Since: 323 | API-Set: unknown
     */
    export function generateCreationPosFromPaths(): [boolean, Vector3, Vector3] {
        return Citizen.invokeNative('0xA4822F1CF23F4810', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B8E1BF04B51F2E8 | Since: 1103 | API-Set: unknown
     */
    export function getAlls(): [number, any] {
        return GetAllVehicles();
    }

    /**
     * Returns true when the bomb bay doors of this plane are open. False if they're closed.
     *
     * Hash: 0xD0917A423314BBA8 | Since: 1180 | API-Set: unknown
     */
    export function getAreBombBayDoorsOpen(aircraft: number | IVehicle): boolean {
        return AreBombBayDoorsOpen(aircraft);
    }

    /**
     * Gets the position of the cargobob hook, in world coords.
     *
     * Hash: 0xCBDB9B923CACC92D | Since: 323 | API-Set: unknown
     */
    export function getAttachedPickUpHookPosition(cargobob: number | IVehicle): Vector3 {
        return new Vector3(GetCargobobHookPosition(cargobob));
    }

    /**
     * No comment provided
     *
     * Hash: 0x6636C535F6CC2725 | Since: 323 | API-Set: unknown
     */
    export function getBoatBoomPositionRatio(vehicle: number | IVehicle): number {
        return GetBoatBoomPositionRatio(vehicle);
    }

    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x5AA3F878A178C4FC | Since: 323 | API-Set: unknown
     */
    export function getBoatModelAgility(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetBoatVehicleModelAgility(modelHash);
    }

    /**
     * Returns true when both headlights are broken. This does not include extralights.
     *
     * Hash: 0xEC69ADF931AAE0C3 | Since: 505 | API-Set: unknown
     */
    export function getBothHeadlightsDamaged(vehicle: number | IVehicle): boolean {
        return IsVehicleEngineOnFire(vehicle);
    }

    /**
     * Used in decompiled scripts in combination with GET_VEHICLE_SIZE
     * p7 is usually 2
     * p8 is usually 1
     *
     * Hash: 0x51F30DB60626A20E | Since: 1180 | API-Set: unknown
     */
    export function getCanBePlacedHere(vehicle: number | IVehicle, pos: Vector3, rot: Vector3): boolean {
        return Citizen.invokeNative('0x51F30DB60626A20E', vehicle, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, undefined);
    }

    /**
     * Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
     *
     * Hash: 0x9078C0C5EF8C19E9 | Since: 944 | API-Set: unknown
     */
    export function getCarHasJump(vehicle: number | IVehicle): boolean {
        return GetCanVehicleJump(vehicle);
    }

    /**
     * Example usage
     * `VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)`
     *
     * x, y, z: Position to get closest vehicle to.
     * radius: Max radius to get a vehicle.
     * modelHash: Limit to vehicles with this model. 0 for any.
     * flags: The bitwise flags altering the function's behaviour.
     *
     * Does not return police cars or helicopters.
     *
     * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
     *
     * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
     *
     * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
     * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
     *
     * Conversion of found flags to binary: https://pastebin.com/kghNFkRi
     *
     * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
     *
     * `It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT`
     *
     * -------------------------------------------------------------------------
     *
     * Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xF73EB622C4F1689B | Since: 323 | API-Set: unknown
     */
    export function getClosest(pos: Vector3, radius: number, modelHash: number | string, flags: number): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetClosestVehicle(pos.x, pos.y, pos.z, radius, modelHash, flags);
    }

    /**
     * 0 -> up
     * 1 -> lowering down
     * 2 -> down
     * 3 -> raising up
     *
     * Hash: 0xF8C397922FC03F41 | Since: 323 | API-Set: unknown
     */
    export function getConvertibleRoofState(vehicle: number | IVehicle): number {
        return GetConvertibleRoofState(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42BC05C27A946054 | Since: 323 | API-Set: unknown
     */
    export function getCurrentPlaybackFor(vehicle: number | IVehicle): number {
        return GetCurrentPlaybackForVehicle(vehicle);
    }

    /**
     * Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
     * -----------------------------------------------------------------------------------------------------------------------------------------
     * While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
     * -----------------------------------------------------------------------------------------------------------------------------------------
     *
     * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
     *
     * `Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.`
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xB215AAC32D25D019 | Since: 323 | API-Set: unknown
     */
    export function getDisplayNameFromModel(modelHash: number | string): string {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetDisplayNameFromVehicleModel(modelHash);
    }

    /**
     * Appears to return true if the vehicle has any damage, including cosmetically.
     *
     * Hash: 0xBCDC5017D3CE1E9E | Since: 323 | API-Set: unknown
     */
    export function getDoesHaveDamageDecals(vehicle: number | IVehicle): boolean {
        return IsVehicleDamaged(vehicle);
    }

    /**
     * Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false.
     *
     * Hash: 0x71AFB258CCED3A27 | Since: 1604 | API-Set: unknown
     */
    export function getDoesHaveTombstone(vehicle: number | IVehicle): boolean {
        return GetDoesVehicleHaveTombstone(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F5A72430E78C8D3 | Since: 2372 | API-Set: unknown
     */
    export function getDriftTyresSet(vehicle: number | IVehicle): boolean {
        return GetDriftTyresEnabled(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x99093F60746708CA | Since: 1103 | API-Set: unknown
     */
    export function getEntityAttachedToCargobob(): number {
        return GetEntityAttachedToCargobob(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFEA18DCF10F8F75 | Since: 323 | API-Set: unknown
     */
    export function getEntityAttachedToTowTruck(towTruck: number | IVehicle): number {
        return GetEntityAttachedToTowTruck(towTruck);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xC0572928C0ABFDA3 | Since: 944 | API-Set: unknown
     */
    export function getEntryPointPosition(vehicle: number | IVehicle, doorId: number): Vector3 {
        return new Vector3(GetEntryPositionOfDoor(vehicle, doorId));
    }

    /**
     * Gets the height of the vehicle's suspension.
     * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
     * 0.000 is the stock suspension.
     * 0.008 is Ultra Suspension.
     *
     * Hash: 0x53952FD2BAA19F17 | Since: 323 | API-Set: unknown
     */
    export function getFakeSuspensionLoweringAmount(vehicle: number | IVehicle): number {
        return GetVehicleSuspensionHeight(vehicle);
    }

    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xC6AD107DDC9054CC | Since: 323 | API-Set: unknown
     */
    export function getFlyingModelAgility(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelMaxKnots(modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCA174A42133F08C | Since: 944 | API-Set: unknown
     */
    export function getHasRetractableWheels(vehicle: number | IVehicle): boolean {
        return GetHasRetractableWheels(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36D782F68B309BDA | Since: 944 | API-Set: unknown
     */
    export function getHasRocketBoost(vehicle: number | IVehicle): boolean {
        return GetHasRocketBoost(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE8718FAF591FD224 | Since: 1604 | API-Set: unknown
     */
    export function getHasBeenHitByShunt(vehicle: number | IVehicle): boolean {
        return Citizen.invokeNative('0xE8718FAF591FD224', vehicle);
    }

    /**
     * Max 1000.
     * At 0 the main rotor will stall.
     *
     * Hash: 0xE4CB7541F413D2C5 | Since: 323 | API-Set: unknown
     */
    export function getHeliMainRotorHealth(vehicle: number | IVehicle): number {
        return GetHeliMainRotorHealth(vehicle);
    }

    /**
     * Max 1000.
     * At -100 both helicopter rotors will stall.
     *
     * Hash: 0xAC51915D27E4A5F7 | Since: 323 | API-Set: unknown
     */
    export function getHeliTailBoomHealth(vehicle: number | IVehicle): number {
        return GetHeliTailBoomHealth(vehicle);
    }

    /**
     * Max 1000.
     * At 0 the tail rotor will stall.
     *
     * Hash: 0xAE8CE82A4219AC8C | Since: 323 | API-Set: unknown
     */
    export function getHeliTailRotorHealth(vehicle: number | IVehicle): number {
        return GetHeliTailRotorHealth(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BB5CBDDD0F25AE3 | Since: 2372 | API-Set: unknown
     */
    export function getHydraulicSuspensionRaiseFactor(vehicle: number | IVehicle, wheelId: number): number {
        return GetHydraulicWheelValue(vehicle, wheelId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA01BC64DD4BFBBAC | Since: 323 | API-Set: unknown
     */
    export function getInClipsetHashForSeat(vehicle: number | IVehicle): number {
        return Citizen.invokeNative('0xA01BC64DD4BFBBAC', vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA91D045575699AD | Since: 877 | API-Set: unknown
     */
    export function getIsBoatCapsized(vehicle: number | IVehicle): boolean {
        return GetIsBoatCapsized(vehicle);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x645F4B6E8499F632 | Since: 944 | API-Set: unknown
     */
    export function getIsDoorValid(vehicle: number | IVehicle, doorId: number): boolean {
        return GetIsDoorValid(vehicle, doorId);
    }

    /**
     * From the driver's perspective, is the left headlight broken.
     *
     * Hash: 0x5EF77C9ADD3B11A3 | Since: 323 | API-Set: unknown
     */
    export function getIsLeftHeadlightDamaged(vehicle: number | IVehicle): boolean {
        return GetIsLeftVehicleHeadlightDamaged(vehicle);
    }

    /**
     * From the driver's perspective, is the right headlight broken.
     *
     * Hash: 0xA7ECB73355EB2F20 | Since: 323 | API-Set: unknown
     */
    export function getIsRightHeadlightDamaged(vehicle: number | IVehicle): boolean {
        return GetIsRightVehicleHeadlightDamaged(vehicle);
    }

    /**
     * Returns whether this vehicle is currently disabled by an EMP mine.
     *
     * Hash: 0x0506ED94363AD905 | Since: 1604 | API-Set: unknown
     */
    export function getIsDisabledByEmp(vehicle: number | IVehicle): boolean {
        return GetIsVehicleEmpDisabled(vehicle);
    }

    /**
     * Returns true when in a vehicle, false whilst entering/exiting.
     *
     * Hash: 0xAE31E7DF9B5B132E | Since: 323 | API-Set: unknown
     */
    export function getIsEngineRunning(vehicle: number | IVehicle): boolean {
        return GetIsVehicleEngineRunning(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF095C0405307B21B | Since: 323 | API-Set: unknown
     */
    export function getIsPrimaryColourCustom(vehicle: number | IVehicle): boolean {
        return GetIsVehiclePrimaryColourCustom(vehicle);
    }

    /**
     * Check if Vehicle Secondary is avaliable for customize
     *
     * Hash: 0x910A32E7AAD2656C | Since: 323 | API-Set: unknown
     */
    export function getIsSecondaryColourCustom(vehicle: number | IVehicle): boolean {
        return GetIsVehicleSecondaryColourCustom(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2459F72C14E2E8D | Since: 1604 | API-Set: unknown
     */
    export function getIsShunting(vehicle: number | IVehicle): boolean {
        return GetIsVehicleShuntBoostActive(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DA0DA9CB3F0C8BF | Since: 944 | API-Set: unknown
     */
    export function getIsWheelsRetracted(vehicle: number | IVehicle): boolean {
        return GetIsWheelsLoweredStateActive(vehicle);
    }

    /**
     * Landing gear states:
     *
     * 0: Deployed
     * 1: Closing (Retracting)
     * 2: (Landing gear state 2 is never used.)
     * 3: Opening (Deploying)
     * 4: Retracted
     *
     * Returns the current state of the vehicles landing gear.
     *
     * Hash: 0x9B0F3DCA3DB0F4CD | Since: 323 | API-Set: unknown
     */
    export function getLandingGearState(vehicle: number | IVehicle): number {
        return GetLandingGearState(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2D06FAEDE65B577 | Since: 323 | API-Set: unknown
     */
    export function getLastDriven(): number {
        return GetLastDrivenVehicle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x83F969AA1EE2A664 | Since: 323 | API-Set: unknown
     */
    export function getLastPedInSeat(vehicle: number | IVehicle, seatIndex: number): number {
        return GetLastPedInVehicleSeat(vehicle, seatIndex);
    }

    /**
     * Returns last vehicle that was rammed by the given vehicle using the shunt boost.
     *
     * Hash: 0x04F2FA6E234162F7 | Since: 1604 | API-Set: unknown
     */
    export function getLastShunt(vehicle: number | IVehicle): number {
        return GetLastRammedVehicle(vehicle);
    }

    /**
     * Returns the text label of the vehicle's liveryIndex, as specified by the liveryNames section of the vehicle's modkit data in the carcols file.
     *
     * example
     *
     * `int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);`
     * for (int i = 0; i < count; i++)
     * {
     * `const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);`
     * }
     *
     *
     * this example will work fine to fetch all names
     * for example for Sanchez we get
     *
     * SANC_LV1
     * SANC_LV2
     * SANC_LV3
     * SANC_LV4
     * SANC_LV5
     *
     *
     * Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.
     *
     * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
     *
     * Hash: 0xB4C7A93837C91A1F | Since: 323 | API-Set: unknown
     */
    export function getLiveryName(vehicle: number | IVehicle, liveryIndex: number): string {
        return GetLiveryName(vehicle, liveryIndex);
    }

    /**
     * Will return a vehicle's manufacturer display label.
     * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xF7AF4F159FF99F97 | Since: 1868 | API-Set: unknown
     */
    export function getMakeNameFromModel(modelHash: number | string): string {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetMakeNameFromVehicleModel(modelHash);
    }

    /**
     * Returns the name for the type of vehicle mod(Armour, engine etc)
     *
     *
     * Hash: 0x51F0FEB9F6AE98C0 | Since: 323 | API-Set: unknown
     */
    export function getModSlotName(vehicle: number | IVehicle, modType: number): string {
        return GetModSlotName(vehicle, modType);
    }

    /**
     * Returns the text label of a mod type for a given vehicle
     *
     * Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language
     *
     * Hash: 0x8935624F8C5592CC | Since: 323 | API-Set: unknown
     */
    export function getModTextLabel(vehicle: number | IVehicle, modType: number, modValue: number): string {
        return GetModTextLabel(vehicle, modType, modValue);
    }

    /**
     * Returns the total amount of color combinations found in the vehicle's carvariations.meta entry.
     *
     * Hash: 0x3B963160CD65D41E | Since: 323 | API-Set: unknown
     */
    export function getNumberOfColours(vehicle: number | IVehicle): number {
        return GetNumberOfVehicleColours(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92922A607497B14D | Since: 463 | API-Set: unknown
     */
    export function getNumberOfDoors(vehicle: number | IVehicle): number {
        return GetNumberOfVehicleDoors(vehicle);
    }

    /**
     * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
     *
     * Hash: 0x4C4D6B2644F458CB | Since: 323 | API-Set: unknown
     */
    export function getNumberOfNumberPlates(): number {
        return GetNumberOfVehicleNumberPlates();
    }

    /**
     * paintType:
     * 0: Normal
     * 1: Metallic
     * 2: Pearl
     * 3: Matte
     * 4: Metal
     * 5: Chrome
     * 6: Chameleon
     *
     * Hash: 0xA551BE18C11A476D | Since: 323 | API-Set: unknown
     */
    export function getNumModColors(paintType: number): number {
        return GetNumModColors(paintType, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33F2E3FE70EAAE1D | Since: 323 | API-Set: unknown
     */
    export function getNumModKits(vehicle: number | IVehicle): number {
        return GetNumModKits(vehicle);
    }

    /**
     * Returns how many possible mods a vehicle has for a given mod type
     *
     * Hash: 0xE38E9162A2500646 | Since: 323 | API-Set: unknown
     */
    export function getNumMods(vehicle: number | IVehicle, modType: number): number {
        return GetNumVehicleMods(vehicle, modType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D1224004B3A6707 | Since: 323 | API-Set: unknown
     */
    export function getNumWindowTints(): number {
        return GetNumVehicleWindowTints();
    }

    /**
     * Checks if Chernobog's stabilizers are deployed or not.
     * These are the metal supports that allow it to fire.
     * This native only applies to the Chernobog.
     *
     * Hash: 0x3A9128352EAC9E85 | Since: 1290 | API-Set: unknown
     */
    export function getOutriggersDeployed(vehicle: number | IVehicle): boolean {
        return AreOutriggerLegsDeployed(vehicle);
    }

    /**
     * If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
     *
     * Seat indexes:
     * -1 = Driver
     * 0 = Front Right Passenger
     * 1 = Back Left Passenger
     * 2 = Back Right Passenger
     * 3 = Further Back Left Passenger (vehicles > 4 seats)
     * 4 = Further Back Right Passenger (vehicles > 4 seats)
     * etc.
     *
     * If p2 is true it uses a different GetOccupant function.
     *
     * Hash: 0xBB40DD2270B65366 | Since: 323 | API-Set: unknown
     */
    export function getPedInSeat(vehicle: number | IVehicle, seatIndex: number): number {
        return GetPedInVehicleSeat(vehicle, seatIndex, false);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x218297BF0CFD853B | Since: 323 | API-Set: unknown
     */
    export function getPedUsingDoor(vehicle: number | IVehicle, doord: number): number {
        return GetPedUsingVehicleDoor(vehicle, doord);
    }

    /**
     * Distance traveled in the vehicles current recording.
     *
     * Hash: 0x2DACD605FC681475 | Since: 323 | API-Set: unknown
     */
    export function getPositionInRecording(vehicle: number | IVehicle): number {
        return GetPositionInRecording(vehicle);
    }

    /**
     * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0xD242728AA6F0FBA2 | Since: 323 | API-Set: unknown
     */
    export function getPositionOfRecordingAtTime(recording: number, time: number, script: string): Vector3 {
        return new Vector3(GetPositionOfVehicleRecordingAtTime(recording, time, script));
    }

    /**
     * No comment provided
     *
     * Hash: 0x92523B76657A517D | Since: 323 | API-Set: unknown
     */
    export function getPositionOfRecordingIdAtTime(id: number, time: number): Vector3 {
        return new Vector3(GetPositionOfVehicleRecordingIdAtTime(id, time));
    }

    /**
     * No comment provided
     *
     * Hash: 0xB50807EABE20A8DC | Since: 323 | API-Set: unknown
     */
    export function getRandomBackBumperInSphere(): number {
        return GetRandomVehicleBackBumperInSphere(0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5574E0AEB86BA68 | Since: 323 | API-Set: unknown
     */
    export function getRandomFrontBumperInSphere(): number {
        return GetRandomVehicleFrontBumperInSphere(0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * Gets a random vehicle in a sphere at the specified position, of the specified radius.
     *
     * x: The X-component of the position of the sphere.
     * y: The Y-component of the position of the sphere.
     * z: The Z-component of the position of the sphere.
     * radius: The radius of the sphere. Max is 9999.9004.
     * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
     * flags: The bitwise flags that modifies the behaviour of this function.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x386F6CE5BAF6091C | Since: 323 | API-Set: unknown
     */
    export function getRandomInSphere(pos: Vector3, radius: number, modelHash: number | string, flags: number): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetRandomVehicleInSphere(pos.x, pos.y, pos.z, radius, modelHash, flags);
    }

    /**
     * Not present in the retail version! It's just a nullsub.
     *
     * p0 always true (except in one case)
     * successIndicator: 0 if success, -1 if failed
     *
     * Hash: 0x055BF0AC0C34F4FD | Since: 323 | API-Set: unknown
     */
    export function getRandomModelInMemory(): [number, number] {
        return GetRandomVehicleModelInMemory(false);
    }

    /**
     * This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x2058206FBE79A8AD | Since: 323 | API-Set: unknown
     */
    export function getRotationOfRecordingAtTime(recording: number, time: number, script: string): Vector3 {
        return new Vector3(GetRotationOfVehicleRecordingAtTime(recording, time, script));
    }

    /**
     * No comment provided
     *
     * Hash: 0xF0F2103EFAF8CBA7 | Since: 323 | API-Set: unknown
     */
    export function getRotationOfRecordingIdAtTime(id: number, time: number): Vector3 {
        return new Vector3(GetRotationOfVehicleRecordingIdAtTime(id, time));
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E71D0B300B7AA79 | Since: 2189 | API-Set: unknown
     */
    export function getSubmarineIsUnderDesignDepth(submarine: number | IVehicle): boolean {
        return GetSubmarineIsUnderDesignDepth(submarine);
    }

    /**
     * No comment provided
     *
     * Hash: 0x093D6DDCA5B8FBAE | Since: 2189 | API-Set: unknown
     */
    export function getSubmarineNumberOfAirLeaks(submarine: number | IVehicle): number {
        return GetSubmarineNumberOfAirLeaks(submarine);
    }

    /**
     * Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
     *
     * Hash: 0x5746F3A7AB7FE544 | Since: 323 | API-Set: unknown
     */
    export function getTimePositionInRecording(vehicle: number | IVehicle): number {
        return GetTimePositionInRecording(vehicle);
    }

    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x0E48D1C262390950 | Since: 323 | API-Set: unknown
     */
    export function getTotalDurationOfRecording(recording: number, script: string): number {
        return GetTotalDurationOfVehicleRecording(recording, script);
    }

    /**
     * No comment provided
     *
     * Hash: 0x102D125411A7B6E6 | Since: 323 | API-Set: unknown
     */
    export function getTotalDurationOfRecordingId(id: number): number {
        return GetTotalDurationOfVehicleRecordingId(id);
    }

    /**
     * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
     *
     * Hash: 0x08AAFD0814722BC3 | Since: 323 | API-Set: unknown
     */
    export function getTrainCarriage(train: number | IVehicle, trailerNumber: number): number {
        return GetTrainCarriage(train, trailerNumber);
    }

    /**
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x55EAB010FAEE9380 | Since: 1868 | API-Set: unknown
     */
    export function getTyreHealth(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetTyreHealth(vehicle, wheelIndex);
    }

    /**
     * Returns the multiplier value from SET_TYRE_WEAR_RATE
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x6E387895952F4F71 | Since: 2060 | API-Set: unknown
     */
    export function getTyreWearRate(vehicle: number | IVehicle, wheelIndex: number): number {
        return GetTyreWearMultiplier(vehicle, wheelIndex);
    }

    /**
     * static - max acceleration
     *
     * Hash: 0x5DD35C8D074E57AE | Since: 323 | API-Set: unknown
     */
    export function getAcceleration(vehicle: number | IVehicle): number {
        return GetVehicleAcceleration(vehicle);
    }

    /**
     * Returns attached vehicle (Vehicle in parameter must be cargobob)
     *
     * Hash: 0x873B82D42AC2B9E5 | Since: 323 | API-Set: unknown
     */
    export function getAttachedToCargobob(cargobob: number | IVehicle): number {
        return GetVehicleAttachedToCargobob(cargobob);
    }

    /**
     * Seems related to vehicle health, like the one in IV.
     * Max 1000, min 0.
     * Vehicle does not necessarily explode or become undrivable at 0.
     *
     * Hash: 0xF271147EB7B40F12 | Since: 323 | API-Set: unknown
     */
    export function getBodyHealth(vehicle: number | IVehicle): number {
        return GetVehicleBodyHealth(vehicle);
    }

    /**
     * Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
     *
     * Hash: 0xEA12BD130D7569A1 | Since: 1180 | API-Set: unknown
     */
    export function getBombAmmo(vehicle: number | IVehicle): number {
        return GetVehicleBombCount(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA916396DF4154EE3 | Since: 944 | API-Set: unknown
     */
    export function getCanDeployParachute(vehicle: number | IVehicle): boolean {
        return GetVehicleCanActivateParachute(vehicle);
    }

    /**
     * iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
     * if (iVar3 == joaat("weapon_stickybomb"))
     * {
     * func_171(726);
     * iLocal_260 = 1;
     * }
     *
     * Hash: 0xE495D1EF4C91FD20 | Since: 323 | API-Set: unknown
     */
    export function getCauseOfDestruction(vehicle: number | IVehicle): number {
        return GetVehicleCauseOfDestruction(vehicle);
    }

    /**
     * Returns an int
     *
     * Vehicle Classes:
     * 0: Compacts
     * 1: Sedans
     * 2: SUVs
     * 3: Coupes
     * 4: Muscle
     * 5: Sports Classics
     * 6: Sports
     * 7: Super
     * 8: Motorcycles
     * 9: Off-road
     * 10: Industrial
     * 11: Utility
     * 12: Vans
     * 13: Cycles
     * 14: Boats
     * 15: Helicopters
     * 16: Planes
     * 17: Service
     * 18: Emergency
     * 19: Military
     * 20: Commercial
     * 21: Trains
     *
     * char buffer[128];
     * `std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));`
     *
     * `const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);`
     *
     * Hash: 0x29439776AAA00A62 | Since: 323 | API-Set: unknown
     */
    export function getClass(vehicle: number | IVehicle): number {
        return GetVehicleClass(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x00C09F246ABEDD82 | Since: 323 | API-Set: unknown
     */
    export function getClassEstimatedMaxSpeed(vehicleClass: number): number {
        return GetVehicleClassEstimatedMaxSpeed(vehicleClass);
    }

    /**
     * char buffer[128];
     * `std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));`
     *
     * `const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);`
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xDEDF1C8BD47C2200 | Since: 323 | API-Set: unknown
     */
    export function getClassFromName(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleClassFromName(modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F83E7E45D9EA7AE | Since: 323 | API-Set: unknown
     */
    export function getClassMaxAcceleration(vehicleClass: number): number {
        return GetVehicleClassMaxAcceleration(vehicleClass);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4F930AD022D6DE3B | Since: 323 | API-Set: unknown
     */
    export function getClassMaxAgility(vehicleClass: number): number {
        return GetVehicleClassMaxAgility(vehicleClass);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4BF54C16EC8FEC03 | Since: 323 | API-Set: unknown
     */
    export function getClassMaxBraking(vehicleClass: number): number {
        return GetVehicleClassMaxBraking(vehicleClass);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDBC86D85C5059461 | Since: 323 | API-Set: unknown
     */
    export function getClassMaxTraction(vehicleClass: number): number {
        return GetVehicleClassMaxTraction(vehicleClass);
    }

    /**
     * What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
     *
     * Hash: 0xF3CC740D36221548 | Since: 323 | API-Set: unknown
     */
    export function getColor(vehicle: number | IVehicle): [number, number, number] {
        return GetVehicleColor(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA19435F193E081AC | Since: 323 | API-Set: unknown
     */
    export function getColours(vehicle: number | IVehicle): [number, number] {
        return GetVehicleColours(vehicle);
    }

    /**
     * Some kind of flags.
     *
     * Hash: 0xEEBFC7A7EFDC35B4 | Since: 323 | API-Set: unknown
     */
    export function getColoursWhichCanBeSet(vehicle: number | IVehicle): number {
        return Citizen.invokeNative('0xEEBFC7A7EFDC35B4', vehicle);
    }

    /**
     * Returns the index of the color combination found in the vehicle's carvariations.meta entry.
     *
     * Hash: 0x6A842D197F845D56 | Since: 323 | API-Set: unknown
     */
    export function getColourCombination(vehicle: number | IVehicle): number {
        return GetVehicleColourCombination(vehicle);
    }

    /**
     * Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
     * Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.
     *
     * Hash: 0xF846AA63DF56B804 | Since: 1180 | API-Set: unknown
     */
    export function getCountermeasureAmmo(vehicle: number | IVehicle): number {
        return GetVehicleCountermeasureCount(vehicle);
    }

    /**
     * Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
     *
     * Hash: 0x36492C2F0D134C56 | Since: 323 | API-Set: unknown
     */
    export function getCurrentTimeInSlipStream(vehicle: number | IVehicle): number {
        return GetVehicleCurrentSlipstreamDraft(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB64CF2CCA9D95F52 | Since: 323 | API-Set: unknown
     */
    export function getCustomPrimaryColour(vehicle: number | IVehicle): [number, number, number] {
        return GetVehicleCustomPrimaryColour(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8389CD56CA8072DC | Since: 323 | API-Set: unknown
     */
    export function getCustomSecondaryColour(vehicle: number | IVehicle): [number, number, number] {
        return GetVehicleCustomSecondaryColour(vehicle);
    }

    /**
     * The only example I can find of this function in the scripts, is this:
     *
     * `struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);`
     *
     * -----------------------------------------------------------------------------------------------------------------------------------------
     * PC scripts:
     *
     * `v_5\/\*{3}\*\/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);`
     *
     * Hash: 0x4EC6CFBC7B2E9536 | Since: 323 | API-Set: unknown
     */
    export function getDeformationAtPos(vehicle: number | IVehicle, offsetX: number, offsetY: number, offsetZ: number): Vector3 {
        return new Vector3(GetVehicleDeformationAtPos(vehicle, offsetX, offsetY, offsetZ));
    }

    /**
     * Dirt level does not become greater than 15.0
     *
     * Hash: 0x8F17BC8BA08DA62B | Since: 323 | API-Set: unknown
     */
    export function getDirtLevel(vehicle: number | IVehicle): number {
        return GetVehicleDirtLevel(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6AF6CB341349015 | Since: 323 | API-Set: unknown
     */
    export function getDoorsLockedForPlayer(vehicle: number | IVehicle, player: number | string | IPlayer): boolean {
        return GetVehicleDoorsLockedForPlayer(vehicle, player);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xFE3F9C29F7B32BD5 | Since: 323 | API-Set: unknown
     */
    export function getDoorAngleRatio(vehicle: number | IVehicle, doorId: number): number {
        return GetVehicleDoorAngleRatio(vehicle, doorId);
    }

    /**
     * enum VehicleLockStatus = {
     * None = 0,
     * Unlocked = 1,
     * Locked = 2,
     * LockedForPlayer = 3,
     * StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
     * CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
     * CanBeBrokenIntoPersist = 8, -- Can be broken into persist
     * CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
     * }
     *
     * Hash: 0x25BC98A59C2EA962 | Since: 323 | API-Set: unknown
     */
    export function getDoorLockStatus(vehicle: number | IVehicle): number {
        return GetVehicleDoorLockStatus(vehicle);
    }

    /**
     * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
     *
     * Minimum: -4000
     * Maximum: 1000
     *
     * -4000: Engine is destroyed
     * 0 and below: Engine catches fire and health rapidly declines
     * 300: Engine is smoking and losing functionality
     * 1000: Engine is perfect
     *
     * Hash: 0xC45D23BAF168AAB8 | Since: 323 | API-Set: unknown
     */
    export function getEngineHealth(vehicle: number | IVehicle): number {
        return GetVehicleEngineHealth(vehicle);
    }

    /**
     * The result is a value from 0-1, where 0 is fresh paint.
     *
     * Hash: 0xA82819CAC9C4C403 | Since: 323 | API-Set: unknown
     */
    export function getEnveffScale(vehicle: number | IVehicle): number {
        return GetVehicleEnveffScale(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x53AF99BAA671CA47 | Since: 323 | API-Set: unknown
     */
    export function getEstimatedMaxSpeed(vehicle: number | IVehicle): number {
        return GetVehicleEstimatedMaxSpeed(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3BC4245933A166F7 | Since: 323 | API-Set: unknown
     */
    export function getExtraColours(vehicle: number | IVehicle): [number, number] {
        return GetVehicleExtraColours(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D1464D472D32136 | Since: 505 | API-Set: unknown
     */
    export function getExtraColour5(vehicle: number | IVehicle): number {
        return GetVehicleInteriorColor(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB7635E80A5C31BFF | Since: 505 | API-Set: unknown
     */
    export function getExtraColour6(vehicle: number | IVehicle): number {
        return GetVehicleDashboardColor(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA62027C8BDB326E | Since: 1180 | API-Set: unknown
     */
    export function getFlightNozzlePosition(plane: number | IVehicle): number {
        return GetVehicleFlightNozzlePosition(plane);
    }

    /**
     * Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.
     *
     * Hash: 0x50634E348C8D44EF | Since: 372 | API-Set: unknown
     */
    export function getHasKers(vehicle: number | IVehicle): boolean {
        return GetVehicleHasKers(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE43701C36CAFF1A4 | Since: 1180 | API-Set: unknown
     */
    export function getHasLandingGear(vehicle: number | IVehicle): boolean {
        return DoesVehicleHaveLandingGear(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC9CFF381338CB4F | Since: 944 | API-Set: unknown
     */
    export function getHasParachute(vehicle: number | IVehicle): boolean {
        return GetVehicleHasParachute(vehicle);
    }

    /**
     * 0 min 100 max
     * starts at 100
     * Seams to have health zones
     * Front of vehicle when damaged goes from 100-50 and stops at 50.
     * Rear can be damaged from 100-0
     * Only tested with two cars.
     *
     * any idea how this differs from the first one?
     *
     * --
     * May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
     *
     * example:
     *
     * `v_F = ENTITY::GET_ENTITY_MODEL(v_3);`
     * if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
     * `if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) <= 1.0) {`
     * `NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);`
     * }
     * }
     *
     * Hash: 0xB8EF61207C2393A9 | Since: 323 | API-Set: unknown
     */
    export function getHealthPercentage(vehicle: number | IVehicle, maxEngineHealth: number, maxPetrolTankHealth: number, maxBodyHealth: number, maxMainRotorHealth: number, maxTailRotorHealth: number, maxUnkHealth: number): number {
        return GetVehicleHealthPercentage(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6EAAEFC76ACC311F | Since: 757 | API-Set: unknown
     */
    export function getHomingLockedontoState(): number {
        return Citizen.invokeNative('0x6EAAEFC76ACC311F', undefined);
    }

    /**
     * Returns a value depending on the lock-on state of vehicle weapons.
     * 0: not locked on
     * 1: locking on
     * 2: locked on
     *
     * Hash: 0xE6B0E8CFC3633BF0 | Since: 323 | API-Set: unknown
     */
    export function getHomingLockonState(vehicle: number | IVehicle): number {
        return GetVehicleHomingLockonState(vehicle);
    }

    /**
     * Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
     *
     * Hash: 0xCA4AC3EAAE46EC7B | Since: 1103 | API-Set: unknown
     */
    export function getIndividualDoorLockStatus(vehicle: number | IVehicle, doorId: number): number {
        return GetVehicleIndividualDoorLockStatus(vehicle, doorId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8533CAFDE1F0F336 | Since: 505 | API-Set: unknown
     */
    export function getIsDummy(): boolean {
        return Citizen.invokeNative('0x8533CAFDE1F0F336', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4C4642CB7F50B5D | Since: 323 | API-Set: unknown
     */
    export function getIsMercenary(vehicle: number | IVehicle): boolean {
        return GetVehicleIsMercenary(vehicle);
    }

    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x28D37D4F71AC5C58 | Since: 323 | API-Set: unknown
     */
    export function getLayoutHash(vehicle: number | IVehicle): number {
        return GetVehicleLayoutHash(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB91B4C20085BD12F | Since: 323 | API-Set: unknown
     */
    export function getLightsState(vehicle: number | IVehicle): [boolean, boolean, boolean] {
        return GetVehicleLightsState(vehicle);
    }

    /**
     * -1 = no livery
     *
     * Hash: 0x2BB9230590DA5E8A | Since: 323 | API-Set: unknown
     */
    export function getLivery(vehicle: number | IVehicle): number {
        return GetVehicleLivery(vehicle);
    }

    /**
     * Returns index of the current vehicle's secondary livery. A getter for SET_VEHICLE_LIVERY2.
     *
     * Hash: 0x60190048C0764A26 | Since: 505 | API-Set: unknown
     */
    export function getLivery2(vehicle: number | IVehicle): number {
        return GetVehicleRoofLivery(vehicle);
    }

    /**
     * Returns a number of available secondary liveries, or -1 if vehicle has no secondary liveries available.
     *
     * Hash: 0x5ECB40269053C0D4 | Since: 505 | API-Set: unknown
     */
    export function getLivery2Count(vehicle: number | IVehicle): number {
        return GetVehicleRoofLiveryCount(vehicle);
    }

    /**
     * Returns -1 if the vehicle has no livery
     *
     * Hash: 0x87B63E25A529D526 | Since: 323 | API-Set: unknown
     */
    export function getLiveryCount(vehicle: number | IVehicle): number {
        return GetVehicleLiveryCount(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F5EBAB1F260CFCE | Since: 323 | API-Set: unknown
     */
    export function getLockOnTarget(vehicle: number | IVehicle): [boolean, number] {
        return GetVehicleLockOnTarget(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAD7E85FC227197C4 | Since: 323 | API-Set: unknown
     */
    export function getMaxBraking(vehicle: number | IVehicle): number {
        return GetVehicleMaxBraking(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7C4F2C6E744A550 | Since: 323 | API-Set: unknown
     */
    export function getMaxNumberOfPassengers(vehicle: number | IVehicle): number {
        return GetVehicleMaxNumberOfPassengers(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA132FB5370554DB0 | Since: 323 | API-Set: unknown
     */
    export function getMaxTraction(vehicle: number | IVehicle): number {
        return GetVehicleMaxTraction(vehicle);
    }

    /**
     * In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.
     *
     * Returns -1 if the vehicle mod is stock
     *
     * Hash: 0x772960298DA26FDB | Since: 323 | API-Set: unknown
     */
    export function getMod(vehicle: number | IVehicle, modType: number): number {
        return GetVehicleMod(vehicle, modType);
    }

    /**
     * Returns the acceleration of the specified model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x8C044C5C84505B6A | Since: 323 | API-Set: unknown
     */
    export function getModelAcceleration(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelAcceleration(modelHash);
    }

    /**
     * 9.8 * thrust if air vehicle, else 0.38 + drive force?
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x53409B5163D5B846 | Since: 323 | API-Set: unknown
     */
    export function getModelAccelerationMaxMods(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelEstimatedAgility(modelHash);
    }

    /**
     * Returns max speed (without mods) of the specified vehicle model in m/s.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xF417C2502FFFED43 | Since: 323 | API-Set: unknown
     */
    export function getModelEstimatedMaxSpeed(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelEstimatedMaxSpeed(modelHash);
    }

    /**
     * Returns max braking of the specified vehicle model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xDC53FD41B4ED944C | Since: 323 | API-Set: unknown
     */
    export function getModelMaxBraking(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelMaxBraking(modelHash);
    }

    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xBFBA3BA79CFF7EBF | Since: 323 | API-Set: unknown
     */
    export function getModelMaxBrakingMaxMods(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelMaxBrakingMaxMods(modelHash);
    }

    /**
     * Returns max traction of the specified vehicle model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x539DE94D44FDFD0D | Since: 323 | API-Set: unknown
     */
    export function getModelMaxTraction(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelMaxTraction(modelHash);
    }

    /**
     * Returns max number of passengers (including the driver) for the specified vehicle model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x2AD93716F184EDA4 | Since: 323 | API-Set: unknown
     */
    export function getModelNumberOfSeats(modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetVehicleModelNumberOfSeats(modelHash);
    }

    /**
     * Returns `nMonetaryValue` from handling.meta for specific model.
     *
     * Hash: 0x5873C14A52D74236 | Since: 463 | API-Set: unknown
     */
    export function getModelValue(vehicleModel: number | string): number {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        return GetVehicleModelValue(vehicleModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE8D65CA700C9A693 | Since: 323 | API-Set: unknown
     */
    export function getModColor1(vehicle: number | IVehicle): [number, number, number] {
        return GetVehicleModColor1(vehicle);
    }

    /**
     * Returns a string which is the codename of the vehicle's currently selected primary color
     *
     * p1 is always 0
     *
     * Hash: 0xB45085B721EFD38C | Since: 323 | API-Set: unknown
     */
    export function getModColor1Name(vehicle: number | IVehicle): string {
        return GetVehicleModColor1Name(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x81592BE4E3878728 | Since: 323 | API-Set: unknown
     */
    export function getModColor2(vehicle: number | IVehicle): [number, number] {
        return GetVehicleModColor2(vehicle);
    }

    /**
     * Returns a string which is the codename of the vehicle's currently selected secondary color
     *
     * Hash: 0x4967A516ED23A5A1 | Since: 323 | API-Set: unknown
     */
    export function getModColor2Name(vehicle: number | IVehicle): string {
        return GetVehicleModColor2Name(vehicle);
    }

    /**
     * Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH
     *
     * Hash: 0x4593CF82AA179706 | Since: 323 | API-Set: unknown
     */
    export function getModIdentifierHash(vehicle: number | IVehicle, modType: number, modIndex: number): number {
        return GetVehicleModIdentifierHash(vehicle, modType, modIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6325D1A044AE510D | Since: 323 | API-Set: unknown
     */
    export function getModKit(vehicle: number | IVehicle): number {
        return GetVehicleModKit(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC058F5121E54C32 | Since: 323 | API-Set: unknown
     */
    export function getModKitType(vehicle: number | IVehicle): number {
        return GetVehicleModKitType(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90A38E9838E0A8C1 | Since: 323 | API-Set: unknown
     */
    export function getModModifierValue(vehicle: number | IVehicle, modType: number, modIndex: number): number {
        return GetVehicleModModifierValue(vehicle, modType, modIndex);
    }

    /**
     * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
     *
     * Hash: 0xB3924ECD70E095DC | Since: 323 | API-Set: unknown
     */
    export function getModVariation(vehicle: number | IVehicle, modType: number): number {
        return GetVehicleModVariation(vehicle, modType);
    }

    /**
     * Gets the color of the neon lights of the specified vehicle.
     *
     * See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information
     *
     * Hash: 0x7619EEE8C886757F | Since: 323 | API-Set: unknown
     */
    export function getNeonColour(vehicle: number | IVehicle): [number, number, number] {
        return GetVehicleNeonLightsColour(vehicle);
    }

    /**
     * indices:
     * 0 = Left
     * 1 = Right
     * 2 = Front
     * 3 = Back
     *
     * Hash: 0x8C4B92553E4766A5 | Since: 323 | API-Set: unknown
     */
    export function getNeonEnabled(vehicle: number | IVehicle, index: number): boolean {
        return IsVehicleNeonLightEnabled(vehicle, index);
    }

    /**
     * Gets the number of passengers.
     *
     * This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.
     *
     * To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
     *
     * Hash: 0x24CB2137731FFE89 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfPassengers(vehicle: number | IVehicle, includeDriver: boolean, includeDeadOccupants: boolean): number {
        return GetVehicleNumberOfPassengers(vehicle, includeDriver, includeDeadOccupants);
    }

    /**
     * Returns the license plate text from a vehicle. 8 chars maximum.
     *
     * Hash: 0x7CE1CCB9B293020E | Since: 323 | API-Set: unknown
     */
    export function getNumberPlateText(vehicle: number | IVehicle): string {
        return GetVehicleNumberPlateText(vehicle);
    }

    /**
     * Returns the PlateType of a vehicle
     * Blue_on_White_1 = 3,
     * Blue_on_White_2 = 0,
     * Blue_on_White_3 = 4,
     * Yellow_on_Blue = 2,
     * Yellow_on_Black = 1,
     * North_Yankton = 5,
     *
     * Hash: 0xF11BC2DD9A3E7195 | Since: 323 | API-Set: unknown
     */
    export function getNumberPlateTextIndex(vehicle: number | IVehicle): number {
        return GetVehicleNumberPlateTextIndex(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C8CBFE1EA5FC631 | Since: 323 | API-Set: unknown
     */
    export function getNumOfBrokenLoosenParts(vehicle: number | IVehicle): number {
        return GetVehicleNumberOfBrokenBones(vehicle);
    }

    /**
     * Also includes some "turnOffBones" when vehicle mods are installed.
     *
     * Hash: 0x42A4BEB35D372407 | Since: 323 | API-Set: unknown
     */
    export function getNumOfBrokenOffParts(vehicle: number | IVehicle): number {
        return GetVehicleNumberOfBrokenOffBones(vehicle);
    }

    /**
     * 1000 is max health
     * Begins leaking gas at around 650 health
     * -999.90002441406 appears to be minimum health, although nothing special occurs
     *
     * Hash: 0x7D5DABE888D2D074 | Since: 323 | API-Set: unknown
     */
    export function getPetrolTankHealth(vehicle: number | IVehicle): number {
        return GetVehiclePetrolTankHealth(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9CCC9525BF2408E0 | Since: 323 | API-Set: unknown
     */
    export function getPlateType(vehicle: number | IVehicle): number {
        return GetVehiclePlateType(vehicle);
    }

    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x21543C612379DB3C | Since: 323 | API-Set: unknown
     */
    export function getRecordingId(recording: number, script: string): number {
        return GetVehicleRecordingId(recording, script);
    }

    /**
     * Outputs 2 Vector3's.
     * Scripts check if out2.x - out1.x > someshit.x
     * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
     *
     * Hash: 0xDF7E3EEB29642C38 | Since: 323 | API-Set: unknown
     */
    export function getSize(vehicle: number | IVehicle): [Vector3, Vector3] {
        return GetVehicleSuspensionBounds(vehicle);
    }

    /**
     * Gets the trailer of a vehicle and puts it into the trailer parameter.
     *
     * Hash: 0x1CDD6BADC297830D | Since: 323 | API-Set: unknown
     */
    export function getTrailerVehicle(vehicle: number | IVehicle): [boolean, number] {
        return GetVehicleTrailerVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x678B9BB8C3F58FEB | Since: 323 | API-Set: unknown
     */
    export function getTyresCanBurst(vehicle: number | IVehicle): boolean {
        return GetVehicleTyresCanBurst(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB635392A4938B3C3 | Since: 323 | API-Set: unknown
     */
    export function getTyreSmokeColor(vehicle: number | IVehicle): [number, number, number] {
        return GetVehicleTyreSmokeColor(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8181CE2F25CB9BB7 | Since: 1011 | API-Set: unknown
     */
    export function getWeaponRestrictedAmmo(vehicle: number | IVehicle, weaponIndex: number): number {
        return GetVehicleWeaponCapacity(vehicle, weaponIndex);
    }

    /**
     * Returns an int
     *
     * Wheel Types:
     * 0: Sport
     * 1: Muscle
     * 2: Lowrider
     * 3: SUV
     * 4: Offroad
     * 5: Tuner
     * 6: Bike Wheels
     * 7: High End
     * 8: Benny's Originals
     * 9: Benny's Bespoke
     * 10: Racing
     * 11: Street
     * 12: Track
     *
     * Tested in Los Santos Customs
     *
     * Hash: 0xB3ED1BFB4BE636DC | Since: 323 | API-Set: unknown
     */
    export function getWheelType(vehicle: number | IVehicle): number {
        return GetVehicleWheelType(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EE21293DAD47C95 | Since: 323 | API-Set: unknown
     */
    export function getWindowTint(vehicle: number | IVehicle): number {
        return GetVehicleWindowTint(vehicle);
    }

    /**
     * Returns the headlight color index from the vehicle. Value between 0, 12.
     * Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
     * Must enable xenon headlights before it'll take affect.
     *
     * Returns an int, value between 0-12 or 255 if no color is set.
     *
     * Hash: 0x3DFF319A831E0CDB | Since: 1604 | API-Set: unknown
     */
    export function getXenonLightColorIndex(vehicle: number | IVehicle): number {
        return GetVehicleXenonLightsColor(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x91D6DD290888CBAB | Since: 323 | API-Set: unknown
     */
    export function hasInstantFillPopulationFinished(): boolean {
        return HasFilledVehiclePopulation();
    }

    /**
     * No comment provided
     *
     * Hash: 0x06F43E5175EB6D96 | Since: 323 | API-Set: unknown
     */
    export function hasPreloadModsFinished(vehicle: number | IVehicle): boolean {
        return HasPreloadModsFinished(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1BBE0523B8DB9A21 | Since: 323 | API-Set: unknown
     */
    export function hasAssetLoaded(vehicleAsset: number): boolean {
        return HasVehicleAssetLoaded(vehicleAsset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BA68A0840D546AC | Since: 463 | API-Set: unknown
     */
    export function hasPetroltankSetOnFireByEntity(): boolean {
        return Citizen.invokeNative('0x5BA68A0840D546AC', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6ADAABD3068C5235 | Since: 323 | API-Set: unknown
     */
    export function hasPhoneExplosiveDevice(): boolean {
        return HasVehiclePhoneExplosiveDevice();
    }

    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x300D614A4C785FC4 | Since: 323 | API-Set: unknown
     */
    export function hasRecordingBeenLoaded(recording: number, script: string): boolean {
        return HasVehicleRecordingBeenLoaded(recording, script);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A83F5F9963775EF | Since: 323 | API-Set: unknown
     */
    export function haveModsStreamedIn(vehicle: number | IVehicle): boolean {
        return HaveVehicleModsStreamedIn(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B407F2525E93644 | Since: 2944 | API-Set: unknown
     */
    export function haveRearDoorsBeenBlownOpenByStickybomb(vehicle: number | IVehicle): boolean {
        return Citizen.invokeNative('0x6B407F2525E93644', vehicle);
    }

    /**
     * Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
     *
     * Hash: 0xAE71FB656C600587 | Since: 1604 | API-Set: unknown
     */
    export function hideTombstone(vehicle: number | IVehicle, toggle: boolean): void {
        HideVehicleTombstone(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x48ADC8A773564670 | Since: 323 | API-Set: unknown
     */
    export function instantlyFillPopulation(): void {
        InstantlyFillVehiclePopulation();
    }

    /**
     * No comment provided
     *
     * Hash: 0x62CA17B74C435651 | Since: 323 | API-Set: unknown
     */
    export function isAnyEntityAttachedToHandlerFrame(vehicle: number | IVehicle): boolean {
        return IsAnyEntityAttachedToHandlerFrame(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x291E373D483E7EE7 | Since: 323 | API-Set: unknown
     */
    export function isAnyPedRappellingFromHeli(vehicle: number | IVehicle): boolean {
        return IsAnyPedRappellingFromHeli(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61E1DD6125A3EEE6 | Since: 323 | API-Set: unknown
     */
    export function isAnyNearPoint(pos: Vector3, radius: number): boolean {
        return IsAnyVehicleNearPoint(pos.x, pos.y, pos.z, radius);
    }

    /**
     * Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.
     *
     * Hash: 0x9F243D3919F442FE | Since: 323 | API-Set: unknown
     */
    export function isBig(vehicle: number | IVehicle): boolean {
        return IsBigVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB0AD1238A709B1A2 | Since: 573 | API-Set: unknown
     */
    export function isBoatAnchored(vehicle: number | IVehicle): boolean {
        return IsBoatAnchored(vehicle);
    }

    /**
     * Usage:
     *
     * public bool isCopInRange(Vector3 Location, float Range)
     * {
     * return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
     * }
     *
     * Hash: 0x7EEF65D5F153E26A | Since: 323 | API-Set: unknown
     */
    export function isCopInArea3d(x1: number, x2: number, y1: number, y2: number, z1: number, z2: number): boolean {
        return IsCopVehicleInArea3d(x1, x2, y1, y2, z1, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57715966069157AD | Since: 323 | API-Set: unknown
     */
    export function isEntityAttachedToHandlerFrame(vehicle: number | IVehicle, entity: number | IEntity): boolean {
        return IsEntityAttachedToHandlerFrame(vehicle, entity);
    }

    /**
     * Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
     *
     * seatIndex  = -1 being the driver seat.
     * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
     * side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
     * onEnter = check if you can enter (true) or exit (false) a vehicle.
     *
     * Hash: 0x639431E895B9AA57 | Since: 323 | API-Set: unknown
     */
    export function isEntryPointForSeatClear(ped: number | IPed, vehicle: number | IVehicle, seatIndex: number, side: boolean, onEnter: boolean): boolean {
        return IsVehicleSeatAccessible(ped, vehicle, seatIndex, side, onEnter);
    }

    /**
     * Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.
     *
     * Hash: 0x534E36D4DB9ECC5D | Since: 1493 | API-Set: unknown
     */
    export function isExtraBrokenOff(vehicle: number | IVehicle, extraId: number): boolean {
        return DoesVehicleTyreExist(vehicle, extraId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x89D630CF5EA96D23 | Since: 323 | API-Set: unknown
     */
    export function isHandlerFrameLinedUpWithContainer(vehicle: number | IVehicle, entity: number | IEntity): boolean {
        return IsHandlerFrameAboveContainer(vehicle, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x634148744F385576 | Since: 323 | API-Set: unknown
     */
    export function isHeliLandingAreaBlocked(vehicle: number | IVehicle): boolean {
        return IsHeliLandingAreaBlocked(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC74B4BE25EB6C8A | Since: 323 | API-Set: unknown
     */
    export function isHeliPartBroken(vehicle: number | IVehicle): boolean {
        return IsHeliPartBroken(vehicle, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAD464F2E18836BFC | Since: 2372 | API-Set: unknown
     */
    export function isMissionTrain(train: number | IVehicle): boolean {
        return IsMissionTrain(train);
    }

    /**
     * No comment provided
     *
     * Hash: 0x491E822B2C464FE4 | Since: 3095 | API-Set: unknown
     */
    export function isNitrousActive(vehicle: number | IVehicle): boolean {
        return IsNitrousActive(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB09D25E77C33EB3F | Since: 463 | API-Set: unknown
     */
    export function isPedExclusiveDriverOf(ped: number | IPed, vehicle: number | IVehicle): [boolean, number] {
        return IsPedExclusiveDriverOfVehicle(ped, vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4198AB0022B15F87 | Since: 323 | API-Set: unknown
     */
    export function isPlaneLandingGearIntact(plane: number | IVehicle): boolean {
        return IsPlaneLandingGearIntact(plane);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C8A4C2C19E68EEC | Since: 323 | API-Set: unknown
     */
    export function isPlaybackGoingOnFor(vehicle: number | IVehicle): boolean {
        return IsPlaybackGoingOnForVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAEA8FD591FAD4106 | Since: 323 | API-Set: unknown
     */
    export function isPlaybackUsingAiGoingOnFor(vehicle: number | IVehicle): boolean {
        return IsPlaybackUsingAiGoingOnForVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3D34E80EED4AE3BE | Since: 944 | API-Set: unknown
     */
    export function isRocketBoostActive(vehicle: number | IVehicle): boolean {
        return IsVehicleRocketBoostActive(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF7F203E31F96F6A1 | Since: 323 | API-Set: unknown
     */
    export function isSeatWarpOnly(vehicle: number | IVehicle, seatIndex: number): boolean {
        return IsSeatWarpOnly(vehicle, seatIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7504C0F113AB50FC | Since: 323 | API-Set: unknown
     */
    export function isTaxiLightOn(vehicle: number | IVehicle): boolean {
        return IsTaxiLightOn(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x633F6F44A537EBB6 | Since: 944 | API-Set: unknown
     */
    export function isThisModelAnAmphibiousCar(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelAnAmphibiousCar(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1A9FC1C76A6730D | Since: 1103 | API-Set: unknown
     */
    export function isThisModelAnAmphibiousQuadbike(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelAnAmphibiousQuadbike(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF94DD42F63BDED2 | Since: 323 | API-Set: unknown
     */
    export function isThisModelABicycle(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelABicycle(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB50C0B0CEDC6CE84 | Since: 323 | API-Set: unknown
     */
    export function isThisModelABike(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelABike(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0x45A9187928F4B9E3 | Since: 323 | API-Set: unknown
     */
    export function isThisModelABoat(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelABoat(model);
    }

    /**
     * To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.
     *
     * Hash: 0x7F6DB52EEFC96DF8 | Since: 323 | API-Set: unknown
     */
    export function isThisModelACar(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelACar(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCE4334788AF94EA | Since: 323 | API-Set: unknown
     */
    export function isThisModelAHeli(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelAHeli(model);
    }

    /**
     * Checks if model is a boat, then checks for FLAG_IS_JETSKI.
     *
     * Hash: 0x9537097412CF75FE | Since: 323 | API-Set: unknown
     */
    export function isThisModelAJetski(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelAJetski(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0948AB42D7BA0DE | Since: 323 | API-Set: unknown
     */
    export function isThisModelAPlane(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelAPlane(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0x39DAC362EE65FA28 | Since: 323 | API-Set: unknown
     */
    export function isThisModelAQuadbike(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelAQuadbike(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAB935175B22E822B | Since: 323 | API-Set: unknown
     */
    export function isThisModelATrain(model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsThisModelATrain(model);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84B233A8C8FC8AE7 | Since: 323 | API-Set: unknown
     */
    export function isToggleModOn(vehicle: number | IVehicle, modType: number): boolean {
        return IsToggleModOn(vehicle, modType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE33FFA906CE74880 | Since: 323 | API-Set: unknown
     */
    export function isTurretSeat(vehicle: number | IVehicle, seatIndex: number): boolean {
        return IsTurretSeat(vehicle, seatIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4319E335B71FFF34 | Since: 323 | API-Set: unknown
     */
    export function isAlarmActivated(vehicle: number | IVehicle): boolean {
        return IsVehicleAlarmActivated(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD40148F22E81A1D9 | Since: 323 | API-Set: unknown
     */
    export function isAttachedToCargobob(cargobob: number | IVehicle, vehicleAttached: number | IVehicle): boolean {
        return IsVehicleAttachedToCargobob(cargobob, vehicleAttached);
    }

    /**
     * Scripts verify that towTruck is the first parameter, not the second.
     *
     * Hash: 0x146DF9EC4C4B9FD4 | Since: 323 | API-Set: unknown
     */
    export function isAttachedToTowTruck(towTruck: number | IVehicle, vehicle: number | IVehicle): boolean {
        return IsVehicleAttachedToTowTruck(towTruck, vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7CF3C4F9F489F0C | Since: 323 | API-Set: unknown
     */
    export function isAttachedToTrailer(vehicle: number | IVehicle): boolean {
        return IsVehicleAttachedToTrailer(vehicle);
    }

    /**
     * Returns true if the vehicle has a convertible roof.
     *
     * p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.
     *
     * Hash: 0x52F357A30698BCCE | Since: 323 | API-Set: unknown
     */
    export function isAConvertible(vehicle: number | IVehicle): boolean {
        return IsVehicleAConvertible(vehicle, false);
    }

    /**
     * Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
     *
     * Hash: 0xC69BB1D832A710EF | Since: 1493 | API-Set: unknown
     */
    export function isBeingBroughtToHalt(vehicle: number | IVehicle): boolean {
        return IsVehicleBeingHalted(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x27B926779DEB502D | Since: 323 | API-Set: unknown
     */
    export function isBumperBouncing(vehicle: number | IVehicle, frontBumper: boolean): boolean {
        return IsVehicleBumperBouncing(vehicle, frontBumper);
    }

    /**
     * No comment provided
     *
     * Hash: 0x468056A6BB6F3846 | Since: 323 | API-Set: unknown
     */
    export function isBumperBrokenOff(vehicle: number | IVehicle, frontBumper: boolean): boolean {
        return IsVehicleBumperBrokenOff(vehicle, frontBumper);
    }

    /**
     * doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
     *
     * Hash: 0xB8E181E559464527 | Since: 323 | API-Set: unknown
     */
    export function isDoorDamaged(veh: number | IVehicle, doorID: number): boolean {
        return IsVehicleDoorDamaged(veh, doorID);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x3E933CFF7B111C22 | Since: 323 | API-Set: unknown
     */
    export function isDoorFullyOpen(vehicle: number | IVehicle, doorId: number): boolean {
        return IsVehicleDoorFullyOpen(vehicle, doorId);
    }

    /**
     * p1 is always 0 in the scripts.
     *
     * p1 = check if vehicle is on fire
     *
     * Hash: 0x4C241E39B23DF959 | Since: 323 | API-Set: unknown
     */
    export function isDriveable(vehicle: number | IVehicle, isOnFireCheck: boolean): boolean {
        return IsVehicleDriveable(vehicle, isOnFireCheck);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2E6822DBFD6C8BD | Since: 323 | API-Set: unknown
     */
    export function isExtraTurnedOn(vehicle: number | IVehicle, extraId: number): boolean {
        return IsVehicleExtraTurnedOn(vehicle, extraId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F25887F3C104278 | Since: 323 | API-Set: unknown
     */
    export function isHighDetail(vehicle: number | IVehicle): boolean {
        return IsVehicleHighDetail(vehicle);
    }

    /**
     * Returns whether the specified vehicle is currently in a burnout.
     *
     *
     * vb.net
     * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
     * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
     * End Function
     *
     * Hash: 0x1297A88E081430EB | Since: 323 | API-Set: unknown
     */
    export function isInBurnout(vehicle: number | IVehicle): boolean {
        return IsVehicleInBurnout(vehicle);
    }

    /**
     * garageName example "Michael - Beverly Hills"
     *
     * Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
     *
     * Hash: 0xCEE4490CD57BB3C2 | Since: 323 | API-Set: unknown
     */
    export function isInGarageArea(garageName: string, vehicle: number | IVehicle): boolean {
        return IsVehicleInGarageArea(garageName, vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA77DC70BD689A1E5 | Since: 1290 | API-Set: unknown
     */
    export function isInSubmarineMode(vehicle: number | IVehicle): boolean {
        return IsVehicleInSubmarineMode(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x423E8DE37D934D89 | Since: 323 | API-Set: unknown
     */
    export function isModel(vehicle: number | IVehicle, model: number | string): boolean {
        if (typeof model === 'string') model = misc.getHashKey(model)
        return IsVehicleModel(vehicle, model);
    }

    /**
     * Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.
     *
     * Hash: 0x00834EAC4A96E010 | Since: 2699 | API-Set: unknown
     */
    export function isModGen9Exclusive(vehicle: number | IVehicle, modType: number, modIndex: number): boolean {
        return IsVehicleModHswExclusive(vehicle, modType, modIndex);
    }

    /**
     * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
     * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
     * End Function
     *
     *
     * Hash: 0xB104CD1BABF302E2 | Since: 323 | API-Set: unknown
     */
    export function isOnAllWheels(vehicle: number | IVehicle): boolean {
        return IsVehicleOnAllWheels(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DE51E9C80B116CF | Since: 1011 | API-Set: unknown
     */
    export function isParachuteDeployed(vehicle: number | IVehicle): boolean {
        return IsVehicleParachuteActive(vehicle);
    }

    /**
     * Returns true if the vehicle is being slipstreamed by another vehicle
     *
     * Hash: 0x48C633E94A8142A7 | Since: 877 | API-Set: unknown
     */
    export function isProducingSlipStream(vehicle: number | IVehicle): boolean {
        return IsVehicleSlipstreamLeader(vehicle);
    }

    /**
     * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
     *
     * @Author Nac
     *
     * Hash: 0xC0F97FCE55094987 | Since: 323 | API-Set: unknown
     */
    export function isSearchlightOn(vehicle: number | IVehicle): boolean {
        return IsVehicleSearchlightOn(vehicle);
    }

    /**
     * Check if a vehicle seat is free.
     *
     * seatIndex  = -1 being the driver seat.
     * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
     * isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
     *
     * Hash: 0x22AC59A870E6A669 | Since: 323 | API-Set: unknown
     */
    export function isSeatFree(vehicle: number | IVehicle, seatIndex: number, isTaskRunning: boolean): boolean {
        return IsVehicleSeatFree(vehicle, seatIndex, isTaskRunning);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB5CC40FBCB586380 | Since: 323 | API-Set: unknown
     */
    export function isSirenAudioOn(vehicle: number | IVehicle): boolean {
        return IsVehicleSirenAudioOn(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C9BF537BE2634B2 | Since: 323 | API-Set: unknown
     */
    export function isSirenOn(vehicle: number | IVehicle): boolean {
        return IsVehicleSirenOn(vehicle);
    }

    /**
     * Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
     *
     * Hash: 0x8D474C8FAEFF6CDE | Since: 323 | API-Set: unknown
     */
    export function isSprayable(vehicle: number | IVehicle): boolean {
        return IsVehicleSprayable(vehicle);
    }

    /**
     * Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.
     *
     * Hash: 0x4AF9BD80EEBEB453 | Since: 323 | API-Set: unknown
     */
    export function isStolen(vehicle: number | IVehicle): boolean {
        return IsVehicleStolen(vehicle);
    }

    /**
     * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
     *
     * For some vehicles it returns true if the current speed is <= 0.00039999999.
     *
     * Hash: 0x5721B434AD84D57A | Since: 323 | API-Set: unknown
     */
    export function isStopped(vehicle: number | IVehicle): boolean {
        return IsVehicleStopped(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2959F696AE390A99 | Since: 323 | API-Set: unknown
     */
    export function isStoppedAtTrafficLights(vehicle: number | IVehicle): boolean {
        return IsVehicleStoppedAtTrafficLights(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB497F06B288DCFDF | Since: 323 | API-Set: unknown
     */
    export function isStuckOnRoof(vehicle: number | IVehicle): boolean {
        return IsVehicleStuckOnRoof(vehicle);
    }

    /**
     * p1 can be anywhere from 0 to 3 in the scripts.
     * p2 being how long in milliseconds the vehicle has been stuck
     *
     * Hash: 0x679BE1DAF71DA874 | Since: 323 | API-Set: unknown
     */
    export function isStuckTimerUp(vehicle: number | IVehicle, ms: number): boolean {
        return IsVehicleStuckTimerUp(vehicle, 0, ms);
    }

    /**
     * wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
     * completely - is to check if tire completely gone from rim.
     *
     * '0 = wheel_lf / bike, plane or jet front
     * '1 = wheel_rf
     * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
     * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
     * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
     * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
     * '45 = 6 wheels trailer mid wheel left
     * '47 = 6 wheels trailer mid wheel right
     *
     * Hash: 0xBA291848A0815CA9 | Since: 323 | API-Set: unknown
     */
    export function isTyreBurst(vehicle: number | IVehicle, wheelID: number, completely: boolean): boolean {
        return IsVehicleTyreBurst(vehicle, wheelID, completely);
    }

    /**
     * must be called after TRACK_VEHICLE_VISIBILITY
     *
     * it's not instant so probabilly must pass an 'update' to see correct result.
     *
     * Hash: 0xAA0A52D24FB98293 | Since: 323 | API-Set: unknown
     */
    export function isVisible(vehicle: number | IVehicle): boolean {
        return IsVehicleVisible(vehicle);
    }

    /**
     * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x563B65A643ED072E | Since: 1011 | API-Set: unknown
     */
    export function isWeaponDisabled(weaponHash: number | string, vehicle: number | IVehicle, owner: number | IPed): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return IsVehicleWeaponDisabled(weaponHash, vehicle, owner);
    }

    /**
     * This will return false if the window is broken, or rolled down.
     * Window indexes:
     * 0 = Front Right Window
     * 1 = Front Left Window
     * 2 = Back Right Window
     * 3 = Back Left Window
     *
     *
     * Those numbers go on for vehicles that have more than 4 doors with windows.
     *
     * Hash: 0x46E571A0E20D01F1 | Since: 323 | API-Set: unknown
     */
    export function isWindowIntact(vehicle: number | IVehicle, windowIndex: number): boolean {
        return IsVehicleWindowIntact(vehicle, windowIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFD778E7904C255E | Since: 323 | API-Set: unknown
     */
    export function lockDoorsWhenNoLongerNeeded(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xCFD778E7904C255E', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDED51F703D0FA83D | Since: 323 | API-Set: unknown
     */
    export function lowerConvertibleRoof(vehicle: number | IVehicle, instantlyLower: boolean): void {
        LowerConvertibleRoof(vehicle, instantlyLower);
    }

    /**
     * No comment provided
     *
     * Hash: 0x923A293361DF44E5 | Since: 2802 | API-Set: unknown
     */
    export function lowerForkliftForks(forklift: number | IVehicle): void {
        Citizen.invokeNative('0x923A293361DF44E5', forklift);
    }

    /**
     * No comment provided
     *
     * Hash: 0x93A3996368C94158 | Since: 323 | API-Set: unknown
     */
    export function modifyTopSpeed(vehicle: number | IVehicle, value: number): void {
        ModifyVehicleTopSpeed(vehicle, value);
    }

    /**
     * Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.
     *
     * Hash: 0xA4A9A4C40E615885 | Since: 1604 | API-Set: unknown
     */
    export function networkCapEmptyCrowdingsRemoval(): void {
        Citizen.invokeNative('0xA4A9A4C40E615885', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x51DB102F4A3BA5E0 | Since: 323 | API-Set: unknown
     */
    export function networkEnableEmptyCrowdingsRemoval(toggle: boolean): void {
        Citizen.invokeNative('0x51DB102F4A3BA5E0', toggle);
    }

    /**
     * Implemented only for trains.
     *
     * Hash: 0xEC0C1D4922AF9754 | Since: 2372 | API-Set: unknown
     */
    export function networkUseHighPrecisionTrainBlending(vehicle: number | IVehicle, toggle: boolean): void {
        NetworkUseHighPrecisionVehicleBlending(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x87E7F24270732CB1 | Since: 323 | API-Set: unknown
     */
    export function openBombBayDoors(vehicle: number | IVehicle): void {
        OpenBombBayDoors(vehicle);
    }

    /**
     * Used for helis.
     *
     * Hash: 0x5EE5632F47AE9695 | Since: 463 | API-Set: unknown
     */
    export function overridePlaneDamageThrehsold(vehicle: number | IVehicle, health: number): void {
        Citizen.invokeNative('0x5EE5632F47AE9695', vehicle, health);
    }

    /**
     * No comment provided
     *
     * Hash: 0x632A689BF42301B1 | Since: 323 | API-Set: unknown
     */
    export function pausePlaybackRecorded(vehicle: number | IVehicle): void {
        PausePlaybackRecordedVehicle(vehicle);
    }

    /**
     * Pops off the "roof" bone in the direction of the specified offset from the vehicle.
     *
     * Hash: 0xE38CB9D7D39FDBCC | Since: 323 | API-Set: unknown
     */
    export function popOffRoofWithImpulse(vehicle: number | IVehicle, pos: Vector3): void {
        EjectJb700Roof(vehicle, pos.x, pos.y, pos.z);
    }

    /**
     * Detaches the vehicle's windscreen.
     * For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
     *
     * Hash: 0x6D645D59FB5F5AD3 | Since: 323 | API-Set: unknown
     */
    export function popOutWindscreen(vehicle: number | IVehicle): void {
        PopOutVehicleWindscreen(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x758F49C24925568A | Since: 323 | API-Set: unknown
     */
    export function preloadMod(vehicle: number | IVehicle, modType: number, modIndex: number): void {
        PreloadVehicleMod(vehicle, modType, modIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F5FB35D7E88FC70 | Since: 323 | API-Set: unknown
     */
    export function raiseConvertibleRoof(vehicle: number | IVehicle, instantlyRaise: boolean): void {
        RaiseConvertibleRoof(vehicle, instantlyRaise);
    }

    /**
     * No comment provided
     *
     * Hash: 0x445D79F995508307 | Since: 323 | API-Set: unknown
     */
    export function releasePreloadMods(vehicle: number | IVehicle): void {
        ReleasePreloadMods(vehicle);
    }

    /**
     * Retracts the hook on the cargobob.
     *
     * Note: after you retract it the natives for dropping the hook no longer work
     *
     * Hash: 0x9768CF648F54C804 | Since: 323 | API-Set: unknown
     */
    export function removePickUpRopeForCargobob(cargobob: number | IVehicle): void {
        RemovePickUpRopeForCargobob(cargobob);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1033371FC8E842A7 | Since: 323 | API-Set: unknown
     */
    export function removeRoadNodeSpeedZone(speedzone: number): boolean {
        return RemoveRoadNodeSpeedZone(speedzone);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46A1E1A299EC4BBA | Since: 323 | API-Set: unknown
     */
    export function removesFromGeneratorsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
        RemoveVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xACE699C71AB9DEB5 | Since: 323 | API-Set: unknown
     */
    export function removeAsset(vehicleAsset: number): void {
        RemoveVehicleAsset(vehicleAsset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE30524E1871F481D | Since: 323 | API-Set: unknown
     */
    export function removeCombatAvoidanceArea(): void {
        RemoveVehicleCombatAvoidanceArea(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x00689CDE5F7C6787 | Since: 323 | API-Set: unknown
     */
    export function removeHighDetailModel(vehicle: number | IVehicle): void {
        RemoveVehicleHighDetailModel(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92D619E420858204 | Since: 323 | API-Set: unknown
     */
    export function removeMod(vehicle: number | IVehicle, modType: number): void {
        RemoveVehicleMod(vehicle, modType);
    }

    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0xF1160ACCF98A3FC8 | Since: 323 | API-Set: unknown
     */
    export function removeRecording(recording: number, script: string): void {
        RemoveVehicleRecording(recording, script);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8386BFB614D06749 | Since: 323 | API-Set: unknown
     */
    export function removeStuckCheck(vehicle: number | IVehicle): void {
        RemoveVehicleStuckCheck(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC53EB42A499A7E90 | Since: 323 | API-Set: unknown
     */
    export function removeUpsidedownCheck(vehicle: number | IVehicle): void {
        RemoveVehicleUpsidedownCheck(vehicle);
    }

    /**
     * windowIndex:
     * 0 = Front Right Window
     * 1 = Front Left Window
     * 2 = Back Right Window
     * 3 = Back Left Window
     * 4 = Unknown
     * 5 = Unknown
     * 6 = Windscreen
     * 7 = Rear Windscreen
     *
     * Hash: 0xA711568EEDB43069 | Since: 323 | API-Set: unknown
     */
    export function removeWindow(vehicle: number | IVehicle, windowIndex: number): void {
        RemoveVehicleWindow(vehicle, windowIndex);
    }

    /**
     * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
     *
     * vehicle found that have asset's:
     * cargobob3
     * submersible
     * blazer
     *
     * Hash: 0x81A15811460FAB3A | Since: 323 | API-Set: unknown
     */
    export function requestAsset(vehicleHash: number | string, vehicleAsset: number): void {
        if (typeof vehicleHash === 'string') vehicleHash = misc.getHashKey(vehicleHash)
        RequestVehicleAsset(vehicleHash, vehicleAsset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDBA3C090E3D74690 | Since: 323 | API-Set: unknown
     */
    export function requestDial(vehicle: number | IVehicle): void {
        RequestVehicleDashboardScaleformMovie(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6E9FDCB2C76785E | Since: 323 | API-Set: unknown
     */
    export function requestHighDetailModel(vehicle: number | IVehicle): void {
        RequestVehicleHighDetailModel(vehicle);
    }

    /**
     * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
     * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
     * Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
     *
     * Hash: 0xAF514CABE74CBF15 | Since: 323 | API-Set: unknown
     */
    export function requestRecording(recording: number, script: string): void {
        RequestVehicleRecording(recording, script);
    }

    /**
     * Resets the effect of SET_FORMATION_LEADER
     *
     * Hash: 0xE2F53F172B45EDE1 | Since: 877 | API-Set: unknown
     */
    export function resetFormationLeader(): void {
        Citizen.invokeNative('0xE2F53F172B45EDE1');
    }

    /**
     * The inner function has a switch on the second parameter. It's the stuck timer index.
     *
     * Here's some pseudo code I wrote for the inner function:
     * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
     * {
     * switch (timerIndex)
     * {
     * case 0:
     * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
     * case 1:
     * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
     * case 2:
     * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
     * case 3:
     * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
     * case 4:
     * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
     * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
     * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
     * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
     * break;
     * };
     * }
     *
     * Hash: 0xD7591B0065AFAA7A | Since: 323 | API-Set: unknown
     */
    export function resetStuckTimer(vehicle: number | IVehicle, nullAttributes: number): void {
        ResetVehicleStuckTimer(vehicle, nullAttributes);
    }

    /**
     * No comment provided
     *
     * Hash: 0x21D2E5662C1F6FED | Since: 323 | API-Set: unknown
     */
    export function resetWheels(vehicle: number | IVehicle, toggle: boolean): void {
        ResetVehicleWheels(vehicle, toggle);
    }

    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Hash: 0x7AD9E6CE657D69E3 | Since: 323 | API-Set: unknown
     */
    export function rollDownWindow(vehicle: number | IVehicle, windowIndex: number): void {
        RollDownWindow(vehicle, windowIndex);
    }

    /**
     * Roll down all the windows of the vehicle passed through the first parameter.
     *
     * Hash: 0x85796B0549DDE156 | Since: 323 | API-Set: unknown
     */
    export function rollDownWindows(vehicle: number | IVehicle): void {
        RollDownWindows(vehicle);
    }

    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Hash: 0x602E548F46E24D59 | Since: 323 | API-Set: unknown
     */
    export function rollUpWindow(vehicle: number | IVehicle, windowIndex: number): void {
        RollUpWindow(vehicle, windowIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5845066D8A1EA7F7 | Since: 323 | API-Set: unknown
     */
    export function setAdditionalRotationForRecordedPlayback(vehicle: number | IVehicle, pos: Vector3): void {
        Citizen.invokeNative('0x5845066D8A1EA7F7', vehicle, pos.x, pos.y, pos.z, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF8B49F5BA7F850E7 | Since: 2060 | API-Set: unknown
     */
    export function setAircraftIgnoreHightmapOptimisation(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xF8B49F5BA7F850E7', vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE5810AC70602F2F5 | Since: 323 | API-Set: unknown
     */
    export function setAircraftPilotSkillNoiseScalar(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xE5810AC70602F2F5', vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80E3357FDEF45C21 | Since: 944 | API-Set: unknown
     */
    export function setAllowRammingSoopOrRamp(): void {
        Citizen.invokeNative('0x80E3357FDEF45C21', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3441CAD2F2231923 | Since: 323 | API-Set: unknown
     */
    export function setAllowExplodesOnContact(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x3441CAD2F2231923', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x608207E7A8FB787C | Since: 323 | API-Set: unknown
     */
    export function setAllLowPriorityGeneratorsActive(active: boolean): void {
        SetAllLowPriorityVehicleGeneratorsActive(active);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34AD89078831A4BC | Since: 323 | API-Set: unknown
     */
    export function setAllGeneratorsActive(): void {
        SetAllVehicleGeneratorsActive();
    }

    /**
     * When p6 is true, vehicle generators are active.
     * p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.
     *
     * Hash: 0xC12321827687FE4D | Since: 323 | API-Set: unknown
     */
    export function setAllGeneratorsActiveInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean): void {
        SetAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, toggle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35E0654F4BAD7971 | Since: 323 | API-Set: unknown
     */
    export function setAmbientNeonEnabled(): void {
        Citizen.invokeNative('0x35E0654F4BAD7971', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90B6DA738A9A25DA | Since: 323 | API-Set: unknown
     */
    export function setAmbientRangeMultiplierThisFrame(value: number): void {
        SetAmbientVehicleRangeMultiplierThisFrame(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0205F5365292D2EB | Since: 1290 | API-Set: unknown
     */
    export function setArriveDistanceOverrideForPersuitAttack(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x0205F5365292D2EB', vehicle, 0);
    }

    /**
     * When enabled, the player won't fall off the bike when landing from large heights.
     *
     * Hash: 0x73561D4425A021A2 | Since: 791 | API-Set: unknown
     */
    export function setBikeEasyToLand(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x73561D4425A021A2', vehicle, toggle);
    }

    /**
     * Only works on bikes, both X and Y work in the -1 - 1 range.
     *
     * X forces the bike to turn left or right (-1, 1)
     * Y forces the bike to lean to the left or to the right (-1, 1)
     *
     * Example with X -1/Y 1
     * http://i.imgur.com/TgIuAPJ.jpg
     *
     * Hash: 0x9CFA4896C3A53CBB | Since: 323 | API-Set: unknown
     */
    export function setBikeOnStand(vehicle: number | IVehicle, x: number, y: number): void {
        SetBikeOnStand(vehicle, x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75DBEC174AEEAD10 | Since: 323 | API-Set: unknown
     */
    export function setBoatAnchor(vehicle: number | IVehicle, toggle: boolean): void {
        SetBoatAnchor(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A6A279F3AA4FD70 | Since: 323 | API-Set: unknown
     */
    export function setBoatDisableAvoidance(vehicle: number | IVehicle): void {
        SetBoatDisableAvoidance(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED5EDE9E676643C9 | Since: 944 | API-Set: unknown
     */
    export function setBoatIgnoreLandProbes(): void {
        Citizen.invokeNative('0xED5EDE9E676643C9', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE842A9398079BD82 | Since: 323 | API-Set: unknown
     */
    export function setBoatLowLodAnchorDistance(vehicle: number | IVehicle, value: number): void {
        SetBoatLowLodAnchorDistance(vehicle, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3EBAAE484798530 | Since: 323 | API-Set: unknown
     */
    export function setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle: number | IVehicle, toggle: boolean): void {
        SetBoatRemainsAnchoredWhilePlayerIsDriver(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F719973E1445BA2 | Since: 323 | API-Set: unknown
     */
    export function setBoatSinksWhenWrecked(vehicle: number | IVehicle, toggle: boolean): void {
        SetBoatSinksWhenWrecked(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD32E46AA95C1DD2 | Since: 757 | API-Set: unknown
     */
    export function setBoatWrecked(vehicle: number | IVehicle): void {
        SetBoatIsSinking(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7DCDF4DED40A8F4 | Since: 323 | API-Set: unknown
     */
    export function setCanAdjustGroundClearance(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xA7DCDF4DED40A8F4', vehicle, false);
    }

    /**
     * Hardcoded to not work in multiplayer.
     *
     * Hash: 0x52BBA29D5EC69356 | Since: 323 | API-Set: unknown
     */
    export function setCanRespray(vehicle: number | IVehicle, state: boolean): void {
        SetCanResprayVehicle(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1201E8A3290A3B98 | Since: 505 | API-Set: unknown
     */
    export function setCanUseHydraulics(vehicle: number | IVehicle, toggle: boolean): void {
        SetCamberedWheelsDisabled(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F34B0626C594380 | Since: 757 | API-Set: unknown
     */
    export function setCargobobExcludeFromPickupEntity(): void {
        SetCargobobExcludeFromPickupEntity(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x72BECCF4B829522E | Since: 1103 | API-Set: unknown
     */
    export function setCargobobExtaPickupRange(): void {
        Citizen.invokeNative('0x72BECCF4B829522E', undefined, undefined);
    }

    /**
     * Stops cargobob from being able to detach the attached vehicle.
     *
     * Hash: 0x571FEB383F629926 | Since: 323 | API-Set: unknown
     */
    export function setCargobobForceDontDetach(cargobob: number | IVehicle, toggle: boolean): void {
        SetCargobobForceDontDetachVehicle(cargobob, toggle);
    }

    /**
     * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
     *
     * Hash: 0x9A665550F8DA349B | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetActive(cargobob: number | IVehicle, isActive: boolean): void {
        SetCargobobPickupMagnetActive(cargobob, isActive);
    }

    /**
     * No comment provided
     *
     * Hash: 0x56EB5E94318D3FB6 | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetEnsurePickupEntityUpright(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x56EB5E94318D3FB6', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA17BAD153B51547E | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetFalloff(cargobob: number | IVehicle): void {
        SetCargobobPickupMagnetEffectRadius(cargobob, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x685D5561680D088B | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetPullRopeLength(vehicle: number | IVehicle): void {
        SetCargobobPickupMagnetFalloff(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED8286F71A819BAA | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetPullStrength(cargobob: number | IVehicle): void {
        SetCargobobPickupMagnetPullStrength(cargobob, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D8EAC07506291FB | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetReducedFalloff(cargobob: number | IVehicle): void {
        SetCargobobPickupMagnetPullRopeLength(cargobob, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66979ACF5102FD2F | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetReducedStrength(cargobob: number | IVehicle): void {
        SetCargobobPickupMagnetReducedFalloff(cargobob, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9BDDC73CC6A115D4 | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetSetAmbientMode(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x9BDDC73CC6A115D4', vehicle, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE301BD63E9E13CF0 | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetSetTargetedMode(vehicle: number | IVehicle, cargobob: number | IVehicle): void {
        SetCargobobPickupMagnetReducedStrength(vehicle, cargobob);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCBFCD9D1DAC19E2 | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupMagnetStrength(cargobob: number | IVehicle, strength: number): void {
        SetCargobobPickupMagnetStrength(cargobob, strength);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF1182F682F65307 | Since: 323 | API-Set: unknown
     */
    export function setCargobobPickupRopeDampingMultiplier(): void {
        SetCargobobPickupRopeDampingMultiplier(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0D5F65A8F4EBDAB5 | Since: 1103 | API-Set: unknown
     */
    export function setCargobobPickupRopeType(): void {
        SetCargobobPickupRopeType(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9562064627FF9DB | Since: 573 | API-Set: unknown
     */
    export function setCarjackMissionRemovalParameters(): void {
        Citizen.invokeNative('0xB9562064627FF9DB', undefined, undefined);
    }

    /**
     * Initially used in Max Payne 3, that's why we know the name.
     *
     * Hash: 0xFC40CBF7B90CA77C | Since: 877 | API-Set: unknown
     */
    export function setCarBootOpen(vehicle: number | IVehicle): void {
        SetCarBootOpen(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84FD40F56075E816 | Since: 323 | API-Set: unknown
     */
    export function setCarHighSpeedBumpSeverityMultiplier(multiplier: number): void {
        SetCarHighSpeedBumpSeverityMultiplier(multiplier);
    }

    /**
     * Only used in R* Script fm_content_cargo
     *
     * Hash: 0xEF9D388F8D377F44 | Since: 2699 | API-Set: unknown
     */
    export function setCheckForEnoughRoomForPed(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xEF9D388F8D377F44', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2E0C0D6922D31F2 | Since: 944 | API-Set: unknown
     */
    export function setClearFreezeWaitingOnCollisionOncePlayerEnters(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xB2E0C0D6922D31F2', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF39C4F538B5124C2 | Since: 323 | API-Set: unknown
     */
    export function setConvertibleRoof(vehicle: number | IVehicle): void {
        SetConvertibleRoof(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A78AD3D8240536F | Since: 323 | API-Set: unknown
     */
    export function setConvertibleRoofLatchState(vehicle: number | IVehicle, state: boolean): void {
        SetConvertibleRoofLatchState(vehicle, state);
    }

    /**
     * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
     *
     * Hash: 0xB251E0B33E58B424 | Since: 1290 | API-Set: unknown
     */
    export function setDeployFoldingWings(vehicle: number | IVehicle, deploy: boolean): void {
        SetDeployHeliStubWings(vehicle, deploy, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA653AE61924B0A0 | Since: 1290 | API-Set: unknown
     */
    export function setDipStraightDownWhenCrashingPlane(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xAA653AE61924B0A0', vehicle, toggle);
    }

    /**
     * Sets a flag on heli and another vehicle type.
     *
     * Hash: 0x97841634EF7DF1D6 | Since: 1180 | API-Set: unknown
     */
    export function setDisableAutomaticCrashTask(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x97841634EF7DF1D6', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x26D99D5A82FD18E8 | Since: 463 | API-Set: unknown
     */
    export function setDisableBmxExtraTrickForces(): void {
        SetDisableBmxExtraTrickForces(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4196117AF7BB974 | Since: 757 | API-Set: unknown
     */
    export function setDisableDamageWithPickedUpEntity(): boolean {
        return Citizen.invokeNative('0xD4196117AF7BB974', undefined, undefined);
    }

    /**
     * Prevents the vehicle from exploding when taking body damage if it was caused by a collision. Only works for planes.
     *
     * Hash: 0x26E13D440E7F6064 | Since: 1290 | API-Set: unknown
     */
    export function setDisableExplodeFromBodyDamageOnCollision(vehicle: number | IVehicle, disable: boolean): void {
        SetDisableExplodeFromBodyDamageOnCollision(vehicle, disable);
    }

    /**
     * Prevents the vehicle from exploding when taking body damage. Only works for helis and planes.
     *
     * Hash: 0xEDBC8405B3895CC9 | Since: 1103 | API-Set: unknown
     */
    export function setDisableHeliExplodeFromBodyDamage(vehicle: number | IVehicle, disable: boolean): void {
        SetDisableHeliExplodeFromBodyDamage(vehicle, disable);
    }

    /**
     * Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
     * For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
     * For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
     * But for opressor 2 you still can fly if you somehow get back in the air.
     *
     * Hash: 0x2D55FE374D5FDB91 | Since: 1290 | API-Set: unknown
     */
    export function setDisableHoverModeFlight(vehicle: number | IVehicle, toggle: boolean): void {
        SetDisableHoverModeFlight(vehicle, toggle);
    }

    /**
     * Disables collision for this vehicle (maybe it also supports other entities, not sure).
     * Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
     * Example: https://streamable.com/6n45d5
     * Not sure if there is a native (and if so, which one) that resets the collisions.
     *
     * Hash: 0x75627043C6AA90AD | Since: 1180 | API-Set: unknown
     */
    export function setDisableMapCollision(vehicle: number | IVehicle): void {
        DisableVehicleWorldCollision(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8235F1BEAD557629 | Since: 1180 | API-Set: unknown
     */
    export function setDisablePedStandOnTop(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x8235F1BEAD557629', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25367DE49D64CF16 | Since: 323 | API-Set: unknown
     */
    export function setDisablePretendOccupants(vehicle: number | IVehicle, toggle: boolean): void {
        SetDisablePretendOccupants(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4B8E3D1917BC86B | Since: 323 | API-Set: unknown
     */
    export function setDisableRandomTrainsThisFrame(toggle: boolean): void {
        SetDisableRandomTrainsThisFrame(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F0D5BA1C2CC91D7 | Since: 1604 | API-Set: unknown
     */
    export function setDisableRetractingWeaponBlades(toggle: boolean): void {
        Citizen.invokeNative('0x8F0D5BA1C2CC91D7', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB088E9A47AE6EDD5 | Since: 323 | API-Set: unknown
     */
    export function setDisableSuperdummy(vehicle: number | IVehicle): void {
        SetDisableSuperdummyMode(vehicle, false);
    }

    /**
     * Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
     *
     * Hash: 0xE615BB7A7752C76A | Since: 1365 | API-Set: unknown
     */
    export function setDisableTurretMovement(vehicle: number | IVehicle, turretId: number): void {
        SetDisableTurretMovementThisFrame(vehicle, turretId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x91A0BD635321F145 | Since: 323 | API-Set: unknown
     */
    export function setDisableEngineFires(vehicle: number | IVehicle, toggle: boolean): void {
        SetDisableVehicleEngineFires(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x143921E45EC44D62 | Since: 1604 | API-Set: unknown
     */
    export function setDisableExplosionsDamage(toggle: boolean): void {
        SetDisableVehicleUnk(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x37C8252A7C92D017 | Since: 323 | API-Set: unknown
     */
    export function setDisablePetrolTankDamage(vehicle: number | IVehicle, toggle: boolean): void {
        SetDisableVehiclePetrolTankDamage(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x465BF26AB9684352 | Since: 323 | API-Set: unknown
     */
    export function setDisablePetrolTankFires(vehicle: number | IVehicle, toggle: boolean): void {
        SetDisableVehiclePetrolTankFires(vehicle, toggle);
    }

    /**
     * True stops vtols from switching modes. Doesn't stop the sound though.
     *
     * Hash: 0xCE2B43770B655F8F | Since: 1290 | API-Set: unknown
     */
    export function setDisableVerticalFlightModeTransition(vehicle: number | IVehicle, toggle: boolean): void {
        SetDisableVehicleFlightNozzlePosition(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4AD280EB48B2D8E6 | Since: 1868 | API-Set: unknown
     */
    export function setDisableWantedConesResponse(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x4AD280EB48B2D8E6', vehicle, toggle);
    }

    /**
     * Sets some global vehicle related bool
     *
     * Hash: 0x211E95CE9903940C | Since: 1604 | API-Set: unknown
     */
    export function setDisableWeaponBladeForces(toggle: boolean): void {
        SetDisableVehicleUnk2(toggle);
    }

    /**
     * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
     *
     * Hash: 0xF796359A959DF65D | Since: 323 | API-Set: unknown
     */
    export function setDistantCarsEnabled(toggle: boolean): void {
        SetDistantCarsEnabled(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDBC631F109350B8C | Since: 323 | API-Set: unknown
     */
    export function setDontAllowPlayerToEnterIfLockedForPlayer(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xDBC631F109350B8C', vehicle, false);
    }

    /**
     * R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
     *
     * Hash: 0x1087BC8EC540DAEB | Since: 1103 | API-Set: unknown
     */
    export function setDontProcessGlass(vehicle: number | IVehicle, toggle: boolean): void {
        SetDisableVehicleWindowCollisions(vehicle, toggle);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x2FA133A4A9D37ED8 | Since: 323 | API-Set: unknown
     */
    export function setDoorAllowedToBeBrokenOff(vehicle: number | IVehicle, doorId: number, isBreakable: boolean): void {
        SetVehicleDoorCanBreak(vehicle, doorId, isBreakable);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5AC79C98C5C17F05 | Since: 2372 | API-Set: unknown
     */
    export function setDriftTyres(vehicle: number | IVehicle, toggle: boolean): void {
        SetDriftTyresEnabled(vehicle, toggle);
    }

    /**
     * Enable/Disables global slipstream physics
     *
     * Hash: 0xE6C0C80B8C867537 | Since: 323 | API-Set: unknown
     */
    export function setEnableSlipstreaming(toggle: boolean): void {
        SetEnableVehicleSlipstreaming(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x26324F33423F3CC3 | Since: 323 | API-Set: unknown
     */
    export function setFarDraws(toggle: boolean): void {
        SetFarDrawVehicles(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA247F9EF01D8082E | Since: 1103 | API-Set: unknown
     */
    export function setFleeingsUseSwitchedOffNodes(): void {
        Citizen.invokeNative('0xA247F9EF01D8082E', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x887FA38787DE8C72 | Since: 1365 | API-Set: unknown
     */
    export function setForceFixLinkMatrices(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x887FA38787DE8C72', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97CE68CB032583F0 | Since: 323 | API-Set: unknown
     */
    export function setForceHd(vehicle: number | IVehicle, toggle: boolean): void {
        SetForceHdVehicle(vehicle, toggle);
    }

    /**
     * No observed effect.
     *
     * Hash: 0xB28B1FE5BFADD7F5 | Since: 323 | API-Set: unknown
     */
    export function setForceLowLodAnchorMode(vehicle: number | IVehicle): void {
        SetForceLowLodAnchorMode(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D9D109F63FEE1D4 | Since: 323 | API-Set: unknown
     */
    export function setForceEngineDamageByBullet(): void {
        Citizen.invokeNative('0x4D9D109F63FEE1D4', undefined, false);
    }

    /**
     * 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
     *
     * Hash: 0x37EBBF3117BD6A25 | Since: 323 | API-Set: unknown
     */
    export function setForkliftForkHeight(vehicle: number | IVehicle, height: number): void {
        SetForkliftForkHeight(vehicle, height);
    }

    /**
     * No comment provided
     *
     * Hash: 0x428AD3E26C8D9EB0 | Since: 877 | API-Set: unknown
     */
    export function setFormationLeader(vehicle: number | IVehicle, pos: Vector3): void {
        Citizen.invokeNative('0x428AD3E26C8D9EB0', vehicle, pos.x, pos.y, pos.z, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2AFD795EEAC8D30D | Since: 323 | API-Set: unknown
     */
    export function setGarbageTrucks(toggle: boolean): void {
        SetGarbageTrucks(toggle);
    }

    /**
     * Set state to true to extend the wings, false to retract them.
     *
     * Hash: 0x544996C0081ABDEB | Since: 1103 | API-Set: unknown
     */
    export function setGliderActive(vehicle: number | IVehicle, state: boolean): void {
        SetOppressorTransformState(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAF2A78061FD9EF4 | Since: 323 | API-Set: unknown
     */
    export function setGlobalPositionOffsetForRecordedPlayback(vehicle: number | IVehicle, pos: Vector3): void {
        Citizen.invokeNative('0xFAF2A78061FD9EF4', vehicle, pos.x, pos.y, pos.z);
    }

    /**
     * Used for GTAO CEO/Associate spawned vehicles.
     *
     * Hash: 0xAB31EF4DE6800CE9 | Since: 573 | API-Set: unknown
     */
    export function setGoonBoss(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xAB31EF4DE6800CE9', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x430A7631A84C9BE7 | Since: 1180 | API-Set: unknown
     */
    export function setGroundEffectReducesDrag(toggle: boolean): void {
        Citizen.invokeNative('0x430A7631A84C9BE7', toggle);
    }

    /**
     * Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
     *
     * Hash: 0xA178472EBB8AE60D | Since: 323 | API-Set: unknown
     */
    export function setHeliBladesFullSpeed(vehicle: number | IVehicle): void {
        SetHeliBladesFullSpeed(vehicle);
    }

    /**
     * Sets the speed of the helicopter blades in percentage of the full speed.
     *
     * vehicleHandle: The helicopter.
     * speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
     *
     * Hash: 0xFD280B4D7F3ABC4D | Since: 323 | API-Set: unknown
     */
    export function setHeliBladesSpeed(vehicle: number | IVehicle, speed: number): void {
        SetHeliBladesSpeed(vehicle, speed);
    }

    /**
     * Stops the cargobob from being able to attach any vehicle
     *
     * Hash: 0x94A68DA412C4007D | Since: 1180 | API-Set: unknown
     */
    export function setHeliCanPickupEntityThatHasPickUpDisabled(vehicle: number | IVehicle, toggle: boolean): void {
        SetCargobobHookCanAttach(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A3F820A9A9A9AC5 | Since: 1180 | API-Set: unknown
     */
    export function setHeliCombatOffset(vehicle: number | IVehicle, pos: Vector3): void {
        SetHeliCombatOffset(vehicle, pos.x, pos.y, pos.z);
    }

    /**
     * value between 0.0 and 1.0
     *
     * Hash: 0x6E0859B530A365CC | Since: 323 | API-Set: unknown
     */
    export function setHeliControlLaggingRateScalar(helicopter: number | IVehicle, multiplier: number): void {
        SetHelicopterRollPitchYawMult(helicopter, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4056EA1105F5ABD7 | Since: 463 | API-Set: unknown
     */
    export function setHeliMainRotorHealth(vehicle: number | IVehicle, health: number): void {
        SetHeliMainRotorHealth(vehicle, health);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8074CC1886802912 | Since: 2545 | API-Set: unknown
     */
    export function setHeliResistToExplosion(vehicle: number | IVehicle, toggle: boolean): void {
        SetHeliResistToExplosion(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3EC8BF18AA453FE9 | Since: 323 | API-Set: unknown
     */
    export function setHeliTailBoomCanBreakOff(vehicle: number | IVehicle, toggle: boolean): boolean {
        return SetHeliTailBoomCanBreakOff(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE205F38AAA58E5B | Since: 463 | API-Set: unknown
     */
    export function setHeliTailRotorHealth(vehicle: number | IVehicle, health: number): void {
        SetHeliTailRotorHealth(vehicle, health);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6F13851780394DA | Since: 323 | API-Set: unknown
     */
    export function setHeliTurbulenceScalar(vehicle: number | IVehicle): void {
        SetHeliTurbulenceScalar(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70A252F60A3E036B | Since: 1365 | API-Set: unknown
     */
    export function setHoverModeWingRatio(vehicle: number | IVehicle, ratio: number): void {
        SetHoverModeWingRatio(vehicle, ratio);
    }

    /**
     * If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.
     *
     * Only used once in each carmod script, on a car that does not have hydraulics to begin with.
     *
     * Hash: 0x28B18377EB6E25F6 | Since: 505 | API-Set: unknown
     */
    export function setHydraulicsControl(vehicle: number | IVehicle, toggle: boolean): void {
        SetHydraulicRaised(vehicle, toggle);
    }

    /**
     * Works only on vehicles that support hydraulics.
     *
     * Hash: 0x84EA99C62CB3EF0C | Since: 505 | API-Set: unknown
     */
    export function setHydraulicSuspensionRaiseFactor(vehicle: number | IVehicle, wheelId: number, value: number): void {
        SetHydraulicWheelValue(vehicle, wheelId, value);
    }

    /**
     * States:
     * 4 = raise
     * 5 = lower
     * 6 = jump
     *
     * Hash: 0x8EA86DF356801C7D | Since: 505 | API-Set: unknown
     */
    export function setHydraulicState(vehicle: number | IVehicle, state: number): void {
        SetHydraulicWheelState(vehicle, state);
    }

    /**
     * Sets vehicle wheel hydraulic states transition. Known states:
     * 0 - reset
     * 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
     * 2 - jump using wheel
     *
     * Hash: 0xC24075310A8B9CD1 | Since: 505 | API-Set: unknown
     */
    export function setHydraulicWheelState(vehicle: number | IVehicle, wheelId: number, state: number, value: number): void {
        SetHydraulicWheelStateTransition(vehicle, wheelId, state, value, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8664170EF165C4A6 | Since: 2189 | API-Set: unknown
     */
    export function setIgnorePlanesSmallPitchChange(): void {
        Citizen.invokeNative('0x8664170EF165C4A6', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2970EAA18FD5E42F | Since: 1604 | API-Set: unknown
     */
    export function setIncreaseWheelCrushDamage(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleWheelsDealDamage(vehicle, toggle);
    }

    /**
     * Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
     * Doesn't work for planes/helis.
     *
     * Hash: 0x5B91B229243351A8 | Since: 791 | API-Set: unknown
     */
    export function setInvertControls(vehicle: number | IVehicle, state: boolean): void {
        SetVehicleControlsInverted(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0xACFB2463CC22BED2 | Since: 323 | API-Set: unknown
     */
    export function setLastDriven(vehicle: number | IVehicle): void {
        SetLastDrivenVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC3CCA5844452B06 | Since: 323 | API-Set: unknown
     */
    export function setLightsCutoffDistanceTweak(distance: number): void {
        SetLightsCutoffDistanceTweak(distance);
    }

    /**
     * p1 is always 0
     *
     * Hash: 0xBBE7648349B49BE8 | Since: 323 | API-Set: unknown
     */
    export function setMissionTrainAsNoLongerNeeded(train: number | IVehicle): void {
        SetMissionTrainAsNoLongerNeeded(train, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x591CA673AA6AB736 | Since: 323 | API-Set: unknown
     */
    export function setMissionTrainCoords(train: number | IVehicle, pos: Vector3): void {
        SetMissionTrainCoords(train, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E566EA551F4F1A6 | Since: 3407 | API-Set: unknown
     */
    export function setNitrousIsActive(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x9E566EA551F4F1A6', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCAA15F13EBD417FF | Since: 323 | API-Set: unknown
     */
    export function setNumberOfParkeds(value: number): void {
        SetNumberOfParkedVehicles(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B212B26DD3C04DF | Since: 757 | API-Set: unknown
     */
    export function setOpenRearDoorsOnExplosion(vehicle: number | IVehicle, toggle: boolean): void {
        SetOpenRearDoorsOnExplosion(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8E9B6B71B8E660D | Since: 1604 | API-Set: unknown
     */
    export function setOverrideNitrousLevel(vehicle: number | IVehicle, toggle: boolean, level: number, power: number, rechargeTime: number, disableSound: boolean): void {
        SetOverrideNitrousLevel(vehicle, toggle, level, power, rechargeTime, disableSound);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66E3AAFACE2D1EB8 | Since: 1103 | API-Set: unknown
     */
    export function setOverrideDoorTorque(): void {
        Citizen.invokeNative('0x66E3AAFACE2D1EB8', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAE6DCC7EEE3DB1D | Since: 323 | API-Set: unknown
     */
    export function setParkedDensityMultiplierThisFrame(multiplier: number): void {
        SetParkedVehicleDensityMultiplierThisFrame(multiplier);
    }

    /**
     * Sets some bit and float of vehicle. float is >= 0
     *
     * Hash: 0x59C3757B3B7408E8 | Since: 1493 | API-Set: unknown
     */
    export function setPedsCanFallOffThisFromLargeFallDamage(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x59C3757B3B7408E8', vehicle, toggle, 0);
    }

    /**
     * min: 1.9f, max: 100.0f
     *
     * Hash: 0x877C1EAEAC531023 | Since: 323 | API-Set: unknown
     */
    export function setPickupRopeLengthForCargobob(cargobob: number | IVehicle, length1: number, length2: number): void {
        SetPickupRopeLengthForCargobob(cargobob, length1, length2, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC0ED6438E6D39BA8 | Since: 944 | API-Set: unknown
     */
    export function setPickupRopeLengthWithoutCreatingRopeForCargobob(): void {
        Citizen.invokeNative('0xC0ED6438E6D39BA8', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD8A2D3337F04196 | Since: 3407 | API-Set: unknown
     */
    export function setPlaneControlSectionsShouldBreakOffFromExplosions(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xDD8A2D3337F04196', vehicle, toggle);
    }

    /**
     * Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.
     *
     * Hash: 0x2A86A0475B6A1434 | Since: 1103 | API-Set: unknown
     */
    export function setPlaneEngineHealth(vehicle: number | IVehicle, health: number): void {
        SetPlaneEngineHealth(vehicle, health);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C815EB175086F84 | Since: 1103 | API-Set: unknown
     */
    export function setPlanePropellerHealth(plane: number | IVehicle, health: number): boolean {
        return SetPlanePropellersHealth(plane, health);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE16142B94664DEFD | Since: 323 | API-Set: unknown
     */
    export function setPlaneResistToExplosion(vehicle: number | IVehicle, toggle: boolean): void {
        SetPlaneResistToExplosion(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BBB9A7A8FFE931B | Since: 1290 | API-Set: unknown
     */
    export function setPlaneSectionDamageScale(vehicle: number | IVehicle): void {
        SetPlaneSectionDamageScale(vehicle, undefined, undefined);
    }

    /**
     * This native sets the turbulence multiplier. It only works for planes.
     * 0.0 = no turbulence at all.
     * 1.0 = heavy turbulence.
     * Works by just calling it once, does not need to be called every tick.
     *
     * Hash: 0xAD2D28A1AFDFF131 | Since: 323 | API-Set: unknown
     */
    export function setPlaneTurbulenceMultiplier(vehicle: number | IVehicle, multiplier: number): void {
        SetPlaneTurbulenceMultiplier(vehicle, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6683AB880E427778 | Since: 323 | API-Set: unknown
     */
    export function setPlaybackSpeed(vehicle: number | IVehicle, speed: number): void {
        SetPlaybackSpeed(vehicle, speed);
    }

    /**
     * Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
     *
     * Hash: 0xA549C3B37EA28131 | Since: 323 | API-Set: unknown
     */
    export function setPlaybackToUseAi(vehicle: number | IVehicle, drivingStyle: number): void {
        SetPlaybackToUseAi(vehicle, drivingStyle);
    }

    /**
     * Time is number of milliseconds before reverting, zero for indefinitely.
     *
     * Hash: 0x6E63860BBB190730 | Since: 323 | API-Set: unknown
     */
    export function setPlaybackToUseAiTryToRevertBackLater(vehicle: number | IVehicle, time: number, drivingStyle: number): void {
        SetPlaybackToUseAiTryToRevertBackLater(vehicle, time, drivingStyle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCDF8BAF56C87B6A | Since: 323 | API-Set: unknown
     */
    export function setPlayersLast(vehicle: number | IVehicle): void {
        SetPlayersLastVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E74E62E0A97E901 | Since: 323 | API-Set: unknown
     */
    export function setPoliceFocusWillTrack(vehicle: number | IVehicle, toggle: boolean): void {
        SetPoliceFocusWillTrackVehicle(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x796A877E459B99EA | Since: 323 | API-Set: unknown
     */
    export function setPositionOffsetForRecordedPlayback(vehicle: number | IVehicle, pos: Vector3): void {
        Citizen.invokeNative('0x796A877E459B99EA', vehicle, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84436EC293B1415F | Since: 323 | API-Set: unknown
     */
    export function setRandomBoats(toggle: boolean): void {
        SetRandomBoats(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA5E12F728DB30CA | Since: 2372 | API-Set: unknown
     */
    export function setRandomBoatsMp(toggle: boolean): void {
        SetRandomBoatsInMp(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80D9F74197EA47D9 | Since: 323 | API-Set: unknown
     */
    export function setRandomTrains(toggle: boolean): void {
        SetRandomTrains(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3B3359379FE77D3 | Since: 323 | API-Set: unknown
     */
    export function setRandomDensityMultiplierThisFrame(multiplier: number): void {
        SetRandomVehicleDensityMultiplierThisFrame(multiplier);
    }

    /**
     * Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.
     *
     * Hash: 0x3A375167F5782A65 | Since: 2372 | API-Set: unknown
     */
    export function setReducedSuspensionForce(vehicle: number | IVehicle, enable: boolean): void {
        SetReduceDriftVehicleSuspension(vehicle, enable);
    }

    /**
     * Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
     *
     * Hash: 0x317B11A312DF5534 | Since: 323 | API-Set: unknown
     */
    export function setRenderTrainAsDerailed(train: number | IVehicle, toggle: boolean): void {
        SetRenderTrainAsDerailed(train, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x81E1552E35DC3839 | Since: 944 | API-Set: unknown
     */
    export function setRocketBoostActive(vehicle: number | IVehicle, active: boolean): void {
        SetVehicleRocketBoostActive(vehicle, active);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFEB2DDED3509562E | Since: 1103 | API-Set: unknown
     */
    export function setRocketBoostFill(vehicle: number | IVehicle, percentage: number): void {
        SetVehicleRocketBoostPercentage(vehicle, percentage);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFC13B1CE30D755D | Since: 944 | API-Set: unknown
     */
    export function setScriptRampImpulseScale(vehicle: number | IVehicle, impulseScale: number): void {
        SetVehicleRampLaunchModifier(vehicle, impulseScale);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE00F2AB100B76E89 | Since: 944 | API-Set: unknown
     */
    export function setScriptRocketBoostRechargeTime(vehicle: number | IVehicle, seconds: number): void {
        SetVehicleRocketBoostRefillTime(vehicle, seconds);
    }

    /**
     * Only called once in the decompiled scripts. Presumably activates the specified generator.
     *
     * Hash: 0xD9D620E0AC6DC4B0 | Since: 323 | API-Set: unknown
     */
    export function setScriptGenerator(vehicleGenerator: number, enabled: boolean): void {
        SetScriptVehicleGenerator(vehicleGenerator, enabled);
    }

    /**
     * Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
     *
     * Hash: 0x107A473D7A6647A9 | Since: 1290 | API-Set: unknown
     */
    export function setShortSlowdownForLanding(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x107A473D7A6647A9', vehicle);
    }

    /**
     * A vehicle recording playback flag only used in jewelry_heist
     *
     * Hash: 0x063AE2B2CC273588 | Since: 323 | API-Set: unknown
     */
    export function setShouldLerpFromAiToFullRecording(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x063AE2B2CC273588', vehicle, false);
    }

    /**
     * Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped.
     *
     * Hash: 0x78CEEE41F49F421F | Since: 1103 | API-Set: unknown
     */
    export function setShouldResetTurretInScriptedCameras(vehicle: number | IVehicle, shouldReset: boolean): void {
        Citizen.invokeNative('0x78CEEE41F49F421F', vehicle, shouldReset);
    }

    /**
     * Disables the screen effects and sound effects when driving over a slowdown pad.
     *
     * Hash: 0x65B080555EA48149 | Since: 1011 | API-Set: unknown
     */
    export function setSlowDownEffectDisabled(disabled: boolean): void {
        Citizen.invokeNative('0x65B080555EA48149', disabled);
    }

    /**
     * It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT
     *
     * Hash: 0xF1211889DF15A763 | Since: 1290 | API-Set: unknown
     */
    export function setSpecialFlightModeAllowed(vehicle: number | IVehicle, toggle: boolean): void {
        SetSpecialFlightModeAllowed(vehicle, toggle);
    }

    /**
     * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.
     *
     * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
     *
     * Example:
     * `Ped playerPed = PLAYER::PLAYER_PED_ID();`
     * `Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);`
     *
     * Hash: 0xD138FA15C9776837 | Since: 1290 | API-Set: unknown
     */
    export function setSpecialFlightModeRatio(vehicle: number | IVehicle, ratio: number): void {
        SetSpecialFlightModeRatio(vehicle, ratio);
    }

    /**
     * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.
     *
     * targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.
     *
     * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
     *
     * Example:
     * `Ped playerPed = PLAYER::PLAYER_PED_ID();`
     * `Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);`
     *
     * Hash: 0x438B3D7CA026FE91 | Since: 1290 | API-Set: unknown
     */
    export function setSpecialFlightModeTargetRatio(vehicle: number | IVehicle, targetRatio: number): void {
        SetSpecialFlightModeTargetRatio(vehicle, targetRatio);
    }

    /**
     * Disables the screen effects and sound effects when driving over a speed boost pad.
     *
     * Hash: 0x7BBE7FF626A591FE | Since: 877 | API-Set: unknown
     */
    export function setSpeedBoostEffectDisabled(disabled: boolean): void {
        Citizen.invokeNative('0x7BBE7FF626A591FE', disabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC59872A5134879C7 | Since: 323 | API-Set: unknown
     */
    export function setSubmarineCrushDepths(vehicle: number | IVehicle, depth1: number, depth2: number, depth3: number): void {
        SetSubmarineCrushDepths(vehicle, false, depth1, depth2, depth3);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB893215D8D4C015B | Since: 323 | API-Set: unknown
     */
    export function setTaskGotoPlaneMinHeightAboveTerrain(plane: number | IVehicle, height: number): void {
        SetTaskVehicleGotoPlaneMinHeightAboveTerrain(plane, height);
    }

    /**
     * This is not tested - it's just an assumption.
     * - Nac
     *
     * Doesn't seem to work.  I'll try with an int instead. --JT
     *
     * Read the scripts, im dumpass.
     *
     * `if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {`
     * `VEHICLE::SET_TAXI_LIGHTS(l_115, 1);`
     * }
     *
     * Hash: 0x598803E85E8448D9 | Since: 323 | API-Set: unknown
     */
    export function setTaxiLights(vehicle: number | IVehicle, state: boolean): void {
        SetTaxiLights(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FA2494B47FDD009 | Since: 1103 | API-Set: unknown
     */
    export function setTrailerAttachmentEnabled(): void {
        Citizen.invokeNative('0x2FA2494B47FDD009', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A8F319B392E7B3F | Since: 323 | API-Set: unknown
     */
    export function setTrailerInverseMassScale(vehicle: number | IVehicle): void {
        SetTrailerInverseMassScale(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x878C75C09FBDB942 | Since: 1103 | API-Set: unknown
     */
    export function setTrailerLegsLowered(vehicle: number | IVehicle): void {
        SetTrailerLegsLowered(vehicle);
    }

    /**
     * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
     *
     * Hash: 0x95CF53B3D687F9FA | Since: 323 | API-Set: unknown
     */
    export function setTrailerLegsRaised(vehicle: number | IVehicle): void {
        SetTrailerLegsRaised(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x16469284DB8C62B5 | Since: 323 | API-Set: unknown
     */
    export function setTrainCruiseSpeed(train: number | IVehicle, speed: number): void {
        SetTrainCruiseSpeed(train, speed);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA0BC91BE0B796E3 | Since: 323 | API-Set: unknown
     */
    export function setTrainSpeed(train: number | IVehicle, speed: number): void {
        SetTrainSpeed(train, speed);
    }

    /**
     * Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
     *
     * trackIndex: 0 - 26
     * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
     *
     * Hash: 0x21973BBF8D17EDFA | Since: 323 | API-Set: unknown
     */
    export function setTrainTrackSpawnFrequency(trackIndex: number, frequency: number): void {
        SetTrainTrackSpawnFrequency(trackIndex, frequency);
    }

    /**
     * Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.
     *
     * Hash: 0x498218259FB7C72D | Since: 1365 | API-Set: unknown
     */
    export function setTransformRateForAnimation(vehicle: number | IVehicle, transformRate: number): void {
        SetTransformRateForAnimation(vehicle, transformRate);
    }

    /**
     * When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)
     *
     * Hash: 0x41B9FB92EDED32A6 | Since: 1365 | API-Set: unknown
     */
    export function setTransformToSubmarineUsesAlternateInput(vehicle: number | IVehicle, toggle: boolean): void {
        SetTransformToSubmarineUsesAlternateInput(vehicle, toggle);
    }

    /**
     * Toggles specific flag on turret
     *
     * Hash: 0xC60060EB0D8AC7B1 | Since: 1290 | API-Set: unknown
     */
    export function setTurretHidden(vehicle: number | IVehicle, index: number, toggle: boolean): void {
        SetVehicleTurretUnk(vehicle, index, toggle);
    }

    /**
     * SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x74C68EF97645E79D | Since: 1868 | API-Set: unknown
     */
    export function setTyreHealth(vehicle: number | IVehicle, wheelIndex: number, health: number): void {
        SetTyreHealth(vehicle, wheelIndex, health);
    }

    /**
     * Controls how much traction the wheel loses.
     *
     * Default values from Rockstar's Open Wheel Race JSON's:
     * "owrtds" (Soft): 0.05
     * "owrtdm" (Medium): 0.45
     * "owrtdh" (Hard): 0.8
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0xC970D0E0FC31D768 | Since: 2060 | API-Set: unknown
     */
    export function setTyreMaximumGripDifferenceDueToWearRate(vehicle: number | IVehicle, wheelIndex: number, multiplier: number): void {
        SetTyreTractionLossMultiplier(vehicle, wheelIndex, multiplier);
    }

    /**
     * Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
     * Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x01894E2EDE923CA2 | Since: 1868 | API-Set: unknown
     */
    export function setTyreWearRate(vehicle: number | IVehicle, wheelIndex: number, multiplier: number): void {
        SetTyreWearMultiplier(vehicle, wheelIndex, multiplier);
    }

    /**
     * Controls how fast the tires wear out.
     *
     * Default values from Rockstar's Open Wheel Race JSON's:
     * "owrtss" (Soft): 2.2
     * "owrtsm" (Medium): 1.7
     * "owrtsh" (Hard): 1.2
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x392183BB9EA57697 | Since: 2060 | API-Set: unknown
     */
    export function setTyreWearRateScale(vehicle: number | IVehicle, wheelIndex: number, multiplier: number): void {
        SetTyreSoftnessMultiplier(vehicle, wheelIndex, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB68CFAF83A02768D | Since: 1290 | API-Set: unknown
     */
    export function setUseDesiredZCruiseSpeedForLanding(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xB68CFAF83A02768D', vehicle, toggle);
    }

    /**
     * Changes the car jump control to require a double-tap to activate.
     *
     * Hash: 0x5BBCF35BF6E456F7 | Since: 1604 | API-Set: unknown
     */
    export function setUseDoubleClickForCarJump(toggle: boolean): void {
        Citizen.invokeNative('0x5BBCF35BF6E456F7', toggle);
    }

    /**
     * Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
     *
     * Hash: 0xF06A16CA55D138D8 | Since: 944 | API-Set: unknown
     */
    export function setUseHigherCarJump(vehicle: number | IVehicle, toggle: boolean): void {
        SetUseHigherVehicleJumpForce(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFFCEF48E511DB48 | Since: 323 | API-Set: unknown
     */
    export function setActiveDuringPlayback(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleActiveDuringPlayback(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x21115BCD6E44656A | Since: 323 | API-Set: unknown
     */
    export function setActiveForPedNavigation(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleActiveForPedNavigation(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9BECD4B9FEF3F8A6 | Since: 323 | API-Set: unknown
     */
    export function setActAsIfHasSirenOn(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x9BECD4B9FEF3F8A6', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F9FB66F3A3842D2 | Since: 323 | API-Set: unknown
     */
    export function setActAsIfHighSpeedForFragSmashing(vehicle: number | IVehicle): void {
        SetVehicleActAsIfHighSpeedForFragSmashing(vehicle, false);
    }

    /**
     * Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
     * Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).
     *
     * Hash: 0x41062318F23ED854 | Since: 323 | API-Set: unknown
     */
    export function setAiCanUseExclusiveSeats(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleExclusiveDriver(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCDE5E70C1DDB954C | Since: 323 | API-Set: unknown
     */
    export function setAlarm(vehicle: number | IVehicle, state: boolean): void {
        SetVehicleAlarm(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D6F9A3EF26136A0 | Since: 323 | API-Set: unknown
     */
    export function setAllowHomingMissleLockon(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x7D6F9A3EF26136A0', vehicle, toggle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DDA078D12879EEE | Since: 463 | API-Set: unknown
     */
    export function setAllowHomingMissleLockonSynced(vehicle: number | IVehicle, canBeLockedOn: boolean): void {
        SetVehicleCanBeLockedOn(vehicle, canBeLockedOn, false);
    }

    /**
     * Makes the vehicle accept no passengers.
     *
     * Hash: 0x5D14D4154BFE7B2C | Since: 323 | API-Set: unknown
     */
    export function setAllowNoPassengersLockon(veh: number | IVehicle, toggle: boolean): void {
        SetVehicleAllowNoPassengersLockon(veh, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8BA6F76BC53A1493 | Since: 323 | API-Set: unknown
     */
    export function setAutomaticallyAttaches(vehicle: number | IVehicle): number {
        return SetVehicleAutomaticallyAttaches(vehicle, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD3301660A57C9272 | Since: 757 | API-Set: unknown
     */
    export function setAvoidPlayerVehicleRiotVanMission(): void {
        Citizen.invokeNative('0xD3301660A57C9272', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F3F689B814F2599 | Since: 323 | API-Set: unknown
     */
    export function setBlipThrottleRandomly(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x9F3F689B814F2599', vehicle, false);
    }

    /**
     * Controls how fast bobbleheads and tsurikawas move on each axis.
     *
     * p2 is probably z, but changing that value didn't seem to have a noticeable effect.
     *
     * Hash: 0x870B8B7A766615C8 | Since: 505 | API-Set: unknown
     */
    export function setBobbleheadVelocity(x: number, y: number): void {
        Citizen.invokeNative('0x870B8B7A766615C8', x, y, 0);
    }

    /**
     * p2 often set to 1000.0 in the decompiled scripts.
     *
     * Hash: 0xB77D05AC8C78AADB | Since: 323 | API-Set: unknown
     */
    export function setBodyHealth(vehicle: number | IVehicle, value: number): void {
        SetVehicleBodyHealth(vehicle, value);
    }

    /**
     * Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
     *
     * Hash: 0xF4B2ED59DEB5D774 | Since: 1180 | API-Set: unknown
     */
    export function setBombAmmo(vehicle: number | IVehicle, bombCount: number): void {
        SetVehicleBombCount(vehicle, bombCount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4E2FD323574965C | Since: 757 | API-Set: unknown
     */
    export function setBrake(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleBrake(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92B35082E0B42F66 | Since: 323 | API-Set: unknown
     */
    export function setBrakeLights(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleBrakeLights(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC361AA040D6637A8 | Since: 323 | API-Set: unknown
     */
    export function setBrokenPartsDontAffectAiHandling(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xC361AA040D6637A8', vehicle, false);
    }

    /**
     * Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
     *
     * Hash: 0xF8EBCCC96ADB9FB7 | Since: 323 | API-Set: unknown
     */
    export function setBulldozerArmPosition(vehicle: number | IVehicle, position: number): void {
        SetVehicleBulldozerArmPosition(vehicle, position, false);
    }

    /**
     * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
     *
     * Hash: 0xFB8794444A7D60FB | Since: 323 | API-Set: unknown
     */
    export function setBurnout(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleBurnout(vehicle, toggle);
    }

    /**
     * This has not yet been tested - it's just an assumption of what the types could be.
     *
     * Hash: 0x3750146A28097A82 | Since: 323 | API-Set: unknown
     */
    export function setCanBeTargetted(vehicle: number | IVehicle, state: boolean): void {
        SetVehicleCanBeTargetted(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x300504B23BD3B711 | Since: 323 | API-Set: unknown
     */
    export function setCanBeUsedByFleeingPeds(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleCanBeUsedByFleeingPeds(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C7028F78FFD3681 | Since: 323 | API-Set: unknown
     */
    export function setCanBeVisiblyDamaged(vehicle: number | IVehicle, state: boolean): void {
        SetVehicleCanBeVisiblyDamaged(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x59BF8C3D52C92F66 | Since: 323 | API-Set: unknown
     */
    export function setCanBreak(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleCanBreak(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0CDDA42F9E360CA6 | Since: 323 | API-Set: unknown
     */
    export function setCanDeformWheels(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleCanDeformWheels(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x065D03A9D6B2C6B5 | Since: 463 | API-Set: unknown
     */
    export function setCanEjectPassengersIfLocked(): void {
        Citizen.invokeNative('0x065D03A9D6B2C6B5', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x206BC5DC9D1AC70A | Since: 323 | API-Set: unknown
     */
    export function setCanEngineMissfire(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleCanEngineOperateOnFire(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x51BB2D88D31A914B | Since: 323 | API-Set: unknown
     */
    export function setCanLeakOil(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleCanLeakOil(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x192547247864DFDD | Since: 323 | API-Set: unknown
     */
    export function setCanLeakPetrol(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleCanLeakPetrol(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x428BACCDF5E26EAD | Since: 323 | API-Set: unknown
     */
    export function setCanSaveInGarage(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleCanSaveInGarage(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9849DE24FCF23CCC | Since: 1604 | API-Set: unknown
     */
    export function setCausesSwerving(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x9849DE24FCF23CCC', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA46413066687A328 | Since: 323 | API-Set: unknown
     */
    export function setCeilingHeight(vehicle: number | IVehicle, height: number): void {
        SetVehicleCeilingHeight(vehicle, height);
    }

    /**
     * <1.0 - Decreased torque
     * =1.0 - Default torque
     * >1.0 - Increased torque
     *
     * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
     *
     * value - is between 0.2 and 1.8 in the decompiled scripts.
     *
     * This needs to be called every frame to take effect.
     *
     * Hash: 0xB59E4BD37AE292DB | Since: 323 | API-Set: unknown
     */
    export function setCheatPowerIncrease(vehicle: number | IVehicle, value: number): void {
        SetVehicleCheatPowerIncrease(vehicle, value);
    }

    /**
     * colorPrimary & colorSecondary are the paint index for the vehicle.
     * For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
     * -------------------------------------------------------------------------
     * Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
     *
     * Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x4F1D4BE3A7F24601 | Since: 323 | API-Set: unknown
     */
    export function setColours(vehicle: number | IVehicle, colorPrimary: number, colorSecondary: number): void {
        SetVehicleColours(vehicle, colorPrimary, colorSecondary);
    }

    /**
     * Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry.
     *
     * Hash: 0x33E8CD3322E2FE31 | Since: 323 | API-Set: unknown
     */
    export function setColourCombination(vehicle: number | IVehicle, colorCombination: number): void {
        SetVehicleColourCombination(vehicle, colorCombination);
    }

    /**
     * Does nothing. It's a nullsub.
     *
     * Hash: 0x36DE109527A2C0C4 | Since: 1604 | API-Set: unknown
     */
    export function setCombatMode(toggle: boolean): void {
        Citizen.invokeNative('0x36DE109527A2C0C4', toggle);
    }

    /**
     * Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
     * Use GET_VEHICLE_BOMB_AMMO to get the current amount.
     *
     * Hash: 0x9BDA23BF666F0855 | Since: 1180 | API-Set: unknown
     */
    export function setCountermeasureAmmo(vehicle: number | IVehicle, counterMeasureCount: number): void {
        SetVehicleCountermeasureCount(vehicle, counterMeasureCount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x182F266C2D9E2BEB | Since: 323 | API-Set: unknown
     */
    export function setCustomPathNodeStreamingRadius(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x182F266C2D9E2BEB', vehicle, 0);
    }

    /**
     * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
     *
     * Hash: 0x7141766F91D15BEA | Since: 323 | API-Set: unknown
     */
    export function setCustomPrimaryColour(vehicle: number | IVehicle, r: number, g: number, b: number): void {
        SetVehicleCustomPrimaryColour(vehicle, r, g, b);
    }

    /**
     * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
     *
     * Hash: 0x36CED73BFED89754 | Since: 323 | API-Set: unknown
     */
    export function setCustomSecondaryColour(vehicle: number | IVehicle, r: number, g: number, b: number): void {
        SetVehicleCustomSecondaryColour(vehicle, r, g, b);
    }

    /**
     * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
     *
     * Radius of effect damage applied in a sphere at impact location
     * When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
     *
     * Hash: 0xA1DD317EA8FD4F29 | Since: 323 | API-Set: unknown
     */
    export function setDamage(vehicle: number | IVehicle, xOffset: number, yOffset: number, zOffset: number, damage: number, radius: number, focusOnModel: boolean): void {
        SetVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E20D2A627011E8E | Since: 757 | API-Set: unknown
     */
    export function setDamageScale(vehicle: number | IVehicle): boolean {
        return SetVehicleDamageModifier(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9640E30A7F395E4B | Since: 1290 | API-Set: unknown
     */
    export function setDamageScales(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x9640E30A7F395E4B', vehicle, undefined, undefined, undefined, undefined);
    }

    /**
     * This fixes the deformation of a vehicle but the vehicle health doesn't improve
     *
     * Hash: 0x953DA1E1B12C0491 | Since: 323 | API-Set: unknown
     */
    export function setDeformationFixed(vehicle: number | IVehicle): void {
        SetVehicleDeformationFixed(vehicle);
    }

    /**
     * Use this native inside a looped function.
     * Values:
     * - `0.0` = no vehicles on streets
     * - `1.0` = normal vehicles on streets
     *
     * Hash: 0x245A6883D966D537 | Since: 323 | API-Set: unknown
     */
    export function setDensityMultiplierThisFrame(multiplier: number): void {
        SetVehicleDensityMultiplierThisFrame(multiplier);
    }

    /**
     * Does nothing. It's a nullsub.
     *
     * Hash: 0x82E0AC411E41A5B4 | Since: 1604 | API-Set: unknown
     */
    export function setDetonationMode(toggle: boolean): void {
        Citizen.invokeNative('0x82E0AC411E41A5B4', toggle);
    }

    /**
     * You can't use values greater than 15.0
     * Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
     *
     * Hash: 0x79D3B596FE44EE8B | Since: 323 | API-Set: unknown
     */
    export function setDirtLevel(vehicle: number | IVehicle, dirtLevel: number): void {
        SetVehicleDirtLevel(vehicle, dirtLevel);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAF60E6A2936F982A | Since: 1103 | API-Set: unknown
     */
    export function setDisableCollisionUponCreation(vehicle: number | IVehicle, disable: boolean): void {
        Citizen.invokeNative('0xAF60E6A2936F982A', vehicle, disable);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8AA9180DE2FEDD45 | Since: 323 | API-Set: unknown
     */
    export function setDisableHeightMapAvoidance(vehicle: number | IVehicle): void {
        EnableAircraftObstacleAvoidance(vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B6747FAA9DB9D6B | Since: 323 | API-Set: unknown
     */
    export function setDisableTowing(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleDisableTowing(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x76D26A22750E849E | Since: 1103 | API-Set: unknown
     */
    export function setDontTerminateTaskWhenAchieved(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x76D26A22750E849E', vehicle);
    }

    /**
     * enum eVehicleLockState
     * {
     * VEHICLELOCK_NONE,
     * VEHICLELOCK_UNLOCKED,
     * VEHICLELOCK_LOCKED,
     * VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
     * VEHICLELOCK_LOCKED_PLAYER_INSIDE,
     * VEHICLELOCK_LOCKED_INITIALLY,
     * VEHICLELOCK_FORCE_SHUT_DOORS,
     * VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
     * VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
     * VEHICLELOCK_LOCKED_NO_PASSENGERS,
     * VEHICLELOCK_CANNOT_ENTER
     * };
     *
     * Hash: 0xB664292EAECF7FA6 | Since: 323 | API-Set: unknown
     */
    export function setDoorsLocked(vehicle: number | IVehicle, doorLockStatus: number): void {
        SetVehicleDoorsLocked(vehicle, doorLockStatus);
    }

    /**
     * After some analysis, I've decided that these are what the parameters are.
     *
     * We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
     * `l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);`
     * ...
     * `VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);`
     *
     * Hash: 0xA2F80B8D040727CC | Since: 323 | API-Set: unknown
     */
    export function setDoorsLockedForAllPlayers(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleDoorsLockedForAllPlayers(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x203B527D1B77904C | Since: 1365 | API-Set: unknown
     */
    export function setDoorsLockedForAllTeams(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleDoorsLockedForUnk(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9737A37136F07E75 | Since: 323 | API-Set: unknown
     */
    export function setDoorsLockedForNonScriptPlayers(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleDoorsLockedForNonScriptPlayers(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x517AAF684BB50CD1 | Since: 323 | API-Set: unknown
     */
    export function setDoorsLockedForPlayer(vehicle: number | IVehicle, player: number | string | IPlayer, toggle: boolean): void {
        SetVehicleDoorsLockedForPlayer(vehicle, player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB81F6D4A8F5EEBA8 | Since: 323 | API-Set: unknown
     */
    export function setDoorsLockedForTeam(vehicle: number | IVehicle, team: number, toggle: boolean): void {
        SetVehicleDoorsLockedForTeam(vehicle, team, toggle);
    }

    /**
     * Closes all doors of a vehicle:
     *
     * Hash: 0x781B3D62BB013EF5 | Since: 323 | API-Set: unknown
     */
    export function setDoorsShut(vehicle: number | IVehicle, closeInstantly: boolean): void {
        SetVehicleDoorsShut(vehicle, closeInstantly);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Usually used alongside other vehicle door natives.
     *
     * Hash: 0x3B458DDB57038F08 | Since: 877 | API-Set: unknown
     */
    export function setDoorAutoLock(vehicle: number | IVehicle, doorId: number, toggle: boolean): void {
        Citizen.invokeNative('0x3B458DDB57038F08', vehicle, doorId, toggle);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xD4D4F6A4AB575A33 | Since: 323 | API-Set: unknown
     */
    export function setDoorBroken(vehicle: number | IVehicle, doorId: number, deleteDoor: boolean): void {
        SetVehicleDoorBroken(vehicle, doorId, deleteDoor);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xF2BFA0430F0A0FCB | Since: 323 | API-Set: unknown
     */
    export function setDoorControl(vehicle: number | IVehicle, doorId: number, speed: number, angle: number): void {
        SetVehicleDoorControl(vehicle, doorId, speed, angle);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xA5A9653A8D2CAF48 | Since: 323 | API-Set: unknown
     */
    export function setDoorLatched(vehicle: number | IVehicle, doorId: number): void {
        SetVehicleDoorLatched(vehicle, doorId, false, false, false);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x7C65DAC73C35C862 | Since: 323 | API-Set: unknown
     */
    export function setDoorOpen(vehicle: number | IVehicle, doorId: number, loose: boolean, openInstantly: boolean): void {
        SetVehicleDoorOpen(vehicle, doorId, loose, openInstantly);
    }

    /**
     * enum eDoorId
     * {
     * VEH_EXT_DOOR_INVALID_ID = -1,
     * VEH_EXT_DOOR_DSIDE_F,
     * VEH_EXT_DOOR_DSIDE_R,
     * VEH_EXT_DOOR_PSIDE_F,
     * VEH_EXT_DOOR_PSIDE_R,
     * VEH_EXT_BONNET,
     * VEH_EXT_BOOT
     * };
     *
     * Hash: 0x93D9BD300D7789E5 | Since: 323 | API-Set: unknown
     */
    export function setDoorShut(vehicle: number | IVehicle, doorId: number, closeInstantly: boolean): void {
        SetVehicleDoorShut(vehicle, doorId, closeInstantly);
    }

    /**
     * Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
     *
     * youtu.be/3arlUxzHl5Y
     * i.imgur.com/WrNpYFs.jpg
     *
     * Hash: 0x068F64F2470F9656 | Since: 323 | API-Set: unknown
     */
    export function setDropsMoneyWhenBlownUp(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleDropsMoneyWhenBlownUp(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x983765856F2564F9 | Since: 323 | API-Set: unknown
     */
    export function setEngineCanDegrade(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleEngineCanDegrade(vehicle, toggle);
    }

    /**
     * 1000 is max health
     * Begins leaking gas at around 650 health
     * Minimum: -4000
     * Maximum: 1000
     *
     * -4000: Engine is destroyed
     * 0 and below: Engine catches fire and health rapidly declines
     * 300: Engine is smoking and losing functionality
     * 1000: Engine is perfect
     *
     * Hash: 0x45F6D8EEF34ABEF1 | Since: 323 | API-Set: unknown
     */
    export function setEngineHealth(vehicle: number | IVehicle, health: number): void {
        SetVehicleEngineHealth(vehicle, health);
    }

    /**
     * Starts or stops the engine on the specified vehicle.
     *
     * vehicle: The vehicle to start or stop the engine on.
     * value: true to turn the vehicle on; false to turn it off.
     * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
     * disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.
     *
     * Hash: 0x2497C4717C8B881E | Since: 323 | API-Set: unknown
     */
    export function setEngineOn(vehicle: number | IVehicle, value: boolean, instantly: boolean, disableAutoStart: boolean): void {
        SetVehicleEngineOn(vehicle, value, instantly, disableAutoStart);
    }

    /**
     * The parameter fade is a value from 0-1, where 0 is fresh paint.
     *
     * Hash: 0x3AFDC536C3D01674 | Since: 323 | API-Set: unknown
     */
    export function setEnveffScale(vehicle: number | IVehicle, fade: number): void {
        SetVehicleEnveffScale(vehicle, fade);
    }

    /**
     * index: 0 - 1
     *
     * Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
     *
     * Hash: 0xB5C51B5502E85E83 | Since: 323 | API-Set: unknown
     */
    export function setExclusiveDriver(vehicle: number | IVehicle, ped: number | IPed, index: number): void {
        SetVehicleExclusiveDriver2(vehicle, ped, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD565F438137F0E10 | Since: 1103 | API-Set: unknown
     */
    export function setExplodesOnExplosionDamageAtZeroBodyHealth(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xD565F438137F0E10', vehicle, toggle);
    }

    /**
     * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
     *
     * Hash: 0x71B0892EC081D60A | Since: 323 | API-Set: unknown
     */
    export function setExplodesOnHighExplosionDamage(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleExplodesOnHighExplosionDamage(vehicle, toggle);
    }

    /**
     * Max value is 32767
     *
     * Hash: 0x79DF7E806202CE01 | Since: 323 | API-Set: unknown
     */
    export function setExtendedRemovalRange(vehicle: number | IVehicle, range: number): void {
        SetVehicleExtendedRemovalRange(vehicle, range);
    }

    /**
     * Available extraIds are 1-14, however none of the vehicles have extras above 12.
     *
     * Hash: 0x7EE3A3C5E4A40CC9 | Since: 323 | API-Set: unknown
     */
    export function setExtra(vehicle: number | IVehicle, extraId: number, disable: boolean): void {
        SetVehicleExtra(vehicle, extraId, disable);
    }

    /**
     * They use the same color indexs as SET_VEHICLE_COLOURS.
     *
     * Hash: 0x2036F561ADD12E33 | Since: 323 | API-Set: unknown
     */
    export function setExtraColours(vehicle: number | IVehicle, pearlescentColor: number, wheelColor: number): void {
        SetVehicleExtraColours(vehicle, pearlescentColor, wheelColor);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF40DD601A65F7F19 | Since: 505 | API-Set: unknown
     */
    export function setExtraColour5(vehicle: number | IVehicle, color: number): void {
        SetVehicleInteriorColor(vehicle, color);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6089CDF6A57F326C | Since: 505 | API-Set: unknown
     */
    export function setExtraColour6(vehicle: number | IVehicle, color: number): void {
        SetVehicleDashboardColor(vehicle, color);
    }

    /**
     * This fixes a vehicle.
     * If the vehicle's engine's broken then you cannot fix it with this native.
     *
     * Hash: 0x115722B1B9C14C1C | Since: 323 | API-Set: unknown
     */
    export function setFixed(vehicle: number | IVehicle): void {
        SetVehicleFixed(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x30D779DE7C4F6DD3 | Since: 323 | API-Set: unknown
     */
    export function setFlightNozzlePosition(vehicle: number | IVehicle, angleRatio: number): void {
        SetVehicleFlightNozzlePosition(vehicle, angleRatio);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AA47FFF660CB932 | Since: 323 | API-Set: unknown
     */
    export function setFlightNozzlePositionImmediate(vehicle: number | IVehicle, angle: number): void {
        SetVehicleFlightNozzlePositionImmediate(vehicle, angle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB055A34527CB8FD7 | Since: 323 | API-Set: unknown
     */
    export function setForceAfterburner(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleForceAfterburner(vehicle, toggle);
    }

    /**
     * Sets some bit of vehicle
     *
     * Hash: 0x8821196D91FA2DE5 | Since: 1290 | API-Set: unknown
     */
    export function setForceInteriorlight(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x8821196D91FA2DE5', vehicle, toggle);
    }

    /**
     * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
     *
     * Speed is in meters per second
     * You can convert meters/s to mph here:
     * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
     *
     * Hash: 0xAB54A438726D25D5 | Since: 323 | API-Set: unknown
     */
    export function setForwardSpeed(vehicle: number | IVehicle, speed: number): void {
        SetVehicleForwardSpeed(vehicle, speed);
    }

    /**
     * Seems to be identical to SET_VEHICLE_FORWARD_SPEED
     *
     * Hash: 0x6501129C9E0FFA05 | Since: 877 | API-Set: unknown
     */
    export function setForwardSpeedXy(vehicle: number | IVehicle, speed: number): void {
        Citizen.invokeNative('0x6501129C9E0FFA05', vehicle, speed);
    }

    /**
     * Seems to be related to the metal parts, not tyres (like i was expecting lol)
     *
     * Hash: 0x1837AF7C627009BA | Since: 323 | API-Set: unknown
     */
    export function setFrictionOverride(vehicle: number | IVehicle, friction: number): void {
        SetVehicleFrictionOverride(vehicle, friction);
    }

    /**
     * It switch to highbeam when p1 is set to true.
     *
     * Hash: 0x8B7FD87F0DDB421E | Since: 323 | API-Set: unknown
     */
    export function setFullbeam(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleFullbeam(vehicle, toggle);
    }

    /**
     * Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
     *
     * Hash: 0x279D50DE5652D935 | Since: 323 | API-Set: unknown
     */
    export function setGeneratesEngineShockingEvents(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleGeneratesEngineShockingEvents(vehicle, toggle);
    }

    /**
     * Related to car generators & CPlayerSwitchMgrLong
     *
     * Hash: 0x9A75585FB2E54FAD | Since: 323 | API-Set: unknown
     */
    export function setGeneratorAreaOfInterest(pos: Vector3, radius: number): void {
        SetVehicleGeneratorAreaOfInterest(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x89F149B6131E57DA | Since: 323 | API-Set: unknown
     */
    export function setGravity(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleGravity(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x684785568EF26A22 | Since: 323 | API-Set: unknown
     */
    export function setHandbrake(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleHandbrake(vehicle, toggle);
    }

    /**
     * Use the "AIHandling" string found in handling.meta
     *
     * Hash: 0x10655FAB9915623D | Since: 323 | API-Set: unknown
     */
    export function setHandlingOverride(vehicle: number | IVehicle, hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        SetVehicleHandlingHashForAi(vehicle, hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02398B627547189C | Since: 323 | API-Set: unknown
     */
    export function setHasBeenDrivenFlag(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleHasBeenDrivenFlag(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B5F9D2AF1F1722D | Since: 323 | API-Set: unknown
     */
    export function setHasBeenOwnedByPlayer(vehicle: number | IVehicle, owned: boolean): void {
        SetVehicleHasBeenOwnedByPlayer(vehicle, owned);
    }

    /**
     * If set to true, prevents vehicle sirens from having sound, leaving only the lights.
     *
     * Hash: 0xD8050E0EB60CF274 | Since: 323 | API-Set: unknown
     */
    export function setHasMutedSirens(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleHasMutedSirens(vehicle, toggle);
    }

    /**
     * if true, axles won't bend.
     *
     * Hash: 0x92F0CF722BC4202F | Since: 323 | API-Set: unknown
     */
    export function setHasStrongAxles(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleHasStrongAxles(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1AA8A837D2169D94 | Since: 323 | API-Set: unknown
     */
    export function setHasUnbreakableLights(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleHasUnbreakableLights(vehicle, toggle);
    }

    /**
     * p1 can be either 0, 1 or 2.
     *
     * Determines how vehicle lights behave when toggled.
     *
     * 0 = Default (Lights can be toggled between off, normal and high beams)
     * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
     * 2 = Always On (Lights can be toggled between normal and high beams)
     *
     * Hash: 0x1FD09E7390A74D54 | Since: 323 | API-Set: unknown
     */
    export function setHeadlightShadows(vehicle: number | IVehicle): void {
        SetVehicleHeadlightShadows(vehicle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x407DC5E97DB1A4D3 | Since: 1493 | API-Set: unknown
     */
    export function setHomingLockedontoState(): void {
        Citizen.invokeNative('0x407DC5E97DB1A4D3', undefined, undefined);
    }

    /**
     * Seems to copy some values in vehicle
     *
     * Hash: 0x6A973569BA094650 | Since: 1604 | API-Set: unknown
     */
    export function setImpatienceTimer(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x6A973569BA094650', vehicle, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06582AFF74894C75 | Since: 323 | API-Set: unknown
     */
    export function setInactiveDuringPlayback(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleInactiveDuringPlayback(vehicle, toggle);
    }

    /**
     * Sets the turn signal enabled for a vehicle.
     * Set turnSignal to 1 for left light, 0 for right light.
     *
     * Hash: 0xB5D45264751B7DF0 | Since: 323 | API-Set: unknown
     */
    export function setIndicatorLights(vehicle: number | IVehicle, turnSignal: number, toggle: boolean): void {
        SetVehicleIndicatorLights(vehicle, turnSignal, toggle);
    }

    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xBE70724027F85BCD | Since: 323 | API-Set: unknown
     */
    export function setIndividualDoorsLocked(vehicle: number | IVehicle, doorId: number, doorLockStatus: number): void {
        SetVehicleIndividualDoorsLocked(vehicle, doorId, doorLockStatus);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0AD9E8F87FF7C16F | Since: 323 | API-Set: unknown
     */
    export function setInfluencesWantedLevel(): void {
        SetVehicleInfluencesWantedLevel(undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC2042F090AF6AD3 | Since: 323 | API-Set: unknown
     */
    export function setInteriorlight(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleInteriorlight(vehicle, toggle);
    }

    /**
     * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
     *
     * Hash: 0x9D44FCCE98450843 | Since: 323 | API-Set: unknown
     */
    export function setInCarModShop(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleSilent(vehicle, toggle);
    }

    /**
     * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
     *
     * Hash: 0x31B927BBC44156CD | Since: 323 | API-Set: unknown
     */
    export function setIsConsideredByPlayer(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleIsConsideredByPlayer(vehicle, toggle);
    }

    /**
     * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
     *
     * Hash: 0x07116E24E9D1929D | Since: 323 | API-Set: unknown
     */
    export function setIsRacing(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleIsRacing(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x67B2C79AA7FF5738 | Since: 323 | API-Set: unknown
     */
    export function setIsStolen(vehicle: number | IVehicle, isStolen: boolean): void {
        SetVehicleIsStolen(vehicle, isStolen);
    }

    /**
     * Sets the wanted state of this vehicle.
     *
     * Hash: 0xF7EC25A3EBEEC726 | Since: 323 | API-Set: unknown
     */
    export function setIsWanted(vehicle: number | IVehicle, state: boolean): void {
        SetVehicleIsWanted(vehicle, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8FBC8B1330CA9B4 | Since: 323 | API-Set: unknown
     */
    export function setKeepEngineOnWhenAbandoned(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleKeepEngineOnWhenAbandoned(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x99C82F8A139F3E4E | Since: 323 | API-Set: unknown
     */
    export function setKersAllowed(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleKersAllowed(vehicle, toggle);
    }

    /**
     * set's if the vehicle has lights or not.
     * not an on off toggle.
     * p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
     * p1 = 1 ;vehicle doesn't have lights, always off
     * p1 = 2 ;vehicle has always on lights
     * p1 = 3 ;or even larger like 4,5,... normal lights like =1
     * note1: when using =2 on day it's lowbeam,highbeam
     * but at night it's lowbeam,lowbeam,highbeam
     * note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
     *
     * Hash: 0x34E710FF01247C5A | Since: 323 | API-Set: unknown
     */
    export function setLights(vehicle: number | IVehicle, state: number): void {
        SetVehicleLights(vehicle, state);
    }

    /**
     * multiplier = brightness of head lights.
     * this value isn't capped afaik.
     *
     * multiplier = 0.0 no lights
     * multiplier = 1.0 default game value
     *
     *
     * Hash: 0xB385454F8791F57C | Since: 323 | API-Set: unknown
     */
    export function setLightMultiplier(vehicle: number | IVehicle, multiplier: number): void {
        SetVehicleLightMultiplier(vehicle, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC50CE861B55EAB8B | Since: 323 | API-Set: unknown
     */
    export function setLimitSpeedWhenPlayerInactive(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xC50CE861B55EAB8B', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x60BF608F1B8CD1B6 | Since: 323 | API-Set: unknown
     */
    export function setLivery(vehicle: number | IVehicle, livery: number): void {
        SetVehicleLivery(vehicle, livery);
    }

    /**
     * Used to set the secondary livery (the roof on Tornado Custom being one such example.)
     *
     * Livery value is dependent on the amount of liveries present in the vehicle's texture dictionary, for Tornado Custom this would be 0-6.
     *
     * Hash: 0xA6D3A8750DC73270 | Since: 505 | API-Set: unknown
     */
    export function setLivery2(vehicle: number | IVehicle, livery: number): void {
        SetVehicleRoofLivery(vehicle, livery);
    }

    /**
     * No comment provided
     *
     * Hash: 0x93AE6A61BE015BF1 | Since: 323 | API-Set: unknown
     */
    export function setLodMultiplier(vehicle: number | IVehicle, multiplier: number): void {
        SetVehicleLodMultiplier(vehicle, multiplier);
    }

    /**
     * To reset the max speed, set the `speed` value to `0.0` or lower.
     *
     * Hash: 0xBAA045B4E42F3C06 | Since: 1103 | API-Set: unknown
     */
    export function setMaxSpeed(vehicle: number | IVehicle, speed: number): void {
        SetVehicleMaxSpeed(vehicle, speed);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE851E480B814D4BA | Since: 323 | API-Set: unknown
     */
    export function setMayBeUsedByGotoPointAnyMeans(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xE851E480B814D4BA', vehicle, false);
    }

    /**
     * In b944, there are 50 (0 - 49) mod types.
     *
     * Sets the vehicle mod.
     * The vehicle must have a mod kit first.
     *
     * Any out of range ModIndex is stock.
     *
     * #Mod Type
     * Spoilers - 0
     * Front Bumper - 1
     * Rear Bumper - 2
     * Side Skirt - 3
     * Exhaust - 4
     * Frame - 5
     * Grille - 6
     * Hood - 7
     * Fender - 8
     * Right Fender - 9
     * Roof - 10
     * Engine - 11
     * Brakes - 12
     * Transmission - 13
     * Horns - 14 (modIndex from 0 to 51)
     * Suspension - 15
     * Armor - 16
     * Front Wheels - 23
     * Back Wheels - 24 //only for motocycles
     * Plate holders - 25
     * Trim Design - 27
     * Ornaments - 28
     * Dial Design - 30
     * Steering Wheel - 33
     * Shifter Leavers - 34
     * Plaques - 35
     * Hydraulics - 38
     * Livery - 48
     *
     * ENUMS: https://pastebin.com/QzEAn02v
     *
     * Hash: 0x6AF0636DDEDCB6DD | Since: 323 | API-Set: unknown
     */
    export function setMod(vehicle: number | IVehicle, modType: number, modIndex: number, customTires: boolean): void {
        SetVehicleMod(vehicle, modType, modIndex, customTires);
    }

    /**
     * Makes the vehicle stop spawning naturally in traffic. Here's an essential example:
     *
     * `VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);`
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x0FC2D89AC25A5814 | Since: 323 | API-Set: unknown
     */
    export function setModelIsSuppressed(model: number | string, suppressed: boolean): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        SetVehicleModelIsSuppressed(model, suppressed);
    }

    /**
     * paintType:
     * 0: Normal
     * 1: Metallic
     * 2: Pearl
     * 3: Matte
     * 4: Metal
     * 5: Chrome
     * 6: Chameleon
     *
     * color: number of the color.
     *
     * p3 seems to always be 0.
     *
     * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x43FEB945EE7F85B8 | Since: 323 | API-Set: unknown
     */
    export function setModColor1(vehicle: number | IVehicle, paintType: number, color: number, pearlescentColor: number): void {
        SetVehicleModColor1(vehicle, paintType, color, pearlescentColor);
    }

    /**
     * Changes the secondary paint type and color
     * paintType:
     * 0: Normal
     * 1: Metallic
     * 2: Pearl
     * 3: Matte
     * 4: Metal
     * 5: Chrome
     * 6: Chameleon
     *
     * color: number of the color
     *
     * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x816562BADFDEC83E | Since: 323 | API-Set: unknown
     */
    export function setModColor2(vehicle: number | IVehicle, paintType: number, color: number): void {
        SetVehicleModColor2(vehicle, paintType, color);
    }

    /**
     * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
     *
     * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
     *
     * Hash: 0x1F2AA07F00B3217A | Since: 323 | API-Set: unknown
     */
    export function setModKit(vehicle: number | IVehicle, modKit: number): void {
        SetVehicleModKit(vehicle, modKit);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xBFDF984E2C22B94F | Since: 323 | API-Set: unknown
     */
    export function setNameDebug(vehicle: number | IVehicle, name: string): void {
        SetVehicleNameDebug(vehicle, name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFBA550EA44404EE6 | Since: 323 | API-Set: unknown
     */
    export function setNeedsToBeHotwired(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleNeedsToBeHotwired(vehicle, toggle);
    }

    /**
     * Sets the color of the neon lights of the specified vehicle.
     *
     * Hash: 0x8E0A582209A62695 | Since: 323 | API-Set: unknown
     */
    export function setNeonColour(vehicle: number | IVehicle, r: number, g: number, b: number): void {
        SetVehicleNeonLightsColour(vehicle, r, g, b);
    }

    /**
     * Sets the neon lights of the specified vehicle on/off.
     *
     * Indices:
     * 0 = Left
     * 1 = Right
     * 2 = Front
     * 3 = Back
     *
     * Hash: 0x2AA720E4287BF269 | Since: 323 | API-Set: unknown
     */
    export function setNeonEnabled(vehicle: number | IVehicle, index: number, toggle: boolean): void {
        SetVehicleNeonLightEnabled(vehicle, index, toggle);
    }

    /**
     * Index references CVehicleModelColor
     *
     * Hash: 0xB93B2867F7B479D1 | Since: 1493 | API-Set: unknown
     */
    export function setNeonIndexColour(vehicle: number | IVehicle, index: number): void {
        SetVehicleNeonLightsColor2(vehicle, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAB04325045427AAE | Since: 323 | API-Set: unknown
     */
    export function setNotStealableAmbiently(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xAB04325045427AAE', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E569EC46EC21CAE | Since: 323 | API-Set: unknown
     */
    export function setNoExplosionDamageFromDriver(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x5E569EC46EC21CAE', vehicle, toggle);
    }

    /**
     * Sets a vehicle's license plate text.  8 chars maximum.
     *
     * Example:
     * `Ped playerPed = PLAYER::PLAYER_PED_ID();`
     * `Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);`
     * char *plateText = "KING";
     * `VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);`
     *
     * Hash: 0x95A88F0B409CDA47 | Since: 323 | API-Set: unknown
     */
    export function setNumberPlateText(vehicle: number | IVehicle, plateText: string): void {
        SetVehicleNumberPlateText(vehicle, plateText);
    }

    /**
     * Plates:
     * Blue/White - 0
     * Yellow/black - 1
     * Yellow/Blue - 2
     * Blue/White2 - 3
     * Blue/White3 - 4
     * Yankton - 5
     *
     * Hash: 0x9088EB5A43FFB0A1 | Since: 323 | API-Set: unknown
     */
    export function setNumberPlateTextIndex(vehicle: number | IVehicle, plateIndex: number): void {
        SetVehicleNumberPlateTextIndex(vehicle, plateIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35BB21DE06784373 | Since: 463 | API-Set: unknown
     */
    export function setOccupantsTakeExplosiveDamage(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x35BB21DE06784373', vehicle, toggle);
    }

    /**
     * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
     *
     * sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
     *
     * Hash: 0x49733E92263139D1 | Since: 323 | API-Set: unknown
     */
    export function setOnGroundProperly(vehicle: number | IVehicle): boolean {
        return SetVehicleOnGroundProperly(vehicle, 0);
    }

    /**
     * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
     *
     * Hash: 0xF19D095E42D430CC | Since: 323 | API-Set: unknown
     */
    export function setOutOfControl(vehicle: number | IVehicle, killDriver: boolean, explodeOnImpact: boolean): void {
        SetVehicleOutOfControl(vehicle, killDriver, explodeOnImpact);
    }

    /**
     * 1000 is max health
     * Begins leaking gas at around 650 health
     * -999.90002441406 appears to be minimum health, although nothing special occurs
     *
     * Hash: 0x70DB57649FA8D0D8 | Since: 323 | API-Set: unknown
     */
    export function setPetrolTankHealth(vehicle: number | IVehicle, health: number): void {
        SetVehiclePetrolTankHealth(vehicle, health);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5AFEEDD9BB2899D7 | Since: 323 | API-Set: unknown
     */
    export function setProvidesCover(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleProvidesCover(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF9159024555488C | Since: 944 | API-Set: unknown
     */
    export function setReadyForCleanup(): void {
        Citizen.invokeNative('0xCF9159024555488C', undefined);
    }

    /**
     * Reduces grip significantly so it's hard to go anywhere.
     *
     * Hash: 0x222FF6A823D122E2 | Since: 323 | API-Set: unknown
     */
    export function setReduceGrip(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleReduceGrip(vehicle, toggle);
    }

    /**
     * val is 0-3
     * Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
     *
     * Hash: 0x6DEE944E1EE90CFB | Since: 1604 | API-Set: unknown
     */
    export function setReduceGripLevel(vehicle: number | IVehicle, val: number): void {
        SetVehicleReduceTraction(vehicle, val);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC4B3347BD68BD609 | Since: 573 | API-Set: unknown
     */
    export function setRemoveAggressiveCarjackMission(): void {
        Citizen.invokeNative('0xC4B3347BD68BD609', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2311DD7159F00582 | Since: 323 | API-Set: unknown
     */
    export function setRespectsLocksWhenHasDriver(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x2311DD7159F00582', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x09606148B6C71DEF | Since: 323 | API-Set: unknown
     */
    export function setRudderBroken(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleRudderBroken(vehicle, toggle);
    }

    /**
     * Only works during nighttime.
     *
     * Hash: 0x14E85C5EE7A4D542 | Since: 323 | API-Set: unknown
     */
    export function setSearchlight(heli: number | IVehicle, toggle: boolean, canBeUsedByAI: boolean): void {
        SetVehicleSearchlight(heli, toggle, canBeUsedByAI);
    }

    /**
     * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
     *
     * `WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);`
     *
     * Hash: 0x74CD9A9327A282EA | Since: 323 | API-Set: unknown
     */
    export function setShootAtTarget(driver: number | IPed, entity: number | IEntity, xTarget: number, yTarget: number, zTarget: number): void {
        SetVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget);
    }

    /**
     * Does nothing. It's a nullsub.
     *
     * Hash: 0x99A05839C46CE316 | Since: 1604 | API-Set: unknown
     */
    export function setShuntOnStick(toggle: boolean): void {
        Citizen.invokeNative('0x99A05839C46CE316', toggle);
    }

    /**
     * Activate siren on vehicle (Only works if the vehicle has a siren).
     *
     * Hash: 0xF4924635A19EB37D | Since: 323 | API-Set: unknown
     */
    export function setSiren(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleSiren(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF051D9BFB6BA39C0 | Since: 877 | API-Set: unknown
     */
    export function setSlipstreamingShouldTimeOut(toggle: boolean): void {
        Citizen.invokeNative('0xF051D9BFB6BA39C0', toggle);
    }

    /**
     * Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
     * May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
     *
     * Hash: 0x1CF38D529D7441D9 | Since: 323 | API-Set: unknown
     */
    export function setStaysFrozenWhenCleanedUp(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleSt(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9007A2F21DC108D4 | Since: 323 | API-Set: unknown
     */
    export function setSteeringBiasScalar(): void {
        SetVehicleSteeringBiasScalar(undefined, 0);
    }

    /**
     * Locks the vehicle's steering to the desired angle, explained below.
     *
     * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
     *
     * Steer bias:
     * -1.0 = full right
     * 0.0 = centered steering
     * 1.0 = full left
     *
     * Hash: 0x42A8EC77D5150CBE | Since: 323 | API-Set: unknown
     */
    export function setSteerBias(vehicle: number | IVehicle, value: number): void {
        SetVehicleSteerBias(vehicle, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCE97BDF8A0EABC8 | Since: 1103 | API-Set: unknown
     */
    export function setSteerForBuildings(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0xDCE97BDF8A0EABC8', vehicle, undefined);
    }

    /**
     * sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:
     * CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
     * {
     * CVehicle *result; // rax@1
     *
     * result = EntityAsCVehicle(a1);
     * if ( result )
     * {
     * result->field_886 &= 0xEFu;
     * result->field_886 |= 16 * (a2 & 1);
     * }
     * return result;
     * }
     *
     * Hash: 0x6EBFB22D646FFC18 | Since: 323 | API-Set: unknown
     */
    export function setStopInstantlyWhenPlayerInactive(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x6EBFB22D646FFC18', vehicle, toggle);
    }

    /**
     * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
     *
     * Hash: 0x3E8C8727991A8A0B | Since: 323 | API-Set: unknown
     */
    export function setStrong(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleStrong(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5815BD2763178DF4 | Since: 2802 | API-Set: unknown
     */
    export function setTailLights(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x5815BD2763178DF4', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x737E398138550FFF | Since: 944 | API-Set: unknown
     */
    export function setTankStationary(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x737E398138550FFF', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x56B94C6D7127DFBA | Since: 323 | API-Set: unknown
     */
    export function setTankTurretPosition(vehicle: number | IVehicle, position: number): void {
        SetVehicleTankTurretPosition(vehicle, position, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E0A74E1002380B1 | Since: 323 | API-Set: unknown
     */
    export function setTimedExplosion(vehicle: number | IVehicle, ped: number | IPed, toggle: boolean): void {
        SetVehicleTimedExplosion(vehicle, ped, toggle);
    }

    /**
     * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
     *
     * Hash: 0xFE54B92A344583CA | Since: 323 | API-Set: unknown
     */
    export function setTowTruckArmPosition(vehicle: number | IVehicle, position: number): void {
        SetVehicleTowTruckArmPosition(vehicle, position);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1093408B4B9D1146 | Since: 323 | API-Set: unknown
     */
    export function setTurretSpeedThisFrame(vehicle: number | IVehicle, speed: number): void {
        SetVehicleTurretSpeedThisFrame(vehicle, speed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0581730AB9380412 | Since: 1103 | API-Set: unknown
     */
    export function setTurretTarget(vehicle: number | IVehicle, pos: Vector3): void {
        Citizen.invokeNative('0x0581730AB9380412', vehicle, false, pos.x, pos.y, pos.z, false);
    }

    /**
     * Allows you to toggle bulletproof tires.
     *
     * Hash: 0xEB9DC3C7D8596C46 | Since: 323 | API-Set: unknown
     */
    export function setTyresCanBurst(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleTyresCanBurst(vehicle, toggle);
    }

    /**
     * `"To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)`
     * to burst all tyres type it 8 times where p1 = 0 to 7.
     *
     * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
     *
     * '0 = wheel_lf / bike, plane or jet front
     * '1 = wheel_rf
     * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
     * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
     * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
     * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
     * '45 = 6 wheels trailer mid wheel left
     * '47 = 6 wheels trailer mid wheel right
     *
     * Hash: 0xEC6A202EE4960385 | Since: 323 | API-Set: unknown
     */
    export function setTyreBurst(vehicle: number | IVehicle, index: number, onRim: boolean): void {
        SetVehicleTyreBurst(vehicle, index, onRim, 0);
    }

    /**
     * tyreIndex = 0 to 4 on normal vehicles
     *
     * '0 = wheel_lf / bike, plane or jet front
     * '1 = wheel_rf
     * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
     * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
     * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
     * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
     * '45 = 6 wheels trailer mid wheel left
     * '47 = 6 wheels trailer mid wheel right
     *
     * Hash: 0x6E13FC662B882D1D | Since: 323 | API-Set: unknown
     */
    export function setTyreFixed(vehicle: number | IVehicle, tyreIndex: number): void {
        SetVehicleTyreFixed(vehicle, tyreIndex);
    }

    /**
     * Sets the tire smoke's color of this vehicle.
     *
     * vehicle: The vehicle that is the target of this method.
     * r: The red level in the RGB color code.
     * g: The green level in the RGB color code.
     * b: The blue level in the RGB color code.
     *
     * Note: setting r,g,b to 0 will give the car the "Patriot" tire smoke.
     *
     * Hash: 0xB5BA80F839791C0F | Since: 323 | API-Set: unknown
     */
    export function setTyreSmokeColor(vehicle: number | IVehicle, r: number, g: number, b: number): void {
        SetVehicleTyreSmokeColor(vehicle, r, g, b);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8ABA6AF54B942B95 | Since: 323 | API-Set: unknown
     */
    export function setUndriveable(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleUndriveable(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE05DD0E9707003A3 | Since: 323 | API-Set: unknown
     */
    export function setUsedForPilotSchool(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xE05DD0E9707003A3', vehicle, toggle);
    }

    /**
     * vehicle must be a plane
     *
     * Hash: 0xCAC66558B944DA67 | Since: 323 | API-Set: unknown
     */
    export function setUsesLargeRearRamp(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleUsesLargeRearRamp(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB2333BB87DDD87F | Since: 757 | API-Set: unknown
     */
    export function setUsesMpPlayerDamageMultiplier(): void {
        Citizen.invokeNative('0xBB2333BB87DDD87F', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D97D1E3A70A649F | Since: 323 | API-Set: unknown
     */
    export function setUseAlternateHandling(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleUseAlternateHandling(vehicle, toggle);
    }

    /**
     * Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)
     *
     * Hash: 0x41290B40FA63E6DA | Since: 1011 | API-Set: unknown
     */
    export function setUseBoostButtonForWheelRetract(toggle: boolean): void {
        Citizen.invokeNative('0x41290B40FA63E6DA', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE023E8AC4EF7C117 | Since: 323 | API-Set: unknown
     */
    export function setUseCutsceneWheelCompression(p0: number | IVehicle): boolean {
        return SetVehicleUseCutsceneWheelCompression(p0, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88BC673CA9E0AE99 | Since: 323 | API-Set: unknown
     */
    export function setUseMoreRestrictiveSpawnChecks(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x88BC673CA9E0AE99', vehicle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC45C27EF50F36ADC | Since: 323 | API-Set: unknown
     */
    export function setUsePlayerLightSettings(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleUsePlayerLightSettings(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x86B4B6212CB8B627 | Since: 1011 | API-Set: unknown
     */
    export function setWeaponCanTargetObjects(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleWeaponsDisabled(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x45A561A9421AB6AD | Since: 944 | API-Set: unknown
     */
    export function setWeaponDamageScale(vehicle: number | IVehicle, multiplier: number): boolean {
        return SetVehicleUnkDamageMultiplier(vehicle, multiplier);
    }

    /**
     * Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
     * For example, you can "remove" any vehicle weapon from any vehicle.
     * ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
     *
     * Hash: 0x44CD1F493DB2A0A6 | Since: 944 | API-Set: unknown
     */
    export function setWeaponRestrictedAmmo(vehicle: number | IVehicle, weaponIndex: number, capacity: number): void {
        SetVehicleWeaponCapacity(vehicle, weaponIndex, capacity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x29B18B4FD460CA8F | Since: 323 | API-Set: unknown
     */
    export function setWheelsCanBreak(vehicle: number | IVehicle, enabled: boolean): void {
        SetVehicleWheelsCanBreak(vehicle, enabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA37B9A517B133349 | Since: 323 | API-Set: unknown
     */
    export function setWheelsCanBreakOffWhenBlowUp(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleWheelsCanBreakOffWhenBlowUp(vehicle, toggle);
    }

    /**
     * 0: Sport
     * 1: Muscle
     * 2: Lowrider
     * 3: SUV
     * 4: Offroad
     * 5: Tuner
     * 6: Bike Wheels
     * 7: High End
     * 8: Benny's Originals
     * 9: Benny's Bespoke
     * 10: Racing
     * 11: Street
     * 12: Track
     *
     * Hash: 0x487EB21CC7295BA1 | Since: 323 | API-Set: unknown
     */
    export function setWheelType(vehicle: number | IVehicle, WheelType: number): void {
        SetVehicleWheelType(vehicle, WheelType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE5C1255A1830FF5 | Since: 323 | API-Set: unknown
     */
    export function setWillForceOtherVehiclesToStop(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xBE5C1255A1830FF5', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C4A1590ABF43E8B | Since: 323 | API-Set: unknown
     */
    export function setWillTellOthersToHurry(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x2C4A1590ABF43E8B', vehicle, false);
    }

    /**
     * enum WindowTints
     * {
     * WINDOWTINT_NONE,
     * WINDOWTINT_PURE_BLACK,
     * WINDOWTINT_DARKSMOKE,
     * WINDOWTINT_LIGHTSMOKE,
     * WINDOWTINT_STOCK,
     * WINDOWTINT_LIMO,
     * WINDOWTINT_GREEN
     * };
     * Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x57C51E6BAD752696 | Since: 323 | API-Set: unknown
     */
    export function setWindowTint(vehicle: number | IVehicle, tint: number): void {
        SetVehicleWindowTint(vehicle, tint);
    }

    /**
     * `color`: is the paint index for the vehicle.
     * Paint index goes from 0 to 12.
     * Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
     * Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0xE41033B25D003A07 | Since: 1604 | API-Set: unknown
     */
    export function setXenonLightColorIndex(vehicle: number | IVehicle, colorIndex: number): void {
        SetVehicleXenonLightsColor(vehicle, colorIndex);
    }

    /**
     * Enables/disables the ability to wheelie on motorcycles.
     *
     * Hash: 0x1312DDD8385AEE4E | Since: 1103 | API-Set: unknown
     */
    export function setWheelieEnabled(vehicle: number | IVehicle, enabled: boolean): void {
        Citizen.invokeNative('0x1312DDD8385AEE4E', vehicle, enabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF660602546D27BA8 | Since: 944 | API-Set: unknown
     */
    export function setWheelsExtendedInstantly(vehicle: number | IVehicle): void {
        RaiseRetractableWheels(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5335BE58C083E74E | Since: 1011 | API-Set: unknown
     */
    export function setWheelsRetractedInstantly(vehicle: number | IVehicle): void {
        LowerRetractableWheels(vehicle);
    }

    /**
     * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
     *
     * Hash: 0x9438F7AD68771A20 | Since: 323 | API-Set: unknown
     */
    export function skipTimeInPlaybackRecorded(vehicle: number | IVehicle, time: number): void {
        SkipTimeInPlaybackRecordedVehicle(vehicle, time);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAB8E2EDA0C0A5883 | Since: 323 | API-Set: unknown
     */
    export function skipToEndAndStopPlaybackRecorded(vehicle: number | IVehicle): void {
        SkipToEndAndStopPlaybackRecordedVehicle(vehicle);
    }

    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Hash: 0x9E5B5E4D2CCD2259 | Since: 323 | API-Set: unknown
     */
    export function smashWindow(vehicle: number | IVehicle, windowIndex: number): void {
        SmashVehicleWindow(vehicle, windowIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x374706271354CB18 | Since: 323 | API-Set: unknown
     */
    export function stabiliseEntityAttachedToHeli(vehicle: number | IVehicle, entity: number | IEntity): void {
        StabiliseEntityAttachedToHeli(vehicle, entity, 0);
    }

    /**
     * `p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).`
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x3F878F92B3A7A071 | Since: 323 | API-Set: unknown
     */
    export function startPlaybackRecorded(vehicle: number | IVehicle, recording: number, script: string): void {
        StartPlaybackRecordedVehicle(vehicle, recording, script, false);
    }

    /**
     * AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
     *
     * FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.
     *
     * Hash: 0x29DE5FA52D00428C | Since: 323 | API-Set: unknown
     */
    export function startPlaybackRecordedUsingAi(vehicle: number | IVehicle, recording: number, script: string, speed: number, drivingStyle: number): void {
        StartPlaybackRecordedVehicleUsingAi(vehicle, recording, script, speed, drivingStyle);
    }

    /**
     * flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
     *
     * time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
     *
     * Hash: 0x7D80FD645D4DA346 | Since: 323 | API-Set: unknown
     */
    export function startPlaybackRecordedWithFlags(vehicle: number | IVehicle, recording: number, script: string, flags: number, time: number, drivingStyle: number): void {
        StartPlaybackRecordedVehicleWithFlags(vehicle, recording, script, flags, time, drivingStyle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8FF7AB45305C345 | Since: 323 | API-Set: unknown
     */
    export function startAlarm(vehicle: number | IVehicle): void {
        StartVehicleAlarm(vehicle);
    }

    /**
     * Sounds the horn for the specified vehicle.
     *
     * vehicle: The vehicle to activate the horn for.
     * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
     * duration: The duration to sound the horn, in milliseconds.
     *
     * Note: If a player is in the vehicle, it will only sound briefly.
     *
     * Hash: 0x9C8C6504B5B63D2C | Since: 323 | API-Set: unknown
     */
    export function startHorn(vehicle: number | IVehicle, duration: number, mode: number | string, forever: boolean): void {
        if (typeof mode === 'string') mode = misc.getHashKey(mode)
        StartVehicleHorn(vehicle, duration, mode, forever);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F87E938BDF29D66 | Since: 323 | API-Set: unknown
     */
    export function stopAllGarageActivity(): void {
        StopAllGarageActivity();
    }

    /**
     * Stops CTaskBringVehicleToHalt
     *
     * Hash: 0x7C06330BFDDA182E | Since: 1103 | API-Set: unknown
     */
    export function stopBringingToHalt(vehicle: number | IVehicle): void {
        StopBringVehicleToHalt(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54833611C17ABDEA | Since: 323 | API-Set: unknown
     */
    export function stopPlaybackRecorded(vehicle: number | IVehicle): void {
        StopPlaybackRecordedVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x83F813570FF519DE | Since: 573 | API-Set: unknown
     */
    export function suppressNeonsOn(vehicle: number | IVehicle, toggle: boolean): void {
        DisableVehicleNeonLights(vehicle, toggle);
    }

    /**
     * Same call as ALLOW_BOAT_BOOM_TO_ANIMATE
     *
     * Hash: 0xC1F981A6F74F0C23 | Since: 323 | API-Set: unknown
     */
    export function swingBoatBoomFreely(vehicle: number | IVehicle, toggle: boolean): void {
        GetBoatBoomPositionRatio2(vehicle, toggle);
    }

    /**
     * Sets the boat boom position for the `TR3` trailer.
     * Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
     * To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
     *
     * Hash: 0xF488C566413B4232 | Since: 323 | API-Set: unknown
     */
    export function swingBoatBoomToRatio(vehicle: number | IVehicle, ratio: number): void {
        SetBoatBoomPositionRatio(vehicle, ratio);
    }

    /**
     * Toggles whether ambient trains can spawn on the specified track or not
     *
     * `trackId` is the internal id of the train track to switch.
     * `state` is whether ambient trains can spawn or not
     *
     * trackIds
     * 0 (`trains1.dat`) Main track around SA
     * 1 (`trains2.dat`) Davis Quartz Quarry branch
     * 2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
     * 3 (`trains4.dat`) Metro track circuit
     * 4 (`trains5.dat`) Branch in Mirror Park Railyard
     * 5 (`trains6.dat`) Branch in Mirror Park Railyard
     * 6 (`trains7.dat`) LS branch to Mirror Park Railyard
     * 7 (`trains8.dat`) Overground part of metro track along Forum Dr.
     * 8 (`trains9.dat`) Branch to Mirror Park Railyard
     * 9 (`trains10.dat`) Yankton train
     * 10 (`trains11.dat`) Part of metro track near mission row
     * 11 (`trains12.dat`) Yankton prologue mission train
     * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
     *
     * Hash: 0xFD813BB7DB977F20 | Since: 323 | API-Set: unknown
     */
    export function switchTrainTrack(trackId: number, state: boolean): void {
        SwitchTrainTrack(trackId, state);
    }

    /**
     * Toggles:
     * UNK17 - 17
     * Turbo - 18
     * UNK19 - 19
     * Tire Smoke - 20
     * UNK21 - 21
     * Xenon Headlights - 22
     *
     * Hash: 0x2A1F4F37F95BAD08 | Since: 323 | API-Set: unknown
     */
    export function toggleMod(vehicle: number | IVehicle, modType: number, toggle: boolean): void {
        ToggleVehicleMod(vehicle, modType, toggle);
    }

    /**
     * in script hook .net
     *
     * Vehicle v = ...;
     * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
     *
     * Hash: 0x64473AEFDCF47DCA | Since: 323 | API-Set: unknown
     */
    export function trackVisibility(vehicle: number | IVehicle): void {
        TrackVehicleVisibility(vehicle);
    }

    /**
     * Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
     *
     * Hash: 0x2A69FFD1B42BFF9E | Since: 1290 | API-Set: unknown
     */
    export function transformToCar(vehicle: number | IVehicle, noAnimation: boolean): void {
        TransformToCar(vehicle, noAnimation);
    }

    /**
     * Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
     *
     * Hash: 0xBE4C854FFDB6EEBE | Since: 1365 | API-Set: unknown
     */
    export function transformToSubmarine(vehicle: number | IVehicle, noAnimation: boolean): boolean {
        return TransformToSubmarine(vehicle, noAnimation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8879EE09268305D5 | Since: 323 | API-Set: unknown
     */
    export function unpausePlaybackRecorded(vehicle: number | IVehicle): void {
        UnpausePlaybackRecordedVehicle(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x756AE6E962168A04 | Since: 944 | API-Set: unknown
     */
    export function setEnableNormaliseRampCarVerticalVeloctiy(): void {
        SetVehicleRampUpwardsLaunchMotion(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1BBAC99C0BC53656 | Since: 944 | API-Set: unknown
     */
    export function setEnableRampCarSideImpulse(): void {
        SetVehicleRampSidewaysLaunchMotion(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3B0E0AED097A3F5 | Since: 1103 | API-Set: unknown
     */
    export function setExtenableSideTargetRatio(): number {
        return Citizen.invokeNative('0xF3B0E0AED097A3F5', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D30687C57BAA0BB | Since: 1011 | API-Set: unknown
     */
    export function setJetWashForceEnabled(): void {
        Citizen.invokeNative('0x9D30687C57BAA0BB', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0419B167EE128F33 | Since: 1103 | API-Set: unknown
     */
    export function setOverrideExtenableSideRatio(): number {
        return Citizen.invokeNative('0x0419B167EE128F33', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD3E51C0AB8C26EEE | Since: 1103 | API-Set: unknown
     */
    export function setOverrideSideRatio(): number {
        return Citizen.invokeNative('0xD3E51C0AB8C26EEE', undefined, undefined);
    }

    /**
     * Parachute models:
     * - sr_prop_specraces_para_s_01
     * - imp_prop_impexp_para_s (SecuroServ; Default)
     * Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.
     *
     * Hash: 0x4D610C6B56031351 | Since: 1011 | API-Set: unknown
     */
    export function setParachuteModelOverride(vehicle: number | IVehicle, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetVehicleParachuteModel(vehicle, modelHash);
    }

    /**
     * Variations available for the generic parachute (sr_prop_specraces_para_s_01):
     * - 0: Rainbow
     * - 1: Red
     * - 2: White, blue, yellow
     * - 3: Black, red, white
     * - 4: Red, white, blue
     * - 5: Blue
     * - 6: Black
     * - 7: Black, yellow
     *
     * Hash: 0xA74AD2439468C883 | Since: 1011 | API-Set: unknown
     */
    export function setParachuteModelTintIndex(vehicle: number | IVehicle, textureVariation: number): void {
        SetVehicleParachuteTextureVariation(vehicle, textureVariation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28D034A93FE31BF5 | Since: 944 | API-Set: unknown
     */
    export function setRampAndRammingCarsTakeDamage(vehicle: number | IVehicle, toggle: boolean): void {
        SetVehicleReceivesRampDamage(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BFFB028B3DD0A97 | Since: 944 | API-Set: unknown
     */
    export function startParachuting(vehicle: number | IVehicle, active: boolean): void {
        SetVehicleParachuteActive(vehicle, active);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA4743874D515F13 | Since: 2944 | API-Set: unknown
     */
    export function areMissileBaysDeployed(vehicle: number | IVehicle): boolean {
        return Citizen.invokeNative('0xEA4743874D515F13', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC05D2777F855F44 | Since: 3407 | API-Set: unknown
     */
    export function enableIndividualPlanePropeller(vehicle: number | IVehicle, propeller: number): void {
        Citizen.invokeNative('0xDC05D2777F855F44', vehicle, propeller);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1FCB07FE230B6639 | Since: 3258 | API-Set: unknown
     */
    export function getIsElectric(vehicleModel: number | string): boolean {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        return GetIsVehicleElectric(vehicleModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEC4B8653462450E | Since: 3095 | API-Set: unknown
     */
    export function getRemainingNitrousDuration(vehicle: number | IVehicle): number {
        return GetRemainingNitrousDuration(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x56185A25D45A0DCD | Since: 3095 | API-Set: unknown
     */
    export function getCurrentDriveGear(vehicle: number | IVehicle): number {
        return Citizen.invokeNative('0x56185A25D45A0DCD', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9DDA40BC293A61E | Since: 3095 | API-Set: unknown
     */
    export function getCurrentRevRatio(vehicle: number | IVehicle): number {
        return Citizen.invokeNative('0xF9DDA40BC293A61E', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD8CE53356B5D745 | Since: 3095 | API-Set: unknown
     */
    export function getDesiredDriveGear(vehicle: number | IVehicle): number {
        return Citizen.invokeNative('0xFD8CE53356B5D745', vehicle);
    }

    /**
     * Returns the vehicle's drivetrain type.
     *
     * enum eVehicleDrivetrainType
     * {
     * VehicleDrivetrainType_INVALID,
     * VehicleDrivetrainType_FWD,
     * VehicleDrivetrainType_RWD,
     * VehicleDrivetrainType_AWD
     * };
     *
     * _GET_VEHICLE_DE* - _GET_VEHICLE_DI*
     *
     * Hash: 0x1423725069EE1D14 | Since: 3258 | API-Set: unknown
     */
    export function getDrivetrainType(vehicleModel: number | string): number {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        return GetVehicleDrivetrainType(vehicleModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE728F090D538CB18 | Since: 3095 | API-Set: unknown
     */
    export function getExhaustBone(vehicle: number | IVehicle, index: number): [boolean, number, boolean] {
        return Citizen.invokeNative('0xE728F090D538CB18', vehicle, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x24910C3D66BA770D | Since: 3095 | API-Set: unknown
     */
    export function getMaxDriveGearCount(vehicle: number | IVehicle): number {
        return Citizen.invokeNative('0x24910C3D66BA770D', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3EE18B00CD86C54F | Since: 3095 | API-Set: unknown
     */
    export function getMaxExhaustBoneCount(): number {
        return Citizen.invokeNative('0x3EE18B00CD86C54F');
    }

    /**
     * No comment provided
     *
     * Hash: 0x61F02E4E9A7A61EA | Since: 3095 | API-Set: unknown
     */
    export function getModelNumDriveGears(vehicleModel: number | string): number {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        return Citizen.invokeNative('0x61F02E4E9A7A61EA', vehicleModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92D96892FC06AF22 | Since: 3095 | API-Set: unknown
     */
    export function getThrottle(vehicle: number | IVehicle): number {
        return Citizen.invokeNative('0x92D96892FC06AF22', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80D9D32636369C92 | Since: 2802 | API-Set: unknown
     */
    export function getTrailerParentVehicle(trailer: number | IVehicle): number {
        return Citizen.invokeNative('0x80D9D32636369C92', trailer);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6638C0F19DE692FE | Since: 3095 | API-Set: unknown
     */
    export function isGen9ExclusiveModel(vehicleModel: number | string): boolean {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        return Citizen.invokeNative('0x6638C0F19DE692FE', vehicleModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71C6302CBCA6CA35 | Since: 3407 | API-Set: unknown
     */
    export function isOnBoostPad(vehicle: number | IVehicle): boolean {
        return Citizen.invokeNative('0x71C6302CBCA6CA35', vehicle);
    }

    /**
     * _SET_ALLOW_R* - _SET_ALLOW_V*
     *
     * Hash: 0x27D27223E8EF22ED | Since: 3095 | API-Set: unknown
     */
    export function setAllowCollisionWhenIn(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x27D27223E8EF22ED', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x48BD57D0DD17786A | Since: 3095 | API-Set: unknown
     */
    export function setAttachedToTowTruckArm(towTruck: number | IVehicle, vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x48BD57D0DD17786A', towTruck, vehicle);
    }

    /**
     * Use the vehicle bounds (instead of viewport) when deciding if a vehicle is sufficiently above the water (waterheight.dat), bypassing wave simulation checks
     *
     * Hash: 0x85FC953F6C6CBDE1 | Since: 2802 | API-Set: unknown
     */
    export function setBoundsAffectWaterProbes(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x85FC953F6C6CBDE1', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C02468829E4AA65 | Since: 2944 | API-Set: unknown
     */
    export function setDeployMissileBays(vehicle: number | IVehicle, deploy: boolean): void {
        Citizen.invokeNative('0x0C02468829E4AA65', vehicle, deploy);
    }

    /**
     * Prevents the vehicle from exploding when taking body damage if the inflictor is an AI-controlled vehicle. Only works for planes.
     *
     * Hash: 0xB0B7DF5CB876FF5E | Since: 3407 | API-Set: unknown
     */
    export function setDisableExplodeFromBodyDamageReceivedByAi(vehicle: number | IVehicle, disable: boolean): void {
        Citizen.invokeNative('0xB0B7DF5CB876FF5E', vehicle, disable);
    }

    /**
     * First two floats relate to rumble, the last is a threshold
     *
     * Hash: 0xDAF4C98C18AC6F06 | Since: 3095 | API-Set: unknown
     */
    export function setDriftSlipAngleLimits(vehicle: number | IVehicle, durationScalar: number, amplitudeScalar: number, slipAngleLimit: number): void {
        Citizen.invokeNative('0xDAF4C98C18AC6F06', vehicle, durationScalar, amplitudeScalar, slipAngleLimit);
    }

    /**
     * No comment provided
     *
     * Hash: 0x16CFBC5E7EB32861 | Since: 3095 | API-Set: unknown
     */
    export function setMinimumTimeBetweenGearShifts(vehicle: number | IVehicle, time: number): void {
        Citizen.invokeNative('0x16CFBC5E7EB32861', vehicle, time);
    }

    /**
     * No comment provided
     *
     * Hash: 0x465EEA70AF251045 | Since: 3095 | API-Set: unknown
     */
    export function setNitrousIsVisible(vehicle: number | IVehicle, enabled: boolean): void {
        SetNitrousIsActive(vehicle, enabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFD262ACCA64479A | Since: 3095 | API-Set: unknown
     */
    export function setOverrideTractionLossMultiplier(vehicle: number | IVehicle, modifier: number): void {
        Citizen.invokeNative('0xAFD262ACCA64479A', vehicle, modifier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAFB99B304BC52A7 | Since: 3407 | API-Set: unknown
     */
    export function setPlaneAvoidsOthers(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0xBAFB99B304BC52A7', vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1AD0F63A94E10EFF | Since: 3407 | API-Set: unknown
     */
    export function setRemainingNitrousDuration(vehicle: number | IVehicle, duration: number): void {
        Citizen.invokeNative('0x1AD0F63A94E10EFF', vehicle, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0x337EF33DA3DDB990 | Since: 3095 | API-Set: unknown
     */
    export function setTransmissionReducedGearRatio(vehicle: number | IVehicle, toggle: boolean): void {
        Citizen.invokeNative('0x337EF33DA3DDB990', vehicle, toggle);
    }

    /**
     * Does not actually return anything.
     *
     * Hash: 0x84D7FFD223CAAFFD | Since: 3407 | API-Set: unknown
     */
    export function setExplosiveDamageScale(vehicle: number | IVehicle, scale: number): any {
        return Citizen.invokeNative('0x84D7FFD223CAAFFD', vehicle, scale);
    }

    /**
     * 0.0f = engine rev minimum
     * 1.0f = engine rev limit
     *
     * Hash: 0x5AE614ECA5FDD423 | Since: 3095 | API-Set: unknown
     */
    export function setMaxLaunchEngineRevs(vehicle: number | IVehicle, modifier: number): void {
        Citizen.invokeNative('0x5AE614ECA5FDD423', vehicle, modifier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1980F68872CC2C3D | Since: 3095 | API-Set: unknown
     */
    export function setUseHornButtonForNitrous(toggle: boolean): void {
        SetVehicleUseHornButtonForNitrous(toggle);
    }

}


export namespace water {
    /**
     * Creates a volume where water effects do not apply.
     * Useful for preventing water collisions from flooding areas underneath them.
     * This has no effect on waterquads, only water created from drawables and collisions.
     * Don't create volumes when your local ped is swimming (e.g. use IS_PED_SWIMMING in your scripts before you call this)
     *
     * Hash: 0xEB1C6DD | Since: unknown | API-Set: client
     */
    export function createDryVolume(xMin: number, yMin: number, zMin: number, xMax: number, yMax: number, zMax: number): number {
        return CreateDryVolume(xMin, yMin, zMin, xMax, yMax, zMax);
    }

    /**
     * No comment provided
     *
     * Hash: 0x14088095 | Since: unknown | API-Set: client
     */
    export function getQuadAlpha(waterQuad: number): [boolean, number, number, number, number] {
        return GetWaterQuadAlpha(waterQuad);
    }

    /**
     * This native returns the index of a water quad if the given point is inside its bounds.
     *
     * *If you also want to check for water level, check out [`GetWaterQuadAtCoords_3d`](#\_0xF8E03DB8)*
     *
     * Hash: 0x17321452 | Since: unknown | API-Set: client
     */
    export function getQuadAtCoords(x: number, y: number): number {
        return GetWaterQuadAtCoords(x, y);
    }

    /**
     * This alternative implementation of [`GetWaterQuadAtCoords`](#\_0x17321452) also checks the height of the water level.
     *
     * Hash: 0xF8E03DB8 | Since: unknown | API-Set: client
     */
    export function getQuadAtCoords3d(pos: Vector3): number {
        return GetWaterQuadAtCoords3d(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42E9A06A | Since: unknown | API-Set: client
     */
    export function getQuadBounds(waterQuad: number): [boolean, number, number, number, number] {
        return GetWaterQuadBounds(waterQuad);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1884159 | Since: unknown | API-Set: client
     */
    export function getQuadCount(): number {
        return GetWaterQuadCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x22EA3BD8 | Since: unknown | API-Set: client
     */
    export function getQuadHasLimitedDepth(waterQuad: number): [boolean, number] {
        return GetWaterQuadHasLimitedDepth(waterQuad);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DEDBD77 | Since: unknown | API-Set: client
     */
    export function getQuadIsInvisible(waterQuad: number): [boolean, number] {
        return GetWaterQuadIsInvisible(waterQuad);
    }

    /**
     * *level is defined as "z" in water.xml*
     *
     * Hash: 0x6523816B | Since: unknown | API-Set: client
     */
    export function getQuadLevel(waterQuad: number): [boolean, number] {
        return GetWaterQuadLevel(waterQuad);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F4ACBA | Since: unknown | API-Set: client
     */
    export function getQuadNoStencil(waterQuad: number): [boolean, number] {
        return GetWaterQuadNoStencil(waterQuad);
    }

    /**
     * Valid type definitions:
     *
     * *   **0** Square
     * *   **1** Right triangle where the 90 degree angle is at maxX, minY
     * *   **2** Right triangle where the 90 degree angle is at minX, minY
     * *   **3** Right triangle where the 90 degree angle is at minX, maxY
     * *   **4** Right triangle where the 90 degree angle is at maxY, maxY
     *
     * Hash: 0xE2501B8B | Since: unknown | API-Set: client
     */
    export function getQuadType(waterQuad: number): [boolean, number] {
        return GetWaterQuadType(waterQuad);
    }

    /**
     * No comment provided
     *
     * Hash: 0x865139A3 | Since: unknown | API-Set: client
     */
    export function getWaveQuadAmplitude(waveQuad: number): [boolean, number] {
        return GetWaveQuadAmplitude(waveQuad);
    }

    /**
     * This native returns the index of a wave quad if the given point is inside its bounds.
     *
     * Hash: 0x3F5A61A7 | Since: unknown | API-Set: client
     */
    export function getWaveQuadAtCoords(x: number, y: number): number {
        return GetWaveQuadAtCoords(x, y);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF86136DB | Since: unknown | API-Set: client
     */
    export function getWaveQuadBounds(waveQuad: number): [boolean, number, number, number, number] {
        return GetWaveQuadBounds(waveQuad);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9250C76 | Since: unknown | API-Set: client
     */
    export function getWaveQuadCount(): number {
        return GetWaveQuadCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCE49A1C | Since: unknown | API-Set: client
     */
    export function getWaveQuadDirection(waveQuad: number): [boolean, number, number] {
        return GetWaveQuadDirection(waveQuad);
    }

    /**
     * Define the xml in a resources fxmanifest, under the file(s) section.
     *
     * Hash: 0xF5102568 | Since: unknown | API-Set: client
     */
    export function loadFromPath(resourceName: string, fileName: string): boolean {
        return LoadWaterFromPath(resourceName, fileName);
    }

    /**
     * Removes a dry volume from the game session.
     * See CREATE_DRY_VOLUME for more info
     *
     * Hash: 0x7BCAA6E7 | Since: unknown | API-Set: client
     */
    export function removeDryVolume(handle: number): void {
        RemoveDryVolume(handle);
    }

    /**
     * Resets the water to the games default water.xml.
     *
     * Hash: 0x1DA4791 | Since: unknown | API-Set: client
     */
    export function reset(): void {
        ResetWater();
    }

    /**
     * Sets world clip boundaries for water quads file (water.xml, water_heistisland.xml)
     * Used internally by LOAD_GLOBAL_WATER_FILE
     *
     * Hash: 0x9FCD2EE6 | Since: unknown | API-Set: client
     */
    export function setAreaClipRect(minX: number, minY: number, maxX: number, maxY: number): void {
        SetWaterAreaClipRect(minX, minY, maxX, maxY);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF49797EB | Since: unknown | API-Set: client
     */
    export function setQuadAlpha(waterQuad: number, a0: number, a1: number, a2: number, a3: number): boolean {
        return SetWaterQuadAlpha(waterQuad, a0, a1, a2, a3);
    }

    /**
     * This native allows you to update the bounds of a specified water quad index.
     *
     * Hash: 0x80AD144C | Since: unknown | API-Set: client
     */
    export function setQuadBounds(waterQuad: number, minX: number, minY: number, maxX: number, maxY: number): boolean {
        return SetWaterQuadBounds(waterQuad, minX, minY, maxX, maxY);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1FDCFC1 | Since: unknown | API-Set: client
     */
    export function setQuadHasLimitedDepth(waterQuad: number, hasLimitedDepth: boolean): boolean {
        return SetWaterQuadHasLimitedDepth(waterQuad, hasLimitedDepth);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA387D917 | Since: unknown | API-Set: client
     */
    export function setQuadIsInvisible(waterQuad: number, isInvisible: boolean): boolean {
        return SetWaterQuadIsInvisible(waterQuad, isInvisible);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6292F7A8 | Since: unknown | API-Set: client
     */
    export function setQuadLevel(waterQuad: number, level: number): boolean {
        return SetWaterQuadLevel(waterQuad, level);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3FF42FF | Since: unknown | API-Set: client
     */
    export function setQuadNoStencil(waterQuad: number, noStencil: boolean): boolean {
        return SetWaterQuadNoStencil(waterQuad, noStencil);
    }

    /**
     * This native allows you to update the water quad type.
     *
     * Valid type definitions:
     *
     * *   **0** Square
     * *   **1** Right triangle where the 90 degree angle is at maxX, minY
     * *   **2** Right triangle where the 90 degree angle is at minX, minY
     * *   **3** Right triangle where the 90 degree angle is at minX, maxY
     * *   **4** Right triangle where the 90 degree angle is at maxY, maxY
     *
     * Hash: 0x50131EB2 | Since: unknown | API-Set: client
     */
    export function setQuadType(waterQuad: number, _type: number): boolean {
        return SetWaterQuadType(waterQuad, _type);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4174B7B | Since: unknown | API-Set: client
     */
    export function setWaveQuadAmplitude(waveQuad: number, amplitude: number): boolean {
        return SetWaveQuadAmplitude(waveQuad, amplitude);
    }

    /**
     * This native allows you to update the bounds of a specified water quad index.
     *
     * Hash: 0x1FCC1FAF | Since: unknown | API-Set: client
     */
    export function setWaveQuadBounds(waveQuad: number, minX: number, minY: number, maxX: number, maxY: number): boolean {
        return SetWaveQuadBounds(waveQuad, minX, minY, maxX, maxY);
    }

    /**
     * directionX/Y should be constrained between -1.0 and 1.0
     * A positive value will create the wave starting at min and rolling towards max
     * A negative value will create the wave starting at max and rolling towards min
     * Applying both values allows you to make diagonal waves
     *
     * Hash: 0xFC9341A3 | Since: unknown | API-Set: client
     */
    export function setWaveQuadDirection(waveQuad: number, directionX: number, directionY: number): boolean {
        return SetWaveQuadDirection(waveQuad, directionX, directionY);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFDBF4CDBC07E1706 | Since: 323 | API-Set: unknown
     */
    export function addExtraCalmingQuad(xLow: number, yLow: number, xHigh: number, yHigh: number, height: number): number {
        return AddExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height);
    }

    /**
     * Gets the aggressiveness factor of the ocean waves.
     *
     * Hash: 0x2B2A2CC86778B619 | Since: 323 | API-Set: unknown
     */
    export function getDeepOceanScaler(): number {
        return GetDeepOceanScaler();
    }

    /**
     * This function set height to the value of z-axis of the water surface.
     *
     * This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
     *
     * note: seems to return true when you are in water
     *
     * Hash: 0xF6829842C06AE524 | Since: 323 | API-Set: unknown
     */
    export function getHeight(pos: Vector3): [boolean, number] {
        return GetWaterHeight(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EE6B53CE13A9794 | Since: 323 | API-Set: unknown
     */
    export function getHeightNoWaves(pos: Vector3): [boolean, number] {
        return GetWaterHeightNoWaves(pos.x, pos.y, pos.z);
    }

    /**
     * Sets the water height for a given position and radius.
     *
     *
     * Hash: 0xC443FD757C3BA637 | Since: 323 | API-Set: unknown
     */
    export function modify(x: number, y: number, radius: number, height: number): void {
        ModifyWater(x, y, radius, height);
    }

    /**
     * p0 is the handle returned from ADD_EXTRA_CALMING_QUAD
     *
     * Hash: 0xB1252E3E59A82AAF | Since: 323 | API-Set: unknown
     */
    export function removeExtraCalmingQuad(calmingQuad: number): void {
        RemoveCurrentRise(calmingQuad);
    }

    /**
     * Sets the waves intensity back to original (1.0 in most cases).
     *
     * Hash: 0x5E5E99285AE812DB | Since: 323 | API-Set: unknown
     */
    export function resetDeepOceanScaler(): void {
        ResetDeepOceanScaler();
    }

    /**
     * No comment provided
     *
     * Hash: 0x547237AA71AB44DE | Since: 573 | API-Set: unknown
     */
    export function setCalmedWaveHeightScaler(height: number): void {
        Citizen.invokeNative('0x547237AA71AB44DE', height);
    }

    /**
     * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
     *
     * Works only ~200 meters around the player.
     *
     * Hash: 0xB96B00E976BE977F | Since: 323 | API-Set: unknown
     */
    export function setDeepOceanScaler(intensity: number): void {
        SetDeepOceanScaler(intensity);
    }

    /**
     * enum eScriptWaterTestResult
     * {
     * SCRIPT_WATER_TEST_RESULT_NONE,
     * SCRIPT_WATER_TEST_RESULT_WATER,
     * SCRIPT_WATER_TEST_RESULT_BLOCKED,
     * };
     *
     * Hash: 0x8974647ED222EA5F | Since: 323 | API-Set: unknown
     */
    export function testProbeAgainstAll(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number): [number, number] {
        return TestProbeAgainstAllWater(x1, y1, z1, x2, y2, z2, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFA5D878809819DB | Since: 323 | API-Set: unknown
     */
    export function testProbeAgainst(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): [boolean, Vector3] {
        return TestProbeAgainstWater(x1, y1, z1, x2, y2, z2);
    }

    /**
     * See TEST_PROBE_AGAINST_ALL_WATER.
     *
     * Hash: 0x2B3451FA1E3142E2 | Since: 323 | API-Set: unknown
     */
    export function testVerticalProbeAgainstAll(pos: Vector3, flags: number): [number, number] {
        return TestVerticalProbeAgainstAllWater(pos.x, pos.y, pos.z, flags);
    }

}


export namespace weapon {
    /**
     * A getter for the accuracy spread of a weapon.
     *
     * Hash: 0x5343721 | Since: unknown | API-Set: client
     */
    export function getAccuracySpread(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponAccuracySpread(weaponHash);
    }

    /**
     * A getter for [SET_WEAPON_ANIMATION_OVERRIDE](#\_0x1055AC3A667F09D9).
     *
     * Hash: 0x63ED2E7 | Since: unknown | API-Set: client
     */
    export function getAnimationOverride(ped: number | IPed): number {
        return GetWeaponAnimationOverride(ped);
    }

    /**
     * A getter for `CWeaponAccuracyModifier` in a weapon component.
     *
     * Hash: 0xC693E278 | Since: unknown | API-Set: client
     */
    export function getComponentAccuracyModifier(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentAccuracyModifier(componentHash);
    }

    /**
     * A getter for `CameraHash` in a weapon scope component.
     *
     * Hash: 0xACB7E68F | Since: unknown | API-Set: client
     */
    export function getComponentCameraHash(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentCameraHash(componentHash);
    }

    /**
     * A getter for `ClipSize` in a weapon component.
     *
     * Hash: 0xE14CF665 | Since: unknown | API-Set: client
     */
    export function getComponentClipSize(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentClipSize(componentHash);
    }

    /**
     * A getter for `CWeaponDamageModifier` in a weapon component.
     *
     * Hash: 0x4A0E3855 | Since: unknown | API-Set: client
     */
    export function getComponentDamageModifier(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentDamageModifier(componentHash);
    }

    /**
     * A getter for `CWeaponFallOffModifier` damage modifier value in a weapon component.
     *
     * Hash: 0xE134FB8D | Since: unknown | API-Set: client
     */
    export function getComponentRangeDamageModifier(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentRangeDamageModifier(componentHash);
    }

    /**
     * A getter for `CWeaponFallOffModifier` range modifier value in a weapon component.
     *
     * Hash: 0x2FD0BC1B | Since: unknown | API-Set: client
     */
    export function getComponentRangeModifier(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentRangeModifier(componentHash);
    }

    /**
     * A getter for `ReticuleHash` in a weapon scope component.
     *
     * Hash: 0xF9AB9297 | Since: unknown | API-Set: client
     */
    export function getComponentReticuleHash(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentReticuleHash(componentHash);
    }

    /**
     * A getter for [\_SET_WEAPON_DAMAGE_MODIFIER](#\_0x4757F00BC6323CFE).
     *
     * Hash: 0xD979143 | Since: unknown | API-Set: client
     */
    export function getDamageModifier(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponDamageModifier(weaponHash);
    }

    /**
     * A getter for the recoil shake amplitude of a weapon.
     *
     * Hash: 0x5E1AF5F | Since: unknown | API-Set: client
     */
    export function getRecoilShakeAmplitude(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponRecoilShakeAmplitude(weaponHash);
    }

    /**
     * Disables weapons aim blocking due to environment for local player.
     * For non-player peds [SET_PED_ENABLE_WEAPON_BLOCKING](#\_0x97A790315D3831FD) can be used.
     *
     * Hash: 0xDFD8F6DE | Since: unknown | API-Set: client
     */
    export function setsNoAimBlocking(state: boolean): void {
        SetWeaponsNoAimBlocking(state);
    }

    /**
     * Disables the game's built-in auto-reloading.
     *
     * Hash: 0x311150E5 | Since: unknown | API-Set: client
     */
    export function setsNoAutoreload(state: boolean): void {
        SetWeaponsNoAutoreload(state);
    }

    /**
     * Disables autoswapping to another weapon when the current weapon runs out of ammo.
     *
     * Hash: 0x2A7B50E | Since: unknown | API-Set: client
     */
    export function setsNoAutoswap(state: boolean): void {
        SetWeaponsNoAutoswap(state);
    }

    /**
     * A setter for the accuracy spread of a weapon.
     *
     * Hash: 0x598DD6AE | Since: unknown | API-Set: client
     */
    export function setAccuracySpread(weaponHash: number | string, spread: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetWeaponAccuracySpread(weaponHash, spread);
    }

    /**
     * A setter for the recoil shake amplitude of a weapon.
     *
     * Hash: 0x9864312F | Since: unknown | API-Set: client
     */
    export function setRecoilShakeAmplitude(weaponHash: number | string, amplitude: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetWeaponRecoilShakeAmplitude(weaponHash, amplitude);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x78F0424C34306220 | Since: 323 | API-Set: unknown
     */
    export function addAmmoToPed(ped: number | IPed, weaponHash: number | string, ammo: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        AddAmmoToPed(ped, weaponHash, ammo);
    }

    /**
     * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
     *
     * Hash: 0x2472622CE1F2D45F | Since: 1103 | API-Set: unknown
     */
    export function addPedAmmoByType(ped: number | IPed, ammoTypeHash: number | string, ammo: number): void {
        if (typeof ammoTypeHash === 'string') ammoTypeHash = misc.getHashKey(ammoTypeHash)
        AddAmmoToPedByType(ped, ammoTypeHash, ammo);
    }

    /**
     * this returns if you can use the weapon while using a parachute
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xBC7BE5ABC0879F74 | Since: 323 | API-Set: unknown
     */
    export function canUseOnParachute(weaponHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return CanUseWeaponOnParachute(weaponHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC678E40BE7C74D2 | Since: 323 | API-Set: unknown
     */
    export function clearEntityLastDamage(entity: number | IEntity): void {
        ClearEntityLastWeaponDamage(entity);
    }

    /**
     * Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
     *
     * Hash: 0x0E98F88A24C5F4B8 | Since: 323 | API-Set: unknown
     */
    export function clearPedLastDamage(ped: number | IPed): void {
        ClearPedLastWeaponDamage(ped);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x9DA58CDBF6BDBC08 | Since: 1011 | API-Set: unknown
     */
    export function createAirDefenceAngledArea(radius: number, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return CreateAirDefenseArea(0, 0, 0, 0, 0, 0, 0, 0, 0, radius, weaponHash);
    }

    /**
     * Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
     *
     * Hash: 0x91EF34584710BE99 | Since: 573 | API-Set: unknown
     */
    export function createAirDefenceSphere(pos: Vector3, radius: number, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return CreateAirDefenseSphere(pos.x, pos.y, pos.z, radius, 0, 0, 0, weaponHash);
    }

    /**
     * Now has 8 params.
     *
     * Hash: 0x9541D3CF0D398F36 | Since: 323 | API-Set: unknown
     */
    export function createObject(weaponHash: number | string, ammoCount: number, pos: Vector3, showWorldModel: boolean, scale: number): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return CreateWeaponObject(weaponHash, ammoCount, pos.x, pos.y, pos.z, showWorldModel, scale, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD79A550999D7D4F | Since: 678 | API-Set: unknown
     */
    export function doesAirDefenceSphereExist(zoneId: number): boolean {
        return DoesAirDefenseZoneExist(zoneId);
    }

    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x5CEE3DF569CECAB0 | Since: 323 | API-Set: unknown
     */
    export function doesTakeWeaponComponent(weaponHash: number | string, componentHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return DoesWeaponTakeWeaponComponent(weaponHash, componentHash);
    }

    /**
     * Enables laser sight on any weapon.
     *
     * It doesn't work. Neither on tick nor OnKeyDown
     *
     * Hash: 0xC8B46D7727D864AA | Since: 323 | API-Set: unknown
     */
    export function enableLaserSightRendering(toggle: boolean): void {
        EnableLaserSightRendering(toggle);
    }

    /**
     * `WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);`
     *
     * Hash: 0xFC4BD125DE7611E4 | Since: 323 | API-Set: unknown
     */
    export function explodeProjectiles(ped: number | IPed, weaponHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        ExplodeProjectiles(ped, weaponHash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44F1012B69313374 | Since: 573 | API-Set: unknown
     */
    export function fireAirDefenceSphereAtPosition(zoneId: number, pos: Vector3): void {
        FireAirDefenseWeapon(zoneId, pos.x, pos.y, pos.z);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x2E1202248937775C | Since: 323 | API-Set: unknown
     */
    export function getAmmoInClip(ped: number | IPed, weaponHash: number | string): [boolean, number] {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetAmmoInClip(ped, weaponHash);
    }

    /**
     * `WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)`
     *
     * From decompiled scripts
     * Returns total ammo in weapon
     *
     * GTALua Example :
     * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x015A522136D7F951 | Since: 323 | API-Set: unknown
     */
    export function getAmmoInPed(ped: number | IPed, weaponhash: number | string): number {
        if (typeof weaponhash === 'string') weaponhash = misc.getHashKey(weaponhash)
        return GetAmmoInPedWeapon(ped, weaponhash);
    }

    /**
     * p1 is always 0 in the scripts.
     *
     * Hash: 0x8483E98E8B888AE2 | Since: 323 | API-Set: unknown
     */
    export function getBestPed(ped: number | IPed): number {
        return GetBestPedWeapon(ped, false);
    }

    /**
     * Example in VB
     *
     * Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
     * Dim arg As New OutputArgument()
     * Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
     * Return arg.GetResult(Of Integer)()
     * End Function
     *
     * Usage:
     * If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
     * Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
     *
     * Hash: 0x1017582BCD3832DC | Since: 323 | API-Set: unknown
     */
    export function getCurrentPedVehicle(ped: number | IPed): [boolean, number] {
        return GetCurrentPedVehicleWeapon(ped);
    }

    /**
     * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
     * p2 seems to be 1 most of the time.
     *
     *
     *
     *
     *
     * p2 is not implemented
     *
     * disassembly said that?
     *
     *
     * Hash: 0x3A87E44BB9A01D54 | Since: 323 | API-Set: unknown
     */
    export function getCurrentPed(ped: number | IPed): [boolean, number] {
        return GetCurrentPedWeapon(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3B390A939AF0B5FC | Since: 323 | API-Set: unknown
     */
    export function getCurrentPedEntityIndex(ped: number | IPed): number {
        return GetCurrentPedWeaponEntityIndex(ped, undefined);
    }

    /**
     * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
     *
     * Hash: 0xF731332072F5156C | Since: 323 | API-Set: unknown
     */
    export function getIsPedGadgetEquipped(ped: number | IPed, gadgetHash: number | string): boolean {
        if (typeof gadgetHash === 'string') gadgetHash = misc.getHashKey(gadgetHash)
        return GetIsPedGadgetEquipped(ped, gadgetHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x840F03E9041E2C9C | Since: 323 | API-Set: unknown
     */
    export function getLockonDistanceOfCurrentPed(ped: number | IPed): number {
        return GetLockonDistanceOfCurrentPedWeapon(ped);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xDC16122C7A20C933 | Since: 323 | API-Set: unknown
     */
    export function getMaxAmmo(ped: number | IPed, weaponHash: number | string): [boolean, number] {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetMaxAmmo(ped, weaponHash);
    }

    /**
     * Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
     *
     * Hash: 0x585847C5E4E11709 | Since: 1103 | API-Set: unknown
     */
    export function getMaxAmmoByType(ped: number | IPed, ammoTypeHash: number | string): [boolean, number] {
        if (typeof ammoTypeHash === 'string') ammoTypeHash = misc.getHashKey(ammoTypeHash)
        return GetMaxAmmoByType(ped, ammoTypeHash);
    }

    /**
     * p2 is mostly 1 in the scripts.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xA38DCFFCEA8962FA | Since: 323 | API-Set: unknown
     */
    export function getMaxAmmoInClip(ped: number | IPed, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetMaxAmmoInClip(ped, weaponHash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x814C9D19DFD69679 | Since: 323 | API-Set: unknown
     */
    export function getMaxRangeOfCurrentPed(ped: number | IPed): number {
        return GetMaxRangeOfCurrentPedWeapon(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x39D22031557946C1 | Since: 323 | API-Set: unknown
     */
    export function getPedAmmoByType(ped: number | IPed, ammoTypeHash: number | string): number {
        if (typeof ammoTypeHash === 'string') ammoTypeHash = misc.getHashKey(ammoTypeHash)
        return GetPedAmmoByType(ped, ammoTypeHash);
    }

    /**
     * Returns the current ammo type of the specified ped's specified weapon.
     * MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
     * Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x7FEAD38B326B9F74 | Since: 323 | API-Set: unknown
     */
    export function getPedAmmoTypeFrom(ped: number | IPed, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetPedAmmoTypeFromWeapon(ped, weaponHash);
    }

    /**
     * Pass ped. Pass address of Vector3.
     * The coord will be put into the Vector3.
     * The return will determine whether there was a coord found or not.
     *
     * Hash: 0x6C4D0409BA1A2BC2 | Since: 323 | API-Set: unknown
     */
    export function getPedLastImpactCoord(ped: number | IPed): [boolean, Vector3] {
        return GetPedLastWeaponImpactCoord(ped);
    }

    /**
     * Returns the base/default ammo type of the specified ped's specified weapon.
     * Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF489B44DD5AF4BD9 | Since: 1103 | API-Set: unknown
     */
    export function getPedOriginalAmmoTypeFrom(ped: number | IPed, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetPedAmmoTypeFromWeapon2(ped, weaponHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFFED78E9011134D | Since: 323 | API-Set: unknown
     */
    export function getPedtypeInSlot(ped: number | IPed, weaponSlot: number | string): number {
        if (typeof weaponSlot === 'string') weaponSlot = misc.getHashKey(weaponSlot)
        return GetPedWeapontypeInSlot(ped, weaponSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2C9AC24B4061285 | Since: 1103 | API-Set: unknown
     */
    export function getPedCamoIndex(ped: number | IPed, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return Citizen.invokeNative('0xA2C9AC24B4061285', ped, weaponHash);
    }

    /**
     * Returns -1 if camoComponentHash is invalid/not attached to the weapon.
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF0A60040BE558F2D | Since: 1103 | API-Set: unknown
     */
    export function getPedComponentTintIndex(ped: number | IPed, weaponHash: number | string, camoComponentHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof camoComponentHash === 'string') camoComponentHash = misc.getHashKey(camoComponentHash)
        return GetPedWeaponLiveryColor(ped, weaponHash, camoComponentHash);
    }

    /**
     * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x2B9EEDC07BD06B9F | Since: 323 | API-Set: unknown
     */
    export function getPedTintIndex(ped: number | IPed, weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetPedWeaponTintIndex(ped, weaponHash);
    }

    /**
     * Returns the hash of the weapon.
     *
     * `var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);`
     * sub_27D3(num7);
     * switch (num7)
     * {
     * case 0x24B17070:
     *
     * `Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?`
     *
     * -------------------------------------------------------------------------
     *
     * The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x0A6DB4965674D243 | Since: 323 | API-Set: unknown
     */
    export function getSelectedPed(ped: number | IPed): number {
        return GetSelectedPedWeapon(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3287EE3050FB74C | Since: 323 | API-Set: unknown
     */
    export function gettypeGroup(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeapontypeGroup(weaponHash);
    }

    /**
     * Returns the model of any weapon.
     *
     * Can also take an ammo hash?
     * `sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));`
     *
     * Hash: 0xF46CDC33180FDA94 | Since: 323 | API-Set: unknown
     */
    export function gettypeModel(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeapontypeModel(weaponHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4215460B9B8B7FA0 | Since: 323 | API-Set: unknown
     */
    export function gettypeSlot(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeapontypeSlot(weaponHash);
    }

    /**
     * // Returns the size of the default weapon component clip.
     *
     * Use it like this:
     *
     * char cClipSize[32];
     * Hash cur;
     * `if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))`
     * {
     * `if (WEAPON::IS_WEAPON_VALID(cur))`
     * {
     * `int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);`
     * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
     * vDrawString(cClipSize, 0.5f, 0.5f);
     * }
     * }
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x583BE370B1EC6EB4 | Since: 323 | API-Set: unknown
     */
    export function getClipSize(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponClipSize(weaponHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3CAF387AE12E9F8 | Since: 323 | API-Set: unknown
     */
    export function getComponentHudStats(componentHash: number | string): [boolean, any] {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentHudStats(componentHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0DB57B41EC1DB083 | Since: 323 | API-Set: unknown
     */
    export function getComponentTypeModel(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentTypeModel(componentHash);
    }

    /**
     * Returns the amount of extra components the specified component has.
     * Returns -1 if the component isn't of type CWeaponComponentVariantModel.
     *
     * Hash: 0x6558AC7C17BFEF58 | Since: 372 | API-Set: unknown
     */
    export function getComponentVariantExtraCount(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentVariantExtraComponentCount(componentHash);
    }

    /**
     * Returns the model hash of the extra component at specified index.
     *
     * Hash: 0x4D1CB8DC40208A17 | Since: 372 | API-Set: unknown
     */
    export function getComponentVariantExtraModel(componentHash: number | string, extraComponentIndex: number): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponComponentVariantExtraComponentModel(componentHash, extraComponentIndex);
    }

    /**
     * This native does not return damages of weapons from the melee and explosive group.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x3133B907D8B32053 | Since: 323 | API-Set: unknown
     */
    export function getDamage(weaponHash: number | string, componentHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetWeaponDamage(weaponHash, componentHash);
    }

    /**
     * enum class eDamageType
     * {
     * UNKNOWN = 0,
     * NONE = 1,
     * MELEE = 2,
     * BULLET = 3,
     * BULLET_RUBBER = 4,
     * EXPLOSIVE = 5,
     * FIRE = 6,
     * COLLISION = 7,
     * FALL = 8,
     * DROWN = 9,
     * ELECTRIC = 10,
     * BARBED_WIRE = 11,
     * FIRE_EXTINGUISHER = 12,
     * SMOKE = 13,
     * WATER_CANNON = 14,
     * TRANQUILIZER = 15,
     * };
     *
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x3BE0BB12D25FB305 | Since: 323 | API-Set: unknown
     */
    export function getDamageType(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponDamageType(weaponHash);
    }

    /**
     * struct WeaponHudStatsData
     * {
     * BYTE hudDamage; // 0x0000
     * char _0x0001[0x7]; // 0x0001
     * BYTE hudSpeed; // 0x0008
     * char _0x0009[0x7]; // 0x0009
     * BYTE hudCapacity; // 0x0010
     * char _0x0011[0x7]; // 0x0011
     * BYTE hudAccuracy; // 0x0018
     * char _0x0019[0x7]; // 0x0019
     * BYTE hudRange; // 0x0020
     * };
     *
     * Usage:
     *
     * WeaponHudStatsData data;
     * if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
     * {
     * // BYTE damagePercentage = data.hudDamage and so on
     * }
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xD92C739EE34C9EBA | Since: 323 | API-Set: unknown
     */
    export function getHudStats(weaponHash: number | string): [boolean, any] {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponHudStats(weaponHash);
    }

    /**
     * Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xB3EA4FEABF41464B | Since: 1103 | API-Set: unknown
     */
    export function getObjectComponentTintIndex(weaponObject: number | IObject, camoComponentHash: number | string): number {
        if (typeof camoComponentHash === 'string') camoComponentHash = misc.getHashKey(camoComponentHash)
        return GetWeaponObjectLiveryColor(weaponObject, camoComponentHash);
    }

    /**
     * Drops the current weapon and returns the object
     *
     * Unknown behavior when unarmed.
     *
     * Hash: 0xCAE1DC9A0E22A16D | Since: 323 | API-Set: unknown
     */
    export function getObjectFromPed(ped: number | IPed): number {
        return GetWeaponObjectFromPed(ped, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD183314F7CD2E57 | Since: 323 | API-Set: unknown
     */
    export function getObjectTintIndex(weapon: number | IObject): number {
        return GetWeaponObjectTintIndex(weapon);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x065D2AACAD8CF7A4 | Since: 1290 | API-Set: unknown
     */
    export function getTimeBetweenShots(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponTimeBetweenShots(weaponHash);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x5DCF6C5CAB2E9BF7 | Since: 323 | API-Set: unknown
     */
    export function getTintCount(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetWeaponTintCount(weaponHash);
    }

    /**
     * Gives a weapon to PED with a delay, example:
     *
     * `WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)`
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xB282DC6EBD803C75 | Since: 323 | API-Set: unknown
     */
    export function giveDelayedToPed(ped: number | IPed, weaponHash: number | string, ammoCount: number, bForceInHand: boolean): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        GiveDelayedWeaponToPed(ped, weaponHash, ammoCount, bForceInHand);
    }

    /**
     * Gives the specified loadout to the specified ped.
     * Loadouts are defined in common.rpf\data\ai\loadouts.meta
     *
     * Hash: 0x68F8BE6AF5CDF8A6 | Since: 505 | API-Set: unknown
     */
    export function giveLoadoutToPed(ped: number | IPed, loadoutHash: number | string): void {
        if (typeof loadoutHash === 'string') loadoutHash = misc.getHashKey(loadoutHash)
        GiveLoadoutToPed(ped, loadoutHash);
    }

    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xD966D51AA5B28BB9 | Since: 323 | API-Set: unknown
     */
    export function giveComponentToPed(ped: number | IPed, weaponHash: number | string, componentHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        GiveWeaponComponentToPed(ped, weaponHash, componentHash);
    }

    /**
     * componentHash:
     * `(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)`
     * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
     *
     * Hash: 0x33E179436C0B31DB | Since: 323 | API-Set: unknown
     */
    export function giveComponentToWeaponObject(weaponObject: number | IObject, componentHash: number | string): void {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        GiveWeaponComponentToWeaponObject(weaponObject, componentHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1FA61371AF7C4B7 | Since: 323 | API-Set: unknown
     */
    export function giveObjectToPed(weaponObject: number | IObject, ped: number | IPed): void {
        GiveWeaponObjectToPed(weaponObject, ped);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xBF0FD6E56C964FCB | Since: 323 | API-Set: unknown
     */
    export function giveToPed(ped: number | IPed, weaponHash: number | string, ammoCount: number, isHidden: boolean, bForceInHand: boolean): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        GiveWeaponToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand);
    }

    /**
     * It determines what weapons caused damage:
     *
     * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
     * If you want to define any melee weapon, second parameter=0, third parameter=1.
     * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x131D401334815E94 | Since: 323 | API-Set: unknown
     */
    export function hasEntityBeenDamagedBy(entity: number | IEntity, weaponHash: number | string, weaponType: number): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return HasEntityBeenDamagedByWeapon(entity, weaponHash, weaponType);
    }

    /**
     * It determines what weapons caused damage:
     *
     * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
     * If you want to define any melee weapon, second parameter=0, third parameter=1.
     * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x2D343D2219CD027A | Since: 323 | API-Set: unknown
     */
    export function hasPedBeenDamagedBy(ped: number | IPed, weaponHash: number | string, weaponType: number): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return HasPedBeenDamagedByWeapon(ped, weaponHash, weaponType);
    }

    /**
     * p2 should be FALSE, otherwise it seems to always return FALSE
     *
     * Bool does not check if the weapon is current equipped, unfortunately.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x8DECB02F88F428BC | Since: 323 | API-Set: unknown
     */
    export function hasPedGot(ped: number | IPed, weaponHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return HasPedGotWeapon(ped, weaponHash, false);
    }

    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xC593212475FAE340 | Since: 323 | API-Set: unknown
     */
    export function hasPedGotComponent(ped: number | IPed, weaponHash: number | string, componentHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return HasPedGotWeaponComponent(ped, weaponHash, componentHash);
    }

    /**
     * Fourth Parameter = unsure, almost always -1
     *
     * Hash: 0x717C8481234E3B88 | Since: 323 | API-Set: unknown
     */
    export function hasVehicleGotProjectileAttached(driver: number | IPed, vehicle: number | IVehicle, weaponHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return HasVehicleGotProjectileAttached(driver, vehicle, weaponHash, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36E353271F0E90EE | Since: 323 | API-Set: unknown
     */
    export function hasAssetLoaded(weaponHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return HasWeaponAssetLoaded(weaponHash);
    }

    /**
     * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
     *
     * Hash: 0x76A18844E743BF91 | Since: 323 | API-Set: unknown
     */
    export function hasGotWeaponComponent(weapon: number | IObject, componentHash: number | string): boolean {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return HasWeaponGotWeaponComponent(weapon, componentHash);
    }

    /**
     * Hides the players weapon during a cutscene.
     *
     * Hash: 0x6F6981D2253C208F | Since: 323 | API-Set: unknown
     */
    export function hidePedForScriptedCutscene(ped: number | IPed, toggle: boolean): void {
        HidePedWeaponForScriptedCutscene(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDAB963831DBFD3F4 | Since: 1103 | API-Set: unknown
     */
    export function isAirDefenceSphereInArea(pos: Vector3, radius: number): [boolean, number] {
        return IsAnyAirDefenseZoneInsideSphere(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B7620C47217126C | Since: 323 | API-Set: unknown
     */
    export function isFlashLightOn(ped: number | IPed): boolean {
        return IsFlashLightOn(ped);
    }

    /**
     * Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
     *
     * Type flag bit values:
     * 1 = Melee weapons
     * 2 = Explosive weapons
     * 4 = Any other weapons
     *
     * Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
     * 7 returns true if you are equipped with any weapon except your fists.
     * 6 returns true if you are equipped with any weapon except melee weapons.
     * 5 returns true if you are equipped with any weapon except the Explosives weapon group.
     * 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
     * 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
     * 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
     * 1 returns true only if you are equipped with any Melee weapon.
     * 0 never returns true.
     *
     * Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
     *
     * Hash: 0x475768A975D5AD17 | Since: 323 | API-Set: unknown
     */
    export function isPedArmed(ped: number | IPed, typeFlags: number): boolean {
        return IsPedArmed(ped, typeFlags);
    }

    /**
     * This native returns a true or false value.
     *
     * Ped ped = The ped whose weapon you want to check.
     *
     * Hash: 0x65F0C5AE05943EC7 | Since: 323 | API-Set: unknown
     */
    export function isPedCurrentSilenced(ped: number | IPed): boolean {
        return IsPedCurrentWeaponSilenced(ped);
    }

    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x0D78DE0572D3969E | Since: 323 | API-Set: unknown
     */
    export function isPedComponentActive(ped: number | IPed, weaponHash: number | string, componentHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return IsPedWeaponComponentActive(ped, weaponHash, componentHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB80CA294F2F26749 | Since: 323 | API-Set: unknown
     */
    export function isPedReadyToShoot(ped: number | IPed): boolean {
        return IsPedWeaponReadyToShoot(ped);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x937C71165CF334B3 | Since: 323 | API-Set: unknown
     */
    export function isValid(weaponHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return IsWeaponValid(weaponHash);
    }

    /**
     * Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
     *
     * Hash: 0x20AE33F3AC9C0033 | Since: 323 | API-Set: unknown
     */
    export function makePedReload(ped: number | IPed): boolean {
        return MakePedReload(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C0D57EA686FAD87 | Since: 323 | API-Set: unknown
     */
    export function refillAmmoInstantly(ped: number | IPed): boolean {
        return RefillAmmoInstantly(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0ABF535877897560 | Since: 573 | API-Set: unknown
     */
    export function removeAirDefenceSphere(zoneId: number): boolean {
        return RemoveAirDefenseZone(zoneId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E45B34ADEBEE48E | Since: 573 | API-Set: unknown
     */
    export function removeAllAirDefenceSpheres(): void {
        RemoveAllAirDefenseZones();
    }

    /**
     * setting the last params to false it does that same so I would suggest its not a toggle
     *
     * Hash: 0xF25DF915FA38C5F3 | Since: 323 | API-Set: unknown
     */
    export function removeAllPeds(ped: number | IPed): void {
        RemoveAllPedWeapons(ped, false);
    }

    /**
     * If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
     *
     * Hash: 0xFC52E0F37E446528 | Since: 323 | API-Set: unknown
     */
    export function removeAllProjectilesOfType(weaponHash: number | string, explode: boolean): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        RemoveAllProjectilesOfType(weaponHash, explode);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA08EF13F341C8FC | Since: 323 | API-Set: unknown
     */
    export function removeAsset(weaponHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        RemoveWeaponAsset(weaponHash);
    }

    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x1E8BE90C74FB4C09 | Since: 323 | API-Set: unknown
     */
    export function removeComponentFromPed(ped: number | IPed, weaponHash: number | string, componentHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        RemoveWeaponComponentFromPed(ped, weaponHash, componentHash);
    }

    /**
     * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
     *
     * Hash: 0xF7D82B0D66777611 | Since: 323 | API-Set: unknown
     */
    export function removeComponentFromWeaponObject(_object: number | IObject, componentHash: number | string): void {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        RemoveWeaponComponentFromWeaponObject(_object, componentHash);
    }

    /**
     * This native removes a specified weapon from your selected ped.
     *
     * Example:
     * C#:
     * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
     *
     * C++:
     * `WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);`
     *
     * The code above removes the knife from the player.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x4899CB088EDF59B8 | Since: 323 | API-Set: unknown
     */
    export function removeFromPed(ped: number | IPed, weaponHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        RemoveWeaponFromPed(ped, weaponHash);
    }

    /**
     * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
     *
     * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
     *
     * Hash: 0x5443438F033E29C3 | Since: 323 | API-Set: unknown
     */
    export function requestAsset(weaponHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        RequestWeaponAsset(weaponHash, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x48164DBB970AC3F0 | Since: 323 | API-Set: unknown
     */
    export function requestHighDetailModel(weaponObject: number | IEntity): void {
        RequestWeaponHighDetailModel(weaponObject);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xDCD2A934D65CB497 | Since: 323 | API-Set: unknown
     */
    export function setAmmoInClip(ped: number | IPed, weaponHash: number | string, ammo: number): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return SetAmmoInClip(ped, weaponHash, ammo);
    }

    /**
     * Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
     *
     * Hash: 0xEFF296097FF1E509 | Since: 1103 | API-Set: unknown
     */
    export function setCanPedSelectAlls(ped: number | IPed, toggle: boolean): void {
        SetCanPedEquipAllWeapons(ped, toggle);
    }

    /**
     * Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xB4771B9AAF4E68E4 | Since: 1103 | API-Set: unknown
     */
    export function setCanPedSelectInventory(ped: number | IPed, weaponHash: number | string, toggle: boolean): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetCanPedEquipWeapon(ped, weaponHash, toggle);
    }

    /**
     * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x75C55983C2C39DAA | Since: 323 | API-Set: unknown
     */
    export function setCurrentPedVehicle(ped: number | IPed, weaponHash: number | string): boolean {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return SetCurrentPedVehicleWeapon(ped, weaponHash);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xADF692B254977C0C | Since: 323 | API-Set: unknown
     */
    export function setCurrentPed(ped: number | IPed, weaponHash: number | string, bForceInHand: boolean): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetCurrentPedWeapon(ped, weaponHash, bForceInHand);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4DCEC7FD5B739A5 | Since: 323 | API-Set: unknown
     */
    export function setEqippedStartSpinningAtFullSpeed(ped: number | IPed): void {
        Citizen.invokeNative('0xE4DCEC7FD5B739A5', ped);
    }

    /**
     * Enables/disables flashlight on ped's weapon.
     *
     * Hash: 0x988DB6FE9B3AC000 | Since: 2060 | API-Set: unknown
     */
    export function setFlashLightActiveHistory(ped: number | IPed, toggle: boolean): void {
        SetFlashLightEnabled(ped, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEA66DAD478CD39B | Since: 323 | API-Set: unknown
     */
    export function setFlashLightFadeDistance(distance: number): boolean {
        return SetFlashLightFadeDistance(distance);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x14E56BC5B5DB6A19 | Since: 323 | API-Set: unknown
     */
    export function setPedAmmo(ped: number | IPed, weaponHash: number | string, ammo: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetPedAmmo(ped, weaponHash, ammo, false);
    }

    /**
     * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
     *
     * Hash: 0x5FD1E1F011E76D7E | Since: 323 | API-Set: unknown
     */
    export function setPedAmmoByType(ped: number | IPed, ammoTypeHash: number | string, ammo: number): void {
        if (typeof ammoTypeHash === 'string') ammoTypeHash = misc.getHashKey(ammoTypeHash)
        SetPedAmmoByType(ped, ammoTypeHash, ammo);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA4EFEF9440A5B0EF | Since: 323 | API-Set: unknown
     */
    export function setPedAmmoToDrop(ped: number | IPed): void {
        SetPedAmmoToDrop(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8378627201D5497D | Since: 323 | API-Set: unknown
     */
    export function setPedChanceOfFiringBlanks(ped: number | IPed, xBias: number, yBias: number): void {
        SetPedChanceOfFiringBlanks(ped, xBias, yBias);
    }

    /**
     * Has 5 parameters since latest patches.
     *
     * Hash: 0x0725A4CCFDED9A70 | Since: 323 | API-Set: unknown
     */
    export function setPedCurrentVisible(ped: number | IPed, visible: boolean, deselectWeapon: boolean): void {
        SetPedCurrentWeaponVisible(ped, visible, deselectWeapon, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50276EF8172F5F12 | Since: 1734 | API-Set: unknown
     */
    export function setPedCycleVehiclesOnly(ped: number | IPed): void {
        Citizen.invokeNative('0x50276EF8172F5F12', ped);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x208A1888007FC0E6 | Since: 323 | API-Set: unknown
     */
    export function setPedDropsInventory(ped: number | IPed, weaponHash: number | string, xOffset: number, yOffset: number, zOffset: number, ammoCount: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetPedDropsInventoryWeapon(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B7513D9966FBEC0 | Since: 323 | API-Set: unknown
     */
    export function setPedDrops(ped: number | IPed): void {
        SetPedDropsWeapon(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x476AE72C1D19D1A8 | Since: 323 | API-Set: unknown
     */
    export function setPedDropssWhenDead(ped: number | IPed, toggle: boolean): void {
        SetPedDropsWeaponsWhenDead(ped, toggle);
    }

    /**
     * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
     * p2 is always true.
     *
     * Hash: 0xD0D7B1E680ED4A1A | Since: 323 | API-Set: unknown
     */
    export function setPedGadget(ped: number | IPed, gadgetHash: number | string): void {
        if (typeof gadgetHash === 'string') gadgetHash = misc.getHashKey(gadgetHash)
        SetPedGadget(ped, gadgetHash, false);
    }

    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x3EDCB0505123623B | Since: 323 | API-Set: unknown
     */
    export function setPedInfiniteAmmo(ped: number | IPed, toggle: boolean, weaponHash: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetPedInfiniteAmmo(ped, toggle, weaponHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x183DADC6AA953186 | Since: 323 | API-Set: unknown
     */
    export function setPedInfiniteAmmoClip(ped: number | IPed, toggle: boolean): void {
        SetPedInfiniteAmmoClip(ped, toggle);
    }

    /**
     * Returns handle of the projectile.
     *
     * Hash: 0xB4C8D77C80C0421E | Since: 323 | API-Set: unknown
     */
    export function setPedShootOrdnance(ped: number | IPed): number {
        return SetPedShootOrdnanceWeapon(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x24C024BA8379A70A | Since: 1868 | API-Set: unknown
     */
    export function setPedStunGunFiniteAmmo(): void {
        Citizen.invokeNative('0x24C024BA8379A70A', undefined, undefined);
    }

    /**
     * Colors:
     * 0 = Gray
     * 1 = Dark Gray
     * 2 = Black
     * 3 = White
     * 4 = Blue
     * 5 = Cyan
     * 6 = Aqua
     * 7 = Cool Blue
     * 8 = Dark Blue
     * 9 = Royal Blue
     * 10 = Plum
     * 11 = Dark Purple
     * 12 = Purple
     * 13 = Red
     * 14 = Wine Red
     * 15 = Magenta
     * 16 = Pink
     * 17 = Salmon
     * 18 = Hot Pink
     * 19 = Rust Orange
     * 20 = Brown
     * 21 = Earth
     * 22 = Orange
     * 23 = Light Orange
     * 24 = Dark Yellow
     * 25 = Yellow
     * 26 = Light Brown
     * 27 = Lime Green
     * 28 = Olive
     * 29 = Moss
     * 30 = Turquoise
     * 31 = Dark Green
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x9FE5633880ECD8ED | Since: 1103 | API-Set: unknown
     */
    export function setPedComponentTintIndex(ped: number | IPed, weaponHash: number | string, camoComponentHash: number | string, colorIndex: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof camoComponentHash === 'string') camoComponentHash = misc.getHashKey(camoComponentHash)
        SetPedWeaponLiveryColor(ped, weaponHash, camoComponentHash, colorIndex);
    }

    /**
     * tintIndex can be the following:
     *
     * 0 - Normal
     * 1 - Green
     * 2 - Gold
     * 3 - Pink
     * 4 - Army
     * 5 - LSPD
     * 6 - Orange
     * 7 - Platinum
     * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x50969B9B89ED5738 | Since: 323 | API-Set: unknown
     */
    export function setPedTintIndex(ped: number | IPed, weaponHash: number | string, tintIndex: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetPedWeaponTintIndex(ped, weaponHash, tintIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE620FD3512A04F18 | Since: 323 | API-Set: unknown
     */
    export function setPickupAmmoAmountScaler(): void {
        SetPickupAmmoAmountScaler(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xECDC202B25E5CF48 | Since: 573 | API-Set: unknown
     */
    export function setPlayerTargettableForAirDefenceSphere(player: number | string | IPlayer, zoneId: number, enable: boolean): void {
        SetPlayerAirDefenseZoneFlag(player, zoneId, enable);
    }

    /**
     * Changes the selected ped aiming animation style.
     * Note : You must use GET_HASH_KEY!
     *
     * Strings to use with GET_HASH_KEY :
     *
     * "Ballistic",
     * "Default",
     * "Fat",
     * "Female",
     * "FirstPerson",
     * "FirstPersonAiming",
     * "FirstPersonFranklin",
     * "FirstPersonFranklinAiming",
     * "FirstPersonFranklinRNG",
     * "FirstPersonFranklinScope",
     * "FirstPersonMPFemale",
     * "FirstPersonMichael",
     * "FirstPersonMichaelAiming",
     * "FirstPersonMichaelRNG",
     * "FirstPersonMichaelScope",
     * "FirstPersonRNG",
     * "FirstPersonScope",
     * "FirstPersonTrevor",
     * "FirstPersonTrevorAiming",
     * "FirstPersonTrevorRNG",
     * "FirstPersonTrevorScope",
     * "Franklin",
     * "Gang",
     * "Gang1H",
     * "GangFemale",
     * "Hillbilly",
     * "MP_F_Freemode",
     * "Michael",
     * "SuperFat",
     * "Trevor"
     *
     * Hash: 0x1055AC3A667F09D9 | Since: 323 | API-Set: unknown
     */
    export function setAnimationOverride(ped: number | IPed, animStyle: number | string): void {
        if (typeof animStyle === 'string') animStyle = misc.getHashKey(animStyle)
        SetWeaponAnimationOverride(ped, animStyle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4AE5AC8B852D642C | Since: 2372 | API-Set: unknown
     */
    export function setAoeModifier(weaponHash: number | string, multiplier: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetWeaponExplosionRadiusMultiplier(weaponHash, multiplier);
    }

    /**
     * Changes the weapon damage output by the given multiplier value. Must be run every frame.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x4757F00BC6323CFE | Since: 505 | API-Set: unknown
     */
    export function setDamageModifier(weaponHash: number | string, damageMultiplier: number): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        SetWeaponDamageModifier(weaponHash, damageMultiplier);
    }

    /**
     * `ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat("vehicle_weapon_mine_slick"), 1.0);`
     *
     * Hash: 0xE6D2CEDD370FF98E | Since: 2372 | API-Set: unknown
     */
    export function setEffectDurationModifier(p0: number | string): void {
        if (typeof p0 === 'string') p0 = misc.getHashKey(p0)
        Citizen.invokeNative('0xE6D2CEDD370FF98E', p0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x977CA98939E82E4B | Since: 1103 | API-Set: unknown
     */
    export function setObjectCamoIndex(weaponObject: number | IObject): void {
        Citizen.invokeNative('0x977CA98939E82E4B', weaponObject, 0);
    }

    /**
     * Colors:
     * 0 = Gray
     * 1 = Dark Gray
     * 2 = Black
     * 3 = White
     * 4 = Blue
     * 5 = Cyan
     * 6 = Aqua
     * 7 = Cool Blue
     * 8 = Dark Blue
     * 9 = Royal Blue
     * 10 = Plum
     * 11 = Dark Purple
     * 12 = Purple
     * 13 = Red
     * 14 = Wine Red
     * 15 = Magenta
     * 16 = Pink
     * 17 = Salmon
     * 18 = Hot Pink
     * 19 = Rust Orange
     * 20 = Brown
     * 21 = Earth
     * 22 = Orange
     * 23 = Light Orange
     * 24 = Dark Yellow
     * 25 = Yellow
     * 26 = Light Brown
     * 27 = Lime Green
     * 28 = Olive
     * 29 = Moss
     * 30 = Turquoise
     * 31 = Dark Green
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x5DA825A85D0EA6E6 | Since: 1103 | API-Set: unknown
     */
    export function setObjectComponentTintIndex(weaponObject: number | IObject, camoComponentHash: number | string, colorIndex: number): void {
        if (typeof camoComponentHash === 'string') camoComponentHash = misc.getHashKey(camoComponentHash)
        SetWeaponObjectLiveryColor(weaponObject, camoComponentHash, colorIndex);
    }

    /**
     * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF827589017D4E4A9 | Since: 323 | API-Set: unknown
     */
    export function setObjectTintIndex(weapon: number | IObject, tintIndex: number): void {
        SetWeaponObjectTintIndex(weapon, tintIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2857938C5D407AFA | Since: 3407 | API-Set: unknown
     */
    export function getAmmoInVehicleClip(vehicle: number | IVehicle, seat: number): [boolean, number] {
        return Citizen.invokeNative('0x2857938C5D407AFA', vehicle, seat);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8C6F4B1CDEB40EF | Since: 3407 | API-Set: unknown
     */
    export function getTimeBeforeVehicleReloadFinishes(vehicle: number | IVehicle, seat: number): number {
        return Citizen.invokeNative('0xC8C6F4B1CDEB40EF', vehicle, seat);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD0AD348FFD7A6868 | Since: 3407 | API-Set: unknown
     */
    export function getVehicleReloadTime(vehicle: number | IVehicle, seat: number): number {
        return Citizen.invokeNative('0xD0AD348FFD7A6868', vehicle, seat);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8062F07153F4446F | Since: 3407 | API-Set: unknown
     */
    export function hasReloadingInVehicle(vehicle: number | IVehicle, seat: number): boolean {
        return Citizen.invokeNative('0x8062F07153F4446F', vehicle, seat);
    }

    /**
     * No comment provided
     *
     * Hash: 0x873906720EE842C3 | Since: 3407 | API-Set: unknown
     */
    export function setAmmoInVehicleClip(vehicle: number | IVehicle, seat: number, ammo: number): boolean {
        return Citizen.invokeNative('0x873906720EE842C3', vehicle, seat, ammo);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1091922715B68DF0 | Since: 3095 | API-Set: unknown
     */
    export function setPedDamageModifier(weapon: number | string, damageModifier: number): void {
        if (typeof weapon === 'string') weapon = misc.getHashKey(weapon)
        Citizen.invokeNative('0x1091922715B68DF0', weapon, damageModifier);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B1513F27F279A44 | Since: 3407 | API-Set: unknown
     */
    export function triggerVehicleReload(vehicle: number | IVehicle, seat: number, ped: number | IPed): boolean {
        return Citizen.invokeNative('0x5B1513F27F279A44', vehicle, seat, ped);
    }

}


export namespace network {
    /**
     * No comment provided
     *
     * Hash: 0x2CAFD5E9 | Since: unknown | API-Set: client
     */
    export function getWalkMode(): boolean {
        return GetNetworkWalkMode();
    }

    /**
     * No comment provided
     *
     * Hash: 0x55188D2D | Since: unknown | API-Set: client
     */
    export function setWalkMode(enabled: boolean): void {
        SetNetworkWalkMode(enabled);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E2E3177 | Since: unknown | API-Set: client
     */
    export function doesEntityExistWithNetworkId(netId: number): boolean {
        return NetworkDoesEntityExistWithNetworkId(netId);
    }

    /**
     * Returns the owner ID of the specified entity.
     *
     * Hash: 0x526FEE31 | Since: unknown | API-Set: shared
     */
    export function getEntityOwner(entity: number | IEntity): number {
        return NetworkGetEntityOwner(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD45B1FFCCD52FF19 | Since: 323 | API-Set: unknown
     */
    export function activateDamageTrackerOnId(netID: number, toggle: boolean): void {
        ActivateDamageTrackerOnNetworkId(netID, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEC0816FF5ACBCDA | Since: 757 | API-Set: unknown
     */
    export function activateDamageTrackerOnPlayer(player: number | string | IPlayer, toggle: boolean): void {
        ActivateDamageTrackerOnPlayer(player, toggle);
    }

    /**
     * Getter for SET_NETWORK_CUTSCENE_ENTITIES.
     *
     * Hash: 0x66D6A5E9C511214A | Since: 2699 | API-Set: unknown
     */
    export function areCutsceneEntitiesed(): boolean {
        return NetworkAreCutsceneEntities();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC5E3AF5289DCA81 | Since: 323 | API-Set: unknown
     */
    export function badSportPlayerLeftDetected(event: number, amountReceived: number): [boolean, any] {
        return BadSportPlayerLeftDetected(event, amountReceived);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE16AA70CE9BEEDC3 | Since: 877 | API-Set: unknown
     */
    export function canRegisterMissionDoors(): boolean {
        return Citizen.invokeNative('0xE16AA70CE9BEEDC3', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69778E7564BADE6D | Since: 323 | API-Set: unknown
     */
    export function canRegisterMissionEntities(ped_amt: number, vehicle_amt: number, object_amt: number, pickup_amt: number): boolean {
        return CanRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt);
    }

    /**
     * No comment provided
     *
     * Hash: 0x800DD4721A8B008B | Since: 323 | API-Set: unknown
     */
    export function canRegisterMissionObjects(amount: number): boolean {
        return CanRegisterMissionObjects(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCBF4FEF9FA5D781 | Since: 323 | API-Set: unknown
     */
    export function canRegisterMissionPeds(amount: number): boolean {
        return CanRegisterMissionPeds(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A49D1CB6E34AF72 | Since: 757 | API-Set: unknown
     */
    export function canRegisterMissionPickups(amount: number): boolean {
        return CanRegisterMissionPickups(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7277F1F2E085EE74 | Since: 323 | API-Set: unknown
     */
    export function canRegisterMissionVehicles(amount: number): boolean {
        return CanRegisterMissionVehicles(amount);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x966DD84FB6A46017 | Since: 323 | API-Set: unknown
     */
    export function clearServiceEventArguments(): void {
        ClearLaunchParams();
    }

    /**
     * Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
     *
     * Hash: 0x4F18196C8D38768D | Since: 323 | API-Set: unknown
     */
    export function cloudCheckAvailability(): void {
        CloudCheckAvailability();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC64DED7EF0D2FE37 | Since: 323 | API-Set: unknown
     */
    export function cloudDeleteMemberFile(): number {
        return CloudDeleteMemberFile(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A3D5568AF297CD5 | Since: 323 | API-Set: unknown
     */
    export function cloudDidRequestSucceed(requestId: number): boolean {
        return CloudDidRequestSucceed(requestId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B0CC10720653F3B | Since: 323 | API-Set: unknown
     */
    export function cloudGetAvailabilityCheckResult(): boolean {
        return CloudGetAvailabilityCheckResult();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C61B39930D045DA | Since: 323 | API-Set: unknown
     */
    export function cloudHasRequestCompleted(requestId: number): boolean {
        return CloudHasRequestCompleted(requestId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7ABAC5DE675EE3B | Since: 323 | API-Set: unknown
     */
    export function cloudIsCheckingAvailability(): boolean {
        return CloudIsCheckingAvailability();
    }

    /**
     * Takes the specified time and writes it to the structure specified in the second argument.
     *
     * struct date_time
     * {
     * int year;
     * int PADDING1;
     * int month;
     * int PADDING2;
     * int day;
     * int PADDING3;
     * int hour;
     * int PADDING4;
     * int minute;
     * int PADDING5;
     * int second;
     * int PADDING6;
     * };
     *
     * Hash: 0xAC97AF97FA68E5D5 | Since: 323 | API-Set: unknown
     */
    export function convertPosixTime(posixTime: number): any {
        return ConvertPosixTime(posixTime);
    }

    /**
     * No comment provided
     *
     * Hash: 0x265635150FB0D82E | Since: 323 | API-Set: unknown
     */
    export function delayMpStoreOpen(): void {
        Citizen.invokeNative('0x265635150FB0D82E');
    }

    /**
     * No comment provided
     *
     * Hash: 0x43865688AE10F0D7 | Since: 323 | API-Set: unknown
     */
    export function facebookCanPostToFacebook(): boolean {
        return FacebookIsAvailable();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA75E2B6733DA5142 | Since: 323 | API-Set: unknown
     */
    export function facebookDidPostSucceed(): boolean {
        return FacebookDoUnkCheck();
    }

    /**
     * No comment provided
     *
     * Hash: 0x62B9FEC9A11F10EF | Since: 323 | API-Set: unknown
     */
    export function facebookHasPostCompleted(): boolean {
        return FacebookIsSendingData();
    }

    /**
     * No comment provided
     *
     * Hash: 0x098AB65B9ED9A9EC | Since: 323 | API-Set: unknown
     */
    export function facebookPostCompletedHeist(heistName: string, cashEarned: number, xpEarned: number): boolean {
        return FacebookSetHeistComplete(heistName, cashEarned, xpEarned);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0AE1F1653B554AB9 | Since: 323 | API-Set: unknown
     */
    export function facebookPostCompletedMilestone(milestoneId: number): boolean {
        return FacebookSetMilestoneComplete(milestoneId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC48473142545431 | Since: 323 | API-Set: unknown
     */
    export function facebookPostCreateCharacter(): boolean {
        return FacebookSetCreateCharacterComplete();
    }

    /**
     * Hardcoded to not work in SP.
     *
     * Hash: 0x416DBD4CD6ED8DD2 | Since: 323 | API-Set: unknown
     */
    export function fadeOutLocalPlayer(): void {
        FadeOutLocalPlayer(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCBBD7C4991B64809 | Since: 323 | API-Set: unknown
     */
    export function filloutPmPlayerList(): [boolean, any] {
        return FilloutPmPlayerList(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x716B6DB9D1886106 | Since: 323 | API-Set: unknown
     */
    export function filloutPmPlayerListWithNames(): [boolean, any, any] {
        return FilloutPmPlayerListWithNames(undefined, undefined);
    }

    /**
     * Returns POSIX timestamp, an int representing the cloud time.
     *
     * Hash: 0x9A73240B49945C76 | Since: 323 | API-Set: unknown
     */
    export function getCloudTimeAsInt(): number {
        return GetCloudTimeAsInt();
    }

    /**
     * Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
     *
     * Hash: 0xF12E6CD06C73D69E | Since: 1103 | API-Set: unknown
     */
    export function getCloudTimeAsString(): string {
        return GetCloudTimeAsString();
    }

    /**
     * index2 is unused
     *
     * Hash: 0x6F44CBF56D79FAC0 | Since: 323 | API-Set: unknown
     */
    export function getCommerceItemCat(index: number, index2: number): string {
        return GetCommerceItemCat(index, index2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x662635855957C411 | Since: 323 | API-Set: unknown
     */
    export function getCommerceItemId(index: number): string {
        return GetCommerceItemId(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB4271092CA7EDF48 | Since: 323 | API-Set: unknown
     */
    export function getCommerceItemName(index: number): string {
        return GetCommerceItemName(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A7776C709904AB0 | Since: 323 | API-Set: unknown
     */
    export function getCommerceItemNumCats(index: number): number {
        return GetCommerceItemNumCats(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x722F5D28B61C5EA8 | Since: 323 | API-Set: unknown
     */
    export function getCommerceItemTexturename(index: number): string {
        return GetCommerceItemTexturename(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA94551B50B4932C | Since: 323 | API-Set: unknown
     */
    export function getCommerceProductPrice(index: number): string {
        return GetCommerceProductPrice(index);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x8B0C2964BA471961 | Since: 323 | API-Set: unknown
     */
    export function getContentToLoadType(): number {
        return Citizen.invokeNative('0x8B0C2964BA471961');
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x88B588B41FF7868E | Since: 323 | API-Set: unknown
     */
    export function getIsLaunchFromLiveArea(): boolean {
        return Citizen.invokeNative('0x88B588B41FF7868E');
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x67FC09BC554A75E5 | Since: 323 | API-Set: unknown
     */
    export function getIsLiveAreaLaunchWithContent(): boolean {
        return Citizen.invokeNative('0x67FC09BC554A75E5');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7BE335216B5EC7C | Since: 323 | API-Set: unknown
     */
    export function getMaxNumObjects(): number {
        return GetMaxNumNetworkObjects();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C1F7D49C39D2289 | Since: 323 | API-Set: unknown
     */
    export function getMaxNumPeds(): number {
        return GetMaxNumNetworkPeds();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA72835064DD63E4C | Since: 323 | API-Set: unknown
     */
    export function getMaxNumPickups(): number {
        return GetMaxNumNetworkPickups();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0AFCE529F69B21FF | Since: 323 | API-Set: unknown
     */
    export function getMaxNumVehicles(): number {
        return GetMaxNumNetworkVehicles();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A5487FE9FAA6B48 | Since: 323 | API-Set: unknown
     */
    export function getTime(): number {
        return GetNetworkTime();
    }

    /**
     * Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
     * Could be used for benchmarking since it can return times in ticks.
     *
     * Hash: 0x89023FBBF9200E9F | Since: 323 | API-Set: unknown
     */
    export function getTimeAccurate(): number {
        return GetNetworkTimeAccurate();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2EAC213D5EA0623 | Since: 323 | API-Set: unknown
     */
    export function getNumCommerceItems(): number {
        return GetNumCommerceItems();
    }

    /**
     * No comment provided
     *
     * Hash: 0x12B6281B6C6706C0 | Since: 323 | API-Set: unknown
     */
    export function getNumCreatedMissionObjects(): number {
        return GetNumCreatedMissionObjects(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB215C4B56A7FAE7 | Since: 323 | API-Set: unknown
     */
    export function getNumCreatedMissionPeds(): number {
        return GetNumCreatedMissionPeds(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0CD9AB83489430EA | Since: 323 | API-Set: unknown
     */
    export function getNumCreatedMissionVehicles(): number {
        return GetNumCreatedMissionVehicles(false);
    }

    /**
     * p0 appears to be for MP
     *
     * Hash: 0xAA81B5F10BC43AC2 | Since: 323 | API-Set: unknown
     */
    export function getNumReservedMissionObjects(): number {
        return GetNumReservedMissionObjects(false, undefined);
    }

    /**
     * p0 appears to be for MP
     *
     * Hash: 0x1F13D5AE5CB17E17 | Since: 323 | API-Set: unknown
     */
    export function getNumReservedMissionPeds(): number {
        return GetNumReservedMissionPeds(false, undefined);
    }

    /**
     * p0 appears to be for MP
     *
     * Hash: 0xCF3A965906452031 | Since: 323 | API-Set: unknown
     */
    export function getNumReservedMissionVehicles(): number {
        return GetNumReservedMissionVehicles(false, undefined);
    }

    /**
     * Online version is defined here: update\update.rpf\common\data\version.txt
     *
     * Example:
     *
     * [ONLINE_VERSION_NUMBER]
     * 1.33
     *
     * _GET_ONLINE_VERSION() will return "1.33"
     *
     * Hash: 0xFCA9373EF340AC0A | Since: 323 | API-Set: unknown
     */
    export function getOnlineVersion(): string {
        return GetOnlineVersion();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE42D626EEC94E5D9 | Since: 1290 | API-Set: unknown
     */
    export function getReservedMissionEntitiesInArea(pos: Vector3): [any, any, any] {
        return Citizen.invokeNative('0xE42D626EEC94E5D9', pos.x, pos.y, pos.z, undefined);
    }

    /**
     * 0 = succeeded
     * 1 = pending
     * 2 = failed
     *
     * Hash: 0x8BD6C6DEA20E82C6 | Since: 323 | API-Set: unknown
     */
    export function getStatusOfTextureDownload(): number {
        return GetStatusOfTextureDownload(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E23B1777A927DAD | Since: 323 | API-Set: unknown
     */
    export function getTimeAsString(time: number): string {
        return GetTimeAsString(time);
    }

    /**
     * Subtracts the second argument from the first.
     *
     * Hash: 0xA2C6FC031D46FFF0 | Since: 323 | API-Set: unknown
     */
    export function getTimeDifference(timeA: number, timeB: number): number {
        return GetTimeDifference(timeA, timeB);
    }

    /**
     * Adds the first argument to the second.
     *
     * Hash: 0x017008CCDAD48503 | Since: 323 | API-Set: unknown
     */
    export function getTimeOffset(timeA: number, timeB: number): number {
        return GetTimeOffset(timeA, timeB);
    }

    /**
     * Checks some commerce stuff
     *
     * Hash: 0x754615490A029508 | Since: 1290 | API-Set: unknown
     */
    export function getUserPremiumAccess(): number {
        return Citizen.invokeNative('0x754615490A029508');
    }

    /**
     * Checks some commerce stuff
     *
     * Hash: 0x155467ACA0F55705 | Since: 1290 | API-Set: unknown
     */
    export function getUserStarterAccess(): number {
        return Citizen.invokeNative('0x155467ACA0F55705');
    }

    /**
     * No comment provided
     *
     * Hash: 0x46718ACEEDEAFC84 | Since: 323 | API-Set: unknown
     */
    export function hasTimeStarted(): boolean {
        return HasNetworkTimeStarted();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D4DC17C38FEAFF0 | Since: 323 | API-Set: unknown
     */
    export function isCommerceDataFetchInProgress(): boolean {
        return Citizen.invokeNative('0x1D4DC17C38FEAFF0');
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA14EEF5B7CD2C30 | Since: 323 | API-Set: unknown
     */
    export function isCommerceDataValid(): boolean {
        return IsCommerceDataValid();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2EAC52B4019E2782 | Since: 323 | API-Set: unknown
     */
    export function isCommerceStoreOpen(): boolean {
        return IsCommerceStoreOpen();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E192E33AD436366 | Since: 323 | API-Set: unknown
     */
    export function isDamageTrackerActiveOnId(netID: number): boolean {
        return IsDamageTrackerActiveOnNetworkId(netID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2092A1EAA7FD45F | Since: 757 | API-Set: unknown
     */
    export function isDamageTrackerActiveOnPlayer(player: number | string | IPlayer): boolean {
        return IsDamageTrackerActiveOnPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x21D04D7BC538C146 | Since: 323 | API-Set: unknown
     */
    export function isEntityAGhost(entity: number | IEntity): boolean {
        return IsEntityGhostedToLocalPlayer(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7EF7649B64D7FF10 | Since: 944 | API-Set: unknown
     */
    export function isEntityInGhostCollision(entity: number | IEntity): boolean {
        return Citizen.invokeNative('0x7EF7649B64D7FF10', entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1607996431332DF | Since: 323 | API-Set: unknown
     */
    export function isIdOwnedByParticipant(netId: number): boolean {
        return IsNetworkIdOwnedByParticipant(netId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD7CEF5B3A4DA8A6 | Since: 2802 | API-Set: unknown
     */
    export function isVehicleRunningRespotTimer(networkID: number): boolean {
        return Citizen.invokeNative('0xDD7CEF5B3A4DA8A6', networkID);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28123C8B056CC8AA | Since: 3274 | API-Set: unknown
     */
    export function isObjectReassignmentInProgress(): boolean {
        return Citizen.invokeNative('0x28123C8B056CC8AA');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE73092F4157CD126 | Since: 323 | API-Set: unknown
     */
    export function isPlayerInCutscene(player: number | string | IPlayer): boolean {
        return IsPlayerInCutscene(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD82CF8E64C8729D8 | Since: 323 | API-Set: unknown
     */
    export function isSphereVisibleToAnotherMachine(): boolean {
        return IsSphereVisibleToAnotherMachine(0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC3A310219E5DA62 | Since: 323 | API-Set: unknown
     */
    export function isSphereVisibleToPlayer(): boolean {
        return IsSphereVisibleToPlayer(undefined, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x883D79C4071E18B3 | Since: 323 | API-Set: unknown
     */
    export function isStoreAvailableToUser(): boolean {
        return IsStoreAvailableToUser();
    }

    /**
     * Returns true if the two times are equal; otherwise returns false.
     *
     * Hash: 0xF5BC95857BD6D512 | Since: 323 | API-Set: unknown
     */
    export function isTimeEqualTo(timeA: number, timeB: number): boolean {
        return IsTimeEqualTo(timeA, timeB);
    }

    /**
     * Subtracts the second argument from the first, then returns whether the result is negative.
     *
     * Hash: 0xCB2CF5148012C8D0 | Since: 323 | API-Set: unknown
     */
    export function isTimeLessThan(timeA: number, timeB: number): boolean {
        return IsTimeLessThan(timeA, timeB);
    }

    /**
     * Subtracts the first argument from the second, then returns whether the result is negative.
     *
     * Hash: 0xDE350F8651E4346C | Since: 323 | API-Set: unknown
     */
    export function isTimeMoreThan(timeA: number, timeB: number): boolean {
        return IsTimeMoreThan(timeA, timeB);
    }

    /**
     * No comment provided
     *
     * Hash: 0x59328EB08C5CEB2B | Since: 323 | API-Set: unknown
     */
    export function isUserOldEnoughToAccessStore(): boolean {
        return Citizen.invokeNative('0x59328EB08C5CEB2B');
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA91550DF9318B22 | Since: 323 | API-Set: unknown
     */
    export function acceptPresenceInvite(): boolean {
        return NetworkAcceptPresenceInvite(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA6A47A573ABB75A | Since: 323 | API-Set: unknown
     */
    export function accessTunableBool(tunableContext: string, tunableName: string): boolean {
        return NetworkAccessTunableBool(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA16B69D93D71A45 | Since: 323 | API-Set: unknown
     */
    export function accessTunableBoolHash(tunableContext: number | string, tunableName: number | string): boolean {
        if (typeof tunableContext === 'string') tunableContext = misc.getHashKey(tunableContext)
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return NetworkAccessTunableBoolHash(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x697F508861875B42 | Since: 393 | API-Set: unknown
     */
    export function accessTunableBoolModificationDetectionRegistrationHash(contextHash: number | string, nameHash: number | string): [boolean, boolean] {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        if (typeof nameHash === 'string') nameHash = misc.getHashKey(nameHash)
        return NetworkRegisterTunableBoolHash(contextHash, nameHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE5608CA7BC163A5F | Since: 323 | API-Set: unknown
     */
    export function accessTunableFloat(tunableContext: string, tunableName: string): [boolean, number] {
        return NetworkAccessTunableFloat(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x972BC203BBC4C4D5 | Since: 323 | API-Set: unknown
     */
    export function accessTunableFloatHash(tunableContext: number | string, tunableName: number | string): [boolean, number] {
        if (typeof tunableContext === 'string') tunableContext = misc.getHashKey(tunableContext)
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return NetworkAccessTunableFloatHash(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1950DAE9848A4739 | Since: 393 | API-Set: unknown
     */
    export function accessTunableFloatModificationDetectionRegistrationHash(contextHash: number | string, nameHash: number | string): [boolean, number] {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        if (typeof nameHash === 'string') nameHash = misc.getHashKey(nameHash)
        return NetworkRegisterTunableFloatHash(contextHash, nameHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8BE1146DFD5D4468 | Since: 323 | API-Set: unknown
     */
    export function accessTunableInt(tunableContext: string, tunableName: string): [boolean, number] {
        return NetworkAccessTunableInt(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x40FCE03E50E8DBE8 | Since: 323 | API-Set: unknown
     */
    export function accessTunableIntHash(tunableContext: number | string, tunableName: number | string): [boolean, number] {
        if (typeof tunableContext === 'string') tunableContext = misc.getHashKey(tunableContext)
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return NetworkAccessTunableIntHash(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A8B55FDA4C8DDEF | Since: 393 | API-Set: unknown
     */
    export function accessTunableIntModificationDetectionRegistrationHash(contextHash: number | string, nameHash: number | string): [boolean, number] {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        if (typeof nameHash === 'string') nameHash = misc.getHashKey(nameHash)
        return NetworkRegisterTunableIntHash(contextHash, nameHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAFC23AEE23868DB | Since: 393 | API-Set: unknown
     */
    export function accessTunableModificationDetectionClear(): boolean {
        return NetworkAllocateTunablesRegistrationDataMap();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC88156EBB786F8D5 | Since: 323 | API-Set: unknown
     */
    export function actionFollowInvite(): boolean {
        return NetworkActionFollowInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B1C623823DB0D9D | Since: 1103 | API-Set: unknown
     */
    export function addClientEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number {
        return Citizen.invokeNative('0x2B1C623823DB0D9D', x1, y1, z1, x2, y2, z2, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25B99872D588A101 | Since: 323 | API-Set: unknown
     */
    export function addClientEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return NetworkAddEntityDisplayedBoundaries(x1, y1, z1, x2, y2, z2);
    }

    /**
     * To remove, see: NETWORK_REMOVE_ENTITY_AREA
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x376C6375BA60293A | Since: 323 | API-Set: unknown
     */
    export function addEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number {
        return NetworkAddEntityAngledArea(x1, y1, z1, x2, y2, z2, width);
    }

    /**
     * No comment provided
     *
     * Hash: 0x494C8FB299290269 | Since: 323 | API-Set: unknown
     */
    export function addEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return NetworkAddEntityArea(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2404D68CBC855FA | Since: 323 | API-Set: unknown
     */
    export function addEntityToSynchronisedScene(entity: number | IEntity, netScene: number, animDict: string, animName: string, speed: number, speedMulitiplier: number, flag: number): void {
        NetworkAddEntityToSynchronisedScene(entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
    }

    /**
     * ..
     *
     * Hash: 0x236406F60CF216D6 | Since: 323 | API-Set: unknown
     */
    export function addFollowers(): number {
        return NetworkAddFollowers(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8E02D73914064223 | Since: 323 | API-Set: unknown
     */
    export function addFriend(message: string): [boolean, any] {
        return NetworkAddFriend(message);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F562DBC212E81F9 | Since: 2545 | API-Set: unknown
     */
    export function addInvalidObjectModel(modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        Citizen.invokeNative('0x7F562DBC212E81F9', modelHash, undefined);
    }

    /**
     * Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
     * In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
     *
     * Hash: 0x45F35C0EDC33B03B | Since: 1734 | API-Set: unknown
     */
    export function addMapEntityToSynchronisedScene(netScene: number, modelHash: number | string, pos: Vector3, flags: number): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        NetworkAddMapEntityToSynchronisedScene(netScene, modelHash, pos.x, pos.y, pos.z, 0, undefined, 0, 0, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x742A637471BCECD9 | Since: 323 | API-Set: unknown
     */
    export function addPedToSynchronisedScene(ped: number | IPed, netScene: number, animDict: string, animnName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number): void {
        NetworkAddPedToSynchronisedScene(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA5EAFE473E45C442 | Since: 1290 | API-Set: unknown
     */
    export function addPedToSynchronisedSceneWithIk(): void {
        NetworkAddPedToSynchronisedSceneWithIk(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF8BD3B0BD6D42D7 | Since: 323 | API-Set: unknown
     */
    export function addSynchronisedSceneCamera(netScene: number, animDict: string, animName: string): void {
        NetworkAddSynchronisedSceneCamera(netScene, animDict, animName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F1A4B45B7693B95 | Since: 2189 | API-Set: unknown
     */
    export function allowCloningWhileInTutorial(): void {
        Citizen.invokeNative('0x0F1A4B45B7693B95', undefined, undefined);
    }

    /**
     * teamId must be < 3, instanceId must be < 64
     *
     * Hash: 0xFB680D403909DC70 | Since: 323 | API-Set: unknown
     */
    export function allowGangToJoinTutorialSession(teamId: number, instanceId: number): void {
        Citizen.invokeNative('0xFB680D403909DC70', teamId, instanceId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B07B9CE4D390375 | Since: 323 | API-Set: unknown
     */
    export function allowInviteProcessInPlayerSwitch(): void {
        NetworkBlockKickedPlayers(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x267C78C60E806B9A | Since: 323 | API-Set: unknown
     */
    export function allowRemoteAttachmentModification(entity: number | IEntity, toggle: boolean): void {
        NetworkAllowRemoteAttachmentModification(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x144DA052257AE7D8 | Since: 1103 | API-Set: unknown
     */
    export function allowRemoteSyncedSceneLocalPlayerRequests(): void {
        Citizen.invokeNative('0x144DA052257AE7D8', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x15337C7C268A27B2 | Since: 323 | API-Set: unknown
     */
    export function amIBlockedByGamer(): [boolean, any] {
        return NetworkAmIBlockedByGamer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x87F395D957D4353D | Since: 323 | API-Set: unknown
     */
    export function amIBlockedByPlayer(player: number | string | IPlayer): boolean {
        return NetworkAmIBlockedByPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF02A2C93F1F26DA | Since: 323 | API-Set: unknown
     */
    export function amIMutedByGamer(): [boolean, any] {
        return NetworkAmIMutedByGamer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D6981DFC91A8604 | Since: 323 | API-Set: unknown
     */
    export function amIMutedByPlayer(player: number | string | IPlayer): boolean {
        return NetworkAmIMutedByPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x99B72C7ABDE5C910 | Since: 323 | API-Set: unknown
     */
    export function applyCachedPlayerHeadBlendData(ped: number | IPed, player: number | string | IPlayer): boolean {
        return NetworkApplyCachedPlayerHeadBlendData(ped, player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE66C690248F11150 | Since: 323 | API-Set: unknown
     */
    export function applyPedScarData(ped: number | IPed): void {
        NetworkApplyPedScarData(ped, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x521638ADA1BA0D18 | Since: 323 | API-Set: unknown
     */
    export function applyTransitionParameter(): void {
        NetworkApplyTransitionParameter(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEBEFC2E77084F599 | Since: 323 | API-Set: unknown
     */
    export function applyTransitionParameterString(_string: string): void {
        NetworkApplyTransitionParameterString(0, _string, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDBD2056652689917 | Since: 323 | API-Set: unknown
     */
    export function applyVoiceProximityOverride(pos: Vector3): void {
        NetworkApplyVoiceProximityOverride(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57DBA049E110F217 | Since: 323 | API-Set: unknown
     */
    export function areHandlesTheSame(): [boolean, any, any] {
        return NetworkAreHandlesTheSame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DE986FC9A87C474 | Since: 323 | API-Set: unknown
     */
    export function arePlayersInSameTutorialSession(player: number | string | IPlayer, index: number): boolean {
        return NetworkIsPlayerEqualToIndex(player, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA9775570DB788CF | Since: 323 | API-Set: unknown
     */
    export function areSocialClubPoliciesCurrent(): boolean {
        return NetworkAreSocialClubPoliciesCurrent();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2615AA2A695930C1 | Since: 323 | API-Set: unknown
     */
    export function areTransitionDetailsValid(): boolean {
        return NetworkAreTransitionDetailsValid(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x478DCBD2A98B705A | Since: 323 | API-Set: unknown
     */
    export function attachSynchronisedSceneToEntity(netScene: number, entity: number | IEntity, bone: number): void {
        NetworkAttachSynchronisedSceneToEntity(netScene, entity, bone);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95914459A87EBA28 | Since: 323 | API-Set: unknown
     */
    export function bail(): void {
        NetworkBail(0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAA572036990CD1B | Since: 323 | API-Set: unknown
     */
    export function bailTransition(): void {
        NetworkBailTransition(0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34F9E9049454A7A0 | Since: 323 | API-Set: unknown
     */
    export function blockInvites(toggle: boolean): void {
        NetworkBlockInvites(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFEB8AF24FC1D0BB | Since: 323 | API-Set: unknown
     */
    export function blockJoinQueueInvites(toggle: boolean): void {
        NetworkBlockJoinQueueInvites(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFEA7A352DDB34D52 | Since: 2545 | API-Set: unknown
     */
    export function blockProxyMigrationBetweenTutorialSessions(): void {
        Citizen.invokeNative('0xFEA7A352DDB34D52', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD0BE0BFC927EAC1 | Since: 323 | API-Set: unknown
     */
    export function cacheLocalPlayerHeadBlendData(): void {
        NetworkCacheLocalPlayerHeadBlendData();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB8F2A6F3DF08CBE | Since: 323 | API-Set: unknown
     */
    export function cancelRespawnSearch(): void {
        NetworkCancelRespawnSearch();
    }

    /**
     * No comment provided
     *
     * Hash: 0x023782EFC70585EE | Since: 2699 | API-Set: unknown
     */
    export function cancelTransitionMatchmaking(): void {
        NetworkBailTransitionQuickmatch();
    }

    /**
     * 11 - Need to download tunables.
     * 12 - Need to download background script.
     *
     * Returns 1 if the multiplayer is loaded, otherwhise 0.
     *
     * Hash: 0xAF50DA1A3F8B1BA4 | Since: 323 | API-Set: unknown
     */
    export function canAccessMultiplayer(): [boolean, number] {
        return NetworkCanAccessMultiplayer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x580CE4438479CC61 | Since: 323 | API-Set: unknown
     */
    export function canBail(): boolean {
        return NetworkCanBail();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F5D1AD832AEB06C | Since: 323 | API-Set: unknown
     */
    export function canCommunicateWithGamer(): [boolean, any] {
        return NetworkCanCommunicateWithGamer2();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E782A910C362C25 | Since: 323 | API-Set: unknown
     */
    export function canEnterMultiplayer(): boolean {
        return NetworkCanEnterMultiplayer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x135F9B7B7ADD2185 | Since: 323 | API-Set: unknown
     */
    export function canGamerPlayMultiplayerWithMe(): [boolean, any] {
        return NetworkCanGamerPlayMultiplayerWithMe();
    }

    /**
     * No comment provided
     *
     * Hash: 0x07DD29D5E22763F1 | Since: 323 | API-Set: unknown
     */
    export function canPlayMultiplayerWithGamer(): [boolean, any] {
        return NetworkCanPlayMultiplayerWithGamer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2BF66D2E7414F686 | Since: 323 | API-Set: unknown
     */
    export function canQueueForPreviousSessionJoin(): boolean {
        return Citizen.invokeNative('0x2BF66D2E7414F686');
    }

    /**
     * No comment provided
     *
     * Hash: 0x421E34C55F125964 | Since: 2612 | API-Set: unknown
     */
    export function canReceiveLocalInvite(): [boolean, any] {
        return Citizen.invokeNative('0x421E34C55F125964');
    }

    /**
     * No comment provided
     *
     * Hash: 0x021ABCBD98EC4320 | Since: 2612 | API-Set: unknown
     */
    export function canSendLocalInvite(): [boolean, any] {
        return Citizen.invokeNative('0x021ABCBD98EC4320');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4EEBC3694E49C572 | Since: 323 | API-Set: unknown
     */
    export function canSessionEnd(): boolean {
        return NetworkCanSessionEnd();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC927EC229934AF60 | Since: 323 | API-Set: unknown
     */
    export function canSetWaypoint(): boolean {
        return NetworkCanSetWaypoint();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA150A4F065806B1F | Since: 944 | API-Set: unknown
     */
    export function canTextChatWithGamer(): [boolean, any] {
        return NetworkCanCommunicateWithGamer();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB57A49545BA53CE7 | Since: 323 | API-Set: unknown
     */
    export function canViewGamerUserContent(): [boolean, any] {
        return NetworkCanViewGamerUserContent();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEEEDA5E6D7080987 | Since: 323 | API-Set: unknown
     */
    export function changeTransitionSlots(): void {
        NetworkChangeTransitionSlots(undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6FA9825D0B5A721B | Since: 3570 | API-Set: unknown
     */
    export function checkCanAccessAndAlert(): boolean {
        return Citizen.invokeNative('0x6FA9825D0B5A721B');
    }

    /**
     * No comment provided
     *
     * Hash: 0x83F28CE49FBBFFBA | Since: 323 | API-Set: unknown
     */
    export function checkCommunicationPrivileges(): boolean {
        return NetworkCheckCommunicationPrivileges(0, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4AD490AE1536933B | Since: 372 | API-Set: unknown
     */
    export function checkDataManagerForHandle(): [boolean, any] {
        return Citizen.invokeNative('0x4AD490AE1536933B', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44B37CDCAE765AAE | Since: 323 | API-Set: unknown
     */
    export function checkDataManagerSucceededForHandle(): [boolean, any] {
        return NetworkCheckDataManagerSucceededForHandle(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78321BEA235FD8CD | Since: 323 | API-Set: unknown
     */
    export function checkOnlinePrivileges(): boolean {
        return Citizen.invokeNative('0x78321BEA235FD8CD', undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0CF6CC51AA18F0F8 | Since: 1180 | API-Set: unknown
     */
    export function checkPrivileges(): boolean {
        return Citizen.invokeNative('0x0CF6CC51AA18F0F8', undefined, undefined, undefined);
    }

    /**
     * Returns true if profile setting 901 is set to true and sets it to false.
     *
     * Hash: 0x60EDD13EB3AC1FF3 | Since: 323 | API-Set: unknown
     */
    export function checkRosLinkWentdownNotNet(): boolean {
        return Citizen.invokeNative('0x60EDD13EB3AC1FF3');
    }

    /**
     * No comment provided
     *
     * Hash: 0x07EAB372C8841D99 | Since: 1011 | API-Set: unknown
     */
    export function checkTextCommunicationPrivileges(): boolean {
        return Citizen.invokeNative('0x07EAB372C8841D99', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x595F028698072DD9 | Since: 323 | API-Set: unknown
     */
    export function checkUserContentPrivileges(): boolean {
        return NetworkCheckUserContentPrivileges(0, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3F64A6A91432477 | Since: 323 | API-Set: unknown
     */
    export function clanAnyDownloadMembershipPending(): boolean {
        return NetworkClanAnyDownloadMembershipPending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B51EDBEFC301339 | Since: 323 | API-Set: unknown
     */
    export function clanCrewinfoGetCrewranktitle(): boolean {
        return Citizen.invokeNative('0x2B51EDBEFC301339', 0, undefined);
    }

    /**
     * Only documented...
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x729E3401F0430686 | Since: 323 | API-Set: unknown
     */
    export function clanCrewinfoGetStringValue(animDict: string, animName: string): boolean {
        return NetworkClanAnimation(animDict, animName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA989044E70010ABE | Since: 323 | API-Set: unknown
     */
    export function clanDownloadMembership(): [boolean, any] {
        return NetworkClanDownloadMembership();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B9E023DC6EBEDC0 | Since: 323 | API-Set: unknown
     */
    export function clanDownloadMembershipPending(): [boolean, any] {
        return NetworkClanDownloadMembershipPending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5835D9CD92E83184 | Since: 323 | API-Set: unknown
     */
    export function clanGetEmblemTxdName(): [boolean, any, string] {
        return NetworkClanGetEmblemTxdName();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC90BEF | Since: 323 | API-Set: unknown
     */
    export function clanGetLocalMembershipsCount(): number {
        return NetworkClanGetLocalMembershipsCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8BC2011F67B3411 | Since: 323 | API-Set: unknown
     */
    export function clanGetMembership(): [boolean, number, any] {
        return NetworkClanGetMembership(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAAB11F6C4ADBC2C1 | Since: 323 | API-Set: unknown
     */
    export function clanGetMembershipCount(): [number, number] {
        return NetworkClanGetMembershipCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x48DE78AF2C8885B8 | Since: 323 | API-Set: unknown
     */
    export function clanGetMembershipDesc(): [boolean, any] {
        return NetworkClanGetMembershipDesc(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x48A59CF88D43DF0E | Since: 323 | API-Set: unknown
     */
    export function clanGetMembershipValid(): [boolean, number] {
        return NetworkClanGetMembershipValid(undefined);
    }

    /**
     * bufferSize is 35 in the scripts.
     *
     * Hash: 0xF45352426FF3A4F0 | Since: 323 | API-Set: unknown
     */
    export function clanGetUiFormattedTag(bufferSize: number): [any, string] {
        return NetworkClanGetUiFormattedTag(bufferSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC32EA7A2F6CA7557 | Since: 323 | API-Set: unknown
     */
    export function clanHasCrewinfoMetadataBeenReceived(): boolean {
        return Citizen.invokeNative('0xC32EA7A2F6CA7557');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA134777FF7F33331 | Since: 323 | API-Set: unknown
     */
    export function clanIsEmblemReady(): [boolean, any] {
        return NetworkClanIsEmblemReady(undefined);
    }

    /**
     * bufferSize is 35 in the scripts.
     *
     * Hash: 0x7543BB439F63792B | Since: 323 | API-Set: unknown
     */
    export function clanIsRockstarClan(bufferSize: number): [boolean, any] {
        return NetworkClanIsRockstarClan(bufferSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9FAAA4F4FC71F87F | Since: 323 | API-Set: unknown
     */
    export function clanJoin(clanDesc: number): boolean {
        return NetworkClanJoin(clanDesc);
    }

    /**
     * bufferSize is 35 in the scripts.
     *
     * `bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.`
     *
     * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
     *
     * https://pastebin.com/cSZniHak
     *
     * Hash: 0xEEE6EACBE8874FBA | Since: 323 | API-Set: unknown
     */
    export function clanPlayerGetDesc(bufferSize: number): [boolean, any, any] {
        return NetworkClanPlayerGetDesc(bufferSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB124B57F571D8F18 | Since: 323 | API-Set: unknown
     */
    export function clanPlayerIsActive(): [boolean, any] {
        return NetworkClanPlayerIsActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x113E6E3E50E286B0 | Since: 323 | API-Set: unknown
     */
    export function clanReleaseEmblem(): void {
        NetworkClanReleaseEmblem(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB6E6FEE99D866B2 | Since: 323 | API-Set: unknown
     */
    export function clanRemoteMembershipsAreInCache(): [boolean, number] {
        return NetworkClanRemoteMembershipsAreInCache();
    }

    /**
     * No comment provided
     *
     * Hash: 0x13518FF1C6B28938 | Since: 323 | API-Set: unknown
     */
    export function clanRequestEmblem(): boolean {
        return NetworkClanRequestEmblem(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x579CCED0265D4896 | Since: 323 | API-Set: unknown
     */
    export function clanServiceIsValid(): boolean {
        return NetworkClanServiceIsValid();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD972DF67326F966E | Since: 323 | API-Set: unknown
     */
    export function clearClockTimeOverride(): void {
        NetworkClearClockTimeOverride();
    }

    /**
     * No comment provided
     *
     * Hash: 0x058F43EC59A8631A | Since: 323 | API-Set: unknown
     */
    export function clearFollowers(): void {
        NetworkClearFollowers();
    }

    /**
     * No comment provided
     *
     * Hash: 0x439BFDE3CD0610F6 | Since: 323 | API-Set: unknown
     */
    export function clearFollowInvite(): boolean {
        return NetworkClearFollowInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D14CCEE1B40381A | Since: 323 | API-Set: unknown
     */
    export function clearFoundGamers(): void {
        NetworkClearFoundGamers();
    }

    /**
     * No comment provided
     *
     * Hash: 0x86E0660E4F5C956D | Since: 323 | API-Set: unknown
     */
    export function clearGetGamerStatus(): void {
        NetworkClearGetGamerStatus();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1888694923EF4591 | Since: 393 | API-Set: unknown
     */
    export function clearGroupActivity(): void {
        NetworkClearGroupActivity();
    }

    /**
     * No comment provided
     *
     * Hash: 0x03B2F03A53D85E41 | Since: 2545 | API-Set: unknown
     */
    export function clearInvalidObjectModels(): void {
        Citizen.invokeNative('0x03B2F03A53D85E41');
    }

    /**
     * No comment provided
     *
     * Hash: 0x140E6A44870A11CE | Since: 323 | API-Set: unknown
     */
    export function clearOfflineInvitePending(): void {
        Citizen.invokeNative('0x140E6A44870A11CE');
    }

    /**
     * No comment provided
     *
     * Hash: 0x6CE50E47F5543D0C | Since: 573 | API-Set: unknown
     */
    export function clearQueuedJoinRequest(): void {
        Citizen.invokeNative('0x6CE50E47F5543D0C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB3272229A82C759 | Since: 323 | API-Set: unknown
     */
    export function clearTransitionCreatorHandle(): void {
        NetworkClearTransitionCreatorHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE036A705F989E049 | Since: 323 | API-Set: unknown
     */
    export function clearVoiceChannel(): void {
        NetworkClearVoiceChannel();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF03755696450470C | Since: 323 | API-Set: unknown
     */
    export function clearVoiceProximityOverride(): void {
        NetworkClearVoiceProximityOverride();
    }

    /**
     * No comment provided
     *
     * Hash: 0x43F4DBA69710E01E | Since: 323 | API-Set: unknown
     */
    export function closeTransitionMatchmaking(): void {
        NetworkCloseTransitionMatchmaking();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1632BE0AC1E62876 | Since: 877 | API-Set: unknown
     */
    export function concealEntity(entity: number | IEntity, toggle: boolean): void {
        NetworkConcealEntity(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBDF066252829606 | Since: 323 | API-Set: unknown
     */
    export function concealPlayer(player: number | string | IPlayer, toggle: boolean): void {
        NetworkConcealPlayer(player, toggle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7CD6BC4C2BBDD526 | Since: 323 | API-Set: unknown
     */
    export function createSynchronisedScene(pos: Vector3, rot: Vector3, rotationOrder: number, useOcclusionPortal: boolean, looped: boolean, animTime: number): number {
        return NetworkCreateSynchronisedScene(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, rotationOrder, useOcclusionPortal, looped, 0, animTime, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9B83B77929D8863 | Since: 323 | API-Set: unknown
     */
    export function didFindGamersSucceed(): boolean {
        return NetworkDidFindGamersSucceed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5AE17C6B0134B7F1 | Since: 323 | API-Set: unknown
     */
    export function didGetGamerStatusSucceed(): boolean {
        return NetworkDidGetGamerStatusSucceed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DD368BF06983221 | Since: 323 | API-Set: unknown
     */
    export function disableInvincibleFlashing(player: number | string | IPlayer, toggle: boolean): void {
        NetworkDisableInvincibleFlashing(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC505036A35AFD01B | Since: 323 | API-Set: unknown
     */
    export function disableLeaveRemotePedBehind(toggle: boolean): void {
        NetworkDisableLeaveRemotePedBehind(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x407091CF6037118E | Since: 323 | API-Set: unknown
     */
    export function disableProximityMigration(netID: number): void {
        NetworkDisableProximityMigration(netID);
    }

    /**
     * No comment provided
     *
     * Hash: 0x236905C700FDB54D | Since: 2612 | API-Set: unknown
     */
    export function disableRealtimeMultiplayer(): void {
        Citizen.invokeNative('0x236905C700FDB54D');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA575C391FEA25CC | Since: 323 | API-Set: unknown
     */
    export function disableVoiceBandwidthRestriction(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xCA575C391FEA25CC', player);
    }

    /**
     * Hardcoded to return -1.
     *
     * Hash: 0xD66C9E72B3CC4982 | Since: 323 | API-Set: unknown
     */
    export function displaynamesFromHandlesStart(): [number, any] {
        return NetworkDisplaynamesFromHandlesStart(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x38CE16C96BD11344 | Since: 323 | API-Set: unknown
     */
    export function doesNetworkIdExist(netId: number): boolean {
        return NetworkDoesNetworkIdExist(netId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x85E5F8B9B898B20A | Since: 323 | API-Set: unknown
     */
    export function doesTunableExist(tunableContext: string, tunableName: string): boolean {
        return NetworkDoesTunableExist(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4E53E1419D81127 | Since: 323 | API-Set: unknown
     */
    export function doesTunableExistHash(tunableContext: number | string, tunableName: number | string): boolean {
        if (typeof tunableContext === 'string') tunableContext = misc.getHashKey(tunableContext)
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return NetworkDoesTunableExistHash(tunableContext, tunableName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71FB0EBCD4915D56 | Since: 323 | API-Set: unknown
     */
    export function doTransitionQuickmatch(): boolean {
        return NetworkDoTransitionQuickmatch(undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA091A5E44F0072E5 | Since: 323 | API-Set: unknown
     */
    export function doTransitionQuickmatchAsync(): boolean {
        return NetworkDoTransitionQuickmatchAsync(undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C4AB58491FDC98A | Since: 323 | API-Set: unknown
     */
    export function doTransitionQuickmatchWithGroup(): [boolean, any] {
        return NetworkDoTransitionQuickmatchWithGroup(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * p2 is true 3/4 of the occurrences I found.
     * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
     *
     * Hash: 0x3AAD8B2FCA1E289F | Since: 323 | API-Set: unknown
     */
    export function doTransitionToFreemode(players: number): [boolean, any] {
        return NetworkDoTransitionToFreemode(undefined, false, players, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E9BB38102A589B0 | Since: 323 | API-Set: unknown
     */
    export function doTransitionToGame(maxPlayers: number): boolean {
        return NetworkDoTransitionToGame(false, maxPlayers);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E80A5BA8109F974 | Since: 323 | API-Set: unknown
     */
    export function doTransitionToNewFreemode(players: number): [boolean, any] {
        return NetworkDoTransitionToNewFreemode(undefined, players, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4665F51EFED00034 | Since: 323 | API-Set: unknown
     */
    export function doTransitionToNewGame(maxPlayers: number): boolean {
        return NetworkDoTransitionToNewGame(false, maxPlayers, false);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xAEDF1BC1C133D6E3 | Since: 323 | API-Set: unknown
     */
    export function dumpNetIfConfig(): void {
        Citizen.invokeNative('0xAEDF1BC1C133D6E3');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6717E652B8C8D8A | Since: 617 | API-Set: unknown
     */
    export function enableExtraVehicleOrientationBlendChecks(netId: number, toggle: boolean): void {
        Citizen.invokeNative('0xE6717E652B8C8D8A', netId, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E3AA4CA2B6FB0EE | Since: 323 | API-Set: unknown
     */
    export function enableVoiceBandwidthRestriction(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x5E3AA4CA2B6FB0EE', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD0AFAFF5A51D72F7 | Since: 323 | API-Set: unknown
     */
    export function endTutorialSession(): void {
        NetworkEndTutorialSession();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE64A3CA08DFA37A9 | Since: 323 | API-Set: unknown
     */
    export function entityAreaDoesExist(areaHandle: number): boolean {
        return NetworkEntityAreaDoesExist(areaHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4DF7CFFF471A7FB1 | Since: 323 | API-Set: unknown
     */
    export function entityAreaHaveAllReplied(areaHandle: number): boolean {
        return Citizen.invokeNative('0x4DF7CFFF471A7FB1', areaHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A2D4E8BF4265B0F | Since: 323 | API-Set: unknown
     */
    export function entityAreaIsOccupied(areaHandle: number): boolean {
        return NetworkEntityAreaIsOccupied(areaHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x815F18AD865F057F | Since: 463 | API-Set: unknown
     */
    export function entityGetObjectId(entity: number | IEntity): number {
        return NetworkGetEntityNetScriptId(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95BAF97C82464629 | Since: 1604 | API-Set: unknown
     */
    export function entityUseHighPrecisionRotation(netId: number, toggle: boolean): void {
        Citizen.invokeNative('0x95BAF97C82464629', netId, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A5E0621DD815A9A | Since: 463 | API-Set: unknown
     */
    export function explodeHeli(vehicle: number | IVehicle, isAudible: boolean, isInvisible: boolean, netId: number): void {
        NetworkExplodeHeli(vehicle, isAudible, isInvisible, netId);
    }

    /**
     * In the console script dumps, this is only referenced once.
     * `NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);`
     *
     * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
     * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
     *
     * am_plane_takedown.c
     * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
     *
     * armenian2.c
     * network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
     *
     * fm_horde_controler.c
     * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
     *
     * fm_mission_controller.c, has 6 hits so not going to list them.
     *
     * Side note, setting the first parameter to 0 seems to mute sound or so?
     *
     * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
     *
     *
     * Hash: 0x301A42153C9AD707 | Since: 323 | API-Set: unknown
     */
    export function explodeVehicle(vehicle: number | IVehicle, isAudible: boolean, isInvisible: boolean, netId: number): boolean {
        return NetworkExplodeVehicle(vehicle, isAudible, isInvisible, netId);
    }

    /**
     * state - 0 does 5 fades
     * state - 1 does 6 fades
     *
     * p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
     *
     * Hash: 0x1F4ED342ACEFE62D | Since: 323 | API-Set: unknown
     */
    export function fadeInEntity(entity: number | IEntity, state: boolean): void {
        NetworkFadeInEntity(entity, state, undefined);
    }

    /**
     * normal - transition like when your coming out of LSC
     * slow - transition like when you walk into a mission
     *
     *
     * Hash: 0xDE564951F95E09ED | Since: 323 | API-Set: unknown
     */
    export function fadeOutEntity(entity: number | IEntity, normal: boolean, slow: boolean): void {
        NetworkFadeOutEntity(entity, normal, slow);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE532D6811B3A4D2A | Since: 323 | API-Set: unknown
     */
    export function findGamersInCrew(crewId: number): boolean {
        return NetworkFindGamersInCrew(crewId);
    }

    /**
     * p0 is always 0. p1 is pointing to a global.
     *
     * Hash: 0xFB1F9381E80FA13F | Since: 323 | API-Set: unknown
     */
    export function findLargestBunchOfPlayers(): boolean {
        return Citizen.invokeNative('0xFB1F9381E80FA13F', 0, undefined);
    }

    /**
     * Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
     * There can be up to 15 attributes, they are as follows:
     *
     * 0 = Races
     * 1 = Parachuting
     * 2 = Horde
     * 3 = Darts
     * 4 = Arm Wrestling
     * 5 = Tennis
     * 6 = Golf
     * 7 = Shooting Range
     * 8 = Deathmatch
     * 9 = MPPLY_MCMWIN/MPPLY_CRMISSION
     *
     * Hash: 0xF7B2CFDE5C9F700D | Since: 323 | API-Set: unknown
     */
    export function findMatchedGamers(attribute: number, fallbackLimit: number, lowerLimit: number, upperLimit: number): boolean {
        return NetworkFindMatchedGamers(attribute, fallbackLimit, lowerLimit, upperLimit);
    }

    /**
     * No comment provided
     *
     * Hash: 0x64F62AFB081E260D | Since: 323 | API-Set: unknown
     */
    export function finishBroadcastingData(): void {
        NetworkFinishBroadcastingData();
    }

    /**
     * NETWORK_F[I-O]
     *
     * Hash: 0xB7C7F6AD6424304B | Since: 323 | API-Set: unknown
     */
    export function forceLocalPlayerScarSync(): void {
        NetworkUpdatePlayerScars();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9B43A33D09CADA7 | Since: 323 | API-Set: unknown
     */
    export function forceLocalUseOfSyncedSceneCamera(netScene: number): void {
        NetworkForceLocalUseOfSyncedSceneCamera(netScene);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB071E27958EF4CF0 | Since: 323 | API-Set: unknown
     */
    export function gamertagFromHandlePending(): boolean {
        return NetworkGamertagFromHandlePending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F0C0A981D73FA56 | Since: 323 | API-Set: unknown
     */
    export function gamertagFromHandleStart(): [boolean, any] {
        return NetworkGamertagFromHandleStart();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD00798DBA7523DD | Since: 323 | API-Set: unknown
     */
    export function gamertagFromHandleSucceeded(): boolean {
        return NetworkGamertagFromHandleSucceeded();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2FD55CB574BCC55 | Since: 323 | API-Set: unknown
     */
    export function gamerHasHeadset(): [boolean, any] {
        return NetworkGamerHasHeadset();
    }

    /**
     * No comment provided
     *
     * Hash: 0x73E2B500410DA5A2 | Since: 323 | API-Set: unknown
     */
    export function getActivityPlayerNum(): number {
        return NetworkGetActivityPlayerNum(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9614B71F8ADB982B | Since: 323 | API-Set: unknown
     */
    export function getAgeGroup(): number {
        return NetworkGetAgeGroup();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4CACA84440FA26F6 | Since: 323 | API-Set: unknown
     */
    export function getAssistedDamageOfEntity(player: number | string | IPlayer, entity: number | IEntity): [boolean, number] {
        return NetworkGetDestroyerOfEntity(player, entity);
    }

    /**
     * NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
     *
     * Hash: 0x83660B734994124D | Since: 463 | API-Set: unknown
     */
    export function getAssistedKillOfEntity(player: number | string | IPlayer, entity: number | IEntity): [boolean, number] {
        return Citizen.invokeNative('0x83660B734994124D', player, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD414BE129BB81B32 | Since: 323 | API-Set: unknown
     */
    export function getAverageLatency(player: number | string | IPlayer): number {
        return NetworkGetAverageLatencyForPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x350C23949E43686C | Since: 323 | API-Set: unknown
     */
    export function getAveragePacketLoss(player: number | string | IPlayer): number {
        return NetworkGetAveragePacketLossForPlayer(player);
    }

    /**
     * Same as NETWORK_GET_AVERAGE_LATENCY
     *
     * Hash: 0x0E3A041ED6AC2B45 | Since: 323 | API-Set: unknown
     */
    export function getAveragePing(player: number | string | IPlayer): number {
        return NetworkGetAverageLatencyForPlayer2(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7DB53B37A2F211A0 | Since: 323 | API-Set: unknown
     */
    export function getBoneIdOfFatalHit(): number {
        return Citizen.invokeNative('0x7DB53B37A2F211A0');
    }

    /**
     * Return the content modifier id (the tunables context if you want) of a specific content.
     *
     * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
     *
     * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
     *
     * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
     *
     *
     * Hash: 0x187382F8A3E0A6C3 | Since: 323 | API-Set: unknown
     */
    export function getContentModifierListId(contentHash: number | string): number {
        if (typeof contentHash === 'string') contentHash = misc.getHashKey(contentHash)
        return NetworkGetContentModifierListId(contentHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x74881E6BCAE2327C | Since: 323 | API-Set: unknown
     */
    export function getCurrentlySelectedGamerHandleFromInviteMenu(): [boolean, any] {
        return NetworkGetCurrentlySelectedGamerHandleFromInviteMenu();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC434133D9BA52777 | Since: 463 | API-Set: unknown
     */
    export function getDestroyerOfEntity(entity: number | IEntity): [number | string, number] {
        return Citizen.invokeNative('0xC434133D9BA52777', entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A1ADEEF01740A24 | Since: 323 | API-Set: unknown
     */
    export function getDestroyerOfNetworkId(netId: number): [number | string, number] {
        return NetworkGetDestroyerOfNetworkId(netId);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x58CC181719256197 | Since: 323 | API-Set: unknown
     */
    export function getDisplaynamesFromHandles(): number {
        return NetworkGetDisplaynamesFromHandles(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCE4E5D9B0A4FF560 | Since: 323 | API-Set: unknown
     */
    export function getEntityFromNetworkId(netId: number): number {
        return NetworkGetEntityFromNetworkId(netId);
    }

    /**
     * I've had this return the player's ped handle sometimes, but also other random entities.
     * Whatever p0 is, it's at least not synced to other players.
     * At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
     * But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
     *
     * Returns an entity handle or -1, value changes based on p0's value.
     *
     * Hash: 0x37D5F739FD494675 | Since: 505 | API-Set: unknown
     */
    export function getEntityFromObjectId(): number {
        return Citizen.invokeNative('0x37D5F739FD494675', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0991549DE4D64762 | Since: 323 | API-Set: unknown
     */
    export function getEntityIsLocal(entity: number | IEntity): boolean {
        return NetworkGetEntityIsLocal(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7827959479DCC78 | Since: 323 | API-Set: unknown
     */
    export function getEntityIsNetworked(entity: number | IEntity): boolean {
        return NetworkGetEntityIsNetworked(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42B2DAA6B596F5F8 | Since: 323 | API-Set: unknown
     */
    export function getEntityKillerOfPlayer(player: number | string | IPlayer): [number, number] {
        return NetworkGetEntityKillerOfPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DCFF2AFB68B3476 | Since: 323 | API-Set: unknown
     */
    export function getFoundGamer(): [boolean, any] {
        return NetworkGetFoundGamer(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x203F1CFD823B27A4 | Since: 323 | API-Set: unknown
     */
    export function getFriendCount(): number {
        return NetworkGetFriendCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4164F227D052E293 | Since: 323 | API-Set: unknown
     */
    export function getFriendDisplayName(friendIndex: number): string {
        return NetworkGetFriendNameFromIndex(friendIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE11EBBB2A783FE8B | Since: 323 | API-Set: unknown
     */
    export function getFriendName(friendIndex: number): string {
        return NetworkGetFriendName(friendIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x426141162EBE5CDB | Since: 323 | API-Set: unknown
     */
    export function getGamertagFromHandle(): [string, any] {
        return NetworkGetGamertagFromHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CC848A861D01493 | Since: 323 | API-Set: unknown
     */
    export function getGamerStatusFromQueue(): boolean {
        return NetworkGetGamerStatusFromQueue();
    }

    /**
     * No comment provided
     *
     * Hash: 0x02A8BEC6FD9AF660 | Since: 323 | API-Set: unknown
     */
    export function getGamerStatusResult(): [boolean, any] {
        return NetworkGetGamerStatusResult(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C9034162368E206 | Since: 2060 | API-Set: unknown
     */
    export function getGameMode(): number {
        return Citizen.invokeNative('0x4C9034162368E206');
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D03BFBD643B2A02 | Since: 323 | API-Set: unknown
     */
    export function getGlobalMultiplayerClock(): [number, number, number] {
        return NetworkGetGlobalMultiplayerClock();
    }

    /**
     * No comment provided
     *
     * Hash: 0x52C1EADAF7B10302 | Since: 323 | API-Set: unknown
     */
    export function getHighestReliableResendCount(player: number | string | IPlayer): number {
        return NetworkGetOldestResendCountForPlayer(player);
    }

    /**
     * scriptName examples:
     * "freemode", "AM_CR_SecurityVan", ...
     *
     * Most of the time, these values are used:
     * instance_id = -1
     * position_hash = 0
     *
     * Hash: 0x1D6A14F1F9A736FC | Since: 323 | API-Set: unknown
     */
    export function getHostOfScript(scriptName: string, instance_id: number, position_hash: number): number | string {
        return NetworkGetHostOfScript(scriptName, instance_id, position_hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7B4D79B01FA7A5C | Since: 323 | API-Set: unknown
     */
    export function getHostOfThisScript(): number | string {
        return NetworkGetHostOfThisScript();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8251FB94DC4FDFC8 | Since: 2612 | API-Set: unknown
     */
    export function getHostPlayerIndex(): number | string {
        return Citizen.invokeNative('0x8251FB94DC4FDFC8');
    }

    /**
     * No comment provided
     *
     * Hash: 0x638A3A81733086DB | Since: 323 | API-Set: unknown
     */
    export function getInstanceIdOfThisScript(): number {
        return NetworkGetInstanceIdOfThisScript();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3855FB5EB2C5E8B2 | Since: 505 | API-Set: unknown
     */
    export function getInviteReplyStatus(): number {
        return Citizen.invokeNative('0x3855FB5EB2C5E8B2', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DA41ED6E1FCD7A5 | Since: 463 | API-Set: unknown
     */
    export function getKillerOfPlayer(player: number | string | IPlayer): [number | string, number] {
        return Citizen.invokeNative('0x2DA41ED6E1FCD7A5', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x64D779659BC37B19 | Since: 393 | API-Set: unknown
     */
    export function getLastEntityPosReceivedOverNetwork(entity: number | IEntity): Vector3 {
        return new Vector3(Citizen.invokeNative('0x64D779659BC37B19', entity));
    }

    /**
     * Returns the coordinates of another player.
     * Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
     *
     * Hash: 0x125E6D638B8605D4 | Since: 393 | API-Set: unknown
     */
    export function getLastPlayerPosReceivedOverNetwork(player: number | string | IPlayer): Vector3 {
        return new Vector3(NetworkGetPlayerCoords(player));
    }

    /**
     * Used by NetBlender
     *
     * Hash: 0x33DE49EDF4DDE77A | Since: 1103 | API-Set: unknown
     */
    export function getLastVelReceivedOverNetwork(entity: number | IEntity): Vector3 {
        return new Vector3(NetworkGetLastVelocityReceived(entity));
    }

    /**
     * No comment provided
     *
     * Hash: 0xE86051786B66CD8E | Since: 323 | API-Set: unknown
     */
    export function getLocalHandle(gamerHandleSize: number): any {
        return NetworkGetLocalHandle(gamerHandleSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02C40BF885C567B6 | Since: 323 | API-Set: unknown
     */
    export function getLocalSceneFromNetworkId(netId: number): number {
        return NetworkGetLocalSceneFromNetworkId(netId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFEBB0D5D8F687D2 | Since: 323 | API-Set: unknown
     */
    export function getMaxFriends(): number {
        return NetworkGetMaxFriends();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6C90FBC38E395EE | Since: 323 | API-Set: unknown
     */
    export function getMaxNumParticipants(): number {
        return NetworkGetMaxNumParticipants();
    }

    /**
     * NETWORK_GET_M[A-U]
     *
     * Hash: 0xADB57E5B663CCA8B | Since: 323 | API-Set: unknown
     */
    export function getMuteCountForPlayer(p0: number | string | IPlayer): [number, number] {
        return Citizen.invokeNative('0xADB57E5B663CCA8B', p0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA11700682F3AD45C | Since: 323 | API-Set: unknown
     */
    export function getNetworkIdFromEntity(entity: number | IEntity): number {
        return NetworkGetNetworkIdFromEntity(entity);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x6FD992C4A1C1B986 | Since: 323 | API-Set: unknown
     */
    export function getNetStatisticsInfo(): any {
        return Citizen.invokeNative('0x6FD992C4A1C1B986');
    }

    /**
     * Hardcoded to return zero.
     *
     * ==== PS4 specific info ====
     *
     * Returns some sort of unavailable reason:
     * -1 = REASON_INVALID
     * 0 = REASON_OTHER
     * 1 = REASON_SYSTEM_UPDATE
     * 2 = REASON_GAME_UPDATE
     * 3 = REASON_SIGNED_OUT
     * 4 = REASON_AGE
     * 5 = REASON_CONNECTION
     *
     * =================================
     *
     * Hash: 0x74FB3E29E6D10FA9 | Since: 323 | API-Set: unknown
     */
    export function getNpUnavailableReason(): number {
        return Citizen.invokeNative('0x74FB3E29E6D10FA9');
    }

    /**
     * No comment provided
     *
     * Hash: 0xD38C4A6D047C019D | Since: 323 | API-Set: unknown
     */
    export function getNumberBodyTrackerHits(): number {
        return NetworkGetNumBodyTrackers();
    }

    /**
     * Returns the amount of players connected in the current session. Only works when connected to a session/server.
     *
     * Hash: 0xA4A79DD2D9600654 | Since: 323 | API-Set: unknown
     */
    export function getNumConnectedPlayers(): number {
        return NetworkGetNumConnectedPlayers();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1B043EE79A916FB | Since: 323 | API-Set: unknown
     */
    export function getNumFoundGamers(): number {
        return NetworkGetNumFoundGamers();
    }

    /**
     * No comment provided
     *
     * Hash: 0x18D0456E86604654 | Since: 323 | API-Set: unknown
     */
    export function getNumParticipants(): number {
        return NetworkGetNumParticipants();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEFA968912D0F78D | Since: 323 | API-Set: unknown
     */
    export function getNumPresenceInvites(): number {
        return NetworkGetNumPresenceInvites();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3658E8CD94FC121A | Since: 323 | API-Set: unknown
     */
    export function getNumScriptParticipants(scriptName: string, instance_id: number, position_hash: number): number {
        return NetworkGetNumScriptParticipants(scriptName, instance_id, position_hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x617F49C2668E6155 | Since: 757 | API-Set: unknown
     */
    export function getNumTransitionNonAsyncGamers(): number {
        return Citizen.invokeNative('0x617F49C2668E6155');
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF8FCF9FFC458A1C | Since: 323 | API-Set: unknown
     */
    export function getNumUnackedReliables(player: number | string | IPlayer): number {
        return NetworkGetNumUnackedForPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B84DF6AF2A46938 | Since: 323 | API-Set: unknown
     */
    export function getParticipantIndex(index: number): number {
        return NetworkGetParticipantIndex(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x120364DE2845DAF8 | Since: 323 | API-Set: unknown
     */
    export function getPlatformPartyMembers(dataSize: number): [number, any] {
        return NetworkGetPlatformPartyMembers(dataSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01ABCE5E7CBDA196 | Since: 323 | API-Set: unknown
     */
    export function getPlatformPartyMemberCount(): number {
        return NetworkGetPlatformPartyUnk();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB663CC9FF3407A9 | Since: 1734 | API-Set: unknown
     */
    export function getPlayerAccountId(player: number | string | IPlayer): number {
        return Citizen.invokeNative('0xDB663CC9FF3407A9', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCE5F689CF5A0A49D | Since: 323 | API-Set: unknown
     */
    export function getPlayerFromGamerHandle(): [number | string, any] {
        return NetworkGetPlayerFromGamerHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x24FB80D107371267 | Since: 323 | API-Set: unknown
     */
    export function getPlayerIndex(player: number | string | IPlayer): number | string {
        return NetworkGetPlayerIndex(player);
    }

    /**
     * Returns the Player associated to a given Ped when in an online session.
     *
     * Hash: 0x6C0E2E0125610278 | Since: 323 | API-Set: unknown
     */
    export function getPlayerIndexFromPed(ped: number | IPed): number | string {
        return NetworkGetPlayerIndexFromPed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x21A1684A25C2867F | Since: 323 | API-Set: unknown
     */
    export function getPlayerLoudness(player: number | string | IPlayer): number {
        return NetworkGetPlayerLoudness(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82377B65E943F72D | Since: 323 | API-Set: unknown
     */
    export function getPlayerOwnsWaypoint(player: number | string | IPlayer): boolean {
        return NetworkGetPlayerOwnsWaypoint(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3B39236746714134 | Since: 323 | API-Set: unknown
     */
    export function getPlayerTutorialSessionInstance(player: number | string | IPlayer): number {
        return NetworkGetPlayerTutorialSessionInstance(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x257ED0FADF750BCF | Since: 2372 | API-Set: unknown
     */
    export function getPositionHashOfThisScript(): number {
        return NetworkGetPositionHashOfThisScript();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA5FAFCD2C5F5E47 | Since: 1103 | API-Set: unknown
     */
    export function getPredictedVelocity(entity: number | IEntity, maxSpeedToPredict: number): Vector3 {
        return new Vector3(Citizen.invokeNative('0xAA5FAFCD2C5F5E47', entity, maxSpeedToPredict));
    }

    /**
     * No comment provided
     *
     * Hash: 0x24409FC4C55CB22D | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteContentId(): string {
        return NetworkGetPresenceInviteContentId(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DBF2DF0AEB7D289 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteFromAdmin(): boolean {
        return NetworkGetPresenceInviteFromAdmin(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x38D5B0FEBB086F75 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteHandle(): [boolean, any] {
        return NetworkGetPresenceInviteHandle(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFF09646E12EC386 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteId(): number {
        return NetworkGetPresenceInviteId(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x742B58F723233ED9 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteIndexById(): number {
        return Citizen.invokeNative('0x742B58F723233ED9', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4962CC4AA2F345B7 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteInviter(): string {
        return NetworkGetPresenceInviteInviter(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8806CEBFABD3CE05 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteIsTournament(): boolean {
        return NetworkGetPresenceInviteIsTournament(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x728C4CC7920CD102 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInvitePlaylistCurrent(): number {
        return NetworkGetPresenceInvitePlaylistCurrent(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD39B3FFF8FFDD5BF | Since: 323 | API-Set: unknown
     */
    export function getPresenceInvitePlaylistLength(): number {
        return NetworkGetPresenceInvitePlaylistLength(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x26E1CD96B0903D60 | Since: 323 | API-Set: unknown
     */
    export function getPresenceInviteSessionId(): number {
        return NetworkGetPresenceInviteSessionId(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x042E4B70B93E6054 | Since: 323 | API-Set: unknown
     */
    export function getPrimaryClanDataCancel(): void {
        NetworkGetPrimaryClanDataCancel();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AA46BADAD0E27ED | Since: 323 | API-Set: unknown
     */
    export function getPrimaryClanDataClear(): boolean {
        return NetworkGetPrimaryClanDataClear();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC080FF658B2E41DA | Since: 323 | API-Set: unknown
     */
    export function getPrimaryClanDataNew(): [boolean, any, any] {
        return NetworkGetPrimaryClanDataNew();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB5074DB804E28CE7 | Since: 323 | API-Set: unknown
     */
    export function getPrimaryClanDataPending(): boolean {
        return NetworkGetPrimaryClanDataPending();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCE86D8191B762107 | Since: 323 | API-Set: unknown
     */
    export function getPrimaryClanDataStart(): [boolean, any] {
        return NetworkGetPrimaryClanDataStart(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B4F04F19376A0BA | Since: 323 | API-Set: unknown
     */
    export function getPrimaryClanDataSuccess(): boolean {
        return NetworkGetPrimaryClanDataSuccess();
    }

    /**
     * No comment provided
     *
     * Hash: 0x599E4FA1F87EB5FF | Since: 323 | API-Set: unknown
     */
    export function getRandomInt(): number {
        return NetworkGetRandomInt();
    }

    /**
     * Same as GET_RANDOM_INT_IN_RANGE
     *
     * Hash: 0xE30CF56F1EFA5F43 | Since: 323 | API-Set: unknown
     */
    export function getRandomIntRanged(rangeStart: number, rangeEnd: number): number {
        return NetworkGetRandomIntRanged(rangeStart, rangeEnd);
    }

    /**
     * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
     *
     * Hash: 0x371EA43692861CF1 | Since: 323 | API-Set: unknown
     */
    export function getRespawnResult(randomInt: number): [Vector3, number] {
        return NetworkGetRespawnResult(randomInt);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6C34F1208B8923FD | Since: 323 | API-Set: unknown
     */
    export function getRespawnResultFlags(): number {
        return NetworkGetRespawnResultFlags(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57D158647A6BFABF | Since: 323 | API-Set: unknown
     */
    export function getScriptStatus(): number {
        return NetworkGetScriptStatus();
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x2555CF7DA5473794 | Since: 323 | API-Set: unknown
     */
    export function getSignallingInfo(): any {
        return Citizen.invokeNative('0x2555CF7DA5473794');
    }

    /**
     * No comment provided
     *
     * Hash: 0x84F0F13120B4E098 | Since: 323 | API-Set: unknown
     */
    export function getTalkerProximity(): number {
        return NetworkGetTalkerProximity();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2910669969E9535E | Since: 323 | API-Set: unknown
     */
    export function getThisScriptIsNetworkScript(): boolean {
        return NetworkGetThisScriptIsNetworkScript();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5ED0356A0CE3A34F | Since: 323 | API-Set: unknown
     */
    export function getTimeoutTime(): number {
        return NetworkGetTimeoutTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF61D4B4702EE9EB | Since: 323 | API-Set: unknown
     */
    export function getTotalNumPlayers(): number {
        return NetworkGetTotalNumPlayers();
    }

    /**
     * No comment provided
     *
     * Hash: 0x65042B9774C4435E | Since: 323 | API-Set: unknown
     */
    export function getTransitionHost(): [boolean, any] {
        return NetworkGetTransitionHost();
    }

    /**
     * Returns count.
     *
     * Hash: 0x73B000F7FBC55829 | Since: 323 | API-Set: unknown
     */
    export function getTransitionMembers(dataCount: number): [number, any] {
        return NetworkGetTransitionMembers(dataCount);
    }

    /**
     * Actually returns the version (TUNABLE_VERSION)
     *
     * Hash: 0x10BD227A753B0D84 | Since: 323 | API-Set: unknown
     */
    export function getTunableCloudCrc(): number {
        return NetworkGetTunableCloudCrc();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3765C3A3E8192E10 | Since: 323 | API-Set: unknown
     */
    export function getUnreliableResendCount(player: number | string | IPlayer): number {
        return NetworkGetUnreliableResendCountForPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD45CB817D7E177D2 | Since: 323 | API-Set: unknown
     */
    export function handleFromFriend(friendIndex: number, gamerHandleSize: number): any {
        return NetworkHandleFromFriend(friendIndex, gamerHandleSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0FD21BED61E5C4C | Since: 323 | API-Set: unknown
     */
    export function handleFromMemberId(memberId: string, gamerHandleSize: number): any {
        return NetworkHandleFromMemberId(memberId, gamerHandleSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0x388EB2B86C73B6B3 | Since: 323 | API-Set: unknown
     */
    export function handleFromPlayer(player: number | string | IPlayer, gamerHandleSize: number): any {
        return NetworkHandleFromPlayer(player, gamerHandleSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCD51DD8F87AEC5C | Since: 323 | API-Set: unknown
     */
    export function handleFromUserId(userId: string, gamerHandleSize: number): any {
        return NetworkHandleFromUserId(userId, gamerHandleSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58575AC3CF2CA8EC | Since: 323 | API-Set: unknown
     */
    export function hashFromGamerHandle(): [number, any] {
        return NetworkHashFromGamerHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC1D768F2F5D6C05 | Since: 323 | API-Set: unknown
     */
    export function hashFromPlayerHandle(player: number | string | IPlayer): number {
        return NetworkHashFromPlayerHandle(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1353F87E89946207 | Since: 323 | API-Set: unknown
     */
    export function hasAgeRestrictions(): boolean {
        return NetworkHasAgeRestrictedProfile();
    }

    /**
     * No comment provided
     *
     * Hash: 0x26F07DD83A5F7F98 | Since: 323 | API-Set: unknown
     */
    export function hasAutomuteOverride(): boolean {
        return Citizen.invokeNative('0x26F07DD83A5F7F98');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E0BF682CC778D49 | Since: 323 | API-Set: unknown
     */
    export function hasBoneBeenHitByKiller(boneIndex: number): boolean {
        return Citizen.invokeNative('0x2E0BF682CC778D49', boneIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x237D5336A9A54108 | Since: 323 | API-Set: unknown
     */
    export function hasCachedPlayerHeadBlendData(player: number | string | IPlayer): boolean {
        return NetworkHasCachedPlayerHeadBlendData(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC42DD763159F3461 | Since: 323 | API-Set: unknown
     */
    export function hasConfirmedInvite(): boolean {
        return Citizen.invokeNative('0xC42DD763159F3461');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB3C68ADB06195DF | Since: 323 | API-Set: unknown
     */
    export function hasControlOfDoor(doorHash: number | string): boolean {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return NetworkHasControlOfDoor(doorHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01BF60A500E28887 | Since: 323 | API-Set: unknown
     */
    export function hasControlOfEntity(entity: number | IEntity): boolean {
        return NetworkHasControlOfEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D36070FE0215186 | Since: 323 | API-Set: unknown
     */
    export function hasControlOfNetworkId(netId: number): boolean {
        return NetworkHasControlOfNetworkId(netId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BC9495F0B3B6FA6 | Since: 323 | API-Set: unknown
     */
    export function hasControlOfPickup(pickup: any): boolean {
        return NetworkHasControlOfPickup(pickup);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB07D3185E11657A5 | Since: 323 | API-Set: unknown
     */
    export function hasEntityBeenRegisteredWithThisThread(entity: number | IEntity): boolean {
        return NetworkHasEntityBeenRegisteredWithThisThread(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x76D9B976C4C09FDE | Since: 323 | API-Set: unknown
     */
    export function hasFollowInvite(): boolean {
        return NetworkHasFollowInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE870F9F1F7B4F1FA | Since: 323 | API-Set: unknown
     */
    export function hasHeadset(): boolean {
        return NetworkHasHeadset();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D86CD31E8976ECE | Since: 323 | API-Set: unknown
     */
    export function hasInvitedGamer(): [boolean, any] {
        return NetworkHasInvitedGamer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7284A47B3540E6CF | Since: 323 | API-Set: unknown
     */
    export function hasInvitedGamerToTransition(): [boolean, any] {
        return NetworkHasInvitedGamerToTransition();
    }

    /**
     * No comment provided
     *
     * Hash: 0x71DC455F5CD1C2B1 | Since: 505 | API-Set: unknown
     */
    export function hasMadeInviteDecision(): [boolean, any] {
        return NetworkHasInviteBeenAcked();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC8C7B9B88C4A668 | Since: 323 | API-Set: unknown
     */
    export function hasPendingInvite(): boolean {
        return NetworkHasPendingInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AC9CCBFA8C29795 | Since: 323 | API-Set: unknown
     */
    export function hasPlayerStartedTransition(player: number | string | IPlayer): boolean {
        return NetworkHasPlayerStartedTransition(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D10B3795F3FC886 | Since: 323 | API-Set: unknown
     */
    export function hasReceivedHostBroadcastData(): boolean {
        return NetworkHasReceivedHostBroadcastData();
    }

    /**
     * index is always 18 in scripts
     *
     * Hash: 0xA699957E60D80214 | Since: 323 | API-Set: unknown
     */
    export function hasRosPrivilege(index: number): boolean {
        return NetworkHasRosPrivilege(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC22912B1D85F26B1 | Since: 323 | API-Set: unknown
     */
    export function hasRosPrivilegeEndDate(privilege: number): [boolean, number, any] {
        return NetworkHasRosPrivilegeEndDate(privilege);
    }

    /**
     * No comment provided
     *
     * Hash: 0x593570C289A77688 | Since: 323 | API-Set: unknown
     */
    export function hasRosPrivilegePlayedLastGen(): boolean {
        return NetworkGetRosPrivilege24();
    }

    /**
     * No comment provided
     *
     * Hash: 0x91B87C55093DE351 | Since: 323 | API-Set: unknown
     */
    export function hasRosPrivilegeSpecialEditionContent(): boolean {
        return NetworkGetRosPrivilege25();
    }

    /**
     * No comment provided
     *
     * Hash: 0x67A5589628E0CFF6 | Since: 323 | API-Set: unknown
     */
    export function hasSocialClubAccount(): boolean {
        return NetworkHasSocialClubAccount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x76BF03FADBF154F5 | Since: 323 | API-Set: unknown
     */
    export function hasSocialNetworkingSharingPriv(): boolean {
        return NetworkHasSocialNetworkingSharingPriv();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F9990BF5F22759C | Since: 323 | API-Set: unknown
     */
    export function hasTransitionInviteBeenAcked(): [boolean, any] {
        return NetworkHasTransitionInviteBeenAcked();
    }

    /**
     * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
     *
     * Hash: 0x85443FF4C328F53B | Since: 323 | API-Set: unknown
     */
    export function hasValidRosCredentials(): boolean {
        return NetworkHasValidRosCredentials();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCA4318E1AB03F1F | Since: 323 | API-Set: unknown
     */
    export function hasViewGamerUserContentResult(): [boolean, any] {
        return NetworkHasViewGamerUserContentResult();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAEEF48CDF5B6CE7C | Since: 323 | API-Set: unknown
     */
    export function haveCommunicationPrivileges(player: number | string | IPlayer): boolean {
        return NetworkHaveCommunicationPrivileges(0, player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25CB5A9F37BFD063 | Since: 323 | API-Set: unknown
     */
    export function haveOnlinePrivileges(): boolean {
        return NetworkHaveOnlinePrivileges();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5EA784D197556507 | Since: 323 | API-Set: unknown
     */
    export function havePlatformSubscription(): boolean {
        return NetworkHaveOnlinePrivilege2();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8020A73847E0CA7D | Since: 323 | API-Set: unknown
     */
    export function haveRosBannedPriv(): boolean {
        return NetworkHaveRosBannedPriv();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0AD7E2AF5349F61 | Since: 323 | API-Set: unknown
     */
    export function haveRosCreateTicketPriv(): boolean {
        return NetworkHaveRosCreateTicketPriv();
    }

    /**
     * No comment provided
     *
     * Hash: 0x422D396F80A96547 | Since: 323 | API-Set: unknown
     */
    export function haveRosLeaderboardWritePriv(): boolean {
        return NetworkHaveRosLeaderboardWritePriv();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F91D5D0B36AA310 | Since: 323 | API-Set: unknown
     */
    export function haveRosMultiplayerPriv(): boolean {
        return NetworkHaveRosMultiplayerPriv();
    }

    /**
     * No comment provided
     *
     * Hash: 0x606E4D3E3CCCF3EB | Since: 323 | API-Set: unknown
     */
    export function haveRosSocialClubPriv(): boolean {
        return NetworkHaveRosSocialClubPriv();
    }

    /**
     * No comment provided
     *
     * Hash: 0x66B59CFFD78467AF | Since: 323 | API-Set: unknown
     */
    export function haveScsPrivateMsgPriv(): boolean {
        return NetworkGetRosPrivilege9();
    }

    /**
     * No comment provided
     *
     * Hash: 0x72D918C99BCACC54 | Since: 323 | API-Set: unknown
     */
    export function haveUserContentPrivileges(): boolean {
        return NetworkHaveUserContentPrivileges(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAC18E7356BD3210 | Since: 1180 | API-Set: unknown
     */
    export function hideProjectileInCutscene(): void {
        Citizen.invokeNative('0xFAC18E7356BD3210');
    }

    /**
     * p0: Unknown int
     * p1: Unknown int
     * p2: Unknown int
     * p3: Unknown int
     * p4: Unknown always 0 in decompiled scripts
     * p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
     * p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
     * p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
     * p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
     * p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?
     *
     * From what I can tell it looks like it does the following:
     * Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
     * You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
     *
     * Hash: 0xA60BB5CE242BB254 | Since: 323 | API-Set: unknown
     */
    export function hostTransition(): boolean {
        return NetworkHostTransition(0, 0, 0, 0, undefined, false, false, 0, undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C2A9FDC22377075 | Since: 372 | API-Set: unknown
     */
    export function ignoreRemoteWaypoints(): void {
        Citizen.invokeNative('0x4C2A9FDC22377075');
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D80CD1D0E6327DE | Since: 323 | API-Set: unknown
     */
    export function inviteGamers(): [boolean, any, any] {
        return NetworkInviteGamers(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A595C32F77DFF76 | Since: 323 | API-Set: unknown
     */
    export function inviteGamersToTransition(): [boolean, any] {
        return NetworkInviteGamersToTransition(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x05095437424397FA | Since: 323 | API-Set: unknown
     */
    export function isActivitySession(): boolean {
        return NetworkIsActivitySession();
    }

    /**
     * No comment provided
     *
     * Hash: 0x12103B9E0C9F92FB | Since: 323 | API-Set: unknown
     */
    export function isActivitySpectator(): boolean {
        return NetworkIsActivitySpectator();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2763BBAA72A7BCB9 | Since: 323 | API-Set: unknown
     */
    export function isActivitySpectatorFromHandle(): [boolean, any] {
        return NetworkIsActivitySpectatorFromHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6EA101606F6E4D81 | Since: 323 | API-Set: unknown
     */
    export function isAddingFriend(): boolean {
        return NetworkIsAddingFriend();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E4C123D1C8A710E | Since: 505 | API-Set: unknown
     */
    export function isAnyPlayerNear(): boolean {
        return Citizen.invokeNative('0x2E4C123D1C8A710E', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEFFB25453D8600F9 | Since: 323 | API-Set: unknown
     */
    export function isCableConnected(): boolean {
        return NetworkIsCableConnected();
    }

    /**
     * This would be nice to see if someone is in party chat, but 2 sad notes.
     * 1) It only becomes true if said person is speaking in that party at the time.
     * 2) It will never, become true unless you are in that party with said person.
     *
     * Hash: 0x8DE9945BCC9AEC52 | Since: 323 | API-Set: unknown
     */
    export function isChattingInPlatformParty(): [boolean, any] {
        return NetworkIsChattingInPlatformParty();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD7C95D322FF57522 | Since: 323 | API-Set: unknown
     */
    export function isClockTimeOverridden(): boolean {
        return NetworkIsClockTimeOverridden();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A4CF4F48AD77302 | Since: 323 | API-Set: unknown
     */
    export function isCloudAvailable(): boolean {
        return NetworkIsCloudAvailable();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8132C0EB8B2B3293 | Since: 323 | API-Set: unknown
     */
    export function isCloudBackgroundScriptRequestPending(): boolean {
        return NetworkIsCloudBackgroundScriptRequestPending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x16D3D49902F697BB | Since: 323 | API-Set: unknown
     */
    export function isConnectedViaRelay(player: number | string | IPlayer): boolean {
        return NetworkIsConnectionEndpointRelayServer(player);
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x7808619F31FF22DB | Since: 323 | API-Set: unknown
     */
    export function isConnetedToNpPresence(): boolean {
        return Citizen.invokeNative('0x7808619F31FF22DB');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC01E93FAC20C3346 | Since: 323 | API-Set: unknown
     */
    export function isDoorNetworked(doorHash: number | string): boolean {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return NetworkIsDoorNetworked(doorHash);
    }

    /**
     * Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
     *
     * Hash: 0x71302EC70689052A | Since: 877 | API-Set: unknown
     */
    export function isEntityConcealed(entity: number | IEntity): boolean {
        return NetworkIsEntityConcealed(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x422F32CC7E56ABAD | Since: 323 | API-Set: unknown
     */
    export function isEntityFading(entity: number | IEntity): boolean {
        return NetworkIsEntityFading(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDDDF64C91BFCF0AA | Since: 323 | API-Set: unknown
     */
    export function isFindingGamers(): boolean {
        return NetworkIsFindingGamers();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A24A179F9B31654 | Since: 323 | API-Set: unknown
     */
    export function isFriend(): [boolean, any] {
        return NetworkIsFriend();
    }

    /**
     * No comment provided
     *
     * Hash: 0x87EB7A3FFCB314DB | Since: 323 | API-Set: unknown
     */
    export function isFriendHandleOnline(): [boolean, any] {
        return NetworkIsFriendHandleOnline();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAD8F2A42B844821 | Since: 323 | API-Set: unknown
     */
    export function isFriendIndexOnline(friendIndex: number): boolean {
        return NetworkIsFriendIndexOnline(friendIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57005C18827F3A28 | Since: 323 | API-Set: unknown
     */
    export function isFriendInMultiplayer(friendName: string): boolean {
        return NetworkIsFriendInMultiplayer(friendName);
    }

    /**
     * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
     *
     * Hash: 0x2EA9A3BEDF3F17B8 | Since: 323 | API-Set: unknown
     */
    export function isFriendInSameTitle(friendName: string): boolean {
        return NetworkIsFriendInSameTitle(friendName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x425A44533437B64D | Since: 323 | API-Set: unknown
     */
    export function isFriendOnline(name: string): boolean {
        return NetworkIsFriendOnline(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE944C4F5AF1B5883 | Since: 323 | API-Set: unknown
     */
    export function isGamerBlockedByMe(): [boolean, any] {
        return NetworkIsGamerBlockedByMe();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F10B05DDF8D16E9 | Since: 323 | API-Set: unknown
     */
    export function isGamerInMySession(): [boolean, any] {
        return NetworkIsGamerInMySession();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCE60DE011B6C7978 | Since: 323 | API-Set: unknown
     */
    export function isGamerMutedByMe(): [boolean, any] {
        return NetworkIsGamerMutedByMe();
    }

    /**
     * No comment provided
     *
     * Hash: 0x71C33B22606CD88A | Since: 323 | API-Set: unknown
     */
    export function isGamerTalking(): [boolean, any] {
        return NetworkIsGamerTalking();
    }

    /**
     * No comment provided
     *
     * Hash: 0x10FAB35428CCC9D7 | Since: 323 | API-Set: unknown
     */
    export function isGameInProgress(): boolean {
        return NetworkIsGameInProgress();
    }

    /**
     * No comment provided
     *
     * Hash: 0x94A8394D150B013A | Since: 323 | API-Set: unknown
     */
    export function isGettingGamerStatus(): boolean {
        return NetworkIsGettingGamerStatus();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F79B93B0A8E4133 | Since: 323 | API-Set: unknown
     */
    export function isHandleValid(gamerHandleSize: number): [boolean, any] {
        return NetworkIsHandleValid(gamerHandleSize);
    }

    /**
     * If you are host, returns true else returns false.
     *
     * Hash: 0x8DB296B814EDDA07 | Since: 323 | API-Set: unknown
     */
    export function isHost(): boolean {
        return NetworkIsHost();
    }

    /**
     * No comment provided
     *
     * Hash: 0x83CD99A1E6061AB5 | Since: 323 | API-Set: unknown
     */
    export function isHostOfThisScript(): boolean {
        return NetworkIsHostOfThisScript();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E58745504313A2E | Since: 323 | API-Set: unknown
     */
    export function isInactiveProfile(): [boolean, any] {
        return NetworkIsInactiveProfile();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6CC27C9FA2040220 | Since: 323 | API-Set: unknown
     */
    export function isInMpCutscene(): boolean {
        return NetworkIsInMpCutscene();
    }

    /**
     * Hardcoded to return false.
     *
     * Hash: 0x2FC5650B0271CB57 | Since: 323 | API-Set: unknown
     */
    export function isInPlatformParty(): boolean {
        return NetworkIsInPlatformParty();
    }

    /**
     * Hardcoded to return false.
     *
     * Hash: 0xFD8B834A8BA05048 | Since: 323 | API-Set: unknown
     */
    export function isInPlatformPartyChat(): boolean {
        return NetworkIsInPlatformPartyChat();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA97246103B63917 | Since: 323 | API-Set: unknown
     */
    export function isInSession(): boolean {
        return NetworkIsInSession();
    }

    /**
     * No comment provided
     *
     * Hash: 0x048746E388762E11 | Since: 323 | API-Set: unknown
     */
    export function isInSpectatorMode(): boolean {
        return NetworkIsInSpectatorMode();
    }

    /**
     * No comment provided
     *
     * Hash: 0x68049AEFF83D8F0A | Since: 323 | API-Set: unknown
     */
    export function isInTransition(): boolean {
        return NetworkIsInTransition();
    }

    /**
     * No comment provided
     *
     * Hash: 0xADA24309FE08DACF | Since: 323 | API-Set: unknown
     */
    export function isInTutorialSession(): boolean {
        return NetworkIsInTutorialSession();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A8694B48715B000 | Since: 323 | API-Set: unknown
     */
    export function isLocalPlayerInvincible(): boolean {
        return NetworkIsLocalPlayerInvincible();
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xA0FA4EC6A05DA44E | Since: 323 | API-Set: unknown
     */
    export function isLoggedInToPsn(): boolean {
        return Citizen.invokeNative('0xA0FA4EC6A05DA44E');
    }

    /**
     * No comment provided
     *
     * Hash: 0x9747292807126EDA | Since: 323 | API-Set: unknown
     */
    export function isMultiplayerDisabled(): boolean {
        return NetworkIsMultiplayerDisabled();
    }

    /**
     * Returns true if the specified network id is controlled by someone else.
     *
     * Hash: 0x7242F8B741CE1086 | Since: 678 | API-Set: unknown
     */
    export function isNetworkIdRemotelyControlled(netId: number): boolean {
        return NetworkIsNetworkIdAClone(netId);
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xBD545D44CCE70597 | Since: 323 | API-Set: unknown
     */
    export function isNpAvailable(): boolean {
        return Citizen.invokeNative('0xBD545D44CCE70597');
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xEBCAB9E5048434F4 | Since: 323 | API-Set: unknown
     */
    export function isNpPending(): boolean {
        return Citizen.invokeNative('0xEBCAB9E5048434F4');
    }

    /**
     * No comment provided
     *
     * Hash: 0x74698374C45701D2 | Since: 323 | API-Set: unknown
     */
    export function isOfflineInvitePending(): boolean {
        return NetworkIsOfflineInvitePending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6FF8FF40B6357D45 | Since: 323 | API-Set: unknown
     */
    export function isParticipantActive(): boolean {
        return NetworkIsParticipantActive(0);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x0BE73DA6984A6E33 | Since: 323 | API-Set: unknown
     */
    export function isPendingFriend(): boolean {
        return NetworkIsPendingFriend(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8ACB6459542A8C8 | Since: 323 | API-Set: unknown
     */
    export function isPlatformSubscriptionCheckPending(): boolean {
        return Citizen.invokeNative('0xA8ACB6459542A8C8');
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8DFD30D6973E135 | Since: 323 | API-Set: unknown
     */
    export function isPlayerActive(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerActive(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3CA58F6CB7CBD784 | Since: 323 | API-Set: unknown
     */
    export function isPlayerAParticipant(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerAParticipant(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1AD5B71586B94820 | Since: 323 | API-Set: unknown
     */
    export function isPlayerAParticipantOnScript(player: number | string | IPlayer, script: string, instance_id: number): boolean {
        return NetworkIsPlayerAParticipantOnScript(player, script, instance_id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57AF1F8E27483721 | Since: 323 | API-Set: unknown
     */
    export function isPlayerBlockedByMe(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerBlockedByMe(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x919B3C98ED8292F9 | Since: 323 | API-Set: unknown
     */
    export function isPlayerConcealed(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerConcealed(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x93DC1BE4E1ABE9D1 | Since: 323 | API-Set: unknown
     */
    export function isPlayerConnected(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerConnected(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x631DC5DFF4B110E3 | Since: 323 | API-Set: unknown
     */
    export function isPlayerFading(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerFading(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x63F9EE203C3619F2 | Since: 323 | API-Set: unknown
     */
    export function isPlayerInMpCutscene(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerInMpCutscene(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C71288AE68EDE39 | Since: 323 | API-Set: unknown
     */
    export function isPlayerMutedByMe(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerMutedByMe(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAD4326FCA30D62F8 | Since: 2802 | API-Set: unknown
     */
    export function isPlayerOnBlocklist(): [boolean, any] {
        return Citizen.invokeNative('0xAD4326FCA30D62F8');
    }

    /**
     * returns true if someone is screaming or talking in a microphone
     *
     * Hash: 0x031E11F3D447647E | Since: 323 | API-Set: unknown
     */
    export function isPlayerTalking(player: number | string | IPlayer): boolean {
        return NetworkIsPlayerTalking(player);
    }

    /**
     * Hardcoded to return false.
     *
     * Hash: 0x64E5C4CC82847B73 | Since: 1734 | API-Set: unknown
     */
    export function isPrivilegeCheckInProgress(): boolean {
        return Citizen.invokeNative('0x64E5C4CC82847B73');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC0D2AF00BCC234CA | Since: 323 | API-Set: unknown
     */
    export function isPushToTalkActive(): boolean {
        return NetworkIsLocalTalking();
    }

    /**
     * No comment provided
     *
     * Hash: 0x14922ED3E38761F0 | Since: 323 | API-Set: unknown
     */
    export function isQueuingForSessionJoin(): boolean {
        return Citizen.invokeNative('0x14922ED3E38761F0');
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D11E61A4ABF49CC | Since: 323 | API-Set: unknown
     */
    export function isRefreshingRosCredentials(): boolean {
        return NetworkIsPsnAvailable();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D40DF90FAD26098 | Since: 323 | API-Set: unknown
     */
    export function isScriptActive(scriptName: string, instance_id: number, position_hash: number): boolean {
        return NetworkIsScriptActive(scriptName, instance_id, false, position_hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA7DE67F5FE5EE13 | Since: 2245 | API-Set: unknown
     */
    export function isScriptActiveByHash(scriptHash: number | string): boolean {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        return NetworkIsScriptActiveByHash(scriptHash, 0, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD83C2B94E7508980 | Since: 323 | API-Set: unknown
     */
    export function isSessionActive(): boolean {
        return NetworkIsSessionActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF4435D66A8E2905E | Since: 323 | API-Set: unknown
     */
    export function isSessionBusy(): boolean {
        return NetworkIsSessionBusy();
    }

    /**
     * This checks if player is playing on gta online or not.
     * Please add an if and block your mod if this is "true".
     *
     * Hash: 0x9DE624D2FC4B603F | Since: 323 | API-Set: unknown
     */
    export function isSessionStarted(): boolean {
        return NetworkIsSessionStarted();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7788DFE15016A182 | Since: 2612 | API-Set: unknown
     */
    export function isShowingSystemUiOrRecentlyRequestedUpsell(): boolean {
        return Citizen.invokeNative('0x7788DFE15016A182');
    }

    /**
     * Returns whether the player is signed into Social Club.
     *
     * Hash: 0x054354A99211EB96 | Since: 323 | API-Set: unknown
     */
    export function isSignedIn(): boolean {
        return NetworkIsSignedIn();
    }

    /**
     * Returns whether the game is not in offline mode.
     *
     * seemed not to work for some ppl
     *
     * Hash: 0x1077788E268557C2 | Since: 323 | API-Set: unknown
     */
    export function isSignedOnline(): boolean {
        return NetworkIsSignedOnline();
    }

    /**
     * No comment provided
     *
     * Hash: 0x560B423D73015E77 | Since: 1604 | API-Set: unknown
     */
    export function isThreadANetworkScript(threadId: number): boolean {
        return Citizen.invokeNative('0x560B423D73015E77', threadId);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x6FB7BB3607D27FA2 | Since: 323 | API-Set: unknown
     */
    export function isTitleUpdateRequired(): boolean {
        return Citizen.invokeNative('0x6FB7BB3607D27FA2');
    }

    /**
     * No comment provided
     *
     * Hash: 0x520F3282A53D26B7 | Since: 323 | API-Set: unknown
     */
    export function isTransitionBusy(): boolean {
        return NetworkIsTransitionBusy();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0DBD5D7E3C5BEC3B | Since: 323 | API-Set: unknown
     */
    export function isTransitionClosedCrew(): boolean {
        return NetworkIsTransitionClosedCrew();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6512765E3BE78C50 | Since: 323 | API-Set: unknown
     */
    export function isTransitionClosedFriends(): boolean {
        return NetworkIsTransitionClosedFriends();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B824797C9BF2159 | Since: 323 | API-Set: unknown
     */
    export function isTransitionHost(): boolean {
        return NetworkIsTransitionHost();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B5C83BA3EFE6A10 | Since: 323 | API-Set: unknown
     */
    export function isTransitionHostFromHandle(): [boolean, any] {
        return NetworkIsTransitionHostFromHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC571D0E77D8BBC29 | Since: 323 | API-Set: unknown
     */
    export function isTransitionLeavePostponed(): boolean {
        return Citizen.invokeNative('0xC571D0E77D8BBC29');
    }

    /**
     * No comment provided
     *
     * Hash: 0x292564C735375EDF | Since: 323 | API-Set: unknown
     */
    export function isTransitionMatchmaking(): boolean {
        return NetworkIsTransitionMatchmaking();
    }

    /**
     * No comment provided
     *
     * Hash: 0x37A4494483B9F5C9 | Since: 323 | API-Set: unknown
     */
    export function isTransitionOpenToMatchmaking(): boolean {
        return NetworkIsTransitionOpenToMatchmaking();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A6AA44FF8E931E6 | Since: 323 | API-Set: unknown
     */
    export function isTransitionPrivate(): boolean {
        return NetworkIsTransitionPrivate();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5DC577201723960A | Since: 323 | API-Set: unknown
     */
    export function isTransitionSolo(): boolean {
        return NetworkIsTransitionSolo();
    }

    /**
     * No comment provided
     *
     * Hash: 0x53FA83401D9C07FE | Since: 323 | API-Set: unknown
     */
    export function isTransitionStarted(): boolean {
        return NetworkIsTransitionStarted();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D7696D8F4FA6CB7 | Since: 323 | API-Set: unknown
     */
    export function isTransitionToGame(): boolean {
        return NetworkIsTransitionToGame();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD0A484CB2F829FBE | Since: 323 | API-Set: unknown
     */
    export function isTransitionVisibilityLocked(): boolean {
        return NetworkIsTransitionVisibilityLocked();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0467C11ED88B7D28 | Since: 323 | API-Set: unknown
     */
    export function isTunableCloudRequestPending(): boolean {
        return NetworkIsTunableCloudRequestPending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x35F0B98A8387274D | Since: 323 | API-Set: unknown
     */
    export function isTutorialSessionChangePending(): boolean {
        return NetworkIsTutorialSessionChangePending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x906CA41A4B74ECA4 | Since: 1493 | API-Set: unknown
     */
    export function isUsingOnlinePromotion(): boolean {
        return Citizen.invokeNative('0x906CA41A4B74ECA4');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA06509A691D12BE4 | Since: 323 | API-Set: unknown
     */
    export function joinGroupActivity(): boolean {
        return NetworkJoinGroupActivity();
    }

    /**
     * No comment provided
     *
     * Hash: 0x59DF79317F85A7E0 | Since: 323 | API-Set: unknown
     */
    export function joinPreviouslyFailedSession(): boolean {
        return NetworkJoinPreviouslyFailedSession();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFE1E5B792D92B34 | Since: 323 | API-Set: unknown
     */
    export function joinPreviouslyFailedTransition(): boolean {
        return NetworkJoinPreviouslyFailedTransition();
    }

    /**
     * int handle[76];
     * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
     * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
     * NETWORK_JOIN_TRANSITION(uVar2);
     * nothing doin.
     *
     * Hash: 0x9D060B08CD63321A | Since: 323 | API-Set: unknown
     */
    export function joinTransition(player: number | string | IPlayer): boolean {
        return NetworkJoinTransition(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x17C9E241111A674D | Since: 2060 | API-Set: unknown
     */
    export function keepEntityCollisionDisabledAfterAnimScene(): void {
        Citizen.invokeNative('0x17C9E241111A674D', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DCF46CB1A4F0884 | Since: 323 | API-Set: unknown
     */
    export function launchTransition(): boolean {
        return NetworkLaunchTransition();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF22E0F32968E967 | Since: 323 | API-Set: unknown
     */
    export function leavePedBehindBeforeCutscene(player: number | string | IPlayer): void {
        Citizen.invokeNative('0xBF22E0F32968E967', player, false);
    }

    /**
     * p4 and p5 are always 0 in scripts
     *
     * Hash: 0x9769F811D1785B03 | Since: 323 | API-Set: unknown
     */
    export function leavePedBehindBeforeWarp(player: number | string | IPlayer, pos: Vector3): void {
        NetworkRespawnCoords(player, pos.x, pos.y, pos.z, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD23A1A815D21DB19 | Since: 323 | API-Set: unknown
     */
    export function leaveTransition(): boolean {
        return NetworkLeaveTransition();
    }

    /**
     * No comment provided
     *
     * Hash: 0x261E97AD7BCF3D40 | Since: 323 | API-Set: unknown
     */
    export function markAsPreferredActivity(): void {
        Citizen.invokeNative('0x261E97AD7BCF3D40', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x39917E1B4CB0F911 | Since: 323 | API-Set: unknown
     */
    export function markAsWaitingAsync(): void {
        Citizen.invokeNative('0x39917E1B4CB0F911', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5728BB6D63E3FF1D | Since: 323 | API-Set: unknown
     */
    export function markTransitionGamerAsFullyJoined(): [boolean, any] {
        return NetworkMarkTransitionGamerAsFullyJoined();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC82630132081BB6F | Since: 323 | API-Set: unknown
     */
    export function memberIdFromGamerHandle(): [string, any] {
        return NetworkMemberIdFromGamerHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x53C10C8BD774F2C9 | Since: 1011 | API-Set: unknown
     */
    export function needToStartNewGameButBlocked(): boolean {
        return Citizen.invokeNative('0x53C10C8BD774F2C9');
    }

    /**
     * No comment provided
     *
     * Hash: 0x283B6062A2C01E9B | Since: 323 | API-Set: unknown
     */
    export function onReturnToSinglePlayer(): void {
        Citizen.invokeNative('0x283B6062A2C01E9B');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B3A8F7CA3A38FDE | Since: 323 | API-Set: unknown
     */
    export function openTransitionMatchmaking(): void {
        NetworkOpenTransitionMatchmaking();
    }

    /**
     * Could possibly bypass being muted or automatically muted
     *
     * Hash: 0x3039AE5AD2C9C0C4 | Since: 323 | API-Set: unknown
     */
    export function overrideChatRestrictions(player: number | string | IPlayer, toggle: boolean): void {
        NetworkOverrideChatRestrictions(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42BF1D2E723B6D7E | Since: 2189 | API-Set: unknown
     */
    export function overrideClockRate(ms: number): void {
        NetworkOverrideClockMillisecondsPerGameMinute(ms);
    }

    /**
     * Works in Singleplayer too.
     * Passing wrong data (e.g. hours above 23) will cause the game to crash.
     *
     * Hash: 0xE679E3E06E363892 | Since: 323 | API-Set: unknown
     */
    export function overrideClockTime(hours: number, minutes: number, seconds: number): void {
        NetworkOverrideClockTime(hours, minutes, seconds);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7E30DE9272B6D49 | Since: 323 | API-Set: unknown
     */
    export function overrideCoordsAndHeading(entity: number | IEntity, pos: Vector3, heading: number): void {
        NetworkOverrideCoordsAndHeading(entity, pos.x, pos.y, pos.z, heading);
    }

    /**
     * R* uses this to hear all player when spectating.
     * It allows you to hear other online players when their chat is on none, crew and or friends
     *
     * Hash: 0xDDF73E2B1FEC5AB4 | Since: 323 | API-Set: unknown
     */
    export function overrideReceiveRestrictions(player: number | string | IPlayer, toggle: boolean): void {
        NetworkOverrideReceiveRestrictions(player, toggle);
    }

    /**
     * p0 is always false in scripts.
     *
     * Hash: 0x0FF2862B61A58AF9 | Since: 323 | API-Set: unknown
     */
    export function overrideReceiveRestrictionsAll(toggle: boolean): void {
        NetworkOverrideReceiveRestrictionsAll(toggle);
    }

    /**
     * This is used alongside the native,
     * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
     *
     * Hash: 0x97DD4C5944CC2E6A | Since: 323 | API-Set: unknown
     */
    export function overrideSendRestrictions(player: number | string | IPlayer, toggle: boolean): void {
        NetworkOverrideSendRestrictions(player, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57B192B4D4AD23D5 | Since: 323 | API-Set: unknown
     */
    export function overrideSendRestrictionsAll(toggle: boolean): void {
        NetworkOverrideSendRestrictionsAll(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F697A66CE78674E | Since: 323 | API-Set: unknown
     */
    export function overrideTeamRestrictions(team: number, toggle: boolean): void {
        NetworkOverrideTeamRestrictions(team, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAF66059A131AA269 | Since: 323 | API-Set: unknown
     */
    export function overrideTransitionChat(): void {
        NetworkOverrideTransitionChat(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF0BC9BCD24A511D5 | Since: 2372 | API-Set: unknown
     */
    export function patchPostCutsceneHs4fTunEnt(ped: number | IPed): void {
        NetworkPedForceGameStateUpdate(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x559EBF901A8C68E0 | Since: 2699 | API-Set: unknown
     */
    export function permissionsHasGamerRecord(): [boolean, any] {
        return Citizen.invokeNative('0x559EBF901A8C68E0');
    }

    /**
     * No comment provided
     *
     * Hash: 0x172F75B6EE2233BA | Since: 323 | API-Set: unknown
     */
    export function playerGetCheaterReason(): number {
        return NetworkPlayerGetCheaterReason();
    }

    /**
     * Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
     *
     * Hash: 0x7718D2E2060837D2 | Since: 323 | API-Set: unknown
     */
    export function playerGetName(player: number | string | IPlayer): string {
        return NetworkPlayerGetName(player);
    }

    /**
     * Returns a string of the player's Rockstar Id.
     * Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
     *
     * Hash: 0x4927FC39CD0869A0 | Since: 323 | API-Set: unknown
     */
    export function playerGetUserid(player: number | string | IPlayer): [string, number] {
        return NetworkPlayerGetUserid(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FB99A8B08D18FD6 | Since: 323 | API-Set: unknown
     */
    export function playerHasHeadset(player: number | string | IPlayer): boolean {
        return NetworkPlayerHasHeadset(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x565E430DB3B05BEC | Since: 323 | API-Set: unknown
     */
    export function playerIndexIsCheater(player: number | string | IPlayer): boolean {
        return NetworkPlayerIndexIsCheater(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19D8DA0E5A68045A | Since: 323 | API-Set: unknown
     */
    export function playerIsBadsport(): boolean {
        return NetworkPlayerIsBadsport();
    }

    /**
     * No comment provided
     *
     * Hash: 0x655B91F1495A9090 | Since: 323 | API-Set: unknown
     */
    export function playerIsCheater(): boolean {
        return NetworkPlayerIsCheater();
    }

    /**
     * Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
     * Returns always false in Singleplayer.
     *
     * No longer used for dev checks since first mods were released on PS3 & 360.
     * R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
     * if that is present it will unlock dev stuff.
     *
     * Hash: 0x544ABDDA3B409B6D | Since: 323 | API-Set: unknown
     */
    export function playerIsRockstarDev(player: number | string | IPlayer): boolean {
        return NetworkPlayerIsRockstarDev(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2302C0264EA58D31 | Since: 323 | API-Set: unknown
     */
    export function preventScriptHostMigration(): void {
        Citizen.invokeNative('0x2302C0264EA58D31');
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C891A251567DFCE | Since: 323 | API-Set: unknown
     */
    export function queryRespawnResults(): [number, any] {
        return NetworkQueryRespawnResults();
    }

    /**
     * No comment provided
     *
     * Hash: 0x85A0EF54A500882C | Since: 323 | API-Set: unknown
     */
    export function queueGamerForStatus(): [boolean, any] {
        return NetworkQueueGamerForStatus();
    }

    /**
     * No comment provided
     *
     * Hash: 0x45A83257ED02D9BC | Since: 323 | API-Set: unknown
     */
    export function quitMpToDesktop(): void {
        NetworkQuitMpToDesktop();
    }

    /**
     * No comment provided
     *
     * Hash: 0x06FAACD625D80CAA | Since: 323 | API-Set: unknown
     */
    export function registerEntityAsNetworked(entity: number | IEntity): void {
        NetworkRegisterEntityAsNetworked(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA8C0DDB10E2822A | Since: 1868 | API-Set: unknown
     */
    export function registerHighFrequencyHostBroadcastVariables(): void {
        Citizen.invokeNative('0xEA8C0DDB10E2822A', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD6D7478CA62B8D41 | Since: 1868 | API-Set: unknown
     */
    export function registerHighFrequencyPlayerBroadcastVariables(): void {
        Citizen.invokeNative('0xD6D7478CA62B8D41', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E9B2F01C50DF595 | Since: 323 | API-Set: unknown
     */
    export function registerHostBroadcastVariables(numVars: number, debugName: string): number {
        return NetworkRegisterHostBroadcastVariables(numVars, debugName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3364AA97340CA215 | Since: 323 | API-Set: unknown
     */
    export function registerPlayerBroadcastVariables(numVars: number, debugName: string): number {
        return NetworkRegisterPlayerBroadcastVariables(numVars, debugName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFEB46DCD7D8D5EB | Since: 323 | API-Set: unknown
     */
    export function remainInGameChat(): void {
        Citizen.invokeNative('0xCFEB46DCD7D8D5EB', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25D990F8E0E3F13C | Since: 323 | API-Set: unknown
     */
    export function removeAllQueuedJoinRequests(): void {
        Citizen.invokeNative('0x25D990F8E0E3F13C');
    }

    /**
     * No comment provided
     *
     * Hash: 0x726E0375C7A26368 | Since: 323 | API-Set: unknown
     */
    export function removeAllTransitionInvite(): void {
        NetworkRemoveAllTransitionInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEBF8284D8CADEB53 | Since: 323 | API-Set: unknown
     */
    export function removeAndCancelAllInvites(): void {
        Citizen.invokeNative('0xEBF8284D8CADEB53');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF083835B70BA9BFE | Since: 323 | API-Set: unknown
     */
    export function removeAndCancelAllTransitionInvites(): void {
        Citizen.invokeNative('0xF083835B70BA9BFE');
    }

    /**
     * No comment provided
     *
     * Hash: 0x93CF869BAA0C4874 | Since: 323 | API-Set: unknown
     */
    export function removeEntityArea(areaHandle: number): boolean {
        return NetworkRemoveEntityArea(areaHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x791EDB5803B2F468 | Since: 2545 | API-Set: unknown
     */
    export function removeInvalidObjectModel(modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        Citizen.invokeNative('0x791EDB5803B2F468', modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF0210268DB0974B1 | Since: 323 | API-Set: unknown
     */
    export function removePresenceInvite(): boolean {
        return NetworkRemovePresenceInvite(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7524B431B2E6F7EE | Since: 323 | API-Set: unknown
     */
    export function removeTransitionInvite(): any {
        return NetworkRemoveTransitionInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5626D9D6810730D5 | Since: 350 | API-Set: unknown
     */
    export function reportCodeTamper(): void {
        NetworkReportMyself();
    }

    /**
     * No comment provided
     *
     * Hash: 0x924426BFFD82E915 | Since: 323 | API-Set: unknown
     */
    export function requestCloudBackgroundScripts(): boolean {
        return NetworkRequestCloudBackgroundScripts();
    }

    /**
     * No comment provided
     *
     * Hash: 0x42FB3B532D526E6C | Since: 323 | API-Set: unknown
     */
    export function requestCloudTunables(): void {
        NetworkRequestCloudTunables();
    }

    /**
     * No comment provided
     *
     * Hash: 0x870DDFD5A4A796E4 | Since: 323 | API-Set: unknown
     */
    export function requestControlOfDoor(doorID: number): boolean {
        return NetworkRequestControlOfDoor(doorID);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB69317BF5E782347 | Since: 323 | API-Set: unknown
     */
    export function requestControlOfEntity(entity: number | IEntity): boolean {
        return NetworkRequestControlOfEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA670B3662FAFFBD0 | Since: 323 | API-Set: unknown
     */
    export function requestControlOfNetworkId(netId: number): boolean {
        return NetworkRequestControlOfNetworkId(netId);
    }

    /**
     * Triggers a CEventNetworkInviteConfirmed event
     *
     * Hash: 0x62A0296C1BB1CEB3 | Since: 323 | API-Set: unknown
     */
    export function requestInviteConfirmedEvent(): boolean {
        return NetworkAcceptInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0x741A3D8380319A81 | Since: 323 | API-Set: unknown
     */
    export function requestToBeHostOfThisScript(): void {
        Citizen.invokeNative('0x741A3D8380319A81');
    }

    /**
     * No comment provided
     *
     * Hash: 0x72433699B4E6DD64 | Since: 323 | API-Set: unknown
     */
    export function resetBodyTracker(): void {
        NetworkResetBodyTracker();
    }

    /**
     * Hardcoded to return true.
     *
     * Hash: 0xDE9225854F37BF72 | Since: 2612 | API-Set: unknown
     */
    export function resolvePrivilegeUserContent(): boolean {
        return Citizen.invokeNative('0xDE9225854F37BF72');
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA23C49EAA83ACFB | Since: 323 | API-Set: unknown
     */
    export function resurrectLocalPlayer(pos: Vector3, heading: number, changetime: boolean): void {
        NetworkResurrectLocalPlayer(pos.x, pos.y, pos.z, heading, false, changetime, false, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB13E88E655E5A3BC | Since: 323 | API-Set: unknown
     */
    export function retainActivityGroup(): void {
        Citizen.invokeNative('0xB13E88E655E5A3BC');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1B84178F8674195 | Since: 323 | API-Set: unknown
     */
    export function seedRandomNumberGenerator(seed: number): void {
        NetworkSeedRandomNumberGenerator(seed);
    }

    /**
     * Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
     *
     * Hash: 0x1171A97A3D3981B6 | Since: 323 | API-Set: unknown
     */
    export function sendImportantTransitionInviteViaPresence(dataCount: number): [boolean, any] {
        return Citizen.invokeNative('0x1171A97A3D3981B6', undefined, dataCount, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3C7A6AFDB244624 | Since: 323 | API-Set: unknown
     */
    export function sendInviteViaPresence(dataCount: number): [boolean, any] {
        return NetworkSendInviteViaPresence(undefined, dataCount, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA2888E3833C8E96 | Since: 323 | API-Set: unknown
     */
    export function sendQueuedJoinRequest(): void {
        Citizen.invokeNative('0xFA2888E3833C8E96');
    }

    /**
     * Message is limited to 64 characters.
     *
     * Hash: 0x3A214F2EC889B100 | Since: 323 | API-Set: unknown
     */
    export function sendTextMessage(message: string): [boolean, any] {
        return NetworkSendTextMessage(message);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31D1D2B858D25E6B | Since: 323 | API-Set: unknown
     */
    export function sendTransitionGamerInstruction(): [boolean, any] {
        return NetworkSendTransitionGamerInstruction(undefined, 0, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC116FF9B4D488291 | Since: 323 | API-Set: unknown
     */
    export function sendTransitionInviteViaPresence(dataCount: number): [boolean, any] {
        return NetworkSendPresenceTransitionInvite(undefined, dataCount, 0);
    }

    /**
     * groupId range: [0, 4]
     *
     * Hash: 0xCAE55F48D3D7875C | Since: 323 | API-Set: unknown
     */
    export function sessionAddActiveMatchmakingGroup(groupId: number): void {
        NetworkSessionAddActiveMatchmakingGroup(groupId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA73667484D7037C3 | Since: 323 | API-Set: unknown
     */
    export function sessionBlockJoinRequests(toggle: boolean): void {
        NetworkSessionBlockJoinRequests(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FBF47B1B36D36F9 | Since: 323 | API-Set: unknown
     */
    export function sessionCancelInvite(): void {
        NetworkSessionCancelInvite();
    }

    /**
     * num player slots allowed in session, seems to work? 32 max
     *
     * Hash: 0xB4AB419E0D86ACAE | Since: 323 | API-Set: unknown
     */
    export function sessionChangeSlots(slots: number): void {
        NetworkSessionChangeSlots(slots, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE3E347A87ACEB82 | Since: 323 | API-Set: unknown
     */
    export function sessionDoActivityQuickmatch(): boolean {
        return NetworkSessionActivityQuickmatch(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * p4 seems to be unused in 1.60/build 2628
     *
     * Hash: 0x94BC51E9449D917F | Since: 323 | API-Set: unknown
     */
    export function sessionDoCrewMatchmaking(crewId: number, maxPlayers: number): boolean {
        return NetworkSessionCrewMatchmaking(crewId, 0, 0, maxPlayers);
    }

    /**
     * No comment provided
     *
     * Hash: 0x330ED4D05491934F | Since: 323 | API-Set: unknown
     */
    export function sessionDoFreeroamQuickmatch(): boolean {
        return NetworkSessionEnter(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CFC76E0D087C994 | Since: 323 | API-Set: unknown
     */
    export function sessionDoFriendMatchmaking(): boolean {
        return NetworkSessionFriendMatchmaking(0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA29177F7703B5644 | Since: 323 | API-Set: unknown
     */
    export function sessionForceCancelInvite(): void {
        NetworkSessionForceCancelInvite();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFFA5BE8381C3314 | Since: 463 | API-Set: unknown
     */
    export function sessionGetHostAimPreference(): number {
        return NetworkGetTargetingMode();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE57397B4A3429DD0 | Since: 323 | API-Set: unknown
     */
    export function sessionGetInviter(): any {
        return NetworkSessionGetInviter();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD6D09A6F32F49EF1 | Since: 323 | API-Set: unknown
     */
    export function sessionGetKickVote(player: number | string | IPlayer): boolean {
        return NetworkSessionGetKickVote(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x56CE820830EF040B | Since: 323 | API-Set: unknown
     */
    export function sessionGetMatchmakingGroupFree(): number {
        return NetworkSessionGetMatchmakingGroupFree(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x53AFD64C6758F2F9 | Since: 323 | API-Set: unknown
     */
    export function sessionGetPrivateSlots(): number {
        return NetworkSessionGetPrivateSlots();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCDC936BF35EDCB73 | Since: 3095 | API-Set: unknown
     */
    export function sessionGetUniqueCrewLimit(): number {
        return Citizen.invokeNative('0xCDC936BF35EDCB73');
    }

    /**
     * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
     *
     * Hash: 0x6F3D4ED9BEE4E61D | Since: 323 | API-Set: unknown
     */
    export function sessionHost(maxPlayers: number): boolean {
        return NetworkSessionHost(0, maxPlayers, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED34C0C02C098BB7 | Since: 323 | API-Set: unknown
     */
    export function sessionHostClosed(maxPlayers: number): boolean {
        return NetworkSessionHostClosed(0, maxPlayers);
    }

    /**
     * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
     *
     * Hash: 0xB9CFD27A5D578D83 | Since: 323 | API-Set: unknown
     */
    export function sessionHostFriendsOnly(maxPlayers: number): boolean {
        return NetworkSessionHostFriendsOnly(0, maxPlayers);
    }

    /**
     * Loads up the map that is loaded when beeing in mission creator
     * Player gets placed in a mix between online/offline mode
     * p0 is always 2 in R* scripts.
     *
     * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
     *
     * Hash: 0xC74C33FCA52856D5 | Since: 323 | API-Set: unknown
     */
    export function sessionHostSinglePlayer(): void {
        NetworkSessionHostSinglePlayer(0);
    }

    /**
     * Seems to be true while "Getting GTA Online session details" shows up.
     *
     * Hash: 0xD313DE83394AF134 | Since: 323 | API-Set: unknown
     */
    export function sessionIsAwaitingInviteResponse(): boolean {
        return Citizen.invokeNative('0xD313DE83394AF134');
    }

    /**
     * No comment provided
     *
     * Hash: 0x74732C6CA90DA2B4 | Since: 323 | API-Set: unknown
     */
    export function sessionIsClosedCrew(): boolean {
        return NetworkSessionIsClosedCrew();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFBCFA2EA2E206890 | Since: 323 | API-Set: unknown
     */
    export function sessionIsClosedFriends(): boolean {
        return NetworkSessionIsClosedFriends();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBDB6F89C729CF388 | Since: 323 | API-Set: unknown
     */
    export function sessionIsDisplayingInviteConfirmation(): boolean {
        return Citizen.invokeNative('0xBDB6F89C729CF388');
    }

    /**
     * No comment provided
     *
     * Hash: 0x855BC38818F6F684 | Since: 323 | API-Set: unknown
     */
    export function sessionIsInVoiceSession(): boolean {
        return NetworkSessionIsInVoiceSession();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEF70AA5B3F89BA1 | Since: 323 | API-Set: unknown
     */
    export function sessionIsPrivate(): boolean {
        return NetworkSessionIsPrivate();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3929C2379B60CCE | Since: 323 | API-Set: unknown
     */
    export function sessionIsSolo(): boolean {
        return NetworkSessionIsSolo();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA416D68C631496A | Since: 323 | API-Set: unknown
     */
    export function sessionIsVisible(): boolean {
        return NetworkSessionIsVisible();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB5D3453C98456528 | Since: 323 | API-Set: unknown
     */
    export function sessionIsVoiceSessionActive(): boolean {
        return Citizen.invokeNative('0xB5D3453C98456528');
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF0912DDF7C4CB4B | Since: 323 | API-Set: unknown
     */
    export function sessionIsVoiceSessionBusy(): boolean {
        return NetworkSessionIsVoiceSessionBusy();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6F8AB8A4189CF3A | Since: 323 | API-Set: unknown
     */
    export function sessionJoinInvite(): void {
        NetworkSessionJoinInvite();
    }

    /**
     * Only works as host.
     *
     * Hash: 0xFA8904DC5F304220 | Since: 323 | API-Set: unknown
     */
    export function sessionKickPlayer(player: number | string | IPlayer): void {
        NetworkSessionKickPlayer(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9351A07A0D458B1 | Since: 2060 | API-Set: unknown
     */
    export function sessionLeave(): boolean {
        return Citizen.invokeNative('0xB9351A07A0D458B1', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3442775428FD2DAA | Since: 323 | API-Set: unknown
     */
    export function sessionLeaveSinglePlayer(): void {
        NetworkSessionLeaveSinglePlayer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x271CC6AB59EBF9A5 | Since: 323 | API-Set: unknown
     */
    export function sessionMarkVisible(toggle: boolean): void {
        NetworkSessionMarkVisible(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x041C7F2A6C9894E6 | Since: 463 | API-Set: unknown
     */
    export function sessionReserveSlotsTransition(): boolean {
        return Citizen.invokeNative('0x041C7F2A6C9894E6', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x702BC4D605522539 | Since: 323 | API-Set: unknown
     */
    export function sessionSetCrewLimitMaxMembersTransition(): void {
        Citizen.invokeNative('0x702BC4D605522539', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x600F8CB31C7AAB6E | Since: 323 | API-Set: unknown
     */
    export function sessionSetGamemode(): void {
        Citizen.invokeNative('0x600F8CB31C7AAB6E', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x49EC8030F5015F8B | Since: 323 | API-Set: unknown
     */
    export function sessionSetMatchmakingGroup(matchmakingGroup: number): void {
        NetworkSessionSetMatchmakingGroup(matchmakingGroup);
    }

    /**
     * playerType is an unsigned int from 0 to 4
     * 0 = regular joiner
     * 4 = spectator
     *
     * Hash: 0x8B6A4DD0AF9CE215 | Since: 323 | API-Set: unknown
     */
    export function sessionSetMatchmakingGroupMax(playerType: number, playerCount: number): void {
        NetworkSessionSetMatchmakingGroupMax(playerType, playerCount);
    }

    /**
     * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
     *
     * Hash: 0xF1EEA2DDA9FFA69D | Since: 323 | API-Set: unknown
     */
    export function sessionSetMatchmakingMentalState(): void {
        NetworkSessionSetMatchmakingMentalState(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F52E880AAF6C8CA | Since: 323 | API-Set: unknown
     */
    export function sessionSetMatchmakingPropertyId(): void {
        NetworkSessionSetMatchmakingPropertyId(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x59D421683D31835A | Since: 573 | API-Set: unknown
     */
    export function sessionSetNumBosses(num: number): void {
        Citizen.invokeNative('0x59D421683D31835A', num);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1153FA02A659051C | Since: 323 | API-Set: unknown
     */
    export function sessionSetScriptValidateJoin(): void {
        Citizen.invokeNative('0x1153FA02A659051C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF49ABC20D8552257 | Since: 323 | API-Set: unknown
     */
    export function sessionSetUniqueCrewLimit(): void {
        Citizen.invokeNative('0xF49ABC20D8552257', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4811BBAC21C5FCD5 | Since: 323 | API-Set: unknown
     */
    export function sessionSetUniqueCrewLimitTransition(): void {
        Citizen.invokeNative('0x4811BBAC21C5FCD5', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5539C3EBF104A53A | Since: 323 | API-Set: unknown
     */
    export function sessionSetUniqueCrewOnlyCrewsTransition(): void {
        Citizen.invokeNative('0x5539C3EBF104A53A', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC19F6C8E7865A6FF | Since: 323 | API-Set: unknown
     */
    export function sessionValidateJoin(): void {
        NetworkSessionValidateJoin(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xABD5E88B8A2D3DB2 | Since: 323 | API-Set: unknown
     */
    export function sessionVoiceConnectToPlayer(): any {
        return NetworkSessionVoiceConnectToPlayer();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C1556705F864230 | Since: 323 | API-Set: unknown
     */
    export function sessionVoiceHost(): boolean {
        return NetworkSessionVoiceHost();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6793E42BE02B575D | Since: 323 | API-Set: unknown
     */
    export function sessionVoiceLeave(): boolean {
        return NetworkSessionVoiceLeave();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F8413B7FC2AA6B9 | Since: 323 | API-Set: unknown
     */
    export function sessionVoiceRespondToRequest(): void {
        NetworkSessionVoiceRespondToRequest(false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B8ED3DB018927B1 | Since: 323 | API-Set: unknown
     */
    export function sessionVoiceSetTimeout(timeout: number): void {
        NetworkSessionVoiceSetTimeout(timeout);
    }

    /**
     * No comment provided
     *
     * Hash: 0x23DFB504655D0CE4 | Since: 323 | API-Set: unknown
     */
    export function sessionWasInvited(): boolean {
        return NetworkSessionWasInvited();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0E4F77F7B9D74D84 | Since: 573 | API-Set: unknown
     */
    export function setActivityPlayerMax(): void {
        NetworkSetActivityPlayerMax(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75138790B4359A74 | Since: 323 | API-Set: unknown
     */
    export function setActivitySpectator(toggle: boolean): void {
        NetworkSetActivitySpectator(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D277B76D1D12222 | Since: 323 | API-Set: unknown
     */
    export function setActivitySpectatorMax(maxSpectators: number): void {
        NetworkSetActivitySpectatorMax(maxSpectators);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C707A667DF8B9FA | Since: 323 | API-Set: unknown
     */
    export function setAntagonisticToPlayer(toggle: boolean, player: number | string | IPlayer): void {
        NetworkSetChoiceMigrateOptions(toggle, player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EDE326D47CD0F3E | Since: 323 | API-Set: unknown
     */
    export function setAttributeDamageToPlayer(ped: number | IPed, player: number | string | IPlayer): boolean {
        return Citizen.invokeNative('0x0EDE326D47CD0F3E', ped, player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x68980414688F7F9D | Since: 2612 | API-Set: unknown
     */
    export function setCanReceiveRsInvites(): void {
        Citizen.invokeNative('0x68980414688F7F9D', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7206F674F2A3B1BB | Since: 323 | API-Set: unknown
     */
    export function setCurrentlySelectedGamerHandleFromInviteMenu(): [boolean, any] {
        return NetworkSetCurrentlySelectedGamerHandleFromInviteMenu();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DAD00265FBF356B | Since: 2802 | API-Set: unknown
     */
    export function setCurrentChatOption(newChatOption: number): void {
        Citizen.invokeNative('0x3DAD00265FBF356B', newChatOption);
    }

    /**
     * No comment provided
     *
     * Hash: 0x796A87B3B68D1F3D | Since: 323 | API-Set: unknown
     */
    export function setCurrentDataManagerHandle(): [boolean, any] {
        return NetworkSetCurrentDataManagerHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C863ACDCD12B3DB | Since: 2699 | API-Set: unknown
     */
    export function setCurrentPublicContentId(missionId: string): void {
        NetworkSetCurrentMissionId(missionId);
    }

    /**
     * mpSettingSpawn:
     *
     * enum eMpSettingSpawn
     * {
     * MP_SETTING_SPAWN_NULL,
     * MP_SETTING_SPAWN_PROPERTY,
     * MP_SETTING_SPAWN_LAST_POSITION,
     * MP_SETTING_SPAWN_GARAGE,
     * MP_SETTING_SPAWN_RANDOM,
     * MP_SETTING_SPAWN_PRIVATE_YACHT,
     * MP_SETTING_SPAWN_OFFICE,
     * MP_SETTING_SPAWN_CLUBHOUSE,
     * MP_SETTING_SPAWN_IE_WAREHOUSE,
     * MP_SETTING_SPAWN_BUNKER,
     * MP_SETTING_SPAWN_HANGAR,
     * MP_SETTING_SPAWN_DEFUNCT_BASE,
     * MP_SETTING_SPAWN_NIGHTCLUB,
     * MP_SETTING_SPAWN_ARENA_GARAGE,
     * MP_SETTING_SPAWN_CASINO_APARTMENT,
     * MP_SETTING_SPAWN_ARCADE,
     * MP_SETTING_SPAWN_SUBMARINE,
     * MP_SETTING_SPAWN_CAR_MEET,
     * MP_SETTING_SPAWN_AUTO_SHOP,
     * MP_SETTING_SPAWN_FIXER_HQ,
     * MP_SETTING_SPAWN_MAX,
     * };
     *
     * Hash: 0xAA6D5451DC3448B6 | Since: 2699 | API-Set: unknown
     */
    export function setCurrentSpawnLocationOption(mpSettingSpawn: number | string): void {
        if (typeof mpSettingSpawn === 'string') mpSettingSpawn = misc.getHashKey(mpSettingSpawn)
        NetworkSetCurrentSpawnSetting(mpSettingSpawn);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6FCECCF4721D679 | Since: 1604 | API-Set: unknown
     */
    export function setCustomArenaBallParams(netId: number): void {
        Citizen.invokeNative('0xA6FCECCF4721D679', netId);
    }

    /**
     * Appears to set whether a transition should be started when the session is migrating.
     *
     * Hash: 0xA2E9C1AB8A92E8CD | Since: 323 | API-Set: unknown
     */
    export function setDoNotLaunchFromJoinAsMigratedHost(toggle: boolean): void {
        Citizen.invokeNative('0xA2E9C1AB8A92E8CD', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD830567D88A1E873 | Since: 323 | API-Set: unknown
     */
    export function setEntityCanBlend(entity: number | IEntity, toggle: boolean): void {
        NetworkSetEntityCanBlend(entity, toggle);
    }

    /**
     * if set to true other network players can't see it
     * if set to false other network player can see it
     * =========================================
     * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
     *
     * pc or last gen?
     *
     * ^^ last-gen
     *
     * Hash: 0xF1CA12B18AEF5298 | Since: 323 | API-Set: unknown
     */
    export function setEntityOnlyExistsForParticipants(entity: number | IEntity, toggle: boolean): void {
        NetworkSetEntityInvisibleToNetwork(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF808475FA571D823 | Since: 323 | API-Set: unknown
     */
    export function setFriendlyFireOption(toggle: boolean): void {
        NetworkSetFriendlyFireOption(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA2C8073411ECDB6 | Since: 323 | API-Set: unknown
     */
    export function setGamerInvitedToTransition(): any {
        return NetworkSetGamerInvitedToTransition();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A5D89D7769A40D8 | Since: 323 | API-Set: unknown
     */
    export function setIgnoreSpectatorChatLimitsSameTeam(toggle: boolean): void {
        Citizen.invokeNative('0x6A5D89D7769A40D8', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0D77A82DC2D0DA59 | Since: 323 | API-Set: unknown
     */
    export function setInviteFailedMessageForInviteMenu(): [any, any] {
        return Citizen.invokeNative('0x0D77A82DC2D0DA59');
    }

    /**
     * No comment provided
     *
     * Hash: 0x66F010A4B031A331 | Since: 323 | API-Set: unknown
     */
    export function setInviteOnCallForInviteMenu(): any {
        return NetworkSetInviteOnCallForInviteMenu();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC18DB55AE19E046 | Since: 323 | API-Set: unknown
     */
    export function setInFreeCamMode(toggle: boolean): void {
        NetworkSetInFreeCamMode(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9CA5DE655269FEC4 | Since: 323 | API-Set: unknown
     */
    export function setInMpCutscene(): void {
        NetworkSetInMpCutscene(false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CE9D95E4051AECD | Since: 678 | API-Set: unknown
     */
    export function setInProgressFinishTime(): void {
        Citizen.invokeNative('0x2CE9D95E4051AECD', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x423DE3854BB50894 | Since: 323 | API-Set: unknown
     */
    export function setInSpectatorMode(toggle: boolean, playerPed: number | IPed): void {
        NetworkSetInSpectatorMode(toggle, playerPed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x419594E137637120 | Since: 323 | API-Set: unknown
     */
    export function setInSpectatorModeExtended(toggle: boolean, playerPed: number | IPed): void {
        NetworkSetInSpectatorModeExtended(toggle, playerPed, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D95C7E2D7E07307 | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerInvincibleTime(time: number): void {
        NetworkSetLocalPlayerInvincibleTime(time);
    }

    /**
     * No comment provided
     *
     * Hash: 0x524FF0AEFF9C3973 | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerSyncLookAt(toggle: boolean): void {
        NetworkSetLocalPlayerSyncLookAt(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D395EA61622E116 | Since: 323 | API-Set: unknown
     */
    export function setLookAtTalkers(): void {
        Citizen.invokeNative('0x7D395EA61622E116', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x94538037EE44F5CF | Since: 323 | API-Set: unknown
     */
    export function setMinimumRankForMission(): void {
        Citizen.invokeNative('0x94538037EE44F5CF', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3B3D11CD9FFCDFC9 | Since: 323 | API-Set: unknown
     */
    export function setMissionFinished(): void {
        NetworkSetMissionFinished();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FC795691834481D | Since: 1868 | API-Set: unknown
     */
    export function setNoLongerNeeded(entity: number | IEntity, toggle: boolean): void {
        Citizen.invokeNative('0x3FC795691834481D', entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF46A1E03E8755980 | Since: 323 | API-Set: unknown
     */
    export function setNoSpectatorChat(toggle: boolean): void {
        NetworkSetNoSpectatorChat(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0379DAF89BA09AA5 | Since: 944 | API-Set: unknown
     */
    export function setObjectCanBlendWhenFixed(_object: number | IObject, toggle: boolean): void {
        NetworkSetObjectForceStaticBlend(_object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA7F0B77D80A4EB7 | Since: 372 | API-Set: unknown
     */
    export function setObjectScopeDistance(_object: number | IObject, range: number): void {
        Citizen.invokeNative('0xBA7F0B77D80A4EB7', _object, range);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70DA3BF8DACD3210 | Since: 323 | API-Set: unknown
     */
    export function setOverrideSpectatorMode(toggle: boolean): void {
        NetworkSetOverrideSpectatorMode(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C5C1E2C2FF814B1 | Since: 323 | API-Set: unknown
     */
    export function setOverrideTutorialSessionChat(toggle: boolean): void {
        Citizen.invokeNative('0x3C5C1E2C2FF814B1', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B857666604B1A74 | Since: 323 | API-Set: unknown
     */
    export function setPlayerIsPassive(toggle: boolean): void {
        NetworkSetPlayerIsPassive(toggle);
    }

    /**
     * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
     *
     * Hash: 0x367EF5E2F439B4C6 | Since: 323 | API-Set: unknown
     */
    export function setPlayerMentalState(): void {
        Citizen.invokeNative('0x367EF5E2F439B4C6', 0);
    }

    /**
     * Does nothing. It's just a nullsub.
     *
     * Hash: 0x4A9FDE3A5A6D0437 | Since: 323 | API-Set: unknown
     */
    export function setPresenceSessionInvitesBlocked(toggle: boolean): void {
        Citizen.invokeNative('0x4A9FDE3A5A6D0437', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F7BC3539F9E0224 | Since: 1180 | API-Set: unknown
     */
    export function setPrivilegeCheckResultNotNeeded(): void {
        Citizen.invokeNative('0x1F7BC3539F9E0224');
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D7AFCBF21C51712 | Since: 323 | API-Set: unknown
     */
    export function setProximityAffectsTeam(toggle: boolean): void {
        Citizen.invokeNative('0x9D7AFCBF21C51712', toggle);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x1DCCACDCFC569362 | Since: 323 | API-Set: unknown
     */
    export function setRichPresence(): void {
        NetworkSetRichPresence(0, 0, undefined, undefined);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x3E200C2BCF4164EB | Since: 323 | API-Set: unknown
     */
    export function setRichPresenceString(textLabel: string): void {
        NetworkSetRichPresenceString(0, textLabel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4348BFDA56023A2F | Since: 573 | API-Set: unknown
     */
    export function setSameTeamAsLocalPlayer(): boolean {
        return Citizen.invokeNative('0x4348BFDA56023A2F', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB309EBEA797E001F | Since: 323 | API-Set: unknown
     */
    export function setScriptAutomuted(): boolean {
        return Citizen.invokeNative('0xB309EBEA797E001F', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x265559DA40B3F327 | Since: 573 | API-Set: unknown
     */
    export function setScriptControllingTeams(): void {
        Citizen.invokeNative('0x265559DA40B3F327', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7AC752103856FB20 | Since: 323 | API-Set: unknown
     */
    export function setScriptReadyForEvents(toggle: boolean): void {
        NetworkSetScriptReadyForEvents(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EF52ACAECC51D9C | Since: 1734 | API-Set: unknown
     */
    export function setSpectatorToNonSpectatorTextChat(toggle: boolean): void {
        Citizen.invokeNative('0x8EF52ACAECC51D9C', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCBF12D65F95AD686 | Since: 323 | API-Set: unknown
     */
    export function setTalkerProximity(value: number): void {
        NetworkSetTalkerProximity(value);
    }

    /**
     * A value between 1.0 and 5.0
     *
     * Hash: 0xC6FCEE21C6FCEE21 | Since: 2545 | API-Set: unknown
     */
    export function setTaskCutsceneInscopeMultipler(multiplier: number): void {
        Citizen.invokeNative('0xC6FCEE21C6FCEE21', multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD5B4883AC32F24C3 | Since: 323 | API-Set: unknown
     */
    export function setTeamOnlyChat(toggle: boolean): void {
        NetworkSetTeamOnlyChat(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1CA59E306ECB80A5 | Since: 323 | API-Set: unknown
     */
    export function setThisScriptIsNetworkScript(maxNumMissionParticipants: number, instanceId: number): void {
        NetworkSetThisScriptIsNetworkScript(maxNumMissionParticipants, false, instanceId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x30DE938B516F0AD2 | Since: 323 | API-Set: unknown
     */
    export function setTransitionActivityId(): void {
        NetworkSetTransitionActivityId(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF26739BCD9907D5 | Since: 323 | API-Set: unknown
     */
    export function setTransitionCreatorHandle(): any {
        return NetworkSetTransitionCreatorHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C978FDA19692C2C | Since: 323 | API-Set: unknown
     */
    export function setTransitionVisibilityLock(): void {
        NetworkSetTransitionVisibilityLock(false, false);
    }

    /**
     * Used by MetricVEHICLE_DIST_DRIVEN
     *
     * Hash: 0x8C70252FC40F320B | Since: 2699 | API-Set: unknown
     */
    export function setVehicleDrivenInTestDrive(toggle: boolean): void {
        NetworkSetVehicleTestDrive(toggle);
    }

    /**
     * Sets 'loc' variable used in MetricVEHICLE_DIST_DRIVEN
     *
     * Hash: 0xA0CE91E47531D3BB | Since: 2944 | API-Set: unknown
     */
    export function setVehicleDrivenLocation(location: number | string): void {
        if (typeof location === 'string') location = misc.getHashKey(location)
        Citizen.invokeNative('0xA0CE91E47531D3BB', location);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBABEC9E69A91C57B | Since: 323 | API-Set: unknown
     */
    export function setVoiceActive(toggle: boolean): void {
        NetworkSetVoiceActive(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF6212C2EFEF1A23 | Since: 323 | API-Set: unknown
     */
    export function setVoiceChannel(channel: number): void {
        NetworkSetVoiceChannel(channel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x023ACAB2DC9DC4A4 | Since: 1493 | API-Set: unknown
     */
    export function shouldShowPromotionAlertScreen(): boolean {
        return Citizen.invokeNative('0x023ACAB2DC9DC4A4');
    }

    /**
     * Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
     *
     * Hash: 0x82A2B386716608F1 | Since: 393 | API-Set: unknown
     */
    export function shouldShowStrictNatWarning(): boolean {
        return NetworkShouldShowConnectivityTroubleshooting();
    }

    /**
     * No comment provided
     *
     * Hash: 0x83FE8D7229593017 | Since: 323 | API-Set: unknown
     */
    export function showAccountUpgradeUi(): void {
        Citizen.invokeNative('0x83FE8D7229593017');
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x6BFF5F84102DF80A | Since: 323 | API-Set: unknown
     */
    export function showChatRestrictionMsc(player: number | string | IPlayer): void {
        Citizen.invokeNative('0x6BFF5F84102DF80A', player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x859ED1CEA343FCA8 | Since: 323 | API-Set: unknown
     */
    export function showProfileUi(): any {
        return NetworkShowProfileUi();
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x5C497525F803486B | Since: 323 | API-Set: unknown
     */
    export function showPsnUgcRestriction(): void {
        Citizen.invokeNative('0x5C497525F803486B');
    }

    /**
     * No comment provided
     *
     * Hash: 0x9465E683B12D3F6B | Since: 323 | API-Set: unknown
     */
    export function skipRadioResetNextClose(): void {
        Citizen.invokeNative('0x9465E683B12D3F6B');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA59CCAE5D01E4CE | Since: 1734 | API-Set: unknown
     */
    export function skipRadioResetNextOpen(): void {
        Citizen.invokeNative('0xCA59CCAE5D01E4CE');
    }

    /**
     * Returns true if dinput8.dll is present in the game directory.
     * You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
     *
     * Hash: 0x659CF2EF7F550C4F | Since: 1011 | API-Set: unknown
     */
    export function skipRadioWarning(): boolean {
        return NetworkHasGameBeenAltered();
    }

    /**
     * One of the first things it does is get the players ped.
     * Then it calls a function that is used in some tasks and ped based functions.
     * p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
     *
     * Hash: 0x5A6FFA2433E2F14C | Since: 323 | API-Set: unknown
     */
    export function startRespawnSearchForPlayer(player: number | string | IPlayer, pos: Vector3, radius: number, flags: number): boolean {
        return NetworkStartRespawnSearchForPlayer(player, pos.x, pos.y, pos.z, radius, 0, 0, 0, flags);
    }

    /**
     * p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
     *
     * Hash: 0x4BA92A18502BCA61 | Since: 323 | API-Set: unknown
     */
    export function startRespawnSearchInAngledAreaForPlayer(player: number | string | IPlayer, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, flags: number): boolean {
        return NetworkStartRespawnSearchInAngledAreaForPlayer(player, x1, y1, z1, x2, y2, z2, width, 0, 0, 0, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x17E0198B3882C2CB | Since: 323 | API-Set: unknown
     */
    export function startSoloTutorialSession(): void {
        NetworkStartSoloTutorialSession();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A1B3FCDB36C8697 | Since: 323 | API-Set: unknown
     */
    export function startSynchronisedScene(netScene: number): void {
        NetworkStartSynchronisedScene(netScene);
    }

    /**
     * Always returns -1. Seems to be XB1 specific.
     *
     * Hash: 0xDEB2B99A1AF1A2A6 | Since: 323 | API-Set: unknown
     */
    export function startUserContentPermissionsCheck(): [number, any] {
        return NetworkStartUserContentPermissionsCheck();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC254481A4574CB2F | Since: 323 | API-Set: unknown
     */
    export function stopSynchronisedScene(netScene: number): void {
        NetworkStopSynchronisedScene(netScene);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF814FEC6A19FD6E0 | Since: 323 | API-Set: unknown
     */
    export function storeInviteThroughRestart(): void {
        Citizen.invokeNative('0xF814FEC6A19FD6E0');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0682D67EF1FBA3D | Since: 323 | API-Set: unknown
     */
    export function suppressInvite(toggle: boolean): void {
        NetworkSuppressInvite(toggle);
    }

    /**
     * Does nothing in final builds.
     *
     * Hash: 0xCBD02360C5E16871 | Since: 3570 | API-Set: unknown
     */
    export function syncClockTimeOverride(): void {
        Citizen.invokeNative('0xCBD02360C5E16871');
    }

    /**
     * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
     *
     * Hash: 0x5FCF4D7069B09026 | Since: 323 | API-Set: unknown
     */
    export function textChatIsTyping(): boolean {
        return NetworkIsTextChatActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3BFED92026A2AAD | Since: 617 | API-Set: unknown
     */
    export function transitionAddStage(hash: number | string, state: number): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return NetworkTransitionTrack(hash, 0, 0, state, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x973D76AA760A6CB6 | Since: 323 | API-Set: unknown
     */
    export function transitionBlockJoinRequests(): void {
        Citizen.invokeNative('0x973D76AA760A6CB6', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x04918A41BC9B8157 | Since: 617 | API-Set: unknown
     */
    export function transitionFinish(): boolean {
        return Citizen.invokeNative('0x04918A41BC9B8157', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6F4383B7C92F11A | Since: 573 | API-Set: unknown
     */
    export function transitionSetActivityIsland(): void {
        Citizen.invokeNative('0xF6F4383B7C92F11A', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F8E00FB18239600 | Since: 573 | API-Set: unknown
     */
    export function transitionSetContentCreator(): void {
        Citizen.invokeNative('0x1F8E00FB18239600', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1398582B7F72B3ED | Since: 505 | API-Set: unknown
     */
    export function transitionSetInProgress(): void {
        Citizen.invokeNative('0x1398582B7F72B3ED', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B4FFC790CA131EF | Since: 617 | API-Set: unknown
     */
    export function transitionStart(): boolean {
        return Citizen.invokeNative('0x8B4FFC790CA131EF', 0, undefined, undefined, undefined);
    }

    /**
     * Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
     *
     * Hash: 0x890E2C5ABED7236D | Since: 1365 | API-Set: unknown
     */
    export function triggerDamageEventForZeroDamage(entity: number | IEntity, toggle: boolean): void {
        NetworkSetVehicleWheelsDestructible(entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x38B7C51AB1EDC7D8 | Since: 1734 | API-Set: unknown
     */
    export function triggerDamageEventForZeroWeaponHash(entity: number | IEntity, toggle: boolean): void {
        Citizen.invokeNative('0x38B7C51AB1EDC7D8', entity, toggle);
    }

    /**
     * Returns defaultValue if the tunable doesn't exist.
     *
     * Hash: 0xC7420099936CE286 | Since: 323 | API-Set: unknown
     */
    export function tryAccessTunableBoolHash(tunableContext: number | string, tunableName: number | string, defaultValue: boolean): boolean {
        if (typeof tunableContext === 'string') tunableContext = misc.getHashKey(tunableContext)
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return NetworkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1110739EEADB592 | Since: 323 | API-Set: unknown
     */
    export function tryToSetThisScriptIsNetworkScript(): boolean {
        return NetworkIsThisScriptMarked(undefined, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1447451DDB512F0 | Since: 2372 | API-Set: unknown
     */
    export function ugcNav(): void {
        NetworkUgcNav(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7368E683BB9038D6 | Since: 323 | API-Set: unknown
     */
    export function unregisterNetworkedEntity(entity: number | IEntity): void {
        NetworkUnregisterNetworkedEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B1813ABA29016C5 | Since: 323 | API-Set: unknown
     */
    export function useHighPrecisionBlending(netID: number, toggle: boolean): void {
        NetworkUseHighPrecisionBlending(netID, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD71A4ECAB22709E | Since: 323 | API-Set: unknown
     */
    export function useLogarithmicBlendingThisFrame(entity: number | IEntity): void {
        NetworkUseLogarithmicBlendingThisFrame(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB37E4E6A2388CA7B | Since: 323 | API-Set: unknown
     */
    export function waitingPopClearTutorialSession(): boolean {
        return Citizen.invokeNative('0xB37E4E6A2388CA7B');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4237E822315D8BA9 | Since: 323 | API-Set: unknown
     */
    export function wasGameSuspended(): boolean {
        return Citizen.invokeNative('0x4237E822315D8BA9');
    }

    /**
     * gets the entity id of a network id
     *
     * Hash: 0xBFFEAB45A9A9094A | Since: 323 | API-Set: unknown
     */
    export function netToEnt(netHandle: number): number {
        return NetToEnt(netHandle);
    }

    /**
     * gets the object id of a network id
     *
     * Hash: 0xD8515F5FEA14CB3F | Since: 323 | API-Set: unknown
     */
    export function netToObj(netHandle: number): number {
        return NetToObj(netHandle);
    }

    /**
     * gets the ped id of a network id
     *
     * Hash: 0xBDCD95FC216A8B3E | Since: 323 | API-Set: unknown
     */
    export function netToPed(netHandle: number): number {
        return NetToPed(netHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x367B936610BA360C | Since: 323 | API-Set: unknown
     */
    export function netToVeh(netHandle: number): number {
        return NetToVeh(netHandle);
    }

    /**
     * Lets objects spawn online simply do it like this:
     *
     * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
     *
     * Hash: 0x99BFDC94A603E541 | Since: 323 | API-Set: unknown
     */
    export function objToNet(_object: number | IObject): number {
        return ObjToNet(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58C21165F6545892 | Since: 323 | API-Set: unknown
     */
    export function openCommerceStore(): void {
        OpenCommerceStore(undefined, undefined, 0);
    }

    /**
     * Return the local Participant ID
     *
     * Hash: 0x90986E8876CE0A83 | Since: 323 | API-Set: unknown
     */
    export function participantId(): number | string {
        return ParticipantId();
    }

    /**
     * Return the local Participant ID.
     *
     * This native is exactly the same as 'PARTICIPANT_ID' native.
     *
     * Hash: 0x57A3BDDAD8E5AA0A | Since: 323 | API-Set: unknown
     */
    export function participantIdToInt(): number {
        return ParticipantIdToInt();
    }

    /**
     * gets the network id of a ped
     *
     * Hash: 0x0EDEC3C276198689 | Since: 323 | API-Set: unknown
     */
    export function pedToNet(ped: number | IPed): number {
        return PedToNet(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE26CCFF8094D8C74 | Since: 323 | API-Set: unknown
     */
    export function refreshPlayerListStats(): boolean {
        return RefreshPlayerListStats(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x72D0706CD6CCDB58 | Since: 323 | API-Set: unknown
     */
    export function releaseAllCommerceItemImages(): void {
        ReleaseAllCommerceItemImages();
    }

    /**
     * No comment provided
     *
     * Hash: 0x472841A026D26D8B | Since: 1103 | API-Set: unknown
     */
    export function remoteCheaterPlayerDetected(player: number | string | IPlayer, a: number, b: number): boolean {
        return RemoteCheatDetected(player, a, b);
    }

    /**
     * entity must be a valid entity; ped can be NULL
     *
     * Hash: 0x715135F4B82AC90D | Since: 323 | API-Set: unknown
     */
    export function removeAllStickyBombsFromEntity(entity: number | IEntity, ped: number | IPed): void {
        RemoveAllStickyBombsFromEntity(entity, ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2F952104FC6DD4B | Since: 323 | API-Set: unknown
     */
    export function requestCommerceItemImage(index: number): boolean {
        return RequestCommerceItemImage(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x797F9C5E661D920E | Since: 1290 | API-Set: unknown
     */
    export function reserveLocalMissionObjects(amount: number): void {
        ReserveNetworkLocalObjects(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C8DF5D129595281 | Since: 1493 | API-Set: unknown
     */
    export function reserveLocalMissionPeds(amount: number): void {
        ReserveNetworkLocalPeds(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42613035157E4208 | Since: 1103 | API-Set: unknown
     */
    export function reserveLocalMissionVehicles(amount: number): void {
        ReserveNetworkLocalVehicles(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E5C93BD0C32FBF8 | Since: 323 | API-Set: unknown
     */
    export function reserveMissionObjects(amount: number): void {
        ReserveNetworkMissionObjects(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB60FEBA45333D36F | Since: 323 | API-Set: unknown
     */
    export function reserveMissionPeds(amount: number): void {
        ReserveNetworkMissionPeds(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x76B02E21ED27A469 | Since: 323 | API-Set: unknown
     */
    export function reserveMissionVehicles(amount: number): void {
        ReserveNetworkMissionVehicles(amount);
    }

    /**
     * Resets the entity ghost alpha to the default value (128)
     *
     * Hash: 0x17330EBF2F2124A8 | Since: 791 | API-Set: unknown
     */
    export function resetGhostAlpha(): void {
        ResetGhostedEntityAlpha();
    }

    /**
     * No comment provided
     *
     * Hash: 0x444C4525ECE0A4B9 | Since: 323 | API-Set: unknown
     */
    export function resetStoreGameTracking(): void {
        Citizen.invokeNative('0x444C4525ECE0A4B9');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4BA166079D658ED4 | Since: 944 | API-Set: unknown
     */
    export function setEntityGhostedForGhostPlayers(entity: number | IEntity, toggle: boolean): void {
        NetworkSetEntityGhostedWithOwner(entity, toggle);
    }

    /**
     * Makes the provided entity visible for yourself for the current frame.
     *
     * Hash: 0xE135A9FF3F5D05D8 | Since: 323 | API-Set: unknown
     */
    export function setEntityLocallyInvisible(entity: number | IEntity): void {
        SetEntityLocallyInvisible(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x241E289B5C059EDC | Since: 323 | API-Set: unknown
     */
    export function setEntityLocallyVisible(entity: number | IEntity): void {
        SetEntityLocallyVisible(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0031D3C8F36AB82 | Since: 323 | API-Set: unknown
     */
    export function setEntityVisibleInCutscene(): void {
        SetEntityVisibleInCutscene(undefined, false, false);
    }

    /**
     * Must be a value between 1 and 254
     *
     * Hash: 0x658500AE6D723A7E | Since: 791 | API-Set: unknown
     */
    export function setGhostAlpha(alpha: number): void {
        SetGhostedEntityAlpha(alpha);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD7B6C73CAD419BCF | Since: 944 | API-Set: unknown
     */
    export function setInvertGhosting(): void {
        Citizen.invokeNative('0xD7B6C73CAD419BCF', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAE628F1E9ADB239 | Since: 323 | API-Set: unknown
     */
    export function setLastViewedShopItem(p0: number | string, p2: number | string): void {
        if (typeof p0 === 'string') p0 = misc.getHashKey(p0)
        if (typeof p2 === 'string') p2 = misc.getHashKey(p2)
        Citizen.invokeNative('0xFAE628F1E9ADB239', p0, 0, p2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5FFE9B4144F9712F | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerAsGhost(toggle: boolean): void {
        SetLocalPlayerAsGhost(toggle, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE5F773C1A1D9D168 | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerInvisibleLocally(bIncludePlayersVehicle: boolean): void {
        SetLocalPlayerInvisibleLocally(bIncludePlayersVehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1065D68947E7B6E | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerVisibleInCutscene(): void {
        SetLocalPlayerVisibleInCutscene(false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7619364C82D3BF14 | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerVisibleLocally(bIncludePlayersVehicle: boolean): void {
        SetLocalPlayerVisibleLocally(bIncludePlayersVehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAAA553E7DD28A457 | Since: 323 | API-Set: unknown
     */
    export function setCutsceneEntities(toggle: boolean): void {
        SetNetworkCutsceneEntities(toggle);
    }

    /**
     * `Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).`
     *
     * Hash: 0x838DA0936A24ED4D | Since: 944 | API-Set: unknown
     */
    export function setEnableHighSpeedEdgeFallDetection(vehicle: number | IVehicle, toggle: boolean): void {
        SetNetworkEnableVehiclePositionCorrection(vehicle, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8A024587329F36A | Since: 323 | API-Set: unknown
     */
    export function setIdAlwaysExistsForPlayer(netId: number, player: number | string | IPlayer, toggle: boolean): void {
        SetNetworkIdAlwaysExistsForPlayer(netId, player, toggle);
    }

    /**
     * "No Reassign" in CPhysicalScriptGameStateDataNode
     *
     * Hash: 0x9D724B400A7E8FFC | Since: 2189 | API-Set: unknown
     */
    export function setIdCanBeReassigned(netId: number, toggle: boolean): void {
        Citizen.invokeNative('0x9D724B400A7E8FFC', netId, toggle);
    }

    /**
     * Whether or not another player is allowed to take control of the entity
     *
     * Hash: 0x299EEB23175895FC | Since: 323 | API-Set: unknown
     */
    export function setIdCanMigrate(netId: number, toggle: boolean): void {
        SetNetworkIdCanMigrate(netId, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE05E81A888FA63C8 | Since: 323 | API-Set: unknown
     */
    export function setIdExistsOnAllMachines(netId: number, toggle: boolean): void {
        SetNetworkIdExistsOnAllMachines(netId, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FA36981311FA4FF | Since: 323 | API-Set: unknown
     */
    export function setIdPassControlInTutorial(netId: number, state: boolean): void {
        Citizen.invokeNative('0x3FA36981311FA4FF', netId, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6928482543022B4 | Since: 323 | API-Set: unknown
     */
    export function setIdVisibleInCutscene(netId: number): void {
        SetNetworkIdVisibleInCutscene(netId, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x32EBD154CB6B8B99 | Since: 505 | API-Set: unknown
     */
    export function setIdVisibleInCutsceneHack(netId: number): void {
        Citizen.invokeNative('0x32EBD154CB6B8B99', netId, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x76B3F29D3F967692 | Since: 2189 | API-Set: unknown
     */
    export function setIdVisibleInCutsceneRemainHack(): void {
        Citizen.invokeNative('0x76B3F29D3F967692', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6274C4712850841E | Since: 323 | API-Set: unknown
     */
    export function setVehicleAsGhost(vehicle: number | IVehicle, toggle: boolean): void {
        SetNetworkVehicleAsGhost(vehicle, toggle);
    }

    /**
     * `rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel`
     *
     * Hash: 0xA2A707979FE754DC | Since: 877 | API-Set: unknown
     */
    export function setVehicleMaxPositionDeltaMultiplier(vehicle: number | IVehicle, multiplier: number): void {
        SetNetworkVehiclePositionUpdateMultiplier(vehicle, multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC51713AB6EC36E8 | Since: 323 | API-Set: unknown
     */
    export function setVehicleRespotTimer(netId: number, time: number): void {
        SetNetworkVehicleRespotTimer(netId, time, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x13F1FCB111B820B0 | Since: 877 | API-Set: unknown
     */
    export function setNonParticipantsOfThisScriptAsGhosts(): void {
        Citizen.invokeNative('0x13F1FCB111B820B0', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x12B37D54667DB0B8 | Since: 323 | API-Set: unknown
     */
    export function setPlayerInvisibleLocally(player: number | string | IPlayer, bIncludePlayersVehicle: boolean): void {
        SetPlayerInvisibleLocally(player, bIncludePlayersVehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFAA10F1FAFB11AF2 | Since: 323 | API-Set: unknown
     */
    export function setPlayerVisibleLocally(player: number | string | IPlayer, bIncludePlayersVehicle: boolean): void {
        SetPlayerVisibleLocally(player, bIncludePlayersVehicle);
    }

    /**
     * Enables ghosting between specific players
     *
     * Hash: 0xA7C511FA1C5BDA38 | Since: 463 | API-Set: unknown
     */
    export function setRemotePlayerAsGhost(player: number | string | IPlayer): void {
        SetRelationshipToPlayer(player, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x96320E6549DAE7B4 | Since: 2802 | API-Set: unknown
     */
    export function setRemotePlayerVisibleInCutscene(player: number | string | IPlayer, locallyVisible: boolean): void {
        Citizen.invokeNative('0x96320E6549DAE7B4', player, locallyVisible);
    }

    /**
     * Access to the store for shark cards etc...
     *
     * Hash: 0x9641A9FF718E9C5E | Since: 323 | API-Set: unknown
     */
    export function setStoreEnabled(toggle: boolean): void {
        SetStoreEnabled(toggle);
    }

    /**
     * Starts a new singleplayer game (at the prologue).
     *
     * Hash: 0x593850C16A36B692 | Since: 323 | API-Set: unknown
     */
    export function shutdownAndLaunchSinglePlayerGame(): void {
        ShutdownAndLaunchSinglePlayerGame();
    }

    /**
     * In singleplayer this will re-load your game.
     *
     * In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
     *
     * You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
     *
     * Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
     *
     * Hash: 0x9ECA15ADFE141431 | Since: 505 | API-Set: unknown
     */
    export function shutdownAndLoadMostRecentSave(): boolean {
        return ShutdownAndLoadMostRecentSave();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3448505B6E35262D | Since: 323 | API-Set: unknown
     */
    export function textureDownloadGetName(): string {
        return TextureDownloadGetName(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5776ED562C134687 | Since: 323 | API-Set: unknown
     */
    export function textureDownloadHasFailed(): boolean {
        return TextureDownloadHasFailed(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x487EB90B98E9FB19 | Since: 323 | API-Set: unknown
     */
    export function textureDownloadRelease(): void {
        TextureDownloadRelease(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x16160DA74A8E74A2 | Since: 323 | API-Set: unknown
     */
    export function textureDownloadRequest(filePath: string, name: string): [number, any] {
        return TextureDownloadRequest(filePath, name, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B203B4AFDE53A4F | Since: 323 | API-Set: unknown
     */
    export function titleTextureDownloadRequest(filePath: string, name: string): number {
        return TitleTextureDownloadRequest(filePath, name, false);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xB606E6CC59664972 | Since: 323 | API-Set: unknown
     */
    export function triggerCommerceDataFetch(): void {
        Citizen.invokeNative('0xB606E6CC59664972', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE9B99B6853181409 | Since: 323 | API-Set: unknown
     */
    export function ugcCancelQuery(): void {
        UgcCancelQuery();
    }

    /**
     * No comment provided
     *
     * Hash: 0x17440AA15D1D3739 | Since: 323 | API-Set: unknown
     */
    export function ugcClearCreateResult(): void {
        UgcClearCreateResult();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1E5E0204A6FCC70 | Since: 323 | API-Set: unknown
     */
    export function ugcClearModifyResult(): void {
        UgcClearModifyResult();
    }

    /**
     * No comment provided
     *
     * Hash: 0x61A885D3F7CFEE9A | Since: 323 | API-Set: unknown
     */
    export function ugcClearOfflineQuery(): void {
        UgcClearOfflineQuery();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA96394A0EECFA65 | Since: 323 | API-Set: unknown
     */
    export function ugcClearQueryResults(): void {
        UgcClearQueryResults();
    }

    /**
     * No comment provided
     *
     * Hash: 0x152D90E4C1B4738A | Since: 323 | API-Set: unknown
     */
    export function ugcCopyContent(): [boolean, any, any] {
        return UgcCopyContent();
    }

    /**
     * No comment provided
     *
     * Hash: 0x24E4E51FC16305F9 | Since: 323 | API-Set: unknown
     */
    export function ugcDidCreateSucceed(): boolean {
        return Citizen.invokeNative('0x24E4E51FC16305F9');
    }

    /**
     * No comment provided
     *
     * Hash: 0x162C23CA83ED0A62 | Since: 323 | API-Set: unknown
     */
    export function ugcDidDescriptionRequestSucceed(): boolean {
        return Citizen.invokeNative('0x162C23CA83ED0A62', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x941E5306BCD7C2C7 | Since: 323 | API-Set: unknown
     */
    export function ugcDidGetSucceed(): boolean {
        return UgcDidGetSucceed();
    }

    /**
     * No comment provided
     *
     * Hash: 0x793FF272D5B365F4 | Since: 323 | API-Set: unknown
     */
    export function ugcDidModifySucceed(): boolean {
        return Citizen.invokeNative('0x793FF272D5B365F4');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D02279C83BE69FE | Since: 323 | API-Set: unknown
     */
    export function ugcDidQueryCreatorsSucceed(): boolean {
        return Citizen.invokeNative('0x4D02279C83BE69FE');
    }

    /**
     * No comment provided
     *
     * Hash: 0xD5A4B59980401588 | Since: 323 | API-Set: unknown
     */
    export function ugcGetBookmarkedContent(): [boolean, any] {
        return UgcGetBookmarkedContent(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x40F7E66472DF3E5C | Since: 323 | API-Set: unknown
     */
    export function ugcGetCachedDescription(): string {
        return UgcGetCachedDescription(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7BAB11E7C9C6C5A | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentCategory(): number {
        return UgcGetContentCategory(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C8D2739BA44AF0F | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentCreatedByLocalPlayer(): boolean {
        return Citizen.invokeNative('0x8C8D2739BA44AF0F', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x584770794D758C18 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentCreatorGamerHandle(): [boolean, any] {
        return Citizen.invokeNative('0x584770794D758C18', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A56710BAB5C4DB4 | Since: 3407 | API-Set: unknown
     */
    export function ugcGetContentDescription(index: number): string {
        return Citizen.invokeNative('0x4A56710BAB5C4DB4', index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7CF0448787B23758 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentDescriptionHash(): number {
        return UgcGetContentDescriptionHash(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x37025B27D9B658B1 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentFileVersion(): number {
        return UgcGetContentFileVersion(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A17A27D75C74887 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentHash(): number {
        return UgcGetContentHash();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FCC39C46C3C03BD | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentHasHiResPhoto(): boolean {
        return Citizen.invokeNative('0x7FCC39C46C3C03BD', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D610EB0FEA716D9 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentHasLoResPhoto(): boolean {
        return Citizen.invokeNative('0x1D610EB0FEA716D9', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x993CBE59D350D225 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentHasPlayerBookmarked(): boolean {
        return UgcGetContentHasPlayerBookmarked(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70EA8DA57840F9BE | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentHasPlayerRecord(): boolean {
        return UgcGetContentHasPlayerRecord(undefined);
    }

    /**
     * Return the mission id of a job.
     *
     * Hash: 0x55AA95F481D694D2 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentId(): string {
        return UgcGetContentId(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3054F114121C21EA | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentIsPublished(): boolean {
        return UgcGetContentIsPublished(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAEAB987727C5A8A4 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentIsUsingScNickname(): boolean {
        return Citizen.invokeNative('0xAEAB987727C5A8A4', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9240A96C74CCA13 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentIsVerified(): boolean {
        return UgcGetContentIsVerified(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x32DD916F3F7C9672 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentLanguage(): number {
        return UgcGetContentLanguage(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF09786A7FCAB582 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentName(): string {
        return UgcGetContentName(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0A6138401BCB837 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentNum(): number {
        return UgcGetContentNum();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAF6BABF9E7CCC13 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentPath(): string {
        return UgcGetContentPath(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1ACCFBA3D8DAB2EE | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentRating(): number {
        return UgcGetContentRating(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x759299C5BB31D2A9 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentRatingCount(): number {
        return UgcGetContentRatingCount(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4E548C0D7AE39FF9 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentRatingNegativeCount(): number {
        return UgcGetContentRatingNegativeCount(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x87E5C46C187FE0AE | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentRatingPositiveCount(): number {
        return UgcGetContentRatingPositiveCount(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x769951E2455E2EB5 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentTotal(): number {
        return UgcGetContentTotal();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFD115B373C0DF63 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentUpdatedDate(): any {
        return UgcGetContentUpdatedDate(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD67AD041A394C9C | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentUserId(): string {
        return UgcGetContentUserId(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x703F12425ECA8BF5 | Since: 323 | API-Set: unknown
     */
    export function ugcGetContentUserName(): string {
        return UgcGetContentUserName(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC55A0B40FFB1ED23 | Since: 323 | API-Set: unknown
     */
    export function ugcGetCreateContentId(): string {
        return UgcGetCreateContentId();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFBC5E768C7A77A6A | Since: 323 | API-Set: unknown
     */
    export function ugcGetCreateResult(): number {
        return UgcGetCreateResult();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB746D20B17F2A229 | Since: 323 | API-Set: unknown
     */
    export function ugcGetCreatorsByUserId(): [boolean, any, any] {
        return Citizen.invokeNative('0xB746D20B17F2A229');
    }

    /**
     * No comment provided
     *
     * Hash: 0x597F8DBA9B206FC7 | Since: 323 | API-Set: unknown
     */
    export function ugcGetCreatorNum(): number {
        return UgcGetCreatorNum();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F6E2821885CAEE2 | Since: 323 | API-Set: unknown
     */
    export function ugcGetCrewContent(): [boolean, any] {
        return UgcGetCrewContent(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9E1CCAE8BA4C281 | Since: 323 | API-Set: unknown
     */
    export function ugcGetFriendContent(): [boolean, any] {
        return UgcGetFriendContent(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x678BB03C1A3BD51E | Since: 323 | API-Set: unknown
     */
    export function ugcGetGetByCategory(): [boolean, any] {
        return UgcGetGetByCategory(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x815E5E3073DA1D67 | Since: 323 | API-Set: unknown
     */
    export function ugcGetGetByContentId(contentId: string, contentTypeName: string): boolean {
        return SetBalanceAddMachine(contentId, contentTypeName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8322EEB38BE7C26 | Since: 323 | API-Set: unknown
     */
    export function ugcGetGetByContentIds(dataCount: number, contentTypeName: string): [boolean, any] {
        return SetBalanceAddMachines(dataCount, contentTypeName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A0A3D1A186A5508 | Since: 323 | API-Set: unknown
     */
    export function ugcGetModifyResult(): number {
        return UgcGetModifyResult();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7862BC5ED1DFD7E | Since: 323 | API-Set: unknown
     */
    export function ugcGetMostRecentlyCreatedContent(): [boolean, any, any] {
        return Citizen.invokeNative('0xA7862BC5ED1DFD7E', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97A770BEEF227E2B | Since: 323 | API-Set: unknown
     */
    export function ugcGetMostRecentlyPlayedContent(): [boolean, any, any] {
        return NetworkGetBackgroundLoadingRecipients(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3195F8DD0D531052 | Since: 323 | API-Set: unknown
     */
    export function ugcGetMyContent(): [boolean, any] {
        return UgcGetMyContent(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDF7F927136C224B | Since: 323 | API-Set: unknown
     */
    export function ugcGetQueryResult(): number {
        return UgcGetQueryResult();
    }

    /**
     * Return the root content id of a job.
     *
     * Hash: 0xC0173D6BFF4E0348 | Since: 323 | API-Set: unknown
     */
    export function ugcGetRootContentId(): string {
        return UgcGetRootContentId(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5324A0E3E4CE3570 | Since: 323 | API-Set: unknown
     */
    export function ugcGetTopRatedContent(): [boolean, any, any] {
        return Citizen.invokeNative('0x5324A0E3E4CE3570', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E24341A7F92A74B | Since: 323 | API-Set: unknown
     */
    export function ugcHasCreateFinished(): boolean {
        return UgcHasCreateFinished();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEBFA8D50ADDC54C4 | Since: 323 | API-Set: unknown
     */
    export function ugcHasDescriptionRequestFinished(): boolean {
        return Citizen.invokeNative('0xEBFA8D50ADDC54C4', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02ADA21EA2F6918F | Since: 323 | API-Set: unknown
     */
    export function ugcHasGetFinished(): boolean {
        return UgcHasGetFinished();
    }

    /**
     * No comment provided
     *
     * Hash: 0x299EF3C576773506 | Since: 323 | API-Set: unknown
     */
    export function ugcHasModifyFinished(): boolean {
        return UgcHasModifyFinished();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC33E7CBC06EC1A8D | Since: 3095 | API-Set: unknown
     */
    export function ugcHasPermissionToWrite(): boolean {
        return Citizen.invokeNative('0xC33E7CBC06EC1A8D');
    }

    /**
     * No comment provided
     *
     * Hash: 0x63B406D7884BFA95 | Since: 323 | API-Set: unknown
     */
    export function ugcHasQueryCreatorsFinished(): boolean {
        return Citizen.invokeNative('0x63B406D7884BFA95');
    }

    /**
     * No comment provided
     *
     * Hash: 0x9FEDF86898F100E9 | Since: 323 | API-Set: unknown
     */
    export function ugcIsCreating(): boolean {
        return Citizen.invokeNative('0x9FEDF86898F100E9');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D5DC831176D0114 | Since: 323 | API-Set: unknown
     */
    export function ugcIsDescriptionRequestInProgress(): boolean {
        return Citizen.invokeNative('0x2D5DC831176D0114', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD53ACDBEF24A46E8 | Since: 323 | API-Set: unknown
     */
    export function ugcIsGetting(): boolean {
        return UgcIsGetting();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF53E48461B71EECB | Since: 323 | API-Set: unknown
     */
    export function ugcIsLanguageSupported(): boolean {
        return UgcIsLanguageSupported(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x45E816772E93A9DB | Since: 323 | API-Set: unknown
     */
    export function ugcIsModifying(): boolean {
        return Citizen.invokeNative('0x45E816772E93A9DB');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CAE833B0EE0C500 | Since: 323 | API-Set: unknown
     */
    export function ugcLoadOfflineQuery(): boolean {
        return UgcPoliciesMakePrivate(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DE0F5F50D723CAA | Since: 323 | API-Set: unknown
     */
    export function ugcPublish(contentId: string, baseContentId: string, contentTypeName: string): boolean {
        return UgcPublish(contentId, baseContentId, contentTypeName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x692D58DF40657E8C | Since: 323 | API-Set: unknown
     */
    export function ugcQueryByCategory(): boolean {
        return Citizen.invokeNative('0x692D58DF40657E8C', undefined, undefined, undefined, undefined, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x158EC424F35EC469 | Since: 323 | API-Set: unknown
     */
    export function ugcQueryByContentId(contentId: string, latestVersion: boolean, contentTypeName: string): boolean {
        return UgcQueryByContentId(contentId, latestVersion, contentTypeName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7397A83F7A2A462 | Since: 323 | API-Set: unknown
     */
    export function ugcQueryByContentIds(count: number, latestVersion: boolean, contentTypeName: string): [boolean, any] {
        return UgcQueryByContentIds(count, latestVersion, contentTypeName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D4CB481FAC835E8 | Since: 323 | API-Set: unknown
     */
    export function ugcQueryMostRecentlyCreatedContent(offset: number, count: number, contentTypeName: string): boolean {
        return UgcQueryRecentlyCreatedContent(offset, count, contentTypeName, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9BF438815F5D96EA | Since: 323 | API-Set: unknown
     */
    export function ugcQueryMyContent(): [boolean, any] {
        return UgcQueryMyContent(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x68103E2247887242 | Since: 323 | API-Set: unknown
     */
    export function ugcReleaseAllCachedDescriptions(): void {
        Citizen.invokeNative('0x68103E2247887242');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A34CD9C3C5BEC44 | Since: 323 | API-Set: unknown
     */
    export function ugcReleaseCachedDescription(): boolean {
        return Citizen.invokeNative('0x5A34CD9C3C5BEC44', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E0165278F6339EE | Since: 323 | API-Set: unknown
     */
    export function ugcRequestCachedDescription(): number {
        return UgcRequestCachedDescription(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x171DF6A0C07FB3DC | Since: 323 | API-Set: unknown
     */
    export function ugcRequestContentDataFromIndex(): number {
        return UgcRequestContentDataFromIndex(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FD2990AF016795E | Since: 323 | API-Set: unknown
     */
    export function ugcRequestContentDataFromParams(contentTypeName: string, contentId: string): number {
        return UgcRequestContentDataFromParams(contentTypeName, contentId, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x274A1519DFC1094F | Since: 323 | API-Set: unknown
     */
    export function ugcSetBookmarked(contentId: string, bookmarked: boolean, contentTypeName: string): boolean {
        return UgcSetBookmarked(contentId, bookmarked, contentTypeName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD05D1A6C74DA3498 | Since: 323 | API-Set: unknown
     */
    export function ugcSetDeleted(): [boolean, any] {
        return UgcSetDeleted(false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF98DDE0A8ED09323 | Since: 323 | API-Set: unknown
     */
    export function ugcSetQueryDataFromOffline(): void {
        UgcSetQueryDataFromOffline(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD75DABC0957BF33 | Since: 323 | API-Set: unknown
     */
    export function ugcSetUsingOfflineContent(): void {
        Citizen.invokeNative('0xFD75DABC0957BF33', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x308F96458B7087CC | Since: 323 | API-Set: unknown
     */
    export function ugcTextureDownloadRequest(): number {
        return UgcTextureDownloadRequest(undefined, 0, 0, 0, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC87E740D9F3872CC | Since: 323 | API-Set: unknown
     */
    export function ugcWasQueryForceCancelled(): boolean {
        return Citizen.invokeNative('0xC87E740D9F3872CC');
    }

    /**
     * No comment provided
     *
     * Hash: 0x77758139EC9B66C7 | Since: 323 | API-Set: unknown
     */
    export function usePlayerColourInsteadOfTeamColour(toggle: boolean): void {
        UsePlayerColourInsteadOfTeamColour(toggle);
    }

    /**
     * calls from vehicle to net.
     *
     *
     * Hash: 0xB4C94523F023419C | Since: 323 | API-Set: unknown
     */
    export function vehToNet(vehicle: number | IVehicle): number {
        return VehToNet(vehicle);
    }

    /**
     * NETWORK_CAN_*
     *
     * Hash: 0x9F633448E4C73207 | Since: 3258 | API-Set: unknown
     */
    export function canTextFromGamerBeViewed(): [boolean, any] {
        return Citizen.invokeNative('0x9F633448E4C73207');
    }

    /**
     * Clears tunable contexts that were set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS
     *
     * Hash: 0x0C87C83C8950432B | Since: 3258 | API-Set: unknown
     */
    export function clearTunablesRegistrationContexts(): void {
        Citizen.invokeNative('0x0C87C83C8950432B');
    }

    /**
     * If the restart reason is 4 (BE_RESTART_EF_DISABLED_WITH_BE), will cause the game to exit with exit code 622011. Otherwise exits with code 622010. Has no effect when a restart hasn't been requested (reason == 0 or reason > 6).
     *
     * Note that this 'confirmation' itself does not restart the game, a call to QUIT_GAME or similar is required afterwards.
     *
     * Hash: 0x0A141818CA2311AD | Since: 3323 | API-Set: unknown
     */
    export function confirmGameRestart(): void {
        Citizen.invokeNative('0x0A141818CA2311AD');
    }

    /**
     * communicationType: 0 = VOICE; 1 = TEXT_CHAT; 2 = TEXT_MESSAGE; 3 = EMAIL; 4 = USER_CONTENT; 5 = USER_TEXT
     *
     * Hash: 0xDBDF80673BBA3D65 | Since: 3095 | API-Set: unknown
     */
    export function doesCommunicationGroupHavePermission(communicationType: number): boolean {
        return Citizen.invokeNative('0xDBDF80673BBA3D65', communicationType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x20C12650830A64EC | Since: 3570 | API-Set: unknown
     */
    export function doesCommunicationGroupHaveSettingsEnabled(communicationType: number): boolean {
        return Citizen.invokeNative('0x20C12650830A64EC', communicationType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x214CA1730793EBA8 | Since: 3570 | API-Set: unknown
     */
    export function getAccessCodeLabelBody(accessCode: number): string {
        return Citizen.invokeNative('0x214CA1730793EBA8', accessCode);
    }

    /**
     * No comment provided
     *
     * Hash: 0x967E6FB554E1B6DE | Since: 3570 | API-Set: unknown
     */
    export function getAccessCodeLabelHeading(accessCode: number): string {
        return Citizen.invokeNative('0x967E6FB554E1B6DE', accessCode);
    }

    /**
     * 0x20211000 = HUD_BE_ERROR_FAILED_UNKNOWN
     * 0x20212000 = HUD_BE_ERROR_FAILED_CLIENT_INIT
     * 0x20213000 = HUD_BE_ERROR_FAILED_SERVER_INIT
     * 0x20214000 = HUD_BE_ERROR_FAILED_AUTH_ATTEMPTS
     * 0x20215000 = HUD_BE_ERROR_UNTRUSTED_HOST
     * 0x20216000 = HUD_BE_ERROR_KICKED
     * 0x20217000 = HUD_BE_ERROR_BANNED
     * 0x50140000 = HUD_BE_BLOCK_BANNED
     *
     * Note: an invalid error code returns a null pointer!
     *
     * Hash: 0xCBA50F371E45B90D | Since: 3323 | API-Set: unknown
     */
    export function getBattleyeErrorMessageLabel(errorCode: number): string {
        return Citizen.invokeNative('0xCBA50F371E45B90D', errorCode);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE448693B3EA3B92C | Since: 3586 | API-Set: unknown
     */
    export function getBroadcastDataHostUpdateSize(scriptNameHash: number | string, instance: number, positionHash: number | string, handlerNum: number): number {
        if (typeof scriptNameHash === 'string') scriptNameHash = misc.getHashKey(scriptNameHash)
        if (typeof positionHash === 'string') positionHash = misc.getHashKey(positionHash)
        return Citizen.invokeNative('0xE448693B3EA3B92C', scriptNameHash, instance, positionHash, handlerNum);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC3F722321800755 | Since: 3586 | API-Set: unknown
     */
    export function getBroadcastDataPlayerUpdateSize(scriptNameHash: number | string, instance: number, positionHash: number | string, handlerNum: number): number {
        if (typeof scriptNameHash === 'string') scriptNameHash = misc.getHashKey(scriptNameHash)
        if (typeof positionHash === 'string') positionHash = misc.getHashKey(positionHash)
        return Citizen.invokeNative('0xAC3F722321800755', scriptNameHash, instance, positionHash, handlerNum);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97F35B898D2D067F | Since: 3570 | API-Set: unknown
     */
    export function getCommunicationGroupDefaultFlags(communicationType: number): number {
        return Citizen.invokeNative('0x97F35B898D2D067F', communicationType);
    }

    /**
     * Returns communicationGroupFlag
     * communicationType: see 0xDBDF80673BBA3D65
     *
     * enum eCommunicationGroupFlag
     * {
     * COMMUNICATION_GROUP_LOCAL_PLAYER = 1 << 0,
     * COMMUNICATION_GROUP_FRIENDS = 1 << 1,
     * COMMUNICATION_GROUP_SMALL_CREW = 1 << 2,
     * COMMUNICATION_GROUP_LARGE_CREW = 1 << 3,
     * COMMUNICATION_GROUP_RECENT_PLAYER = 1 << 4,
     * COMMUNICATION_GROUP_SAME_SESSION = 1 << 5,
     * COMMUNICATION_GROUP_SAME_TEAM = 1 << 6,
     * COMMUNICATION_GROUP_INVALID = 1 << 7,
     * };
     *
     * Hash: 0x40DF02F371F40883 | Since: 3095 | API-Set: unknown
     */
    export function getCommunicationGroupFlags(communicationType: number): number {
        return Citizen.invokeNative('0x40DF02F371F40883', communicationType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF66ACD9AE81A99F | Since: 3570 | API-Set: unknown
     */
    export function getCommunicationGroupValue(communicationType: number): number {
        return Citizen.invokeNative('0xBF66ACD9AE81A99F', communicationType);
    }

    /**
     * enum eNetworkGameRestartReason
     * {
     * BE_RESTART_SERVICE_NOT_RUNNING = 1, 	// BattlEye service not running
     * BE_RESTART_SERVICE_NEEDS_UPDATE, 		// BattlEye service needs an update
     * BE_RESTART_UNKNOWN_REASON,				// Unknown BattlEye reason
     * BE_RESTART_EF_DISABLED_WITH_BE,			// BattlEye Enforcement Flag is disabled, but BattlEye is active
     * BE_RESTART_EF_ENABLED_NO_BE,			// BattlEye Enforcement Flag is enabled, but BattlEye is not active
     * BE_RESTART_BE_MODULES_FAILED_TO_LOAD,	// BattlEye modules failed to load
     * NUM_NETWORK_GAME_RESTART_REASONS
     * };
     *
     * Hash: 0x7F7E8401F81CB65B | Since: 3323 | API-Set: unknown
     */
    export function getGameRestartReason(): number {
        return Citizen.invokeNative('0x7F7E8401F81CB65B');
    }

    /**
     * Returns the restart reason as a string, see _NETWORK_GET_GAME_RESTART_REASON. Returns a null pointer when a restart hasn't been requested (reason == 0 or reason > 6).
     *
     * Hash: 0x47B11D51FC50A259 | Since: 3323 | API-Set: unknown
     */
    export function getGameRestartReasonMessageLabel(): string {
        return Citizen.invokeNative('0x47B11D51FC50A259');
    }

    /**
     * No comment provided
     *
     * Hash: 0x72C8588ABE22C972 | Since: 3586 | API-Set: unknown
     */
    export function getHostBroadcastDataSizeUnsynced(scriptNameHash: number | string, instance: number, positionHash: number | string, handlerNum: number): number {
        if (typeof scriptNameHash === 'string') scriptNameHash = misc.getHashKey(scriptNameHash)
        if (typeof positionHash === 'string') positionHash = misc.getHashKey(positionHash)
        return Citizen.invokeNative('0x72C8588ABE22C972', scriptNameHash, instance, positionHash, handlerNum);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB99CD664FD4720A1 | Since: 3586 | API-Set: unknown
     */
    export function getPlayerBroadcastDataSizeUnsynced(scriptNameHash: number | string, instance: number, positionHash: number | string, handlerNum: number): number {
        if (typeof scriptNameHash === 'string') scriptNameHash = misc.getHashKey(scriptNameHash)
        if (typeof positionHash === 'string') positionHash = misc.getHashKey(positionHash)
        return Citizen.invokeNative('0xB99CD664FD4720A1', scriptNameHash, instance, positionHash, handlerNum);
    }

    /**
     * No comment provided
     *
     * Hash: 0x04BD27B5ACB67067 | Since: 2802 | API-Set: unknown
     */
    export function getRandomFloatRanged(rangeStart: number, rangeEnd: number): number {
        return Citizen.invokeNative('0x04BD27B5ACB67067', rangeStart, rangeEnd);
    }

    /**
     * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
     * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
     *
     * Hash: 0xB327CF1B8C2C0EA3 | Since: 3258 | API-Set: unknown
     */
    export function getTunablesRegistrationBool(tunableName: number | string, defaultValue: boolean): boolean {
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return Citizen.invokeNative('0xB327CF1B8C2C0EA3', tunableName, defaultValue);
    }

    /**
     * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
     * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
     *
     * Hash: 0x367E5E33E7F0DD1A | Since: 3258 | API-Set: unknown
     */
    export function getTunablesRegistrationFloat(tunableName: number | string, defaultValue: number): number {
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return Citizen.invokeNative('0x367E5E33E7F0DD1A', tunableName, defaultValue);
    }

    /**
     * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
     * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
     *
     * Hash: 0x0D94071E55F4C9CE | Since: 3258 | API-Set: unknown
     */
    export function getTunablesRegistrationInt(tunableName: number | string, defaultValue: number): number {
        if (typeof tunableName === 'string') tunableName = misc.getHashKey(tunableName)
        return Citizen.invokeNative('0x0D94071E55F4C9CE', tunableName, defaultValue);
    }

    /**
     * _NETWORK_HAS_P*
     * checkType 3 is similar as using 0x9F633448E4C73207
     *
     * Hash: 0x62E29CDA11F9C230 | Since: 3258 | API-Set: unknown
     */
    export function hasPlayerPassedCheckType(checkType: number): [boolean, any] {
        return Citizen.invokeNative('0x62E29CDA11F9C230', checkType);
    }

    /**
     * Checks for privilege 29
     *
     * Hash: 0xD9719341663C385F | Since: 3095 | API-Set: unknown
     */
    export function hasRosPrivilegeMpTextCommunication(): boolean {
        return Citizen.invokeNative('0xD9719341663C385F');
    }

    /**
     * Checks for privilege 30
     *
     * Hash: 0x8956A309BE90057C | Since: 3095 | API-Set: unknown
     */
    export function hasRosPrivilegeMpVoiceCommunication(): boolean {
        return Citizen.invokeNative('0x8956A309BE90057C');
    }

    /**
     * Checks for privilege 31
     *
     * Hash: 0x9BA54B3CFB82ADDD | Since: 3258 | API-Set: unknown
     */
    export function hasRosPrivilegeReporting(): boolean {
        return Citizen.invokeNative('0x9BA54B3CFB82ADDD');
    }

    /**
     * Appears to be PlayStation-specific. Always returns true on other platforms if signed in with the primary user profile
     *
     * Hash: 0xE1E02509169C124E | Since: 3095 | API-Set: unknown
     */
    export function havePlatformCommunicationPrivileges(): boolean {
        return Citizen.invokeNative('0xE1E02509169C124E');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFE359CCCFE359CC | Since: 3258 | API-Set: unknown
     */
    export function hideEntityInTutorialSession(netHandle: number, hide: boolean): void {
        Citizen.invokeNative('0xCFE359CCCFE359CC', netHandle, hide);
    }

    /**
     * Clears the failed invite join alert reason
     *
     * Hash: 0x8EF5F5811A940F82 | Since: 3179 | API-Set: unknown
     */
    export function inviteClearJoinFailReason(): void {
        Citizen.invokeNative('0x8EF5F5811A940F82');
    }

    /**
     * Retrieves the failed invite join alert reason
     *
     * Hash: 0x7B335F84501145BB | Since: 3179 | API-Set: unknown
     */
    export function inviteGetJoinFailReason(): string {
        return Citizen.invokeNative('0x7B335F84501145BB');
    }

    /**
     * Hardcoded to return 0.
     *
     * Hash: 0x0292BD7F3766CEBC | Since: 3095 | API-Set: unknown
     */
    export function isAmericasVersion(): boolean {
        return Citizen.invokeNative('0x0292BD7F3766CEBC');
    }

    /**
     * Returns the name from given friend gamer handle.
     *
     * Hash: 0x338ECE3637937BC2 | Since: 3258 | API-Set: unknown
     */
    export function loadGamerDisplayName(): [string, any] {
        return Citizen.invokeNative('0x338ECE3637937BC2');
    }

    /**
     * For the XboxPC version this returns true if XPRIVILEGE_MULTIPLAYER_SESSIONS is granted but XPRIVILEGE_CROSS_PLAY is NOT granted.
     * For more information, see https://learn.microsoft.com/en-us/gaming/gdk/_content/gc/live/features/identity/privileges/concepts/live-user-privileges-client#privilege-ids-to-check
     *
     * Always returns false for non-XboxPC versions.
     *
     * Hash: 0xA6BC0D9BCF9662FA | Since: 3504 | API-Set: unknown
     */
    export function multiplayerCrossplayNotAllowed(): boolean {
        return Citizen.invokeNative('0xA6BC0D9BCF9662FA');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0128328CF1FD9F4 | Since: 3095 | API-Set: unknown
     */
    export function sessionLeaveIncludingReason(leaveFlags: number, leaveReason: number): boolean {
        return Citizen.invokeNative('0xE0128328CF1FD9F4', leaveFlags, leaveReason);
    }

    /**
     * communicationType: see 0xDBDF80673BBA3D65
     * communicationGroupFlag: see 0x40DF02F371F40883
     *
     * Hash: 0xE549F846DE7D32D5 | Since: 3095 | API-Set: unknown
     */
    export function setCommunicationGroupFlags(communicationType: number, communicationGroupFlag: number): void {
        Citizen.invokeNative('0xE549F846DE7D32D5', communicationType, communicationGroupFlag);
    }

    /**
     * Sets up tunable contexts for _NETWORK_GET_TUNABLES_REGISTRATION_{BOOL|INT|FLOAT}
     *
     * Hash: 0x014A73449675121D | Since: 3258 | API-Set: unknown
     */
    export function setTunablesRegistrationContexts(): any {
        return Citizen.invokeNative('0x014A73449675121D');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE9D0244ACBEE1BC4 | Since: 3258 | API-Set: unknown
     */
    export function triggerDamageEventForZeroPedDamage(entity: number | IEntity, trigger: boolean): void {
        Citizen.invokeNative('0xE9D0244ACBEE1BC4', entity, trigger);
    }

    /**
     * reportData includes mc, ceo, yacht and licenceplate names
     *
     * Hash: 0x527803286A8B6C81 | Since: 3258 | API-Set: unknown
     */
    export function setFreemodeReportData(): [any, any] {
        return Citizen.invokeNative('0x527803286A8B6C81');
    }

}


export namespace shapetest {
    /**
     * Returns the result of a shape test, also returning the material of any touched surface.
     *
     * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
     *
     * Unless the return value is 2, the other return values are undefined.
     *
     * Hash: 0x4301E10C | Since: unknown | API-Set: client
     */
    export function getResultIncludingMaterial(shapeTestHandle: number): [number, boolean, Vector3, Vector3, number, number] {
        return GetShapeTestResultIncludingMaterial(shapeTestHandle);
    }

    /**
     * Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
     *
     * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
     *
     * Hash: 0x3D87450E15D98694 | Since: 323 | API-Set: unknown
     */
    export function getResult(shapeTestHandle: number): [number, boolean, Vector3, Vector3, number] {
        return GetShapeTestResult(shapeTestHandle);
    }

    /**
     * Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
     *
     * Hash: 0x2B3334BCA57CD799 | Since: 323 | API-Set: unknown
     */
    export function releaseScriptGuidFromEntity(entityHit: number | IEntity): void {
        ReleaseScriptGuidFromEntity(entityHit);
    }

    /**
     * Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
     *
     * Hash: 0x377906D8A31E5586 | Since: 323 | API-Set: unknown
     */
    export function startExpensiveSynchronousLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number | IEntity): number {
        return StartExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x37181417CE7C8900 | Since: 323 | API-Set: unknown
     */
    export function startBound(entity: number | IEntity, flags1: number, flags2: number): number {
        return StartShapeTestBound(entity, flags1, flags2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x052837721A854EC7 | Since: 323 | API-Set: unknown
     */
    export function startBoundingBox(entity: number | IEntity, flags1: number, flags2: number): number {
        return StartShapeTestBoundingBox(entity, flags1, flags2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE466162C4401D18 | Since: 323 | API-Set: unknown
     */
    export function startBox(pos: Vector3, dimX: number, dimY: number, dimZ: number, rot: Vector3, flags: number, entity: number | IEntity): number {
        return StartShapeTestBox(pos.x, pos.y, pos.z, dimX, dimY, dimZ, rot.x, rot.y, rot.z, undefined, flags, entity, undefined);
    }

    /**
     * Raycast from point to point, where the ray has a radius.
     *
     * flags:
     * vehicles=10
     * peds =12
     *
     * Iterating through flags yields many ped / vehicle/ object combinations
     *
     * p9 = 7, but no idea what it does
     *
     * Entity is an entity to ignore
     *
     * Hash: 0x28579D1B8F8AAC80 | Since: 323 | API-Set: unknown
     */
    export function startCapsule(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number | IEntity): number {
        return StartShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity, 0);
    }

    /**
     * Asynchronously starts a line-of-sight (raycast) world probe shape test.
     *
     * Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
     *
     * p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
     *
     * Hash: 0x7EE9F5D83DD4F90E | Since: 323 | API-Set: unknown
     */
    export function startLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number | IEntity): number {
        return StartShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, 0);
    }

    /**
     * Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
     *
     * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
     *
     * Hash: 0xFF6BE494C7987F34 | Since: 323 | API-Set: unknown
     */
    export function startMouseCursorLosProbe(flag: number, entity: number | IEntity, flag2: number): [number, Vector3, Vector3] {
        return StartShapeTestSurroundingCoords(flag, entity, flag2);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6AC6C45FBE83004 | Since: 323 | API-Set: unknown
     */
    export function startSweptSphere(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number | IEntity): number {
        return StartShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity, undefined);
    }

}


export namespace camera {
    /**
     * Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.
     *
     * Hash: 0x8F57A89D | Since: unknown | API-Set: client
     */
    export function getCamMatrix(camera: number | ICamera, rightVector: Vector3, forwardVector: Vector3, upVector: Vector3, position: Vector3): void {
        GetCamMatrix(camera, rightVector, forwardVector, upVector, position);
    }

    /**
     * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
     *
     * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
     *
     * p8 big values ~100 will slow down the camera movement before reaching this node
     *
     * p9 != 0 seems to override the rotation/pitch (bool?)
     *
     * Hash: 0x8609C75EC438FB3B | Since: 323 | API-Set: unknown
     */
    export function addCamSplineNode(camera: number | ICamera, pos: Vector3, rot: Vector3, length: number, smoothingStyle: number, rotationOrder: number): void {
        AddCamSplineNode(camera, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, length, smoothingStyle, rotationOrder);
    }

    /**
     * p0 is the spline camera to which the node is being added.
     * p1 is the camera used to create the node.
     * p3 is always 3 in scripts. It might be smoothing style or rotation order.
     *
     * Hash: 0x0FB82563989CF4FB | Since: 323 | API-Set: unknown
     */
    export function addCamSplineNodeUsing(cam: number | ICamera, cam2: number | ICamera, length: number): void {
        AddCamSplineNodeUsingCamera(cam, cam2, length, 0);
    }

    /**
     * p0 is the spline camera to which the node is being added.
     * p1 is the camera used to create the node.
     * p3 is always 3 in scripts. It might be smoothing style or rotation order.
     *
     * Hash: 0x0A9F2A468B328E74 | Since: 323 | API-Set: unknown
     */
    export function addCamSplineNodeUsingFrame(cam: number | ICamera, cam2: number | ICamera, length: number): void {
        AddCamSplineNodeUsingCameraFrame(cam, cam2, length, 0);
    }

    /**
     * p2 is always 2 in scripts. It might be smoothing style or rotation order.
     *
     * Hash: 0x609278246A29CA34 | Since: 323 | API-Set: unknown
     */
    export function addCamSplineNodeUsingGameplayFrame(cam: number | ICamera, length: number): void {
        AddCamSplineNodeUsingGameplayFrame(cam, length, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x271017B9BA825366 | Since: 323 | API-Set: unknown
     */
    export function allowMotionBlurDecay(): void {
        Citizen.invokeNative('0x271017B9BA825366', undefined, false);
    }

    /**
     * Example from michael2 script.
     *
     * `CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);`
     *
     * Hash: 0xA2746EEAE3E577CD | Since: 323 | API-Set: unknown
     */
    export function animatedShakeCam(cam: number | ICamera, amplitude: number): void {
        AnimatedShakeCam(cam, undefined, undefined, undefined, amplitude);
    }

    /**
     * `CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);`
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xC2EAE3FB8CDBED31 | Since: 323 | API-Set: unknown
     */
    export function animatedShakeScriptGlobal(): void {
        AnimatedShakeScriptGlobal(undefined, undefined, undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4879E4FE39074CDF | Since: 372 | API-Set: unknown
     */
    export function areWidescreenBordersActive(): boolean {
        return Citizen.invokeNative('0x4879E4FE39074CDF');
    }

    /**
     * Last param determines if its relative to the Entity
     *
     * Hash: 0xFEDB7D269E8C60E3 | Since: 323 | API-Set: unknown
     */
    export function attachCamToEntity(cam: number | ICamera, entity: number | IEntity, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void {
        AttachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61A3DBA14AB7F411 | Since: 323 | API-Set: unknown
     */
    export function attachCamToPedBone(cam: number | ICamera, ped: number | IPed, boneIndex: number, pos: Vector3, heading: boolean): void {
        AttachCamToPedBone(cam, ped, boneIndex, pos.x, pos.y, pos.z, heading);
    }

    /**
     * This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
     *
     * Hash: 0x8DB3F12A02CAEF72 | Since: 1290 | API-Set: unknown
     */
    export function attachCamToVehicleBone(cam: number | ICamera, vehicle: number | IVehicle, boneIndex: number, relativeRotation: boolean, rot: Vector3, offsetX: number, offsetY: number, offsetZ: number, fixedDirection: boolean): void {
        AttachCamToVehicleBone(cam, vehicle, boneIndex, relativeRotation, rot.x, rot.y, rot.z, offsetX, offsetY, offsetZ, fixedDirection);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9F97DA93681F87EA | Since: 1734 | API-Set: unknown
     */
    export function blockFirstPersonOrientationResetThisUpdate(): void {
        Citizen.invokeNative('0x9F97DA93681F87EA');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7092AFE81944852 | Since: 2189 | API-Set: unknown
     */
    export function bypassCollisionBuoyancyTestThisUpdate(): void {
        Citizen.invokeNative('0xA7092AFE81944852');
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB629FFD9285FA06 | Since: 323 | API-Set: unknown
     */
    export function bypassCutsceneCamRenderingThisUpdate(): void {
        StopCutsceneCamShaking();
    }

    /**
     * No comment provided
     *
     * Hash: 0x62374889A4D59F72 | Since: 877 | API-Set: unknown
     */
    export function preventCollisionSettingsForTripleheadInInteriorsThisUpdate(): void {
        Citizen.invokeNative('0x62374889A4D59F72');
    }

    /**
     * "DEFAULT_SCRIPTED_CAMERA"
     * "DEFAULT_ANIMATED_CAMERA"
     * "DEFAULT_SPLINE_CAMERA"
     * "DEFAULT_SCRIPTED_FLY_CAMERA"
     * "TIMED_SPLINE_CAMERA"
     *
     * Hash: 0xC3981DCE61D9E13F | Since: 323 | API-Set: unknown
     */
    export function createCam(camName: string): number {
        return CreateCam(camName, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E3CF89C6BCCA67D | Since: 323 | API-Set: unknown
     */
    export function create(camHash: number | string): number {
        if (typeof camHash === 'string') camHash = misc.getHashKey(camHash)
        return CreateCamera(camHash, false);
    }

    /**
     * p9 uses 2 by default
     *
     * Hash: 0x6ABFA3E16460F22D | Since: 323 | API-Set: unknown
     */
    export function createWithParams(camHash: number | string, pos: Vector3, rot: Vector3, fov: number): number {
        if (typeof camHash === 'string') camHash = misc.getHashKey(camHash)
        return CreateCameraWithParams(camHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fov, false, undefined);
    }

    /**
     * camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
     * ------------
     * Camera names found in the b617d scripts:
     * "DEFAULT_ANIMATED_CAMERA"
     * "DEFAULT_SCRIPTED_CAMERA"
     * "DEFAULT_SCRIPTED_FLY_CAMERA"
     * "DEFAULT_SPLINE_CAMERA"
     * ------------
     * Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
     *
     * Hash: 0xB51194800B257161 | Since: 323 | API-Set: unknown
     */
    export function createCamWithParams(camName: string, pos: Vector3, rot: Vector3, fov: number): number {
        return CreateCamWithParams(camName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fov, false, 0);
    }

    /**
     * hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
     *
     * Hash: 0x741B0129D4560F31 | Since: 323 | API-Set: unknown
     */
    export function createCinematicShot(p0: number | string, time: number, entity: number | IEntity): void {
        if (typeof p0 === 'string') p0 = misc.getHashKey(p0)
        CreateCinematicShot(p0, time, false, entity);
    }

    /**
     * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
     *
     * Hash: 0x8E5FB15663F79120 | Since: 323 | API-Set: unknown
     */
    export function destroyAllCams(bScriptHostCam: boolean): void {
        DestroyAllCams(bScriptHostCam);
    }

    /**
     * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
     *
     * Hash: 0x865908C81A2C22E9 | Since: 323 | API-Set: unknown
     */
    export function destroyCam(cam: number | ICamera, bScriptHostCam: boolean): void {
        DestroyCam(cam, bScriptHostCam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2FABBE87F4BAD82 | Since: 323 | API-Set: unknown
     */
    export function detachCam(cam: number | ICamera): void {
        DetachCam(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A31FE0049E542F6 | Since: 323 | API-Set: unknown
     */
    export function disableAimCamThisUpdate(): void {
        DisableAimCamThisUpdate();
    }

    /**
     * No comment provided
     *
     * Hash: 0x49482F9FCD825AAA | Since: 323 | API-Set: unknown
     */
    export function disableCamCollisionForObject(entity: number | IEntity): void {
        DisableCamCollisionForObject(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xADFF1B2A555F5FBA | Since: 323 | API-Set: unknown
     */
    export function disableCinematicBonnetThisUpdate(): void {
        DisableVehicleFirstPersonCamThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x17FCA7199A530203 | Since: 323 | API-Set: unknown
     */
    export function disableCinematicSlowMoThisUpdate(): boolean {
        return Citizen.invokeNative('0x17FCA7199A530203');
    }

    /**
     * No comment provided
     *
     * Hash: 0x62ECFCFDEE7885D6 | Since: 323 | API-Set: unknown
     */
    export function disableCinematicVehicleIdleModeThisUpdate(): void {
        Citizen.invokeNative('0x62ECFCFDEE7885D6');
    }

    /**
     * Sets some flag on cinematic camera
     *
     * Hash: 0xB1381B97F70C7B30 | Since: 1180 | API-Set: unknown
     */
    export function disableFirstPersonWaterClippingTestThisUpdate(): void {
        Citizen.invokeNative('0xB1381B97F70C7B30');
    }

    /**
     * No comment provided
     *
     * Hash: 0x59424BD75174C9B1 | Since: 323 | API-Set: unknown
     */
    export function disableFirstPersonFlashEffectThisUpdate(): void {
        Citizen.invokeNative('0x59424BD75174C9B1');
    }

    /**
     * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
     *
     * Hash: 0xEA7F0AD7E9BA676F | Since: 323 | API-Set: unknown
     */
    export function disableGameplayCamAltitudeFovScalingThisUpdate(): void {
        EnableCrosshairThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A43C76F7FC7BA5F | Since: 323 | API-Set: unknown
     */
    export function disableNearClipScanThisUpdate(): void {
        Citizen.invokeNative('0x5A43C76F7FC7BA5F');
    }

    /**
     * Disables first person camera for the current frame.
     *
     * Found in decompiled scripts:
     * `GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);`
     * `CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();`
     *
     * Hash: 0xDE2EF5DA284CC8DF | Since: 323 | API-Set: unknown
     */
    export function disableOnFootFirstPersonViewThisUpdate(): void {
        DisableFirstPersonCamThisFrame();
    }

    /**
     * Returns whether or not the passed camera handle exists.
     *
     * Hash: 0xA7A932170592B50E | Since: 323 | API-Set: unknown
     */
    export function doesCamExist(cam: number | ICamera): boolean {
        return DoesCamExist(cam);
    }

    /**
     * Fades the screen in.
     *
     * duration: The time the fade should take, in milliseconds.
     *
     * Hash: 0xD4E8E24955024033 | Since: 323 | API-Set: unknown
     */
    export function doScreenFadeIn(duration: number): void {
        DoScreenFadeIn(duration);
    }

    /**
     * Fades the screen out.
     *
     * duration: The time the fade should take, in milliseconds.
     *
     * Hash: 0x891B5B39AC6302AF | Since: 323 | API-Set: unknown
     */
    export function doScreenFadeOut(duration: number): void {
        DoScreenFadeOut(duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28B022A17B068A3A | Since: 1734 | API-Set: unknown
     */
    export function forceBonnetRelativeHeadingAndPitch(): void {
        Citizen.invokeNative('0x28B022A17B068A3A', 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x48608C3464F58AB4 | Since: 505 | API-Set: unknown
     */
    export function forceRelativeHeadingAndPitch(roll: number, pitch: number, yaw: number): void {
        SetGameplayCamRelativeRotation(roll, pitch, yaw);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAABD62873FFB1A33 | Since: 2189 | API-Set: unknown
     */
    export function forceCamFarClip(cam: number | ICamera): void {
        Citizen.invokeNative('0xAABD62873FFB1A33', cam, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA41BCD7213805AAC | Since: 323 | API-Set: unknown
     */
    export function forceCinematicRenderingThisUpdate(toggle: boolean): void {
        ForceCinematicRenderingThisUpdate(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x380B4968D1E09E55 | Since: 1290 | API-Set: unknown
     */
    export function forceTightspaceCustomFramingThisUpdate(): void {
        Citizen.invokeNative('0x380B4968D1E09E55');
    }

    /**
     * No comment provided
     *
     * Hash: 0x0AA27680A0BD43FA | Since: 1103 | API-Set: unknown
     */
    export function forceVehicleCamStuntSettingsThisUpdate(): void {
        Citizen.invokeNative('0x0AA27680A0BD43FA');
    }

    /**
     * enum Context
     * {
     * ON_FOOT,
     * IN_VEHICLE,
     * ON_BIKE,
     * IN_BOAT,
     * IN_AIRCRAFT,
     * IN_SUBMARINE,
     * IN_HELI,
     * IN_TURRET
     * };
     *
     * Hash: 0x19CAFA3C87F7C2FF | Since: 323 | API-Set: unknown
     */
    export function getCamActiveViewModeContext(): number {
        return GetCamActiveViewModeContext();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA10B2DB49E92A6B0 | Since: 323 | API-Set: unknown
     */
    export function getCamAnimCurrentPhase(cam: number | ICamera): number {
        return GetCamAnimCurrentPhase(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAC038F7459AE5AE | Since: 323 | API-Set: unknown
     */
    export function getCamCoord(cam: number | ICamera): Vector3 {
        return new Vector3(GetCamCoord(cam));
    }

    /**
     * No comment provided
     *
     * Hash: 0x06D153C0B99B6128 | Since: 2699 | API-Set: unknown
     */
    export function getCamDofStrength(cam: number | ICamera): number {
        return GetCamDofStrength(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB60A9CFEB21CA6AA | Since: 323 | API-Set: unknown
     */
    export function getCamFarClip(cam: number | ICamera): number {
        return GetCamFarClip(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0x255F8DAFD540D397 | Since: 323 | API-Set: unknown
     */
    export function getCamFarDof(cam: number | ICamera): number {
        return GetCamFarDof(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC3330A45CCCDB26A | Since: 323 | API-Set: unknown
     */
    export function getCamFov(cam: number | ICamera): number {
        return GetCamFov(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC520A34DAFBF24B1 | Since: 323 | API-Set: unknown
     */
    export function getCamNearClip(cam: number | ICamera): number {
        return GetCamNearClip(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC2612D223D915A1C | Since: 2699 | API-Set: unknown
     */
    export function getCamNearDof(cam: number | ICamera): number {
        return GetCamNearDof(cam);
    }

    /**
     * The last parameter, as in other "ROT" methods, is usually 2.
     *
     * Hash: 0x7D304C1C955E3E12 | Since: 323 | API-Set: unknown
     */
    export function getCamRot(cam: number | ICamera, rotationOrder: number): Vector3 {
        return new Vector3(GetCamRot(cam, rotationOrder));
    }

    /**
     * No comment provided
     *
     * Hash: 0xB22B17DF858716A6 | Since: 323 | API-Set: unknown
     */
    export function getCamSplineNodeIndex(cam: number | ICamera): number {
        return GetCamSplineNodeIndex(cam);
    }

    /**
     * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
     *
     * Hash: 0xD9D0E694C8282C96 | Since: 323 | API-Set: unknown
     */
    export function getCamSplineNodePhase(cam: number | ICamera): number {
        return GetCamSplineNodePhase(cam);
    }

    /**
     * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
     *
     * (returns 1.0f when no nodes has been added, reached end of non existing spline)
     *
     * Hash: 0xB5349E36C546509A | Since: 323 | API-Set: unknown
     */
    export function getCamSplinePhase(cam: number | ICamera): number {
        return GetCamSplinePhase(cam);
    }

    /**
     * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
     *
     * Hash: 0xEE778F8C7E1142E2 | Since: 323 | API-Set: unknown
     */
    export function getCamViewModeForContext(context: number): number {
        return GetCamViewModeForContext(context);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77C3CEC46BE286F6 | Since: 2372 | API-Set: unknown
     */
    export function getDebugCam(): number {
        return GetDebugCamera();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA200EB1EE790F448 | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamCoord(): Vector3 {
        return new Vector3(GetFinalRenderedCamCoord());
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFC8CBC606FDB0FC | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamFarClip(): number {
        return GetFinalRenderedCamFarClip();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9780F32BCAF72431 | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamFarDof(): number {
        return GetFinalRenderedCamFarDof();
    }

    /**
     * Gets some camera fov
     *
     * Hash: 0x80EC114669DAEFF4 | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamFov(): number {
        return GetFinalRenderedCamFov();
    }

    /**
     * No comment provided
     *
     * Hash: 0x162F9D995753DC19 | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamMotionBlurStrength(): number {
        return GetFinalRenderedCamMotionBlurStrength();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD0082607100D7193 | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamNearClip(): number {
        return GetFinalRenderedCamNearClip();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA03502FC581F7D9B | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamNearDof(): number {
        return GetFinalRenderedCamNearDof();
    }

    /**
     * p0 seems to consistently be 2 across scripts
     *
     * `Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS`
     *
     * Hash: 0x5B4E4C817FCC2DFB | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedCamRot(rotationOrder: number): Vector3 {
        return new Vector3(GetFinalRenderedCamRot(rotationOrder));
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F35F6732C3FBBA0 | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedRemotePlayerCamFov(player: number | string | IPlayer): number {
        return GetFinalRenderedInWhenFriendlyFov(player);
    }

    /**
     * No comment provided
     *
     * Hash: 0x26903D9CD1175F2C | Since: 323 | API-Set: unknown
     */
    export function getFinalRenderedRemotePlayerCamRot(player: number | string | IPlayer, rotationOrder: number): Vector3 {
        return new Vector3(GetFinalRenderedInWhenFriendlyRot(player, rotationOrder));
    }

    /**
     * No comment provided
     *
     * Hash: 0x7EC52CC40597D170 | Since: 323 | API-Set: unknown
     */
    export function getFirstPersonAimCamZoomFactor(): number {
        return GetFirstPersonAimCamZoomFactor();
    }

    /**
     * No comment provided
     *
     * Hash: 0x89215EC747DF244A | Since: 323 | API-Set: unknown
     */
    export function getFocusPedOnScreen(): number {
        return GetFocusPedOnScreen(0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    /**
     * See viewmode enum in CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE for return value
     *
     * Hash: 0x8D4D46230B2C353A | Since: 323 | API-Set: unknown
     */
    export function getFollowPedCamViewMode(): number {
        return GetFollowPedCamViewMode();
    }

    /**
     * No comment provided
     *
     * Hash: 0x33E6C8EFD0CD93E9 | Since: 323 | API-Set: unknown
     */
    export function getFollowPedCamZoomLevel(): number {
        return GetFollowPedCamZoomLevel();
    }

    /**
     * Returns the type of camera:
     *
     * enum _viewmode //0xA11D7CA8
     * {
     * THIRD_PERSON_NEAR = 0,
     * THIRD_PERSON_MEDIUM = 1,
     * THIRD_PERSON_FAR = 2,
     * CINEMATIC = 3,
     * FIRST_PERSON = 4
     * };
     *
     * Hash: 0xA4FF579AC0E3AAAE | Since: 323 | API-Set: unknown
     */
    export function getFollowVehicleCamViewMode(): number {
        return GetFollowVehicleCamViewMode();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE82280AB767B690 | Since: 323 | API-Set: unknown
     */
    export function getFollowVehicleCamZoomLevel(): number {
        return GetFollowVehicleCamZoomLevel();
    }

    /**
     * No comment provided
     *
     * Hash: 0x14D6F5678D8F1B37 | Since: 323 | API-Set: unknown
     */
    export function getGameplayCamCoord(): Vector3 {
        return new Vector3(GetGameplayCamCoord());
    }

    /**
     * No comment provided
     *
     * Hash: 0x65019750A0324133 | Since: 323 | API-Set: unknown
     */
    export function getGameplayCamFov(): number {
        return GetGameplayCamFov();
    }

    /**
     * No comment provided
     *
     * Hash: 0x743607648ADD4587 | Since: 323 | API-Set: unknown
     */
    export function getGameplayCamRelativeHeading(): number {
        return GetGameplayCamRelativeHeading();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A6867B4845BEDA2 | Since: 323 | API-Set: unknown
     */
    export function getGameplayCamRelativePitch(): number {
        return GetGameplayCamRelativePitch();
    }

    /**
     * p0 dosen't seem to change much, I tried it with 0, 1, 2:
     * 0-Pitch(X): -70.000092
     * 0-Roll(Y): -0.000001
     * 0-Yaw(Z): -43.886459
     * 1-Pitch(X): -70.000092
     * 1-Roll(Y): -0.000001
     * 1-Yaw(Z): -43.886463
     * 2-Pitch(X): -70.000092
     * 2-Roll(Y): -0.000002
     * 2-Yaw(Z): -43.886467
     *
     * Hash: 0x837765A25378F0BB | Since: 323 | API-Set: unknown
     */
    export function getGameplayCamRot(rotationOrder: number): Vector3 {
        return new Vector3(GetGameplayCamRot(rotationOrder));
    }

    /**
     * No comment provided
     *
     * Hash: 0x5234F9F10919EABA | Since: 323 | API-Set: unknown
     */
    export function getRenderingCam(): number {
        return GetRenderingCam();
    }

    /**
     * Example from am_mp_drone script:
     *
     * `CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);`
     *
     * Hash: 0x202A5ED9CE01D6E7 | Since: 2189 | API-Set: unknown
     */
    export function hardAttachCamToEntity(cam: number | ICamera, entity: number | IEntity, rot: Vector3, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void {
        HardAttachCamToEntity(cam, entity, rot.x, rot.y, rot.z, xOffset, yOffset, zOffset, isRelative);
    }

    /**
     * No comment provided
     *
     * Hash: 0x149916F50C34A40D | Since: 1180 | API-Set: unknown
     */
    export function hardAttachCamToPedBone(cam: number | ICamera, ped: number | IPed, boneIndex: number): void {
        HardAttachCamToPedBone(cam, ped, boneIndex, 0, 0, 0, 0, 0, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7B8A361C1813FBEF | Since: 573 | API-Set: unknown
     */
    export function ignoreMenuPreferenceForBonnetThisUpdate(): void {
        Citizen.invokeNative('0x7B8A361C1813FBEF');
    }

    /**
     * Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
     *
     * Hash: 0x9E4CFFF989258472 | Since: 323 | API-Set: unknown
     */
    export function invalidateCinematicVehicleIdleMode(): void {
        InvalidateVehicleIdleCam();
    }

    /**
     * Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
     *
     * Hash: 0xF4F2C0D4EE209E20 | Since: 323 | API-Set: unknown
     */
    export function invalidateIdleCam(): void {
        InvalidateIdleCam();
    }

    /**
     * No comment provided
     *
     * Hash: 0x68EDDA28A5976D07 | Since: 323 | API-Set: unknown
     */
    export function isAimCamActive(): boolean {
        return IsAimCamActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x74BD83EA840F6BC9 | Since: 323 | API-Set: unknown
     */
    export function isAimCamActiveInAccurateMode(): boolean {
        return IsAimCamThirdPersonActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAF0FA793D05C592 | Since: 323 | API-Set: unknown
     */
    export function isAllowedIndependentModes(): boolean {
        return Citizen.invokeNative('0xEAF0FA793D05C592');
    }

    /**
     * No comment provided
     *
     * Hash: 0xD7360051C885628B | Since: 372 | API-Set: unknown
     */
    export function isBonnetCinematicCamRendering(): boolean {
        return IsBonnetCinematicCamRendering();
    }

    /**
     * Returns whether or not the passed camera handle is active.
     *
     * Hash: 0xDFB2B516207D3534 | Since: 323 | API-Set: unknown
     */
    export function isCamActive(cam: number | ICamera): boolean {
        return IsCamActive(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0x036F97C908C2B52C | Since: 323 | API-Set: unknown
     */
    export function isCamInterpolating(cam: number | ICamera): boolean {
        return IsCamInterpolating(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC90621D8A0CEECF2 | Since: 323 | API-Set: unknown
     */
    export function isCamPlayingAnim(cam: number | ICamera, animName: string, animDictionary: string): boolean {
        return IsCamPlayingAnim(cam, animName, animDictionary);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02EC0AF5C5A49B7A | Since: 323 | API-Set: unknown
     */
    export function isCamRendering(cam: number | ICamera): boolean {
        return IsCamRendering(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B24BFE83A2BE47B | Since: 323 | API-Set: unknown
     */
    export function isCamShaking(cam: number | ICamera): boolean {
        return IsCamShaking(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0290F35C0AD97864 | Since: 323 | API-Set: unknown
     */
    export function isCamSplinePaused(cam: number | ICamera): boolean {
        return IsCamSplinePaused(cam);
    }

    /**
     * Tests some cinematic camera flags
     *
     * Hash: 0xF5F1E89A970B7796 | Since: 1493 | API-Set: unknown
     */
    export function isCinematicCamInputActive(): boolean {
        return IsCinematicCamInputActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB15162CB5826E9E8 | Since: 323 | API-Set: unknown
     */
    export function isCinematicCamRendering(): boolean {
        return IsCinematicCamRendering();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBC08F6B4CB8FF0A | Since: 323 | API-Set: unknown
     */
    export function isCinematicCamShaking(): boolean {
        return IsCinematicCamShaking();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4F32C0D5A90A9B40 | Since: 323 | API-Set: unknown
     */
    export function isCinematicFirstPersonVehicleInteriorCamRendering(): boolean {
        return IsInVehicleCamDisabled();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA9D2AA3E326D720 | Since: 323 | API-Set: unknown
     */
    export function isCinematicIdleCamRendering(): boolean {
        return IsCinematicIdleCamRendering();
    }

    /**
     * Hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
     *
     * Hash: 0xCC9F3371A7C28BC9 | Since: 323 | API-Set: unknown
     */
    export function isCinematicShotActive(p0: number | string): boolean {
        if (typeof p0 === 'string') p0 = misc.getHashKey(p0)
        return IsCinematicShotActive(p0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF72910D0F26F025 | Since: 323 | API-Set: unknown
     */
    export function isCodeGameplayHintActive(): boolean {
        return Citizen.invokeNative('0xBF72910D0F26F025');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E346D934122613F | Since: 323 | API-Set: unknown
     */
    export function isFirstPersonAimCamActive(): boolean {
        return IsFirstPersonAimCamActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6D3D26810C8E0F9 | Since: 323 | API-Set: unknown
     */
    export function isFollowPedCamActive(): boolean {
        return IsFollowPedCamActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCBBDE6D335D6D496 | Since: 323 | API-Set: unknown
     */
    export function isFollowVehicleCamActive(): boolean {
        return IsFollowVehicleCamActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x70FDA869F3317EA9 | Since: 323 | API-Set: unknown
     */
    export function isGameplayCamLookingBehind(): boolean {
        return IsGameplayCamLookingBehind();
    }

    /**
     * Examples when this function will return 0 are:
     * - During busted screen.
     * - When player is coming out from a hospital.
     * - When player is coming out from a police station.
     * - When player is buying gun from AmmuNation.
     *
     * Hash: 0x39B5D1B10383F0C8 | Since: 323 | API-Set: unknown
     */
    export function isGameplayCamRendering(): boolean {
        return IsGameplayCamRendering();
    }

    /**
     * No comment provided
     *
     * Hash: 0x016C090630DF1F89 | Since: 323 | API-Set: unknown
     */
    export function isGameplayCamShaking(): boolean {
        return IsGameplayCamShaking();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE520FF1AD2785B40 | Since: 323 | API-Set: unknown
     */
    export function isGameplayHintActive(): boolean {
        return IsGameplayHintActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3044240D2E0FA842 | Since: 323 | API-Set: unknown
     */
    export function isInterpolatingFromScriptCams(): boolean {
        return Citizen.invokeNative('0x3044240D2E0FA842');
    }

    /**
     * No comment provided
     *
     * Hash: 0x705A276EBFF3133D | Since: 323 | API-Set: unknown
     */
    export function isInterpolatingToScriptCams(): boolean {
        return Citizen.invokeNative('0x705A276EBFF3133D');
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F2300CB7FA7B7F6 | Since: 323 | API-Set: unknown
     */
    export function isInVehicleMobilePhoneRendering(): boolean {
        return Citizen.invokeNative('0x1F2300CB7FA7B7F6');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A859503B0C08678 | Since: 323 | API-Set: unknown
     */
    export function isScreenFadedIn(): boolean {
        return IsScreenFadedIn();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB16FCE9DDC7BA182 | Since: 323 | API-Set: unknown
     */
    export function isScreenFadedOut(): boolean {
        return IsScreenFadedOut();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C544BC6C57AC575 | Since: 323 | API-Set: unknown
     */
    export function isScreenFadingIn(): boolean {
        return IsScreenFadingIn();
    }

    /**
     * No comment provided
     *
     * Hash: 0x797AC7CB535BA28F | Since: 323 | API-Set: unknown
     */
    export function isScreenFadingOut(): boolean {
        return IsScreenFadingOut();
    }

    /**
     * In drunk_controller.c4, sub_309
     * `if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {`
     * `CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);`
     * }
     *
     * Hash: 0xC912AF078AF19212 | Since: 323 | API-Set: unknown
     */
    export function isScriptGlobalShaking(): boolean {
        return IsScriptGlobalShaking();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE33D59DA70B58FDF | Since: 323 | API-Set: unknown
     */
    export function isSphereVisible(pos: Vector3, radius: number): boolean {
        return IsSphereVisible(pos.x, pos.y, pos.z, radius);
    }

    /**
     * Max value for p1 is 15.
     *
     * Hash: 0x7DCF7C708D292D55 | Since: 323 | API-Set: unknown
     */
    export function overrideCamSplineMotionBlur(cam: number | ICamera): void {
        OverrideCamSplineMotionBlur(cam, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x40B62FA033EB0346 | Since: 323 | API-Set: unknown
     */
    export function overrideCamSplineVelocity(cam: number | ICamera): void {
        OverrideCamSplineVelocity(cam, 0, 0, 0);
    }

    /**
     * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
     *
     * p9 is unknown at this time.
     * p10 throughout all the X360 Scripts is always 2.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x9A2D0FB2E7852392 | Since: 323 | API-Set: unknown
     */
    export function playCamAnim(cam: number | ICamera, animName: string, animDictionary: string, pos: Vector3, rot: Vector3): boolean {
        return PlayCamAnim(cam, animName, animDictionary, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, false, 0);
    }

    /**
     * Examples:
     *
     * `CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");`
     *
     * `CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7\/\*1\*\/], l_F4D[15\/\*1\*\/], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");`
     *
     * Hash: 0xE32EFE9AB4A9AA0C | Since: 323 | API-Set: unknown
     */
    export function playSynchronizedCamAnim(animName: string, animDictionary: string): boolean {
        return PlaySynchronizedCamAnim(undefined, undefined, animName, animDictionary);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF75497BB865F0803 | Since: 323 | API-Set: unknown
     */
    export function pointCamAtCoord(cam: number | ICamera, pos: Vector3): void {
        PointCamAtCoord(cam, pos.x, pos.y, pos.z);
    }

    /**
     * p5 always seems to be 1 i.e TRUE
     *
     * Hash: 0x5640BFF86B16E8DC | Since: 323 | API-Set: unknown
     */
    export function pointCamAtEntity(cam: number | ICamera, entity: number | IEntity): void {
        PointCamAtEntity(cam, entity, 0, 0, 0, false);
    }

    /**
     * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
     *
     * Hash: 0x68B2B5F33BA63C41 | Since: 323 | API-Set: unknown
     */
    export function pointCamAtPedBone(cam: number | ICamera, ped: number | IPed, boneIndex: number, pos: Vector3): void {
        PointCamAtPedBone(cam, ped, boneIndex, pos.x, pos.y, pos.z, false);
    }

    /**
     * ease - smooth transition between the camera's positions
     * easeTime - Time in milliseconds for the transition to happen
     *
     * If you have created a script (rendering) camera, and want to go back to the
     * character (gameplay) camera, call this native with render set to 0.
     * Setting ease to 1 will smooth the transition.
     *
     * Hash: 0x07E5B515DB0636FC | Since: 323 | API-Set: unknown
     */
    export function renderScriptCams(render: boolean, ease: boolean, easeTime: number): void {
        RenderScriptCams(render, ease, easeTime, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8BFCEB5EA1B161B6 | Since: 323 | API-Set: unknown
     */
    export function replayGetMaxDistanceAllowedFromPlayer(): number {
        return ReplayFreeCamGetMaxRange();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7295C203DD659DFE | Since: 2699 | API-Set: unknown
     */
    export function resetGameplayCamFullAttachParentTransformTimer(): void {
        Citizen.invokeNative('0x7295C203DD659DFE');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4008EDF7D6E48175 | Since: 323 | API-Set: unknown
     */
    export function setAllowCustomVehicleDriveByCamThisUpdate(): void {
        Citizen.invokeNative('0x4008EDF7D6E48175', false);
    }

    /**
     * Set camera as active/inactive.
     *
     * Hash: 0x026FB97D0A425F84 | Since: 323 | API-Set: unknown
     */
    export function setCamActive(cam: number | ICamera, active: boolean): void {
        SetCamActive(cam, active);
    }

    /**
     * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
     *
     *
     * Hash: 0x9FBDA379383A52A4 | Since: 323 | API-Set: unknown
     */
    export function setCamActiveWithInterp(camTo: number | ICamera, camFrom: number | ICamera, duration: number, easeLocation: number, easeRotation: number): void {
        SetCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation);
    }

    /**
     * Allows you to aim and shoot at the direction the camera is facing.
     *
     * Hash: 0x8C1DC7770C51DC8D | Since: 323 | API-Set: unknown
     */
    export function setCamAffectsAiming(cam: number | ICamera, toggle: boolean): void {
        SetCamAffectsAiming(cam, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4145A4C44FF3B5A6 | Since: 323 | API-Set: unknown
     */
    export function setCamAnimCurrentPhase(cam: number | ICamera, phase: number): void {
        SetCamAnimCurrentPhase(cam, phase);
    }

    /**
     * Rotates the radar to match the camera's Z rotation
     *
     * Hash: 0x661B5C8654ADD825 | Since: 323 | API-Set: unknown
     */
    export function setCamControlsMiniMapHeading(cam: number | ICamera, toggle: boolean): void {
        SetCamControlsMiniMapHeading(cam, toggle);
    }

    /**
     * Sets the position of the cam.
     *
     * Hash: 0x4D41783FB745E42E | Since: 323 | API-Set: unknown
     */
    export function setCamCoord(cam: number | ICamera, pos: Vector3): void {
        SetCamCoord(cam, pos.x, pos.y, pos.z);
    }

    /**
     * if p0 is 0, effect is cancelled
     *
     * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
     *
     * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
     *
     * Hash: 0x80C8B1846639BB19 | Since: 323 | API-Set: unknown
     */
    export function setCamDeathFailEffectState(): void {
        SetCamEffect(0);
    }

    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x1B93E0107865DD40 | Since: 323 | API-Set: unknown
     */
    export function setCamDebugName(camera: number | ICamera, name: string): void {
        SetCamDebugName(camera, name);
    }

    /**
     * This native has its name defined inside its codE
     *
     *
     * Hash: 0x7DD234D6F3914C5B | Since: 323 | API-Set: unknown
     */
    export function setCamDofFnumberOfLens(camera: number | ICamera): void {
        SetCamDofFnumberOfLens(camera, 0);
    }

    /**
     * Native name labeled within its code
     *
     * Hash: 0x47B595D60664CFFA | Since: 1011 | API-Set: unknown
     */
    export function setCamDofFocalLengthMultiplier(camera: number | ICamera, multiplier: number): void {
        SetCamDofFocalLengthMultiplier(camera, multiplier);
    }

    /**
     * This native has a name defined inside its code
     *
     * Hash: 0xC669EEA5D031B7DE | Since: 323 | API-Set: unknown
     */
    export function setCamDofFocusDistanceBias(camera: number | ICamera): void {
        SetCamDofFocusDistanceBias(camera, 0);
    }

    /**
     * This native has a name defined inside its code
     *
     * Hash: 0xC3654A441402562D | Since: 323 | API-Set: unknown
     */
    export function setCamDofMaxNearInFocusDistance(camera: number | ICamera): void {
        SetCamDofMaxNearInFocusDistance(camera, 0);
    }

    /**
     * This native has a name defined inside its code
     *
     * Hash: 0x2C654B4943BDDF7C | Since: 323 | API-Set: unknown
     */
    export function setCamDofMaxNearInFocusDistanceBlendLevel(camera: number | ICamera): void {
        SetCamDofMaxNearInFocusDistanceBlendLevel(camera, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF55E4046F6F831DC | Since: 323 | API-Set: unknown
     */
    export function setCamDofOverriddenFocusDistance(camera: number | ICamera): void {
        Citizen.invokeNative('0xF55E4046F6F831DC', camera, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE111A7C0D200CBC5 | Since: 323 | API-Set: unknown
     */
    export function setCamDofOverriddenFocusDistanceBlendLevel(): void {
        Citizen.invokeNative('0xE111A7C0D200CBC5', undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3CF48F6F96E749DC | Since: 323 | API-Set: unknown
     */
    export function setCamDofPlanes(cam: number | ICamera): void {
        SetCamDofPlanes(cam, 0, 0, 0, 0);
    }

    /**
     * This native has a name defined inside its code
     *
     * Hash: 0x7CF3AF51DCFE4108 | Since: 2944 | API-Set: unknown
     */
    export function setCamDofShouldKeepLookAtTargetInFocus(camera: number | ICamera, state: boolean): void {
        Citizen.invokeNative('0x7CF3AF51DCFE4108', camera, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5EE29B4D7D5DF897 | Since: 323 | API-Set: unknown
     */
    export function setCamDofStrength(cam: number | ICamera, dofStrength: number): void {
        SetCamDofStrength(cam, dofStrength);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAE306F2A904BF86E | Since: 323 | API-Set: unknown
     */
    export function setCamFarClip(cam: number | ICamera, farClip: number): void {
        SetCamFarClip(cam, farClip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDD91296CD01AEE0 | Since: 323 | API-Set: unknown
     */
    export function setCamFarDof(cam: number | ICamera, farDOF: number): void {
        SetCamFarDof(cam, farDOF);
    }

    /**
     * Sets the field of view of the cam.
     * ---------------------------------------------
     * Min: 1.0f
     * Max: 130.0f
     *
     * Hash: 0xB13C14F66A00D047 | Since: 323 | API-Set: unknown
     */
    export function setCamFov(cam: number | ICamera, fieldOfView: number): void {
        SetCamFov(cam, fieldOfView);
    }

    /**
     * The native seems to only be called once.
     *
     * The native is used as so,
     * `CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));`
     * In the exile1 script.
     *
     * Hash: 0x45F1DE9C34B93AE6 | Since: 323 | API-Set: unknown
     */
    export function setCamInheritRollVehicle(cam: number | ICamera): void {
        SetCamInheritRollVehicle(cam, false);
    }

    /**
     * When set to true shadows appear more smooth but less detailed.
     * Set to false by default.
     *
     * Hash: 0xA2767257A320FC82 | Since: 323 | API-Set: unknown
     */
    export function setCamIsInsideVehicle(cam: number | ICamera, toggle: boolean): void {
        Citizen.invokeNative('0xA2767257A320FC82', cam, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F0F77FBA9A8F2E6 | Since: 323 | API-Set: unknown
     */
    export function setCamMotionBlurStrength(cam: number | ICamera, strength: number): void {
        SetCamMotionBlurStrength(cam, strength);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7848EFCCC545182 | Since: 323 | API-Set: unknown
     */
    export function setCamNearClip(cam: number | ICamera, nearClip: number): void {
        SetCamNearClip(cam, nearClip);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FA4BF0A7AB7DE2C | Since: 323 | API-Set: unknown
     */
    export function setCamNearDof(cam: number | ICamera, nearDOF: number): void {
        SetCamNearDof(cam, nearDOF);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBFD8727AEA3CCEBA | Since: 323 | API-Set: unknown
     */
    export function setCamParams(cam: number | ICamera, pos: Vector3, rot: Vector3, fieldOfView: number): void {
        SetCamParams(cam, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fieldOfView, undefined, 0, 0, 0);
    }

    /**
     * Sets the rotation of the cam.
     * Last parameter unknown.
     *
     * Last parameter seems to always be set to 2.
     *
     * Hash: 0x85973643155D0B07 | Since: 323 | API-Set: unknown
     */
    export function setCamRot(cam: number | ICamera, rot: Vector3, rotationOrder: number): void {
        SetCamRot(cam, rot.x, rot.y, rot.z, rotationOrder);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD93DB43B82BC0D00 | Since: 323 | API-Set: unknown
     */
    export function setCamShakeAmplitude(cam: number | ICamera, amplitude: number): void {
        SetCamShakeAmplitude(cam, amplitude);
    }

    /**
     * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
     *
     * Hash: 0x1381539FEE034CDA | Since: 323 | API-Set: unknown
     */
    export function setCamSplineDuration(cam: number | ICamera, timeDuration: number): void {
        SetCamSplineDuration(cam, timeDuration);
    }

    /**
     * No comment provided
     *
     * Hash: 0x83B8201ED82A9A2D | Since: 323 | API-Set: unknown
     */
    export function setCamSplineNodeEase(cam: number | ICamera, easingFunction: number): void {
        SetCamSplineNodeEase(cam, easingFunction, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7BF1A54AE67AC070 | Since: 323 | API-Set: unknown
     */
    export function setCamSplineNodeExtraFlags(cam: number | ICamera, flags: number): void {
        SetCamSplineNodeExtraFlags(cam, 0, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6385DEB180F319F | Since: 323 | API-Set: unknown
     */
    export function setCamSplineNodeVelocityScale(cam: number | ICamera, scale: number): void {
        SetCamSplineNodeVelocityScale(cam, 0, scale);
    }

    /**
     * No comment provided
     *
     * Hash: 0x242B5874F0A4E052 | Since: 323 | API-Set: unknown
     */
    export function setCamSplinePhase(cam: number | ICamera): void {
        SetCamSplinePhase(cam, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1B0F412F109EA5D | Since: 323 | API-Set: unknown
     */
    export function setCamSplineSmoothingStyle(cam: number | ICamera, smoothingStyle: number): void {
        SetCamSplineSmoothingStyle(cam, smoothingStyle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x16A96863A17552BB | Since: 323 | API-Set: unknown
     */
    export function setCamUseShallowDofMode(cam: number | ICamera, toggle: boolean): void {
        SetCamUseShallowDofMode(cam, toggle);
    }

    /**
     * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT, viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
     *
     * Hash: 0x2A2173E46DAECD12 | Since: 323 | API-Set: unknown
     */
    export function setCamViewModeForContext(context: number, viewMode: number): void {
        SetCamViewModeForContext(context, viewMode);
    }

    /**
     * No comment provided
     *
     * Hash: 0x51669F7D1FB53D9F | Since: 323 | API-Set: unknown
     */
    export function setCinematicButtonActive(): void {
        SetCinematicButtonActive(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC724C701C30B2FE7 | Since: 323 | API-Set: unknown
     */
    export function setCinematicCamShakeAmplitude(): void {
        SetCinematicCamShakeAmplitude(0);
    }

    /**
     * Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
     *
     * Hash: 0xDCF0754AC3D6FD4E | Since: 323 | API-Set: unknown
     */
    export function setCinematicModeActive(toggle: boolean): void {
        SetCinematicModeActive(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC9DA9E8789F5246 | Since: 323 | API-Set: unknown
     */
    export function setCinematicNewsChannelActiveThisUpdate(): void {
        SetCinematicNewsChannelActiveThisUpdate();
    }

    /**
     * Hardcoded to only work in multiplayer.
     *
     * Hash: 0x12DED8CA53D47EA5 | Since: 323 | API-Set: unknown
     */
    export function setCutsceneCamFarClipThisUpdate(): void {
        Citizen.invokeNative('0x12DED8CA53D47EA5', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0AF7B437918103B3 | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonAimCamNearClipThisUpdate(): void {
        SetFirstPersonAimCamNearClipThisUpdate(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F7F2B26DD3F18EE | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(): void {
        Citizen.invokeNative('0x2F7F2B26DD3F18EE', 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCFC632DB7673BF0 | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonAimCamRelativePitchLimitsThisUpdate(): void {
        SetFirstPersonCamPitchRange(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70894BD0915C5BCA | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonAimCamZoomFactor(zoomFactor: number): void {
        SetFirstPersonAimCamZoomFactor(zoomFactor);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCED08CBE8EBB97C7 | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonAimCamZoomFactorLimitsThisUpdate(): void {
        Citizen.invokeNative('0xCED08CBE8EBB97C7', 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C41E6BABC9E2112 | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonFlashEffectType(): void {
        Citizen.invokeNative('0x5C41E6BABC9E2112', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11FA5D3479C7DD47 | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonFlashEffectVehicleModelHash(vehicleModel: number | string): void {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        SetGameplayCamVehicleCameraName(vehicleModel);
    }

    /**
     * From b617 scripts:
     *
     * `CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");`
     * `CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");`
     * `CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO");`
     *
     * Hash: 0x21E253A7F8DA5DFB | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonFlashEffectVehicleModelName(vehicleName: string): void {
        SetGameplayCamVehicleCamera(vehicleName);
    }

    /**
     * Does nothing
     *
     * Hash: 0x103991D4A307D472 | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonShooterHeading(yaw: number): void {
        SetGameplayCamRawYaw(yaw);
    }

    /**
     * No comment provided
     *
     * Hash: 0x759E13EBC1C15C5A | Since: 323 | API-Set: unknown
     */
    export function setFirstPersonShooterPitch(pitch: number): void {
        SetGameplayCamRawPitch(pitch);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC91C6C55199308CA | Since: 323 | API-Set: unknown
     */
    export function setFlyCamCoordAndConstrain(cam: number | ICamera, pos: Vector3): void {
        SetFlyCamCoordAndConstrain(cam, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x503F5920162365B2 | Since: 323 | API-Set: unknown
     */
    export function setFlyCamHorizontalResponse(cam: number | ICamera): void {
        SetFlyCamHorizontalResponse(cam, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9D02130ECDD1D77 | Since: 323 | API-Set: unknown
     */
    export function setFlyCamMaxHeight(cam: number | ICamera, height: number): void {
        SetFlyCamMaxHeight(cam, height);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8B5C4A79CC18B94 | Since: 323 | API-Set: unknown
     */
    export function setFlyCamVerticalControlsThisUpdate(cam: number | ICamera): void {
        Citizen.invokeNative('0xC8B5C4A79CC18B94', cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE827B9382CFB41BA | Since: 791 | API-Set: unknown
     */
    export function setFlyCamVerticalResponse(cam: number | ICamera): void {
        SetFlyCamVerticalSpeedMultiplier(cam, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD79DF9F4D26E1C9 | Since: 323 | API-Set: unknown
     */
    export function setFollowCamIgnoreAttachParentMovementThisUpdate(): void {
        Citizen.invokeNative('0xDD79DF9F4D26E1C9');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8391C309684595A | Since: 323 | API-Set: unknown
     */
    export function setFollowPedCamLadderAlignThisUpdate(): void {
        Citizen.invokeNative('0xC8391C309684595A');
    }

    /**
     * From the scripts:
     *
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);`
     *
     * Hash: 0x44A113DD6FFC48D1 | Since: 323 | API-Set: unknown
     */
    export function setFollowPedCamThisUpdate(camName: string): boolean {
        return SetFollowPedCamThisUpdate(camName, 0);
    }

    /**
     * Sets the type of Player camera:
     *
     * 0 - Third Person Close
     * 1 - Third Person Mid
     * 2 - Third Person Far
     * 4 - First Person
     *
     * Hash: 0x5A4F9EDF1673F704 | Since: 323 | API-Set: unknown
     */
    export function setFollowPedCamViewMode(viewMode: number): void {
        SetFollowPedCamViewMode(viewMode);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DFE13ECDC1EC196 | Since: 323 | API-Set: unknown
     */
    export function setFollowVehicleCamHighAngleModeEveryUpdate(): void {
        Citizen.invokeNative('0x9DFE13ECDC1EC196', false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x91EF6EE6419E5B97 | Since: 323 | API-Set: unknown
     */
    export function setFollowVehicleCamHighAngleModeThisUpdate(): void {
        Citizen.invokeNative('0x91EF6EE6419E5B97', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C90CAB09951A12F | Since: 1365 | API-Set: unknown
     */
    export function setFollowVehicleCamSeatThisUpdate(seatIndex: number): void {
        SetFollowTurretSeatCam(seatIndex);
    }

    /**
     * Sets the type of Player camera in vehicles:
     * viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
     *
     * Hash: 0xAC253D7842768F48 | Since: 323 | API-Set: unknown
     */
    export function setFollowVehicleCamViewMode(viewMode: number): void {
        SetFollowVehicleCamViewMode(viewMode);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19464CB6E4078C8A | Since: 323 | API-Set: unknown
     */
    export function setFollowVehicleCamZoomLevel(zoomLevel: number): void {
        SetFollowVehicleCamZoomLevel(zoomLevel);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB90C6CCA48940F1 | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamAltitudeFovScalingState(): void {
        Citizen.invokeNative('0xDB90C6CCA48940F1', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFD3151CD37EA2245 | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(entity: number | IEntity): void {
        Citizen.invokeNative('0xFD3151CD37EA2245', entity);
    }

    /**
     * Forces gameplay cam to specified ped as if you were the ped or spectating it
     *
     * Hash: 0x8BBACBF51DA047A8 | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamFollowPedThisUpdate(ped: number | IPed): void {
        SetGameplayCamFollowPedThisUpdate(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2AED6301F67007D5 | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamIgnoreEntityCollisionThisUpdate(entity: number | IEntity): void {
        DisableCamCollisionForEntity(entity);
    }

    /**
     * some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
     *
     * Hash: 0x0225778816FDC28C | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamMaxMotionBlurStrengthThisUpdate(): void {
        Citizen.invokeNative('0x0225778816FDC28C', 0);
    }

    /**
     * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
     *
     * Hash: 0x487A82C650EB7799 | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamMotionBlurScalingThisUpdate(): void {
        CustomMenuCoordinates(0);
    }

    /**
     * Sets the camera position relative to heading in float from -360 to +360.
     *
     * Heading is alwyas 0 in aiming camera.
     *
     * Hash: 0xB4EC2312F4E5B1F1 | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamRelativeHeading(heading: number): void {
        SetGameplayCamRelativeHeading(heading);
    }

    /**
     * This native sets the camera's pitch (rotation on the x-axis).
     *
     * Hash: 0x6D0858B8EDFD2B7D | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamRelativePitch(angle: number, scalingFactor: number): void {
        SetGameplayCamRelativePitch(angle, scalingFactor);
    }

    /**
     * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
     *
     * Hash: 0xA87E00932DB4D85D | Since: 323 | API-Set: unknown
     */
    export function setGameplayCamShakeAmplitude(amplitude: number): void {
        SetGameplayCamShakeAmplitude(amplitude);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD51ADCD2D8BC0FB3 | Since: 323 | API-Set: unknown
     */
    export function setGameplayCoordHint(pos: Vector3, duration: number, blendOutDuration: number, blendInDuration: number): void {
        SetGameplayCoordHint(pos.x, pos.y, pos.z, duration, blendOutDuration, blendInDuration, 0);
    }

    /**
     * p8 could be some sort of flag. Scripts use:
     * -244429742
     * 0
     * 1726668277
     * 1844968929
     *
     * Hash: 0x189E955A8313E298 | Since: 323 | API-Set: unknown
     */
    export function setGameplayEntityHint(entity: number | IEntity, xOffset: number, yOffset: number, zOffset: number, time: number, easeInTime: number, easeOutTime: number): void {
        SetGameplayEntityHint(entity, xOffset, yOffset, zOffset, false, time, easeInTime, easeOutTime, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1F8363DFAD03848 | Since: 323 | API-Set: unknown
     */
    export function setGameplayHintBaseOrbitPitchOffset(value: number): void {
        SetGameplayHintBaseOrbitPitchOffset(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3433EADAAF7EE40 | Since: 323 | API-Set: unknown
     */
    export function setGameplayHintBlendToFollowPedMediumViewMode(toggle: boolean): void {
        SetGameplayHintAnimCloseup(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D7B620DAE436138 | Since: 323 | API-Set: unknown
     */
    export function setGameplayHintRelativeSideOffset(xOffset: number): void {
        SetGameplayHintAnimOffsetx(xOffset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC92717EF615B6704 | Since: 323 | API-Set: unknown
     */
    export function setGameplayHintRelativeVerticalOffset(yOffset: number): void {
        SetGameplayHintAnimOffsety(yOffset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF8BDBF3D573049A1 | Since: 323 | API-Set: unknown
     */
    export function setGameplayHintFollowDistanceScalar(value: number): void {
        SetGameplayHintFollowDistanceScalar(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x513403FB9C56211F | Since: 323 | API-Set: unknown
     */
    export function setGameplayHintFov(FOV: number): void {
        SetGameplayHintFov(FOV);
    }

    /**
     * No comment provided
     *
     * Hash: 0x83E87508A2CA2AC6 | Since: 323 | API-Set: unknown
     */
    export function setGameplayObjectHint(_object: number | IObject, xOffset: number, yOffset: number, zOffset: number, time: number, easeInTime: number, easeOutTime: number): void {
        SetGameplayObjectHint(_object, xOffset, yOffset, zOffset, false, time, easeInTime, easeOutTime);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B486269ACD548D3 | Since: 323 | API-Set: unknown
     */
    export function setGameplayPedHint(ped: number | IPed, x1: number, y1: number, z1: number, duration: number, blendOutDuration: number, blendInDuration: number): void {
        SetGameplayPedHint(ped, x1, y1, z1, false, duration, blendOutDuration, blendInDuration);
    }

    /**
     * Focuses the camera on the specified vehicle.
     *
     * Hash: 0xA2297E18F3E71C2E | Since: 323 | API-Set: unknown
     */
    export function setGameplayVehicleHint(vehicle: number | IVehicle, offsetX: number, offsetY: number, offsetZ: number, time: number, easeInTime: number, easeOutTime: number): void {
        SetGameplayVehicleHint(vehicle, offsetX, offsetY, offsetZ, false, time, easeInTime, easeOutTime);
    }

    /**
     * Forces gameplay cam to specified vehicle as if you were in it
     *
     * Hash: 0xE9EA16D6E54CDCA4 | Since: 323 | API-Set: unknown
     */
    export function setInVehicleCamStateThisUpdate(p0: number | IVehicle): void {
        SetInVehicleCamStateThisUpdate(p0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x469F2ECDEC046337 | Since: 323 | API-Set: unknown
     */
    export function setScriptedIsFirstPersonThisFrame(): void {
        Citizen.invokeNative('0x469F2ECDEC046337', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x79C0E43EB9B944E2 | Since: 1734 | API-Set: unknown
     */
    export function setTableGamesThisUpdate(hash: number | string): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return SetTableGamesCameraThisUpdate(hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42156508606DE65E | Since: 323 | API-Set: unknown
     */
    export function setThirdPersonAimCamNearClipThisUpdate(): void {
        SetThirdPersonAimCamNearClipThisUpdate(0);
    }

    /**
     * Seems to animate the gameplay camera zoom.
     *
     * Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
     * will animate the camera zooming in from 1000 meters away.
     *
     * Game scripts use it like this:
     *
     * // Setting this to 1 prevents V key from changing zoom
     * `PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);`
     *
     * // These restrict how far you can move cam up/down left/right
     * `CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);`
     * `CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);`
     *
     * `CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);`
     *
     * Hash: 0xDF2E1F7742402E81 | Since: 323 | API-Set: unknown
     */
    export function setThirdPersonCamOrbitDistanceLimitsThisUpdate(distance: number): void {
        AnimateGameplayCamZoom(0, distance);
    }

    /**
     * minimum: Degrees between -180f and 180f.
     * maximum: Degrees between -180f and 180f.
     *
     * Clamps the gameplay camera's current yaw.
     *
     * Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.
     *
     * Hash: 0x8F993D26E0CA5E8E | Since: 323 | API-Set: unknown
     */
    export function setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum: number, maximum: number): void {
        ClampGameplayCamYaw(minimum, maximum);
    }

    /**
     * minimum: Degrees between -90f and 90f.
     * maximum: Degrees between -90f and 90f.
     *
     * Clamps the gameplay camera's current pitch.
     *
     * Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.
     *
     * Hash: 0xA516C198B7DCA1E1 | Since: 323 | API-Set: unknown
     */
    export function setThirdPersonCamRelativePitchLimitsThisUpdate(minimum: number, maximum: number): void {
        ClampGameplayCamPitch(minimum, maximum);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA13B0222F3D94A94 | Since: 323 | API-Set: unknown
     */
    export function setUseHiDof(): void {
        SetUseHiDof();
    }

    /**
     * Only used in R* Script fm_mission_controller_2020
     *
     * Hash: 0x731A880555DA3647 | Since: 2699 | API-Set: unknown
     */
    export function setUseHiDofOnSyncedSceneThisUpdate(): void {
        SetUseHiDofInCutscene();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCD4EA924F42D01A | Since: 323 | API-Set: unknown
     */
    export function setWidescreenBorders(): void {
        SetWidescreenBorders(false, 0);
    }

    /**
     * Possible shake types (updated b617d):
     *
     * DEATH_FAIL_IN_EFFECT_SHAKE
     * DRUNK_SHAKE
     * FAMILY5_DRUG_TRIP_SHAKE
     * HAND_SHAKE
     * JOLT_SHAKE
     * LARGE_EXPLOSION_SHAKE
     * MEDIUM_EXPLOSION_SHAKE
     * SMALL_EXPLOSION_SHAKE
     * ROAD_VIBRATION_SHAKE
     * SKY_DIVING_SHAKE
     * VIBRATE_SHAKE
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0x6A25241C340D3822 | Since: 323 | API-Set: unknown
     */
    export function shakeCam(cam: number | ICamera, _type: string, amplitude: number): void {
        ShakeCam(cam, _type, amplitude);
    }

    /**
     * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xDCE214D9ED58F3CF | Since: 323 | API-Set: unknown
     */
    export function shakeCinematicCam(shakeType: string, amount: number): void {
        ShakeCinematicCam(shakeType, amount);
    }

    /**
     * Possible shake types (updated b617d):
     *
     * DEATH_FAIL_IN_EFFECT_SHAKE
     * DRUNK_SHAKE
     * FAMILY5_DRUG_TRIP_SHAKE
     * HAND_SHAKE
     * JOLT_SHAKE
     * LARGE_EXPLOSION_SHAKE
     * MEDIUM_EXPLOSION_SHAKE
     * SMALL_EXPLOSION_SHAKE
     * ROAD_VIBRATION_SHAKE
     * SKY_DIVING_SHAKE
     * VIBRATE_SHAKE
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xFD55E49555E017CF | Since: 323 | API-Set: unknown
     */
    export function shakeGameplayCam(shakeName: string, intensity: number): void {
        ShakeGameplayCam(shakeName, intensity);
    }

    /**
     * `CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);`
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xF4C8CF9E353AFECA | Since: 323 | API-Set: unknown
     */
    export function shakeScriptGlobal(): void {
        ShakeScriptGlobal(undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF33AB75780BA57DE | Since: 323 | API-Set: unknown
     */
    export function stopCamPointing(cam: number | ICamera): void {
        StopCamPointing(cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBDECF64367884AC3 | Since: 323 | API-Set: unknown
     */
    export function stopCamShaking(cam: number | ICamera): void {
        StopCamShaking(cam, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2238E588E588A6D7 | Since: 323 | API-Set: unknown
     */
    export function stopCinematicCamShaking(): void {
        StopCinematicCamShaking(false);
    }

    /**
     * Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
     *
     * Hash: 0x7660C6E75D3A078E | Since: 323 | API-Set: unknown
     */
    export function stopCinematicShot(p0: number | string): void {
        if (typeof p0 === 'string') p0 = misc.getHashKey(p0)
        StopCinematicShot(p0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x247ACBC4ABBC9D1C | Since: 323 | API-Set: unknown
     */
    export function stopCodeGameplayHint(): void {
        Citizen.invokeNative('0x247ACBC4ABBC9D1C', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x324C5AA411DA7737 | Since: 323 | API-Set: unknown
     */
    export function stopCutsceneCamShaking(): void {
        Citizen.invokeNative('0x324C5AA411DA7737', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EF93E9F3D08C178 | Since: 323 | API-Set: unknown
     */
    export function stopGameplayCamShaking(): void {
        StopGameplayCamShaking(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF46C581C61718916 | Since: 323 | API-Set: unknown
     */
    export function stopGameplayHint(): void {
        StopGameplayHint(false);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xCCD078C2665D2973 | Since: 323 | API-Set: unknown
     */
    export function stopGameplayHintBeingCancelledThisUpdate(): void {
        Citizen.invokeNative('0xCCD078C2665D2973', false);
    }

    /**
     * This native makes the gameplay camera zoom into first person/third person with a special effect.
     *
     * Hash: 0xC819F3CBB62BF692 | Since: 323 | API-Set: unknown
     */
    export function stopRenderingScriptCamsUsingCatchUp(render: boolean): void {
        StopRenderingScriptCamsUsingCatchUp(render, 0, 0, undefined);
    }

    /**
     * In drunk_controller.c4, sub_309
     * `if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {`
     * `CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);`
     * }
     *
     * Hash: 0x1C9D7949FA533490 | Since: 323 | API-Set: unknown
     */
    export function stopScriptGlobalShaking(): void {
        StopScriptGlobalShaking(false);
    }

    /**
     * p1: 0..16
     *
     * Hash: 0x5D96CFB59DA076A0 | Since: 2060 | API-Set: unknown
     */
    export function triggerVehiclePartBrokenShake(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x5D96CFB59DA076A0', vehicle, 0, 0);
    }

    /**
     * Sets gameplay camera to hash
     *
     * Hash: 0x425A920FDB9A0DDA | Since: 1180 | API-Set: unknown
     */
    export function useDedicatedStuntThisUpdate(camName: string): void {
        SetGameplayCamHash(camName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x271401846BD26E92 | Since: 323 | API-Set: unknown
     */
    export function useScriptCamForAmbientPopulationOriginThisFrame(): void {
        UseScriptCamForAmbientPopulationOriginThisFrame(false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6493CF69859B116A | Since: 791 | API-Set: unknown
     */
    export function useVehicleCamStuntSettingsThisUpdate(): void {
        UseVehicleCamStuntSettingsThisUpdate();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C48A1D6E3B33179 | Since: 323 | API-Set: unknown
     */
    export function wasFlyCamConstrainedOnPreviousUdpate(cam: number | ICamera): boolean {
        return Citizen.invokeNative('0x5C48A1D6E3B33179', cam);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34CFC4C2A38E83E3 | Since: 3258 | API-Set: unknown
     */
    export function activateCamWithInterpAndFovCurve(camTo: number | ICamera, camFrom: number | ICamera, duration: number, easeLocation: number, easeRotation: number, easeFov: number): void {
        ActivateCamWithInterpAndFovCurve(camTo, camFrom, duration, easeLocation, easeRotation, easeFov);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4592A16D36673ED | Since: 3095 | API-Set: unknown
     */
    export function getThirdPersonCamMaxOrbitDistanceSpring(): number {
        return Citizen.invokeNative('0xD4592A16D36673ED');
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC456FB703431785 | Since: 3095 | API-Set: unknown
     */
    export function getThirdPersonCamMinOrbitDistanceSpring(): number {
        return Citizen.invokeNative('0xBC456FB703431785');
    }

    /**
     * No comment provided
     *
     * Hash: 0xDDA77EE33C005AAF | Since: 3258 | API-Set: unknown
     */
    export function interpolateCamWithParams(camera: number | ICamera, camPosX: number, camPosY: number, camPosZ: number, camRotX: number, camRotY: number, camRotZ: number, fov: number, duration: number, posCurveType: number, rotCurveType: number, rotOrder: number, fovCurveType: number): void {
        InterpolateCamWithParams(camera, camPosX, camPosY, camPosZ, camRotX, camRotY, camRotZ, fov, duration, posCurveType, rotCurveType, rotOrder, fovCurveType);
    }

}


export namespace discord {
    /**
     * Sets a clickable button to be displayed in a player's Discord rich presence.
     *
     * Hash: 0xCBBC3FAC | Since: unknown | API-Set: client
     */
    export function setAction(index: number, label: string, url: string): void {
        SetDiscordRichPresenceAction(index, label, url);
    }

    /**
     * This native sets the app id for the discord rich presence implementation.
     *
     * Hash: 0x6A02254D | Since: unknown | API-Set: client
     */
    export function setAppId(appId: string): void {
        SetDiscordAppId(appId);
    }

    /**
     * This native sets the image asset for the discord rich presence implementation.
     *
     * Hash: 0x53DFD530 | Since: unknown | API-Set: client
     */
    export function setAsset(assetName: string): void {
        SetDiscordRichPresenceAsset(assetName);
    }

    /**
     * This native sets the small image asset for the discord rich presence implementation.
     *
     * Hash: 0xF61D04C4 | Since: unknown | API-Set: client
     */
    export function setAssetSmall(assetName: string): void {
        SetDiscordRichPresenceAssetSmall(assetName);
    }

    /**
     * This native sets the hover text of the small image asset for the discord rich presence implementation.
     *
     * Hash: 0x35E62B6A | Since: unknown | API-Set: client
     */
    export function setAssetSmallText(text: string): void {
        SetDiscordRichPresenceAssetSmallText(text);
    }

    /**
     * This native sets the hover text of the image asset for the discord rich presence implementation.
     *
     * Hash: 0xB029D2FA | Since: unknown | API-Set: client
     */
    export function setAssetText(text: string): void {
        SetDiscordRichPresenceAssetText(text);
    }

    /**
     * Sets the player's rich presence detail state for social platform providers to a specified string.
     *
     * Hash: 0x7BDCBD45 | Since: unknown | API-Set: client
     */
    export function setDetailState(presenceState: string): void {
        SetRichPresence(presenceState);
    }

}


export namespace dui {
    /**
     * Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.
     *
     * Hash: 0x23EAF899 | Since: unknown | API-Set: client
     */
    export function create(url: string, width: number, height: number): number {
        return CreateDui(url, width, height);
    }

    /**
     * Destroys a DUI browser.
     *
     * Hash: 0xA085CB10 | Since: unknown | API-Set: client
     */
    export function destroy(duiObject: number): void {
        DestroyDui(duiObject);
    }

    /**
     * Returns the NUI window handle for a specified DUI browser object.
     *
     * Hash: 0x1655D41D | Since: unknown | API-Set: client
     */
    export function getHandle(duiObject: number): string {
        return GetDuiHandle(duiObject);
    }

    /**
     * Returns whether or not a browser is created for a specified DUI browser object.
     *
     * Hash: 0x7AAC3B4C | Since: unknown | API-Set: client
     */
    export function isAvailable(duiObject: number): boolean {
        return IsDuiAvailable(duiObject);
    }

    /**
     * Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.
     *
     * Hash: 0xCD380DA9 | Since: unknown | API-Set: client
     */
    export function sendMessage(duiObject: number, jsonString: string): void {
        SendDuiMessage(duiObject, jsonString);
    }

    /**
     * Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.
     *
     * Hash: 0x5D01F191 | Since: unknown | API-Set: client
     */
    export function sendMouseDown(duiObject: number, button: string): void {
        SendDuiMouseDown(duiObject, button);
    }

    /**
     * Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.
     *
     * Hash: 0xD9D7A0AA | Since: unknown | API-Set: client
     */
    export function sendMouseMove(duiObject: number, x: number, y: number): void {
        SendDuiMouseMove(duiObject, x, y);
    }

    /**
     * Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.
     *
     * Hash: 0x1D735B93 | Since: unknown | API-Set: client
     */
    export function sendMouseUp(duiObject: number, button: string): void {
        SendDuiMouseUp(duiObject, button);
    }

    /**
     * Injects a 'mouse wheel' event for a DUI object.
     *
     * Hash: 0x2D62133A | Since: unknown | API-Set: client
     */
    export function sendMouseWheel(duiObject: number, deltaY: number, deltaX: number): void {
        SendDuiMouseWheel(duiObject, deltaY, deltaX);
    }

    /**
     * Navigates the specified DUI browser to a different URL.
     *
     * Hash: 0xF761D9F3 | Since: unknown | API-Set: client
     */
    export function setUrl(duiObject: number, url: string): void {
        SetDuiUrl(duiObject, url);
    }

}


export namespace mumble {
    /**
     * Starts listening to the specified channel, when available.
     *
     * Hash: 0xC79F44BF | Since: unknown | API-Set: client
     */
    export function addVoiceChannelListen(channel: number): void {
        MumbleAddVoiceChannelListen(channel);
    }

    /**
     * Adds the specified channel to the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x4D386C9E | Since: unknown | API-Set: client
     */
    export function addVoiceTargetChannel(targetId: number, channel: number): void {
        MumbleAddVoiceTargetChannel(targetId, channel);
    }

    /**
     * Adds the specified player to the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x32C5355A | Since: unknown | API-Set: client
     */
    export function addVoiceTargetPlayer(targetId: number, player: number | string | IPlayer): void {
        MumbleAddVoiceTargetPlayer(targetId, player);
    }

    /**
     * Adds the specified player to the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x25F2B65F | Since: unknown | API-Set: client
     */
    export function addVoiceTargetPlayerByServerId(targetId: number, serverId: number): void {
        MumbleAddVoiceTargetPlayerByServerId(targetId, serverId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF847807 | Since: unknown | API-Set: client
     */
    export function clearVoiceChannel(): void {
        MumbleClearVoiceChannel();
    }

    /**
     * Clears the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x8555DCBA | Since: unknown | API-Set: client
     */
    export function clearVoiceTarget(targetId: number): void {
        MumbleClearVoiceTarget(targetId);
    }

    /**
     * Clears channels from the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x5EA72E76 | Since: unknown | API-Set: client
     */
    export function clearVoiceTargetChannels(targetId: number): void {
        MumbleClearVoiceTargetChannels(targetId);
    }

    /**
     * Clears players from the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x912E21DA | Since: unknown | API-Set: client
     */
    export function clearVoiceTargetPlayers(targetId: number): void {
        MumbleClearVoiceTargetPlayers(targetId);
    }

    /**
     * Check whether specified channel exists on the Mumble server.
     *
     * Hash: 0xCC8CA25 | Since: unknown | API-Set: client
     */
    export function doesChannelExist(channel: number): boolean {
        return MumbleDoesChannelExist(channel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84E02A32 | Since: unknown | API-Set: client
     */
    export function getTalkerProximity(): number {
        return MumbleGetTalkerProximity();
    }

    /**
     * Returns the mumble voice channel from a player's server id.
     *
     * Hash: 0x221C09F1 | Since: unknown | API-Set: client
     */
    export function getVoiceChannelFromServerId(serverId: number): number {
        return MumbleGetVoiceChannelFromServerId(serverId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE820BC10 | Since: unknown | API-Set: client
     */
    export function isActive(): boolean {
        return MumbleIsActive();
    }

    /**
     * This native will return true if the user succesfully connected to the voice server.
     * If the user disabled the voice-chat setting it will return false.
     *
     * Hash: 0xB816370A | Since: unknown | API-Set: client
     */
    export function isConnected(): boolean {
        return MumbleIsConnected();
    }

    /**
     * No comment provided
     *
     * Hash: 0x33EEF97F | Since: unknown | API-Set: client
     */
    export function isPlayerTalking(player: number | string | IPlayer): boolean {
        return MumbleIsPlayerTalking(player);
    }

    /**
     * Stops listening to the specified channel.
     *
     * Hash: 0x231523B7 | Since: unknown | API-Set: client
     */
    export function removeVoiceChannelListen(channel: number): void {
        MumbleRemoveVoiceChannelListen(channel);
    }

    /**
     * Removes the specified voice channel from the user's voice targets.
     *
     * Performs the opposite operation of [MUMBLE_ADD_VOICE_TARGET_CHANNEL](#\_0x4D386C9E)
     *
     * Hash: 0x268DB867 | Since: unknown | API-Set: client
     */
    export function removeVoiceTargetChannel(targetId: number, channel: number): void {
        MumbleRemoveVoiceTargetChannel(targetId, channel);
    }

    /**
     * Removes the specified player from the user's voice targets.
     *
     * Performs the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER](#\_0x32C5355A)
     *
     * Hash: 0x88CD646F | Since: unknown | API-Set: client
     */
    export function removeVoiceTargetPlayer(targetId: number, player: number | string | IPlayer): void {
        MumbleRemoveVoiceTargetPlayer(targetId, player);
    }

    /**
     * Removes the specified player from the user's voice targets.
     *
     * Performs the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID](#\_0x25F2B65F)
     *
     * Hash: 0x930BD34B | Since: unknown | API-Set: client
     */
    export function removeVoiceTargetPlayerByServerId(targetId: number, serverId: number): void {
        MumbleRemoveVoiceTargetPlayerByServerId(targetId, serverId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD932A3F3 | Since: unknown | API-Set: client
     */
    export function setActive(state: boolean): void {
        MumbleSetActive(state);
    }

    /**
     * Sets the current input distance. The player will be able to talk to other players within this distance.
     *
     * Hash: 0x1B1052E2 | Since: unknown | API-Set: client
     */
    export function setAudioInputDistance(distance: number): void {
        MumbleSetAudioInputDistance(distance);
    }

    /**
     * Use this native to disable noise suppression and high pass filters.
     *
     * The possible intents for this are as follows (backticks are used to represent hashes):
     *
     * | Index | Description |
     * |-|-|
     * | \`speech\` | Default intent |
     * | \`music\` | Disable noise suppression and high pass filter |
     *
     * Hash: 0x6383526B | Since: unknown | API-Set: client
     */
    export function setAudioInputIntent(intentHash: number | string): void {
        if (typeof intentHash === 'string') intentHash = misc.getHashKey(intentHash)
        MumbleSetAudioInputIntent(intentHash);
    }

    /**
     * Sets the current output distance. The player will be able to hear other players talking within this distance.
     *
     * Hash: 0x74C597D9 | Since: unknown | API-Set: client
     */
    export function setAudioOutputDistance(distance: number): void {
        MumbleSetAudioOutputDistance(distance);
    }

    /**
     * Changes the Mumble server address to connect to, and reconnects to the new address.
     *
     * Setting the address to an empty string and the port to -1 will reset to the built in FXServer Mumble Implementation.
     *
     * Hash: 0xE6EB2CD8 | Since: unknown | API-Set: client
     */
    export function setServerAddress(address: string, port: number): void {
        MumbleSetServerAddress(address, port);
    }

    /**
     * Sets the audio submix ID for a specified player using Mumble 'Native Audio' functionality.
     *
     * Hash: 0xFE3A3054 | Since: unknown | API-Set: client
     */
    export function setSubmixForServerId(serverId: number, submixId: number): void {
        MumbleSetSubmixForServerId(serverId, submixId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x74E927B0 | Since: unknown | API-Set: client
     */
    export function setTalkerProximity(value: number): void {
        MumbleSetTalkerProximity(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8737EEE8 | Since: unknown | API-Set: client
     */
    export function setVoiceChannel(channel: number): void {
        MumbleSetVoiceChannel(channel);
    }

    /**
     * Sets the current Mumble voice target ID to broadcast voice to.
     *
     * Hash: 0x960A4A95 | Since: unknown | API-Set: client
     */
    export function setVoiceTarget(targetId: number): void {
        MumbleSetVoiceTarget(targetId);
    }

    /**
     * Overrides the output volume for a particular player on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.
     *
     * Set to -1.0 to reset the Volume override.
     *
     * Hash: 0x61C309E3 | Since: unknown | API-Set: client
     */
    export function setVolumeOverride(player: number | string | IPlayer, volume: number): void {
        MumbleSetVolumeOverride(player, volume);
    }

    /**
     * Overrides the output volume for a particular player with the specified server id and player name on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.
     *
     * Hash: 0xCE8E25B4 | Since: unknown | API-Set: client
     */
    export function setVolumeOverrideByServerId(serverId: number, volume: number): void {
        MumbleSetVolumeOverrideByServerId(serverId, volume);
    }

}


export namespace nui {
    /**
     * No comment provided
     *
     * Hash: 0xBDBA226F | Since: unknown | API-Set: client
     */
    export function getCursorPosition(): [number, number] {
        return GetNuiCursorPosition();
    }

    /**
     * Returns the current NUI focus state previously set with `SET_NUI_FOCUS`.
     *
     * Hash: 0x98545E6D | Since: unknown | API-Set: client
     */
    export function isFocused(): boolean {
        return IsNuiFocused();
    }

    /**
     * Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`.
     *
     * Hash: 0x39C9DC92 | Since: unknown | API-Set: client
     */
    export function isFocusKeepingInput(): boolean {
        return IsNuiFocusKeepingInput();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC59B980C | Since: unknown | API-Set: client
     */
    export function registerCallback(callbackType: string, callback: Function): void {
        RegisterNuiCallback(callbackType, callback);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD03CDA9 | Since: unknown | API-Set: client
     */
    export function registerCallbackType(callbackType: string): void {
        RegisterNuiCallbackType(callbackType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8AE9C2F | Since: unknown | API-Set: client
     */
    export function registerRawCallback(callbackType: string, callback: Function): void {
        RegisterRawNuiCallback(callbackType, callback);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78608ACB | Since: unknown | API-Set: client
     */
    export function sendMessage(jsonString: string): boolean {
        return SendNuiMessage(jsonString);
    }

    /**
     * Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,
     * you will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.
     *
     * Hash: 0x1722C938 | Since: unknown | API-Set: client
     */
    export function setManualShutdownLoadingScreen(manualShutdown: boolean): void {
        SetManualShutdownLoadingScreenNui(manualShutdown);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B98AE30 | Since: unknown | API-Set: client
     */
    export function setFocus(hasFocus: boolean, hasCursor: boolean): void {
        SetNuiFocus(hasFocus, hasCursor);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FF5E5F8 | Since: unknown | API-Set: client
     */
    export function setFocusKeepInput(keepInput: boolean): void {
        SetNuiFocusKeepInput(keepInput);
    }

    /**
     * Set the z-index of the NUI resource.
     *
     * Hash: 0x3734AAFF | Since: unknown | API-Set: client
     */
    export function setZindex(zIndex: number): void {
        SetNuiZindex(zIndex);
    }

    /**
     * Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.
     *
     * Hash: 0xB9234AFB | Since: unknown | API-Set: client
     */
    export function shutdownLoadingScreen(): void {
        ShutdownLoadingScreenNui();
    }

    /**
     * Will unregister and cleanup a registered NUI callback handler.
     *
     * Use along side the REGISTER_RAW_NUI_CALLBACK native.
     *
     * Hash: 0x7FB46432 | Since: unknown | API-Set: client
     */
    export function unregisterRawCallback(callbackType: string): void {
        UnregisterRawNuiCallback(callbackType);
    }

}


export namespace object {
    /**
     * Returns a list of door system entries: a door system hash (see [ADD_DOOR_TO_SYSTEM](#\_0x6F8838D03D1DC226)) and its object handle.
     *
     * The data returned adheres to the following layout:
     *
     * ```
     * [{doorHash1, doorHandle1}, ..., {doorHashN, doorHandleN}]
     * ```
     *
     * Hash: 0xF65BBA4B | Since: unknown | API-Set: client
     */
    export function doorSystemGetActive(): number {
        return DoorSystemGetActive();
    }

    /**
     * No comment provided
     *
     * Hash: 0x237613B3 | Since: unknown | API-Set: client
     */
    export function doorSystemGetSize(): number {
        return DoorSystemGetSize();
    }

    /**
     * doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
     * p5 only set to true in single player native scripts.
     * If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
     *
     * door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
     * All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.
     *
     * Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)
     *
     * Hash: 0x6F8838D03D1DC226 | Since: 323 | API-Set: unknown
     */
    export function addDoorToSystem(doorHash: number | string, modelHash: number | string, pos: Vector3, scriptDoor: boolean, isLocal: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        AddDoorToSystem(doorHash, modelHash, pos.x, pos.y, pos.z, false, scriptDoor, isLocal, undefined);
    }

    /**
     * Adds an area that seems to be related to pickup physics behavior.
     * Max amount of areas is 10. Only works in multiplayer.
     *
     * Hash: 0xD4A7A435B3710D05 | Since: 1290 | API-Set: unknown
     */
    export function addExtendedPickupProbeArea(pos: Vector3, radius: number): void {
        Citizen.invokeNative('0xD4A7A435B3710D05', pos.x, pos.y, pos.z, radius);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0xFDC07C58E8AAB715 | Since: 1734 | API-Set: unknown
     */
    export function allowAllPlayersToCollectPickupsOfType(pickupHash: number | string): void {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        Citizen.invokeNative('0xFDC07C58E8AAB715', pickupHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xABDABF4E1EDECBFA | Since: 1365 | API-Set: unknown
     */
    export function allowDamageEventsForNonNetworkeds(value: boolean): void {
        SetUnkGlobalBoolRelatedToDamage(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x834344A414C7C85D | Since: 2372 | API-Set: unknown
     */
    export function allowPickupArrowMarkerWhenUncollectable(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x834344A414C7C85D', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA059C615DE9DD03 | Since: 1180 | API-Set: unknown
     */
    export function allowPickupByNoneParticipant(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0xAA059C615DE9DD03', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x641F272B52E2F0F8 | Since: 877 | API-Set: unknown
     */
    export function allowPortablePickupToMigrateToNonParticipants(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x641F272B52E2F0F8', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x85B6C850546FDDE2 | Since: 323 | API-Set: unknown
     */
    export function areEntitiesEntirelyInsideGarage(garageHash: number | string): boolean {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        return AreEntitiesEntirelyInsideGarage(garageHash, false, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8DC39368BDD57755 | Since: 323 | API-Set: unknown
     */
    export function attachPortablePickupToPed(pickupObject: number | IObject, ped: number | IPed): void {
        AttachPortablePickupToPed(pickupObject, ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E3F1B1B891A2AAA | Since: 573 | API-Set: unknown
     */
    export function blockPlayersForAmbientPickup(): void {
        Citizen.invokeNative('0x1E3F1B1B891A2AAA', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7E4C198B0185900 | Since: 323 | API-Set: unknown
     */
    export function breakFragmentChild(p0: number | IObject): void {
        BreakObjectFragmentChild(p0, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2C1F5E92AFE49ED | Since: 323 | API-Set: unknown
     */
    export function clearAllPickupRewardTypeSuppression(): void {
        Citizen.invokeNative('0xA2C1F5E92AFE49ED');
    }

    /**
     * Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
     *
     * Hash: 0xB7C6D80FB371659A | Since: 1290 | API-Set: unknown
     */
    export function clearExtendedPickupProbeAreas(): void {
        Citizen.invokeNative('0xB7C6D80FB371659A');
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA05194260CDCDF9 | Since: 678 | API-Set: unknown
     */
    export function clearGarage(garageHash: number | string, isNetwork: boolean): void {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        ClearGarageArea(garageHash, isNetwork);
    }

    /**
     * No comment provided
     *
     * Hash: 0x190428512B240692 | Since: 323 | API-Set: unknown
     */
    export function clearsInsideGarage(garageHash: number | string, vehicles: boolean, peds: boolean, objects: boolean, isNetwork: boolean): void {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        ClearObjectsInsideGarage(garageHash, vehicles, peds, objects, isNetwork);
    }

    /**
     * No comment provided
     *
     * Hash: 0x762DB2D380B48D04 | Since: 323 | API-Set: unknown
     */
    export function clearPickupRewardTypeSuppression(rewardType: number): void {
        Citizen.invokeNative('0x762DB2D380B48D04', rewardType);
    }

    /**
     * Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
     * Related to its "Pre-networked state"?
     *
     * Hash: 0x701FDA1E82076BA4 | Since: 323 | API-Set: unknown
     */
    export function closeAllBarriersForRace(): void {
        Citizen.invokeNative('0x701FDA1E82076BA4');
    }

    /**
     * No comment provided
     *
     * Hash: 0x66A49D021870FE88 | Since: 323 | API-Set: unknown
     */
    export function closeSafehouseGarages(): void {
        Citizen.invokeNative('0x66A49D021870FE88');
    }

    /**
     * returns pickup hash.
     *
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x5EAAD83F8CFB4575 | Since: 323 | API-Set: unknown
     */
    export function convertOldPickupTypeToNew(pickupHash: number | string): number {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        return GetPickupHash(pickupHash);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x673966A0C0FD7171 | Since: 323 | API-Set: unknown
     */
    export function createAmbientPickup(pickupHash: number | string, pos: Vector3, flags: number, value: number, modelHash: number | string): number {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreateAmbientPickup(pickupHash, pos.x, pos.y, pos.z, flags, value, modelHash, false, false);
    }

    /**
     * Spawns one or more money pickups.
     *
     * x: The X-component of the world position to spawn the money pickups at.
     * y: The Y-component of the world position to spawn the money pickups at.
     * z: The Z-component of the world position to spawn the money pickups at.
     * value: The combined value of the pickups (in dollars).
     * amount: The number of pickups to spawn.
     * model: The model to use, or 0 for default money model.
     *
     * Example:
     * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
     *
     * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
     *
     * ==============================================
     *
     * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
     *
     * Hash: 0x0589B5E791CE9B2B | Since: 323 | API-Set: unknown
     */
    export function createMoneyPickups(pos: Vector3, value: number, amount: number, model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        CreateMoneyPickups(pos.x, pos.y, pos.z, value, amount, model);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C93764223E29C50 | Since: 2372 | API-Set: unknown
     */
    export function createNonNetworkedAmbientPickup(pickupHash: number | string, pos: Vector3, flags: number, value: number, modelHash: number | string): number {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreateNonNetworkedAmbientPickup(pickupHash, pos.x, pos.y, pos.z, flags, value, modelHash, false, false);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x125494B98A21AAF7 | Since: 323 | API-Set: unknown
     */
    export function createNonNetworkedPortablePickup(pickupHash: number | string, pos: Vector3, placeOnGround: boolean, modelHash: number | string): number {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreateNonNetworkedPortablePickup(pickupHash, pos.x, pos.y, pos.z, placeOnGround, modelHash);
    }

    /**
     * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
     *
     * Hash: 0x509D5878EB39E842 | Since: 323 | API-Set: unknown
     */
    export function create(modelHash: number | string, pos: Vector3, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreateObject(modelHash, pos.x, pos.y, pos.z, isNetwork, bScriptHostObj, dynamic);
    }

    /**
     * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
     *
     * Hash: 0x9A294B2138ABB884 | Since: 323 | API-Set: unknown
     */
    export function createNoOffset(modelHash: number | string, pos: Vector3, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreateObjectNoOffset(modelHash, pos.x, pos.y, pos.z, isNetwork, bScriptHostObj, dynamic, undefined);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0xFBA08C503DD5FA58 | Since: 323 | API-Set: unknown
     */
    export function createPickup(pickupHash: number | string, pos: Vector3, value: number, modelHash: number | string): any {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreatePickup(pickupHash, pos.x, pos.y, pos.z, 0, value, false, modelHash);
    }

    /**
     * flags:
     * 8 (1 << 3): place on ground
     * 512 (1 << 9): spin around
     *
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x891804727E0A98B7 | Since: 323 | API-Set: unknown
     */
    export function createPickupRotate(pickupHash: number | string, pos: Vector3, rot: Vector3, flag: number, amount: number, modelHash: number | string): any {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreatePickupRotate(pickupHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, flag, amount, undefined, false, modelHash);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x2EAF1FDB2FB55698 | Since: 323 | API-Set: unknown
     */
    export function createPortablePickup(pickupHash: number | string, pos: Vector3, placeOnGround: boolean, modelHash: number | string): number {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CreatePortablePickup(pickupHash, pos.x, pos.y, pos.z, placeOnGround, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE05F6AEEFEB0BB02 | Since: 1180 | API-Set: unknown
     */
    export function damageFragmentChild(): void {
        Citizen.invokeNative('0xE05F6AEEFEB0BB02', undefined, undefined, undefined);
    }

    /**
     * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0x539E0AE3E6634B9F | Since: 323 | API-Set: unknown
     */
    export function deleteObject(_object: number | IObject): void {
        DeleteObject(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF463D1E9A0AECB1 | Since: 323 | API-Set: unknown
     */
    export function detachPortablePickupFromPed(pickupObject: number | IObject): void {
        DetachPortablePickupFromPed(pickupObject);
    }

    /**
     * Sets a flag. A valid id is 0x157DC10D
     *
     * Hash: 0x659F9D71F52843F8 | Since: 1290 | API-Set: unknown
     */
    export function disableTidyingUpInGarage(id: number, toggle: boolean): void {
        Citizen.invokeNative('0x659F9D71F52843F8', id, toggle);
    }

    /**
     * p5 is usually 0.
     *
     * Hash: 0xBFA48E2FF417213F | Since: 323 | API-Set: unknown
     */
    export function doesOfTypeExistAtCoords(pos: Vector3, radius: number, hash: number | string): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return DoesObjectOfTypeExistAtCoords(pos.x, pos.y, pos.z, radius, hash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFC1CA75AD4074D1 | Since: 323 | API-Set: unknown
     */
    export function doesPickupExist(pickup: any): boolean {
        return DoesPickupExist(pickup);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9EFB6DBF7DAAEA3 | Since: 323 | API-Set: unknown
     */
    export function doesPickupObjectExist(pickupObject: number | IObject): boolean {
        return DoesPickupObjectExist(pickupObject);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0xF9C36251F6E48E33 | Since: 323 | API-Set: unknown
     */
    export function doesPickupOfTypeExistInArea(pickupHash: number | string, pos: Vector3, radius: number): boolean {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        return DoesPickupOfTypeExistInArea(pickupHash, pos.x, pos.y, pos.z, radius);
    }

    /**
     * Returns true if a destructible object with this handle exists, false otherwise.
     *
     * Hash: 0x52AF537A0C5B8AAD | Since: 323 | API-Set: unknown
     */
    export function doesRayfireMapExist(_object: number | IObject): boolean {
        return DoesRayfireMapObjectExist(_object);
    }

    /**
     * Search radius: 0.5
     *
     * Hash: 0x589F80B325CC82C5 | Since: 323 | API-Set: unknown
     */
    export function doorSystemFindExistingDoor(pos: Vector3, modelHash: number | string): [boolean, number] {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return DoorSystemFindExistingDoor(pos.x, pos.y, pos.z, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE851471AEFC3374F | Since: 1868 | API-Set: unknown
     */
    export function doorSystemGetAutomaticDistance(doorHash: number | string): number {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return DoorSystemGetAutomaticDistance(doorHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4BC2854478F3A749 | Since: 323 | API-Set: unknown
     */
    export function doorSystemGetDoorPendingState(doorHash: number | string): number {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return DoorSystemGetDoorPendingState(doorHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x160AA1B32F6139B8 | Since: 323 | API-Set: unknown
     */
    export function doorSystemGetDoorState(doorHash: number | string): number {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return DoorSystemGetDoorState(doorHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF97CDD4FC08FD34 | Since: 323 | API-Set: unknown
     */
    export function doorSystemGetIsPhysicsLoaded(): boolean {
        return DoorSystemGetIsPhysicsLoaded(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8562FD8AB1E94D39 | Since: 3407 | API-Set: unknown
     */
    export function doorSystemGetIsSpringRemoved(doorHash: number | string): boolean {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return Citizen.invokeNative('0x8562FD8AB1E94D39', doorHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x65499865FCA6E5EC | Since: 323 | API-Set: unknown
     */
    export function doorSystemGetOpenRatio(doorHash: number | string): number {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return DoorSystemGetOpenRatio(doorHash);
    }

    /**
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0x9BA001CB45CBF627 | Since: 323 | API-Set: unknown
     */
    export function doorSystemSetAutomaticDistance(doorHash: number | string, distance: number, requestDoor: boolean, forceUpdate: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        DoorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate);
    }

    /**
     * Includes networking check: ownership vs. or the door itself **isn't** networked.
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0x03C27E13B42A0E82 | Since: 323 | API-Set: unknown
     */
    export function doorSystemSetAutomaticRate(doorHash: number | string, rate: number, requestDoor: boolean, forceUpdate: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        DoorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate);
    }

    /**
     * Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
     *
     * Hash: 0xA85A21582451E951 | Since: 323 | API-Set: unknown
     */
    export function doorSystemSetDoorOpenForRaces(doorHash: number | string): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        Citizen.invokeNative('0xA85A21582451E951', doorHash, false);
    }

    /**
     * Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
     * `requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
     * `forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
     * Door lock states:
     * 0: UNLOCKED
     * 1: LOCKED
     * 2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
     * 3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
     * 4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
     * 5: DOORSTATE_FORCE_OPEN_THIS_FRAME
     * 6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
     *
     * Hash: 0x6BAB9442830C7F53 | Since: 323 | API-Set: unknown
     */
    export function doorSystemSetDoorState(doorHash: number | string, state: number, requestDoor: boolean, forceUpdate: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        DoorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate);
    }

    /**
     * Includes networking check: ownership vs. or the door itself **isn't** networked.
     *
     * Hash: 0xD9B71952F78A2640 | Since: 323 | API-Set: unknown
     */
    export function doorSystemSetHoldOpen(doorHash: number | string, toggle: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        DoorSystemSetHoldOpen(doorHash, toggle);
    }

    /**
     * Sets the ajar angle of a door.
     * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0xB6E6FBA95C7324AC | Since: 323 | API-Set: unknown
     */
    export function doorSystemSetOpenRatio(doorHash: number | string, ajar: number, requestDoor: boolean, forceUpdate: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        DoorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate);
    }

    /**
     * Includes networking check: ownership vs. or the door itself **isn't** networked.
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0xC485E07E4F0B7958 | Since: 323 | API-Set: unknown
     */
    export function doorSystemSetSpringRemoved(doorHash: number | string, removed: boolean, requestDoor: boolean, forceUpdate: boolean): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        DoorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2E1A7133DD356A6 | Since: 323 | API-Set: unknown
     */
    export function enableSavingInGarage(garageHash: number | string, toggle: boolean): void {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        EnableSavingInGarage(garageHash, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9C1681347C8BD15 | Since: 323 | API-Set: unknown
     */
    export function fixFragment(_object: number | IObject): void {
        FixObjectFragment(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C134B4DF76025D0 | Since: 1180 | API-Set: unknown
     */
    export function forceActivatePhysicsOnUnfixedPickup(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x4C134B4DF76025D0', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x758A5C1B3B1E1990 | Since: 1011 | API-Set: unknown
     */
    export function forcePickupRegenerate(): void {
        ForcePickupRegenerate(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x394CD08E31313C28 | Since: 944 | API-Set: unknown
     */
    export function forcePickupRotateFaceUp(): void {
        Citizen.invokeNative('0x394CD08E31313C28');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CE2E45A5CE2E45A | Since: 2545 | API-Set: unknown
     */
    export function forcePortablePickupLastAccessiblePositionSetting(_object: number | IObject): void {
        Citizen.invokeNative('0x5CE2E45A5CE2E45A', _object);
    }

    /**
     * Has 8 params in the latest patches.
     *
     * isMission - if true doesn't return mission objects
     *
     * Hash: 0xE143FA2249364369 | Since: 323 | API-Set: unknown
     */
    export function getClosestOfType(pos: Vector3, radius: number, modelHash: number | string, isMission: boolean): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetClosestObjectOfType(pos.x, pos.y, pos.z, radius, modelHash, isMission, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x163F8B586BC95F2A | Since: 323 | API-Set: unknown
     */
    export function getCoordsAndRotationOfClosestOfType(pos: Vector3, radius: number, modelHash: number | string, rotationOrder: number): [boolean, Vector3, Vector3] {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetCoordsAndRotationOfClosestObjectOfType(pos.x, pos.y, pos.z, radius, modelHash, rotationOrder);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB41D07A45A6D4B7 | Since: 323 | API-Set: unknown
     */
    export function getDefaultAmmoForWeaponPickup(pickupHash: number | string): number {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        return Citizen.invokeNative('0xDB41D07A45A6D4B7', pickupHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2542269291C6AC84 | Since: 1180 | API-Set: unknown
     */
    export function getHasBeenCompletelyDestroyed(): boolean {
        return Citizen.invokeNative('0x2542269291C6AC84', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3BD770D281982DB5 | Since: 1604 | API-Set: unknown
     */
    export function getIsArticulatedJointAtMaxAngle(): boolean {
        return Citizen.invokeNative('0x3BD770D281982DB5', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43C677F1E1158005 | Since: 1604 | API-Set: unknown
     */
    export function getIsArticulatedJointAtMinAngle(_object: number | IObject): boolean {
        return GetIsArenaPropPhysicsDisabled(_object, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB6FBFD079B8D0596 | Since: 323 | API-Set: unknown
     */
    export function getFragmentDamageHealth(): number {
        return GetObjectFragmentDamageHealth(undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE84EB93729C5F36A | Since: 757 | API-Set: unknown
     */
    export function getTintIndex(_object: number | IObject): number {
        return GetObjectTextureVariation(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x163E252DE035A133 | Since: 323 | API-Set: unknown
     */
    export function getOffsetFromCoordAndHeadingInWorldCoords(pos: Vector3, heading: number, xOffset: number, yOffset: number, zOffset: number): Vector3 {
        return new Vector3(GetOffsetFromCoordAndHeadingInWorldCoords(pos.x, pos.y, pos.z, heading, xOffset, yOffset, zOffset));
    }

    /**
     * No comment provided
     *
     * Hash: 0x225B8B35C88029B3 | Since: 323 | API-Set: unknown
     */
    export function getPickupCoords(pickup: any): Vector3 {
        return new Vector3(GetPickupCoords(pickup));
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3ECA65C7317F174 | Since: 944 | API-Set: unknown
     */
    export function getPickupGenerationRangeMultiplier(): number {
        return GetPickupGenerationRangeMultiplier();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5099BC55630B25AE | Since: 323 | API-Set: unknown
     */
    export function getPickup(pickup: any): number {
        return GetPickupObject(pickup);
    }

    /**
     * Returns the pickup hash for the given weapon hash
     *
     * Hash: 0xD6429A016084F1A5 | Since: 1290 | API-Set: unknown
     */
    export function getPickupTypeFromWeaponHash(weaponHash: number | string): number {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        return GetPickupHashFromWeapon(weaponHash);
    }

    /**
     * Example:
     * `OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");`
     *
     * Hash: 0xB48FCED898292E52 | Since: 323 | API-Set: unknown
     */
    export function getRayfireMap(pos: Vector3, radius: number, name: string): number {
        return GetRayfireMapObject(pos.x, pos.y, pos.z, radius, name);
    }

    /**
     * `object`: The des-object handle to get the animation progress from.
     * Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
     *
     * Hash: 0x260EE4FDBDF4DB01 | Since: 323 | API-Set: unknown
     */
    export function getRayfireMapAnimPhase(_object: number | IObject): number {
        return GetRayfireMapObjectAnimPhase(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E16BC2503FF1FF0 | Since: 323 | API-Set: unknown
     */
    export function getSafePickupCoords(pos: Vector3): Vector3 {
        return new Vector3(GetSafePickupCoords(pos.x, pos.y, pos.z, 0, 0));
    }

    /**
     * locked is 0 if no door is found
     * locked is 0 if door is unlocked
     * locked is 1 if door is found and unlocked.
     *
     * -------------
     * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
     *
     * Hash: 0xEDC1A5B84AEF33FF | Since: 323 | API-Set: unknown
     */
    export function getStateOfClosestDoorOfType(_type: number | string, pos: Vector3): [boolean, number] {
        if (typeof _type === 'string') _type = misc.getHashKey(_type)
        return GetStateOfClosestDoorOfType(_type, pos.x, pos.y, pos.z);
    }

    /**
     * Get a destructible object's state.
     * Substract 1 to get the real state.
     * See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
     * For example, if the object just spawned (state 2), the native will return 3.
     *
     * Hash: 0x899BA936634A322E | Since: 323 | API-Set: unknown
     */
    export function getStateOfRayfireMap(_object: number | IObject): number {
        return GetStateOfRayfireMapObject(_object);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x08F96CA6C551AD51 | Since: 323 | API-Set: unknown
     */
    export function getWeaponTypeFromPickupType(pickupHash: number | string): number {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        return GetWeaponTypeFromPickupType(pickupHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x761B0E69AC4D007E | Since: 323 | API-Set: unknown
     */
    export function hasClosestOfTypeBeenBroken(modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return HasClosestObjectOfTypeBeenBroken(0, 0, 0, 0, modelHash, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46494A2475701343 | Since: 323 | API-Set: unknown
     */
    export function hasClosestOfTypeBeenCompletelyDestroyed(pos: Vector3, radius: number, modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return HasClosestObjectOfTypeBeenCompletelyDestroyed(pos.x, pos.y, pos.z, radius, modelHash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8ABFB70C49CC43E2 | Since: 323 | API-Set: unknown
     */
    export function hasBeenBroken(_object: number | IObject): boolean {
        return HasObjectBeenBroken(_object, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x80EC48E6679313F9 | Since: 323 | API-Set: unknown
     */
    export function hasPickupBeenCollected(pickup: any): boolean {
        return HasPickupBeenCollected(pickup);
    }

    /**
     * No comment provided
     *
     * Hash: 0x867458251D47CCB2 | Since: 463 | API-Set: unknown
     */
    export function hidePortablePickupWhenDetached(pickupObject: number | IObject, toggle: boolean): void {
        HidePortablePickupWhenDetached(pickupObject, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x673ED815D6E323B7 | Since: 323 | API-Set: unknown
     */
    export function isAnyEntityEntirelyInsideGarage(garageHash: number | string): boolean {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        return IsAnyEntityEntirelyInsideGarage(garageHash, false, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x397DC58FF00298D1 | Since: 323 | API-Set: unknown
     */
    export function isAnyNearPoint(pos: Vector3, range: number): boolean {
        return IsAnyObjectNearPoint(pos.x, pos.y, pos.z, range, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC531EE8A1145A149 | Since: 323 | API-Set: unknown
     */
    export function isDoorClosed(doorHash: number | string): boolean {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return IsDoorClosed(doorHash);
    }

    /**
     * `if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))`
     * {
     * `OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);`
     * }
     *
     * Hash: 0xC153C43EA202C8C1 | Since: 323 | API-Set: unknown
     */
    export function isDoorRegisteredWithSystem(doorHash: number | string): boolean {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        return IsDoorRegisteredWithSystem(doorHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90E47239EA1980B8 | Since: 323 | API-Set: unknown
     */
    export function isGarageEmpty(garageHash: number | string): boolean {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        return IsGarageEmpty(garageHash, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC481C641EBBD27D | Since: 1365 | API-Set: unknown
     */
    export function isAPickup(_object: number | IObject): boolean {
        return IsObjectAPickup(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0378C08504160D0D | Since: 323 | API-Set: unknown
     */
    export function isAPortablePickup(_object: number | IObject): boolean {
        return IsObjectAPortablePickup(_object);
    }

    /**
     * Despite the name, it does work for any entity type.
     *
     * Hash: 0x372EF6699146A1E4 | Since: 323 | API-Set: unknown
     */
    export function isEntirelyInsideGarage(garageHash: number | string, entity: number | IEntity): boolean {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        return IsObjectEntirelyInsideGarage(garageHash, entity, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C90FE4B381BA60A | Since: 323 | API-Set: unknown
     */
    export function isNearPoint(objectHash: number | string, pos: Vector3, range: number): boolean {
        if (typeof objectHash === 'string') objectHash = misc.getHashKey(objectHash)
        return IsObjectNearPoint(objectHash, pos.x, pos.y, pos.z, range);
    }

    /**
     * Despite the name, it does work for any entity type.
     *
     * Hash: 0xF0EED5A6BC7B237A | Since: 323 | API-Set: unknown
     */
    export function isPartiallyInsideGarage(garageHash: number | string, entity: number | IEntity): boolean {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        return IsObjectPartiallyInsideGarage(garageHash, entity, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B32ACE6326A7546 | Since: 323 | API-Set: unknown
     */
    export function isVisible(_object: number | IObject): boolean {
        return IsObjectVisible(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11D1E53A726891FE | Since: 323 | API-Set: unknown
     */
    export function isPickupWeaponValid(_object: number | IObject): boolean {
        return IsPickupWeaponObjectValid(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x024A60DEB0EA69F0 | Since: 323 | API-Set: unknown
     */
    export function isPlayerEntirelyInsideGarage(garageHash: number | string, player: number | string | IPlayer): boolean {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        return IsPlayerEntirelyInsideGarage(garageHash, player, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1761DC5D8471CBAA | Since: 323 | API-Set: unknown
     */
    export function isPlayerPartiallyInsideGarage(garageHash: number | string, player: number | string | IPlayer): boolean {
        if (typeof garageHash === 'string') garageHash = misc.getHashKey(garageHash)
        return IsPlayerPartiallyInsideGarage(garageHash, player, 0);
    }

    /**
     * An angled area is an X-Z oriented rectangle with three parameters:
     * 1. origin: the mid-point along a base edge of the rectangle;
     * 2. extent: the mid-point of opposite base edge on the other Z;
     * 3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).
     *
     * The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
     * 1. golf_mp https://i.imgur.com/JhsQAK9.png
     * 2. am_taxi https://i.imgur.com/TJWCZaT.jpg
     *
     * Hash: 0x2A70BAE8883E4C81 | Since: 323 | API-Set: unknown
     */
    export function isPointInAngledArea(pos: Vector3, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean): boolean {
        return IsPointInAngledArea(pos.x, pos.y, pos.z, x1, y1, z1, x2, y2, z2, width, debug, includeZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0xADF084FB8F075D06 | Since: 1604 | API-Set: unknown
     */
    export function isPropLightOverriden(_object: number | IObject): boolean {
        return Citizen.invokeNative('0xADF084FB8F075D06', _object);
    }

    /**
     * No comment provided
     *
     * Hash: 0xADBE4809F19F927A | Since: 323 | API-Set: unknown
     */
    export function onlyCleanUpWhenOutOfRange(_object: number | IObject): void {
        MarkObjectForDeletion(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7F29CA00F46350E | Since: 323 | API-Set: unknown
     */
    export function openAllBarriersForRace(): void {
        Citizen.invokeNative('0xC7F29CA00F46350E', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD76EEEF746057FD6 | Since: 505 | API-Set: unknown
     */
    export function placeOnGroundOrObjectProperly(_object: number | IObject): boolean {
        return PlaceObjectOnGroundProperly2(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58A850EAEE20FAA3 | Since: 323 | API-Set: unknown
     */
    export function placeOnGroundProperly(_object: number | IObject): boolean {
        return PlaceObjectOnGroundProperly(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x006E4B040ED37EC3 | Since: 1868 | API-Set: unknown
     */
    export function playAutoStartAnim(): void {
        Citizen.invokeNative('0x006E4B040ED37EC3', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92AEFB5F6E294023 | Since: 323 | API-Set: unknown
     */
    export function preventCollectionOfPortablePickup(_object: number | IObject): void {
        PreventCollectionOfPortablePickup(_object, false, false);
    }

    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x27F9D613092159CF | Since: 323 | API-Set: unknown
     */
    export function removeAllPickupsOfType(pickupHash: number | string): void {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        RemoveAllPickupsOfType(pickupHash);
    }

    /**
     * CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
     * Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
     *
     * Hash: 0x464D8E1427156FE4 | Since: 323 | API-Set: unknown
     */
    export function removeDoorFromSystem(doorHash: number | string): void {
        if (typeof doorHash === 'string') doorHash = misc.getHashKey(doorHash)
        RemoveDoorFromSystem(doorHash, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A39DB43E47CF3AA | Since: 323 | API-Set: unknown
     */
    export function removeHighDetailModel(_object: number | IObject): void {
        RemoveObjectHighDetailModel(_object);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3288D8ACAECD2AB2 | Since: 323 | API-Set: unknown
     */
    export function removePickup(pickup: any): void {
        RemovePickup(pickup);
    }

    /**
     * draws circular marker at pos
     * -1 = none
     * 0 = red
     * 1 = green
     * 2 = blue
     * 3 = green larger
     * 4 = nothing
     * 5 = green small
     *
     * Hash: 0x3430676B11CDF21D | Since: 323 | API-Set: unknown
     */
    export function renderFakePickupGlow(pos: Vector3, colorIndex: number): void {
        RenderFakePickupGlow(pos.x, pos.y, pos.z, colorIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFE24E4D29249E4A | Since: 1734 | API-Set: unknown
     */
    export function rotate(_object: number | IObject): boolean {
        return Citizen.invokeNative('0xAFE24E4D29249E4A', _object, 0, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x406137F8EF90EAF5 | Since: 323 | API-Set: unknown
     */
    export function setActivatePhysicsAsSoonAsItIsUnfrozen(_object: number | IObject, toggle: boolean): void {
        SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(_object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x826D1EE4D1CAFC78 | Since: 505 | API-Set: unknown
     */
    export function setCustomPickupWeaponHash(pickupHash: number | string, pickup: any): void {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        Citizen.invokeNative('0x826D1EE4D1CAFC78', pickupHash, pickup);
    }

    /**
     * Requires a component_at_*_flsh to be attached to the weapon object
     *
     * Hash: 0xBCE595371A5FBAAF | Since: 323 | API-Set: unknown
     */
    export function setCutscenesWeaponFlashlightOnThisFrame(_object: number | IObject, toggle: boolean): void {
        SetCreateWeaponObjectLightSource(_object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8CAAB2BD3EA58BD4 | Since: 1011 | API-Set: unknown
     */
    export function setDisableCollisionsBetweenCarsAndCarParachute(): void {
        Citizen.invokeNative('0x8CAAB2BD3EA58BD4', undefined);
    }

    /**
     * Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
     *
     * Hash: 0x911024442F4898F0 | Since: 1604 | API-Set: unknown
     */
    export function setDriveArticulatedJoint(_object: number | IObject, toggle: boolean): void {
        SetEnableArenaPropPhysics(_object, toggle, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB20834A7DD3D8896 | Since: 1604 | API-Set: unknown
     */
    export function setDriveArticulatedJointWithInflictor(_object: number | IObject, toggle: boolean, ped: number | IPed): void {
        SetEnableArenaPropPhysicsOnPed(_object, toggle, 0, ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2D0BDE54F0E8E5A | Since: 323 | API-Set: unknown
     */
    export function setEntityFlagRenderSmallShadow(_object: number | IObject, toggle: boolean): void {
        Citizen.invokeNative('0xB2D0BDE54F0E8E5A', _object, toggle);
    }

    /**
     * Sets entity+38 to C (when false) or 0xFF3f (when true)
     *
     * Hash: 0xD05A3241B9A86F19 | Since: 1180 | API-Set: unknown
     */
    export function setEntityFlagSuppressShadow(entity: number | IEntity, toggle: boolean): void {
        Citizen.invokeNative('0xD05A3241B9A86F19', entity, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF538081986E49E9D | Since: 323 | API-Set: unknown
     */
    export function setForceThisFrame(pos: Vector3): void {
        SetForceObjectThisFrame(pos.x, pos.y, pos.z, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C57C94A6446492A | Since: 1604 | API-Set: unknown
     */
    export function setIsArticulated(_object: number | IObject, toggle: boolean): void {
        Citizen.invokeNative('0x1C57C94A6446492A', _object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB5B7742424BD4445 | Since: 1604 | API-Set: unknown
     */
    export function setIsBall(_object: number | IObject, toggle: boolean): void {
        Citizen.invokeNative('0xB5B7742424BD4445', _object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78857FC65CADB909 | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerCanCollectPortablePickups(toggle: boolean): void {
        SetLocalPlayerCanCollectPortablePickups(toggle);
    }

    /**
     * Maximum amount of pickup models that can be disallowed is 30.
     *
     * Hash: 0x88EAEC617CD26926 | Since: 323 | API-Set: unknown
     */
    export function setLocalPlayerPermittedToCollectPickupsWithModel(modelHash: number | string, toggle: boolean): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetLocalPlayerCanUsePickupsWithThisModel(modelHash, toggle);
    }

    /**
     * Hardcoded not to work in multiplayer environments.
     * When you set locked to 0 the door open and to 1 the door close
     * `OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open`
     *
     * `OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close`
     *
     * Hash: 0x9B12F9A24FABEDB0 | Since: 323 | API-Set: unknown
     */
    export function setLockedUnstreamedInDoorOfType(modelHash: number | string, pos: Vector3, locked: boolean, xRotMult: number, yRotMult: number, zRotMult: number): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        DoorControl(modelHash, pos.x, pos.y, pos.z, locked, xRotMult, yRotMult, zRotMult);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BF3B3BD47D79C08 | Since: 323 | API-Set: unknown
     */
    export function setMaxNumPortablePickupsCarriedByPlayer(modelHash: number | string, _number: number): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetMaxNumPortablePickupsCarriedByPlayer(modelHash, _number);
    }

    /**
     * Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
     *
     * Hash: 0x4D89D607CB3DD1D2 | Since: 323 | API-Set: unknown
     */
    export function setAllowLowLodBuoyancy(_object: number | IObject, toggle: boolean): void {
        SetObjectAllowLowLodBuoyancy(_object, toggle);
    }

    /**
     * Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
     *
     * Hash: 0x77F33F2CCF64B3AA | Since: 323 | API-Set: unknown
     */
    export function setForceVehiclesToAvoid(_object: number | IObject, toggle: boolean): void {
        SetObjectForceVehiclesToAvoid(_object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x62454A641B41F3C5 | Since: 678 | API-Set: unknown
     */
    export function setGlowInSameTeam(pickup: any): void {
        Citizen.invokeNative('0x62454A641B41F3C5', pickup);
    }

    /**
     * No comment provided
     *
     * Hash: 0x734E1714D077DA9A | Since: 1604 | API-Set: unknown
     */
    export function setIsAPressurePlate(_object: number | IObject, toggle: boolean): void {
        Citizen.invokeNative('0x734E1714D077DA9A', _object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6033D32241F6FB5 | Since: 323 | API-Set: unknown
     */
    export function setIsSpecialGolfball(_object: number | IObject, toggle: boolean): void {
        Citizen.invokeNative('0xC6033D32241F6FB5', _object, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3B2FD68DB5F8331C | Since: 757 | API-Set: unknown
     */
    export function setIsVisibleInMirrors(_object: number | IObject, toggle: boolean): void {
        Citizen.invokeNative('0x3B2FD68DB5F8331C', _object, toggle);
    }

    /**
     * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
     *
     * Other parameters seem to be unknown.
     *
     * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
     * p3: seems similar to p2
     * p4: makes obj fall slower the higher the value
     * p5: similar to p4
     *
     * Hash: 0xF6DF6E90DE7DF90F | Since: 323 | API-Set: unknown
     */
    export function setPhysicsParams(_object: number | IObject, weight: number, gravity: number, buoyancy: number): void {
        SetObjectPhysicsParams(_object, weight, 0, 0, 0, 0, gravity, 0, 0, 0, 0, buoyancy);
    }

    /**
     * No comment provided
     *
     * Hash: 0x96EE0EBA0163DF80 | Since: 791 | API-Set: unknown
     */
    export function setSpeedBoostAmount(_object: number | IObject): void {
        SetObjectStuntPropSpeedup(_object, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF6CA0330F2E737B | Since: 791 | API-Set: unknown
     */
    export function setSpeedBoostDuration(_object: number | IObject, duration: number): void {
        SetObjectStuntPropDuration(_object, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB6F1A9B5510A5D2 | Since: 323 | API-Set: unknown
     */
    export function setTakesDamageFromCollidingWithBuildings(): void {
        Citizen.invokeNative('0xEB6F1A9B5510A5D2', undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A7391690F5AFD81 | Since: 323 | API-Set: unknown
     */
    export function setTargettable(_object: number | IObject, targettable: boolean): void {
        SetObjectTargettable(_object, targettable, undefined);
    }

    /**
     * enum ObjectPaintVariants
     * {
     * Pacific = 0,
     * Azure = 1,
     * Nautical = 2,
     * Continental = 3,
     * Battleship = 4,
     * Intrepid = 5,
     * Uniform = 6,
     * Classico = 7,
     * Mediterranean = 8,
     * Command = 9,
     * Mariner = 10,
     * Ruby = 11,
     * Vintage = 12,
     * Pristine = 13,
     * Merchant = 14,
     * Voyager = 15
     * };
     *
     * Hash: 0x971DA0055324D033 | Since: 323 | API-Set: unknown
     */
    export function setTintIndex(_object: number | IObject, textureVariation: number): void {
        SetObjectTextureVariation(_object, textureVariation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31F924B53EADDF65 | Since: 323 | API-Set: unknown
     */
    export function setOnlyAllowAmmoCollectionWhenLow(): void {
        Citizen.invokeNative('0x31F924B53EADDF65', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x318516E02DE3ECE2 | Since: 323 | API-Set: unknown
     */
    export function setPickupGenerationRangeMultiplier(multiplier: number): void {
        SetPickupGenerationRangeMultiplier(multiplier);
    }

    /**
     * p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
     *
     * Hash: 0x0596843B34B95CE5 | Since: 505 | API-Set: unknown
     */
    export function setPickupGlowOffset(pickup: any): void {
        Citizen.invokeNative('0x0596843B34B95CE5', pickup, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3ED2B83AB2E82799 | Since: 757 | API-Set: unknown
     */
    export function setPickupHiddenWhenUncollectable(pickup: any, toggle: boolean): void {
        SetPickupHiddenWhenUncollectable(pickup, toggle);
    }

    /**
     * p0 is either 0 or 50 in scripts.
     *
     * Hash: 0x8CFF648FBD7330F1 | Since: 757 | API-Set: unknown
     */
    export function setPickupAlphaWhenTransparent(): void {
        Citizen.invokeNative('0x8CFF648FBD7330F1', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x39A5FB7EAF150840 | Since: 678 | API-Set: unknown
     */
    export function setPickupArrowMarker(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x39A5FB7EAF150840', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7813E8B8C4AE4799 | Since: 1734 | API-Set: unknown
     */
    export function setPickupCollectableInVehicle(pickup: any): void {
        Citizen.invokeNative('0x7813E8B8C4AE4799', pickup);
    }

    /**
     * p1 is always -0.2 in scripts and p2 is always true in scripts.
     *
     * Hash: 0xA08FE5E49BDC39DD | Since: 323 | API-Set: unknown
     */
    export function setPickupObjectGlowOffset(pickup: any): void {
        Citizen.invokeNative('0xA08FE5E49BDC39DD', pickup, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x27F248C3FEBFAAD3 | Since: 2372 | API-Set: unknown
     */
    export function setPickupGlowWhenUncollectable(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x27F248C3FEBFAAD3', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8881C98A31117998 | Since: 678 | API-Set: unknown
     */
    export function setPickupObjectTransparentWhenUncollectable(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x8881C98A31117998', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78015C9B4B3ECC9D | Since: 323 | API-Set: unknown
     */
    export function setPickupRegenerationTime(pickup: any, duration: number): void {
        SetPickupRegenerationTime(pickup, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBFFE53AE7E67FCDC | Since: 1290 | API-Set: unknown
     */
    export function setPickupTrackDamageEvents(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0xBFFE53AE7E67FCDC', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x858EC9FD25DE04AA | Since: 757 | API-Set: unknown
     */
    export function setPickupTransparentWhenUncollectable(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x858EC9FD25DE04AA', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C1B69FAE509BA97 | Since: 757 | API-Set: unknown
     */
    export function setPickupUncollectable(pickup: any, toggle: boolean): void {
        SetPickupUncollectable(pickup, toggle);
    }

    /**
     * Disabling/enabling a player from getting pickups. From the scripts:
     *
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);`
     *
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x616093EC6B139DD9 | Since: 323 | API-Set: unknown
     */
    export function setPlayerPermittedToCollectPickupsOfType(player: number | string | IPlayer, pickupHash: number | string, toggle: boolean): void {
        if (typeof pickupHash === 'string') pickupHash = misc.getHashKey(pickupHash)
        ToggleUsePickupsForPlayer(player, pickupHash, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46F3ADD1E2D5BAF2 | Since: 877 | API-Set: unknown
     */
    export function setPortablePickupPersist(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x46F3ADD1E2D5BAF2', pickup, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x63ECF581BC70E363 | Since: 1365 | API-Set: unknown
     */
    export function setProjectilesShouldExplodeOnContact(entity: number | IEntity): void {
        Citizen.invokeNative('0x63ECF581BC70E363', entity, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F048334B4A4E774 | Since: 1493 | API-Set: unknown
     */
    export function setPropLightColor(_object: number | IObject, r: number, g: number, b: number): boolean {
        return SetObjectLightColor(_object, false, r, g, b);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31574B1B41268673 | Since: 2189 | API-Set: unknown
     */
    export function setPropTintIndex(): void {
        Citizen.invokeNative('0x31574B1B41268673', undefined, undefined);
    }

    /**
     * Hardcoded to not work in multiplayer.
     *
     *
     * Used to lock/unlock doors to interior areas of the game.
     *
     * (Possible) Door Types:
     *
     * https://pastebin.com/9S2m3qA4
     *
     * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
     * Locked means that the heading is locked.
     * p6 is always 0.
     *
     * 225 door types, model names and coords found in stripclub.c4:
     * https://pastebin.com/gywnbzsH
     *
     * get door info: https://pastebin.com/i14rbekD
     *
     * Hash: 0xF82D8F1926A02C3D | Since: 323 | API-Set: unknown
     */
    export function setStateOfClosestDoorOfType(_type: number | string, pos: Vector3, locked: boolean, heading: number): void {
        if (typeof _type === 'string') _type = misc.getHashKey(_type)
        SetStateOfClosestDoorOfType(_type, pos.x, pos.y, pos.z, locked, heading, false);
    }

    /**
     * Defines the state of a destructible object.
     * Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
     * State 2 == object just spawned
     * State 4 == Beginning of the animation
     * State 6 == Start animation
     * State 9 == End of the animation
     *
     * Hash: 0x5C29F698D404C5E1 | Since: 323 | API-Set: unknown
     */
    export function setStateOfRayfireMap(_object: number | IObject, state: number): void {
        SetStateOfRayfireMapObject(_object, state);
    }

    /**
     * No comment provided
     *
     * Hash: 0x53E0DF1A2A3CF0CA | Since: 323 | API-Set: unknown
     */
    export function setTeamPickup(_object: number | IObject): void {
        SetTeamPickupObject(_object, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF12E33034D887F66 | Since: 1103 | API-Set: unknown
     */
    export function setTintIndexClosestBuildingOfType(pos: Vector3, radius: number, modelHash: number | string, textureVariation: number): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return SetTextureVariationOfClosestObjectOfType(pos.x, pos.y, pos.z, radius, modelHash, textureVariation);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A6CBB06E2D0D79D | Since: 1604 | API-Set: unknown
     */
    export function setWeaponImpactsApplyGreaterForce(_object: number | IObject): void {
        Citizen.invokeNative('0x1A6CBB06E2D0D79D', _object, false);
    }

    /**
     * Returns true if the object has finished moving.
     *
     * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
     *
     * See also: https://gtagmodding.com/opcode-database/opcode/034E/
     * Has to be looped until it returns true.
     *
     * Hash: 0x2FDFF4107B8C1147 | Since: 323 | API-Set: unknown
     */
    export function slide(_object: number | IObject, toX: number, toY: number, toZ: number, speedX: number, speedY: number, speedZ: number, collision: boolean): boolean {
        return SlideObject(_object, toX, toY, toZ, speedX, speedY, speedZ, collision);
    }

    /**
     * enum ePickupRewardType
     * {
     * PICKUP_REWARD_TYPE_AMMO = (1 << 0),
     * PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
     * PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
     * PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
     * PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
     * PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
     * PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
     * PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
     * PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
     * PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
     * PICKUP_REWARD_TYPE_STAT = (1 << 8),
     * PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
     * PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
     * PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
     * };
     *
     * Hash: 0xF92099527DB8E2A7 | Since: 323 | API-Set: unknown
     */
    export function suppressPickupRewardType(rewardType: number, suppress: boolean): void {
        Citizen.invokeNative('0xF92099527DB8E2A7', rewardType, suppress);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8DCA505A5C196F05 | Since: 1180 | API-Set: unknown
     */
    export function suppressPickupSoundForPickup(): void {
        Citizen.invokeNative('0x8DCA505A5C196F05', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB252BC036B525623 | Since: 323 | API-Set: unknown
     */
    export function trackVisibility(_object: number | IObject): void {
        TrackObjectVisibility(_object);
    }

    /**
     * Sets the 34th and 35th object flags related to player peds.
     *
     * Hash: 0xB39F03368DB0CAA2 | Since: 3258 | API-Set: unknown
     */
    export function setTargettableByPlayer(_object: number | IObject, setFlag34: boolean, setFlag35: boolean): void {
        SetObjectTargettableByPlayer(_object, setFlag34, setFlag35);
    }

    /**
     * No comment provided
     *
     * Hash: 0x08BD8BA5BDE2C2FA | Since: 3407 | API-Set: unknown
     */
    export function setPickupGlowDisabled(pickup: any, toggle: boolean): void {
        Citizen.invokeNative('0x08BD8BA5BDE2C2FA', pickup, toggle);
    }

}


export namespace pad {
    /**
     * Disables the specified `rawKeyIndex`, making it not trigger the regular `IS_RAW_KEY_*` natives.
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x8BCF0014 | Since: unknown | API-Set: client
     */
    export function disableRawKeyThisFrame(rawKeyIndex: number): boolean {
        return DisableRawKeyThisFrame(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` is pressed down, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x36366EC3 | Since: unknown | API-Set: client
     */
    export function isDisabledRawKeyDown(rawKeyIndex: number): boolean {
        return IsDisabledRawKeyDown(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` is pressed, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x1F7CBBAA | Since: unknown | API-Set: client
     */
    export function isDisabledRawKeyPressed(rawKeyIndex: number): boolean {
        return IsDisabledRawKeyPressed(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` was released, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x72B66C09 | Since: unknown | API-Set: client
     */
    export function isDisabledRawKeyReleased(rawKeyIndex: number): boolean {
        return IsDisabledRawKeyReleased(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` is up, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x2C033875 | Since: unknown | API-Set: client
     */
    export function isDisabledRawKeyUp(rawKeyIndex: number): boolean {
        return IsDisabledRawKeyUp(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` is pressed down on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0xD95A7387 | Since: unknown | API-Set: client
     */
    export function isRawKeyDown(rawKeyIndex: number): boolean {
        return IsRawKeyDown(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` is pressed on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x69F7C29E | Since: unknown | API-Set: client
     */
    export function isRawKeyPressed(rawKeyIndex: number): boolean {
        return IsRawKeyPressed(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` was just released on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0xEAA50861 | Since: unknown | API-Set: client
     */
    export function isRawKeyReleased(rawKeyIndex: number): boolean {
        return IsRawKeyReleased(rawKeyIndex);
    }

    /**
     * Gets if the specified `rawKeyIndex` is up  on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x36F4E505 | Since: unknown | API-Set: client
     */
    export function isRawKeyUp(rawKeyIndex: number): boolean {
        return IsRawKeyUp(rawKeyIndex);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x7F4724035FDCA1DD | Since: 323 | API-Set: unknown
     */
    export function allowAlternativeScriptControlsLayout(control: number): void {
        DisableInputGroup(control);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xCB0360EFEFB2580D | Since: 323 | API-Set: unknown
     */
    export function clearControlLightEffect(control: number): void {
        Citizen.invokeNative('0xCB0360EFEFB2580D', control);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xA0CEFCEA390AAB9B | Since: 323 | API-Set: unknown
     */
    export function clearControlShakeSuppressedId(control: number): void {
        Citizen.invokeNative('0xA0CEFCEA390AAB9B', control);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x5F4B6931816E599B | Since: 323 | API-Set: unknown
     */
    export function disableAllControlActions(control: number): void {
        DisableAllControlActions(control);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xFE99B66D079CF6BC | Since: 323 | API-Set: unknown
     */
    export function disableControlAction(control: number, action: number, disableRelatedActions: boolean): void {
        DisableControlAction(control, action, disableRelatedActions);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xA5FFE9B05F199DE7 | Since: 323 | API-Set: unknown
     */
    export function enableAllControlActions(control: number): void {
        EnableAllControlActions(control);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x351220255D64C155 | Since: 323 | API-Set: unknown
     */
    export function enableControlAction(control: number, action: number, enableRelatedActions: boolean): void {
        EnableControlAction(control, action, enableRelatedActions);
    }

    /**
     * Returns profile setting 17.
     *
     * Hash: 0xFC859E2374407556 | Since: 323 | API-Set: unknown
     */
    export function getAllowMovementWhileZoomed(): boolean {
        return GetAllowMovementWhileZoomed();
    }

    /**
     * control: unused parameter
     *
     * Hash: 0x80C2FD58D720C801 | Since: 323 | API-Set: unknown
     */
    export function getControlGroupInstructionalButtonsString(control: number, controlGroup: number, allowXOSwap: boolean): string {
        return GetControlGroupInstructionalButton(control, controlGroup, allowXOSwap);
    }

    /**
     * Returns time in ms since last input.
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xD7D22F5592AED8BA | Since: 323 | API-Set: unknown
     */
    export function getControlHowLongAgo(control: number): number {
        return GetTimeSinceLastInput(control);
    }

    /**
     * allowXOSwap appears to always be true.
     *
     * EG:
     * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) \/\*INPUT_FRONTEND_ACCEPT (e.g. Enter button)\*\/
     * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) \/\*INPUT_FRONTEND_CANCEL (e.g. ESC button)\*\/
     * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) \/\*INPUT_CONTEXT (e.g. E button)\*\/
     *
     * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
     *
     * control: unused parameter
     *
     * Hash: 0x0499D7B09FC9B407 | Since: 323 | API-Set: unknown
     */
    export function getControlInstructionalButtonsString(control: number, action: number, allowXOSwap: boolean): string {
        return GetControlInstructionalButton(control, action, allowXOSwap);
    }

    /**
     * Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xEC3C9B8D5327B563 | Since: 323 | API-Set: unknown
     */
    export function getControlNormal(control: number, action: number): number {
        return GetControlNormal(control, action);
    }

    /**
     * Seems to return values between -1 and 1 for controls like gas and steering.
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x5B84D09CEC5209C5 | Since: 323 | API-Set: unknown
     */
    export function getControlUnboundNormal(control: number, action: number): number {
        return GetControlUnboundNormal(control, action);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xD95E79E8686D2C27 | Since: 323 | API-Set: unknown
     */
    export function getControlValue(control: number, action: number): number {
        return GetControlValue(control, action);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x11E65974A982637C | Since: 323 | API-Set: unknown
     */
    export function getDisabledControlNormal(control: number, action: number): number {
        return GetDisabledControlNormal(control, action);
    }

    /**
     * The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x4F8A26A890FD62FB | Since: 323 | API-Set: unknown
     */
    export function getDisabledControlUnboundNormal(control: number, action: number): number {
        return GetDisabledControlUnboundNormal(control, action);
    }

    /**
     * Returns profile setting 225.
     *
     * Hash: 0x0F70731BACCFBB96 | Since: 323 | API-Set: unknown
     */
    export function getIsUsingAlternateDriveby(): boolean {
        return GetIsUsingAlternateDriveby();
    }

    /**
     * No comment provided
     *
     * Hash: 0x25AAA32BDC98F2A3 | Since: 1365 | API-Set: unknown
     */
    export function getIsUsingAlternateHandbrake(): boolean {
        return Citizen.invokeNative('0x25AAA32BDC98F2A3');
    }

    /**
     * Hard-coded to return 3 if using KBM, otherwise same behavior as GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE.
     *
     * Hash: 0xBB41AFBBBC0A0287 | Since: 323 | API-Set: unknown
     */
    export function getLocalPlayerAimState(): number {
        return GetLocalPlayerAimState();
    }

    /**
     * `Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.`
     *
     * Hash: 0x59B9A7AF4C95133C | Since: 323 | API-Set: unknown
     */
    export function getLocalPlayerGameAimState(): number {
        return GetLocalPlayerAimState2();
    }

    /**
     * control: unused parameter
     *
     * Hash: 0x6CD79468A1E595C6 | Since: 323 | API-Set: unknown
     */
    export function haveControlsChanged(control: number): boolean {
        return Citizen.invokeNative('0x6CD79468A1E595C6', control);
    }

    /**
     * Used in carsteal3 script with schemeName = "Carsteal4_spycar".
     *
     * Hash: 0x3D42B92563939375 | Since: 323 | API-Set: unknown
     */
    export function initPcScriptedControls(schemeName: string): boolean {
        return SwitchToInputMappingScheme(schemeName);
    }

    /**
     * control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
     * For more info, see https://docs.fivem.net/docs/game-references/controls/
     *
     * Hash: 0x1CEA6BFDF248E5D9 | Since: 323 | API-Set: unknown
     */
    export function isControlEnabled(control: number, action: number): boolean {
        return IsControlEnabled(control, action);
    }

    /**
     * Returns whether a control was newly pressed since the last check.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x580417101DDB492F | Since: 323 | API-Set: unknown
     */
    export function isControlJustPressed(control: number, action: number): boolean {
        return IsControlJustPressed(control, action);
    }

    /**
     * Returns whether a control was newly released since the last check.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x50F940259D3841E6 | Since: 323 | API-Set: unknown
     */
    export function isControlJustReleased(control: number, action: number): boolean {
        return IsControlJustReleased(control, action);
    }

    /**
     * Returns whether a control is currently pressed.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xF3A21BCD95725A4A | Since: 323 | API-Set: unknown
     */
    export function isControlPressed(control: number, action: number): boolean {
        return IsControlPressed(control, action);
    }

    /**
     * Returns whether a control is currently _not_ pressed.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x648EE3E7F38877DD | Since: 323 | API-Set: unknown
     */
    export function isControlReleased(control: number, action: number): boolean {
        return IsControlReleased(control, action);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x91AEF906BCA88877 | Since: 323 | API-Set: unknown
     */
    export function isDisabledControlJustPressed(control: number, action: number): boolean {
        return IsDisabledControlJustPressed(control, action);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x305C8DCD79DA8B0F | Since: 323 | API-Set: unknown
     */
    export function isDisabledControlJustReleased(control: number, action: number): boolean {
        return IsDisabledControlJustReleased(control, action);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xE2587F8CBBD87B1D | Since: 323 | API-Set: unknown
     */
    export function isDisabledControlPressed(control: number, action: number): boolean {
        return IsDisabledControlPressed(control, action);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xFB6C4072E9A32E92 | Since: 757 | API-Set: unknown
     */
    export function isDisabledControlReleased(control: number, action: number): boolean {
        return IsDisabledControlReleased(control, action);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77B612531280010D | Since: 323 | API-Set: unknown
     */
    export function isLookInverted(): boolean {
        return IsLookInverted();
    }

    /**
     * Used with IS_LOOK_INVERTED() and negates its affect.
     *
     * --
     *
     * Not sure how the person above got that description, but here's an actual example:
     *
     * `if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {`
     * if (a_5) {
     * `if (PAD::IS_LOOK_INVERTED()) {`
     * a_3 *= -1;
     * }
     * `if (PAD::IS_MOUSE_LOOK_INVERTED()) {`
     * a_3 *= -1;
     * }
     * }
     * }
     *
     * Hash: 0xE1615EC03B3BB4FD | Since: 323 | API-Set: unknown
     */
    export function isMouseLookInverted(): boolean {
        return Citizen.invokeNative('0xE1615EC03B3BB4FD');
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x13337B38DB572509 | Since: 323 | API-Set: unknown
     */
    export function isUsingCursor(control: number): boolean {
        return IsUsingKeyboard2(control);
    }

    /**
     * control: unused parameter
     *
     * Hash: 0xA571D46727E2B718 | Since: 323 | API-Set: unknown
     */
    export function isUsingKeyboardAndMouse(control: number): boolean {
        return IsUsingKeyboard(control);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hardcoded to return false.
     *
     * Hash: 0x23F09EADC01449D6 | Since: 323 | API-Set: unknown
     */
    export function isUsingRemotePlay(control: number): boolean {
        return Citizen.invokeNative('0x23F09EADC01449D6', control);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x8290252FFF36ACB5 | Since: 323 | API-Set: unknown
     */
    export function setControlLightEffectColor(control: number, red: number, green: number, blue: number): void {
        SetControlLightEffectColor(control, red, green, blue);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     * duration in milliseconds
     * frequency should range from about 10 (slow vibration) to 255 (very fast)
     *
     * example:
     * SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);
     *
     * Hash: 0x48B3886C1358D0D5 | Since: 323 | API-Set: unknown
     */
    export function setControlShake(control: number, duration: number, frequency: number): void {
        SetPadShake(control, duration, frequency);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xF239400E16C23E08 | Since: 323 | API-Set: unknown
     */
    export function setControlShakeSuppressedId(control: number, uniqueId: number): void {
        Citizen.invokeNative('0xF239400E16C23E08', control, uniqueId);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x14D29BB12D47F68C | Since: 323 | API-Set: unknown
     */
    export function setControlTriggerShake(control: number, leftDuration: number, leftFrequency: number, rightDuration: number, rightFrequency: number): void {
        Citizen.invokeNative('0x14D29BB12D47F68C', control, leftDuration, leftFrequency, rightDuration, rightFrequency);
    }

    /**
     * This is for simulating player input.
     * value is a float value from 0 - 1
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xE8A25867FBA3B05E | Since: 323 | API-Set: unknown
     */
    export function setControlValueNextFrame(control: number, action: number, value: number): boolean {
        return SetControlNormal(control, action, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC695459D4D0E219 | Since: 323 | API-Set: unknown
     */
    export function setCursorPosition(x: number, y: number): boolean {
        return SetCursorLocation(x, y);
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xEDE476E5EE29EDB1 | Since: 323 | API-Set: unknown
     */
    export function setInputExclusive(control: number, action: number): void {
        SetInputExclusive(control, action);
    }

    /**
     * No comment provided
     *
     * Hash: 0x798FDEB5B1575088 | Since: 323 | API-Set: unknown
     */
    export function setPlayerShakesWhenControllerDisabled(toggle: boolean): void {
        SetPlayerpadShakesWhenControllerDisabled(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B73C77D9EB66E24 | Since: 323 | API-Set: unknown
     */
    export function setUseAdjustedMouseCoords(toggle: boolean): void {
        Citizen.invokeNative('0x5B73C77D9EB66E24', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x643ED62D5EA3BEBD | Since: 323 | API-Set: unknown
     */
    export function shutdownPcScriptedControls(): void {
        ResetInputMappingScheme();
    }

    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x38C16A305E8CDC8D | Since: 323 | API-Set: unknown
     */
    export function stopControlShake(control: number): void {
        StopPadShake(control);
    }

    /**
     * Same as INIT_PC_SCRIPTED_CONTROLS
     *
     * Hash: 0x4683149ED1DDE7A1 | Since: 323 | API-Set: unknown
     */
    export function switchPcScriptedControls(schemeName: string): boolean {
        return SwitchToInputMappingScheme2(schemeName);
    }

    /**
     * Always returns zero.
     *
     * Hash: 0x18E474F40EF05F10 | Since: 3570 | API-Set: unknown
     */
    export function getGameType(): number {
        return Citizen.invokeNative('0x18E474F40EF05F10');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE9CB8C56E90D5079 | Since: 3407 | API-Set: unknown
     */
    export function isControlHeldDown(control: number, action: number, duration: number): boolean {
        return Citizen.invokeNative('0xE9CB8C56E90D5079', control, action, duration);
    }

}


export namespace resource {
    /**
     * A getter for [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938), but for a specified resource.
     *
     * Hash: 0x3CC98B25 | Since: unknown | API-Set: client
     */
    export function getExternalKvpFloat(resource: string, key: string): number {
        return GetExternalKvpFloat(resource, key);
    }

    /**
     * A getter for [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8), but for a specified resource.
     *
     * Hash: 0x12B8D689 | Since: unknown | API-Set: client
     */
    export function getExternalKvpInt(resource: string, key: string): number {
        return GetExternalKvpInt(resource, key);
    }

    /**
     * A getter for [SET_RESOURCE_KVP](#\_0x21C7A35B), but for a specified resource.
     *
     * Hash: 0x9080363A | Since: unknown | API-Set: client
     */
    export function getExternalKvpString(resource: string, key: string): string {
        return GetExternalKvpString(resource, key);
    }

    /**
     * Equivalent of [START_FIND_KVP](#\_0xDD379006), but for another resource than the current one.
     *
     * Hash: 0x8F2EECC3 | Since: unknown | API-Set: client
     */
    export function startFindExternalKvp(resourceName: string, prefix: string): number {
        return StartFindExternalKvp(resourceName, prefix);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7389B5DF | Since: unknown | API-Set: shared
     */
    export function deleteKvp(key: string): void {
        DeleteResourceKvp(key);
    }

    /**
     * Nonsynchronous [DELETE_RESOURCE_KVP](#\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0x4152C90 | Since: unknown | API-Set: shared
     */
    export function deleteKvpNoSync(key: string): void {
        DeleteResourceKvpNoSync(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB3210203 | Since: unknown | API-Set: shared
     */
    export function endFindKvp(handle: number): void {
        EndFindKvp(handle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD7BEBC5 | Since: unknown | API-Set: shared
     */
    export function findKvp(handle: number): string {
        return FindKvp(handle);
    }

    /**
     * Returns the name of the currently executing resource.
     *
     * Hash: 0xE5E9EBBB | Since: unknown | API-Set: shared
     */
    export function getCurrentName(): string {
        return GetCurrentResourceName();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D52FE5B | Since: unknown | API-Set: shared
     */
    export function getInvoking(): string {
        return GetInvokingResource();
    }

    /**
     * No comment provided
     *
     * Hash: 0x863F27B | Since: unknown | API-Set: shared
     */
    export function getNums(): number {
        return GetNumResources();
    }

    /**
     * Gets the amount of metadata values with the specified key existing in the specified resource's manifest.
     * See also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)
     *
     * Hash: 0x776E864 | Since: unknown | API-Set: shared
     */
    export function getNumMetadata(resourceName: string, metadataKey: string): number {
        return GetNumResourceMetadata(resourceName, metadataKey);
    }

    /**
     * No comment provided
     *
     * Hash: 0x387246B7 | Since: unknown | API-Set: shared
     */
    export function getByFindIndex(findIndex: number): string {
        return GetResourceByFindIndex(findIndex);
    }

    /**
     * Returns all commands registered by the specified resource.
     * The data returned adheres to the following layout:
     *
     * ```
     * [
     * {
     * "name": "cmdlist",
     * "resource": "example_resource",
     * "arity" = -1,
     * },
     * {
     * "name": "command1"
     * "resource": "example_resource2",
     * "arity" = -1,
     * }
     * ]
     * ```
     *
     * Hash: 0x97628584 | Since: unknown | API-Set: shared
     */
    export function getCommands(resource: string): number {
        return GetResourceCommands(resource);
    }

    /**
     * A getter for [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938).
     *
     * Hash: 0x35BDCEEA | Since: unknown | API-Set: shared
     */
    export function getKvpFloat(key: string): number {
        return GetResourceKvpFloat(key);
    }

    /**
     * A getter for [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8).
     *
     * Hash: 0x557B586A | Since: unknown | API-Set: shared
     */
    export function getKvpInt(key: string): number {
        return GetResourceKvpInt(key);
    }

    /**
     * A getter for [SET_RESOURCE_KVP](#\_0x21C7A35B).
     *
     * Hash: 0x5240DA5A | Since: unknown | API-Set: shared
     */
    export function getKvpString(key: string): string {
        return GetResourceKvpString(key);
    }

    /**
     * Gets the metadata value at a specified key/index from a resource's manifest.
     * See also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)
     *
     * Hash: 0x964BAB1D | Since: unknown | API-Set: shared
     */
    export function getMetadata(resourceName: string, metadataKey: string, index: number): string {
        return GetResourceMetadata(resourceName, metadataKey, index);
    }

    /**
     * Returns the current state of the specified resource.
     *
     * Hash: 0x4039B485 | Since: unknown | API-Set: shared
     */
    export function getState(resourceName: string): string {
        return GetResourceState(resourceName);
    }

    /**
     * Reads the contents of a text file in a specified resource.
     * If executed on the client, this file has to be included in `files` in the resource manifest.
     * Example: `local data = LoadResourceFile("devtools", "data.json")`
     *
     * Hash: 0x76A9EE1F | Since: unknown | API-Set: shared
     */
    export function loadFile(resourceName: string, fileName: string): string {
        return LoadResourceFile(resourceName, fileName);
    }

    /**
     * An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.
     *
     * Hash: 0xD233A168 | Since: unknown | API-Set: shared
     */
    export function registerAsEventHandler(eventName: string): void {
        RegisterResourceAsEventHandler(eventName);
    }

    /**
     * A setter for [GET_RESOURCE_KVP_STRING](#\_0x5240DA5A).
     *
     * Hash: 0x21C7A35B | Since: unknown | API-Set: shared
     */
    export function setKvp(key: string, value: string): void {
        SetResourceKvp(key, value);
    }

    /**
     * A setter for [GET_RESOURCE_KVP_FLOAT](#\_0x35BDCEEA).
     *
     * Hash: 0x9ADD2938 | Since: unknown | API-Set: shared
     */
    export function setKvpFloat(key: string, value: number): void {
        SetResourceKvpFloat(key, value);
    }

    /**
     * Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0x3517BFBE | Since: unknown | API-Set: shared
     */
    export function setKvpFloatNoSync(key: string, value: number): void {
        SetResourceKvpFloatNoSync(key, value);
    }

    /**
     * A setter for [GET_RESOURCE_KVP_INT](#\_0x557B586A).
     *
     * Hash: 0x6A2B1E8 | Since: unknown | API-Set: shared
     */
    export function setKvpInt(key: string, value: number): void {
        SetResourceKvpInt(key, value);
    }

    /**
     * Nonsynchronous [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0x26AEB707 | Since: unknown | API-Set: shared
     */
    export function setKvpIntNoSync(key: string, value: number): void {
        SetResourceKvpIntNoSync(key, value);
    }

    /**
     * Nonsynchronous [SET_RESOURCE_KVP](#\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0xCF9A2FF | Since: unknown | API-Set: shared
     */
    export function setKvpNoSync(key: string, value: string): void {
        SetResourceKvpNoSync(key, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD379006 | Since: unknown | API-Set: shared
     */
    export function startFindKvp(prefix: string): number {
        return StartFindKvp(prefix);
    }

}


export namespace profiler {
    /**
     * Scope entry for profiler.
     *
     * Hash: 0xC795A4A9 | Since: unknown | API-Set: shared
     */
    export function enterScope(scopeName: string): void {
        ProfilerEnterScope(scopeName);
    }

    /**
     * Scope exit for profiler.
     *
     * Hash: 0xB39CA35C | Since: unknown | API-Set: shared
     */
    export function exitScope(): void {
        ProfilerExitScope();
    }

    /**
     * Returns true if the profiler is active.
     *
     * Hash: 0xF8B7D7BB | Since: unknown | API-Set: shared
     */
    export function isRecording(): boolean {
        return ProfilerIsRecording();
    }

}


export namespace app {
    /**
     * No comment provided
     *
     * Hash: 0x5FE1DF3342DB7DBA | Since: 323 | API-Set: unknown
     */
    export function clearBlock(): void {
        AppClearBlock();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE41C65E07A5F05FC | Since: 323 | API-Set: unknown
     */
    export function closeApp(): void {
        AppCloseApp();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE8E3FCF72EAC0EF8 | Since: 323 | API-Set: unknown
     */
    export function closeBlock(): void {
        AppCloseBlock();
    }

    /**
     * No comment provided
     *
     * Hash: 0x846AA8E7D55EE5B6 | Since: 323 | API-Set: unknown
     */
    export function dataValid(): boolean {
        return AppDataValid();
    }

    /**
     * No comment provided
     *
     * Hash: 0x44151AEA95C8A003 | Since: 323 | API-Set: unknown
     */
    export function deleteAppData(appName: string): boolean {
        return AppDeleteAppData(appName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9853A2BE3DED1A6 | Since: 323 | API-Set: unknown
     */
    export function getDeletedFileStatus(): number {
        return AppGetDeletedFileStatus();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1514FB24C02C2322 | Since: 323 | API-Set: unknown
     */
    export function getFloat(property: string): number {
        return AppGetFloat(property);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD3A58A12C77D9D4B | Since: 323 | API-Set: unknown
     */
    export function getInt(property: string): number {
        return AppGetInt(property);
    }

    /**
     * No comment provided
     *
     * Hash: 0x749B023950D2311C | Since: 323 | API-Set: unknown
     */
    export function getString(property: string): string {
        return AppGetString(property);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71EEE69745088DA0 | Since: 323 | API-Set: unknown
     */
    export function hasLinkedSocialClubAccount(): boolean {
        return AppHasLinkedSocialClubAccount();
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA52279A7271517F | Since: 323 | API-Set: unknown
     */
    export function hasSyncedData(appName: string): boolean {
        return AppHasSyncedData(appName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95C5D356CDA6E85F | Since: 323 | API-Set: unknown
     */
    export function saveData(): void {
        AppSaveData();
    }

    /**
     * Called in the gamescripts like:
     * `APP::APP_SET_APP("car");`
     * `APP::APP_SET_APP("dog");`
     *
     * Hash: 0xCFD0406ADAF90D2B | Since: 323 | API-Set: unknown
     */
    export function setApp(appName: string): void {
        AppSetApp(appName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x262AB456A3D21F93 | Since: 323 | API-Set: unknown
     */
    export function setBlock(blockName: string): void {
        AppSetBlock(blockName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25D7687C68E0DAA4 | Since: 323 | API-Set: unknown
     */
    export function setFloat(property: string, value: number): void {
        AppSetFloat(property, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x607E8E3D3E4F9611 | Since: 323 | API-Set: unknown
     */
    export function setInt(property: string, value: number): void {
        AppSetInt(property, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FF2FCEC4B7721B4 | Since: 323 | API-Set: unknown
     */
    export function setString(property: string, value: string): void {
        AppSetString(property, value);
    }

}


export namespace brain {
    /**
     * `BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);`
     *
     * - Nacorpio
     *
     * -----
     *
     * Hardcoded to not work in Multiplayer.
     *
     * Hash: 0x4EE5367468A65CCC | Since: 323 | API-Set: unknown
     */
    export function addScriptToRandomPed(name: string, model: number | string): void {
        if (typeof model === 'string') model = misc.getHashKey(model)
        AddScriptToRandomPed(name, model, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x14D8518E9760F08F | Since: 323 | API-Set: unknown
     */
    export function disableScriptSet(brainSet: number): void {
        DisableScriptBrainSet(brainSet);
    }

    /**
     * No comment provided
     *
     * Hash: 0x67AA4D73F0CFA86B | Since: 323 | API-Set: unknown
     */
    export function enableScriptSet(brainSet: number): void {
        EnableScriptBrainSet(brainSet);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCBA154209823057 | Since: 323 | API-Set: unknown
     */
    export function isObjectWithinActivationRange(_object: number | IObject): boolean {
        return IsObjectWithinBrainActivationRange(_object);
    }

    /**
     * Gets whether the world point the calling script is registered to is within desired range of the player.
     *
     * Hash: 0xC5042CC6F5E3D450 | Since: 323 | API-Set: unknown
     */
    export function isWorldPointWithinActivationRange(): boolean {
        return IsWorldPointWithinBrainActivationRange();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4D953DF78EBF8158 | Since: 323 | API-Set: unknown
     */
    export function reactivateAllObjectsThatAreWaitingTillOutOfRange(): void {
        Citizen.invokeNative('0x4D953DF78EBF8158');
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B40ED49D7D6FF84 | Since: 323 | API-Set: unknown
     */
    export function reactivateAllWorldsThatAreWaitingTillOutOfRange(): void {
        Citizen.invokeNative('0x0B40ED49D7D6FF84');
    }

    /**
     * Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
     *
     * Here are possible values of argument -
     *
     * "ob_tv"
     * "launcher_Darts"
     *
     * Hash: 0x6E91B04E08773030 | Since: 323 | API-Set: unknown
     */
    export function reactivateNamedObjectsWaitingTillOutOfRange(scriptName: string): void {
        Citizen.invokeNative('0x6E91B04E08773030', scriptName);
    }

    /**
     * Possible values:
     *
     * act_cinema
     * am_mp_carwash_launch
     * am_mp_carwash_control
     * am_mp_property_ext
     * chop
     * fairgroundHub
     * launcher_BasejumpHeli
     * launcher_BasejumpPack
     * launcher_CarWash
     * launcher_golf
     * launcher_Hunting_Ambient
     * launcher_MrsPhilips
     * launcher_OffroadRacing
     * launcher_pilotschool
     * launcher_Racing
     * launcher_rampage
     * launcher_rampage
     * launcher_range
     * launcher_stunts
     * launcher_stunts
     * launcher_tennis
     * launcher_Tonya
     * launcher_Triathlon
     * launcher_Yoga
     * ob_mp_bed_low
     * ob_mp_bed_med
     *
     * Hash: 0x6D6840CEE8845831 | Since: 323 | API-Set: unknown
     */
    export function reactivateNamedWorldsWaitingTillOutOfRange(scriptName: string): void {
        Citizen.invokeNative('0x6D6840CEE8845831', scriptName);
    }

    /**
     * Registers a script for any object with a specific model hash.
     *
     * `BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);`
     *
     * - Nacorpio
     *
     * Hash: 0x0BE84C318BA6EC22 | Since: 323 | API-Set: unknown
     */
    export function registerObjectScript(scriptName: string, modelHash: number | string, activationRange: number): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        RegisterObjectScriptBrain(scriptName, modelHash, 0, activationRange, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3CDC7136613284BD | Since: 323 | API-Set: unknown
     */
    export function registerWorldPointScript(scriptName: string, activationRange: number): void {
        RegisterWorldPointScriptBrain(scriptName, activationRange, 0);
    }

}


export namespace builtin {
    /**
     * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
     *
     * Hash: 0x11E019C8F43ACC8A | Since: 323 | API-Set: unknown
     */
    export function ceil(value: number): number {
        return Ceil(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD0FFB162F40A139C | Since: 323 | API-Set: unknown
     */
    export function cos(value: number): number {
        return Cos(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF34EE736CF047844 | Since: 323 | API-Set: unknown
     */
    export function floor(value: number): number {
        return Floor(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE816E655DE37FE20 | Since: 1493 | API-Set: unknown
     */
    export function log10(value: number): number {
        return Log10(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3621CC40F31FE2E | Since: 323 | API-Set: unknown
     */
    export function pow(base: number, exponent: number): number {
        return Pow(base, exponent);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2DB717A73826179 | Since: 323 | API-Set: unknown
     */
    export function round(value: number): number {
        return Round(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1B1E9A034A63A62 | Since: 323 | API-Set: unknown
     */
    export function settimera(value: number): void {
        Settimera(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5AE11BC36633DE4E | Since: 323 | API-Set: unknown
     */
    export function settimerb(value: number): void {
        Settimerb(value);
    }

    /**
     * THREAD_PRIO_HIGHEST = 0
     * THREAD_PRIO_NORMAL = 1
     * THREAD_PRIO_LOWEST = 2
     * THREAD_PRIO_MANUAL_UPDATE = 100
     *
     * Hash: 0x42B65DEEF2EDF2A1 | Since: 877 | API-Set: unknown
     */
    export function setThisThreadPriority(priority: number): void {
        SetThreadPriority(priority);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDD95A39E5544DE8 | Since: 323 | API-Set: unknown
     */
    export function shiftLeft(value: number, bitShift: number): number {
        return ShiftLeft(value, bitShift);
    }

    /**
     * No comment provided
     *
     * Hash: 0x97EF1E5BCE9DC075 | Since: 323 | API-Set: unknown
     */
    export function shiftRight(value: number, bitShift: number): number {
        return ShiftRight(value, bitShift);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BADBFA3B172435F | Since: 323 | API-Set: unknown
     */
    export function sin(value: number): number {
        return Sin(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71D93B57D07F9804 | Since: 323 | API-Set: unknown
     */
    export function sqrt(value: number): number {
        return Sqrt(value);
    }

    /**
     * Examples:
     * `g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);`
     * `l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);`
     * `SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);`
     * `SYSTEM::START_NEW_SCRIPT("emergencycall", 512);`
     * `SYSTEM::START_NEW_SCRIPT("emergencycall", 512);`
     * `SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);`
     * `SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);`
     * `SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);`
     * `SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);`
     *
     * Decompiled examples of usage when starting a script:
     *
     * `SCRIPT::REQUEST_SCRIPT(a_0);`
     * `if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {`
     * `SYSTEM::START_NEW_SCRIPT(a_0, v_3);`
     * `SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);`
     * return 1;
     * }
     *
     * or:
     *
     * v_2 = "MrsPhilips2";
     * `SCRIPT::REQUEST_SCRIPT(v_2);`
     * `while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {`
     * `SCRIPT::REQUEST_SCRIPT(v_2);`
     * `SYSTEM::WAIT(0);`
     * }
     * sub_8792(36);
     * `SYSTEM::START_NEW_SCRIPT(v_2, 17000);`
     * `SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);`
     *
     * Hash: 0xE81651AD79516E48 | Since: 323 | API-Set: unknown
     */
    export function startNewScript(scriptName: string, stackSize: number): number {
        return StartNewScript(scriptName, stackSize);
    }

    /**
     * return : script thread id, 0 if failed
     * Pass pointer to struct of args in p1, size of struct goes into p2
     *
     * Hash: 0xB8BA7F44DF1575E1 | Since: 323 | API-Set: unknown
     */
    export function startNewScriptWithArgs(scriptName: string, argCount: number, stackSize: number): [number, any] {
        return StartNewScriptWithArgs(scriptName, argCount, stackSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB1C67C3A5333A92 | Since: 323 | API-Set: unknown
     */
    export function startNewScriptWithNameHash(scriptHash: number | string, stackSize: number): number {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        return StartNewScriptWithNameHash(scriptHash, stackSize);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC4BB298BD441BE78 | Since: 323 | API-Set: unknown
     */
    export function startNewScriptWithNameHashAndArgs(scriptHash: number | string, argCount: number, stackSize: number): [number, any] {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        return StartNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize);
    }

    /**
     * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
     *
     * Hash: 0x83666F9FB8FEBD4B | Since: 323 | API-Set: unknown
     */
    export function timera(): number {
        return Timera();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9D9444186B5A374 | Since: 323 | API-Set: unknown
     */
    export function timerb(): number {
        return Timerb();
    }

    /**
     * Gets the current frame time.
     *
     * Hash: 0x0000000050597EE2 | Since: 323 | API-Set: unknown
     */
    export function timestep(): number {
        return Timestep();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBDA792448DB5A89 | Since: 323 | API-Set: unknown
     */
    export function toFloat(value: number): number {
        return ToFloat(value);
    }

    /**
     * Calculates distance between vectors.
     *
     * Hash: 0x2A488C176D52CCA5 | Since: 323 | API-Set: unknown
     */
    export function vdist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return Vdist(x1, y1, z1, x2, y2, z2);
    }

    /**
     * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
     *
     * Hash: 0xB7A628320EFF8E47 | Since: 323 | API-Set: unknown
     */
    export function vdist2(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return Vdist2(x1, y1, z1, x2, y2, z2);
    }

    /**
     * Calculates the magnitude of a vector.
     *
     * Hash: 0x652D2EEEF1D3E62C | Since: 323 | API-Set: unknown
     */
    export function vmag(pos: Vector3): number {
        return Vmag(pos.x, pos.y, pos.z);
    }

    /**
     * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
     *
     * Hash: 0xA8CEACB4F35AE058 | Since: 323 | API-Set: unknown
     */
    export function vmag2(pos: Vector3): number {
        return Vmag2(pos.x, pos.y, pos.z);
    }

    /**
     * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
     *
     * Hash: 0x4EDE34FBADD967A6 | Since: 323 | API-Set: unknown
     */
    export function wait(ms: number): void {
        Wait(ms);
    }

}


export namespace clock {
    /**
     * No comment provided
     *
     * Hash: 0xD716F30D8C8980E2 | Since: 323 | API-Set: unknown
     */
    export function addToTime(hours: number, minutes: number, seconds: number): void {
        AddToClockTime(hours, minutes, seconds);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8CA9670B9D83B3B | Since: 323 | API-Set: unknown
     */
    export function advanceTimeTo(hour: number, minute: number, second: number): void {
        AdvanceClockTimeTo(hour, minute, second);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3D10BC92A4DB1D35 | Since: 323 | API-Set: unknown
     */
    export function getDayOfMonth(): number {
        return GetClockDayOfMonth();
    }

    /**
     * Gets the current day of the week.
     *
     * 0: Sunday
     * 1: Monday
     * 2: Tuesday
     * 3: Wednesday
     * 4: Thursday
     * 5: Friday
     * 6: Saturday
     *
     * Hash: 0xD972E4BD7AEB235F | Since: 323 | API-Set: unknown
     */
    export function getDayOfWeek(): number {
        return GetClockDayOfWeek();
    }

    /**
     * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
     *
     * Hash: 0x25223CA6B4D20B7F | Since: 323 | API-Set: unknown
     */
    export function getHours(): number {
        return GetClockHours();
    }

    /**
     * Gets the current ingame clock minute.
     *
     * Hash: 0x13D2B8ADD79640F2 | Since: 323 | API-Set: unknown
     */
    export function getMinutes(): number {
        return GetClockMinutes();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBC72712E80257A1 | Since: 323 | API-Set: unknown
     */
    export function getMonth(): number {
        return GetClockMonth();
    }

    /**
     * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
     *
     * Hash: 0x494E97C2EF27C470 | Since: 323 | API-Set: unknown
     */
    export function getSeconds(): number {
        return GetClockSeconds();
    }

    /**
     * No comment provided
     *
     * Hash: 0x961777E64BDAF717 | Since: 323 | API-Set: unknown
     */
    export function getYear(): number {
        return GetClockYear();
    }

    /**
     * Gets local system time as year, month, day, hour, minute and second.
     *
     * Example usage:
     *
     * int year;
     * int month;
     * int day;
     * int hour;
     * int minute;
     * int second;
     * `or use std::tm struct`
     *
     * `TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);`
     *
     *
     * Hash: 0x50C7A99057A69748 | Since: 323 | API-Set: unknown
     */
    export function getLocalTime(): [number, number, number, number, number, number] {
        return GetLocalTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F8B4D1C595B11DB | Since: 323 | API-Set: unknown
     */
    export function getMillisecondsPerGameMinute(): number {
        return GetMillisecondsPerGameMinute();
    }

    /**
     * Gets system time as year, month, day, hour, minute and second.
     *
     * Example usage:
     *
     * int year;
     * int month;
     * int day;
     * int hour;
     * int minute;
     * int second;
     *
     * `TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);`
     *
     *
     * Hash: 0xDA488F299A5B164E | Since: 323 | API-Set: unknown
     */
    export function getPosixTime(): [number, number, number, number, number, number] {
        return GetPosixTime();
    }

    /**
     * Gets current UTC time
     *
     * Hash: 0x8117E09A19EEF4D3 | Since: 323 | API-Set: unknown
     */
    export function getUtcTime(): [number, number, number, number, number, number] {
        return GetUtcTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4055E40BD2DBEC1D | Since: 323 | API-Set: unknown
     */
    export function pause(toggle: boolean): void {
        PauseClock(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB096419DF0D06CE7 | Since: 323 | API-Set: unknown
     */
    export function setDate(day: number, month: number, year: number): void {
        SetClockDate(day, month, year);
    }

    /**
     * SET_CLOCK_TIME(12, 34, 56);
     *
     * Hash: 0x47C3B5848C3E45D8 | Since: 323 | API-Set: unknown
     */
    export function setTime(hour: number, minute: number, second: number): void {
        SetClockTime(hour, minute, second);
    }

}


export namespace cutscene {
    /**
     * No comment provided
     *
     * Hash: 0xB56BBBCC2955D9CB | Since: 323 | API-Set: unknown
     */
    export function canRequestAssetsForEntity(): boolean {
        return CanRequestAssetsForCutsceneEntity();
    }

    /**
     * modelHash (p1) was always 0 in R* scripts
     *
     * Hash: 0x645D0B458D8E17B5 | Since: 323 | API-Set: unknown
     */
    export function canSetEnterStateForRegisteredEntity(cutsceneEntName: string, modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CanSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2CBCD0930DFB420 | Since: 323 | API-Set: unknown
     */
    export function canSetExitStateForCamera(): boolean {
        return CanSetExitStateForCamera(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C6A6451C79E4662 | Since: 323 | API-Set: unknown
     */
    export function canSetExitStateForRegisteredEntity(cutsceneEntName: string, modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return CanSetExitStateForRegisteredEntity(cutsceneEntName, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5EDEF0CF8C1DAB3C | Since: 323 | API-Set: unknown
     */
    export function canUseMobilePhoneDuring(): boolean {
        return Citizen.invokeNative('0x5EDEF0CF8C1DAB3C');
    }

    /**
     * No comment provided
     *
     * Hash: 0x499EF20C5DB25C59 | Since: 323 | API-Set: unknown
     */
    export function doesEntityExist(cutsceneEntName: string, modelHash: number | string): boolean {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return DoesCutsceneEntityExist(cutsceneEntName, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4FCD976DA686580C | Since: 1290 | API-Set: unknown
     */
    export function doesHandleExist(cutsceneHandle: number): number {
        return Citizen.invokeNative('0x4FCD976DA686580C', cutsceneHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x583DF8E3D4AFBD98 | Since: 323 | API-Set: unknown
     */
    export function getConcatSectionPlaying(): number {
        return Citizen.invokeNative('0x583DF8E3D4AFBD98');
    }

    /**
     * No comment provided
     *
     * Hash: 0x971D7B15BCDBEF99 | Since: 1734 | API-Set: unknown
     */
    export function getEndTime(): number {
        return Citizen.invokeNative('0x971D7B15BCDBEF99');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D583F71C901F2A3 | Since: 2802 | API-Set: unknown
     */
    export function getPlayDuration(): number {
        return Citizen.invokeNative('0x5D583F71C901F2A3');
    }

    /**
     * No comment provided
     *
     * Hash: 0x710286BC5EF4D6E1 | Since: 3258 | API-Set: unknown
     */
    export function getPlayTime(): number {
        return GetCutscenePlayTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0x49010A6A396553D8 | Since: 323 | API-Set: unknown
     */
    export function getSectionPlaying(): number {
        return GetCutsceneSectionPlaying();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE625BEABBAFFDAB9 | Since: 323 | API-Set: unknown
     */
    export function getTime(): number {
        return GetCutsceneTime();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE53B14A19E480D4 | Since: 323 | API-Set: unknown
     */
    export function getTotalDuration(): number {
        return GetCutsceneTotalDuration();
    }

    /**
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x0ABC54DE641DC0FC | Since: 323 | API-Set: unknown
     */
    export function getCutFileConcatCount(cutsceneName: string): number {
        return GetCutFileNumSections(cutsceneName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1FA904B60E492336 | Since: 3570 | API-Set: unknown
     */
    export function getCutFileOffset(cutsceneName: string, index: number): Vector3 {
        return new Vector3(Citizen.invokeNative('0x1FA904B60E492336', cutsceneName, index));
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A2E9FDB9A8C62F6 | Since: 323 | API-Set: unknown
     */
    export function getEntityIndexOfEntity(cutsceneEntName: string, modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC0741A26499654CD | Since: 323 | API-Set: unknown
     */
    export function getEntityIndexOfRegisteredEntity(cutsceneEntName: string, modelHash: number | string): number {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        return GetEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash);
    }

    /**
     * Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
     *
     * Hash: 0x708BDD8CD795B043 | Since: 323 | API-Set: unknown
     */
    export function hasCutThisFrame(): boolean {
        return HasCutsceneCutThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C0A893088881D57 | Since: 323 | API-Set: unknown
     */
    export function hasFinished(): boolean {
        return HasCutsceneFinished();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC59F528E9AB9F339 | Since: 323 | API-Set: unknown
     */
    export function hasLoaded(): boolean {
        return HasCutsceneLoaded();
    }

    /**
     * Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0xA1C996C2A744262E | Since: 323 | API-Set: unknown
     */
    export function hasCutFileLoaded(cutsceneName: string): boolean {
        return HasCutFileLoaded(cutsceneName);
    }

    /**
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x228D3D94F8A11C3C | Since: 323 | API-Set: unknown
     */
    export function hasThisLoaded(cutsceneName: string): boolean {
        return HasThisCutsceneLoaded(cutsceneName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x991251AFC3981F84 | Since: 323 | API-Set: unknown
     */
    export function isActive(): boolean {
        return IsCutsceneActive();
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x4CEBC1ED31E8925E | Since: 323 | API-Set: unknown
     */
    export function isAuthorized(cutsceneName: string): boolean {
        return Citizen.invokeNative('0x4CEBC1ED31E8925E', cutsceneName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71B74D2AE19338D0 | Since: 323 | API-Set: unknown
     */
    export function isPlaybackFlagSet(flag: number): boolean {
        return IsCutscenePlaybackFlagSet(flag);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD3C2E180A40F031E | Since: 323 | API-Set: unknown
     */
    export function isPlaying(): boolean {
        return IsCutscenePlaying();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0FE76168A189DDB | Since: 323 | API-Set: unknown
     */
    export function isMultiheadFadeUp(): boolean {
        return Citizen.invokeNative('0xA0FE76168A189DDB');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F137B508DE238F2 | Since: 323 | API-Set: unknown
     */
    export function networkSetMocapCanBeSkipped(toggle: boolean): void {
        Citizen.invokeNative('0x2F137B508DE238F2', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE40C1C56DF95C2E8 | Since: 323 | API-Set: unknown
     */
    export function registerEntityFor(cutscenePed: number | IPed, cutsceneEntName: string, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        RegisterEntityForCutscene(cutscenePed, cutsceneEntName, 0, modelHash, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x440AF51A3462B86F | Since: 323 | API-Set: unknown
     */
    export function remove(): void {
        RemoveCutscene();
    }

    /**
     * Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0xD00D76A7DFC9D852 | Since: 323 | API-Set: unknown
     */
    export function removeCutFile(cutsceneName: string): void {
        RemoveCutFile(cutsceneName);
    }

    /**
     * flags: Usually 8
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x7A86743F475D9E09 | Since: 323 | API-Set: unknown
     */
    export function request(cutsceneName: string, flags: number): void {
        RequestCutscene(cutsceneName, flags);
    }

    /**
     * flags: Usually 8
     *
     * playbackFlags: Which scenes should be played.
     * Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0xC23DE0E91C30B58C | Since: 323 | API-Set: unknown
     */
    export function requestWithPlaybackList(cutsceneName: string, playbackFlags: number, flags: number): void {
        RequestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags);
    }

    /**
     * Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x06A3524161C502BA | Since: 323 | API-Set: unknown
     */
    export function requestCutFile(cutsceneName: string): void {
        RequestCutFile(cutsceneName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2131046957F31B04 | Since: 323 | API-Set: unknown
     */
    export function setCanDisplayMinimapDuringThisUpdate(): void {
        RegisterSynchronisedScriptSpeech();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE36A98D8AB3D3C66 | Since: 323 | API-Set: unknown
     */
    export function setCarGeneratorsCanUpdateDuring(): void {
        Citizen.invokeNative('0xE36A98D8AB3D3C66', false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x41FAA8FB2ECE8720 | Since: 323 | API-Set: unknown
     */
    export function setCanBeSkipped(): void {
        SetCutsceneCanBeSkipped(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C61C75BEE8184C2 | Since: 323 | API-Set: unknown
     */
    export function setEntityStreamingFlags(cutsceneEntName: string): void {
        SetCutsceneEntityStreamingFlags(cutsceneEntName, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8093F23ABACCC7D4 | Since: 323 | API-Set: unknown
     */
    export function setFadeValues(): void {
        SetCutsceneFadeValues(false, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x20746F7B1032A3C7 | Since: 323 | API-Set: unknown
     */
    export function setMultiheadFade(): void {
        Citizen.invokeNative('0x20746F7B1032A3C7', false, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06EE9048FD080382 | Since: 323 | API-Set: unknown
     */
    export function setMultiheadFadeManual(): void {
        Citizen.invokeNative('0x06EE9048FD080382', false);
    }

    /**
     * p3 could be heading. Needs more research.
     *
     * Hash: 0xB812B3FD1C01CF27 | Since: 323 | API-Set: unknown
     */
    export function setOrigin(pos: Vector3): void {
        SetCutsceneOrigin(pos.x, pos.y, pos.z, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x011883F41211432A | Since: 323 | API-Set: unknown
     */
    export function setOriginAndOrientation(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
        Citizen.invokeNative('0x011883F41211432A', x1, y1, z1, x2, y2, z2, 0);
    }

    /**
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0xBA01E7B6DEEFBBC9 | Since: 323 | API-Set: unknown
     */
    export function setPedComponentVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetCutscenePedComponentVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A56C06EBEF2B0D9 | Since: 323 | API-Set: unknown
     */
    export function setPedComponentVariationFromPed(cutsceneEntName: string, ped: number | IPed, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetCutscenePedComponentVariationFromPed(cutsceneEntName, ped, modelHash);
    }

    /**
     * Thanks R*! ;)
     *
     * if ((l_161 == 0) || (l_161 == 2)) {
     * sub_2ea27("Trying to set Jimmy prop variation");
     * `CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);`
     * }
     *
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0x0546524ADE2E9723 | Since: 323 | API-Set: unknown
     */
    export function setPedPropVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        SetCutscenePedPropVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash);
    }

    /**
     * Only used twice in R* scripts
     *
     * Hash: 0x9896CE4721BE84BA | Since: 323 | API-Set: unknown
     */
    export function setTriggerArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
        SetCutsceneTriggerArea(x1, y1, z1, x2, y2, z2);
    }

    /**
     * Toggles a value (bool) for cutscenes.
     *
     * Hash: 0xC61B86C9F61EB404 | Since: 323 | API-Set: unknown
     */
    export function setPadCanShakeDuring(toggle: boolean): void {
        Citizen.invokeNative('0xC61B86C9F61EB404', toggle);
    }

    /**
     * Sets the cutscene's owning thread ID.
     *
     * Hash: 0x8D9DF6ECA8768583 | Since: 323 | API-Set: unknown
     */
    export function setScriptCanStart(threadId: number): void {
        Citizen.invokeNative('0x8D9DF6ECA8768583', threadId);
    }

    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x7F96F23FA9B73327 | Since: 323 | API-Set: unknown
     */
    export function setVehicleModelPlayerWillExitScene(modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        Citizen.invokeNative('0x7F96F23FA9B73327', modelHash);
    }

    /**
     * flags: Usually 0.
     *
     * Hash: 0x186D5CB5E7B0FF7B | Since: 323 | API-Set: unknown
     */
    export function start(flags: number): void {
        StartCutscene(flags);
    }

    /**
     * flags: Usually 0.
     *
     * Hash: 0x1C9ADDA3244A1FBF | Since: 323 | API-Set: unknown
     */
    export function startAtCoords(pos: Vector3, flags: number): void {
        StartCutsceneAtCoords(pos.x, pos.y, pos.z, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7272775B4DC786E | Since: 323 | API-Set: unknown
     */
    export function stop(): void {
        StopCutscene(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD220BDD222AC4A1E | Since: 323 | API-Set: unknown
     */
    export function stopImmediately(): void {
        StopCutsceneImmediately();
    }

    /**
     * No comment provided
     *
     * Hash: 0x40C8656EDAEDD569 | Since: 323 | API-Set: unknown
     */
    export function wasSkipped(): boolean {
        return WasCutsceneSkipped();
    }

}


export namespace datafile {
    /**
     * No comment provided
     *
     * Hash: 0xF8B0F5A43E928C76 | Since: 323 | API-Set: unknown
     */
    export function dataarrayAddBool(value: boolean): any {
        return DataarrayAddBool(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6889498B3E19C797 | Since: 323 | API-Set: unknown
     */
    export function dataarrayAddDict(): [any, any] {
        return DataarrayAddDict();
    }

    /**
     * No comment provided
     *
     * Hash: 0x57A995FD75D37F56 | Since: 323 | API-Set: unknown
     */
    export function dataarrayAddFloat(value: number): any {
        return DataarrayAddFloat(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCABDB751D86FE93B | Since: 323 | API-Set: unknown
     */
    export function dataarrayAddInt(value: number): any {
        return DataarrayAddInt(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F0661C155AEEEAA | Since: 323 | API-Set: unknown
     */
    export function dataarrayAddString(value: string): any {
        return DataarrayAddString(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x407F8D034F70F0C2 | Since: 323 | API-Set: unknown
     */
    export function dataarrayAddVector(valueX: number, valueY: number, valueZ: number): any {
        return DataarrayAddVector(valueX, valueY, valueZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50C1B2874E50C114 | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetBool(arrayIndex: number): [boolean, any] {
        return DataarrayGetBool(arrayIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x065DB281590CEA2D | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetCount(): [number, any] {
        return DataarrayGetCount();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B5FADCC4E3A145F | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetDict(arrayIndex: number): [any, any] {
        return DataarrayGetDict(arrayIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC0C527B525D7CFB5 | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetFloat(arrayIndex: number): [number, any] {
        return DataarrayGetFloat(arrayIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E5AE19425CD74BE | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetInt(arrayIndex: number): [number, any] {
        return DataarrayGetInt(arrayIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD3F2FFEB8D836F52 | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetString(arrayIndex: number): [string, any] {
        return DataarrayGetString(arrayIndex);
    }

    /**
     * Types:
     * 1 = Boolean
     * 2 = Integer
     * 3 = Float
     * 4 = String
     * 5 = Vector3
     * 6 = Object
     * 7 = Array
     *
     * Hash: 0x3A0014ADB172A3C5 | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetType(arrayIndex: number): [number, any] {
        return DataarrayGetType(arrayIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D2064E5B64A628A | Since: 323 | API-Set: unknown
     */
    export function dataarrayGetVector(arrayIndex: number): [Vector3, any] {
        return new Vector3(DataarrayGetVector(arrayIndex));
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B11728527CA6E5F | Since: 323 | API-Set: unknown
     */
    export function datadictCreateArray(key: string): [any, any] {
        return DatadictCreateArray(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA358F56F10732EE1 | Since: 323 | API-Set: unknown
     */
    export function datadictCreateDict(key: string): [any, any] {
        return DatadictCreateDict(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A983AA9DA2659ED | Since: 323 | API-Set: unknown
     */
    export function datadictGetArray(key: string): [any, any] {
        return DatadictGetArray(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1186940ED72FFEEC | Since: 323 | API-Set: unknown
     */
    export function datadictGetBool(key: string): [boolean, any] {
        return DatadictGetBool(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB6B9DDC412FCEEE2 | Since: 323 | API-Set: unknown
     */
    export function datadictGetDict(key: string): [any, any] {
        return DatadictGetDict(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06610343E73B9727 | Since: 323 | API-Set: unknown
     */
    export function datadictGetFloat(key: string): [number, any] {
        return DatadictGetFloat(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0x78F06F6B1FB5A80C | Since: 323 | API-Set: unknown
     */
    export function datadictGetInt(key: string): [number, any] {
        return DatadictGetInt(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3D2FD9E763B24472 | Since: 323 | API-Set: unknown
     */
    export function datadictGetString(key: string): [string, any] {
        return DatadictGetString(key);
    }

    /**
     * Types:
     * 1 = Boolean
     * 2 = Integer
     * 3 = Float
     * 4 = String
     * 5 = Vector3
     * 6 = Object
     * 7 = Array
     *
     * Hash: 0x031C55ED33227371 | Since: 323 | API-Set: unknown
     */
    export function datadictGetType(key: string): [number, any] {
        return DatadictGetType(key);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46CD3CB66E0825CC | Since: 323 | API-Set: unknown
     */
    export function datadictGetVector(key: string): [Vector3, any] {
        return new Vector3(DatadictGetVector(key));
    }

    /**
     * No comment provided
     *
     * Hash: 0x35124302A556A325 | Since: 323 | API-Set: unknown
     */
    export function datadictSetBool(key: string, value: boolean): any {
        return DatadictSetBool(key, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC27E1CC2D795105E | Since: 323 | API-Set: unknown
     */
    export function datadictSetFloat(key: string, value: number): any {
        return DatadictSetFloat(key, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7E035450A7948D5 | Since: 323 | API-Set: unknown
     */
    export function datadictSetInt(key: string, value: number): any {
        return DatadictSetInt(key, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8FF3847DADD8E30C | Since: 323 | API-Set: unknown
     */
    export function datadictSetString(key: string, value: string): any {
        return DatadictSetString(key, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4CD49B76338C7DEE | Since: 323 | API-Set: unknown
     */
    export function datadictSetVector(key: string, valueX: number, valueY: number, valueZ: number): any {
        return DatadictSetVector(key, valueX, valueY, valueZ);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6CC86E78358D5119 | Since: 323 | API-Set: unknown
     */
    export function clearWatchList(): void {
        DatafileClearWatchList();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD27058A1CA2B13EE | Since: 323 | API-Set: unknown
     */
    export function create(): void {
        DatafileCreate(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9AB9C1CFC8862DFB | Since: 323 | API-Set: unknown
     */
    export function datafileDelete(): void {
        DatafileDelete(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6AD0BD5E087866CB | Since: 2189 | API-Set: unknown
     */
    export function deleteForAdditionalDataFile(): void {
        Citizen.invokeNative('0x6AD0BD5E087866CB', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F5EA1C01D65A100 | Since: 323 | API-Set: unknown
     */
    export function deleteRequestedFile(requestId: number): boolean {
        return DatafileDeleteRequestedFile(requestId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC55854C7D7274882 | Since: 323 | API-Set: unknown
     */
    export function flushMissionHeader(): void {
        DatafileFlushMissionHeader();
    }

    /**
     * No comment provided
     *
     * Hash: 0x906B778CA1DC72B6 | Since: 323 | API-Set: unknown
     */
    export function getFileDict(): any {
        return DatafileGetFileDict(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDBF860CF1DB8E599 | Since: 2189 | API-Set: unknown
     */
    export function getFileDictForAdditionalDataFile(): any {
        return Citizen.invokeNative('0xDBF860CF1DB8E599', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x15FF52B809DB2353 | Since: 323 | API-Set: unknown
     */
    export function hasLoadedFileData(requestId: number): boolean {
        return DatafileHasLoadedFileData(requestId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF8CC1EBE0B62E29F | Since: 323 | API-Set: unknown
     */
    export function hasValidFileData(requestId: number): boolean {
        return DatafileHasValidFileData(requestId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEDB96A7584AA8CF | Since: 323 | API-Set: unknown
     */
    export function isSavePending(): boolean {
        return DatafileIsSavePending();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCCAE5B92A830878 | Since: 323 | API-Set: unknown
     */
    export function isValidRequestId(index: number): boolean {
        return DatafileIsValidRequestId(index);
    }

    /**
     * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
     *
     * Returns whether or not the file was successfully loaded.
     *
     * Example:
     * `DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"`
     *
     * Hash: 0xC5238C011AF405E4 | Since: 323 | API-Set: unknown
     */
    export function loadOfflineUgc(filename: string): boolean {
        return DatafileLoadOfflineUgc(filename, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6EEF01087181EDD | Since: 2189 | API-Set: unknown
     */
    export function loadOfflineUgcForAdditionalDataFile(): boolean {
        return Citizen.invokeNative('0xA6EEF01087181EDD', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x22DA66936E0FFF37 | Since: 323 | API-Set: unknown
     */
    export function selectActiveFile(requestId: number): boolean {
        return DatafileSelectActiveFile(requestId, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01095C95CD46B624 | Since: 323 | API-Set: unknown
     */
    export function selectCreatorStats(): boolean {
        return DatafileSelectCreatorStats(0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA69AC4ADE82B57A4 | Since: 323 | API-Set: unknown
     */
    export function selectUgcData(): boolean {
        return DatafileSelectUgcData(0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x52818819057F2B40 | Since: 323 | API-Set: unknown
     */
    export function selectUgcPlayerData(): boolean {
        return DatafileSelectUgcPlayerData(0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9CB0BFA7A9342C3D | Since: 323 | API-Set: unknown
     */
    export function selectUgcStats(): boolean {
        return DatafileSelectUgcStats(0, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x83BCCE3224735F05 | Since: 323 | API-Set: unknown
     */
    export function startSaveToCloud(filename: string): boolean {
        return DatafileStartSaveToCloud(filename, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2ED61456317B8178 | Since: 323 | API-Set: unknown
     */
    export function storeMissionHeader(): void {
        DatafileStoreMissionHeader(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4DFDD9EB705F8140 | Since: 323 | API-Set: unknown
     */
    export function updateSaveToCloud(): [boolean, boolean] {
        return DatafileUpdateSaveToCloud();
    }

    /**
     * Adds the given requestID to the watch list.
     *
     * Hash: 0xAD6875BBC0FC899C | Since: 323 | API-Set: unknown
     */
    export function watchRequestId(requestId: number): void {
        DatafileWatchRequestId(requestId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC84527E235FCA219 | Since: 323 | API-Set: unknown
     */
    export function ugcCreateContent(dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean): [boolean, any] {
        return UgcCreateContent(dataCount, contentName, description, tagsCsv, contentTypeName, publish, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA5EFC3E847D60507 | Since: 323 | API-Set: unknown
     */
    export function ugcCreateMission(contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean): boolean {
        return UgcCreateMission(contentName, description, tagsCsv, contentTypeName, publish, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x692D808C34A82143 | Since: 323 | API-Set: unknown
     */
    export function ugcSetPlayerData(contentId: string, rating: number, contentTypeName: string): boolean {
        return UgcSetPlayerData(contentId, rating, contentTypeName, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x648E7A5434AF7969 | Since: 323 | API-Set: unknown
     */
    export function ugcUpdateContent(contentId: string, dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string): [boolean, any] {
        return UgcUpdateContent(contentId, dataCount, contentName, description, tagsCsv, contentTypeName, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4645DE9980999E93 | Since: 323 | API-Set: unknown
     */
    export function ugcUpdateMission(contentId: string, contentName: string, description: string, tagsCsv: string, contentTypeName: string): boolean {
        return UgcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName, undefined);
    }

}


export namespace decorator {
    /**
     * Returns whether or not the specified property is set for the entity.
     *
     * Hash: 0x05661B80A8C9165F | Since: 323 | API-Set: unknown
     */
    export function decorExistOn(entity: number | IEntity, propertyName: string): boolean {
        return DecorExistOn(entity, propertyName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDACE671663F2F5DB | Since: 323 | API-Set: unknown
     */
    export function decorGetBool(entity: number | IEntity, propertyName: string): boolean {
        return DecorGetBool(entity, propertyName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6524A2F114706F43 | Since: 323 | API-Set: unknown
     */
    export function decorGetFloat(entity: number | IEntity, propertyName: string): number {
        return DecorGetFloat(entity, propertyName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA06C969B02A97298 | Since: 323 | API-Set: unknown
     */
    export function decorGetInt(entity: number | IEntity, propertyName: string): number {
        return DecorGetInt(entity, propertyName);
    }

    /**
     * type: see DECOR_REGISTER
     *
     * Hash: 0x4F14F9F870D6FBC8 | Since: 323 | API-Set: unknown
     */
    export function decorIsRegisteredAsType(propertyName: string, _type: number): boolean {
        return DecorIsRegisteredAsType(propertyName, _type);
    }

    /**
     * https://alloc8or.re/gta5/doc/enums/eDecorType.txt
     *
     * Hash: 0x9FD90732F56403CE | Since: 323 | API-Set: unknown
     */
    export function decorRegister(propertyName: string, _type: number): void {
        DecorRegister(propertyName, _type);
    }

    /**
     * Called after all decorator type initializations.
     *
     * Hash: 0xA9D14EEA259F9248 | Since: 323 | API-Set: unknown
     */
    export function decorRegisterLock(): void {
        DecorRegisterLock();
    }

    /**
     * No comment provided
     *
     * Hash: 0x00EE9F297C738720 | Since: 323 | API-Set: unknown
     */
    export function decorRemove(entity: number | IEntity, propertyName: string): boolean {
        return DecorRemove(entity, propertyName);
    }

    /**
     * This function sets metadata of type bool to specified entity.
     *
     *
     * Hash: 0x6B1E8E2ED1335B71 | Since: 323 | API-Set: unknown
     */
    export function decorSetBool(entity: number | IEntity, propertyName: string, value: boolean): boolean {
        return DecorSetBool(entity, propertyName, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x211AB1DD8D0F363A | Since: 323 | API-Set: unknown
     */
    export function decorSetFloat(entity: number | IEntity, propertyName: string, value: number): boolean {
        return DecorSetFloat(entity, propertyName, value);
    }

    /**
     * Sets property to int.
     *
     * Hash: 0x0CE3AA5E1CA19E10 | Since: 323 | API-Set: unknown
     */
    export function decorSetInt(entity: number | IEntity, propertyName: string, value: number): boolean {
        return DecorSetInt(entity, propertyName, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95AED7B8E39ECAA4 | Since: 323 | API-Set: unknown
     */
    export function decorSetTime(entity: number | IEntity, propertyName: string, timestamp: number): boolean {
        return DecorSetTime(entity, propertyName, timestamp);
    }

}


export namespace dlc {
    /**
     * No comment provided
     *
     * Hash: 0x241FCA5B1AA14F75 | Since: 323 | API-Set: unknown
     */
    export function areAnyCcsPending(): boolean {
        return Citizen.invokeNative('0x241FCA5B1AA14F75');
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xF2E07819EF1A5289 | Since: 323 | API-Set: unknown
     */
    export function checkCloudDataCorrect(): boolean {
        return Citizen.invokeNative('0xF2E07819EF1A5289');
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xA213B11DFF526300 | Since: 323 | API-Set: unknown
     */
    export function checkCompatPackConfiguration(): boolean {
        return Citizen.invokeNative('0xA213B11DFF526300');
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D30F648014A92B5 | Since: 323 | API-Set: unknown
     */
    export function getEverHadBadPackOrder(): boolean {
        return GetExtraContentPackHasBeenInstalled();
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x9489659372A81585 | Since: 323 | API-Set: unknown
     */
    export function getExtracontentCloudResult(): number {
        return Citizen.invokeNative('0x9489659372A81585');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC4637A6D03C24CC3 | Since: 1734 | API-Set: unknown
     */
    export function getIsInitialLoadingScreenActive(): boolean {
        return Citizen.invokeNative('0xC4637A6D03C24CC3');
    }

    /**
     * No comment provided
     *
     * Hash: 0x10D0A8F259E93EC9 | Since: 323 | API-Set: unknown
     */
    export function getIsLoadingScreenActive(): boolean {
        return GetIsLoadingScreenActive();
    }

    /**
     * Sets the value of the specified variable to 0.
     * Always returns true.
     *
     * Hash: 0x46E2B844905BC5F0 | Since: 323 | API-Set: unknown
     */
    export function hasCloudRequestsFinished(unused: number): [boolean, boolean] {
        return HasCloudRequestsFinished(unused);
    }

    /**
     * Returns true if the given DLC pack is present.
     *
     * Hash: 0x812595A0644CE1DE | Since: 323 | API-Set: unknown
     */
    export function isPresent(dlcHash: number | string): boolean {
        if (typeof dlcHash === 'string') dlcHash = misc.getHashKey(dlcHash)
        return IsDlcPresent(dlcHash);
    }

    /**
     * This loads the GTA:O dlc map parts (high end garages, apartments).
     * Works in singleplayer.
     * In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
     *
     * Hash: 0x0888C3502DBBEEF5 | Since: 323 | API-Set: unknown
     */
    export function onEnterMp(): void {
        OnEnterMp();
    }

    /**
     * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
     * Works in singleplayer.
     *
     * Hash: 0xD7C10C4A637992C9 | Since: 323 | API-Set: unknown
     */
    export function onEnterSp(): void {
        OnEnterSp();
    }

}


export namespace event {
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0xD9F8455409B525E9 | Since: 323 | API-Set: unknown
     */
    export function addShockingAtPosition(eventType: number, pos: Vector3, duration: number): number {
        return AddShockingEventAtPosition(eventType, pos.x, pos.y, pos.z, duration);
    }

    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x7FD8F3BE76F89422 | Since: 323 | API-Set: unknown
     */
    export function addShockingForEntity(eventType: number, entity: number | IEntity, duration: number): number {
        return AddShockingEventForEntity(eventType, entity, duration);
    }

    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * This is limited to 4 blocked events at a time.
     *
     * Hash: 0xE42FCDFD0E4196F7 | Since: 323 | API-Set: unknown
     */
    export function blockDecisionMaker(name: number | string, eventType: number): void {
        if (typeof name === 'string') name = misc.getHashKey(name)
        BlockDecisionMakerEvent(name, eventType);
    }

    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x4FC9381A7AEE8968 | Since: 323 | API-Set: unknown
     */
    export function clearDecisionMakerResponse(name: number | string, eventType: number): void {
        if (typeof name === 'string') name = misc.getHashKey(name)
        ClearDecisionMakerEventResponse(name, eventType);
    }

    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x1374ABB7C15BAB92 | Since: 323 | API-Set: unknown
     */
    export function isShockingInSphere(eventType: number, pos: Vector3, radius: number): boolean {
        return IsShockingEventInSphere(eventType, pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAABE8FDFA21274C | Since: 323 | API-Set: unknown
     */
    export function removeAllShockings(): void {
        RemoveAllShockingEvents(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CDA538C44C6CCE5 | Since: 323 | API-Set: unknown
     */
    export function removeShocking(event: number): boolean {
        return RemoveShockingEvent(event);
    }

    /**
     * No comment provided
     *
     * Hash: 0x340F1415B68AEADE | Since: 323 | API-Set: unknown
     */
    export function removeShockingSpawnBlockingAreas(): void {
        RemoveShockingEventSpawnBlockingAreas();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB604A2942ADED0EE | Since: 323 | API-Set: unknown
     */
    export function setDecisionMaker(ped: number | IPed, name: number | string): void {
        if (typeof name === 'string') name = misc.getHashKey(name)
        SetDecisionMaker(ped, name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F3B7749C112D552 | Since: 323 | API-Set: unknown
     */
    export function suppressAgitationsNextFrame(): void {
        SuppressAgitationEventsNextFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F9A292AD0A3BD89 | Since: 323 | API-Set: unknown
     */
    export function suppressShockingsNextFrame(): void {
        SuppressShockingEventsNextFrame();
    }

    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x3FD2EC8BF1F1CF30 | Since: 323 | API-Set: unknown
     */
    export function suppressShockingTypeNextFrame(eventType: number): void {
        SuppressShockingEventTypeNextFrame(eventType);
    }

    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0xD7CD9CF34F2C99E8 | Since: 323 | API-Set: unknown
     */
    export function unblockDecisionMaker(name: number | string, eventType: number): void {
        if (typeof name === 'string') name = misc.getHashKey(name)
        UnblockDecisionMakerEvent(name, eventType);
    }

}


export namespace extrametadata {
    /**
     * No comment provided
     *
     * Hash: 0x7796B21B76221BC5 | Since: 2612 | API-Set: unknown
     */
    export function doesCurrentPedComponentHaveRestrictionTag(ped: number | IPed, componentId: number, restrictionTagHash: number | string): boolean {
        if (typeof restrictionTagHash === 'string') restrictionTagHash = misc.getHashKey(restrictionTagHash)
        return Citizen.invokeNative('0x7796B21B76221BC5', ped, componentId, restrictionTagHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD726BAB4554DA580 | Since: 2612 | API-Set: unknown
     */
    export function doesCurrentPedPropHaveRestrictionTag(ped: number | IPed, componentId: number, restrictionTagHash: number | string): boolean {
        if (typeof restrictionTagHash === 'string') restrictionTagHash = misc.getHashKey(restrictionTagHash)
        return Citizen.invokeNative('0xD726BAB4554DA580', ped, componentId, restrictionTagHash);
    }

    /**
     * Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json
     *
     * componentId/last parameter seems to be unused.
     *
     * Hash: 0x341DE7ED1D2A1BFD | Since: 323 | API-Set: unknown
     */
    export function doesShopPedApparelHaveRestrictionTag(componentHash: number | string, restrictionTagHash: number | string, componentId: number): boolean {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        if (typeof restrictionTagHash === 'string') restrictionTagHash = misc.getHashKey(restrictionTagHash)
        return DoesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId);
    }

    /**
     * From fm_deathmatch_creator and fm_race_creator:
     *
     * `FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));`
     * `FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));`
     *
     * Hash: 0x6BEDF5769AC2DC07 | Since: 1604 | API-Set: unknown
     */
    export function executeContentChangesetGroupForAll(hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        LoadContentChangeSetGroup(hash);
    }

    /**
     * dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
     * outData is a struct of 3 8-byte items.
     * The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
     *
     * Hash: 0x33468EDC08E371F6 | Since: 323 | API-Set: unknown
     */
    export function getDlcVehicleData(dlcVehicleIndex: number): [boolean, any] {
        return GetDlcVehicleData(dlcVehicleIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5549EE11FA22FCF2 | Since: 323 | API-Set: unknown
     */
    export function getDlcVehicleFlags(dlcVehicleIndex: number): number {
        return GetDlcVehicleFlags(dlcVehicleIndex);
    }

    /**
     * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
     *
     * Hash: 0xECC01B7C5763333C | Since: 323 | API-Set: unknown
     */
    export function getDlcVehicleModel(dlcVehicleIndex: number): number {
        return GetDlcVehicleModel(dlcVehicleIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC098810437312FFF | Since: 323 | API-Set: unknown
     */
    export function getDlcVehicleModLockHash(hash: number | string): number {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return GetDlcVehicleModLockHash(hash);
    }

    /**
     * p0 seems to be the weapon index
     * p1 seems to be the weapon component index
     * struct DlcComponentData{
     * int attachBone;
     * int padding1;
     * int bActiveByDefault;
     * int padding2;
     * int unk;
     * int padding3;
     * int componentHash;
     * int padding4;
     * int unk2;
     * int padding5;
     * int componentCost;
     * int padding6;
     * char nameLabel[64];
     * char descLabel[64];
     * };
     *
     *
     * Hash: 0x6CF598A2957C2BF8 | Since: 323 | API-Set: unknown
     */
    export function getDlcWeaponComponentData(dlcWeaponIndex: number, dlcWeapCompIndex: number): [boolean, any] {
        return GetDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex);
    }

    /**
     * Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
     *
     * Hash: 0x31D5E073B6F93CDC | Since: 2060 | API-Set: unknown
     */
    export function getDlcWeaponComponentDataSp(dlcWeaponIndex: number, dlcWeapCompIndex: number): [boolean, any] {
        return GetDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex);
    }

    /**
     *
     * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
     * struct DlcWeaponData
     * {
     * `int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this`
     * int padding1;
     * int weaponHash;
     * int padding2;
     * int unk;
     * int padding3;
     * int weaponCost;
     * int padding4;
     * int ammoCost;
     * int padding5;
     * int ammoType;
     * int padding6;
     * int defaultClipSize;
     * int padding7;
     * char nameLabel[64];
     * char descLabel[64];
     * char desc2Label[64]; // usually "the" + name
     * char upperCaseNameLabel[64];
     * };
     *
     * Hash: 0x79923CD21BECE14E | Since: 323 | API-Set: unknown
     */
    export function getDlcWeaponData(dlcWeaponIndex: number): [boolean, any] {
        return GetDlcWeaponData(dlcWeaponIndex);
    }

    /**
     * Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
     *
     * Hash: 0x310836EE7129BA33 | Since: 2060 | API-Set: unknown
     */
    export function getDlcWeaponDataSp(dlcWeaponIndex: number): [boolean, any] {
        return GetDlcWeaponDataSp(dlcWeaponIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6C93ED8C2F74859B | Since: 323 | API-Set: unknown
     */
    export function getForcedComponent(componentHash: number | string, forcedComponentIndex: number): [number, number, number] {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetForcedComponent(componentHash, forcedComponentIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE1CA84EBF72E691D | Since: 323 | API-Set: unknown
     */
    export function getForcedProp(componentHash: number | string, forcedPropIndex: number): [number, number, number] {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetForcedProp(componentHash, forcedPropIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0368B3A838070348 | Since: 323 | API-Set: unknown
     */
    export function getHashNameForComponent(entity: number | IEntity, componentId: number, drawableVariant: number, textureVariant: number): number {
        return GetHashNameForComponent(entity, componentId, drawableVariant, textureVariant);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D6160275CAEC8DD | Since: 323 | API-Set: unknown
     */
    export function getHashNameForProp(entity: number | IEntity, componentId: number, propIndex: number, propTextureIndex: number): number {
        return GetHashNameForProp(entity, componentId, propIndex, propTextureIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7A866D21CD2329B | Since: 323 | API-Set: unknown
     */
    export function getNumDlcVehicles(): number {
        return GetNumDlcVehicles();
    }

    /**
     * Returns the total number of DLC weapons.
     *
     * Hash: 0xEE47635F352DA367 | Since: 323 | API-Set: unknown
     */
    export function getNumDlcWeapons(): number {
        return GetNumDlcWeapons();
    }

    /**
     * Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
     *
     * Hash: 0x4160B65AE085B5A9 | Since: 2060 | API-Set: unknown
     */
    export function getNumDlcWeaponsSp(): number {
        return GetNumDlcWeaponsSp();
    }

    /**
     * Returns the total number of DLC weapon components.
     *
     * Hash: 0x405425358A7D61FE | Since: 323 | API-Set: unknown
     */
    export function getNumDlcWeaponComponents(dlcWeaponIndex: number): number {
        return GetNumDlcWeaponComponents(dlcWeaponIndex);
    }

    /**
     * Returns the total number of DLC weapon components that are available in SP.
     *
     * Hash: 0xAD2A7A6DFF55841B | Since: 2060 | API-Set: unknown
     */
    export function getNumDlcWeaponComponentsSp(dlcWeaponIndex: number): number {
        return GetNumDlcWeaponComponentsSp(dlcWeaponIndex);
    }

    /**
     * Character types:
     * 0 = Michael,
     * 1 = Franklin,
     * 2 = Trevor,
     * 3 = MPMale,
     * 4 = MPFemale
     *
     * Hash: 0x278F76C3B0A8F109 | Since: 323 | API-Set: unknown
     */
    export function getNumTattooShopDlcItems(character: number): number {
        return GetNumTattooShopDlcItems(character);
    }

    /**
     * Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
     *
     * Hash: 0xC6B9DB42C04DD8C3 | Since: 323 | API-Set: unknown
     */
    export function getShopPedApparelForcedComponentCount(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetShopPedApparelForcedComponentCount(componentHash);
    }

    /**
     * Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
     *
     * Hash: 0x017568A8182D98A6 | Since: 323 | API-Set: unknown
     */
    export function getShopPedApparelForcedPropCount(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetShopPedApparelForcedPropCount(componentHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC17AD0E5752BECDA | Since: 323 | API-Set: unknown
     */
    export function getShopPedApparelVariantComponentCount(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetShopPedApparelVariantComponentCount(componentHash);
    }

    /**
     * `propHash`: Ped helmet prop hash?
     * This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
     *
     * Hash: 0xD40AAC51E8E4C663 | Since: 791 | API-Set: unknown
     */
    export function getShopPedApparelVariantPropCount(propHash: number | string): number {
        if (typeof propHash === 'string') propHash = misc.getHashKey(propHash)
        return GetShopPedApparelVariantPropCount(propHash);
    }

    /**
     * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
     *
     * Hash: 0x74C0E2A57EC66760 | Since: 323 | API-Set: unknown
     */
    export function getShopPedComponent(componentHash: number | string): any {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetShopPedComponent(componentHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB7952076E444979D | Since: 323 | API-Set: unknown
     */
    export function getShopPedOutfit(): any {
        return GetShopPedOutfit(undefined);
    }

    /**
     * See https://git.io/JtcBH for example and structs.
     *
     * Hash: 0x19F2A026EDF0013F | Since: 323 | API-Set: unknown
     */
    export function getShopPedOutfitComponentVariant(outfitHash: number | string, variantIndex: number): [boolean, any] {
        if (typeof outfitHash === 'string') outfitHash = misc.getHashKey(outfitHash)
        return GetShopPedOutfitComponentVariant(outfitHash, variantIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x073CA26B079F956E | Since: 323 | API-Set: unknown
     */
    export function getShopPedOutfitLocate(): number {
        return GetShopPedOutfitLocate(undefined);
    }

    /**
     * See https://git.io/JtcBH for example and structs.
     *
     * Hash: 0xA9F9C2E0FDE11CBB | Since: 323 | API-Set: unknown
     */
    export function getShopPedOutfitPropVariant(outfitHash: number | string, variantIndex: number): [boolean, any] {
        if (typeof outfitHash === 'string') outfitHash = misc.getHashKey(outfitHash)
        return GetShopPedOutfitPropVariant(outfitHash, variantIndex);
    }

    /**
     * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
     *
     * Hash: 0x5D5CAFF661DDF6FC | Since: 323 | API-Set: unknown
     */
    export function getShopPedProp(componentHash: number | string): any {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetShopPedProp(componentHash);
    }

    /**
     * See https://git.io/JtcRf for example and structs.
     *
     * Hash: 0x249E310B2D920699 | Since: 323 | API-Set: unknown
     */
    export function getShopPedQueryComponent(componentId: number): any {
        return GetShopPedQueryComponent(componentId);
    }

    /**
     * Returns some sort of index/offset for components.
     * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
     *
     * Hash: 0x96E2929292A4DB77 | Since: 2189 | API-Set: unknown
     */
    export function getShopPedQueryComponentIndex(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return Citizen.invokeNative('0x96E2929292A4DB77', componentHash);
    }

    /**
     * outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
     * See https://git.io/JtcB8 for example and outfit struct.
     *
     * Hash: 0x6D793F03A631FE56 | Since: 323 | API-Set: unknown
     */
    export function getShopPedQueryOutfit(outfitIndex: number): any {
        return GetShopPedQueryOutfit(outfitIndex);
    }

    /**
     * See https://git.io/JtcRf for example and structs.
     *
     * Hash: 0xDE44A00999B2837D | Since: 323 | API-Set: unknown
     */
    export function getShopPedQueryProp(componentId: number): any {
        return GetShopPedQueryProp(componentId);
    }

    /**
     * Returns some sort of index/offset for props.
     * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
     *
     * Hash: 0x6CEBE002E58DEE97 | Since: 2189 | API-Set: unknown
     */
    export function getShopPedQueryPropIndex(componentHash: number | string): number {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return Citizen.invokeNative('0x6CEBE002E58DEE97', componentHash);
    }

    /**
     * Character types:
     * 0 = Michael,
     * 1 = Franklin,
     * 2 = Trevor,
     * 3 = MPMale,
     * 4 = MPFemale
     *
     *
     * enum TattooZoneData
     * {
     * ZONE_TORSO = 0,
     * ZONE_HEAD = 1,
     * ZONE_LEFT_ARM = 2,
     * ZONE_RIGHT_ARM = 3,
     * ZONE_LEFT_LEG = 4,
     * ZONE_RIGHT_LEG = 5,
     * ZONE_UNKNOWN = 6,
     * ZONE_NONE = 7,
     * };
     * struct outComponent
     * {
     * // these vars are suffixed with 4 bytes of padding each.
     * uint unk;
     * int unk2;
     * uint tattooCollectionHash;
     * uint tattooNameHash;
     * int unk3;
     * TattooZoneData zoneId;
     * uint unk4;
     * uint unk5;
     * // maybe more, not sure exactly, decompiled scripts are very vague around this part.
     * }
     *
     * Hash: 0xFF56381874F82086 | Since: 323 | API-Set: unknown
     */
    export function getTattooShopDlcItemData(characterType: number, decorationIndex: number): [boolean, any] {
        return GetTattooShopDlcItemData(characterType, decorationIndex);
    }

    /**
     * Returns some sort of index/offset for overlays/decorations.
     *
     * Character types:
     * 0 = Michael,
     * 1 = Franklin,
     * 2 = Trevor,
     * 3 = MPMale,
     * 4 = MPFemale
     *
     * Hash: 0x10144267DD22866C | Since: 2189 | API-Set: unknown
     */
    export function getTattooShopDlcItemIndex(overlayHash: number | string, character: number): number {
        if (typeof overlayHash === 'string') overlayHash = misc.getHashKey(overlayHash)
        return GetTattooShopDlcItemIndex(overlayHash, undefined, character);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E11F282F11863B6 | Since: 323 | API-Set: unknown
     */
    export function getVariantComponent(componentHash: number | string, variantComponentIndex: number): [number, number, number] {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetVariantComponent(componentHash, variantComponentIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD81B7F27BC773E66 | Since: 791 | API-Set: unknown
     */
    export function getVariantProp(componentHash: number | string, variantPropIndex: number): [number, number, number] {
        if (typeof componentHash === 'string') componentHash = misc.getHashKey(componentHash)
        return GetVariantProp(componentHash, variantPropIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E8C308FD312C036 | Since: 323 | API-Set: unknown
     */
    export function initShopPedComponent(): any {
        return InitShopPedComponent();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB0A2B758F7B850F | Since: 323 | API-Set: unknown
     */
    export function initShopPedProp(): any {
        return InitShopPedProp();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4D7B033C3AA243C | Since: 323 | API-Set: unknown
     */
    export function isContentItemLocked(itemHash: number | string): boolean {
        if (typeof itemHash === 'string') itemHash = misc.getHashKey(itemHash)
        return IsContentItemLocked(itemHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0564B9FF9631B82C | Since: 323 | API-Set: unknown
     */
    export function isDlcVehicleMod(hash: number | string): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return IsDlcVehicleMod(hash);
    }

    /**
     * From fm_deathmatch_creator and fm_race_creator:
     *
     * `FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));`
     * `FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));`
     *
     * Hash: 0x3C1978285B036B25 | Since: 1604 | API-Set: unknown
     */
    export function revertContentChangesetGroupForAll(hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        UnloadContentChangeSetGroup(hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50F457823CE6EB5F | Since: 323 | API-Set: unknown
     */
    export function setupShopPedApparelQuery(): number {
        return SetupShopPedApparelQuery(0, 0, 0, 0);
    }

    /**
     * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
     *
     * componentId is between 0 and 11 and corresponds to the usual component slots.
     *
     * p1 could be the outfit number; unsure.
     *
     * p2 is usually -1; unknown function.
     *
     * p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
     *
     * p4 is usually -1; unknown function.
     *
     * componentId is -1 when p3 is true in decompiled scripts.
     *
     * Hash: 0x9BDF59818B1E38C1 | Since: 323 | API-Set: unknown
     */
    export function setupShopPedApparelQueryTu(character: number, componentId: number): number {
        return SetupShopPedApparelQueryTu(character, 0, 0, false, 0, componentId);
    }

    /**
     * characters
     *
     * 0: Michael
     * 1: Franklin
     * 2: Trevor
     * 3: MPMale
     * 4: MPFemale
     *
     * Hash: 0xF3FBE2D50A6A8C28 | Since: 323 | API-Set: unknown
     */
    export function setupShopPedOutfitQuery(character: number): number {
        return SetupShopPedOutfitQuery(character, false);
    }

}


export namespace fire {
    /**
     * BOOL isAudible = If explosion makes a sound.
     * BOOL isInvisible = If the explosion is invisible or not.
     *
     * explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
     *
     * Hash: 0xE3AD2BDBAEE269AC | Since: 323 | API-Set: unknown
     */
    export function addExplosion(pos: Vector3, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number, noDamage: boolean): void {
        AddExplosion(pos.x, pos.y, pos.z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage);
    }

    /**
     * isAudible: If explosion makes a sound.
     * isInvisible: If the explosion is invisible or not.
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x36DD3FE58B5E5212 | Since: 323 | API-Set: unknown
     */
    export function addExplosionWithUserVfx(pos: Vector3, explosionType: number, explosionFx: number | string, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void {
        if (typeof explosionFx === 'string') explosionFx = misc.getHashKey(explosionFx)
        AddExplosionWithUserVfx(pos.x, pos.y, pos.z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
    }

    /**
     * isAudible: If explosion makes a sound.
     * isInvisible: If the explosion is invisible or not.
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x172AA1B624FA1013 | Since: 323 | API-Set: unknown
     */
    export function addOwnedExplosion(ped: number | IPed, pos: Vector3, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void {
        AddOwnedExplosion(ped, pos.x, pos.y, pos.z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
    }

    /**
     * Returns TRUE if it found something. FALSE if not.
     *
     * Hash: 0x352A9F6BCF90081F | Since: 323 | API-Set: unknown
     */
    export function getClosestPos(pos: Vector3): [boolean, Vector3] {
        return GetClosestFirePos(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50CAD495A460B305 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfsInRange(pos: Vector3, radius: number): number {
        return GetNumberOfFiresInRange(pos.x, pos.y, pos.z, radius);
    }

    /**
     * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
     *
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x14BA4BA137AF6CEC | Since: 323 | API-Set: unknown
     */
    export function getOwnerOfExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number {
        return GetEntityInsideExplosionArea(explosionType, x1, y1, z1, x2, y2, z2, radius);
    }

    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0xB3CD51E3DB86F176 | Since: 1290 | API-Set: unknown
     */
    export function getOwnerOfExplosionInSphere(explosionType: number, pos: Vector3, radius: number): number {
        return GetEntityInsideExplosionSphere(explosionType, pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28D3FED7190D3A0B | Since: 323 | API-Set: unknown
     */
    export function isEntityOn(entity: number | IEntity): boolean {
        return IsEntityOnFire(entity);
    }

    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x6070104B699B2EF4 | Since: 323 | API-Set: unknown
     */
    export function isExplosionActiveInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2);
    }

    /**
     * explosionType: See ADD_EXPLOSION, -1 for any explosion type
     *
     *
     * Hash: 0xA079A6C51525DC4B | Since: 323 | API-Set: unknown
     */
    export function isExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): boolean {
        return IsExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width);
    }

    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x2E2EBA0EE7CED0E0 | Since: 323 | API-Set: unknown
     */
    export function isExplosionInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2);
    }

    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0xAB0F816885B0E483 | Since: 323 | API-Set: unknown
     */
    export function isExplosionInSphere(explosionType: number, pos: Vector3, radius: number): boolean {
        return IsExplosionInSphere(explosionType, pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FF548385680673F | Since: 323 | API-Set: unknown
     */
    export function removeScript(fireHandle: number): void {
        RemoveScriptFire(fireHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8F390AC4155099BA | Since: 1734 | API-Set: unknown
     */
    export function setFlammabilityMultiplier(): void {
        SetFireSpreadRate(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6A9D9708F6F23DF | Since: 323 | API-Set: unknown
     */
    export function startEntity(entity: number | IEntity): number {
        return StartEntityFire(entity);
    }

    /**
     * Starts a fire:
     *
     * xyz: Location of fire
     * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
     * isGasFire: Whether or not the fire is powered by gasoline.
     *
     * Hash: 0x6B83617E04503888 | Since: 323 | API-Set: unknown
     */
    export function startScript(pos: Vector3, maxChildren: number, isGasFire: boolean): number {
        return StartScriptFire(pos.x, pos.y, pos.z, maxChildren, isGasFire);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F0DD2EBBB651AFF | Since: 323 | API-Set: unknown
     */
    export function stopEntity(entity: number | IEntity): void {
        StopEntityFire(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x056A8A219B8E829F | Since: 323 | API-Set: unknown
     */
    export function stopInRange(pos: Vector3, radius: number): void {
        StopFireInRange(pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5241DB47A8B8AD54 | Since: 3570 | API-Set: unknown
     */
    export function networkExpectExplosionEventsForPlayer(expect: boolean, player: number | string | IPlayer): void {
        Citizen.invokeNative('0x5241DB47A8B8AD54', expect, player);
    }

}


export namespace interior {
    /**
     * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
     *
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x55E86AF2712B36A1 | Since: 323 | API-Set: unknown
     */
    export function activateEntitySet(interior: number, entitySetName: string): void {
        ActivateInteriorEntitySet(interior, entitySetName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x483ACA1176CA93F1 | Since: 1103 | API-Set: unknown
     */
    export function activateGroupsUsingCamera(): void {
        Citizen.invokeNative('0x483ACA1176CA93F1');
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F6167F351168730 | Since: 323 | API-Set: unknown
     */
    export function addPickupToRoomByName(pickup: any, roomName: string): void {
        AddPickupToInteriorRoomByName(pickup, roomName);
    }

    /**
     * `Does something similar to INTERIOR::DISABLE_INTERIOR`
     *
     * Hash: 0xD9175F941610DB54 | Since: 323 | API-Set: unknown
     */
    export function cap(interior: number, toggle: boolean): void {
        CapInterior(interior, toggle);
    }

    /**
     * Immediately removes entity from an interior. Like sets entity to `limbo` room.
     *
     * Hash: 0x85D5422B2039A70D | Since: 2189 | API-Set: unknown
     */
    export function clearStateOfEntity(entity: number | IEntity): void {
        ClearInteriorForEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB365FC0C4E27FFA7 | Since: 323 | API-Set: unknown
     */
    export function clearRoomForEntity(entity: number | IEntity): void {
        ClearRoomForEntity(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x23B59D8912F94246 | Since: 323 | API-Set: unknown
     */
    export function clearRoomForGameViewport(): void {
        ClearRoomForGameViewport();
    }

    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x420BD37289EEE162 | Since: 323 | API-Set: unknown
     */
    export function deactivateEntitySet(interior: number, entitySetName: string): void {
        DeactivateInteriorEntitySet(interior, entitySetName);
    }

    /**
     * Example:
     * This removes the interior from the strip club and when trying to walk inside the player just falls:
     *
     * `INTERIOR::DISABLE_INTERIOR(118018, true);`
     *
     * Hash: 0x6170941419D7D8EC | Since: 323 | API-Set: unknown
     */
    export function disable(interior: number, toggle: boolean): void {
        DisableInterior(interior, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E6542F0CE8E70A3 | Since: 323 | API-Set: unknown
     */
    export function disableMetroSystem(toggle: boolean): void {
        Citizen.invokeNative('0x9E6542F0CE8E70A3', toggle);
    }

    /**
     * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
     *
     * More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
     *
     * Hash: 0xA97F257D0151A6AB | Since: 323 | API-Set: unknown
     */
    export function enableExteriorCullModelThisFrame(mapObjectHash: number | string): void {
        if (typeof mapObjectHash === 'string') mapObjectHash = misc.getHashKey(mapObjectHash)
        EnableExteriorCullModelThisFrame(mapObjectHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50C375537449F369 | Since: 757 | API-Set: unknown
     */
    export function enableShadowCullModelThisFrame(mapObjectHash: number | string): void {
        if (typeof mapObjectHash === 'string') mapObjectHash = misc.getHashKey(mapObjectHash)
        EnableScriptCullModelThisFrame(mapObjectHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7ECDF98587E92DEC | Since: 1604 | API-Set: unknown
     */
    export function enableStadiumProbesThisFrame(toggle: boolean): void {
        Citizen.invokeNative('0x7ECDF98587E92DEC', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x38C1CB1CB119A016 | Since: 1493 | API-Set: unknown
     */
    export function forceActivatingTrackingOnEntity(): void {
        Citizen.invokeNative('0x38C1CB1CB119A016', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x52923C4710DD9907 | Since: 323 | API-Set: unknown
     */
    export function forceRoomForEntity(entity: number | IEntity, interior: number, roomHashKey: number | string): void {
        if (typeof roomHashKey === 'string') roomHashKey = misc.getHashKey(roomHashKey)
        ForceRoomForEntity(entity, interior, roomHashKey);
    }

    /**
     * No comment provided
     *
     * Hash: 0x920D853F3E17F1DA | Since: 323 | API-Set: unknown
     */
    export function forceRoomForGameViewport(interiorID: number, roomHashKey: number | string): void {
        if (typeof roomHashKey === 'string') roomHashKey = misc.getHashKey(roomHashKey)
        ForceRoomForGameViewport(interiorID, roomHashKey);
    }

    /**
     * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
     *
     * Example for VB.NET
     * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
     *
     * Hash: 0xB0F7F8663821D9C3 | Since: 323 | API-Set: unknown
     */
    export function getAtCoords(pos: Vector3): number {
        return GetInteriorAtCoords(pos.x, pos.y, pos.z);
    }

    /**
     * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
     *
     * `Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))`
     *
     * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
     *
     * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
     *
     * Hash: 0x05B7A89BD78797FC | Since: 323 | API-Set: unknown
     */
    export function getAtCoordsWithType(pos: Vector3, interiorType: string): number {
        return GetInteriorAtCoordsWithType(pos.x, pos.y, pos.z, interiorType);
    }

    /**
     * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
     *
     * Hash: 0xF0F77ADB9F67E79D | Since: 323 | API-Set: unknown
     */
    export function getAtCoordsWithTypehash(pos: Vector3, typeHash: number | string): number {
        if (typeof typeHash === 'string') typeHash = misc.getHashKey(typeHash)
        return GetInteriorAtCoordsWithTypehash(pos.x, pos.y, pos.z, typeHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC4CF9FCB29A4424 | Since: 323 | API-Set: unknown
     */
    export function getFromCollision(pos: Vector3): number {
        return GetInteriorFromCollision(pos.x, pos.y, pos.z);
    }

    /**
     * Returns the handle of the interior that the entity is in. Returns 0 if outside.
     *
     * Hash: 0x2107BA504071A6BB | Since: 323 | API-Set: unknown
     */
    export function getFromEntity(entity: number | IEntity): number {
        return GetInteriorFromEntity(entity);
    }

    /**
     * Returns the current interior id from gameplay camera
     *
     * Hash: 0xE7D267EC6CA966C3 | Since: 1604 | API-Set: unknown
     */
    export function getFromPrimaryView(): number {
        return GetInteriorFromPrimaryView();
    }

    /**
     * Returns the group ID of the specified interior.
     * 0 = default
     * 1 = subway station, subway tracks, sewers
     * 3 = train tunnel under mirror park
     * 5 = tunnel near del perro
     * 6 = train tunnel near chilliad
     * 7 = train tunnel near josiah
     * 8 = train tunnel in sandy shores
     * 9 = braddock tunnel (near chilliad)
     * 12 = tunnel under fort zancudo
     * 14 = train tunnel under cypress flats
     * 18 = rockford plaza parking garage
     * 19 = arcadius parking garage
     * 20 = union depository parking garage
     * 21 = fib parking garage
     *
     * Hash: 0xE4A84ABF135EF91A | Since: 323 | API-Set: unknown
     */
    export function getGroupId(interior: number): number {
        return GetInteriorGroupId(interior);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF49B58631D9E22D9 | Since: 1493 | API-Set: unknown
     */
    export function getHeading(interior: number): number {
        return GetInteriorHeading(interior);
    }

    /**
     * No comment provided
     *
     * Hash: 0x252BDC06B73FA6EA | Since: 1290 | API-Set: unknown
     */
    export function getLocationAndNamehash(interior: number): [Vector3, number] {
        return GetInteriorLocationAndNamehash(interior);
    }

    /**
     * `Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY`
     *
     * Hash: 0x399685DB942336BC | Since: 323 | API-Set: unknown
     */
    export function getKeyForEntityInRoom(entity: number | IEntity): number {
        return GetKeyForEntityInRoom(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9E3B3E6D66F6E22F | Since: 323 | API-Set: unknown
     */
    export function getOffsetFromInWorldCoords(interior: number, pos: Vector3): Vector3 {
        return new Vector3(GetOffsetFromInteriorInWorldCoords(interior, pos.x, pos.y, pos.z));
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6575914D2A0B450 | Since: 323 | API-Set: unknown
     */
    export function getRoomKeyForGameViewport(): number {
        return GetRoomKeyForGameViewport();
    }

    /**
     * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
     *
     * Hash: 0x47C2A06D4F5F424B | Since: 323 | API-Set: unknown
     */
    export function getRoomKeyFromEntity(entity: number | IEntity): number {
        return GetRoomKeyFromEntity(entity);
    }

    /**
     * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
     *
     * Hash: 0xEEA5AC2EDA7C33E8 | Since: 323 | API-Set: unknown
     */
    export function isCollisionMarkedOutside(pos: Vector3): boolean {
        return IsCollisionMarkedOutside(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92BAC8ACF88CEC26 | Since: 323 | API-Set: unknown
     */
    export function isCapped(interior: number): boolean {
        return IsInteriorCapped(interior);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC5115A5A939DD15 | Since: 323 | API-Set: unknown
     */
    export function isDisabled(interior: number): boolean {
        return IsInteriorDisabled(interior);
    }

    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x35F7DD45E8C0A16D | Since: 323 | API-Set: unknown
     */
    export function isEntitySetActive(interior: number, entitySetName: string): boolean {
        return IsInteriorEntitySetActive(interior, entitySetName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6726BDCCC1932F0E | Since: 323 | API-Set: unknown
     */
    export function isReady(interior: number): boolean {
        return IsInteriorReady(interior);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC72B5D7A1CBD54D | Since: 323 | API-Set: unknown
     */
    export function isScene(): boolean {
        return IsInteriorScene();
    }

    /**
     * No comment provided
     *
     * Hash: 0x26B0E73D7EAAF4D3 | Since: 323 | API-Set: unknown
     */
    export function isValid(interior: number): boolean {
        return IsValidInterior(interior);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CA429C029CCF247 | Since: 323 | API-Set: unknown
     */
    export function pinInMemory(interior: number): void {
        PinInteriorInMemory(interior);
    }

    /**
     * No comment provided
     *
     * Hash: 0x41F37C3427C75AE0 | Since: 323 | API-Set: unknown
     */
    export function refresh(interior: number): void {
        RefreshInterior(interior);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82EBB79E258FA2B7 | Since: 323 | API-Set: unknown
     */
    export function retainEntityIn(entity: number | IEntity, interior: number): void {
        Citizen.invokeNative('0x82EBB79E258FA2B7', entity, interior);
    }

    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0xC1F1920BAF281317 | Since: 877 | API-Set: unknown
     */
    export function setEntitySetTintIndex(interior: number, entitySetName: string, color: number): void {
        SetInteriorEntitySetColor(interior, entitySetName, color);
    }

    /**
     * Only used once in the entire game scripts.
     * Does not actually return anything.
     *
     * Hash: 0x4C2330E61D3DEB56 | Since: 323 | API-Set: unknown
     */
    export function setInUse(interior: number): boolean {
        return Citizen.invokeNative('0x4C2330E61D3DEB56', interior);
    }

    /**
     * Jenkins hash _might_ be 0xFC227584.
     *
     * Hash: 0x7241CCB7D020DB69 | Since: 791 | API-Set: unknown
     */
    export function setIsExteriorOnly(entity: number | IEntity, toggle: boolean): void {
        Citizen.invokeNative('0x7241CCB7D020DB69', entity, toggle);
    }

    /**
     * `Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));`
     *
     * Hash: 0x405DC2AEF6AF95B9 | Since: 323 | API-Set: unknown
     */
    export function setRoomForGameViewportByKey(roomHashKey: number | string): void {
        if (typeof roomHashKey === 'string') roomHashKey = misc.getHashKey(roomHashKey)
        Citizen.invokeNative('0x405DC2AEF6AF95B9', roomHashKey);
    }

    /**
     * Example of use (carmod_shop)
     * `INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom");`
     *
     * Hash: 0xAF348AFCB575A441 | Since: 323 | API-Set: unknown
     */
    export function setRoomForGameViewportByName(roomName: string): void {
        Citizen.invokeNative('0xAF348AFCB575A441', roomName);
    }

    /**
     * `Does something similar to INTERIOR::DISABLE_INTERIOR.`
     *
     * `You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.`
     *
     * Hash: 0x261CCE7EED010641 | Since: 323 | API-Set: unknown
     */
    export function unpin(interior: number): void {
        UnpinInterior(interior);
    }

}


export namespace itemset {
    /**
     * No comment provided
     *
     * Hash: 0xE3945201F14637DD | Since: 323 | API-Set: unknown
     */
    export function addTo(item: number, itemset: number): boolean {
        return AddToItemset(item, itemset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x41BC0D722FC04221 | Since: 323 | API-Set: unknown
     */
    export function clean(itemset: number): void {
        CleanItemset(itemset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35AD299F50D91B24 | Since: 323 | API-Set: unknown
     */
    export function create(): number {
        return CreateItemset(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE18220B1C183EDA | Since: 323 | API-Set: unknown
     */
    export function destroy(itemset: number): void {
        DestroyItemset(itemset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A197E2521EE2BAB | Since: 323 | API-Set: unknown
     */
    export function getIndexedItemIn(index: number, itemset: number): number {
        return GetIndexedItemInItemset(index, itemset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9127E83ABF7C631 | Since: 323 | API-Set: unknown
     */
    export function getSize(itemset: number): number {
        return GetItemsetSize(itemset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D0FC594D1E9C107 | Since: 323 | API-Set: unknown
     */
    export function isIn(item: number, itemset: number): boolean {
        return IsInItemset(item, itemset);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1B1EA596344DFAB | Since: 323 | API-Set: unknown
     */
    export function isValid(itemset: number): boolean {
        return IsItemsetValid(itemset);
    }

    /**
     * No comment provided
     *
     * Hash: 0x25E68244B0177686 | Since: 323 | API-Set: unknown
     */
    export function removeFrom(item: number, itemset: number): void {
        RemoveFromItemset(item, itemset);
    }

}


export namespace lobby {
    /**
     * No comment provided
     *
     * Hash: 0x8AA464D4E0F6ACCD | Since: 323 | API-Set: unknown
     */
    export function autoMultiplayerEvent(): boolean {
        return LoadingscreenGetLoadFreemodeWithEventName();
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF7D17BC6C85264C | Since: 323 | API-Set: unknown
     */
    export function autoMultiplayerFreemode(): boolean {
        return LoadingscreenGetLoadFreemode();
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xF2CA003F167E21D2 | Since: 323 | API-Set: unknown
     */
    export function autoMultiplayerMenu(): boolean {
        return Citizen.invokeNative('0xF2CA003F167E21D2');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6DC823253FBB366 | Since: 323 | API-Set: unknown
     */
    export function autoMultiplayerRandomJob(): boolean {
        return LoadingscreenIsLoadingFreemode();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7E7181C09F33B69 | Since: 323 | API-Set: unknown
     */
    export function setAutoMpRandomJob(toggle: boolean): void {
        LoadingscreenSetIsLoadingFreemode(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB0C56BD3D808D863 | Since: 323 | API-Set: unknown
     */
    export function setAutoMultiplayer(toggle: boolean): void {
        LoadingscreenSetLoadFreemode(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC309E94546FCDB5 | Since: 323 | API-Set: unknown
     */
    export function setAutoMultiplayerEvent(toggle: boolean): void {
        LoadingscreenSetLoadFreemodeWithEventName(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA1E0E893D915215 | Since: 323 | API-Set: unknown
     */
    export function shutdownSessionClearsAutoMultiplayer(toggle: boolean): void {
        Citizen.invokeNative('0xFA1E0E893D915215', toggle);
    }

}


export namespace localization {
    /**
     * 0 = american (en-US)
     * 1 = french (fr-FR)
     * 2 = german (de-DE)
     * 3 = italian (it-IT)
     * 4 = spanish (es-ES)
     * 5 = brazilian (pt-BR)
     * 6 = polish (pl-PL)
     * 7 = russian (ru-RU)
     * 8 = korean (ko-KR)
     * 9 = chinesetrad (zh-TW)
     * 10 = japanese (ja-JP)
     * 11 = mexican (es-MX)
     * 12 = chinesesimp (zh-CN)
     *
     * Hash: 0x2BDD44CC428A7EAE | Since: 323 | API-Set: unknown
     */
    export function getCurrentLanguage(): number {
        return GetCurrentLanguage();
    }

    /**
     * Possible return values: 0, 1, 2
     *
     * Hash: 0xA8AE43AEC1A61314 | Since: 323 | API-Set: unknown
     */
    export function getSystemDateType(): number {
        return LocalizationGetSystemDateFormat();
    }

    /**
     * Same return values as GET_CURRENT_LANGUAGE
     *
     * Hash: 0x497420E022796B3F | Since: 877 | API-Set: unknown
     */
    export function getSystemLanguage(): number {
        return LocalizationGetSystemLanguage();
    }

}


export namespace mobile {
    /**
     * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
     *
     *
     * I can confirm the above. This function is hard-coded to always return 1.
     *
     * Hash: 0xC4E2813898C97A4B | Since: 323 | API-Set: unknown
     */
    export function canPhoneBeSeenOnScreen(): boolean {
        return CanPhoneBeSeenOnScreen();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFDE8F069C542D126 | Since: 323 | API-Set: unknown
     */
    export function cellCamActivate(): void {
        CellCamActivate(false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x015C49A93E3E086E | Since: 323 | API-Set: unknown
     */
    export function cellCamActivateSelfieMode(toggle: boolean): void {
        CellCamActivateSelfieMode(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2CCBE62CD4C91A4 | Since: 323 | API-Set: unknown
     */
    export function cellCamActivateShallowDofMode(toggle: boolean): void {
        Citizen.invokeNative('0xA2CCBE62CD4C91A4', toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x439E9BC95B7E7FBE | Since: 323 | API-Set: unknown
     */
    export function cellCamIsCharVisibleNoFaceCheck(entity: number | IEntity): boolean {
        return CellCamIsCharVisibleNoFaceCheck(entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC2890471901861C | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeDistanceScaling(distanceScaling: number): void {
        Citizen.invokeNative('0xAC2890471901861C', distanceScaling);
    }

    /**
     * No comment provided
     *
     * Hash: 0x466DA42C89865553 | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeHeadPitchOffset(pitch: number): void {
        CellCamSetHeadHeight(pitch);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1E22DC13F5EEBAD | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeHeadRollOffset(roll: number): void {
        CellCamSetHeadRoll(roll);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD6ADE981781FCA09 | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeHeadYawOffset(yaw: number): void {
        CellCamSetHeadPitch(yaw);
    }

    /**
     * No comment provided
     *
     * Hash: 0x53F4892D18EC90A4 | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeHorzPanOffset(horizontalPan: number): void {
        CellCamSetDistance(horizontalPan);
    }

    /**
     * No comment provided
     *
     * Hash: 0x15E69E2802C24B8D | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeRollOffset(roll: number): void {
        CellCamSetRoll(roll);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B0B4AEED5B9B41C | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeSideOffsetScaling(): void {
        CellCamSetHorizontalOffset(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3117D84EFA60F77B | Since: 323 | API-Set: unknown
     */
    export function cellCamSetSelfieModeVertPanOffset(vertPan: number): void {
        CellCamSetVerticalOffset(vertPan);
    }

    /**
     * if the bool "Toggle" is "true" so the phone is lean.
     * if the bool "Toggle" is "false" so the phone is not lean.
     *
     * Hash: 0x44E44169EF70138E | Since: 323 | API-Set: unknown
     */
    export function cellHorizontalModeToggle(toggle: boolean): void {
        CellCamSetLean(toggle);
    }

    /**
     * For move the finger of player, the value of int goes 1 at 5.
     *
     * Hash: 0x95C9E72F3D7DEC9B | Since: 323 | API-Set: unknown
     */
    export function cellSetInput(direction: number): void {
        CellCamMoveFinger(direction);
    }

    /**
     * Creates a mobile phone of the specified type.
     *
     * Possible phone types:
     *
     * 0 - Default phone / Michael's phone
     * 1 - Trevor's phone
     * 2 - Franklin's phone
     * 3 - Unused police phone
     * 4 - Prologue phone
     *
     * Higher values may crash your game.
     *
     * Hash: 0xA4E8E696C532FBC7 | Since: 323 | API-Set: unknown
     */
    export function createPhone(phoneType: number): void {
        CreateMobilePhone(phoneType);
    }

    /**
     * Destroys the currently active mobile phone.
     *
     * Hash: 0x3BC861DF703E5097 | Since: 323 | API-Set: unknown
     */
    export function destroyPhone(): void {
        DestroyMobilePhone();
    }

    /**
     * No comment provided
     *
     * Hash: 0x584FDFDA48805B86 | Since: 323 | API-Set: unknown
     */
    export function getPhonePosition(): Vector3 {
        return GetMobilePhonePosition();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB4A53E05F68B6FA1 | Since: 323 | API-Set: unknown
     */
    export function getPhoneRenderId(): number {
        return GetMobilePhoneRenderId();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1CEFB61F193070AE | Since: 323 | API-Set: unknown
     */
    export function getPhoneRotation(p1: number | IVehicle): Vector3 {
        return GetMobilePhoneRotation(p1);
    }

    /**
     * If bool Toggle = true so the mobile is hide to screen.
     * If bool Toggle = false so the mobile is show to screen.
     *
     * Hash: 0xF511F759238A5122 | Since: 323 | API-Set: unknown
     */
    export function scriptIsMovingPhoneOffscreen(toggle: boolean): void {
        ScriptIsMovingMobilePhoneOffscreen(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x375A706A5C2FD084 | Since: 372 | API-Set: unknown
     */
    export function setPhoneDofState(toggle: boolean): void {
        SetMobilePhoneDofState(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x693A5C6D6734085B | Since: 323 | API-Set: unknown
     */
    export function setPhonePosition(pos: Vector3): void {
        SetMobilePhonePosition(pos.x, pos.y, pos.z);
    }

    /**
     * Last parameter is unknown and always zero.
     *
     * Hash: 0xBB779C0CA917E865 | Since: 323 | API-Set: unknown
     */
    export function setPhoneRotation(rot: Vector3): void {
        SetMobilePhoneRotation(rot.x, rot.y, rot.z, undefined);
    }

    /**
     * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
     *
     * Hash: 0xCBDD322A73D6D932 | Since: 323 | API-Set: unknown
     */
    export function setPhoneScale(scale: number): void {
        SetMobilePhoneScale(scale);
    }

}


export namespace money {
    /**
     * No comment provided
     *
     * Hash: 0x9777734DAD16992F | Since: 573 | API-Set: unknown
     */
    export function canPayAmountToBoss(amount: number): [boolean, number] {
        return CanPayGoon(0, 0, amount);
    }

    /**
     * Does nothing and always returns false.
     *
     * Hash: 0xE260E0BB9CD995AC | Since: 323 | API-Set: unknown
     */
    export function depositVc(amount: number): boolean {
        return DepositVc(amount);
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xE154B48B68EF72BC | Since: 323 | API-Set: unknown
     */
    export function hasVcWithdrawalCompleted(): boolean {
        return Citizen.invokeNative('0xE154B48B68EF72BC', undefined);
    }

    /**
     * p1 = 0 (always)
     * p2 = 1 (always)
     *
     * Hash: 0x763B4BD305338F19 | Since: 323 | API-Set: unknown
     */
    export function networkBuyAirstrike(cost: number): void {
        NetworkBuyAirstrike(cost, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA3EDDAA42411D3B9 | Since: 323 | API-Set: unknown
     */
    export function networkBuyBackupGang(npcProvider: number): void {
        NetworkBuyBackupGang(0, 0, false, false, npcProvider);
    }

    /**
     * p1 is just an assumption. p2 was false and p3 was true.
     *
     * Hash: 0x7B718E197453F2D9 | Since: 323 | API-Set: unknown
     */
    export function networkBuyBounty(amount: number, victim: number | string | IPlayer): void {
        NetworkBuyBounty(amount, victim, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x30FD873ECE50E9F6 | Since: 757 | API-Set: unknown
     */
    export function networkBuyContrabandMission(p2: number | string): void {
        if (typeof p2 === 'string') p2 = misc.getHashKey(p2)
        NetworkBuyContraband(0, 0, p2, false, false);
    }

    /**
     * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
     *
     * The last 3 parameters are,
     * 2,0,1 in the am_ferriswheel.c
     * 1,0,1 in the am_rollercoaster.c
     *
     *
     * Hash: 0x8A7B3952DD64D2B5 | Since: 323 | API-Set: unknown
     */
    export function networkBuyFairgroundRide(amount: number): void {
        NetworkBuyFairgroundRide(amount, undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9B067E55253E3DD | Since: 323 | API-Set: unknown
     */
    export function networkBuyHealthcare(cost: number): void {
        NetworkBuyHealthcare(cost, false, false);
    }

    /**
     * p1 = 0 (always)
     * p2 = 1 (always)
     *
     * Hash: 0x81AA4610E3FD3A69 | Since: 323 | API-Set: unknown
     */
    export function networkBuyHeliStrike(cost: number): void {
        NetworkBuyHeliStrike(cost, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF0077C797F66A355 | Since: 323 | API-Set: unknown
     */
    export function networkBuyItem(amount: number, item: number | string, item_name: string): void {
        if (typeof item === 'string') item = misc.getHashKey(item)
        NetworkBuyItem(amount, item, undefined, undefined, false, item_name, undefined, undefined, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x650A08A280870AF6 | Since: 323 | API-Set: unknown
     */
    export function networkBuyProperty(cost: number, propertyName: number | string): void {
        if (typeof propertyName === 'string') propertyName = misc.getHashKey(propertyName)
        NetworkBuyProperty(cost, propertyName, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75AF80E61248EEBD | Since: 323 | API-Set: unknown
     */
    export function networkBuySmokes(): void {
        NetworkBuySmokes(0, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A54E33660DED67F | Since: 323 | API-Set: unknown
     */
    export function networkCanBet(amount: number): boolean {
        return NetworkCanBet(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D17BE59D2123284 | Since: 323 | API-Set: unknown
     */
    export function networkCanReceivePlayerCash(): boolean {
        return NetworkCanReceivePlayerCash(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C2473301B1C66BA | Since: 323 | API-Set: unknown
     */
    export function networkCanShareJobCash(): boolean {
        return NetworkCanShareJobCash();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAB3CAA6B422164DA | Since: 323 | API-Set: unknown
     */
    export function networkCanSpend(): boolean {
        return NetworkCanSpendMoney(undefined, false, false, false, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7303E27CC6532080 | Since: 323 | API-Set: unknown
     */
    export function networkCanSpend2(): [boolean, any] {
        return NetworkCanSpendMoney2(undefined, false, false, false, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3BD101471C7F9EEC | Since: 1734 | API-Set: unknown
     */
    export function networkCasinoBuyChips(): boolean {
        return NetworkCasinoPurchaseChips(0, 0);
    }

    /**
     * GTAO_CASINO_HOUSE
     * GTAO_CASINO_INSIDETRACK
     * GTAO_CASINO_LUCKYWHEEL
     * GTAO_CASINO_BLACKJACK
     * GTAO_CASINO_ROULETTE
     * GTAO_CASINO_SLOTS
     * GTAO_CASINO_PURCHASE_CHIPS
     *
     * NETWORK_C*
     *
     * Hash: 0x158C16F5E4CF41F8 | Since: 1734 | API-Set: unknown
     */
    export function networkCasinoCanBet(hash: number | string): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return NetworkCasinoCanUseGamblingType(hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF62F6D9528358FE4 | Since: 1734 | API-Set: unknown
     */
    export function networkCasinoCanBetAmount(): boolean {
        return NetworkCasinoCanGamble(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x394DCDB9E836B7A9 | Since: 1734 | API-Set: unknown
     */
    export function networkCasinoCanBetPvc(): boolean {
        return NetworkCasinoCanPurchaseChipsWithPvc();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8968D4D8C6C40C11 | Since: 1734 | API-Set: unknown
     */
    export function networkCasinoCanBuyChipsPvc(): boolean {
        return NetworkCasinoCanPurchaseChipsWithPvc2();
    }

    /**
     * No comment provided
     *
     * Hash: 0xED44897CB336F480 | Since: 1734 | API-Set: unknown
     */
    export function networkCasinoSellChips(): boolean {
        return NetworkCasinoSellChips(0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA921DED15FDF28F5 | Since: 323 | API-Set: unknown
     */
    export function networkClearCharacterWallet(characterSlot: number): void {
        NetworkClearCharacterWallet(characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x18B7AE224B087E26 | Since: 323 | API-Set: unknown
     */
    export function networkDeductCash(amount: number): void {
        NetworkDeductCash(amount, undefined, undefined, false, false, false);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xCD0F5B5D932AE473 | Since: 323 | API-Set: unknown
     */
    export function networkDeferCashTransactionsUntilShopSave(): void {
        Citizen.invokeNative('0xCD0F5B5D932AE473');
    }

    /**
     * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
     *
     * Hash: 0x05A50AF38947EB8D | Since: 323 | API-Set: unknown
     */
    export function networkDeleteCharacter(characterSlot: number): void {
        NetworkDeleteCharacter(characterSlot, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0CB1BE0633C024A8 | Since: 573 | API-Set: unknown
     */
    export function networkEarnAgency(): void {
        NetworkEarnBossAgency(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x38482AD49CB905C7 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnAgencyContract(): void {
        Citizen.invokeNative('0x38482AD49CB905C7', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE29F3D5FA63B1B82 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnAgencyPhone(): void {
        Citizen.invokeNative('0xE29F3D5FA63B1B82', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x663B4B9D11742A12 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnAgencySafe(): void {
        Citizen.invokeNative('0x663B4B9D11742A12', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD29334ED1A256DBF | Since: 1868 | API-Set: unknown
     */
    export function networkEarnArcade(): void {
        Citizen.invokeNative('0xD29334ED1A256DBF', undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F99F70C61F14619 | Since: 1604 | API-Set: unknown
     */
    export function networkEarnArenaCareerProgression(amount: number): void {
        NetworkEarnFromArenaCareerProgression(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE08256F972C7BB2C | Since: 1604 | API-Set: unknown
     */
    export function networkEarnArenaSkillLevelProgression(amount: number): void {
        NetworkEarnFromArenaSkillLevelProgression(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x631F1CB8FB4130AA | Since: 1604 | API-Set: unknown
     */
    export function networkEarnArenaWar(amount: number): void {
        NetworkEarnFromArenaWar(amount, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5E7AE8AABE8B7C0D | Since: 1604 | API-Set: unknown
     */
    export function networkEarnArenaWarAssassinateTarget(amount: number): void {
        NetworkEarnFromAssassinateTargetKilled2(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA82959062361B259 | Since: 1604 | API-Set: unknown
     */
    export function networkEarnArenaWarEventCargo(amount: number): void {
        NetworkEarnFromBbEventCargo(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA700D8A9905F78A | Since: 1604 | API-Set: unknown
     */
    export function networkEarnAssassinateTargetKilled(amount: number): void {
        NetworkEarnFromAssassinateTargetKilled(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x36A7FD5A7194B03E | Since: 2372 | API-Set: unknown
     */
    export function networkEarnAutoshopBusiness(): void {
        NetworkEarnFromAutoshopBusiness(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC66D1CF99ED7FE25 | Since: 2372 | API-Set: unknown
     */
    export function networkEarnAutoshopIncome(): void {
        NetworkEarnFromAutoshopIncome(undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x146D4EB6D22A403F | Since: 2545 | API-Set: unknown
     */
    export function networkEarnAwardContract(): void {
        Citizen.invokeNative('0x146D4EB6D22A403F', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88D6C327D6C57C45 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnAwardFixerMission(): void {
        Citizen.invokeNative('0x88D6C327D6C57C45', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7397A115030F1BE3 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnAwardPhone(): void {
        Citizen.invokeNative('0x7397A115030F1BE3', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B4DBDED84D6A420 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnAwardShortTrip(): void {
        Citizen.invokeNative('0x5B4DBDED84D6A420', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFDD8D2440DAF1590 | Since: 1604 | API-Set: unknown
     */
    export function networkEarnBbEventBonus(amount: number): void {
        NetworkEarnFromBbEventBonus(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA51338E0DCCD4065 | Since: 2189 | API-Set: unknown
     */
    export function networkEarnBeachPartyLostFound(): void {
        Citizen.invokeNative('0xA51338E0DCCD4065', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71BEC32FA466E105 | Since: 2699 | API-Set: unknown
     */
    export function networkEarnBiker(): void {
        NetworkEarnFromBikerIncome(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C5809EB9DF57257 | Since: 2699 | API-Set: unknown
     */
    export function networkEarnBikerShop(): void {
        NetworkEarnFromBikeShopBusiness(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x08B0CA7A6AB3AC32 | Since: 573 | API-Set: unknown
     */
    export function networkEarnBoss(): void {
        NetworkEarnBoss(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6B170F9A02E9E87 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnBountyHunterReward(): void {
        NetworkEarnBountyHunterReward(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC6227792A188E2E | Since: 2372 | API-Set: unknown
     */
    export function networkEarnCarclubMembership(): void {
        NetworkEarnFromCarclubMembership(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x973A9781A34F8DEB | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCasinoAward(amount: number, hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        NetworkEarnFromCasinoAward(amount, hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x83AD64F53F4E9483 | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCasinoCollectableCompletedCollection(amount: number): void {
        NetworkEarnFromCompleteCollection(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x72E7C7B9615FA3C3 | Since: 1868 | API-Set: unknown
     */
    export function networkEarnCasinoHeist(): void {
        NetworkEarnCasinoHeist(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3EC7471E6909798A | Since: 1868 | API-Set: unknown
     */
    export function networkEarnCasinoHeistAwards(): void {
        NetworkEarnCasinoHeistBonus(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x09E8F18641BE2575 | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCasinoMissionParticipation(amount: number): void {
        NetworkEarnFromCasinoMissionParticipation(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x566FD402B25787DE | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCasinoMissionReward(amount: number): void {
        NetworkEarnFromCasinoMissionReward(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC95ED552157E092 | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCasinoStoryMissionReward(amount: number): void {
        NetworkEarnFromCasinoStoryMissionReward(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0819DB99FD2FBBD8 | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCasinoTimeTrialWin(amount: number): void {
        NetworkEarnFromTimeTrialWin(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0DD362F14F18942A | Since: 1868 | API-Set: unknown
     */
    export function networkEarnChallenge(amount: number): void {
        Citizen.invokeNative('0x0DD362F14F18942A', amount, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA95CFB4E02390842 | Since: 1868 | API-Set: unknown
     */
    export function networkEarnCollectables(): void {
        Citizen.invokeNative('0xA95CFB4E02390842', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5517F90043466049 | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCollectablesActionFigures(amount: number): void {
        NetworkEarnFromCollectablesActionFigures(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C9B198AF5A54FA6 | Since: 2060 | API-Set: unknown
     */
    export function networkEarnCollectableCompletedCollection(amount: number): void {
        NetworkEarnCollectableCompletedCollection(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84FF63BD4966F33D | Since: 1734 | API-Set: unknown
     */
    export function networkEarnCollectableItem(amount: number): void {
        NetworkEarnFromCollectionItem(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5128DF14A5BB86FC | Since: 1734 | API-Set: unknown
     */
    export function networkEarnDailyObjectiveEvent(amount: number): void {
        NetworkEarnFromDailyObjectiveEvent(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x533073E8A596008C | Since: 2372 | API-Set: unknown
     */
    export function networkEarnDailyVehicle(): void {
        NetworkEarnFromVehicleAutoshop(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE65AFE7308E32B2 | Since: 2372 | API-Set: unknown
     */
    export function networkEarnDailyVehicleBonus(): void {
        NetworkEarnFromVehicleAutoshopBonus(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCAC672087B4A24AB | Since: 1290 | API-Set: unknown
     */
    export function networkEarnDarChallenge(amount: number): void {
        NetworkEarnFromDarChallenge(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE2E244AB823B4483 | Since: 2060 | API-Set: unknown
     */
    export function networkEarnDispatchCall(amount: number): void {
        Citizen.invokeNative('0xE2E244AB823B4483', amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x128A747F4A230952 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnDoomsdayFinaleBonus(amount: number, vehicleHash: number | string): void {
        if (typeof vehicleHash === 'string') vehicleHash = misc.getHashKey(vehicleHash)
        NetworkEarnFromDoomsdayFinaleBonus(amount, vehicleHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11B0A20C493F7E36 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnFirstTimeBonus(): void {
        NetworkEarnJobBonusFirstTimeBonus(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF4A8E57460BF2037 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnFixerAgencyShortTrip(): void {
        Citizen.invokeNative('0xF4A8E57460BF2037', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA154373C5FE51E8 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnFixerFinale(): void {
        Citizen.invokeNative('0xBA154373C5FE51E8', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6283E5DE4C4460C6 | Since: 2545 | API-Set: unknown
     */
    export function networkEarnFixerPrep(): void {
        Citizen.invokeNative('0x6283E5DE4C4460C6', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x235D41210B3A1A5E | Since: 2545 | API-Set: unknown
     */
    export function networkEarnFixerRivalDelivery(): void {
        Citizen.invokeNative('0x235D41210B3A1A5E', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFFBA1B1F7C0B6F4 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnFmbbWageBonus(): void {
        NetworkEarnFmbbWageBonus(undefined);
    }

    /**
     * DSPORT
     *
     * Hash: 0x515B4A22E4D3C6D7 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromAiTargetKill(): void {
        NetworkEarnFromAiTargetKill(undefined, undefined);
    }

    /**
     * Example for p1: "AM_DISTRACT_COPS"
     *
     * Hash: 0xFB6DB092FBAE29E6 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromAmbientJob(): any {
        return NetworkEarnFromAmbientJob(0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61326EE6DF15B0CA | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromBendJob(amount: number, heistHash: string): void {
        NetworkEarnFromBendJob(amount, heistHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x827A5BA1A44ACA6D | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromBetting(amount: number): void {
        NetworkEarnFromBetting(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x131BB5DA15453ACF | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromBounty(amount: number): [any, any] {
        return NetworkEarnFromBounty(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x42FCE14F50F27291 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnFromBusinessBattle(): void {
        NetworkEarnFromBusinessBattle(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B39CF0D53F1C883 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnFromBusinessHubSell(): void {
        NetworkEarnFromBusinessHubSell(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8586789730B10CAF | Since: 877 | API-Set: unknown
     */
    export function networkEarnFromBusinessProduct(amount: number): void {
        NetworkEarnFromBusinessProduct(amount, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x718FBBF67414FA36 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnFromCashingOut(amount: number): void {
        Citizen.invokeNative('0x718FBBF67414FA36', amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B171E6B2F64D8DF | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromChallengeWin(): any {
        return NetworkEarnFromChallengeWin(undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA75EAC69F59E96E7 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnFromClubManagementParticipation(): void {
        NetworkEarnFromClubManagementParticipation(undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xECA658CE2A4E5A72 | Since: 757 | API-Set: unknown
     */
    export function networkEarnFromContraband(amount: number): void {
        NetworkEarnFromContraband(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1CC1B9EC3007A2A | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromCrateDrop(amount: number): void {
        NetworkEarnFromCrateDrop(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA009A62990671D4 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnFromCriminalMastermind(): void {
        NetworkEarnFromCriminalMastermindBonus(undefined, undefined, undefined);
    }

    /**
     * type either Monthly,Weekly,Daily
     *
     * Hash: 0x6EA318C91C1A8786 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromDailyObjectives(amount: number, _type: string, characterSlot: number): void {
        NetworkEarnFromDailyObjectives(amount, _type, characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84C0116D012E8FC2 | Since: 757 | API-Set: unknown
     */
    export function networkEarnFromDestroyingContraband(): void {
        NetworkEarnFromDestroyingContraband(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1FDA0AA679C9919B | Since: 1493 | API-Set: unknown
     */
    export function networkEarnFromFmbbBossWork(): void {
        NetworkEarnFromFmbbBossWork(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5156361F26E2212 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnFromFmbbPhonecallMission(): void {
        NetworkEarnFromFmbbPhonecallMission(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA03D4ACE0A3284CE | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromGangattackPickup(amount: number): void {
        NetworkEarnFromGangPickup(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x31BA138F6304FB9F | Since: 1180 | API-Set: unknown
     */
    export function networkEarnFromHangarTrade(): void {
        Citizen.invokeNative('0x31BA138F6304FB9F', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x45B8154E077D9E4D | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromHoldups(amount: number): void {
        NetworkEarnFromHoldups(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF92A014A634442D6 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromImportExport(amount: number, modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        NetworkEarnFromImportExport(amount, modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE2BB399D90942091 | Since: 2189 | API-Set: unknown
     */
    export function networkEarnFromIslandHeistDjMission(): void {
        Citizen.invokeNative('0xE2BB399D90942091', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2CC4836834E8A98 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromJob(amount: number): void {
        NetworkEarnFromJob(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEBBF584665411D0 | Since: 1734 | API-Set: unknown
     */
    export function networkEarnFromJobx2(amount: number): void {
        NetworkEarnFromJobX2(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6816FB4416760775 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromJobBonus(): [any, any] {
        return NetworkEarnFromJobBonus(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4337511FA8221D36 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromNotBadsport(amount: number): void {
        NetworkEarnFromNotBadsport(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3F4D00167E41E0AD | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromPersonalVehicle(): void {
        NetworkEarnFromPersonalVehicle(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED1517D3AF17C698 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromPickup(amount: number): void {
        NetworkEarnFromPickup(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8407624CEF2354B | Since: 791 | API-Set: unknown
     */
    export function networkEarnFromPremiumJob(amount: number): void {
        NetworkEarnFromPremiumJob(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x849648349D77F5C5 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromProperty(amount: number, propertyName: number | string): void {
        if (typeof propertyName === 'string') propertyName = misc.getHashKey(propertyName)
        NetworkEarnFromProperty(amount, propertyName);
    }

    /**
     * For the money bags that drop a max of $40,000. Often called 40k bags.
     *
     * Most likely NETWORK_EARN_FROM_ROB***
     *
     * Hash: 0xF514621E8EA463D0 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromRobArmoredCars(amount: number): void {
        NetworkEarnFromArmourTruck(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9251B6ABF2D0A5B4 | Since: 1103 | API-Set: unknown
     */
    export function networkEarnFromSellBunker(amount: number, bunkerHash: number | string): void {
        if (typeof bunkerHash === 'string') bunkerHash = misc.getHashKey(bunkerHash)
        NetworkEarnFromSellBunker(amount, bunkerHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B7E4FB50D5F3D65 | Since: 1180 | API-Set: unknown
     */
    export function networkEarnFromSmugglerWork(): void {
        Citizen.invokeNative('0x6B7E4FB50D5F3D65', undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB539BD8A4C1EECF8 | Since: 323 | API-Set: unknown
     */
    export function networkEarnFromVehicle(): void {
        NetworkEarnFromVehicle(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDEAD9A91EC768B3 | Since: 944 | API-Set: unknown
     */
    export function networkEarnFromVehicleExport(amount: number): void {
        NetworkEarnFromVehicleExport(amount, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E4ADAFF1830F146 | Since: 757 | API-Set: unknown
     */
    export function networkEarnFromWarehouse(amount: number, id: number): void {
        NetworkEarnFromWarehouse(amount, id);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9A31475F530DFDA | Since: 1290 | API-Set: unknown
     */
    export function networkEarnGangopsAward(amount: number): void {
        NetworkEarnFromGangopsAwards(amount, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2597A0D4A4FC2C77 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnGangopsElite(amount: number, actIndex: number): void {
        NetworkEarnFromGangopsElite(amount, undefined, actIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C121FC9545E0D52 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnGangopsFinale(amount: number): void {
        NetworkEarnFromGangopsJobsFinale(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED26584F6BDCBBFD | Since: 1290 | API-Set: unknown
     */
    export function networkEarnGangopsPrepParticipation(amount: number): void {
        NetworkEarnFromGangopsJobsPrepParticipation(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA9160796D47A2CF8 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnGangopsSetup(amount: number): void {
        NetworkEarnFromGangopsJobsSetup(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2DCB19ABAB0380A8 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnGangopsWages(amount: number): void {
        NetworkEarnFromGangopsWages(amount, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x15BB2A5C757EB91F | Since: 1290 | API-Set: unknown
     */
    export function networkEarnGangopsWagesBonus(amount: number): void {
        NetworkEarnFromGangopsWagesBonus(amount, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCDA1C62BE2777802 | Since: 573 | API-Set: unknown
     */
    export function networkEarnGoon(): void {
        NetworkEarnGoon(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE8815FE993896AD3 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnHackerTruck(amount: number): void {
        NetworkEarnFromHackerTruckMission(undefined, amount, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D4FDBB035229669 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnHeistAward(): void {
        NetworkEarnJobBonusHeistAward(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD21D111C46BA9F15 | Since: 2189 | API-Set: unknown
     */
    export function networkEarnIslandHeist(amount1: number, amount2: number): void {
        NetworkEarnIslandHeist(amount1, undefined, undefined, undefined, amount2, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0F82D68C7039158 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnNightclub(): void {
        Citizen.invokeNative('0xE0F82D68C7039158', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6E74CF8C884C880 | Since: 1493 | API-Set: unknown
     */
    export function networkEarnNightclubAndWarehouse(): void {
        Citizen.invokeNative('0xC6E74CF8C884C880', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB4DEAE67F35E2ACD | Since: 1493 | API-Set: unknown
     */
    export function networkEarnNightclubDancing(): void {
        Citizen.invokeNative('0xB4DEAE67F35E2ACD', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x55A1E095DB052FA5 | Since: 877 | API-Set: unknown
     */
    export function networkEarnPurchaseClubHouse(): void {
        Citizen.invokeNative('0x55A1E095DB052FA5', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFF49EE984E7AAE8 | Since: 1734 | API-Set: unknown
     */
    export function networkEarnRcTimeTrial(amount: number): void {
        NetworkEarnFromRcTimeTrial(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A5349B773584675 | Since: 1290 | API-Set: unknown
     */
    export function networkEarnRdrBonus(amount: number): void {
        NetworkEarnFromRdrBonus(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0E1E2FF3F4EC11AA | Since: 1290 | API-Set: unknown
     */
    export function networkEarnSellBase(amount: number, baseNameHash: number | string): void {
        if (typeof baseNameHash === 'string') baseNameHash = misc.getHashKey(baseNameHash)
        NetworkEarnFromSellBase(amount, baseNameHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8BCB27A057DF7B7F | Since: 1734 | API-Set: unknown
     */
    export function networkEarnSellPrizeVehicle(amount: number): void {
        NetworkEarnFromSellingVehicle(amount, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x45087AE480B233AC | Since: 2699 | API-Set: unknown
     */
    export function networkEarnSightseeingReward(): void {
        NetworkEarnFromSightseeing(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEE612F2D71B0308 | Since: 1180 | API-Set: unknown
     */
    export function networkEarnSmugglerAgency(amount: number): void {
        NetworkEarnFromSmuggling(amount, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x676C48776CACBB5A | Since: 1604 | API-Set: unknown
     */
    export function networkEarnSpinTheWheelCash(amount: number): void {
        NetworkEarnFromSpinTheWheelCash(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5B669CF2299A271F | Since: 1290 | API-Set: unknown
     */
    export function networkEarnTargetRefund(amount: number): void {
        NetworkEarnFromTargetRefund(amount, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB846F547D3792DF6 | Since: 2372 | API-Set: unknown
     */
    export function networkEarnTunerAward(): void {
        NetworkEarnFromTunerAward(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBCB266247193AC61 | Since: 2372 | API-Set: unknown
     */
    export function networkEarnTunerRobbery(): void {
        NetworkEarnFromTunerFinale(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD07C7C3F1995108C | Since: 2545 | API-Set: unknown
     */
    export function networkEarnUpgradeAgency(): void {
        Citizen.invokeNative('0xD07C7C3F1995108C', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C3B75694F7E0D9C | Since: 1868 | API-Set: unknown
     */
    export function networkEarnUpgradeArcade(): void {
        Citizen.invokeNative('0x4C3B75694F7E0D9C', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC10322A8D3E061EE | Since: 2372 | API-Set: unknown
     */
    export function networkEarnUpgradeAutoshop(): void {
        NetworkEarnFromUpgradeAutoshopLocation(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35F8DA0E8A31EF1B | Since: 1180 | API-Set: unknown
     */
    export function networkEarnWagePayment(amount: number): void {
        NetworkEarnFromWagePayment(amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x005ACA7100BD101D | Since: 1180 | API-Set: unknown
     */
    export function networkEarnWagePaymentBonus(amount: number): void {
        NetworkEarnFromWagePaymentBonus(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE68E30D89F97132 | Since: 2060 | API-Set: unknown
     */
    export function networkEarnYatchMission(amount: number): void {
        Citizen.invokeNative('0xDE68E30D89F97132', amount, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C4FCCD2E4DEB394 | Since: 323 | API-Set: unknown
     */
    export function networkEconomyHasFixedCrazyNumbers(): boolean {
        return Citizen.invokeNative('0x7C4FCCD2E4DEB394');
    }

    /**
     * Returns true if bank balance >= amount.
     *
     * Hash: 0xA31FD6A0865B6D14 | Since: 323 | API-Set: unknown
     */
    export function networkGetCanSpendFromBank(amount: number): boolean {
        return NetworkGetVcBankBalanceIsNotLessThan(amount);
    }

    /**
     * Returns true if bank balance + wallet balance >= amount.
     *
     * Hash: 0xDC18531D7019A535 | Since: 323 | API-Set: unknown
     */
    export function networkGetCanSpendFromBankAndWallet(amount: number, characterSlot: number): boolean {
        return NetworkGetVcBankWalletBalanceIsNotLessThan(amount, characterSlot);
    }

    /**
     * Returns true if wallet balance >= amount.
     *
     * Hash: 0xED5AB8860415BABA | Since: 323 | API-Set: unknown
     */
    export function networkGetCanSpendFromWallet(amount: number, characterSlot: number): boolean {
        return NetworkGetVcWalletBalanceIsNotLessThan(amount, characterSlot);
    }

    /**
     * Returns false if amount > wallet balance or daily transfer limit has been hit.
     *
     * Hash: 0x08E8EEADFD0DC4A0 | Since: 323 | API-Set: unknown
     */
    export function networkGetCanTransferCash(amount: number): boolean {
        return Citizen.invokeNative('0x08E8EEADFD0DC4A0', amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D1E75F91C07DEE5 | Since: 323 | API-Set: unknown
     */
    export function networkGetEvcBalance(): number {
        return NetworkGetEvcBalance();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB2456B2040A6A67 | Since: 323 | API-Set: unknown
     */
    export function networkGetPlayerIsHighEarner(): boolean {
        return NetworkGetIsHighEarner();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4F54F3B6C202FB4E | Since: 323 | API-Set: unknown
     */
    export function networkGetPvcBalance(): number {
        return NetworkGetPvcBalance();
    }

    /**
     * Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
     *
     * Hash: 0x13A8DE2FD77D04F3 | Since: 323 | API-Set: unknown
     */
    export function networkGetPvcTransferBalance(): number {
        return NetworkGetPvcTransferBalance();
    }

    /**
     * Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
     *
     * Hash: 0xEA560AC9EEB1E19B | Since: 323 | API-Set: unknown
     */
    export function networkGetRemainingTransferBalance(): number {
        return NetworkGetRemainingTransferBalance();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6FA3979BED01B81 | Since: 323 | API-Set: unknown
     */
    export function networkGetStringBankBalance(): string {
        return NetworkGetStringBankBalance();
    }

    /**
     * No comment provided
     *
     * Hash: 0x700AF71AE615E6DD | Since: 323 | API-Set: unknown
     */
    export function networkGetStringBankWalletBalance(character: number): string {
        return NetworkGetStringBankWalletBalance(character);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9B10B529DCFB33B | Since: 323 | API-Set: unknown
     */
    export function networkGetStringWalletBalance(characterSlot: number): string {
        return NetworkGetStringWalletBalance(characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CBAD97E059E1B94 | Since: 323 | API-Set: unknown
     */
    export function networkGetVcBalance(): number {
        return NetworkGetVcBalance();
    }

    /**
     * No comment provided
     *
     * Hash: 0x76EF28DA05EA395A | Since: 323 | API-Set: unknown
     */
    export function networkGetVcBankBalance(): number {
        return NetworkGetVcBankBalance();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA40F9C2623F6A8B5 | Since: 323 | API-Set: unknown
     */
    export function networkGetVcWalletBalance(characterSlot: number): number {
        return NetworkGetVcWalletBalance(characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFB18DF9CB95E0105 | Since: 323 | API-Set: unknown
     */
    export function networkGivePlayerJobshareCash(amount: number): any {
        return NetworkGivePlayerJobshareCash(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DA5ECD1A56CBA6D | Since: 323 | API-Set: unknown
     */
    export function networkInitializeCash(wallet: number, bank: number): void {
        NetworkInitializeCash(wallet, bank);
    }

    /**
     * No comment provided
     *
     * Hash: 0x821418C727FCACD7 | Since: 791 | API-Set: unknown
     */
    export function networkManualDeleteCharacter(characterSlot: number): void {
        NetworkManualDeleteCharacter(characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x81404F3DC124FE5B | Since: 323 | API-Set: unknown
     */
    export function networkMoneyCanBet(amount: number): boolean {
        return NetworkMoneyCanBet(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5FD5ED82CBBE9989 | Since: 323 | API-Set: unknown
     */
    export function networkPayEmployeeWage(): void {
        NetworkPayEmployeeWage(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9346E14F2AF74D46 | Since: 323 | API-Set: unknown
     */
    export function networkPayMatchEntryFee(amount: number, matchId: string): void {
        NetworkPayMatchEntryFee(amount, matchId, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x56A3B51944C50598 | Since: 323 | API-Set: unknown
     */
    export function networkReceivePlayerJobshareCash(value: number): any {
        return NetworkReceivePlayerJobshareCash(value);
    }

    /**
     * index
     * -------
     * See function sub_1005 in am_boat_taxi.ysc
     *
     * context
     * ----------
     * "BACKUP_VAGOS"
     * "BACKUP_LOST"
     * "BACKUP_FAMILIES"
     * "HIRE_MUGGER"
     * "HIRE_MERCENARY"
     * "BUY_CARDROPOFF"
     * "HELI_PICKUP"
     * "BOAT_PICKUP"
     * "CLEAR_WANTED"
     * "HEAD_2_HEAD"
     * "CHALLENGE"
     * "SHARE_LAST_JOB"
     * "DEFAULT"
     *
     * reason
     * ---------
     * "NOTREACHTARGET"
     * "TARGET_ESCAPE"
     * "DELIVERY_FAIL"
     * "NOT_USED"
     * "TEAM_QUIT"
     * "SERVER_ERROR"
     * "RECEIVE_LJ_L"
     * "CHALLENGE_PLAYER_LEFT"
     * "DEFAULT"
     *
     * unk
     * -----
     * Unknown bool value
     *
     *
     *
     * Hash: 0xF9C812CD7C46E817 | Since: 323 | API-Set: unknown
     */
    export function networkRefundCash(index: number, context: string, reason: string): void {
        NetworkRefundCash(index, context, reason, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B882107C23A9022 | Since: 1290 | API-Set: unknown
     */
    export function networkServiceEarnGangopsRivalDelivery(earnedMoney: number): void {
        NetworkRivalDeliveryCompleted(earnedMoney);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1B2120405080125C | Since: 2545 | API-Set: unknown
     */
    export function networkSpendAgency(): void {
        Citizen.invokeNative('0x1B2120405080125C', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1254B5B3925EFD3D | Since: 2545 | API-Set: unknown
     */
    export function networkSpendApartmentUtilities(amount: number): any {
        return Citizen.invokeNative('0x1254B5B3925EFD3D', amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x43AA7FAC4E6D6687 | Since: 1868 | API-Set: unknown
     */
    export function networkSpendArcade(): void {
        NetworkSpentArcadeGeneric(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB5B58E24868CB09E | Since: 1868 | API-Set: unknown
     */
    export function networkSpendArcadeMgmt(): void {
        Citizen.invokeNative('0xB5B58E24868CB09E', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x619496D837EFD920 | Since: 1604 | API-Set: unknown
     */
    export function networkSpendArenaPremium(amount: number): void {
        NetworkSpentArenaPremium(amount, false, false);
    }

    /**
     * type either, 1 for cam spectate, 2 for drone
     *
     * Hash: 0x7049BF858601DC0F | Since: 1604 | API-Set: unknown
     */
    export function networkSpendArenaSpectatorBox(amount: number, _type: number): void {
        NetworkSpentArenaSpectatorBox(amount, _type, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9BEA350D7C48061B | Since: 2372 | API-Set: unknown
     */
    export function networkSpendAutoshopModify(): void {
        NetworkSpentAutoshopModifications(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x54ABA22FA6371249 | Since: 2189 | API-Set: unknown
     */
    export function networkSpendBeachParty(): void {
        NetworkSpentBeachPartyGeneric(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x923AEA8E78F8DF0B | Since: 2699 | API-Set: unknown
     */
    export function networkSpendBikeShop(): void {
        NetworkSpentBikeShopModify(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDBC966A01C02BCA7 | Since: 573 | API-Set: unknown
     */
    export function networkSpendBoss(): void {
        NetworkSpentPayBoss(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1BEA0CD93470BB1F | Since: 1493 | API-Set: unknown
     */
    export function networkSpendBountyHunterMission(amount: number): void {
        NetworkSpentBountyHunterMission(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92D1CFDA1227FF1C | Since: 2545 | API-Set: unknown
     */
    export function networkSpendBusinessPropertyFees(): void {
        Citizen.invokeNative('0x92D1CFDA1227FF1C', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA8CD3C9B3C35884 | Since: 2545 | API-Set: unknown
     */
    export function networkSpendBuyAgency(): void {
        Citizen.invokeNative('0xEA8CD3C9B3C35884', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x870289A558348378 | Since: 1868 | API-Set: unknown
     */
    export function networkSpendBuyArcade(): void {
        Citizen.invokeNative('0x870289A558348378', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x40D5DA9550B7CB46 | Since: 1604 | API-Set: unknown
     */
    export function networkSpendBuyArena(amount: number): void {
        NetworkSpentBuyArena(amount, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEEB7E5D1FEB20869 | Since: 2372 | API-Set: unknown
     */
    export function networkSpendBuyAutoshop(): void {
        NetworkSpentBuyAutoshop(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34A6FC4D06C4DA0F | Since: 1734 | API-Set: unknown
     */
    export function networkSpendBuyCasino(amount: number): any {
        return NetworkSpentBuyCasino(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90CD7C6871FBF1B4 | Since: 2189 | API-Set: unknown
     */
    export function networkSpendBuySub(): void {
        Citizen.invokeNative('0x90CD7C6871FBF1B4', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x925227803A0EAA1B | Since: 2372 | API-Set: unknown
     */
    export function networkSpendCarClubBar(): void {
        NetworkSpentCarclub(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1464E17207CD36E2 | Since: 2372 | API-Set: unknown
     */
    export function networkSpendCarClubMembership(amount1: number, amount2: number): void {
        NetworkSpentCarclubMembership(amount1, undefined, undefined, amount2, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1E46824E6FB92B5 | Since: 2372 | API-Set: unknown
     */
    export function networkSpendCarClubTakeover(): void {
        NetworkSpentCarclubTakeover(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC991C255AA6D90B2 | Since: 2189 | API-Set: unknown
     */
    export function networkSpendCasinoClub(amount1: number, amount2: number): void {
        NetworkSpentCasinoClubGeneric(amount1, undefined, false, undefined, 0, 0, 0, amount2, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88BF9B612B84D3C3 | Since: 1734 | API-Set: unknown
     */
    export function networkSpendCasinoGeneric(amount: number): void {
        NetworkSpentCasinoGeneric(amount, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD30E8392F407C328 | Since: 1868 | API-Set: unknown
     */
    export function networkSpendCasinoHeist(): void {
        NetworkSpentCasinoHeist(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x487009DD91D93429 | Since: 1868 | API-Set: unknown
     */
    export function networkSpendCasinoHeistSkipMission(): void {
        NetworkSpentCasinoHeistSkipMission(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFBBE0570EDF39D46 | Since: 1734 | API-Set: unknown
     */
    export function networkSpendCasinoMembership(amount: number): void {
        NetworkSpentCasinoMembership(amount, false, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD86581F9E7CDA383 | Since: 2545 | API-Set: unknown
     */
    export function networkSpendCompSuv(): void {
        Citizen.invokeNative('0xD86581F9E7CDA383', undefined, undefined, undefined, undefined);
    }

    /**
     * Hardcoded to return 0.
     *
     * Hash: 0x9B5016A6433A68C5 | Since: 323 | API-Set: unknown
     */
    export function networkSpendEarnedFromBankAndWallets(amount: number): number {
        return Citizen.invokeNative('0x9B5016A6433A68C5', amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x771ADB0E7635B7BF | Since: 1290 | API-Set: unknown
     */
    export function networkSpendGangopsCannon(): void {
        NetworkSpentGangopsCannon(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A7CEC72C3443BCC | Since: 1290 | API-Set: unknown
     */
    export function networkSpendGangopsRepairCost(): void {
        Citizen.invokeNative('0x2A7CEC72C3443BCC', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA947AE8880D5C18 | Since: 1290 | API-Set: unknown
     */
    export function networkSpendGangopsSkipMission(): void {
        NetworkSpentGangopsStartMission(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA19EC0786E326E06 | Since: 1290 | API-Set: unknown
     */
    export function networkSpendGangopsStartStrand(_type: number, amount: number): void {
        NetworkSpentGangopsStartStrand(_type, amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5ECE6FD7B4EC8D6A | Since: 1290 | API-Set: unknown
     */
    export function networkSpendGangopsTripSkip(amount: number): void {
        NetworkSpentGangopsTripSkip(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x08A1B82B91900682 | Since: 573 | API-Set: unknown
     */
    export function networkSpendGoon(amount: number): void {
        NetworkSpentPayGoon(0, 0, amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CEB0E0BC2A77C05 | Since: 2699 | API-Set: unknown
     */
    export function networkSpendGunrunning(): void {
        NetworkSpentGunrunningContactService(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF8793B91EA094A7 | Since: 2545 | API-Set: unknown
     */
    export function networkSpendHidden(): void {
        Citizen.invokeNative('0xBF8793B91EA094A7', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x93AA4165CB67E925 | Since: 2372 | API-Set: unknown
     */
    export function networkSpendInteractionMenuAbility(): void {
        NetworkSpentImAbility(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE86689E5F82DE429 | Since: 2189 | API-Set: unknown
     */
    export function networkSpendIslandHeist(): void {
        NetworkSpentIslandHeist(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE5F5A060439C2F5D | Since: 1604 | API-Set: unknown
     */
    export function networkSpendMakeItRain(amount: number): void {
        NetworkSpentMakeItRain(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x65482BFD0923C8A1 | Since: 1493 | API-Set: unknown
     */
    export function networkSpendNightclubAndWarehouse(): void {
        Citizen.invokeNative('0x65482BFD0923C8A1', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD21B016E4289465 | Since: 1493 | API-Set: unknown
     */
    export function networkSpendNightclubBarDrink(amount: number): void {
        NetworkSpentNightclubBarDrink(amount, undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEAD3D81F2C3A1458 | Since: 1868 | API-Set: unknown
     */
    export function networkSpendPlayArcade(): void {
        NetworkSpentArcadeGame(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9F7A469460E7A4A | Since: 2372 | API-Set: unknown
     */
    export function networkSpendSetCommonFields(): void {
        NetworkSpentFromBank(undefined, undefined, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E2F4E8F44CAF4E0 | Since: 2699 | API-Set: unknown
     */
    export function networkSpendSetDiscount(): void {
        NetworkSpentSalesDisplay(false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9DF467CBE4398C8 | Since: 2545 | API-Set: unknown
     */
    export function networkSpendSourceBike(): void {
        Citizen.invokeNative('0xD9DF467CBE4398C8', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A5BD1D0000B339C | Since: 1604 | API-Set: unknown
     */
    export function networkSpendSpinTheWheelPayment(amount: number): void {
        NetworkSpentSpinTheWheelPayment(amount, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6C8BC1488527AAAB | Since: 2189 | API-Set: unknown
     */
    export function networkSpendSubmarine(): void {
        NetworkSpentSubmarine(undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEBD482B82ACB8BAD | Since: 2545 | API-Set: unknown
     */
    export function networkSpendSupply(): void {
        Citizen.invokeNative('0xEBD482B82ACB8BAD', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61A2DF64ED2D396E | Since: 2545 | API-Set: unknown
     */
    export function networkSpendSuvFstTrvl(): void {
        Citizen.invokeNative('0x61A2DF64ED2D396E', 0, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6CCA64840589A3B6 | Since: 2545 | API-Set: unknown
     */
    export function networkSpendUpgradeAgency(): void {
        Citizen.invokeNative('0x6CCA64840589A3B6', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5574637681911FDA | Since: 1868 | API-Set: unknown
     */
    export function networkSpendUpgradeArcade(): void {
        Citizen.invokeNative('0x5574637681911FDA', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x037ABB06825D7AB1 | Since: 1604 | API-Set: unknown
     */
    export function networkSpendUpgradeArena(amount: number): void {
        NetworkSpentUpgradeArena(amount, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD829AA198FDC46C | Since: 2372 | API-Set: unknown
     */
    export function networkSpendUpgradeAutoshop(): void {
        NetworkSpentUpgradeAutoshop(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4740D62BC1B4EBEA | Since: 1734 | API-Set: unknown
     */
    export function networkSpendUpgradeCasino(amount: number): any {
        return NetworkSpentUpgradeCasino(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x89049A84065CE68E | Since: 2189 | API-Set: unknown
     */
    export function networkSpendUpgradeSub(): void {
        NetworkSpentUpgradeSub(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x02D24A35A9CC3503 | Since: 2699 | API-Set: unknown
     */
    export function networkSpendVehicleRequested(): void {
        NetworkSpentVehicleRequested(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB162DC95C0A3317B | Since: 323 | API-Set: unknown
     */
    export function networkSpentAmmoDrop(): void {
        NetworkSpentAmmoDrop(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x14EAEA58F93B55AF | Since: 1604 | API-Set: unknown
     */
    export function networkSpentArenaJoinSpectator(amount: number): void {
        NetworkSpentArenaJoinSpectator(amount, undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x812F5488B1B2A299 | Since: 323 | API-Set: unknown
     */
    export function networkSpentArrestBail(): void {
        NetworkSpentArrestBail(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5D97630A8A0EF123 | Since: 1103 | API-Set: unknown
     */
    export function networkSpentBallisticEquipment(amount: number): void {
        NetworkSpentBallisticEquipment(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA230C9682556CF1 | Since: 323 | API-Set: unknown
     */
    export function networkSpentBankInterest(): void {
        NetworkSpentBankInterest(0, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1C436FD11FFA692F | Since: 323 | API-Set: unknown
     */
    export function networkSpentBetting(amount: number, matchId: string): void {
        NetworkSpentBetting(amount, 0, matchId, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x524EE43A37232C00 | Since: 323 | API-Set: unknown
     */
    export function networkSpentBoatPickup(): void {
        NetworkSpentBoatPickup(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFBE02CD385356BD | Since: 573 | API-Set: unknown
     */
    export function networkSpentBossGoon(amount: number): boolean {
        return NetworkSpentBoss(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x29B260B84947DFCC | Since: 323 | API-Set: unknown
     */
    export function networkSpentBounty(): void {
        NetworkSpentBounty(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6DD8458CE24012C | Since: 323 | API-Set: unknown
     */
    export function networkSpentBullShark(): void {
        NetworkSpentBullShark(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4EA3F425C7744D21 | Since: 1290 | API-Set: unknown
     */
    export function networkSpentBuyBase(): void {
        NetworkSpentBuyBase(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x12D148D26538D0F9 | Since: 1103 | API-Set: unknown
     */
    export function networkSpentBuyBunker(): void {
        NetworkSpentBuyBunker(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA628A745E2275C5D | Since: 323 | API-Set: unknown
     */
    export function networkSpentBuyOfftheradar(): void {
        NetworkSpentBuyOfftheradar(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6D3A430D1A809179 | Since: 323 | API-Set: unknown
     */
    export function networkSpentBuyPassiveMode(): void {
        NetworkSpentBuyPassiveMode(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E176F1B18BC0637 | Since: 323 | API-Set: unknown
     */
    export function networkSpentBuyRevealPlayers(): void {
        NetworkSpentBuyRevealPlayers(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0CCE73BC7A11E885 | Since: 1290 | API-Set: unknown
     */
    export function networkSpentBuyTiltrotor(): void {
        NetworkSpentBuyTiltrotor(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC272C0AE01B4BD8 | Since: 1103 | API-Set: unknown
     */
    export function networkSpentBuyTruck(): void {
        NetworkSpentBuyTruck(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE1B13771A843C4F6 | Since: 323 | API-Set: unknown
     */
    export function networkSpentBuyWantedlevel(): any {
        return NetworkSpentBuyWantedlevel(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xACDE7185B374177C | Since: 323 | API-Set: unknown
     */
    export function networkSpentCallPlayer(): any {
        return NetworkSpentCallPlayer(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x948705F6F9C50824 | Since: 2699 | API-Set: unknown
     */
    export function networkSpentCargoSourcing(): void {
        NetworkSpentCargoSourcing(undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC03C719DB2F4306 | Since: 323 | API-Set: unknown
     */
    export function networkSpentCarwash(): void {
        NetworkSpentCarwash(undefined, undefined, undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x289016EC778D60E0 | Since: 323 | API-Set: unknown
     */
    export function networkSpentCashDrop(amount: number): void {
        NetworkSpentCashDrop(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F456788B05FAEAC | Since: 944 | API-Set: unknown
     */
    export function networkSpentChangeAppearance(): void {
        Citizen.invokeNative('0x5F456788B05FAEAC', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6B38ECB05A63A685 | Since: 323 | API-Set: unknown
     */
    export function networkSpentCinema(): void {
        NetworkSpentCinema(undefined, undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BBBD92186E1F1C5 | Since: 1290 | API-Set: unknown
     */
    export function networkSpentEmployAssassins(): void {
        NetworkSpentEmployAssassins(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A445B64ED7ABEB5 | Since: 323 | API-Set: unknown
     */
    export function networkSpentFromRockstar(): void {
        NetworkSpentFromRockstar(0, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1F1346FD57685D7 | Since: 1180 | API-Set: unknown
     */
    export function networkSpentHangarStaffCharges(amount: number): void {
        NetworkSpentHangarStaffCharges(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB18AC2ECBB15CB6A | Since: 1180 | API-Set: unknown
     */
    export function networkSpentHangarUtilityCharges(amount: number): void {
        NetworkSpentHangarUtilityCharges(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7BF1D73DB2ECA492 | Since: 323 | API-Set: unknown
     */
    export function networkSpentHeliPickup(): void {
        NetworkSpentHeliPickup(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7B80E2BF9D80BD6 | Since: 323 | API-Set: unknown
     */
    export function networkSpentHireMercenary(): void {
        NetworkSpentHireMercenary(undefined, false, false, undefined);
    }

    /**
     * Only used once in a script (am_contact_requests)
     * p1 = 0
     * p2 = 1
     *
     * Hash: 0xE404BFB981665BF0 | Since: 323 | API-Set: unknown
     */
    export function networkSpentHireMugger(): void {
        NetworkSpentHireMugger(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD9B86B9872039763 | Since: 323 | API-Set: unknown
     */
    export function networkSpentHoldups(): void {
        NetworkSpentHoldups(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1952F3773BA18FE | Since: 944 | API-Set: unknown
     */
    export function networkSpentImportExportRepair(): void {
        NetworkSpentImportExportRepair(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEE99784E4467689C | Since: 323 | API-Set: unknown
     */
    export function networkSpentInStripclub(): void {
        NetworkSpentInStripclub(undefined, false, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28F174A67B8D0C2F | Since: 323 | API-Set: unknown
     */
    export function networkSpentJobSkip(amount: number, matchId: string): void {
        NetworkSpentJobSkip(amount, matchId, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BCDE0F640C773D2 | Since: 877 | API-Set: unknown
     */
    export function networkSpentJukebox(): void {
        NetworkSpentJukebox(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD7CCCBA28C4ECAF0 | Since: 877 | API-Set: unknown
     */
    export function networkSpentMcAbility(): void {
        NetworkSpentBaService(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD4D66B43B1DD28D | Since: 2189 | API-Set: unknown
     */
    export function networkSpentMoveSubmarine(): void {
        Citizen.invokeNative('0xCD4D66B43B1DD28D', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE7DF4E0545DFB56E | Since: 573 | API-Set: unknown
     */
    export function networkSpentMoveYacht(amount: number): void {
        NetworkSpentMoveYacht(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x876056684281655D | Since: 1493 | API-Set: unknown
     */
    export function networkSpentNightclubEntryFee(player: number | string | IPlayer, amount: number): void {
        NetworkSpentNightclubEntryFee(player, amount, undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD5BB406F4E04019F | Since: 323 | API-Set: unknown
     */
    export function networkSpentNoCops(): void {
        NetworkSpentNoCops(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE8B0B270B6E7C76E | Since: 757 | API-Set: unknown
     */
    export function networkSpentOrderBodyguardVehicle(): void {
        NetworkSpentOrderBodyguardVehicle(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x05F04155A226FBBF | Since: 757 | API-Set: unknown
     */
    export function networkSpentOrderWarehouseVehicle(): void {
        NetworkSpentOrderWarehouseVehicle(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0035BB914316F1E3 | Since: 877 | API-Set: unknown
     */
    export function networkSpentPayBusinessSupplies(): void {
        NetworkSpentBusiness(undefined, undefined, undefined, undefined);
    }

    /**
     * According to how I understood this in the freemode script alone,
     * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
     *
     * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
     *
     * The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
     *
     * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
     *
     * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
     * `bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.`
     *
     * Hash: 0x9FF28D88C766E3E8 | Since: 323 | API-Set: unknown
     */
    export function networkSpentPayVehicleInsurancePremium(amount: number, vehicleModel: number | string, notBankrupt: boolean, hasTheMoney: boolean): any {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        return NetworkSpentPayVehicleInsurancePremium(amount, vehicleModel, notBankrupt, hasTheMoney);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0FE8E1FCD2B86B33 | Since: 757 | API-Set: unknown
     */
    export function networkSpentPaHeliPickup(): void {
        NetworkSpentPaServiceHeliPickup(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB49ECA122467D05F | Since: 757 | API-Set: unknown
     */
    export function networkSpentPaServiceDancer(): void {
        NetworkSpentPaServiceDancer(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x112209CE0290C03A | Since: 757 | API-Set: unknown
     */
    export function networkSpentPaServiceHeli(): void {
        Citizen.invokeNative('0x112209CE0290C03A', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE23ADC6FCB1F29AE | Since: 757 | API-Set: unknown
     */
    export function networkSpentPaServiceImpound(): void {
        Citizen.invokeNative('0xE23ADC6FCB1F29AE', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0D30EB83668E63C5 | Since: 757 | API-Set: unknown
     */
    export function networkSpentPaServiceSnack(): void {
        Citizen.invokeNative('0x0D30EB83668E63C5', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED5FD7AF10F5E262 | Since: 757 | API-Set: unknown
     */
    export function networkSpentPaServiceVehicle(): void {
        Citizen.invokeNative('0xED5FD7AF10F5E262', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C99101F7FCE2EE5 | Since: 323 | API-Set: unknown
     */
    export function networkSpentPlayerHealthcare(): void {
        NetworkSpentPlayerHealthcare(0, 0, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB21B89501CFAC79E | Since: 323 | API-Set: unknown
     */
    export function networkSpentProstitutes(): void {
        NetworkSpentProstitutes(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6FD97159FE3C971A | Since: 877 | API-Set: unknown
     */
    export function networkSpentPurchaseBusinessProperty(): void {
        Citizen.invokeNative('0x6FD97159FE3C971A', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x998E18CEB44487FC | Since: 877 | API-Set: unknown
     */
    export function networkSpentPurchaseClubHouse(): void {
        Citizen.invokeNative('0x998E18CEB44487FC', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A93C46AAB1EACC9 | Since: 1493 | API-Set: unknown
     */
    export function networkSpentPurchaseHackerTruck(): void {
        Citizen.invokeNative('0x2A93C46AAB1EACC9', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCCB339CC970452DA | Since: 1180 | API-Set: unknown
     */
    export function networkSpentPurchaseHangar(): void {
        NetworkSpentPurchaseHangar(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33981D6804E62F49 | Since: 944 | API-Set: unknown
     */
    export function networkSpentPurchaseImpexpWarehouseProperty(amount: number): any {
        return NetworkSpentPurchaseWarehouse(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED76D195E6E3BF7F | Since: 1493 | API-Set: unknown
     */
    export function networkSpentPurchaseNightclubAndWarehouse(): void {
        Citizen.invokeNative('0xED76D195E6E3BF7F', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB4C2EC463672474E | Since: 944 | API-Set: unknown
     */
    export function networkSpentPurchaseOfficeGarage(): void {
        Citizen.invokeNative('0xB4C2EC463672474E', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69EF772B192614C1 | Since: 757 | API-Set: unknown
     */
    export function networkSpentPurchaseOfficeProperty(): void {
        Citizen.invokeNative('0x69EF772B192614C1', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD0EFB25CCA8F97A | Since: 757 | API-Set: unknown
     */
    export function networkSpentPurchaseWarehouseProperty(): void {
        Citizen.invokeNative('0xBD0EFB25CCA8F97A', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE284D46FFDB82E36 | Since: 1493 | API-Set: unknown
     */
    export function networkSpentRdrHatchetBonus(amount: number): void {
        NetworkSpentRdrhatchetBonus(amount, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6C8A544E4CF14FC | Since: 1493 | API-Set: unknown
     */
    export function networkSpentRehireDj(amount: number): void {
        NetworkSpentRehireDj(amount, undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC4EE00A7B3BFB76 | Since: 573 | API-Set: unknown
     */
    export function networkSpentRenameOrganization(): void {
        NetworkSpentRenameOrganization(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D26502BB97BFE62 | Since: 323 | API-Set: unknown
     */
    export function networkSpentRequestHeist(): void {
        NetworkSpentRequestHeist(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8204DA7934DF3155 | Since: 323 | API-Set: unknown
     */
    export function networkSpentRequestJob(): void {
        NetworkSpentRequestJob(undefined, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x995A65F15F581359 | Since: 323 | API-Set: unknown
     */
    export function networkSpentRobbedByMugger(amount: number): void {
        NetworkSpentRobbedByMugger(amount, false, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x17C3A7D31EAE39F9 | Since: 323 | API-Set: unknown
     */
    export function networkSpentTaxi(amount: number): void {
        NetworkSpentTaxi(amount, false, false, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FE61782AD94CC09 | Since: 323 | API-Set: unknown
     */
    export function networkSpentTelescope(): void {
        NetworkSpentTelescope(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA51B086B0B2C0F7A | Since: 877 | API-Set: unknown
     */
    export function networkSpentTradeBusinessProperty(): void {
        Citizen.invokeNative('0xA51B086B0B2C0F7A', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FAB6614CE22E196 | Since: 944 | API-Set: unknown
     */
    export function networkSpentTradeImpexpWarehouseProperty(): void {
        Citizen.invokeNative('0x2FAB6614CE22E196', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DD3F33A5D55EA6F | Since: 1290 | API-Set: unknown
     */
    export function networkSpentUpgradeBase(): void {
        NetworkSpentUpgradeBase(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x675D19C6067CAE08 | Since: 877 | API-Set: unknown
     */
    export function networkSpentUpgradeBusinessProperty(): void {
        Citizen.invokeNative('0x675D19C6067CAE08', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA07759E6FDDD7CF | Since: 877 | API-Set: unknown
     */
    export function networkSpentUpgradeClubHouse(): void {
        Citizen.invokeNative('0xFA07759E6FDDD7CF', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x226C284C830D0CA8 | Since: 1493 | API-Set: unknown
     */
    export function networkSpentUpgradeHackerTruck(): void {
        Citizen.invokeNative('0x226C284C830D0CA8', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x615EB504B0788DAF | Since: 1180 | API-Set: unknown
     */
    export function networkSpentUpgradeHangar(): void {
        NetworkSpentUpgradeHangar(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4128464231E3CA0B | Since: 944 | API-Set: unknown
     */
    export function networkSpentUpgradeImpexpWarehouseProperty(): void {
        Citizen.invokeNative('0x4128464231E3CA0B', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DC9B749E7AE282B | Since: 1493 | API-Set: unknown
     */
    export function networkSpentUpgradeNightclubAndWarehouse(): void {
        Citizen.invokeNative('0x1DC9B749E7AE282B', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2AFC2D19B50797F2 | Since: 944 | API-Set: unknown
     */
    export function networkSpentUpgradeOfficeGarage(): void {
        Citizen.invokeNative('0x2AFC2D19B50797F2', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8E243837643D9583 | Since: 757 | API-Set: unknown
     */
    export function networkSpentUpgradeOfficeProperty(): void {
        Citizen.invokeNative('0x8E243837643D9583', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x165E135D6DFA2907 | Since: 1290 | API-Set: unknown
     */
    export function networkSpentUpgradeTiltrotor(): void {
        NetworkSpentUpgradeTiltrotor(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x365E877C61D6988B | Since: 1103 | API-Set: unknown
     */
    export function networkSpentUpgradeTruck(): void {
        NetworkSpentUpgradeTruck(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA95F667A755725DA | Since: 757 | API-Set: unknown
     */
    export function networkSpentUpgradeWarehouseProperty(): void {
        Citizen.invokeNative('0xA95F667A755725DA', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C82D21A77C22D49 | Since: 1103 | API-Set: unknown
     */
    export function networkSpentUpradeBunker(): void {
        NetworkSpentUpgradeBunker(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA75CCF58A60A5FD1 | Since: 944 | API-Set: unknown
     */
    export function networkSpentVehicleExportMods(): void {
        NetworkSpentVehicleExportMods(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD99DB210089617FE | Since: 573 | API-Set: unknown
     */
    export function networkSpentWager(amount: number): void {
        NetworkSpentWager(undefined, undefined, amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x59498BC8B1C8B15C | Since: 2699 | API-Set: unknown
     */
    export function networkYohanSourceGoods(): void {
        NetworkEarnFromBusinessHubSource(undefined, undefined, undefined, undefined);
    }

    /**
     * This isn't a hash collision.
     *
     * Hash: 0x20194D48EAEC9A41 | Since: 323 | API-Set: unknown
     */
    export function processCashGift(): [string, number, number] {
        return ProcessCashGift(undefined);
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x6FCF8DDEA146C45B | Since: 323 | API-Set: unknown
     */
    export function wasVcWithdrawalSuccessful(): boolean {
        return Citizen.invokeNative('0x6FCF8DDEA146C45B', undefined);
    }

    /**
     * Does nothing and always returns 0.
     *
     * Hash: 0xF70EFA14FE091429 | Since: 323 | API-Set: unknown
     */
    export function withdrawVc(amount: number): number {
        return WithdrawVc(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE03B9F95556E48E9 | Since: 3095 | API-Set: unknown
     */
    export function networkClearTransactionTelemetryNonce(): void {
        Citizen.invokeNative('0xE03B9F95556E48E9');
    }

    /**
     * Used for SERVICE_EARN_AVENGER_OPERATIONS & SERVICE_EARN_AVENGER_OPS_BONUS
     *
     * Hash: 0x55F006B9D4A46C1D | Since: 2944 | API-Set: unknown
     */
    export function networkEarnAvenger(amount: number): void {
        Citizen.invokeNative('0x55F006B9D4A46C1D', amount, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1A8165767AD2D23 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnAwardAcidLab(): void {
        Citizen.invokeNative('0xD1A8165767AD2D23', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC30650FA74A19D02 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnAwardDailyStash(): void {
        Citizen.invokeNative('0xC30650FA74A19D02', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD01EBAEA1F905EF6 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnAwardDeadDrop(): void {
        Citizen.invokeNative('0xD01EBAEA1F905EF6', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDDF047577F1A02A7 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnAwardJuggaloMission(): void {
        Citizen.invokeNative('0xDDF047577F1A02A7', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEAFBB1B98B7EF55 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnAwardRandomEvent(): void {
        Citizen.invokeNative('0xBEAFBB1B98B7EF55', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA914768AD35CD3A5 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnAwardTaxi(): void {
        Citizen.invokeNative('0xA914768AD35CD3A5', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDCEF983C24191997 | Since: 2944 | API-Set: unknown
     */
    export function networkEarnBonusObjective(amount: number): void {
        Citizen.invokeNative('0xDCEF983C24191997', amount, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCABC9874AFA70D6D | Since: 2802 | API-Set: unknown
     */
    export function networkEarnDailyStashHouseCompleted(): void {
        Citizen.invokeNative('0xCABC9874AFA70D6D', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C0C6BD0F94CE391 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnDailyStashHouseParticipation(): void {
        Citizen.invokeNative('0x9C0C6BD0F94CE391', undefined, undefined);
    }

    /**
     * JUGGALO_PHONE_MISSION...
     *
     * Hash: 0xCE4452AE85F5E252 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnFooliganJob(): void {
        Citizen.invokeNative('0xCE4452AE85F5E252', undefined, undefined);
    }

    /**
     * JUGGALO_PHONE_MISSION_PARTICIPATION...
     *
     * Hash: 0xC376B92D0E060970 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnFooliganJobParticipation(): void {
        Citizen.invokeNative('0xC376B92D0E060970', undefined, undefined);
    }

    /**
     * _NETWORK_EARN_G*
     *
     * Hash: 0xBF7B5BB7ED890380 | Since: 3095 | API-Set: unknown
     */
    export function networkEarnGeneric(amount: number, earn: number | string): any {
        if (typeof earn === 'string') earn = misc.getHashKey(earn)
        return Citizen.invokeNative('0xBF7B5BB7ED890380', amount, earn, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE01D10BA8CD53621 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnJuggaloStoryMission(): void {
        Citizen.invokeNative('0xE01D10BA8CD53621', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x40FF6CCCC476185C | Since: 2802 | API-Set: unknown
     */
    export function networkEarnJuggaloStoryMissionParticipation(): void {
        Citizen.invokeNative('0x40FF6CCCC476185C', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF8332B06F0EECC9C | Since: 2944 | API-Set: unknown
     */
    export function networkEarnProgressHub(): void {
        Citizen.invokeNative('0xF8332B06F0EECC9C', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x79B656937DF6DF5D | Since: 2802 | API-Set: unknown
     */
    export function networkEarnSellAcid(): void {
        Citizen.invokeNative('0x79B656937DF6DF5D', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCA3EF9B09A8D76B4 | Since: 2802 | API-Set: unknown
     */
    export function networkEarnSellParticipationAcidLab(): void {
        Citizen.invokeNative('0xCA3EF9B09A8D76B4', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3942D59E8A7F70D | Since: 2802 | API-Set: unknown
     */
    export function networkEarnSetupParticipationAcidLab(): void {
        Citizen.invokeNative('0xE3942D59E8A7F70D', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEA273D5F8A9661A | Since: 2944 | API-Set: unknown
     */
    export function networkEarnSmugglerOps(): void {
        Citizen.invokeNative('0xDEA273D5F8A9661A', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x136F11B5DF1B304D | Since: 2802 | API-Set: unknown
     */
    export function networkEarnSourceParticipationAcidLab(): void {
        Citizen.invokeNative('0x136F11B5DF1B304D', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA81017EE1324FDFE | Since: 2802 | API-Set: unknown
     */
    export function networkEarnStreetDealer(): void {
        Citizen.invokeNative('0xA81017EE1324FDFE', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x991E1588FAD9019D | Since: 2802 | API-Set: unknown
     */
    export function networkEarnTaxiJob(): void {
        Citizen.invokeNative('0x991E1588FAD9019D', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1E26A7924327152 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendBuyAcidLab(): void {
        Citizen.invokeNative('0xF1E26A7924327152', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA2ED36DCF0FCA413 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendBuyMfgarage(): void {
        Citizen.invokeNative('0xA2ED36DCF0FCA413', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB48185C0CA67B16B | Since: 2802 | API-Set: unknown
     */
    export function networkSpendBuySupplies(): void {
        Citizen.invokeNative('0xB48185C0CA67B16B', 0, false, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x842B1C5AF61ACDE9 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendRenameAcidLab(): void {
        Citizen.invokeNative('0x842B1C5AF61ACDE9', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x446798F7495DD7D8 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendRenameAcidProduct(): void {
        Citizen.invokeNative('0x446798F7495DD7D8', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7D541C9ACD63133 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendUpgradeAcidLabArmor(): void {
        Citizen.invokeNative('0xA7D541C9ACD63133', 0, false, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x110EE9D486C23126 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendUpgradeAcidLabEquipment(): void {
        Citizen.invokeNative('0x110EE9D486C23126', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B99AB08C92C54E4 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendUpgradeAcidLabMines(): void {
        Citizen.invokeNative('0x4B99AB08C92C54E4', 0, false, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2940558E05BCC2EC | Since: 2802 | API-Set: unknown
     */
    export function networkSpendUpgradeAcidLabScoop(): void {
        Citizen.invokeNative('0x2940558E05BCC2EC', 0, false, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF8F346DDDC66643 | Since: 2802 | API-Set: unknown
     */
    export function networkSpendUpgradeMfgarage(): void {
        Citizen.invokeNative('0xCF8F346DDDC66643', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C7E8D6F96C9E948 | Since: 2944 | API-Set: unknown
     */
    export function networkSpentAirFreight(hangarCargoSourcingPrice: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number, warehouseId: number, warehouseSlot: number): void {
        Citizen.invokeNative('0x8C7E8D6F96C9E948', hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2803B027479FB640 | Since: 3095 | API-Set: unknown
     */
    export function networkSpentGeneric(price: number, stat: number | string, spent: number | string): any {
        if (typeof stat === 'string') stat = misc.getHashKey(stat)
        if (typeof spent === 'string') spent = misc.getHashKey(spent)
        return Citizen.invokeNative('0x2803B027479FB640', price, false, false, stat, spent, undefined, undefined);
    }

    /**
     * Hash p3 = MISSILE_JAMMER
     *
     * Hash: 0xD687100F616163F4 | Since: 2944 | API-Set: unknown
     */
    export function networkSpentMissileJammer(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number | string): void {
        if (typeof p3 === 'string') p3 = misc.getHashKey(p3)
        Citizen.invokeNative('0xD687100F616163F4', amount, fromBank, fromBankAndWallet, p3);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED1B407BADA42CEC | Since: 2944 | API-Set: unknown
     */
    export function networkSpentSkipCargoSourceSetup(amount: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number): void {
        Citizen.invokeNative('0xED1B407BADA42CEC', amount, fromBank, fromBankAndWallet, cost);
    }

    /**
     * Hash p3 = STEALTH_MODULE
     *
     * Hash: 0x95CE79A6939C537A | Since: 2944 | API-Set: unknown
     */
    export function networkSpentStealthModule(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number | string): void {
        if (typeof p3 === 'string') p3 = misc.getHashKey(p3)
        Citizen.invokeNative('0x95CE79A6939C537A', amount, fromBank, fromBankAndWallet, p3);
    }

}


export namespace netshopping {
    /**
     * No comment provided
     *
     * Hash: 0xF30980718C8ED876 | Since: 323 | API-Set: unknown
     */
    export function netGameserverBasketAddItem(quantity: number): [boolean, any] {
        return NetGameserverBasketAddItem(quantity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE1A0450ED46A7812 | Since: 323 | API-Set: unknown
     */
    export function netGameserverBasketApplyServerData(): [boolean, any] {
        return NetGameserverBasketApplyServerData(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA336E7F40C0A0D0 | Since: 372 | API-Set: unknown
     */
    export function netGameserverBasketEnd(): boolean {
        return NetGameserverBasketDelete();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA65568121DF2EA26 | Since: 323 | API-Set: unknown
     */
    export function netGameserverBasketIsActive(): boolean {
        return NetGameserverBasketEnd();
    }

    /**
     * No comment provided
     *
     * Hash: 0x27F76CC6C55AD30E | Since: 323 | API-Set: unknown
     */
    export function netGameserverBasketIsFull(): boolean {
        return NetGameserverBasketIsFull();
    }

    /**
     * No comment provided
     *
     * Hash: 0x279F08B1A4B29B7E | Since: 323 | API-Set: unknown
     */
    export function netGameserverBasketStart(categoryHash: number | string, actionHash: number | string, flags: number): [boolean, number] {
        if (typeof categoryHash === 'string') categoryHash = misc.getHashKey(categoryHash)
        if (typeof actionHash === 'string') actionHash = misc.getHashKey(actionHash)
        return NetGameserverBasketStart(categoryHash, actionHash, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C5FD37B5499582E | Since: 323 | API-Set: unknown
     */
    export function netGameserverBeginService(categoryHash: number | string, itemHash: number | string, actionTypeHash: number | string, value: number, flags: number): [boolean, number] {
        if (typeof categoryHash === 'string') categoryHash = misc.getHashKey(categoryHash)
        if (typeof itemHash === 'string') itemHash = misc.getHashKey(itemHash)
        if (typeof actionTypeHash === 'string') actionTypeHash = misc.getHashKey(actionTypeHash)
        return NetGameserverBeginService(categoryHash, itemHash, actionTypeHash, value, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3C4487461E9B0DCB | Since: 323 | API-Set: unknown
     */
    export function netGameserverCatalogIsValid(): boolean {
        return NetGameserverCatalogIsReady();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD4D7EAF8A30F637 | Since: 323 | API-Set: unknown
     */
    export function netGameserverCatalogItemIsValid(name: string): boolean {
        return NetGameserverCatalogItemExists(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x247F0F73A182EA0B | Since: 323 | API-Set: unknown
     */
    export function netGameserverCatalogItemKeyIsValid(hash: number | string): boolean {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        return NetGameserverCatalogItemExistsHash(hash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4B64CD6D18474126 | Since: 3570 | API-Set: unknown
     */
    export function netGameserverCheckoutPending(transactionId: number): boolean {
        return Citizen.invokeNative('0x4B64CD6D18474126', transactionId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x39BE7CEA8D9CC8E6 | Since: 323 | API-Set: unknown
     */
    export function netGameserverCheckoutStart(transactionId: number): boolean {
        return NetGameserverCheckoutStart(transactionId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x74A0FD0688F1EE45 | Since: 323 | API-Set: unknown
     */
    export function netGameserverClearSession(): boolean {
        return Citizen.invokeNative('0x74A0FD0688F1EE45', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x51F1A8E48C3D2F6D | Since: 323 | API-Set: unknown
     */
    export function netGameserverDeleteCharacter(slot: number, transfer: boolean, reason: number | string): boolean {
        if (typeof reason === 'string') reason = misc.getHashKey(reason)
        return NetGameserverDeleteCharacterSlot(slot, transfer, reason);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A6D923DFFC9BD89 | Since: 323 | API-Set: unknown
     */
    export function netGameserverDeleteCharacterGetStatus(): number {
        return NetGameserverDeleteCharacterSlotGetStatus();
    }

    /**
     * No comment provided
     *
     * Hash: 0x112CEF1615A1139F | Since: 323 | API-Set: unknown
     */
    export function netGameserverDeleteSetTelemetryNonceSeed(): boolean {
        return NetGameserverDeleteSetTelemetryNonceSeed();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE2A99A9B524BEFFF | Since: 323 | API-Set: unknown
     */
    export function netGameserverEndService(transactionId: number): boolean {
        return NetGameserverEndService(transactionId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x85F6C9ABA1DE2BCF | Since: 323 | API-Set: unknown
     */
    export function netGameserverGetCatalogCloudCrc(): number {
        return Citizen.invokeNative('0x85F6C9ABA1DE2BCF');
    }

    /**
     * bool is always true in game scripts
     *
     * Hash: 0xC27009422FCCA88D | Since: 323 | API-Set: unknown
     */
    export function netGameserverGetPrice(itemHash: number | string, categoryHash: number | string): number {
        if (typeof itemHash === 'string') itemHash = misc.getHashKey(itemHash)
        if (typeof categoryHash === 'string') categoryHash = misc.getHashKey(categoryHash)
        return NetGameserverGetPrice(itemHash, categoryHash, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x897433D292B44130 | Since: 323 | API-Set: unknown
     */
    export function netGameserverGetSessionStateAndStatus(): [boolean, number, boolean] {
        return NetGameserverGetTransactionManagerData();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3E5A7C64CA2C6ED | Since: 323 | API-Set: unknown
     */
    export function netGameserverInitSession(): boolean {
        return Citizen.invokeNative('0xE3E5A7C64CA2C6ED');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B949A1E6AEC8F6A | Since: 323 | API-Set: unknown
     */
    export function netGameserverIsCatalogCurrent(): boolean {
        return NetGameserverIsCatalogValid();
    }

    /**
     * No comment provided
     *
     * Hash: 0x810E8431C0614BF9 | Since: 323 | API-Set: unknown
     */
    export function netGameserverIsSessionRefreshPending(): boolean {
        return NetGameserverIsSessionRefreshPending();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB24F0944DA203D9E | Since: 323 | API-Set: unknown
     */
    export function netGameserverIsSessionValid(charSlot: number): boolean {
        return NetGameserverIsSessionValid(charSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x357B152EF96C30B6 | Since: 323 | API-Set: unknown
     */
    export function netGameserverRefreshServerCatalog(): boolean {
        return Citizen.invokeNative('0x357B152EF96C30B6');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCF38DAFBB49EDE5E | Since: 323 | API-Set: unknown
     */
    export function netGameserverRetrieveCatalogRefreshStatus(): [boolean, number] {
        return NetGameserverGetCatalogState();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0395CB47B022E62C | Since: 323 | API-Set: unknown
     */
    export function netGameserverRetrieveInitSessionStatus(): [boolean, number] {
        return Citizen.invokeNative('0x0395CB47B022E62C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC13C38E47EA5DF31 | Since: 323 | API-Set: unknown
     */
    export function netGameserverRetrieveSessionErrorCode(): [boolean, number] {
        return Citizen.invokeNative('0xC13C38E47EA5DF31');
    }

    /**
     * No comment provided
     *
     * Hash: 0x170910093218C8B9 | Since: 323 | API-Set: unknown
     */
    export function netGameserverRetrieveStartSessionStatus(): [boolean, number] {
        return Citizen.invokeNative('0x170910093218C8B9');
    }

    /**
     * No comment provided
     *
     * Hash: 0x2F41D51BA3BCD1F1 | Since: 323 | API-Set: unknown
     */
    export function netGameserverSessionApplyReceivedData(charSlot: number): boolean {
        return NetGameserverSessionApplyReceivedData(charSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9507D4271988E1AE | Since: 323 | API-Set: unknown
     */
    export function netGameserverSetTelemetryNonceSeed(): boolean {
        return NetGameserverSetTelemetryNonceSeed(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA135AC892A58FC07 | Since: 323 | API-Set: unknown
     */
    export function netGameserverStartSession(charSlot: number): boolean {
        return NetGameserverStartSession(charSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x72EB7BA9B69BF6AB | Since: 323 | API-Set: unknown
     */
    export function netGameserverStartSessionPending(): boolean {
        return Citizen.invokeNative('0x72EB7BA9B69BF6AB');
    }

    /**
     * Note: only one of the arguments can be set to true at a time
     *
     * Hash: 0x35A1B3E1D1315CFA | Since: 323 | API-Set: unknown
     */
    export function netGameserverStartSessionRestart(inventory: boolean, playerbalance: boolean): boolean {
        return NetGameserverGetBalance(inventory, playerbalance);
    }

    /**
     * No comment provided
     *
     * Hash: 0x613F125BA3BD2EB9 | Since: 372 | API-Set: unknown
     */
    export function netGameserverTransactionInProgress(): boolean {
        return Citizen.invokeNative('0x613F125BA3BD2EB9');
    }

    /**
     * No comment provided
     *
     * Hash: 0xD47A2C1BA117471D | Since: 323 | API-Set: unknown
     */
    export function netGameserverTransferBankToWallet(charSlot: number, amount: number): boolean {
        return NetGameserverTransferBankToWallet(charSlot, amount);
    }

    /**
     * Same as 0x350AA5EBC03D3BD2
     *
     * Hash: 0x23789E777D14CE44 | Since: 323 | API-Set: unknown
     */
    export function netGameserverTransferBankToWalletGetStatus(): number {
        return NetGameserverTransferCashGetStatus();
    }

    /**
     * Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
     *
     * Hash: 0x498C1E05CE5F7877 | Since: 323 | API-Set: unknown
     */
    export function netGameserverTransferCashSetTelemetryNonceSeed(): boolean {
        return NetGameserverTransferCashSetTelemetryNonceSeed();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC2F7FE5309181C7D | Since: 323 | API-Set: unknown
     */
    export function netGameserverTransferWalletToBank(charSlot: number, amount: number): boolean {
        return NetGameserverTransferWalletToBank(charSlot, amount);
    }

    /**
     * Same as 0x23789E777D14CE44
     *
     * Hash: 0x350AA5EBC03D3BD2 | Since: 323 | API-Set: unknown
     */
    export function netGameserverTransferWalletToBankGetStatus(): number {
        return NetGameserverTransferCashGetStatus2();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D2708796355B20B | Since: 1290 | API-Set: unknown
     */
    export function netGameserverUseServerTransactions(): boolean {
        return NetGameserverUseServerTransactions();
    }

}


export namespace pathfind {
    /**
     * No comment provided
     *
     * Hash: 0xFCD5C8E06E502F5A | Since: 323 | API-Set: unknown
     */
    export function addNavmeshBlockingObject(): number {
        return AddNavmeshBlockingObject(0, 0, 0, 0, 0, 0, 0, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x387EAD7EE42F6685 | Since: 323 | API-Set: unknown
     */
    export function addNavmeshRequiredRegion(x: number, y: number, radius: number): void {
        AddNavmeshRequiredRegion(x, y, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA76052DDA9BFC3E | Since: 323 | API-Set: unknown
     */
    export function adjustAmbientPedSpawnDensitiesThisFrame(): void {
        Citizen.invokeNative('0xAA76052DDA9BFC3E', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8415D95B194A3AEA | Since: 323 | API-Set: unknown
     */
    export function areAllNavmeshRegionsLoaded(): boolean {
        return AreAllNavmeshRegionsLoaded();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF7B79A50B905A30D | Since: 323 | API-Set: unknown
     */
    export function areNodesLoadedForArea(x1: number, y1: number, x2: number, y2: number): boolean {
        return AreNodesLoadedForArea(x1, y1, x2, y2);
    }

    /**
     * Calculates the travel distance between a set of points.
     *
     * Doesn't seem to correlate with distance on gps sometimes.
     * This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
     *
     * Hash: 0xADD95C7005C4A197 | Since: 323 | API-Set: unknown
     */
    export function calculateTravelDistanceBetweenPoints(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return CalculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
    }

    /**
     * Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
     *
     * Hash: 0x2801D0012266DF07 | Since: 323 | API-Set: unknown
     */
    export function clearGpsDisabledZoneAtIndex(index: number): void {
        ClearGpsDisabledZoneAtIndex(index);
    }

    /**
     * Set toggle true to disable navmesh.
     * Set toggle false to enable navmesh.
     *
     * Hash: 0x4C8872D8CDBE1B8B | Since: 323 | API-Set: unknown
     */
    export function disableNavmeshInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean): void {
        DisableNavmeshInArea(x1, y1, z1, x2, y2, z2, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EAEB0DB4B132399 | Since: 323 | API-Set: unknown
     */
    export function doesNavmeshBlockingObjectExist(): boolean {
        return DoesNavmeshBlockingObjectExist(undefined);
    }

    /**
     * p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
     *
     * distToNxJunction seems to be the distance in metres * 10.0f
     *
     * direction:
     * 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
     * 1 = Route is being calculated or the player is going in the wrong direction
     * 2 = Please Proceed the Highlighted Route
     * 3 = In (distToNxJunction) Turn Left
     * 4 = In (distToNxJunction) Turn Right
     * 5 = In (distToNxJunction) Keep Straight
     * 6 = In (distToNxJunction) Turn Sharply To The Left
     * 7 = In (distToNxJunction) Turn Sharply To The Right
     * 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
     *
     * return value set to 0 always
     *
     * Hash: 0xF90125F1F79ECDF8 | Since: 323 | API-Set: unknown
     */
    export function generateDirectionsToCoord(pos: Vector3): [number, number, number, number] {
        return GenerateDirectionsToCoord(pos.x, pos.y, pos.z, false);
    }

    /**
     * Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
     *
     * Hash: 0x3599D741C9AC6310 | Since: 323 | API-Set: unknown
     */
    export function getApproxFloorForArea(x1: number, y1: number, x2: number, y2: number): number {
        return GetHeightmapBottomZForArea(x1, y1, x2, y2);
    }

    /**
     * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
     *
     * Hash: 0x336511A34F2E5185 | Since: 323 | API-Set: unknown
     */
    export function getApproxFloorForPoint(x: number, y: number): number {
        return GetHeightmapBottomZForPosition(x, y);
    }

    /**
     * Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
     *
     * Hash: 0x8ABE8608576D9CE3 | Since: 323 | API-Set: unknown
     */
    export function getApproxHeightForArea(x1: number, y1: number, x2: number, y2: number): number {
        return GetHeightmapTopZForArea(x1, y1, x2, y2);
    }

    /**
     * Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
     *
     * Hash: 0x29C24BFBED8AB8FB | Since: 323 | API-Set: unknown
     */
    export function getApproxHeightForPoint(x: number, y: number): number {
        return GetHeightmapTopZForPosition(x, y);
    }

    /**
     * Get the closest vehicle node to a given position.
     *
     * Hash: 0x2EABE3B06F58C1BE | Since: 323 | API-Set: unknown
     */
    export function getClosestMajorVehicleNode(pos: Vector3, unknown1: number, unknown2: number): [boolean, Vector3] {
        return GetClosestMajorVehicleNode(pos.x, pos.y, pos.z, unknown1, unknown2);
    }

    /**
     * p1 seems to be always 1.0f in the scripts
     *
     * Hash: 0x132F52BBA570FE92 | Since: 323 | API-Set: unknown
     */
    export function getClosestRoad(pos: Vector3): [boolean, Vector3, Vector3, any, any, number] {
        return GetClosestRoad(pos.x, pos.y, pos.z, 0, 0, false);
    }

    /**
     * https://gtaforums.com/topic/843561-pathfind-node-types
     *
     * Hash: 0x240A18690AE96513 | Since: 323 | API-Set: unknown
     */
    export function getClosestVehicleNode(pos: Vector3, nodeFlags: number): [boolean, Vector3] {
        return GetClosestVehicleNode(pos.x, pos.y, pos.z, nodeFlags, 0, 0);
    }

    /**
     * p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
     *
     * nodeType: 0 = main roads, 1 = any dry path, 3 = water
     * p6 is always 3.0
     * p7 is always 0
     *
     * gtaforums.com/topic/843561-pathfind-node-types
     *
     * Example of usage, moving vehicle to closest path/road:
     * `Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);`
     * Vector3 closestVehicleNodeCoords;
     * float roadHeading;
     * `PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);`
     * `ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);`
     * `ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);`
     * `VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);`
     *
     * ------------------------------------------------------------------
     * C# Example (ins1de) : https://pastebin.com/fxtMWAHD
     *
     * Hash: 0xFF071FB798B803B0 | Since: 323 | API-Set: unknown
     */
    export function getClosestVehicleNodeWithHeading(pos: Vector3, nodeType: number): [boolean, Vector3, number] {
        return GetClosestVehicleNodeWithHeading(pos.x, pos.y, pos.z, nodeType, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x869DAACBBE9FA006 | Since: 323 | API-Set: unknown
     */
    export function getGpsBlipRouteFound(): boolean {
        return GetGpsBlipRouteFound();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBB45C3CF5C8AA85 | Since: 323 | API-Set: unknown
     */
    export function getGpsBlipRouteLength(): number {
        return GetGpsBlipRouteLength();
    }

    /**
     * Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
     *
     * Hash: 0xD3A6A0EF48823A8C | Since: 323 | API-Set: unknown
     */
    export function getNextGpsDisabledZoneIndex(): number {
        return GetNextGpsDisabledZoneIndex();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE50E52416CCF948B | Since: 323 | API-Set: unknown
     */
    export function getNthClosestVehicleNode(pos: Vector3, nthClosest: number, nodeFlags: number, unknown1: number, unknown2: number): [boolean, Vector3] {
        return GetNthClosestVehicleNode(pos.x, pos.y, pos.z, nthClosest, nodeFlags, unknown1, unknown2);
    }

    /**
     * See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
     *
     * p10 always equals 3.0
     * p11 always equals 0
     *
     * Hash: 0x45905BE8654AE067 | Since: 323 | API-Set: unknown
     */
    export function getNthClosestVehicleNodeFavourDirection(pos: Vector3, desiredX: number, desiredY: number, desiredZ: number, nthClosest: number, nodeFlags: number): [boolean, Vector3, number] {
        return GetNthClosestVehicleNodeFavourDirection(pos.x, pos.y, pos.z, desiredX, desiredY, desiredZ, nthClosest, nodeFlags, 0, 0);
    }

    /**
     * Returns the id.
     *
     * Hash: 0x22D7275A79FE8215 | Since: 323 | API-Set: unknown
     */
    export function getNthClosestVehicleNodeId(pos: Vector3, nth: number, nodeFlags: number): number {
        return GetNthClosestVehicleNodeId(pos.x, pos.y, pos.z, nth, nodeFlags, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6448050E9C2A7207 | Since: 323 | API-Set: unknown
     */
    export function getNthClosestVehicleNodeIdWithHeading(pos: Vector3, nthClosest: number, nodeFlags: number): [number, Vector3, number] {
        return GetNthClosestVehicleNodeIdWithHeading(pos.x, pos.y, pos.z, nthClosest, nodeFlags, 0, 0);
    }

    /**
     * Get the nth closest vehicle node and its heading.
     *
     * Hash: 0x80CA6A8B6C094CC4 | Since: 323 | API-Set: unknown
     */
    export function getNthClosestVehicleNodeWithHeading(pos: Vector3, nthClosest: number, nodeFlags: number, unknown3: number, unknown4: number): [boolean, Vector3, number, number] {
        return GetNthClosestVehicleNodeWithHeading(pos.x, pos.y, pos.z, nthClosest, nodeFlags, unknown3, unknown4);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01708E8DD3FF8C65 | Since: 323 | API-Set: unknown
     */
    export function getNumNavmeshesExistingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number {
        return GetNumNavmeshesExistingInArea(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x16F46FB18C8009E4 | Since: 323 | API-Set: unknown
     */
    export function getPositionBySideOfRoad(pos: Vector3): [boolean, Vector3] {
        return GetPointOnRoadSide(pos.x, pos.y, pos.z, 0);
    }

    /**
     * p3 can be 0, 1 or 2.
     *
     * Hash: 0xF3162836C28F9DA5 | Since: 505 | API-Set: unknown
     */
    export function getPosAlongGpsTypeRoute(): [boolean, Vector3] {
        return GetPosAlongGpsTypeRoute(false, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x93E0DB8440B73A7D | Since: 323 | API-Set: unknown
     */
    export function getRandomVehicleNode(pos: Vector3, radius: number): [boolean, Vector3, number] {
        return GetRandomVehicleNode(pos.x, pos.y, pos.z, radius, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0F8A7517A273C05 | Since: 463 | API-Set: unknown
     */
    export function getRoadBoundaryUsingHeading(pos: Vector3, heading: number): [boolean, Vector3] {
        return GetRoadBoundaryUsingHeading(pos.x, pos.y, pos.z, heading);
    }

    /**
     * Flags are:
     * 1 = 1 = B02_IsFootpath
     * 2 = 4 = !B15_InteractionUnk
     * 4 = 0x20 = !B14_IsInterior
     * 8 = 0x40 = !B07_IsWater
     * 16 = 0x200 = B17_IsFlatGround
     * When onGround == true outPosition is a position located on the nearest pavement.
     *
     * When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
     *
     * In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
     *
     * 16 works for me, 0 crashed the script.
     *
     * Hash: 0xB61C8E878A4199CA | Since: 323 | API-Set: unknown
     */
    export function getSafeCoordForPed(pos: Vector3, onGround: boolean, flags: number): [boolean, Vector3] {
        return GetSafeCoordForPed(pos.x, pos.y, pos.z, onGround, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x809549AFC7AEC597 | Since: 2944 | API-Set: unknown
     */
    export function getSpawnCoordsForVehicleNode(nodeAddress: number, towardsCoorsX: number, towardsCoorsY: number, towardsCoorsZ: number): [Vector3, number] {
        return Citizen.invokeNative('0x809549AFC7AEC597', nodeAddress, towardsCoorsX, towardsCoorsY, towardsCoorsZ);
    }

    /**
     * Determines the name of the street which is the closest to the given coordinates.
     *
     * x,y,z - the coordinates of the street
     * streetName - returns a hash to the name of the street the coords are on
     * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
     *
     * `Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.`
     *
     * Hash: 0x2EB41072B4C1E4C0 | Since: 323 | API-Set: unknown
     */
    export function getStreetNameAtCoord(pos: Vector3): [number, number] {
        return GetStreetNameAtCoord(pos.x, pos.y, pos.z);
    }

    /**
     * Returns false for nodes that aren't used for GPS routes.
     * Example:
     * Nodes in Fort Zancudo and LSIA are false
     *
     * Hash: 0xA2AE5C478B96E3B6 | Since: 323 | API-Set: unknown
     */
    export function getVehicleNodeIsGpsAllowed(nodeID: number): boolean {
        return GetVehicleNodeIsGpsAllowed(nodeID);
    }

    /**
     * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
     * Normal roads where plenty of Peds spawn will return false
     *
     * Hash: 0x4F5070AA58F69279 | Since: 323 | API-Set: unknown
     */
    export function getVehicleNodeIsSwitchedOff(nodeID: number): boolean {
        return GetVehicleNodeIsSwitchedOff(nodeID);
    }

    /**
     * Calling this with an invalid node id, will crash the game.
     * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
     * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
     *
     * Hash: 0x703123E5E7D429C2 | Since: 323 | API-Set: unknown
     */
    export function getVehicleNodePosition(nodeId: number): Vector3 {
        return GetVehicleNodePosition(nodeId);
    }

    /**
     * Gets the density and flags of the closest node to the specified position.
     * Density is a value between 0 and 15, indicating how busy the road is.
     * Flags is a bit field.
     *
     * Hash: 0x0568566ACBB5DEDC | Since: 323 | API-Set: unknown
     */
    export function getVehicleNodeProperties(pos: Vector3): [boolean, number, number] {
        return GetVehicleNodeProperties(pos.x, pos.y, pos.z);
    }

    /**
     * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
     *
     * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
     *
     * Hash: 0xF813C7E63F9062A5 | Since: 323 | API-Set: unknown
     */
    export function isNavmeshLoadedInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean {
        return IsNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x705A844002B39DC0 | Since: 944 | API-Set: unknown
     */
    export function isNavmeshRequiredRegionInUse(): boolean {
        return IsNavmeshRequiredRegionOwnedByAnyThread();
    }

    /**
     * Gets a value indicating whether the specified position is on a road.
     * The vehicle parameter is not implemented (ignored).
     *
     * Hash: 0x125BF4ABFC536B09 | Since: 323 | API-Set: unknown
     */
    export function isPointOnRoad(pos: Vector3, vehicle: number | IVehicle): boolean {
        return IsPointOnRoad(pos.x, pos.y, pos.z, vehicle);
    }

    /**
     * Returns true if the id is non zero.
     *
     * Hash: 0x1EAF30FCFBF5AF74 | Since: 323 | API-Set: unknown
     */
    export function isVehicleNodeIdValid(vehicleNodeId: number): boolean {
        return IsVehicleNodeIdValid(vehicleNodeId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC2AB6BFE34E92F8B | Since: 2802 | API-Set: unknown
     */
    export function loadAllPathNodes(_set: boolean): boolean {
        return Citizen.invokeNative('0xC2AB6BFE34E92F8B', _set);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46399A7895957C0E | Since: 323 | API-Set: unknown
     */
    export function removeNavmeshBlockingObject(): void {
        RemoveNavmeshBlockingObject(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x916F0A3CDEC3445E | Since: 323 | API-Set: unknown
     */
    export function removeNavmeshRequiredRegions(): void {
        RemoveNavmeshRequiredRegions();
    }

    /**
     * Used internally for long range tasks
     *
     * Hash: 0x07FB139B592FA687 | Since: 323 | API-Set: unknown
     */
    export function requestPathNodesInAreaThisFrame(x1: number, y1: number, x2: number, y2: number): boolean {
        return RequestPathsPreferAccurateBoundingstruct(x1, y1, x2, y2);
    }

    /**
     * Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
     *
     * Hash: 0xF74B1FFA4A15FBEA | Since: 2189 | API-Set: unknown
     */
    export function setAllowStreamHeistIslandNodes(_type: number): void {
        SetAiGlobalPathNodesType(_type);
    }

    /**
     * No comment provided
     *
     * Hash: 0x228E5C6AD4D74BFD | Since: 323 | API-Set: unknown
     */
    export function setAllowStreamPrologueNodes(toggle: boolean): void {
        SetAllPathsCacheBoundingstruct(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B919E1FB47CC4E0 | Since: 323 | API-Set: unknown
     */
    export function setAmbientPedRangeMultiplierThisFrame(multiplier: number): void {
        SetAmbientPedRangeMultiplierThisFrame(multiplier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC20483CD3DD5201 | Since: 323 | API-Set: unknown
     */
    export function setGpsDisabledZone(x1: number, y1: number, z1: number, x2: number, y2: number, z3: number): void {
        SetGpsDisabledZone(x1, y1, z1, x2, y2, z3);
    }

    /**
     * Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
     * You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
     *
     * <strong>Setting a waypoint at the same coordinate:</strong>
     * Disabled Zone: https://i.imgur.com/P9VUuxM.png
     * Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
     *
     * Hash: 0xD0BC1C6FB18EE154 | Since: 323 | API-Set: unknown
     */
    export function setGpsDisabledZoneAtIndex(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, index: number): void {
        SetGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x72751156E7678833 | Since: 323 | API-Set: unknown
     */
    export function setIgnoreNoGpsFlag(toggle: boolean): void {
        SetIgnoreNoGpsFlag(toggle);
    }

    /**
     * See: SET_BLIP_ROUTE
     *
     * Hash: 0x1FC289A0C3FF470F | Since: 323 | API-Set: unknown
     */
    export function setIgnoreNoGpsFlagUntilFirstNormalNode(toggle: boolean): void {
        SetIgnoreSecondaryRouteNodes(toggle);
    }

    /**
     * p6 is always 0
     *
     * Hash: 0xE04B48F2CC926253 | Since: 323 | API-Set: unknown
     */
    export function setPedPathsBackToOriginal(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
        SetPedPathsBackToOriginal(x1, y1, z1, x2, y2, z2, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34F060F4BF92E018 | Since: 323 | API-Set: unknown
     */
    export function setPedPathsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void {
        SetPedPathsInArea(x1, y1, z1, x2, y2, z2, false, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1EE7063B80FFC77C | Since: 323 | API-Set: unknown
     */
    export function setRoadsBackToOriginal(): void {
        SetRoadsBackToOriginal(0, 0, 0, 0, 0, 0, undefined);
    }

    /**
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     * bool p7 - always 1
     *
     * Hash: 0x0027501B9F3B407E | Since: 323 | API-Set: unknown
     */
    export function setRoadsBackToOriginalInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): void {
        SetRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width, undefined);
    }

    /**
     * unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x1A5AA1208AF5DB59 | Since: 323 | API-Set: unknown
     */
    export function setRoadsInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, unknown1: boolean, unknown2: boolean, unknown3: boolean): void {
        SetRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3);
    }

    /**
     * When nodeEnabled is set to false, all nodes in the area get disabled.
     * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
     * If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
     *
     * Hash: 0xBF1A602B5BA52FEE | Since: 323 | API-Set: unknown
     */
    export function setRoadsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, nodeEnabled: boolean, unknown2: boolean): void {
        SetRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x109E99373F290687 | Since: 323 | API-Set: unknown
     */
    export function updateNavmeshBlockingObject(): void {
        UpdateNavmeshBlockingObject(undefined, 0, 0, 0, 0, 0, 0, 0, undefined);
    }

}


export namespace recording {
    /**
     * Stops recording and discards the recorded clip.
     *
     * Hash: 0x88BB3507ED41A240 | Since: 323 | API-Set: unknown
     */
    export function cancelReplay(): void {
        StopRecordingAndDiscardClip();
    }

    /**
     * No comment provided
     *
     * Hash: 0x4282E08174868BE3 | Since: 323 | API-Set: unknown
     */
    export function isReplayAvailable(): boolean {
        return Citizen.invokeNative('0x4282E08174868BE3');
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF4B952F7D381B95 | Since: 323 | API-Set: unknown
     */
    export function isReplayInitialized(): boolean {
        return Citizen.invokeNative('0xDF4B952F7D381B95');
    }

    /**
     * Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
     *
     * mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
     * retn
     *
     * Hash: 0x1897CA71995A90B4 | Since: 323 | API-Set: unknown
     */
    export function isReplay(): boolean {
        return IsRecording();
    }

    /**
     * No comment provided
     *
     * Hash: 0x33D47E85B476ABCD | Since: 323 | API-Set: unknown
     */
    export function isReplayRecordSpaceAvailable(): boolean {
        return Citizen.invokeNative('0x33D47E85B476ABCD', false);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x66972397E0757E7A | Since: 323 | API-Set: unknown
     */
    export function recordGreatestMoment(): void {
        Citizen.invokeNative('0x66972397E0757E7A', 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x13B350B8AD0EEE10 | Since: 323 | API-Set: unknown
     */
    export function replayCancelEvent(): void {
        Citizen.invokeNative('0x13B350B8AD0EEE10');
    }

    /**
     * -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
     *
     * first one seems to be a string of a mission name, second one seems to be a bool/toggle
     *
     * p1 was always 0.
     *
     *
     * Hash: 0x208784099002BC30 | Since: 323 | API-Set: unknown
     */
    export function replayCheckForEventThisFrame(missionNameLabel: string): void {
        Citizen.invokeNative('0x208784099002BC30', missionNameLabel, undefined);
    }

    /**
     * This will disable the ability to make camera changes in R* Editor.
     *
     * Hash: 0xAF66DCEE6609B148 | Since: 323 | API-Set: unknown
     */
    export function replayDisableCameraMovementThisFrame(): void {
        DisableRockstarEditorCameraChanges();
    }

    /**
     * This disable the recording feature and has to be called every frame.
     *
     * Hash: 0xEB2D525B57F42B40 | Since: 323 | API-Set: unknown
     */
    export function replayPreventThisFrame(): void {
        StopRecordingThisFrame();
    }

    /**
     * No comment provided
     *
     * Hash: 0x293220DA1B46CEBC | Since: 323 | API-Set: unknown
     */
    export function replayRecordBackForTime(): void {
        Citizen.invokeNative('0x293220DA1B46CEBC', 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF854439EFBB3B583 | Since: 323 | API-Set: unknown
     */
    export function replayResetEventInfo(): void {
        Citizen.invokeNative('0xF854439EFBB3B583');
    }

    /**
     * No comment provided
     *
     * Hash: 0x48621C9FCA3EBD28 | Since: 323 | API-Set: unknown
     */
    export function replayStartEvent(): void {
        Citizen.invokeNative('0x48621C9FCA3EBD28', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x81CBAE94390F9F89 | Since: 323 | API-Set: unknown
     */
    export function replayStopEvent(): void {
        Citizen.invokeNative('0x81CBAE94390F9F89');
    }

    /**
     * No comment provided
     *
     * Hash: 0x644546EC5287471B | Since: 323 | API-Set: unknown
     */
    export function saveReplay(): boolean {
        return SaveRecordingClip();
    }

    /**
     * Starts recording a replay.
     * If mode is 0, turns on action replay.
     * If mode is 1, starts recording.
     * If already recording a replay, does nothing.
     *
     * Hash: 0xC3AC2FFF9612AC81 | Since: 323 | API-Set: unknown
     */
    export function startReplay(mode: number): void {
        StartRecording(mode);
    }

    /**
     * Stops recording and saves the recorded clip.
     *
     * Hash: 0x071A5197D6AFC8B3 | Since: 323 | API-Set: unknown
     */
    export function stopReplay(): void {
        StopRecordingAndSaveClip();
    }

}


export namespace replay {
    /**
     * Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
     *
     * Hash: 0x49DA8145672B2725 | Since: 323 | API-Set: unknown
     */
    export function activateRockstarEditor(): void {
        ActivateRockstarEditor(0);
    }

    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x7E2BD3EF6C205F09 | Since: 323 | API-Set: unknown
     */
    export function registerEffectForEditor(): void {
        Citizen.invokeNative('0x7E2BD3EF6C205F09', undefined, false);
    }

    /**
     * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
     *
     * Hash: 0x3353D13F09307691 | Since: 323 | API-Set: unknown
     */
    export function controlShutdown(): void {
        ResetEditorValues();
    }

    /**
     * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
     *
     * Hash: 0x95AB8B5C992C7B58 | Since: 323 | API-Set: unknown
     */
    export function systemHasRequestedAScriptCleanup(): boolean {
        return IsInteriorRenderingDisabled();
    }

    /**
     * No comment provided
     *
     * Hash: 0xE058175F8EAFE79A | Since: 323 | API-Set: unknown
     */
    export function setSystemPausedForSave(): void {
        Citizen.invokeNative('0xE058175F8EAFE79A', false);
    }

    /**
     * Disables some other rendering (internal)
     *
     * Hash: 0x5AD3932DAEB1E5D3 | Since: 323 | API-Set: unknown
     */
    export function setScriptsHaveCleanedUpForSystem(): void {
        Citizen.invokeNative('0x5AD3932DAEB1E5D3');
    }

}


export namespace savemigration {
    /**
     * No comment provided
     *
     * Hash: 0x84B418E93894AC1C | Since: 2372 | API-Set: unknown
     */
    export function isMpEnabled(): boolean {
        return Citizen.invokeNative('0x84B418E93894AC1C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCE2747EEF1D05FC | Since: 2612 | API-Set: unknown
     */
    export function mpGetAccount(): [boolean, any] {
        return Citizen.invokeNative('0xFCE2747EEF1D05FC', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8CB5999919EA2CA | Since: 2612 | API-Set: unknown
     */
    export function mpGetAccountsStatus(): number {
        return Citizen.invokeNative('0xC8CB5999919EA2CA');
    }

    /**
     * No comment provided
     *
     * Hash: 0x690B76BD2763E068 | Since: 2372 | API-Set: unknown
     */
    export function mpGetStatus(): number {
        return Citizen.invokeNative('0x690B76BD2763E068');
    }

    /**
     * No comment provided
     *
     * Hash: 0x77A16200E18E0C55 | Since: 2612 | API-Set: unknown
     */
    export function mpNumAccounts(): number {
        return Citizen.invokeNative('0x77A16200E18E0C55');
    }

    /**
     * No comment provided
     *
     * Hash: 0x85F41F9225D08C72 | Since: 2612 | API-Set: unknown
     */
    export function mpRequestAccounts(): boolean {
        return Citizen.invokeNative('0x85F41F9225D08C72');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE5E9746A66359F9D | Since: 2372 | API-Set: unknown
     */
    export function mpRequestStatus(): boolean {
        return Citizen.invokeNative('0xE5E9746A66359F9D');
    }

}


export namespace script {
    /**
     * No comment provided
     *
     * Hash: 0x0F6F1EBBC4E1D5E6 | Since: 323 | API-Set: unknown
     */
    export function bgDoesLaunchParamExist(scriptIndex: number): boolean {
        return Citizen.invokeNative('0x0F6F1EBBC4E1D5E6', scriptIndex, undefined);
    }

    /**
     * Deletes the given context from the background scripts context map.
     *
     * Hash: 0xDC2BACD920D0A0DD | Since: 323 | API-Set: unknown
     */
    export function bgEndContext(contextName: string): void {
        BgEndContext(contextName);
    }

    /**
     * Hashed version of BG_END_CONTEXT.
     *
     * Hash: 0x107E5CC7CA942BC1 | Since: 323 | API-Set: unknown
     */
    export function bgEndContextHash(contextHash: number | string): void {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        BgEndContextHash(contextHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x22E21FBCFC88C149 | Since: 323 | API-Set: unknown
     */
    export function bgGetLaunchParamValue(scriptIndex: number): number {
        return Citizen.invokeNative('0x22E21FBCFC88C149', scriptIndex, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x829CD22E043A2577 | Since: 323 | API-Set: unknown
     */
    export function bgGetIdFromNameHash(p0: number | string): number {
        if (typeof p0 === 'string') p0 = misc.getHashKey(p0)
        return Citizen.invokeNative('0x829CD22E043A2577', p0);
    }

    /**
     * Returns true if bit 0 in GtaThread+0x154 is set.
     *
     * Hash: 0x836B62713E0534CA | Since: 323 | API-Set: unknown
     */
    export function bgIsExitflagSet(): boolean {
        return Citizen.invokeNative('0x836B62713E0534CA');
    }

    /**
     * Sets bit 1 in GtaThread+0x154
     *
     * Hash: 0x760910B49D2B98EA | Since: 323 | API-Set: unknown
     */
    export function bgSetExitflagResponse(): void {
        Citizen.invokeNative('0x760910B49D2B98EA');
    }

    /**
     * Inserts the given context into the background scripts context map.
     *
     * Hash: 0x9D5A25BADB742ACD | Since: 323 | API-Set: unknown
     */
    export function bgStartContext(contextName: string): void {
        BgStartContext(contextName);
    }

    /**
     * Hashed version of BG_START_CONTEXT.
     *
     * Hash: 0x75B18E49607874C7 | Since: 323 | API-Set: unknown
     */
    export function bgStartContextHash(contextHash: number | string): void {
        if (typeof contextHash === 'string') contextHash = misc.getHashKey(contextHash)
        BgStartContextHash(contextHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1577667C3708F9B | Since: 323 | API-Set: unknown
     */
    export function commitToLoadingscreenSelction(): void {
        LockLoadingScreenButtons();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFC04745FBE67C19A | Since: 323 | API-Set: unknown
     */
    export function doesExist(scriptName: string): boolean {
        return DoesScriptExist(scriptName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF86AA3C56BA31381 | Since: 323 | API-Set: unknown
     */
    export function doesWithNameHashExist(scriptHash: number | string): boolean {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        return DoesScriptWithNameHashExist(scriptHash);
    }

    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Hash: 0xD8F66A3A60C62153 | Since: 323 | API-Set: unknown
     */
    export function getEventAtIndex(eventGroup: number, eventIndex: number): number {
        return GetEventAtIndex(eventGroup, eventIndex);
    }

    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
     *
     * Hash: 0x2902843FCD2B2D79 | Since: 323 | API-Set: unknown
     */
    export function getEventData(eventGroup: number, eventIndex: number, eventDataSize: number): [boolean, any] {
        return GetEventData(eventGroup, eventIndex, eventDataSize);
    }

    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Hash: 0x936E6168A9BCEDB5 | Since: 323 | API-Set: unknown
     */
    export function getEventExists(eventGroup: number, eventIndex: number): boolean {
        return GetEventExists(eventGroup, eventIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A1C8B1738FFE87E | Since: 323 | API-Set: unknown
     */
    export function getHashOfThisName(): number {
        return GetHashOfThisScriptName();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC30338E8088E2E21 | Since: 323 | API-Set: unknown
     */
    export function getIdOfThisThread(): number {
        return GetIdOfThisThread();
    }

    /**
     * No comment provided
     *
     * Hash: 0x05A42BA9FC8DA96B | Since: 323 | API-Set: unknown
     */
    export function getNameOfWithThisId(threadId: number): string {
        return GetNameOfThread(threadId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x18C1270EA7F199BC | Since: 323 | API-Set: unknown
     */
    export function getNoLoadingScreen(): boolean {
        return GetNoLoadingScreen();
    }

    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Hash: 0x5F92A689A06620AA | Since: 323 | API-Set: unknown
     */
    export function getNumberOfEvents(eventGroup: number): number {
        return GetNumberOfEvents(eventGroup);
    }

    /**
     * Gets the number of instances of the specified script is currently running.
     *
     * Actually returns numRefs - 1.
     * if (program)
     * `v3 = rage::scrProgram::GetNumRefs(program) - 1;`
     * return v3;
     *
     * Hash: 0x2C83A9DA6BFFC4F9 | Since: 323 | API-Set: unknown
     */
    export function getNumberOfThreadsRunningTheWithThisHash(scriptHash: number | string): number {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        return GetNumberOfReferencesOfScriptWithNameHash(scriptHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x442E0A7EDE4A738A | Since: 323 | API-Set: unknown
     */
    export function getThisName(): string {
        return GetThisScriptName();
    }

    /**
     * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
     *
     * Hash: 0xE6CC9F3BA0FB9EF1 | Since: 323 | API-Set: unknown
     */
    export function hasLoaded(scriptName: string): boolean {
        return HasScriptLoaded(scriptName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5F0F0C783EB16C04 | Since: 323 | API-Set: unknown
     */
    export function hasWithNameHashLoaded(scriptHash: number | string): boolean {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        return HasScriptWithNameHashLoaded(scriptHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46E9AE36D8FA6417 | Since: 323 | API-Set: unknown
     */
    export function isThreadActive(threadId: number): boolean {
        return IsThreadActive(threadId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6EB5F71AA68F2E8E | Since: 323 | API-Set: unknown
     */
    export function request(scriptName: string): void {
        RequestScript(scriptName);
    }

    /**
     * formerly _REQUEST_STREAMED_SCRIPT
     *
     * Hash: 0xD62A67D26D9653E6 | Since: 323 | API-Set: unknown
     */
    export function requestWithNameHash(scriptHash: number | string): void {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        RequestScriptWithNameHash(scriptHash);
    }

    /**
     * If the function returns 0, the end of the iteration has been reached.
     *
     * Hash: 0x30B4FA1C82DD4B9F | Since: 323 | API-Set: unknown
     */
    export function threadIteratorGetNextThreadId(): number {
        return ScriptThreadIteratorGetNextThreadId();
    }

    /**
     * Starts a new iteration of the current threads.
     * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
     *
     * Hash: 0xDADFADA5A20143A8 | Since: 323 | API-Set: unknown
     */
    export function threadIteratorReset(): void {
        ScriptThreadIteratorReset();
    }

    /**
     * No comment provided
     *
     * Hash: 0x5262CC1995D07E09 | Since: 323 | API-Set: unknown
     */
    export function setNoLoadingScreen(toggle: boolean): void {
        SetNoLoadingScreen(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC90D2DCACD56184C | Since: 323 | API-Set: unknown
     */
    export function setAsNoLongerNeeded(scriptName: string): void {
        SetScriptAsNoLongerNeeded(scriptName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5BC038960E9DB27 | Since: 323 | API-Set: unknown
     */
    export function setWithNameHashAsNoLongerNeeded(scriptHash: number | string): void {
        if (typeof scriptHash === 'string') scriptHash = misc.getHashKey(scriptHash)
        SetScriptWithNameHashAsNoLongerNeeded(scriptHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x078EBE9809CCD637 | Since: 323 | API-Set: unknown
     */
    export function shutdownLoadingScreen(): void {
        ShutdownLoadingScreen();
    }

    /**
     * No comment provided
     *
     * Hash: 0x1090044AD1DA76FA | Since: 323 | API-Set: unknown
     */
    export function terminateThisThread(): void {
        TerminateThisThread();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC8B189ED9138BCD4 | Since: 323 | API-Set: unknown
     */
    export function terminateThread(threadId: number): void {
        TerminateThread(threadId);
    }

    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
     *
     * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
     *
     * Hash: 0x5AE99C571D5BBE5D | Since: 323 | API-Set: unknown
     */
    export function triggerEvent(eventGroup: number, eventDataSize: number, playerBits: number): any {
        return TriggerScriptEvent(eventGroup, eventDataSize, playerBits);
    }

    /**
     * New variant of SEND_TU_SCRIPT_EVENT that automatically initializes the event data header.
     * See TRIGGER_SCRIPT_EVENT for more info.
     *
     * Hash: 0x71A6F836422FDD2B | Since: 3095 | API-Set: unknown
     */
    export function sendTuEventNew(eventGroup: number, eventDataSize: number, playerBits: number, eventType: number | string): any {
        if (typeof eventType === 'string') eventType = misc.getHashKey(eventType)
        return Citizen.invokeNative('0x71A6F836422FDD2B', eventGroup, eventDataSize, playerBits, eventType);
    }

}


export namespace security {
    /**
     * No comment provided
     *
     * Hash: 0x8E580AB902917360 | Since: 2545 | API-Set: unknown
     */
    export function forceCheckScriptVariables(): void {
        Citizen.invokeNative('0x8E580AB902917360');
    }

    /**
     * Registers a protected variable that will be checked for modifications by the anticheat
     *
     * Hash: 0x40EB1EFD921822BC | Since: 2545 | API-Set: unknown
     */
    export function registerScriptVariable(): any {
        return Citizen.invokeNative('0x40EB1EFD921822BC');
    }

    /**
     * No comment provided
     *
     * Hash: 0x340A36A700E99699 | Since: 2545 | API-Set: unknown
     */
    export function unregisterScriptVariable(): any {
        return Citizen.invokeNative('0x340A36A700E99699');
    }

}


export namespace socialclub {
    /**
     * Returns the nickname of the logged-in Rockstar Social Club account.
     *
     * Hash: 0x198D161F458ECC7F | Since: 323 | API-Set: unknown
     */
    export function scAccountInfoGetNickname(): string {
        return ScGetNickname();
    }

    /**
     * No comment provided
     *
     * Hash: 0x225798743970412B | Since: 323 | API-Set: unknown
     */
    export function scAchievementInfoStatus(): [boolean, number] {
        return Citizen.invokeNative('0x225798743970412B');
    }

    /**
     * No comment provided
     *
     * Hash: 0xBFA0A56A817C6C7D | Since: 323 | API-Set: unknown
     */
    export function scCacheNewRockstarMsgs(toggle: boolean): void {
        SetHandleRockstarMessageViaScript(toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC2C97EA97711D1AE | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetDisplayName(): [boolean, string] {
        return Citizen.invokeNative('0xC2C97EA97711D1AE');
    }

    /**
     * No comment provided
     *
     * Hash: 0x19853B5B17D77BCA | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetDisplayNameById(): [boolean, string] {
        return Citizen.invokeNative('0x19853B5B17D77BCA', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x33DF47CC0642061B | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetDisplayNameForType(): [boolean, string] {
        return Citizen.invokeNative('0x33DF47CC0642061B', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4ED9C8D6DA297639 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetEventId(): number {
        return Citizen.invokeNative('0x4ED9C8D6DA297639');
    }

    /**
     * No comment provided
     *
     * Hash: 0x4A7D6E727F941747 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetEventIdForType(): number {
        return Citizen.invokeNative('0x4A7D6E727F941747', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x50A8A36201DBF83E | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataFloat(): [boolean, number] {
        return Citizen.invokeNative('0x50A8A36201DBF83E', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5A35C73B68F3C49 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataFloatById(): [boolean, number] {
        return Citizen.invokeNative('0xC5A35C73B68F3C49', 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2570E26BE63964E3 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataFloatForType(): [boolean, number] {
        return Citizen.invokeNative('0x2570E26BE63964E3', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x710BCDA8071EDED1 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataInt(): [boolean, number] {
        return Citizen.invokeNative('0x710BCDA8071EDED1', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8CC469AB4D349B7C | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataIntById(): [boolean, number] {
        return Citizen.invokeNative('0x8CC469AB4D349B7C', 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE75A4A2E5E316D86 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataIntForType(): [boolean, number] {
        return Citizen.invokeNative('0xE75A4A2E5E316D86', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9DE5D2F723575ED0 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataString(): [boolean, string] {
        return Citizen.invokeNative('0x9DE5D2F723575ED0', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x699E4A5C8C893A18 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataStringById(): [boolean, string] {
        return Citizen.invokeNative('0x699E4A5C8C893A18', 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D12A56FC95BE92E | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventGetExtraDataStringForType(): [boolean, string] {
        return Citizen.invokeNative('0x1D12A56FC95BE92E', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF8F3A92B75ED67A | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventIsActive(): boolean {
        return Citizen.invokeNative('0xFF8F3A92B75ED67A');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA468E0BE12B12C70 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventIsActiveById(): boolean {
        return Citizen.invokeNative('0xA468E0BE12B12C70', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x450819D8CF90C416 | Since: 323 | API-Set: unknown
     */
    export function scCommunityEventIsActiveForType(): boolean {
        return Citizen.invokeNative('0x450819D8CF90C416', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44ACA259D67651DB | Since: 323 | API-Set: unknown
     */
    export function scEmailDeleteEmails(): any {
        return Citizen.invokeNative('0x44ACA259D67651DB', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4737980E8A283806 | Since: 323 | API-Set: unknown
     */
    export function scEmailGetEmailAtIndex(): [boolean, any] {
        return Citizen.invokeNative('0x4737980E8A283806', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7DB18CA8CAD5B098 | Since: 505 | API-Set: unknown
     */
    export function scEmailGetNumRetrievedEmails(): number {
        return Citizen.invokeNative('0x7DB18CA8CAD5B098');
    }

    /**
     * No comment provided
     *
     * Hash: 0x16DA8172459434AA | Since: 323 | API-Set: unknown
     */
    export function scEmailGetRetrievalStatus(): number {
        return Citizen.invokeNative('0x16DA8172459434AA');
    }

    /**
     * No comment provided
     *
     * Hash: 0x55DF6DB45179236E | Since: 323 | API-Set: unknown
     */
    export function scEmailMessageClearRecipList(): void {
        ScEmailMessageClearRecipList();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2330C12A7A605D16 | Since: 323 | API-Set: unknown
     */
    export function scEmailMessagePushGamerToRecipList(): any {
        return ScEmailMessagePushGamerToRecipList();
    }

    /**
     * No comment provided
     *
     * Hash: 0x040ADDCBAFA1018A | Since: 323 | API-Set: unknown
     */
    export function scEmailRetrieveEmails(offset: number, limit: number): void {
        ScInboxGetEmails(offset, limit);
    }

    /**
     * No comment provided
     *
     * Hash: 0x116FB94DC4B79F17 | Since: 323 | API-Set: unknown
     */
    export function scEmailSendEmail(): void {
        Citizen.invokeNative('0x116FB94DC4B79F17', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x07DBD622D9533857 | Since: 505 | API-Set: unknown
     */
    export function scEmailSetCurrentEmailTag(): boolean {
        return Citizen.invokeNative('0x07DBD622D9533857', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D874D4AE612A65F | Since: 323 | API-Set: unknown
     */
    export function scGamerdataGetActiveXpBonus(): [boolean, number] {
        return Citizen.invokeNative('0x2D874D4AE612A65F');
    }

    /**
     * No comment provided
     *
     * Hash: 0x8416FE4E4629D7D7 | Since: 323 | API-Set: unknown
     */
    export function scGamerdataGetBool(name: string): boolean {
        return ScGamerdataGetBool(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA770C8EEC6FB2AC5 | Since: 323 | API-Set: unknown
     */
    export function scGamerdataGetFloat(name: string): [boolean, number] {
        return ScGamerdataGetFloat(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC85A7127E7AD02AA | Since: 323 | API-Set: unknown
     */
    export function scGamerdataGetInt(name: string): [boolean, number] {
        return ScGamerdataGetInt(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7FFCBFEE44ECFABF | Since: 323 | API-Set: unknown
     */
    export function scGamerdataGetString(name: string): [boolean, string] {
        return Citizen.invokeNative('0x7FFCBFEE44ECFABF', name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDF649C4E9AFDD788 | Since: 323 | API-Set: unknown
     */
    export function scGetNewRockstarMsg(): string {
        return RockstarMessageGetString();
    }

    /**
     * Same as HAS_ACHIEVEMENT_BEEN_PASSED
     *
     * Hash: 0x418DC16FAE452C1C | Since: 323 | API-Set: unknown
     */
    export function scHasAchievementBeenPassed(achievementId: number): boolean {
        return ScGetHasAchievementBeenPassed(achievementId);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC1CC91205EC8D6E | Since: 323 | API-Set: unknown
     */
    export function scHasNewRockstarMsg(): boolean {
        return IsRockstarMessageReadyForScript();
    }

    /**
     * No comment provided
     *
     * Hash: 0x87E0052F08BD64E6 | Since: 323 | API-Set: unknown
     */
    export function scInboxGetBountyDataAtIndex(index: number): [boolean, any] {
        return ScInboxMessageGetBountyData(index);
    }

    /**
     * No comment provided
     *
     * Hash: 0x93028F1DB42BFD08 | Since: 323 | API-Set: unknown
     */
    export function scInboxGetMessageIsReadAtIndex(msgIndex: number): boolean {
        return ScInboxGetMessageIsReadAtIndex(msgIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB8EA16ECBC976C4 | Since: 323 | API-Set: unknown
     */
    export function scInboxGetMessageTypeAtIndex(msgIndex: number): number {
        return ScInboxGetMessageTypeAtIndex(msgIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x03A93FF1A2CA0864 | Since: 323 | API-Set: unknown
     */
    export function scInboxGetTotalNumMessages(): number {
        return ScInboxGetTotalNumMessages();
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A2C8064B6C1E41A | Since: 323 | API-Set: unknown
     */
    export function scInboxMessageDoApply(): boolean {
        return ScInboxMessageDoApply(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFFE5C16F402D851D | Since: 323 | API-Set: unknown
     */
    export function scInboxMessageGetDataBool(): boolean {
        return ScInboxMessageGetDataBool(0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA00EFE4082C4056E | Since: 323 | API-Set: unknown
     */
    export function scInboxMessageGetDataInt(context: string): [boolean, number] {
        return ScInboxMessageGetDataInt(0, context);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7572EF42FC6A9B6D | Since: 323 | API-Set: unknown
     */
    export function scInboxMessageGetDataString(context: string): [boolean, string] {
        return ScInboxMessageGetDataString(0, context);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF3E31D16CBDCB304 | Since: 323 | API-Set: unknown
     */
    export function scInboxMessageGetRawTypeAtIndex(): string {
        return ScInboxMessageGetString(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69D82604A1A5A254 | Since: 323 | API-Set: unknown
     */
    export function scInboxMessageGetUgcdata(): [boolean, any] {
        return ScInboxMessageGetUgcdata(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA024BDBD600F44A | Since: 323 | API-Set: unknown
     */
    export function scInboxMessagePushGamerT0RecipList(): any {
        return ScInboxMessagePushGamerToEventRecipList();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA68D3D229F4F3B06 | Since: 323 | API-Set: unknown
     */
    export function scInboxSendUgcstatupdateToRecipList(): any {
        return ScInboxMessageSendUgcStatUpdateEvent();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2C015348CF19CA1D | Since: 323 | API-Set: unknown
     */
    export function scInboxSetMessageAsReadAtIndex(msgIndex: number): boolean {
        return ScInboxMessagePop(msgIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1989C6E6F67E76A8 | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateAdd(plateText: string): [boolean, any, number] {
        return ScLicenseplateAdd(plateText);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6BAAAF762E1BF40 | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateCheckString(): [boolean, number] {
        return Citizen.invokeNative('0xF6BAAAF762E1BF40', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x07C61676E5BB52CD | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetAddIsPending(token: number): boolean {
        return ScLicenseplateGetAddIsPending(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8147FFF6A718E1AD | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetAddStatus(token: number): number {
        return ScLicenseplateGetAddStatus(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9237E334F6E43156 | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetCheckIsPending(): boolean {
        return Citizen.invokeNative('0x9237E334F6E43156', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF22CA0FD74B80E7A | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetCheckIsValid(): boolean {
        return Citizen.invokeNative('0xF22CA0FD74B80E7A', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x700569DBA175A77C | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetCount(token: number): number {
        return ScLicenseplateGetCount(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD302E99EDF0449CF | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetIsvalidIsPending(token: number): boolean {
        return ScLicenseplateGetIsvalidIsPending(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C4EBFFA98BDB41C | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetIsvalidStatus(token: number): number {
        return ScLicenseplateGetIsvalidStatus(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1D4446A62D35B0D0 | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetPlate(token: number, plateIndex: number): string {
        return ScLicenseplateGetPlate(token, plateIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E89990DDFF670C3 | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateGetPlateData(token: number, plateIndex: number): string {
        return ScLicenseplateGetPlateData(token, plateIndex);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F73393BAC7E6730 | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateIsvalid(plateText: string): [boolean, number] {
        return ScLicenseplateIsvalid(plateText);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD0EE05FE193646EA | Since: 323 | API-Set: unknown
     */
    export function scLicenseplateSetPlateData(oldPlateText: string, newPlateText: string): [boolean, any] {
        return ScLicenseplateSetPlateData(oldPlateText, newPlateText);
    }

    /**
     * Fills some 0x30 sized struct
     *
     * Hash: 0x8A4416C0DB05FA66 | Since: 1290 | API-Set: unknown
     */
    export function scPauseNewsGetPendingStory(): boolean {
        return Citizen.invokeNative('0x8A4416C0DB05FA66', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4F6E8D07A2F0F51 | Since: 1290 | API-Set: unknown
     */
    export function scPauseNewsInitStarterPack(): boolean {
        return Citizen.invokeNative('0xE4F6E8D07A2F0F51', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEA95C0853A27888E | Since: 1290 | API-Set: unknown
     */
    export function scPauseNewsShutdown(): void {
        Citizen.invokeNative('0xEA95C0853A27888E');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC4C4575F62534A24 | Since: 323 | API-Set: unknown
     */
    export function scPresenceAttrSetFloat(attrHash: number | string, value: number): boolean {
        if (typeof attrHash === 'string') attrHash = misc.getHashKey(attrHash)
        return ScPresenceAttrSetFloat(attrHash, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F1E9682483697C7 | Since: 323 | API-Set: unknown
     */
    export function scPresenceAttrSetInt(attrHash: number | string, value: number): boolean {
        if (typeof attrHash === 'string') attrHash = misc.getHashKey(attrHash)
        return ScPresenceAttrSetInt(attrHash, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x287F1F75D2803595 | Since: 323 | API-Set: unknown
     */
    export function scPresenceAttrSetString(attrHash: number | string, value: string): boolean {
        if (typeof attrHash === 'string') attrHash = misc.getHashKey(attrHash)
        return ScPresenceAttrSetString(attrHash, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x487912FD248EFDDF | Since: 323 | API-Set: unknown
     */
    export function scPresenceSetActivityRating(): boolean {
        return Citizen.invokeNative('0x487912FD248EFDDF', undefined, 0);
    }

    /**
     * Starts a task to check an entered string for profanity on the ROS/Social Club services.
     *
     * See also: 1753344C770358AE, 82E4A58BABC15AE7.
     *
     * Hash: 0x75632C5ECD7ED843 | Since: 323 | API-Set: unknown
     */
    export function scProfanityCheckString(_string: string): [boolean, number] {
        return ScProfanityCheckString(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEB2BF817463DFA28 | Since: 678 | API-Set: unknown
     */
    export function scProfanityCheckStringUgc(_string: string): [boolean, number] {
        return ScProfanityCheckUgcString(_string);
    }

    /**
     * No comment provided
     *
     * Hash: 0x82E4A58BABC15AE7 | Since: 323 | API-Set: unknown
     */
    export function scProfanityGetCheckIsPending(token: number): boolean {
        return ScProfanityGetCheckIsPending(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1753344C770358AE | Since: 323 | API-Set: unknown
     */
    export function scProfanityGetCheckIsValid(token: number): boolean {
        return ScProfanityGetCheckIsValid(token);
    }

    /**
     * Retrieves the profane part of the string with max size of 128.
     * Returns true if profane term was retrieved.
     *
     * Hash: 0x75CC8931A11128C9 | Since: 3258 | API-Set: unknown
     */
    export function scProfanityGetProfaneWord(token: number): [boolean, string] {
        return Citizen.invokeNative('0x75CC8931A11128C9', token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x85535ACF97FC0969 | Since: 323 | API-Set: unknown
     */
    export function scProfanityGetStringPassed(token: number): boolean {
        return ScProfanityGetStringPassed(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x930DE22F07B1CCE3 | Since: 323 | API-Set: unknown
     */
    export function scProfanityGetStringStatus(token: number): number {
        return ScProfanityGetStringStatus(token);
    }

    /**
     * No comment provided
     *
     * Hash: 0x675721C9F644D161 | Since: 323 | API-Set: unknown
     */
    export function scTransitionNewsEnd(): void {
        Citizen.invokeNative('0x675721C9F644D161');
    }

    /**
     * No comment provided
     *
     * Hash: 0x92DA6E70EF249BD1 | Since: 323 | API-Set: unknown
     */
    export function scTransitionNewsGetExtraDataIntTu(): [boolean, number] {
        return Citizen.invokeNative('0x92DA6E70EF249BD1', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3001BEF2FECA3680 | Since: 323 | API-Set: unknown
     */
    export function scTransitionNewsHasExtraDataTu(): boolean {
        return Citizen.invokeNative('0x3001BEF2FECA3680');
    }

    /**
     * No comment provided
     *
     * Hash: 0x6BFB12CE158E3DD4 | Since: 323 | API-Set: unknown
     */
    export function scTransitionNewsShow(): boolean {
        return Citizen.invokeNative('0x6BFB12CE158E3DD4', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD8122C407663B995 | Since: 323 | API-Set: unknown
     */
    export function scTransitionNewsShowNextItem(): boolean {
        return Citizen.invokeNative('0xD8122C407663B995');
    }

    /**
     * No comment provided
     *
     * Hash: 0xFE4C1D0D3B9CC17E | Since: 323 | API-Set: unknown
     */
    export function scTransitionNewsShowTimed(): boolean {
        return Citizen.invokeNative('0xFE4C1D0D3B9CC17E', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69AA35F3F391CDBA | Since: 3258 | API-Set: unknown
     */
    export function scEmailMarketingEmailOpened(index: number, _type: number | string): void {
        if (typeof _type === 'string') _type = misc.getHashKey(_type)
        Citizen.invokeNative('0x69AA35F3F391CDBA', index, _type);
    }

}


export namespace stats {
    /**
     * No comment provided
     *
     * Hash: 0x44919CC079BB60BF | Since: 573 | API-Set: unknown
     */
    export function changeGoonLookingForWork(): void {
        Citizen.invokeNative('0x44919CC079BB60BF', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1C9B92BDD3F151D | Since: 573 | API-Set: unknown
     */
    export function changeUniform(): void {
        Citizen.invokeNative('0xD1C9B92BDD3F151D', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA3C53804BDB68ED2 | Since: 573 | API-Set: unknown
     */
    export function endBeingBoss(): void {
        Citizen.invokeNative('0xA3C53804BDB68ED2', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6BCCF9948492FD85 | Since: 573 | API-Set: unknown
     */
    export function endBeingGoon(): void {
        Citizen.invokeNative('0x6BCCF9948492FD85', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F361B8889A792A3 | Since: 323 | API-Set: unknown
     */
    export function forceCloudMpDownloadAndOverwriteLocalSave(): void {
        Citizen.invokeNative('0x6F361B8889A792A3');
    }

    /**
     * No comment provided
     *
     * Hash: 0x6BC0ACD0673ACEBE | Since: 573 | API-Set: unknown
     */
    export function getBossGoonUuid(characterSlot: number): void {
        Citizen.invokeNative('0x6BC0ACD0673ACEBE', characterSlot, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61E111E323419E07 | Since: 323 | API-Set: unknown
     */
    export function getPackedIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number {
        return GetPackedIntStatKey(index, spStat, charStat, character);
    }

    /**
     * Needs more research. Gets the stat name of a masked int?
     *
     * section - values used in the decompiled scripts:
     * "_NGPSTAT_INT"
     * "_MP_NGPSTAT_INT"
     * "_MP_LRPSTAT_INT"
     * "_MP_APAPSTAT_INT"
     * "_MP_LR2PSTAT_INT"
     * "_MP_BIKEPSTAT_INT"
     * "_MP_IMPEXPPSTAT_INT"
     * "_MP_GUNRPSTAT_INT"
     * "_NGDLCPSTAT_INT"
     * "_MP_NGDLCPSTAT_INT"
     * "_DLCSMUGCHARPSTAT_INT"
     * "_GANGOPSPSTAT_INT"
     * "_BUSINESSBATPSTAT_INT"
     * "_ARENAWARSPSTAT_INT"
     * "_CASINOPSTAT_INT"
     * "_CASINOHSTPSTAT_INT"
     *
     * Hash: 0x2B4CDCA6F07FF3DA | Since: 323 | API-Set: unknown
     */
    export function getPackedNgIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number, section: string): number {
        return GetNgstatIntHash(index, spStat, charStat, character, section);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDA7EBFC49AE3F1B0 | Since: 2545 | API-Set: unknown
     */
    export function getPackedStatBoolCode(index: number, characterSlot: number): boolean {
        return Citizen.invokeNative('0xDA7EBFC49AE3F1B0', index, characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BC900A6FE73770C | Since: 2545 | API-Set: unknown
     */
    export function getPackedStatIntCode(index: number, characterSlot: number): number {
        return Citizen.invokeNative('0x0BC900A6FE73770C', index, characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD16C2AD6B8E32854 | Since: 323 | API-Set: unknown
     */
    export function getPackedTuIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number {
        return GetPackedTuIntStatKey(index, spStat, charStat, character);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5EAD2BF6484852E4 | Since: 323 | API-Set: unknown
     */
    export function getPlayerHasDrivenAllVehicles(): boolean {
        return Citizen.invokeNative('0x5EAD2BF6484852E4');
    }

    /**
     * No comment provided
     *
     * Hash: 0x792271AB35C356A4 | Since: 573 | API-Set: unknown
     */
    export function hiredLimo(): void {
        HiredLimo(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC30713A383BFBF0E | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadByHandle(): [boolean, any, any] {
        return Leaderboards2ReadByHandle();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF1AE5DCDBFCA2721 | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadByPlaform(gamerHandleCsv: string, platformName: string): [boolean, any] {
        return Leaderboards2ReadByPlatform(gamerHandleCsv, platformName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CE587FB5A42C8C4 | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadByRadius(): [boolean, any, any] {
        return Leaderboards2ReadByRadius(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA2C7DB0C129449A | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadByRank(): [boolean, any] {
        return Leaderboards2ReadByRank(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE662C8B759D08F3C | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadByScoreFloat(): [boolean, any] {
        return Leaderboards2ReadByScoreFloat(0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7EEC7E4F6984A16A | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadByScoreInt(): [boolean, any] {
        return Leaderboards2ReadByScoreInt(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x918B101666F9CB83 | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadFriendsByRow(): [boolean, any, any] {
        return Leaderboards2ReadFriendsByRow(undefined, false, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71B008056E5692D6 | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadGetRowDataEnd(): void {
        Citizen.invokeNative('0x71B008056E5692D6');
    }

    /**
     * No comment provided
     *
     * Hash: 0x38491439B6BA7F7D | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadGetRowDataFloat(): number {
        return Citizen.invokeNative('0x38491439B6BA7F7D', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34770B9CE0E03B91 | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadGetRowDataInfo(): [boolean, any] {
        return Citizen.invokeNative('0x34770B9CE0E03B91', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88578F6EC36B4A3A | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadGetRowDataInt(): number {
        return Citizen.invokeNative('0x88578F6EC36B4A3A', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA0F93D5465B3094D | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadGetRowDataStart(): [boolean, any] {
        return Citizen.invokeNative('0xA0F93D5465B3094D');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC38DC1E90D22547C | Since: 323 | API-Set: unknown
     */
    export function leaderboards2ReadRankPrediction(): [boolean, any, any, any] {
        return Leaderboards2ReadRankPrediction();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAE2206545888AE49 | Since: 323 | API-Set: unknown
     */
    export function leaderboards2WriteData(): [boolean, any] {
        return Leaderboards2WriteData();
    }

    /**
     * No comment provided
     *
     * Hash: 0xC980E62E33DF1D5C | Since: 323 | API-Set: unknown
     */
    export function leaderboards2WriteDataForEventType(): [boolean, any, any] {
        return Leaderboards2WriteDataForEventType();
    }

    /**
     * No comment provided
     *
     * Hash: 0xB9BB18E2C40142ED | Since: 323 | API-Set: unknown
     */
    export function leaderboardsCacheDataRow(): [boolean, any] {
        return LeaderboardsCacheDataRow();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4B02A6B476E1FDC | Since: 323 | API-Set: unknown
     */
    export function leaderboardsClearCacheData(): void {
        LeaderboardsClearCacheData();
    }

    /**
     * No comment provided
     *
     * Hash: 0x8EC74CEB042E7CFF | Since: 323 | API-Set: unknown
     */
    export function leaderboardsClearCacheDataId(): void {
        Citizen.invokeNative('0x8EC74CEB042E7CFF', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9120E8DBA3D69273 | Since: 323 | API-Set: unknown
     */
    export function leaderboardsGetCacheDataRow(): [boolean, any] {
        return LeaderboardsGetCacheDataRow(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C51349BE6CDFE2C | Since: 323 | API-Set: unknown
     */
    export function leaderboardsGetCacheExists(): boolean {
        return LeaderboardsGetCacheExists(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58A651CD201D89AD | Since: 323 | API-Set: unknown
     */
    export function leaderboardsGetCacheNumberOfRows(): number {
        return LeaderboardsGetCacheNumberOfRows(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF04C1C27DA35F6C8 | Since: 323 | API-Set: unknown
     */
    export function leaderboardsGetCacheTime(): number {
        return LeaderboardsGetCacheTime(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC4B5467A1886EA7E | Since: 323 | API-Set: unknown
     */
    export function leaderboardsGetColumnId(): number {
        return LeaderboardsGetColumnId(0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF4FEF46DB7894D3 | Since: 323 | API-Set: unknown
     */
    export function leaderboardsGetColumnType(): number {
        return LeaderboardsGetColumnType(0, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x117B45156D7EFF2E | Since: 323 | API-Set: unknown
     */
    export function leaderboardsGetNumberOfColumns(): number {
        return LeaderboardsGetNumberOfColumns(0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA31FD15197B192BD | Since: 323 | API-Set: unknown
     */
    export function leaderboardsReadAnyPending(): boolean {
        return LeaderboardsReadAnyPending();
    }

    /**
     * No comment provided
     *
     * Hash: 0x7CCE5C737A665701 | Since: 323 | API-Set: unknown
     */
    export function leaderboardsReadClear(): number {
        return LeaderboardsReadClear(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA34CB6E6F0DF4A0B | Since: 323 | API-Set: unknown
     */
    export function leaderboardsReadClearAll(): number {
        return LeaderboardsReadClearAll();
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC392C8483342AC2 | Since: 323 | API-Set: unknown
     */
    export function leaderboardsReadPending(): boolean {
        return LeaderboardsReadPending(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FB19228983E832C | Since: 323 | API-Set: unknown
     */
    export function leaderboardsReadSuccessful(): boolean {
        return LeaderboardsReadSuccessful(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BCA1D2C47B0D269 | Since: 323 | API-Set: unknown
     */
    export function leaderboardsWriteAddColumn(): void {
        LeaderboardsWriteAddColumn(undefined, undefined, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E65248609523599 | Since: 323 | API-Set: unknown
     */
    export function leaderboardsWriteAddColumnLong(): void {
        LeaderboardsWriteAddColumnLong(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEA553E35C2246E1 | Since: 573 | API-Set: unknown
     */
    export function orderBossVehicle(vehicleHash: number | string): void {
        if (typeof vehicleHash === 'string') vehicleHash = misc.getHashKey(vehicleHash)
        OrderedBossVehicle(undefined, undefined, vehicleHash);
    }

    /**
     * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
     *
     * Hash: 0x94F12ABF9C79E339 | Since: 323 | API-Set: unknown
     */
    export function packedStatGetIntStatIndex(): number {
        return StatGetPackedIntMask(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD558BEC0BBA7E8D2 | Since: 877 | API-Set: unknown
     */
    export function playAbandonedMc(): void {
        Citizen.invokeNative('0xD558BEC0BBA7E8D2', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x79AB33F0FBFAC40C | Since: 323 | API-Set: unknown
     */
    export function playAcquiredHiddenPackage(): void {
        PlaystatsAcquiredHiddenPackage(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA071E0ED98F91286 | Since: 323 | API-Set: unknown
     */
    export function playActivityDone(activityId: number): void {
        PlaystatsActivityDone(0, activityId, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46326E13DA4E0546 | Since: 323 | API-Set: unknown
     */
    export function playAppendDirectorMetric(): any {
        return PlaystatsDirectorMode();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF9096193DF1F99D4 | Since: 1868 | API-Set: unknown
     */
    export function playArcadeCabinet(): void {
        Citizen.invokeNative('0xF9096193DF1F99D4', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x533A7D1EA58DF958 | Since: 1734 | API-Set: unknown
     */
    export function playArcadeGame(): void {
        PlaystatsArcadegame(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4FCDBD3F0A813C25 | Since: 1868 | API-Set: unknown
     */
    export function playArcadeLoveMatch(): void {
        Citizen.invokeNative('0x4FCDBD3F0A813C25', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB479D9F0D48A1BC5 | Since: 1604 | API-Set: unknown
     */
    export function playArenaWarsEnded(): any {
        return PlaystatsArenaWarsEnded();
    }

    /**
     * No comment provided
     *
     * Hash: 0x6F4F599753F8200A | Since: 1604 | API-Set: unknown
     */
    export function playArenaWarsSpectator(): void {
        PlaystatsArenaWarSpectator(0, 0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x47B32F5611E6E483 | Since: 463 | API-Set: unknown
     */
    export function playAwardBadSport(id: number): void {
        PlaystatsAwardBadsport(id);
    }

    /**
     * No comment provided
     *
     * Hash: 0x70F52471E758EBAE | Since: 2545 | API-Set: unknown
     */
    export function playAwardNav(): void {
        Citizen.invokeNative('0x70F52471E758EBAE', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x46F917F6B4128FE4 | Since: 323 | API-Set: unknown
     */
    export function playAwardXp(amount: number, _type: number | string, category: number | string): void {
        if (typeof _type === 'string') _type = misc.getHashKey(_type)
        if (typeof category === 'string') category = misc.getHashKey(category)
        PlaystatsAwardXp(amount, _type, category);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5009DFD741329729 | Since: 323 | API-Set: unknown
     */
    export function playBackgroundScriptAction(action: string, value: number): void {
        PlaystatsBackgroundScriptAction(action, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x516FC96EB88EEFE5 | Since: 1011 | API-Set: unknown
     */
    export function playBanAlert(): void {
        PlaystatsBanAlert(0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7B18DA61F6BAE9D5 | Since: 573 | API-Set: unknown
     */
    export function playBcCarJacking(): void {
        Citizen.invokeNative('0x7B18DA61F6BAE9D5', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x53CAE13E9B426993 | Since: 757 | API-Set: unknown
     */
    export function playBcCashing(): void {
        Citizen.invokeNative('0x53CAE13E9B426993', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE3261D791EB44ACB | Since: 573 | API-Set: unknown
     */
    export function playBcFindersKeepers(): void {
        Citizen.invokeNative('0xE3261D791EB44ACB', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x930F504203F561C9 | Since: 573 | API-Set: unknown
     */
    export function playBcMostWanted(): void {
        Citizen.invokeNative('0x930F504203F561C9', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x73001E34F85137F8 | Since: 573 | API-Set: unknown
     */
    export function playBcPointToPoint(): void {
        Citizen.invokeNative('0x73001E34F85137F8', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x14EDA9EE27BD1626 | Since: 573 | API-Set: unknown
     */
    export function playBcProtectionRacket(): void {
        Citizen.invokeNative('0x14EDA9EE27BD1626', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D36291161859389 | Since: 757 | API-Set: unknown
     */
    export function playBcSalvage(): void {
        Citizen.invokeNative('0x7D36291161859389', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x06EAF70AE066441E | Since: 573 | API-Set: unknown
     */
    export function playBcSmashAndGrab(): void {
        Citizen.invokeNative('0x06EAF70AE066441E', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x316DB59CD14C1774 | Since: 1493 | API-Set: unknown
     */
    export function playBusinessBattleEnded(): void {
        Citizen.invokeNative('0x316DB59CD14C1774', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD6781E42755531F7 | Since: 757 | API-Set: unknown
     */
    export function playBuyContrabandMission(): any {
        return PlaystatsBuyContraband();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF06A6F41CB445443 | Since: 757 | API-Set: unknown
     */
    export function playBwAirFreight(): void {
        Citizen.invokeNative('0xF06A6F41CB445443', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x678F86D8FC040BDB | Since: 573 | API-Set: unknown
     */
    export function playBwAssault(): void {
        Citizen.invokeNative('0x678F86D8FC040BDB', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA6F54BB2FFCA35EA | Since: 573 | API-Set: unknown
     */
    export function playBwBellyOfTheBeast(): void {
        Citizen.invokeNative('0xA6F54BB2FFCA35EA', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8D8ADB562F09A245 | Since: 573 | API-Set: unknown
     */
    export function playBwBossonbossdeathmatch(): void {
        Citizen.invokeNative('0x8D8ADB562F09A245', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x282B6739644F4347 | Since: 757 | API-Set: unknown
     */
    export function playBwFragileGoods(): void {
        Citizen.invokeNative('0x282B6739644F4347', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5FF2C33B13A02A11 | Since: 757 | API-Set: unknown
     */
    export function playBwHeadHunter(): void {
        Citizen.invokeNative('0x5FF2C33B13A02A11', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x88087EE1F28024AE | Since: 573 | API-Set: unknown
     */
    export function playBwHuntTheBoss(): void {
        Citizen.invokeNative('0x88087EE1F28024AE', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCC228E07217FCAC | Since: 573 | API-Set: unknown
     */
    export function playBwSightseer(): void {
        Citizen.invokeNative('0xFCC228E07217FCAC', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1A1EE3B4FA8E760 | Since: 573 | API-Set: unknown
     */
    export function playBwYatchattack(): void {
        Citizen.invokeNative('0xD1A1EE3B4FA8E760', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1187CB58D7F3BED7 | Since: 2372 | API-Set: unknown
     */
    export function playCarclubChallenge(): void {
        PlaystatsCarclubChallenge(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFF14D6FEEC507BBE | Since: 2372 | API-Set: unknown
     */
    export function playCarclubPoints(): void {
        PlaystatsCarclubPoints(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69C922B677621428 | Since: 2372 | API-Set: unknown
     */
    export function playCarclubPrize(vehicleModel: number | string): void {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        PlaystatsCarclubPrize(0, vehicleModel);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3EAE97309727E7AD | Since: 1734 | API-Set: unknown
     */
    export function playCasinoBlackjack(): void {
        PlaystatsCasinoBlackjack(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD5451C7BF151EB6F | Since: 1734 | API-Set: unknown
     */
    export function playCasinoBlackjackLight(): void {
        PlaystatsCasinoBlackjackLight(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0999F3F090EC5012 | Since: 1734 | API-Set: unknown
     */
    export function playCasinoChip(): void {
        PlaystatsCasinoChip(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x049F059625058A86 | Since: 1734 | API-Set: unknown
     */
    export function playCasinoInsideTrack(): void {
        PlaystatsCasinoInsidetrack(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x23A3CBCD50D54E47 | Since: 1734 | API-Set: unknown
     */
    export function playCasinoInsideTrackLight(): void {
        PlaystatsCasinoInsidetrackLight(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0C432C1435F5E4FA | Since: 1734 | API-Set: unknown
     */
    export function playCasinoLuckySeven(): void {
        PlaystatsCasinoLuckyseven(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95101C443A84E7F1 | Since: 1734 | API-Set: unknown
     */
    export function playCasinoRoulette(): void {
        PlaystatsCasinoRoulette(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6572ABA3DE1197FC | Since: 1734 | API-Set: unknown
     */
    export function playCasinoRouletteLight(): void {
        PlaystatsCasinoRouletteLight(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEF5EC67D392B830A | Since: 1734 | API-Set: unknown
     */
    export function playCasinoSlotMachine(): void {
        PlaystatsCasinoSlotmachine(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE60054A0FAE8227F | Since: 1734 | API-Set: unknown
     */
    export function playCasinoSlotMachineLight(): void {
        PlaystatsCasinoSlotmachineLight(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFCCCAC2BD3C1F180 | Since: 1734 | API-Set: unknown
     */
    export function playCasinoStoryMissionEnded(): void {
        PlaystatsCasinoStoryMissionEnded(undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF740FB339D471C35 | Since: 1734 | API-Set: unknown
     */
    export function playCasinoThreeCardPoker(): void {
        PlaystatsCasinoThreecardpoker(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC9001364B4388F22 | Since: 1734 | API-Set: unknown
     */
    export function playCasinoThreeCardPokerLight(): void {
        PlaystatsCasinoThreecardpokerLight(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28ECB8AC2F607DB2 | Since: 877 | API-Set: unknown
     */
    export function playChangeMcOutfit(): void {
        Citizen.invokeNative('0x28ECB8AC2F607DB2', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0B565B0AAE56A0E8 | Since: 877 | API-Set: unknown
     */
    export function playChangeMcRole(role: number): void {
        Citizen.invokeNative('0x0B565B0AAE56A0E8', undefined, undefined, undefined, undefined, role, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6058665D72302D3F | Since: 323 | API-Set: unknown
     */
    export function playCheatApplied(cheat: string): void {
        PlaystatsCheatApplied(cheat);
    }

    /**
     * No comment provided
     *
     * Hash: 0x34B973047A2268B9 | Since: 323 | API-Set: unknown
     */
    export function playClothChange(p0: number | IPed): void {
        PlaystatsClothChange(p0, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCD0A8A9338681CF2 | Since: 1734 | API-Set: unknown
     */
    export function playCollectiblePickedUp(objectHash: number | string, moneyAmount: number, rpAmount: number, chipsAmount: number): void {
        if (typeof objectHash === 'string') objectHash = misc.getHashKey(objectHash)
        PlaystatsCollectible(0, objectHash, undefined, undefined, moneyAmount, rpAmount, chipsAmount, undefined, 0, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB7257BA2550EA10A | Since: 877 | API-Set: unknown
     */
    export function playCopyRankIntoNewSlot(): void {
        PlaystatsCopyRankIntoNewSlot(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAFC7E5E075A96F46 | Since: 323 | API-Set: unknown
     */
    export function playCrateCreated(): void {
        PlaystatsCrateCreated(0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1CAE5D2E3F9A07F0 | Since: 323 | API-Set: unknown
     */
    export function playCrateDropMissionDone(): void {
        PlaystatsCrateDropMissionDone(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6DEE77AFF8C21BD1 | Since: 323 | API-Set: unknown
     */
    export function playCreateMatchHistoryId2(): [boolean, number, number] {
        return Citizen.invokeNative('0x6DEE77AFF8C21BD1');
    }

    /**
     * No comment provided
     *
     * Hash: 0x0BC254FF3A911501 | Since: 1290 | API-Set: unknown
     */
    export function playDarCheckpoint(): any {
        return PlaystatsDarMissionEnd();
    }

    /**
     * No comment provided
     *
     * Hash: 0x2605663BD4F23B5D | Since: 757 | API-Set: unknown
     */
    export function playDefendContrabandMission(): any {
        return PlaystatsDefendContraband();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD6CA58B3B53A0F22 | Since: 2189 | API-Set: unknown
     */
    export function playDjMissionEnded(): void {
        Citizen.invokeNative('0xD6CA58B3B53A0F22', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB26F670685631727 | Since: 1493 | API-Set: unknown
     */
    export function playDjUsage(): void {
        Citizen.invokeNative('0xB26F670685631727', undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x66C7BB2416ED3FCE | Since: 1493 | API-Set: unknown
     */
    export function playDroneUsage(): void {
        PlaystatsDroneUsage(0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x848B66100EE33B05 | Since: 1011 | API-Set: unknown
     */
    export function playDupeDetected(): any {
        return PlaystatsDupeDetection();
    }

    /**
     * No comment provided
     *
     * Hash: 0x501478855A6074CE | Since: 877 | API-Set: unknown
     */
    export function playEarnedMcPoints(): void {
        PlaystatsEarnedMcPoints(undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x878FF156D36E9956 | Since: 1290 | API-Set: unknown
     */
    export function playEnterSessionPack(): any {
        return PlaystatsEnterSessionPack();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA5B74BAB8A7EF99 | Since: 2372 | API-Set: unknown
     */
    export function playExtraEvent(): void {
        PlaystatsExtraEvent(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4DC416F246A41FC8 | Since: 2189 | API-Set: unknown
     */
    export function playFastTrvl(): void {
        Citizen.invokeNative('0x4DC416F246A41FC8', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBAA2F0490E146BE8 | Since: 463 | API-Set: unknown
     */
    export function playFmEventAtob(): void {
        Citizen.invokeNative('0xBAA2F0490E146BE8', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A60E43998228229 | Since: 463 | API-Set: unknown
     */
    export function playFmEventChallenges(): void {
        Citizen.invokeNative('0x6A60E43998228229', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DE3AA516FB126A4 | Since: 463 | API-Set: unknown
     */
    export function playFmEventCheckpointcollection(): void {
        Citizen.invokeNative('0x3DE3AA516FB126A4', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6551B1F7F6CD46EA | Since: 463 | API-Set: unknown
     */
    export function playFmEventCompetitiveurbanwarfare(): void {
        Citizen.invokeNative('0x6551B1F7F6CD46EA', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEDBF6C9B0D2C65C8 | Since: 463 | API-Set: unknown
     */
    export function playFmEventCriminaldamage(): void {
        Citizen.invokeNative('0xEDBF6C9B0D2C65C8', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A9C7F36E5D7B683 | Since: 463 | API-Set: unknown
     */
    export function playFmEventDeaddrop(): void {
        Citizen.invokeNative('0x0A9C7F36E5D7B683', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84DFC579C2FC214C | Since: 463 | API-Set: unknown
     */
    export function playFmEventHotproperty(): void {
        Citizen.invokeNative('0x84DFC579C2FC214C', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CD90358F67D0AA8 | Since: 463 | API-Set: unknown
     */
    export function playFmEventHuntbeast(): void {
        Citizen.invokeNative('0x2CD90358F67D0AA8', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x164C5FF663790845 | Since: 463 | API-Set: unknown
     */
    export function playFmEventKingofthecastle(): void {
        Citizen.invokeNative('0x164C5FF663790845', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x419615486BBF1956 | Since: 463 | API-Set: unknown
     */
    export function playFmEventPasstheparcel(): void {
        Citizen.invokeNative('0x419615486BBF1956', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A7CE7CD3E653485 | Since: 463 | API-Set: unknown
     */
    export function playFmEventPennedin(): void {
        Citizen.invokeNative('0x1A7CE7CD3E653485', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C9D11605E59D955 | Since: 463 | API-Set: unknown
     */
    export function playFmEventUrbanwarfare(): void {
        Citizen.invokeNative('0x8C9D11605E59D955', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBFAFDB5FAAA5C5AB | Since: 463 | API-Set: unknown
     */
    export function playFmEventVehicletarget(): void {
        Citizen.invokeNative('0xBFAFDB5FAAA5C5AB', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD8AFB345A9C5CCBB | Since: 1290 | API-Set: unknown
     */
    export function playFmHeistPrepEnded(): any {
        return PlaystatsH2FmprepEnd();
    }

    /**
     * No comment provided
     *
     * Hash: 0x46A70777BE6CEAB9 | Since: 2545 | API-Set: unknown
     */
    export function playFmMissionEnd(): void {
        Citizen.invokeNative('0x46A70777BE6CEAB9', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A0D4A6C336B7BC5 | Since: 1734 | API-Set: unknown
     */
    export function playFreemodeCasinoMissionEnded(): any {
        return PlaystatsCasinoMissionEnded();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F71DE29AB2258F1 | Since: 323 | API-Set: unknown
     */
    export function playFriendActivity(): void {
        PlaystatsFriendActivity(0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EACDF8487D5155A | Since: 1103 | API-Set: unknown
     */
    export function playGunrunningMissionEnded(): any {
        return PlaystatsGunrunMissionEnded();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDAF80797FC534BEC | Since: 1103 | API-Set: unknown
     */
    export function playGunrunningRnd(): void {
        Citizen.invokeNative('0xDAF80797FC534BEC', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFBD93BF2943E29B | Since: 1868 | API-Set: unknown
     */
    export function playHeist3Drone(): void {
        Citizen.invokeNative('0xDFBD93BF2943E29B', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2E0259BABC27A327 | Since: 1868 | API-Set: unknown
     */
    export function playHeist3Finale(): void {
        Citizen.invokeNative('0x2E0259BABC27A327', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92FC0EEDFAC04A14 | Since: 1868 | API-Set: unknown
     */
    export function playHeist3Hack(): void {
        Citizen.invokeNative('0x92FC0EEDFAC04A14', undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x53C31853EC9531FF | Since: 1868 | API-Set: unknown
     */
    export function playHeist3Prep(): void {
        Citizen.invokeNative('0x53C31853EC9531FF', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC1E963C58664B556 | Since: 2189 | API-Set: unknown
     */
    export function playHeist4Finale(): void {
        Citizen.invokeNative('0xC1E963C58664B556', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2FA3173480008493 | Since: 2189 | API-Set: unknown
     */
    export function playHeist4Hack(): void {
        Citizen.invokeNative('0x2FA3173480008493', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDFCDB14317A9B361 | Since: 2189 | API-Set: unknown
     */
    export function playHeist4Prep(): void {
        Citizen.invokeNative('0xDFCDB14317A9B361', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF4FF020A08BC8863 | Since: 323 | API-Set: unknown
     */
    export function playHeistSaveCheat(hash: number | string): void {
        if (typeof hash === 'string') hash = misc.getHashKey(hash)
        PlaystatsHeistSaveCheat(hash, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x60EEDC12AF66E846 | Since: 757 | API-Set: unknown
     */
    export function playHitContrabandDestroyLimit(): void {
        Citizen.invokeNative('0x60EEDC12AF66E846', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCB00196B31C39EB1 | Since: 323 | API-Set: unknown
     */
    export function playHoldUpMissionDone(): void {
        PlaystatsHoldUpMissionDone(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2818FF6638CB09DE | Since: 2189 | API-Set: unknown
     */
    export function playHubEntry(): void {
        Citizen.invokeNative('0x2818FF6638CB09DE', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A46ACE5C4661132 | Since: 2545 | API-Set: unknown
     */
    export function playHubExit(): void {
        Citizen.invokeNative('0x5A46ACE5C4661132', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5DA3A8DE8CB6226F | Since: 323 | API-Set: unknown
     */
    export function playIdleKick(msStoodIdle: number): void {
        PlaystatsIdleKick(msStoodIdle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D8BA05688AD64C7 | Since: 944 | API-Set: unknown
     */
    export function playImpexpMissionEnded(): void {
        Citizen.invokeNative('0x7D8BA05688AD64C7', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2B69F5074C894811 | Since: 323 | API-Set: unknown
     */
    export function playImportExportMissionDone(): void {
        PlaystatsImportExportMissionDone(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E1497D0D2108115 | Since: 1290 | API-Set: unknown
     */
    export function playInstancedHeistEnded(): any {
        return PlaystatsH2InstanceEnd(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xFEA3F7E83C0610FA | Since: 2545 | API-Set: unknown
     */
    export function playInstMissionEnd(): void {
        Citizen.invokeNative('0xFEA3F7E83C0610FA', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x887DAD63CF5B7908 | Since: 2699 | API-Set: unknown
     */
    export function playInventory(): void {
        PlaystatsInventory(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF8C54A461C3E11DC | Since: 323 | API-Set: unknown
     */
    export function playJobActivityEnd(): [any, any, any, any] {
        return Citizen.invokeNative('0xF8C54A461C3E11DC');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF5BB8DAC426A52C0 | Since: 323 | API-Set: unknown
     */
    export function playJobBend(): [any, any, any, any] {
        return PlaystatsJobBend();
    }

    /**
     * No comment provided
     *
     * Hash: 0xA736CF7FB7C5BFF4 | Since: 323 | API-Set: unknown
     */
    export function playJobLtsEnd(): [any, any, any, any] {
        return Citizen.invokeNative('0xA736CF7FB7C5BFF4');
    }

    /**
     * No comment provided
     *
     * Hash: 0x14E0B2D1AD1044E0 | Since: 323 | API-Set: unknown
     */
    export function playJobLtsRoundEnd(): [any, any, any, any] {
        return Citizen.invokeNative('0x14E0B2D1AD1044E0');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5BE134EC7BA96A0 | Since: 323 | API-Set: unknown
     */
    export function playLeaveJobChain(): void {
        PlaystatsLeaveJobChain(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x810B5FCC52EC7FF0 | Since: 1868 | API-Set: unknown
     */
    export function playMasterControl(): void {
        Citizen.invokeNative('0x810B5FCC52EC7FF0', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBC80E22DED931E3D | Since: 323 | API-Set: unknown
     */
    export function playMatchStarted(): void {
        PlaystatsMatchStarted(undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8989CBD7B4E82534 | Since: 877 | API-Set: unknown
     */
    export function playMcClubhouseActivity(): void {
        Citizen.invokeNative('0x8989CBD7B4E82534', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x03C2EEBB04B3FB72 | Since: 877 | API-Set: unknown
     */
    export function playMcFormationEnds(): void {
        Citizen.invokeNative('0x03C2EEBB04B3FB72', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF534D94DFA2EAD26 | Since: 877 | API-Set: unknown
     */
    export function playMcKilledRivalMcMember(): void {
        Citizen.invokeNative('0xF534D94DFA2EAD26', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCC25A4553DFBF9EA | Since: 877 | API-Set: unknown
     */
    export function playMcRequestBike(): void {
        Citizen.invokeNative('0xCC25A4553DFBF9EA', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC14BD9F5337219B2 | Since: 1493 | API-Set: unknown
     */
    export function playMinigameUsage(): void {
        Citizen.invokeNative('0xC14BD9F5337219B2', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC900596A63978C1D | Since: 323 | API-Set: unknown
     */
    export function playMissionCheckpoint(): void {
        PlaystatsMissionCheckpoint(undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF371CD2B64212FD | Since: 877 | API-Set: unknown
     */
    export function playMissionEnded(): void {
        Citizen.invokeNative('0xBF371CD2B64212FD', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7C4BB33A8CED7324 | Since: 323 | API-Set: unknown
     */
    export function playMissionOver(): void {
        PlaystatsMissionOver(undefined, undefined, undefined, false, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC19A2925C34D2231 | Since: 323 | API-Set: unknown
     */
    export function playMissionStarted(): void {
        PlaystatsMissionStarted(undefined, undefined, undefined, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC03FAB2C2F92289B | Since: 1868 | API-Set: unknown
     */
    export function playMissionVote(): void {
        Citizen.invokeNative('0xC03FAB2C2F92289B', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x830C3A44EB3F2CF9 | Since: 1493 | API-Set: unknown
     */
    export function playNightclubMissionEnded(): void {
        Citizen.invokeNative('0x830C3A44EB3F2CF9', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CDAED54B34B0ED0 | Since: 1868 | API-Set: unknown
     */
    export function playNjvsVote(): void {
        Citizen.invokeNative('0x5CDAED54B34B0ED0', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x93054C88E6AA7C44 | Since: 323 | API-Set: unknown
     */
    export function playNpcInvite(): void {
        PlaystatsNpcInvite(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0077F15613D36993 | Since: 1868 | API-Set: unknown
     */
    export function playNpcPhone(): any {
        return Citizen.invokeNative('0x0077F15613D36993');
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x69DEA3E9DB727B4C | Since: 323 | API-Set: unknown
     */
    export function playOddjobDone(totalTimeMs: number): void {
        PlaystatsOddjobDone(totalTimeMs, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9572BD4DD6B72122 | Since: 1180 | API-Set: unknown
     */
    export function playPegasusAsPersonalAircraft(modelHash: number | string): void {
        if (typeof modelHash === 'string') modelHash = misc.getHashKey(modelHash)
        PlaystatsPegasaircraft(modelHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0x203B381133817079 | Since: 393 | API-Set: unknown
     */
    export function playPimenuHideOptions(): any {
        return PlaystatsPiMenuHideSettings();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA739D6D5A05D6E7 | Since: 323 | API-Set: unknown
     */
    export function playPropChange(p0: number | IPed): void {
        PlaystatsPropChange(p0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x90D0622866E80445 | Since: 323 | API-Set: unknown
     */
    export function playQuickfixTool(element: number, item: string): void {
        PlaystatsQuickfixTool(element, item);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BF29846C6527C54 | Since: 1868 | API-Set: unknown
     */
    export function playQuitMode(): void {
        Citizen.invokeNative('0x5BF29846C6527C54', undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C375C315099DDE4 | Since: 323 | API-Set: unknown
     */
    export function playRaceCheckpoint(p0: number | IVehicle): void {
        PlaystatsRaceCheckpoint(p0, undefined, 0, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xADDD1C754E2E2914 | Since: 323 | API-Set: unknown
     */
    export function playRaceToPointMissionDone(): void {
        PlaystatsRaceToPointMissionDone(0, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x71862B1D855F32E1 | Since: 323 | API-Set: unknown
     */
    export function playRandomMissionDone(name: string): void {
        PlaystatsRandomMissionDone(name, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC7F2DE41D102BFB4 | Since: 323 | API-Set: unknown
     */
    export function playRankUp(rank: number): void {
        PlaystatsRankUp(rank);
    }

    /**
     * No comment provided
     *
     * Hash: 0x04D90BA8207ADA2D | Since: 757 | API-Set: unknown
     */
    export function playRecoverContrabandMission(): any {
        return PlaystatsRecoverContraband();
    }

    /**
     * No comment provided
     *
     * Hash: 0x27AA1C973CACFE63 | Since: 944 | API-Set: unknown
     */
    export function playRivalBehavior(): void {
        Citizen.invokeNative('0x27AA1C973CACFE63', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBA55BE9AAAABF44 | Since: 2372 | API-Set: unknown
     */
    export function playRobberyFinale(): void {
        PlaystatsRobberyFinale(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A67DFBF1F5C3835 | Since: 2372 | API-Set: unknown
     */
    export function playRobberyPrep(): void {
        PlaystatsRobberyPrep(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x121FB4DDDC2D5291 | Since: 323 | API-Set: unknown
     */
    export function playRosBet(amount: number, act: number, player: number | string | IPlayer, cm: number): void {
        PlaystatsRosBet(amount, act, player, cm);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC729991A9065376E | Since: 757 | API-Set: unknown
     */
    export function playSellContrabandMission(): any {
        return PlaystatsSellContraband();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD1032E482629049E | Since: 323 | API-Set: unknown
     */
    export function playSetJoinType(joinType: number): void {
        PlaystatsSetJoinType(joinType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x176852ACAAC173D1 | Since: 323 | API-Set: unknown
     */
    export function playShopItem(): void {
        PlaystatsShopItem(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x320C35147D5B5DDD | Since: 1180 | API-Set: unknown
     */
    export function playSmugglerMissionEnded(): any {
        return PlaystatsSmugMissionEnded();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE509B0A3693DE8B | Since: 757 | API-Set: unknown
     */
    export function playSpentPiCustomLoadout(amount: number): void {
        PlaystatsSpentPiCustomLoadout(amount);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6731DE84A38BFAD0 | Since: 1604 | API-Set: unknown
     */
    export function playSpinWheel(): void {
        PlaystatsSpectatorWheelSpin(0, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x098760C7461724CD | Since: 323 | API-Set: unknown
     */
    export function playStartedSessionInOfflinemode(): void {
        PlaystatsStartOfflineMode();
    }

    /**
     * Allows CEventNetworkStuntPerformed to be triggered.
     *
     * Hash: 0x928DBFB892638EF3 | Since: 791 | API-Set: unknown
     */
    export function playStartTrackingStunts(): void {
        PlaystatsStartTrackingStunts();
    }

    /**
     * No comment provided
     *
     * Hash: 0x35E39E5570358630 | Since: 1493 | API-Set: unknown
     */
    export function playStoneHatchetEnded(): any {
        return PlaystatsStoneHatchetEnd();
    }

    /**
     * Disallows CEventNetworkStuntPerformed to be triggered.
     *
     * Hash: 0x8A800DACCC0DA55D | Since: 791 | API-Set: unknown
     */
    export function playStopTrackingStunts(): void {
        PlaystatsStopTrackingStunts();
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4367D310F079DB0 | Since: 2189 | API-Set: unknown
     */
    export function playSubWeap(): void {
        Citizen.invokeNative('0xD4367D310F079DB0', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A50D2604E05CB94 | Since: 877 | API-Set: unknown
     */
    export function playSwitchMcEmblem(): void {
        PlaystatsChangeMcEmblem(undefined, undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x35EEC6C2BC821A71 | Since: 1734 | API-Set: unknown
     */
    export function playSwitchPassiveMode(): void {
        PlaystatsPassiveMode(false, 0, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x10A691F5756416D0 | Since: 2944 | API-Set: unknown
     */
    export function playVehDel(bossId1: number, bossId2: number, bossType: number, vehicleID: number, reason: number): void {
        Citizen.invokeNative('0x10A691F5756416D0', bossId1, bossId2, bossType, vehicleID, reason);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D7A9B577E72385E | Since: 1493 | API-Set: unknown
     */
    export function playWarehouseMissionEnded(): void {
        Citizen.invokeNative('0x2D7A9B577E72385E', undefined);
    }

    /**
     * This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
     *
     * Hash: 0xE95C8A1875A02CA4 | Since: 323 | API-Set: unknown
     */
    export function playWeaponModeChange(weaponHash: number | string, componentHashTo: number | string, componentHashFrom: number | string): void {
        if (typeof weaponHash === 'string') weaponHash = misc.getHashKey(weaponHash)
        if (typeof componentHashTo === 'string') componentHashTo = misc.getHashKey(componentHashTo)
        if (typeof componentHashFrom === 'string') componentHashFrom = misc.getHashKey(componentHashFrom)
        PlaystatsWeaponModeChange(weaponHash, componentHashTo, componentHashFrom);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDDF24D535060F811 | Since: 323 | API-Set: unknown
     */
    export function playWebsiteVisited(scaleformHash: number | string): void {
        if (typeof scaleformHash === 'string') scaleformHash = misc.getHashKey(scaleformHash)
        PlaystatsWebsiteVisited(scaleformHash, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x30A6614C1F7799B8 | Since: 323 | API-Set: unknown
     */
    export function presenceEventUpdatestatFloat(statHash: number | string, value: number): void {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        PresenceEventUpdatestatFloat(statHash, value, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x11FF1C80276097ED | Since: 323 | API-Set: unknown
     */
    export function presenceEventUpdatestatInt(statHash: number | string, value: number): void {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        PresenceEventUpdatestatInt(statHash, value, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6483C25849031C4F | Since: 323 | API-Set: unknown
     */
    export function presenceEventUpdatestatIntWithString(statHash: number | string, value: number, _string: string): void {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        Citizen.invokeNative('0x6483C25849031C4F', statHash, value, 0, _string);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7033EEFD9B28088E | Since: 678 | API-Set: unknown
     */
    export function sendMetricGhostingToPlayer(): void {
        Citizen.invokeNative('0x7033EEFD9B28088E', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x015B03EE1C43E6EC | Since: 757 | API-Set: unknown
     */
    export function sendMetricPunishBodyguard(): void {
        Citizen.invokeNative('0x015B03EE1C43E6EC', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA525DFF66BB82F5 | Since: 757 | API-Set: unknown
     */
    export function sendMetricVipPoach(): void {
        Citizen.invokeNative('0xAA525DFF66BB82F5', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0D01D20616FC73FB | Since: 323 | API-Set: unknown
     */
    export function setFreemodePrologueDone(characterSlot: number): void {
        Citizen.invokeNative('0x0D01D20616FC73FB', undefined, characterSlot);
    }

    /**
     * Sets profile setting 940 and 941
     *
     * Hash: 0x79D310A861697CC9 | Since: 2699 | API-Set: unknown
     */
    export function setFreemodeStrandProgressionStatus(profileSetting: number, settingValue: number): void {
        Citizen.invokeNative('0x79D310A861697CC9', profileSetting, settingValue);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC141B8917E0017EC | Since: 323 | API-Set: unknown
     */
    export function setHasPostedAllVehiclesDriven(): void {
        Citizen.invokeNative('0xC141B8917E0017EC');
    }

    /**
     * Sets profile setting 866
     *
     * Hash: 0xDAC073C7901F9E15 | Since: 323 | API-Set: unknown
     */
    export function setHasSpecialeditionContent(value: number): void {
        SetHasContentUnlocksFlags(value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x723C1CE13FBFDB67 | Since: 323 | API-Set: unknown
     */
    export function setJobActivityIdStarted(characterSlot: number): void {
        Citizen.invokeNative('0x723C1CE13FBFDB67', undefined, characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB8A58AEAA67CD07 | Since: 2545 | API-Set: unknown
     */
    export function setPackedStatBoolCode(index: number, value: boolean, characterSlot: number): void {
        Citizen.invokeNative('0xDB8A58AEAA67CD07', index, value, characterSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1581503AE529CD2E | Since: 2545 | API-Set: unknown
     */
    export function setPackedStatIntCode(index: number, value: number, characterSlot: number): void {
        Citizen.invokeNative('0x1581503AE529CD2E', index, value, characterSlot);
    }

    /**
     * Sets profile setting 935
     *
     * Hash: 0x55384438FC55AD8E | Since: 323 | API-Set: unknown
     */
    export function setProfileSettingCreatorCtfDone(value: number): void {
        Citizen.invokeNative('0x55384438FC55AD8E', value);
    }

    /**
     * Sets profile setting 934
     *
     * Hash: 0x38BAAA5DD4C9D19F | Since: 323 | API-Set: unknown
     */
    export function setProfileSettingCreatorDmDone(value: number): void {
        Citizen.invokeNative('0x38BAAA5DD4C9D19F', value);
    }

    /**
     * Sets profile setting 933
     *
     * Hash: 0xF1A1803D3476F215 | Since: 323 | API-Set: unknown
     */
    export function setProfileSettingCreatorRacesDone(value: number): void {
        Citizen.invokeNative('0xF1A1803D3476F215', value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB475F27C6A994D65 | Since: 323 | API-Set: unknown
     */
    export function setProfileSettingPrologueComplete(): void {
        SetProfileSettingPrologueComplete();
    }

    /**
     * Sets profile setting 939
     *
     * Hash: 0xC67E2DA1CBE759E2 | Since: 1734 | API-Set: unknown
     */
    export function setProfileSettingSpChopMissionComplete(): void {
        Citizen.invokeNative('0xC67E2DA1CBE759E2');
    }

    /**
     * Sets profile setting 501
     *
     * Hash: 0xF6792800AC95350D | Since: 323 | API-Set: unknown
     */
    export function setSaveMigrationTransactionIdWarning(transactionId: number): void {
        SetSaveMigrationTransactionId(transactionId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3EBEAC6C3F81F6BD | Since: 573 | API-Set: unknown
     */
    export function startBeingBoss(): void {
        Citizen.invokeNative('0x3EBEAC6C3F81F6BD', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x96E6D5150DBF1C09 | Since: 573 | API-Set: unknown
     */
    export function startBeingGoon(): void {
        Citizen.invokeNative('0x96E6D5150DBF1C09', undefined, undefined, undefined);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xC01D2470F22CDE5A | Since: 2372 | API-Set: unknown
     */
    export function completedCharacterCreation(): void {
        Citizen.invokeNative('0xC01D2470F22CDE5A', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B4BD21D69B1E609 | Since: 323 | API-Set: unknown
     */
    export function statClearDirtyReadDetected(): void {
        Citizen.invokeNative('0x9B4BD21D69B1E609');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA8733668D1047B51 | Since: 323 | API-Set: unknown
     */
    export function statClearPendingSaves(): void {
        Citizen.invokeNative('0xA8733668D1047B51', undefined);
    }

    /**
     * Example:
     *
     * for (v_2 = 0; v_2 <= 4; v_2 += 1) {
     * `STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);`
     * }
     *
     * Hash: 0xEB0A72181D4AA4AD | Since: 323 | API-Set: unknown
     */
    export function statClearSlotForReload(statSlot: number): boolean {
        return StatClearSlotForReload(statSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F2C4CDF2E82DF4C | Since: 323 | API-Set: unknown
     */
    export function statCloudSlotLoadFailed(): boolean {
        return Citizen.invokeNative('0x7F2C4CDF2E82DF4C', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE496A53BA5F50A56 | Since: 323 | API-Set: unknown
     */
    export function statCloudSlotLoadFailedCode(): number {
        return Citizen.invokeNative('0xE496A53BA5F50A56', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E6946F68A38B74F | Since: 323 | API-Set: unknown
     */
    export function statCloudSlotSaveFailed(): boolean {
        return Citizen.invokeNative('0x7E6946F68A38B74F', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBED9F5693F34ED17 | Since: 323 | API-Set: unknown
     */
    export function statCommunityGetHistory(statName: number | string): [boolean, number] {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return Citizen.invokeNative('0xBED9F5693F34ED17', statName, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A556B229A169402 | Since: 323 | API-Set: unknown
     */
    export function statCommunityStartSynch(): boolean {
        return Citizen.invokeNative('0x5A556B229A169402');
    }

    /**
     * No comment provided
     *
     * Hash: 0xB1D2BB1E1631F5B1 | Since: 323 | API-Set: unknown
     */
    export function statCommunitySynchIsPending(): boolean {
        return Citizen.invokeNative('0xB1D2BB1E1631F5B1');
    }

    /**
     * p0 is characterSlot? seems range from 0 to 2
     *
     * Hash: 0x49A49BED12794D70 | Since: 323 | API-Set: unknown
     */
    export function statDeleteSlot(): boolean {
        return StatDeleteSlot(0);
    }

    /**
     * Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
     *
     * Hash: 0x629526ABA383BCAA | Since: 323 | API-Set: unknown
     */
    export function statDisableTracking(): void {
        Citizen.invokeNative('0x629526ABA383BCAA');
    }

    /**
     * No comment provided
     *
     * Hash: 0x98E2BC1CA26287C3 | Since: 323 | API-Set: unknown
     */
    export function statEnableTracking(): void {
        Citizen.invokeNative('0x98E2BC1CA26287C3');
    }

    /**
     * No comment provided
     *
     * Hash: 0x6A7F19756F1A9016 | Since: 2060 | API-Set: unknown
     */
    export function statGetBlockSaves(): boolean {
        return Citizen.invokeNative('0x6A7F19756F1A9016');
    }

    /**
     * No comment provided
     *
     * Hash: 0x11B5E6D2AE73F48E | Since: 323 | API-Set: unknown
     */
    export function statGetBool(statHash: number | string): [boolean, boolean] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return StatGetBool(statHash, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x567384DFA67029E6 | Since: 323 | API-Set: unknown
     */
    export function statGetCancelSaveMigrationStatus(): number {
        return StatGetCancelSaveMigrationStatus();
    }

    /**
     * Fly low to the ground for the longest distance
     *
     * Hash: 0x6E0A5253375C4584 | Since: 463 | API-Set: unknown
     */
    export function statGetChallengeFlyingDist(): number {
        return Citizen.invokeNative('0x6E0A5253375C4584');
    }

    /**
     * Drive the furthest distance in a land vehicle without crashing
     *
     * Hash: 0xBA9749CC94C1FD85 | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentDriveNocrashDistance(): number {
        return Citizen.invokeNative('0xBA9749CC94C1FD85');
    }

    /**
     * Reverse the longest distance without crashing
     *
     * Hash: 0x32CAC93C9DE73D32 | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentDrivingReverseDistance(): number {
        return Citizen.invokeNative('0x32CAC93C9DE73D32');
    }

    /**
     * Perform the longest stoppie on a motorcycle
     *
     * Hash: 0x84A810B375E69C0E | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentFrontWheelDistance(): number {
        return Citizen.invokeNative('0x84A810B375E69C0E');
    }

    /**
     * Perform the longest jump in a land vehicle
     *
     * Hash: 0x9EC8858184CD253A | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentJumpDistance(): number {
        return Citizen.invokeNative('0x9EC8858184CD253A');
    }

    /**
     * Perform the most near misses with other vehicles in a land vehicle without crashing
     *
     * Hash: 0xE8853FBCE7D8D0D6 | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentNearMissNocrashPrecise(): number {
        return Citizen.invokeNative('0xE8853FBCE7D8D0D6');
    }

    /**
     * Perform the longest wheelie on a motorcycle
     *
     * Hash: 0xA943FD1722E11EFD | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentRearWheelDistance(): number {
        return Citizen.invokeNative('0xA943FD1722E11EFD');
    }

    /**
     * Fall the longest distance with a parachute before opening it
     *
     * Hash: 0xAFF47709F1D5DCCE | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentSkydivingDistance(): number {
        return Citizen.invokeNative('0xAFF47709F1D5DCCE');
    }

    /**
     * Achieve the highest speed in a land vehicle
     *
     * Hash: 0x55A8BECAF28A4EB7 | Since: 463 | API-Set: unknown
     */
    export function statGetCurrentSpeed(): number {
        return Citizen.invokeNative('0x55A8BECAF28A4EB7');
    }

    /**
     * p3 is probably characterSlot or BOOL save, always -1
     *
     * Hash: 0x8B0FACEFC36C824B | Since: 323 | API-Set: unknown
     */
    export function statGetDate(statHash: number | string, numFields: number): [boolean, any] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return StatGetDate(statHash, numFields, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD7AE6C9C9C6AC54C | Since: 323 | API-Set: unknown
     */
    export function statGetFloat(statHash: number | string): [boolean, number] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return StatGetFloat(statHash, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1A8EA222F9C67DBB | Since: 463 | API-Set: unknown
     */
    export function statGetFlyingAltitude(): [boolean, number] {
        return Citizen.invokeNative('0x1A8EA222F9C67DBB');
    }

    /**
     * p2 appears to always be -1
     *
     *
     * Hash: 0x767FBC2AC802EF3D | Since: 323 | API-Set: unknown
     */
    export function statGetInt(statHash: number | string): [boolean, number] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return StatGetInt(statHash, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5473D4195058B2E4 | Since: 323 | API-Set: unknown
     */
    export function statGetLicensePlate(statName: number | string): string {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatGetLicensePlate(statName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC0E0D686DDFC6EAE | Since: 323 | API-Set: unknown
     */
    export function statGetLoadSafeToProgressToMpFromSp(): boolean {
        return Citizen.invokeNative('0xC0E0D686DDFC6EAE');
    }

    /**
     * p4 is probably characterSlot or BOOL save
     *
     * Hash: 0x655185A06D9EEAAB | Since: 323 | API-Set: unknown
     */
    export function statGetMaskedInt(statHash: number | string): [boolean, number] {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return StatGetMaskedInt(statHash, 0, 0, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE0E854F5280FB769 | Since: 323 | API-Set: unknown
     */
    export function statGetNumberOfDays(statName: number | string): number {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatGetNumberOfDays(statName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF2D4B2FE415AAFC3 | Since: 323 | API-Set: unknown
     */
    export function statGetNumberOfHours(statName: number | string): number {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatGetNumberOfHours(statName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7583B4BE4C5A41B5 | Since: 323 | API-Set: unknown
     */
    export function statGetNumberOfMinutes(statName: number | string): number {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatGetNumberOfMinutes(statName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2CE056FF3723F00B | Since: 323 | API-Set: unknown
     */
    export function statGetNumberOfSeconds(statName: number | string): number {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatGetNumberOfSeconds(statName);
    }

    /**
     * p3 is probably characterSlot or BOOL save, always -1
     *
     * Hash: 0x350F82CCB186AA1B | Since: 323 | API-Set: unknown
     */
    export function statGetPos(statName: number | string): [boolean, number, number, number] {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatGetPos(statName, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF11F01D98113536A | Since: 463 | API-Set: unknown
     */
    export function statGetRecordedValue(): [boolean, number] {
        return Citizen.invokeNative('0xF11F01D98113536A');
    }

    /**
     * No comment provided
     *
     * Hash: 0xCE5AA445ABA8DEE0 | Since: 323 | API-Set: unknown
     */
    export function statGetSaveMigrationConsumeContentStatus(): [number, number] {
        return StatGetSaveMigrationConsumeContentUnlockStatus();
    }

    /**
     * No comment provided
     *
     * Hash: 0x886913BBEACA68C1 | Since: 323 | API-Set: unknown
     */
    export function statGetSaveMigrationStatus(): [number, any] {
        return StatGetSaveMigrationStatus();
    }

    /**
     * p1 is always -1 in the script files
     *
     * Hash: 0xE50384ACC2C3DB74 | Since: 323 | API-Set: unknown
     */
    export function statGetString(statHash: number | string): string {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return StatGetString(statHash, 0);
    }

    /**
     * Returns the rockstar ID (user id) value of a given stat. Returns "STAT_UNKNOWN" if the statHash is invalid or the stat has no userId
     *
     * Hash: 0x2365C388E393BBE2 | Since: 323 | API-Set: unknown
     */
    export function statGetUserId(statHash: number | string): string {
        if (typeof statHash === 'string') statHash = misc.getHashKey(statHash)
        return StatGetUserId(statHash);
    }

    /**
     * Travel the furthest distance when bailing from a vehicle
     *
     * Hash: 0x0B8B7F74BF061C6D | Since: 463 | API-Set: unknown
     */
    export function statGetVehicleBailDistance(): number {
        return Citizen.invokeNative('0x0B8B7F74BF061C6D');
    }

    /**
     * No comment provided
     *
     * Hash: 0x9B5A68C6489E9909 | Since: 323 | API-Set: unknown
     */
    export function statIncrement(statName: number | string, value: number): void {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        StatIncrement(statName, value);
    }

    /**
     * Or non-flyable area
     *
     * Hash: 0xF9F2922717B819EC | Since: 505 | API-Set: unknown
     */
    export function statIsPlayerVehicleAboveOcean(): boolean {
        return Citizen.invokeNative('0xF9F2922717B819EC');
    }

    /**
     * No comment provided
     *
     * Hash: 0x8B9CDBD6C566C38C | Since: 944 | API-Set: unknown
     */
    export function statIsRecordingStat(): boolean {
        return Citizen.invokeNative('0x8B9CDBD6C566C38C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xBE3DB208333D9844 | Since: 463 | API-Set: unknown
     */
    export function statIsTrackingEnabled(): boolean {
        return Citizen.invokeNative('0xBE3DB208333D9844');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA651443F437B1CE6 | Since: 323 | API-Set: unknown
     */
    export function statLoad(statSlot: number): boolean {
        return StatLoad(statSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xECB41AC6AB754401 | Since: 323 | API-Set: unknown
     */
    export function statLoadDirtyReadDetected(): boolean {
        return Citizen.invokeNative('0xECB41AC6AB754401');
    }

    /**
     * No comment provided
     *
     * Hash: 0xA1750FFAFA181661 | Since: 323 | API-Set: unknown
     */
    export function statLoadPending(statSlot: number): boolean {
        return StatLoadPending(statSlot);
    }

    /**
     * p0 seems to range from 0 to 7
     *
     * Hash: 0xA78B8FA58200DA56 | Since: 323 | API-Set: unknown
     */
    export function statLocalResetAllOnlineCharacter(): void {
        Citizen.invokeNative('0xA78B8FA58200DA56', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4C89FE2BDEB3F169 | Since: 323 | API-Set: unknown
     */
    export function statMigrateCheckAlreadyDone(): boolean {
        return Citizen.invokeNative('0x4C89FE2BDEB3F169');
    }

    /**
     * No comment provided
     *
     * Hash: 0x5BD5F255321C4AAF | Since: 323 | API-Set: unknown
     */
    export function statMigrateCheckGetIsPlatformAvailable(): number {
        return Citizen.invokeNative('0x5BD5F255321C4AAF', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDEAAF77EB3687E97 | Since: 323 | API-Set: unknown
     */
    export function statMigrateCheckGetPlatformStatus(): [number, any] {
        return Citizen.invokeNative('0xDEAAF77EB3687E97', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC6E0E2616A7576BB | Since: 323 | API-Set: unknown
     */
    export function statMigrateCheckStart(): boolean {
        return Citizen.invokeNative('0xC6E0E2616A7576BB');
    }

    /**
     * No comment provided
     *
     * Hash: 0xC847B43F369AC0B5 | Since: 323 | API-Set: unknown
     */
    export function statMigrateClearForRestart(): void {
        Citizen.invokeNative('0xC847B43F369AC0B5');
    }

    /**
     * No comment provided
     *
     * Hash: 0x9A62EC95AE10E011 | Since: 323 | API-Set: unknown
     */
    export function statMigrateSavegameGetStatus(): number {
        return Citizen.invokeNative('0x9A62EC95AE10E011');
    }

    /**
     * platformName must be one of the following: ps3, xbox360, ps4, xboxone
     *
     * Hash: 0xA5C80D8E768A9E66 | Since: 323 | API-Set: unknown
     */
    export function statMigrateSavegameStart(platformName: string): boolean {
        return StatMigrateSave(platformName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x428EAF89E24F6C36 | Since: 323 | API-Set: unknown
     */
    export function statNetworkIncrementOnSuicide(): void {
        LeaderboardsDeaths(undefined, 0);
    }

    /**
     * p0 seems to range from 0 to 7
     *
     * Hash: 0x26D7399B9587FE89 | Since: 323 | API-Set: unknown
     */
    export function statResetAllOnlineCharacter(): void {
        Citizen.invokeNative('0x26D7399B9587FE89', 0);
    }

    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xB3DA2606774A8E2D | Since: 323 | API-Set: unknown
     */
    export function statRollbackSaveMigration(): boolean {
        return Citizen.invokeNative('0xB3DA2606774A8E2D');
    }

    /**
     * No comment provided
     *
     * Hash: 0xE07BCA305B82D2FD | Since: 323 | API-Set: unknown
     */
    export function ave(): boolean {
        return StatSave(0, false, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4FEF53183C3C6414 | Since: 323 | API-Set: unknown
     */
    export function aveMigrationCancelPendingOperation(): boolean {
        return StatSaveMigrationCancel();
    }

    /**
     * No comment provided
     *
     * Hash: 0x3270F67EED31FBC1 | Since: 323 | API-Set: unknown
     */
    export function aveMigrationConsumeContent(contentId: number | string, srcPlatform: string, srcGamerHandle: string): boolean {
        if (typeof contentId === 'string') contentId = misc.getHashKey(contentId)
        return StatSaveMigrationConsumeContentUnlock(contentId, srcPlatform, srcGamerHandle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D3A583856F2C5AC | Since: 323 | API-Set: unknown
     */
    export function avePending(): boolean {
        return StatSavePending();
    }

    /**
     * No comment provided
     *
     * Hash: 0xBBB6AD006F1BBEA3 | Since: 323 | API-Set: unknown
     */
    export function avePendingOrRequested(): boolean {
        return StatSavePendingOrRequested();
    }

    /**
     * No comment provided
     *
     * Hash: 0xF434A10BA01C37D0 | Since: 323 | API-Set: unknown
     */
    export function etBlockSaves(toggle: boolean): void {
        StatSetBlockSaves(toggle);
    }

    /**
     * Example:
     * `STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);`
     *
     * Hash: 0x4B33C4243DE0C432 | Since: 323 | API-Set: unknown
     */
    export function etBool(statName: number | string, value: boolean, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetBool(statName, value, save);
    }

    /**
     * No comment provided
     *
     * Hash: 0x047CBED6F6F8B63C | Since: 323 | API-Set: unknown
     */
    export function etCheatIsActive(): void {
        StatSetCheatIsActive();
    }

    /**
     * p1 always true.
     *
     * Hash: 0xC2F84B7F9C4D0C61 | Since: 323 | API-Set: unknown
     */
    export function etCurrentPosixTime(statName: number | string): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetCurrentPosixTime(statName, false);
    }

    /**
     * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
     *
     * The structure looks like this:
     *
     * int year
     * int month
     * int day
     * int hour
     * int minute
     * int second
     * int millisecond
     *
     * `The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.`
     *
     * Hash: 0x2C29BFB64F4FCBE4 | Since: 323 | API-Set: unknown
     */
    export function etDate(statName: number | string, numFields: number, save: boolean): [boolean, any] {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetDate(statName, numFields, save);
    }

    /**
     * Example:
     * `STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);`
     *
     * Hash: 0x4851997F37FE9B3C | Since: 323 | API-Set: unknown
     */
    export function etFloat(statName: number | string, value: number, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetFloat(statName, value, save);
    }

    /**
     * The following values have been found in the decompiled scripts:
     * "RC_ABI1"
     * "RC_ABI2"
     * "RC_BA1"
     * "RC_BA2"
     * "RC_BA3"
     * "RC_BA3A"
     * "RC_BA3C"
     * "RC_BA4"
     * "RC_DRE1"
     * "RC_EPS1"
     * "RC_EPS2"
     * "RC_EPS3"
     * "RC_EPS4"
     * "RC_EPS5"
     * "RC_EPS6"
     * "RC_EPS7"
     * "RC_EPS8"
     * "RC_EXT1"
     * "RC_EXT2"
     * "RC_EXT3"
     * "RC_EXT4"
     * "RC_FAN1"
     * "RC_FAN2"
     * "RC_FAN3"
     * "RC_HAO1"
     * "RC_HUN1"
     * "RC_HUN2"
     * "RC_JOS1"
     * "RC_JOS2"
     * "RC_JOS3"
     * "RC_JOS4"
     * "RC_MAU1"
     * "RC_MIN1"
     * "RC_MIN2"
     * "RC_MIN3"
     * "RC_MRS1"
     * "RC_MRS2"
     * "RC_NI1"
     * "RC_NI1A"
     * "RC_NI1B"
     * "RC_NI1C"
     * "RC_NI1D"
     * "RC_NI2"
     * "RC_NI3"
     * "RC_OME1"
     * "RC_OME2"
     * "RC_PA1"
     * "RC_PA2"
     * "RC_PA3"
     * "RC_PA3A"
     * "RC_PA3B"
     * "RC_PA4"
     * "RC_RAM1"
     * "RC_RAM2"
     * "RC_RAM3"
     * "RC_RAM4"
     * "RC_RAM5"
     * "RC_SAS1"
     * "RC_TON1"
     * "RC_TON2"
     * "RC_TON3"
     * "RC_TON4"
     * "RC_TON5"
     *
     * Hash: 0x17695002FD8B2AE0 | Since: 323 | API-Set: unknown
     */
    export function etGxtLabel(statName: number | string, value: string, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetGxtLabel(statName, value, save);
    }

    /**
     * Example:
     * `STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);`
     *
     * Hash: 0xB3271D7AB655B441 | Since: 323 | API-Set: unknown
     */
    export function etInt(statName: number | string, value: number, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetInt(statName, value, save);
    }

    /**
     * No comment provided
     *
     * Hash: 0x69FF13266D7296DA | Since: 323 | API-Set: unknown
     */
    export function etLicensePlate(statName: number | string, str: string): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetLicensePlate(statName, str);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7BBB1B54583ED410 | Since: 323 | API-Set: unknown
     */
    export function etMaskedInt(statName: number | string, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetMaskedInt(statName, 0, 0, 0, save);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5688585E6D563CD8 | Since: 323 | API-Set: unknown
     */
    export function etOpenSavetypeInJob(): void {
        Citizen.invokeNative('0x5688585E6D563CD8', 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB283FDE680FE72E | Since: 323 | API-Set: unknown
     */
    export function etPos(statName: number | string, pos: Vector3, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetPos(statName, pos.x, pos.y, pos.z, save);
    }

    /**
     * Does not take effect immediately, unfortunately.
     *
     * profileSetting seems to only be 936, 937 and 938 in scripts
     *
     * Hash: 0x68F01422BE1D838F | Since: 323 | API-Set: unknown
     */
    export function etProfileSettingValue(profileSetting: number, value: number): void {
        StatSetProfileSettingValue(profileSetting, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA87B2335D12531D7 | Since: 323 | API-Set: unknown
     */
    export function etString(statName: number | string, value: string, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetString(statName, value, save);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8CDDF1E452BABE11 | Since: 323 | API-Set: unknown
     */
    export function etUserId(statName: number | string, value: string, save: boolean): boolean {
        if (typeof statName === 'string') statName = misc.getHashKey(statName)
        return StatSetUserId(statName, value, save);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0D0A9F0E7BD91E3C | Since: 323 | API-Set: unknown
     */
    export function lotIsLoaded(statSlot: number): boolean {
        return StatSlotIsLoaded(statSlot);
    }

    /**
     * enum StatTrackingType
     * {
     * LongestWheelie = 1,
     * LongestStoppie = 2,
     * NoCrashes = 3,
     * HighestSpeed = 4,
     * _MostFlips = 5,
     * _LongestSpin = 6,
     * _HighestJumpReached = 7,
     * LongestJump = 8,
     * _NearMissesNoCrash = 9,
     * LongestFallSurvived = 10,
     * LowestParachute = 11,
     * ReverseDriving = 12,
     * LongestFreefall = 13,
     * VehiclesStolen = 14,
     * _SomeCFireEventCount = 15,
     * _Unk16 = 16,
     * _LowFlyingTime = 17,
     * LowFlying = 18,
     * _InvertedFlyingTime = 19,
     * InvertedFlying = 20,
     * _PlaneSpinCount = 21,
     * MeleeKills = 22, // Players
     * _LongestSniperKill = 23,
     * SniperSkills = 24, // Players
     * DrivebyKills = 25, // Players
     * HeadshotKills = 26, // Players
     * LongestBail = 27,
     * _TotalRammedByCar = 28,
     * NearMissesPrecise = 29,
     * _FreefallTime = 30,
     * Unk31 = 31,
     * }
     *
     * enum StatTrackingValueType
     * {
     * Total,
     * Max,
     * Min
     * }
     *
     * Hash: 0x33D72899E24C3365 | Since: 463 | API-Set: unknown
     */
    export function tartRecordStat(statType: number, valueType: number): boolean {
        return Citizen.invokeNative('0x33D72899E24C3365', statType, valueType);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA761D4AC6115623D | Since: 463 | API-Set: unknown
     */
    export function topRecordStat(): boolean {
        return Citizen.invokeNative('0xA761D4AC6115623D');
    }

    /**
     * Returns stat hash based on dataType, statIndex/statId and characterSlot. Related to CStatsMpCharacterMappingData
     *
     * Hash: 0xD69CE161FE614531 | Since: 2944 | API-Set: unknown
     */
    export function getStatHashForCharacterStat(dataType: number, statIndex: number, charSlot: number): number {
        return Citizen.invokeNative('0xD69CE161FE614531', dataType, statIndex, charSlot);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A23D1324F6B2BAC | Since: 2802 | API-Set: unknown
     */
    export function playAcidMissionEnd(): void {
        Citizen.invokeNative('0x8A23D1324F6B2BAC', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCEACCF0550FDC5BA | Since: 2802 | API-Set: unknown
     */
    export function playAcidRnd(): void {
        Citizen.invokeNative('0xCEACCF0550FDC5BA', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5649CA22AF74E019 | Since: 3095 | API-Set: unknown
     */
    export function playAlert(): any {
        return Citizen.invokeNative('0x5649CA22AF74E019');
    }

    /**
     * No comment provided
     *
     * Hash: 0xBD642335A732F1A8 | Since: 2944 | API-Set: unknown
     */
    export function playAttritionStageEnd(): void {
        Citizen.invokeNative('0xBD642335A732F1A8', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x01D8B04D02F1217F | Since: 3570 | API-Set: unknown
     */
    export function playDeathInfo(victimPed: number | IPed, killerPed: number | IPed, mentalState: number, revengeKill: boolean, victimKvK: number, killerKvK: number): void {
        Citizen.invokeNative('0x01D8B04D02F1217F', victimPed, killerPed, mentalState, revengeKill, victimKvK, killerKvK);
    }

    /**
     * No comment provided
     *
     * Hash: 0xCFB0E9C3456319EA | Since: 3258 | API-Set: unknown
     */
    export function playFlowHigh(pos: Vector3, action: string): void {
        Citizen.invokeNative('0xCFB0E9C3456319EA', pos.x, pos.y, pos.z, action, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6A27CDA42887F93 | Since: 2944 | API-Set: unknown
     */
    export function playFlowLow(pos: Vector3, action: string): void {
        Citizen.invokeNative('0xE6A27CDA42887F93', pos.x, pos.y, pos.z, action, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC4493521BAA12CCE | Since: 3095 | API-Set: unknown
     */
    export function playFlowMedium(pos: Vector3, action: string): void {
        Citizen.invokeNative('0xC4493521BAA12CCE', pos.x, pos.y, pos.z, action, false, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xEC9553A178E8F1D1 | Since: 2802 | API-Set: unknown
     */
    export function playIdle(): void {
        Citizen.invokeNative('0xEC9553A178E8F1D1', undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7E5EED10B11CEDBA | Since: 3407 | API-Set: unknown
     */
    export function playInitMultiplayer(): void {
        Citizen.invokeNative('0x7E5EED10B11CEDBA', undefined, undefined, undefined);
    }

    /**
     * Known text types: NAME_YACHT, NAME_ORG_OFFICE
     *
     * Hash: 0xAA434D7D0A89A95C | Since: 3258 | API-Set: unknown
     */
    export function playNamedUserContent(isBoss: boolean, bossType: number, bossId1: number, bossId2: number, textType: number, textString: string, textSource: number): void {
        Citizen.invokeNative('0xAA434D7D0A89A95C', isBoss, bossType, bossId1, bossId2, textType, textString, textSource);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6D323A5E9EFFB76 | Since: 3258 | API-Set: unknown
     */
    export function playPimenuNav(): any {
        return Citizen.invokeNative('0xE6D323A5E9EFFB76');
    }

    /**
     * No comment provided
     *
     * Hash: 0x48FAC5DC7AC6EA99 | Since: 2802 | API-Set: unknown
     */
    export function playPlayerStyle(): void {
        Citizen.invokeNative('0x48FAC5DC7AC6EA99', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7EA06F970F999394 | Since: 2944 | API-Set: unknown
     */
    export function playRandomEvent(): void {
        Citizen.invokeNative('0x7EA06F970F999394', undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBEB0D930B3CCE4D5 | Since: 3258 | API-Set: unknown
     */
    export function playRecoverVehicle(): any {
        return Citizen.invokeNative('0xBEB0D930B3CCE4D5');
    }

    /**
     * No comment provided
     *
     * Hash: 0x574A7808450E141C | Since: 3570 | API-Set: unknown
     */
    export function playScriptEventFpom(): any {
        return Citizen.invokeNative('0x574A7808450E141C');
    }

    /**
     * No comment provided
     *
     * Hash: 0xF96E9EA876D9DC92 | Since: 2802 | API-Set: unknown
     */
    export function playShopmenuNav(): void {
        Citizen.invokeNative('0xF96E9EA876D9DC92', undefined, undefined, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x961D4157B9B428DB | Since: 2944 | API-Set: unknown
     */
    export function playShowroomNav(entity: number | string): void {
        if (typeof entity === 'string') entity = misc.getHashKey(entity)
        Citizen.invokeNative('0x961D4157B9B428DB', undefined, undefined, entity);
    }

    /**
     * Data struct contains various tunables related to test drives at Simeons Showroom or Luxury Showcase.
     *
     * Hash: 0x151D6C04C9E2742F | Since: 2944 | API-Set: unknown
     */
    export function playShowroomOverview(): any {
        return Citizen.invokeNative('0x151D6C04C9E2742F');
    }

}


export namespace task {
    /**
     * No comment provided
     *
     * Hash: 0x45C597097DD7CB81 | Since: 323 | API-Set: unknown
     */
    export function addCoverBlockingArea(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void {
        AddCoverBlockingArea(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD5C12A75C7B9497F | Since: 323 | API-Set: unknown
     */
    export function addCoverPoint(pos: Vector3, direction: number, usage: number, height: number, arc: number, isPriority: boolean): number {
        return AddCoverPoint(pos.x, pos.y, pos.z, direction, usage, height, arc, isPriority);
    }

    /**
     * No comment provided
     *
     * Hash: 0x23083260DEC3A551 | Since: 323 | API-Set: unknown
     */
    export function addPatrolRouteLink(nodeId1: number, nodeId2: number): void {
        AddPatrolRouteLink(nodeId1, nodeId2);
    }

    /**
     * Example:
     * `TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);`
     *
     * p0 is between 0 and 4 in the scripts.
     *
     * p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
     *
     * p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
     * Examples:
     * `TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7\/\*3\*\/], 0.0, 0.0, 0.0, 0);`
     *
     * `TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17\/\*44\*\/]._f3, l_B0[17\/\*44\*\/]._f3, 2000);`
     *
     * p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
     *
     * `p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).`
     *
     * Hash: 0x8EDF950167586B7C | Since: 323 | API-Set: unknown
     */
    export function addPatrolRouteNode(nodeId: number, nodeType: string, pos: Vector3, headingX: number, headingY: number, headingZ: number, duration: number): void {
        AddPatrolRouteNode(nodeId, nodeType, pos.x, pos.y, pos.z, headingX, headingY, headingZ, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0x28B7B9BFDAF274AA | Since: 2545 | API-Set: unknown
     */
    export function addScriptedCoverArea(pos: Vector3, radius: number): void {
        Citizen.invokeNative('0x28B7B9BFDAF274AA', pos.x, pos.y, pos.z, radius);
    }

    /**
     * x, y, z: offset in world coords from some entity.
     *
     * Hash: 0x5CF0D8F9BBA0DD75 | Since: 323 | API-Set: unknown
     */
    export function addVehicleSubAttackCoord(ped: number | IPed, pos: Vector3): void {
        AddVehicleSubtaskAttackCoord(ped, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x85F462BADC7DA47F | Since: 323 | API-Set: unknown
     */
    export function addVehicleSubAttackPed(ped: number | IPed, target: number | IPed): void {
        AddVehicleSubtaskAttackPed(ped, target);
    }

    /**
     * No comment provided
     *
     * Hash: 0x60F9A4393A21F741 | Since: 323 | API-Set: unknown
     */
    export function assistedMovementIsRouteLoaded(route: string): boolean {
        return AssistedMovementIsRouteLoaded(route);
    }

    /**
     * No comment provided
     *
     * Hash: 0x13945951E16EF912 | Since: 323 | API-Set: unknown
     */
    export function assistedMovementOverrideLoadDistanceThisFrame(dist: number): void {
        AssistedMovementOverrideLoadDistanceThisFrame(dist);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3548536485DD792B | Since: 323 | API-Set: unknown
     */
    export function assistedMovementRemoveRoute(route: string): void {
        AssistedMovementRemoveRoute(route);
    }

    /**
     * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
     *
     * Hash: 0x817268968605947A | Since: 323 | API-Set: unknown
     */
    export function assistedMovementRequestRoute(route: string): void {
        AssistedMovementRequestRoute(route);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD5002D78B7162E1B | Since: 323 | API-Set: unknown
     */
    export function assistedMovementSetRouteProperties(route: string, props: number): void {
        AssistedMovementSetRouteProperties(route, props);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6100B3CEFD43452E | Since: 2189 | API-Set: unknown
     */
    export function clearDefaultPrimary(ped: number | IPed): void {
        Citizen.invokeNative('0x6100B3CEFD43452E', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC35B5CDB2824CF69 | Since: 323 | API-Set: unknown
     */
    export function clearDrivebyUnderneathDrivingTask(ped: number | IPed): void {
        ClearDrivebyTaskUnderneathDrivingTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF6DC48E56BE1243A | Since: 3407 | API-Set: unknown
     */
    export function clearPedScriptIfRunningThreatResponseNonTempTask(ped: number | IPed): void {
        Citizen.invokeNative('0xF6DC48E56BE1243A', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x176CECF6F920D707 | Since: 323 | API-Set: unknown
     */
    export function clearPedSecondary(ped: number | IPed): void {
        ClearPedSecondaryTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE1EF3C1216AFF2CD | Since: 323 | API-Set: unknown
     */
    export function clearPeds(ped: number | IPed): void {
        ClearPedTasks(ped);
    }

    /**
     * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
     *
     * Hash: 0xAAA34F8A7CB32098 | Since: 323 | API-Set: unknown
     */
    export function clearPedsImmediately(ped: number | IPed): void {
        ClearPedTasksImmediately(ped);
    }

    /**
     * This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
     * It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
     *
     * Hash: 0xDBBC7A2432524127 | Since: 1290 | API-Set: unknown
     */
    export function clearPrimaryVehicle(vehicle: number | IVehicle): void {
        ClearVehicleTasks(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3841422E9C488D8C | Since: 323 | API-Set: unknown
     */
    export function clearSequence(): number {
        return ClearSequenceTask();
    }

    /**
     * No comment provided
     *
     * Hash: 0x53DDC75BC3AC0A90 | Since: 1290 | API-Set: unknown
     */
    export function clearVehicleCrash(vehicle: number | IVehicle): void {
        Citizen.invokeNative('0x53DDC75BC3AC0A90', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB043ECA801B8CBC1 | Since: 323 | API-Set: unknown
     */
    export function closePatrolRoute(): void {
        ClosePatrolRoute();
    }

    /**
     * No comment provided
     *
     * Hash: 0x39E72BC99E6360CB | Since: 323 | API-Set: unknown
     */
    export function closeSequence(taskSequenceId: number): void {
        CloseSequenceTask(taskSequenceId);
    }

    /**
     * Forces the ped to use the mounted weapon.
     * Returns false if task is not possible.
     *
     * Hash: 0xDCFE42068FE0135A | Since: 323 | API-Set: unknown
     */
    export function controlMountedWeapon(ped: number | IPed): boolean {
        return ControlMountedWeapon(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAF8A443CCC8018DC | Since: 323 | API-Set: unknown
     */
    export function createPatrolRoute(): void {
        CreatePatrolRoute();
    }

    /**
     * From the b617d scripts:
     *
     * `TASK::DELETE_PATROL_ROUTE("miss_merc0");`
     * `TASK::DELETE_PATROL_ROUTE("miss_merc1");`
     * `TASK::DELETE_PATROL_ROUTE("miss_merc2");`
     * `TASK::DELETE_PATROL_ROUTE("miss_dock");`
     *
     * Hash: 0x7767DD9D65E91319 | Since: 323 | API-Set: unknown
     */
    export function deletePatrolRoute(patrolRoute: string): void {
        DeletePatrolRoute(patrolRoute);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A59271FFADD33C1 | Since: 323 | API-Set: unknown
     */
    export function doesScenarioExistInArea(pos: Vector3, radius: number, mustBeFree: boolean): boolean {
        return DoesScenarioExistInArea(pos.x, pos.y, pos.z, radius, mustBeFree);
    }

    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Occurrences in the b617d scripts:
     *
     * "ARMY_GUARD",
     * "ARMY_HELI",
     * "Cinema_Downtown",
     * "Cinema_Morningwood",
     * "Cinema_Textile",
     * "City_Banks",
     * "Countryside_Banks",
     * "DEALERSHIP",
     * "GRAPESEED_PLANES",
     * "KORTZ_SECURITY",
     * "LOST_BIKERS",
     * "LSA_Planes",
     * "LSA_Planes",
     * "MP_POLICE",
     * "Observatory_Bikers",
     * "POLICE_POUND1",
     * "POLICE_POUND2",
     * "POLICE_POUND3",
     * "POLICE_POUND4",
     * "POLICE_POUND5"
     * "QUARRY",
     * "SANDY_PLANES",
     * "SCRAP_SECURITY",
     * "SEW_MACHINE",
     * "SOLOMON_GATE",
     * "Triathlon_1_Start",
     * "Triathlon_2_Start",
     * "Triathlon_3_Start"
     *
     * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
     * `if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {`
     * `else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {`
     *
     *
     * Hash: 0xF9034C136C9E00D3 | Since: 323 | API-Set: unknown
     */
    export function doesScenarioGroupExist(scenarioGroup: string): boolean {
        return DoesScenarioGroupExist(scenarioGroup);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0A9D0C2A3BBC86C1 | Since: 323 | API-Set: unknown
     */
    export function doesScenarioOfTypeExistInArea(pos: Vector3, scenarioName: string, radius: number, mustBeFree: boolean): boolean {
        return DoesScenarioOfTypeExistInArea(pos.x, pos.y, pos.z, scenarioName, radius, mustBeFree);
    }

    /**
     * Checks if there is a cover point at position
     *
     * Hash: 0xA98B8E3C088E5A31 | Since: 323 | API-Set: unknown
     */
    export function doesScriptedCoverPointExistAtCoords(pos: Vector3): boolean {
        return DoesScriptedCoverPointExistAtCoords(pos.x, pos.y, pos.z);
    }

    /**
     * https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
     *
     * Hash: 0x534AEBA6E5ED4CAB | Since: 323 | API-Set: unknown
     */
    export function getActiveVehicleMissionType(vehicle: number | IVehicle): number {
        return GetActiveVehicleMissionType(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3A8CADC7D37AACC5 | Since: 323 | API-Set: unknown
     */
    export function getClipSetForScriptedGun(gunTaskType: number): string {
        return GetClipSetForScriptedGunTask(gunTaskType);
    }

    /**
     * Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
     *
     * Hash: 0xB0760331C7AA4155 | Since: 323 | API-Set: unknown
     */
    export function getIsActive(ped: number | IPed, taskIndex: number): boolean {
        return GetIsTaskActive(ped, taskIndex);
    }

    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0xCB4E8BE8A0063C5D | Since: 323 | API-Set: unknown
     */
    export function getIsWaypointRecordingLoaded(name: string): boolean {
        return GetIsWaypointRecordingLoaded(name);
    }

    /**
     * Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
     * Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
     * Looks like the native returns an int for the path's state:
     * 1 - ???
     * 2 - ???
     * 3 - Finished Generating
     *
     * Hash: 0xC6F5C0BCDC74D62D | Since: 323 | API-Set: unknown
     */
    export function getNavmeshRouteDistanceRemaining(ped: number | IPed): [number, number, boolean] {
        return GetNavmeshRouteDistanceRemaining(ped);
    }

    /**
     * See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
     *
     * Hash: 0x632E831F382A0FA8 | Since: 323 | API-Set: unknown
     */
    export function getNavmeshRouteResult(ped: number | IPed): number {
        return GetNavmeshRouteResult(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x52F734CEBE20DFBA | Since: 2545 | API-Set: unknown
     */
    export function getPatrolInfo(ped: number | IPed): [boolean, number, number] {
        return Citizen.invokeNative('0x52F734CEBE20DFBA', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8517D4A6CA8513ED | Since: 323 | API-Set: unknown
     */
    export function getPedDesiredMoveBlendRatio(ped: number | IPed): number {
        return GetPedDesiredMoveBlendRatio(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE6A877C64CAF1BC5 | Since: 323 | API-Set: unknown
     */
    export function getPedWaypointDistance(): number {
        return GetPedWaypointDistance(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2720AAA75001E094 | Since: 323 | API-Set: unknown
     */
    export function getPedWaypointProgress(ped: number | IPed): number {
        return GetPedWaypointProgress(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x47619ABE8B268C60 | Since: 323 | API-Set: unknown
     */
    export function getPhoneGestureAnimCurrentTime(ped: number | IPed): number {
        return GetPhoneGestureAnimCurrentTime(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1EE0F68A7C25DEC6 | Since: 323 | API-Set: unknown
     */
    export function getPhoneGestureAnimTotalTime(ped: number | IPed): number {
        return GetPhoneGestureAnimTotalTime(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x594A1028FC2A3E85 | Since: 323 | API-Set: unknown
     */
    export function getScriptedCoverPointCoords(coverpoint: number): Vector3 {
        return new Vector3(GetScriptedCoverPointCoords(coverpoint));
    }

    /**
     * Gets the status of a script-assigned task.
     * taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
     *
     * Hash: 0x77F1BEB8863288D5 | Since: 323 | API-Set: unknown
     */
    export function getScriptStatus(ped: number | IPed, taskHash: number | string): number {
        if (typeof taskHash === 'string') taskHash = misc.getHashKey(taskHash)
        return GetScriptTaskStatus(ped, taskHash);
    }

    /**
     * returned values:
     * 0 to 7 = task that's currently in progress, 0 meaning the first one.
     * -1 no task sequence in progress.
     *
     * Hash: 0x00A9010CFE1E3533 | Since: 323 | API-Set: unknown
     */
    export function getSequenceProgress(ped: number | IPed): number {
        return GetSequenceProgress(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB4F47213DF45A64C | Since: 323 | API-Set: unknown
     */
    export function getMoveNetworkEvent(ped: number | IPed, eventName: string): boolean {
        return GetTaskMoveNetworkEvent(ped, eventName);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA7FFBA498E4AAF67 | Since: 323 | API-Set: unknown
     */
    export function getMoveNetworkSignalBool(ped: number | IPed, signalName: string): boolean {
        return GetTaskMoveNetworkSignalBool(ped, signalName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x44AB0B3AFECCE242 | Since: 1493 | API-Set: unknown
     */
    export function getMoveNetworkSignalFloat(ped: number | IPed, signalName: string): number {
        return GetTaskMoveNetworkSignalFloat(ped, signalName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x717E4D1F2048376D | Since: 323 | API-Set: unknown
     */
    export function getMoveNetworkState(ped: number | IPed): string {
        return GetTaskMoveNetworkState(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9D252648778160DF | Since: 1868 | API-Set: unknown
     */
    export function getRappelDownWallState(ped: number | IPed): number {
        return Citizen.invokeNative('0x9D252648778160DF', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9824CFF8FC66E159 | Since: 323 | API-Set: unknown
     */
    export function getVehicleWaypointProgress(vehicle: number | IVehicle): number {
        return GetVehicleWaypointProgress(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x416B62AC8B9E5BBD | Since: 323 | API-Set: unknown
     */
    export function getVehicleWaypointTargetPoint(vehicle: number | IVehicle): number {
        return GetVehicleWaypointTargetPoint(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA5B769058763E497 | Since: 323 | API-Set: unknown
     */
    export function getWaypointDistanceAlongRoute(name: string, point: number): number {
        return GetWaypointDistanceAlongRoute(name, point);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3E38E28A1D80DDF6 | Since: 323 | API-Set: unknown
     */
    export function isControlledVehicleUnableToGetToRoad(ped: number | IPed): boolean {
        return Citizen.invokeNative('0x3E38E28A1D80DDF6', ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8785E6E40C7A8818 | Since: 323 | API-Set: unknown
     */
    export function isDrivebyUnderneathDrivingTask(ped: number | IPed): boolean {
        return IsDrivebyTaskUnderneathDrivingTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA320EF046186FA3B | Since: 323 | API-Set: unknown
     */
    export function isMountedWeaponUnderneathDrivingTask(ped: number | IPed): boolean {
        return IsMountedWeaponTaskUnderneathDrivingTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD4D8636C0199A939 | Since: 323 | API-Set: unknown
     */
    export function isMoveBlendRatioRunning(ped: number | IPed): boolean {
        return IsMoveBlendRatioRunning(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x24A2AD74FA9814E2 | Since: 323 | API-Set: unknown
     */
    export function isMoveBlendRatioSprinting(ped: number | IPed): boolean {
        return IsMoveBlendRatioSprinting(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x349CE7B56DAFD95C | Since: 323 | API-Set: unknown
     */
    export function isMoveBlendRatioStill(ped: number | IPed): boolean {
        return IsMoveBlendRatioStill(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF133BBBE91E1691F | Since: 323 | API-Set: unknown
     */
    export function isMoveBlendRatioWalking(ped: number | IPed): boolean {
        return IsMoveBlendRatioWalking(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAA135F9482C82CC3 | Since: 323 | API-Set: unknown
     */
    export function isPedActiveInScenario(ped: number | IPed): boolean {
        return IsPedActiveInScenario(ped);
    }

    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x90A09F3A45FED688 | Since: 323 | API-Set: unknown
     */
    export function isPedBeingArrested(ped: number | IPed): boolean {
        return IsPedBeingArrested(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x74E559B3BC910685 | Since: 323 | API-Set: unknown
     */
    export function isPedCuffed(ped: number | IPed): boolean {
        return IsPedCuffed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2A74E1D5F2F00EEC | Since: 323 | API-Set: unknown
     */
    export function isPedGettingUp(ped: number | IPed): boolean {
        return IsPedGettingUp(ped);
    }

    /**
     * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
     * Returns `true` if the ped is in writhe, `false` otherwise.
     *
     * Hash: 0xDEB6D52126E7D640 | Since: 323 | API-Set: unknown
     */
    export function isPedInWrithe(ped: number | IPed): boolean {
        return IsPedInWrithe(ped);
    }

    /**
     * Used only once (am_mp_property_int)
     *
     * ped was PLAYER_PED_ID()
     *
     * Related to CTaskAmbientClips.
     *
     * Hash: 0x621C6E4729388E41 | Since: 323 | API-Set: unknown
     */
    export function isPedPlayingBaseClipInScenario(ped: number | IPed): boolean {
        return IsPedPlayingBaseClipInScenario(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC5286FFC176F28A2 | Since: 323 | API-Set: unknown
     */
    export function isPedRunning(ped: number | IPed): boolean {
        return IsPedRunning(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3DC52677769B4AE0 | Since: 323 | API-Set: unknown
     */
    export function isPedRunningArrest(ped: number | IPed): boolean {
        return IsPedRunningArrestTask(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x57E457CD2C0FC168 | Since: 323 | API-Set: unknown
     */
    export function isPedSprinting(ped: number | IPed): boolean {
        return IsPedSprinting(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAC29253EEF8F0180 | Since: 323 | API-Set: unknown
     */
    export function isPedStill(ped: number | IPed): boolean {
        return IsPedStill(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE45B7F222DE47E09 | Since: 323 | API-Set: unknown
     */
    export function isPedStrafing(ped: number | IPed): boolean {
        return IsPedStrafing(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDE4C184B2B9B071A | Since: 323 | API-Set: unknown
     */
    export function isPedWalking(ped: number | IPed): boolean {
        return IsPedWalking(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8EBB1E9D3588C10 | Since: 323 | API-Set: unknown
     */
    export function isPlayingPhoneGestureAnim(ped: number | IPed): boolean {
        return IsPlayingPhoneGestureAnim(ped);
    }

    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Occurrences in the b617d scripts:
     *
     * "ARMY_GUARD",
     * "ARMY_HELI",
     * "BLIMP",
     * "Cinema_Downtown",
     * "Cinema_Morningwood",
     * "Cinema_Textile",
     * "City_Banks",
     * "Countryside_Banks",
     * "DEALERSHIP",
     * "KORTZ_SECURITY",
     * "LSA_Planes",
     * "MP_POLICE",
     * "Observatory_Bikers",
     * "POLICE_POUND1",
     * "POLICE_POUND2",
     * "POLICE_POUND3",
     * "POLICE_POUND4",
     * "POLICE_POUND5",
     * "Rampage1",
     * "SANDY_PLANES",
     * "SCRAP_SECURITY",
     * "SEW_MACHINE",
     * "SOLOMON_GATE"
     *
     * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
     * `if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {`
     * `else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {`
     *
     * Hash: 0x367A09DED4E05B99 | Since: 323 | API-Set: unknown
     */
    export function isScenarioGroupEnabled(scenarioGroup: string): boolean {
        return IsScenarioGroupEnabled(scenarioGroup);
    }

    /**
     * No comment provided
     *
     * Hash: 0x788756D73AC2E07C | Since: 323 | API-Set: unknown
     */
    export function isScenarioOccupied(pos: Vector3, maxRange: number, onlyUsersActuallyAtScenario: boolean): boolean {
        return IsScenarioOccupied(pos.x, pos.y, pos.z, maxRange, onlyUsersActuallyAtScenario);
    }

    /**
     * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     * Occurrences in the b617d scripts:
     * "PROP_HUMAN_SEAT_CHAIR",
     * "WORLD_HUMAN_DRINKING",
     * "WORLD_HUMAN_HANG_OUT_STREET",
     * "WORLD_HUMAN_SMOKING",
     * "WORLD_MOUNTAIN_LION_WANDER",
     * "WORLD_HUMAN_DRINKING"
     *
     * `Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.`
     *
     * `scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.`
     *
     *
     * Hash: 0x3A815DB3EA088722 | Since: 323 | API-Set: unknown
     */
    export function isScenarioTypeEnabled(scenarioType: string): boolean {
        return IsScenarioTypeEnabled(scenarioType);
    }

    /**
     * No comment provided
     *
     * Hash: 0x921CE12C489C4C41 | Since: 323 | API-Set: unknown
     */
    export function isMoveNetworkActive(ped: number | IPed): boolean {
        return IsTaskMoveNetworkActive(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x30ED88D5E0C56A37 | Since: 323 | API-Set: unknown
     */
    export function isMoveNetworkReadyForTransition(ped: number | IPed): boolean {
        return IsTaskMoveNetworkReadyForTransition(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE03B3F2D3DC59B64 | Since: 323 | API-Set: unknown
     */
    export function isWaypointPlaybackGoingOnForPed(ped: number | IPed): boolean {
        return IsWaypointPlaybackGoingOnForPed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF5134943EA29868C | Since: 323 | API-Set: unknown
     */
    export function isWaypointPlaybackGoingOnForVehicle(vehicle: number | IVehicle): boolean {
        return IsWaypointPlaybackGoingOnForVehicle(vehicle);
    }

    /**
     * patrolRoutes found in the b617d scripts:
     * "miss_Ass0",
     * "miss_Ass1",
     * "miss_Ass2",
     * "miss_Ass3",
     * "miss_Ass4",
     * "miss_Ass5",
     * "miss_Ass6",
     * "MISS_PATROL_6",
     * "MISS_PATROL_7",
     * "MISS_PATROL_8",
     * "MISS_PATROL_9",
     * "miss_Tower_01",
     * "miss_Tower_02",
     * "miss_Tower_03",
     * "miss_Tower_04",
     * "miss_Tower_05",
     * "miss_Tower_06",
     * "miss_Tower_07",
     * "miss_Tower_08",
     * "miss_Tower_10"
     *
     * Hash: 0xA36BFB5EE89F3D82 | Since: 323 | API-Set: unknown
     */
    export function openPatrolRoute(patrolRoute: string): void {
        OpenPatrolRoute(patrolRoute);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE8854A4326B9E12B | Since: 323 | API-Set: unknown
     */
    export function openSequence(): number {
        return OpenSequenceTask();
    }

    /**
     * No comment provided
     *
     * Hash: 0x295E3CCEC879CCD7 | Since: 323 | API-Set: unknown
     */
    export function pedHasUseScenario(ped: number | IPed): boolean {
        return PedHasUseScenarioTask(ped);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x748040460F8DF5DC | Since: 323 | API-Set: unknown
     */
    export function playAnimOnRunningScenario(ped: number | IPed, animDict: string, animName: string): void {
        PlayAnimOnRunningScenario(ped, animDict, animName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77A1EEC547E7FCF1 | Since: 323 | API-Set: unknown
     */
    export function playEntityScriptedAnim(entity: number | IEntity, blendInDelta: number, blendOutDelta: number): [number, number, number] {
        return PlayEntityScriptedAnim(entity, blendInDelta, blendOutDelta);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDB6708C0B46F56D8 | Since: 323 | API-Set: unknown
     */
    export function removeAllCoverBlockingAreas(): void {
        RemoveAllCoverBlockingAreas();
    }

    /**
     * No comment provided
     *
     * Hash: 0xFA83CA6776038F64 | Since: 1493 | API-Set: unknown
     */
    export function removeCoverBlockingAreasAtPosition(pos: Vector3): void {
        Citizen.invokeNative('0xFA83CA6776038F64', pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xAE287C923D891715 | Since: 323 | API-Set: unknown
     */
    export function removeCoverPoint(coverpoint: number): void {
        RemoveCoverPoint(coverpoint);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1F351CF1C6475734 | Since: 505 | API-Set: unknown
     */
    export function removeSpecificCoverBlockingAreas(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void {
        Citizen.invokeNative('0x1F351CF1C6475734', startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
    }

    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0xFF1B8B4AA1C25DC8 | Since: 323 | API-Set: unknown
     */
    export function removeWaypointRecording(name: string): void {
        RemoveWaypointRecording(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD01015C7316AE176 | Since: 323 | API-Set: unknown
     */
    export function requestMoveNetworkStateTransition(ped: number | IPed, name: string): boolean {
        return RequestTaskMoveNetworkStateTransition(ped, name);
    }

    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Max number of loaded recordings is 32.
     *
     * Hash: 0x9EEFB62EB27B5792 | Since: 323 | API-Set: unknown
     */
    export function requestWaypointRecording(name: string): void {
        RequestWaypointRecording(name);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4202BBCB8684563D | Since: 323 | API-Set: unknown
     */
    export function resetExclusiveScenarioGroup(): void {
        ResetExclusiveScenarioGroup();
    }

    /**
     * No comment provided
     *
     * Hash: 0xDD902D0349AFAD3A | Since: 323 | API-Set: unknown
     */
    export function resetScenarioGroupsEnabled(): void {
        ResetScenarioGroupsEnabled();
    }

    /**
     * No comment provided
     *
     * Hash: 0x0D40EE2A7F2B2D6D | Since: 323 | API-Set: unknown
     */
    export function resetScenarioTypesEnabled(): void {
        ResetScenarioTypesEnabled();
    }

    /**
     * No comment provided
     *
     * Hash: 0x70033C3CC29A1FF4 | Since: 323 | API-Set: unknown
     */
    export function setAnimLooped(entity: number | IEntity, looped: boolean, priority: number, secondary: boolean): void {
        SetAnimLooped(entity, looped, priority, secondary);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDDF3CB5A0A4C0B49 | Since: 2372 | API-Set: unknown
     */
    export function setAnimPhase(entity: number | IEntity, phase: number, priority: number, secondary: boolean): void {
        SetAnimPhase(entity, phase, priority, secondary);
    }

    /**
     * No comment provided
     *
     * Hash: 0x032D49C5E359C847 | Since: 323 | API-Set: unknown
     */
    export function setAnimRate(entity: number | IEntity, rate: number, priority: number, secondary: boolean): void {
        SetAnimRate(entity, rate, priority, secondary);
    }

    /**
     * No comment provided
     *
     * Hash: 0x207F1A47C0342F48 | Since: 323 | API-Set: unknown
     */
    export function setAnimWeight(entity: number | IEntity, weight: number, priority: number, index: number, secondary: boolean): void {
        SetAnimWeight(entity, weight, priority, index, secondary);
    }

    /**
     * For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
     *
     * Hash: 0xE5B302114D8162EE | Since: 323 | API-Set: unknown
     */
    export function setDrivebyTarget(shootingPed: number | IPed, targetPed: number | IPed, targetVehicle: number | IVehicle, pos: Vector3): void {
        SetDrivebyTaskTarget(shootingPed, targetPed, targetVehicle, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5C9B84BD7D31D908 | Since: 323 | API-Set: unknown
     */
    export function setDriveCruiseSpeed(driver: number | IPed, cruiseSpeed: number): void {
        SetDriveTaskCruiseSpeed(driver, cruiseSpeed);
    }

    /**
     * This native is used to set the driving style for specific ped.
     *
     * Driving styles id seems to be:
     * 786468
     * 262144
     * 786469
     *
     * http://gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0xDACE1BE37D88AF67 | Since: 323 | API-Set: unknown
     */
    export function setDriveDrivingStyle(ped: number | IPed, drivingStyle: number): void {
        SetDriveTaskDrivingStyle(ped, drivingStyle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x404A5AA9B9F0B746 | Since: 323 | API-Set: unknown
     */
    export function setDriveMaxCruiseSpeed(ped: number | IPed, speed: number, updateBaseTask: boolean): void {
        SetDriveTaskMaxCruiseSpeed(ped, speed, updateBaseTask);
    }

    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Groups found in the scripts used with this native:
     *
     * "AMMUNATION",
     * "QUARRY",
     * "Triathlon_1",
     * "Triathlon_2",
     * "Triathlon_3"
     *
     * Hash: 0x535E97E1F7FC0C6A | Since: 323 | API-Set: unknown
     */
    export function setExclusiveScenarioGroup(scenarioGroup: string): void {
        SetExclusiveScenarioGroup(scenarioGroup);
    }

    /**
     * Used only once in the scripts (fm_mission_controller) like so:
     *
     * `TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting");`
     *
     * Hash: 0xAB13A5565480B6D9 | Since: 323 | API-Set: unknown
     */
    export function setExpectedCloneNextMoveNetworkState(ped: number | IPed, state: string): boolean {
        return Citizen.invokeNative('0xAB13A5565480B6D9', ped, state);
    }

    /**
     * Needs to be looped! And yes, it does work and is not a hash collision.
     * Birds will try to reach the given height.
     *
     * Hash: 0x6C6B148586F934F7 | Since: 323 | API-Set: unknown
     */
    export function setGlobalMinBirdFlightHeight(height: number): void {
        SetGlobalMinBirdFlightHeight(height);
    }

    /**
     * Makes the ped ragdoll like when falling from a great height
     *
     * Hash: 0x8C825BDC7741D37C | Since: 323 | API-Set: unknown
     */
    export function setHighFall(ped: number | IPed, minTime: number, maxTime: number, entryType: number): void {
        SetHighFallTask(ped, minTime, maxTime, entryType);
    }

    /**
     * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
     *
     * Hash: 0xCCD892192C6D2BB9 | Since: 323 | API-Set: unknown
     */
    export function setMountedWeaponTarget(shootingPed: number | IPed, targetPed: number | IPed, targetVehicle: number | IVehicle, pos: Vector3, taskMode: number, ignoreTargetVehDeadCheck: boolean): void {
        SetMountedWeaponTarget(shootingPed, targetPed, targetVehicle, pos.x, pos.y, pos.z, taskMode, ignoreTargetVehDeadCheck);
    }

    /**
     * This native does absolutely nothing, just a nullsub
     *
     * R* Comment:
     * SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
     *
     * Hash: 0xF1B9F16E89E2C93A | Since: 323 | API-Set: unknown
     */
    export function setNextDesiredMoveState(nextMoveState: number): void {
        SetNextDesiredMoveState(nextMoveState);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC313379AF0FCEDA7 | Since: 323 | API-Set: unknown
     */
    export function setParachuteTarget(ped: number | IPed, pos: Vector3): void {
        SetParachuteTaskTarget(ped, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0729BAC1B8C64317 | Since: 323 | API-Set: unknown
     */
    export function setParachuteThrust(ped: number | IPed, thrust: number): void {
        SetParachuteTaskThrust(ped, thrust);
    }

    /**
     * Appears only in fm_mission_controller and used only 3 times.
     *
     * ped was always PLAYER_PED_ID()
     * p1 was always true
     * p2 was always true
     *
     * Hash: 0x8FD89A6240813FD0 | Since: 323 | API-Set: unknown
     */
    export function setPedCanPlayAmbientIdles(ped: number | IPed, blockIdleClips: boolean, removeIdleClipIfPlaying: boolean): void {
        SetPedCanPlayAmbientIdles(ped, blockIdleClips, removeIdleClipIfPlaying);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1E982AC8716912C5 | Since: 323 | API-Set: unknown
     */
    export function setPedDesiredMoveBlendRatio(ped: number | IPed, newMoveBlendRatio: number): void {
        SetPedDesiredMoveBlendRatio(ped, newMoveBlendRatio);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4455517B28441E60 | Since: 323 | API-Set: unknown
     */
    export function setPedPathAvoidFire(ped: number | IPed, avoidFire: boolean): void {
        SetPedPathAvoidFire(ped, avoidFire);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE361C5C71C431A4F | Since: 323 | API-Set: unknown
     */
    export function setPedPathCanDropFromHeight(ped: number | IPed, Toggle: boolean): void {
        SetPedPathCanDropFromHeight(ped, Toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8E06A6FE76C9EFF4 | Since: 323 | API-Set: unknown
     */
    export function setPedPathCanUseClimbovers(ped: number | IPed, Toggle: boolean): void {
        SetPedPathCanUseClimbovers(ped, Toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x77A5B103C87F476E | Since: 323 | API-Set: unknown
     */
    export function setPedPathCanUseLadders(ped: number | IPed, Toggle: boolean): void {
        SetPedPathCanUseLadders(ped, Toggle);
    }

    /**
     * Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
     *
     * Hash: 0x88E32DB8C1A4AA4B | Since: 323 | API-Set: unknown
     */
    export function setPedPathClimbCostModifier(ped: number | IPed, modifier: number): void {
        SetPedPathClimbCostModifier(ped, modifier);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF35425A4204367EC | Since: 323 | API-Set: unknown
     */
    export function setPedPathMayEnterWater(ped: number | IPed, mayEnterWater: boolean): void {
        SetPedPathMayEnterWater(ped, mayEnterWater);
    }

    /**
     * No comment provided
     *
     * Hash: 0x38FE1EC73743793C | Since: 323 | API-Set: unknown
     */
    export function setPedPathPreferToAvoidWater(ped: number | IPed, avoidWater: boolean): void {
        SetPedPathPreferToAvoidWater(ped, avoidWater);
    }

    /**
     * No comment provided
     *
     * Hash: 0x686ECCD99D4E61BB | Since: 3570 | API-Set: unknown
     */
    export function setPedWaypointProgress(ped: number | IPed, progress: number): void {
        Citizen.invokeNative('0x686ECCD99D4E61BB', ped, progress);
    }

    /**
     * No comment provided
     *
     * Hash: 0xED98E10B0AFCE4B4 | Since: 323 | API-Set: unknown
     */
    export function setPedWaypointRouteOffset(ped: number | IPed, pos: Vector3): boolean {
        return SetPedWaypointRouteOffset(ped, pos.x, pos.y, pos.z);
    }

    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU
     *
     * Hash: 0x02C8E5B49848664E | Since: 323 | API-Set: unknown
     */
    export function setScenarioGroupEnabled(scenarioGroup: string, enabled: boolean): void {
        SetScenarioGroupEnabled(scenarioGroup, enabled);
    }

    /**
     * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     * seems to enable/disable specific scenario-types from happening in the game world.
     *
     * Here are some scenario types from the scripts:
     * "WORLD_MOUNTAIN_LION_REST"
     * "WORLD_MOUNTAIN_LION_WANDER"
     * "DRIVE"
     * "WORLD_VEHICLE_POLICE_BIKE"
     * "WORLD_VEHICLE_POLICE_CAR"
     * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
     * "WORLD_VEHICLE_DRIVE_SOLO"
     * "WORLD_VEHICLE_BIKER"
     * "WORLD_VEHICLE_DRIVE_PASSENGERS"
     * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
     * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
     * "PROP_HUMAN_SEAT_CHAIR"
     * "WORLD_VEHICLE_ATTRACTOR"
     * "WORLD_HUMAN_LEANING"
     * "WORLD_HUMAN_HANG_OUT_STREET"
     * "WORLD_HUMAN_DRINKING"
     * "WORLD_HUMAN_SMOKING"
     * "WORLD_HUMAN_GUARD_STAND"
     * "WORLD_HUMAN_CLIPBOARD"
     * "WORLD_HUMAN_HIKER"
     * "WORLD_VEHICLE_EMPTY"
     * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
     * "WORLD_HUMAN_PAPARAZZI"
     * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
     * "WORLD_VEHICLE_PARK_PARALLEL"
     * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
     * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
     * "WORLD_VEHICLE_TRUCK_LOGS"
     *
     * `scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.`
     *
     * Hash: 0xEB47EC4E34FB7EE1 | Since: 323 | API-Set: unknown
     */
    export function setScenarioTypeEnabled(scenarioType: string, toggle: boolean): void {
        SetScenarioTypeEnabled(scenarioType, toggle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF5D1F489147CB683 | Since: 3570 | API-Set: unknown
     */
    export function setSequencePreventMigration(taskSequenceId: number): void {
        Citizen.invokeNative('0xF5D1F489147CB683', taskSequenceId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58C70CF3A41E4AE7 | Since: 323 | API-Set: unknown
     */
    export function setSequenceToRepeat(taskSequenceId: number, repeat: boolean): void {
        SetSequenceToRepeat(taskSequenceId, repeat);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8423541E8B3A1589 | Since: 1493 | API-Set: unknown
     */
    export function setMoveNetworkAnimSet(ped: number | IPed, clipSet: number | string, variableClipSet: number | string): void {
        if (typeof clipSet === 'string') clipSet = misc.getHashKey(clipSet)
        if (typeof variableClipSet === 'string') variableClipSet = misc.getHashKey(variableClipSet)
        Citizen.invokeNative('0x8423541E8B3A1589', ped, clipSet, variableClipSet);
    }

    /**
     * Doesn't actually return anything.
     *
     * Hash: 0x0FFB3C758E8C07B9 | Since: 2060 | API-Set: unknown
     */
    export function setMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(ped: number | IPed, enable: boolean): boolean {
        return Citizen.invokeNative('0x0FFB3C758E8C07B9', ped, enable);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB0A6CFD2C69C1088 | Since: 323 | API-Set: unknown
     */
    export function setMoveNetworkSignalBool(ped: number | IPed, signalName: string, value: boolean): void {
        SetTaskMoveNetworkSignalBool(ped, signalName, value);
    }

    /**
     * signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
     * p2 - From what i can see it goes up to 1f (maybe).
     *
     * `Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);`
     *
     * Hash: 0xD5BB4025AE449A4E | Since: 323 | API-Set: unknown
     */
    export function setMoveNetworkSignalFloat(ped: number | IPed, signalName: string, value: number): void {
        SetTaskMoveNetworkSignalFloat(ped, signalName, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8634CEF2522D987B | Since: 1493 | API-Set: unknown
     */
    export function setMoveNetworkSignalFloatLerpRate(ped: number | IPed, signalName: string, value: number): void {
        Citizen.invokeNative('0x8634CEF2522D987B', ped, signalName, value);
    }

    /**
     * No comment provided
     *
     * Hash: 0x373EF409B82697A3 | Since: 1493 | API-Set: unknown
     */
    export function setMoveNetworkSignalLocalFloat(ped: number | IPed, signalName: string, value: number): void {
        SetTaskMoveNetworkSignalFloat2(ped, signalName, value);
    }

    /**
     * Flag 8: Medium-aggressive boxing tactic with a bit of PIT
     * Flag 1: Aggressive ramming of suspect
     * Flag 2: Ram attempts
     * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
     * Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
     *
     * Hash: 0xCC665AAC360D31E7 | Since: 323 | API-Set: unknown
     */
    export function setVehicleChaseBehaviorFlag(ped: number | IPed, flag: number, _set: boolean): void {
        SetTaskVehicleChaseBehaviorFlag(ped, flag, _set);
    }

    /**
     * No comment provided
     *
     * Hash: 0x639B642FACBE4EDD | Since: 323 | API-Set: unknown
     */
    export function setVehicleChaseIdealPursuitDistance(ped: number | IPed, distance: number): void {
        SetTaskVehicleChaseIdealPursuitDistance(ped, distance);
    }

    /**
     * Looks like p1 may be a flag, still need to do some research, though.
     *
     * Hash: 0xEE08C992D238C5D1 | Since: 323 | API-Set: unknown
     */
    export function stopAnimPlayback(entity: number | IEntity, priority: number, secondary: boolean): void {
        StopAnimPlayback(entity, priority, secondary);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x97FF36A1D40EA00A | Since: 323 | API-Set: unknown
     */
    export function stopAnim(entity: number | IEntity, animDictionary: string, animationName: string, blendDelta: number): void {
        StopAnimTask(entity, animDictionary, animationName, blendDelta);
    }

    /**
     * Makes the specified ped achieve the specified heading.
     *
     * pedHandle: The handle of the ped to assign the task to.
     * heading: The desired heading.
     * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
     *
     * Hash: 0x93B93A37987F1F3D | Since: 323 | API-Set: unknown
     */
    export function achieveHeading(ped: number | IPed, heading: number, timeout: number): void {
        TaskAchieveHeading(ped, heading, timeout);
    }

    /**
     * No comment provided
     *
     * Hash: 0x19D1B791CB3670FE | Since: 877 | API-Set: unknown
     */
    export function agitatedActionConfrontResponse(ped: number | IPed, ped2: number | IPed): void {
        TaskAgitatedAction(ped, ped2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6671F3EEC681BDA1 | Since: 323 | API-Set: unknown
     */
    export function aimGunAtCoord(ped: number | IPed, pos: Vector3, time: number, instantBlendToAim: boolean, playAnimIntro: boolean): void {
        TaskAimGunAtCoord(ped, pos.x, pos.y, pos.z, time, instantBlendToAim, playAnimIntro);
    }

    /**
     * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
     *
     * Hash: 0x9B53BB6E8943AF53 | Since: 323 | API-Set: unknown
     */
    export function aimGunAtEntity(ped: number | IPed, entity: number | IEntity, duration: number, instantBlendToAim: boolean): void {
        TaskAimGunAtEntity(ped, entity, duration, instantBlendToAim);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7A192BE16D373D00 | Since: 323 | API-Set: unknown
     */
    export function aimGunScripted(ped: number | IPed, scriptTask: number | string, disableBlockingClip: boolean, instantBlendToAim: boolean): void {
        if (typeof scriptTask === 'string') scriptTask = misc.getHashKey(scriptTask)
        TaskAimGunScripted(ped, scriptTask, disableBlockingClip, instantBlendToAim);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8605AF0DE8B3A5AC | Since: 323 | API-Set: unknown
     */
    export function aimGunScriptedWithTarget(ped: number | IPed, target: number | IPed, pos: Vector3, gunTaskType: number, disableBlockingClip: boolean, forceAim: boolean): void {
        TaskAimGunScriptedWithTarget(ped, target, pos.x, pos.y, pos.z, gunTaskType, disableBlockingClip, forceAim);
    }

    /**
     * Example from "me_amanda1.ysc.c4":
     * `TASK::TASK_ARREST_PED(l_19F \/\* This is a Ped \*\/ , PLAYER::PLAYER_PED_ID());`
     *
     * Example from "armenian1.ysc.c4":
     * `if (!PED::IS_PED_INJURED(l_B18[0\/\*1\*\/])) {`
     * `TASK::TASK_ARREST_PED(l_B18[0\/\*1\*\/], PLAYER::PLAYER_PED_ID());`
     * }
     *
     * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
     *
     *
     * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
     *
     * Hash: 0xF3B9A78A178572B1 | Since: 323 | API-Set: unknown
     */
    export function arrestPed(ped: number | IPed, target: number | IPed): void {
        TaskArrestPed(ped, target);
    }

    /**
     * `You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.`
     *
     * Working example
     * `float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));`
     * `TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);`
     * `PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);`
     *
     * P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
     *
     * Hash: 0x15C86013127CE63F | Since: 323 | API-Set: unknown
     */
    export function boatMission(pedDriver: number | IPed, vehicle: number | IVehicle, targetVehicle: number | IVehicle, targetPed: number | IPed, pos: Vector3, mission: number, maxSpeed: number, drivingStyle: number, targetReached: number, boatFlags: any): void {
        TaskBoatMission(pedDriver, vehicle, targetVehicle, targetPed, pos.x, pos.y, pos.z, mission, maxSpeed, drivingStyle, targetReached, boatFlags);
    }

    /**
     * p2 tend to be 16, 17 or 1
     * p3 to p7 tend to be 0.0
     *
     * Hash: 0x8C338E0263E4FD19 | Since: 323 | API-Set: unknown
     */
    export function chatToPed(ped: number | IPed, target: number | IPed, flags: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, headingDegs: number, idleTime: number): void {
        TaskChatToPed(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime);
    }

    /**
     * No comment provided
     *
     * Hash: 0x95A6C46A31D1917D | Since: 323 | API-Set: unknown
     */
    export function clearDefensiveArea(ped: number | IPed): void {
        TaskClearDefensiveArea(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F804F1DB19B9689 | Since: 323 | API-Set: unknown
     */
    export function clearLookAt(ped: number | IPed): void {
        TaskClearLookAt(ped);
    }

    /**
     * Climbs or vaults the nearest thing.
     * usePlayerLaunchForce is unused.
     *
     * Hash: 0x89D9FCC2435112F1 | Since: 323 | API-Set: unknown
     */
    export function climb(ped: number | IPed, usePlayerLaunchForce: boolean): void {
        TaskClimb(ped, usePlayerLaunchForce);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB6C987F9285A3814 | Since: 323 | API-Set: unknown
     */
    export function climbLadder(ped: number | IPed, fast: boolean): void {
        TaskClimbLadder(ped, fast);
    }

    /**
     * Despite its name, it only attacks ONE hated target. The one closest hated target.
     *
     * p2 seems to be always 0
     *
     * Hash: 0x7BF835BB9E2698C8 | Since: 323 | API-Set: unknown
     */
    export function combatHatedTargetsAroundPed(ped: number | IPed, radius: number, combatFlags: number): void {
        TaskCombatHatedTargetsAroundPed(ped, radius, combatFlags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2BBA30B854534A0C | Since: 323 | API-Set: unknown
     */
    export function combatHatedTargetsAroundPedTimed(ped: number | IPed, radius: number, time: number, combatFlags: number): void {
        TaskCombatHatedTargetsAroundPedTimed(ped, radius, time, combatFlags);
    }

    /**
     * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
     *
     * Hash: 0x4CF5F55DAC3280A0 | Since: 323 | API-Set: unknown
     */
    export function combatHatedTargetsInArea(ped: number | IPed, pos: Vector3, radius: number, combatFlags: number): void {
        TaskCombatHatedTargetsInArea(ped, pos.x, pos.y, pos.z, radius, combatFlags);
    }

    /**
     * Makes the specified ped attack the target ped.
     * p2 should be 0
     * p3 should be 16
     *
     * Hash: 0xF166E48407BAC484 | Since: 323 | API-Set: unknown
     */
    export function combatPed(ped: number | IPed, targetPed: number | IPed, combatFlags: number, threatResponseFlags: number): void {
        TaskCombatPed(ped, targetPed, combatFlags, threatResponseFlags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x944F30DCB7096BDE | Since: 323 | API-Set: unknown
     */
    export function combatPedTimed(ped: number | IPed, target: number | IPed, time: number, flags: number): void {
        TaskCombatPedTimed(ped, target, time, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3EB1FE9E8E908E15 | Since: 323 | API-Set: unknown
     */
    export function cower(ped: number | IPed, duration: number): void {
        TaskCower(ped, duration);
    }

    /**
     * Example:
     *
     * `TASK::TASK_DRIVE_BY(l_467[1\/\*22\*\/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});`
     *
     *
     *
     *
     * Needs working example. Doesn't seem to do anything.
     *
     * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
     * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
     * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
     *
     * Hash: 0x2F8AF0E82773A171 | Since: 323 | API-Set: unknown
     */
    export function driveBy(driverPed: number | IPed, targetPed: number | IPed, targetVehicle: number | IVehicle, targetX: number, targetY: number, targetZ: number, distanceToShoot: number, pedAccuracy: number, pushUnderneathDrivingTaskIfDriving: boolean, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern);
    }

    /**
     * speed 1.0 = walk, 2.0 = run
     * p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
     * p6 is always 0
     *
     * Usage of seat
     * -1 = driver
     * 0 = passenger
     * 1 = left back seat
     * 2 = right back seat
     * 3 = outside left
     * 4 = outside right
     *
     * Hash: 0xC20E50AA46D09CA8 | Since: 323 | API-Set: unknown
     */
    export function enterVehicle(ped: number | IPed, vehicle: number | IVehicle, timeout: number, seat: number, speed: number, flag: number, overrideEntryClipsetName: string): void {
        TaskEnterVehicle(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7F93691AB4B92272 | Since: 323 | API-Set: unknown
     */
    export function everyoneLeaveVehicle(vehicle: number | IVehicle): void {
        TaskEveryoneLeaveVehicle(vehicle);
    }

    /**
     * p1 is 1, 2, or 3 in scripts
     *
     * Hash: 0x79B258E397854D29 | Since: 323 | API-Set: unknown
     */
    export function exitCover(ped: number | IPed, exitType: number, pos: Vector3): void {
        TaskExitCover(ped, exitType, pos.x, pos.y, pos.z);
    }

    /**
     * MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
     *
     * A maximum of 8 points can be added.
     *
     * Hash: 0x1E7889778264843A | Since: 323 | API-Set: unknown
     */
    export function extendRoute(pos: Vector3): void {
        TaskExtendRoute(pos.x, pos.y, pos.z);
    }

    /**
     * MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
     *
     * Hash: 0x841142A1376E9006 | Since: 323 | API-Set: unknown
     */
    export function flushRoute(): void {
        TaskFlushRoute();
    }

    /**
     * If no timeout, set timeout to -1.
     *
     * Hash: 0x15D3A79D4E44B913 | Since: 323 | API-Set: unknown
     */
    export function followNavMeshToCoord(ped: number | IPed, pos: Vector3, moveBlendRatio: number, time: number, targetRadius: number, flags: number, targetHeading: number): void {
        TaskFollowNavMeshToCoord(ped, pos.x, pos.y, pos.z, moveBlendRatio, time, targetRadius, flags, targetHeading);
    }

    /**
     * No comment provided
     *
     * Hash: 0x17F58B88D085DBAC | Since: 323 | API-Set: unknown
     */
    export function followNavMeshToCoordAdvanced(ped: number | IPed, pos: Vector3, moveBlendRatio: number, time: number, targetRadius: number, flags: number, slideToCoordHeading: number, maxSlopeNavigable: number, clampMaxSearchDistance: number, targetHeading: number): void {
        TaskFollowNavMeshToCoordAdvanced(ped, pos.x, pos.y, pos.z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading);
    }

    /**
     * MulleKD19: Makes the ped go on the created point route.
     *
     * ped: The ped to give the task to.
     * speed: The speed to move at in m/s.
     * int: Unknown. Can be 0, 1, 2 or 3.
     *
     * Example:
     * TASK_FLUSH_ROUTE();
     * TASK_EXTEND_ROUTE(0f, 0f, 70f);
     * TASK_EXTEND_ROUTE(10f, 0f, 70f);
     * TASK_EXTEND_ROUTE(10f, 10f, 70f);
     * TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
     *
     * Hash: 0x595583281858626E | Since: 323 | API-Set: unknown
     */
    export function followPointRoute(ped: number | IPed, speed: number, mode: number): void {
        TaskFollowPointRoute(ped, speed, mode);
    }

    /**
     * p6 always -1
     * p7 always 10.0
     * p8 always 1
     *
     * Hash: 0x304AE42E357B8C7E | Since: 323 | API-Set: unknown
     */
    export function followToOffsetOfEntity(ped: number | IPed, entity: number | IEntity, offsetX: number, offsetY: number, offsetZ: number, movementSpeed: number, timeout: number, stoppingRange: number, persistFollowing: boolean): void {
        TaskFollowToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0759591819534F7B | Since: 323 | API-Set: unknown
     */
    export function followWaypointRecording(ped: number | IPed, name: string): void {
        TaskFollowWaypointRecording(ped, name, 0, 0, 0);
    }

    /**
     * p2 always false
     *
     * [30/03/2017] ins1de :
     *
     * See FORCE_PED_MOTION_STATE
     *
     * Hash: 0x4F056E1AFFEF17AB | Since: 323 | API-Set: unknown
     */
    export function forceMotionState(ped: number | IPed, state: number | string, forceRestart: boolean): void {
        if (typeof state === 'string') state = misc.getHashKey(state)
        TaskForceMotionState(ped, state, forceRestart);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9C00E77AF14B2DFF | Since: 323 | API-Set: unknown
     */
    export function getOffBoat(ped: number | IPed, boat: number | IVehicle): void {
        TaskGetOffBoat(ped, boat);
    }

    /**
     * eg
     *
     * `TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);`
     *
     * ped = Ped you want to perform this task.
     * target = the Entity they should aim at.
     * distanceToStopAt = distance from the target, where the ped should stop to aim.
     * StartAimingDist = distance where the ped should start to aim.
     *
     * Hash: 0xA9DA48FAB8A76C12 | Since: 323 | API-Set: unknown
     */
    export function gotoEntityAiming(ped: number | IPed, target: number | IEntity, distanceToStopAt: number, StartAimingDist: number): void {
        TaskGotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist);
    }

    /**
     * enum ESEEK_ENTITY_OFFSET_FLAGS
     * {
     * ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
     * ESEEK_KEEP_TO_PAVEMENTS = 0x02
     * };
     *
     * Hash: 0xE39B4FF4FDEBDE27 | Since: 323 | API-Set: unknown
     */
    export function gotoEntityOffset(ped: number | IPed, entity: number | IEntity, time: number, seekRadius: number, seekAngleDeg: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void {
        TaskGotoEntityOffset(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x338E7EF52B6095A9 | Since: 323 | API-Set: unknown
     */
    export function gotoEntityOffsetXy(ped: number | IPed, entity: number | IEntity, duration: number, targetRadius: number, offsetX: number, offsetY: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void {
        TaskGotoEntityOffsetXy(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD76B57B44F1E6F8B | Since: 323 | API-Set: unknown
     */
    export function goStraightToCoord(ped: number | IPed, pos: Vector3, speed: number, timeout: number, targetHeading: number, distanceToSlide: number): void {
        TaskGoStraightToCoord(ped, pos.x, pos.y, pos.z, speed, timeout, targetHeading, distanceToSlide);
    }

    /**
     * No comment provided
     *
     * Hash: 0x61E360B7E040D12E | Since: 323 | API-Set: unknown
     */
    export function goStraightToCoordRelativeToEntity(ped: number | IPed, entity: number | IEntity, pos: Vector3, moveBlendRatio: number, time: number): void {
        TaskGoStraightToCoordRelativeToEntity(ped, entity, pos.x, pos.y, pos.z, moveBlendRatio, time);
    }

    /**
     * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
     *
     * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
     *
     * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
     *
     * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
     *
     * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
     *
     * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
     *
     * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
     *
     * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
     *
     * Example:
     *
     * enum AimFlag
     * {
     * AimAtFocusLocation,
     * AimAtGoToLocation
     * };
     *
     * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
     *
     * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
     *
     * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
     *
     * // 1st example
     * `TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f \/\*run\*\/, true \/\*shoot\*\/, 3.0f \/\*stop at\*\/, 0.0f \/\*noRoadsDistance\*\/, true \/\*always true\*\/, 0 \/\*possible flag\*\/, AimFlag::AimAtGoToLocation, -957453492 \/\*FullAuto pattern\*\/);`
     *
     * // 2nd example
     * `TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f \/\*walk\*\/, false \/\*don't shoot\*\/, 3.0f \/\*stop at\*\/, 0.0f \/\*noRoadsDistance\*\/, true \/\*always true\*\/, 0 \/\*possible flag\*\/, AimFlag::AimAtFocusLocation, -957453492 \/\*FullAuto pattern\*\/);`
     *
     *
     * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
     *
     * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
     *
     * Hash: 0xA55547801EB331FC | Since: 323 | API-Set: unknown
     */
    export function goToCoordAndAimAtHatedEntitiesNearCoord(pedHandle: number | IPed, goToLocationX: number, goToLocationY: number, goToLocationZ: number, focusLocationX: number, focusLocationY: number, focusLocationZ: number, speed: number, shootAtEnemies: boolean, distanceToStopAt: number, noRoadsDistance: number, useNavMesh: boolean, navFlags: number, taskFlags: number, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern);
    }

    /**
     * example from fm_mission_controller
     *
     * `TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);`
     *
     *
     * Hash: 0x5BC448CB78FA3E88 | Since: 323 | API-Set: unknown
     */
    export function goToCoordAnyMeans(ped: number | IPed, pos: Vector3, moveBlendRatio: number, vehicle: number | IVehicle, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number): void {
        TaskGoToCoordAnyMeans(ped, pos.x, pos.y, pos.z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets);
    }

    /**
     * No comment provided
     *
     * Hash: 0x1DD45F9ECFDB1BC9 | Since: 323 | API-Set: unknown
     */
    export function goToCoordAnyMeansExtraParams(ped: number | IPed, pos: Vector3, moveBlendRatio: number, vehicle: number | IVehicle, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, warpTimerMS: number): void {
        TaskGoToCoordAnyMeansExtraParams(ped, pos.x, pos.y, pos.z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB8ECD61F531A7B02 | Since: 323 | API-Set: unknown
     */
    export function goToCoordAnyMeansExtraParamsWithCruiseSpeed(ped: number | IPed, pos: Vector3, moveBlendRatio: number, vehicle: number | IVehicle, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, cruiseSpeed: number, targetArriveDist: number): void {
        TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, pos.x, pos.y, pos.z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist);
    }

    /**
     * movement_speed: mostly 2f, but also 1/1.2f, etc.
     * p8: always false
     * p9: 2f
     * p10: 0.5f
     * p11: true
     * p12: 0 / 512 / 513, etc.
     * p13: 0
     * firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
     *
     * Hash: 0x11315AB3385B8AC0 | Since: 323 | API-Set: unknown
     */
    export function goToCoordWhileAimingAtCoord(ped: number | IPed, pos: Vector3, aimAtX: number, aimAtY: number, aimAtZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskGoToCoordWhileAimingAtCoord(ped, pos.x, pos.y, pos.z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB2A16444EAD9AE47 | Since: 323 | API-Set: unknown
     */
    export function goToCoordWhileAimingAtEntity(ped: number | IPed, pos: Vector3, aimAtID: number | IEntity, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number | string, time: number): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskGoToCoordWhileAimingAtEntity(ped, pos.x, pos.y, pos.z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time);
    }

    /**
     * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
     *
     * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
     *
     * `Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)`
     *
     * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
     *
     * enum EGOTO_ENTITY_SCRIPT_FLAGS
     * {
     * EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
     * };
     *
     * Hash: 0x6A071245EB0D1882 | Since: 323 | API-Set: unknown
     */
    export function goToEntity(entity: number | IEntity, target: number | IEntity, duration: number, distance: number, moveBlendRatio: number, slowDownDistance: number, flags: number): void {
        TaskGoToEntity(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x04701832B739DCE5 | Since: 323 | API-Set: unknown
     */
    export function goToEntityWhileAimingAtCoord(ped: number | IPed, entity: number | IEntity, aimX: number, aimY: number, aimZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskGoToEntityWhileAimingAtCoord(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
    }

    /**
     * shootatEntity:
     * If true, peds will shoot at Entity till it is dead.
     * If false, peds will just walk till they reach the entity and will cease shooting.
     *
     * Hash: 0x97465886D35210E9 | Since: 323 | API-Set: unknown
     */
    export function goToEntityWhileAimingAtEntity(ped: number | IPed, entityToWalkTo: number | IEntity, entityToAimAt: number | IEntity, speed: number, shootatEntity: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskGoToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD2A207EEBDF9889B | Since: 323 | API-Set: unknown
     */
    export function guardAssignedDefensiveArea(ped: number | IPed, pos: Vector3, heading: number, maxPatrolProximity: number, timer: number): void {
        TaskGuardAssignedDefensiveArea(ped, pos.x, pos.y, pos.z, heading, maxPatrolProximity, timer);
    }

    /**
     * From re_prisonvanbreak:
     *
     * `TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);`
     *
     * Hash: 0x4A58A47A72E3FCB4 | Since: 323 | API-Set: unknown
     */
    export function guardCurrentPosition(ped: number | IPed, maxPatrolProximity: number, defensiveAreaRadius: number, setDefensiveArea: boolean): void {
        TaskGuardCurrentPosition(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea);
    }

    /**
     * No comment provided
     *
     * Hash: 0xC946FE14BE0EB5E2 | Since: 323 | API-Set: unknown
     */
    export function guardSphereDefensiveArea(ped: number | IPed, defendPositionX: number, defendPositionY: number, defendPositionZ: number, heading: number, maxPatrolProximity: number, time: number, pos: Vector3, defensiveAreaRadius: number): void {
        TaskGuardSphereDefensiveArea(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, pos.x, pos.y, pos.z, defensiveAreaRadius);
    }

    /**
     * In the scripts, p3 was always -1.
     *
     * p3 seems to be duration or timeout of turn animation.
     * Also facingPed can be 0 or -1 so ped will just raise hands up.
     *
     * Hash: 0xF2EAB31979A7F910 | Since: 323 | API-Set: unknown
     */
    export function handsUp(ped: number | IPed, duration: number, facingPed: number | IPed, timeToFacePed: number, flags: number): void {
        TaskHandsUp(ped, duration, facingPed, timeToFacePed, flags);
    }

    /**
     * Ped pilot should be in a heli.
     * EntityToFollow can be a vehicle or Ped.
     *
     * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
     *
     *
     * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
     *
     * Hash: 0xAC83B1DB38D0ADA0 | Since: 323 | API-Set: unknown
     */
    export function heliChase(pilot: number | IPed, entityToFollow: number | IEntity, pos: Vector3): void {
        TaskHeliChase(pilot, entityToFollow, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xB385523325077210 | Since: 1290 | API-Set: unknown
     */
    export function heliEscortHeli(pilot: number | IPed, heli1: number | IVehicle, heli2: number | IVehicle, offsetX: number, offsetY: number, offsetZ: number): void {
        TaskHeliEscortHeli(pilot, heli1, heli2, offsetX, offsetY, offsetZ);
    }

    /**
     * Must have targetVehicle, targetPed, OR destination X/Y/Z set
     * Will follow targeted vehicle/ped, or fly to destination
     * Set whichever is not being used to 0
     *
     *
     * Mission mode type:
     * - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
     * - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
     * - 8: Makes the heli flee from the ped/vehicle/coordinate
     * - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
     * - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
     * - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
     * - 20: Makes the heli land when near target ped. It won't resume chasing.
     * - 21: Emulates a helicopter crash
     * - 23: makes the heli circle erratically around ped
     *
     *
     * Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
     * You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.
     *
     * If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT.
     *
     * Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from
     *
     * Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.
     *
     * Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
     * 1: Forces heading to face E
     * 2: Unknown
     * 4: Tight circles around coordinate destination
     * 8: Unknown
     * 16: Circles around coordinate destination facing towards destination
     * 32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
     * 64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
     * 128: Unknown
     * 256: Unknown
     * 512: Unknown
     * 1024: Unknown
     * 2048: Reverses direction of circling (mission type 9) to clockwise
     * 4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
     * 8192: Unknown
     *
     * Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.
     *
     * Notes updated by PNWParksFan, May 2021
     *
     *
     * Hash: 0xDAD029E187A2BEB4 | Since: 323 | API-Set: unknown
     */
    export function heliMission(pilot: number | IPed, aircraft: number | IVehicle, targetVehicle: number | IVehicle, targetPed: number | IPed, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, maxSpeed: number, radius: number, targetHeading: number, maxHeight: number, minHeight: number, slowDownDistance: number, behaviorFlags: number): void {
        TaskHeliMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags);
    }

    /**
     * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
     *
     * v350: Ped ped, bool unused
     * v678: Ped ped, bool unused, bool flag1, bool flag2
     *
     * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
     *
     * Hash: 0x0AE4086104E067B1 | Since: 323 | API-Set: unknown
     */
    export function jump(ped: number | IPed, usePlayerLaunchForce: boolean, doSuperJump: boolean, useFullSuperJumpForce: boolean): void {
        TaskJump(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce);
    }

    /**
     * Flags are the same flags used in TASK_LEAVE_VEHICLE
     *
     * Hash: 0x504D54DF3F6F2247 | Since: 323 | API-Set: unknown
     */
    export function leaveAnyVehicle(ped: number | IPed, delayTime: number, flags: number): void {
        TaskLeaveAnyVehicle(ped, delayTime, flags);
    }

    /**
     * Flags from decompiled scripts:
     * 0 = normal exit and closes door.
     * 1 = normal exit and closes door.
     * 16 = teleports outside, door kept closed.
     * 64 = normal exit and closes door, maybe a bit slower animation than 0.
     * 256 = normal exit but does not close the door.
     * 4160 = ped is throwing himself out, even when the vehicle is still.
     * 262144 = ped moves to passenger seat first, then exits normally
     *
     * Others to be tried out: 320, 512, 131072.
     *
     * Hash: 0xD3DBCE61A490BE02 | Since: 323 | API-Set: unknown
     */
    export function leaveVehicle(ped: number | IPed, vehicle: number | IVehicle, flags: number): void {
        TaskLeaveVehicle(ped, vehicle, flags);
    }

    /**
     * enum eScriptLookatFlags
     * {
     * SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
     * SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
     * SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
     * SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
     * SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
     * SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
     * SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
     * SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
     * SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
     * SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
     * SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
     * SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
     * SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
     * SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes
     * SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
     * SLF_FROM_SCRIPT                = 32768, // internal use only
     * SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
     * };
     *
     * Hash: 0x6FA46612594F7973 | Since: 323 | API-Set: unknown
     */
    export function lookAtCoord(entity: number | IEntity, pos: Vector3, duration: number, flags: number, priority: number): void {
        TaskLookAtCoord(entity, pos.x, pos.y, pos.z, duration, flags, priority);
    }

    /**
     * For flags, please refer to TASK_LOOK_AT_COORD.
     *
     * Hash: 0x69F4BE8C8CC4796C | Since: 323 | API-Set: unknown
     */
    export function lookAtEntity(ped: number | IPed, lookAt: number | IEntity, duration: number, flags: number, priority: number): void {
        TaskLookAtEntity(ped, lookAt, duration, flags, priority);
    }

    /**
     * Example:
     * `TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);`
     *
     * Hash: 0xD5B35BEA41919ACB | Since: 323 | API-Set: unknown
     */
    export function moveNetworkAdvancedByName(ped: number | IPed, network: string, pos: Vector3, rot: Vector3, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): void {
        TaskMoveNetworkAdvancedByName(ped, network, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x29682E2CCF21E9B5 | Since: 1868 | API-Set: unknown
     */
    export function moveNetworkAdvancedByNameWithInitParams(ped: number | IPed, network: string, pos: Vector3, rot: Vector3, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, dictionary: string, flags: number): number {
        return Citizen.invokeNative('0x29682E2CCF21E9B5', ped, network, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags);
    }

    /**
     * Example:
     * `TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);`
     *
     * Hash: 0x2D537BA194896636 | Since: 323 | API-Set: unknown
     */
    export function moveNetworkByName(ped: number | IPed, task: string, multiplier: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): void {
        TaskMoveNetworkByName(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags);
    }

    /**
     * Used only once in the scripts (am_mp_nightclub)
     *
     * Hash: 0x3D45B0B355C5E0C9 | Since: 1493 | API-Set: unknown
     */
    export function moveNetworkByNameWithInitParams(ped: number | IPed, network: string, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): number {
        return TaskMoveNetworkByNameWithInitParams(ped, network, blendDuration, allowOverrideCloneUpdate, animDict, flags);
    }

    /**
     * The given ped will try to open the nearest door to 'seat'.
     * Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
     *
     * Hash: 0x965791A9A488A062 | Since: 323 | API-Set: unknown
     */
    export function openVehicleDoor(ped: number | IPed, vehicle: number | IVehicle, timeOut: number, seat: number, speed: number): void {
        TaskOpenVehicleDoor(ped, vehicle, timeOut, seat, speed);
    }

    /**
     * Second parameter is unused.
     *
     * second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
     *
     * Hash: 0xD2F1C53C97EE81AB | Since: 323 | API-Set: unknown
     */
    export function parachute(ped: number | IPed, giveParachuteItem: boolean, instant: boolean): void {
        TaskParachute(ped, giveParachuteItem, instant);
    }

    /**
     * `makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED`
     *
     * Hash: 0xB33E291AFA6BD03A | Since: 323 | API-Set: unknown
     */
    export function parachuteToTarget(ped: number | IPed, pos: Vector3): void {
        TaskParachuteToTarget(ped, pos.x, pos.y, pos.z);
    }

    /**
     * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
     *
     * "miss_Tower_01" (this went from 01 - 10)
     * "miss_Ass0" (0, 4, 6, 3)
     * "MISS_PATROL_8"
     *
     * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
     *
     *
     * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
     * From the scripts
     *
     * `TASK::OPEN_PATROL_ROUTE("miss_Ass0");`
     * `TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0\/\*3\*\/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
     * `TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1\/\*3\*\/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
     * `TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2\/\*3\*\/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
     * `TASK::ADD_PATROL_ROUTE_LINK(0, 1);`
     * `TASK::ADD_PATROL_ROUTE_LINK(1, 2);`
     * `TASK::ADD_PATROL_ROUTE_LINK(2, 0);`
     * `TASK::CLOSE_PATROL_ROUTE();`
     * `TASK::CREATE_PATROL_ROUTE();`
     *
     *
     *
     * Hash: 0xBDA5DF49D080FE4E | Since: 323 | API-Set: unknown
     */
    export function patrol(ped: number | IPed, patrolRouteName: string, alertState: number, canChatToPeds: boolean, useHeadLookAt: boolean): void {
        TaskPatrol(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt);
    }

    /**
     * Stand still (?)
     *
     * Hash: 0xE73A266DB0CA9042 | Since: 323 | API-Set: unknown
     */
    export function pause(ped: number | IPed, ms: number): void {
        TaskPause(ped, ms);
    }

    /**
     * No comment provided
     *
     * Hash: 0xD04FE6765D990A06 | Since: 323 | API-Set: unknown
     */
    export function pedSlideToCoord(ped: number | IPed, pos: Vector3, heading: number, speed: number): void {
        TaskPedSlideToCoord(ped, pos.x, pos.y, pos.z, heading, speed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A4A6A6D3DC64F52 | Since: 323 | API-Set: unknown
     */
    export function pedSlideToCoordHdgRate(ped: number | IPed, pos: Vector3, heading: number, speed: number, headingChangeRate: number): void {
        TaskPedSlideToCoordHdgRate(ped, pos.x, pos.y, pos.z, heading, speed, headingChangeRate);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5ABA3986D90D8A3B | Since: 323 | API-Set: unknown
     */
    export function performSequence(ped: number | IPed, taskSequenceId: number): void {
        TaskPerformSequence(ped, taskSequenceId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x89221B16730234F0 | Since: 323 | API-Set: unknown
     */
    export function performSequenceFromProgress(ped: number | IPed, taskIndex: number, progress1: number, progress2: number): void {
        TaskPerformSequenceFromProgress(ped, taskIndex, progress1, progress2);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8C33220C8D78CA0D | Since: 944 | API-Set: unknown
     */
    export function performSequenceLocally(ped: number | IPed, taskSequenceId: number): void {
        TaskPerformSequenceLocally(ped, taskSequenceId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x2D2386F273FF7A25 | Since: 323 | API-Set: unknown
     */
    export function planeChase(pilot: number | IPed, entityToFollow: number | IEntity, pos: Vector3): void {
        TaskPlaneChase(pilot, entityToFollow, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xF7F9DCCA89E7505B | Since: 1290 | API-Set: unknown
     */
    export function planeGotoPreciseVtol(ped: number | IPed, vehicle: number | IVehicle, pos: Vector3, flightHeight: number, minHeightAboveTerrain: number, useDesiredOrientation: boolean, desiredOrientation: number, autopilot: boolean): void {
        TaskPlaneGotoPreciseVtol(ped, vehicle, pos.x, pos.y, pos.z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBF19721FA34D32C0 | Since: 323 | API-Set: unknown
     */
    export function planeLand(pilot: number | IPed, plane: number | IVehicle, runwayStartX: number, runwayStartY: number, runwayStartZ: number, runwayEndX: number, runwayEndY: number, runwayEndZ: number): void {
        TaskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
    }

    /**
     * EXAMPLE USAGE:
     *
     * Fly around target (Precautiously, keeps high altitude):
     * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
     *
     * Fly around target (Dangerously, keeps VERY low altitude):
     * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
     *
     * Fly directly into target:
     * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
     *
     * EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
     *
     * 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
     * Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
     *
     * VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
     *
     * 0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
     * 1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
     * 300+ =  Vehicle behaves entirely like a normal gameplay plane.
     *
     * 'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
     *
     * Scenario: Destination is an Entity on ground level, wide open field
     * -5000 = Pilot kamikazes directly into Entity
     * -1000 = Pilot flies extremely low -around- Entity, very prone to crashing
     * -200 = Pilot flies lower than average around Entity.
     * 0 = Pilot flies around Entity, normal altitude
     * 200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
     *
     * -- Valid mission types found in the exe: --
     *
     * 0 = None
     * 1 = Unk
     * 2 = CTaskVehicleRam
     * 3 = CTaskVehicleBlock
     * 4 = CTaskVehicleGoToPlane
     * 5 = CTaskVehicleStop
     * 6 = CTaskVehicleAttack
     * 7 = CTaskVehicleFollow
     * 8 = CTaskVehicleFleeAirborne
     * 9= CTaskVehicleCircle
     * 10 = CTaskVehicleEscort
     * 15 = CTaskVehicleFollowRecording
     * 16 = CTaskVehiclePoliceBehaviour
     * 17 = CTaskVehicleCrash
     *
     * Hash: 0x23703CD154E83B88 | Since: 323 | API-Set: unknown
     */
    export function planeMission(pilot: number | IPed, aircraft: number | IVehicle, targetVehicle: number | IVehicle, targetPed: number | IPed, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, angularDrag: number, targetReached: number, targetHeading: number, maxZ: number, minZ: number, precise: boolean): void {
        TaskPlaneMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise);
    }

    /**
     * No comment provided
     *
     * Hash: 0x92C360B5F15D2302 | Since: 1103 | API-Set: unknown
     */
    export function planeTaxi(pilot: number | IPed, aircraft: number | IVehicle, pos: Vector3, cruiseSpeed: number, targetReached: number): void {
        TaskPlaneTaxi(pilot, aircraft, pos.x, pos.y, pos.z, cruiseSpeed, targetReached);
    }

    /**
     * No comment provided
     *
     * Hash: 0x965FEC691D55E9BF | Since: 323 | API-Set: unknown
     */
    export function plantBomb(ped: number | IPed, pos: Vector3, heading: number): void {
        TaskPlantBomb(ped, pos.x, pos.y, pos.z, heading);
    }

    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * float speed > normal speed is 8.0f
     * ----------------------
     *
     * float speedMultiplier > multiply the playback speed
     * ----------------------
     *
     * int duration: time in millisecond
     * ----------------------
     * -1 _ _ _ _ _ _ _> Default (see flag)
     * 0 _ _ _ _ _ _ _ > Not play at all
     * Small value _ _ > Slow down animation speed
     * Other _ _ _ _ _ > freeze player control until specific time (ms) has
     * _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
     * _ _ _ _ _ _ _ _ _ controllable.)
     *
     * int flag:
     * ----------------------
     * enum eAnimationFlags
     * {
     * ANIM_FLAG_NORMAL = 0,
     * ANIM_FLAG_REPEAT = 1,
     * ANIM_FLAG_STOP_LAST_FRAME = 2,
     * ANIM_FLAG_UPPERBODY = 16,
     * ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
     * ANIM_FLAG_CANCELABLE = 120,
     * };
     * Odd number : loop infinitely
     * Even number : Freeze at last frame
     * Multiple of 4: Freeze at last frame but controllable
     *
     * 01 to 15 > Full body
     * 10 to 31 > Upper body
     * 32 to 47 > Full body > Controllable
     * 48 to 63 > Upper body > Controllable
     * ...
     * 001 to 255 > Normal
     * 256 to 511 > Garbled
     * ...
     *
     * playbackRate:
     *
     * values are between 0.0 and 1.0
     *
     *
     * lockX:
     *
     * 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
     * > 1 for mini@sprunk
     *
     *
     * lockY:
     *
     * 0 in most cases
     * 1 for missfam5_yoga, missfra1mcs_2_crew_react
     *
     *
     * lockZ:
     *
     * 0 for single player
     * Can be 1 but only for MP
     *
     * Hash: 0xEA47FE3719165B94 | Since: 323 | API-Set: unknown
     */
    export function playAnim(ped: number | IPed, animDictionary: string, animationName: string, blendInSpeed: number, blendOutSpeed: number, duration: number, flag: number, playbackRate: number, lockX: boolean, lockY: boolean, lockZ: boolean): void {
        TaskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
    }

    /**
     * It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x83CDB10EA29B370B | Since: 323 | API-Set: unknown
     */
    export function playAnimAdvanced(ped: number | IPed, animDict: string, animName: string, pos: Vector3, rot: Vector3, animEnterSpeed: number, animExitSpeed: number, duration: number, flag: any, animTime: number, rotOrder: number, ikFlags: number): void {
        TaskPlayAnimAdvanced(ped, animDict, animName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags);
    }

    /**
     * Example from the scripts:
     * `TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);`
     *
     * =========================================================
     * ^^ No offense, but Idk how that would really help anyone.
     *
     * As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
     *
     * Known boneMaskTypes'
     * "BONEMASK_HEADONLY"
     * "BONEMASK_HEAD_NECK_AND_ARMS"
     * "BONEMASK_HEAD_NECK_AND_L_ARM"
     * "BONEMASK_HEAD_NECK_AND_R_ARM"
     *
     * p4 known args - 0.0f, 0.5f, 0.25f
     * p5 known args - 0.0f, 0.25f
     * p6 known args - 1 if a global if check is passed.
     * p7 known args - 1 if a global if check is passed.
     *
     * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
     * =========================================================
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x8FBB6758B3B3E9EC | Since: 323 | API-Set: unknown
     */
    export function playPhoneGestureAnimation(ped: number | IPed, animDict: string, animation: string, boneMaskType: string, blendInDuration: number, blendOutDuration: number, isLooping: boolean, holdLastFrame: boolean): void {
        TaskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4172393E6BE1FECE | Since: 323 | API-Set: unknown
     */
    export function putPedDirectlyIntoCover(ped: number | IPed, pos: Vector3, time: number, allowPeekingAndFiring: boolean, blendInDuration: number, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number, doEntry: boolean): void {
        TaskPutPedDirectlyIntoCover(ped, pos.x, pos.y, pos.z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry);
    }

    /**
     * from armenian3.c4
     *
     * `TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);`
     *
     *
     * Hash: 0x1C6CD14A876FFE39 | Since: 323 | API-Set: unknown
     */
    export function putPedDirectlyIntoMelee(ped: number | IPed, meleeTarget: number | IPed, blendInDuration: number, timeInMelee: number, strafePhaseSync: number, aiCombatFlags: number): void {
        TaskPutPedDirectlyIntoMelee(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags);
    }

    /**
     * Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
     * p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
     *
     * Hash: 0xEAF66ACDDC794793 | Since: 1868 | API-Set: unknown
     */
    export function rappelDownWallUsingClipsetOverride(ped: number | IPed, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, minZ: number, ropeHandle: number, clipSet: string): void {
        TaskRappelDownWall(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, undefined, undefined);
    }

    /**
     * minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling
     *
     * Only appears twice in the scripts.
     *
     * `TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);`
     * `TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);`
     *
     * Hash: 0x09693B0312F91649 | Since: 323 | API-Set: unknown
     */
    export function rappelFromHeli(ped: number | IPed, minHeightAboveGround: number): void {
        TaskRappelFromHeli(ped, minHeightAboveGround);
    }

    /**
     * No comment provided
     *
     * Hash: 0x72C896464915D1B1 | Since: 323 | API-Set: unknown
     */
    export function reactAndFleePed(ped: number | IPed, fleeTarget: number | IPed): void {
        TaskReactAndFleePed(ped, fleeTarget);
    }

    /**
     * The 2nd param (drawWeapon) is not implemented.
     *
     * -----------------------------------------------------------------------
     *
     * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
     *
     * `if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {`
     * `TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);`
     * }
     *
     * Hash: 0x62D2916F56B9CD2D | Since: 323 | API-Set: unknown
     */
    export function reloadWeapon(ped: number | IPed, drawWeapon: boolean): void {
        TaskReloadWeapon(ped, drawWeapon);
    }

    /**
     * From fm_mission_controller.c:
     * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
     * vVar28 = {0.094f, 0.02f, -0.005f};
     * vVar29 = {-92.24f, 63.64f, 150.24f};
     * func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
     * set_entity_lod_dist(net_to_ent(uVar30), 500);
     * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
     * Var31.imm_4 = 1065353216;
     * Var31.imm_5 = 1065353216;
     * Var31.imm_9 = 1065353216;
     * Var31.imm_10 = 1065353216;
     * Var31.imm_14 = 1065353216;
     * Var31.imm_15 = 1065353216;
     * Var31.imm_17 = 1040187392;
     * Var31.imm_18 = 1040187392;
     * Var31.imm_19 = -1;
     * Var32.imm_4 = 1065353216;
     * Var32.imm_5 = 1065353216;
     * Var32.imm_9 = 1065353216;
     * Var32.imm_10 = 1065353216;
     * Var32.imm_14 = 1065353216;
     * Var32.imm_15 = 1065353216;
     * Var32.imm_17 = 1040187392;
     * Var32.imm_18 = 1040187392;
     * Var32.imm_19 = -1;
     * Var31 = 1;
     * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
     * Var31.imm_2 = "idle";
     * Var31.imm_20 = 1048633;
     * Var31.imm_4 = 0.5f;
     * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
     * task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
     * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
     * remove_anim_dict("anim@heists@biolab@");
     *
     * Hash: 0x126EF75F1E17ABE5 | Since: 323 | API-Set: unknown
     */
    export function scriptedAnimation(ped: number | IPed, blendInDelta: number, blendOutDelta: number): [number, number, number] {
        return TaskScriptedAnimation(ped, blendInDelta, blendOutDelta);
    }

    /**
     * No comment provided
     *
     * Hash: 0x84D32B3BEC531324 | Since: 323 | API-Set: unknown
     */
    export function seekCoverFromPed(ped: number | IPed, target: number | IPed, duration: number, allowPeekingAndFiring: boolean): void {
        TaskSeekCoverFromPed(ped, target, duration, allowPeekingAndFiring);
    }

    /**
     * No comment provided
     *
     * Hash: 0x75AC2B60386D89F2 | Since: 323 | API-Set: unknown
     */
    export function seekCoverFromPos(ped: number | IPed, pos: Vector3, duration: number, allowPeekingAndFiring: boolean): void {
        TaskSeekCoverFromPos(ped, pos.x, pos.y, pos.z, duration, allowPeekingAndFiring);
    }

    /**
     * p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.
     *
     * from michael2:
     * `TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);`
     *
     *
     * appears to be shorter variation
     * from michael3:
     * `TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);`
     *
     * Hash: 0x39246A6958EF072C | Since: 323 | API-Set: unknown
     */
    export function seekCoverToCoords(ped: number | IPed, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, timeout: number, shortRoute: boolean): void {
        TaskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute);
    }

    /**
     * p5 is always -1
     *
     * Hash: 0xD43D95C7A869447F | Since: 323 | API-Set: unknown
     */
    export function seekCoverToCoverPoint(ped: number | IPed, coverpoint: number, pos: Vector3, time: number, allowPeekingAndFiring: boolean): void {
        TaskSeekCoverToCoverPoint(ped, coverpoint, pos.x, pos.y, pos.z, time, allowPeekingAndFiring);
    }

    /**
     * I cant believe I have to define this, this is one of the best natives.
     *
     * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
     *
     * Since it is a task, every time the native is called the ped will stop for a moment.
     *
     * Hash: 0x90D2156198831D69 | Since: 323 | API-Set: unknown
     */
    export function setBlockingOfNonTemporaryEvents(ped: number | IPed, toggle: boolean): void {
        TaskSetBlockingOfNonTemporaryEvents(ped, toggle);
    }

    /**
     * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
     *
     * Hash: 0xEB8517DDA73720DA | Since: 323 | API-Set: unknown
     */
    export function setDecisionMaker(ped: number | IPed, decisionMakerId: number | string): void {
        if (typeof decisionMakerId === 'string') decisionMakerId = misc.getHashKey(decisionMakerId)
        TaskSetDecisionMaker(ped, decisionMakerId);
    }

    /**
     * No comment provided
     *
     * Hash: 0x933C06518B52A9A4 | Since: 323 | API-Set: unknown
     */
    export function setSphereDefensiveArea(ped: number | IPed, pos: Vector3, radius: number): void {
        TaskSetSphereDefensiveArea(ped, pos.x, pos.y, pos.z, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x60A19CF85FF4CEFA | Since: 3407 | API-Set: unknown
     */
    export function sharkCircleCoord(ped: number | IPed, pos: Vector3, moveBlendRatio: number, radius: number): void {
        Citizen.invokeNative('0x60A19CF85FF4CEFA', ped, pos.x, pos.y, pos.z, moveBlendRatio, radius);
    }

    /**
     * No comment provided
     *
     * Hash: 0x452419CBD838065B | Since: 323 | API-Set: unknown
     */
    export function shockingEventReact(ped: number | IPed, eventHandle: number): void {
        TaskShockingEventReact(ped, eventHandle);
    }

    /**
     * Firing Pattern Hash Information: https://pastebin.com/Px036isB
     *
     * Hash: 0x46A6CC01E0826106 | Since: 323 | API-Set: unknown
     */
    export function shootAtCoord(ped: number | IPed, pos: Vector3, duration: number, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskShootAtCoord(ped, pos.x, pos.y, pos.z, duration, firingPattern);
    }

    /**
     * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
     * Entity aimedentity;
     * `Player player = PLAYER::PLAYER_ID();`
     * `PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);`
     *
     * //bg is an array of peds
     * `TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));`
     *
     * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
     *
     * Firing Pattern Hash Information: https://pastebin.com/Px036isB
     *
     * Hash: 0x08DA95E8298AE772 | Since: 323 | API-Set: unknown
     */
    export function shootAtEntity(entity: number | IEntity, target: number | IEntity, duration: number, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        TaskShootAtEntity(entity, target, duration, firingPattern);
    }

    /**
     * Makes the specified ped shuffle to the next vehicle seat.
     * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
     *
     * Hash: 0x7AA80209BDA643EB | Since: 323 | API-Set: unknown
     */
    export function shuffleToNextVehicleSeat(ped: number | IPed, vehicle: number | IVehicle, useAlternateShuffle: boolean): void {
        TaskShuffleToNextVehicleSeat(ped, vehicle, useAlternateShuffle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x601736CFE536B0A0 | Since: 323 | API-Set: unknown
     */
    export function skyDive(ped: number | IPed, instant: boolean): void {
        TaskSkyDive(ped, instant);
    }

    /**
     * Makes the specified ped flee the specified distance from the specified position.
     *
     * Hash: 0x94587F17E9C365D5 | Since: 323 | API-Set: unknown
     */
    export function smartFleeCoord(ped: number | IPed, pos: Vector3, distance: number, time: number, preferPavements: boolean, quitIfOutOfRange: boolean): void {
        TaskSmartFleeCoord(ped, pos.x, pos.y, pos.z, distance, time, preferPavements, quitIfOutOfRange);
    }

    /**
     * Makes a ped run away from another ped (fleeTarget).
     *
     * distance = ped will flee this distance.
     * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
     *
     * Hash: 0x22B0D0E37CCB840D | Since: 323 | API-Set: unknown
     */
    export function smartFleePed(ped: number | IPed, fleeTarget: number | IPed, safeDistance: number, fleeTime: number, preferPavements: boolean, updateToNearestHatedPed: boolean): void {
        TaskSmartFleePed(ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed);
    }

    /**
     * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
     *
     * Hash: 0xAE032F8BBA959E90 | Since: 323 | API-Set: unknown
     */
    export function standGuard(ped: number | IPed, pos: Vector3, heading: number, scenarioName: string): void {
        TaskStandGuard(ped, pos.x, pos.y, pos.z, heading, scenarioName);
    }

    /**
     * Makes the specified ped stand still for (time) milliseconds.
     *
     * Hash: 0x919BE13EED931959 | Since: 323 | API-Set: unknown
     */
    export function standStill(ped: number | IPed, time: number): void {
        TaskStandStill(ped, time);
    }

    /**
     * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     *
     * `Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.`
     * ---------------
     * The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
     *
     * The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
     *
     * I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
     *
     * I have no idea what the last 3 parameters are, but I'll try to find out.
     *
     * -going on the last 3 parameters, they appear to always be "0, 0, 1"
     *
     * p6 -1 also used in scrips
     *
     * p7 used for sitting scenarios
     *
     * p8 teleports ped to position
     *
     * Hash: 0xFA4EFC79F69D4F07 | Since: 323 | API-Set: unknown
     */
    export function startScenarioAtPosition(ped: number | IPed, scenarioName: string, pos: Vector3, heading: number, duration: number, sittingScenario: boolean, teleport: boolean): void {
        TaskStartScenarioAtPosition(ped, scenarioName, pos.x, pos.y, pos.z, heading, duration, sittingScenario, teleport);
    }

    /**
     * Plays a scenario on a Ped at their current location.
     *
     * unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
     * playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
     *
     * ----
     *
     * From "am_hold_up.ysc.c4" at line 339:
     *
     * `TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);`
     *
     * I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
     * WORLD_HUMAN_SMOKING
     * WORLD_HUMAN_HANG_OUT_STREET
     * WORLD_HUMAN_STAND_MOBILE
     *
     * This makes sense, as these are what I commonly see when going by a liquor store.
     * -------------------------
     * List of scenarioNames: https://pastebin.com/6mrYTdQv
     * (^ Thank you so fucking much for this)
     *
     * Also these:
     * WORLD_FISH_FLEE
     * DRIVE
     * WORLD_HUMAN_HIKER
     * WORLD_VEHICLE_ATTRACTOR
     * WORLD_VEHICLE_BICYCLE_MOUNTAIN
     * WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
     * WORLD_VEHICLE_BIKER
     * WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
     * WORLD_VEHICLE_CONSTRUCTION_SOLO
     * WORLD_VEHICLE_DRIVE_PASSENGERS
     * WORLD_VEHICLE_DRIVE_SOLO
     * WORLD_VEHICLE_EMPTY
     * WORLD_VEHICLE_PARK_PARALLEL
     * WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
     * WORLD_VEHICLE_POLICE_BIKE
     * WORLD_VEHICLE_POLICE_CAR
     * WORLD_VEHICLE_POLICE_NEXT_TO_CAR
     * WORLD_VEHICLE_SALTON_DIRT_BIKE
     * WORLD_VEHICLE_TRUCK_LOGS
     *
     * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     *
     * Hash: 0x142A02425FF02BD9 | Since: 323 | API-Set: unknown
     */
    export function startScenarioInPlace(ped: number | IPed, scenarioName: string, unkDelay: number, playEnterAnim: boolean): void {
        TaskStartScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim);
    }

    /**
     * Makes the ped run to take cover
     *
     * Hash: 0xE5DA8615A6180789 | Since: 323 | API-Set: unknown
     */
    export function stayInCover(ped: number | IPed): void {
        TaskStayInCover(ped);
    }

    /**
     * known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
     *
     * Hash: 0xAA5DC05579D60BD9 | Since: 323 | API-Set: unknown
     */
    export function stealthKill(killer: number | IPed, target: number | IPed, stealthKillActionResultHash: number | string, desiredMoveBlendRatio: number, stealthFlags: number): void {
        if (typeof stealthKillActionResultHash === 'string') stealthKillActionResultHash = misc.getHashKey(stealthKillActionResultHash)
        TaskStealthKill(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x3FA00D4F4641BFAE | Since: 323 | API-Set: unknown
     */
    export function stopPhoneGestureAnimation(ped: number | IPed, blendOutOverride: number): void {
        TaskStopPhoneGestureAnimation(ped, blendOutOverride);
    }

    /**
     * Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
     *
     * p0 is always 0, p5 is always 1
     *
     * p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
     *
     * Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
     *
     * Hash: 0xC22B40579A498CA4 | Since: 2189 | API-Set: unknown
     */
    export function submarineGotoAndStop(ped: number | IPed, submarine: number | IVehicle, pos: Vector3, autopilot: boolean): void {
        TaskSubmarineGotoAndStop(ped, submarine, pos.x, pos.y, pos.z, autopilot);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA21C51255B205245 | Since: 323 | API-Set: unknown
     */
    export function swapWeapon(ped: number | IPed, drawWeapon: boolean): void {
        TaskSwapWeapon(ped, drawWeapon);
    }

    /**
     * This function is called on peds in vehicles.
     *
     * anim: animation name
     * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
     * p5: no idea what it does but is usually -1
     *
     * Hash: 0x2047C02158D6405A | Since: 323 | API-Set: unknown
     */
    export function sweepAimEntity(ped: number | IPed, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: number, targetEntity: number | IEntity, turnRate: number, blendInDuration: number): void {
        TaskSweepAimEntity(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7AFE8FDC10BC07D2 | Since: 323 | API-Set: unknown
     */
    export function sweepAimPosition(ped: number | IPed, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: number, pos: Vector3, turnRate: number, blendInDuration: number): void {
        TaskSweepAimPosition(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, pos.x, pos.y, pos.z, turnRate, blendInDuration);
    }

    /**
     * `TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);`
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xEEA929141F699854 | Since: 323 | API-Set: unknown
     */
    export function synchronizedScene(ped: number | IPed, scene: number, animDictionary: string, animationName: string, blendIn: number, blendOut: number, flags: number, ragdollBlockingFlags: number, moverBlendDelta: number, ikFlags: number): void {
        TaskSynchronizedScene(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags);
    }

    /**
     * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
     *
     * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
     * ---
     * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
     * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
     * ----------------------------------------------------
     * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
     *
     * Hash: 0x7285951DBF6B5A51 | Since: 323 | API-Set: unknown
     */
    export function throwProjectile(ped: number | IPed, pos: Vector3, ignoreCollisionEntityIndex: number, createInvincibleProjectile: boolean): void {
        TaskThrowProjectile(ped, pos.x, pos.y, pos.z, ignoreCollisionEntityIndex, createInvincibleProjectile);
    }

    /**
     * used in sequence task
     *
     * both parameters seems to be always 0
     *
     * Hash: 0xAC96609B9995EDF8 | Since: 323 | API-Set: unknown
     */
    export function toggleDuck(ped: number | IPed, toggleType: number): void {
        TaskToggleDuck(ped, toggleType);
    }

    /**
     * duration in milliseconds
     *
     * Hash: 0x1DDA930A0AC38571 | Since: 323 | API-Set: unknown
     */
    export function turnPedToFaceCoord(ped: number | IPed, pos: Vector3, duration: number): void {
        TaskTurnPedToFaceCoord(ped, pos.x, pos.y, pos.z, duration);
    }

    /**
     * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
     *
     * Hash: 0x5AD23D40115353AC | Since: 323 | API-Set: unknown
     */
    export function turnPedToFaceEntity(ped: number | IPed, entity: number | IEntity, duration: number): void {
        TaskTurnPedToFaceEntity(ped, entity, duration);
    }

    /**
     * Actually has 3 params, not 2.
     *
     * p0: Ped
     * p1: int (or bool?)
     * p2: int
     *
     * Hash: 0xBD2A8EC3AF4DE7DB | Since: 323 | API-Set: unknown
     */
    export function useMobilePhone(ped: number | IPed, usePhone: boolean, desiredPhoneMode: number): void {
        TaskUseMobilePhone(ped, usePhone, desiredPhoneMode);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5EE02954A14C69DB | Since: 323 | API-Set: unknown
     */
    export function useMobilePhoneTimed(ped: number | IPed, duration: number): void {
        TaskUseMobilePhoneTimed(ped, duration);
    }

    /**
     * p5 is always 0 in scripts
     *
     * Hash: 0x9FDA1B3D7E7028B3 | Since: 323 | API-Set: unknown
     */
    export function useNearestScenarioChainToCoord(ped: number | IPed, pos: Vector3, maxRange: number, timeToLeave: number): void {
        TaskUseNearestScenarioChainToCoord(ped, pos.x, pos.y, pos.z, maxRange, timeToLeave);
    }

    /**
     * p5 is always -1 or 0 in scripts
     *
     * Hash: 0x97A28E63F0BA5631 | Since: 323 | API-Set: unknown
     */
    export function useNearestScenarioChainToCoordWarp(ped: number | IPed, pos: Vector3, radius: number, timeToLeave: number): void {
        TaskUseNearestScenarioChainToCoordWarp(ped, pos.x, pos.y, pos.z, radius, timeToLeave);
    }

    /**
     * Updated variables
     *
     * `An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.`
     *
     * Hash: 0x277F471BA9DB000B | Since: 323 | API-Set: unknown
     */
    export function useNearestScenarioToCoord(ped: number | IPed, pos: Vector3, distance: number, duration: number): void {
        TaskUseNearestScenarioToCoord(ped, pos.x, pos.y, pos.z, distance, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0x58E2E0F23F6B76C3 | Since: 323 | API-Set: unknown
     */
    export function useNearestScenarioToCoordWarp(ped: number | IPed, pos: Vector3, radius: number, timeToLeave: number): void {
        TaskUseNearestScenarioToCoordWarp(ped, pos.x, pos.y, pos.z, radius, timeToLeave);
    }

    /**
     * No comment provided
     *
     * Hash: 0x447C1E9EF844BC0F | Since: 323 | API-Set: unknown
     */
    export function vehicleAimAtCoord(ped: number | IPed, pos: Vector3): void {
        TaskVehicleAimAtCoord(ped, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE41885592B08B097 | Since: 323 | API-Set: unknown
     */
    export function vehicleAimAtPed(ped: number | IPed, target: number | IPed): void {
        TaskVehicleAimAtPed(ped, target);
    }

    /**
     * chases targetEnt fast and aggressively
     * --
     * Makes ped (needs to be in vehicle) chase targetEnt.
     *
     * Hash: 0x3C08A8E30363B353 | Since: 323 | API-Set: unknown
     */
    export function vehicleChase(driver: number | IPed, targetEnt: number | IEntity): void {
        TaskVehicleChase(driver, targetEnt);
    }

    /**
     * info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0xE2A2AA2F659D77A7 | Since: 323 | API-Set: unknown
     */
    export function vehicleDriveToCoord(ped: number | IPed, vehicle: number | IVehicle, pos: Vector3, speed: number, vehicleModel: number | string, drivingMode: number, stopRange: number, straightLineDistance: number): void {
        if (typeof vehicleModel === 'string') vehicleModel = misc.getHashKey(vehicleModel)
        TaskVehicleDriveToCoord(ped, vehicle, pos.x, pos.y, pos.z, speed, undefined, vehicleModel, drivingMode, stopRange, straightLineDistance);
    }

    /**
     * No comment provided
     *
     * Hash: 0x158BB33F920D360C | Since: 323 | API-Set: unknown
     */
    export function vehicleDriveToCoordLongrange(ped: number | IPed, vehicle: number | IVehicle, pos: Vector3, speed: number, driveMode: number, stopRange: number): void {
        TaskVehicleDriveToCoordLongrange(ped, vehicle, pos.x, pos.y, pos.z, speed, driveMode, stopRange);
    }

    /**
     * No comment provided
     *
     * Hash: 0x480142959D337D00 | Since: 323 | API-Set: unknown
     */
    export function vehicleDriveWander(ped: number | IPed, vehicle: number | IVehicle, speed: number, drivingStyle: number): void {
        TaskVehicleDriveWander(ped, vehicle, speed, drivingStyle);
    }

    /**
     * Makes a ped follow the targetVehicle with <minDistance> in between.
     *
     * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
     *
     * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
     * -1 = behind
     * 0 = ahead
     * 1 = left
     * 2 = right
     * 3 = back left
     * 4 = back right
     *
     * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
     *
     * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0x0FA6E4B75F302400 | Since: 323 | API-Set: unknown
     */
    export function vehicleEscort(ped: number | IPed, vehicle: number | IVehicle, targetVehicle: number | IVehicle, mode: number, speed: number, drivingStyle: number, minDistance: number, minHeightAboveTerrain: number, noRoadsDistance: number): void {
        TaskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance);
    }

    /**
     * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
     *
     * drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0xFC545A9F0626E3B6 | Since: 323 | API-Set: unknown
     */
    export function vehicleFollow(driver: number | IPed, vehicle: number | IVehicle, targetEntity: number | IEntity, speed: number, drivingStyle: number, minDistance: number): void {
        TaskVehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
    }

    /**
     *
     *
     * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
     * p3 = 786468
     * p4 = 0
     * p5 = 16
     * p6 = -1 (angle?)
     * p7/8/9 = usually v3.zero
     * p10 = bool (repeat?)
     * p11 = 1073741824
     *
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0x3123FAA6DB1CF7ED | Since: 323 | API-Set: unknown
     */
    export function vehicleFollowWaypointRecording(ped: number | IPed, vehicle: number | IVehicle, WPRecording: string): void {
        TaskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, 0, 0, 0, 0, 0, false, 0);
    }

    /**
     * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
     *
     * WARNING:
     * A behaviorFlag value of 0 will result in a clunky, stupid driver!
     *
     * Recommended settings:
     * speed = 30.0f,
     * behaviorFlag = 156,
     * stoppingRange = 5.0f;
     *
     * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
     *
     * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
     *
     * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
     *
     * Hash: 0x195AEEB13CEFE2EE | Since: 323 | API-Set: unknown
     */
    export function vehicleGotoNavmesh(ped: number | IPed, vehicle: number | IVehicle, pos: Vector3, speed: number, behaviorFlag: number, stoppingRange: number): void {
        TaskVehicleGotoNavmesh(ped, vehicle, pos.x, pos.y, pos.z, speed, behaviorFlag, stoppingRange);
    }

    /**
     * pilot, vehicle and altitude are rather self-explanatory.
     *
     * p4: is unused variable in the function.
     *
     * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
     *
     * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
     *
     * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
     *
     * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
     *
     * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
     *
     * Hash: 0x1E09C32048FEFD1C | Since: 323 | API-Set: unknown
     */
    export function vehicleHeliProtect(pilot: number | IPed, vehicle: number | IVehicle, entityToFollow: number | IEntity, targetSpeed: number, drivingFlags: number, radius: number, altitude: number, heliFlags: number): void {
        TaskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags);
    }

    /**
     * missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
     *
     * Hash: 0x659427E0EF36BCDE | Since: 323 | API-Set: unknown
     */
    export function vehicleMission(driver: number | IPed, vehicle: number | IVehicle, vehicleTarget: number | IVehicle, missionType: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void {
        TaskVehicleMission(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
    }

    /**
     * See TASK_VEHICLE_MISSION
     *
     * Hash: 0xF0AF20AA7731F8C3 | Since: 323 | API-Set: unknown
     */
    export function vehicleMissionCoorsTarget(ped: number | IPed, vehicle: number | IVehicle, pos: Vector3, mission: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void {
        TaskVehicleMissionCoorsTarget(ped, vehicle, pos.x, pos.y, pos.z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
    }

    /**
     * See TASK_VEHICLE_MISSION
     *
     * Hash: 0x9454528DF15D657A | Since: 323 | API-Set: unknown
     */
    export function vehicleMissionPedTarget(ped: number | IPed, vehicle: number | IVehicle, pedTarget: number | IPed, missionType: number, maxSpeed: number, drivingStyle: number, minDistance: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void {
        TaskVehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic);
    }

    /**
     * Modes:
     * 0 - ignore heading
     * 1 - park forward
     * 2 - park backwards
     *
     * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
     *
     * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
     *
     * Hash: 0x0F3E34E968EA374E | Since: 323 | API-Set: unknown
     */
    export function vehiclePark(ped: number | IPed, vehicle: number | IVehicle, pos: Vector3, heading: number, mode: number, radius: number, keepEngineOn: boolean): void {
        TaskVehiclePark(ped, vehicle, pos.x, pos.y, pos.z, heading, mode, radius, keepEngineOn);
    }

    /**
     * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
     *
     * Here's how its used -
     *
     * `TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");`
     *
     * `TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0\/\*1\*\/], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");`
     *
     * FYI : Speedo is the name of van in which chop was put in the mission.
     *
     * Hash: 0x69F5C3BD0F3EBD89 | Since: 323 | API-Set: unknown
     */
    export function vehiclePlayAnim(vehicle: number | IVehicle, animationSet: string, animationName: string): void {
        TaskVehiclePlayAnim(vehicle, animationSet, animationName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5190796ED39C9B6D | Since: 323 | API-Set: unknown
     */
    export function vehicleShootAtCoord(ped: number | IPed, pos: Vector3, fireTolerance: number): void {
        TaskVehicleShootAtCoord(ped, pos.x, pos.y, pos.z, fireTolerance);
    }

    /**
     * No comment provided
     *
     * Hash: 0x10AB107B887214D8 | Since: 323 | API-Set: unknown
     */
    export function vehicleShootAtPed(ped: number | IPed, target: number | IPed, fireTolerance: number): void {
        TaskVehicleShootAtPed(ped, target, fireTolerance);
    }

    /**
     * '1 - brake
     * '3 - brake + reverse
     * '4 - turn left 90 + braking
     * '5 - turn right 90 + braking
     * '6 - brake strong (handbrake?) until time ends
     * '7 - turn left + accelerate
     * '8 - turn right + accelerate
     * '9 - weak acceleration
     * '10 - turn left + restore wheel pos to center in the end
     * '11 - turn right + restore wheel pos to center in the end
     * '13 - turn left + go reverse
     * '14 - turn left + go reverse
     * '16 - crash the game after like 2 seconds :)
     * '17 - keep actual state, game crashed after few tries
     * '18 - game crash
     * '19 - strong brake + turn left/right
     * '20 - weak brake + turn left then turn right
     * '21 - weak brake + turn right then turn left
     * '22 - brake + reverse
     * '23 - accelerate fast
     * '24 - brake
     * '25 - brake turning left then when almost stopping it turns left more
     * '26 - brake turning right then when almost stopping it turns right more
     * '27 - brake until car stop or until time ends
     * '28 - brake + strong reverse acceleration
     * '30 - performs a burnout (brake until stop + brake and accelerate)
     * '31 - accelerate + handbrake
     * '32 - accelerate very strong
     *
     * Seems to be this:
     * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
     *
     * Hash: 0xC429DCEEB339E129 | Since: 323 | API-Set: unknown
     */
    export function vehicleTempAction(driver: number | IPed, vehicle: number | IVehicle, action: number, time: number): void {
        TaskVehicleTempAction(driver, vehicle, action, time);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE054346CA3A0F315 | Since: 323 | API-Set: unknown
     */
    export function wanderInArea(ped: number | IPed, pos: Vector3, radius: number, minimalLength: number, timeBetweenWalks: number): void {
        TaskWanderInArea(ped, pos.x, pos.y, pos.z, radius, minimalLength, timeBetweenWalks);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6919A2F136426098 | Since: 1868 | API-Set: unknown
     */
    export function wanderSpecific(ped: number | IPed, conditionalAnimGroupStr: string, conditionalAnimStr: string, heading: number): void {
        TaskWanderSpecific(ped, conditionalAnimGroupStr, conditionalAnimStr, heading);
    }

    /**
     * Makes ped walk around the area.
     *
     * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
     *
     * Hash: 0xBB9CE077274F6A1B | Since: 323 | API-Set: unknown
     */
    export function wanderStandard(ped: number | IPed, heading: number, flags: number): void {
        TaskWanderStandard(ped, heading, flags);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6E01E9E8D89F8276 | Since: 2545 | API-Set: unknown
     */
    export function warpPedDirectlyIntoCover(ped: number | IPed, time: number, allowPeekingAndFiring: boolean, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number): void {
        TaskWarpPedDirectlyIntoCover(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier);
    }

    /**
     * Seat Numbers
     * -------------------------------
     * Driver = -1
     * Any = -2
     * Left-Rear = 1
     * Right-Front = 0
     * Right-Rear = 2
     * Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
     *
     * Hash: 0x9A7D091411C5F684 | Since: 323 | API-Set: unknown
     */
    export function warpPedIntoVehicle(ped: number | IPed, vehicle: number | IVehicle, seat: number): void {
        TaskWarpPedIntoVehicle(ped, vehicle, seat);
    }

    /**
     * EX: Function.Call(Ped1, Ped2, Time, 0);
     *
     * The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
     *
     *
     *
     * Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
     *
     * Hash: 0xCDDC2B77CE54AC6E | Since: 323 | API-Set: unknown
     */
    export function writhe(ped: number | IPed, target: number | IPed, minFireLoops: number, startState: number, forceShootOnGround: boolean, shootFromGroundTimer: number): void {
        TaskWrithe(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer);
    }

    /**
     * No comment provided
     *
     * Hash: 0x67406F2C8F87FC4F | Since: 323 | API-Set: unknown
     */
    export function uncuffPed(ped: number | IPed): void {
        UncuffPed(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x9724FB59A3E72AD0 | Since: 323 | API-Set: unknown
     */
    export function updateAimGunScriptedTarget(ped: number | IPed, target: number | IPed, pos: Vector3, disableBlockingClip: boolean): void {
        UpdateTaskAimGunScriptedTarget(ped, target, pos.x, pos.y, pos.z, disableBlockingClip);
    }

    /**
     * No comment provided
     *
     * Hash: 0xA98FCAFD7893C834 | Since: 323 | API-Set: unknown
     */
    export function updateHandsUpDuration(ped: number | IPed, duration: number): void {
        UpdateTaskHandsUpDuration(ped, duration);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE4973DBDBE6E44B3 | Since: 323 | API-Set: unknown
     */
    export function updateSweepAimEntity(ped: number | IPed, entity: number | IEntity): void {
        UpdateTaskSweepAimEntity(ped, entity);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBB106883F5201FC4 | Since: 323 | API-Set: unknown
     */
    export function updateSweepAimPosition(ped: number | IPed, pos: Vector3): void {
        UpdateTaskSweepAimPosition(ped, pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5A353B8E6B1095B5 | Since: 323 | API-Set: unknown
     */
    export function useWaypointRecordingAsAssistedMovementRoute(name: string): void {
        UseWaypointRecordingAsAssistedMovementRoute(name, false, 0, 0);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE435D3539EFDCD1B | Since: 3570 | API-Set: unknown
     */
    export function vehicleWaypointPlaybackGetIsPaused(vehicle: number | IVehicle): boolean {
        return Citizen.invokeNative('0xE435D3539EFDCD1B', vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x121F0593E0A431D7 | Since: 323 | API-Set: unknown
     */
    export function vehicleWaypointPlaybackOverrideSpeed(vehicle: number | IVehicle, speed: number): void {
        VehicleWaypointPlaybackOverrideSpeed(vehicle, speed);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8A4E6AC373666BC5 | Since: 323 | API-Set: unknown
     */
    export function vehicleWaypointPlaybackPause(vehicle: number | IVehicle): void {
        VehicleWaypointPlaybackPause(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0xDC04FCAA7839D492 | Since: 323 | API-Set: unknown
     */
    export function vehicleWaypointPlaybackResume(vehicle: number | IVehicle): void {
        VehicleWaypointPlaybackResume(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x5CEB25A7D2848963 | Since: 323 | API-Set: unknown
     */
    export function vehicleWaypointPlaybackUseDefaultSpeed(vehicle: number | IVehicle): void {
        VehicleWaypointPlaybackUseDefaultSpeed(vehicle);
    }

    /**
     * No comment provided
     *
     * Hash: 0x701375A7D43F01CB | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackGetIsPaused(): boolean {
        return WaypointPlaybackGetIsPaused(undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x7D7D2B47FA788E85 | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackOverrideSpeed(): void {
        WaypointPlaybackOverrideSpeed(undefined, 0, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0F342546AA06FED5 | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackPause(): void {
        WaypointPlaybackPause(undefined, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x244F70C84C547D2D | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackResume(): void {
        WaypointPlaybackResume(undefined, false, undefined, undefined);
    }

    /**
     * No comment provided
     *
     * Hash: 0x8968400D900ED8B3 | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackStartAimingAtCoord(ped: number | IPed, pos: Vector3): void {
        WaypointPlaybackStartAimingAtCoord(ped, pos.x, pos.y, pos.z, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x20E330937C399D29 | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackStartAimingAtPed(ped: number | IPed, target: number | IPed): void {
        WaypointPlaybackStartAimingAtPed(ped, target, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x057A25CFCC9DB671 | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackStartShootingAtCoord(ped: number | IPed, pos: Vector3, firingPattern: number | string): void {
        if (typeof firingPattern === 'string') firingPattern = misc.getHashKey(firingPattern)
        WaypointPlaybackStartShootingAtCoord(ped, pos.x, pos.y, pos.z, false, firingPattern);
    }

    /**
     * No comment provided
     *
     * Hash: 0xE70BA7B90F8390DC | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackStartShootingAtPed(ped: number | IPed, ped2: number | IPed): void {
        WaypointPlaybackStartShootingAtPed(ped, ped2, false, false);
    }

    /**
     * No comment provided
     *
     * Hash: 0x47EFA040EBB8E2EA | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackStopAimingOrShooting(ped: number | IPed): void {
        WaypointPlaybackStopAimingOrShooting(ped);
    }

    /**
     * No comment provided
     *
     * Hash: 0x6599D834B12D0800 | Since: 323 | API-Set: unknown
     */
    export function waypointPlaybackUseDefaultSpeed(): void {
        WaypointPlaybackUseDefaultSpeed(undefined);
    }

    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Hash: 0xB629A298081F876F | Since: 323 | API-Set: unknown
     */
    export function waypointRecordingGetClosestWaypoint(name: string, pos: Vector3): [boolean, number] {
        return WaypointRecordingGetClosestWaypoint(name, pos.x, pos.y, pos.z);
    }

    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Hash: 0x2FB897405C90B361 | Since: 323 | API-Set: unknown
     */
    export function waypointRecordingGetCoord(name: string, point: number): [boolean, Vector3] {
        return WaypointRecordingGetCoord(name, point);
    }

    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Hash: 0x5343532C01A07234 | Since: 323 | API-Set: unknown
     */
    export function waypointRecordingGetNumPoints(name: string): [boolean, number] {
        return WaypointRecordingGetNumPoints(name);
    }

    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0x005622AEBC33ACA9 | Since: 323 | API-Set: unknown
     */
    export function waypointRecordingGetSpeedAtPoint(name: string, point: number): number {
        return WaypointRecordingGetSpeedAtPoint(name, point);
    }

    /**
     * No comment provided
     *
     * Hash: 0x0EFE4834A2F40563 | Since: 3570 | API-Set: unknown
     */
    export function setAmbientPedEnableCollisionOnNetworkCloneWhenFixed(ped: number | IPed, enable: boolean): void {
        Citizen.invokeNative('0x0EFE4834A2F40563', ped, enable);
    }

    /**
     * No comment provided
     *
     * Hash: 0x32F6EEF031F943DC | Since: 3095 | API-Set: unknown
     */
    export function setScriptEnableCollisionOnNetworkCloneWhenFixed(ped: number | IPed, enable: boolean): void {
        Citizen.invokeNative('0x32F6EEF031F943DC', ped, enable);
    }

}


export namespace zone {
    /**
     * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
     *
     * Modified example from "am_imp_exp.c4", line 6418:
     * `\/\* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));`
     * etc.
     * \*\/
     * `STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);`
     * `ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);`
     *
     * Hash: 0x5C0DE367AA0D911C | Since: 323 | API-Set: unknown
     */
    export function clearPopscheduleOverrideVehicleModel(scheduleId: number): void {
        ClearPopscheduleOverrideVehicleModel(scheduleId);
    }

    /**
     * Returns a hash representing which part of the map the given coords are located.
     *
     * Possible return values:
     * (Hash of) city -> -289320599
     * (Hash of) countryside -> 2072609373
     *
     * C# Example :
     *
     * Ped player = Game.Player.Character;
     * Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
     *
     * Hash: 0x7EE64D51E8498728 | Since: 323 | API-Set: unknown
     */
    export function getHashOfMapAreaAtCoords(pos: Vector3): number {
        return GetHashOfMapAreaAtCoords(pos.x, pos.y, pos.z);
    }

    /**
     * AIRP = Los Santos International Airport
     * ALAMO = Alamo Sea
     * ALTA = Alta
     * ARMYB = Fort Zancudo
     * BANHAMC = Banham Canyon Dr
     * BANNING = Banning
     * BEACH = Vespucci Beach
     * BHAMCA = Banham Canyon
     * BRADP = Braddock Pass
     * BRADT = Braddock Tunnel
     * BURTON = Burton
     * CALAFB = Calafia Bridge
     * CANNY = Raton Canyon
     * CCREAK = Cassidy Creek
     * CHAMH = Chamberlain Hills
     * CHIL = Vinewood Hills
     * CHU = Chumash
     * CMSW = Chiliad Mountain State Wilderness
     * CYPRE = Cypress Flats
     * DAVIS = Davis
     * DELBE = Del Perro Beach
     * DELPE = Del Perro
     * DELSOL = La Puerta
     * DESRT = Grand Senora Desert
     * DOWNT = Downtown
     * DTVINE = Downtown Vinewood
     * EAST_V = East Vinewood
     * EBURO = El Burro Heights
     * ELGORL = El Gordo Lighthouse
     * ELYSIAN = Elysian Island
     * GALFISH = Galilee
     * GOLF = GWC and Golfing Society
     * GRAPES = Grapeseed
     * GREATC = Great Chaparral
     * HARMO = Harmony
     * HAWICK = Hawick
     * HORS = Vinewood Racetrack
     * HUMLAB = Humane Labs and Research
     * JAIL = Bolingbroke Penitentiary
     * KOREAT = Little Seoul
     * LACT = Land Act Reservoir
     * LAGO = Lago Zancudo
     * LDAM = Land Act Dam
     * LEGSQU = Legion Square
     * LMESA = La Mesa
     * LOSPUER = La Puerta
     * MIRR = Mirror Park
     * MORN = Morningwood
     * MOVIE = Richards Majestic
     * MTCHIL = Mount Chiliad
     * MTGORDO = Mount Gordo
     * MTJOSE = Mount Josiah
     * MURRI = Murrieta Heights
     * NCHU = North Chumash
     * NOOSE = N.O.O.S.E
     * OCEANA = Pacific Ocean
     * PALCOV = Paleto Cove
     * PALETO = Paleto Bay
     * PALFOR = Paleto Forest
     * PALHIGH = Palomino Highlands
     * PALMPOW = Palmer-Taylor Power Station
     * PBLUFF = Pacific Bluffs
     * PBOX = Pillbox Hill
     * PROCOB = Procopio Beach
     * RANCHO = Rancho
     * RGLEN = Richman Glen
     * RICHM = Richman
     * ROCKF = Rockford Hills
     * RTRAK = Redwood Lights Track
     * SANAND = San Andreas
     * SANCHIA = San Chianski Mountain Range
     * SANDY = Sandy Shores
     * SKID = Mission Row
     * SLAB = Stab City
     * STAD = Maze Bank Arena
     * STRAW = Strawberry
     * TATAMO = Tataviam Mountains
     * TERMINA = Terminal
     * TEXTI = Textile City
     * TONGVAH = Tongva Hills
     * TONGVAV = Tongva Valley
     * VCANA = Vespucci Canals
     * VESP = Vespucci
     * VINE = Vinewood
     * WINDF = Ron Alternates Wind Farm
     * WVINE = West Vinewood
     * ZANCUDO = Zancudo River
     * ZP_ORT = Port of South Los Santos
     * ZQ_UAR = Davis Quartz
     *
     * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
     *
     * Hash: 0xCD90657D4C30E1CA | Since: 323 | API-Set: unknown
     */
    export function getNameOf(pos: Vector3): string {
        return GetNameOfZone(pos.x, pos.y, pos.z);
    }

    /**
     * No comment provided
     *
     * Hash: 0x27040C25DE6CB2F4 | Since: 323 | API-Set: unknown
     */
    export function getAtCoords(pos: Vector3): number {
        return GetZoneAtCoords(pos.x, pos.y, pos.z);
    }

    /**
     * 'zoneName' corresponds to an entry in 'popzone.ipl'.
     *
     * AIRP = Los Santos International Airport
     * ALAMO = Alamo Sea
     * ALTA = Alta
     * ARMYB = Fort Zancudo
     * BANHAMC = Banham Canyon Dr
     * BANNING = Banning
     * BEACH = Vespucci Beach
     * BHAMCA = Banham Canyon
     * BRADP = Braddock Pass
     * BRADT = Braddock Tunnel
     * BURTON = Burton
     * CALAFB = Calafia Bridge
     * CANNY = Raton Canyon
     * CCREAK = Cassidy Creek
     * CHAMH = Chamberlain Hills
     * CHIL = Vinewood Hills
     * CHU = Chumash
     * CMSW = Chiliad Mountain State Wilderness
     * CYPRE = Cypress Flats
     * DAVIS = Davis
     * DELBE = Del Perro Beach
     * DELPE = Del Perro
     * DELSOL = La Puerta
     * DESRT = Grand Senora Desert
     * DOWNT = Downtown
     * DTVINE = Downtown Vinewood
     * EAST_V = East Vinewood
     * EBURO = El Burro Heights
     * ELGORL = El Gordo Lighthouse
     * ELYSIAN = Elysian Island
     * GALFISH = Galilee
     * GOLF = GWC and Golfing Society
     * GRAPES = Grapeseed
     * GREATC = Great Chaparral
     * HARMO = Harmony
     * HAWICK = Hawick
     * HORS = Vinewood Racetrack
     * HUMLAB = Humane Labs and Research
     * JAIL = Bolingbroke Penitentiary
     * KOREAT = Little Seoul
     * LACT = Land Act Reservoir
     * LAGO = Lago Zancudo
     * LDAM = Land Act Dam
     * LEGSQU = Legion Square
     * LMESA = La Mesa
     * LOSPUER = La Puerta
     * MIRR = Mirror Park
     * MORN = Morningwood
     * MOVIE = Richards Majestic
     * MTCHIL = Mount Chiliad
     * MTGORDO = Mount Gordo
     * MTJOSE = Mount Josiah
     * MURRI = Murrieta Heights
     * NCHU = North Chumash
     * NOOSE = N.O.O.S.E
     * OCEANA = Pacific Ocean
     * PALCOV = Paleto Cove
     * PALETO = Paleto Bay
     * PALFOR = Paleto Forest
     * PALHIGH = Palomino Highlands
     * PALMPOW = Palmer-Taylor Power Station
     * PBLUFF = Pacific Bluffs
     * PBOX = Pillbox Hill
     * PROCOB = Procopio Beach
     * RANCHO = Rancho
     * RGLEN = Richman Glen
     * RICHM = Richman
     * ROCKF = Rockford Hills
     * RTRAK = Redwood Lights Track
     * SANAND = San Andreas
     * SANCHIA = San Chianski Mountain Range
     * SANDY = Sandy Shores
     * SKID = Mission Row
     * SLAB = Stab City
     * STAD = Maze Bank Arena
     * STRAW = Strawberry
     * TATAMO = Tataviam Mountains
     * TERMINA = Terminal
     * TEXTI = Textile City
     * TONGVAH = Tongva Hills
     * TONGVAV = Tongva Valley
     * VCANA = Vespucci Canals
     * VESP = Vespucci
     * VINE = Vinewood
     * WINDF = Ron Alternates Wind Farm
     * WVINE = West Vinewood
     * ZANCUDO = Zancudo River
     * ZP_ORT = Port of South Los Santos
     * ZQ_UAR = Davis Quartz
     *
     * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
     *
     * Hash: 0x98CD1D2934B76CC1 | Since: 323 | API-Set: unknown
     */
    export function getFromNameId(zoneName: string): number {
        return GetZoneFromNameId(zoneName);
    }

    /**
     * No comment provided
     *
     * Hash: 0x4334BC40AA0CB4BB | Since: 323 | API-Set: unknown
     */
    export function getPopschedule(zoneId: number): number {
        return GetZonePopschedule(zoneId);
    }

    /**
     * cellphone range 1- 5 used for signal bar in iFruit phone
     *
     * Hash: 0x5F7B268D15BA0739 | Since: 323 | API-Set: unknown
     */
    export function getScumminess(zoneId: number): number {
        return GetZoneScumminess(zoneId);
    }

    /**
     * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
     *
     * Modified example from "am_imp_exp.c4", line 6406:
     * `\/\* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));`
     * etc.
     * \*\/
     * `ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);`
     * `STREAMING::REQUEST_MODEL(vehicleHash);`
     *
     * Hash: 0x5F7D596BAC2E7777 | Since: 323 | API-Set: unknown
     */
    export function overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: number | string): void {
        if (typeof vehicleHash === 'string') vehicleHash = misc.getHashKey(vehicleHash)
        OverridePopscheduleVehicleModel(scheduleId, vehicleHash);
    }

    /**
     * No comment provided
     *
     * Hash: 0xBA5ECEEA120E5611 | Since: 323 | API-Set: unknown
     */
    export function setEnabled(zoneId: number, toggle: boolean): void {
        SetZoneEnabled(zoneId, toggle);
    }

}

export * from "@risinglife/fivem-shared";