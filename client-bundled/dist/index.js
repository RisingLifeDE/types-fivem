import { Vector3, IEntity } from '@risinglife/fivem-shared';
export var events;
(function (events_1) {
    class EventEmitter {
        listeners = new Map();
        on(eventName, callback) {
            if (!this.listeners.has(eventName)) {
                this.listeners.set(eventName, []);
            }
            this.listeners.get(eventName).push(callback);
        }
        once(eventName, callback) {
            const onceWrapper = (...args) => {
                this.off(eventName, onceWrapper);
                callback(...args);
            };
            this.on(eventName, onceWrapper);
        }
        emit(eventName, ...args) {
            const callbacks = this.listeners.get(eventName);
            if (callbacks) {
                callbacks.forEach((callback) => {
                    try {
                        callback(...args);
                    }
                    catch (error) {
                        EventLogger.logError(eventName, error);
                    }
                });
            }
        }
        off(eventName, callback) {
            const callbacks = this.listeners.get(eventName);
            if (callbacks) {
                const index = callbacks.indexOf(callback);
                if (index !== -1) {
                    callbacks.splice(index, 1);
                }
            }
        }
        removeAllListeners(eventName) {
            if (eventName) {
                this.listeners.delete(eventName);
            }
            else {
                this.listeners.clear();
            }
        }
    }
    class EventParsingUtils {
        static parseArgument(arg) {
            if (typeof arg === 'string') {
                try {
                    return JSON.parse(arg);
                }
                catch {
                    return arg;
                }
            }
            if (Array.isArray(arg)) {
                return arg.map((item) => this.parseArgument(item));
            }
            if (arg && typeof arg === 'object') {
                const result = {};
                for (const [key, value] of Object.entries(arg)) {
                    result[key] = this.parseArgument(value);
                }
                return result;
            }
            return arg;
        }
        static parseAllArguments(args) {
            return args.map((arg) => this.parseArgument(arg));
        }
        static assignFields(target, source) {
            if (typeof target === 'object' && target !== null && typeof source === 'object' && source !== null) {
                return Object.assign(target, source);
            }
            return source;
        }
    }
    class EventRegistry {
        static networkEvents = new Set();
        static localEvents = new Set();
        static networkEmitter = new EventEmitter();
        static localEmitter = new EventEmitter();
        static getNetworkRegistry() {
            return {
                events: this.networkEvents,
                emitter: this.networkEmitter
            };
        }
        static getLocalRegistry() {
            return {
                events: this.localEvents,
                emitter: this.localEmitter
            };
        }
    }
    class EventLogger {
        static logErrors = true;
        static logEvents = false;
        static logEvent(type, eventName, ...args) {
            if (this.logEvents)
                console.log(`[${type}] ${eventName}`, ...args);
        }
        static logError(eventName, error) {
            if (this.logErrors)
                console.error(`Error in event handler for "${eventName}":`, error);
        }
    }
    class RemoteEventUtils {
        static api = {
            // @ts-ignore
            onNet: (eventName, handler) => onNet(eventName, handler),
            // @ts-ignore
            emitNet: (eventName, ...args) => emitNet(eventName, ...args),
            // @ts-ignore
            on: (eventName, handler) => addEventListener(eventName, handler),
            // @ts-ignore
            emit: (eventName, ...args) => TriggerEvent(eventName, ...args),
        };
        static getNetworkEventName(eventName) {
            return eventName.startsWith('net::') ? eventName : `net::${eventName}`;
        }
        static setupListener(eventName) {
            const { events, emitter } = EventRegistry.getNetworkRegistry();
            const networkEventName = this.getNetworkEventName(eventName);
            if (!events.has(eventName)) {
                events.add(eventName);
                const handler = (...args) => {
                    const parsedArgs = EventParsingUtils.parseAllArguments(args);
                    emitter.emit(eventName, ...parsedArgs);
                    EventLogger.logEvent('NETWORK', eventName, ...args);
                };
                this.api.onNet(networkEventName, handler);
            }
        }
        static registerEvent(eventName, callback) {
            this.setupListener(eventName);
            const { emitter } = EventRegistry.getNetworkRegistry();
            emitter.on(eventName, callback);
        }
        static registerEventOnce(eventName, callback) {
            this.setupListener(eventName);
            const { emitter } = EventRegistry.getNetworkRegistry();
            emitter.once(eventName, callback);
        }
        static removeListener(eventName, callback) {
            const { emitter } = EventRegistry.getNetworkRegistry();
            emitter.off(eventName, callback);
        }
        static removeAllListeners(eventName) {
            const { emitter } = EventRegistry.getNetworkRegistry();
            emitter.removeAllListeners(eventName);
        }
        static send(eventName, ...args) {
            const networkEventName = this.getNetworkEventName(eventName);
            const parsedArgs = args.map((arg) => {
                if (arg instanceof IEntity) {
                    return arg.remoteId();
                }
                return arg;
            });
            EventLogger.logEvent('NETWORK', eventName, ...parsedArgs);
            this.api.emitNet(networkEventName, ...parsedArgs);
        }
    }
    class LocalEventUtils {
        static api = {
            // @ts-ignore
            onNet: (eventName, handler) => onNet(eventName, handler),
            // @ts-ignore
            emitNet: (eventName, ...args) => emitNet(eventName, ...args),
            // @ts-ignore
            on: (eventName, handler) => addEventListener(eventName, handler),
            // @ts-ignore
            emit: (eventName, ...args) => TriggerEvent(eventName, ...args),
        };
        static setupListener(eventName) {
            const { events, emitter } = EventRegistry.getLocalRegistry();
            if (!events.has(eventName)) {
                events.add(eventName);
                const handler = (...args) => {
                    const parsedArgs = EventParsingUtils.parseAllArguments(args);
                    emitter.emit(eventName, ...parsedArgs);
                    EventLogger.logEvent('LOCAL', eventName, ...args);
                };
                this.api.on(eventName, handler);
            }
        }
        static registerEvent(eventName, callback) {
            this.setupListener(eventName);
            const { emitter } = EventRegistry.getLocalRegistry();
            emitter.on(eventName, callback);
        }
        static registerEventOnce(eventName, callback) {
            this.setupListener(eventName);
            const { emitter } = EventRegistry.getLocalRegistry();
            emitter.once(eventName, callback);
        }
        static removeListener(eventName, callback) {
            const { emitter } = EventRegistry.getLocalRegistry();
            emitter.off(eventName, callback);
        }
        static removeAllListeners(eventName) {
            const { emitter } = EventRegistry.getLocalRegistry();
            emitter.removeAllListeners(eventName);
        }
        static send(eventName, ...args) {
            const parsedArgs = args.map((arg) => {
                if (arg instanceof IEntity) {
                    return arg.remoteId();
                }
                return arg;
            });
            EventLogger.logEvent('LOCAL', eventName, ...parsedArgs);
            this.api.emit(eventName, ...parsedArgs);
        }
    }
    function removeAllListeners(key) {
        LocalEventUtils.removeAllListeners(key);
        RemoteEventUtils.removeAllListeners(key);
    }
    events_1.removeAllListeners = removeAllListeners;
    /**
     * Registers a listener for a local emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    function on(key, callback) {
        LocalEventUtils.registerEvent(key, callback);
    }
    events_1.on = on;
    /**
     * Registers a onetime listener for a local emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    function once(key, callback) {
        LocalEventUtils.registerEventOnce(key, callback);
    }
    events_1.once = once;
    /**
     * Removes a listener for a local emitted event
     * @param key The event key which should be removed
     * @param callback Must be the callback
     */
    function off(key, callback) {
        LocalEventUtils.removeListener(key, callback);
    }
    events_1.off = off;
    /**
     * Registers a listener for the server emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    function onServer(key, callback) {
        RemoteEventUtils.registerEvent(key, callback);
    }
    events_1.onServer = onServer;
    /**
     * Registers a onetime listener for the server emitted event
     * @param key The event key which should be listened on
     * @param callback The callback which should be executed
     */
    function onceServer(key, callback) {
        RemoteEventUtils.registerEventOnce(key, callback);
    }
    events_1.onceServer = onceServer;
    /**
     * Removes a listener for the server emitted event
     * @param key The event key which should be removed
     * @param callback Must be the callback
     */
    function offServer(key, callback) {
        RemoteEventUtils.removeListener(key, callback);
    }
    events_1.offServer = offServer;
    /**
     * Sends data local, which can be listened by any resource
     * @param key The event key
     * @param args All parameters
     */
    function emit(key, ...args) {
        LocalEventUtils.send(key, ...args);
    }
    events_1.emit = emit;
    /**
     * Sends data to the server, which can be listened by any resource
     * @param key The event key
     * @param args All parameters
     */
    function emitServer(key, ...args) {
        RemoteEventUtils.send(key, ...args);
    }
    events_1.emitServer = emitServer;
    // Implementations
    /**
     * Will be triggered when a resource is started
     */
    function onResourceStart(callback) {
        on("onResourceStart", (name) => {
            callback(name);
        });
    }
    events_1.onResourceStart = onResourceStart;
    /**
     * Will be triggered when a resource is being starting
     * You can use {@link misc.cancelEvent()} to cancel the start
     */
    function onResourceStarting(callback) {
        on("onResourceStarting", (name) => {
            callback(name);
        });
    }
    events_1.onResourceStarting = onResourceStarting;
    /**
     * Will be triggered when a resource is being stopped
     */
    function onResourceStop(callback) {
        on("onResourceStop", (name) => {
            callback(name);
        });
    }
    events_1.onResourceStop = onResourceStop;
    /**
     * Will be triggered when a game event is fired.
     * You can find a list of all game events here: https://docs.fivem.net/docs/game-references/game-events/
     */
    function onGameEvent(callback) {
        on("gameEventTriggered", (name, args) => {
            callback(name, args);
        });
    }
    events_1.onGameEvent = onGameEvent;
    /**
     * Will be triggered when a population ped is being creating.
     * You can use {@link misc.cancelEvent()} to cancel this event.
     */
    function onPopulationPedCreating(callback) {
        on('populationPedCreating', (x, y, z, model, setters) => {
            callback(new Vector3(x, y, z), model, setters);
        });
    }
    events_1.onPopulationPedCreating = onPopulationPedCreating;
    /**
     * Will be triggered when an Entity got damage
     */
    function onEntityDamaged(callback) {
        on('entityDamaged', (victim, culprit, weapon, baseDamage) => {
            callback(victim, culprit, weapon, baseDamage);
        });
    }
    events_1.onEntityDamaged = onEntityDamaged;
    /**
     * Will be triggered when mumble is connected
     */
    function onMumbleConnected(callback) {
        on('mumbleConnected', (address, reconnecting) => {
            callback(address, reconnecting);
        });
    }
    events_1.onMumbleConnected = onMumbleConnected;
    /**
     * Will be triggered when mumble is disconnected
     */
    function onMumbleDisconnected(callback) {
        on('mumbleDisconnected', (address) => {
            callback(address);
        });
    }
    events_1.onMumbleDisconnected = onMumbleDisconnected;
})(events || (events = {}));
// All below is auto-generated code
export var audio;
(function (audio) {
    /**
     * Allows StaticEmitter's without a linked entity to make use of environment features like occlusion and reverb even if they are located higher than 20.0 units above any static collision inside interiors.
     *
     * This native allows you to extend the probe range up to 150.0 units.
     *
     * Hash: 0x8AA1F3C2 | Since: unknown
     */
    function setEmitterProbeLength(probeLength) {
        Citizen.invokeNative('0x8AA1F3C2', probeLength);
    }
    audio.setEmitterProbeLength = setEmitterProbeLength;
    /**
     * Adds an output for the specified audio submix.
     *
     * Hash: 0xAC6E290D | Since: unknown
     */
    function addSubmixOutput(submixId, outputSubmixId) {
        Citizen.invokeNative('0xAC6E290D', submixId, outputSubmixId);
    }
    audio.addSubmixOutput = addSubmixOutput;
    /**
     * Creates an audio submix with the specified name, or gets the existing audio submix by that name.
     *
     * Hash: 0x658D2BC8 | Since: unknown
     */
    function createSubmix(name) {
        return Citizen.invokeNative('0x658D2BC8', name);
    }
    audio.createSubmix = createSubmix;
    /**
     * Sets a floating-point parameter for a submix effect.
     *
     * Hash: 0x9A209B3C | Since: unknown
     */
    function setSubmixEffectParamFloat(submixId, effectSlot, paramIndex, paramValue) {
        Citizen.invokeNative('0x9A209B3C', submixId, effectSlot, paramIndex, paramValue);
    }
    audio.setSubmixEffectParamFloat = setSubmixEffectParamFloat;
    /**
     * Sets an integer parameter for a submix effect.
     *
     * Hash: 0x77FAE2B8 | Since: unknown
     */
    function setSubmixEffectParamInt(submixId, effectSlot, paramIndex, paramValue) {
        Citizen.invokeNative('0x77FAE2B8', submixId, effectSlot, paramIndex, paramValue);
    }
    audio.setSubmixEffectParamInt = setSubmixEffectParamInt;
    /**
     * Assigns a RadioFX effect to a submix effect slot.
     *
     * The parameter values for this effect are as follows (backticks are used to represent hashes):
     *
     * | Index | Type | Description |
     * |-|-|-|
     * | \`enabled\` | int | Enables or disables RadioFX on this DSP. |
     * | \`default\` | int | Sets default parameters for the RadioFX DSP and enables it. |
     * | \`freq_low\` | float |  |
     * | \`freq_hi\` | float |  |
     * | \`fudge\` | float |  |
     * | \`rm_mod_freq\` | float |  |
     * | \`rm_mix\` | float |  |
     * | \`o_freq_lo\` | float |  |
     * | \`o_freq_hi\` | float |  |
     *
     * Hash: 0xAAA94D53 | Since: unknown
     */
    function setSubmixEffectRadioFx(submixId, effectSlot) {
        Citizen.invokeNative('0xAAA94D53', submixId, effectSlot);
    }
    audio.setSubmixEffectRadioFx = setSubmixEffectRadioFx;
    /**
     * Sets the volumes for the sound channels in a submix effect.
     * Values can be between 0.0 and 1.0.
     * Channel 5 and channel 6 are not used in voice chat but are believed to be center and LFE channels.
     * Output slot starts at 0 for the first ADD_AUDIO_SUBMIX_OUTPUT call then incremented by 1 on each subsequent call.
     *
     * Hash: 0x825DC0D1 | Since: unknown
     */
    function setSubmixOutputVolumes(submixId, outputSlot, frontLeftVolume, frontRightVolume, rearLeftVolume, rearRightVolume, channel5Volume, channel6Volume) {
        Citizen.invokeNative('0x825DC0D1', submixId, outputSlot, frontLeftVolume, frontRightVolume, rearLeftVolume, rearRightVolume, channel5Volume, channel6Volume);
    }
    audio.setSubmixOutputVolumes = setSubmixOutputVolumes;
    /**
     * mode can be any of these:
     * SLOWMO_T1_TRAILER_SMASH
     * SLOWMO_T1_RAYFIRE_EXPLOSION
     * SLOWMO_PROLOGUE_VAULT
     * NIGEL_02_SLOWMO_SETTING
     * JSH_EXIT_TUNNEL_SLOWMO
     * SLOWMO_BIG_SCORE_JUMP
     * SLOWMO_FIB4_TRUCK_SMASH
     * SLOWMO_EXTREME_04
     * SLOW_MO_METH_HOUSE_RAYFIRE
     * BARRY_02_SLOWMO
     * BARRY_01_SLOWMO
     *
     * Hash: 0xD01005D2BA2EB778 | Since: 323
     */
    function activateSlowmoMode(mode) {
        ActivateAudioSlowmoMode(mode);
    }
    audio.activateSlowmoMode = activateSlowmoMode;
    /**
     * All found occurrences in b678d:
     * https://pastebin.com/ceu67jz8
     *
     * Hash: 0x153973AB99FE8980 | Since: 323
     */
    function addEntityToMixGroup(entity, groupName) {
        AddEntityToAudioMixGroup(entity, groupName, 0);
    }
    audio.addEntityToMixGroup = addEntityToMixGroup;
    /**
     * NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
     * GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
     *
     * p0 is -1, 0 - 35
     * p1 is a char or string (whatever you wanna call it)
     * p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
     * p3 is again -1, 0 - 35
     * p4 is again -1, 0 - 35
     * p5 is either 0 or 1 (bool ?)
     * p6 is either 0 or 1 (The func to determine this is bool)
     * p7 is either 0 or 1 (The func to determine this is bool)
     * p8 is either 0 or 1 (The func to determine this is bool)
     * p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
     * p10 is either 0 or 1 (The func to determine this is bool)
     * p11 is either 0 or 1 (The func to determine this is bool)
     * p12 is unknown as in TU27 X360 scripts it only goes to p11.
     *
     * Hash: 0xC5EF963405593646 | Since: 323
     */
    function addLineToConversation(index) {
        AddLineToConversation(index, undefined, undefined, 0, 0, false, false, false, false, 0, false, false, false);
    }
    audio.addLineToConversation = addLineToConversation;
    /**
     * 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
     *
     * `AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");`
     *
     * =================================================
     * One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
     *
     * Hash: 0x95D9F4BC443956E7 | Since: 323
     */
    function addPedToConversation(index, ped) {
        AddPedToConversation(index, ped, undefined);
    }
    audio.addPedToConversation = addPedToConversation;
    /**
     * No comment provided
     *
     * Hash: 0x845FFC3A4FEEFA3E | Since: 323
     */
    function isMusicPlaying() {
        return AudioIsScriptedMusicPlaying();
    }
    audio.isMusicPlaying = isMusicPlaying;
    /**
     * This is an alias of AUDIO_IS_MUSIC_PLAYING.
     *
     * Hash: 0x2DD39BF3E2F9C47F | Since: 463
     */
    function isScriptedMusicPlaying() {
        return Citizen.invokeNative('0x2DD39BF3E2F9C47F');
    }
    audio.isScriptedMusicPlaying = isScriptedMusicPlaying;
    /**
     * Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
     * Only works on vehicles with a police siren.
     *
     * Hash: 0x1B9025BDA76822B6 | Since: 323
     */
    function blipSiren(vehicle) {
        BlipSiren(vehicle);
    }
    audio.blipSiren = blipSiren;
    /**
     * No comment provided
     *
     * Hash: 0xF8AD2EED7C47E8FE | Since: 1734
     */
    function blockAllSpeechFromPed(ped) {
        BlockAllSpeechFromPed(ped, false, false);
    }
    audio.blockAllSpeechFromPed = blockAllSpeechFromPed;
    /**
     * No comment provided
     *
     * Hash: 0xF154B8D1775B2DEC | Since: 323
     */
    function blockDeathJingle(toggle) {
        BlockDeathJingle(toggle);
    }
    audio.blockDeathJingle = blockDeathJingle;
    /**
     * No comment provided
     *
     * Hash: 0xA8A7D434AFB4B97B | Since: 1493
     */
    function blockSpeechContextGroup() {
        BlockSpeechContextGroup(undefined, 0);
    }
    audio.blockSpeechContextGroup = blockSpeechContextGroup;
    /**
     * No comment provided
     *
     * Hash: 0xB4F90FAF7670B16F | Since: 323
     */
    function cancelAllPoliceReports() {
        CancelAllPoliceReports();
    }
    audio.cancelAllPoliceReports = cancelAllPoliceReports;
    /**
     * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
     * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
     *
     * Hash: 0x5B17A90291133DA5 | Since: 323
     */
    function cancelMusicEvent(eventName) {
        return CancelMusicEvent(eventName);
    }
    audio.cancelMusicEvent = cancelMusicEvent;
    /**
     * No comment provided
     *
     * Hash: 0x032A116663A4D5AC | Since: 323
     */
    function canVehicleReceiveCbRadio(vehicle) {
        return CanVehicleReceiveCbRadio(vehicle);
    }
    audio.canVehicleReceiveCbRadio = canVehicleReceiveCbRadio;
    /**
     * No comment provided
     *
     * Hash: 0xB32209EFFDC04913 | Since: 323
     */
    function clearAllBrokenGlass() {
        ClearAllBrokenGlass();
    }
    audio.clearAllBrokenGlass = clearAllBrokenGlass;
    /**
     * No comment provided
     *
     * Hash: 0x120C48C614909FA4 | Since: 323
     */
    function clearAmbientZoneListState(ambientZone) {
        ClearAmbientZoneListState(ambientZone, false);
    }
    audio.clearAmbientZoneListState = clearAmbientZoneListState;
    /**
     * `This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);`
     *
     * Still needs more research.
     *
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0x218DD44AAAC964FF | Since: 323
     */
    function clearAmbientZoneState(zoneName) {
        ClearAmbientZoneState(zoneName, false);
    }
    audio.clearAmbientZoneState = clearAmbientZoneState;
    /**
     * 3 calls in the b617d scripts, removed duplicate.
     *
     * `AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");`
     * `AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");`
     *
     * Hash: 0x1654F24A88A8E3FE | Since: 323
     */
    function clearCustomRadioTrackList(radioStation) {
        ClearCustomRadioTrackList(radioStation);
    }
    audio.clearCustomRadioTrackList = clearCustomRadioTrackList;
    /**
     * No comment provided
     *
     * Hash: 0xD2C91A0B572AAE56 | Since: 323
     */
    function createNewScriptedConversation() {
        CreateNewScriptedConversation();
    }
    audio.createNewScriptedConversation = createNewScriptedConversation;
    /**
     * see ACTIVATE_AUDIO_SLOWMO_MODE for modes
     *
     * Hash: 0xDDC635D5B3262C56 | Since: 323
     */
    function deactivateSlowmoMode(mode) {
        DeactivateAudioSlowmoMode(mode);
    }
    audio.deactivateSlowmoMode = deactivateSlowmoMode;
    /**
     * No comment provided
     *
     * Hash: 0xA9A41C1E940FB0E8 | Since: 323
     */
    function disablePedPain(ped, toggle) {
        DisablePedPainAudio(ped, toggle);
    }
    audio.disablePedPain = disablePedPain;
    /**
     * If value is set to true, and ambient siren sound will be played.
     * Appears to enable/disable an audio flag.
     *
     * Hash: 0x552369F549563AD5 | Since: 323
     */
    function distantCopCarSirens(value) {
        DistantCopCarSirens(value);
    }
    audio.distantCopCarSirens = distantCopCarSirens;
    /**
     * Checks if the ped can play the speech or has the speech file, p2 is usually false.
     *
     * Hash: 0x49B99BF3FDA89A7A | Since: 323
     */
    function doesContextExistForThisPed(ped, speechName) {
        return DoesContextExistForThisPed(ped, speechName, false);
    }
    audio.doesContextExistForThisPed = doesContextExistForThisPed;
    /**
     * No comment provided
     *
     * Hash: 0x109697E2FFBAC8A1 | Since: 323
     */
    function doesPlayerVehHaveRadio() {
        return DoesPlayerVehHaveRadio();
    }
    audio.doesPlayerVehHaveRadio = doesPlayerVehHaveRadio;
    /**
     * Works for planes only.
     *
     * Hash: 0xC15907D667F7CFB2 | Since: 323
     */
    function enableStallWarningSounds(vehicle, toggle) {
        EnableStallWarningSounds(vehicle, toggle);
    }
    audio.enableStallWarningSounds = enableStallWarningSounds;
    /**
     * No comment provided
     *
     * Hash: 0xB81CF134AEB56FFB | Since: 791
     */
    function enableStuntJump() {
        EnableStuntJumpAudio();
    }
    audio.enableStuntJump = enableStuntJump;
    /**
     * No comment provided
     *
     * Hash: 0x2BE4BC731D039D5A | Since: 323
     */
    function enableVehicleExhaustPops(vehicle, toggle) {
        EnableVehicleExhaustPops(vehicle, toggle);
    }
    audio.enableVehicleExhaustPops = enableVehicleExhaustPops;
    /**
     * No comment provided
     *
     * Hash: 0x1C073274E065C6D2 | Since: 323
     */
    function enableVehicleFanbeltDamage(vehicle, toggle) {
        EnableVehicleFanbeltDamage(vehicle, toggle);
    }
    audio.enableVehicleFanbeltDamage = enableVehicleFanbeltDamage;
    /**
     * No comment provided
     *
     * Hash: 0x8D67489793FF428B | Since: 323
     */
    function findRadioStationIndex(stationNameHash) {
        if (typeof stationNameHash === 'string')
            stationNameHash = misc.getHashKey(stationNameHash);
        return FindRadioStationIndex(stationNameHash);
    }
    audio.findRadioStationIndex = findRadioStationIndex;
    /**
     * Changes start time of a tracklist (milliseconds)
     * `R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)`
     *
     * Hash: 0x4E0AF9114608257C | Since: 2372
     */
    function forceMusicTrackList(radioStation, trackListName, milliseconds) {
        ForceMusicTrackList(radioStation, trackListName, milliseconds);
    }
    audio.forceMusicTrackList = forceMusicTrackList;
    /**
     * No comment provided
     *
     * Hash: 0x062D5EAD4DA2FA6A | Since: 323
     */
    function forcePedPanicWalla() {
        ForcePedPanicWalla();
    }
    audio.forcePedPanicWalla = forcePedPanicWalla;
    /**
     * This native sets the audio of the specified vehicle to the audioName (p1).
     *
     * Use the audioNameHash found in vehicles.meta
     *
     * Example:
     * _SET_VEHICLE_AUDIO(veh, "ADDER");
     * The selected vehicle will now have the audio of the Adder.
     *
     * Hash: 0x4F0C413926060B38 | Since: 323
     */
    function forceUseGameObject(vehicle, audioName) {
        ForceUseAudioGameObject(vehicle, audioName);
    }
    audio.forceUseGameObject = forceUseGameObject;
    /**
     * No comment provided
     *
     * Hash: 0xD57AAAE0E2214D11 | Since: 323
     */
    function freezeMicrophone() {
        FreezeMicrophone();
    }
    audio.freezeMicrophone = freezeMicrophone;
    /**
     * No comment provided
     *
     * Hash: 0x344F393B027E38C3 | Since: 323
     */
    function freezeRadioStation(radioStation) {
        FreezeRadioStation(radioStation);
    }
    audio.freezeRadioStation = freezeRadioStation;
    /**
     * No comment provided
     *
     * Hash: 0x5E203DA2BA15D436 | Since: 463
     */
    function getAmbientVoiceNameHash(ped) {
        return GetAmbientVoiceNameHash(ped);
    }
    audio.getAmbientVoiceNameHash = getAmbientVoiceNameHash;
    /**
     * No comment provided
     *
     * Hash: 0x50B196FC9ED6545B | Since: 323
     */
    function getAudibleMusicTrackTextId() {
        return GetAudibleMusicTrackTextId();
    }
    audio.getAudibleMusicTrackTextId = getAudibleMusicTrackTextId;
    /**
     * No comment provided
     *
     * Hash: 0x480357EE890C295A | Since: 323
     */
    function getCurrentScriptedConversationLine() {
        return GetCurrentScriptedConversationLine();
    }
    audio.getCurrentScriptedConversationLine = getCurrentScriptedConversationLine;
    /**
     * No comment provided
     *
     * Hash: 0x3E65CDE5215832C1 | Since: 1493
     */
    function getCurrentTrackPlayTime(radioStationName) {
        return GetCurrentRadioTrackPlaybackTime(radioStationName);
    }
    audio.getCurrentTrackPlayTime = getCurrentTrackPlayTime;
    /**
     * No comment provided
     *
     * Hash: 0x34D66BC058019CE0 | Since: 1493
     */
    function getCurrentTrackSoundName(radioStationName) {
        return GetCurrentTrackSoundName(radioStationName);
    }
    audio.getCurrentTrackSoundName = getCurrentTrackSoundName;
    /**
     * No comment provided
     *
     * Hash: 0xDD3AA743AB7D4D75 | Since: 3095
     */
    function getCurrentTvShowPlayTime() {
        return Citizen.invokeNative('0xDD3AA743AB7D4D75');
    }
    audio.getCurrentTvShowPlayTime = getCurrentTvShowPlayTime;
    /**
     * No comment provided
     *
     * Hash: 0xE73364DB90778FFA | Since: 323
     */
    function getIsPreloadedConversationReady() {
        return GetIsPreloadedConversationReady();
    }
    audio.getIsPreloadedConversationReady = getIsPreloadedConversationReady;
    /**
     * No comment provided
     *
     * Hash: 0xE7A0D23DC414507B | Since: 323
     */
    function getMusicPlaytime() {
        return GetMusicPlaytime();
    }
    audio.getMusicPlaytime = getMusicPlaytime;
    /**
     * No comment provided
     *
     * Hash: 0x3A48AB4445D499BE | Since: 323
     */
    function getMusicVolSlider() {
        return GetMusicVolSlider();
    }
    audio.getMusicVolSlider = getMusicVolSlider;
    /**
     * Could this be used alongside either,
     * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
     *
     * Hash: 0x2DE3F0A134FFBC0D | Since: 323
     */
    function getNetworkIdFromSoundId(soundId) {
        return GetNetworkIdFromSoundId(soundId);
    }
    audio.getNetworkIdFromSoundId = getNetworkIdFromSoundId;
    /**
     * No comment provided
     *
     * Hash: 0xC64A06D939F826F5 | Since: 1493
     */
    function getNextAudibleBeat() {
        return GetNextAudibleBeat();
    }
    audio.getNextAudibleBeat = getNextAudibleBeat;
    /**
     * No comment provided
     *
     * Hash: 0xF1620ECB50E01DE7 | Since: 323
     */
    function getNumUnlockedRadioStations() {
        return GetNumUnlockedRadioStations();
    }
    audio.getNumUnlockedRadioStations = getNumUnlockedRadioStations;
    /**
     * No comment provided
     *
     * Hash: 0xA571991A7FE6CCEB | Since: 323
     */
    function getPlayerRadioStationGenre() {
        return GetPlayerRadioStationGenre();
    }
    audio.getPlayerRadioStationGenre = getPlayerRadioStationGenre;
    /**
     * Returns 255 (radio off index) if the function fails.
     *
     * Hash: 0xE8AF77C4C06ADC93 | Since: 323
     */
    function getPlayerRadioStationIndex() {
        return GetPlayerRadioStationIndex();
    }
    audio.getPlayerRadioStationIndex = getPlayerRadioStationIndex;
    /**
     * Returns active radio station name
     *
     * Hash: 0xF6D733C32076AD03 | Since: 323
     */
    function getPlayerRadioStationName() {
        return GetPlayerRadioStationName();
    }
    audio.getPlayerRadioStationName = getPlayerRadioStationName;
    /**
     * `Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.`
     *
     * Hash: 0xB28ECA15046CA8B9 | Since: 323
     */
    function getRadioStationName(radioStation) {
        return GetRadioStationName(radioStation);
    }
    audio.getRadioStationName = getRadioStationName;
    /**
     * No comment provided
     *
     * Hash: 0x430386FE9BF80B45 | Since: 323
     */
    function getSoundId() {
        return GetSoundId();
    }
    audio.getSoundId = getSoundId;
    /**
     * No comment provided
     *
     * Hash: 0x75262FD12D0A1C84 | Since: 323
     */
    function getSoundIdFromNetworkId(netId) {
        return GetSoundIdFromNetworkId(netId);
    }
    audio.getSoundIdFromNetworkId = getSoundIdFromNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x4E72BBDBCA58A3DB | Since: 323
     */
    function getStreamPlayTime() {
        return GetStreamPlayTime();
    }
    audio.getStreamPlayTime = getStreamPlayTime;
    /**
     * No comment provided
     *
     * Hash: 0xAA19F5572C38B564 | Since: 323
     */
    function getVariationChosenForScriptedLine() {
        return GetVariationChosenForScriptedLine();
    }
    audio.getVariationChosenForScriptedLine = getVariationChosenForScriptedLine;
    /**
     * Returns hash of default vehicle horn
     *
     * Hash is stored in audVehicleAudioEntity
     *
     * Hash: 0x02165D55000219AC | Since: 323
     */
    function getVehicleDefaultHorn(vehicle) {
        return GetVehicleDefaultHorn(vehicle);
    }
    audio.getVehicleDefaultHorn = getVehicleDefaultHorn;
    /**
     * No comment provided
     *
     * Hash: 0xACB5DCCA1EC76840 | Since: 323
     */
    function getVehicleDefaultHornIgnoreMods(vehicle) {
        return GetVehicleDefaultHornIgnoreMods(vehicle);
    }
    audio.getVehicleDefaultHornIgnoreMods = getVehicleDefaultHornIgnoreMods;
    /**
     * No comment provided
     *
     * Hash: 0xD53F3A29BCE2580E | Since: 1365
     */
    function getVehicleHornSoundIndex(vehicle) {
        return GetVehicleHornSoundIndex(vehicle);
    }
    audio.getVehicleHornSoundIndex = getVehicleHornSoundIndex;
    /**
     * No comment provided
     *
     * Hash: 0x544810ED9DB6BBE6 | Since: 323
     */
    function hasLoadedMpDataSet() {
        return HasLoadedMpDataSet();
    }
    audio.hasLoadedMpDataSet = hasLoadedMpDataSet;
    /**
     * No comment provided
     *
     * Hash: 0x5B50ABB1FE3746F4 | Since: 323
     */
    function hasLoadedSpDataSet() {
        return HasLoadedSpDataSet();
    }
    audio.hasLoadedSpDataSet = hasLoadedSpDataSet;
    /**
     * No comment provided
     *
     * Hash: 0xFCBDCE714A7C88E5 | Since: 323
     */
    function hasSoundFinished(soundId) {
        return HasSoundFinished(soundId);
    }
    audio.hasSoundFinished = hasSoundFinished;
    /**
     * p2 is always -1
     *
     * Hash: 0x8F8C0E370AE62F5C | Since: 323
     */
    function hintAmbientBank(audioBank) {
        return HintAmbientAudioBank(audioBank, false, undefined);
    }
    audio.hintAmbientBank = hintAmbientBank;
    /**
     * p2 is always -1
     *
     * Hash: 0x40763EA7B9B783E7 | Since: 573
     */
    function hintMissionBank(audioBank) {
        return HintMissionAudioBank(audioBank, false, undefined);
    }
    audio.hintMissionBank = hintMissionBank;
    /**
     * p2 is always -1
     *
     * Hash: 0xFB380A29641EC31A | Since: 323
     */
    function hintScriptBank(audioBank) {
        return HintScriptAudioBank(audioBank, false, undefined);
    }
    audio.hintScriptBank = hintScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x950A154B8DAB6185 | Since: 323
     */
    function initSynchSceneWithEntity(audioEvent, entity) {
        InitSynchSceneAudioWithEntity(audioEvent, entity);
    }
    audio.initSynchSceneWithEntity = initSynchSceneWithEntity;
    /**
     * No comment provided
     *
     * Hash: 0xC8EDE9BDBCCBA6D4 | Since: 323
     */
    function initSynchSceneWithPosition(audioEvent, pos) {
        InitSynchSceneAudioWithPosition(audioEvent, pos.x, pos.y, pos.z);
    }
    audio.initSynchSceneWithPosition = initSynchSceneWithPosition;
    /**
     * `Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");`
     * Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.
     *
     * Hash: 0xA018A12E5C5C2FA6 | Since: 323
     */
    function interruptConversation(ped, voiceline, speaker) {
        InterruptConversation(ped, voiceline, speaker);
    }
    audio.interruptConversation = interruptConversation;
    /**
     * One call found in the b617d scripts:
     *
     * `AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0\/\*1\*\/]), "CONV_INTERRUPT_QUIT_IT", "LESTER");`
     *
     * Hash: 0x8A694D7A68F8DC38 | Since: 323
     */
    function interruptConversationAndPause(ped, speaker) {
        InterruptConversationAndPause(ped, undefined, speaker);
    }
    audio.interruptConversationAndPause = interruptConversationAndPause;
    /**
     * Example:
     *
     * `bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");`
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0x226435CB96CCFC8C | Since: 323
     */
    function isAlarmPlaying(alarmName) {
        return IsAlarmPlaying(alarmName);
    }
    audio.isAlarmPlaying = isAlarmPlaying;
    /**
     * Common in the scripts:
     * `AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());`
     *
     * Hash: 0x932C2D096A2C3FFF | Since: 323
     */
    function isAmbientSpeechDisabled(ped) {
        return IsAmbientSpeechDisabled(ped);
    }
    audio.isAmbientSpeechDisabled = isAmbientSpeechDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x9072C8B49907BFAD | Since: 323
     */
    function isAmbientSpeechPlaying(ped) {
        return IsAmbientSpeechPlaying(ped);
    }
    audio.isAmbientSpeechPlaying = isAmbientSpeechPlaying;
    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0x01E2817A479A7F9B | Since: 323
     */
    function isAmbientZoneEnabled(ambientZone) {
        return IsAmbientZoneEnabled(ambientZone);
    }
    audio.isAmbientZoneEnabled = isAmbientZoneEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xC265DF9FB44A9FBD | Since: 323
     */
    function isAnimalVocalizationPlaying(pedHandle) {
        return IsAnimalVocalizationPlaying(pedHandle);
    }
    audio.isAnimalVocalizationPlaying = isAnimalVocalizationPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x30CA2EF91D15ADF8 | Since: 2189
     */
    function isAnyPositionalSpeechPlaying() {
        return IsAnyPositionalSpeechPlaying();
    }
    audio.isAnyPositionalSpeechPlaying = isAnyPositionalSpeechPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x729072355FA39EC9 | Since: 323
     */
    function isAnySpeechPlaying(ped) {
        return IsAnySpeechPlaying(ped);
    }
    audio.isAnySpeechPlaying = isAnySpeechPlaying;
    /**
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0xB65B60556E2A9225 | Since: 323
     */
    function isSceneActive(scene) {
        return IsAudioSceneActive(scene);
    }
    audio.isSceneActive = isSceneActive;
    /**
     * Hardcoded to return 1
     *
     * Hash: 0x6D28DC1671E334FD | Since: 323
     */
    function isGameInControlOfMusic() {
        return IsGameInControlOfMusic();
    }
    audio.isGameInControlOfMusic = isGameInControlOfMusic;
    /**
     * Checks whether the horn of a vehicle is currently played.
     *
     * Hash: 0x9D6BFC12B05C6121 | Since: 323
     */
    function isHornActive(vehicle) {
        return IsHornActive(vehicle);
    }
    audio.isHornActive = isHornActive;
    /**
     * No comment provided
     *
     * Hash: 0x19A30C23F5827F8A | Since: 323
     */
    function isMissionCompletePlaying() {
        return IsMissionCompletePlaying();
    }
    audio.isMissionCompletePlaying = isMissionCompletePlaying;
    /**
     * No comment provided
     *
     * Hash: 0x6F259F82D873B8B8 | Since: 323
     */
    function isMissionCompleteReadyForUi() {
        return IsMissionCompleteReadyForUi();
    }
    audio.isMissionCompleteReadyForUi = isMissionCompleteReadyForUi;
    /**
     * No comment provided
     *
     * Hash: 0x66E49BF55B4B1874 | Since: 323
     */
    function isMissionNewsStoryUnlocked(newsStory) {
        return IsMissionNewsStoryUnlocked(newsStory);
    }
    audio.isMissionNewsStoryUnlocked = isMissionNewsStoryUnlocked;
    /**
     * No comment provided
     *
     * Hash: 0xC8B1B2425604CDD0 | Since: 323
     */
    function isMobileInterferenceActive() {
        return IsMobileInterferenceActive();
    }
    audio.isMobileInterferenceActive = isMobileInterferenceActive;
    /**
     * No comment provided
     *
     * Hash: 0x7497D2CE2C30D24C | Since: 323
     */
    function isMobilePhoneCallOngoing() {
        return IsMobilePhoneCallOngoing();
    }
    audio.isMobilePhoneCallOngoing = isMobilePhoneCallOngoing;
    /**
     * No comment provided
     *
     * Hash: 0xB35CE999E8EF317E | Since: 323
     */
    function isMobilePhoneRadioActive() {
        return IsMobilePhoneRadioActive();
    }
    audio.isMobilePhoneRadioActive = isMobilePhoneRadioActive;
    /**
     * No comment provided
     *
     * Hash: 0xA097AB275061FB21 | Since: 323
     */
    function isMusicOneshotPlaying() {
        return IsMusicOneshotPlaying();
    }
    audio.isMusicOneshotPlaying = isMusicOneshotPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x049E937F18F4020C | Since: 323
     */
    function isPedInCurrentConversation(ped) {
        return IsPedInCurrentConversation(ped);
    }
    audio.isPedInCurrentConversation = isPedInCurrentConversation;
    /**
     * No comment provided
     *
     * Hash: 0x1E8E5E20937E3137 | Since: 323
     */
    function isPedRingtonePlaying(ped) {
        return IsPedRingtonePlaying(ped);
    }
    audio.isPedRingtonePlaying = isPedRingtonePlaying;
    /**
     * No comment provided
     *
     * Hash: 0x5F43D83FD6738741 | Since: 323
     */
    function isPlayerVehRadioEnable() {
        return IsPlayerVehRadioEnable();
    }
    audio.isPlayerVehRadioEnable = isPlayerVehRadioEnable;
    /**
     * No comment provided
     *
     * Hash: 0x0626A247D2405330 | Since: 323
     */
    function isRadioFadedOut() {
        return IsRadioFadedOut();
    }
    audio.isRadioFadedOut = isRadioFadedOut;
    /**
     * No comment provided
     *
     * Hash: 0xA151A7394A214E65 | Since: 323
     */
    function isRadioRetuning() {
        return IsRadioRetuning();
    }
    audio.isRadioRetuning = isRadioRetuning;
    /**
     * No comment provided
     *
     * Hash: 0x2B1784DB08AFEA79 | Since: 2699
     */
    function isRadioStationFavourited(radioStation) {
        return IsRadioStationFavourited(radioStation);
    }
    audio.isRadioStationFavourited = isRadioStationFavourited;
    /**
     * No comment provided
     *
     * Hash: 0xDF0D54BE7A776737 | Since: 323
     */
    function isScriptedConversationLoaded() {
        return IsScriptedConversationLoaded();
    }
    audio.isScriptedConversationLoaded = isScriptedConversationLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x16754C556D2EDE3D | Since: 323
     */
    function isScriptedConversationOngoing() {
        return IsScriptedConversationOngoing();
    }
    audio.isScriptedConversationOngoing = isScriptedConversationOngoing;
    /**
     * No comment provided
     *
     * Hash: 0xCC9AA18DCC7084F4 | Since: 323
     */
    function isScriptedSpeechPlaying(p0) {
        return IsScriptedSpeechPlaying(p0);
    }
    audio.isScriptedSpeechPlaying = isScriptedSpeechPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xD11FA52EB849D978 | Since: 323
     */
    function isStreamPlaying() {
        return IsStreamPlaying();
    }
    audio.isStreamPlaying = isStreamPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x5DB8010EE71FDEF2 | Since: 323
     */
    function isVehicleAudiblyDamaged(vehicle) {
        return IsVehicleAudiblyDamaged(vehicle);
    }
    audio.isVehicleAudiblyDamaged = isVehicleAudiblyDamaged;
    /**
     * No comment provided
     *
     * Hash: 0x0BE4BE946463F917 | Since: 505
     */
    function isVehicleRadioOn(vehicle) {
        return IsVehicleRadioOn(vehicle);
    }
    audio.isVehicleRadioOn = isVehicleRadioOn;
    /**
     * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
     *
     * Hash: 0x651D3228960D08AF | Since: 505
     */
    function linkStaticEmitterToEntity(emitterName, entity) {
        LinkStaticEmitterToEntity(emitterName, entity);
    }
    audio.linkStaticEmitterToEntity = linkStaticEmitterToEntity;
    /**
     * Example:
     * `AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");`
     *
     * All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w
     *
     * Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
     *
     * soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x1F1F957154EC51DF | Since: 323
     */
    function loadStream(streamName, soundSet) {
        return LoadStream(streamName, soundSet);
    }
    audio.loadStream = loadStream;
    /**
     * Example:
     * `AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");`
     *
     * Only called a few times in the scripts.
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x59C16B79F53B3712 | Since: 323
     */
    function loadStreamWithStartOffset(streamName, startOffset, soundSet) {
        return LoadStreamWithStartOffset(streamName, startOffset, soundSet);
    }
    audio.loadStreamWithStartOffset = loadStreamWithStartOffset;
    /**
     * Disables the radio station (hides it from the radio wheel).
     *
     * Hash: 0x477D9DB48F889591 | Since: 1493
     */
    function lockRadioStation(radioStationName, toggle) {
        LockRadioStation(radioStationName, toggle);
    }
    audio.lockRadioStation = lockRadioStation;
    /**
     * No comment provided
     *
     * Hash: 0xFF5E5EA2DCEEACF3 | Since: 2372
     */
    function lockRadioStationTrackList(radioStation, trackListName) {
        LockRadioStationTrackList(radioStation, trackListName);
    }
    audio.lockRadioStationTrackList = lockRadioStationTrackList;
    /**
     * Sets audio flag "OverrideMicrophoneSettings"
     *
     * Hash: 0x75773E11BA459E90 | Since: 323
     */
    function overrideMicrophoneSettings(hash, toggle) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        OverrideMicrophoneSettings(hash, toggle);
    }
    audio.overrideMicrophoneSettings = overrideMicrophoneSettings;
    /**
     * Sets audio flag "OverridePlayerGroundMaterial"
     *
     * Hash: 0xD2CC78CD3D0B50F9 | Since: 323
     */
    function overridePlayerGroundMaterial(hash, toggle) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        OverridePlayerGroundMaterial(hash, toggle);
    }
    audio.overridePlayerGroundMaterial = overridePlayerGroundMaterial;
    /**
     * This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
     *
     * Hash: 0x13AD665062541A7E | Since: 323
     */
    function overrideTrevorRage(voiceEffect) {
        OverrideTrevorRage(voiceEffect);
    }
    audio.overrideTrevorRage = overrideTrevorRage;
    /**
     * No comment provided
     *
     * Hash: 0xF2A9CDABCEA04BD6 | Since: 323
     */
    function overrideUnderwaterStream() {
        OverrideUnderwaterStream(undefined, false);
    }
    audio.overrideUnderwaterStream = overrideUnderwaterStream;
    /**
     * Overrides the vehicle's horn hash.
     * When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)
     *
     * vehicle - the vehicle whose horn should be overwritten
     *
     * Hash: 0x3CDC1E622CCE0356 | Since: 323
     */
    function overrideVehHorn(vehicle, override, hornHash) {
        OverrideVehHorn(vehicle, override, hornHash);
    }
    audio.overrideVehHorn = overrideVehHorn;
    /**
     * No comment provided
     *
     * Hash: 0x8530AD776CD72B12 | Since: 323
     */
    function pauseScriptedConversation() {
        PauseScriptedConversation(false);
    }
    audio.pauseScriptedConversation = pauseScriptedConversation;
    /**
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0xED640017ED337E45 | Since: 323
     */
    function playAmbientSpeechFromPositionNative(speechName, voiceName, pos, speechParam) {
        PlayAmbientSpeechFromPositionNative(speechName, voiceName, pos.x, pos.y, pos.z, speechParam);
    }
    audio.playAmbientSpeechFromPositionNative = playAmbientSpeechFromPositionNative;
    /**
     * Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
     * This native is works only when you call it on the ped with right model (ac_chop only ?)
     * Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
     *
     * Hash: 0xEE066C7006C49C0A | Since: 323
     */
    function playAnimalVocalization(pedHandle, speechName) {
        PlayAnimalVocalization(pedHandle, 0, speechName);
    }
    audio.playAnimalVocalization = playAnimalVocalization;
    /**
     * Only call found in the b617d scripts:
     *
     * `AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");`
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0xCADA5A0D0702381E | Since: 323
     */
    function playDeferredSoundFrontend(soundName, soundsetName) {
        PlayDeferredSoundFrontend(soundName, soundsetName);
    }
    audio.playDeferredSoundFrontend = playDeferredSoundFrontend;
    /**
     * No comment provided
     *
     * Hash: 0xCD536C4D33DCC900 | Since: 323
     */
    function playEndCreditsMusic(play) {
        PlayEndCreditsMusic(play);
    }
    audio.playEndCreditsMusic = playEndCreditsMusic;
    /**
     * Called 38 times in the scripts. There are 5 different audioNames used.
     * One unknown removed below.
     *
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");`
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");`
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");`
     * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");`
     *
     * Hash: 0xB138AAB8A70D3C69 | Since: 323
     */
    function playMissionComplete(audioName) {
        PlayMissionCompleteAudio(audioName);
    }
    audio.playMissionComplete = playMissionComplete;
    /**
     * `Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);`
     *
     * Last 2 parameters always seem to be 0.
     *
     * EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
     *
     * Known Pain IDs
     * ________________________
     *
     * 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
     * 6 - Scream (Short)
     * 7 - Scared Scream (Kinda Long)
     * 8 - On Fire
     *
     *
     * Hash: 0xBC9AE166038A5CEC | Since: 323
     */
    function playPain(ped, painID) {
        PlayPain(ped, painID, 0, undefined);
    }
    audio.playPain = playPain;
    /**
     * Plays ambient speech. See also _0x5C57B85D.
     *
     * See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.
     *
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0xC6941B4A3A8FBBB9 | Since: 323
     */
    function playPedAmbientSpeechAndCloneNative(ped, speechName, speechParam) {
        PlayPedAmbientSpeechAndCloneNative(ped, speechName, speechParam, undefined);
    }
    audio.playPedAmbientSpeechAndCloneNative = playPedAmbientSpeechAndCloneNative;
    /**
     * Plays ambient speech. See also _0x444180DB.
     *
     * ped: The ped to play the ambient speech.
     * speechName: Name of the speech to play, eg. "GENERIC_HI".
     * speechParam: Can be one of the following:
     * SPEECH_PARAMS_STANDARD
     * SPEECH_PARAMS_ALLOW_REPEAT
     * SPEECH_PARAMS_BEAT
     * SPEECH_PARAMS_FORCE
     * SPEECH_PARAMS_FORCE_FRONTEND
     * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
     * SPEECH_PARAMS_FORCE_NORMAL
     * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
     * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
     * SPEECH_PARAMS_FORCE_SHOUTED
     * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
     * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
     * SPEECH_PARAMS_MEGAPHONE
     * SPEECH_PARAMS_HELI
     * SPEECH_PARAMS_FORCE_MEGAPHONE
     * SPEECH_PARAMS_FORCE_HELI
     * SPEECH_PARAMS_INTERRUPT
     * SPEECH_PARAMS_INTERRUPT_SHOUTED
     * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
     * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
     * SPEECH_PARAMS_INTERRUPT_NO_FORCE
     * SPEECH_PARAMS_INTERRUPT_FRONTEND
     * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
     * SPEECH_PARAMS_ADD_BLIP
     * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
     * SPEECH_PARAMS_ADD_BLIP_FORCE
     * SPEECH_PARAMS_ADD_BLIP_SHOUTED
     * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
     * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
     * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
     * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
     * SPEECH_PARAMS_SHOUTED
     * SPEECH_PARAMS_SHOUTED_CLEAR
     * SPEECH_PARAMS_SHOUTED_CRITICAL
     *
     * Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL
     *
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0x8E04FEDD28D42462 | Since: 323
     */
    function playPedAmbientSpeechNative(ped, speechName, speechParam) {
        PlayPedAmbientSpeechNative(ped, speechName, speechParam, undefined);
    }
    audio.playPedAmbientSpeechNative = playPedAmbientSpeechNative;
    /**
     * This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
     *
     * EX (C#):
     * GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
     *
     * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
     *
     * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
     *
     * Hash: 0x3523634255FC3318 | Since: 323
     */
    function playPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam) {
        PlayPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, false);
    }
    audio.playPedAmbientSpeechWithVoiceNative = playPedAmbientSpeechWithVoiceNative;
    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny
     *
     * `AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);`
     * `AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);`
     *
     *
     * Hash: 0xF9E56683CA8E11A5 | Since: 323
     */
    function playPedRingtone(ringtoneName, ped) {
        PlayPedRingtone(ringtoneName, ped, false);
    }
    audio.playPedRingtone = playPedRingtone;
    /**
     * Plays the given police radio message.
     *
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
     * Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
     *
     * Hash: 0xDFEBD56D9BD1EB16 | Since: 323
     */
    function playPoliceReport(name) {
        return PlayPoliceReport(name, 0);
    }
    audio.playPoliceReport = playPoliceReport;
    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x7FF4944CC209192D | Since: 323
     */
    function playSound(soundId, audioName, audioRef) {
        PlaySound(soundId, audioName, audioRef, false, undefined, false);
    }
    audio.playSound = playSound;
    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW
     *
     * gtaforums.com/topic/795622-audio-for-mods
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x8D8686B622B88120 | Since: 323
     */
    function playSoundFromCoord(soundId, audioName, pos, audioRef, isNetwork, range) {
        PlaySoundFromCoord(soundId, audioName, pos.x, pos.y, pos.z, audioRef, isNetwork, range, false);
    }
    audio.playSoundFromCoord = playSoundFromCoord;
    /**
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0
     * No changes made in b678d.
     *
     * gtaforums.com/topic/795622-audio-for-mods
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0xE65F427EB70AB1ED | Since: 323
     */
    function playSoundFromEntity(soundId, audioName, entity, audioRef, isNetwork) {
        PlaySoundFromEntity(soundId, audioName, entity, audioRef, isNetwork, undefined);
    }
    audio.playSoundFromEntity = playSoundFromEntity;
    /**
     * Only used with "formation_flying_blips_soundset" and "biker_formation_blips_soundset".
     * p1 is always the model of p2
     *
     * Hash: 0x5B9853296731E88D | Since: 877
     */
    function playSoundFromEntityHash(soundId, model, entity, soundSetHash) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        if (typeof soundSetHash === 'string')
            soundSetHash = misc.getHashKey(soundSetHash);
        Citizen.invokeNative('0x5B9853296731E88D', soundId, model, entity, soundSetHash, undefined, undefined);
    }
    audio.playSoundFromEntityHash = playSoundFromEntityHash;
    /**
     * List: https://pastebin.com/DCeRiaLJ
     *
     * All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
     *
     * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
     *
     * Hash: 0x67C540AA08E4A6F5 | Since: 323
     */
    function playSoundFrontend(soundId, audioName, audioRef) {
        PlaySoundFrontend(soundId, audioName, audioRef, false);
    }
    audio.playSoundFrontend = playSoundFrontend;
    /**
     * `Used with AUDIO::LOAD_STREAM`
     *
     * Example from finale_heist2b.c4:
     * `TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2\/\*14\*\/], l_4C8[2\/\*14\*\/]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);`
     * `PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2\/\*14\*\/]._f7, 0.0);`
     * `PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2\/\*14\*\/], 0, 0);`
     * `PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2\/\*14\*\/], 38, 1);`
     * `PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2\/\*14\*\/], 1);`
     * `if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {`
     * `AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0\/\*1\*\/]);`
     * }
     *
     * Hash: 0xEBAA9B64D76356FD | Since: 323
     */
    function playStreamFromObject(_object) {
        PlayStreamFromObject(_object);
    }
    audio.playStreamFromObject = playStreamFromObject;
    /**
     * No comment provided
     *
     * Hash: 0x89049DD63C08B5D1 | Since: 323
     */
    function playStreamFromPed(ped) {
        PlayStreamFromPed(ped);
    }
    audio.playStreamFromPed = playStreamFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x21442F412E8DE56B | Since: 323
     */
    function playStreamFromPosition(pos) {
        PlayStreamFromPosition(pos.x, pos.y, pos.z);
    }
    audio.playStreamFromPosition = playStreamFromPosition;
    /**
     * No comment provided
     *
     * Hash: 0xB70374A758007DFA | Since: 323
     */
    function playStreamFromVehicle(vehicle) {
        PlayStreamFromVehicle(vehicle);
    }
    audio.playStreamFromVehicle = playStreamFromVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x58FCE43488F9F5F4 | Since: 323
     */
    function playStreamFrontend() {
        PlayStreamFrontend();
    }
    audio.playStreamFrontend = playStreamFrontend;
    /**
     * No comment provided
     *
     * Hash: 0x8B2FD4560E55DD2D | Since: 323
     */
    function playSynchronizedEvent(sceneID) {
        return PlaySynchronizedAudioEvent(sceneID);
    }
    audio.playSynchronizedEvent = playSynchronizedEvent;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x62A456AA4769EF34 | Since: 323
     */
    function playVehicleDoorCloseSound(vehicle, doorId) {
        PlayVehicleDoorCloseSound(vehicle, doorId);
    }
    audio.playVehicleDoorCloseSound = playVehicleDoorCloseSound;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x3A539D52857EA82D | Since: 323
     */
    function playVehicleDoorOpenSound(vehicle, doorId) {
        PlayVehicleDoorOpenSound(vehicle, doorId);
    }
    audio.playVehicleDoorOpenSound = playVehicleDoorOpenSound;
    /**
     * No comment provided
     *
     * Hash: 0x3B3CAD6166916D87 | Since: 323
     */
    function preloadScriptConversation() {
        PreloadScriptConversation(false, false, false, false);
    }
    audio.preloadScriptConversation = preloadScriptConversation;
    /**
     * No comment provided
     *
     * Hash: 0x6004BCB0E226AAEA | Since: 323
     */
    function preloadScriptPhoneConversation() {
        PreloadScriptPhoneConversation(false, false);
    }
    audio.preloadScriptPhoneConversation = preloadScriptPhoneConversation;
    /**
     * No comment provided
     *
     * Hash: 0xCA4CEA6AE0000A7E | Since: 1180
     */
    function preloadVehicleBank(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        PreloadVehicleAudioBank(vehicleModel);
    }
    audio.preloadVehicleBank = preloadVehicleBank;
    /**
     * Example:
     *
     * `bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");`
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0x9D74AE343DB65533 | Since: 323
     */
    function prepareAlarm(alarmName) {
        return PrepareAlarm(alarmName);
    }
    audio.prepareAlarm = prepareAlarm;
    /**
     * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
     * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
     *
     * Hash: 0x1E5185B72EF5158A | Since: 323
     */
    function prepareMusicEvent(eventName) {
        return PrepareMusicEvent(eventName);
    }
    audio.prepareMusicEvent = prepareMusicEvent;
    /**
     * p1 is always 0 in the scripts
     *
     * Hash: 0xC7ABCACA4985A766 | Since: 323
     */
    function prepareSynchronizedEvent(audioEvent) {
        return PrepareSynchronizedAudioEvent(audioEvent, undefined);
    }
    audio.prepareSynchronizedEvent = prepareSynchronizedEvent;
    /**
     * No comment provided
     *
     * Hash: 0x029FE7CD1B7E2E75 | Since: 323
     */
    function prepareSynchronizedEventForScene(sceneID, audioEvent) {
        return PrepareSynchronizedAudioEventForScene(sceneID, audioEvent);
    }
    audio.prepareSynchronizedEventForScene = prepareSynchronizedEventForScene;
    /**
     * No comment provided
     *
     * Hash: 0xFBE20329593DEC9D | Since: 323
     */
    function recordBrokenGlass(pos, radius) {
        RecordBrokenGlass(pos.x, pos.y, pos.z, radius);
    }
    audio.recordBrokenGlass = recordBrokenGlass;
    /**
     * No comment provided
     *
     * Hash: 0x5D2BFAAB8D956E0E | Since: 573
     */
    function refreshClosestOceanShoreline() {
        RefreshClosestOceanShoreline();
    }
    audio.refreshClosestOceanShoreline = refreshClosestOceanShoreline;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xC6ED9D5092438D91 | Since: 323
     */
    function registerScriptWith() {
        RegisterScriptWithAudio(0);
    }
    audio.registerScriptWith = registerScriptWith;
    /**
     * No comment provided
     *
     * Hash: 0x65475A218FFAA93D | Since: 323
     */
    function releaseAmbientBank() {
        ReleaseAmbientAudioBank();
    }
    audio.releaseAmbientBank = releaseAmbientBank;
    /**
     * No comment provided
     *
     * Hash: 0x0EC92A1BF0857187 | Since: 323
     */
    function releaseMissionBank() {
        ReleaseMissionAudioBank();
    }
    audio.releaseMissionBank = releaseMissionBank;
    /**
     * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
     *
     * Hash: 0x77ED170667F50170 | Since: 323
     */
    function releaseNamedScriptBank(audioBank) {
        ReleaseNamedScriptAudioBank(audioBank);
    }
    audio.releaseNamedScriptBank = releaseNamedScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x7A2D8AD0A9EB9C3F | Since: 323
     */
    function releaseScriptBank() {
        ReleaseScriptAudioBank();
    }
    audio.releaseScriptBank = releaseScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x353FC880830B88FA | Since: 323
     */
    function releaseSoundId(soundId) {
        ReleaseSoundId(soundId);
    }
    audio.releaseSoundId = releaseSoundId;
    /**
     * No comment provided
     *
     * Hash: 0xCE4AC0439F607045 | Since: 323
     */
    function releaseWeapon() {
        ReleaseWeaponAudio();
    }
    audio.releaseWeapon = releaseWeapon;
    /**
     * No comment provided
     *
     * Hash: 0x18EB48CFC41F2EA0 | Since: 323
     */
    function removeEntityFromMixGroup(entity) {
        RemoveEntityFromAudioMixGroup(entity, 0);
    }
    audio.removeEntityFromMixGroup = removeEntityFromMixGroup;
    /**
     * No comment provided
     *
     * Hash: 0x8EF105736194F80C | Since: 3570
     */
    function removeIndividualPortalSettingsOverride(interiorNameHash, roomIndex, doorIndex) {
        if (typeof interiorNameHash === 'string')
            interiorNameHash = misc.getHashKey(interiorNameHash);
        Citizen.invokeNative('0x8EF105736194F80C', interiorNameHash, roomIndex, doorIndex);
    }
    audio.removeIndividualPortalSettingsOverride = removeIndividualPortalSettingsOverride;
    /**
     * Found in the b617d scripts, duplicates removed:
     *
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");`
     * `AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");`
     *
     * Hash: 0xB4BBFD9CD8B3922B | Since: 323
     */
    function removePortalSettingsOverride() {
        RemovePortalSettingsOverride(undefined);
    }
    audio.removePortalSettingsOverride = removePortalSettingsOverride;
    /**
     * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
     * Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
     * p2 is always -1
     *
     * Hash: 0xFE02FFBED8CA9D99 | Since: 323
     */
    function requestAmbientBank(audioBank) {
        return RequestAmbientAudioBank(audioBank, false, undefined);
    }
    audio.requestAmbientBank = requestAmbientBank;
    /**
     * All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
     * Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
     * p2 is always -1
     *
     * Hash: 0x7345BDD95E62E0F2 | Since: 323
     */
    function requestMissionBank(audioBank) {
        return RequestMissionAudioBank(audioBank, false, undefined);
    }
    audio.requestMissionBank = requestMissionBank;
    /**
     * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
     * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
     * p2 is always -1
     *
     * Hash: 0x2F844A8B08D76685 | Since: 323
     */
    function requestScriptBank(audioBank) {
        return RequestScriptAudioBank(audioBank, false, undefined);
    }
    audio.requestScriptBank = requestScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x4ADA3F19BE4A6047 | Since: 323
     */
    function requestTennisBanks(ped) {
        RequestTennisBanks(ped);
    }
    audio.requestTennisBanks = requestTennisBanks;
    /**
     * No comment provided
     *
     * Hash: 0xF54BB7B61036F335 | Since: 323
     */
    function resetPedFlags(ped) {
        ResetPedAudioFlags(ped);
    }
    audio.resetPedFlags = resetPedFlags;
    /**
     * No comment provided
     *
     * Hash: 0xE78503B10C4314E0 | Since: 323
     */
    function resetTrevorRage() {
        ResetTrevorRage();
    }
    audio.resetTrevorRage = resetTrevorRage;
    /**
     * No comment provided
     *
     * Hash: 0xD2DCCD8E16E20997 | Since: 323
     */
    function resetVehicleStartupRevSound(vehicle) {
        ResetVehicleStartupRevSound(vehicle);
    }
    audio.resetVehicleStartupRevSound = resetVehicleStartupRevSound;
    /**
     * No comment provided
     *
     * Hash: 0x9AEB285D1818C9AC | Since: 323
     */
    function restartScriptedConversation() {
        RestartScriptedConversation();
    }
    audio.restartScriptedConversation = restartScriptedConversation;
    /**
     * No comment provided
     *
     * Hash: 0x70B8EC8FC108A634 | Since: 323
     */
    function scriptOverridesWindElevation() {
        ScriptOverridesWindElevation(false, undefined);
    }
    audio.scriptOverridesWindElevation = scriptOverridesWindElevation;
    /**
     * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
     *
     * Hash: 0x395BF71085D1B1D9 | Since: 323
     */
    function setAggressiveHorns(toggle) {
        SetAggressiveHorns(toggle);
    }
    audio.setAggressiveHorns = setAggressiveHorns;
    /**
     * Audio List
     * gtaforums.com/topic/795622-audio-for-mods/
     *
     * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ
     *
     * Hash: 0x6C8065A3B780185B | Since: 323
     */
    function setAmbientVoiceName(ped, name) {
        SetAmbientVoiceName(ped, name);
    }
    audio.setAmbientVoiceName = setAmbientVoiceName;
    /**
     * No comment provided
     *
     * Hash: 0x9A53DED9921DE990 | Since: 463
     */
    function setAmbientVoiceNameHash(ped, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        SetAmbientVoiceNameHash(ped, hash);
    }
    audio.setAmbientVoiceNameHash = setAmbientVoiceNameHash;
    /**
     * No comment provided
     *
     * Hash: 0x9748FA4DE50CCE3E | Since: 323
     */
    function setAmbientZoneListState(ambientZone) {
        SetAmbientZoneListState(ambientZone, false, false);
    }
    audio.setAmbientZoneListState = setAmbientZoneListState;
    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0xF3638DAE8C4045E1 | Since: 323
     */
    function setAmbientZoneListStatePersistent(ambientZone) {
        SetAmbientZoneListStatePersistent(ambientZone, false, false);
    }
    audio.setAmbientZoneListStatePersistent = setAmbientZoneListStatePersistent;
    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0xBDA07E5950085E46 | Since: 323
     */
    function setAmbientZoneState(zoneName) {
        SetAmbientZoneState(zoneName, false, false);
    }
    audio.setAmbientZoneState = setAmbientZoneState;
    /**
     * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
     *
     * Hash: 0x1D6650420CEC9D3B | Since: 323
     */
    function setAmbientZoneStatePersistent(ambientZone) {
        SetAmbientZoneStatePersistent(ambientZone, false, false);
    }
    audio.setAmbientZoneStatePersistent = setAmbientZoneStatePersistent;
    /**
     * mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
     *
     * Hash: 0xCC97B29285B1DC3B | Since: 323
     */
    function setAnimalMood(animal, mood) {
        SetAnimalMood(animal, mood);
    }
    audio.setAnimalMood = setAnimalMood;
    /**
     * Possible flag names:
     * "ActivateSwitchWheelAudio"
     * "AllowAmbientSpeechInSlowMo"
     * "AllowCutsceneOverScreenFade"
     * "AllowForceRadioAfterRetune"
     * "AllowPainAndAmbientSpeechToPlayDuringCutscene"
     * "AllowPlayerAIOnMission"
     * "AllowPoliceScannerWhenPlayerHasNoControl"
     * "AllowRadioDuringSwitch"
     * "AllowRadioOverScreenFade"
     * "AllowScoreAndRadio"
     * "AllowScriptedSpeechInSlowMo"
     * "AvoidMissionCompleteDelay"
     * "DisableAbortConversationForDeathAndInjury"
     * "DisableAbortConversationForRagdoll"
     * "DisableBarks"
     * "DisableFlightMusic"
     * "DisableReplayScriptStreamRecording"
     * "EnableHeadsetBeep"
     * "ForceConversationInterrupt"
     * "ForceSeamlessRadioSwitch"
     * "ForceSniperAudio"
     * "FrontendRadioDisabled"
     * "HoldMissionCompleteWhenPrepared"
     * "IsDirectorModeActive"
     * "IsPlayerOnMissionForSpeech"
     * "ListenerReverbDisabled"
     * "LoadMPData"
     * "MobileRadioInGame"
     * "OnlyAllowScriptTriggerPoliceScanner"
     * "PlayMenuMusic"
     * "PoliceScannerDisabled"
     * "ScriptedConvListenerMaySpeak"
     * "SpeechDucksScore"
     * "SuppressPlayerScubaBreathing"
     * "WantedMusicDisabled"
     * "WantedMusicOnMission"
     *
     * -------------------------------
     * No added flag names between b393d and b573d, including b573d.
     *
     * #######################################################################
     *
     * "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
     *
     * -----------------------------------------------------------------------
     *
     * All flag IDs and hashes:
     *
     * ID: 00 | Hash: 0x0FED7A7F
     * ID: 01 | Hash: 0x20A7858F
     * ID: 02 | Hash: 0xA11C2259
     * ID: 03 | Hash: 0x08DE4700
     * ID: 04 | Hash: 0x989F652F
     * ID: 05 | Hash: 0x3C9E76BA
     * ID: 06 | Hash: 0xA805FEB0
     * ID: 07 | Hash: 0x4B94EA26
     * ID: 08 | Hash: 0x803ACD34
     * ID: 09 | Hash: 0x7C741226
     * ID: 10 | Hash: 0x31DB9EBD
     * ID: 11 | Hash: 0xDF386F18
     * ID: 12 | Hash: 0x669CED42
     * ID: 13 | Hash: 0x51F22743
     * ID: 14 | Hash: 0x2052B35C
     * ID: 15 | Hash: 0x071472DC
     * ID: 16 | Hash: 0xF9928BCC
     * ID: 17 | Hash: 0x7ADBDD48
     * ID: 18 | Hash: 0xA959BA1A
     * ID: 19 | Hash: 0xBBE89B60
     * ID: 20 | Hash: 0x87A08871
     * ID: 21 | Hash: 0xED1057CE
     * ID: 22 | Hash: 0x1584AD7A
     * ID: 23 | Hash: 0x8582CFCB
     * ID: 24 | Hash: 0x7E5E2FB0
     * ID: 25 | Hash: 0xAE4F72DB
     * ID: 26 | Hash: 0x5D16D1FA
     * ID: 27 | Hash: 0x06B2F4B8
     * ID: 28 | Hash: 0x5D4CDC96
     * ID: 29 | Hash: 0x8B5A48BA
     * ID: 30 | Hash: 0x98FBD539
     * ID: 31 | Hash: 0xD8CB0473
     * ID: 32 | Hash: 0x5CBB4874
     * ID: 33 | Hash: 0x2E9F93A9
     * ID: 34 | Hash: 0xD93BEA86
     * ID: 35 | Hash: 0x92109B7D
     * ID: 36 | Hash: 0xB7EC9E4D
     * ID: 37 | Hash: 0xCABDBB1D
     * ID: 38 | Hash: 0xB3FD4A52
     * ID: 39 | Hash: 0x370D94E5
     * ID: 40 | Hash: 0xA0F7938F
     * ID: 41 | Hash: 0xCBE1CE81
     * ID: 42 | Hash: 0xC27F1271
     * ID: 43 | Hash: 0x9E3258EB
     * ID: 44 | Hash: 0x551CDA5B
     * ID: 45 | Hash: 0xCB6D663C
     * ID: 46 | Hash: 0x7DACE87F
     * ID: 47 | Hash: 0xF9DE416F
     * ID: 48 | Hash: 0x882E6E9E
     * ID: 49 | Hash: 0x16B447E7
     * ID: 50 | Hash: 0xBD867739
     * ID: 51 | Hash: 0xA3A58604
     * ID: 52 | Hash: 0x7E046BBC
     * ID: 53 | Hash: 0xD95FDB98
     * ID: 54 | Hash: 0x5842C0ED
     * ID: 55 | Hash: 0x285FECC6
     * ID: 56 | Hash: 0x9351AC43
     * ID: 57 | Hash: 0x50032E75
     * ID: 58 | Hash: 0xAE6D0D59
     * ID: 59 | Hash: 0xD6351785
     * ID: 60 | Hash: 0xD25D71BC
     * ID: 61 | Hash: 0x1F7F6423
     * ID: 62 | Hash: 0xE24C3AA6
     * ID: 63 | Hash: 0xBFFDD2B7
     *
     * Hash: 0xB9EFD5C25018725A | Since: 323
     */
    function setFlag(flagName, toggle) {
        SetAudioFlag(flagName, toggle);
    }
    audio.setFlag = setFlag;
    /**
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0xEF21A9EF089A2668 | Since: 323
     */
    function setSceneVariable(scene, variable, value) {
        SetAudioSceneVariable(scene, variable, value);
    }
    audio.setSceneVariable = setSceneVariable;
    /**
     * No comment provided
     *
     * Hash: 0xA5F377B175A699C5 | Since: 323
     */
    function setScriptCleanupTime(time) {
        SetAudioScriptCleanupTime(time);
    }
    audio.setScriptCleanupTime = setScriptCleanupTime;
    /**
     * Needs to be called every frame.
     * Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
     *
     * Hash: 0x12561FCBB62D5B9C | Since: 323
     */
    function setSpecialEffectMode(mode) {
        SetAudioSpecialEffectMode(mode);
    }
    audio.setSpecialEffectMode = setSpecialEffectMode;
    /**
     * No comment provided
     *
     * Hash: 0xE5564483E407F914 | Since: 323
     */
    function setVehiclePriority(vehicle) {
        SetAudioVehiclePriority(vehicle, undefined);
    }
    audio.setVehiclePriority = setVehiclePriority;
    /**
     * No comment provided
     *
     * Hash: 0x0B568201DD99F0EB | Since: 323
     */
    function setConversationControlledByAnim() {
        SetConversationAudioControlledByAnim(false);
    }
    audio.setConversationControlledByAnim = setConversationControlledByAnim;
    /**
     * No comment provided
     *
     * Hash: 0x61631F5DF50D1C34 | Since: 323
     */
    function setConversationPlaceholder() {
        SetConversationAudioPlaceholder(false);
    }
    audio.setConversationPlaceholder = setConversationPlaceholder;
    /**
     * Examples:
     *
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);`
     * `AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);`
     *
     * Hash: 0x4E404A9361F75BB2 | Since: 323
     */
    function setCustomRadioTrackList(radioStation, trackListName) {
        SetCustomRadioTrackList(radioStation, trackListName, false);
    }
    audio.setCustomRadioTrackList = setCustomRadioTrackList;
    /**
     * All occurrences found in b617d, sorted alphabetically and identical lines removed:
     *
     * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");`
     * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");`
     * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");`
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x3B4BF5F0859204D9 | Since: 323
     */
    function setCutsceneOverride(name) {
        SetCutsceneAudioOverride(name);
    }
    audio.setCutsceneOverride = setCutsceneOverride;
    /**
     * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
     *
     * Hash: 0xACF57305B12AF907 | Since: 323
     */
    function setEmitterRadioStation(emitterName, radioStation) {
        SetEmitterRadioStation(emitterName, radioStation, undefined);
    }
    audio.setEmitterRadioStation = setEmitterRadioStation;
    /**
     * No comment provided
     *
     * Hash: 0x892B6AB8F33606F5 | Since: 323
     */
    function setEntityForNullConvPed(entity) {
        SetEntityForNullConvPed(0, entity);
    }
    audio.setEntityForNullConvPed = setEntityForNullConvPed;
    /**
     * No comment provided
     *
     * Hash: 0xF7F26C6E9CC9EBB8 | Since: 323
     */
    function setFrontendRadioActive(active) {
        SetFrontendRadioActive(active);
    }
    audio.setFrontendRadioActive = setFrontendRadioActive;
    /**
     * No comment provided
     *
     * Hash: 0x159B7318403A1CD8 | Since: 1103
     */
    function setGlobalRadioSignalLevel() {
        SetGlobalRadioSignalLevel(undefined);
    }
    audio.setGlobalRadioSignalLevel = setGlobalRadioSignalLevel;
    /**
     * No comment provided
     *
     * Hash: 0x3BD3F52BA9B1E4E8 | Since: 323
     */
    function setGpsActive(active) {
        SetGpsActive(active);
    }
    audio.setGpsActive = setGpsActive;
    /**
     * No comment provided
     *
     * Hash: 0x76D683C108594D0E | Since: 323
     */
    function setHornEnabled(vehicle, toggle) {
        SetHornEnabled(vehicle, toggle);
    }
    audio.setHornEnabled = setHornEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x9C11908013EA4715 | Since: 323
     */
    function setHornPermanentlyOn(vehicle) {
        SoundVehicleHornThisFrame(vehicle);
    }
    audio.setHornPermanentlyOn = setHornPermanentlyOn;
    /**
     * No comment provided
     *
     * Hash: 0x9D3AF56E94C9AE98 | Since: 323
     */
    function setHornPermanentlyOnTime(vehicle, time) {
        Citizen.invokeNative('0x9D3AF56E94C9AE98', vehicle, time);
    }
    audio.setHornPermanentlyOnTime = setHornPermanentlyOnTime;
    /**
     * No comment provided
     *
     * Hash: 0xC9D623C5A3D8FD5D | Since: 3570
     */
    function setIndividualPortalSettingsOverride(interiorNameHash, roomIndex, doorIndex, newPortalSettingsName) {
        if (typeof interiorNameHash === 'string')
            interiorNameHash = misc.getHashKey(interiorNameHash);
        Citizen.invokeNative('0xC9D623C5A3D8FD5D', interiorNameHash, roomIndex, doorIndex, newPortalSettingsName);
    }
    audio.setIndividualPortalSettingsOverride = setIndividualPortalSettingsOverride;
    /**
     * No comment provided
     *
     * Hash: 0x88795F13FACDA88D | Since: 323
     */
    function setInitialPlayerStation(radioStation) {
        SetInitialPlayerStation(radioStation);
    }
    audio.setInitialPlayerStation = setInitialPlayerStation;
    /**
     * This native controls where the game plays audio from. By default the microphone is positioned on the player.
     * When p0 is true the game will play audio from the 3 positions inputted.
     * It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
     * The scripts mostly use it with only one position such as in fbi3.c:
     * `AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));`
     *
     * Hash: 0xB6AE90EDDE95C762 | Since: 323
     */
    function setMicrophonePosition(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3) {
        SetMicrophonePosition(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3);
    }
    audio.setMicrophonePosition = setMicrophonePosition;
    /**
     * No comment provided
     *
     * Hash: 0xBF286C554784F3DF | Since: 323
     */
    function setMobilePhoneRadioState(state) {
        SetMobilePhoneRadioState(state);
    }
    audio.setMobilePhoneRadioState = setMobilePhoneRadioState;
    /**
     * No comment provided
     *
     * Hash: 0x1098355A16064BB3 | Since: 323
     */
    function setMobileRadioEnabledDuringGameplay(toggle) {
        SetMobileRadioEnabledDuringGameplay(toggle);
    }
    audio.setMobileRadioEnabledDuringGameplay = setMobileRadioEnabledDuringGameplay;
    /**
     * No comment provided
     *
     * Hash: 0x55ECF4D13D9903B0 | Since: 1868
     */
    function setNextRadioTrack(radioName, radioTrack) {
        Citizen.invokeNative('0x55ECF4D13D9903B0', radioName, radioTrack, undefined, undefined);
    }
    audio.setNextRadioTrack = setNextRadioTrack;
    /**
     * No comment provided
     *
     * Hash: 0xB542DE8C3D1CB210 | Since: 323
     */
    function setNoDuckingForConversation() {
        Citizen.invokeNative('0xB542DE8C3D1CB210', false);
    }
    audio.setNoDuckingForConversation = setNoDuckingForConversation;
    /**
     * Enables/disables ped's "quiet" footstep sound.
     *
     * Hash: 0x29DA3CA8D8B2692D | Since: 1493
     */
    function setPedClothEventsEnabled(ped, toggle) {
        SetPedClothEventsEnabled(ped, toggle);
    }
    audio.setPedClothEventsEnabled = setPedClothEventsEnabled;
    /**
     * Enables/disables ped's "loud" footstep sound.
     *
     * Hash: 0x0653B735BFBDFE87 | Since: 1493
     */
    function setPedFootstepsEventsEnabled(ped, toggle) {
        SetPedAudioFootstepLoud(ped, toggle);
    }
    audio.setPedFootstepsEventsEnabled = setPedFootstepsEventsEnabled;
    /**
     * BOOL p1: 0 = Female; 1 = Male
     *
     * Hash: 0xA5342D390CDA41D6 | Since: 323
     */
    function setPedGender(ped) {
        SetPedAudioGender(ped, false);
    }
    audio.setPedGender = setPedGender;
    /**
     * No comment provided
     *
     * Hash: 0x8BF907833BE275DE | Since: 323
     */
    function setPedInteriorWallaDensity() {
        Citizen.invokeNative('0x8BF907833BE275DE', 0, 0);
    }
    audio.setPedInteriorWallaDensity = setPedInteriorWallaDensity;
    /**
     * Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
     *
     * ====================================================
     *
     * As mentioned above, this only sets the drunk sound to ped/player.
     *
     * To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
     *
     * Below is an example
     *
     * if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
     * {
     * Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
     * }
     * Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
     *
     *
     *
     * And to stop the effect use
     * RESET_PED_MOVEMENT_CLIPSET
     *
     * Hash: 0x95D2D383D5396B8A | Since: 323
     */
    function setPedIsDrunk(ped, toggle) {
        SetPedIsDrunk(ped, toggle);
    }
    audio.setPedIsDrunk = setPedIsDrunk;
    /**
     * No comment provided
     *
     * Hash: 0x1B7ABE26CBCBF8C7 | Since: 372
     */
    function setPedRaceAndVoiceGroup(ped, voiceGroup) {
        if (typeof voiceGroup === 'string')
            voiceGroup = misc.getHashKey(voiceGroup);
        SetPedRaceAndVoiceGroup(ped, 0, voiceGroup);
    }
    audio.setPedRaceAndVoiceGroup = setPedRaceAndVoiceGroup;
    /**
     * Assigns some ambient voice to the ped.
     *
     * Hash: 0x40CF0D12D142A9E8 | Since: 323
     */
    function setPedVoiceFull(ped) {
        SetPedVoiceFull(ped);
    }
    audio.setPedVoiceFull = setPedVoiceFull;
    /**
     * From the scripts:
     *
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));`
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));`
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));`
     * `AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));`
     *
     * Hash: 0x7CDC8C3B89F661B3 | Since: 323
     */
    function setPedVoiceGroup(ped, voiceGroupHash) {
        if (typeof voiceGroupHash === 'string')
            voiceGroupHash = misc.getHashKey(voiceGroupHash);
        SetPedVoiceGroup(ped, voiceGroupHash);
    }
    audio.setPedVoiceGroup = setPedVoiceGroup;
    /**
     * Dat151RelType == 29
     *
     * Hash: 0x0BABC1345ABBFB16 | Since: 2699
     */
    function setPedVoiceGroupFromRaceToPvg(ped, voiceGroupHash) {
        if (typeof voiceGroupHash === 'string')
            voiceGroupHash = misc.getHashKey(voiceGroupHash);
        SetPedVoiceGroupRace(ped, voiceGroupHash);
    }
    audio.setPedVoiceGroupFromRaceToPvg = setPedVoiceGroupFromRaceToPvg;
    /**
     * No comment provided
     *
     * Hash: 0x149AEE66F0CB3A99 | Since: 323
     */
    function setPedWallaDensity() {
        SetPedWallaDensity(0, 0);
    }
    audio.setPedWallaDensity = setPedWallaDensity;
    /**
     * No comment provided
     *
     * Hash: 0xEA241BB04110F091 | Since: 323
     */
    function setPlayerAngry(ped, toggle) {
        SetPlayerAngry(ped, toggle);
    }
    audio.setPlayerAngry = setPlayerAngry;
    /**
     * No comment provided
     *
     * Hash: 0x6FDDAD856E36988A | Since: 323
     */
    function setPlayerVehicleAlarmActive(vehicle, toggle) {
        SetPlayerVehicleAlarmAudioActive(vehicle, toggle);
    }
    audio.setPlayerVehicleAlarmActive = setPlayerVehicleAlarmActive;
    /**
     * Found in the b617d scripts, duplicates removed:
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");`
     *
     * `AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");`
     *
     * Hash: 0x044DBAD7A7FA2BE5 | Since: 323
     */
    function setPortalSettingsOverride() {
        SetPortalSettingsOverride(undefined, undefined);
    }
    audio.setPortalSettingsOverride = setPortalSettingsOverride;
    /**
     * No comment provided
     *
     * Hash: 0xDA07819E452FFE8F | Since: 505
     */
    function setPositionedPlayerVehicleRadioEmitterEnabled() {
        SetPositionedPlayerVehicleRadioEmitterEnabled(undefined);
    }
    audio.setPositionedPlayerVehicleRadioEmitterEnabled = setPositionedPlayerVehicleRadioEmitterEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x33E3C6C6F2F0B506 | Since: 323
     */
    function setPositionForNullConvPed() {
        SetPositionForNullConvPed(undefined, 0, 0, 0);
    }
    audio.setPositionForNullConvPed = setPositionForNullConvPed;
    /**
     * No comment provided
     *
     * Hash: 0xC1AA9F53CE982990 | Since: 323
     */
    function setRadioAutoUnfreeze(toggle) {
        SetRadioAutoUnfreeze(toggle);
    }
    audio.setRadioAutoUnfreeze = setRadioAutoUnfreeze;
    /**
     * No comment provided
     *
     * Hash: 0x2C96CDB04FCA358E | Since: 323
     */
    function setRadioFrontendFadeTime(fadeTime) {
        SetRadioFrontendFadeTime(fadeTime);
    }
    audio.setRadioFrontendFadeTime = setRadioFrontendFadeTime;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x02E93C796ABD3A97 | Since: 323
     */
    function setRadioPositionMute() {
        Citizen.invokeNative('0x02E93C796ABD3A97', false);
    }
    audio.setRadioPositionMute = setRadioPositionMute;
    /**
     * Tune Backwards...
     *
     * Hash: 0xDD6BCF9E94425DF9 | Since: 323
     */
    function setRadioRetuneDown() {
        Citizen.invokeNative('0xDD6BCF9E94425DF9');
    }
    audio.setRadioRetuneDown = setRadioRetuneDown;
    /**
     * Tune Forward...
     *
     * Hash: 0xFF266D1D0EB1195D | Since: 323
     */
    function setRadioRetuneUp() {
        Citizen.invokeNative('0xFF266D1D0EB1195D');
    }
    audio.setRadioRetuneUp = setRadioRetuneUp;
    /**
     * Doesn't have an effect in Story Mode.
     *
     * Hash: 0x4CAFEBFA21EC188D | Since: 2372
     */
    function setRadioStationAsFavourite(radioStation, toggle) {
        SetRadioStationIsVisible(radioStation, toggle);
    }
    audio.setRadioStationAsFavourite = setRadioStationAsFavourite;
    /**
     * 6 calls in the b617d scripts, removed identical lines:
     *
     * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);`
     * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);`
     * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);`
     *
     * Hash: 0x774BD811F656A122 | Since: 323
     */
    function setRadioStationMusicOnly(radioStation, toggle) {
        SetRadioStationMusicOnly(radioStation, toggle);
    }
    audio.setRadioStationMusicOnly = setRadioStationMusicOnly;
    /**
     * Sets radio station by index.
     *
     * Hash: 0xA619B168B8A8570F | Since: 323
     */
    function setRadioToStationIndex(radioStation) {
        SetRadioToStationIndex(radioStation);
    }
    audio.setRadioToStationIndex = setRadioToStationIndex;
    /**
     * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
     * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
     *
     * Hash: 0xC69EDA28699D5107 | Since: 323
     */
    function setRadioToStationName(stationName) {
        SetRadioToStationName(stationName);
    }
    audio.setRadioToStationName = setRadioToStationName;
    /**
     * Only found this one in the decompiled scripts:
     *
     * `AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");`
     *
     *
     * Hash: 0xB39786F201FEE30B | Since: 323
     */
    function setRadioTrack(radioStation, radioTrack) {
        SetRadioTrack(radioStation, radioTrack);
    }
    audio.setRadioTrack = setRadioTrack;
    /**
     * No comment provided
     *
     * Hash: 0x2CB0075110BE1E56 | Since: 1493
     */
    function setRadioTrackWithStartOffset(radioStationName, mixName) {
        SetRadioTrackMix(radioStationName, mixName, 0);
    }
    audio.setRadioTrackWithStartOffset = setRadioTrackWithStartOffset;
    /**
     * No comment provided
     *
     * Hash: 0x06C0023BED16DD6B | Since: 323
     */
    function setScriptUpdateDoor(doorHash, toggle) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        SetScriptUpdateDoorAudio(doorHash, toggle);
    }
    audio.setScriptUpdateDoor = setScriptUpdateDoor;
    /**
     * No comment provided
     *
     * Hash: 0xF584CF8529B51434 | Since: 2372
     */
    function setSirenBypassMpDriverCheck(vehicle, toggle) {
        SetSirenKeepOn(vehicle, toggle);
    }
    audio.setSirenBypassMpDriverCheck = setSirenBypassMpDriverCheck;
    /**
     * No comment provided
     *
     * Hash: 0x43FA0DFC5DF87815 | Since: 323
     */
    function setSirenCanBeControlledBy(vehicle) {
        Citizen.invokeNative('0x43FA0DFC5DF87815', vehicle, false);
    }
    audio.setSirenCanBeControlledBy = setSirenCanBeControlledBy;
    /**
     * No comment provided
     *
     * Hash: 0x1FEF0683B96EBCF2 | Since: 323
     */
    function setSirenWithNoDriver(vehicle, toggle) {
        SetSirenWithNoDriver(vehicle, toggle);
    }
    audio.setSirenWithNoDriver = setSirenWithNoDriver;
    /**
     * No comment provided
     *
     * Hash: 0xBEF34B1D9624D5DD | Since: 323
     */
    function setSkipMinigunSpinUp() {
        Citizen.invokeNative('0xBEF34B1D9624D5DD', false);
    }
    audio.setSkipMinigunSpinUp = setSkipMinigunSpinUp;
    /**
     * Example:
     * `AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);`
     *
     * This turns off surrounding sounds not connected directly to peds.
     *
     * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
     *
     * Hash: 0x399D2D3B33F1B8EB | Since: 323
     */
    function setStaticEmitterEnabled(emitterName, toggle) {
        SetStaticEmitterEnabled(emitterName, toggle);
    }
    audio.setStaticEmitterEnabled = setStaticEmitterEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x19F21E63AE6EAE4E | Since: 323
     */
    function setUserRadioControlEnabled(toggle) {
        SetUserRadioControlEnabled(toggle);
    }
    audio.setUserRadioControlEnabled = setUserRadioControlEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xAD6B3148A78AE9B6 | Since: 323
     */
    function setVariableOnSound(soundId, variable) {
        SetVariableOnSound(soundId, variable, 0);
    }
    audio.setVariableOnSound = setVariableOnSound;
    /**
     * From the scripts, p0:
     *
     * "ArmWrestlingIntensity",
     * "INOUT",
     * "Monkey_Stream",
     * "ZoomLevel"
     *
     * Hash: 0x2F9D3834AEB9EF79 | Since: 323
     */
    function setVariableOnStream(variable) {
        SetVariableOnStream(variable, 0);
    }
    audio.setVariableOnStream = setVariableOnStream;
    /**
     * No comment provided
     *
     * Hash: 0xBCC29F935ED07688 | Since: 323
     */
    function setVariableOnSynchScene(variableName, value) {
        SetVariableOnCutsceneAudio(variableName, value);
    }
    audio.setVariableOnSynchScene = setVariableOnSynchScene;
    /**
     * `AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);`
     * `AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);`
     *
     * Hash: 0x733ADF241531E5C2 | Since: 323
     */
    function setVariableOnUnderWaterStream(variableName, value) {
        SetVariableOnUnderWaterStream(variableName, value);
    }
    audio.setVariableOnUnderWaterStream = setVariableOnUnderWaterStream;
    /**
     * intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
     * Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
     *
     * Hash: 0x01BB4D577D38BD9E | Since: 323
     */
    function setVehicleBodyDamageFactor(vehicle, intensity) {
        SetVehicleAudioBodyDamageFactor(vehicle, intensity);
    }
    audio.setVehicleBodyDamageFactor = setVehicleBodyDamageFactor;
    /**
     * No comment provided
     *
     * Hash: 0x59E7B488451F4D3A | Since: 323
     */
    function setVehicleEngineDamageFactor(vehicle, damageFactor) {
        SetVehicleAudioEngineDamageFactor(vehicle, damageFactor);
    }
    audio.setVehicleEngineDamageFactor = setVehicleEngineDamageFactor;
    /**
     * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
     * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
     *
     * Will give a boost-soundeffect.
     *
     * Hash: 0x4A04DE7CAB2739A1 | Since: 323
     */
    function setVehicleBoostActive(vehicle, toggle) {
        SetVehicleBoostActive(vehicle, toggle);
    }
    audio.setVehicleBoostActive = setVehicleBoostActive;
    /**
     * No comment provided
     *
     * Hash: 0x58BB377BEC7CD5F4 | Since: 323
     */
    function setVehicleConversationsPersist() {
        Citizen.invokeNative('0x58BB377BEC7CD5F4', false, false);
    }
    audio.setVehicleConversationsPersist = setVehicleConversationsPersist;
    /**
     * No comment provided
     *
     * Hash: 0x9BD7BD55E4533183 | Since: 1290
     */
    function setVehicleConversationsPersistNew() {
        Citizen.invokeNative('0x9BD7BD55E4533183', false, false, false);
    }
    audio.setVehicleConversationsPersistNew = setVehicleConversationsPersistNew;
    /**
     * No comment provided
     *
     * Hash: 0x97FFB4ADEED08066 | Since: 2372
     */
    function setVehicleForceReverseWarning() {
        Citizen.invokeNative('0x97FFB4ADEED08066', undefined, undefined);
    }
    audio.setVehicleForceReverseWarning = setVehicleForceReverseWarning;
    /**
     * No comment provided
     *
     * Hash: 0x0350E7E17BA767D0 | Since: 1365
     */
    function setVehicleHornSoundIndex(vehicle, value) {
        SetVehicleHornVariation(vehicle, value);
    }
    audio.setVehicleHornSoundIndex = setVehicleHornSoundIndex;
    /**
     * No comment provided
     *
     * Hash: 0xF3365489E0DD50F9 | Since: 323
     */
    function setVehicleMissileWarningEnabled(vehicle, toggle) {
        Citizen.invokeNative('0xF3365489E0DD50F9', vehicle, toggle);
    }
    audio.setVehicleMissileWarningEnabled = setVehicleMissileWarningEnabled;
    /**
     * can't seem to enable radio on cop cars etc
     *
     * Hash: 0x3B988190C0AA6C0B | Since: 323
     */
    function setVehicleRadioEnabled(vehicle, toggle) {
        SetVehicleRadioEnabled(vehicle, toggle);
    }
    audio.setVehicleRadioEnabled = setVehicleRadioEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xBB6F1CAEC68B0BCE | Since: 323
     */
    function setVehicleRadioLoud(vehicle, toggle) {
        SetVehicleRadioLoud(vehicle, toggle);
    }
    audio.setVehicleRadioLoud = setVehicleRadioLoud;
    /**
     * No comment provided
     *
     * Hash: 0xF1F8157B8C3F171C | Since: 323
     */
    function setVehicleStartupRevSound(vehicle) {
        SetVehicleStartupRevSound(vehicle, undefined, undefined);
    }
    audio.setVehicleStartupRevSound = setVehicleStartupRevSound;
    /**
     * No comment provided
     *
     * Hash: 0xC1805D05E6D4FE10 | Since: 323
     */
    function setVehForcedRadioThisFrame(vehicle) {
        Citizen.invokeNative('0xC1805D05E6D4FE10', vehicle);
    }
    audio.setVehForcedRadioThisFrame = setVehForcedRadioThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x3E45765F3FBB582F | Since: 2372
     */
    function setVehHasNormalRadio(vehicle) {
        SetVehHasRadioOverride(vehicle);
    }
    audio.setVehHasNormalRadio = setVehHasNormalRadio;
    /**
     * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
     * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
     *
     * Hash: 0x1B9C0099CB942AC6 | Since: 323
     */
    function setVehRadioStation(vehicle, radioStation) {
        SetVehRadioStation(vehicle, radioStation);
    }
    audio.setVehRadioStation = setVehRadioStation;
    /**
     * No comment provided
     *
     * Hash: 0x6DDBBDD98E2E9C25 | Since: 323
     */
    function skipRadioForward() {
        SkipRadioForward();
    }
    audio.skipRadioForward = skipRadioForward;
    /**
     * No comment provided
     *
     * Hash: 0x9663FE6B7A61EB00 | Since: 323
     */
    function skipToNextScriptedConversationLine() {
        SkipToNextScriptedConversationLine();
    }
    audio.skipToNextScriptedConversationLine = skipToNextScriptedConversationLine;
    /**
     * Example:
     *
     * This will start the alarm at Fort Zancudo.
     *
     * `AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);`
     *
     * First parameter (char) is the name of the alarm.
     * Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
     *
     * ----------
     *
     * It DOES make a difference but it has to do with the duration or something I dunno yet
     *
     * ----------
     *
     * Found in the b617d scripts:
     *
     * `AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);`
     * `AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);`
     * `AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);`
     * `AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);`
     * `AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);`
     * `AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);`
     * `AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);`
     * `AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);`
     * `AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);`
     * `AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);`
     * `AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);`
     * `AUDIO::START_ALARM("PRISON_ALARMS", 0);`
     * `AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);`
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0x0355EF116C4C97B2 | Since: 323
     */
    function startAlarm(alarmName) {
        StartAlarm(alarmName, false);
    }
    audio.startAlarm = startAlarm;
    /**
     * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
     *
     * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0x013A80FC08F6E4F2 | Since: 323
     */
    function startScene(scene) {
        return StartAudioScene(scene);
    }
    audio.startScene = startScene;
    /**
     * No comment provided
     *
     * Hash: 0x23641AFE870AF385 | Since: 323
     */
    function startPreloadedConversation() {
        StartPreloadedConversation();
    }
    audio.startPreloadedConversation = startPreloadedConversation;
    /**
     * No comment provided
     *
     * Hash: 0x6B17C62C9635D2DC | Since: 323
     */
    function startScriptConversation() {
        StartScriptConversation(false, false, false, false);
    }
    audio.startScriptConversation = startScriptConversation;
    /**
     * No comment provided
     *
     * Hash: 0x252E5F915EABB675 | Since: 323
     */
    function startScriptPhoneConversation() {
        StartScriptPhoneConversation(false, false);
    }
    audio.startScriptPhoneConversation = startScriptPhoneConversation;
    /**
     * Example:
     *
     * This will stop the alarm at Fort Zancudo.
     *
     * `AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);`
     *
     * First parameter (char) is the name of the alarm.
     * Second parameter (bool) has to be true (1) to have any effect.
     * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
     *
     * Hash: 0xA1CADDCD98415A41 | Since: 323
     */
    function stopAlarm(alarmName, toggle) {
        StopAlarm(alarmName, toggle);
    }
    audio.stopAlarm = stopAlarm;
    /**
     * No comment provided
     *
     * Hash: 0x2F794A877ADD4C92 | Since: 323
     */
    function stopAllAlarms(stop) {
        StopAllAlarms(stop);
    }
    audio.stopAllAlarms = stopAllAlarms;
    /**
     * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
     *
     * Hash: 0xDFE8422B3B94E688 | Since: 323
     */
    function stopScene(scene) {
        StopAudioScene(scene);
    }
    audio.stopScene = stopScene;
    /**
     * No comment provided
     *
     * Hash: 0xBAC7FC81A75EC1A1 | Since: 323
     */
    function stopScenes() {
        StopAudioScenes();
    }
    audio.stopScenes = stopScenes;
    /**
     * No comment provided
     *
     * Hash: 0xB8BEC0CA6F0EDB0F | Since: 323
     */
    function stopCurrentPlayingAmbientSpeech(ped) {
        StopCurrentPlayingAmbientSpeech(ped);
    }
    audio.stopCurrentPlayingAmbientSpeech = stopCurrentPlayingAmbientSpeech;
    /**
     * No comment provided
     *
     * Hash: 0x7A73D05A607734C7 | Since: 323
     */
    function stopCurrentPlayingSpeech(ped) {
        StopCurrentPlayingSpeech(ped);
    }
    audio.stopCurrentPlayingSpeech = stopCurrentPlayingSpeech;
    /**
     * No comment provided
     *
     * Hash: 0x806058BBDC136E06 | Since: 323
     */
    function stopCutscene() {
        StopCutsceneAudio();
    }
    audio.stopCutscene = stopCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x6C5AE23EFA885092 | Since: 323
     */
    function stopPedRingtone(ped) {
        StopPedRingtone(ped);
    }
    audio.stopPedRingtone = stopPedRingtone;
    /**
     * No comment provided
     *
     * Hash: 0x9D64D7405520E3D3 | Since: 323
     */
    function stopPedSpeaking(ped, shaking) {
        StopPedSpeaking(ped, shaking);
    }
    audio.stopPedSpeaking = stopPedSpeaking;
    /**
     * No comment provided
     *
     * Hash: 0xAB6781A5F3101470 | Since: 1868
     */
    function stopPedSpeakingSynced(ped) {
        StopPedSpeakingSynced(ped, false);
    }
    audio.stopPedSpeakingSynced = stopPedSpeakingSynced;
    /**
     * No comment provided
     *
     * Hash: 0xD79DEEFB53455EBA | Since: 323
     */
    function stopScriptedConversation() {
        return StopScriptedConversation(false);
    }
    audio.stopScriptedConversation = stopScriptedConversation;
    /**
     * No comment provided
     *
     * Hash: 0xE4E6DD5566D28C82 | Since: 323
     */
    function stopSmokeGrenadeExplosionSounds() {
        StopSmokeGrenadeExplosionSounds();
    }
    audio.stopSmokeGrenadeExplosionSounds = stopSmokeGrenadeExplosionSounds;
    /**
     * No comment provided
     *
     * Hash: 0xA3B0C41BA5CC0BB5 | Since: 323
     */
    function stopSound(soundId) {
        StopSound(soundId);
    }
    audio.stopSound = stopSound;
    /**
     * No comment provided
     *
     * Hash: 0xA4718A1419D18151 | Since: 323
     */
    function stopStream() {
        StopStream();
    }
    audio.stopStream = stopStream;
    /**
     * No comment provided
     *
     * Hash: 0x92D6A88E64A94430 | Since: 323
     */
    function stopSynchronizedEvent(sceneID) {
        return StopSynchronizedAudioEvent(sceneID);
    }
    audio.stopSynchronizedEvent = stopSynchronizedEvent;
    /**
     * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W
     *
     * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
     * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
     *
     * Hash: 0x706D57B0F50DA710 | Since: 323
     */
    function triggerMusicEvent(eventName) {
        return TriggerMusicEvent(eventName);
    }
    audio.triggerMusicEvent = triggerMusicEvent;
    /**
     * No comment provided
     *
     * Hash: 0x66C3FB05206041BA | Since: 1290
     */
    function triggerSiren(vehicle) {
        TriggerSiren(vehicle);
    }
    audio.triggerSiren = triggerSiren;
    /**
     * No comment provided
     *
     * Hash: 0x2ACABED337622DF2 | Since: 1493
     */
    function unblockSpeechContextGroup() {
        UnblockSpeechContextGroup(undefined);
    }
    audio.unblockSpeechContextGroup = unblockSpeechContextGroup;
    /**
     * No comment provided
     *
     * Hash: 0xFC00454CF60B91DD | Since: 323
     */
    function unfreezeRadioStation(radioStation) {
        UnfreezeRadioStation(radioStation);
    }
    audio.unfreezeRadioStation = unfreezeRadioStation;
    /**
     * No comment provided
     *
     * Hash: 0x19AF7ED9B9D23058 | Since: 323
     */
    function unhintAmbientBank() {
        Citizen.invokeNative('0x19AF7ED9B9D23058');
    }
    audio.unhintAmbientBank = unhintAmbientBank;
    /**
     * No comment provided
     *
     * Hash: 0x11579D940949C49E | Since: 678
     */
    function unhintNamedScriptBank(audioBank) {
        Citizen.invokeNative('0x11579D940949C49E', audioBank);
    }
    audio.unhintNamedScriptBank = unhintNamedScriptBank;
    /**
     * No comment provided
     *
     * Hash: 0x9AC92EED5E4793AB | Since: 323
     */
    function unhintScriptBank() {
        Citizen.invokeNative('0x9AC92EED5E4793AB');
    }
    audio.unhintScriptBank = unhintScriptBank;
    /**
     * "news" that play on the radio after you've done something in story mode(?)
     *
     * Hash: 0xB165AB7C248B2DC1 | Since: 323
     */
    function unlockMissionNewsStory(newsStory) {
        UnlockMissionNewsStory(newsStory);
    }
    audio.unlockMissionNewsStory = unlockMissionNewsStory;
    /**
     * `AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");`
     *
     * Hash: 0x031ACB6ABA18C729 | Since: 323
     */
    function unlockRadioStationTrackList(radioStation, trackListName) {
        UnlockRadioStationTrackList(radioStation, trackListName);
    }
    audio.unlockRadioStationTrackList = unlockRadioStationTrackList;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xA8638BE228D4751A | Since: 323
     */
    function unregisterScriptWith() {
        UnregisterScriptWithAudio();
    }
    audio.unregisterScriptWith = unregisterScriptWith;
    /**
     * No comment provided
     *
     * Hash: 0x0150B6FF25A9E2E5 | Since: 323
     */
    function unrequestTennisBanks() {
        UnrequestTennisBanks();
    }
    audio.unrequestTennisBanks = unrequestTennisBanks;
    /**
     * No comment provided
     *
     * Hash: 0x7EC3C679D0E7E46B | Since: 678
     */
    function updateSoundCoord(soundId, pos) {
        UpdateSoundCoord(soundId, pos.x, pos.y, pos.z);
    }
    audio.updateSoundCoord = updateSoundCoord;
    /**
     * Just a nullsub (i.e. does absolutely nothing) since build 1604.
     *
     * Hash: 0x47AED84213A47510 | Since: 1493
     */
    function updateUnlockableDjRadioTracks(enableMixes) {
        UpdateUnlockableDjRadioTracks(enableMixes);
    }
    audio.updateUnlockableDjRadioTracks = updateUnlockableDjRadioTracks;
    /**
     * No comment provided
     *
     * Hash: 0xBF4DC1784BE94DFA | Since: 323
     */
    function useFootstepScriptSweeteners(ped, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        UseFootstepScriptSweeteners(ped, false, hash);
    }
    audio.useFootstepScriptSweeteners = useFootstepScriptSweeteners;
    /**
     * No comment provided
     *
     * Hash: 0xFA932DE350266EF8 | Since: 323
     */
    function useSirenAsHorn(vehicle, toggle) {
        UseSirenAsHorn(vehicle, toggle);
    }
    audio.useSirenAsHorn = useSirenAsHorn;
    /**
     * No comment provided
     *
     * Hash: 0xBEFB80290414FD4F | Since: 3095
     */
    function enableDragRaceStationaryWarningSounds(vehicle, enable) {
        Citizen.invokeNative('0xBEFB80290414FD4F', vehicle, enable);
    }
    audio.enableDragRaceStationaryWarningSounds = enableDragRaceStationaryWarningSounds;
    /**
     * Called together with SET_VEHICLE_TYRES_CAN_BURST
     *
     * Hash: 0xEB7D0E1FCC8FE17A | Since: 3258
     */
    function forceVehicleEngineSynth(vehicle, force) {
        ForceVehicleEngineSynth(vehicle, force);
    }
    audio.forceVehicleEngineSynth = forceVehicleEngineSynth;
})(audio || (audio = {}));
export var entity;
(function (entity_1) {
    /**
     * Returns entity's archetype name, if available.
     *
     * Hash: 0x47B870F5 | Since: unknown
     */
    function getArchetypeName(entity) {
        return Citizen.invokeNative('0x47B870F5', entity);
    }
    entity_1.getArchetypeName = getArchetypeName;
    /**
     * Returns the transient entity index for a specified mapdata/entity pair.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xEE43540D | Since: unknown
     */
    function getIndexFromMapdata(mapdata, entity) {
        return Citizen.invokeNative('0xEE43540D', mapdata, entity);
    }
    entity_1.getIndexFromMapdata = getIndexFromMapdata;
    /**
     * Retrieves the map data and entity handles from a specific entity.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xF6B815C5 | Since: unknown
     */
    function getMapdataOwner(entity) {
        return Citizen.invokeNative('0xF6B815C5', entity);
    }
    entity_1.getMapdataOwner = getMapdataOwner;
    /**
     * Resets mapdata entity transform matrix to its original state.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x8143FA4F | Since: unknown
     */
    function resetMapdataMatrix(mapDataHash, entityInternalIdx) {
        return Citizen.invokeNative('0x8143FA4F', mapDataHash, entityInternalIdx);
    }
    entity_1.resetMapdataMatrix = resetMapdataMatrix;
    /**
     * Gets the selected entity at the current mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x3DD8130F | Since: unknown
     */
    function selectAtCursor(hitFlags, precise) {
        return Citizen.invokeNative('0x3DD8130F', hitFlags, precise);
    }
    entity_1.selectAtCursor = selectAtCursor;
    /**
     * Gets the selected entity at the specified mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xAFE8D405 | Since: unknown
     */
    function selectAtPos(fracX, fracY, hitFlags, precise) {
        return Citizen.invokeNative('0xAFE8D405', fracX, fracY, hitFlags, precise);
    }
    entity_1.selectAtPos = selectAtPos;
    /**
     * Sets an entity's matrix. Arguments are in the same order as with GET_ENTITY_MATRIX.
     *
     * Hash: 0xFB0639B | Since: unknown
     */
    function setMatrix(entity, forwardX, forwardY, forwardZ, rightX, rightY, rightZ, upX, upY, upZ, atX, atY, atZ) {
        Citizen.invokeNative('0xFB0639B', entity, forwardX, forwardY, forwardZ, rightX, rightY, rightZ, upX, upY, upZ, atX, atY, atZ);
    }
    entity_1.setMatrix = setMatrix;
    /**
     * No comment provided
     *
     * Hash: 0x91B38FB6 | Since: unknown
     */
    function getRemoteSyncedScenesAllowed(entity) {
        return Citizen.invokeNative('0x91B38FB6', entity);
    }
    entity_1.getRemoteSyncedScenesAllowed = getRemoteSyncedScenesAllowed;
    /**
     * Enables or disables the owner check for the specified entity in network-synchronized scenes. When set to `false`, the entity cannot participate in synced scenes initiated by clients that do not own the entity.
     *
     * By default, this is `false` for all entities, meaning only the entity's owner can include it in networked synchronized scenes.
     *
     * Hash: 0xD3FC9D88 | Since: unknown
     */
    function setRemoteSyncedScenesAllowed(entity, allow) {
        Citizen.invokeNative('0xD3FC9D88', entity, allow);
    }
    entity_1.setRemoteSyncedScenesAllowed = setRemoteSyncedScenesAllowed;
    /**
     * A getter for [FREEZE_ENTITY_POSITION](#\_0x428CA6DBD1094446).
     *
     * Hash: 0xEDBE6ADD | Since: unknown
     */
    function isPositionFrozen(entity) {
        return Citizen.invokeNative('0xEDBE6ADD', entity);
    }
    entity_1.isPositionFrozen = isPositionFrozen;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Returns the memory address of an entity.
     *
     * This native is intended for singleplayer debugging, and may not be available during multiplayer.
     *
     * Hash: 0x9A3144BC | Since: unknown
     */
    function getAddress(entity) {
        return Citizen.invokeNative('0x9A3144BC', entity);
    }
    entity_1.getAddress = getAddress;
    /**
     * ```cpp
     * enum eApplyForceTypes {
     * APPLY_TYPE_FORCE = 0,
     * APPLY_TYPE_IMPULSE = 1,
     * APPLY_TYPE_EXTERNAL_FORCE = 2,
     * APPLY_TYPE_EXTERNAL_IMPULSE = 3,
     * APPLY_TYPE_TORQUE = 4,
     * APPLY_TYPE_ANGULAR_IMPULSE = 5
     * }
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [APPLY_FORCE_TO_ENTITY](?\_0xC5F68BE9613E2D18).</strong>
     *
     * Hash: 0xC1C0855A | Since: unknown
     */
    function applyForceTo(entity, forceType, pos, offX, offY, offZ, nComponent, bLocalForce, bLocalOffset, bScaleByMass, bPlayAudio, bScaleByTimeWarp) {
        Citizen.invokeNative('0xC1C0855A', entity, forceType, pos.x, pos.y, pos.z, offX, offY, offZ, nComponent, bLocalForce, bLocalOffset, bScaleByMass, bPlayAudio, bScaleByTimeWarp);
    }
    entity_1.applyForceTo = applyForceTo;
    /**
     * Deletes the specified entity.
     *
     * **NOTE**: For trains this will only work if called on the train engine, it will not work on its carriages.
     *
     * Hash: 0xFAA3D236 | Since: unknown
     */
    function deleteEntity(entity) {
        Citizen.invokeNative('0xFAA3D236', entity);
    }
    entity_1.deleteEntity = deleteEntity;
    /**
     * No comment provided
     *
     * Hash: 0x3AC90869 | Since: unknown
     */
    function doesExist(entity) {
        return Citizen.invokeNative('0x3AC90869', entity);
    }
    entity_1.doesExist = doesExist;
    /**
     * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using [`SET_ENTITY_COORDS`](#\_0x06843DA7060A026B).
     *
     * <strong>This is the server-side RPC native equivalent of the client native [FREEZE_ENTITY_POSITION](?\_0x428CA6DBD1094446).</strong>
     *
     * Hash: 0x65C16D57 | Since: unknown
     */
    function freezePosition(entity, toggle) {
        Citizen.invokeNative('0x65C16D57', entity, toggle);
    }
    entity_1.freezePosition = freezePosition;
    /**
     * Gets the entity that this entity is attached to.
     *
     * Hash: 0xFE1589F9 | Since: unknown
     */
    function getAttachedTo(entity) {
        return Citizen.invokeNative('0xFE1589F9', entity);
    }
    entity_1.getAttachedTo = getAttachedTo;
    /**
     * No comment provided
     *
     * Hash: 0xE8C0C629 | Since: unknown
     */
    function getCollisionDisabled(entity) {
        return Citizen.invokeNative('0xE8C0C629', entity);
    }
    entity_1.getCollisionDisabled = getCollisionDisabled;
    /**
     * Gets the current coordinates for a specified entity. This native is used server side when using OneSync.
     *
     * See [GET_ENTITY_COORDS](#\_0x3FEF770D40960D5A) for client side.
     *
     * Hash: 0x1647F1CB | Since: unknown
     */
    function getCoords(entity) {
        return new Vector3(Citizen.invokeNative('0x1647F1CB', entity));
    }
    entity_1.getCoords = getCoords;
    /**
     * No comment provided
     *
     * Hash: 0x972CC383 | Since: unknown
     */
    function getHeading(entity) {
        return Citizen.invokeNative('0x972CC383', entity);
    }
    entity_1.getHeading = getHeading;
    /**
     * Only works for vehicle and peds
     *
     * Hash: 0x8E3222B7 | Since: unknown
     */
    function getHealth(entity) {
        return Citizen.invokeNative('0x8E3222B7', entity);
    }
    entity_1.getHealth = getHealth;
    /**
     * Currently it only works with peds.
     *
     * Hash: 0xC7AE6AA1 | Since: unknown
     */
    function getMaxHealth(entity) {
        return Citizen.invokeNative('0xC7AE6AA1', entity);
    }
    entity_1.getMaxHealth = getMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0xDAFCB3EC | Since: unknown
     */
    function getModel(entity) {
        return Citizen.invokeNative('0xDAFCB3EC', entity);
    }
    entity_1.getModel = getModel;
    /**
     * No comment provided
     *
     * Hash: 0xD16EA02F | Since: unknown
     */
    function getOrphanMode(entity) {
        return Citizen.invokeNative('0xD16EA02F', entity);
    }
    entity_1.getOrphanMode = getOrphanMode;
    /**
     * This native gets an entity's population type.
     *
     * Hash: 0xFC30DDFF | Since: unknown
     */
    function getPopulationType(entity) {
        return Citizen.invokeNative('0xFC30DDFF', entity);
    }
    entity_1.getPopulationType = getPopulationType;
    /**
     * No comment provided
     *
     * Hash: 0x8FF45B04 | Since: unknown
     */
    function getRotation(entity) {
        return new Vector3(Citizen.invokeNative('0x8FF45B04', entity));
    }
    entity_1.getRotation = getRotation;
    /**
     * No comment provided
     *
     * Hash: 0x9BF8A73F | Since: unknown
     */
    function getRotationVelocity(entity) {
        return new Vector3(Citizen.invokeNative('0x9BF8A73F', entity));
    }
    entity_1.getRotationVelocity = getRotationVelocity;
    /**
     * Gets the routing bucket for the specified entity.
     *
     * Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
     *
     * Hash: 0xED4B0486 | Since: unknown
     */
    function getRoutingBucket(entity) {
        return Citizen.invokeNative('0xED4B0486', entity);
    }
    entity_1.getRoutingBucket = getRoutingBucket;
    /**
     * No comment provided
     *
     * Hash: 0xB7F70784 | Since: unknown
     */
    function getScript(entity) {
        return Citizen.invokeNative('0xB7F70784', entity);
    }
    entity_1.getScript = getScript;
    /**
     * Gets the current speed of the entity in meters per second.
     *
     * ```
     * To convert to MPH: speed * 2.236936
     * To convert to KPH: speed * 3.6
     * ```
     *
     * Hash: 0x9E1E4798 | Since: unknown
     */
    function getSpeed(entity) {
        return Citizen.invokeNative('0x9E1E4798', entity);
    }
    entity_1.getSpeed = getSpeed;
    /**
     * Gets the entity type (as an integer), which can be one of the following defined down below:
     *
     * <strong>The following entities will return type `1`:</strong>
     *
     * *   Ped
     * *   Player
     * *   Animal (Red Dead Redemption 2)
     * *   Horse (Red Dead Redemption 2)
     *
     * <strong>The following entities will return type `2`:</strong>
     *
     * *   Automobile
     * *   Bike
     * *   Boat
     * *   Heli
     * *   Plane
     * *   Submarine
     * *   Trailer
     * *   Train
     * *   DraftVeh (Red Dead Redemption 2)
     *
     * <strong>The following entities will return type `3`:</strong>
     *
     * *   Object
     * *   Door
     * *   Pickup
     *
     * Otherwise, a value of `0` will be returned.
     *
     * Hash: 0xB1BD08D | Since: unknown
     */
    function getType(entity) {
        return Citizen.invokeNative('0xB1BD08D', entity);
    }
    entity_1.getType = getType;
    /**
     * No comment provided
     *
     * Hash: 0xC14C9B6B | Since: unknown
     */
    function getVelocity(entity) {
        return new Vector3(Citizen.invokeNative('0xC14C9B6B', entity));
    }
    entity_1.getVelocity = getVelocity;
    /**
     * Gets the specific entity type (as an integer), which can be one of the following defined down below:
     *
     * #### FiveM:
     *
     * ```cpp
     * enum eNetObjEntityType
     * {
     * Automobile = 0,
     * Bike = 1,
     * Boat = 2,
     * Door = 3,
     * Heli = 4,
     * Object = 5,
     * Ped = 6,
     * Pickup = 7,
     * PickupPlacement = 8,
     * Plane = 9,
     * Submarine = 10,
     * Player = 11,
     * Trailer = 12,
     * Train = 13
     * };
     * ```
     *
     * #### RedM:
     *
     * ```cpp
     * enum eNetObjEntityType
     * {
     * Animal = 0,
     * Automobile = 1,
     * Bike = 2,
     * Boat = 3,
     * Door = 4,
     * Heli = 5,
     * Object = 6,
     * Ped = 7,
     * Pickup = 8,
     * PickupPlacement = 9,
     * Plane = 10,
     * Submarine = 11,
     * Player = 12,
     * Trailer = 13,
     * Train = 14,
     * DraftVeh = 15,
     * StatsTracker = 16,
     * PropSet = 17,
     * AnimScene = 18,
     * GroupScenario = 19,
     * Herd = 20,
     * Horse = 21,
     * WorldState = 22,
     * WorldProjectile = 23,
     * Incident = 24,
     * Guardzone = 25,
     * PedGroup = 26,
     * CombatDirector = 27,
     * PedSharedTargeting = 28,
     * Persistent = 29
     * };
     * ```
     *
     * Hash: 0x23B2A641 | Since: unknown
     */
    function getNetTypeFrom(entity) {
        return Citizen.invokeNative('0x23B2A641', entity);
    }
    entity_1.getNetTypeFrom = getNetTypeFrom;
    /**
     * No comment provided
     *
     * Hash: 0x9C9A3BE0 | Since: unknown
     */
    function hasBeenMarkedAsNoLongerNeeded(vehicle) {
        return Citizen.invokeNative('0x9C9A3BE0', vehicle);
    }
    entity_1.hasBeenMarkedAsNoLongerNeeded = hasBeenMarkedAsNoLongerNeeded;
    /**
     * This native checks if the given entity is visible.
     *
     * Hash: 0x120B4ED5 | Since: unknown
     */
    function isVisible(entity) {
        return Citizen.invokeNative('0x120B4ED5', entity);
    }
    entity_1.isVisible = isVisible;
    /**
     * Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_ENTITY_COORDS](?\_0x06843DA7060A026B).</strong>
     *
     * Hash: 0xDF70B41B | Since: unknown
     */
    function setCoords(entity, pos, alive, deadFlag, ragdollFlag, clearArea) {
        Citizen.invokeNative('0xDF70B41B', entity, pos.x, pos.y, pos.z, alive, deadFlag, ragdollFlag, clearArea);
    }
    entity_1.setCoords = setCoords;
    /**
     * It overrides the default distance culling radius of an entity. Set to `0.0` to reset.
     * If you want to interact with an entity outside of your players' scopes set the radius to a huge number.
     *
     * **WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)
     *
     * Hash: 0xD3A183A3 | Since: unknown
     */
    function setDistanceCullingRadius(entity, radius) {
        Citizen.invokeNative('0xD3A183A3', entity, radius);
    }
    entity_1.setDistanceCullingRadius = setDistanceCullingRadius;
    /**
     * Set the heading of an entity in degrees also known as "Yaw".
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_ENTITY_HEADING](?\_0x8E2530AA8ADA980E).</strong>
     *
     * Hash: 0xE0FF064D | Since: unknown
     */
    function setHeading(entity, heading) {
        Citizen.invokeNative('0xE0FF064D', entity, heading);
    }
    entity_1.setHeading = setHeading;
    /**
     * It allows to flag an entity to ignore the request control filter policy.
     *
     * Hash: 0x9F7F8D36 | Since: unknown
     */
    function setIgnoreRequestControlFilter(entity, ignore) {
        Citizen.invokeNative('0x9F7F8D36', entity, ignore);
    }
    entity_1.setIgnoreRequestControlFilter = setIgnoreRequestControlFilter;
    /**
     * ```cpp
     * enum EntityOrphanMode {
     * // Default, this will delete the entity when it isn't relevant to any players
     * // NOTE: this *doesn't* mean when they're no longer in scope
     * DeleteWhenNotRelevant = 0,
     * // The entity will be deleted whenever its original owner disconnects
     * // NOTE: if this is set when the entities original owner has already left it will be
     * // marked for deletion (similar to just calling DELETE_ENTITY)
     * DeleteOnOwnerDisconnect = 1,
     * // The entity will never be deleted by the server when it does relevancy checks
     * // you should only use this on entities that need to be relatively persistent
     * KeepEntity = 2
     * }
     * ```
     *
     * Sets what the server will do when the entity no longer has its original owner. By default the server will cleanup entities that it considers "no longer relevant".
     *
     * When used on trains, this native will recursively call onto all attached carriages.
     *
     * **NOTE**: When used with `KeepEntity` (2) this native only guarantees that the ***server*** will not delete the entity, client requests to delete the entity will still work perfectly fine.
     *
     * Hash: 0x489E9162 | Since: unknown
     */
    function setOrphanMode(entity, orphanMode) {
        Citizen.invokeNative('0x489E9162', entity, orphanMode);
    }
    entity_1.setOrphanMode = setOrphanMode;
    /**
     * Sets the rotation of a specified entity in the game world.
     *
     * ```
     * NativeDB Introduced: v323
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_ENTITY_ROTATION](?\_0x8524A8B0171D5E07).</strong>
     *
     * Hash: 0xA345EFE | Since: unknown
     */
    function setRotation(entity, pitch, roll, yaw, rotationOrder, bDeadCheck) {
        Citizen.invokeNative('0xA345EFE', entity, pitch, roll, yaw, rotationOrder, bDeadCheck);
    }
    entity_1.setRotation = setRotation;
    /**
     * Sets the routing bucket for the specified entity.
     *
     * Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
     *
     * Hash: 0x635E5289 | Since: unknown
     */
    function setRoutingBucket(entity, bucket) {
        Citizen.invokeNative('0x635E5289', entity, bucket);
    }
    entity_1.setRoutingBucket = setRoutingBucket;
    /**
     * ```
     * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_ENTITY_VELOCITY](?\_0x1C99BB7B6E96D16F).</strong>
     *
     * Hash: 0xFF5A1988 | Since: unknown
     */
    function setVelocity(entity, pos) {
        Citizen.invokeNative('0xFF5A1988', entity, pos.x, pos.y, pos.z);
    }
    entity_1.setVelocity = setVelocity;
    /**
     * Internal function for ensuring an entity has a state bag.
     *
     * Hash: 0x3BB78F05 | Since: unknown
     */
    function ensureStateBag(entity) {
        Citizen.invokeNative('0x3BB78F05', entity);
    }
    entity_1.ensureStateBag = ensureStateBag;
    /**
     * ### Supported types
     *
     * *   \[1] : Peds (including animals) and players.
     * *   \[2] : Vehicles.
     * *   \[3] : Objects (props), doors, and projectiles.
     *
     * ### Coordinates need to be send unpacked (x,y,z)
     *
     * ```lua
     *
     * -- Define the allowed model hashes
     * local allowedModelHashes = { GetHashKey("p_crate03x"), GetHashKey("p_crate22x") }
     *
     * -- Get the player's current coordinates
     * local playerCoords = GetEntityCoords(PlayerPedId())
     *
     * -- Retrieve all entities of type Object (type 3) within a radius of 10.0 units
     * -- that match the allowed model hashes
     * -- and sort output entities by distance
     * local entities = GetEntitiesInRadius(playerCoords.x, playerCoords.y, playerCoords.z, 10.0, 3, true, allowedModelHashes)
     *
     * -- Iterate through the list of entities and print their ids
     * for i = 1, #entities do
     * local entity = entities[i]
     * print(entity)
     * end
     *
     * ```
     *
     * Hash: 0xDFFBA12F | Since: unknown
     */
    function getEntitiesInRadius(pos, radius, entityType, sortByDistance, models) {
        return Citizen.invokeNative('0xDFFBA12F', pos.x, pos.y, pos.z, radius, entityType, sortByDistance, models);
    }
    entity_1.getEntitiesInRadius = getEntitiesInRadius;
    /**
     * Returns the entity handle for the specified state bag name. For use with [ADD_STATE_BAG_CHANGE_HANDLER](#\_0x5BA35AAF).
     *
     * Hash: 0x4BDF1867 | Since: unknown
     */
    function getFromStateBagName(bagName) {
        return Citizen.invokeNative('0x4BDF1867', bagName);
    }
    entity_1.getFromStateBagName = getFromStateBagName;
    /**
     * Documented here:
     * gtaforums.com/topic/885669-precisely-define-object-physics/
     * gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
     *
     * forceFlags:
     * First bit (lowest): Strong force flag, factor 100
     * Second bit: Unkown flag
     * Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
     * If higher bits are unequal 0 the function doesn't applay any forces at all.
     * (As integer possible values are 0-7)
     *
     * 0: weak force
     * 1: strong force
     * 2: same as 0 (2nd bit?)
     * 3: same as 1
     * 4: weak momentum
     * 5: strong momentum
     * 6: same as 4
     * 7: same as 5
     *
     * isLocal: vector defined in local (body-fixed) coordinate frame
     * isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.
     *
     * p8 !!! Whenever I set this !=0, my script stopped.
     *
     * Hash: 0xC5F68BE9613E2D18 | Since: 323
     */
    function applyForceTo(entity, forceFlags, pos, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel) {
        ApplyForceToEntity(entity, forceFlags, pos.x, pos.y, pos.z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, false, false);
    }
    entity_1.applyForceTo = applyForceTo;
    /**
     * Applies a force to the specified entity.
     *
     * **List of force types (p1)**:
     * public enum ForceType
     * {
     * MinForce = 0,
     * MaxForceRot = 1,
     * MinForce2 = 2,
     * MaxForceRot2 = 3,
     * ForceNoRot = 4,
     * ForceRotPlusForce = 5
     * }
     * Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
     *
     * p6/relative - makes the xyz force not relative to world coords, but to something else
     * p7/highForce - setting false will make the force really low
     *
     * Hash: 0x18FF00FC7EFF559E | Since: 323
     */
    function applyForceToCenterOfMass(entity, forceType, pos, isDirectionRel, isForceRel) {
        ApplyForceToEntityCenterOfMass(entity, forceType, pos.x, pos.y, pos.z, false, isDirectionRel, isForceRel, false);
    }
    entity_1.applyForceToCenterOfMass = applyForceToCenterOfMass;
    /**
     * No comment provided
     *
     * Hash: 0x5C48B75732C8456C | Since: 791
     */
    function attachBoneToEntityBone(entity1, entity2, boneIndex1, boneIndex2) {
        AttachEntityBoneToEntityBone(entity1, entity2, boneIndex1, boneIndex2, false, false);
    }
    entity_1.attachBoneToEntityBone = attachBoneToEntityBone;
    /**
     * No comment provided
     *
     * Hash: 0xFD1695C5D3B05439 | Since: 791
     */
    function attachBoneToEntityBoneYForward(entity1, entity2, boneIndex1, boneIndex2) {
        AttachEntityBoneToEntityBonePhysically(entity1, entity2, boneIndex1, boneIndex2, false, false);
    }
    entity_1.attachBoneToEntityBoneYForward = attachBoneToEntityBoneYForward;
    /**
     * Attaches entity1 to bone (boneIndex) of entity2.
     *
     * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
     *
     * useSoftPinning - if set to false attached entity will not detach when fixed
     * collision - controls collision between the two entities (FALSE disables collision).
     * isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
     * vertexIndex - position of vertex
     * fixedRot - if false it ignores entity vector
     *
     *
     * Hash: 0x6B9BBD38AB0796DF | Since: 323
     */
    function attachToEntity(entity1, entity2, boneIndex, pos, rot, useSoftPinning, collision, isPed, vertexIndex, fixedRot) {
        AttachEntityToEntity(entity1, entity2, boneIndex, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, false, useSoftPinning, collision, isPed, vertexIndex, fixedRot, undefined);
    }
    entity_1.attachToEntity = attachToEntity;
    /**
     * breakForce is the amount of force required to break the bond.
     * p14 - is always 1 in scripts
     * p15 - is 1 or 0 in scripts - unknoun what it does
     * p16 - controls collision between the two entities (FALSE disables collision).
     * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
     * p18 - is always 2 in scripts.
     *
     *
     *
     * Hash: 0xC3675780C92F90F9 | Since: 323
     */
    function attachToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, rot, breakForce, fixedRot, collision) {
        AttachEntityToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, rot.x, rot.y, rot.z, breakForce, fixedRot, false, collision, false, 0);
    }
    entity_1.attachToEntityPhysically = attachToEntityPhysically;
    /**
     * No comment provided
     *
     * Hash: 0x168A09D1B25B0BA4 | Since: 2944
     */
    function attachToEntityPhysicallyOverrideInverseMass(firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength, constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, invMassScaleA, invMassScaleB) {
        Citizen.invokeNative('0x168A09D1B25B0BA4', firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength, constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, invMassScaleA, invMassScaleB);
    }
    entity_1.attachToEntityPhysicallyOverrideInverseMass = attachToEntityPhysicallyOverrideInverseMass;
    /**
     * No comment provided
     *
     * Hash: 0xA72CD9CA74A5ECBA | Since: 323
     */
    function clearLastDamageEntity(entity) {
        ClearEntityLastDamageEntity(entity);
    }
    entity_1.clearLastDamageEntity = clearLastDamageEntity;
    /**
     * No comment provided
     *
     * Hash: 0x150E808B375A385A | Since: 323
     */
    function createForcedObject(pos, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        CreateForcedObject(pos.x, pos.y, pos.z, undefined, modelHash, false);
    }
    entity_1.createForcedObject = createForcedObject;
    /**
     * p5 = sets as true in scripts
     * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
     *
     * Network players do not see changes done with this.
     *
     * Hash: 0x8A97BCA30A0CE478 | Since: 323
     */
    function createModelHide(pos, radius, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        CreateModelHide(pos.x, pos.y, pos.z, radius, modelHash, false);
    }
    entity_1.createModelHide = createModelHide;
    /**
     * No comment provided
     *
     * Hash: 0x3A52AE588830BF7F | Since: 323
     */
    function createModelHideExcludingScriptObjects(pos, radius, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        CreateModelHideExcludingScriptObjects(pos.x, pos.y, pos.z, radius, modelHash, false);
    }
    entity_1.createModelHideExcludingScriptObjects = createModelHideExcludingScriptObjects;
    /**
     * Only works with objects!
     *
     * Hash: 0x92C47782FDA8B2A3 | Since: 323
     */
    function createModelSwap(pos, radius, originalModel, newModel) {
        if (typeof originalModel === 'string')
            originalModel = misc.getHashKey(originalModel);
        if (typeof newModel === 'string')
            newModel = misc.getHashKey(newModel);
        CreateModelSwap(pos.x, pos.y, pos.z, radius, originalModel, newModel, false);
    }
    entity_1.createModelSwap = createModelSwap;
    /**
     * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0xAE3CBE5BF394C9C9 | Since: 323
     */
    function deleteEntity(entity) {
        DeleteEntity(entity);
    }
    entity_1.deleteEntity = deleteEntity;
    /**
     * If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
     * Set `dynamic` to true to keep velocity after dettaching
     *
     * Hash: 0x961AC54BF0613F5D | Since: 323
     */
    function detach(entity, dynamic, collision) {
        DetachEntity(entity, dynamic, collision);
    }
    entity_1.detach = detach;
    /**
     * No comment provided
     *
     * Hash: 0xDDE6DF5AE89981D2 | Since: 323
     */
    function doesBelongToThisScript(entity) {
        return DoesEntityBelongToThisScript(entity, false);
    }
    entity_1.doesBelongToThisScript = doesBelongToThisScript;
    /**
     * Checks whether an entity exists in the game world.
     *
     * Hash: 0x7239B21A38F536BA | Since: 323
     */
    function doesExist(entity) {
        return DoesEntityExist(entity);
    }
    entity_1.doesExist = doesExist;
    /**
     * No comment provided
     *
     * Hash: 0x2158E81A6AF65EA9 | Since: 2699
     */
    function doesHaveAnimDirector(entity) {
        return DoesEntityHaveAnimDirector(entity);
    }
    entity_1.doesHaveAnimDirector = doesHaveAnimDirector;
    /**
     * No comment provided
     *
     * Hash: 0x060D6E96F8B8E48D | Since: 323
     */
    function doesHaveDrawable(entity) {
        return DoesEntityHaveDrawable(entity);
    }
    entity_1.doesHaveDrawable = doesHaveDrawable;
    /**
     * No comment provided
     *
     * Hash: 0xDA95EA3317CC5064 | Since: 323
     */
    function doesHavePhysics(entity) {
        return DoesEntityHavePhysics(entity);
    }
    entity_1.doesHavePhysics = doesHavePhysics;
    /**
     * No comment provided
     *
     * Hash: 0x764EB96874EFFDC1 | Since: 2699
     */
    function doesHaveSkeleton(entity) {
        return DoesEntityHaveSkeletonData(entity);
    }
    entity_1.doesHaveSkeleton = doesHaveSkeleton;
    /**
     * No comment provided
     *
     * Hash: 0x6CE177D014502E8A | Since: 877
     */
    function enableBulletCollision(entity) {
        EnableEntityUnk(entity);
    }
    entity_1.enableBulletCollision = enableBulletCollision;
    /**
     * In the script "player_scene_t_bbfight.c4":
     * `"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4\/\*16\*\/], v_9, &v_A, &v_B))"`
     * -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
     * -- &l_19F[v_4\/\*16\*\/] (p1) is used in other natives in the script as the "animation" param.
     * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
     * --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
     * `"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"`
     * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x07F1BE2BCCAA27A7 | Since: 323
     */
    function findAnimEventPhase(animDictionary, animName) {
        return FindAnimEventPhase(animDictionary, animName, undefined);
    }
    entity_1.findAnimEventPhase = findAnimEventPhase;
    /**
     * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
     *
     * Hash: 0x40FDEDB72F8293B2 | Since: 323
     */
    function forceAiAndAnimationUpdate(entity) {
        ForceEntityAiAndAnimationUpdate(entity);
    }
    entity_1.forceAiAndAnimationUpdate = forceAiAndAnimationUpdate;
    /**
     * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
     *
     * Hash: 0x428CA6DBD1094446 | Since: 323
     */
    function freezePosition(entity, toggle) {
        FreezeEntityPosition(entity, toggle);
    }
    entity_1.freezePosition = freezePosition;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xFEDDF04D62B8D790 | Since: 323
     */
    function getAnimDuration(animDict, animName) {
        return GetAnimDuration(animDict, animName);
    }
    entity_1.getAnimDuration = getAnimDuration;
    /**
     * No comment provided
     *
     * Hash: 0xE465D4AB7CA6AE72 | Since: 323
     */
    function getCollisionNormalOfLastHitFor(entity) {
        return new Vector3(GetCollisionNormalOfLastHitForEntity(entity));
    }
    entity_1.getCollisionNormalOfLastHitFor = getCollisionNormalOfLastHitFor;
    /**
     * No comment provided
     *
     * Hash: 0x5A47B3B5E63E94C6 | Since: 323
     */
    function getAlpha(entity) {
        return GetEntityAlpha(entity);
    }
    entity_1.getAlpha = getAlpha;
    /**
     * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
     *
     * Example:
     * 0.000000 - mark the starting of animation.
     * 0.500000 - mark the midpoint of the animation.
     * 1.000000 - mark the end of animation.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x346D81500D088F42 | Since: 323
     */
    function getAnimCurrentTime(entity, animDict, animName) {
        return GetEntityAnimCurrentTime(entity, animDict, animName);
    }
    entity_1.getAnimCurrentTime = getAnimCurrentTime;
    /**
     * Returns a float value representing animation's total playtime in milliseconds.
     *
     * Example:
     * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
     * return 20800.000000
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x50BD2730B191E360 | Since: 323
     */
    function getAnimTotalTime(entity, animDict, animName) {
        return GetEntityAnimTotalTime(entity, animDict, animName);
    }
    entity_1.getAnimTotalTime = getAnimTotalTime;
    /**
     * No comment provided
     *
     * Hash: 0x48C2BED9180FE123 | Since: 323
     */
    function getAttachedTo(entity) {
        return GetEntityAttachedTo(entity);
    }
    entity_1.getAttachedTo = getAttachedTo;
    /**
     * No comment provided
     *
     * Hash: 0xB328DCC3A3AA401B | Since: 791
     */
    function getBoneCount(entity) {
        return GetEntityBoneCount(entity);
    }
    entity_1.getBoneCount = getBoneCount;
    /**
     * Returns the index of the bone. If the bone was not found, -1 will be returned.
     *
     * list:
     * https://pastebin.com/D7JMnX1g
     *
     * BoneNames:
     * chassis,
     * windscreen,
     * seat_pside_r,
     * seat_dside_r,
     * bodyshell,
     * suspension_lm,
     * suspension_lr,
     * platelight,
     * attach_female,
     * attach_male,
     * bonnet,
     * boot,
     * chassis_dummy,  //Center of the dummy
     * chassis_Control,    //Not found yet
     * door_dside_f,   //Door left, front
     * door_dside_r,   //Door left, back
     * door_pside_f,   //Door right, front
     * door_pside_r,   //Door right, back
     * Gun_GripR,
     * windscreen_f,
     * platelight, //Position where the light above the numberplate is located
     * VFX_Emitter,
     * window_lf,  //Window left, front
     * window_lr,  //Window left, back
     * window_rf,  //Window right, front
     * window_rr,  //Window right, back
     * engine, //Position of the engine
     * gun_ammo,
     * ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
     * wheel_lf,   //Wheel left, front
     * wheel_lr,   //Wheel left, back
     * wheel_rf,   //Wheel right, front
     * wheel_rr,   //Wheel right, back
     * exhaust,    //Exhaust. shows only the position of the stock-exhaust
     * overheat,   //A position on the engine(not exactly sure, how to name it)
     * misc_e, //Not a car-bone.
     * seat_dside_f,   //Driver-seat
     * seat_pside_f,   //Seat next to driver
     * Gun_Nuzzle,
     * seat_r
     *
     * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
     *
     *
     *
     * Hash: 0xFB71170B7E76ACBA | Since: 323
     */
    function getBoneIndexByName(entity, boneName) {
        return GetEntityBoneIndexByName(entity, boneName);
    }
    entity_1.getBoneIndexByName = getBoneIndexByName;
    /**
     * No comment provided
     *
     * Hash: 0xCF1247CC86961FD6 | Since: 2802
     */
    function getBoneObjectPostion(entity, boneIndex) {
        return new Vector3(Citizen.invokeNative('0xCF1247CC86961FD6', entity, boneIndex));
    }
    entity_1.getBoneObjectPostion = getBoneObjectPostion;
    /**
     * Gets the local rotation of the specified bone of the specified entity.
     *
     * Hash: 0xBD8D32550E5CEBFE | Since: 1734
     */
    function getBoneObjectRotation(entity, boneIndex) {
        return new Vector3(GetEntityBoneRotationLocal(entity, boneIndex));
    }
    entity_1.getBoneObjectRotation = getBoneObjectRotation;
    /**
     * Gets the world position of the specified bone of the specified entity.
     *
     * Hash: 0x46F8696933A63C9B | Since: 877
     */
    function getBonePostion(entity, boneIndex) {
        return new Vector3(GetEntityBonePosition2(entity, boneIndex));
    }
    entity_1.getBonePostion = getBonePostion;
    /**
     * Gets the world rotation of the specified bone of the specified entity.
     *
     * Hash: 0xCE6294A232D03786 | Since: 791
     */
    function getBoneRotation(entity, boneIndex) {
        return new Vector3(GetEntityBoneRotation(entity, boneIndex));
    }
    entity_1.getBoneRotation = getBoneRotation;
    /**
     * No comment provided
     *
     * Hash: 0xD95CC5D2AB15A09F | Since: 757
     */
    function getCanBeDamaged(entity) {
        return GetEntityCanBeDamaged(entity);
    }
    entity_1.getCanBeDamaged = getCanBeDamaged;
    /**
     * No comment provided
     *
     * Hash: 0xCCF1E97BEFDAE480 | Since: 323
     */
    function getCollisionDisabled(entity) {
        return GetEntityCollisionDisabled(entity);
    }
    entity_1.getCollisionDisabled = getCollisionDisabled;
    /**
     * Gets the current coordinates for a specified entity.
     * `entity` = The entity to get the coordinates from.
     * `alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
     *
     * Hash: 0x3FEF770D40960D5A | Since: 323
     */
    function getCoords(entity, alive) {
        return new Vector3(GetEntityCoords(entity, alive));
    }
    entity_1.getCoords = getCoords;
    /**
     * Gets the entity's forward vector.
     *
     * Hash: 0x0A794A5A57F8DF91 | Since: 323
     */
    function getForwardVector(entity) {
        return new Vector3(GetEntityForwardVector(entity));
    }
    entity_1.getForwardVector = getForwardVector;
    /**
     * Gets the X-component of the entity's forward vector.
     *
     * Hash: 0x8BB4EF4214E0E6D5 | Since: 323
     */
    function getForwardX(entity) {
        return GetEntityForwardX(entity);
    }
    entity_1.getForwardX = getForwardX;
    /**
     * Gets the Y-component of the entity's forward vector.
     *
     * Hash: 0x866A4A5FAE349510 | Since: 323
     */
    function getForwardY(entity) {
        return GetEntityForwardY(entity);
    }
    entity_1.getForwardY = getForwardY;
    /**
     * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
     *
     * Hash: 0xE83D4F9BA2A38914 | Since: 323
     */
    function getHeading(entity) {
        return GetEntityHeading(entity);
    }
    entity_1.getHeading = getHeading;
    /**
     * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
     *
     * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
     *
     * Hash: 0x846BF6291198A71E | Since: 323
     */
    function getHeadingFromEulers(entity) {
        return GetEntityHeadingFromEulers(entity);
    }
    entity_1.getHeadingFromEulers = getHeadingFromEulers;
    /**
     * Returns an integer value of entity's current health.
     *
     * Example of range for ped:
     * - Player [0 to 200]
     * - Ped [100 to 200]
     * - Vehicle [0 to 1000]
     * - Object [0 to 1000]
     *
     * Health is actually a float value but this native casts it to int.
     * In order to get the actual value, do:
     * float health = *(float *)(entityAddress + 0x280);
     *
     * Hash: 0xEEF059FAD016D209 | Since: 323
     */
    function getHealth(entity) {
        return GetEntityHealth(entity);
    }
    entity_1.getHealth = getHealth;
    /**
     * No comment provided
     *
     * Hash: 0x5A504562485944DD | Since: 323
     */
    function getHeight(entity, pos, atTop, inWorldCoords) {
        return GetEntityHeight(entity, pos.x, pos.y, pos.z, atTop, inWorldCoords);
    }
    entity_1.getHeight = getHeight;
    /**
     * Return height (z-dimension) above ground.
     * Example: The pilot in a titan plane is 1.844176 above ground.
     *
     * How can i convert it to meters?
     * Everything seems to be in meters, probably this too.
     *
     * Hash: 0x1DD55701034110E5 | Since: 323
     */
    function getHeightAboveGround(entity) {
        return GetEntityHeightAboveGround(entity);
    }
    entity_1.getHeightAboveGround = getHeightAboveGround;
    /**
     * Returns the LOD distance of an entity.
     *
     * Hash: 0x4159C2762B5791D6 | Since: 323
     */
    function getLodDist(entity) {
        return GetEntityLodDist(entity);
    }
    entity_1.getLodDist = getLodDist;
    /**
     * No comment provided
     *
     * Hash: 0xECB2FC7235A7D137 | Since: 323
     */
    function getMatrix(entity) {
        return GetEntityMatrix(entity);
    }
    entity_1.getMatrix = getMatrix;
    /**
     * Return an integer value of entity's maximum health.
     *
     * Example:
     * - Player = 200
     * - Ped = 150
     *
     * Hash: 0x15D757606D170C3C | Since: 323
     */
    function getMaxHealth(entity) {
        return GetEntityMaxHealth(entity);
    }
    entity_1.getMaxHealth = getMaxHealth;
    /**
     * Returns the model hash from the entity
     *
     * Hash: 0x9F47B058362C84B5 | Since: 323
     */
    function getModel(entity) {
        return GetEntityModel(entity);
    }
    entity_1.getModel = getModel;
    /**
     * Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
     * This native does not appear to have anything to do with pickups as in scripts it is used with objects.
     *
     * Example from fm_mission_controller_2020.c:
     *
     * `iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard"));`
     *
     * Hash: 0x1F922734E259BD26 | Since: 1180
     */
    function getOfTypeAttachedToEntity(entity, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetEntityPickup(entity, modelHash);
    }
    entity_1.getOfTypeAttachedToEntity = getOfTypeAttachedToEntity;
    /**
     * No comment provided
     *
     * Hash: 0xD45DC2893621E1FE | Since: 323
     */
    function getPitch(entity) {
        return GetEntityPitch(entity);
    }
    entity_1.getPitch = getPitch;
    /**
     * A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
     *
     * Hash: 0xF6F5161F4534EDFF | Since: 323
     */
    function getPopulationType(entity) {
        return GetEntityPopulationType(entity);
    }
    entity_1.getPopulationType = getPopulationType;
    /**
     * No comment provided
     *
     * Hash: 0xBE8CD9BE829BBEBF | Since: 1604
     */
    function getProofs(entity) {
        return GetEntityProofs(entity);
    }
    entity_1.getProofs = getProofs;
    /**
     * w is the correct parameter name!
     *
     * Hash: 0x7B3703D2D32DFA18 | Since: 323
     */
    function getQuaternion(entity) {
        return GetEntityQuaternion(entity);
    }
    entity_1.getQuaternion = getQuaternion;
    /**
     * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
     * (Sideways Roll) such as a vehicle tipped on its side
     *
     * Hash: 0x831E0242595560DF | Since: 323
     */
    function getRoll(entity) {
        return GetEntityRoll(entity);
    }
    entity_1.getRoll = getRoll;
    /**
     * rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.
     *
     * rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
     * What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
     *
     * What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif
     *
     * Rotation Orders:
     * 0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
     * 1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
     * 2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
     * 3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
     * 4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
     * 5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
     *
     * Hash: 0xAFBD61CC738D9EB9 | Since: 323
     */
    function getRotation(entity, rotationOrder) {
        return new Vector3(GetEntityRotation(entity, rotationOrder));
    }
    entity_1.getRotation = getRotation;
    /**
     * No comment provided
     *
     * Hash: 0x213B91045D09B983 | Since: 323
     */
    function getRotationVelocity(entity) {
        return new Vector3(GetEntityRotationVelocity(entity));
    }
    entity_1.getRotationVelocity = getRotationVelocity;
    /**
     * Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
     *
     * Hash: 0xA6E9C38DB51D7748 | Since: 323
     */
    function getScript(entity) {
        return GetEntityScript(entity);
    }
    entity_1.getScript = getScript;
    /**
     * result is in meters per second
     *
     * ------------------------------------------------------------
     * So would the conversion to mph and km/h, be along the lines of this.
     *
     * float speed = GET_ENTITY_SPEED(veh);
     * float kmh = (speed * 3.6);
     * float mph = (speed * 2.236936);
     * ------------------------------------------------------------
     *
     * Hash: 0xD5037BA82E12416F | Since: 323
     */
    function getSpeed(entity) {
        return GetEntitySpeed(entity);
    }
    entity_1.getSpeed = getSpeed;
    /**
     * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
     *
     * Hash: 0x9A8D700A51CB7B0D | Since: 323
     */
    function getSpeedVector(entity, relative) {
        return new Vector3(GetEntitySpeedVector(entity, relative));
    }
    entity_1.getSpeedVector = getSpeedVector;
    /**
     * Get how much of the entity is submerged.  1.0f is whole entity.
     *
     * Hash: 0xE81AFC1BC4CC41CE | Since: 323
     */
    function getSubmergedLevel(entity) {
        return GetEntitySubmergedLevel(entity);
    }
    entity_1.getSubmergedLevel = getSubmergedLevel;
    /**
     * Returns:
     * 0 = no entity
     * 1 = ped
     * 2 = vehicle
     * 3 = object
     *
     * Hash: 0x8ACD366038D14505 | Since: 323
     */
    function getType(entity) {
        return GetEntityType(entity);
    }
    entity_1.getType = getType;
    /**
     * No comment provided
     *
     * Hash: 0x95EED5A694951F9F | Since: 323
     */
    function getUprightValue(entity) {
        return GetEntityUprightValue(entity);
    }
    entity_1.getUprightValue = getUprightValue;
    /**
     * No comment provided
     *
     * Hash: 0x4805D2B1D8CF94A9 | Since: 323
     */
    function getVelocity(entity) {
        return new Vector3(GetEntityVelocity(entity));
    }
    entity_1.getVelocity = getVelocity;
    /**
     * No comment provided
     *
     * Hash: 0x5C3D0A935F535C4C | Since: 323
     */
    function getLastMaterialHitBy(entity) {
        return GetLastMaterialHitByEntity(entity);
    }
    entity_1.getLastMaterialHitBy = getLastMaterialHitBy;
    /**
     * No comment provided
     *
     * Hash: 0xFFBD7052D65BE0FF | Since: 2944
     */
    function getNearestParticipantTo(entity) {
        return Citizen.invokeNative('0xFFBD7052D65BE0FF', entity);
    }
    entity_1.getNearestParticipantTo = getNearestParticipantTo;
    /**
     * No comment provided
     *
     * Hash: 0x7196842CB375CDB3 | Since: 323
     */
    function getNearestPlayerTo(entity) {
        return GetNearestPlayerToEntity(entity);
    }
    entity_1.getNearestPlayerTo = getNearestPlayerTo;
    /**
     * No comment provided
     *
     * Hash: 0x4DC9A62F844D9337 | Since: 323
     */
    function getNearestPlayerToOnTeam(entity, team) {
        return GetNearestPlayerToEntityOnTeam(entity, team);
    }
    entity_1.getNearestPlayerToOnTeam = getNearestPlayerToOnTeam;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0xD7E3B9735C0F89D6 | Since: 323
     */
    function getObjectIndexFromIndex(entity) {
        return GetObjectIndexFromEntityIndex(entity);
    }
    entity_1.getObjectIndexFromIndex = getObjectIndexFromIndex;
    /**
     * Converts world coords (posX - Z) to coords relative to the entity
     *
     * Example:
     * posX is given as 50
     * entity's x coord is 40
     * the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
     *
     * Hash: 0x2274BC1C4885E333 | Since: 323
     */
    function getOffsetFromGivenWorldCoords(entity, pos) {
        return new Vector3(GetOffsetFromEntityGivenWorldCoords(entity, pos.x, pos.y, pos.z));
    }
    entity_1.getOffsetFromGivenWorldCoords = getOffsetFromGivenWorldCoords;
    /**
     * Offset values are relative to the entity.
     *
     * x = left/right
     * y = forward/backward
     * z = up/down
     *
     * Hash: 0x1899F328B0E12848 | Since: 323
     */
    function getOffsetFromInWorldCoords(entity, offsetX, offsetY, offsetZ) {
        return new Vector3(GetOffsetFromEntityInWorldCoords(entity, offsetX, offsetY, offsetZ));
    }
    entity_1.getOffsetFromInWorldCoords = getOffsetFromInWorldCoords;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x04A2A40C73395041 | Since: 323
     */
    function getPedIndexFromIndex(entity) {
        return GetPedIndexFromEntityIndex(entity);
    }
    entity_1.getPedIndexFromIndex = getPedIndexFromIndex;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x4B53F92932ADFAC0 | Since: 323
     */
    function getVehicleIndexFromIndex(entity) {
        return GetVehicleIndexFromEntityIndex(entity);
    }
    entity_1.getVehicleIndexFromIndex = getVehicleIndexFromIndex;
    /**
     * Returns the coordinates of an entity-bone.
     *
     * Hash: 0x44A8FCB8ED227738 | Since: 323
     */
    function getWorldPositionOfBone(entity, boneIndex) {
        return new Vector3(GetWorldPositionOfEntityBone(entity, boneIndex));
    }
    entity_1.getWorldPositionOfBone = getWorldPositionOfBone;
    /**
     * `if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))`
     *
     * Hash: 0xEAF4CD9EA3E7E922 | Since: 323
     */
    function hasAnimEventFired(entity, actionHash) {
        if (typeof actionHash === 'string')
            actionHash = misc.getHashKey(actionHash);
        return HasAnimEventFired(entity, actionHash);
    }
    entity_1.hasAnimEventFired = hasAnimEventFired;
    /**
     * No comment provided
     *
     * Hash: 0xE9676F61BC0B3321 | Since: 323
     */
    function hasCollisionLoadedAround(entity) {
        return HasCollisionLoadedAroundEntity(entity);
    }
    entity_1.hasCollisionLoadedAround = hasCollisionLoadedAround;
    /**
     * P3 is always 3 as far as i cant tell
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x20B711662962B472 | Since: 323
     */
    function hasAnimFinished(entity, animDict, animName) {
        return HasEntityAnimFinished(entity, animDict, animName, 0);
    }
    entity_1.hasAnimFinished = hasAnimFinished;
    /**
     * No comment provided
     *
     * Hash: 0x95EB9964FF5C5C65 | Since: 323
     */
    function hasBeenDamagedByAnyObject(entity) {
        return HasEntityBeenDamagedByAnyObject(entity);
    }
    entity_1.hasBeenDamagedByAnyObject = hasBeenDamagedByAnyObject;
    /**
     * No comment provided
     *
     * Hash: 0x605F5A140F202491 | Since: 323
     */
    function hasBeenDamagedByAnyPed(entity) {
        return HasEntityBeenDamagedByAnyPed(entity);
    }
    entity_1.hasBeenDamagedByAnyPed = hasBeenDamagedByAnyPed;
    /**
     * No comment provided
     *
     * Hash: 0xDFD5033FDBA0A9C8 | Since: 323
     */
    function hasBeenDamagedByAnyVehicle(entity) {
        return HasEntityBeenDamagedByAnyVehicle(entity);
    }
    entity_1.hasBeenDamagedByAnyVehicle = hasBeenDamagedByAnyVehicle;
    /**
     * Entity 1 = Victim
     * Entity 2 = Attacker
     *
     * p2 seems to always be 1
     *
     * Hash: 0xC86D67D52A707CF8 | Since: 323
     */
    function hasBeenDamagedByEntity(entity1, entity2) {
        return HasEntityBeenDamagedByEntity(entity1, entity2, false);
    }
    entity_1.hasBeenDamagedByEntity = hasBeenDamagedByEntity;
    /**
     * traceType is always 17 in the scripts.
     *
     * There is other codes used for traceType:
     * 19 - in jewelry_prep1a
     * 126 - in am_hunt_the_beast
     * 256 & 287 - in fm_mission_controller
     *
     * Hash: 0xFCDFF7B72D23A1AC | Since: 323
     */
    function hasClearLosToEntity(entity1, entity2, traceType) {
        return HasEntityClearLosToEntity(entity1, entity2, traceType);
    }
    entity_1.hasClearLosToEntity = hasClearLosToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x394BDE2A7BBA031E | Since: 1868
     */
    function hasClearLosToEntityAdjustForCover(entity1, entity2, traceType) {
        return HasEntityClearLosToEntity2(entity1, entity2, traceType);
    }
    entity_1.hasClearLosToEntityAdjustForCover = hasClearLosToEntityAdjustForCover;
    /**
     * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
     * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
     *
     * Hash: 0x0267D00AF114F17A | Since: 323
     */
    function hasClearLosToEntityInFront(entity1, entity2) {
        return HasEntityClearLosToEntityInFront(entity1, entity2);
    }
    entity_1.hasClearLosToEntityInFront = hasClearLosToEntityInFront;
    /**
     * Called on tick.
     * Tested with vehicles, returns true whenever the vehicle is touching any entity.
     *
     * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
     *
     * Hash: 0x8BAD02F0368D9E14 | Since: 323
     */
    function hasCollidedWithAnything(entity) {
        return HasEntityCollidedWithAnything(entity);
    }
    entity_1.hasCollidedWithAnything = hasCollidedWithAnything;
    /**
     * No comment provided
     *
     * Hash: 0x731EC8A916BD11A1 | Since: 323
     */
    function isAn(handle) {
        return IsAnEntity(handle);
    }
    entity_1.isAn = isAn;
    /**
     * No comment provided
     *
     * Hash: 0x8D68C8FD0FACA94E | Since: 323
     */
    function isAnObject(entity) {
        return IsEntityAnObject(entity);
    }
    entity_1.isAnObject = isAnObject;
    /**
     * Whether the entity is attached to any other entity.
     *
     * Hash: 0xB346476EF1A64897 | Since: 323
     */
    function isAttached(entity) {
        return IsEntityAttached(entity);
    }
    entity_1.isAttached = isAttached;
    /**
     * No comment provided
     *
     * Hash: 0xCF511840CEEDE0CC | Since: 323
     */
    function isAttachedToAnyObject(entity) {
        return IsEntityAttachedToAnyObject(entity);
    }
    entity_1.isAttachedToAnyObject = isAttachedToAnyObject;
    /**
     * No comment provided
     *
     * Hash: 0xB1632E9A5F988D11 | Since: 323
     */
    function isAttachedToAnyPed(entity) {
        return IsEntityAttachedToAnyPed(entity);
    }
    entity_1.isAttachedToAnyPed = isAttachedToAnyPed;
    /**
     * No comment provided
     *
     * Hash: 0x26AA915AD89BFB4B | Since: 323
     */
    function isAttachedToAnyVehicle(entity) {
        return IsEntityAttachedToAnyVehicle(entity);
    }
    entity_1.isAttachedToAnyVehicle = isAttachedToAnyVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xEFBE71898A993728 | Since: 323
     */
    function isAttachedToEntity(_from, to) {
        return IsEntityAttachedToEntity(_from, to);
    }
    entity_1.isAttachedToEntity = isAttachedToEntity;
    /**
     * Checks if entity is within x/y/zSize distance of x/y/z.
     *
     * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
     *
     * Hash: 0x20B60995556D004F | Since: 323
     */
    function isAtCoord(entity, pos, xSize, ySize, zSize) {
        return IsEntityAtCoord(entity, pos.x, pos.y, pos.z, xSize, ySize, zSize, false, false, 0);
    }
    entity_1.isAtCoord = isAtCoord;
    /**
     * Checks if entity1 is within the box defined by x/y/zSize of entity2.
     *
     * Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
     *
     * Hash: 0x751B70C3D034E187 | Since: 323
     */
    function isAtEntity(entity1, entity2, xSize, ySize, zSize) {
        return IsEntityAtEntity(entity1, entity2, xSize, ySize, zSize, false, false, 0);
    }
    entity_1.isAtEntity = isAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0A7B270912999B3C | Since: 323
     */
    function isAMissionEntity(entity) {
        return IsEntityAMissionEntity(entity);
    }
    entity_1.isAMissionEntity = isAMissionEntity;
    /**
     * No comment provided
     *
     * Hash: 0x524AC5ECEA15343E | Since: 323
     */
    function isAPed(entity) {
        return IsEntityAPed(entity);
    }
    entity_1.isAPed = isAPed;
    /**
     * No comment provided
     *
     * Hash: 0x6AC7003FA6E5575E | Since: 323
     */
    function isAVehicle(entity) {
        return IsEntityAVehicle(entity);
    }
    entity_1.isAVehicle = isAVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x5F9532F3B5CC2551 | Since: 323
     */
    function isDead(entity) {
        return IsEntityDead(entity, false);
    }
    entity_1.isDead = isDead;
    /**
     * No comment provided
     *
     * Hash: 0x886E37EC497200B6 | Since: 323
     */
    function isInAir(entity) {
        return IsEntityInAir(entity);
    }
    entity_1.isInAir = isInAir;
    /**
     * `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
     * `p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x51210CED3DA1C78A | Since: 323
     */
    function isInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ) {
        return IsEntityInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, undefined);
    }
    entity_1.isInAngledArea = isInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x54736AA40E271165 | Since: 323
     */
    function isInArea(entity, x1, y1, z1, x2, y2, z2) {
        return IsEntityInArea(entity, x1, y1, z1, x2, y2, z2, false, false, undefined);
    }
    entity_1.isInArea = isInArea;
    /**
     * No comment provided
     *
     * Hash: 0xCFB0A0D8EDD145A3 | Since: 323
     */
    function isInWater(entity) {
        return IsEntityInWater(entity);
    }
    entity_1.isInWater = isInWater;
    /**
     * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
     *
     * Hash: 0xB6463CF6AF527071 | Since: 323
     */
    function isInZone(entity, zone) {
        return IsEntityInZone(entity, zone);
    }
    entity_1.isInZone = isInZone;
    /**
     * No comment provided
     *
     * Hash: 0xE31C2C72B8692B64 | Since: 323
     */
    function isOccluded(entity) {
        return IsEntityOccluded(entity);
    }
    entity_1.isOccluded = isOccluded;
    /**
     * Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.
     * This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
     * Chipping
     *
     * Hash: 0xE659E47AF827484B | Since: 323
     */
    function isOnScreen(entity) {
        return IsEntityOnScreen(entity);
    }
    entity_1.isOnScreen = isOnScreen;
    /**
     * `See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447`
     *
     * `Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)`
     *
     * p4 is always 3 in the scripts.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x1F0B79228E461EC9 | Since: 323
     */
    function isPlayingAnim(entity, animDict, animName, taskFlag) {
        return IsEntityPlayingAnim(entity, animDict, animName, taskFlag);
    }
    entity_1.isPlayingAnim = isPlayingAnim;
    /**
     * `a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.`
     *
     * Hash: 0x1218E6886D3D8327 | Since: 323
     */
    function isStatic(entity) {
        return IsEntityStatic(entity);
    }
    entity_1.isStatic = isStatic;
    /**
     * No comment provided
     *
     * Hash: 0x17FFC1B2BA35A494 | Since: 323
     */
    function isTouchingEntity(entity, targetEntity) {
        return IsEntityTouchingEntity(entity, targetEntity);
    }
    entity_1.isTouchingEntity = isTouchingEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0F42323798A58C8C | Since: 323
     */
    function isTouchingModel(entity, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsEntityTouchingModel(entity, modelHash);
    }
    entity_1.isTouchingModel = isTouchingModel;
    /**
     * No comment provided
     *
     * Hash: 0x5333F526F6AB19AA | Since: 323
     */
    function isUpright(entity, angle) {
        return IsEntityUpright(entity, angle);
    }
    entity_1.isUpright = isUpright;
    /**
     * No comment provided
     *
     * Hash: 0x1DBD58820FA61D71 | Since: 323
     */
    function isUpsidedown(entity) {
        return IsEntityUpsidedown(entity);
    }
    entity_1.isUpsidedown = isUpsidedown;
    /**
     * No comment provided
     *
     * Hash: 0x47D6F43D77935C75 | Since: 323
     */
    function isVisible(entity) {
        return IsEntityVisible(entity);
    }
    entity_1.isVisible = isVisible;
    /**
     * No comment provided
     *
     * Hash: 0xD796CB5BA8F20E32 | Since: 323
     */
    function isVisibleToScript(entity) {
        return IsEntityVisibleToScript(entity);
    }
    entity_1.isVisibleToScript = isVisibleToScript;
    /**
     * No comment provided
     *
     * Hash: 0xD05BFF0C0A12C68F | Since: 323
     */
    function isWaitingForWorldCollision(entity) {
        return IsEntityWaitingForWorldCollision(entity);
    }
    entity_1.isWaitingForWorldCollision = isWaitingForWorldCollision;
    /**
     * delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
     *
     * The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x7FB218262B810701 | Since: 323
     */
    function playAnim(entity, animName, animDict, loop, stayInAnim, delta, bitset) {
        return PlayEntityAnim(entity, animName, animDict, 0, loop, stayInAnim, false, delta, bitset);
    }
    entity_1.playAnim = playAnim;
    /**
     * p4 and p7 are usually 1000.0f.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xC77720A12FE14A86 | Since: 323
     */
    function playSynchronizedAnim(entity, syncedScene, animation, propName) {
        return PlaySynchronizedEntityAnim(entity, syncedScene, animation, propName, 0, 0, undefined, 0);
    }
    entity_1.playSynchronizedAnim = playSynchronizedAnim;
    /**
     * p6,p7 probably animname and animdict
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xB9C54555ED30FBC4 | Since: 323
     */
    function playSynchronizedMapAnim(x1, y1, z1, x2, y2, z2) {
        return PlaySynchronizedMapEntityAnim(x1, y1, z1, x2, y2, z2, undefined, undefined, 0, 0, undefined, 0);
    }
    entity_1.playSynchronizedMapAnim = playSynchronizedMapAnim;
    /**
     * Called to update entity attachments.
     *
     * Hash: 0xF4080490ADC51C6F | Since: 323
     */
    function processAttachments(entity) {
        ProcessEntityAttachments(entity);
    }
    entity_1.processAttachments = processAttachments;
    /**
     * No comment provided
     *
     * Hash: 0x61B6775E83C0DB6F | Since: 323
     */
    function removeForcedObject(pos, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        RemoveForcedObject(pos.x, pos.y, pos.z, 0, modelHash);
    }
    entity_1.removeForcedObject = removeForcedObject;
    /**
     * This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
     * p5 should be false, true does nothing
     *
     * Hash: 0xD9E3006FB3CBD765 | Since: 323
     */
    function removeModelHide(pos, radius, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        RemoveModelHide(pos.x, pos.y, pos.z, radius, modelHash, false);
    }
    entity_1.removeModelHide = removeModelHide;
    /**
     * No comment provided
     *
     * Hash: 0x033C0F9A64E229AE | Since: 323
     */
    function removeModelSwap(pos, radius, originalModel, newModel) {
        if (typeof originalModel === 'string')
            originalModel = misc.getHashKey(originalModel);
        if (typeof newModel === 'string')
            newModel = misc.getHashKey(newModel);
        RemoveModelSwap(pos.x, pos.y, pos.z, radius, originalModel, newModel, false);
    }
    entity_1.removeModelSwap = removeModelSwap;
    /**
     * No comment provided
     *
     * Hash: 0x9B1E824FFBB7027A | Since: 323
     */
    function resetAlpha(entity) {
        ResetEntityAlpha(entity);
    }
    entity_1.resetAlpha = resetAlpha;
    /**
     * Similar to RESET_ENTITY_ALPHA
     *
     * Hash: 0x490861B88F4FD846 | Since: 944
     */
    function resetPickupGlow(entity) {
        Citizen.invokeNative('0x490861B88F4FD846', entity);
    }
    entity_1.resetPickupGlow = resetPickupGlow;
    /**
     * p1 is always set to 1
     *
     * Hash: 0x36F32DE87082343E | Since: 1011
     */
    function setAllowMigrateToSpectator(entity) {
        Citizen.invokeNative('0x36F32DE87082343E', entity, undefined);
    }
    entity_1.setAllowMigrateToSpectator = setAllowMigrateToSpectator;
    /**
     * p1 always false.
     *
     * Hash: 0xE12ABE5E3A389A6C | Since: 323
     */
    function setCanAutoVaultOn(entity, toggle) {
        SetCanAutoVaultOnEntity(entity, toggle);
    }
    entity_1.setCanAutoVaultOn = setCanAutoVaultOn;
    /**
     * p1 always false.
     *
     * Hash: 0xA80AE305E0A3044F | Since: 323
     */
    function setCanClimbOn(entity, toggle) {
        SetCanClimbOnEntity(entity, toggle);
    }
    entity_1.setCanClimbOn = setCanClimbOn;
    /**
     * skin - everything alpha except skin
     * Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
     *
     * Hash: 0x44A0870B7E92D7C0 | Since: 323
     */
    function setAlpha(entity, alphaLevel, skin) {
        SetEntityAlpha(entity, alphaLevel, skin);
    }
    entity_1.setAlpha = setAlpha;
    /**
     * No comment provided
     *
     * Hash: 0xACAD101E1FB66689 | Since: 323
     */
    function setAlwaysPrerender(entity, toggle) {
        SetEntityAlwaysPrerender(entity, toggle);
    }
    entity_1.setAlwaysPrerender = setAlwaysPrerender;
    /**
     * No comment provided
     *
     * Hash: 0x8339643499D1222E | Since: 2372
     */
    function setAngularVelocity(entity, pos) {
        SetEntityAngularVelocity(entity, pos.x, pos.y, pos.z);
    }
    entity_1.setAngularVelocity = setAngularVelocity;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x4487C259F0F70977 | Since: 323
     */
    function setAnimCurrentTime(entity, animDictionary, animName, time) {
        SetEntityAnimCurrentTime(entity, animDictionary, animName, time);
    }
    entity_1.setAnimCurrentTime = setAnimCurrentTime;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x28D1A16553C51776 | Since: 323
     */
    function setAnimSpeed(entity, animDictionary, animName, speedMultiplier) {
        SetEntityAnimSpeed(entity, animDictionary, animName, speedMultiplier);
    }
    entity_1.setAnimSpeed = setAnimSpeed;
    /**
     * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
     *
     * p1 has no effect when either its on or off
     * maybe a quick disassembly will tell us what it does
     *
     * p2 has no effect when either its on or off
     * maybe a quick disassembly will tell us what it does
     *
     * Hash: 0xAD738C3085FE7E11 | Since: 323
     */
    function setAsMissionEntity(entity) {
        SetEntityAsMissionEntity(entity, false, false);
    }
    entity_1.setAsMissionEntity = setAsMissionEntity;
    /**
     * Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
     * If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
     * Entities marked as no longer needed, will be deleted as the engine sees fit.
     * Use this if you just want to just let the game delete the ped:
     * void MarkPedAsAmbientPed(Ped ped) {
     * auto addr = getScriptHandleBaseAddress(ped);
     *
     * if (!addr) {
     * return;
     * }
     *
     * //the game uses only lower 4 bits as entity population type
     * BYTE origValue = *(BYTE *)(addr + 0xDA);
     * `*(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);`
     * }
     *
     * Hash: 0xB736A491E64A32CF | Since: 323
     */
    function setAsNoLongerNeeded(entity) {
        SetEntityAsNoLongerNeeded(entity);
    }
    entity_1.setAsNoLongerNeeded = setAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x68B562E124CC0AEF | Since: 1180
     */
    function setCantCauseCollisionDamagedEntity(entity1, entity2) {
        Citizen.invokeNative('0x68B562E124CC0AEF', entity1, entity2);
    }
    entity_1.setCantCauseCollisionDamagedEntity = setCantCauseCollisionDamagedEntity;
    /**
     * No comment provided
     *
     * Hash: 0x1760FFA8AB074D66 | Since: 323
     */
    function setCanBeDamaged(entity, toggle) {
        SetEntityCanBeDamaged(entity, toggle);
    }
    entity_1.setCanBeDamaged = setCanBeDamaged;
    /**
     * No comment provided
     *
     * Hash: 0xE22D8FDE858B8119 | Since: 323
     */
    function setCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup) {
        SetEntityCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup);
    }
    entity_1.setCanBeDamagedByRelationshipGroup = setCanBeDamagedByRelationshipGroup;
    /**
     * Sets whether the entity can be targeted without being in line-of-sight.
     *
     * Hash: 0xD3997889736FD899 | Since: 323
     */
    function setCanBeTargetedWithoutLos(entity, toggle) {
        SetEntityCanBeTargetedWithoutLos(entity, toggle);
    }
    entity_1.setCanBeTargetedWithoutLos = setCanBeTargetedWithoutLos;
    /**
     * No comment provided
     *
     * Hash: 0xB17BC6453F6CF5AC | Since: 944
     */
    function setCanOnlyBeDamagedByEntity(entity1, entity2) {
        Citizen.invokeNative('0xB17BC6453F6CF5AC', entity1, entity2);
    }
    entity_1.setCanOnlyBeDamagedByEntity = setCanOnlyBeDamagedByEntity;
    /**
     * No comment provided
     *
     * Hash: 0x352E2B5CF420BF3B | Since: 573
     */
    function setCanOnlyBeDamagedByScriptParticipants(entity, toggle) {
        Citizen.invokeNative('0x352E2B5CF420BF3B', entity, toggle);
    }
    entity_1.setCanOnlyBeDamagedByScriptParticipants = setCanOnlyBeDamagedByScriptParticipants;
    /**
     * No comment provided
     *
     * Hash: 0x1A9205C1B9EE827F | Since: 323
     */
    function setCollision(entity, toggle, keepPhysics) {
        SetEntityCollision(entity, toggle, keepPhysics);
    }
    entity_1.setCollision = setCollision;
    /**
     * No comment provided
     *
     * Hash: 0x9EBC85ED0FFFE51C | Since: 323
     */
    function setCompletelyDisableCollision(entity, toggle, keepPhysics) {
        SetEntityCompletelyDisableCollision(entity, toggle, keepPhysics);
    }
    entity_1.setCompletelyDisableCollision = setCompletelyDisableCollision;
    /**
     * p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.
     *
     * Often ends with 1, 0, 0, 1); in the scripts. It works.
     *
     * Axis - Invert Axis Flags
     *
     * Hash: 0x06843DA7060A026B | Since: 323
     */
    function setCoords(entity, pos, xAxis, yAxis, zAxis, clearArea) {
        SetEntityCoords(entity, pos.x, pos.y, pos.z, xAxis, yAxis, zAxis, clearArea);
    }
    entity_1.setCoords = setCoords;
    /**
     * Axis - Invert Axis Flags
     *
     * Hash: 0x239A3351AC1DA385 | Since: 323
     */
    function setCoordsNoOffset(entity, pos, xAxis, yAxis, zAxis) {
        SetEntityCoordsNoOffset(entity, pos.x, pos.y, pos.z, xAxis, yAxis, zAxis);
    }
    entity_1.setCoordsNoOffset = setCoordsNoOffset;
    /**
     * No comment provided
     *
     * Hash: 0x621873ECE1178967 | Since: 323
     */
    function setCoordsWithoutPlantsReset(entity, pos, alive, deadFlag, ragdollFlag, clearArea) {
        SetEntityCoordsWithoutPlantsReset(entity, pos.x, pos.y, pos.z, alive, deadFlag, ragdollFlag, clearArea);
    }
    entity_1.setCoordsWithoutPlantsReset = setCoordsWithoutPlantsReset;
    /**
     * No comment provided
     *
     * Hash: 0x1718DE8E3F2823CA | Since: 323
     */
    function setDynamic(entity, toggle) {
        SetEntityDynamic(entity, toggle);
    }
    entity_1.setDynamic = setDynamic;
    /**
     * No comment provided
     *
     * Hash: 0x4A4722448F18EEF5 | Since: 323
     */
    function setHasGravity(entity, toggle) {
        SetEntityHasGravity(entity, toggle);
    }
    entity_1.setHasGravity = setHasGravity;
    /**
     * Set the heading of an entity in degrees also known as "Yaw".
     *
     * Hash: 0x8E2530AA8ADA980E | Since: 323
     */
    function setHeading(entity, heading) {
        SetEntityHeading(entity, heading);
    }
    entity_1.setHeading = setHeading;
    /**
     * health >= 0
     * male ped ~= 100 - 200
     * female ped ~= 0 - 100
     *
     * Hash: 0x6B76DC1F3AE6E6A3 | Since: 323
     */
    function setHealth(entity, health, instigator, weaponType) {
        if (typeof weaponType === 'string')
            weaponType = misc.getHashKey(weaponType);
        SetEntityHealth(entity, health, instigator, weaponType);
    }
    entity_1.setHealth = setHealth;
    /**
     * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
     *
     * If you use this for a ped and you want Ragdoll to stay enabled, then do:
     * *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
     *
     * Use this if you want to get the invincibility status:
     * bool IsPedInvincible(Ped ped)
     * {
     * auto addr = getScriptHandleBaseAddress(ped);
     *
     * if (addr)
     * {
     * DWORD flag = *(DWORD *)(addr + 0x188);
     * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
     * }
     *
     * return false;
     * }
     *
     * Hash: 0x3882114BDE571AD4 | Since: 323
     */
    function setInvincible(entity, toggle, dontResetOnCleanup) {
        SetEntityInvincible(entity, toggle, dontResetOnCleanup);
    }
    entity_1.setInvincible = setInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x78E8E3A640178255 | Since: 323
     */
    function setIsInVehicle(entity) {
        Citizen.invokeNative('0x78E8E3A640178255', entity);
    }
    entity_1.setIsInVehicle = setIsInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xEA02E132F5C68722 | Since: 323
     */
    function setIsTargetPriority(entity) {
        SetEntityIsTargetPriority(entity, false, 0);
    }
    entity_1.setIsTargetPriority = setIsTargetPriority;
    /**
     * No comment provided
     *
     * Hash: 0x7CFBA6A80BDF3874 | Since: 323
     */
    function setLights(entity, toggle) {
        SetEntityLights(entity, toggle);
    }
    entity_1.setLights = setLights;
    /**
     * Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
     * Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
     *
     * Hash: 0x0DC7CABAB1E9B67E | Since: 323
     */
    function setLoadCollisionFlag(entity, toggle) {
        SetEntityLoadCollisionFlag(entity, toggle, undefined);
    }
    entity_1.setLoadCollisionFlag = setLoadCollisionFlag;
    /**
     * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
     *
     * Hash: 0x5927F96A78577363 | Since: 323
     */
    function setLodDist(entity, value) {
        SetEntityLodDist(entity, value);
    }
    entity_1.setLodDist = setLodDist;
    /**
     * `For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849`
     *
     * Hash: 0x166E7CF68597D8B5 | Since: 323
     */
    function setMaxHealth(entity, value) {
        SetEntityMaxHealth(entity, value);
    }
    entity_1.setMaxHealth = setMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0x0E46A3FCBDE2A1B1 | Since: 323
     */
    function setMaxSpeed(entity, speed) {
        SetEntityMaxSpeed(entity, speed);
    }
    entity_1.setMaxSpeed = setMaxSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xE66377CDDADA4810 | Since: 1734
     */
    function setMirrorReflectionFlag(entity) {
        Citizen.invokeNative('0xE66377CDDADA4810', entity, false);
    }
    entity_1.setMirrorReflectionFlag = setMirrorReflectionFlag;
    /**
     * No comment provided
     *
     * Hash: 0x295D82A8559F9150 | Since: 323
     */
    function setMotionBlur(entity, toggle) {
        SetEntityMotionBlur(entity, toggle);
    }
    entity_1.setMotionBlur = setMotionBlur;
    /**
     * No comment provided
     *
     * Hash: 0x2C2E3DC128F44309 | Since: 323
     */
    function setNoweapondecals(entity) {
        SetEntityDecalsDisabled(entity, false);
    }
    entity_1.setNoweapondecals = setNoweapondecals;
    /**
     * Calling this function disables collision between two entities.
     * The importance of the order for entity1 and entity2 is unclear.
     * The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
     *
     * Hash: 0xA53ED5520C07654A | Since: 323
     */
    function setNoCollisionEntity(entity1, entity2, thisFrameOnly) {
        SetEntityNoCollisionEntity(entity1, entity2, thisFrameOnly);
    }
    entity_1.setNoCollisionEntity = setNoCollisionEntity;
    /**
     * No comment provided
     *
     * Hash: 0x79F020FF9EDC0748 | Since: 323
     */
    function setOnlyDamagedByPlayer(entity, toggle) {
        SetEntityOnlyDamagedByPlayer(entity, toggle);
    }
    entity_1.setOnlyDamagedByPlayer = setOnlyDamagedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x7022BD828FA0B082 | Since: 323
     */
    function setOnlyDamagedByRelationshipGroup(entity) {
        SetEntityOnlyDamagedByRelationshipGroup(entity, false, undefined);
    }
    entity_1.setOnlyDamagedByRelationshipGroup = setOnlyDamagedByRelationshipGroup;
    /**
     * Enable / disable each type of damage.
     *
     * waterProof is damage related to water not drowning
     * --------------
     * `p7 is to to '1' in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0->f_19, true, true, true, true, true, true, 1, true);`
     *
     *
     * Hash: 0xFAEE099C6F890BB8 | Since: 323
     */
    function setProofs(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, dontResetOnCleanup, waterProof) {
        SetEntityProofs(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, dontResetOnCleanup, waterProof);
    }
    entity_1.setProofs = setProofs;
    /**
     * w is the correct parameter name!
     *
     * Hash: 0x77B21BE7AC540F07 | Since: 323
     */
    function setQuaternion(entity, pos, w) {
        SetEntityQuaternion(entity, pos.x, pos.y, pos.z, w);
    }
    entity_1.setQuaternion = setQuaternion;
    /**
     * No comment provided
     *
     * Hash: 0x0A50A1EEDAD01E65 | Since: 323
     */
    function setRecordsCollisions(entity, toggle) {
        SetEntityRecordsCollisions(entity, toggle);
    }
    entity_1.setRecordsCollisions = setRecordsCollisions;
    /**
     * No comment provided
     *
     * Hash: 0x730F5F8D3F0F2050 | Since: 323
     */
    function setRenderScorched(entity, toggle) {
        SetEntityRenderScorched(entity, toggle);
    }
    entity_1.setRenderScorched = setRenderScorched;
    /**
     * No comment provided
     *
     * Hash: 0x694E00132F2823ED | Since: 323
     */
    function setRequiresMoreExpensiveRiverCheck(entity, toggle) {
        SetEntityRequiresMoreExpensiveRiverCheck(entity, toggle);
    }
    entity_1.setRequiresMoreExpensiveRiverCheck = setRequiresMoreExpensiveRiverCheck;
    /**
     * rotationOrder refers to the order yaw pitch roll is applied
     * value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.
     * Unsure what value corresponds to what rotation order, more testing will be needed for that.
     * For the most part R* uses 1 or 2 as the order.
     * p5 is usually set as true
     *
     *
     * Hash: 0x8524A8B0171D5E07 | Since: 323
     */
    function setRotation(entity, pitch, roll, yaw, rotationOrder) {
        SetEntityRotation(entity, pitch, roll, yaw, rotationOrder, false);
    }
    entity_1.setRotation = setRotation;
    /**
     * True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
     *
     * "Allow Freeze If No Collision"
     *
     * Hash: 0x3910051CCECDB00C | Since: 323
     */
    function setShouldFreezeWaitingOnCollision(entity, toggle) {
        SetEntityCleanupByEngine(entity, toggle);
    }
    entity_1.setShouldFreezeWaitingOnCollision = setShouldFreezeWaitingOnCollision;
    /**
     * Only called once in the scripts.
     *
     * Related to weapon objects.
     *
     *
     * Hash: 0x5C3B791D580E0BC2 | Since: 323
     */
    function setSortBias(entity) {
        Citizen.invokeNative('0x5C3B791D580E0BC2', entity, 0);
    }
    entity_1.setSortBias = setSortBias;
    /**
     * Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
     *
     * 0 = green
     * 1 = red
     * 2 = yellow
     * 3 = reset changes
     * changing lights may not change the behavior of vehicles
     *
     * Hash: 0x57C5DB656185EAC4 | Since: 323
     */
    function setTrafficlightOverride(entity, state) {
        SetEntityTrafficlightOverride(entity, state);
    }
    entity_1.setTrafficlightOverride = setTrafficlightOverride;
    /**
     * No comment provided
     *
     * Hash: 0x1A092BB0C3808B96 | Since: 323
     */
    function setUseMaxDistanceForWaterReflection(entity) {
        Citizen.invokeNative('0x1A092BB0C3808B96', entity, false);
    }
    entity_1.setUseMaxDistanceForWaterReflection = setUseMaxDistanceForWaterReflection;
    /**
     * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
     *
     * Hash: 0x1C99BB7B6E96D16F | Since: 323
     */
    function setVelocity(entity, pos) {
        SetEntityVelocity(entity, pos.x, pos.y, pos.z);
    }
    entity_1.setVelocity = setVelocity;
    /**
     * p2 is always 0.
     *
     * Hash: 0xEA1C610A04DB6BBB | Since: 323
     */
    function setVisible(entity, toggle) {
        SetEntityVisible(entity, toggle, false);
    }
    entity_1.setVisible = setVisible;
    /**
     * No comment provided
     *
     * Hash: 0xC34BC448DA29F5E9 | Since: 573
     */
    function setWaterReflectionFlag(entity, toggle) {
        Citizen.invokeNative('0xC34BC448DA29F5E9', entity, toggle);
    }
    entity_1.setWaterReflectionFlag = setWaterReflectionFlag;
    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x3AE22DEB5BA5A3E6 | Since: 323
     */
    function setObjectAsNoLongerNeeded(_object) {
        SetObjectAsNoLongerNeeded(_object);
    }
    entity_1.setObjectAsNoLongerNeeded = setObjectAsNoLongerNeeded;
    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x2595DD4236549CE3 | Since: 323
     */
    function setPedAsNoLongerNeeded(ped) {
        SetPedAsNoLongerNeeded(ped);
    }
    entity_1.setPedAsNoLongerNeeded = setPedAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0xCEA7C8E1B48FF68C | Since: 678
     */
    function setPickupCollidesWithProjectiles() {
        Citizen.invokeNative('0xCEA7C8E1B48FF68C', undefined, undefined);
    }
    entity_1.setPickupCollidesWithProjectiles = setPickupCollidesWithProjectiles;
    /**
     * No comment provided
     *
     * Hash: 0xD7B80E7C3BEFC396 | Since: 1180
     */
    function setPickUpByCargobobDisabled(entity, toggle) {
        SetPickUpByCargobobDisabled(entity, toggle);
    }
    entity_1.setPickUpByCargobobDisabled = setPickUpByCargobobDisabled;
    /**
     * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
     *
     * Hash: 0x629BFA74418D6239 | Since: 323
     */
    function setVehicleAsNoLongerNeeded(vehicle) {
        SetVehicleAsNoLongerNeeded(vehicle);
    }
    entity_1.setVehicleAsNoLongerNeeded = setVehicleAsNoLongerNeeded;
    /**
     * Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
     *
     * Ran after these 2 natives,
     * set_object_targettable(uParam0, 0);
     * set_entity_invincible(uParam0, 1);
     *
     * Hash: 0xDC6F8601FAF2E893 | Since: 323
     */
    function setWaitForCollisionsBeforeProbe(entity, toggle) {
        SetWaitForCollisionsBeforeProbe(entity, toggle);
    }
    entity_1.setWaitForCollisionsBeforeProbe = setWaitForCollisionsBeforeProbe;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
     *
     * Hash: 0x28004F88151E03E0 | Since: 323
     */
    function stopAnim(entity, animation, animGroup) {
        return StopEntityAnim(entity, animation, animGroup, 0);
    }
    entity_1.stopAnim = stopAnim;
    /**
     * No comment provided
     *
     * Hash: 0x43D3807C077261E3 | Since: 323
     */
    function stopSynchronizedAnim(entity) {
        return StopSynchronizedEntityAnim(entity, 0, false);
    }
    entity_1.stopSynchronizedAnim = stopSynchronizedAnim;
    /**
     * No comment provided
     *
     * Hash: 0x11E79CAB7183B6F5 | Since: 323
     */
    function stopSynchronizedMapAnim(x1, y1, z1, x2, y2, z2) {
        return StopSynchronizedMapEntityAnim(x1, y1, z1, x2, y2, z2);
    }
    entity_1.stopSynchronizedMapAnim = stopSynchronizedMapAnim;
    /**
     * No comment provided
     *
     * Hash: 0xEE5D2A122E09EC42 | Since: 323
     */
    function wouldBeOccluded(entityModelHash, pos) {
        if (typeof entityModelHash === 'string')
            entityModelHash = misc.getHashKey(entityModelHash);
        return WouldEntityBeOccluded(entityModelHash, pos.x, pos.y, pos.z, false);
    }
    entity_1.wouldBeOccluded = wouldBeOccluded;
    /**
     * No comment provided
     *
     * Hash: 0xA75EE4F689B85391 | Since: 2802
     */
    function getLastHitByEntity(entity) {
        return Citizen.invokeNative('0xA75EE4F689B85391', entity);
    }
    entity_1.getLastHitByEntity = getLastHitByEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0A27A7827347B3B1 | Since: 3407
     */
    function setNoCollisionWithNetworkedEntity(entity1, entity2) {
        Citizen.invokeNative('0x0A27A7827347B3B1', entity1, entity2);
    }
    entity_1.setNoCollisionWithNetworkedEntity = setNoCollisionWithNetworkedEntity;
})(entity || (entity = {}));
export var graphics;
(function (graphics) {
    /**
     * Loads a minimap overlay from a GFx file in the current resource.
     *
     * If you need to control the depth of overlay use [`ADD_MINIMAP_OVERLAY_WITH_DEPTH`](#\_0xED0935B5).
     *
     * Hash: 0x4AFD2499 | Since: unknown
     */
    function addMinimapOverlay(name) {
        return Citizen.invokeNative('0x4AFD2499', name);
    }
    graphics.addMinimapOverlay = addMinimapOverlay;
    /**
     * Loads a minimap overlay from a GFx file in the current resource.
     *
     * Hash: 0xED0935B5 | Since: unknown
     */
    function addMinimapOverlayWithDepth(name, depth) {
        return Citizen.invokeNative('0xED0935B5', name, depth);
    }
    graphics.addMinimapOverlayWithDepth = addMinimapOverlayWithDepth;
    /**
     * Experimental natives, please do not use in a live environment.
     *
     * Hash: 0xA66F8F75 | Since: unknown
     */
    function addReplaceTexture(origTxd, origTxn, newTxd, newTxn) {
        Citizen.invokeNative('0xA66F8F75', origTxd, origTxn, newTxd, newTxn);
    }
    graphics.addReplaceTexture = addReplaceTexture;
    /**
     * This is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay.
     *
     * Hash: 0x4C89C0ED | Since: unknown
     */
    function callMinimapScaleformFunction(miniMap, fnName) {
        return Citizen.invokeNative('0x4C89C0ED', miniMap, fnName);
    }
    graphics.callMinimapScaleformFunction = callMinimapScaleformFunction;
    /**
     * Commits the backing pixels to the specified runtime texture.
     *
     * Hash: 0x19D81F4E | Since: unknown
     */
    function commitRuntimeTexture(tex) {
        Citizen.invokeNative('0x19D81F4E', tex);
    }
    graphics.commitRuntimeTexture = commitRuntimeTexture;
    /**
     * Creates a blank runtime texture.
     *
     * Hash: 0xFEC3766D | Since: unknown
     */
    function createRuntimeTexture(txd, txn, width, height) {
        return Citizen.invokeNative('0xFEC3766D', txd, txn, width, height);
    }
    graphics.createRuntimeTexture = createRuntimeTexture;
    /**
     * Creates a runtime texture from a DUI handle.
     *
     * Hash: 0xB135472B | Since: unknown
     */
    function createRuntimeTextureFromDuiHandle(txd, txn, duiHandle) {
        return Citizen.invokeNative('0xB135472B', txd, txn, duiHandle);
    }
    graphics.createRuntimeTextureFromDuiHandle = createRuntimeTextureFromDuiHandle;
    /**
     * Creates a runtime texture from the specified file in the current resource or a base64 data URL.
     *
     * Hash: 0x786D8BC3 | Since: unknown
     */
    function createRuntimeTextureFromImage(txd, txn, fileName) {
        return Citizen.invokeNative('0x786D8BC3', txd, txn, fileName);
    }
    graphics.createRuntimeTextureFromImage = createRuntimeTextureFromImage;
    /**
     * Creates a runtime texture dictionary with the specified name.
     * Example:
     *
     * ```lua
     * local txd = CreateRuntimeTxd('meow')
     * ```
     *
     * Hash: 0x1F3AC778 | Since: unknown
     */
    function createRuntimeTxd(name) {
        return Citizen.invokeNative('0x1F3AC778', name);
    }
    graphics.createRuntimeTxd = createRuntimeTxd;
    /**
     * Allows drawing advanced light effects, known as coronas, which support flares, volumetric lighting, and customizable glow properties.
     *
     * Hash: 0xFF44780E | Since: unknown
     */
    function drawCorona(pos, size, red, green, blue, alpha, intensity, zBias, dirX, dirY, dirZ, viewThreshold, innerAngle, outerAngle, flags) {
        Citizen.invokeNative('0xFF44780E', pos.x, pos.y, pos.z, size, red, green, blue, alpha, intensity, zBias, dirX, dirY, dirZ, viewThreshold, innerAngle, outerAngle, flags);
    }
    graphics.drawCorona = drawCorona;
    /**
     * Draws a gizmo. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * This should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.
     *
     * Matrix layout is as follows:
     *
     * *   Element \[0], \[1] and \[2] should represent the right vector.
     * *   Element \[4], \[5] and \[6] should represent the forward vector.
     * *   Element \[8], \[9] and \[10] should represent the up vector.
     * *   Element \[12], \[13] and \[14] should represent X, Y and Z translation coordinates.
     * *   All other elements should be \[0, 0, 0, 1].
     *
     * Hash: 0xEB2EDCA2 | Since: unknown
     */
    function drawGizmo(matrixPtr, id) {
        return Citizen.invokeNative('0xEB2EDCA2', matrixPtr, id);
    }
    graphics.drawGizmo = drawGizmo;
    /**
     * Draw a glow sphere this frame. Up to 256 per single frame.
     *
     * Hash: 0xBD25EC89 | Since: unknown
     */
    function drawGlowSphere(pos, radius, colorR, colorG, colorB, intensity, invert, marker) {
        Citizen.invokeNative('0xBD25EC89', pos.x, pos.y, pos.z, radius, colorR, colorG, colorB, intensity, invert, marker);
    }
    graphics.drawGlowSphere = drawGlowSphere;
    /**
     * Like DRAW_RECT, but it's a line.
     *
     * Hash: 0xB856A90 | Since: unknown
     */
    function drawLine2d(x1, y1, x2, y2, width, r, g, b, a) {
        Citizen.invokeNative('0xB856A90', x1, y1, x2, y2, width, r, g, b, a);
    }
    graphics.drawLine2d = drawLine2d;
    /**
     * DRAW_RECT, but with a rotation. Seems to be broken.
     *
     * Hash: 0xEC37C168 | Since: unknown
     */
    function drawRectRotated(x, y, width, height, rotation, r, g, b, a) {
        Citizen.invokeNative('0xEC37C168', x, y, width, height, rotation, r, g, b, a);
    }
    graphics.drawRectRotated = drawRectRotated;
    /**
     * Forces the game snow pass to render.
     *
     * Hash: 0xE6E16170 | Since: unknown
     */
    function forceSnowPass(enabled) {
        Citizen.invokeNative('0xE6E16170', enabled);
    }
    graphics.forceSnowPass = forceSnowPass;
    /**
     * Returns the world position the pointer is hovering on the pause map.
     *
     * Hash: 0xE5AF7A82 | Since: unknown
     */
    function getPauseMapPointerWorldPosition() {
        return new Vector3(Citizen.invokeNative('0xE5AF7A82'));
    }
    graphics.getPauseMapPointerWorldPosition = getPauseMapPointerWorldPosition;
    /**
     * Gets the height of the specified runtime texture.
     *
     * Hash: 0x3574AACE | Since: unknown
     */
    function getRuntimeTextureHeight(tex) {
        return Citizen.invokeNative('0x3574AACE', tex);
    }
    graphics.getRuntimeTextureHeight = getRuntimeTextureHeight;
    /**
     * Gets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`.
     *
     * Hash: 0xCA0A085F | Since: unknown
     */
    function getRuntimeTexturePitch(tex) {
        return Citizen.invokeNative('0xCA0A085F', tex);
    }
    graphics.getRuntimeTexturePitch = getRuntimeTexturePitch;
    /**
     * Gets the width of the specified runtime texture.
     *
     * Hash: 0xC9F55558 | Since: unknown
     */
    function getRuntimeTextureWidth(tex) {
        return Citizen.invokeNative('0xC9F55558', tex);
    }
    graphics.getRuntimeTextureWidth = getRuntimeTextureWidth;
    /**
     * Returns whether or not the specific minimap overlay has loaded.
     *
     * Hash: 0xF7535F32 | Since: unknown
     */
    function hasMinimapOverlayLoaded(id) {
        return Citizen.invokeNative('0xF7535F32', id);
    }
    graphics.hasMinimapOverlayLoaded = hasMinimapOverlayLoaded;
    /**
     * Experimental natives, please do not use in a live environment.
     *
     * Hash: 0xA896B20A | Since: unknown
     */
    function removeReplaceTexture(origTxd, origTxn) {
        Citizen.invokeNative('0xA896B20A', origTxd, origTxn);
    }
    graphics.removeReplaceTexture = removeReplaceTexture;
    /**
     * This function undoes changes made by [`SET_ENTITY_DRAW_OUTLINE_RENDER_TECHNIQUE`](#\_0x68DFF2DD), restoring the original outline rendering behavior. The default render technique group is `unlit`.
     *
     * Hash: 0x8EB6EC38 | Since: unknown
     */
    function resetEntityDrawOutlineRenderTechnique() {
        Citizen.invokeNative('0x8EB6EC38');
    }
    graphics.resetEntityDrawOutlineRenderTechnique = resetEntityDrawOutlineRenderTechnique;
    /**
     * Draws an outline around a given entity. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x76180407 | Since: unknown
     */
    function setEntityDrawOutline(entity, enabled) {
        Citizen.invokeNative('0x76180407', entity, enabled);
    }
    graphics.setEntityDrawOutline = setEntityDrawOutline;
    /**
     * Sets color for entity outline. `255, 0, 255, 255` by default.
     *
     * Hash: 0xB41A56C2 | Since: unknown
     */
    function setEntityDrawOutlineColor(red, green, blue, alpha) {
        Citizen.invokeNative('0xB41A56C2', red, green, blue, alpha);
    }
    graphics.setEntityDrawOutlineColor = setEntityDrawOutlineColor;
    /**
     * Sets the render technique for drawing an entity's outline. This function allows you to specify a technique group name to control how the entity's outline is rendered in the game.
     *
     * List of known technique group's:
     *
     * ```
     * alt0
     * alt1
     * alt2
     * alt3
     * alt4
     * alt5
     * alt6
     * alt7
     * alt8
     * blit
     * cube
     * default
     * geometry
     * imposter
     * imposterdeferred
     * lightweight0
     * lightweight0CutOut
     * lightweight0CutOutTint
     * lightweight0WaterRefractionAlpha
     * lightweight4
     * lightweight4CutOut
     * lightweight4CutOutTint
     * lightweight4WaterRefractionAlpha
     * lightweight8
     * lightweight8CutOut
     * lightweight8CutOutTint
     * lightweight8WaterRefractionAlpha
     * lightweightHighQuality0
     * lightweightHighQuality0CutOut
     * lightweightHighQuality0WaterRefractionAlpha
     * lightweightHighQuality4
     * lightweightHighQuality4CutOut
     * lightweightHighQuality4WaterRefractionAlpha
     * lightweightHighQuality8
     * lightweightHighQuality8CutOut
     * lightweightHighQuality8WaterRefractionAlpha
     * lightweightNoCapsule4
     * lightweightNoCapsule8
     * multilight
     * tessellate
     * ui
     * unlit
     * waterreflection
     * waterreflectionalphaclip
     * waterreflectionalphacliptint
     * wdcascade
     * ```
     *
     * Hash: 0x68DFF2DD | Since: unknown
     */
    function setEntityDrawOutlineRenderTechnique(techniqueGroup) {
        Citizen.invokeNative('0x68DFF2DD', techniqueGroup);
    }
    graphics.setEntityDrawOutlineRenderTechnique = setEntityDrawOutlineRenderTechnique;
    /**
     * Sets variant of shader that will be used to draw entity outline.
     *
     * Variants are:
     *
     * *   **0**: Default value, gauss shader.
     * *   **1**: 2px wide solid color outline.
     * *   **2**: Fullscreen solid color except for entity.
     *
     * Hash: 0x5261A01A | Since: unknown
     */
    function setEntityDrawOutlineShader(shader) {
        Citizen.invokeNative('0x5261A01A', shader);
    }
    graphics.setEntityDrawOutlineShader = setEntityDrawOutlineShader;
    /**
     * This completely disables rendering of fog volumes (vfxfogvolumeinfo.ymt).
     *
     * Hash: 0xFBC64DA3 | Since: unknown
     */
    function setFogVolumeRenderDisabled(state) {
        Citizen.invokeNative('0xFBC64DA3', state);
    }
    graphics.setFogVolumeRenderDisabled = setFogVolumeRenderDisabled;
    /**
     * Sets the type for the minimap blip clipping object to be either rectangular or rounded.
     *
     * Hash: 0xB8B4490C | Since: unknown
     */
    function setMinimapClipType(_type) {
        Citizen.invokeNative('0xB8B4490C', _type);
    }
    graphics.setMinimapClipType = setMinimapClipType;
    /**
     * Overrides the minimap component data (from `common:/data/ui/frontend.xml`) for a specified component.
     *
     * Hash: 0x3E882B23 | Since: unknown
     */
    function setMinimapComponentPosition(name, alignX, alignY, posX, posY, sizeX, sizeY) {
        Citizen.invokeNative('0x3E882B23', name, alignX, alignY, posX, posY, sizeX, sizeY);
    }
    graphics.setMinimapComponentPosition = setMinimapComponentPosition;
    /**
     * Sets the display info for a minimap overlay.
     *
     * Hash: 0x6A48B3CA | Since: unknown
     */
    function setMinimapOverlayDisplay(miniMap, x, y, xScale, yScale, alpha) {
        Citizen.invokeNative('0x6A48B3CA', miniMap, x, y, xScale, yScale, alpha);
    }
    graphics.setMinimapOverlayDisplay = setMinimapOverlayDisplay;
    /**
     * No comment provided
     *
     * Hash: 0x3963D527 | Since: unknown
     */
    function setRuntimeTextureArgbData(tex, buffer, length) {
        return Citizen.invokeNative('0x3963D527', tex, buffer, length);
    }
    graphics.setRuntimeTextureArgbData = setRuntimeTextureArgbData;
    /**
     * Replaces the pixel data in a runtime texture with the image data from a file in the current resource, or a data URL.
     *
     * If the bitmap is a different size compared to the existing texture, it will be resampled.
     *
     * This command may end up executed asynchronously, and only update the texture data at a later time.
     *
     * Hash: 0x28FC4ECB | Since: unknown
     */
    function setRuntimeTextureImage(tex, fileName) {
        return Citizen.invokeNative('0x28FC4ECB', tex, fileName);
    }
    graphics.setRuntimeTextureImage = setRuntimeTextureImage;
    /**
     * Sets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect.
     *
     * Hash: 0xAB65ACEE | Since: unknown
     */
    function setRuntimeTexturePixel(tex, x, y, r, g, b, a) {
        Citizen.invokeNative('0xAB65ACEE', tex, x, y, r, g, b, a);
    }
    graphics.setRuntimeTexturePixel = setRuntimeTexturePixel;
    /**
     * Modifies the radius scale used in the simulation of wet cloth physics.
     * This affects how cloth behaves when wet, changing how it sticks or reacts to movement.
     *
     * Hash: 0xF1BD2CEF | Since: unknown
     */
    function setWetClothPinRadiusScale(scale) {
        Citizen.invokeNative('0xF1BD2CEF', scale);
    }
    graphics.setWetClothPinRadiusScale = setWetClothPinRadiusScale;
    /**
     * Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\_0xE10198D5) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\_0xE10198D5) for further information.
     *
     * Hash: 0xDD76B263 | Since: unknown
     */
    function clearDrawOrigin() {
        Citizen.invokeNative('0xDD76B263');
    }
    graphics.clearDrawOrigin = clearDrawOrigin;
    /**
     * In compare to `0x31DC8D3F216D8509` return true if texture its created when `0x31DC8D3F216D8509` return true if you put there any id in valid range
     *
     * Hash: 0x8B25BC20 | Since: unknown
     */
    function doesTextureExist(textureId) {
        return Citizen.invokeNative('0x8B25BC20', textureId);
    }
    graphics.doesTextureExist = doesTextureExist;
    /**
     * No comment provided
     *
     * Hash: 0xCD4D9DD5 | Since: unknown
     */
    function drawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
        Citizen.invokeNative('0xCD4D9DD5', x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }
    graphics.drawBox = drawBox;
    /**
     * No comment provided
     *
     * Hash: 0xB3426BCC | Since: unknown
     */
    function drawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
        Citizen.invokeNative('0xB3426BCC', x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }
    graphics.drawLine = drawLine;
    /**
     * No comment provided
     *
     * Hash: 0xABD19253 | Since: unknown
     */
    function drawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha) {
        Citizen.invokeNative('0xABD19253', x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
    }
    graphics.drawPoly = drawPoly;
    /**
     * Gets the current aspect ratio
     *
     * ```lua
     * local ratio = GetAspectRatio()
     * print(string.format("%.2f", ratio))
     * ```
     *
     * Hash: 0x2CA8F641 | Since: unknown
     */
    function getAspectRatio() {
        return Citizen.invokeNative('0x2CA8F641');
    }
    graphics.getAspectRatio = getAspectRatio;
    /**
     * Gets the current screen resolution.
     *
     * ```lua
     * local  width, height = GetCurrentScreenResolution()
     * print(string.format("Current screen resolution: %dx%d", width, height))
     *
     * ```
     *
     * Hash: 0x337F0116 | Since: unknown
     */
    function getCurrentScreenResolution() {
        return Citizen.invokeNative('0x337F0116');
    }
    graphics.getCurrentScreenResolution = getCurrentScreenResolution;
    /**
     * Removes the specified texture and remove it from the ped.
     * Unlike `0x6BEFAA907B076859` which only marks the texture as "can be reused" (and keeps it until will be reused), this function deletes it right away. Can fix some sync issues. `DOES_TEXTURE_EXIST` can be use to wait until fully unloaded by game
     *
     * ```lua
     * RemoveTexture(textureId)
     * while DoesTextureExist(textureId) do
     * Wait(0)
     * end
     * ```
     *
     * Hash: 0x1582C7F2 | Since: unknown
     */
    function removeTexture(textureId) {
        Citizen.invokeNative('0x1582C7F2', textureId);
    }
    graphics.removeTexture = removeTexture;
    /**
     * Sets the on-screen drawing origin for draw-functions in world coordinates.
     *
     * The effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\_0xDD76B263) and is limited to 32 different origins each frame.
     *
     * Hash: 0xE10198D5 | Since: unknown
     */
    function setDrawOrigin(pos, is2d) {
        Citizen.invokeNative('0xE10198D5', pos.x, pos.y, pos.z, is2d);
    }
    graphics.setDrawOrigin = setDrawOrigin;
    /**
     * Sets the text font for the current text drawing command.
     *
     * Hash: 0xADA9255D | Since: unknown
     */
    function setTextFontForCurrentCommand(fontId) {
        Citizen.invokeNative('0xADA9255D', fontId);
    }
    graphics.setTextFontForCurrentCommand = setTextFontForCurrentCommand;
    /**
     * No comment provided
     *
     * Hash: 0x68CDFA60 | Since: unknown
     */
    function setTextJustification(justifyType) {
        Citizen.invokeNative('0x68CDFA60', justifyType);
    }
    graphics.setTextJustification = setTextJustification;
    /**
     * No comment provided
     *
     * Hash: 0x6F60AB54 | Since: unknown
     */
    function setTextWrap(start, end) {
        Citizen.invokeNative('0x6F60AB54', start, end);
    }
    graphics.setTextWrap = setTextWrap;
    /**
     * A getter for [SET_VISUAL_SETTING_FLOAT](#\_0xD1D31681).
     *
     * Hash: 0x15346B4D | Since: unknown
     */
    function getVisualSettingFloat(name) {
        return Citizen.invokeNative('0x15346B4D', name);
    }
    graphics.getVisualSettingFloat = getVisualSettingFloat;
    /**
     * Overrides a floating point value from `visualsettings.dat` temporarily.
     *
     * Hash: 0xD1D31681 | Since: unknown
     */
    function setVisualSettingFloat(name, value) {
        Citizen.invokeNative('0xD1D31681', name, value);
    }
    graphics.setVisualSettingFloat = setVisualSettingFloat;
    /**
     * No comment provided
     *
     * Hash: 0x82ACC484FFA3B05F | Since: 372
     */
    function abortVehicleCrewEmblemRequest() {
        return Citizen.invokeNative('0x82ACC484FFA3B05F');
    }
    graphics.abortVehicleCrewEmblemRequest = abortVehicleCrewEmblemRequest;
    /**
     * decal types:
     *
     * public enum DecalTypes
     * {
     * splatters_blood = 1010,
     * splatters_blood_dir = 1015,
     * splatters_blood_mist = 1017,
     * splatters_mud = 1020,
     * splatters_paint = 1030,
     * splatters_water = 1040,
     * splatters_water_hydrant = 1050,
     * splatters_blood2 = 1110,
     * weapImpact_metal = 4010,
     * weapImpact_concrete = 4020,
     * weapImpact_mattress = 4030,
     * weapImpact_mud = 4032,
     * weapImpact_wood = 4050,
     * weapImpact_sand = 4053,
     * weapImpact_cardboard = 4040,
     * weapImpact_melee_glass = 4100,
     * weapImpact_glass_blood = 4102,
     * weapImpact_glass_blood2 = 4104,
     * weapImpact_shotgun_paper = 4200,
     * weapImpact_shotgun_mattress,
     * weapImpact_shotgun_metal,
     * weapImpact_shotgun_wood,
     * weapImpact_shotgun_dirt,
     * weapImpact_shotgun_tvscreen,
     * weapImpact_shotgun_tvscreen2,
     * weapImpact_shotgun_tvscreen3,
     * weapImpact_melee_concrete = 4310,
     * weapImpact_melee_wood = 4312,
     * weapImpact_melee_metal = 4314,
     * burn1 = 4421,
     * burn2,
     * burn3,
     * burn4,
     * burn5,
     * bang_concrete_bang = 5000,
     * bang_concrete_bang2,
     * bang_bullet_bang,
     * bang_bullet_bang2 = 5004,
     * bang_glass = 5031,
     * bang_glass2,
     * solidPool_water = 9000,
     * solidPool_blood,
     * solidPool_oil,
     * solidPool_petrol,
     * solidPool_mud,
     * porousPool_water,
     * porousPool_blood,
     * porousPool_oil,
     * porousPool_petrol,
     * porousPool_mud,
     * porousPool_water_ped_drip,
     * liquidTrail_water = 9050
     * }
     *
     * Hash: 0xB302244A1839BDAD | Since: 323
     */
    function addDecal(decalType, pos, width, height, rCoef, gCoef, bCoef, opacity, timeout) {
        return AddDecal(decalType, pos.x, pos.y, pos.z, 0, 0, 0, 0, 0, 0, width, height, rCoef, gCoef, bCoef, opacity, timeout, false, false, false);
    }
    graphics.addDecal = addDecal;
    /**
     * Example:
     * `GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");`
     *
     * I tried this and nothing happened...
     *
     * Hash: 0x9CD43EEE12BF4DD0 | Since: 323
     */
    function addEntityIcon(entity, icon) {
        return AddEntityIcon(entity, icon);
    }
    graphics.addEntityIcon = addEntityIcon;
    /**
     * No comment provided
     *
     * Hash: 0x126D7F89FE859A5E | Since: 2699
     */
    function addOilDecal(pos, groundLvl, width, transparency) {
        return AddOilDecal(pos.x, pos.y, pos.z, groundLvl, width, transparency);
    }
    graphics.addOilDecal = addOilDecal;
    /**
     * No comment provided
     *
     * Hash: 0x4F5212C7AD880DF8 | Since: 323
     */
    function addPetrolDecal(pos, groundLvl, width, transparency) {
        return AddPetrolDecal(pos.x, pos.y, pos.z, groundLvl, width, transparency);
    }
    graphics.addPetrolDecal = addPetrolDecal;
    /**
     * No comment provided
     *
     * Hash: 0x967278682CB6967A | Since: 323
     */
    function addPetrolTrailDecalInfo(pos) {
        AddPetrolTrailDecalInfo(pos.x, pos.y, pos.z, 0);
    }
    graphics.addPetrolTrailDecalInfo = addPetrolTrailDecalInfo;
    /**
     * No comment provided
     *
     * Hash: 0x1A8E2C8B9CF4549C | Since: 323
     */
    function addTcmodifierOverride(modifierName1, modifierName2) {
        AddTcmodifierOverride(modifierName1, modifierName2);
    }
    graphics.addTcmodifierOverride = addTcmodifierOverride;
    /**
     * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
     *
     * Hash: 0x428BDCB9DA58DA53 | Since: 323
     */
    function addVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, alpha) {
        return AddVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, undefined, alpha);
    }
    graphics.addVehicleCrewEmblem = addVehicleCrewEmblem;
    /**
     * No comment provided
     *
     * Hash: 0xEFABC7722293DA7C | Since: 323
     */
    function adjustNextPosSizeAsNormalized169() {
        Citizen.invokeNative('0xEFABC7722293DA7C');
    }
    graphics.adjustNextPosSizeAsNormalized169 = adjustNextPosSizeAsNormalized169;
    /**
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0xE35B38A27E8E7179 | Since: 877
     */
    function animpostfxGetCurrentTime(effectName) {
        return AnimpostfxGetUnk(effectName);
    }
    graphics.animpostfxGetCurrentTime = animpostfxGetCurrentTime;
    /**
     * Returns whether the specified effect is active.
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0x36AD3E690DA5ACEB | Since: 323
     */
    function animpostfxIsRunning(effectName) {
        return AnimpostfxIsRunning(effectName);
    }
    graphics.animpostfxIsRunning = animpostfxIsRunning;
    /**
     * duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
     * if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0x2206BF9A37B7F724 | Since: 323
     */
    function animpostfxPlay(effectName, duration, looped) {
        AnimpostfxPlay(effectName, duration, looped);
    }
    graphics.animpostfxPlay = animpostfxPlay;
    /**
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0x068E835A1D0DC0E3 | Since: 323
     */
    function animpostfxStop(effectName) {
        AnimpostfxStop(effectName);
    }
    graphics.animpostfxStop = animpostfxStop;
    /**
     * Stops ALL currently playing effects.
     *
     * Hash: 0xB4EDDC19532BFB85 | Since: 323
     */
    function animpostfxStopAll() {
        AnimpostfxStopAll();
    }
    graphics.animpostfxStopAll = animpostfxStopAll;
    /**
     * Stops the effect and sets a value (bool) in its data (+0x199) to false.
     * See ANIMPOSTFX_PLAY
     *
     * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
     *
     * Hash: 0xD2209BE128B5418C | Since: 323
     */
    function animpostfxStopAndFlushRequests(effectName) {
        AnimpostfxStopAndDoUnk(effectName);
    }
    graphics.animpostfxStopAndFlushRequests = animpostfxStopAndFlushRequests;
    /**
     * No comment provided
     *
     * Hash: 0x845BAD77CC770633 | Since: 323
     */
    function attachTvAudioToEntity(entity) {
        AttachTvAudioToEntity(entity);
    }
    graphics.attachTvAudioToEntity = attachTvAudioToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x759650634F07B6B4 | Since: 323
     */
    function beginCreateLowQualityCopyOfPhoto() {
        return Citizen.invokeNative('0x759650634F07B6B4', undefined);
    }
    graphics.beginCreateLowQualityCopyOfPhoto = beginCreateLowQualityCopyOfPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x7FA5D82B8F58EC06 | Since: 323
     */
    function beginCreateMissionCreatorPhotoPreview() {
        return Citizen.invokeNative('0x7FA5D82B8F58EC06');
    }
    graphics.beginCreateMissionCreatorPhotoPreview = beginCreateMissionCreatorPhotoPreview;
    /**
     * Push a function from the Scaleform onto the stack
     *
     *
     * Hash: 0xF6E48914C7A8694E | Since: 323
     */
    function beginScaleformMovieMethod(scaleform, methodName) {
        return BeginScaleformMovieMethod(scaleform, methodName);
    }
    graphics.beginScaleformMovieMethod = beginScaleformMovieMethod;
    /**
     * Starts frontend (pause menu) scaleform movie methods.
     * This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
     * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
     *
     * Hash: 0xAB58C27C2E6123C6 | Since: 323
     */
    function beginScaleformMovieMethodOnFrontend(methodName) {
        return BeginScaleformMovieMethodOnFrontend(methodName);
    }
    graphics.beginScaleformMovieMethodOnFrontend = beginScaleformMovieMethodOnFrontend;
    /**
     * Starts frontend (pause menu) scaleform movie methods for header options.
     * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
     *
     * Hash: 0xB9449845F73F5E9C | Since: 323
     */
    function beginScaleformMovieMethodOnFrontendHeader(methodName) {
        return BeginScaleformMovieMethodOnFrontendHeader(methodName);
    }
    graphics.beginScaleformMovieMethodOnFrontendHeader = beginScaleformMovieMethodOnFrontendHeader;
    /**
     * `Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.`
     *
     * Known components:
     * 19 - MP_RANK_BAR
     * 20 - HUD_DIRECTOR_MODE
     *
     * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
     *
     * Hash: 0x98C494FD5BDFBFD5 | Since: 323
     */
    function beginScaleformScriptHudMovieMethod(hudComponent, methodName) {
        return BeginScaleformScriptHudMovieMethod(hudComponent, methodName);
    }
    graphics.beginScaleformScriptHudMovieMethod = beginScaleformScriptHudMovieMethod;
    /**
     * No comment provided
     *
     * Hash: 0xA67C35C56EB1BD9D | Since: 323
     */
    function beginTakeHighQualityPhoto() {
        return BeginTakeHighQualityPhoto();
    }
    graphics.beginTakeHighQualityPhoto = beginTakeHighQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x1DD2139A9A20DCE8 | Since: 323
     */
    function beginTakeMissionCreatorPhoto() {
        return BeginTakeMissionCreatorPhoto();
    }
    graphics.beginTakeMissionCreatorPhoto = beginTakeMissionCreatorPhoto;
    /**
     * `Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.`
     *
     * Examples:
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");`
     * `HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);`
     * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
     *
     * Hash: 0x80338406F3475E55 | Since: 323
     */
    function beginTextCommandScaleformString(componentType) {
        BeginTextCommandScaleformString(componentType);
    }
    graphics.beginTextCommandScaleformString = beginTextCommandScaleformString;
    /**
     * Calls the Scaleform function.
     *
     * Hash: 0xFBD96D87AC96D533 | Since: 323
     */
    function callScaleformMovieMethod(scaleform, method) {
        CallScaleformMovieMethod(scaleform, method);
    }
    graphics.callScaleformMovieMethod = callScaleformMovieMethod;
    /**
     * Calls the Scaleform function and passes the parameters as floats.
     *
     * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
     *
     * Hash: 0xD0837058AE2E4BEE | Since: 323
     */
    function callScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5) {
        CallScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5);
    }
    graphics.callScaleformMovieMethodWithNumber = callScaleformMovieMethodWithNumber;
    /**
     * Calls the Scaleform function and passes both float and string parameters (in their respective order).
     *
     * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
     *
     * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
     *
     * Examples:
     * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
     * `GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);`
     *
     * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
     * `GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);`
     *
     * Hash: 0xEF662D8D57E290B1 | Since: 323
     */
    function callScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5) {
        CallScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
    }
    graphics.callScaleformMovieMethodWithNumberAndString = callScaleformMovieMethodWithNumberAndString;
    /**
     * Calls the Scaleform function and passes the parameters as strings.
     *
     * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
     *
     * Hash: 0x51BC1ED3CC44E8F7 | Since: 323
     */
    function callScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5) {
        CallScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5);
    }
    graphics.callScaleformMovieMethodWithString = callScaleformMovieMethodWithString;
    /**
     * No comment provided
     *
     * Hash: 0x27CB772218215325 | Since: 323
     */
    function cascadeShadowsClearShadowSampleType() {
        CascadeShadowsClearShadowSampleType();
    }
    graphics.cascadeShadowsClearShadowSampleType = cascadeShadowsClearShadowSampleType;
    /**
     * When this is set to ON, shadows only draw as you get nearer.
     *
     * When OFF, they draw from a further distance.
     *
     * Hash: 0x80ECBC0C856D3B0B | Since: 323
     */
    function cascadeShadowsEnableEntityTracker(toggle) {
        CascadeShadowsEnableEntityTracker(toggle);
    }
    graphics.cascadeShadowsEnableEntityTracker = cascadeShadowsEnableEntityTracker;
    /**
     * No comment provided
     *
     * Hash: 0x0AE73D8DF3A762B2 | Since: 323
     */
    function cascadeShadowsEnableFreezer() {
        Citizen.invokeNative('0x0AE73D8DF3A762B2', false);
    }
    graphics.cascadeShadowsEnableFreezer = cascadeShadowsEnableFreezer;
    /**
     * No comment provided
     *
     * Hash: 0x03FC694AE06C5A20 | Since: 323
     */
    function cascadeShadowsInitSession() {
        CascadeShadowsInitSession();
    }
    graphics.cascadeShadowsInitSession = cascadeShadowsInitSession;
    /**
     * No comment provided
     *
     * Hash: 0x6DDBF9DFFC4AC080 | Since: 323
     */
    function cascadeShadowsSetAircraftMode() {
        CascadeShadowsSetAircraftMode(false);
    }
    graphics.cascadeShadowsSetAircraftMode = cascadeShadowsSetAircraftMode;
    /**
     * No comment provided
     *
     * Hash: 0x259BA6D4E6F808F1 | Since: 1011
     */
    function cascadeShadowsSetBoundPosition() {
        Citizen.invokeNative('0x259BA6D4E6F808F1', undefined);
    }
    graphics.cascadeShadowsSetBoundPosition = cascadeShadowsSetBoundPosition;
    /**
     * No comment provided
     *
     * Hash: 0xD2936CAB8B58FCBD | Since: 323
     */
    function cascadeShadowsSetCascadeBounds() {
        CascadeShadowsSetCascadeBounds(undefined, false, 0, 0, 0, 0, false, 0);
    }
    graphics.cascadeShadowsSetCascadeBounds = cascadeShadowsSetCascadeBounds;
    /**
     * No comment provided
     *
     * Hash: 0x5F0F3F56635809EF | Since: 323
     */
    function cascadeShadowsSetCascadeBoundsScale() {
        CascadeShadowsSetCascadeBoundsScale(0);
    }
    graphics.cascadeShadowsSetCascadeBoundsScale = cascadeShadowsSetCascadeBoundsScale;
    /**
     * No comment provided
     *
     * Hash: 0xD39D13C9FEBF0511 | Since: 323
     */
    function cascadeShadowsSetDynamicDepthMode() {
        CascadeShadowsSetDynamicDepthMode(false);
    }
    graphics.cascadeShadowsSetDynamicDepthMode = cascadeShadowsSetDynamicDepthMode;
    /**
     * No comment provided
     *
     * Hash: 0x02AC28F3A01FA04A | Since: 323
     */
    function cascadeShadowsSetDynamicDepthValue() {
        CascadeShadowsSetDynamicDepthValue(0);
    }
    graphics.cascadeShadowsSetDynamicDepthValue = cascadeShadowsSetDynamicDepthValue;
    /**
     * No comment provided
     *
     * Hash: 0x5E9DAF5A20F15908 | Since: 323
     */
    function cascadeShadowsSetEntityTrackerScale() {
        CascadeShadowsSetEntityTrackerScale(0);
    }
    graphics.cascadeShadowsSetEntityTrackerScale = cascadeShadowsSetEntityTrackerScale;
    /**
     * No comment provided
     *
     * Hash: 0x25FC3E33A31AD0C9 | Since: 323
     */
    function cascadeShadowsSetScreenSizeCheckEnabled() {
        Citizen.invokeNative('0x25FC3E33A31AD0C9', false);
    }
    graphics.cascadeShadowsSetScreenSizeCheckEnabled = cascadeShadowsSetScreenSizeCheckEnabled;
    /**
     * Possible values:
     * "CSM_ST_POINT"
     * "CSM_ST_LINEAR"
     * "CSM_ST_TWOTAP"
     * "CSM_ST_BOX3x3"
     * "CSM_ST_BOX4x4"
     * "CSM_ST_DITHER2_LINEAR"
     * "CSM_ST_CUBIC"
     * "CSM_ST_DITHER4"
     * "CSM_ST_DITHER16"
     * "CSM_ST_SOFT16"
     * "CSM_ST_DITHER16_RPDB"
     * "CSM_ST_POISSON16_RPDB_GNORM"
     * "CSM_ST_HIGHRES_BOX4x4"
     * "CSM_ST_CLOUDS_SIMPLE"
     * "CSM_ST_CLOUDS_LINEAR"
     * "CSM_ST_CLOUDS_TWOTAP"
     * "CSM_ST_CLOUDS_BOX3x3"
     * "CSM_ST_CLOUDS_BOX4x4"
     * "CSM_ST_CLOUDS_DITHER2_LINEAR"
     * "CSM_ST_CLOUDS_SOFT16"
     * "CSM_ST_CLOUDS_DITHER16_RPDB"
     * "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
     *
     * Hash: 0xB11D94BC55F41932 | Since: 323
     */
    function cascadeShadowsSetShadowSampleType(_type) {
        CascadeShadowsSetShadowSampleType(_type);
    }
    graphics.cascadeShadowsSetShadowSampleType = cascadeShadowsSetShadowSampleType;
    /**
     * No comment provided
     *
     * Hash: 0x36F6626459D91457 | Since: 323
     */
    function cascadeShadowsSetSplitZExpWeight() {
        Citizen.invokeNative('0x36F6626459D91457', 0);
    }
    graphics.cascadeShadowsSetSplitZExpWeight = cascadeShadowsSetSplitZExpWeight;
    /**
     * No comment provided
     *
     * Hash: 0x15E33297C3E8DC60 | Since: 323
     */
    function clearAllTcmodifierOverrides() {
        RemoveTcmodifierOverride(undefined);
    }
    graphics.clearAllTcmodifierOverrides = clearAllTcmodifierOverrides;
    /**
     * `Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.`
     *
     * `See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.`
     *
     * Hash: 0xFF0B610F6BE0D7AF | Since: 323
     */
    function clearDrawOrigin() {
        ClearDrawOrigin();
    }
    graphics.clearDrawOrigin = clearDrawOrigin;
    /**
     * Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
     *
     * Hash: 0x92CCC17A7A2285DA | Since: 323
     */
    function clearExtraTcmodifier() {
        ClearExtraTimecycleModifier();
    }
    graphics.clearExtraTcmodifier = clearExtraTcmodifier;
    /**
     * No comment provided
     *
     * Hash: 0x2A251AA48B2B46DB | Since: 323
     */
    function clearParticleFxShootoutBoat() {
        Citizen.invokeNative('0x2A251AA48B2B46DB');
    }
    graphics.clearParticleFxShootoutBoat = clearParticleFxShootoutBoat;
    /**
     * No comment provided
     *
     * Hash: 0x4AF92ACD3141D96C | Since: 323
     */
    function clearStatusOfSortedListOperation() {
        Citizen.invokeNative('0x4AF92ACD3141D96C');
    }
    graphics.clearStatusOfSortedListOperation = clearStatusOfSortedListOperation;
    /**
     * No comment provided
     *
     * Hash: 0x0F07E7745A236711 | Since: 323
     */
    function clearTimecycleModifier() {
        ClearTimecycleModifier();
    }
    graphics.clearTimecycleModifier = clearTimecycleModifier;
    /**
     * No comment provided
     *
     * Hash: 0xBEB3D46BB7F043C0 | Since: 323
     */
    function clearTvChannelPlaylist(tvChannel) {
        ClearTvChannelPlaylist(tvChannel);
    }
    graphics.clearTvChannelPlaylist = clearTvChannelPlaylist;
    /**
     * Creates a checkpoint. Returns the handle of the checkpoint.
     *
     * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
     *
     * Parameters:
     * * type - The type of checkpoint to create. See below for a list of checkpoint types.
     * * pos1 - The position of the checkpoint.
     * * pos2 - The position of the next checkpoint to point to.
     * * radius - The radius of the checkpoint.
     * * color - The color of the checkpoint.
     * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
     *
     * Checkpoint types:
     * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
     * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
     * 39----------?
     * 40----------Ring: just a ring
     * 41----------?
     * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
     * 45-47-------Cylinder no arrow or number
     *
     * If using type 42-44, reserved sets number / number and shape to display
     *
     * 0-99------------Just numbers (0-99)
     * 100-109-----------------Arrow (0-9)
     * 110-119------------Two arrows (0-9)
     * 120-129----------Three arrows (0-9)
     * 130-139----------------Circle (0-9)
     * 140-149------------CycleArrow (0-9)
     * 150-159----------------Circle (0-9)
     * 160-169----Circle  w/ pointer (0-9)
     * 170-179-------Perforated ring (0-9)
     * 180-189----------------Sphere (0-9)
     *
     * Hash: 0x0134F0835AB6BFCB | Since: 323
     */
    function createCheckpoint(_type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved) {
        return CreateCheckpoint(_type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);
    }
    graphics.createCheckpoint = createCheckpoint;
    /**
     * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
     *
     * Hash: 0xE2C9439ED45DEA60 | Since: 323
     */
    function createTrackedPoint() {
        return CreateTrackedPoint();
    }
    graphics.createTrackedPoint = createTrackedPoint;
    /**
     * No comment provided
     *
     * Hash: 0xF5ED37F54CD4D52E | Since: 323
     */
    function deleteCheckpoint(checkpoint) {
        DeleteCheckpoint(checkpoint);
    }
    graphics.deleteCheckpoint = deleteCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0xB25DC90BAD56CA42 | Since: 323
     */
    function destroyTrackedPoint(point) {
        DestroyTrackedPoint(point);
    }
    graphics.destroyTrackedPoint = destroyTrackedPoint;
    /**
     * No comment provided
     *
     * Hash: 0x0E4299C549F0D1F1 | Since: 323
     */
    function disableCompositeShotgunDecals(toggle) {
        Citizen.invokeNative('0x0E4299C549F0D1F1', toggle);
    }
    graphics.disableCompositeShotgunDecals = disableCompositeShotgunDecals;
    /**
     * No comment provided
     *
     * Hash: 0x5F6DF3D92271E8A1 | Since: 323
     */
    function disableDownwashPtfx(toggle) {
        Citizen.invokeNative('0x5F6DF3D92271E8A1', toggle);
    }
    graphics.disableDownwashPtfx = disableDownwashPtfx;
    /**
     * No comment provided
     *
     * Hash: 0xC35A6D07C93802B2 | Since: 323
     */
    function disableHdtexThisFrame() {
        Citizen.invokeNative('0xC35A6D07C93802B2');
    }
    graphics.disableHdtexThisFrame = disableHdtexThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xCFD16F0DB5A3535C | Since: 2060
     */
    function disableInWaterPtfx(toggle) {
        Citizen.invokeNative('0xCFD16F0DB5A3535C', toggle);
    }
    graphics.disableInWaterPtfx = disableInWaterPtfx;
    /**
     * Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
     *
     * Hash: 0x2BF72AD5B41AA739 | Since: 323
     */
    function disableMoonCycleOverride() {
        DisableMoonCycleOverride();
    }
    graphics.disableMoonCycleOverride = disableMoonCycleOverride;
    /**
     * No comment provided
     *
     * Hash: 0x3669F1B198DCAA4F | Since: 323
     */
    function disableOcclusionThisFrame() {
        DisableOcclusionThisFrame();
    }
    graphics.disableOcclusionThisFrame = disableOcclusionThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x1612C45F9E3E0D44 | Since: 323
     */
    function disableProcobjCreation() {
        Citizen.invokeNative('0x1612C45F9E3E0D44');
    }
    graphics.disableProcobjCreation = disableProcobjCreation;
    /**
     * No comment provided
     *
     * Hash: 0xEFD97FF47B745B8D | Since: 791
     */
    function disableRegionVfx() {
        DisableScriptAmbientEffects(undefined);
    }
    graphics.disableRegionVfx = disableRegionVfx;
    /**
     * No comment provided
     *
     * Hash: 0xDE81239437E8C5A8 | Since: 323
     */
    function disableScreenblurFade() {
        DisableScreenblurFade();
    }
    graphics.disableScreenblurFade = disableScreenblurFade;
    /**
     * No comment provided
     *
     * Hash: 0x02369D5C8A51FDCF | Since: 323
     */
    function disableScuffDecals(toggle) {
        Citizen.invokeNative('0x02369D5C8A51FDCF', toggle);
    }
    graphics.disableScuffDecals = disableScuffDecals;
    /**
     * No comment provided
     *
     * Hash: 0xC9F98AC1884E73A2 | Since: 323
     */
    function disableVehicleDistantlights(toggle) {
        DisableVehicleDistantlights(toggle);
    }
    graphics.disableVehicleDistantlights = disableVehicleDistantlights;
    /**
     * No comment provided
     *
     * Hash: 0x5E657EF1099EDD65 | Since: 323
     */
    function doesLatestBriefStringExist() {
        return DoesLatestBriefStringExist(0);
    }
    graphics.doesLatestBriefStringExist = doesLatestBriefStringExist;
    /**
     * No comment provided
     *
     * Hash: 0x74AFEF0D2E1E409B | Since: 323
     */
    function doesParticleFxLoopedExist(ptfxHandle) {
        return DoesParticleFxLoopedExist(ptfxHandle);
    }
    graphics.doesParticleFxLoopedExist = doesParticleFxLoopedExist;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xE791DF1F73ED2C8B | Since: 323
     */
    function doesThisPhotoSlotContainAValidPhoto() {
        return Citizen.invokeNative('0xE791DF1F73ED2C8B', undefined);
    }
    graphics.doesThisPhotoSlotContainAValidPhoto = doesThisPhotoSlotContainAValidPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x060D935D3981A275 | Since: 323
     */
    function doesVehicleHaveCrewEmblem(vehicle) {
        return DoesVehicleHaveCrewEmblem(vehicle, 0);
    }
    graphics.doesVehicleHaveCrewEmblem = doesVehicleHaveCrewEmblem;
    /**
     * No comment provided
     *
     * Hash: 0x22A249A53034450A | Since: 323
     */
    function dontRenderInGameUi() {
        DontRenderInGameUi(false);
    }
    graphics.dontRenderInGameUi = dontRenderInGameUi;
    /**
     * No comment provided
     *
     * Hash: 0x7118E83EEB9F7238 | Since: 1290
     */
    function drawBinkMovie(binkMovie, r, g, b, a) {
        DrawBinkMovie(binkMovie, 0, 0, 0, 0, 0, r, g, b, a);
    }
    graphics.drawBinkMovie = drawBinkMovie;
    /**
     * x,y,z = start pos
     * x2,y2,z2 = end pos
     *
     * Draw's a 3D Box between the two x,y,z coords.
     * --------------
     * Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
     * I recommend using a predefined function to call this.
     * [VB.NET]
     * Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
     * [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
     * End Sub
     *
     * [C#]
     * public void DrawBox(Vector3 a, Vector3 b, Color col)
     * {
     * Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
     * }
     *
     * Hash: 0xD3A9971CADAC7252 | Since: 323
     */
    function drawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
        DrawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }
    graphics.drawBox = drawBox;
    /**
     * No comment provided
     *
     * Hash: 0x083A2CA4F2E573BD | Since: 323
     */
    function drawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, alpha) {
        DrawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
    }
    graphics.drawDebugBox = drawDebugBox;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x73B1189623049839 | Since: 323
     */
    function drawDebugCross(pos, size, red, green, blue, alpha) {
        DrawDebugCross(pos.x, pos.y, pos.z, size, red, green, blue, alpha);
    }
    graphics.drawDebugCross = drawDebugCross;
    /**
     * No comment provided
     *
     * Hash: 0x7FDFADE676AA3CB0 | Since: 323
     */
    function drawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, alpha) {
        DrawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
    }
    graphics.drawDebugLine = drawDebugLine;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xD8B9A8AC5608FF94 | Since: 323
     */
    function drawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2) {
        DrawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
    }
    graphics.drawDebugLineWithTwoColours = drawDebugLineWithTwoColours;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xAAD68E1AB39DA632 | Since: 323
     */
    function drawDebugSphere(pos, radius, red, green, blue, alpha) {
        DrawDebugSphere(pos.x, pos.y, pos.z, radius, red, green, blue, alpha);
    }
    graphics.drawDebugSphere = drawDebugSphere;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x3903E216620488E8 | Since: 323
     */
    function drawDebugText(text, pos, red, green, blue, alpha) {
        DrawDebugText(text, pos.x, pos.y, pos.z, red, green, blue, alpha);
    }
    graphics.drawDebugText = drawDebugText;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xA3BB2E9555C05A8F | Since: 323
     */
    function drawDebugText2d(text, pos, red, green, blue, alpha) {
        DrawDebugText2d(text, pos.x, pos.y, pos.z, red, green, blue, alpha);
    }
    graphics.drawDebugText2d = drawDebugText2d;
    /**
     * No comment provided
     *
     * Hash: 0xF2A1B2771A01DBD4 | Since: 323
     */
    function drawLightWithRange(pos, colorR, colorG, colorB, range, intensity) {
        DrawLightWithRange(pos.x, pos.y, pos.z, colorR, colorG, colorB, range, intensity);
    }
    graphics.drawLightWithRange = drawLightWithRange;
    /**
     * No comment provided
     *
     * Hash: 0xF49E9A9716A04595 | Since: 323
     */
    function drawLightWithRangeex(pos, r, g, b, range, intensity, shadow) {
        DrawLightWithRangeAndShadow(pos.x, pos.y, pos.z, r, g, b, range, intensity, shadow);
    }
    graphics.drawLightWithRangeex = drawLightWithRangeex;
    /**
     * Draws a depth-tested line from one point to another.
     * ----------------
     * x1, y1, z1 : Coordinates for the first point
     * x2, y2, z2 : Coordinates for the second point
     * r, g, b, alpha : Color with RGBA-Values
     * I recommend using a predefined function to call this.
     * [VB.NET]
     * Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
     * [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
     * End Sub
     *
     * [C#]
     * public void DrawLine(Vector3 from, Vector3 to, Color col)
     * {
     * Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
     * }
     *
     * Hash: 0x6B7256074AE34680 | Since: 323
     */
    function drawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
        DrawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
    }
    graphics.drawLine = drawLine;
    /**
     * No comment provided
     *
     * Hash: 0x1072F115DAB0717E | Since: 323
     */
    function drawLowQualityPhotoToPhone() {
        DrawLowQualityPhotoToPhone(false, false);
    }
    graphics.drawLowQualityPhotoToPhone = drawLowQualityPhotoToPhone;
    /**
     * enum MarkerTypes
     * {
     * MarkerTypeUpsideDownCone = 0,
     * MarkerTypeVerticalCylinder = 1,
     * MarkerTypeThickChevronUp = 2,
     * MarkerTypeThinChevronUp = 3,
     * MarkerTypeCheckeredFlagRect = 4,
     * MarkerTypeCheckeredFlagCircle = 5,
     * MarkerTypeVerticleCircle = 6,
     * MarkerTypePlaneModel = 7,
     * MarkerTypeLostMCDark = 8,
     * MarkerTypeLostMCLight = 9,
     * MarkerTypeNumber0 = 10,
     * MarkerTypeNumber1 = 11,
     * MarkerTypeNumber2 = 12,
     * MarkerTypeNumber3 = 13,
     * MarkerTypeNumber4 = 14,
     * MarkerTypeNumber5 = 15,
     * MarkerTypeNumber6 = 16,
     * MarkerTypeNumber7 = 17,
     * MarkerTypeNumber8 = 18,
     * MarkerTypeNumber9 = 19,
     * MarkerTypeChevronUpx1 = 20,
     * MarkerTypeChevronUpx2 = 21,
     * MarkerTypeChevronUpx3 = 22,
     * MarkerTypeHorizontalCircleFat = 23,
     * MarkerTypeReplayIcon = 24,
     * MarkerTypeHorizontalCircleSkinny = 25,
     * MarkerTypeHorizontalCircleSkinny_Arrow = 26,
     * MarkerTypeHorizontalSplitArrowCircle = 27,
     * MarkerTypeDebugSphere = 28,
     * MarkerTypeDallorSign = 29,
     * MarkerTypeHorizontalBars = 30,
     * MarkerTypeWolfHead = 31
     * };
     *
     * dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
     *
     * faceCamera - Rotates only the y-axis (the heading) towards the camera
     *
     * p19 - no effect, default value in script is 2
     *
     * rotate - Rotates only on the y-axis (the heading)
     *
     * textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
     *
     * textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
     *
     * drawOnEnts - Draws the marker onto any entities that intersect it
     *
     * basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
     *
     * `bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);`
     *
     * his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
     *
     * `GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);`
     *
     *
     *
     * Hash: 0x28477EC23D892089 | Since: 323
     */
    function drawMarker(_type, pos, dirX, dirY, dirZ, rot, scale, red, green, blue, alpha, bobUpAndDown, faceCamera, rotate, textureDict, textureName, drawOnEnts) {
        DrawMarker(_type, pos.x, pos.y, pos.z, dirX, dirY, dirZ, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z, red, green, blue, alpha, bobUpAndDown, faceCamera, 0, rotate, textureDict, textureName, drawOnEnts);
    }
    graphics.drawMarker = drawMarker;
    /**
     * No comment provided
     *
     * Hash: 0xE82728F0DE75D13A | Since: 573
     */
    function drawMarkerEx(_type, pos, dirX, dirY, dirZ, rot, scale, red, green, blue, alpha, bobUpAndDown, faceCamera, rotate, textureDict, textureName, drawOnEnts) {
        DrawMarker2(_type, pos.x, pos.y, pos.z, dirX, dirY, dirZ, rot.x, rot.y, rot.z, scale.x, scale.y, scale.z, red, green, blue, alpha, bobUpAndDown, faceCamera, undefined, rotate, textureDict, textureName, drawOnEnts, false, false);
    }
    graphics.drawMarkerEx = drawMarkerEx;
    /**
     * Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
     * Example https://imgur.com/nCbtS4H
     *
     * alpha - The alpha for the sphere. Goes from 0.0 to 1.0.
     *
     * Hash: 0x799017F9E3B10112 | Since: 463
     */
    function drawMarkerSphere(pos, radius, red, green, blue, alpha) {
        DrawSphere(pos.x, pos.y, pos.z, radius, red, green, blue, alpha);
    }
    graphics.drawMarkerSphere = drawMarkerSphere;
    /**
     * x/y/z - Location of a vertex (in world coords), presumably.
     * ----------------
     * x1, y1, z1     : Coordinates for the first point
     * x2, y2, z2     : Coordinates for the second point
     * x3, y3, z3     : Coordinates for the third point
     * r, g, b, alpha : Color with RGBA-Values
     *
     * Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
     * But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
     * I recommend using a predefined function to call this.
     * [VB.NET]
     * Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
     * [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
     * End Sub
     *
     * [C#]
     * public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
     * {
     * Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
     * }
     * BTW: Intersecting triangles are not supported: They overlap in the order they were called.
     *
     * Hash: 0xAC26716048436851 | Since: 323
     */
    function drawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha) {
        DrawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
    }
    graphics.drawPoly = drawPoly;
    /**
     * Draws a rectangle on the screen.
     *
     * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
     *
     * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
     *
     * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
     *
     * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
     *
     * -R: Red part of the color. (0-255)
     *
     * -G: Green part of the color. (0-255)
     *
     * -B: Blue part of the color. (0-255)
     *
     * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
     *
     * The total number of rectangles to be drawn in one frame is apparently limited to 399.
     *
     *
     * Hash: 0x3A618A217E5154F0 | Since: 323
     */
    function drawRect(x, y, width, height, r, g, b, a) {
        DrawRect(x, y, width, height, r, g, b, a, false);
    }
    graphics.drawRect = drawRect;
    /**
     * No comment provided
     *
     * Hash: 0x54972ADAF0294A93 | Since: 323
     */
    function drawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha) {
        DrawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, 0);
    }
    graphics.drawScaleformMovie = drawScaleformMovie;
    /**
     * No comment provided
     *
     * Hash: 0x87D51D72255D4E78 | Since: 323
     */
    function drawScaleformMovie3d(scaleform, pos, rot, scale, rotationOrder) {
        DrawScaleformMovie3d(scaleform, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0, 0, scale.x, scale.y, scale.z, rotationOrder);
    }
    graphics.drawScaleformMovie3d = drawScaleformMovie3d;
    /**
     * No comment provided
     *
     * Hash: 0x1CE592FDC749D6F5 | Since: 323
     */
    function drawScaleformMovie3dSolid(scaleform, pos, rot, scale, rotationOrder) {
        DrawScaleformMovie3dSolid(scaleform, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0, 0, scale.x, scale.y, scale.z, rotationOrder);
    }
    graphics.drawScaleformMovie3dSolid = drawScaleformMovie3dSolid;
    /**
     * unk is not used so no need
     *
     * Hash: 0x0DF606929C105BE1 | Since: 323
     */
    function drawScaleformMovieFullscreen(scaleform, red, green, blue, alpha) {
        DrawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, 0);
    }
    graphics.drawScaleformMovieFullscreen = drawScaleformMovieFullscreen;
    /**
     * No comment provided
     *
     * Hash: 0xCF537FDE4FBD4CE5 | Since: 323
     */
    function drawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha) {
        DrawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha);
    }
    graphics.drawScaleformMovieFullscreenMasked = drawScaleformMovieFullscreenMasked;
    /**
     * No comment provided
     *
     * Hash: 0x5BCA583A583194DB | Since: 323
     */
    function drawShadowedSpotLight(pos, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId) {
        DrawSpotLightWithShadow(pos.x, pos.y, pos.z, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
    }
    graphics.drawShadowedSpotLight = drawShadowedSpotLight;
    /**
     * Parameters:
     * * pos - coordinate where the spotlight is located
     * * dir - the direction vector the spotlight should aim at from its current position
     * * r,g,b - color of the spotlight
     * * distance - the maximum distance the light can reach
     * * brightness - the brightness of the light
     * * roundness - "smoothness" of the circle edge
     * * radius - the radius size of the spotlight
     * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
     *
     * Example in C# (spotlight aims at the closest vehicle):
     * Vector3 myPos = Game.Player.Character.Position;
     * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
     * Vector3 destinationCoords = nearest.Position;
     * Vector3 dirVector = destinationCoords - myPos;
     * dirVector.Normalize();
     * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
     *
     * Hash: 0xD0F64B265C8C8B33 | Since: 323
     */
    function drawSpotLight(pos, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff) {
        DrawSpotLight(pos.x, pos.y, pos.z, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
    }
    graphics.drawSpotLight = drawSpotLight;
    /**
     * Draws a 2D sprite on the screen.
     *
     * Parameters:
     * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
     *
     * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
     *
     * screenX/Y - Screen offset (0.5 = center)
     * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
     *
     * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
     *
     * red,green,blue - Sprite color (default = 255/255/255)
     *
     * alpha - opacity level
     *
     * Hash: 0xE7FFAE5EBF23D890 | Since: 323
     */
    function drawSprite(textureDict, textureName, screenSize, width, height, heading, red, green, blue, alpha) {
        DrawSprite(textureDict, textureName, screenSize.x, screenSize.y, width, height, heading, red, green, blue, alpha, false, undefined);
    }
    graphics.drawSprite = drawSprite;
    /**
     * Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
     * x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
     * y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
     * width 0.0 - 1.0 is the reasonable amount generally
     * height 0.0 - 1.0 is the reasonable amount generally
     * p6 almost always 0.0
     * p11 seems to be unknown but almost always 0 int
     *
     * Hash: 0x2D3B147AFAD49DE0 | Since: 1290
     */
    function drawSpriteArx(textureDict, textureName, x, y, width, height, red, green, blue, alpha) {
        Citizen.invokeNative('0x2D3B147AFAD49DE0', textureDict, textureName, x, y, width, height, 0, red, green, blue, alpha, undefined, undefined);
    }
    graphics.drawSpriteArx = drawSpriteArx;
    /**
     * Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
     *
     * u1, v1 - texture coordinates for the top-left corner
     * u2, v2 - texture coordinates for the bottom-right corner
     *
     * Hash: 0x95812F9B26074726 | Since: 1868
     */
    function drawSpriteArxWithUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha) {
        DrawSpriteUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, undefined);
    }
    graphics.drawSpriteArxWithUv = drawSpriteArxWithUv;
    /**
     * Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
     * These seem to be the only dicts ever requested by this native:
     *
     * prop_screen_biker_laptop
     * Prop_Screen_GR_Disruption
     * Prop_Screen_TaleOfUs
     * prop_screen_nightclub
     * Prop_Screen_IE_Adhawk
     * prop_screen_sm_free_trade_shipping
     * prop_screen_hacker_truck
     * MPDesktop
     * Prop_Screen_Nightclub
     * And a few others
     *
     *
     * Hash: 0x2BC54A8188768488 | Since: 877
     */
    function drawSpriteNamedRendertarget(textureDict, textureName, screenSize, width, height, heading, red, green, blue, alpha) {
        DrawInteractiveSprite(textureDict, textureName, screenSize.x, screenSize.y, width, height, heading, red, green, blue, alpha, undefined);
    }
    graphics.drawSpriteNamedRendertarget = drawSpriteNamedRendertarget;
    /**
     * Used for drawling Deadline trailing lights, see deadline.ytd
     *
     * p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
     * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
     *
     * Hash: 0x29280002282F1928 | Since: 877
     */
    function drawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
        DrawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
    }
    graphics.drawTexturedPoly = drawTexturedPoly;
    /**
     * Used for drawling Deadline trailing lights, see deadline.ytd
     *
     * Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
     * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
     *
     * Hash: 0x736D7AA1B750856B | Since: 877
     */
    function drawTexturedPolyWithThreeColours(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
        DrawSpritePoly2(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
    }
    graphics.drawTexturedPolyWithThreeColours = drawTexturedPolyWithThreeColours;
    /**
     * `All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.`
     *
     * "act_cinema.ysc", line 1483:
     * `HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);`
     * `HUD::SET_TEXT_RENDER_ID(l_AE);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);`
     * `if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {`
     * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);`
     * } else {
     * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);`
     * }
     *
     * "am_mp_property_int.ysc", line 102545:
     * `if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {`
     * `if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {`
     * `HUD::SET_TEXT_RENDER_ID(a_2._f1);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);`
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);`
     * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);`
     * `if (GRAPHICS::GET_TV_CHANNEL() == -1) {`
     * sub_a8fa5(a_2, 1);
     * } else {
     * sub_a8fa5(a_2, 1);
     * `GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);`
     * }
     * `HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());`
     * }
     * }
     *
     *
     * Hash: 0xFDDC2B4ED3C69DF0 | Since: 323
     */
    function drawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha) {
        DrawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
    }
    graphics.drawTvChannel = drawTvChannel;
    /**
     * Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
     *
     * Hash: 0x9DCE1F0F78260875 | Since: 323
     */
    function enableAlienBloodVfx(toggle) {
        EnableAlienBloodVfx(toggle);
    }
    graphics.enableAlienBloodVfx = enableAlienBloodVfx;
    /**
     * Creates cartoon effect when Michel smokes the weed
     *
     * Hash: 0xD821490579791273 | Since: 323
     */
    function enableClownBloodVfx(toggle) {
        EnableClownBloodVfx(toggle);
    }
    graphics.enableClownBloodVfx = enableClownBloodVfx;
    /**
     * The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
     *
     * Hash: 0x2C328AF17210F009 | Since: 323
     */
    function enableMoonCycleOverride(strength) {
        EnableMoonCycleOverride(strength);
    }
    graphics.enableMoonCycleOverride = enableMoonCycleOverride;
    /**
     * No comment provided
     *
     * Hash: 0x74C180030FDE4B69 | Since: 323
     */
    function enableMovieKeyframeWait(toggle) {
        EnableMovieKeyframeWait(toggle);
    }
    graphics.enableMovieKeyframeWait = enableMovieKeyframeWait;
    /**
     * No comment provided
     *
     * Hash: 0x873FA65C778AD970 | Since: 323
     */
    function enableMovieSubtitles(toggle) {
        EnableMovieSubtitles(toggle);
    }
    graphics.enableMovieSubtitles = enableMovieSubtitles;
    /**
     * No comment provided
     *
     * Hash: 0x5DEBD9C4DC995692 | Since: 323
     */
    function enableProcobjCreation() {
        Citizen.invokeNative('0x5DEBD9C4DC995692');
    }
    graphics.enableProcobjCreation = enableProcobjCreation;
    /**
     * No comment provided
     *
     * Hash: 0x0A123435A26C36CD | Since: 323
     */
    function endPetrolTrailDecals() {
        EndPetrolTrailDecals();
    }
    graphics.endPetrolTrailDecals = endPetrolTrailDecals;
    /**
     * Pops and calls the Scaleform function on the stack
     *
     * Hash: 0xC6796A8FFA375E53 | Since: 323
     */
    function endScaleformMovieMethod() {
        EndScaleformMovieMethod();
    }
    graphics.endScaleformMovieMethod = endScaleformMovieMethod;
    /**
     * No comment provided
     *
     * Hash: 0xC50AA39A577AF886 | Since: 323
     */
    function endScaleformMovieMethodReturnValue() {
        return EndScaleformMovieMethodReturnValue();
    }
    graphics.endScaleformMovieMethodReturnValue = endScaleformMovieMethodReturnValue;
    /**
     * No comment provided
     *
     * Hash: 0x362E2D3FE93A9959 | Since: 323
     */
    function endTextCommandScaleformString() {
        EndTextCommandScaleformString();
    }
    graphics.endTextCommandScaleformString = endTextCommandScaleformString;
    /**
     * Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
     *
     * Hash: 0xAE4E8157D9ECF087 | Since: 323
     */
    function endTextCommandUnparsedScaleformString() {
        EndTextCommandUnparsedScaleformString();
    }
    graphics.endTextCommandUnparsedScaleformString = endTextCommandUnparsedScaleformString;
    /**
     * Fades nearby decals within the range specified
     *
     * Hash: 0xD77EDADB0420E6E0 | Since: 323
     */
    function fadeDecalsInRange(pos) {
        FadeDecalsInRange(pos.x, pos.y, pos.z, 0, 0);
    }
    graphics.fadeDecalsInRange = fadeDecalsInRange;
    /**
     * No comment provided
     *
     * Hash: 0xC9B18B4619F48F7B | Since: 323
     */
    function fadeUpPedLight() {
        FadeUpPedLight(0);
    }
    graphics.fadeUpPedLight = fadeUpPedLight;
    /**
     * No comment provided
     *
     * Hash: 0x814AF7DCAACC597B | Since: 372
     */
    function forceExposureReadback(toggle) {
        Citizen.invokeNative('0x814AF7DCAACC597B', toggle);
    }
    graphics.forceExposureReadback = forceExposureReadback;
    /**
     * No comment provided
     *
     * Hash: 0xBA0127DA25FD54C9 | Since: 372
     */
    function forceParticleFxInVehicleInterior() {
        Citizen.invokeNative('0xBA0127DA25FD54C9', undefined, undefined);
    }
    graphics.forceParticleFxInVehicleInterior = forceParticleFxInVehicleInterior;
    /**
     * No comment provided
     *
     * Hash: 0x9B079E5221D984D3 | Since: 323
     */
    function forcePostfxBulletImpactsAfterHud() {
        Citizen.invokeNative('0x9B079E5221D984D3', false);
    }
    graphics.forcePostfxBulletImpactsAfterHud = forcePostfxBulletImpactsAfterHud;
    /**
     * No comment provided
     *
     * Hash: 0xDC459CFA0CCE245B | Since: 323
     */
    function forceRenderInGameUi(toggle) {
        ForceRenderInGameUi(toggle);
    }
    graphics.forceRenderInGameUi = forceRenderInGameUi;
    /**
     * No comment provided
     *
     * Hash: 0xD801CC02177FA3F1 | Since: 323
     */
    function freeMemoryForHighQualityPhoto() {
        FreeMemoryForHighQualityPhoto();
    }
    graphics.freeMemoryForHighQualityPhoto = freeMemoryForHighQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x6A12D88881435DCA | Since: 323
     */
    function freeMemoryForLowQualityPhoto() {
        FreeMemoryForLowQualityPhoto();
    }
    graphics.freeMemoryForLowQualityPhoto = freeMemoryForLowQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x0A46AF8A78DC5E0A | Since: 323
     */
    function freeMemoryForMissionCreatorPhoto() {
        FreeMemoryForMissionCreatorPhoto();
    }
    graphics.freeMemoryForMissionCreatorPhoto = freeMemoryForMissionCreatorPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x346EF3ECAAAB149E | Since: 323
     */
    function freeMemoryForMissionCreatorPhotoPreview() {
        Citizen.invokeNative('0x346EF3ECAAAB149E');
    }
    graphics.freeMemoryForMissionCreatorPhotoPreview = freeMemoryForMissionCreatorPhotoPreview;
    /**
     * Returns current screen resolution.
     *
     * Hash: 0x873C9F3104101DD3 | Since: 323
     */
    function getActualScreenResolution() {
        return GetActualScreenResolution();
    }
    graphics.getActualScreenResolution = getActualScreenResolution;
    /**
     * No comment provided
     *
     * Hash: 0xF1307EF624A80D87 | Since: 323
     */
    function getAspectRatio(b) {
        return GetAspectRatio(b);
    }
    graphics.getAspectRatio = getAspectRatio;
    /**
     * In percentage: 0.0 - 100.0
     *
     * Hash: 0x8E17DDD6B9D5BF29 | Since: 1734
     */
    function getBinkMovieTime(binkMovie) {
        return GetBinkMovieTime(binkMovie);
    }
    graphics.getBinkMovieTime = getBinkMovieTime;
    /**
     * No comment provided
     *
     * Hash: 0x473151EBC762C6DA | Since: 323
     */
    function getCurrentNumberOfCloudPhotos() {
        return GetCurrentNumberOfCloudPhotos();
    }
    graphics.getCurrentNumberOfCloudPhotos = getCurrentNumberOfCloudPhotos;
    /**
     * No comment provided
     *
     * Hash: 0x30432A0118736E00 | Since: 1493
     */
    function getCurrentTvClipNamehash() {
        return Citizen.invokeNative('0x30432A0118736E00');
    }
    graphics.getCurrentTvClipNamehash = getCurrentTvClipNamehash;
    /**
     * No comment provided
     *
     * Hash: 0x323F647679A09103 | Since: 323
     */
    function getDecalWashLevel(decal) {
        return GetDecalWashLevel(decal);
    }
    graphics.getDecalWashLevel = getDecalWashLevel;
    /**
     * See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
     * Returns an integer representing the Timecycle modifier
     *
     * Hash: 0xBB0527EC6341496D | Since: 323
     */
    function getExtraTcmodifier() {
        return GetExtraTimecycleModifierIndex();
    }
    graphics.getExtraTcmodifier = getExtraTcmodifier;
    /**
     * false = Any resolution < 1280x720
     * true = Any resolution >= 1280x720
     *
     * Hash: 0x84ED31191CC5D2C9 | Since: 323
     */
    function getIsHidef() {
        return GetIsHidef();
    }
    graphics.getIsHidef = getIsHidef;
    /**
     * No comment provided
     *
     * Hash: 0x2F09F7976C512404 | Since: 323
     */
    function getIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius) {
        return GetIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius);
    }
    graphics.getIsPetrolDecalInRange = getIsPetrolDecalInRange;
    /**
     * No comment provided
     *
     * Hash: 0x98D18905BF723B99 | Since: 1493
     */
    function getIsTimecycleTransitioningOut() {
        return Citizen.invokeNative('0x98D18905BF723B99');
    }
    graphics.getIsTimecycleTransitioningOut = getIsTimecycleTransitioningOut;
    /**
     * Setting Aspect Ratio Manually in game will return:
     *
     * false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
     * true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
     *
     * Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
     *
     * Hash: 0x30CF4BDA4FCB1905 | Since: 323
     */
    function getIsWidescreen() {
        return GetIsWidescreen();
    }
    graphics.getIsWidescreen = getIsWidescreen;
    /**
     * No comment provided
     *
     * Hash: 0x393BD2275CEB7793 | Since: 1103
     */
    function getLightOverrideMaxIntensityScale() {
        return Citizen.invokeNative('0x393BD2275CEB7793');
    }
    graphics.getLightOverrideMaxIntensityScale = getLightOverrideMaxIntensityScale;
    /**
     * Hardcoded to always return 2.
     *
     * Hash: 0x40AFB081F8ADD4EE | Since: 323
     */
    function getLoadHighQualityPhotoStatus() {
        return ReturnTwo(0);
    }
    graphics.getLoadHighQualityPhotoStatus = getLoadHighQualityPhotoStatus;
    /**
     * This function is hard-coded to always return 96.
     *
     * Hash: 0xDC54A7AF8B3A14EF | Since: 323
     */
    function getMaximumNumberOfCloudPhotos() {
        return GetMaximumNumberOfCloudPhotos();
    }
    graphics.getMaximumNumberOfCloudPhotos = getMaximumNumberOfCloudPhotos;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x34D23450F028B0BF | Since: 323
     */
    function getMaximumNumberOfPhotos() {
        return GetMaximumNumberOfPhotos();
    }
    graphics.getMaximumNumberOfPhotos = getMaximumNumberOfPhotos;
    /**
     * Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
     *
     * Hash: 0xE59343E9E96529E7 | Since: 323
     */
    function getMotionblurMaxVelScaler() {
        return Citizen.invokeNative('0xE59343E9E96529E7');
    }
    graphics.getMotionblurMaxVelScaler = getMotionblurMaxVelScaler;
    /**
     * No comment provided
     *
     * Hash: 0x35FB78DC42B7BD21 | Since: 323
     */
    function getRequestingnightvision() {
        return GetRequestingnightvision();
    }
    graphics.getRequestingnightvision = getRequestingnightvision;
    /**
     * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
     *
     * Hash: 0xBAF107B6BB2C97F0 | Since: 323
     */
    function getSafeZoneSize() {
        return GetSafeZoneSize();
    }
    graphics.getSafeZoneSize = getSafeZoneSize;
    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     *
     * Hash: 0xD80A80346A45D761 | Since: 757
     */
    function getScaleformMovieMethodReturnValueBool(methodReturn) {
        return GetScaleformMovieMethodReturnValueBool(methodReturn);
    }
    graphics.getScaleformMovieMethodReturnValueBool = getScaleformMovieMethodReturnValueBool;
    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     * Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
     *
     * Hash: 0x2DE7EFA66B906036 | Since: 323
     */
    function getScaleformMovieMethodReturnValueInt(methodReturn) {
        return GetScaleformMovieMethodReturnValueInt(methodReturn);
    }
    graphics.getScaleformMovieMethodReturnValueInt = getScaleformMovieMethodReturnValueInt;
    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     * Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
     *
     * Hash: 0xE1E258829A885245 | Since: 323
     */
    function getScaleformMovieMethodReturnValueString(methodReturn) {
        return GetScaleformMovieMethodReturnValueString(methodReturn);
    }
    graphics.getScaleformMovieMethodReturnValueString = getScaleformMovieMethodReturnValueString;
    /**
     * No comment provided
     *
     * Hash: 0x5CCABFFCA31DDE33 | Since: 323
     */
    function getScreenblurFadeCurrentTime() {
        return GetScreenblurFadeCurrentTime();
    }
    graphics.getScreenblurFadeCurrentTime = getScreenblurFadeCurrentTime;
    /**
     * No comment provided
     *
     * Hash: 0xB2EBE8CBC58B90E9 | Since: 323
     */
    function getScreenAspectRatio() {
        return Citizen.invokeNative('0xB2EBE8CBC58B90E9');
    }
    graphics.getScreenAspectRatio = getScreenAspectRatio;
    /**
     * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
     *
     * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
     *
     *
     * For .NET users...
     *
     * VB:
     * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
     *
     * Dim x2dp, y2dp As New Native.OutputArgument
     *
     * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
     * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
     *
     * End Function
     *
     * C#:
     * Vector2 World3DToScreen2d(Vector3 pos)
     * {
     * var x2dp = new OutputArgument();
     * var y2dp = new OutputArgument();
     *
     * Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
     * return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
     * }
     * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
     *
     * Used to be called _WORLD3D_TO_SCREEN2D
     *
     * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
     *
     * Hash: 0x34E82F05DF2974F5 | Since: 323
     */
    function getScreenCoordFromWorldCoord(worldPos) {
        return GetScreenCoordFromWorldCoord(worldPos.x, worldPos.y, worldPos.z);
    }
    graphics.getScreenCoordFromWorldCoord = getScreenCoordFromWorldCoord;
    /**
     * int screenresx,screenresy;
     * GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
     *
     * Hash: 0x888D57E407E63624 | Since: 323
     */
    function getScreenResolution() {
        return GetScreenResolution();
    }
    graphics.getScreenResolution = getScreenResolution;
    /**
     * Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
     *
     * Hash: 0x6DD8F5AA635EB4B2 | Since: 323
     */
    function getScriptGfxAlignPosition(x, y) {
        return GetScriptGfxPosition(x, y);
    }
    graphics.getScriptGfxAlignPosition = getScriptGfxAlignPosition;
    /**
     * No comment provided
     *
     * Hash: 0xCB82A0BF0E3E3265 | Since: 323
     */
    function getStatusOfCreateLowQualityCopyOfPhoto() {
        return Citizen.invokeNative('0xCB82A0BF0E3E3265', 0);
    }
    graphics.getStatusOfCreateLowQualityCopyOfPhoto = getStatusOfCreateLowQualityCopyOfPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x5B0316762AFD4A64 | Since: 323
     */
    function getStatusOfCreateMissionCreatorPhotoPreview() {
        return Citizen.invokeNative('0x5B0316762AFD4A64');
    }
    graphics.getStatusOfCreateMissionCreatorPhotoPreview = getStatusOfCreateMissionCreatorPhotoPreview;
    /**
     * No comment provided
     *
     * Hash: 0x1670F8D05056F257 | Since: 323
     */
    function getStatusOfLoadMissionCreatorPhoto() {
        return GetStatusOfLoadMissionCreatorPhoto();
    }
    graphics.getStatusOfLoadMissionCreatorPhoto = getStatusOfLoadMissionCreatorPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x0C0C4E81E1AC60A0 | Since: 323
     */
    function getStatusOfSaveHighQualityPhoto() {
        return GetStatusOfSaveHighQualityPhoto();
    }
    graphics.getStatusOfSaveHighQualityPhoto = getStatusOfSaveHighQualityPhoto;
    /**
     * 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
     * appcamera, appmedia, and cellphone_controller.
     *
     * Hash: 0xF5BED327CEA362B1 | Since: 323
     */
    function getStatusOfSortedListOperation() {
        return GetStatusOfSortedListOperation(undefined);
    }
    graphics.getStatusOfSortedListOperation = getStatusOfSortedListOperation;
    /**
     * No comment provided
     *
     * Hash: 0x0D6CA79EEEBD8CA3 | Since: 323
     */
    function getStatusOfTakeHighQualityPhoto() {
        return GetStatusOfTakeHighQualityPhoto();
    }
    graphics.getStatusOfTakeHighQualityPhoto = getStatusOfTakeHighQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x90A78ECAA4E78453 | Since: 323
     */
    function getStatusOfTakeMissionCreatorPhoto() {
        return GetStatusOfTakeMissionCreatorPhoto();
    }
    graphics.getStatusOfTakeMissionCreatorPhoto = getStatusOfTakeMissionCreatorPhoto;
    /**
     * Returns the texture resolution of the passed texture dict+name.
     *
     * Note: Most texture resolutions are doubled compared to the console version of the game.
     *
     * Hash: 0x35736EE65BD00C11 | Since: 323
     */
    function getTextureResolution(textureDict, textureName) {
        return new Vector3(GetTextureResolution(textureDict, textureName));
    }
    graphics.getTextureResolution = getTextureResolution;
    /**
     * Only use for this in the PC scripts is:
     *
     * `if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)`
     *
     * Hash: 0xFDF3D97C674AFB66 | Since: 323
     */
    function getTimecycleModifierIndex() {
        return GetTimecycleModifierIndex();
    }
    graphics.getTimecycleModifierIndex = getTimecycleModifierIndex;
    /**
     * No comment provided
     *
     * Hash: 0x459FD2C8D0AB78BC | Since: 323
     */
    function getTimecycleTransitionModifierIndex() {
        return GetTimecycleTransitionModifierIndex();
    }
    graphics.getTimecycleTransitionModifierIndex = getTimecycleTransitionModifierIndex;
    /**
     * No comment provided
     *
     * Hash: 0xEB3DAC2C86001E5E | Since: 323
     */
    function getTogglePausedRenderphasesStatus() {
        return GetTogglePausedRenderphasesStatus();
    }
    graphics.getTogglePausedRenderphasesStatus = getTogglePausedRenderphasesStatus;
    /**
     * No comment provided
     *
     * Hash: 0xFC1E275A90D39995 | Since: 323
     */
    function getTvChannel() {
        return GetTvChannel();
    }
    graphics.getTvChannel = getTvChannel;
    /**
     * No comment provided
     *
     * Hash: 0x2170813D3DD8661B | Since: 323
     */
    function getTvVolume() {
        return GetTvVolume();
    }
    graphics.getTvVolume = getTvVolume;
    /**
     * No comment provided
     *
     * Hash: 0x2202A3F42C8E5F79 | Since: 323
     */
    function getUsingnightvision() {
        return GetUsingnightvision();
    }
    graphics.getUsingnightvision = getUsingnightvision;
    /**
     * No comment provided
     *
     * Hash: 0x44B80ABAB9D80BD3 | Since: 323
     */
    function getUsingseethrough() {
        return GetUsingseethrough();
    }
    graphics.getUsingseethrough = getUsingseethrough;
    /**
     * No comment provided
     *
     * Hash: 0xFE26117A5841B2FF | Since: 323
     */
    function getVehicleCrewEmblemRequestState(vehicle) {
        return GetVehicleCrewEmblemRequestState(vehicle, 0);
    }
    graphics.getVehicleCrewEmblemRequestState = getVehicleCrewEmblemRequestState;
    /**
     * No comment provided
     *
     * Hash: 0xA4819F5E23E2FFAD | Since: 323
     */
    function golfTrailGetMaxHeight() {
        return GolfTrailGetMaxHeight();
    }
    graphics.golfTrailGetMaxHeight = golfTrailGetMaxHeight;
    /**
     * No comment provided
     *
     * Hash: 0xA4664972A9B8F8BA | Since: 323
     */
    function golfTrailGetVisualControlPoint() {
        return new Vector3(GolfTrailGetVisualControlPoint(0));
    }
    graphics.golfTrailGetVisualControlPoint = golfTrailGetVisualControlPoint;
    /**
     * No comment provided
     *
     * Hash: 0x12995F2E53FFA601 | Since: 323
     */
    function golfTrailSetColour() {
        GolfTrailSetColour(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    graphics.golfTrailSetColour = golfTrailSetColour;
    /**
     * No comment provided
     *
     * Hash: 0xA51C4B86B71652AE | Since: 323
     */
    function golfTrailSetEnabled(toggle) {
        GolfTrailSetEnabled(toggle);
    }
    graphics.golfTrailSetEnabled = golfTrailSetEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x06F761EA47C1D3ED | Since: 323
     */
    function golfTrailSetFacing() {
        GolfTrailSetFacing(false);
    }
    graphics.golfTrailSetFacing = golfTrailSetFacing;
    /**
     * 12 matches across 4 scripts. All 4 scripts were job creators.
     *
     * type ranged from 0 - 2.
     * p4 was always 0.2f. Likely scale.
     * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
     *
     * Tested but noticed nothing.
     *
     * Hash: 0xB1BB03742917A5D6 | Since: 323
     */
    function golfTrailSetFixedControlPoint(_type, pos, red, green, blue, alpha) {
        GolfTrailSetFixedControlPoint(_type, pos.x, pos.y, pos.z, 0, red, green, blue, alpha);
    }
    graphics.golfTrailSetFixedControlPoint = golfTrailSetFixedControlPoint;
    /**
     * No comment provided
     *
     * Hash: 0xC0416B061F2B7E5E | Since: 323
     */
    function golfTrailSetFixedControlPointEnable() {
        Citizen.invokeNative('0xC0416B061F2B7E5E', false);
    }
    graphics.golfTrailSetFixedControlPointEnable = golfTrailSetFixedControlPointEnable;
    /**
     * p8 seems to always be false.
     *
     * Hash: 0x312342E1A4874F3F | Since: 323
     */
    function golfTrailSetPath() {
        GolfTrailSetPath(0, 0, 0, 0, 0, 0, 0, 0, false);
    }
    graphics.golfTrailSetPath = golfTrailSetPath;
    /**
     * No comment provided
     *
     * Hash: 0x2485D34E50A22E84 | Since: 323
     */
    function golfTrailSetRadius() {
        GolfTrailSetRadius(0, 0, 0);
    }
    graphics.golfTrailSetRadius = golfTrailSetRadius;
    /**
     * Only appeared in Golf & Golf_mp. Parameters were all ptrs
     *
     * Hash: 0x9CFDD90B2B844BF7 | Since: 323
     */
    function golfTrailSetShaderParams() {
        GolfTrailSetShaderParams(0, 0, 0, 0, 0);
    }
    graphics.golfTrailSetShaderParams = golfTrailSetShaderParams;
    /**
     * No comment provided
     *
     * Hash: 0xDBAA5EC848BA2D46 | Since: 323
     */
    function golfTrailSetTessellation() {
        GolfTrailSetTessellation(0, 0);
    }
    graphics.golfTrailSetTessellation = golfTrailSetTessellation;
    /**
     * No comment provided
     *
     * Hash: 0x851CD923176EBA7C | Since: 323
     */
    function grabPausemenuOwnership() {
        Citizen.invokeNative('0x851CD923176EBA7C');
    }
    graphics.grabPausemenuOwnership = grabPausemenuOwnership;
    /**
     * No comment provided
     *
     * Hash: 0x302C91AB2D477F7E | Since: 323
     */
    function grassbatchDisableFlattening() {
        GrassLodResetScriptAreas();
    }
    graphics.grassbatchDisableFlattening = grassbatchDisableFlattening;
    /**
     * No comment provided
     *
     * Hash: 0xAAE9BE70EC7C69AB | Since: 1290
     */
    function grassbatchEnableFlatteningExtInSphere(pos, scale) {
        Citizen.invokeNative('0xAAE9BE70EC7C69AB', pos.x, pos.y, pos.z, undefined, 0, 0, 0, scale);
    }
    graphics.grassbatchEnableFlatteningExtInSphere = grassbatchEnableFlatteningExtInSphere;
    /**
     * Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7
     *
     * Hash: 0x6D955F6A9E0295B1 | Since: 323
     */
    function grassbatchEnableFlatteningInSphere(pos, radius) {
        GrassLodShrinkScriptAreas(pos.x, pos.y, pos.z, radius, 0, 0, 0);
    }
    graphics.grassbatchEnableFlatteningInSphere = grassbatchEnableFlatteningInSphere;
    /**
     * No comment provided
     *
     * Hash: 0x8217150E1217EBFD | Since: 323
     */
    function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle) {
        return HasScaleformContainerMovieLoadedIntoParent(scaleformHandle);
    }
    graphics.hasScaleformContainerMovieLoadedIntoParent = hasScaleformContainerMovieLoadedIntoParent;
    /**
     * Only values used in the scripts are:
     *
     * "heist_mp"
     * "heistmap_mp"
     * "instructional_buttons"
     * "heist_pre"
     *
     * Hash: 0x0C1C5D756FB5F337 | Since: 323
     */
    function hasScaleformMovieFilenameLoaded(scaleformName) {
        return HasScaleformMovieFilenameLoaded(scaleformName);
    }
    graphics.hasScaleformMovieFilenameLoaded = hasScaleformMovieFilenameLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x85F01B8D5B90570E | Since: 323
     */
    function hasScaleformMovieLoaded(scaleformHandle) {
        return HasScaleformMovieLoaded(scaleformHandle);
    }
    graphics.hasScaleformMovieLoaded = hasScaleformMovieLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xDF6E5987D2B4D140 | Since: 323
     */
    function hasScaleformScriptHudMovieLoaded(hudComponent) {
        return HasScaleformScriptHudMovieLoaded(hudComponent);
    }
    graphics.hasScaleformScriptHudMovieLoaded = hasScaleformScriptHudMovieLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x0145F696AAAAD2E4 | Since: 323
     */
    function hasStreamedTextureDictLoaded(textureDict) {
        return HasStreamedTextureDictLoaded(textureDict);
    }
    graphics.hasStreamedTextureDictLoaded = hasStreamedTextureDictLoaded;
    /**
     * val is 1-20 (0 will return false)
     *
     * Hash: 0x2FCB133CA50A49EB | Since: 1290
     */
    function isActiveScaleformMovieDeleting(val) {
        return Citizen.invokeNative('0x2FCB133CA50A49EB', val);
    }
    graphics.isActiveScaleformMovieDeleting = isActiveScaleformMovieDeleting;
    /**
     * No comment provided
     *
     * Hash: 0xC694D74949CAFD0C | Since: 323
     */
    function isDecalAlive(decal) {
        return IsDecalAlive(decal);
    }
    graphics.isDecalAlive = isDecalAlive;
    /**
     * No comment provided
     *
     * Hash: 0x1F710BFF7DAE6261 | Since: 1604
     */
    function isPlaylistOnChannel(tvChannel) {
        return IsPlaylistUnk(tvChannel, undefined);
    }
    graphics.isPlaylistOnChannel = isPlaylistOnChannel;
    /**
     * val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
     *
     * Hash: 0x86255B1FC929E33E | Since: 1290
     */
    function isScaleformMovieDeleting(val) {
        return IsScaleformMovieDeleting(val);
    }
    graphics.isScaleformMovieDeleting = isScaleformMovieDeleting;
    /**
     * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
     * Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
     *
     * Hash: 0x768FF8961BA904D6 | Since: 323
     */
    function isScaleformMovieMethodReturnValueReady(methodReturn) {
        return IsScaleformMovieMethodReturnValueReady(methodReturn);
    }
    graphics.isScaleformMovieMethodReturnValueReady = isScaleformMovieMethodReturnValueReady;
    /**
     * Returns whether screen transition to blur/from blur is running.
     *
     * Hash: 0x7B226C785A52A0A9 | Since: 323
     */
    function isScreenblurFadeRunning() {
        return IsScreenblurFadeRunning();
    }
    graphics.isScreenblurFadeRunning = isScreenblurFadeRunning;
    /**
     * No comment provided
     *
     * Hash: 0xC45CCDAAC9221CA8 | Since: 323
     */
    function isTrackedPointVisible(point) {
        return IsTrackedPointVisible(point);
    }
    graphics.isTrackedPointVisible = isTrackedPointVisible;
    /**
     * No comment provided
     *
     * Hash: 0x0AD973CA1E077B60 | Since: 323
     */
    function isTvshowCurrentlyPlaying(videoCliphash) {
        if (typeof videoCliphash === 'string')
            videoCliphash = misc.getHashKey(videoCliphash);
        return IsTvPlaylistItemPlaying(videoCliphash);
    }
    graphics.isTvshowCurrentlyPlaying = isTvshowCurrentlyPlaying;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xEC72C258667BE5EA | Since: 323
     */
    function loadHighQualityPhoto() {
        return Citizen.invokeNative('0xEC72C258667BE5EA', undefined);
    }
    graphics.loadHighQualityPhoto = loadHighQualityPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x4862437A486F91B0 | Since: 323
     */
    function loadMissionCreatorPhoto() {
        return LoadMissionCreatorPhoto(undefined, undefined, undefined);
    }
    graphics.loadMissionCreatorPhoto = loadMissionCreatorPhoto;
    /**
     * No comment provided
     *
     * Hash: 0xB66064452270E8F1 | Since: 323
     */
    function loadMovieMeshSet(movieMeshSetName) {
        return LoadMovieMeshSet(movieMeshSetName);
    }
    graphics.loadMovieMeshSet = loadMovieMeshSet;
    /**
     * No comment provided
     *
     * Hash: 0x84C8D7C2D30D3280 | Since: 323
     */
    function moveVehicleDecals() {
        MoveVehicleDecals(undefined, undefined);
    }
    graphics.moveVehicleDecals = moveVehicleDecals;
    /**
     * No comment provided
     *
     * Hash: 0xEFB55E7C25D3B3BE | Since: 323
     */
    function overrideInteriorSmokeEnd() {
        OverrideInteriorSmokeEnd();
    }
    graphics.overrideInteriorSmokeEnd = overrideInteriorSmokeEnd;
    /**
     * No comment provided
     *
     * Hash: 0x1600FD8CF72EBC12 | Since: 323
     */
    function overrideInteriorSmokeLevel(level) {
        OverrideInteriorSmokeLevel(level);
    }
    graphics.overrideInteriorSmokeLevel = overrideInteriorSmokeLevel;
    /**
     * No comment provided
     *
     * Hash: 0x2A2A52824DB96700 | Since: 323
     */
    function overrideInteriorSmokeName(name) {
        OverrideInteriorSmokeName(name);
    }
    graphics.overrideInteriorSmokeName = overrideInteriorSmokeName;
    /**
     * No comment provided
     *
     * Hash: 0x43FA7CBE20DAB219 | Since: 1290
     */
    function overrideNightvisionLightRange() {
        Citizen.invokeNative('0x43FA7CBE20DAB219', 0);
    }
    graphics.overrideNightvisionLightRange = overrideNightvisionLightRange;
    /**
     * Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
     *
     * Hash: 0x95EB5E34F821BABE | Since: 877
     */
    function overridePedCrewLogoTexture(ped, txd, txn) {
        return OverridePedBadgeTexture(ped, txd, txn);
    }
    graphics.overridePedCrewLogoTexture = overridePedCrewLogoTexture;
    /**
     * No comment provided
     *
     * Hash: 0xD1C7CB175E012964 | Since: 323
     */
    function passKeyboardInputToScaleform(scaleformHandle) {
        return PassKeyboardInputToScaleform(scaleformHandle);
    }
    graphics.passKeyboardInputToScaleform = passKeyboardInputToScaleform;
    /**
     * No comment provided
     *
     * Hash: 0x8A35C742130C6080 | Since: 323
     */
    function patchDecalDiffuseMap(decalType, textureDict, textureName) {
        PatchDecalDiffuseMap(decalType, textureDict, textureName);
    }
    graphics.patchDecalDiffuseMap = patchDecalDiffuseMap;
    /**
     * No comment provided
     *
     * Hash: 0xBCEDB009461DA156 | Since: 323
     */
    function phonephotoeditorIsActive() {
        return Citizen.invokeNative('0xBCEDB009461DA156');
    }
    graphics.phonephotoeditorIsActive = phonephotoeditorIsActive;
    /**
     * No comment provided
     *
     * Hash: 0x27FEB5254759CDE3 | Since: 323
     */
    function phonephotoeditorSetFrameTxd(textureDict) {
        return Citizen.invokeNative('0x27FEB5254759CDE3', textureDict, false);
    }
    graphics.phonephotoeditorSetFrameTxd = phonephotoeditorSetFrameTxd;
    /**
     * No comment provided
     *
     * Hash: 0x7AC24EAB6D74118D | Since: 323
     */
    function phonephotoeditorToggle() {
        return Citizen.invokeNative('0x7AC24EAB6D74118D', false);
    }
    graphics.phonephotoeditorToggle = phonephotoeditorToggle;
    /**
     * No comment provided
     *
     * Hash: 0x70D2CC8A542A973C | Since: 1290
     */
    function playBinkMovie(binkMovie) {
        PlayBinkMovie(binkMovie);
    }
    graphics.playBinkMovie = playBinkMovie;
    /**
     * No comment provided
     *
     * Hash: 0x3C8938D7D872211E | Since: 323
     */
    function popTimecycleModifier() {
        PopTimecycleModifier();
    }
    graphics.popTimecycleModifier = popTimecycleModifier;
    /**
     * Only one match in the scripts:
     *
     * `GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");`
     *
     * Hash: 0xD7021272EB0A451E | Since: 323
     */
    function presetInteriorAmbientCache(timecycleModifierName) {
        PresetInteriorAmbientCache(timecycleModifierName);
    }
    graphics.presetInteriorAmbientCache = presetInteriorAmbientCache;
    /**
     * No comment provided
     *
     * Hash: 0x0218BA067D249DEA | Since: 323
     */
    function procgrassDisableAmbscalescan() {
        Citizen.invokeNative('0x0218BA067D249DEA');
    }
    graphics.procgrassDisableAmbscalescan = procgrassDisableAmbscalescan;
    /**
     * No comment provided
     *
     * Hash: 0x649C97D52332341A | Since: 323
     */
    function procgrassDisableCullsphere(handle) {
        Citizen.invokeNative('0x649C97D52332341A', handle);
    }
    graphics.procgrassDisableCullsphere = procgrassDisableCullsphere;
    /**
     * No comment provided
     *
     * Hash: 0x14FC5833464340A8 | Since: 323
     */
    function procgrassEnableAmbscalescan() {
        Citizen.invokeNative('0x14FC5833464340A8');
    }
    graphics.procgrassEnableAmbscalescan = procgrassEnableAmbscalescan;
    /**
     * No comment provided
     *
     * Hash: 0xAE51BC858F32BA66 | Since: 323
     */
    function procgrassEnableCullsphere(handle, pos, scale) {
        Citizen.invokeNative('0xAE51BC858F32BA66', handle, pos.x, pos.y, pos.z, scale);
    }
    graphics.procgrassEnableCullsphere = procgrassEnableCullsphere;
    /**
     * No comment provided
     *
     * Hash: 0x2C42340F916C5930 | Since: 323
     */
    function procgrassIsCullsphereEnabled(handle) {
        return Citizen.invokeNative('0x2C42340F916C5930', handle);
    }
    graphics.procgrassIsCullsphereEnabled = procgrassIsCullsphereEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x58F735290861E6B4 | Since: 323
     */
    function pushTimecycleModifier() {
        PushTimecycleModifier();
    }
    graphics.pushTimecycleModifier = pushTimecycleModifier;
    /**
     * No comment provided
     *
     * Hash: 0x9B6E70C5CEEF4EEB | Since: 323
     */
    function queryMovieMeshSetState() {
        return QueryMovieMeshSetState(undefined);
    }
    graphics.queryMovieMeshSetState = queryMovieMeshSetState;
    /**
     * 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
     *
     * Hash: 0x2A893980E96B659A | Since: 323
     */
    function queueOperationToCreateSortedListOfPhotos() {
        return QueueOperationToCreateSortedListOfPhotos(undefined);
    }
    graphics.queueOperationToCreateSortedListOfPhotos = queueOperationToCreateSortedListOfPhotos;
    /**
     * Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
     *
     * Hash: 0xA44FF770DFBC5DAE | Since: 323
     */
    function registerNoirLensEffect() {
        RegisterNoirScreenEffectThisFrame();
    }
    graphics.registerNoirLensEffect = registerNoirLensEffect;
    /**
     * No comment provided
     *
     * Hash: 0x170911F37F646F29 | Since: 2802
     */
    function registerPostfxBulletImpact(weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity) {
        Citizen.invokeNative('0x170911F37F646F29', weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity);
    }
    graphics.registerPostfxBulletImpact = registerPostfxBulletImpact;
    /**
     * No comment provided
     *
     * Hash: 0x04D950EEFA4EED8C | Since: 1290
     */
    function releaseBinkMovie(binkMovie) {
        ReleaseBinkMovie(binkMovie);
    }
    graphics.releaseBinkMovie = releaseBinkMovie;
    /**
     * No comment provided
     *
     * Hash: 0xEB119AA014E89183 | Since: 323
     */
    function releaseMovieMeshSet(movieMeshSet) {
        ReleaseMovieMeshSet(movieMeshSet);
    }
    graphics.releaseMovieMeshSet = releaseMovieMeshSet;
    /**
     * No comment provided
     *
     * Hash: 0xED3F346429CCD659 | Since: 323
     */
    function removeDecal(decal) {
        RemoveDecal(decal);
    }
    graphics.removeDecal = removeDecal;
    /**
     * No comment provided
     *
     * Hash: 0xCCF71CBDDF5B6CB9 | Since: 323
     */
    function removeDecalsFromObject(obj) {
        RemoveDecalsFromObject(obj);
    }
    graphics.removeDecalsFromObject = removeDecalsFromObject;
    /**
     * No comment provided
     *
     * Hash: 0xA6F6F70FDC6D144C | Since: 323
     */
    function removeDecalsFromObjectFacing(obj, pos) {
        RemoveDecalsFromObjectFacing(obj, pos.x, pos.y, pos.z);
    }
    graphics.removeDecalsFromObjectFacing = removeDecalsFromObjectFacing;
    /**
     * No comment provided
     *
     * Hash: 0xE91F1B65F2B48D57 | Since: 323
     */
    function removeDecalsFromVehicle(vehicle) {
        RemoveDecalsFromVehicle(vehicle);
    }
    graphics.removeDecalsFromVehicle = removeDecalsFromVehicle;
    /**
     * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
     *
     * Hash: 0x5D6B2D4830A67C62 | Since: 323
     */
    function removeDecalsInRange(pos, range) {
        RemoveDecalsInRange(pos.x, pos.y, pos.z, range);
    }
    graphics.removeDecalsInRange = removeDecalsInRange;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x61F95E5BB3E0A8C6 | Since: 323
     */
    function removeGrassCullSphere(handle) {
        Citizen.invokeNative('0x61F95E5BB3E0A8C6', handle);
    }
    graphics.removeGrassCullSphere = removeGrassCullSphere;
    /**
     * No comment provided
     *
     * Hash: 0xC401503DFE8D53CF | Since: 323
     */
    function removeParticleFx(ptfxHandle) {
        RemoveParticleFx(ptfxHandle, false);
    }
    graphics.removeParticleFx = removeParticleFx;
    /**
     * No comment provided
     *
     * Hash: 0xB8FEAEEBCC127425 | Since: 323
     */
    function removeParticleFxFromEntity(entity) {
        RemoveParticleFxFromEntity(entity);
    }
    graphics.removeParticleFxFromEntity = removeParticleFxFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xDD19FA1C6D657305 | Since: 323
     */
    function removeParticleFxInRange(pos, radius) {
        RemoveParticleFxInRange(pos.x, pos.y, pos.z, radius);
    }
    graphics.removeParticleFxInRange = removeParticleFxInRange;
    /**
     * No comment provided
     *
     * Hash: 0xF44A5456AC3F4F97 | Since: 323
     */
    function removeScaleformScriptHudMovie(hudComponent) {
        RemoveScaleformScriptHudMovie(hudComponent);
    }
    graphics.removeScaleformScriptHudMovie = removeScaleformScriptHudMovie;
    /**
     * No comment provided
     *
     * Hash: 0xD2300034310557E4 | Since: 323
     */
    function removeVehicleCrewEmblem(vehicle) {
        RemoveVehicleCrewEmblem(vehicle, 0);
    }
    graphics.removeVehicleCrewEmblem = removeVehicleCrewEmblem;
    /**
     * No comment provided
     *
     * Hash: 0x03300B57FCAC6DDB | Since: 323
     */
    function renderShadowedLightsWithNoShadows() {
        Citizen.invokeNative('0x03300B57FCAC6DDB', false);
    }
    graphics.renderShadowedLightsWithNoShadows = renderShadowedLightsWithNoShadows;
    /**
     * No comment provided
     *
     * Hash: 0x98EDF76A7271E4F2 | Since: 323
     */
    function requestEarlyLightCheck() {
        Citizen.invokeNative('0x98EDF76A7271E4F2');
    }
    graphics.requestEarlyLightCheck = requestEarlyLightCheck;
    /**
     * No comment provided
     *
     * Hash: 0x11FE353CF9733E6F | Since: 323
     */
    function requestScaleformMovie(scaleformName) {
        return RequestScaleformMovie(scaleformName);
    }
    graphics.requestScaleformMovie = requestScaleformMovie;
    /**
     * No comment provided
     *
     * Hash: 0xC514489CFB8AF806 | Since: 323
     */
    function requestScaleformMovieInstance(scaleformName) {
        return RequestScaleformMovieInstance(scaleformName);
    }
    graphics.requestScaleformMovieInstance = requestScaleformMovieInstance;
    /**
     * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
     *
     * These seem to be the only scaleforms ever requested by this native:
     * "breaking_news"
     * "desktop_pc"
     * "ECG_MONITOR"
     * "Hacking_PC"
     * "TEETH_PULLING"
     *
     * Note: Unless this hash is out-of-order, this native is next-gen only.
     *
     *
     * Hash: 0xBD06C611BB9048C2 | Since: 323
     */
    function requestScaleformMovieSkipRenderWhilePaused(scaleformName) {
        return RequestScaleformMovieSkipRenderWhilePaused(scaleformName);
    }
    graphics.requestScaleformMovieSkipRenderWhilePaused = requestScaleformMovieSkipRenderWhilePaused;
    /**
     * Another REQUEST_SCALEFORM_MOVIE equivalent.
     *
     * Hash: 0x65E7E78842E74CDB | Since: 372
     */
    function requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName) {
        return RequestScaleformMovieWithIgnoreSuperWidescreen(scaleformName);
    }
    graphics.requestScaleformMovieWithIgnoreSuperWidescreen = requestScaleformMovieWithIgnoreSuperWidescreen;
    /**
     * No comment provided
     *
     * Hash: 0x9304881D6F6537EA | Since: 323
     */
    function requestScaleformScriptHudMovie(hudComponent) {
        RequestScaleformScriptHudMovie(hudComponent);
    }
    graphics.requestScaleformScriptHudMovie = requestScaleformScriptHudMovie;
    /**
     * This function can requests texture dictonaries from following RPFs:
     * scaleform_generic.rpf
     * scaleform_minigames.rpf
     * scaleform_minimap.rpf
     * scaleform_web.rpf
     *
     * last param isnt a toggle
     *
     * Hash: 0xDFA2EF8E04127DD5 | Since: 323
     */
    function requestStreamedTextureDict(textureDict) {
        RequestStreamedTextureDict(textureDict, false);
    }
    graphics.requestStreamedTextureDict = requestStreamedTextureDict;
    /**
     * Sets an value related to timecycles.
     *
     * Hash: 0xE3E2C1B4C59DBC77 | Since: 323
     */
    function resetAdaptation() {
        Citizen.invokeNative('0xE3E2C1B4C59DBC77', 0);
    }
    graphics.resetAdaptation = resetAdaptation;
    /**
     * Resets the effect of SET_PARTICLE_FX_OVERRIDE
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x89C8553DD3274AAE | Since: 323
     */
    function resetParticleFxOverride(name) {
        ResetParticleFxOverride(name);
    }
    graphics.resetParticleFxOverride = resetParticleFxOverride;
    /**
     * No comment provided
     *
     * Hash: 0xE1C8709406F2C41C | Since: 323
     */
    function resetPausedRenderphases() {
        ResetPausedRenderphases();
    }
    graphics.resetPausedRenderphases = resetPausedRenderphases;
    /**
     * This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
     * This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
     *
     * Hash: 0xE3A3DB414A373DAB | Since: 323
     */
    function resetScriptGfxAlign() {
        ResetScriptGfxAlign();
    }
    graphics.resetScriptGfxAlign = resetScriptGfxAlign;
    /**
     * 1 match in 1 script. cellphone_controller.
     * p0 is -1 in scripts.
     *
     * Hash: 0x3DEC726C25A11BAC | Since: 323
     */
    function saveHighQualityPhoto(unused) {
        return SaveHighQualityPhoto(unused);
    }
    graphics.saveHighQualityPhoto = saveHighQualityPhoto;
    /**
     * Pushes a boolean for the Scaleform function onto the stack.
     *
     * Hash: 0xC58424BA936EB458 | Since: 323
     */
    function scaleformMovieMethodAddParamBool(value) {
        ScaleformMovieMethodAddParamBool(value);
    }
    graphics.scaleformMovieMethodAddParamBool = scaleformMovieMethodAddParamBool;
    /**
     * Pushes a float for the Scaleform function onto the stack.
     *
     * Hash: 0xD69736AAE04DB51A | Since: 323
     */
    function scaleformMovieMethodAddParamFloat(value) {
        ScaleformMovieMethodAddParamFloat(value);
    }
    graphics.scaleformMovieMethodAddParamFloat = scaleformMovieMethodAddParamFloat;
    /**
     * Pushes an integer for the Scaleform function onto the stack.
     *
     * Hash: 0xC3D0841A0CC546A6 | Since: 323
     */
    function scaleformMovieMethodAddParamInt(value) {
        ScaleformMovieMethodAddParamInt(value);
    }
    graphics.scaleformMovieMethodAddParamInt = scaleformMovieMethodAddParamInt;
    /**
     * No comment provided
     *
     * Hash: 0xEC52C631A1831C03 | Since: 323
     */
    function scaleformMovieMethodAddParamLatestBriefString(value) {
        ScaleformMovieMethodAddParamLatestBriefString(value);
    }
    graphics.scaleformMovieMethodAddParamLatestBriefString = scaleformMovieMethodAddParamLatestBriefString;
    /**
     * Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
     * Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).
     *
     * Hash: 0x77FE3402004CD1B0 | Since: 573
     */
    function scaleformMovieMethodAddParamLiteralString(_string) {
        ScaleformMovieMethodAddParamLiteralString(_string);
    }
    graphics.scaleformMovieMethodAddParamLiteralString = scaleformMovieMethodAddParamLiteralString;
    /**
     * No comment provided
     *
     * Hash: 0xE83A3E3557A56640 | Since: 323
     */
    function scaleformMovieMethodAddParamPlayerNameString(_string) {
        ScaleformMovieMethodAddParamPlayerNameString(_string);
    }
    graphics.scaleformMovieMethodAddParamPlayerNameString = scaleformMovieMethodAddParamPlayerNameString;
    /**
     * No comment provided
     *
     * Hash: 0xBA7148484BD90365 | Since: 323
     */
    function scaleformMovieMethodAddParamTextureNameString(_string) {
        ScaleformMovieMethodAddParamTextureNameString(_string);
    }
    graphics.scaleformMovieMethodAddParamTextureNameString = scaleformMovieMethodAddParamTextureNameString;
    /**
     * No comment provided
     *
     * Hash: 0x43DBAE39626CE83F | Since: 1290
     */
    function seethroughGetMaxThickness() {
        return SeethroughGetMaxThickness();
    }
    graphics.seethroughGetMaxThickness = seethroughGetMaxThickness;
    /**
     * No comment provided
     *
     * Hash: 0x70A64C0234EF522C | Since: 323
     */
    function seethroughReset() {
        SeethroughReset();
    }
    graphics.seethroughReset = seethroughReset;
    /**
     * No comment provided
     *
     * Hash: 0x1086127B3A63505E | Since: 573
     */
    function seethroughSetColorNear(red, green, blue) {
        SeethroughSetColorNear(red, green, blue);
    }
    graphics.seethroughSetColorNear = seethroughSetColorNear;
    /**
     * No comment provided
     *
     * Hash: 0x9D75795B9DC6EBBF | Since: 573
     */
    function seethroughSetFadeEnddistance(distance) {
        SeethroughSetFadeEndDistance(distance);
    }
    graphics.seethroughSetFadeEnddistance = seethroughSetFadeEnddistance;
    /**
     * No comment provided
     *
     * Hash: 0xA78DE25577300BA1 | Since: 573
     */
    function seethroughSetFadeStartdistance(distance) {
        SeethroughSetFadeStartDistance(distance);
    }
    graphics.seethroughSetFadeStartdistance = seethroughSetFadeStartdistance;
    /**
     * min: 0.0
     * max: 0.75
     *
     * Hash: 0xD7D0B00177485411 | Since: 323
     */
    function seethroughSetHeatscale(index, heatScale) {
        SeethroughSetHeatscale(index, heatScale);
    }
    graphics.seethroughSetHeatscale = seethroughSetHeatscale;
    /**
     * No comment provided
     *
     * Hash: 0x1636D7FC127B10D2 | Since: 573
     */
    function seethroughSetHighlightNoise(noise) {
        SeethroughSetHiLightNoise(noise);
    }
    graphics.seethroughSetHighlightNoise = seethroughSetHighlightNoise;
    /**
     * No comment provided
     *
     * Hash: 0x19E50EB6E33E1D28 | Since: 573
     */
    function seethroughSetHilightIntensity(intensity) {
        SeethroughSetHiLightIntensity(intensity);
    }
    graphics.seethroughSetHilightIntensity = seethroughSetHilightIntensity;
    /**
     * 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
     * min: 1.0
     * max: 10000.0
     *
     * Hash: 0x0C8FAC83902A62DF | Since: 573
     */
    function seethroughSetMaxThickness(thickness) {
        SeethroughSetMaxThickness(thickness);
    }
    graphics.seethroughSetMaxThickness = seethroughSetMaxThickness;
    /**
     * No comment provided
     *
     * Hash: 0xFEBFBFDFB66039DE | Since: 573
     */
    function seethroughSetNoiseMax(amount) {
        SeethroughSetNoiseAmountMax(amount);
    }
    graphics.seethroughSetNoiseMax = seethroughSetNoiseMax;
    /**
     * No comment provided
     *
     * Hash: 0xFF5992E1C9E65D05 | Since: 573
     */
    function seethroughSetNoiseMin(amount) {
        SeethroughSetNoiseAmountMin(amount);
    }
    graphics.seethroughSetNoiseMin = seethroughSetNoiseMin;
    /**
     * No comment provided
     *
     * Hash: 0xF3F776ADA161E47D | Since: 1604
     */
    function setArenaThemeAndVariationForTakenPhoto() {
        Citizen.invokeNative('0xF3F776ADA161E47D', undefined, 0);
    }
    graphics.setArenaThemeAndVariationForTakenPhoto = setArenaThemeAndVariationForTakenPhoto;
    /**
     * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
     * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
     *
     * Used in Humane Labs Heist for EMP.
     *
     * state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
     *
     * Hash: 0x1268615ACE24D504 | Since: 323
     */
    function setArtificialLightsState(state) {
        SetArtificialLightsState(state);
    }
    graphics.setArtificialLightsState = setArtificialLightsState;
    /**
     * If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
     *
     * Hash: 0xE2B187C0939B3D32 | Since: 2060
     */
    function setArtificialVehicleLightsState(toggle) {
        SetArtificialLightsStateAffectsVehicles(toggle);
    }
    graphics.setArtificialVehicleLightsState = setArtificialVehicleLightsState;
    /**
     * No comment provided
     *
     * Hash: 0x23BA6B0C2AD7B0D3 | Since: 323
     */
    function setBackfaceculling(toggle) {
        SetBackfaceculling(toggle);
    }
    graphics.setBackfaceculling = setBackfaceculling;
    /**
     * No comment provided
     *
     * Hash: 0x338D9F609FD632DB | Since: 1290
     */
    function setBinkMovie(name) {
        return SetBinkMovie(name);
    }
    graphics.setBinkMovie = setBinkMovie;
    /**
     * No comment provided
     *
     * Hash: 0xF816F2933752322D | Since: 1868
     */
    function setBinkMovieAudioFrontend(binkMovie) {
        SetBinkMovieUnk2(binkMovie, false);
    }
    graphics.setBinkMovieAudioFrontend = setBinkMovieAudioFrontend;
    /**
     * In percentage: 0.0 - 100.0
     *
     * Hash: 0x0CB6B3446855B57A | Since: 1290
     */
    function setBinkMovieTime(binkMovie, progress) {
        SetBinkMovieTime(binkMovie, progress);
    }
    graphics.setBinkMovieTime = setBinkMovieTime;
    /**
     * `binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)`
     *
     * Hash: 0xAFF33B1178172223 | Since: 1290
     */
    function setBinkMovieVolume(binkMovie, value) {
        SetBinkMovieVolume(binkMovie, value);
    }
    graphics.setBinkMovieVolume = setBinkMovieVolume;
    /**
     * No comment provided
     *
     * Hash: 0x6805D58CAA427B72 | Since: 1290
     */
    function setBinkShouldSkip(binkMovie, bShouldSkip) {
        SetBinkShouldSkip(binkMovie, bShouldSkip);
    }
    graphics.setBinkShouldSkip = setBinkShouldSkip;
    /**
     * This does not move an existing checkpoint... so wtf.
     *
     * Hash: 0xF51D36185993515D | Since: 323
     */
    function setCheckpointClipplaneWithPosNorm(checkpoint, pos, unkX, unkY, unkZ) {
        Citizen.invokeNative('0xF51D36185993515D', checkpoint, pos.x, pos.y, pos.z, unkX, unkY, unkZ);
    }
    graphics.setCheckpointClipplaneWithPosNorm = setCheckpointClipplaneWithPosNorm;
    /**
     * Sets the cylinder height of the checkpoint.
     *
     * Parameters:
     * * nearHeight - The height of the checkpoint when inside of the radius.
     * * farHeight - The height of the checkpoint when outside of the radius.
     * * radius - The radius of the checkpoint.
     *
     * Hash: 0x2707AAE9D9297D89 | Since: 323
     */
    function setCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius) {
        SetCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius);
    }
    graphics.setCheckpointCylinderHeight = setCheckpointCylinderHeight;
    /**
     * Unknown. Called after creating a checkpoint (type: 51) in the creators.
     *
     * Hash: 0x615D3925E87A3B26 | Since: 323
     */
    function setCheckpointDecalRotAlignedToCameraRot(checkpoint) {
        Citizen.invokeNative('0x615D3925E87A3B26', checkpoint);
    }
    graphics.setCheckpointDecalRotAlignedToCameraRot = setCheckpointDecalRotAlignedToCameraRot;
    /**
     * No comment provided
     *
     * Hash: 0x3C788E7F6438754D | Since: 1180
     */
    function setCheckpointDirection(checkpoint, pos) {
        Citizen.invokeNative('0x3C788E7F6438754D', checkpoint, pos.x, pos.y, pos.z);
    }
    graphics.setCheckpointDirection = setCheckpointDirection;
    /**
     * No comment provided
     *
     * Hash: 0xDB1EA9411C8911EC | Since: 1180
     */
    function setCheckpointForceDirection(checkpoint) {
        Citizen.invokeNative('0xDB1EA9411C8911EC', checkpoint);
    }
    graphics.setCheckpointForceDirection = setCheckpointForceDirection;
    /**
     * No comment provided
     *
     * Hash: 0xFCF6788FC4860CD4 | Since: 1734
     */
    function setCheckpointForceOldArrowPointing(checkpoint) {
        Citizen.invokeNative('0xFCF6788FC4860CD4', checkpoint);
    }
    graphics.setCheckpointForceOldArrowPointing = setCheckpointForceOldArrowPointing;
    /**
     * No comment provided
     *
     * Hash: 0x4B5B4DA5D79F1943 | Since: 323
     */
    function setCheckpointInsideCylinderHeightScale(checkpoint, scale) {
        SetCheckpointIconHeight(checkpoint, scale);
    }
    graphics.setCheckpointInsideCylinderHeightScale = setCheckpointInsideCylinderHeightScale;
    /**
     * No comment provided
     *
     * Hash: 0x44621483FF966526 | Since: 877
     */
    function setCheckpointInsideCylinderScale(checkpoint, scale) {
        SetCheckpointIconScale(checkpoint, scale);
    }
    graphics.setCheckpointInsideCylinderScale = setCheckpointInsideCylinderScale;
    /**
     * Sets the checkpoint color.
     *
     * Hash: 0x7167371E8AD747F7 | Since: 323
     */
    function setCheckpointRgba(checkpoint, red, green, blue, alpha) {
        SetCheckpointRgba(checkpoint, red, green, blue, alpha);
    }
    graphics.setCheckpointRgba = setCheckpointRgba;
    /**
     * Sets the checkpoint icon color.
     *
     * Hash: 0xB9EA40907C680580 | Since: 323
     */
    function setCheckpointRgba2(checkpoint, red, green, blue, alpha) {
        SetCheckpointRgba2(checkpoint, red, green, blue, alpha);
    }
    graphics.setCheckpointRgba2 = setCheckpointRgba2;
    /**
     * No comment provided
     *
     * Hash: 0xBBF327DED94E4DEB | Since: 323
     */
    function setCurrentPlayerTcmodifier(modifierName) {
        SetCurrentPlayerTcmodifier(modifierName);
    }
    graphics.setCurrentPlayerTcmodifier = setCurrentPlayerTcmodifier;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x175B6BFC15CDD0C5 | Since: 323
     */
    function setDebugLinesAndSpheresDrawingActive(enabled) {
        SetDebugLinesAndSpheresDrawingActive(enabled);
    }
    graphics.setDebugLinesAndSpheresDrawingActive = setDebugLinesAndSpheresDrawingActive;
    /**
     * No comment provided
     *
     * Hash: 0x46D1A61A21F566FC | Since: 323
     */
    function setDecalBulletImpactRangeScale() {
        Citizen.invokeNative('0x46D1A61A21F566FC', 0);
    }
    graphics.setDecalBulletImpactRangeScale = setDecalBulletImpactRangeScale;
    /**
     * No comment provided
     *
     * Hash: 0xC5C8F970D4EDFF71 | Since: 877
     */
    function setDepthwriting(toggle) {
        Citizen.invokeNative('0xC5C8F970D4EDFF71', toggle);
    }
    graphics.setDepthwriting = setDepthwriting;
    /**
     * No comment provided
     *
     * Hash: 0x4B5CFC83122DF602 | Since: 323
     */
    function setDisableDecalRenderingThisFrame() {
        SetDisableDecalRenderingThisFrame();
    }
    graphics.setDisableDecalRenderingThisFrame = setDisableDecalRenderingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xD9454B5752C857DC | Since: 323
     */
    function setDisablePetrolDecalsIgnitingThisFrame() {
        SetDisablePetrolDecalsIgnitingThisFrame();
    }
    graphics.setDisablePetrolDecalsIgnitingThisFrame = setDisablePetrolDecalsIgnitingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x27CFB1B1E078CB2D | Since: 323
     */
    function setDisablePetrolDecalsRecyclingThisFrame() {
        Citizen.invokeNative('0x27CFB1B1E078CB2D');
    }
    graphics.setDisablePetrolDecalsRecyclingThisFrame = setDisablePetrolDecalsRecyclingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xE2892E7E55D7073A | Since: 323
     */
    function setDistanceBlurStrengthOverride() {
        Citizen.invokeNative('0xE2892E7E55D7073A', 0);
    }
    graphics.setDistanceBlurStrengthOverride = setDistanceBlurStrengthOverride;
    /**
     * Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
     * From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
     *
     * Example in C#:
     * Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
     * Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
     * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
     * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
     * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
     * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
     * Function.Call(Hash.CLEAR_DRAW_ORIGIN);
     *
     * Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
     * If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.
     *
     * This function also effects the drawing of texts and other UI-elements.
     * `The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().`
     *
     * Hash: 0xAA0008F3BBB8F416 | Since: 323
     */
    function setDrawOrigin(pos) {
        SetDrawOrigin(pos.x, pos.y, pos.z, false);
    }
    graphics.setDrawOrigin = setDrawOrigin;
    /**
     * No comment provided
     *
     * Hash: 0x1D5F595CCAE2E238 | Since: 323
     */
    function setEntityIconColor(entity, red, green, blue, alpha) {
        SetEntityIconColor(entity, red, green, blue, alpha);
    }
    graphics.setEntityIconColor = setEntityIconColor;
    /**
     * No comment provided
     *
     * Hash: 0xE0E8BEECCA96BA31 | Since: 323
     */
    function setEntityIconVisibility(entity, toggle) {
        SetEntityIconVisibility(entity, toggle);
    }
    graphics.setEntityIconVisibility = setEntityIconVisibility;
    /**
     * No comment provided
     *
     * Hash: 0xEF398BEEE4EF45F9 | Since: 323
     */
    function setExposuretweak(toggle) {
        Citizen.invokeNative('0xEF398BEEE4EF45F9', toggle);
    }
    graphics.setExposuretweak = setExposuretweak;
    /**
     * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
     *
     * Hash: 0x5096FD9CCB49056D | Since: 323
     */
    function setExtraTcmodifier(modifierName) {
        SetExtraTimecycleModifier(modifierName);
    }
    graphics.setExtraTcmodifier = setExtraTcmodifier;
    /**
     * Purpose of p0 and p1 unknown.
     *
     * Hash: 0x0AB84296FED9CFC6 | Since: 323
     */
    function setFlash(fadeIn, duration, fadeOut) {
        SetFlash(0, 0, fadeIn, duration, fadeOut);
    }
    graphics.setFlash = setFlash;
    /**
     * No comment provided
     *
     * Hash: 0x6A51F78772175A51 | Since: 1011
     */
    function setForceMotionblur(toggle) {
        Citizen.invokeNative('0x6A51F78772175A51', toggle);
    }
    graphics.setForceMotionblur = setForceMotionblur;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xBE197EAA669238F4 | Since: 323
     */
    function setGrassCullSphere() {
        return Citizen.invokeNative('0xBE197EAA669238F4', 0, 0, 0, 0);
    }
    graphics.setGrassCullSphere = setGrassCullSphere;
    /**
     * No comment provided
     *
     * Hash: 0xBA3D65906822BED5 | Since: 323
     */
    function setHidofOverride(nearplaneOut, nearplaneIn, farplaneOut, farplaneIn) {
        SetHidofOverride(false, false, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
    }
    graphics.setHidofOverride = setHidofOverride;
    /**
     * No comment provided
     *
     * Hash: 0x9641588DAB93B4B5 | Since: 877
     */
    function setLightOverrideMaxIntensityScale() {
        Citizen.invokeNative('0x9641588DAB93B4B5', undefined);
    }
    graphics.setLightOverrideMaxIntensityScale = setLightOverrideMaxIntensityScale;
    /**
     * No comment provided
     *
     * Hash: 0xB569F41F3E7E83A4 | Since: 1103
     */
    function setLockAdaptiveDofDistance() {
        Citizen.invokeNative('0xB569F41F3E7E83A4', false);
    }
    graphics.setLockAdaptiveDofDistance = setLockAdaptiveDofDistance;
    /**
     * Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
     *
     * Hash: 0xB3C641F3630BF6DA | Since: 323
     */
    function setMotionblurMaxVelScaler() {
        Citizen.invokeNative('0xB3C641F3630BF6DA', 0);
    }
    graphics.setMotionblurMaxVelScaler = setMotionblurMaxVelScaler;
    /**
     * No comment provided
     *
     * Hash: 0xBF59707B3E5ED531 | Since: 323
     */
    function setNextPlayerTcmodifier(modifierName) {
        SetNextPlayerTcmodifier(modifierName);
    }
    graphics.setNextPlayerTcmodifier = setNextPlayerTcmodifier;
    /**
     * Enables Night Vision.
     *
     * Example:
     * C#: Function.Call(Hash.SET_NIGHTVISION, true);
     * `C++: GRAPHICS::SET_NIGHTVISION(true);`
     *
     * BOOL toggle:
     * true = turns night vision on for your player.
     * false = turns night vision off for your player.
     *
     * Hash: 0x18F621F7A5B1F85D | Since: 323
     */
    function setNightvision(toggle) {
        SetNightvision(toggle);
    }
    graphics.setNightvision = setNightvision;
    /**
     * No comment provided
     *
     * Hash: 0xE787BF1C5CF823C9 | Since: 323
     */
    function setNoiseoveride(toggle) {
        SetNoiseoveride(toggle);
    }
    graphics.setNoiseoveride = setNoiseoveride;
    /**
     * No comment provided
     *
     * Hash: 0xCB6A7C3BB17A0C67 | Since: 323
     */
    function setNoisinessoveride(value) {
        SetNoisinessoveride(value);
    }
    graphics.setNoisinessoveride = setNoisinessoveride;
    /**
     * No comment provided
     *
     * Hash: 0xADD6627C4D325458 | Since: 2189
     */
    function setOnIslandXForTakenPhoto() {
        Citizen.invokeNative('0xADD6627C4D325458', undefined);
    }
    graphics.setOnIslandXForTakenPhoto = setOnIslandXForTakenPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x54E22EA2C1956A8D | Since: 323
     */
    function setParticleFxBangScrapeLodrangeScale() {
        Citizen.invokeNative('0x54E22EA2C1956A8D', 0);
    }
    graphics.setParticleFxBangScrapeLodrangeScale = setParticleFxBangScrapeLodrangeScale;
    /**
     * No comment provided
     *
     * Hash: 0x908311265D42A820 | Since: 323
     */
    function setParticleFxBloodScale() {
        Citizen.invokeNative('0x908311265D42A820', undefined);
    }
    graphics.setParticleFxBloodScale = setParticleFxBloodScale;
    /**
     * No comment provided
     *
     * Hash: 0xBB90E12CAC1DAB25 | Since: 323
     */
    function setParticleFxBulletImpactLodrangeScale() {
        Citizen.invokeNative('0xBB90E12CAC1DAB25', 0);
    }
    graphics.setParticleFxBulletImpactLodrangeScale = setParticleFxBulletImpactLodrangeScale;
    /**
     * No comment provided
     *
     * Hash: 0x27E32866E9A5C416 | Since: 323
     */
    function setParticleFxBulletImpactScale(scale) {
        SetParticleFxBulletImpactScale(scale);
    }
    graphics.setParticleFxBulletImpactScale = setParticleFxBulletImpactScale;
    /**
     * No comment provided
     *
     * Hash: 0xCA4AE345A153D573 | Since: 323
     */
    function setParticleFxBulletTraceNoAngleReject() {
        Citizen.invokeNative('0xCA4AE345A153D573', false);
    }
    graphics.setParticleFxBulletTraceNoAngleReject = setParticleFxBulletTraceNoAngleReject;
    /**
     * No comment provided
     *
     * Hash: 0xACEE6F360FC1F6B6 | Since: 323
     */
    function setParticleFxCamInsideNonplayerVehicle(vehicle) {
        SetParticleFxCamInsideNonplayerVehicle(vehicle, false);
    }
    graphics.setParticleFxCamInsideNonplayerVehicle = setParticleFxCamInsideNonplayerVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xEEC4047028426510 | Since: 323
     */
    function setParticleFxCamInsideVehicle() {
        SetParticleFxCamInsideVehicle(false);
    }
    graphics.setParticleFxCamInsideVehicle = setParticleFxCamInsideVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x949F397A288B28B3 | Since: 323
     */
    function setParticleFxFootLodrangeScale() {
        Citizen.invokeNative('0x949F397A288B28B3', 0);
    }
    graphics.setParticleFxFootLodrangeScale = setParticleFxFootLodrangeScale;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xBA3D194057C79A7B | Since: 877
     */
    function setParticleFxFootOverrideName() {
        Citizen.invokeNative('0xBA3D194057C79A7B', undefined);
    }
    graphics.setParticleFxFootOverrideName = setParticleFxFootOverrideName;
    /**
     * Used only once in the scripts (taxi_clowncar)
     *
     * Hash: 0x8CDE909A0370BB3A | Since: 323
     */
    function setParticleFxForceVehicleInterior(toggle) {
        Citizen.invokeNative('0x8CDE909A0370BB3A', toggle);
    }
    graphics.setParticleFxForceVehicleInterior = setParticleFxForceVehicleInterior;
    /**
     * No comment provided
     *
     * Hash: 0x726845132380142E | Since: 323
     */
    function setParticleFxLoopedAlpha(ptfxHandle, alpha) {
        SetParticleFxLoopedAlpha(ptfxHandle, alpha);
    }
    graphics.setParticleFxLoopedAlpha = setParticleFxLoopedAlpha;
    /**
     * only works on some fx's
     *
     * p4 = 0
     *
     * Hash: 0x7F8F65877F88783B | Since: 323
     */
    function setParticleFxLoopedColour(ptfxHandle, r, g, b) {
        SetParticleFxLoopedColour(ptfxHandle, r, g, b, false);
    }
    graphics.setParticleFxLoopedColour = setParticleFxLoopedColour;
    /**
     * No comment provided
     *
     * Hash: 0x5F0C4B5B1C393BE2 | Since: 323
     */
    function setParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork) {
        SetParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork);
    }
    graphics.setParticleFxLoopedEvolution = setParticleFxLoopedEvolution;
    /**
     * No comment provided
     *
     * Hash: 0xDCB194B85EF7B541 | Since: 323
     */
    function setParticleFxLoopedFarClipDist(ptfxHandle, range) {
        SetParticleFxLoopedFarClipDist(ptfxHandle, range);
    }
    graphics.setParticleFxLoopedFarClipDist = setParticleFxLoopedFarClipDist;
    /**
     * No comment provided
     *
     * Hash: 0xF7DDEBEC43483C43 | Since: 323
     */
    function setParticleFxLoopedOffsets(ptfxHandle, pos, rot) {
        SetParticleFxLoopedOffsets(ptfxHandle, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z);
    }
    graphics.setParticleFxLoopedOffsets = setParticleFxLoopedOffsets;
    /**
     * No comment provided
     *
     * Hash: 0xB44250AAA456492D | Since: 323
     */
    function setParticleFxLoopedScale(ptfxHandle, scale) {
        SetParticleFxLoopedScale(ptfxHandle, scale);
    }
    graphics.setParticleFxLoopedScale = setParticleFxLoopedScale;
    /**
     * Usage example for C#:
     *
     * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
     *
     * Note: the argument alpha ranges from 0.0f-1.0f !
     *
     * Hash: 0x77168D722C58B2FC | Since: 323
     */
    function setParticleFxNonLoopedAlpha(alpha) {
        SetParticleFxNonLoopedAlpha(alpha);
    }
    graphics.setParticleFxNonLoopedAlpha = setParticleFxNonLoopedAlpha;
    /**
     * only works on some fx's, not networked
     *
     * Hash: 0x26143A59EF48B262 | Since: 323
     */
    function setParticleFxNonLoopedColour(r, g, b) {
        SetParticleFxNonLoopedColour(r, g, b);
    }
    graphics.setParticleFxNonLoopedColour = setParticleFxNonLoopedColour;
    /**
     * No comment provided
     *
     * Hash: 0x1E2E01C00837D26E | Since: 2699
     */
    function setParticleFxNonLoopedEmitterSize(scale) {
        SetParticleFxNonLoopedEmitterScale(0, 0, scale);
    }
    graphics.setParticleFxNonLoopedEmitterSize = setParticleFxNonLoopedEmitterSize;
    /**
     * No comment provided
     *
     * Hash: 0xB7EF5850C39FABCA | Since: 2802
     */
    function setParticleFxNonLoopedScale(scale) {
        Citizen.invokeNative('0xB7EF5850C39FABCA', scale);
    }
    graphics.setParticleFxNonLoopedScale = setParticleFxNonLoopedScale;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xEA1E2D93F6F75ED9 | Since: 323
     */
    function setParticleFxOverride(oldAsset, newAsset) {
        SetParticleFxOverride(oldAsset, newAsset);
    }
    graphics.setParticleFxOverride = setParticleFxOverride;
    /**
     * No comment provided
     *
     * Hash: 0x96EF97DAEB89BEF5 | Since: 323
     */
    function setParticleFxShootoutBoat() {
        SetParticleFxShootoutBoat(undefined);
    }
    graphics.setParticleFxShootoutBoat = setParticleFxShootoutBoat;
    /**
     * No comment provided
     *
     * Hash: 0x2B40A97646381508 | Since: 1011
     */
    function setParticleFxSlipstreamLodrangeScale(scale) {
        Citizen.invokeNative('0x2B40A97646381508', scale);
    }
    graphics.setParticleFxSlipstreamLodrangeScale = setParticleFxSlipstreamLodrangeScale;
    /**
     * No comment provided
     *
     * Hash: 0xBDEB86F4D5809204 | Since: 323
     */
    function setPlayerTcmodifierTransition(value) {
        SetPlayerTcmodifierTransition(value);
    }
    graphics.setPlayerTcmodifierTransition = setPlayerTcmodifierTransition;
    /**
     * No comment provided
     *
     * Hash: 0xC6730E0D14E50703 | Since: 2545
     */
    function setPtfxForceVehicleInteriorFlag() {
        Citizen.invokeNative('0xC6730E0D14E50703', undefined);
    }
    graphics.setPtfxForceVehicleInteriorFlag = setPtfxForceVehicleInteriorFlag;
    /**
     * No comment provided
     *
     * Hash: 0x1D132D614DD86811 | Since: 323
     */
    function setScaleformMovieAsNoLongerNeeded(scaleformHandle) {
        SetScaleformMovieAsNoLongerNeeded(scaleformHandle);
    }
    graphics.setScaleformMovieAsNoLongerNeeded = setScaleformMovieAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x32F34FF7F617643B | Since: 573
     */
    function setScaleformMovieToUseLargeRt(scaleformHandle, toggle) {
        SetScaleformMovieToUseLargeRt(scaleformHandle, toggle);
    }
    graphics.setScaleformMovieToUseLargeRt = setScaleformMovieToUseLargeRt;
    /**
     * This native is used in some casino scripts to fit the scaleform in the rendertarget.
     *
     * Hash: 0xE6A9F00D4240B519 | Since: 877
     */
    function setScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle) {
        SetScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle);
    }
    graphics.setScaleformMovieToUseSuperLargeRt = setScaleformMovieToUseSuperLargeRt;
    /**
     * No comment provided
     *
     * Hash: 0x6D8EB211944DCE08 | Since: 323
     */
    function setScaleformMovieToUseSystemTime(scaleform, toggle) {
        SetScaleformMovieToUseSystemTime(scaleform, toggle);
    }
    graphics.setScaleformMovieToUseSystemTime = setScaleformMovieToUseSystemTime;
    /**
     * horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
     * verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').
     *
     * This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.
     *
     * These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.
     *
     * Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).
     *
     * For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.
     *
     * To reset the value, use RESET_SCRIPT_GFX_ALIGN.
     *
     * Hash: 0xB8A850F20A067EB6 | Since: 323
     */
    function setScriptGfxAlign(horizontalAlign, verticalAlign) {
        SetScriptGfxAlign(horizontalAlign, verticalAlign);
    }
    graphics.setScriptGfxAlign = setScriptGfxAlign;
    /**
     * Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
     *
     * Hash: 0xF5A2C681787E579D | Since: 323
     */
    function setScriptGfxAlignParams(x, y, w, h) {
        SetScriptGfxAlignParams(x, y, w, h);
    }
    graphics.setScriptGfxAlignParams = setScriptGfxAlignParams;
    /**
     * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
     *
     * Hash: 0xC6372ECD45D73BCD | Since: 323
     */
    function setScriptGfxDrawBehindPausemenu(toggle) {
        SetScriptGfxDrawBehindPausemenu(toggle);
    }
    graphics.setScriptGfxDrawBehindPausemenu = setScriptGfxDrawBehindPausemenu;
    /**
     * Sets the draw order for script draw commands.
     *
     * Examples from decompiled scripts:
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);`
     * `GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);`
     *
     * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);`
     * `GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);`
     *
     * Hash: 0x61BB1D9B3A95D802 | Since: 323
     */
    function setScriptGfxDrawOrder(drawOrder) {
        SetScriptGfxDrawOrder(drawOrder);
    }
    graphics.setScriptGfxDrawOrder = setScriptGfxDrawOrder;
    /**
     * Toggles Heatvision on/off.
     *
     * Hash: 0x7E08924259E08CE0 | Since: 323
     */
    function setSeethrough(toggle) {
        SetSeethrough(toggle);
    }
    graphics.setSeethrough = setSeethrough;
    /**
     * No comment provided
     *
     * Hash: 0x5DBF05DB5926D089 | Since: 1011
     */
    function setSkidmarkRangeScale(scale) {
        Citizen.invokeNative('0x5DBF05DB5926D089', scale);
    }
    graphics.setSkidmarkRangeScale = setSkidmarkRangeScale;
    /**
     * No comment provided
     *
     * Hash: 0xBE2CACCF5A8AA805 | Since: 323
     */
    function setStreamedTextureDictAsNoLongerNeeded(textureDict) {
        SetStreamedTextureDictAsNoLongerNeeded(textureDict);
    }
    graphics.setStreamedTextureDictAsNoLongerNeeded = setStreamedTextureDictAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x1BBC135A4D25EDDE | Since: 323
     */
    function setTakenPhotoIsMugshot(toggle) {
        Citizen.invokeNative('0x1BBC135A4D25EDDE', toggle);
    }
    graphics.setTakenPhotoIsMugshot = setTakenPhotoIsMugshot;
    /**
     * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
     *
     * Parameters:
     * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
     *
     * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
     *
     * Hash: 0x2C933ABF17A1DF41 | Since: 323
     */
    function setTimecycleModifier(modifierName) {
        SetTimecycleModifier(modifierName);
    }
    graphics.setTimecycleModifier = setTimecycleModifier;
    /**
     * No comment provided
     *
     * Hash: 0x82E7FFCD5B2326B3 | Since: 323
     */
    function setTimecycleModifierStrength(strength) {
        SetTimecycleModifierStrength(strength);
    }
    graphics.setTimecycleModifierStrength = setTimecycleModifierStrength;
    /**
     * No comment provided
     *
     * Hash: 0x164ECBB3CF750CB0 | Since: 323
     */
    function setTrackedPointInfo(point, pos, radius) {
        SetTrackedPointInfo(point, pos.x, pos.y, pos.z, radius);
    }
    graphics.setTrackedPointInfo = setTrackedPointInfo;
    /**
     * No comment provided
     *
     * Hash: 0x1CBA05AE7BD7EE05 | Since: 323
     */
    function setTransitionOutOfTimecycleModifier(strength) {
        Citizen.invokeNative('0x1CBA05AE7BD7EE05', strength);
    }
    graphics.setTransitionOutOfTimecycleModifier = setTransitionOutOfTimecycleModifier;
    /**
     * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
     *
     * Hash: 0x3BCF567485E1971C | Since: 323
     */
    function setTransitionTimecycleModifier(modifierName, transition) {
        SetTransitionTimecycleModifier(modifierName, transition);
    }
    graphics.setTransitionTimecycleModifier = setTransitionTimecycleModifier;
    /**
     * Probably changes tvs from being a 3d audio to being "global" audio
     *
     * Hash: 0x113D2C5DC57E1774 | Since: 323
     */
    function setTvAudioFrontend(toggle) {
        SetTvAudioFrontend(toggle);
    }
    graphics.setTvAudioFrontend = setTvAudioFrontend;
    /**
     * No comment provided
     *
     * Hash: 0xBAABBB23EB6E484E | Since: 323
     */
    function setTvChannel(channel) {
        SetTvChannel(channel);
    }
    graphics.setTvChannel = setTvChannel;
    /**
     * Loads specified video sequence into the TV Channel
     * TV_Channel ranges from 0-2
     * VideoSequence can be any of the following:
     * "PL_STD_CNT" CNT Standard Channel
     * "PL_STD_WZL" Weazel Standard Channel
     * "PL_LO_CNT"
     * "PL_LO_WZL"
     * "PL_SP_WORKOUT"
     * "PL_SP_INV" - Jay Norris Assassination Mission Fail
     * "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
     * "PL_LO_RS" - Righteous Slaughter Ad
     * "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
     * "PL_SP_PLSH1_INTRO"
     * "PL_LES1_FAME_OR_SHAME"
     * "PL_STD_WZL_FOS_EP2"
     * "PL_MP_WEAZEL" - Weazel Logo on loop
     * "PL_MP_CCTV" - Generic CCTV loop
     *
     * Restart:
     * 0=video sequence continues as normal
     * 1=sequence restarts from beginning every time that channel is selected
     *
     *
     * The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
     * https://pastebin.com/zUzGB6h7
     *
     * Hash: 0xF7B38B8305F1FE8B | Since: 323
     */
    function setTvChannelPlaylist(tvChannel, playlistName, restart) {
        SetTvChannelPlaylist(tvChannel, playlistName, restart);
    }
    graphics.setTvChannelPlaylist = setTvChannelPlaylist;
    /**
     * No comment provided
     *
     * Hash: 0x2201C576FACAEBE8 | Since: 323
     */
    function setTvChannelPlaylistAtHour(tvChannel, playlistName, hour) {
        SetTvChannelPlaylistAtHour(tvChannel, playlistName, hour);
    }
    graphics.setTvChannelPlaylistAtHour = setTvChannelPlaylistAtHour;
    /**
     * No comment provided
     *
     * Hash: 0xD1C55B110E4DF534 | Since: 323
     */
    function setTvPlayerWatchingThisFrame() {
        Citizen.invokeNative('0xD1C55B110E4DF534', undefined);
    }
    graphics.setTvPlayerWatchingThisFrame = setTvPlayerWatchingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x2982BF73F66E9DDC | Since: 323
     */
    function setTvVolume(volume) {
        SetTvVolume(volume);
    }
    graphics.setTvVolume = setTvVolume;
    /**
     * No comment provided
     *
     * Hash: 0xF78B803082D4386F | Since: 323
     */
    function setWeatherPtfxOverrideCurrLevel() {
        Citizen.invokeNative('0xF78B803082D4386F', 0);
    }
    graphics.setWeatherPtfxOverrideCurrLevel = setWeatherPtfxOverrideCurrLevel;
    /**
     * No comment provided
     *
     * Hash: 0xA46B73FAA3460AE1 | Since: 323
     */
    function setWeatherPtfxUseOverrideSettings() {
        Citizen.invokeNative('0xA46B73FAA3460AE1', false);
    }
    graphics.setWeatherPtfxUseOverrideSettings = setWeatherPtfxUseOverrideSettings;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x6F60E89A7B64EE1D | Since: 323
     */
    function startNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot, scale, xAxis, yAxis, zAxis, r, g, b, a) {
        return StartNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis, r, g, b, a);
    }
    graphics.startNetworkedParticleFxLoopedOnEntity = startNetworkedParticleFxLoopedOnEntity;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xDDE23F30CC5A0F03 | Since: 323
     */
    function startNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a) {
        return StartNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a);
    }
    graphics.startNetworkedParticleFxLoopedOnEntityBone = startNetworkedParticleFxLoopedOnEntityBone;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xF56B8137DF10135D | Since: 323
     */
    function startNetworkedParticleFxNonLoopedAtCoord(effectName, pos, rot, scale, xAxis, yAxis, zAxis) {
        return StartNetworkedParticleFxNonLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis, false);
    }
    graphics.startNetworkedParticleFxNonLoopedAtCoord = startNetworkedParticleFxNonLoopedAtCoord;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xC95EB1DB6E92113D | Since: 323
     */
    function startNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot, scale, axisX, axisY, axisZ) {
        return StartNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, scale, axisX, axisY, axisZ);
    }
    graphics.startNetworkedParticleFxNonLoopedOnEntity = startNetworkedParticleFxNonLoopedOnEntity;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xA41B6A43642AC2CF | Since: 323
     */
    function startNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rot, boneIndex, scale, axisX, axisY, axisZ) {
        return StartNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }
    graphics.startNetworkedParticleFxNonLoopedOnPedBone = startNetworkedParticleFxNonLoopedOnPedBone;
    /**
     * `GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)`
     *
     *
     * p11 seems to be always 0
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xE184F4F0DC5910E7 | Since: 323
     */
    function startParticleFxLoopedAtCoord(effectName, pos, rot, scale, xAxis, yAxis, zAxis) {
        return StartParticleFxLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis, false);
    }
    graphics.startParticleFxLoopedAtCoord = startParticleFxLoopedAtCoord;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x1AE42C1660FD6517 | Since: 323
     */
    function startParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot, scale, xAxis, yAxis, zAxis) {
        return StartParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis);
    }
    graphics.startParticleFxLoopedOnEntity = startParticleFxLoopedOnEntity;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xC6EB449E33977F0B | Since: 323
     */
    function startParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot, boneIndex, scale, xAxis, yAxis, zAxis) {
        return StartParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis);
    }
    graphics.startParticleFxLoopedOnEntityBone = startParticleFxLoopedOnEntityBone;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0xF28DA9F38CD1787C | Since: 323
     */
    function startParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, rot, boneIndex, scale, xAxis, yAxis, zAxis) {
        return StartParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, rot.x, rot.y, rot.z, boneIndex, scale, xAxis, yAxis, zAxis);
    }
    graphics.startParticleFxLoopedOnPedBone = startParticleFxLoopedOnPedBone;
    /**
     * `GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);`
     *
     * Axis - Invert Axis Flags
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     *
     * -------------------------------------------------------------------
     * C#
     *
     * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
     *
     * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
     *
     * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
     *
     * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
     *
     * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
     *
     * bool xaxis, yaxis, zaxis = To bool the axis values.
     *
     * example:
     * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
     *
     * Hash: 0x25129531F77B9ED3 | Since: 323
     */
    function startParticleFxNonLoopedAtCoord(effectName, pos, rot, scale, xAxis, yAxis, zAxis) {
        return StartParticleFxNonLoopedAtCoord(effectName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, scale, xAxis, yAxis, zAxis);
    }
    graphics.startParticleFxNonLoopedAtCoord = startParticleFxNonLoopedAtCoord;
    /**
     * Starts a particle effect on an entity for example your player.
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Example:
     * C#:
     * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
     *
     * `Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE`
     * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
     *
     * -can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
     *
     * Hash: 0x0D53A3B8DA0809D2 | Since: 323
     */
    function startParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot, scale, axisX, axisY, axisZ) {
        return StartParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, scale, axisX, axisY, axisZ);
    }
    graphics.startParticleFxNonLoopedOnEntity = startParticleFxNonLoopedOnEntity;
    /**
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x02B1F2A72E0F5325 | Since: 2189
     */
    function startParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rot, boneIndex, scale, axisX, axisY, axisZ) {
        return StartNetworkedParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }
    graphics.startParticleFxNonLoopedOnEntityBone = startParticleFxNonLoopedOnEntityBone;
    /**
     * `GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);`
     *
     * Axis - Invert Axis Flags
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x0E7E72961BA18619 | Since: 323
     */
    function startParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rot, boneIndex, scale, axisX, axisY, axisZ) {
        return StartParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rot.x, rot.y, rot.z, boneIndex, scale, axisX, axisY, axisZ);
    }
    graphics.startParticleFxNonLoopedOnPedBone = startParticleFxNonLoopedOnPedBone;
    /**
     * No comment provided
     *
     * Hash: 0x99AC7F0D8B9C893D | Since: 323
     */
    function startPetrolTrailDecals() {
        StartPetrolTrailDecals(0);
    }
    graphics.startPetrolTrailDecals = startPetrolTrailDecals;
    /**
     * No comment provided
     *
     * Hash: 0x63606A61DE68898A | Since: 1290
     */
    function stopBinkMovie(binkMovie) {
        StopBinkMovie(binkMovie);
    }
    graphics.stopBinkMovie = stopBinkMovie;
    /**
     * p1 is always 0 in the native scripts
     *
     * Hash: 0x8F75998877616996 | Since: 323
     */
    function stopParticleFxLooped(ptfxHandle) {
        StopParticleFxLooped(ptfxHandle, false);
    }
    graphics.stopParticleFxLooped = stopParticleFxLooped;
    /**
     * This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
     * This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
     *
     * Hash: 0xA356990E161C9E65 | Since: 323
     */
    function terraingridActivate(toggle) {
        TerraingridActivate(toggle);
    }
    graphics.terraingridActivate = terraingridActivate;
    /**
     * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
     * This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
     * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
     *
     * Hash: 0x5CE62918F8D703C7 | Since: 323
     */
    function terraingridSetColours(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha) {
        TerraingridSetColours(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
    }
    graphics.terraingridSetColours = terraingridSetColours;
    /**
     * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
     * This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
     *
     * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
     *
     * This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
     * The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
     * normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.
     *
     * Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
     *
     * Hash: 0x1C4FC5752BCD8E48 | Since: 323
     */
    function terraingridSetParams(pos, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff) {
        TerraingridSetParams(pos.x, pos.y, pos.z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff);
    }
    graphics.terraingridSetParams = terraingridSetParams;
    /**
     * No comment provided
     *
     * Hash: 0xDFC252D8A3E15AB7 | Since: 323
     */
    function togglePausedRenderphases(toggle) {
        TogglePausedRenderphases(toggle);
    }
    graphics.togglePausedRenderphases = togglePausedRenderphases;
    /**
     * No comment provided
     *
     * Hash: 0xE63D7C6EECECB66B | Since: 323
     */
    function togglePlayerDamageOverlay(toggle) {
        Citizen.invokeNative('0xE63D7C6EECECB66B', toggle);
    }
    graphics.togglePlayerDamageOverlay = togglePlayerDamageOverlay;
    /**
     * time in ms to transition to fully blurred screen
     *
     * Hash: 0xA328A24AAA6B7FDC | Since: 323
     */
    function triggerScreenblurFadeIn(transitionTime) {
        return TriggerScreenblurFadeIn(transitionTime);
    }
    graphics.triggerScreenblurFadeIn = triggerScreenblurFadeIn;
    /**
     * time in ms to transition from fully blurred to normal
     *
     * Hash: 0xEFACC8AEF94430D5 | Since: 323
     */
    function triggerScreenblurFadeOut(transitionTime) {
        return TriggerScreenblurFadeOut(transitionTime);
    }
    graphics.triggerScreenblurFadeOut = triggerScreenblurFadeOut;
    /**
     * It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET
     *
     * presetName was always "CELEBRATION_WINNER"
     * All presets can be found in common\data\ui\uiscenes.meta
     *
     * Hash: 0x98C4FE6EC34154CA | Since: 323
     */
    function ui3dsceneAssignPedToSlot(presetName, ped, slot, pos) {
        return DrawShowroom(presetName, ped, slot, pos.x, pos.y, pos.z);
    }
    graphics.ui3dsceneAssignPedToSlot = ui3dsceneAssignPedToSlot;
    /**
     * No comment provided
     *
     * Hash: 0x7A42B2E236E71415 | Since: 323
     */
    function ui3dsceneClearPatchedData() {
        Citizen.invokeNative('0x7A42B2E236E71415');
    }
    graphics.ui3dsceneClearPatchedData = ui3dsceneClearPatchedData;
    /**
     * No comment provided
     *
     * Hash: 0xD3A10FC7FD8D98CD | Since: 323
     */
    function ui3dsceneIsAvailable() {
        return Ui3dsceneIsAvailable();
    }
    graphics.ui3dsceneIsAvailable = ui3dsceneIsAvailable;
    /**
     * No comment provided
     *
     * Hash: 0x108BE26959A9D9BB | Since: 323
     */
    function ui3dsceneMakePushedPresetPersistent(toggle) {
        Citizen.invokeNative('0x108BE26959A9D9BB', toggle);
    }
    graphics.ui3dsceneMakePushedPresetPersistent = ui3dsceneMakePushedPresetPersistent;
    /**
     * All presets can be found in common\data\ui\uiscenes.meta
     *
     * Hash: 0xF1CEA8A4198D8E9A | Since: 323
     */
    function ui3dscenePushPreset(presetName) {
        return Ui3dscenePushPreset(presetName);
    }
    graphics.ui3dscenePushPreset = ui3dscenePushPreset;
    /**
     * No comment provided
     *
     * Hash: 0xB7ED70C49521A61D | Since: 323
     */
    function unpatchDecalDiffuseMap(decalType) {
        UnpatchDecalDiffuseMap(decalType);
    }
    graphics.unpatchDecalDiffuseMap = unpatchDecalDiffuseMap;
    /**
     * No comment provided
     *
     * Hash: 0xDEADC0DEDEADC0DE | Since: 323
     */
    function updateLightsOnEntity(entity) {
        UpdateLightsOnEntity(entity);
    }
    graphics.updateLightsOnEntity = updateLightsOnEntity;
    /**
     * From the b678d decompiled scripts:
     *
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("FM_Mission_Controler");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_apartment_mp");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_indep_fireworks");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_cig_plane");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_creator");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_ornate_heist");`
     * `GRAPHICS::USE_PARTICLE_FX_ASSET("scr_prison_break_heist_station");`
     *
     * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
     *
     * Hash: 0x6C38AF3693A69A91 | Since: 323
     */
    function useParticleFxAsset(name) {
        UseParticleFxAsset(name);
    }
    graphics.useParticleFxAsset = useParticleFxAsset;
    /**
     * Forces footstep tracks on all surfaces.
     *
     * Hash: 0xAEEDAD1420C65CC0 | Since: 323
     */
    function useSnowFootVfxWhenUnsheltered(toggle) {
        SetForcePedFootstepsTracks(toggle);
    }
    graphics.useSnowFootVfxWhenUnsheltered = useSnowFootVfxWhenUnsheltered;
    /**
     * Forces vehicle trails on all surfaces.
     *
     * Hash: 0x4CC7F0FEA5283FE0 | Since: 323
     */
    function useSnowWheelVfxWhenUnsheltered(toggle) {
        SetForceVehicleTrails(toggle);
    }
    graphics.useSnowWheelVfxWhenUnsheltered = useSnowWheelVfxWhenUnsheltered;
    /**
     * No comment provided
     *
     * Hash: 0x5B712761429DBC14 | Since: 323
     */
    function washDecalsFromVehicle(vehicle) {
        WashDecalsFromVehicle(vehicle, 0);
    }
    graphics.washDecalsFromVehicle = washDecalsFromVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x9C30613D50A6ADEF | Since: 323
     */
    function washDecalsInRange(pos, range) {
        WashDecalsInRange(pos.x, pos.y, pos.z, range, 0);
    }
    graphics.washDecalsInRange = washDecalsInRange;
    /**
     * No comment provided
     *
     * Hash: 0xCA465D9CC0D231BA | Since: 1011
     */
    function waterReflectionSetScriptObjectVisibility() {
        Citizen.invokeNative('0xCA465D9CC0D231BA', undefined);
    }
    graphics.waterReflectionSetScriptObjectVisibility = waterReflectionSetScriptObjectVisibility;
    /**
     * No comment provided
     *
     * Hash: 0xA342A3763B3AFB6C | Since: 3095
     */
    function forceAllowSnowFootVfxOnIce(toggle) {
        Citizen.invokeNative('0xA342A3763B3AFB6C', toggle);
    }
    graphics.forceAllowSnowFootVfxOnIce = forceAllowSnowFootVfxOnIce;
    /**
     * No comment provided
     *
     * Hash: 0x6E9EF3A33C8899F8 | Since: 3095
     */
    function forceGroundSnowPass(toggle) {
        Citizen.invokeNative('0x6E9EF3A33C8899F8', toggle);
    }
    graphics.forceGroundSnowPass = forceGroundSnowPass;
    /**
     * No comment provided
     *
     * Hash: 0x9743BCCF7CD6E1F6 | Since: 3407
     */
    function hasScaleformMovieNamedLoaded(scaleformName) {
        return Citizen.invokeNative('0x9743BCCF7CD6E1F6', scaleformName);
    }
    graphics.hasScaleformMovieNamedLoaded = hasScaleformMovieNamedLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x4100BF0346A8D2C3 | Since: 3095
     */
    function setParticleFxLoopedCameraBias(ptfxHandle) {
        Citizen.invokeNative('0x4100BF0346A8D2C3', ptfxHandle, 0);
    }
    graphics.setParticleFxLoopedCameraBias = setParticleFxLoopedCameraBias;
    /**
     * No comment provided
     *
     * Hash: 0x2FDFB1B04C76E9C3 | Since: 3407
     */
    function setScaleformMovieNamedAsNoLongerNeeded(scaleformHandle, scaleformName) {
        Citizen.invokeNative('0x2FDFB1B04C76E9C3', scaleformHandle, scaleformName);
    }
    graphics.setScaleformMovieNamedAsNoLongerNeeded = setScaleformMovieNamedAsNoLongerNeeded;
    /**
     * Does not actually return anything.
     *
     * Hash: 0xEE831F15A8D0D94A | Since: 3095
     */
    function setTvChannelPlaylistDirty(tvChannel) {
        return Citizen.invokeNative('0xEE831F15A8D0D94A', tvChannel, false);
    }
    graphics.setTvChannelPlaylistDirty = setTvChannelPlaylistDirty;
    /**
     * Returns ptfxHandle
     * effectName: scr_sv_drag_burnout
     *
     * Hash: 0xDF269BE2909E181A | Since: 3095
     */
    function startVehicleParticleFxLooped(vehicle, effectName, frontBack, leftRight, localOnly) {
        return Citizen.invokeNative('0xDF269BE2909E181A', vehicle, effectName, frontBack, leftRight, localOnly);
    }
    graphics.startVehicleParticleFxLooped = startVehicleParticleFxLooped;
})(graphics || (graphics = {}));
export var hud;
(function (hud) {
    /**
     * See [SET_SCRIPT_GFX_ALIGN](#\_0xB8A850F20A067EB6) for details about how gfx align works.
     *
     * Hash: 0xCD949E20 | Since: unknown
     */
    function getComponentAlign(id) {
        return Citizen.invokeNative('0xCD949E20', id);
    }
    hud.getComponentAlign = getComponentAlign;
    /**
     * No comment provided
     *
     * Hash: 0xA91866BC | Since: unknown
     */
    function getComponentName(id) {
        return Citizen.invokeNative('0xA91866BC', id);
    }
    hud.getComponentName = getComponentName;
    /**
     * No comment provided
     *
     * Hash: 0x12217D33 | Since: unknown
     */
    function getComponentSize(id) {
        return new Vector3(Citizen.invokeNative('0x12217D33', id));
    }
    hud.getComponentSize = getComponentSize;
    /**
     * Returns the zoom level data by index from mapzoomdata.meta file.
     *
     * Hash: 0x1363A998 | Since: unknown
     */
    function getMapZoomDataLevel(index) {
        return Citizen.invokeNative('0x1363A998', index);
    }
    hud.getMapZoomDataLevel = getMapZoomDataLevel;
    /**
     * Returns true if the minimap is currently expanded. False if it's the normal minimap state.
     * Use [`IsBigmapFull`](#\_0x66EE14B2) to check if the full map is currently revealed on the minimap.
     *
     * Hash: 0xFFF65C63 | Since: unknown
     */
    function isBigmapActive() {
        return Citizen.invokeNative('0xFFF65C63');
    }
    hud.isBigmapActive = isBigmapActive;
    /**
     * No comment provided
     *
     * Hash: 0x66EE14B2 | Since: unknown
     */
    function isBigmapFull() {
        return Citizen.invokeNative('0x66EE14B2');
    }
    hud.isBigmapFull = isBigmapFull;
    /**
     * Resets values from the zoom level data by index to defaults from mapzoomdata.meta.
     *
     * Hash: 0x11A5B7ED | Since: unknown
     */
    function resetMapZoomDataLevel(index) {
        Citizen.invokeNative('0x11A5B7ED', index);
    }
    hud.resetMapZoomDataLevel = resetMapZoomDataLevel;
    /**
     * See [SET_SCRIPT_GFX_ALIGN](#\_0xB8A850F20A067EB6) for details about how gfx align works.
     *
     * Hash: 0xEED219F2 | Since: unknown
     */
    function setComponentAlign(id, horizontalAlign, verticalAlign) {
        Citizen.invokeNative('0xEED219F2', id, horizontalAlign, verticalAlign);
    }
    hud.setComponentAlign = setComponentAlign;
    /**
     * No comment provided
     *
     * Hash: 0x7644A9FA | Since: unknown
     */
    function setComponentSize(id, x, y) {
        Citizen.invokeNative('0x7644A9FA', id, x, y);
    }
    hud.setComponentSize = setComponentSize;
    /**
     * Sets values to the zoom level data by index.
     *
     * Hash: 0x447C718E | Since: unknown
     */
    function setMapZoomDataLevel(index, zoomScale, zoomSpeed, scrollSpeed, tilesX, tilesY) {
        Citizen.invokeNative('0x447C718E', index, zoomScale, zoomSpeed, scrollSpeed, tilesX, tilesY);
    }
    hud.setMapZoomDataLevel = setMapZoomDataLevel;
    /**
     * Get the minimap type:
     *
     * ```
     * 0 = Off,
     * 1 = Regular,
     * 2 = Expanded,
     * 3 = Simple,
     * ```
     *
     * Hash: 0xA6FF71C9 | Since: unknown
     */
    function getMinimapType() {
        return Citizen.invokeNative('0xA6FF71C9');
    }
    hud.getMinimapType = getMinimapType;
    /**
     * Possible Types:
     *
     * ```
     * 0 = Off,
     * 1 = Regular,
     * 2 = Expanded,
     * 3 = Simple,
     * ```
     *
     * Hash: 0x5FB53015 | Since: unknown
     */
    function setMinimapType(_type) {
        Citizen.invokeNative('0x5FB53015', _type);
    }
    hud.setMinimapType = setMinimapType;
    /**
     * Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_COORD](?\_0x5A039BB0BCA604B6).</strong>
     *
     * Hash: 0xC6F43D0E | Since: unknown
     */
    function addBlipForCoord(pos) {
        return Citizen.invokeNative('0xC6F43D0E', pos.x, pos.y, pos.z);
    }
    hud.addBlipForCoord = addBlipForCoord;
    /**
     * Create a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\_0xC6F43D0E) to make it blue (friend).\
     * Can be used for objects, vehicles and peds.
     * Example of enemy:
     * ![enemy](https://i.imgur.com/fl78svv.png)
     * Example of friend:
     * ![friend](https://i.imgur.com/Q16ho5d.png)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_ENTITY](?\_0x5CDE92C702A8FCE7).</strong>
     *
     * Hash: 0x30822554 | Since: unknown
     */
    function addBlipForEntity(entity) {
        return Citizen.invokeNative('0x30822554', entity);
    }
    hud.addBlipForEntity = addBlipForEntity;
    /**
     * Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\_0xC6F43D0E))
     * Example image:
     * ![example](https://i.imgur.com/9hQl3DB.png)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [ADD_BLIP_FOR_RADIUS](?\_0x46818D79B1F7499A).</strong>
     *
     * Hash: 0x4626756C | Since: unknown
     */
    function addBlipForRadius(pos, radius) {
        return Citizen.invokeNative('0x4626756C', pos.x, pos.y, pos.z, radius);
    }
    hud.addBlipForRadius = addBlipForRadius;
    /**
     * Removes the blip from your map.
     * **Note:** This function only works on the script that created the blip, if you wish to remove blips created by other scripts, see [`SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT`](#\_0x86A652570E5F25DD).
     *
     * <strong>This is the server-side RPC native equivalent of the client native [REMOVE_BLIP](?\_0x86A652570E5F25DD).</strong>
     *
     * Hash: 0xD8C3C1CD | Since: unknown
     */
    function removeBlip(blip) {
        Citizen.invokeNative('0xD8C3C1CD', blip);
    }
    hud.removeBlip = removeBlip;
    /**
     * Sets the displayed sprite for a specific blip.
     * There's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_BLIP_SPRITE](?\_0xDF735600A4696DAF).</strong>
     *
     * Hash: 0x8DBBB0B9 | Since: unknown
     */
    function setBlipSprite(blip, spriteId) {
        Citizen.invokeNative('0x8DBBB0B9', blip, spriteId);
    }
    hud.setBlipSprite = setBlipSprite;
    /**
     * Adds a rectangular blip for the specified coordinates/area.
     * It is recommended to use [SET_BLIP_ROTATION](#\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.
     * By default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.
     * Example image:
     * ![minimap](https://i.imgur.com/qLbXWcQ.png)
     * ![big map](https://i.imgur.com/0j7O7Rh.png)
     * (Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [\_ADD_BLIP_FOR_AREA](?\_0xCE5D0E5E315DB238).</strong>
     *
     * Hash: 0x6228F159 | Since: unknown
     */
    function addBlipForArea(pos, width, height) {
        return Citizen.invokeNative('0x6228F159', pos.x, pos.y, pos.z, width, height);
    }
    hud.addBlipForArea = addBlipForArea;
    /**
     * Does stuff like this:
     * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
     *
     * Example:
     * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
     * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
     *
     * BOOL p1 is a toggle to define the game in pause.
     * int p2 is unknown but -1 always works, not sure why though.
     *
     * [30/03/2017] ins1de :
     *
     * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
     *
     * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
     * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
     * - FE_MENU_VERSION_SP_PAUSE
     * - FE_MENU_VERSION_MP_PAUSE
     * - FE_MENU_VERSION_CREATOR_PAUSE
     * - FE_MENU_VERSION_CUTSCENE_PAUSE
     * - FE_MENU_VERSION_SAVEGAME
     * - FE_MENU_VERSION_PRE_LOBBY
     * - FE_MENU_VERSION_LOBBY
     * - FE_MENU_VERSION_MP_CHARACTER_SELECT
     * - FE_MENU_VERSION_MP_CHARACTER_CREATION
     * - FE_MENU_VERSION_EMPTY
     * - FE_MENU_VERSION_EMPTY_NO_BACKGROUND
     * - FE_MENU_VERSION_TEXT_SELECTION
     * - FE_MENU_VERSION_CORONA
     * - FE_MENU_VERSION_CORONA_LOBBY
     * - FE_MENU_VERSION_CORONA_JOINED_PLAYERS
     * - FE_MENU_VERSION_CORONA_INVITE_PLAYERS
     * - FE_MENU_VERSION_CORONA_INVITE_FRIENDS
     * - FE_MENU_VERSION_CORONA_INVITE_CREWS
     * - FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
     * - FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
     * - FE_MENU_VERSION_CORONA_RACE
     * - FE_MENU_VERSION_CORONA_BETTING
     * - FE_MENU_VERSION_JOINING_SCREEN
     * - FE_MENU_VERSION_LANDING_MENU
     * - FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
     *
     * Hash: 0xEF01D36B9C9D0C7B | Since: 323
     */
    function activateFrontendMenu(menuhash, togglePause, component) {
        if (typeof menuhash === 'string')
            menuhash = misc.getHashKey(menuhash);
        ActivateFrontendMenu(menuhash, togglePause, component);
    }
    hud.activateFrontendMenu = activateFrontendMenu;
    /**
     * Adds a rectangular blip for the specified coordinates/area.
     *
     * It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.
     *
     * By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.
     *
     * Example image:
     * minimap https://w.wew.wtf/pdcjig.png
     * big map https://w.wew.wtf/zgcjcm.png
     *
     * (Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
     *
     * Hash: 0xCE5D0E5E315DB238 | Since: 463
     */
    function addBlipForArea(pos, width, height) {
        return AddBlipForArea(pos.x, pos.y, pos.z, width, height);
    }
    hud.addBlipForArea = addBlipForArea;
    /**
     * Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
     *
     * Hash: 0x5A039BB0BCA604B6 | Since: 323
     */
    function addBlipForCoord(pos) {
        return AddBlipForCoord(pos.x, pos.y, pos.z);
    }
    hud.addBlipForCoord = addBlipForCoord;
    /**
     * Returns red ( default ) blip attached to entity.
     *
     * Example:
     * Blip blip; //Put this outside your case or option
     * `blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);`
     * `HUD::SET_BLIP_AS_FRIENDLY(blip, true);`
     *
     * Hash: 0x5CDE92C702A8FCE7 | Since: 323
     */
    function addBlipForEntity(entity) {
        return AddBlipForEntity(entity);
    }
    hud.addBlipForEntity = addBlipForEntity;
    /**
     * No comment provided
     *
     * Hash: 0xBE339365C863BD36 | Since: 323
     */
    function addBlipForPickup(pickup) {
        return AddBlipForPickup(pickup);
    }
    hud.addBlipForPickup = addBlipForPickup;
    /**
     * No comment provided
     *
     * Hash: 0x46818D79B1F7499A | Since: 323
     */
    function addBlipForRadius(pos, radius) {
        return AddBlipForRadius(pos.x, pos.y, pos.z, radius);
    }
    hud.addBlipForRadius = addBlipForRadius;
    /**
     * No comment provided
     *
     * Hash: 0x60296AF4BA14ABC5 | Since: 323
     */
    function addNextMessageToPreviousBriefs() {
        AddNextMessageToPreviousBriefs(false);
    }
    hud.addNextMessageToPreviousBriefs = addNextMessageToPreviousBriefs;
    /**
     * No comment provided
     *
     * Hash: 0x311438A071DD9B1A | Since: 323
     */
    function addPointToGpsCustomRoute(pos) {
        AddPointToGpsCustomRoute(pos.x, pos.y, pos.z);
    }
    hud.addPointToGpsCustomRoute = addPointToGpsCustomRoute;
    /**
     * No comment provided
     *
     * Hash: 0xA905192A6781C41B | Since: 323
     */
    function addPointToGpsMultiRoute(pos) {
        AddPointToGpsMultiRoute(pos.x, pos.y, pos.z);
    }
    hud.addPointToGpsMultiRoute = addPointToGpsMultiRoute;
    /**
     * No comment provided
     *
     * Hash: 0xE7DCB5B874BCD96E | Since: 323
     */
    function addTextComponentFloat(value, decimalPlaces) {
        AddTextComponentFloat(value, decimalPlaces);
    }
    hud.addTextComponentFloat = addTextComponentFloat;
    /**
     * No comment provided
     *
     * Hash: 0x0E4C749FF9DE9CC4 | Since: 323
     */
    function addTextComponentFormattedInteger(value, commaSeparated) {
        AddTextComponentFormattedInteger(value, commaSeparated);
    }
    hud.addTextComponentFormattedInteger = addTextComponentFormattedInteger;
    /**
     * No comment provided
     *
     * Hash: 0x03B504CF259931BC | Since: 323
     */
    function addTextComponentInteger(value) {
        AddTextComponentInteger(value);
    }
    hud.addTextComponentInteger = addTextComponentInteger;
    /**
     * No comment provided
     *
     * Hash: 0x80EAD8E2E1D5D52E | Since: 323
     */
    function addTextComponentSubstringBlipName(blip) {
        AddTextComponentSubstringBlipName(blip);
    }
    hud.addTextComponentSubstringBlipName = addTextComponentSubstringBlipName;
    /**
     * No comment provided
     *
     * Hash: 0x5F68520888E69014 | Since: 323
     */
    function addTextComponentSubstringKeyboardDisplay(_string) {
        AddTextComponentSubstringKeyboardDisplay(_string);
    }
    hud.addTextComponentSubstringKeyboardDisplay = addTextComponentSubstringKeyboardDisplay;
    /**
     * p1 was always -1
     *
     * Hash: 0x761B77454205A61D | Since: 323
     */
    function addTextComponentSubstringPhoneNumber() {
        AddTextComponentSubstringPhoneNumber(undefined, 0);
    }
    hud.addTextComponentSubstringPhoneNumber = addTextComponentSubstringPhoneNumber;
    /**
     * No comment provided
     *
     * Hash: 0x6C188BE134E074AA | Since: 323
     */
    function addTextComponentSubstringPlayerName(text) {
        AddTextComponentSubstringPlayerName(text);
    }
    hud.addTextComponentSubstringPlayerName = addTextComponentSubstringPlayerName;
    /**
     * No comment provided
     *
     * Hash: 0xC63CD5D2920ACBE7 | Since: 323
     */
    function addTextComponentSubstringTextLabel(labelName) {
        AddTextComponentSubstringTextLabel(labelName);
    }
    hud.addTextComponentSubstringTextLabel = addTextComponentSubstringTextLabel;
    /**
     * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
     *
     * Hash: 0x17299B63C7683A2B | Since: 323
     */
    function addTextComponentSubstringTextLabelHashKey(gxtEntryHash) {
        if (typeof gxtEntryHash === 'string')
            gxtEntryHash = misc.getHashKey(gxtEntryHash);
        AddTextComponentSubstringTextLabelHashKey(gxtEntryHash);
    }
    hud.addTextComponentSubstringTextLabelHashKey = addTextComponentSubstringTextLabelHashKey;
    /**
     * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
     *
     * Hash: 0x1115F16B8AB9E8BF | Since: 323
     */
    function addTextComponentSubstringTime(timestamp, flags) {
        AddTextComponentSubstringTime(timestamp, flags);
    }
    hud.addTextComponentSubstringTime = addTextComponentSubstringTime;
    /**
     * This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)
     *
     * Hash: 0x94CF4AC034C9C986 | Since: 323
     */
    function addTextComponentSubstringWebsite(website) {
        AddTextComponentSubstringWebsite(website);
    }
    hud.addTextComponentSubstringWebsite = addTextComponentSubstringWebsite;
    /**
     * No comment provided
     *
     * Hash: 0xE4C3B169876D33D7 | Since: 1290
     */
    function addValidVehicleHitHash() {
        Citizen.invokeNative('0xE4C3B169876D33D7', undefined);
    }
    hud.addValidVehicleHitHash = addValidVehicleHitHash;
    /**
     * Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)
     *
     * Hash: 0xE67C6DFD386EA5E7 | Since: 323
     */
    function allowDisplayOfMultiplayerCashText(allow) {
        Citizen.invokeNative('0xE67C6DFD386EA5E7', allow);
    }
    hud.allowDisplayOfMultiplayerCashText = allowDisplayOfMultiplayerCashText;
    /**
     * Allows opening the pause menu this frame, when the player is dead.
     *
     * Hash: 0xCC3FDDED67BCFC63 | Since: 323
     */
    function allowPauseWhenNotInStateOfPlayThisFrame() {
        AllowPauseMenuWhenDeadThisFrame();
    }
    hud.allowPauseWhenNotInStateOfPlayThisFrame = allowPauseWhenNotInStateOfPlayThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x60734CC207C9833C | Since: 323
     */
    function allowSonarBlips(toggle) {
        AllowSonarBlips(toggle);
    }
    hud.allowSonarBlips = allowSonarBlips;
    /**
     * No comment provided
     *
     * Hash: 0xF13FE2A80C05C561 | Since: 323
     */
    function areOnlinePoliciesUpToDate() {
        return Citizen.invokeNative('0xF13FE2A80C05C561');
    }
    hud.areOnlinePoliciesUpToDate = areOnlinePoliciesUpToDate;
    /**
     * No comment provided
     *
     * Hash: 0x23D69E0465570028 | Since: 323
     */
    function beginTextCommandAddDirectlyToPreviousBriefs() {
        BeginTextCommandObjective(undefined);
    }
    hud.beginTextCommandAddDirectlyToPreviousBriefs = beginTextCommandAddDirectlyToPreviousBriefs;
    /**
     * Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
     *
     *
     * e.g
     * void StartLoadingMessage(char *text, int spinnerType = 3)
     * {
     * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
     * }
     * \/\*OR\*\/
     * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
     * {
     * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
     * WAIT(timeMs);
     * BUSYSPINNER_OFF();
     * }
     *
     *
     * These are some localized strings used in the loading spinner.
     * "PM_WAIT"                   = Please Wait
     * "CELEB_WPLYRS"              = Waiting For Players.
     * "CELL_SPINNER2"             = Scanning storage.
     * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
     * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
     * "FM_COR_AUTOD"                        = Just spinner no text
     * "FM_IHELP_WAT2"                        = Waiting for other players
     * "FM_JIP_WAITO"                            = Game options are being set
     * "FMMC_DOWNLOAD"                    = Downloading
     * "FMMC_PLYLOAD"                         = Loading
     * "FMMC_STARTTRAN"                    = Launching session
     * "HUD_QUITTING"                           =  Quiting session
     * "KILL_STRIP_IDM"                         = Waiting for to accept
     * "MP_SPINLOADING"                      = Loading
     *
     * Hash: 0xABA17D7CE615ADBF | Since: 323
     */
    function beginTextCommandBusyspinnerOn(_string) {
        BeginTextCommandBusyspinnerOn(_string);
    }
    hud.beginTextCommandBusyspinnerOn = beginTextCommandBusyspinnerOn;
    /**
     * clears a print text command with this text
     *
     * Hash: 0xE124FA80A759019C | Since: 323
     */
    function beginTextCommandClearPrint(text) {
        BeginTextCommandClearPrint(text);
    }
    hud.beginTextCommandClearPrint = beginTextCommandClearPrint;
    /**
     * Used to be known as _SET_TEXT_COMPONENT_FORMAT
     *
     * Hash: 0x8509B634FBE7DA11 | Since: 323
     */
    function beginTextCommandDisplayHelp(inputType) {
        BeginTextCommandDisplayHelp(inputType);
    }
    hud.beginTextCommandDisplayHelp = beginTextCommandDisplayHelp;
    /**
     * The following were found in the decompiled script files:
     * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
     *
     * ESDOLLA - cash
     * ESMINDOLLA - cash (negative)
     *
     * Used to be known as _SET_TEXT_ENTRY
     *
     * Hash: 0x25FBB336DF1804CB | Since: 323
     */
    function beginTextCommandDisplayText(text) {
        BeginTextCommandDisplayText(text);
    }
    hud.beginTextCommandDisplayText = beginTextCommandDisplayText;
    /**
     * int GetLineCount(char *text, float x, float y)
     * {
     * BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
     * }
     *
     * Hash: 0x521FB041D93DD0E4 | Since: 323
     */
    function beginTextCommandGetNumberOfLinesForString(entry) {
        BeginTextCommandLineCount(entry);
    }
    hud.beginTextCommandGetNumberOfLinesForString = beginTextCommandGetNumberOfLinesForString;
    /**
     * No comment provided
     *
     * Hash: 0x54CE8AC98E120CAB | Since: 323
     */
    function beginTextCommandGetScreenWidthOfDisplayText(text) {
        BeginTextCommandGetWidth(text);
    }
    hud.beginTextCommandGetScreenWidthOfDisplayText = beginTextCommandGetScreenWidthOfDisplayText;
    /**
     * nothin doin.
     *
     * BOOL Message(const char* text)
     * {
     * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
     * }
     *
     * Hash: 0x853648FD1063A213 | Since: 323
     */
    function beginTextCommandIsMessageDisplayed(text) {
        BeginTextCommandIsMessageDisplayed(text);
    }
    hud.beginTextCommandIsMessageDisplayed = beginTextCommandIsMessageDisplayed;
    /**
     * BOOL IsContextActive(char *ctx)
     * {
     * BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
     * return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
     * }
     *
     * Hash: 0x0A24DA3A41B718F5 | Since: 323
     */
    function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName) {
        BeginTextCommandIsThisHelpMessageBeingDisplayed(labelName);
    }
    hud.beginTextCommandIsThisHelpMessageBeingDisplayed = beginTextCommandIsThisHelpMessageBeingDisplayed;
    /**
     * No comment provided
     *
     * Hash: 0x8F9EE5687F8EECCD | Since: 323
     */
    function beginTextCommandOverrideButtonText(gxtEntry) {
        BeginTextCommandOverrideButtonText(gxtEntry);
    }
    hud.beginTextCommandOverrideButtonText = beginTextCommandOverrideButtonText;
    /**
     * void ShowSubtitle(const char *text)
     * {
     * BEGIN_TEXT_COMMAND_PRINT("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_PRINT(2000, true);
     * }
     *
     * Hash: 0xB87A37EEB7FAA67D | Since: 323
     */
    function beginTextCommandPrint(GxtEntry) {
        BeginTextCommandPrint(GxtEntry);
    }
    hud.beginTextCommandPrint = beginTextCommandPrint;
    /**
     * Starts a text command to change the name of a blip displayed in the pause menu.
     * This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
     * Example:
     *
     * `HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");`
     * `HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");`
     * `HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);`
     *
     * Hash: 0xF9113A30DE5C6670 | Since: 323
     */
    function beginTextCommandSetBlipName(textLabel) {
        BeginTextCommandSetBlipName(textLabel);
    }
    hud.beginTextCommandSetBlipName = beginTextCommandSetBlipName;
    /**
     * Declares the entry type of a notification, for example "STRING".
     *
     * int ShowNotification(char *text)
     * {
     * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
     * }
     *
     * Hash: 0x202709F4C58A0424 | Since: 323
     */
    function beginTextCommandThefeedPost(text) {
        BeginTextCommandThefeedPost(text);
    }
    hud.beginTextCommandThefeedPost = beginTextCommandThefeedPost;
    /**
     * No comment provided
     *
     * Hash: 0xB2A592B04648A9CB | Since: 323
     */
    function busyspinnerIsDisplaying() {
        return BusyspinnerIsDisplaying();
    }
    hud.busyspinnerIsDisplaying = busyspinnerIsDisplaying;
    /**
     * No comment provided
     *
     * Hash: 0xD422FCC5F239A915 | Since: 323
     */
    function busyspinnerIsOn() {
        return BusyspinnerIsOn();
    }
    hud.busyspinnerIsOn = busyspinnerIsOn;
    /**
     * Removes the loading prompt at the bottom right of the screen.
     *
     * Hash: 0x10D373323E5B9C0D | Since: 323
     */
    function busyspinnerOff() {
        BusyspinnerOff();
    }
    hud.busyspinnerOff = busyspinnerOff;
    /**
     * Displays cash change notifications on HUD.
     *
     * Hash: 0x0772DF77852C2E30 | Since: 323
     */
    function changeFakeMpCash(cash, bank) {
        ChangeFakeMpCash(cash, bank);
    }
    hud.changeFakeMpCash = changeFakeMpCash;
    /**
     * No comment provided
     *
     * Hash: 0x2A179DF17CCF04CD | Since: 323
     */
    function clearAdditionalText() {
        ClearAdditionalText(0, false);
    }
    hud.clearAdditionalText = clearAdditionalText;
    /**
     * No comment provided
     *
     * Hash: 0xD12882D3FF82BF11 | Since: 877
     */
    function clearAllBlipRoutes() {
        ClearAllBlipRoutes();
    }
    hud.clearAllBlipRoutes = clearAllBlipRoutes;
    /**
     * No comment provided
     *
     * Hash: 0x6178F68A87A4D3A0 | Since: 323
     */
    function clearAllHelpMessages() {
        ClearAllHelpMessages();
    }
    hud.clearAllHelpMessages = clearAllHelpMessages;
    /**
     * No comment provided
     *
     * Hash: 0x9D292F73ADBD9313 | Since: 323
     */
    function clearBrief() {
        ClearBrief();
    }
    hud.clearBrief = clearBrief;
    /**
     * No comment provided
     *
     * Hash: 0x7792424AA0EAC32E | Since: 323
     */
    function clearDynamicPauseMenuErrorMessage() {
        ClearDynamicPauseMenuErrorMessage();
    }
    hud.clearDynamicPauseMenuErrorMessage = clearDynamicPauseMenuErrorMessage;
    /**
     * No comment provided
     *
     * Hash: 0x8410C5E0CD847B9D | Since: 1290
     */
    function clearFakeConeArray() {
        Citizen.invokeNative('0x8410C5E0CD847B9D');
    }
    hud.clearFakeConeArray = clearFakeConeArray;
    /**
     * No comment provided
     *
     * Hash: 0x50085246ABD3FEFA | Since: 323
     */
    function clearFloatingHelp(hudIndex) {
        ClearFloatingHelp(hudIndex, false);
    }
    hud.clearFloatingHelp = clearFloatingHelp;
    /**
     * No comment provided
     *
     * Hash: 0xE6DE0561D9232A64 | Since: 323
     */
    function clearGpsCustomRoute() {
        ClearGpsCustomRoute();
    }
    hud.clearGpsCustomRoute = clearGpsCustomRoute;
    /**
     * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
     *
     * Doesn't seem like the flags are actually read by the game at all.
     *
     * Hash: 0x21986729D6A3A830 | Since: 323
     */
    function clearGpsFlags() {
        ClearGpsFlags();
    }
    hud.clearGpsFlags = clearGpsFlags;
    /**
     * Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
     *
     * Hash: 0x67EEDEA1B9BAFD94 | Since: 323
     */
    function clearGpsMultiRoute() {
        ClearGpsMultiRoute();
    }
    hud.clearGpsMultiRoute = clearGpsMultiRoute;
    /**
     * No comment provided
     *
     * Hash: 0xFF4FB7C8CDFA3DA7 | Since: 323
     */
    function clearGpsPlayerWaypoint() {
        ClearGpsPlayerWaypoint();
    }
    hud.clearGpsPlayerWaypoint = clearGpsPlayerWaypoint;
    /**
     * Does the same as SET_RACE_TRACK_RENDER(false);
     *
     * Hash: 0x7AA5B4CE533C858B | Since: 323
     */
    function clearGpsRaceTrack() {
        ClearGpsRaceTrack();
    }
    hud.clearGpsRaceTrack = clearGpsRaceTrack;
    /**
     * No comment provided
     *
     * Hash: 0x8DFCED7A656F8802 | Since: 323
     */
    function clearHelp(toggle) {
        ClearHelp(toggle);
    }
    hud.clearHelp = clearHelp;
    /**
     * No comment provided
     *
     * Hash: 0x5E62BE5DC58E9E06 | Since: 323
     */
    function clearPedInPauseMenu() {
        ClearPedInPauseMenu();
    }
    hud.clearPedInPauseMenu = clearPedInPauseMenu;
    /**
     * No comment provided
     *
     * Hash: 0xCC33FA791322B9D9 | Since: 323
     */
    function clearPrints() {
        ClearPrints();
    }
    hud.clearPrints = clearPrints;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xB57D8DD645CFA2CF | Since: 323
     */
    function clearReminderMessage() {
        ClearReminderMessage();
    }
    hud.clearReminderMessage = clearReminderMessage;
    /**
     * No comment provided
     *
     * Hash: 0x2CEA2839313C09AC | Since: 323
     */
    function clearSmallPrints() {
        ClearSmallPrints();
    }
    hud.clearSmallPrints = clearSmallPrints;
    /**
     * p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z
     *
     * Hash: 0xCF708001E1E536DD | Since: 323
     */
    function clearThisPrint() {
        ClearThisPrint(undefined);
    }
    hud.clearThisPrint = clearThisPrint;
    /**
     * No comment provided
     *
     * Hash: 0xEB81A3DADD503187 | Since: 1290
     */
    function clearValidVehicleHitHashes() {
        Citizen.invokeNative('0xEB81A3DADD503187');
    }
    hud.clearValidVehicleHitHashes = clearValidVehicleHitHashes;
    /**
     * No comment provided
     *
     * Hash: 0x1AC8F4AD40E22127 | Since: 323
     */
    function closeMpTextChat() {
        CloseMultiplayerChat();
    }
    hud.closeMpTextChat = closeMpTextChat;
    /**
     * No comment provided
     *
     * Hash: 0xD2B32BE3FC1626C6 | Since: 323
     */
    function closeSocialClubMenu() {
        CloseSocialClubMenu();
    }
    hud.closeSocialClubMenu = closeSocialClubMenu;
    /**
     * No comment provided
     *
     * Hash: 0x66E7CB63C97B7D20 | Since: 323
     */
    function codeWantsScriptToTakeControl() {
        return Citizen.invokeNative('0x66E7CB63C97B7D20');
    }
    hud.codeWantsScriptToTakeControl = codeWantsScriptToTakeControl;
    /**
     * clanFlag: takes a number 0-5
     *
     * Hash: 0xBFEFE3321A3F5015 | Since: 323
     */
    function createFakeMpGamerTag(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag) {
        return CreateFakeMpGamerTag(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
    }
    hud.createFakeMpGamerTag = createFakeMpGamerTag;
    /**
     * clanFlag: takes a number 0-5
     *
     * Hash: 0x6DD05E9D83EFA4C9 | Since: 323
     */
    function createMpGamerTagWithCrewColor(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b) {
        CreateMpGamerTagWithCrewColor(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b);
    }
    hud.createMpGamerTagWithCrewColor = createMpGamerTagWithCrewColor;
    /**
     * No comment provided
     *
     * Hash: 0x2708FC083123F9FF | Since: 323
     */
    function customMinimapClearBlips() {
        ClearRaceGalleryBlips();
    }
    hud.customMinimapClearBlips = customMinimapClearBlips;
    /**
     * Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
     *
     * Hash: 0x551DF99658DB6EE8 | Since: 323
     */
    function customMinimapCreateBlip(pos) {
        return RaceGalleryAddBlip(pos.x, pos.y, pos.z);
    }
    hud.customMinimapCreateBlip = customMinimapCreateBlip;
    /**
     * If toggle is true, the map is shown in full screen
     * If toggle is false, the map is shown in normal mode
     *
     * Hash: 0x5354C5BA2EA868A4 | Since: 323
     */
    function customMinimapSetActive(toggle) {
        RaceGalleryFullscreen(toggle);
    }
    hud.customMinimapSetActive = customMinimapSetActive;
    /**
     * Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
     *
     * Hash: 0x1EAE6DD17B7A5EFA | Since: 323
     */
    function customMinimapSetBlipObject(spriteId) {
        RaceGalleryNextBlipSprite(spriteId);
    }
    hud.customMinimapSetBlipObject = customMinimapSetBlipObject;
    /**
     * No comment provided
     *
     * Hash: 0xD8E694757BCEA8E9 | Since: 323
     */
    function deleteWaypointsFromThisPlayer() {
        DeleteWaypoint();
    }
    hud.deleteWaypointsFromThisPlayer = deleteWaypointsFromThisPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x6D3465A73092F0E6 | Since: 323
     */
    function disableFrontendThisFrame() {
        DisableFrontendThisFrame();
    }
    hud.disableFrontendThisFrame = disableFrontendThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x9245E81072704B8A | Since: 323
     */
    function disablePausemenuSpinner() {
        PauseMenuDisableBusyspinner(false);
    }
    hud.disablePausemenuSpinner = disablePausemenuSpinner;
    /**
     * No comment provided
     *
     * Hash: 0xA5E78BA2B1331C55 | Since: 323
     */
    function displayAmmoThisFrame(display) {
        DisplayAmmoThisFrame(display);
    }
    hud.displayAmmoThisFrame = displayAmmoThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x276B6CE369C33678 | Since: 323
     */
    function displayAreaName(toggle) {
        DisplayAreaName(toggle);
    }
    hud.displayAreaName = displayAreaName;
    /**
     * "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
     * "DISPLAY_CASH(true);" disables cash amount rendering
     *
     * Hash: 0x96DEC8D5430208B7 | Since: 323
     */
    function displayCash(toggle) {
        DisplayCash(toggle);
    }
    hud.displayCash = displayCash;
    /**
     * The messages are localized strings.
     * Examples:
     * "No_bus_money"
     * "Enter_bus"
     * "Tour_help"
     * "LETTERS_HELP2"
     * "Dummy"
     *
     * <strong>The bool appears to always be false (if it even is a bool, as it's represented by a zero)</strong>
     * --------
     * p1 doesn't seem to make a difference, regardless of the state it's in.
     *
     *
     * picture of where on the screen this is displayed?
     *
     * Hash: 0x960C9FF8F616E41C | Since: 323
     */
    function displayHelpTextThisFrame(message) {
        DisplayHelpTextThisFrame(message, false);
    }
    hud.displayHelpTextThisFrame = displayHelpTextThisFrame;
    /**
     * If Hud should be displayed
     *
     * Hash: 0xA6294919E56FF02A | Since: 323
     */
    function display(toggle) {
        DisplayHud(toggle);
    }
    hud.display = display;
    /**
     * Enables drawing some hud components, such as help labels, this frame, when the player is dead.
     *
     * Hash: 0x7669F9E39DC17063 | Since: 323
     */
    function displayWhenNotInStateOfPlayThisFrame() {
        DisplayHudWhenDeadThisFrame();
    }
    hud.displayWhenNotInStateOfPlayThisFrame = displayWhenNotInStateOfPlayThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x402F9ED62087E898 | Since: 323
     */
    function displayWhenPausedThisFrame() {
        DisplayHudWhenPausedThisFrame();
    }
    hud.displayWhenPausedThisFrame = displayWhenPausedThisFrame;
    /**
     * Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
     * Doesn't need to be called every frame.
     * Preview: https://i.imgur.com/DfqKWfJ.png
     *
     * Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
     *
     * Hash: 0x82CEDC33687E1F50 | Since: 323
     */
    function displayPlayerNameTagsOnBlips(toggle) {
        DisplayPlayerNameTagsOnBlips(toggle);
    }
    hud.displayPlayerNameTagsOnBlips = displayPlayerNameTagsOnBlips;
    /**
     * If Minimap / Radar should be displayed.
     *
     * Hash: 0xA0EBB943C300E693 | Since: 323
     */
    function displayRadar(toggle) {
        DisplayRadar(toggle);
    }
    hud.displayRadar = displayRadar;
    /**
     * Displays the crosshair for this frame.
     *
     * Hash: 0x73115226F4814E62 | Since: 323
     */
    function displaySniperScopeThisFrame() {
        DisplaySniperScopeThisFrame();
    }
    hud.displaySniperScopeThisFrame = displaySniperScopeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xA6DB27D19ECBB7DA | Since: 323
     */
    function doesBlipExist(blip) {
        return DoesBlipExist(blip);
    }
    hud.doesBlipExist = doesBlipExist;
    /**
     * No comment provided
     *
     * Hash: 0xDD2238F57B977751 | Since: 323
     */
    function doesBlipHaveGpsRoute(blip) {
        return DoesBlipHaveGpsRoute(blip);
    }
    hud.doesBlipHaveGpsRoute = doesBlipHaveGpsRoute;
    /**
     * No comment provided
     *
     * Hash: 0x15B8ECF844EE67ED | Since: 323
     */
    function doesPedHaveAiBlip(ped) {
        return DoesPedHaveAiBlip(ped);
    }
    hud.doesPedHaveAiBlip = doesPedHaveAiBlip;
    /**
     * No comment provided
     *
     * Hash: 0x1C7302E725259789 | Since: 323
     */
    function doesTextBlockExist(gxt) {
        return DoesTextBlockExist(gxt);
    }
    hud.doesTextBlockExist = doesTextBlockExist;
    /**
     * Checks if the passed gxt name exists in the game files.
     *
     * Hash: 0xAC09CA973C564252 | Since: 323
     */
    function doesTextLabelExist(gxt) {
        return DoesTextLabelExist(gxt);
    }
    hud.doesTextLabelExist = doesTextLabelExist;
    /**
     * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
     *
     * Hash: 0x6D14BFDC33B34F55 | Since: 323
     */
    function dontTiltMinimapThisFrame() {
        DontTiltMinimapThisFrame();
    }
    hud.dontTiltMinimapThisFrame = dontTiltMinimapThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x89DA85D949CE57A0 | Since: 2802
     */
    function dontZoomMinimapWhenRunningThisFrame() {
        Citizen.invokeNative('0x89DA85D949CE57A0');
    }
    hud.dontZoomMinimapWhenRunningThisFrame = dontZoomMinimapWhenRunningThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x55F5A5F07134DE60 | Since: 1180
     */
    function dontZoomMinimapWhenSnipingThisFrame() {
        Citizen.invokeNative('0x55F5A5F07134DE60');
    }
    hud.dontZoomMinimapWhenSnipingThisFrame = dontZoomMinimapWhenSnipingThisFrame;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x211C4EF450086857 | Since: 323
     */
    function drawFrontendBackgroundThisFrame() {
        Citizen.invokeNative('0x211C4EF450086857');
    }
    hud.drawFrontendBackgroundThisFrame = drawFrontendBackgroundThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xBF4F34A85CA2970C | Since: 323
     */
    function drawOverFadeThisFrame() {
        Citizen.invokeNative('0xBF4F34A85CA2970C');
    }
    hud.drawOverFadeThisFrame = drawOverFadeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xCFDBDF5AE59BA0F4 | Since: 323
     */
    function endTextCommandAddDirectlyToPreviousBriefs() {
        EndTextCommandObjective(false);
    }
    hud.endTextCommandAddDirectlyToPreviousBriefs = endTextCommandAddDirectlyToPreviousBriefs;
    /**
     * enum eBusySpinnerType
     * {
     * BUSY_SPINNER_LEFT,
     * BUSY_SPINNER_LEFT_2,
     * BUSY_SPINNER_LEFT_3,
     * BUSY_SPINNER_SAVE,
     * BUSY_SPINNER_RIGHT,
     * };
     *
     * Hash: 0xBD12F8228410D9B4 | Since: 323
     */
    function endTextCommandBusyspinnerOn(busySpinnerType) {
        EndTextCommandBusyspinnerOn(busySpinnerType);
    }
    hud.endTextCommandBusyspinnerOn = endTextCommandBusyspinnerOn;
    /**
     * No comment provided
     *
     * Hash: 0xFCC75460ABA29378 | Since: 323
     */
    function endTextCommandClearPrint() {
        EndTextCommandClearPrint();
    }
    hud.endTextCommandClearPrint = endTextCommandClearPrint;
    /**
     * shape goes from -1 to 50 (may be more).
     * p0 is always 0.
     *
     * Example:
     * void FloatingHelpText(const char* text)
     * {
     * BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
     * }
     *
     * Image:
     * - imgbin.org/images/26209.jpg
     *
     * more inputs/icons:
     * - https://pastebin.com/nqNYWMSB
     *
     * Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
     *
     * Hash: 0x238FFE5C7B0498A6 | Since: 323
     */
    function endTextCommandDisplayHelp(loop, beep, shape) {
        EndTextCommandDisplayHelp(0, loop, beep, shape);
    }
    hud.endTextCommandDisplayHelp = endTextCommandDisplayHelp;
    /**
     * `After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.`
     *
     * Used to be known as _DRAW_TEXT
     *
     * Hash: 0xCD015E5BB0D96A57 | Since: 323
     */
    function endTextCommandDisplayText(x, y) {
        EndTextCommandDisplayText(x, y, 0);
    }
    hud.endTextCommandDisplayText = endTextCommandDisplayText;
    /**
     * Determines how many lines the text string will use when drawn on screen.
     * Must use 0x521FB041D93DD0E4 for setting up
     *
     * Hash: 0x9040DFB09BE75706 | Since: 323
     */
    function endTextCommandGetNumberOfLinesForString(x, y) {
        return EndTextCommandLineCount(x, y);
    }
    hud.endTextCommandGetNumberOfLinesForString = endTextCommandGetNumberOfLinesForString;
    /**
     * No comment provided
     *
     * Hash: 0x85F061DA64ED2F67 | Since: 323
     */
    function endTextCommandGetScreenWidthOfDisplayText() {
        return EndTextCommandGetWidth(false);
    }
    hud.endTextCommandGetScreenWidthOfDisplayText = endTextCommandGetScreenWidthOfDisplayText;
    /**
     * No comment provided
     *
     * Hash: 0x8A9BA1AB3E237613 | Since: 323
     */
    function endTextCommandIsMessageDisplayed() {
        return EndTextCommandIsMessageDisplayed();
    }
    hud.endTextCommandIsMessageDisplayed = endTextCommandIsMessageDisplayed;
    /**
     * No comment provided
     *
     * Hash: 0x10BDDBFC529428DD | Since: 323
     */
    function endTextCommandIsThisHelpMessageBeingDisplayed() {
        return EndTextCommandIsThisHelpMessageBeingDisplayed(0);
    }
    hud.endTextCommandIsThisHelpMessageBeingDisplayed = endTextCommandIsThisHelpMessageBeingDisplayed;
    /**
     * No comment provided
     *
     * Hash: 0xA86911979638106F | Since: 323
     */
    function endTextCommandOverrideButtonText() {
        EndTextCommandOverrideButtonText(0);
    }
    hud.endTextCommandOverrideButtonText = endTextCommandOverrideButtonText;
    /**
     * Draws the subtitle at middle center of the screen.
     *
     * int duration = time in milliseconds to show text on screen before disappearing
     *
     * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
     *
     * Used to be known as _DRAW_SUBTITLE_TIMED
     *
     * Hash: 0x9D77056A530643F6 | Since: 323
     */
    function endTextCommandPrint(duration, drawImmediately) {
        EndTextCommandPrint(duration, drawImmediately);
    }
    hud.endTextCommandPrint = endTextCommandPrint;
    /**
     * Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
     *
     * Hash: 0xBC38B49BCB83BC9B | Since: 323
     */
    function endTextCommandSetBlipName(blip) {
        EndTextCommandSetBlipName(blip);
    }
    hud.endTextCommandSetBlipName = endTextCommandSetBlipName;
    /**
     * Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
     * Example:
     *
     * `HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");`
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");`
     *
     * Hash: 0xAA295B6F28BD587D | Since: 323
     */
    function endTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel) {
        return EndTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel);
    }
    hud.endTextCommandThefeedPostAward = endTextCommandThefeedPostAward;
    /**
     * No comment provided
     *
     * Hash: 0x97C9E4E7024A8F2C | Since: 323
     */
    function endTextCommandThefeedPostCrewtag(isLeader, unk0, clanDesc, R, G, B) {
        return EndTextCommandThefeedPostCrewtag(false, false, 0, isLeader, unk0, clanDesc, R, G, B);
    }
    hud.endTextCommandThefeedPostCrewtag = endTextCommandThefeedPostCrewtag;
    /**
     * No comment provided
     *
     * Hash: 0x137BC35589E34E1E | Since: 323
     */
    function endTextCommandThefeedPostCrewtagWithGameName(isLeader, unk0, clanDesc, playerName, R, G, B) {
        return EndTextCommandThefeedPostCrewtagWithGameName(false, false, 0, isLeader, unk0, clanDesc, playerName, R, G, B);
    }
    hud.endTextCommandThefeedPostCrewtagWithGameName = endTextCommandThefeedPostCrewtagWithGameName;
    /**
     * No comment provided
     *
     * Hash: 0x8EFCCF6EC66D85E4 | Since: 323
     */
    function endTextCommandThefeedPostCrewRankupWithLiteralFlag() {
        return EndTextCommandThefeedPostCrewRankup(undefined, undefined, undefined, false, false);
    }
    hud.endTextCommandThefeedPostCrewRankupWithLiteralFlag = endTextCommandThefeedPostCrewRankupWithLiteralFlag;
    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames: https://pastebin.com/XdpJVbHz
     *
     *
     * flash is a bool for fading in.
     * iconTypes:
     * 1 : Chat Box
     * 2 : Email
     * 3 : Add Friend Request
     * 4 : Nothing
     * 5 : Nothing
     * 6 : Nothing
     * 7 : Right Jumping Arrow
     * 8 : RP Icon
     * 9 : $ Icon
     *
     * "sender" is the very top header. This can be any old string.
     * "subject" is the header under the sender.
     *
     * Hash: 0x1CCD9A37359072CF | Since: 323
     */
    function endTextCommandThefeedPostMessagetext(txdName, textureName, flash, iconType, sender, subject) {
        return EndTextCommandThefeedPostMessagetext(txdName, textureName, flash, iconType, sender, subject);
    }
    hud.endTextCommandThefeedPostMessagetext = endTextCommandThefeedPostMessagetext;
    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * Needs more research.
     *
     * Only one type of usage in the scripts:
     *
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);`
     *
     * Hash: 0xC6F580E4C94926AC | Since: 323
     */
    function endTextCommandThefeedPostMessagetextSubtitleLabel(txdName, textureName, flash, iconType, sender, subject) {
        return EndTextCommandThefeedPostMessagetextGxtEntry(txdName, textureName, flash, iconType, sender, subject);
    }
    hud.endTextCommandThefeedPostMessagetextSubtitleLabel = endTextCommandThefeedPostMessagetextSubtitleLabel;
    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
     *
     * Example, only occurrence in the scripts:
     * `v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);`
     *
     * Hash: 0x1E6611149DB3DB6B | Since: 323
     */
    function endTextCommandThefeedPostMessagetextTu(txdName, textureName, flash, iconType, sender, subject, duration) {
        return EndTextCommandThefeedPostMessagetextTu(txdName, textureName, flash, iconType, sender, subject, duration);
    }
    hud.endTextCommandThefeedPostMessagetextTu = endTextCommandThefeedPostMessagetextTu;
    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames https://pastebin.com/XdpJVbHz
     *
     * flash is a bool for fading in.
     * iconTypes:
     * 1 : Chat Box
     * 2 : Email
     * 3 : Add Friend Request
     * 4 : Nothing
     * 5 : Nothing
     * 6 : Nothing
     * 7 : Right Jumping Arrow
     * 8 : RP Icon
     * 9 : $ Icon
     *
     * "sender" is the very top header. This can be any old string.
     * "subject" is the header under the sender.
     * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
     * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
     *
     * Hash: 0x5CBF7BADE20DB93E | Since: 323
     */
    function endTextCommandThefeedPostMessagetextWithCrewTag(txdName, textureName, flash, iconType, sender, subject, duration, clanTag) {
        return EndTextCommandThefeedPostMessagetextWithCrewTag(txdName, textureName, flash, iconType, sender, subject, duration, clanTag);
    }
    hud.endTextCommandThefeedPostMessagetextWithCrewTag = endTextCommandThefeedPostMessagetextWithCrewTag;
    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames:  https://pastebin.com/XdpJVbHz
     *
     * flash is a bool for fading in.
     * iconTypes:
     * 1 : Chat Box
     * 2 : Email
     * 3 : Add Friend Request
     * 4 : Nothing
     * 5 : Nothing
     * 6 : Nothing
     * 7 : Right Jumping Arrow
     * 8 : RP Icon
     * 9 : $ Icon
     *
     * "sender" is the very top header. This can be any old string.
     * "subject" is the header under the sender.
     * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
     * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
     * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
     *
     *
     * int IconNotification(char *text, char *text2, char *Subject)
     * {
     * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
     * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
     * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
     * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
     * }
     *
     * Hash: 0x531B84E7DA981FB6 | Since: 323
     */
    function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2) {
        return EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, 0);
    }
    hud.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon = endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon;
    /**
     * No comment provided
     *
     * Hash: 0xF020C96915705B3A | Since: 323
     */
    function endTextCommandThefeedPostMpticker(blink) {
        return EndTextCommandThefeedPostMpticker(blink, false);
    }
    hud.endTextCommandThefeedPostMpticker = endTextCommandThefeedPostMpticker;
    /**
     * returns a notification handle, prints out a notification like below:
     * type range: 0 - 2
     * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
     *
     * example:
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");`
     * - https://imgur.com/lGBPCz3
     *
     * Hash: 0xD202B92CBF1D816F | Since: 323
     */
    function endTextCommandThefeedPostReplay(_type, image, text) {
        return EndTextCommandThefeedPostReplayIcon(_type, image, text);
    }
    hud.endTextCommandThefeedPostReplay = endTextCommandThefeedPostReplay;
    /**
     * returns a notification handle, prints out a notification like below:
     * type range: 0 - 2
     * if you set type to 1, button accepts "~INPUT_SOMETHING~"
     *
     * example:
     * `HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");`
     * - https://imgur.com/UPy0Ial
     *
     *
     * Examples from the scripts:
     * `l_D1[1\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");`
     * `l_D1[2\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");`
     * `l_D1[1\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");`
     * `l_D1[2\/\*1\*\/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");`
     *
     *
     * Hash: 0xDD6CB2CCE7C2735C | Since: 323
     */
    function endTextCommandThefeedPostReplayInput(_type, button, text) {
        return EndTextCommandThefeedPostReplayInput(_type, button, text);
    }
    hud.endTextCommandThefeedPostReplayInput = endTextCommandThefeedPostReplayInput;
    /**
     * List of picture names: https://pastebin.com/XdpJVbHz
     * Example result: https://i.imgur.com/SdEZ22m.png
     *
     * Hash: 0x2B7E9A4EAAA93C89 | Since: 323
     */
    function endTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName) {
        return EndTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName);
    }
    hud.endTextCommandThefeedPostStats = endTextCommandThefeedPostStats;
    /**
     * No comment provided
     *
     * Hash: 0x2ED7843F8F801023 | Since: 323
     */
    function endTextCommandThefeedPostTicker(blink) {
        return EndTextCommandThefeedPostTicker(blink, false);
    }
    hud.endTextCommandThefeedPostTicker = endTextCommandThefeedPostTicker;
    /**
     * No comment provided
     *
     * Hash: 0x44FA03975424A0EE | Since: 323
     */
    function endTextCommandThefeedPostTickerForced(blink) {
        return EndTextCommandThefeedPostTickerForced(blink, false);
    }
    hud.endTextCommandThefeedPostTickerForced = endTextCommandThefeedPostTickerForced;
    /**
     * No comment provided
     *
     * Hash: 0x378E809BF61EC840 | Since: 323
     */
    function endTextCommandThefeedPostTickerWithTokens(blink) {
        return EndTextCommandThefeedPostTickerWithTokens(blink, false);
    }
    hud.endTextCommandThefeedPostTickerWithTokens = endTextCommandThefeedPostTickerWithTokens;
    /**
     * No comment provided
     *
     * Hash: 0x33EE12743CCD6343 | Since: 323
     */
    function endTextCommandThefeedPostUnlock(gxtLabel1, gxtLabel2) {
        return EndTextCommandThefeedPostUnlock(gxtLabel1, 0, gxtLabel2);
    }
    hud.endTextCommandThefeedPostUnlock = endTextCommandThefeedPostUnlock;
    /**
     * No comment provided
     *
     * Hash: 0xC8F3AAF93D0600BF | Since: 323
     */
    function endTextCommandThefeedPostUnlockTu(gxtLabel1, gxtLabel2) {
        return EndTextCommandThefeedPostUnlockTu(gxtLabel1, 0, gxtLabel2, 0);
    }
    hud.endTextCommandThefeedPostUnlockTu = endTextCommandThefeedPostUnlockTu;
    /**
     * No comment provided
     *
     * Hash: 0x7AE0589093A2E088 | Since: 323
     */
    function endTextCommandThefeedPostUnlockTuWithColor() {
        return EndTextCommandThefeedPostUnlockTuWithColor(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    hud.endTextCommandThefeedPostUnlockTuWithColor = endTextCommandThefeedPostUnlockTuWithColor;
    /**
     * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
     *
     * List of picNames: https://pastebin.com/XdpJVbHz
     * HUD colors and their values: https://pastebin.com/d9aHPbXN
     *
     * Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
     *
     * Hash: 0xB6871B0555B02996 | Since: 323
     */
    function endTextCommandThefeedPostVersusTu(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2) {
        return EndTextCommandThefeedPostVersusTu(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2);
    }
    hud.endTextCommandThefeedPostVersusTu = endTextCommandThefeedPostVersusTu;
    /**
     * No comment provided
     *
     * Hash: 0xCEF214315D276FD1 | Since: 323
     */
    function flagPlayerContextInTournament(toggle) {
        FlagPlayerContextInTournament(toggle);
    }
    hud.flagPlayerContextInTournament = flagPlayerContextInTournament;
    /**
     * No comment provided
     *
     * Hash: 0x02CFBA0C9E9275CE | Since: 323
     */
    function flashAbilityBar(millisecondsToFlash) {
        FlashAbilityBar(millisecondsToFlash);
    }
    hud.flashAbilityBar = flashAbilityBar;
    /**
     * adds a short flash to the Radar/Minimap
     * Usage: UI.FLASH_MINIMAP_DISPLAY
     *
     * Hash: 0xF2DD778C22B15BDA | Since: 323
     */
    function flashMinimapDisplay() {
        FlashMinimapDisplay();
    }
    hud.flashMinimapDisplay = flashMinimapDisplay;
    /**
     * No comment provided
     *
     * Hash: 0x6B1DE27EE78E6A19 | Since: 323
     */
    function flashMinimapDisplayWithColor(hudColorIndex) {
        FlashMinimapDisplayWithColor(hudColorIndex);
    }
    hud.flashMinimapDisplayWithColor = flashMinimapDisplayWithColor;
    /**
     * No comment provided
     *
     * Hash: 0xA18AFB39081B6A1F | Since: 323
     */
    function flashWantedDisplay() {
        FlashWantedDisplay(false);
    }
    hud.flashWantedDisplay = flashWantedDisplay;
    /**
     * No comment provided
     *
     * Hash: 0xEE4C0E6DBC6F2C6F | Since: 323
     */
    function forceCloseReportugcMenu() {
        ForceCloseReportugcMenu();
    }
    hud.forceCloseReportugcMenu = forceCloseReportugcMenu;
    /**
     * No comment provided
     *
     * Hash: 0x8817605C2BA76200 | Since: 323
     */
    function forceCloseTextInputBox() {
        ForceCloseTextInputBox();
    }
    hud.forceCloseTextInputBox = forceCloseTextInputBox;
    /**
     * No comment provided
     *
     * Hash: 0x57D760D55F54E071 | Since: 323
     */
    function forceNextMessageToPreviousBriefsList() {
        Citizen.invokeNative('0x57D760D55F54E071', 0);
    }
    hud.forceNextMessageToPreviousBriefsList = forceNextMessageToPreviousBriefsList;
    /**
     * No comment provided
     *
     * Hash: 0xBA8D65C1C65702E5 | Since: 323
     */
    function forceOffWantedStarFlash(toggle) {
        Citizen.invokeNative('0xBA8D65C1C65702E5', toggle);
    }
    hud.forceOffWantedStarFlash = forceOffWantedStarFlash;
    /**
     * Not present in retail version of the game, actual definiton seems to be
     * _LOG_DEBUG_INFO(const char* category, const char* debugText);
     *
     * Hash: 0x2162C446DFDF38FD | Since: 323
     */
    function forceScriptedGfxWhenFrontendActive() {
        LogDebugInfo(undefined);
    }
    hud.forceScriptedGfxWhenFrontendActive = forceScriptedGfxWhenFrontendActive;
    /**
     * Doesn't actually return anything.
     *
     * Hash: 0x1121BFA1A1A522A8 | Since: 323
     */
    function forceSonarBlipsThisFrame() {
        return ForceSonarBlipsThisFrame();
    }
    hud.forceSonarBlipsThisFrame = forceSonarBlipsThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x7CD934010E115C2C | Since: 323
     */
    function getAiPedPedBlipIndex(ped) {
        return GetAiBlip2(ped);
    }
    hud.getAiPedPedBlipIndex = getAiPedPedBlipIndex;
    /**
     * Returns the current AI BLIP for the specified ped
     *
     * Hash: 0x56176892826A4FE8 | Since: 323
     */
    function getAiPedVehicleBlipIndex(ped) {
        return GetAiBlip(ped);
    }
    hud.getAiPedVehicleBlipIndex = getAiPedVehicleBlipIndex;
    /**
     * No comment provided
     *
     * Hash: 0x970F608F0EE6C885 | Since: 323
     */
    function getBlipAlpha(blip) {
        return GetBlipAlpha(blip);
    }
    hud.getBlipAlpha = getBlipAlpha;
    /**
     * No comment provided
     *
     * Hash: 0xDF729E8D20CF7327 | Since: 323
     */
    function getBlipColour(blip) {
        return GetBlipColour(blip);
    }
    hud.getBlipColour = getBlipColour;
    /**
     * No comment provided
     *
     * Hash: 0x586AFE3FF72D996E | Since: 323
     */
    function getBlipCoords(blip) {
        return new Vector3(GetBlipCoords(blip));
    }
    hud.getBlipCoords = getBlipCoords;
    /**
     * Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
     *
     * Hash: 0x2C173AE2BDB9385E | Since: 463
     */
    function getBlipFadeDirection(blip) {
        return Citizen.invokeNative('0x2C173AE2BDB9385E', blip);
    }
    hud.getBlipFadeDirection = getBlipFadeDirection;
    /**
     * Returns the Blip handle of given Entity.
     *
     * Hash: 0xBC8DBDCA2436F7E8 | Since: 323
     */
    function getBlipFromEntity(entity) {
        return GetBlipFromEntity(entity);
    }
    hud.getBlipFromEntity = getBlipFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0x729B5F1EFBC0AAEE | Since: 323
     */
    function getBlipHudColour(blip) {
        return GetBlipHudColour(blip);
    }
    hud.getBlipHudColour = getBlipHudColour;
    /**
     * No comment provided
     *
     * Hash: 0xFA7C7F0AADF25D09 | Since: 323
     */
    function getBlipInfoIdCoord(blip) {
        return new Vector3(GetBlipInfoIdCoord(blip));
    }
    hud.getBlipInfoIdCoord = getBlipInfoIdCoord;
    /**
     * No comment provided
     *
     * Hash: 0x1E314167F701DC3B | Since: 323
     */
    function getBlipInfoIdDisplay(blip) {
        return GetBlipInfoIdDisplay(blip);
    }
    hud.getBlipInfoIdDisplay = getBlipInfoIdDisplay;
    /**
     * No comment provided
     *
     * Hash: 0x4BA4E2553AFEDC2C | Since: 323
     */
    function getBlipInfoIdEntityIndex(blip) {
        return GetBlipInfoIdEntityIndex(blip);
    }
    hud.getBlipInfoIdEntityIndex = getBlipInfoIdEntityIndex;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x9B6786E4C03DD382 | Since: 323
     */
    function getBlipInfoIdPickupIndex(blip) {
        return GetBlipInfoIdPickupIndex(blip);
    }
    hud.getBlipInfoIdPickupIndex = getBlipInfoIdPickupIndex;
    /**
     * Returns a value based on what the blip is attached to
     * 1 - Vehicle
     * 2 - Ped
     * 3 - Object
     * 4 - Coord
     * 5 - unk
     * 6 - Pickup
     * 7 - Radius
     *
     * Hash: 0xBE9B0959FFD0779B | Since: 323
     */
    function getBlipInfoIdType(blip) {
        return GetBlipInfoIdType(blip);
    }
    hud.getBlipInfoIdType = getBlipInfoIdType;
    /**
     * No comment provided
     *
     * Hash: 0x003E92BA477F9D7F | Since: 2060
     */
    function getBlipRotation(blip) {
        return GetBlipRotation(blip);
    }
    hud.getBlipRotation = getBlipRotation;
    /**
     * Blips Images + IDs:
     * gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
     *
     * Hash: 0x1FC877464A04FC4F | Since: 323
     */
    function getBlipSprite(blip) {
        return GetBlipSprite(blip);
    }
    hud.getBlipSprite = getBlipSprite;
    /**
     * Returns a substring of a specified length starting at a specified position.
     *
     * Example:
     * // Get "STRING" text from "MY_STRING"
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME("MY_STRING", 3, 6);`
     *
     * Hash: 0x169BD9382084C8C0 | Since: 323
     */
    function getCharacterFromAudioConversationFilename(text, position, length) {
        return GetTextSubstring(text, position, length);
    }
    hud.getCharacterFromAudioConversationFilename = getCharacterFromAudioConversationFilename;
    /**
     * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
     *
     * Example:
     * // Get "STRING" text from "MY_STRING"
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 9);`
     * // Overflows are possibly replaced with underscores (needs verification)
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 10); // "STRING_"?`
     *
     * Hash: 0xCE94AEBA5D82908A | Since: 323
     */
    function getCharacterFromAudioConversationFilenameBytes(text, startPosition, endPosition) {
        return GetTextSubstringSlice(text, startPosition, endPosition);
    }
    hud.getCharacterFromAudioConversationFilenameBytes = getCharacterFromAudioConversationFilenameBytes;
    /**
     * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
     *
     * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
     *
     * Example:
     * // Condensed example of how Rockstar uses this function
     * `strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());`
     * `subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);`
     *
     * --
     *
     * "fm_race_creator.ysc", line 85115:
     * // parameters modified for clarity
     * BOOL sub_8e5aa(char *text, int length) {
     * for (i = 0; i <= (length - 2); i += 1) {
     * `if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), " ")) {`
     * return FALSE;
     * }
     * }
     * return TRUE;
     * }
     *
     * Hash: 0xB2798643312205C5 | Since: 323
     */
    function getCharacterFromAudioConversationFilenameWithByteLimit(text, position, length, maxLength) {
        return GetTextSubstringSafe(text, position, length, maxLength);
    }
    hud.getCharacterFromAudioConversationFilenameWithByteLimit = getCharacterFromAudioConversationFilenameWithByteLimit;
    /**
     * No comment provided
     *
     * Hash: 0x8F08017F9D7C47BD | Since: 323
     */
    function getCharacterMenuPedFloatStat(statHash) {
        return Citizen.invokeNative('0x8F08017F9D7C47BD', statHash, false);
    }
    hud.getCharacterMenuPedFloatStat = getCharacterMenuPedFloatStat;
    /**
     * No comment provided
     *
     * Hash: 0xCA6B2F7CE32AB653 | Since: 323
     */
    function getCharacterMenuPedIntStat() {
        return Citizen.invokeNative('0xCA6B2F7CE32AB653', undefined, undefined);
    }
    hud.getCharacterMenuPedIntStat = getCharacterMenuPedIntStat;
    /**
     * No comment provided
     *
     * Hash: 0x24A49BEAF468DC90 | Since: 323
     */
    function getCharacterMenuPedMaskedIntStat(statHash, mask) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return Citizen.invokeNative('0x24A49BEAF468DC90', statHash, 0, mask, false);
    }
    hud.getCharacterMenuPedMaskedIntStat = getCharacterMenuPedMaskedIntStat;
    /**
     * No comment provided
     *
     * Hash: 0xD484BF71050CA1EE | Since: 1180
     */
    function getClosestBlipInfoId(blipSprite) {
        return GetClosestBlipOfType(blipSprite);
    }
    hud.getClosestBlipInfoId = getClosestBlipInfoId;
    /**
     * `if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))`
     *
     * Hash: 0x2309595AD6145265 | Since: 323
     */
    function getCurrentFrontendMenuVersion() {
        return GetCurrentFrontendMenuVersion();
    }
    hud.getCurrentFrontendMenuVersion = getCurrentFrontendMenuVersion;
    /**
     * No comment provided
     *
     * Hash: 0x01A358D9128B7A86 | Since: 323
     */
    function getCurrentWebpageId() {
        return GetCurrentWebpageId();
    }
    hud.getCurrentWebpageId = getCurrentWebpageId;
    /**
     * No comment provided
     *
     * Hash: 0x97D47996FC48CBAD | Since: 323
     */
    function getCurrentWebsiteId() {
        return GetCurrentWebsiteId();
    }
    hud.getCurrentWebsiteId = getCurrentWebsiteId;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x52F0982D7FD156B6 | Since: 323
     */
    function getDefaultScriptRendertargetRenderId() {
        return GetDefaultScriptRendertargetRenderId();
    }
    hud.getDefaultScriptRendertargetRenderId = getDefaultScriptRendertargetRenderId;
    /**
     * Getter for SET_FAKE_SPECTATOR_MODE
     *
     * Hash: 0xC2D2AD9EAAE265B8 | Since: 505
     */
    function getFakeSpectatorMode() {
        return Citizen.invokeNative('0xC2D2AD9EAAE265B8');
    }
    hud.getFakeSpectatorMode = getFakeSpectatorMode;
    /**
     * `Gets a localized string literal from a label name. Can be used for output of e.g. VEHICLE::GET_LIVERY_NAME. To check if a GXT label can be localized with this, HUD::DOES_TEXT_LABEL_EXIST can be used.`
     *
     * Hash: 0x7B5280EBA9840C72 | Since: 323
     */
    function getFilenameForAudioConversation(labelName) {
        return GetFilenameForAudioConversation(labelName);
    }
    hud.getFilenameForAudioConversation = getFilenameForAudioConversation;
    /**
     * No comment provided
     *
     * Hash: 0x1BEDE233E6CD2A1F | Since: 323
     */
    function getFirstBlipInfoId(blipSprite) {
        return GetFirstBlipInfoId(blipSprite);
    }
    hud.getFirstBlipInfoId = getFirstBlipInfoId;
    /**
     * No comment provided
     *
     * Hash: 0x98C3CF913D895111 | Since: 505
     */
    function getFirstNCharactersOfLiteralString(_string, length) {
        return Citizen.invokeNative('0x98C3CF913D895111', _string, length);
    }
    hud.getFirstNCharactersOfLiteralString = getFirstNCharactersOfLiteralString;
    /**
     * Returns the ActionScript flagValue.
     * ActionScript flags are global flags that scaleforms use
     * Flags found during testing
     * 0: Returns 1 if the web_browser keyboard is open, otherwise 0
     * 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
     * 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
     * 9: Returns the current selection on the mobile phone scaleform
     *
     * There are 20 flags in total.
     *
     * Hash: 0xE3B05614DCE1D014 | Since: 323
     */
    function getGlobalActionscriptFlag(flagIndex) {
        return GetGlobalActionscriptFlag(flagIndex);
    }
    hud.getGlobalActionscriptFlag = getGlobalActionscriptFlag;
    /**
     * No comment provided
     *
     * Hash: 0x7C9C91AB74A0360F | Since: 323
     */
    function getColour(hudColorIndex) {
        return GetHudColour(hudColorIndex);
    }
    hud.getColour = getColour;
    /**
     * No comment provided
     *
     * Hash: 0x223CA69A8C4417FD | Since: 323
     */
    function getComponentPosition(id) {
        return new Vector3(GetHudComponentPosition(id));
    }
    hud.getComponentPosition = getComponentPosition;
    /**
     * World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
     *
     * Hash: 0xF9904D11F1ACBEC3 | Since: 323
     */
    function getScreenPositionFromWorldPosition(worldPos) {
        return GetHudScreenPositionFromWorldPosition(worldPos.x, worldPos.y, worldPos.z);
    }
    hud.getScreenPositionFromWorldPosition = getScreenPositionFromWorldPosition;
    /**
     * Returns the length of the string passed (much like strlen).
     *
     * Hash: 0xF030907CCBB8A9FD | Since: 323
     */
    function getLengthOfLiteralString(_string) {
        return GetLengthOfLiteralString(_string);
    }
    hud.getLengthOfLiteralString = getLengthOfLiteralString;
    /**
     * No comment provided
     *
     * Hash: 0x43E4111189E54F0E | Since: 323
     */
    function getLengthOfLiteralStringInBytes(_string) {
        return GetLengthOfLiteralStringInBytes(_string);
    }
    hud.getLengthOfLiteralStringInBytes = getLengthOfLiteralStringInBytes;
    /**
     * Returns the string length of the string from the gxt string .
     *
     * Hash: 0x801BD273D3A23F74 | Since: 323
     */
    function getLengthOfStringWithThisTextLabel(gxt) {
        return GetLengthOfStringWithThisTextLabel(gxt);
    }
    hud.getLengthOfStringWithThisTextLabel = getLengthOfStringWithThisTextLabel;
    /**
     * No comment provided
     *
     * Hash: 0xDCD4EC3F419D02FA | Since: 323
     */
    function getMainPlayerBlipId() {
        return GetMainPlayerBlipId();
    }
    hud.getMainPlayerBlipId = getMainPlayerBlipId;
    /**
     * lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
     * selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
     * selectedItemUniqueId: this is uniqueID of the currently selected menu item
     *
     * when the pausemenu is closed:
     * lastItemMenuId = -1
     * selectedItemMenuId = -1
     * selectedItemUniqueId = 0
     *
     * when the header gains focus:
     * lastItemMenuId updates as normal or 0 if the pausemenu was just opened
     * selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
     * selectedItemUniqueId = -1
     *
     * when focus is moved from the header to a pausemenu page:
     * lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
     * selectedItemMenuId = -1
     * selectedItemUniqueId updates as normal
     *
     * Hash: 0x7E17BE53E1AAABAF | Since: 323
     */
    function getMenuLayoutChangedEventDetails() {
        return GetPauseMenuSelectionData();
    }
    hud.getMenuLayoutChangedEventDetails = getMenuLayoutChangedEventDetails;
    /**
     * p0 was always 0xAE2602A3.
     *
     * Hash: 0x052991E59076E4E4 | Since: 323
     */
    function getMenuPedBoolStat(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return GetMenuPedBoolStat(statHash);
    }
    hud.getMenuPedBoolStat = getMenuPedBoolStat;
    /**
     * No comment provided
     *
     * Hash: 0x5FBD7095FE7AE57F | Since: 323
     */
    function getMenuPedFloatStat(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return GetMenuPedFloatStat(statHash);
    }
    hud.getMenuPedFloatStat = getMenuPedFloatStat;
    /**
     * No comment provided
     *
     * Hash: 0xEF4CED81CEBEDC6D | Since: 323
     */
    function getMenuPedIntStat() {
        return GetMenuPedIntStat(undefined);
    }
    hud.getMenuPedIntStat = getMenuPedIntStat;
    /**
     * No comment provided
     *
     * Hash: 0x90A6526CF0381030 | Since: 323
     */
    function getMenuPedMaskedIntStat(statHash, mask) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return GetMenuPedMaskedIntStat(statHash, mask, false);
    }
    hud.getMenuPedMaskedIntStat = getMenuPedMaskedIntStat;
    /**
     * No comment provided
     *
     * Hash: 0x36C1451A88A09630 | Since: 323
     */
    function getMenuTriggerEventDetails() {
        return GetPauseMenuSelection();
    }
    hud.getMenuTriggerEventDetails = getMenuTriggerEventDetails;
    /**
     * No comment provided
     *
     * Hash: 0x6E31B91145873922 | Since: 323
     */
    function getMinimapFowCoordinateIsRevealed(pos) {
        return GetMinimapFowCoordinateIsRevealed(pos.x, pos.y, pos.z);
    }
    hud.getMinimapFowCoordinateIsRevealed = getMinimapFowCoordinateIsRevealed;
    /**
     * No comment provided
     *
     * Hash: 0xE0130B41D3CF4574 | Since: 323
     */
    function getMinimapFowDiscoveryRatio() {
        return GetMinimapFowDiscoveryRatio();
    }
    hud.getMinimapFowDiscoveryRatio = getMinimapFowDiscoveryRatio;
    /**
     * No comment provided
     *
     * Hash: 0x632B2940C67F4EA9 | Since: 323
     */
    function getMouseEvent(scaleformHandle) {
        return GetScaleformMovieCursorSelection(scaleformHandle);
    }
    hud.getMouseEvent = getMouseEvent;
    /**
     * No comment provided
     *
     * Hash: 0x1A6478B61C6BDC3B | Since: 323
     */
    function getNamedRendertargetRenderId(name) {
        return GetNamedRendertargetRenderId(name);
    }
    hud.getNamedRendertargetRenderId = getNamedRendertargetRenderId;
    /**
     * No comment provided
     *
     * Hash: 0x5C90988E7C8E1AF4 | Since: 323
     */
    function getNewSelectedMissionCreatorBlip() {
        return GetNewSelectedMissionCreatorBlip();
    }
    hud.getNewSelectedMissionCreatorBlip = getNewSelectedMissionCreatorBlip;
    /**
     * No comment provided
     *
     * Hash: 0x14F96AA50D6FBEA7 | Since: 323
     */
    function getNextBlipInfoId(blipSprite) {
        return GetNextBlipInfoId(blipSprite);
    }
    hud.getNextBlipInfoId = getNextBlipInfoId;
    /**
     * No comment provided
     *
     * Hash: 0x3F0CF9CB7E589B88 | Since: 463
     */
    function getNorthBlidIndex() {
        return GetNorthRadarBlip();
    }
    hud.getNorthBlidIndex = getNorthBlidIndex;
    /**
     * No comment provided
     *
     * Hash: 0x9A3FF3DE163034E8 | Since: 323
     */
    function getNumberOfActiveBlips() {
        return GetNumberOfActiveBlips();
    }
    hud.getNumberOfActiveBlips = getNumberOfActiveBlips;
    /**
     * No comment provided
     *
     * Hash: 0x5BFF36D6ED83E0AE | Since: 323
     */
    function getPauseMenuPosition() {
        return new Vector3(GetPauseMenuCursorPosition());
    }
    hud.getPauseMenuPosition = getPauseMenuPosition;
    /**
     * Returns:
     *
     * 0
     * 5
     * 10
     * 15
     * 20
     * 25
     * 30
     * 35
     *
     *
     * Hash: 0x272ACD84970869C5 | Since: 323
     */
    function getPauseMenuState() {
        return GetPauseMenuState();
    }
    hud.getPauseMenuState = getPauseMenuState;
    /**
     * No comment provided
     *
     * Hash: 0xA238192F33110615 | Since: 323
     */
    function getPmPlayerCrewColor() {
        return Citizen.invokeNative('0xA238192F33110615');
    }
    hud.getPmPlayerCrewColor = getPmPlayerCrewColor;
    /**
     * This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
     *
     * Hash: 0xDB88A37483346780 | Since: 323
     */
    function getRenderedCharacterHeight(size, font) {
        return GetRenderedCharacterHeight(size, font);
    }
    hud.getRenderedCharacterHeight = getRenderedCharacterHeight;
    /**
     * No comment provided
     *
     * Hash: 0x593FEAE1F73392D4 | Since: 323
     */
    function getScreenCodeWantsScriptToControl() {
        return Citizen.invokeNative('0x593FEAE1F73392D4');
    }
    hud.getScreenCodeWantsScriptToControl = getScreenCodeWantsScriptToControl;
    /**
     * No comment provided
     *
     * Hash: 0x4A9923385BDB9DAD | Since: 323
     */
    function getStandardBlipEnumId() {
        return GetStandardBlipEnumId();
    }
    hud.getStandardBlipEnumId = getStandardBlipEnumId;
    /**
     * This functions converts the hash of a street name into a readable string.
     *
     * `For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.`
     *
     * Hash: 0xD0EF8A959B8A4CB9 | Since: 323
     */
    function getStreetNameFromHashKey(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return GetStreetNameFromHashKey(hash);
    }
    hud.getStreetNameFromHashKey = getStreetNameFromHashKey;
    /**
     * Has to do with the confirmation overlay (E.g. confirm exit)
     *
     * Hash: 0x81DF9ABA6C83DFF9 | Since: 1290
     */
    function getWarningScreenMessageHash() {
        return GetWarningMessageTitleHash();
    }
    hud.getWarningScreenMessageHash = getWarningScreenMessageHash;
    /**
     * No comment provided
     *
     * Hash: 0x186E5D252FA50E7D | Since: 323
     */
    function getWaypointBlipEnumId() {
        return GetWaypointBlipEnumId();
    }
    hud.getWaypointBlipEnumId = getWaypointBlipEnumId;
    /**
     * p1 is either 1 or 2 in the PC scripts.
     *
     * Hash: 0xAC0BFBDC3BE00E14 | Since: 323
     */
    function givePedToPauseMenu(ped) {
        GivePedToPauseMenu(ped, 0);
    }
    hud.givePedToPauseMenu = givePedToPauseMenu;
    /**
     * No comment provided
     *
     * Hash: 0x02245FE4BED318B8 | Since: 323
     */
    function hasAdditionalTextLoaded(slot) {
        return HasAdditionalTextLoaded(slot);
    }
    hud.hasAdditionalTextLoaded = hasAdditionalTextLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xA277800A9EAE340E | Since: 323
     */
    function hasDirectorModeBeenLaunchedByCode() {
        return HasDirectorModeBeenTriggered();
    }
    hud.hasDirectorModeBeenLaunchedByCode = hasDirectorModeBeenLaunchedByCode;
    /**
     * No comment provided
     *
     * Hash: 0x2E22FEFA0100275E | Since: 323
     */
    function hasMenuLayoutChangedEventOccurred() {
        return Citizen.invokeNative('0x2E22FEFA0100275E');
    }
    hud.hasMenuLayoutChangedEventOccurred = hasMenuLayoutChangedEventOccurred;
    /**
     * No comment provided
     *
     * Hash: 0xF284AC67940C6812 | Since: 323
     */
    function hasMenuTriggerEventOccurred() {
        return Citizen.invokeNative('0xF284AC67940C6812');
    }
    hud.hasMenuTriggerEventOccurred = hasMenuTriggerEventOccurred;
    /**
     * No comment provided
     *
     * Hash: 0x214CD562A939246A | Since: 323
     */
    function hasScriptHiddenHelpThisFrame() {
        return Citizen.invokeNative('0x214CD562A939246A');
    }
    hud.hasScriptHiddenHelpThisFrame = hasScriptHiddenHelpThisFrame;
    /**
     * Checks if the specified gxt has loaded into the passed slot.
     *
     * Hash: 0xADBF060E2B30C5BC | Since: 323
     */
    function hasThisAdditionalTextLoaded(gxt, slot) {
        return HasThisAdditionalTextLoaded(gxt, slot);
    }
    hud.hasThisAdditionalTextLoaded = hasThisAdditionalTextLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xD46923FC481CA285 | Since: 323
     */
    function hideHelpTextThisFrame() {
        HideHelpTextThisFrame();
    }
    hud.hideHelpTextThisFrame = hideHelpTextThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x243296A510B562B6 | Since: 2060
     */
    function hidemarkersThisFrame() {
        Citizen.invokeNative('0x243296A510B562B6');
    }
    hud.hidemarkersThisFrame = hidemarkersThisFrame;
    /**
     * Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)
     *
     * Hash: 0x719FF505F097FD20 | Since: 323
     */
    function hideAndRadarThisFrame() {
        HideHudAndRadarThisFrame();
    }
    hud.hideAndRadarThisFrame = hideAndRadarThisFrame;
    /**
     * This function hides various HUD (Heads-up Display) components.
     * Listed below are the integers and the corresponding HUD component.
     * - 1 : WANTED_STARS
     * - 2 : WEAPON_ICON
     * - 3 : CASH
     * - 4 : MP_CASH
     * - 5 : MP_MESSAGE
     * - 6 : VEHICLE_NAME
     * - 7 : AREA_NAME
     * - 8 : VEHICLE_CLASS
     * - 9 : STREET_NAME
     * - 10 : HELP_TEXT
     * - 11 : FLOATING_HELP_TEXT_1
     * - 12 : FLOATING_HELP_TEXT_2
     * - 13 : CASH_CHANGE
     * - 14 : RETICLE
     * - 15 : SUBTITLE_TEXT
     * - 16 : RADIO_STATIONS
     * - 17 : SAVING_GAME
     * - 18 : GAME_STREAM
     * - 19 : WEAPON_WHEEL
     * - 20 : WEAPON_WHEEL_STATS
     * - 21 : HUD_COMPONENTS
     * - 22 : HUD_WEAPONS
     *
     * These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
     *
     * Hash: 0x6806C51AD12B83B8 | Since: 323
     */
    function hideComponentThisFrame(id) {
        HideHudComponentThisFrame(id);
    }
    hud.hideComponentThisFrame = hideComponentThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x4B0311D3CDC4648F | Since: 323
     */
    function hideLoadingOnFadeThisFrame() {
        HideLoadingOnFadeThisFrame();
    }
    hud.hideLoadingOnFadeThisFrame = hideLoadingOnFadeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x5FBAE526203990C9 | Since: 323
     */
    function hideMinimapExteriorMapThisFrame() {
        HideMinimapExteriorMapThisFrame();
    }
    hud.hideMinimapExteriorMapThisFrame = hideMinimapExteriorMapThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x20FE7FDFEEAD38C0 | Since: 323
     */
    function hideMinimapInteriorMapThisFrame() {
        HideMinimapInteriorMapThisFrame();
    }
    hud.hideMinimapInteriorMapThisFrame = hideMinimapInteriorMapThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x532CFF637EF80148 | Since: 323
     */
    function hideNumberOnBlip(blip) {
        HideNumberOnBlip(blip);
    }
    hud.hideNumberOnBlip = hideNumberOnBlip;
    /**
     * No comment provided
     *
     * Hash: 0xE374C498D8BADC14 | Since: 323
     */
    function hideScriptedComponentThisFrame(id) {
        HideScriptedHudComponentThisFrame(id);
    }
    hud.hideScriptedComponentThisFrame = hideScriptedComponentThisFrame;
    /**
     * Hides area and vehicle name HUD components for one frame.
     *
     * Hash: 0xA4DEDE28B1814289 | Since: 323
     */
    function hideStreetAndCarNamesThisFrame() {
        HideAreaAndVehicleNameThisFrame();
    }
    hud.hideStreetAndCarNamesThisFrame = hideStreetAndCarNamesThisFrame;
    /**
     * Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.
     *
     * Hash: 0x488043841BBE156F | Since: 1011
     */
    function forceSpecialVehicleWeaponWheel() {
        HudDisplayLoadingScreenTips();
    }
    hud.forceSpecialVehicleWeaponWheel = forceSpecialVehicleWeaponWheel;
    /**
     * Forces the weapon wheel to show/hide.
     *
     * Hash: 0xEB354E5376BC81A7 | Since: 323
     */
    function forceWeaponWheel(show) {
        HudForceWeaponWheel(show);
    }
    hud.forceWeaponWheel = forceWeaponWheel;
    /**
     * Returns the weapon hash to the selected/highlighted weapon in the wheel
     *
     * Hash: 0xA48931185F0536FE | Since: 323
     */
    function getWeaponWheelCurrentlyHighlighted() {
        return HudWeaponWheelGetSelectedHash();
    }
    hud.getWeaponWheelCurrentlyHighlighted = getWeaponWheelCurrentlyHighlighted;
    /**
     * Returns the weapon hash active in a specific weapon wheel slotList
     *
     * Hash: 0xA13E93403F26C812 | Since: 323
     */
    function getWeaponWheelTopSlot(weaponTypeIndex) {
        return HudWeaponWheelGetSlotHash(weaponTypeIndex);
    }
    hud.getWeaponWheelTopSlot = getWeaponWheelTopSlot;
    /**
     * Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
     *
     * Hash: 0x72C1056D678BB7D8 | Since: 323
     */
    function setWeaponWheelTopSlot(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        HudSetWeaponWheelTopSlot(weaponHash);
    }
    hud.setWeaponWheelTopSlot = setWeaponWheelTopSlot;
    /**
     * Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
     *
     * Hash: 0x14C9FDCC41F81F63 | Since: 323
     */
    function showingCharacterSwitchSelection(toggle) {
        HudWeaponWheelIgnoreControlInput(toggle);
    }
    hud.showingCharacterSwitchSelection = showingCharacterSwitchSelection;
    /**
     * Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
     *
     * Hash: 0x0AFC4AF510774B47 | Since: 323
     */
    function suppressWeaponWheelResultsThisFrame() {
        HudWeaponWheelIgnoreSelection();
    }
    hud.suppressWeaponWheelResultsThisFrame = suppressWeaponWheelResultsThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xA5E41FD83AD6CEF0 | Since: 323
     */
    function isBlipFlashing(blip) {
        return IsBlipFlashing(blip);
    }
    hud.isBlipFlashing = isBlipFlashing;
    /**
     * No comment provided
     *
     * Hash: 0xE41CA53051197A27 | Since: 323
     */
    function isBlipOnMinimap(blip) {
        return IsBlipOnMinimap(blip);
    }
    hud.isBlipOnMinimap = isBlipOnMinimap;
    /**
     * No comment provided
     *
     * Hash: 0xDA5F8727EB75B926 | Since: 323
     */
    function isBlipShortRange(blip) {
        return IsBlipShortRange(blip);
    }
    hud.isBlipShortRange = isBlipShortRange;
    /**
     * No comment provided
     *
     * Hash: 0x2432784ACA090DA4 | Since: 323
     */
    function isFloatingHelpTextOnScreen(hudIndex) {
        return IsFloatingHelpTextOnScreen(hudIndex);
    }
    hud.isFloatingHelpTextOnScreen = isFloatingHelpTextOnScreen;
    /**
     * No comment provided
     *
     * Hash: 0x3BAB9A4E4F2FF5C7 | Since: 323
     */
    function isFrontendReadyForControl() {
        return IsFrontendReadyForControl();
    }
    hud.isFrontendReadyForControl = isFrontendReadyForControl;
    /**
     * No comment provided
     *
     * Hash: 0x4D79439A6B55AC67 | Since: 323
     */
    function isHelpMessageBeingDisplayed() {
        return IsHelpMessageBeingDisplayed();
    }
    hud.isHelpMessageBeingDisplayed = isHelpMessageBeingDisplayed;
    /**
     * No comment provided
     *
     * Hash: 0x327EDEEEAC55C369 | Since: 323
     */
    function isHelpMessageFadingOut() {
        return IsHelpMessageFadingOut();
    }
    hud.isHelpMessageFadingOut = isHelpMessageFadingOut;
    /**
     * No comment provided
     *
     * Hash: 0xDAD37F45428801AE | Since: 323
     */
    function isHelpMessageOnScreen() {
        return IsHelpMessageOnScreen();
    }
    hud.isHelpMessageOnScreen = isHelpMessageOnScreen;
    /**
     * No comment provided
     *
     * Hash: 0x4167EFE0527D706E | Since: 323
     */
    function isHoveringOverMissionCreatorBlip() {
        return IsHoveringOverMissionCreatorBlip();
    }
    hud.isHoveringOverMissionCreatorBlip = isHoveringOverMissionCreatorBlip;
    /**
     * Full list of components below
     *
     * HUD = 0;
     * HUD_WANTED_STARS = 1;
     * HUD_WEAPON_ICON = 2;
     * HUD_CASH = 3;
     * HUD_MP_CASH = 4;
     * HUD_MP_MESSAGE = 5;
     * HUD_VEHICLE_NAME = 6;
     * HUD_AREA_NAME = 7;
     * HUD_VEHICLE_CLASS = 8;
     * HUD_STREET_NAME = 9;
     * HUD_HELP_TEXT = 10;
     * HUD_FLOATING_HELP_TEXT_1 = 11;
     * HUD_FLOATING_HELP_TEXT_2 = 12;
     * HUD_CASH_CHANGE = 13;
     * HUD_RETICLE = 14;
     * HUD_SUBTITLE_TEXT = 15;
     * HUD_RADIO_STATIONS = 16;
     * HUD_SAVING_GAME = 17;
     * HUD_GAME_STREAM = 18;
     * HUD_WEAPON_WHEEL = 19;
     * HUD_WEAPON_WHEEL_STATS = 20;
     * MAX_HUD_COMPONENTS = 21;
     * MAX_HUD_WEAPONS = 22;
     * MAX_SCRIPTED_HUD_COMPONENTS = 141;
     *
     * Hash: 0xBC4C9EA5391ECC0D | Since: 323
     */
    function isComponentActive(id) {
        return IsHudComponentActive(id);
    }
    hud.isComponentActive = isComponentActive;
    /**
     * No comment provided
     *
     * Hash: 0xA86478C6958735C5 | Since: 323
     */
    function isHidden() {
        return IsHudHidden();
    }
    hud.isHidden = isHidden;
    /**
     * No comment provided
     *
     * Hash: 0x1930DFA731813EC4 | Since: 323
     */
    function isPreferenceSwitchedOn() {
        return IsHudPreferenceSwitchedOn();
    }
    hud.isPreferenceSwitchedOn = isPreferenceSwitchedOn;
    /**
     * No comment provided
     *
     * Hash: 0x801879A9B4F4B2FB | Since: 372
     */
    function isImeInProgress() {
        return Citizen.invokeNative('0x801879A9B4F4B2FB');
    }
    hud.isImeInProgress = isImeInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x7984C03AA5CC2F41 | Since: 323
     */
    function isMessageBeingDisplayed() {
        return IsMessageBeingDisplayed();
    }
    hud.isMessageBeingDisplayed = isMessageBeingDisplayed;
    /**
     * No comment provided
     *
     * Hash: 0xAF754F20EB5CD51A | Since: 323
     */
    function isMinimapRendering() {
        return IsMinimapRendering();
    }
    hud.isMinimapRendering = isMinimapRendering;
    /**
     * No comment provided
     *
     * Hash: 0x26F49BF3381D933D | Since: 323
     */
    function isMissionCreatorBlip(blip) {
        return IsMissionCreatorBlip(blip);
    }
    hud.isMissionCreatorBlip = isMissionCreatorBlip;
    /**
     * Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
     *
     * Hash: 0x3D9ACB1EB139E702 | Since: 323
     */
    function isMouseRolledOverInstructionalButtons() {
        return IsMouseRolledOverInstructionalButtons();
    }
    hud.isMouseRolledOverInstructionalButtons = isMouseRolledOverInstructionalButtons;
    /**
     * No comment provided
     *
     * Hash: 0x4E929E7A5796FD26 | Since: 323
     */
    function isMpGamerTagActive(gamerTagId) {
        return IsMpGamerTagActive(gamerTagId);
    }
    hud.isMpGamerTagActive = isMpGamerTagActive;
    /**
     * No comment provided
     *
     * Hash: 0x595B5178E412E199 | Since: 323
     */
    function isMpGamerTagFree(gamerTagId) {
        return IsMpGamerTagFree(gamerTagId);
    }
    hud.isMpGamerTagFree = isMpGamerTagFree;
    /**
     * No comment provided
     *
     * Hash: 0x6E0EB3EB47C8D7AA | Since: 323
     */
    function isMpGamerTagMovieActive() {
        return IsMpGamerTagMovieActive();
    }
    hud.isMpGamerTagMovieActive = isMpGamerTagMovieActive;
    /**
     * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
     *
     * Hash: 0xB118AF58B5F332A1 | Since: 323
     */
    function isMpTextChatTyping() {
        return IsMultiplayerChatActive();
    }
    hud.isMpTextChatTyping = isMpTextChatTyping;
    /**
     * No comment provided
     *
     * Hash: 0x113750538FA31298 | Since: 323
     */
    function isNamedRendertargetLinked(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsNamedRendertargetLinked(modelHash);
    }
    hud.isNamedRendertargetLinked = isNamedRendertargetLinked;
    /**
     * No comment provided
     *
     * Hash: 0x78DCDC15C9F116B4 | Since: 323
     */
    function isNamedRendertargetRegistered(name) {
        return IsNamedRendertargetRegistered(name);
    }
    hud.isNamedRendertargetRegistered = isNamedRendertargetRegistered;
    /**
     * No comment provided
     *
     * Hash: 0x4E3CD0EF8A489541 | Since: 323
     */
    function isNavigatingMenuContent() {
        return IsNavigatingMenuContent();
    }
    hud.isNavigatingMenuContent = isNavigatingMenuContent;
    /**
     * Returns the same as IS_SOCIAL_CLUB_ACTIVE
     *
     * Hash: 0x6F72CD94F7B5B68C | Since: 323
     */
    function isOnlinePoliciesMenuActive() {
        return IsOnlinePoliciesMenuActive();
    }
    hud.isOnlinePoliciesMenuActive = isOnlinePoliciesMenuActive;
    /**
     * No comment provided
     *
     * Hash: 0x9049FE339D5F6F6F | Since: 323
     */
    function isPausemapInInteriorMode() {
        return IsPausemapInInteriorMode();
    }
    hud.isPausemapInInteriorMode = isPausemapInInteriorMode;
    /**
     * No comment provided
     *
     * Hash: 0xB0034A223497FFCB | Since: 323
     */
    function isPauseMenuActive() {
        return IsPauseMenuActive();
    }
    hud.isPauseMenuActive = isPauseMenuActive;
    /**
     * No comment provided
     *
     * Hash: 0x1C491717107431C7 | Since: 323
     */
    function isPauseMenuRestarting() {
        return IsPauseMenuRestarting();
    }
    hud.isPauseMenuRestarting = isPauseMenuRestarting;
    /**
     * No comment provided
     *
     * Hash: 0x157F93B036700462 | Since: 323
     */
    function isRadarHidden() {
        return IsRadarHidden();
    }
    hud.isRadarHidden = isRadarHidden;
    /**
     * No comment provided
     *
     * Hash: 0x9EB6522EA68F22FE | Since: 323
     */
    function isRadarPreferenceSwitchedOn() {
        return IsRadarPreferenceSwitchedOn();
    }
    hud.isRadarPreferenceSwitchedOn = isRadarPreferenceSwitchedOn;
    /**
     * No comment provided
     *
     * Hash: 0x9135584D09A3437E | Since: 323
     */
    function isReportugcMenuOpen() {
        return IsReportugcMenuOpen();
    }
    hud.isReportugcMenuOpen = isReportugcMenuOpen;
    /**
     * No comment provided
     *
     * Hash: 0xDD100EB17A94FF65 | Since: 323
     */
    function isScriptedComponentActive(id) {
        return IsScriptedHudComponentActive(id);
    }
    hud.isScriptedComponentActive = isScriptedComponentActive;
    /**
     * No comment provided
     *
     * Hash: 0x09C0403ED9A751C2 | Since: 323
     */
    function isScriptedComponentHiddenThisFrame(id) {
        return IsScriptedHudComponentHiddenThisFrame(id);
    }
    hud.isScriptedComponentHiddenThisFrame = isScriptedComponentHiddenThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xC406BE343FC4B9AF | Since: 323
     */
    function isSocialClubActive() {
        return IsSocialClubActive();
    }
    hud.isSocialClubActive = isSocialClubActive;
    /**
     * No comment provided
     *
     * Hash: 0x2F057596F2BD0061 | Since: 323
     */
    function isStorePendingNetworkShutdownToOpen() {
        return Citizen.invokeNative('0x2F057596F2BD0061');
    }
    hud.isStorePendingNetworkShutdownToOpen = isStorePendingNetworkShutdownToOpen;
    /**
     * No comment provided
     *
     * Hash: 0x8B6817B71B85EBF0 | Since: 323
     */
    function isStreamingAdditionalText() {
        return IsStreamingAdditionalText(0);
    }
    hud.isStreamingAdditionalText = isStreamingAdditionalText;
    /**
     * No comment provided
     *
     * Hash: 0xAD6DACA4BA53E0A4 | Since: 323
     */
    function isSubtitlePreferenceSwitchedOn() {
        return IsSubtitlePreferenceSwitchedOn();
    }
    hud.isSubtitlePreferenceSwitchedOn = isSubtitlePreferenceSwitchedOn;
    /**
     * No comment provided
     *
     * Hash: 0xEB709A36958ABE0D | Since: 323
     */
    function isUpdatingMpGamerTagNameAndCrewDetails(gamerTagId) {
        return IsValidMpGamerTagMovie(gamerTagId);
    }
    hud.isUpdatingMpGamerTagNameAndCrewDetails = isUpdatingMpGamerTagNameAndCrewDetails;
    /**
     * No comment provided
     *
     * Hash: 0xE18B138FABC53103 | Since: 323
     */
    function isWarningMessageActive() {
        return IsWarningMessageActive();
    }
    hud.isWarningMessageActive = isWarningMessageActive;
    /**
     * No comment provided
     *
     * Hash: 0xAF42195A42C63BBA | Since: 323
     */
    function isWarningMessageReadyForControl() {
        return IsWarningMessageActive2();
    }
    hud.isWarningMessageReadyForControl = isWarningMessageReadyForControl;
    /**
     * No comment provided
     *
     * Hash: 0x1DD1F58F493F1DA5 | Since: 323
     */
    function isWaypointActive() {
        return IsWaypointActive();
    }
    hud.isWaypointActive = isWaypointActive;
    /**
     * No comment provided
     *
     * Hash: 0xF6C09E276AEB3F2D | Since: 323
     */
    function linkNamedRendertarget(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        LinkNamedRendertarget(modelHash);
    }
    hud.linkNamedRendertarget = linkNamedRendertarget;
    /**
     * Locks the minimap to the specified angle in integer degrees.
     *
     * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
     *
     * Hash: 0x299FAEBB108AE05B | Since: 323
     */
    function lockMinimapAngle(angle) {
        LockMinimapAngle(angle);
    }
    hud.lockMinimapAngle = lockMinimapAngle;
    /**
     * Locks the minimap to the specified world position.
     *
     * Hash: 0x1279E861A329E73F | Since: 323
     */
    function lockMinimapPosition(x, y) {
        LockMinimapPosition(x, y);
    }
    hud.lockMinimapPosition = lockMinimapPosition;
    /**
     * Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
     *
     * Hash: 0x1DB21A44B09E8BA3 | Since: 323
     */
    function mpTextChatDisable(toggle) {
        DisableMultiplayerChat(toggle);
    }
    hud.mpTextChatDisable = mpTextChatDisable;
    /**
     * No comment provided
     *
     * Hash: 0x7C226D5346D4D10A | Since: 372
     */
    function mpTextChatIsTeamJob() {
        Citizen.invokeNative('0x7C226D5346D4D10A', undefined);
    }
    hud.mpTextChatIsTeamJob = mpTextChatIsTeamJob;
    /**
     * No comment provided
     *
     * Hash: 0x805D7CBB36FD6C4C | Since: 323
     */
    function openOnlinePoliciesMenu() {
        OpenOnlinePoliciesMenu();
    }
    hud.openOnlinePoliciesMenu = openOnlinePoliciesMenu;
    /**
     * Shows a menu for reporting UGC content.
     *
     * Hash: 0x523A590C1A3CC0D3 | Since: 323
     */
    function openReportugcMenu() {
        OpenReportugcMenu();
    }
    hud.openReportugcMenu = openReportugcMenu;
    /**
     * Uses the `SOCIAL_CLUB2` scaleform.
     * menu: GALLERY, MISSIONS, CREWS, MIGRATE, PLAYLISTS, JOBS
     *
     * Hash: 0x75D3691713C3B05A | Since: 323
     */
    function openSocialClubMenu(menu) {
        if (typeof menu === 'string')
            menu = misc.getHashKey(menu);
        OpenSocialClubMenu(menu);
    }
    hud.openSocialClubMenu = openSocialClubMenu;
    /**
     * No comment provided
     *
     * Hash: 0xF47E567B3630DD12 | Since: 678
     */
    function overrideMpTextChatColor(hudColor) {
        OverrideMultiplayerChatColour(0, hudColor);
    }
    hud.overrideMpTextChatColor = overrideMpTextChatColor;
    /**
     * No comment provided
     *
     * Hash: 0x6A1738B4323FE2D9 | Since: 573
     */
    function overrideMpTextChatTeamString(gxtEntryHash) {
        if (typeof gxtEntryHash === 'string')
            gxtEntryHash = misc.getHashKey(gxtEntryHash);
        OverrideMultiplayerChatPrefix(gxtEntryHash);
    }
    hud.overrideMpTextChatTeamString = overrideMpTextChatTeamString;
    /**
     * No comment provided
     *
     * Hash: 0x77F16B447824DA6C | Since: 323
     */
    function pauseMenuceptionGoDeeper(page) {
        PauseMenuceptionGoDeeper(page);
    }
    hud.pauseMenuceptionGoDeeper = pauseMenuceptionGoDeeper;
    /**
     * No comment provided
     *
     * Hash: 0xCDCA26E80FAECB8F | Since: 323
     */
    function pauseMenuceptionTheKick() {
        PauseMenuceptionTheKick();
    }
    hud.pauseMenuceptionTheKick = pauseMenuceptionTheKick;
    /**
     * Activates the specified frontend menu context.
     * pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.
     * The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
     * The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
     * This basically allows you to hide certain menu sections, or things like instructional buttons.
     *
     * Hash: 0xDD564BDD0472C936 | Since: 323
     */
    function pauseMenuActivateContext(contextHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        PauseMenuActivateContext(contextHash);
    }
    hud.pauseMenuActivateContext = pauseMenuActivateContext;
    /**
     * No comment provided
     *
     * Hash: 0x444D8CF241EC25C5 | Since: 323
     */
    function pauseMenuDeactivateContext(contextHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        PauseMenuDeactivateContext(contextHash);
    }
    hud.pauseMenuDeactivateContext = pauseMenuDeactivateContext;
    /**
     * No comment provided
     *
     * Hash: 0xDE03620F8703A9DF | Since: 323
     */
    function pauseMenuGetHairColourIndex() {
        return Citizen.invokeNative('0xDE03620F8703A9DF');
    }
    hud.pauseMenuGetHairColourIndex = pauseMenuGetHairColourIndex;
    /**
     * No comment provided
     *
     * Hash: 0xC8E1071177A23BE5 | Since: 323
     */
    function pauseMenuGetMouseClickEvent() {
        return Citizen.invokeNative('0xC8E1071177A23BE5');
    }
    hud.pauseMenuGetMouseClickEvent = pauseMenuGetMouseClickEvent;
    /**
     * No comment provided
     *
     * Hash: 0x359AF31A4B52F5ED | Since: 323
     */
    function pauseMenuGetMouseHoverIndex() {
        return PauseMenuGetIndexOfMouseHoveredSlot();
    }
    hud.pauseMenuGetMouseHoverIndex = pauseMenuGetMouseHoverIndex;
    /**
     * No comment provided
     *
     * Hash: 0x13C4B962653A5280 | Since: 323
     */
    function pauseMenuGetMouseHoverUniqueId() {
        return PauseMenuGetUniqueIdOfMouseHoveredSlot();
    }
    hud.pauseMenuGetMouseHoverUniqueId = pauseMenuGetMouseHoverUniqueId;
    /**
     * No comment provided
     *
     * Hash: 0x84698AB38D0C6636 | Since: 323
     */
    function pauseMenuIsContextActive(contextHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        return PauseMenuIsContextActive(contextHash);
    }
    hud.pauseMenuIsContextActive = pauseMenuIsContextActive;
    /**
     * No comment provided
     *
     * Hash: 0x2A25ADC48F87841F | Since: 323
     */
    function pauseMenuIsContextMenuActive() {
        return PauseMenuIsContextMenuActive();
    }
    hud.pauseMenuIsContextMenuActive = pauseMenuIsContextMenuActive;
    /**
     * No comment provided
     *
     * Hash: 0x4895BDEA16E7C080 | Since: 323
     */
    function pauseMenuRedrawInstructionalButtons() {
        PauseMenuRedrawInstructionalButtons(0);
    }
    hud.pauseMenuRedrawInstructionalButtons = pauseMenuRedrawInstructionalButtons;
    /**
     * No comment provided
     *
     * Hash: 0xC78E239AC5B2DDB9 | Since: 323
     */
    function pauseMenuSetBusySpinner(position, spinnerIndex) {
        PauseMenuSetBusySpinner(false, position, spinnerIndex);
    }
    hud.pauseMenuSetBusySpinner = pauseMenuSetBusySpinner;
    /**
     * No comment provided
     *
     * Hash: 0xF06EBB91A81E09E3 | Since: 323
     */
    function pauseMenuSetWarnOnTabChange() {
        PauseMenuSetWarnOnTabChange(false);
    }
    hud.pauseMenuSetWarnOnTabChange = pauseMenuSetWarnOnTabChange;
    /**
     * No comment provided
     *
     * Hash: 0x2DE6C5E2E996F178 | Since: 372
     */
    function pauseToggleFullscreenMap() {
        PauseToggleFullscreenMap(undefined);
    }
    hud.pauseToggleFullscreenMap = pauseToggleFullscreenMap;
    /**
     * No comment provided
     *
     * Hash: 0xC65AB383CD91DF98 | Since: 323
     */
    function preloadBusyspinner() {
        PreloadBusyspinner();
    }
    hud.preloadBusyspinner = preloadBusyspinner;
    /**
     * No comment provided
     *
     * Hash: 0x742D6FD43115AF73 | Since: 323
     */
    function pulseBlip(blip) {
        PulseBlip(blip);
    }
    hud.pulseBlip = pulseBlip;
    /**
     * No comment provided
     *
     * Hash: 0x81FA173F170560D1 | Since: 323
     */
    function refreshWaypoint() {
        RefreshWaypoint();
    }
    hud.refreshWaypoint = refreshWaypoint;
    /**
     * No comment provided
     *
     * Hash: 0x57D9C12635E25CE3 | Since: 323
     */
    function registerNamedRendertarget(name) {
        return RegisterNamedRendertarget(name, false);
    }
    hud.registerNamedRendertarget = registerNamedRendertarget;
    /**
     * Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
     * To disable the keys, use `0xEC9264727EEC0F28`
     *
     * Hash: 0x14621BB1DF14E2B2 | Since: 323
     */
    function releaseControlOfFrontend() {
        ReleaseControlOfFrontend();
    }
    hud.releaseControlOfFrontend = releaseControlOfFrontend;
    /**
     * No comment provided
     *
     * Hash: 0xE9F6FFE837354DD4 | Since: 323
     */
    function releaseNamedRendertarget(name) {
        return ReleaseNamedRendertarget(name);
    }
    hud.releaseNamedRendertarget = releaseNamedRendertarget;
    /**
     * No comment provided
     *
     * Hash: 0x2916A928514C9827 | Since: 573
     */
    function reloadMapMenu() {
        ReloadMapMenu();
    }
    hud.reloadMapMenu = reloadMapMenu;
    /**
     * In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
     *
     * E.g.:
     *
     * `Ped pped = PLAYER::PLAYER_PED_ID();`
     * `Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);`
     * `Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);`
     *
     * works fine.
     * But later attempting to delete it with:
     *
     * `Blip b = HUD::GET_BLIP_FROM_ENTITY(v);`
     * `if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);`
     *
     * doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
     *
     * `Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.`
     * -------------
     *
     * Passing the address of the variable instead of the value works for me.
     * e.g.
     * `int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);`
     * `HUD::REMOVE_BLIP(&blip);`
     *
     *
     * Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
     *
     * Hash: 0x86A652570E5F25DD | Since: 323
     */
    function removeBlip(blip) {
        RemoveBlip(blip);
    }
    hud.removeBlip = removeBlip;
    /**
     * Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
     *
     * Hash: 0xC594B315EDF2D4AF | Since: 323
     */
    function removeCopBlipFromPed(ped) {
        Citizen.invokeNative('0xC594B315EDF2D4AF', ped);
    }
    hud.removeCopBlipFromPed = removeCopBlipFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x35A3CD97B2C0A6D2 | Since: 1290
     */
    function removeFakeConeData(blip) {
        Citizen.invokeNative('0x35A3CD97B2C0A6D2', blip);
    }
    hud.removeFakeConeData = removeFakeConeData;
    /**
     * No comment provided
     *
     * Hash: 0x31698AA80E0223F8 | Since: 323
     */
    function removeMpGamerTag(gamerTagId) {
        RemoveMpGamerTag(gamerTagId);
    }
    hud.removeMpGamerTag = removeMpGamerTag;
    /**
     * No comment provided
     *
     * Hash: 0xC7C6789AA1CFEDD0 | Since: 323
     */
    function removeMultiplayerBankCash() {
        RemoveMultiplayerBankCash();
    }
    hud.removeMultiplayerBankCash = removeMultiplayerBankCash;
    /**
     * Removes multiplayer cash hud each frame
     *
     * Hash: 0x968F270E39141ECA | Since: 323
     */
    function removeMultiplayerCash() {
        RemoveMultiplayerHudCash();
    }
    hud.removeMultiplayerCash = removeMultiplayerCash;
    /**
     * No comment provided
     *
     * Hash: 0x95CF81BD06EE1887 | Since: 323
     */
    function removeMultiplayerWalletCash() {
        RemoveMultiplayerWalletCash();
    }
    hud.removeMultiplayerWalletCash = removeMultiplayerWalletCash;
    /**
     * No comment provided
     *
     * Hash: 0x6EF54AB721DC6242 | Since: 323
     */
    function removeWarningMessageOptionItems() {
        RemoveWarningMessageListItems();
    }
    hud.removeWarningMessageOptionItems = removeWarningMessageOptionItems;
    /**
     * makes hudColorIndex2 color into hudColorIndex color
     *
     * Hash: 0x1CCC708F0F850613 | Since: 323
     */
    function replaceColour(hudColorIndex, hudColorIndex2) {
        ReplaceHudColour(hudColorIndex, hudColorIndex2);
    }
    hud.replaceColour = replaceColour;
    /**
     * No comment provided
     *
     * Hash: 0xF314CF4F0211894E | Since: 323
     */
    function replaceColourWithRgba(hudColorIndex, r, g, b, a) {
        ReplaceHudColourWithRgba(hudColorIndex, r, g, b, a);
    }
    hud.replaceColourWithRgba = replaceColourWithRgba;
    /**
     * Request a gxt into the passed slot.
     *
     * Hash: 0x71A78003C8E71424 | Since: 323
     */
    function requestAdditionalText(gxt, slot) {
        RequestAdditionalText(gxt, slot);
    }
    hud.requestAdditionalText = requestAdditionalText;
    /**
     * No comment provided
     *
     * Hash: 0x6009F9F1AE90D8A6 | Since: 323
     */
    function requestAdditionalTextForDlc(gxt, slot) {
        RequestAdditionalTextForDlc(gxt, slot);
    }
    hud.requestAdditionalTextForDlc = requestAdditionalTextForDlc;
    /**
     * No comment provided
     *
     * Hash: 0xB99C4E4D9499DF29 | Since: 323
     */
    function resetGlobalActionscriptFlag(flagIndex) {
        ResetGlobalActionscriptFlag(flagIndex);
    }
    hud.resetGlobalActionscriptFlag = resetGlobalActionscriptFlag;
    /**
     * No comment provided
     *
     * Hash: 0x450930E616475D0D | Since: 323
     */
    function resetComponentValues(id) {
        ResetHudComponentValues(id);
    }
    hud.resetComponentValues = resetComponentValues;
    /**
     * No comment provided
     *
     * Hash: 0x12782CE0A636E9F0 | Since: 323
     */
    function resetReticuleValues() {
        ResetReticuleValues();
    }
    hud.resetReticuleValues = resetReticuleValues;
    /**
     * Before using this native click the native above and look at the decription.
     *
     * Example:
     * int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
     * Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
     * Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
     *
     * This native refreshes the frontend menu.
     *
     * p1 = Hash of Menu
     * p2 = Unknown but always works with -1.
     *
     * Hash: 0x10706DC6AD2D49C0 | Since: 323
     */
    function restartFrontendMenu(menuHash) {
        if (typeof menuHash === 'string')
            menuHash = misc.getHashKey(menuHash);
        RestartFrontendMenu(menuHash, 0);
    }
    hud.restartFrontendMenu = restartFrontendMenu;
    /**
     * No comment provided
     *
     * Hash: 0xF83D0FEBE75E62C9 | Since: 1290
     */
    function setupFakeConeData(blip) {
        Citizen.invokeNative('0xF83D0FEBE75E62C9', blip, 0, 0, 0, 0, 0, 0, undefined, 0);
    }
    hud.setupFakeConeData = setupFakeConeData;
    /**
     * No comment provided
     *
     * Hash: 0x9969599CCFF5D85E | Since: 323
     */
    function setAbilityBarValue() {
        SetAbilityBarValue(0, 0);
    }
    hud.setAbilityBarValue = setAbilityBarValue;
    /**
     * No comment provided
     *
     * Hash: 0x1DFEDD15019315A9 | Since: 1493
     */
    function setAbilityBarVisibility(visible) {
        SetAbilityBarVisibilityInMultiplayer(visible);
    }
    hud.setAbilityBarVisibility = setAbilityBarVisibility;
    /**
     * No comment provided
     *
     * Hash: 0x889329C80FE5963C | Since: 1868
     */
    function setAllowAbilityBar(toggle) {
        SetAllowAbilityBarInMultiplayer(toggle);
    }
    hud.setAllowAbilityBar = setAllowAbilityBar;
    /**
     * No comment provided
     *
     * Hash: 0x577599CCED639CA2 | Since: 505
     */
    function setAllowCommaOnTextInput() {
        SetAllowCommaOnTextInput(undefined);
    }
    hud.setAllowCommaOnTextInput = setAllowCommaOnTextInput;
    /**
     * No comment provided
     *
     * Hash: 0xEE76FF7E6A0166B0 | Since: 323
     */
    function setAllMpGamerTagsVisibility(gamerTagId, toggle) {
        SetMpGamerTagVisibilityAll(gamerTagId, toggle);
    }
    hud.setAllMpGamerTagsVisibility = setAllMpGamerTagsVisibility;
    /**
     * Toggles the big minimap state like in GTA:Online.
     *
     * Hash: 0x231C8F89D0539D8F | Since: 323
     */
    function setBigmapActive(toggleBigMap, showFullMap) {
        SetBigmapActive(toggleBigMap, showFullMap);
    }
    hud.setBigmapActive = setBigmapActive;
    /**
     * Sets alpha-channel for blip color.
     *
     * Example:
     *
     * `Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);`
     * `HUD::SET_BLIP_COLOUR(blip , 3);`
     * `HUD::SET_BLIP_ALPHA(blip , 64);`
     *
     *
     * Hash: 0x45FF974EEE1C8734 | Since: 323
     */
    function setBlipAlpha(blip, alpha) {
        SetBlipAlpha(blip, alpha);
    }
    hud.setBlipAlpha = setBlipAlpha;
    /**
     * false for enemy
     * true for friendly
     *
     * Hash: 0x6F6F290102C02AB4 | Since: 323
     */
    function setBlipAsFriendly(blip, toggle) {
        SetBlipAsFriendly(blip, toggle);
    }
    hud.setBlipAsFriendly = setBlipAsFriendly;
    /**
     * Makes a blip go small when off the minimap.
     *
     * Hash: 0x2B6D467DAB714E8D | Since: 323
     */
    function setBlipAsMinimalOnEdge(blip, toggle) {
        SetBlipShrink(blip, toggle);
    }
    hud.setBlipAsMinimalOnEdge = setBlipAsMinimalOnEdge;
    /**
     * No comment provided
     *
     * Hash: 0x24AC0137444F9FD5 | Since: 323
     */
    function setBlipAsMissionCreatorBlip(blip, toggle) {
        SetBlipAsMissionCreatorBlip(blip, toggle);
    }
    hud.setBlipAsMissionCreatorBlip = setBlipAsMissionCreatorBlip;
    /**
     * Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
     *
     * Hash: 0xBE8BE4FE60E27B72 | Since: 323
     */
    function setBlipAsShortRange(blip, toggle) {
        SetBlipAsShortRange(blip, toggle);
    }
    hud.setBlipAsShortRange = setBlipAsShortRange;
    /**
     * No comment provided
     *
     * Hash: 0xB203913733F27884 | Since: 323
     */
    function setBlipBright(blip, toggle) {
        SetBlipBright(blip, toggle);
    }
    hud.setBlipBright = setBlipBright;
    /**
     * Example: https://i.imgur.com/skY6vAJ.png
     *
     * Index:
     * 1 = No distance shown in legend
     * 2 = Distance shown in legend
     * 7 = "Other Players" category, also shows distance in legend
     * 10 = "Property" category
     * 11 = "Owned Property" category
     *
     * Any other value behaves like index = 1, index wraps around after 255
     * Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
     * Legend entries:
     * 7 = Other Players (BLIP_OTHPLYR)
     * 10 = Property (BLIP_PROPCAT)
     * 11 = Owned Property (BLIP_APARTCAT)
     *
     * Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
     *
     * Hash: 0x234CDD44D996FD9A | Since: 323
     */
    function setBlipCategory(blip, index) {
        SetBlipCategory(blip, index);
    }
    hud.setBlipCategory = setBlipCategory;
    /**
     * https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
     *
     * Hash: 0x03D7FB09E75D6B7E | Since: 323
     */
    function setBlipColour(blip, color) {
        SetBlipColour(blip, color);
    }
    hud.setBlipColour = setBlipColour;
    /**
     * No comment provided
     *
     * Hash: 0xAE2AF67E9D9AF65D | Since: 323
     */
    function setBlipCoords(blip, pos) {
        SetBlipCoords(blip, pos.x, pos.y, pos.z);
    }
    hud.setBlipCoords = setBlipCoords;
    /**
     * Display Id behaviours:
     * 0 = Doesn't show up, ever, anywhere.
     * 1 = Doesn't show up, ever, anywhere.
     * 2 = Shows on both main map and minimap. (Selectable on map)
     * 3 = Shows on main map only. (Selectable on map)
     * 4 = Shows on main map only. (Selectable on map)
     * 5 = Shows on minimap only.
     * 6 = Shows on both main map and minimap. (Selectable on map)
     * 7 = Doesn't show up, ever, anywhere.
     * 8 = Shows on both main map and minimap. (Not selectable on map)
     * 9 = Shows on minimap only.
     * 10 = Shows on both main map and minimap. (Not selectable on map)
     *
     * Anything higher than 10 seems to be exactly the same as 10.
     *
     * Hash: 0x9029B2F3DA924928 | Since: 323
     */
    function setBlipDisplay(blip, displayId) {
        SetBlipDisplay(blip, displayId);
    }
    hud.setBlipDisplay = setBlipDisplay;
    /**
     * Must be toggled before being queued for animation
     *
     * Hash: 0xC4278F70131BAA6D | Since: 323
     */
    function setBlipExtendedHeightThreshold(blip, toggle) {
        SetBlipDisplayIndicatorOnBlip(blip, toggle);
    }
    hud.setBlipExtendedHeightThreshold = setBlipExtendedHeightThreshold;
    /**
     * No comment provided
     *
     * Hash: 0x2AEE8F8390D2298C | Since: 323
     */
    function setBlipFade(blip, opacity, duration) {
        SetBlipFade(blip, opacity, duration);
    }
    hud.setBlipFade = setBlipFade;
    /**
     * No comment provided
     *
     * Hash: 0xB14552383D39CE3E | Since: 323
     */
    function setBlipFlashes(blip, toggle) {
        SetBlipFlashes(blip, toggle);
    }
    hud.setBlipFlashes = setBlipFlashes;
    /**
     * No comment provided
     *
     * Hash: 0x2E8D9498C56DD0D1 | Since: 323
     */
    function setBlipFlashesAlternate(blip, toggle) {
        SetBlipFlashesAlternate(blip, toggle);
    }
    hud.setBlipFlashesAlternate = setBlipFlashesAlternate;
    /**
     * No comment provided
     *
     * Hash: 0xAA51DB313C010A7E | Since: 323
     */
    function setBlipFlashInterval(blip) {
        SetBlipFlashInterval(blip, undefined);
    }
    hud.setBlipFlashInterval = setBlipFlashInterval;
    /**
     * Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
     *
     * Hash: 0xD3CD6FD297AE87CC | Since: 323
     */
    function setBlipFlashTimer(blip, duration) {
        SetBlipFlashTimer(blip, duration);
    }
    hud.setBlipFlashTimer = setBlipFlashTimer;
    /**
     * No comment provided
     *
     * Hash: 0x54318C915D27E4CE | Since: 323
     */
    function setBlipHiddenOnLegend(blip, toggle) {
        SetBlipHiddenOnLegend(blip, toggle);
    }
    hud.setBlipHiddenOnLegend = setBlipHiddenOnLegend;
    /**
     * No comment provided
     *
     * Hash: 0xE2590BC29220CEBB | Since: 323
     */
    function setBlipHighDetail(blip, toggle) {
        SetBlipHighDetail(blip, toggle);
    }
    hud.setBlipHighDetail = setBlipHighDetail;
    /**
     * No comment provided
     *
     * Hash: 0xB552929B85FC27EC | Since: 573
     */
    function setBlipMarkerLongDistance() {
        Citizen.invokeNative('0xB552929B85FC27EC', undefined, undefined);
    }
    hud.setBlipMarkerLongDistance = setBlipMarkerLongDistance;
    /**
     * Doesn't work if the label text of gxtEntry is >= 80.
     *
     * Hash: 0xEAA0FFE120D92784 | Since: 323
     */
    function setBlipNameFromTextFile(blip, gxtEntry) {
        SetBlipNameFromTextFile(blip, gxtEntry);
    }
    hud.setBlipNameFromTextFile = setBlipNameFromTextFile;
    /**
     * No comment provided
     *
     * Hash: 0x127DE7B20C60A6A3 | Since: 323
     */
    function setBlipNameToPlayerName(blip, player) {
        SetBlipNameToPlayerName(blip, player);
    }
    hud.setBlipNameToPlayerName = setBlipNameToPlayerName;
    /**
     * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
     *
     * Hash: 0xAE9FC9EF6A9FAC79 | Since: 323
     */
    function setBlipPriority(blip, priority) {
        SetBlipPriority(blip, priority);
    }
    hud.setBlipPriority = setBlipPriority;
    /**
     * After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
     *
     * Hash: 0xF87683CDF73C3F6E | Since: 323
     */
    function setBlipRotation(blip, rotation) {
        SetBlipRotation(blip, rotation);
    }
    hud.setBlipRotation = setBlipRotation;
    /**
     * Does not require whole number/integer rotations.
     *
     * Hash: 0xA8B6AFDAC320AC87 | Since: 877
     */
    function setBlipRotationWithFloat(blip, heading) {
        SetBlipSquaredRotation(blip, heading);
    }
    hud.setBlipRotationWithFloat = setBlipRotationWithFloat;
    /**
     * Enable / disable showing route for the Blip-object.
     *
     * Hash: 0x4F7D8A9BFB0B43E9 | Since: 323
     */
    function setBlipRoute(blip, enabled) {
        SetBlipRoute(blip, enabled);
    }
    hud.setBlipRoute = setBlipRoute;
    /**
     * No comment provided
     *
     * Hash: 0x837155CD2F63DA09 | Since: 323
     */
    function setBlipRouteColour(blip, colour) {
        SetBlipRouteColour(blip, colour);
    }
    hud.setBlipRouteColour = setBlipRouteColour;
    /**
     * No comment provided
     *
     * Hash: 0xD38744167B2FA257 | Since: 323
     */
    function setBlipScale(blip, scale) {
        SetBlipScale(blip, scale);
    }
    hud.setBlipScale = setBlipScale;
    /**
     * See https://imgur.com/a/lLkEsMN
     *
     * Hash: 0xCD6524439909C979 | Since: 1734
     */
    function setBlipScale2d(blip, xScale, yScale) {
        SetBlipScaleTransformation(blip, xScale, yScale);
    }
    hud.setBlipScale2d = setBlipScale2d;
    /**
     * Can be used to give blips any RGB colour with SET_BLIP_COLOUR(blip, 84).
     *
     * Hash: 0x14892474891E09EB | Since: 323
     */
    function setBlipSecondaryColour(blip, r, g, b) {
        SetBlipSecondaryColour(blip, r, g, b);
    }
    hud.setBlipSecondaryColour = setBlipSecondaryColour;
    /**
     * No comment provided
     *
     * Hash: 0x4B5B620C9B59ED34 | Since: 678
     */
    function setBlipShortHeightThreshold() {
        Citizen.invokeNative('0x4B5B620C9B59ED34', undefined, undefined);
    }
    hud.setBlipShortHeightThreshold = setBlipShortHeightThreshold;
    /**
     * As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
     *
     * Hash: 0x13127EC3665E8EE1 | Since: 323
     */
    function setBlipShowCone(blip, toggle, hudColorIndex) {
        SetBlipShowCone(blip, toggle, hudColorIndex);
    }
    hud.setBlipShowCone = setBlipShowCone;
    /**
     * Sets the displayed sprite for a specific blip..
     *
     * You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
     * https://pastebin.com/Bpj9Sfft
     *
     * Blips Images + IDs:
     * https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
     *
     * Hash: 0xDF735600A4696DAF | Since: 323
     */
    function setBlipSprite(blip, spriteId) {
        SetBlipSprite(blip, spriteId);
    }
    hud.setBlipSprite = setBlipSprite;
    /**
     * No comment provided
     *
     * Hash: 0x2C9F302398E13141 | Since: 1103
     */
    function setBlipUseHeightIndicatorOnEdge(blip) {
        Citizen.invokeNative('0x2C9F302398E13141', blip, undefined);
    }
    hud.setBlipUseHeightIndicatorOnEdge = setBlipUseHeightIndicatorOnEdge;
    /**
     * No comment provided
     *
     * Hash: 0xD1942374085C8469 | Since: 505
     */
    function setBlockWantedFlash(disabled) {
        Citizen.invokeNative('0xD1942374085C8469', disabled);
    }
    hud.setBlockWantedFlash = setBlockWantedFlash;
    /**
     * No comment provided
     *
     * Hash: 0x39BBF623FC803EAC | Since: 323
     */
    function setColourOfNextTextComponent(hudColor) {
        SetColourOfNextTextComponent(hudColor);
    }
    hud.setColourOfNextTextComponent = setColourOfNextTextComponent;
    /**
     * No comment provided
     *
     * Hash: 0x9FCB3CBFB3EAD69A | Since: 1734
     */
    function setCopBlipSprite() {
        Citizen.invokeNative('0x9FCB3CBFB3EAD69A', 0, 0);
    }
    hud.setCopBlipSprite = setCopBlipSprite;
    /**
     * No comment provided
     *
     * Hash: 0xB7B873520C84C118 | Since: 1734
     */
    function setCopBlipSpriteAsStandard() {
        Citizen.invokeNative('0xB7B873520C84C118');
    }
    hud.setCopBlipSpriteAsStandard = setCopBlipSpriteAsStandard;
    /**
     * No comment provided
     *
     * Hash: 0x2ACCB195F3CCD9DE | Since: 2545
     */
    function setCustomMpColor(hudColorId) {
        SetCustomMpHudColor(hudColorId);
    }
    hud.setCustomMpColor = setCustomMpColor;
    /**
     * No comment provided
     *
     * Hash: 0x817B86108EB94E51 | Since: 323
     */
    function setDescriptionForUgcMissionEightStrings() {
        Citizen.invokeNative('0x817B86108EB94E51', false, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    hud.setDescriptionForUgcMissionEightStrings = setDescriptionForUgcMissionEightStrings;
    /**
     * No comment provided
     *
     * Hash: 0x04655F9D075D0AE5 | Since: 323
     */
    function setDirectorModeAvailable(toggle) {
        Citizen.invokeNative('0x04655F9D075D0AE5', toggle);
    }
    hud.setDirectorModeAvailable = setDirectorModeAvailable;
    /**
     * No comment provided
     *
     * Hash: 0x2632482FD6B9AB87 | Since: 323
     */
    function setDirectorModeLaunchedByScript() {
        SetDirectorModeClearTriggeredFlag();
    }
    hud.setDirectorModeLaunchedByScript = setDirectorModeLaunchedByScript;
    /**
     * No comment provided
     *
     * Hash: 0xA17784FCA9548D15 | Since: 877
     */
    function setFakeGpsPlayerPositionThisFrame(pos) {
        Citizen.invokeNative('0xA17784FCA9548D15', pos.x, pos.y, pos.z);
    }
    hud.setFakeGpsPlayerPositionThisFrame = setFakeGpsPlayerPositionThisFrame;
    /**
     * Argument must be 0.0f or above 38.0f, or it will be ignored.
     *
     * Hash: 0xD201F3FF917A506D | Since: 323
     */
    function setFakeMinimapMaxAltimeterHeight(altitude) {
        SetMinimapAltitudeIndicatorLevel(altitude, false, undefined);
    }
    hud.setFakeMinimapMaxAltimeterHeight = setFakeMinimapMaxAltimeterHeight;
    /**
     * Sets the position of the arrow icon representing the player on both the minimap and world map.
     *
     * Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
     *
     * Hash: 0x77E2DD177910E1CF | Since: 323
     */
    function setFakePausemapPlayerPositionThisFrame(x, y) {
        SetFakePausemapPlayerPositionThisFrame(x, y);
    }
    hud.setFakePausemapPlayerPositionThisFrame = setFakePausemapPlayerPositionThisFrame;
    /**
     * Setter for GET_FAKE_SPECTATOR_MODE
     *
     * Hash: 0xCD74233600C4EA6B | Since: 505
     */
    function setFakeSpectatorMode(toggle) {
        Citizen.invokeNative('0xCD74233600C4EA6B', toggle);
    }
    hud.setFakeSpectatorMode = setFakeSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0x7679CC1BCEBE3D4C | Since: 323
     */
    function setFloatingHelpTextScreenPosition(hudIndex, x, y) {
        SetFloatingHelpTextScreenPosition(hudIndex, x, y);
    }
    hud.setFloatingHelpTextScreenPosition = setFloatingHelpTextScreenPosition;
    /**
     * No comment provided
     *
     * Hash: 0x788E7FD431BD67F1 | Since: 323
     */
    function setFloatingHelpTextStyle(hudIndex) {
        SetFloatingHelpTextStyle(hudIndex, 0, 0, 0, 0, 0);
    }
    hud.setFloatingHelpTextStyle = setFloatingHelpTextStyle;
    /**
     * No comment provided
     *
     * Hash: 0xB094BC1DB4018240 | Since: 323
     */
    function setFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY) {
        SetFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY);
    }
    hud.setFloatingHelpTextToEntity = setFloatingHelpTextToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x784BA7E0ECEB4178 | Since: 323
     */
    function setFloatingHelpTextWorldPosition(hudIndex, pos) {
        SetFloatingHelpTextWorldPosition(hudIndex, pos.x, pos.y, pos.z);
    }
    hud.setFloatingHelpTextWorldPosition = setFloatingHelpTextWorldPosition;
    /**
     * No comment provided
     *
     * Hash: 0x2790F4B17D098E26 | Since: 573
     */
    function setForceShowGps(toggle) {
        Citizen.invokeNative('0x2790F4B17D098E26', toggle);
    }
    hud.setForceShowGps = setForceShowGps;
    /**
     * No comment provided
     *
     * Hash: 0x745711A75AB09277 | Since: 323
     */
    function setFrontendActive(active) {
        SetFrontendActive(active);
    }
    hud.setFrontendActive = setFrontendActive;
    /**
     * radarThickness: The width of the GPS route on the radar
     * mapThickness: The width of the GPS route on the map
     *
     * Hash: 0x900086F371220B6F | Since: 323
     */
    function setGpsCustomRouteRender(toggle, radarThickness, mapThickness) {
        SetGpsCustomRouteRender(toggle, radarThickness, mapThickness);
    }
    hud.setGpsCustomRouteRender = setGpsCustomRouteRender;
    /**
     * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
     *
     * Doesn't seem like the flags are actually read by the game at all.
     *
     * Hash: 0x5B440763A4C8D15B | Since: 323
     */
    function setGpsFlags() {
        SetGpsFlags(0, 0);
    }
    hud.setGpsFlags = setGpsFlags;
    /**
     * No comment provided
     *
     * Hash: 0x320D0E0D936A0E9B | Since: 323
     */
    function setGpsFlashes(toggle) {
        SetGpsFlashes(toggle);
    }
    hud.setGpsFlashes = setGpsFlashes;
    /**
     * No comment provided
     *
     * Hash: 0x3DDA37128DD1ACA8 | Since: 323
     */
    function setGpsMultiRouteRender(toggle) {
        SetGpsMultiRouteRender(toggle);
    }
    hud.setGpsMultiRouteRender = setGpsMultiRouteRender;
    /**
     * No comment provided
     *
     * Hash: 0x3F5CC444DCAAA8F2 | Since: 323
     */
    function setHealthDisplayValues(health, capacity, wasAdded) {
        SetHealthHudDisplayValues(health, capacity, wasAdded);
    }
    hud.setHealthDisplayValues = setHealthDisplayValues;
    /**
     * No comment provided
     *
     * Hash: 0xB9C362BABECDDC7A | Since: 463
     */
    function setHelpMessageStyle(style, hudColor, alpha) {
        SetHelpMessageTextStyle(style, hudColor, alpha, 0, 0);
    }
    hud.setHelpMessageStyle = setHelpMessageStyle;
    /**
     * No comment provided
     *
     * Hash: 0xAABB1F56E2A17CED | Since: 323
     */
    function setComponentPosition(id, x, y) {
        SetHudComponentPosition(id, x, y);
    }
    hud.setComponentPosition = setComponentPosition;
    /**
     * No comment provided
     *
     * Hash: 0x7EC8ABA5E74B3D7A | Since: 2372
     */
    function setInsideVeryLargeInterior(toggle) {
        SetInteriorZoomLevelDecreased(toggle);
    }
    hud.setInsideVeryLargeInterior = setInsideVeryLargeInterior;
    /**
     * No comment provided
     *
     * Hash: 0x504DFE62A1692296 | Since: 1493
     */
    function setInsideVerySmallInterior(toggle) {
        SetInteriorZoomLevelIncreased(toggle);
    }
    hud.setInsideVerySmallInterior = setInsideVerySmallInterior;
    /**
     * No comment provided
     *
     * Hash: 0x06A320535F5F0248 | Since: 323
     */
    function setMaxArmourDisplay(maximumValue) {
        SetMaxArmourHudDisplay(maximumValue);
    }
    hud.setMaxArmourDisplay = setMaxArmourDisplay;
    /**
     * No comment provided
     *
     * Hash: 0x975D66A0BC17064C | Since: 323
     */
    function setMaxHealthDisplay(maximumValue) {
        SetMaxHealthHudDisplay(maximumValue);
    }
    hud.setMaxHealthDisplay = setMaxHealthDisplay;
    /**
     * This native does absolutely nothing on PC master builds, just a nullsub.
     *
     * Hash: 0xB09D42557C45EBA1 | Since: 3258
     */
    function setMinimapBackgroundHidden(toggle) {
        Citizen.invokeNative('0xB09D42557C45EBA1', toggle);
    }
    hud.setMinimapBackgroundHidden = setMinimapBackgroundHidden;
    /**
     * No comment provided
     *
     * Hash: 0x58FADDED207897DC | Since: 323
     */
    function setMinimapBlockWaypoint(toggle) {
        SetMinimapBlockWaypoint(toggle);
    }
    hud.setMinimapBlockWaypoint = setMinimapBlockWaypoint;
    /**
     * This native is used to colorize certain map components like the army base at the top of the map.
     * p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra
     *
     * Hash: 0x75A9A10948D1DEA6 | Since: 323
     */
    function setMinimapComponent(componentId, toggle, overrideColor) {
        return SetMinimapComponent(componentId, toggle, overrideColor);
    }
    hud.setMinimapComponent = setMinimapComponent;
    /**
     * No comment provided
     *
     * Hash: 0x62E849B7EB28E770 | Since: 323
     */
    function setMinimapFowDoNotUpdate() {
        Citizen.invokeNative('0x62E849B7EB28E770', false);
    }
    hud.setMinimapFowDoNotUpdate = setMinimapFowDoNotUpdate;
    /**
     * Up to eight coordinates may be revealed per frame
     *
     * Hash: 0x0923DBF87DFF735E | Since: 323
     */
    function setMinimapFowRevealCoordinate(pos) {
        SetMinimapFowRevealCoordinate(pos.x, pos.y, pos.z);
    }
    hud.setMinimapFowRevealCoordinate = setMinimapFowRevealCoordinate;
    /**
     * Not much is known so far on what it does _exactly_.
     * All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
     * You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
     * You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
     * Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
     *
     * Hash: 0x71BDB63DBAF8DA59 | Since: 323
     */
    function setMinimapGolfCourse(hole) {
        SetMinimapGolfCourse(hole);
    }
    hud.setMinimapGolfCourse = setMinimapGolfCourse;
    /**
     * No comment provided
     *
     * Hash: 0x35EDD5B2E3FF01C0 | Since: 323
     */
    function setMinimapGolfCourseOff() {
        SetMinimapGolfCourseOff();
    }
    hud.setMinimapGolfCourseOff = setMinimapGolfCourseOff;
    /**
     * If true, the entire map will be revealed.
     *
     * FOW = Fog of War
     *
     * Hash: 0xF8DEE0A5600CBB93 | Since: 323
     */
    function setMinimapHideFow(toggle) {
        SetMinimapHideFow(toggle);
    }
    hud.setMinimapHideFow = setMinimapHideFow;
    /**
     * Toggles the North Yankton map
     *
     * Hash: 0x9133955F1A2DA957 | Since: 323
     */
    function setMinimapInPrologue(toggle) {
        SetMinimapInPrologue(toggle);
    }
    hud.setMinimapInPrologue = setMinimapInPrologue;
    /**
     * No comment provided
     *
     * Hash: 0x1A5CD7752DD28CD3 | Since: 323
     */
    function setMinimapInSpectatorMode(toggle, ped) {
        SetMinimapInSpectatorMode(toggle, ped);
    }
    hud.setMinimapInSpectatorMode = setMinimapInSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0x6B50FC8749632EC1 | Since: 2189
     */
    function setMinimapSonarSweep(toggle) {
        SetMinimapSonarSweep(toggle);
    }
    hud.setMinimapSonarSweep = setMinimapSonarSweep;
    /**
     * No comment provided
     *
     * Hash: 0x5F28ECF5FC84772F | Since: 323
     */
    function setMissionName(name) {
        SetMissionName(false, name);
    }
    hud.setMissionName = setMissionName;
    /**
     * No comment provided
     *
     * Hash: 0xE45087D85F468BC2 | Since: 323
     */
    function setMissionNameForUgcMission(name) {
        SetMissionName2(false, name);
    }
    hud.setMissionNameForUgcMission = setMissionNameForUgcMission;
    /**
     * Changes the mouse cursor's sprite.
     * 1 = Normal
     * 6 = Left Arrow
     * 7 = Right Arrow
     *
     * Hash: 0x8DB8CFFD58B62552 | Since: 323
     */
    function setMouseCursorStyle(spriteId) {
        SetMouseCursorStyle(spriteId);
    }
    hud.setMouseCursorStyle = setMouseCursorStyle;
    /**
     * Shows the cursor on screen for one frame.
     *
     * Hash: 0xAAE7CE1D63167423 | Since: 323
     */
    function setMouseCursorThisFrame() {
        SetMouseCursorThisFrame();
    }
    hud.setMouseCursorThisFrame = setMouseCursorThisFrame;
    /**
     * Shows/hides the frontend cursor on the pause menu or similar menus.
     * Clicking off and then on the game window will show it again.
     *
     * Hash: 0x98215325A695E78A | Since: 323
     */
    function setMouseCursorVisible(toggle) {
        SetMouseCursorVisible(toggle);
    }
    hud.setMouseCursorVisible = setMouseCursorVisible;
    /**
     * No comment provided
     *
     * Hash: 0x1563FE35E9928E67 | Since: 1365
     */
    function setMpGamerTagsPointHealth(gamerTagId, value, maximumValue) {
        SetMpGamerTagOverridePlayerHealth(gamerTagId, value, maximumValue);
    }
    hud.setMpGamerTagsPointHealth = setMpGamerTagsPointHealth;
    /**
     * No comment provided
     *
     * Hash: 0xD29EC58C2F6B5014 | Since: 1365
     */
    function setMpGamerTagsShouldUsePointsHealth(gamerTagId, toggle) {
        SetMpGamerTagDisablePlayerHealthSync(gamerTagId, toggle);
    }
    hud.setMpGamerTagsShouldUsePointsHealth = setMpGamerTagsShouldUsePointsHealth;
    /**
     * Displays a bunch of icons above the players name, and level, and their name twice
     *
     * Hash: 0xA67F9C46D612B6F1 | Since: 323
     */
    function setMpGamerTagsShouldUseVehicleHealth(gamerTagId, toggle) {
        SetMpGamerTagUseVehicleHealth(gamerTagId, toggle);
    }
    hud.setMpGamerTagsShouldUseVehicleHealth = setMpGamerTagsShouldUseVehicleHealth;
    /**
     * Sets flag's sprite transparency. 0-255.
     *
     * Hash: 0xD48FE545CD46F857 | Since: 323
     */
    function setMpGamerTagAlpha(gamerTagId, component, alpha) {
        SetMpGamerTagAlpha(gamerTagId, component, alpha);
    }
    hud.setMpGamerTagAlpha = setMpGamerTagAlpha;
    /**
     * No comment provided
     *
     * Hash: 0x7B7723747CCB55B6 | Since: 323
     */
    function setMpGamerTagBigText(gamerTagId, _string) {
        SetMpGamerTagBigText(gamerTagId, _string);
    }
    hud.setMpGamerTagBigText = setMpGamerTagBigText;
    /**
     * Sets a gamer tag's component colour
     *
     * gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
     * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
     *
     * Hash: 0x613ED644950626AE | Since: 323
     */
    function setMpGamerTagColour(gamerTagId, component, hudColorIndex) {
        SetMpGamerTagColour(gamerTagId, component, hudColorIndex);
    }
    hud.setMpGamerTagColour = setMpGamerTagColour;
    /**
     * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
     * Should be enabled as flag (2). Has 0 opacity by default.
     *
     * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
     * -> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
     *
     * Hash: 0x3158C77A7E888AB4 | Since: 323
     */
    function setMpGamerTagHealthBarColour(gamerTagId, hudColorIndex) {
        SetMpGamerTagHealthBarColour(gamerTagId, hudColorIndex);
    }
    hud.setMpGamerTagHealthBarColour = setMpGamerTagHealthBarColour;
    /**
     * No comment provided
     *
     * Hash: 0xDEA2B8283BAA3944 | Since: 323
     */
    function setMpGamerTagName(gamerTagId, _string) {
        SetMpGamerTagName(gamerTagId, _string);
    }
    hud.setMpGamerTagName = setMpGamerTagName;
    /**
     * No comment provided
     *
     * Hash: 0x9C16459B2324B2CF | Since: 877
     */
    function setMpGamerTagNumPackages(gamerTagId) {
        SetMpGamerTagMpBagLargeCount(gamerTagId, 0);
    }
    hud.setMpGamerTagNumPackages = setMpGamerTagNumPackages;
    /**
     * enum eMpGamerTagComponent
     * {
     * MP_TAG_GAMER_NAME,
     * MP_TAG_CREW_TAG,
     * MP_TAG_HEALTH_ARMOUR,
     * MP_TAG_BIG_TEXT,
     * MP_TAG_AUDIO_ICON,
     * MP_TAG_USING_MENU,
     * MP_TAG_PASSIVE_MODE,
     * MP_TAG_WANTED_STARS,
     * MP_TAG_DRIVER,
     * MP_TAG_CO_DRIVER,
     * MP_TAG_TAGGED,
     * MP_TAG_GAMER_NAME_NEARBY,
     * MP_TAG_ARROW,
     * MP_TAG_PACKAGES,
     * MP_TAG_INV_IF_PED_FOLLOWING,
     * MP_TAG_RANK_TEXT,
     * MP_TAG_TYPING,
     * MP_TAG_BAG_LARGE,
     * MP_TAG_ARROW,
     * MP_TAG_GANG_CEO,
     * MP_TAG_GANG_BIKER,
     * MP_TAG_BIKER_ARROW,
     * MP_TAG_MC_ROLE_PRESIDENT,
     * MP_TAG_MC_ROLE_VICE_PRESIDENT,
     * MP_TAG_MC_ROLE_ROAD_CAPTAIN,
     * MP_TAG_MC_ROLE_SARGEANT,
     * MP_TAG_MC_ROLE_ENFORCER,
     * MP_TAG_MC_ROLE_PROSPECT,
     * MP_TAG_TRANSMITTER,
     * MP_TAG_BOMB
     * };
     *
     * Hash: 0x63BB75ABEDC1F6A0 | Since: 323
     */
    function setMpGamerTagVisibility(gamerTagId, component, toggle) {
        SetMpGamerTagVisibility(gamerTagId, component, toggle, undefined);
    }
    hud.setMpGamerTagVisibility = setMpGamerTagVisibility;
    /**
     * displays wanted star above head
     *
     * Hash: 0xCF228E2AA03099C3 | Since: 323
     */
    function setMpGamerTagWantedLevel(gamerTagId, wantedlvl) {
        SetMpGamerTagWantedLevel(gamerTagId, wantedlvl);
    }
    hud.setMpGamerTagWantedLevel = setMpGamerTagWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0xDD21B55DF695CD0A | Since: 323
     */
    function setMultiplayerBankCash() {
        SetMultiplayerBankCash();
    }
    hud.setMultiplayerBankCash = setMultiplayerBankCash;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xFD1D220394BCB824 | Since: 323
     */
    function setMultiplayerCash() {
        SetMultiplayerHudCash(0, false);
    }
    hud.setMultiplayerCash = setMultiplayerCash;
    /**
     * No comment provided
     *
     * Hash: 0xC2D15BEF167E27BC | Since: 323
     */
    function setMultiplayerWalletCash() {
        SetMultiplayerWalletCash();
    }
    hud.setMultiplayerWalletCash = setMultiplayerWalletCash;
    /**
     * No comment provided
     *
     * Hash: 0xFE43368D2AA4F2FC | Since: 323
     */
    function setNewWaypoint(x, y) {
        SetNewWaypoint(x, y);
    }
    hud.setNewWaypoint = setNewWaypoint;
    /**
     * No comment provided
     *
     * Hash: 0xDF47FC56C71569CF | Since: 323
     */
    function setPauseMenuActive(toggle) {
        SetPauseMenuActive(toggle);
    }
    hud.setPauseMenuActive = setPauseMenuActive;
    /**
     * Toggles the light state for the pause menu ped in frontend menus.
     *
     * This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
     *
     *
     * Example:
     * Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
     * Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
     *
     * Hash: 0x3CA6050692BC61B0 | Since: 323
     */
    function setPauseMenuPedLighting(state) {
        SetPauseMenuPedLighting(state);
    }
    hud.setPauseMenuPedLighting = setPauseMenuPedLighting;
    /**
     * Toggles the pause menu ped sleep state for frontend menus.
     *
     * Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif
     *
     * `state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
     *
     * Hash: 0xECF128344E9FF9F1 | Since: 323
     */
    function setPauseMenuPedSleepState(state) {
        SetPauseMenuPedSleepState(state);
    }
    hud.setPauseMenuPedSleepState = setPauseMenuPedSleepState;
    /**
     * No comment provided
     *
     * Hash: 0x0C4BBF625CA98C4E | Since: 323
     */
    function setPedAiBlipForcedOn(ped, toggle) {
        SetPedAiBlipForcedOn(ped, toggle);
    }
    hud.setPedAiBlipForcedOn = setPedAiBlipForcedOn;
    /**
     * No comment provided
     *
     * Hash: 0xE52B8E7F85D39A08 | Since: 323
     */
    function setPedAiBlipGangId(ped, gangId) {
        SetPedAiBlipGangId(ped, gangId);
    }
    hud.setPedAiBlipGangId = setPedAiBlipGangId;
    /**
     * No comment provided
     *
     * Hash: 0x3EED80DFF7325CAA | Since: 323
     */
    function setPedAiBlipHasCone(ped, toggle) {
        SetPedAiBlipHasCone(ped, toggle);
    }
    hud.setPedAiBlipHasCone = setPedAiBlipHasCone;
    /**
     * No comment provided
     *
     * Hash: 0x97C65887D4B37FA9 | Since: 323
     */
    function setPedAiBlipNoticeRange(ped, range) {
        SetPedAiBlipNoticeRange(ped, range);
    }
    hud.setPedAiBlipNoticeRange = setPedAiBlipNoticeRange;
    /**
     * No comment provided
     *
     * Hash: 0xFCFACD0DB9D7A57D | Since: 877
     */
    function setPedAiBlipSprite(ped, spriteId) {
        SetPedAiBlipSprite(ped, spriteId);
    }
    hud.setPedAiBlipSprite = setPedAiBlipSprite;
    /**
     * This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
     *
     * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
     *
     * Hash: 0xD30C50DF888D58B5 | Since: 323
     */
    function setPedHasAiBlip(ped, hasCone) {
        SetPedHasAiBlip(ped, hasCone);
    }
    hud.setPedHasAiBlip = setPedHasAiBlip;
    /**
     * color: see SET_BLIP_COLOUR
     *
     * Hash: 0xB13DCB4C6FAAD238 | Since: 505
     */
    function setPedHasAiBlipWithColour(ped, hasCone, color) {
        SetPedHasAiBlipWithColor(ped, hasCone, color);
    }
    hud.setPedHasAiBlipWithColour = setPedHasAiBlipWithColour;
    /**
     * No comment provided
     *
     * Hash: 0x7B21E0BB01E8224A | Since: 323
     */
    function setPlayerIconColour(color) {
        SetMainPlayerBlipColour(color);
    }
    hud.setPlayerIconColour = setPlayerIconColour;
    /**
     * If toggle is true, hides special ability bar / character name in the pause menu
     * If toggle is false, shows special ability bar / character name in the pause menu
     *
     * Hash: 0x808519373FD336A3 | Since: 323
     */
    function setPlayerIsInDirectorMode(toggle) {
        SetPlayerIsInDirectorMode(toggle);
    }
    hud.setPlayerIsInDirectorMode = setPlayerIsInDirectorMode;
    /**
     * No comment provided
     *
     * Hash: 0x41350B4FC28E3941 | Since: 323
     */
    function setPmWarningscreenActive() {
        Citizen.invokeNative('0x41350B4FC28E3941', false);
    }
    hud.setPmWarningscreenActive = setPmWarningscreenActive;
    /**
     * No comment provided
     *
     * Hash: 0x1EAC5F91BCBC5073 | Since: 323
     */
    function setRaceTrackRender(toggle) {
        SetRaceTrackRender(toggle);
    }
    hud.setRaceTrackRender = setRaceTrackRender;
    /**
     * No comment provided
     *
     * Hash: 0xE81B7D2A3DAB2D81 | Since: 323
     */
    function setRadarAsExteriorThisFrame() {
        SetRadarAsExteriorThisFrame();
    }
    hud.setRadarAsExteriorThisFrame = setRadarAsExteriorThisFrame;
    /**
     * List of interior hashes: https://pastebin.com/1FUyXNqY
     * Not for every interior zoom > 0 available.
     *
     * Hash: 0x59E727A1C9D3E31A | Since: 323
     */
    function setRadarAsInteriorThisFrame(interior, pos, zoom) {
        if (typeof interior === 'string')
            interior = misc.getHashKey(interior);
        SetRadarAsInteriorThisFrame(interior, pos.x, pos.y, pos.z, zoom);
    }
    hud.setRadarAsInteriorThisFrame = setRadarAsInteriorThisFrame;
    /**
     * zoomLevel ranges from 0 to 1400 in R* Scripts
     *
     * Hash: 0x096EF57A0C999BBA | Since: 323
     */
    function setRadarZoom(zoomLevel) {
        SetRadarZoom(zoomLevel);
    }
    hud.setRadarZoom = setRadarZoom;
    /**
     * zoom ranges from 0 to 90f in R* Scripts
     *
     * Hash: 0xBD12C5EEE184C337 | Since: 323
     */
    function setRadarZoomPrecise(zoom) {
        SetRadarZoomPrecise(zoom);
    }
    hud.setRadarZoomPrecise = setRadarZoomPrecise;
    /**
     * No comment provided
     *
     * Hash: 0xF98E4B3E56AFC7B1 | Since: 323
     */
    function setRadarZoomToBlip(blip, zoom) {
        SetRadarZoomToBlip(blip, zoom);
    }
    hud.setRadarZoomToBlip = setRadarZoomToBlip;
    /**
     * No comment provided
     *
     * Hash: 0xCB7CC0D58405AD41 | Since: 323
     */
    function setRadarZoomToDistance(zoom) {
        SetRadarZoomToDistance(zoom);
    }
    hud.setRadarZoomToDistance = setRadarZoomToDistance;
    /**
     * Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
     *
     * Hash: 0x25615540D894B814 | Since: 323
     */
    function setRadiusBlipEdge(blip, toggle) {
        SetRadiusBlipEdge(blip, toggle);
    }
    hud.setRadiusBlipEdge = setRadiusBlipEdge;
    /**
     * No comment provided
     *
     * Hash: 0x0CF54F20DE43879C | Since: 323
     */
    function setSavegameListUniqueId() {
        Citizen.invokeNative('0x0CF54F20DE43879C', undefined);
    }
    hud.setSavegameListUniqueId = setSavegameListUniqueId;
    /**
     * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
     *
     * Hash: 0xD68A5FF8A3A89874 | Since: 323
     */
    function setScriptVariableColour(r, g, b, a) {
        SetScriptVariableHudColour(r, g, b, a);
    }
    hud.setScriptVariableColour = setScriptVariableColour;
    /**
     * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
     *
     * Hash: 0x16A304E6CB2BFAB9 | Since: 323
     */
    function setSecondScriptVariableColour(r, g, b, a) {
        SetScriptVariable2HudColour(r, g, b, a);
    }
    hud.setSecondScriptVariableColour = setSecondScriptVariableColour;
    /**
     * `HUD::SET_SOCIAL_CLUB_TOUR("Gallery");`
     * `HUD::SET_SOCIAL_CLUB_TOUR("Missions");`
     * `HUD::SET_SOCIAL_CLUB_TOUR("General");`
     * `HUD::SET_SOCIAL_CLUB_TOUR("Playlists");`
     *
     * Hash: 0x9E778248D6685FE0 | Since: 323
     */
    function setSocialClubTour(name) {
        SetSocialClubTour(name);
    }
    hud.setSocialClubTour = setSocialClubTour;
    /**
     * No comment provided
     *
     * Hash: 0xC02F4DBFB51D988B | Since: 323
     */
    function setTextCentre(align) {
        SetTextCentre(align);
    }
    hud.setTextCentre = setTextCentre;
    /**
     * colors you input not same as you think?
     * A: for some reason its R B G A
     *
     * Hash: 0xBE6B23FFA53FB442 | Since: 323
     */
    function setTextColour(red, green, blue, alpha) {
        SetTextColour(red, green, blue, alpha);
    }
    hud.setTextColour = setTextColour;
    /**
     * distance - shadow distance in pixels, both horizontal and vertical
     * r, g, b, a - color
     *
     * Hash: 0x465C84BC39F1C351 | Since: 323
     */
    function setTextDropshadow(distance, r, g, b, a) {
        SetTextDropshadow(distance, r, g, b, a);
    }
    hud.setTextDropshadow = setTextDropshadow;
    /**
     * No comment provided
     *
     * Hash: 0x1CA3E9EAC9D93E5E | Since: 323
     */
    function setTextDropShadow() {
        SetTextDropShadow();
    }
    hud.setTextDropShadow = setTextDropShadow;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x441603240D202FA6 | Since: 323
     */
    function setTextEdge(r, g, b, a) {
        SetTextEdge(0, r, g, b, a);
    }
    hud.setTextEdge = setTextEdge;
    /**
     * fonts that mess up your text where made for number values/misc stuff
     *
     * Hash: 0x66E0276CC5F6B9DA | Since: 323
     */
    function setTextFont(fontType) {
        SetTextFont(fontType);
    }
    hud.setTextFont = setTextFont;
    /**
     * No comment provided
     *
     * Hash: 0x1185A8087587322C | Since: 323
     */
    function setTextInputBoxEnabled() {
        SetTextInputBoxEnabled(false);
    }
    hud.setTextInputBoxEnabled = setTextInputBoxEnabled;
    /**
     * Types -
     * 0: Center-Justify
     * 1: Left-Justify
     * 2: Right-Justify
     *
     * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
     *
     * Hash: 0x4E096588B13FFECA | Since: 323
     */
    function setTextJustification(justifyType) {
        SetTextJustification(justifyType);
    }
    hud.setTextJustification = setTextJustification;
    /**
     * No comment provided
     *
     * Hash: 0xA50ABC31E3CDFAFF | Since: 323
     */
    function setTextLeading() {
        SetTextLeading(0);
    }
    hud.setTextLeading = setTextLeading;
    /**
     * No comment provided
     *
     * Hash: 0x9F4624F76E6953D1 | Since: 3095
     */
    function setTextLineHeightMult(lineHeightMult) {
        Citizen.invokeNative('0x9F4624F76E6953D1', lineHeightMult);
    }
    hud.setTextLineHeightMult = setTextLineHeightMult;
    /**
     * No comment provided
     *
     * Hash: 0x2513DFB0FB8400FE | Since: 323
     */
    function setTextOutline() {
        SetTextOutline();
    }
    hud.setTextOutline = setTextOutline;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x038C1F517D7FDCF8 | Since: 323
     */
    function setTextProportional() {
        SetTextProportional(false);
    }
    hud.setTextProportional = setTextProportional;
    /**
     * No comment provided
     *
     * Hash: 0x5F15302936E07111 | Since: 323
     */
    function setTextRenderId(renderId) {
        SetTextRenderId(renderId);
    }
    hud.setTextRenderId = setTextRenderId;
    /**
     * No comment provided
     *
     * Hash: 0x6B3C4650BC8BEE47 | Since: 323
     */
    function setTextRightJustify(toggle) {
        SetTextRightJustify(toggle);
    }
    hud.setTextRightJustify = setTextRightJustify;
    /**
     * Size range : 0F to 1.0F
     * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
     *
     * Hash: 0x07C837F9A01C34C9 | Since: 323
     */
    function setTextScale(scale, size) {
        SetTextScale(scale, size);
    }
    hud.setTextScale = setTextScale;
    /**
     * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
     *
     * start - left boundry on screen position (0.0 - 1.0)
     * end - right boundry on screen position (0.0 - 1.0)
     *
     * Hash: 0x63145D9C883A1A70 | Since: 323
     */
    function setTextWrap(start, end) {
        SetTextWrap(start, end);
    }
    hud.setTextWrap = setTextWrap;
    /**
     * Toggles the Cayo Perico map.
     *
     * Hash: 0x5E1460624D194A38 | Since: 2189
     */
    function setUseIslandMap(toggle) {
        SetUseIslandMap(toggle);
    }
    hud.setUseIslandMap = setUseIslandMap;
    /**
     * No comment provided
     *
     * Hash: 0x6CDD58146A436083 | Since: 573
     */
    function setUseSetDestinationInPauseMap(toggle) {
        SetUseWaypointAsDestination(toggle);
    }
    hud.setUseSetDestinationInPauseMap = setUseSetDestinationInPauseMap;
    /**
     * You can only use text entries. No custom text.
     *
     * Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
     * errorCode: shows an error code at the bottom left if nonzero
     *
     * Hash: 0x7B1776B3B53F8D74 | Since: 323
     */
    function setWarningMessage(titleMsg, flags, promptMsg, showBackground, errorCode) {
        SetWarningMessage(titleMsg, flags, promptMsg, false, 0, undefined, undefined, showBackground, errorCode);
    }
    hud.setWarningMessage = setWarningMessage;
    /**
     * No comment provided
     *
     * Hash: 0xDAF87174BE7454FF | Since: 323
     */
    function setWarningMessageOptionHighlight() {
        return Citizen.invokeNative('0xDAF87174BE7454FF', undefined);
    }
    hud.setWarningMessageOptionHighlight = setWarningMessageOptionHighlight;
    /**
     * Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
     * Param names copied from the corresponding scaleform function "SET_LIST_ROW".
     * Example: https://i.imgur.com/arKvOYx.png
     *
     * Hash: 0x0C5A80A9E096D529 | Since: 323
     */
    function setWarningMessageOptionItems(index, name, cash, rp, lvl, colour) {
        return SetWarningMessageListRow(index, name, cash, rp, lvl, colour);
    }
    hud.setWarningMessageOptionItems = setWarningMessageOptionItems;
    /**
     * Shows a warning message on screen with a header.
     * Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
     * Example: https://i.imgur.com/ITJt8bJ.png
     *
     * Hash: 0xDC38CC1E35B6A5D7 | Since: 323
     */
    function setWarningMessageWithHeader(entryHeader, entryLine1, instructionalKey, entryLine2) {
        return SetWarningMessageWithHeader(entryHeader, entryLine1, instructionalKey, entryLine2, false, undefined, false, undefined);
    }
    hud.setWarningMessageWithHeader = setWarningMessageWithHeader;
    /**
     * You can use this native for custom input, without having to use any scaleform-related natives.
     * The native must be called on tick.
     * The entryHeader must be a valid label.
     * For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
     * Notes:
     * - additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
     * - additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
     * - additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
     * - showBackground: shows black background of the warning screen
     * - errorCode: shows an error code at the bottom left if nonzero
     * Example of usage:
     * SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
     * Screenshot:
     * https://imgur.com/a/IYA7vJ8
     *
     * Hash: 0x701919482C74B5AB | Since: 323
     */
    function setWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode) {
        SetWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, false, undefined, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode);
    }
    hud.setWarningMessageWithHeaderAndSubstringFlags = setWarningMessageWithHeaderAndSubstringFlags;
    /**
     * labelTitle: Label of the alert's title.
     * labelMsg: Label of the alert's message.
     * p2: This is an enum, check the description for a list.
     * p3: This is an enum, check the description for a list.
     * labelMsg2: Label of another message line
     * p5: usually 0
     * p6: usually -1
     * p7: usually 0
     * p8: unknown label
     * p9: unknown label
     * background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
     * errorCode: Error code, shown at the bottom left if set to value other than 0.
     *
     * instructionalKey enum list:
     * Buttons = {
     * Empty = 0,
     * Select = 1, -- (RETURN)
     * Ok = 2, -- (RETURN)
     * Yes = 4, -- (RETURN)
     * Back = 8, -- (ESC)
     * Cancel = 16, -- (ESC)
     * No = 32, -- (ESC)
     * RetrySpace = 64, -- (SPACE)
     * Restart = 128, -- (SPACE)
     * Skip = 256, -- (SPACE)
     * Quit = 512, -- (ESC)
     * Adjust = 1024, -- (ARROWS)
     * SpaceKey = 2048, -- (SPACE)
     * Share = 4096, -- (SPACE)
     * SignIn = 8192, -- (SPACE)
     * Continue = 16384, -- (RETURN)
     * AdjustLeftRight = 32768, -- (SCROLL L/R)
     * AdjustUpDown = 65536, -- (SCROLL U/D)
     * Overwrite = 131072, -- (SPACE)
     * SocialClubSignup = 262144, -- (RETURN)
     * Confirm = 524288, -- (RETURN)
     * Queue = 1048576, -- (RETURN)
     * RetryReturn = 2097152, -- (RETURN)
     * BackEsc = 4194304, -- (ESC)
     * SocialClub = 8388608, -- (RETURN)
     * Spectate = 16777216, -- (SPACE)
     * OkEsc = 33554432, -- (ESC)
     * CancelTransfer = 67108864, -- (ESC)
     * LoadingSpinner = 134217728,
     * NoReturnToGTA = 268435456, -- (ESC)
     * CancelEsc = 536870912, -- (ESC)
     * }
     *
     * Alt = {
     * Empty = 0,
     * No = 1, -- (SPACE)
     * Host = 2, -- (ESC)
     * SearchForJob = 4, -- (RETURN)
     * ReturnKey = 8, -- (TURN)
     * Freemode = 16, -- (ESC)
     * }
     *
     * Example: https://i.imgur.com/TvmNF4k.png
     *
     * Hash: 0x15803FEC3B9A872B | Since: 573
     */
    function setWarningMessageWithHeaderAndSubstringFlagsExtended(labelTitle, labelMessage, labelMessage2, background, errorCode) {
        SetWarningMessageWithAlert(labelTitle, labelMessage, 0, 0, labelMessage2, false, 0, 0, undefined, undefined, background, errorCode);
    }
    hud.setWarningMessageWithHeaderAndSubstringFlagsExtended = setWarningMessageWithHeaderAndSubstringFlagsExtended;
    /**
     * No comment provided
     *
     * Hash: 0x38B55259C2E078ED | Since: 1493
     */
    function setWarningMessageWithHeaderExtended(entryHeader, entryLine1, flags, entryLine2, showBg) {
        return SetWarningMessageWithHeaderExtended(entryHeader, entryLine1, flags, entryLine2, false, undefined, showBg, undefined, undefined);
    }
    hud.setWarningMessageWithHeaderExtended = setWarningMessageWithHeaderExtended;
    /**
     * This native removes the current waypoint from the map.
     *
     * Example:
     * C#:
     * Function.Call(Hash.SET_WAYPOINT_OFF);
     *
     * C++:
     * `HUD::SET_WAYPOINT_OFF();`
     *
     * Hash: 0xA7E4E2D361C2627F | Since: 323
     */
    function setWaypointOff() {
        SetWaypointOff();
    }
    hud.setWaypointOff = setWaypointOff;
    /**
     * No comment provided
     *
     * Hash: 0xC3B07BA00A83B0F1 | Since: 323
     */
    function setWidescreenFormat() {
        SetWidescreenFormat(undefined);
    }
    hud.setWidescreenFormat = setWidescreenFormat;
    /**
     * No comment provided
     *
     * Hash: 0x60E892BA4F5BDCA4 | Since: 323
     */
    function showAccountPicker() {
        ShowSigninUi();
    }
    hud.showAccountPicker = showAccountPicker;
    /**
     * No comment provided
     *
     * Hash: 0xC772A904CDE1186F | Since: 2545
     */
    function showContactInstructionalButton(toggle) {
        ShowContactInstructionalButton(toggle);
    }
    hud.showContactInstructionalButton = showContactInstructionalButton;
    /**
     * Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
     *
     * Hash: 0xDCFB5D4DB8BF367E | Since: 323
     */
    function showCrewIndicatorOnBlip(blip, toggle) {
        ShowCrewIndicatorOnBlip(blip, toggle);
    }
    hud.showCrewIndicatorOnBlip = showCrewIndicatorOnBlip;
    /**
     * No comment provided
     *
     * Hash: 0x19BD6E3C0E16A8FA | Since: 2802
     */
    function showForSaleIconOnBlip(blip, toggle) {
        Citizen.invokeNative('0x19BD6E3C0E16A8FA', blip, toggle);
    }
    hud.showForSaleIconOnBlip = showForSaleIconOnBlip;
    /**
     * Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
     * .Indicating that that player is a friend (in GTA:O). This color can not be changed.
     * To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
     *
     * Hash: 0x23C3EB807312F01A | Since: 323
     */
    function showFriendIndicatorOnBlip(blip, toggle) {
        ShowFriendIndicatorOnBlip(blip, toggle);
    }
    hud.showFriendIndicatorOnBlip = showFriendIndicatorOnBlip;
    /**
     * Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
     * _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
     *
     * Hash: 0xCAC2031EBF79B1A8 | Since: 2699
     */
    function showGoldTickOnBlip(blip, toggle) {
        ShowHasCompletedIndicatorOnBlip(blip, toggle);
    }
    hud.showGoldTickOnBlip = showGoldTickOnBlip;
    /**
     * Adds the GTA: Online player heading indicator to a blip.
     *
     * Hash: 0x5FBCA48327B914DF | Since: 323
     */
    function showHeadingIndicatorOnBlip(blip, toggle) {
        ShowHeadingIndicatorOnBlip(blip, toggle);
    }
    hud.showHeadingIndicatorOnBlip = showHeadingIndicatorOnBlip;
    /**
     * No comment provided
     *
     * Hash: 0x75A16C3DA34F1245 | Since: 323
     */
    function showHeightOnBlip(blip, toggle) {
        ShowHeightOnBlip(blip, toggle);
    }
    hud.showHeightOnBlip = showHeightOnBlip;
    /**
     * This function hides various HUD (Heads-up Display) components.
     * Listed below are the integers and the corresponding HUD component.
     * - 1 : WANTED_STARS
     * - 2 : WEAPON_ICON
     * - 3 : CASH
     * - 4 : MP_CASH
     * - 5 : MP_MESSAGE
     * - 6 : VEHICLE_NAME
     * - 7 : AREA_NAME
     * - 8 : VEHICLE_CLASS
     * - 9 : STREET_NAME
     * - 10 : HELP_TEXT
     * - 11 : FLOATING_HELP_TEXT_1
     * - 12 : FLOATING_HELP_TEXT_2
     * - 13 : CASH_CHANGE
     * - 14 : RETICLE
     * - 15 : SUBTITLE_TEXT
     * - 16 : RADIO_STATIONS
     * - 17 : SAVING_GAME
     * - 18 : GAME_STREAM
     * - 19 : WEAPON_WHEEL
     * - 20 : WEAPON_WHEEL_STATS
     * - 21 : HUD_COMPONENTS
     * - 22 : HUD_WEAPONS
     *
     * These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
     *
     * Hash: 0x0B4DF1FA60C0E664 | Since: 323
     */
    function showComponentThisFrame(id) {
        ShowHudComponentThisFrame(id);
    }
    hud.showComponentThisFrame = showComponentThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xA3C0B359DCB848B6 | Since: 323
     */
    function showNumberOnBlip(blip, _number) {
        ShowNumberOnBlip(blip, _number);
    }
    hud.showNumberOnBlip = showNumberOnBlip;
    /**
     * Highlights a blip by a cyan color circle.
     *
     * Color can be changed with SET_BLIP_SECONDARY_COLOUR
     *
     * Hash: 0xB81656BC81FE24D1 | Since: 323
     */
    function showOutlineIndicatorOnBlip(blip, toggle) {
        ShowOutlineIndicatorOnBlip(blip, toggle);
    }
    hud.showOutlineIndicatorOnBlip = showOutlineIndicatorOnBlip;
    /**
     * No comment provided
     *
     * Hash: 0x4F38DCA127DAAEA2 | Since: 1734
     */
    function showScriptedComponentThisFrame(id) {
        ShowScriptedHudComponentThisFrame(id);
    }
    hud.showScriptedComponentThisFrame = showScriptedComponentThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xF1A6C18B35BCADE6 | Since: 323
     */
    function showStartMissionInstructionalButton(toggle) {
        ShowStartMissionInstructionalButton(toggle);
    }
    hud.showStartMissionInstructionalButton = showStartMissionInstructionalButton;
    /**
     * Adds a green checkmark on top of a blip.
     *
     * Hash: 0x74513EA3E505181E | Since: 323
     */
    function showTickOnBlip(blip, toggle) {
        ShowTickOnBlip(blip, toggle);
    }
    hud.showTickOnBlip = showTickOnBlip;
    /**
     * Starts a new GPS custom-route, allowing you to plot lines on the map.
     * Lines are drawn directly between points.
     * The GPS custom route works like the GPS multi route, except it does not follow roads.
     * Example result: https://i.imgur.com/BDm5pzt.png
     * hudColor: The HUD color of the GPS path.
     * displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
     * followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
     *
     * Hash: 0xDB34E8D56FC13B08 | Since: 323
     */
    function startGpsCustomRoute(hudColor, displayOnFoot, followPlayer) {
        StartGpsCustomRoute(hudColor, displayOnFoot, followPlayer);
    }
    hud.startGpsCustomRoute = startGpsCustomRoute;
    /**
     * Starts a new GPS multi-route, allowing you to create custom GPS paths.
     * GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
     * Once the player has passed a point, the GPS will no longer force its path through it.
     *
     * Works independently from the player-placed waypoint and blip routes.
     * Example result: https://i.imgur.com/ZZHQatX.png
     * hudColor: The HUD color of the GPS path.
     * routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
     * displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
     *
     * Hash: 0x3D3D15AF7BCAAF83 | Since: 323
     */
    function startGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot) {
        StartGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot);
    }
    hud.startGpsMultiRoute = startGpsMultiRoute;
    /**
     * No comment provided
     *
     * Hash: 0xBA751764F0821256 | Since: 323
     */
    function suppressFrontendRenderingThisFrame() {
        SuppressFrontendRenderingThisFrame();
    }
    hud.suppressFrontendRenderingThisFrame = suppressFrontendRenderingThisFrame;
    /**
     * Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
     *
     * To enable the keys again, use `0x14621BB1DF14E2B2`.
     *
     * Hash: 0xEC9264727EEC0F28 | Since: 323
     */
    function takeControlOfFrontend() {
        TakeControlOfFrontend();
    }
    hud.takeControlOfFrontend = takeControlOfFrontend;
    /**
     * Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
     *
     * Hash: 0xADED7F5748ACAFE6 | Since: 323
     */
    function thefeedAutoPostGametipsOff() {
        ThefeedCommentTeleportPoolOff();
    }
    hud.thefeedAutoPostGametipsOff = thefeedAutoPostGametipsOff;
    /**
     * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.
     *
     * Hash: 0x56C8B608CFD49854 | Since: 323
     */
    function thefeedAutoPostGametipsOn() {
        ThefeedCommentTeleportPoolOn();
    }
    hud.thefeedAutoPostGametipsOn = thefeedAutoPostGametipsOn;
    /**
     * No comment provided
     *
     * Hash: 0x80FE4F3AB4E1B62A | Since: 323
     */
    function thefeedClearFrozenPost() {
        ThefeedClearFrozenPost();
    }
    hud.thefeedClearFrozenPost = thefeedClearFrozenPost;
    /**
     * No comment provided
     *
     * Hash: 0xA8FDB297A8D25FBA | Since: 323
     */
    function thefeedFlushQueue() {
        ThefeedFlushQueue();
    }
    hud.thefeedFlushQueue = thefeedFlushQueue;
    /**
     * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
     *
     * Hash: 0x583049884A2EEE3C | Since: 323
     */
    function thefeedForceRenderOff() {
        ThefeedForceRenderOff();
    }
    hud.thefeedForceRenderOff = thefeedForceRenderOff;
    /**
     * No comment provided
     *
     * Hash: 0xA13C11E1B5C06BFC | Since: 323
     */
    function thefeedForceRenderOn() {
        ThefeedForceRenderOn();
    }
    hud.thefeedForceRenderOn = thefeedForceRenderOn;
    /**
     * Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
     *
     * Hash: 0xFDEC055AB549E328 | Since: 323
     */
    function thefeedFreezeNextPost() {
        ThefeedFreezeNextPost();
    }
    hud.thefeedFreezeNextPost = thefeedFreezeNextPost;
    /**
     * Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
     *
     * Hash: 0x82352748437638CA | Since: 323
     */
    function thefeedGetLastShownPhoneActivatableFeedId() {
        return ThefeedGetFirstVisibleDeleteRemaining();
    }
    hud.thefeedGetLastShownPhoneActivatableFeedId = thefeedGetLastShownPhoneActivatableFeedId;
    /**
     * Stops loading screen tips shown by invoking `THEFEED_SHOW`
     *
     * Hash: 0x32888337579A5970 | Since: 463
     */
    function thefeedHide() {
        ThefeedDisableLoadingScreenTips();
    }
    hud.thefeedHide = thefeedHide;
    /**
     * Once called each frame hides all above radar notifications.
     *
     * Hash: 0x25F87B30C382FCA7 | Since: 323
     */
    function thefeedHideThisFrame() {
        ThefeedHideThisFrame();
    }
    hud.thefeedHideThisFrame = thefeedHideThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xA9CBFD40B3FA3010 | Since: 323
     */
    function thefeedIsPaused() {
        return ThefeedIsPaused();
    }
    hud.thefeedIsPaused = thefeedIsPaused;
    /**
     * No comment provided
     *
     * Hash: 0x6F1554B0CC2089FA | Since: 323
     */
    function thefeedOnlyShowTooltips(toggle) {
        ThefeedOnlyShowTooltips(toggle);
    }
    hud.thefeedOnlyShowTooltips = thefeedOnlyShowTooltips;
    /**
     * No comment provided
     *
     * Hash: 0xFDB423997FA30340 | Since: 323
     */
    function thefeedPause() {
        ThefeedPause();
    }
    hud.thefeedPause = thefeedPause;
    /**
     * Removes a notification instantly instead of waiting for it to disappear
     *
     * Hash: 0xBE4390CB40B3E627 | Since: 323
     */
    function thefeedRemoveItem(notificationId) {
        ThefeedRemoveItem(notificationId);
    }
    hud.thefeedRemoveItem = thefeedRemoveItem;
    /**
     * No comment provided
     *
     * Hash: 0xB695E2CD0A2DA9EE | Since: 323
     */
    function thefeedReportLogoOff() {
        ThefeedSpsExtendWidescreenOff();
    }
    hud.thefeedReportLogoOff = thefeedReportLogoOff;
    /**
     * No comment provided
     *
     * Hash: 0xD4438C0564490E63 | Since: 323
     */
    function thefeedReportLogoOn() {
        ThefeedSpsExtendWidescreenOn();
    }
    hud.thefeedReportLogoOn = thefeedReportLogoOn;
    /**
     * No comment provided
     *
     * Hash: 0xFDD85225B2DEA55E | Since: 323
     */
    function thefeedResetAllParameters() {
        ThefeedResetAllParameters();
    }
    hud.thefeedResetAllParameters = thefeedResetAllParameters;
    /**
     * No comment provided
     *
     * Hash: 0xE1CD1E48E025E661 | Since: 323
     */
    function thefeedResume() {
        ThefeedResume();
    }
    hud.thefeedResume = thefeedResume;
    /**
     * From the decompiled scripts:
     * `HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);`
     * `HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);`
     * `HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);`
     *
     * sets background color for the next notification
     * 6 = red
     * 184 = green
     * 190 = yellow
     *
     * Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15
     *
     * Hash: 0x92F0DA1E27DB96DC | Since: 323
     */
    function thefeedSetBackgroundColorForNextPost(hudColorIndex) {
        ThefeedSetNextPostBackgroundColor(hudColorIndex);
    }
    hud.thefeedSetBackgroundColorForNextPost = thefeedSetBackgroundColorForNextPost;
    /**
     * Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.
     *
     * Hash: 0x17AD8C9706BDD88A | Since: 323
     */
    function thefeedSetFlashDurationParameterForNextMessage(count) {
        ThefeedSetAnimpostfxCount(count);
    }
    hud.thefeedSetFlashDurationParameterForNextMessage = thefeedSetFlashDurationParameterForNextMessage;
    /**
     * No comment provided
     *
     * Hash: 0x17430B918701C342 | Since: 323
     */
    function thefeedSetRgbaParameterForNextMessage(red, green, blue, alpha) {
        ThefeedSetAnimpostfxColor(red, green, blue, alpha);
    }
    hud.thefeedSetRgbaParameterForNextMessage = thefeedSetRgbaParameterForNextMessage;
    /**
     * No comment provided
     *
     * Hash: 0x55598D21339CB998 | Since: 323
     */
    function thefeedSetScriptedMenuHeight(pos) {
        ThefeedSetScriptedMenuHeight(pos);
    }
    hud.thefeedSetScriptedMenuHeight = thefeedSetScriptedMenuHeight;
    /**
     * No comment provided
     *
     * Hash: 0xBAE4F9B97CD43B30 | Since: 323
     */
    function thefeedSetSnapFeedItemPositions() {
        ThefeedSetFlushAnimpostfx(false);
    }
    hud.thefeedSetSnapFeedItemPositions = thefeedSetSnapFeedItemPositions;
    /**
     * No comment provided
     *
     * Hash: 0x4A0C7C9BB10ABB36 | Since: 323
     */
    function thefeedSetVibrateParameterForNextMessage(toggle) {
        ThefeedSetAnimpostfxSound(toggle);
    }
    hud.thefeedSetVibrateParameterForNextMessage = thefeedSetVibrateParameterForNextMessage;
    /**
     * Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.
     *
     * Hash: 0x15CFA549788D35EF | Since: 463
     */
    function thefeedShow() {
        ThefeedDisplayLoadingScreenTips();
    }
    hud.thefeedShow = thefeedShow;
    /**
     * Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
     *
     * Hash: 0x317EBA71D7543F52 | Since: 323
     */
    function thefeedUpdateItemTexture(txdString1, txnString1, txdString2, txnString2) {
        ThefeedUpdateItemTexture(txdString1, txnString1, txdString2, txnString2);
    }
    hud.thefeedUpdateItemTexture = thefeedUpdateItemTexture;
    /**
     * No comment provided
     *
     * Hash: 0x6AFDFB93754950C7 | Since: 323
     */
    function toggleStealthRadar(toggle) {
        ToggleStealthRadar(toggle);
    }
    hud.toggleStealthRadar = toggleStealthRadar;
    /**
     * No comment provided
     *
     * Hash: 0x72DD432F3CDFC0EE | Since: 323
     */
    function triggerSonarBlip(pos, radius) {
        TriggerSonarBlip(pos.x, pos.y, pos.z, radius, 0);
    }
    hud.triggerSonarBlip = triggerSonarBlip;
    /**
     * No comment provided
     *
     * Hash: 0x8183455E16C42E3A | Since: 323
     */
    function unlockMinimapAngle() {
        UnlockMinimapAngle();
    }
    hud.unlockMinimapAngle = unlockMinimapAngle;
    /**
     * No comment provided
     *
     * Hash: 0x3E93E06DB8EF1F30 | Since: 323
     */
    function unlockMinimapPosition() {
        UnlockMinimapPosition();
    }
    hud.unlockMinimapPosition = unlockMinimapPosition;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xD2049635DEB9C375 | Since: 323
     */
    function updateRadarZoomToBlip() {
        Citizen.invokeNative('0xD2049635DEB9C375');
    }
    hud.updateRadarZoomToBlip = updateRadarZoomToBlip;
    /**
     * Related to displaying cash on the HUD
     * `Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts`
     *
     * Hash: 0x170F541E1CADD1DE | Since: 323
     */
    function useFakeMpCash(toggle) {
        UseFakeMpCash(toggle);
    }
    hud.useFakeMpCash = useFakeMpCash;
    /**
     * No comment provided
     *
     * Hash: 0x0C698D8F099174C7 | Since: 1180
     */
    function useVehicleTargetingReticule() {
        Citizen.invokeNative('0x0C698D8F099174C7', undefined);
    }
    hud.useVehicleTargetingReticule = useVehicleTargetingReticule;
    /**
     * Applies to new eBlipParams _BLIP_CHANGE_46* and _BLIP_CHANGE_47*
     *
     * Hash: 0x25D984CFB64ED6DE | Since: 3095
     */
    function setBlipGpsRouteDisplayDistance(blip, blipChangeParam46, blipChangeParam47) {
        Citizen.invokeNative('0x25D984CFB64ED6DE', blip, blipChangeParam46, blipChangeParam47);
    }
    hud.setBlipGpsRouteDisplayDistance = setBlipGpsRouteDisplayDistance;
    /**
     * No comment provided
     *
     * Hash: 0x35CCE12EAECB4A51 | Since: 2944
     */
    function setPauseExteriorRenderingWhileInInterior() {
        Citizen.invokeNative('0x35CCE12EAECB4A51');
    }
    hud.setPauseExteriorRenderingWhileInInterior = setPauseExteriorRenderingWhileInInterior;
    /**
     * No comment provided
     *
     * Hash: 0xF6865E26067B708C | Since: 3407
     */
    function showPurchaseInstructionalButton(toggle) {
        Citizen.invokeNative('0xF6865E26067B708C', toggle);
    }
    hud.showPurchaseInstructionalButton = showPurchaseInstructionalButton;
    /**
     * No comment provided
     *
     * Hash: 0x1BC0EA2912708625 | Since: 3095
     */
    function useVehicleTargetingReticuleOnVehicles(enable) {
        Citizen.invokeNative('0x1BC0EA2912708625', enable);
    }
    hud.useVehicleTargetingReticuleOnVehicles = useVehicleTargetingReticuleOnVehicles;
})(hud || (hud = {}));
export var misc;
(function (misc) {
    /**
     * Adds the given model name hash to the list of valid models for the player ped's parachute.
     *
     * Hash: 0x8AC7AE9 | Since: unknown
     */
    function addAuthorizedParachuteModel(modelNameHash) {
        Citizen.invokeNative('0x8AC7AE9', modelNameHash);
    }
    misc.addAuthorizedParachuteModel = addAuthorizedParachuteModel;
    /**
     * Adds the given model name hash to the list of valid models for the player ped's parachute pack.
     *
     * Hash: 0x2E86DEA5 | Since: unknown
     */
    function addAuthorizedParachutePackModel(modelNameHash) {
        Citizen.invokeNative('0x2E86DEA5', modelNameHash);
    }
    misc.addAuthorizedParachutePackModel = addAuthorizedParachutePackModel;
    /**
     * Adds new health config.
     *
     * Hash: 0x9CBFD5C1 | Since: unknown
     */
    function addHealthConfig(configName, defaultHealth, defaultArmor, defaultEndurance, fatiguedHealthThreshold, injuredHealthThreshold, dyingHealthThreshold, hurtHealthThreshold, dogTakedownThreshold, writheFromBulletThreshold, meleeCardinalFatalAttack, invincible) {
        Citizen.invokeNative('0x9CBFD5C1', configName, defaultHealth, defaultArmor, defaultEndurance, fatiguedHealthThreshold, injuredHealthThreshold, dyingHealthThreshold, hurtHealthThreshold, dogTakedownThreshold, writheFromBulletThreshold, meleeCardinalFatalAttack, invincible);
    }
    misc.addHealthConfig = addHealthConfig;
    /**
     * Disables the editor runtime mode, changing game behavior to not track entity metadata.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xB1622B17 | Since: unknown
     */
    function disableEditorRuntime() {
        Citizen.invokeNative('0xB1622B17');
    }
    misc.disableEditorRuntime = disableEditorRuntime;
    /**
     * Disables the game's afk camera that starts panning around after 30 seconds of inactivity.
     *
     * Hash: 0x3D5AB7F0 | Since: unknown
     */
    function disableIdleCamera(state) {
        Citizen.invokeNative('0x3D5AB7F0', state);
    }
    misc.disableIdleCamera = disableIdleCamera;
    /**
     * Enables the editor runtime mode, changing game behavior to track entity metadata.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xC383871D | Since: unknown
     */
    function enableEditorRuntime() {
        Citizen.invokeNative('0xC383871D');
    }
    misc.enableEditorRuntime = enableEditorRuntime;
    /**
     * Enters cursor mode, suppressing mouse movement to the game and displaying a mouse cursor instead. This function supports
     * SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x780DA86 | Since: unknown
     */
    function enterCursorMode() {
        Citizen.invokeNative('0x780DA86');
    }
    misc.enterCursorMode = enterCursorMode;
    /**
     * A getter for [SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME](#\_0x0B919E1FB47CC4E0).
     *
     * Hash: 0xB550232D | Since: unknown
     */
    function getAmbientPedRangeMultiplier() {
        return Citizen.invokeNative('0xB550232D');
    }
    misc.getAmbientPedRangeMultiplier = getAmbientPedRangeMultiplier;
    /**
     * This native returns the index of a calming quad if the given point is inside its bounds.
     *
     * Hash: 0x870E8B40 | Since: unknown
     */
    function getCalmingQuadAtCoords(x, y) {
        return Citizen.invokeNative('0x870E8B40', x, y);
    }
    misc.getCalmingQuadAtCoords = getCalmingQuadAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xFF60E63 | Since: unknown
     */
    function getCalmingQuadBounds(waterQuad) {
        return Citizen.invokeNative('0xFF60E63', waterQuad);
    }
    misc.getCalmingQuadBounds = getCalmingQuadBounds;
    /**
     * No comment provided
     *
     * Hash: 0xCEBFC42 | Since: unknown
     */
    function getCalmingQuadCount() {
        return Citizen.invokeNative('0xCEBFC42');
    }
    misc.getCalmingQuadCount = getCalmingQuadCount;
    /**
     * No comment provided
     *
     * Hash: 0xB0E3A058 | Since: unknown
     */
    function getCalmingQuadDampening(waterQuad) {
        return Citizen.invokeNative('0xB0E3A058', waterQuad);
    }
    misc.getCalmingQuadDampening = getCalmingQuadDampening;
    /**
     * No comment provided
     *
     * Hash: 0x5550BF9F | Since: unknown
     */
    function getFuelConsumptionRateMultiplier() {
        return Citizen.invokeNative('0x5550BF9F');
    }
    misc.getFuelConsumptionRateMultiplier = getFuelConsumptionRateMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xC66CD90C | Since: unknown
     */
    function getFuelConsumptionState() {
        return Citizen.invokeNative('0xC66CD90C');
    }
    misc.getFuelConsumptionState = getFuelConsumptionState;
    /**
     * A getter for [SET_GLOBAL_PASSENGER_MASS_MULTIPLIER](#\_0x3422291C).
     *
     * Hash: 0x78951816 | Since: unknown
     */
    function getGlobalPassengerMassMultiplier() {
        return Citizen.invokeNative('0x78951816');
    }
    misc.getGlobalPassengerMassMultiplier = getGlobalPassengerMassMultiplier;
    /**
     * Retrieves the map data entity handle.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0x30AA6911 | Since: unknown
     */
    function getMapdataEntityHandle(mapDataHash, entityInternalIdx) {
        return Citizen.invokeNative('0x30AA6911', mapDataHash, entityInternalIdx);
    }
    misc.getMapdataEntityHandle = getMapdataEntityHandle;
    /**
     * Returns mapdata's entity matrix. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * This should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer.
     *
     * Matrix layout is as follows:
     *
     * *   Element \[0], \[1] and \[2] should represent the right vector.
     * *   Element \[4], \[5] and \[6] should represent the forward vector.
     * *   Element \[8], \[9] and \[10] should represent the up vector.
     * *   Element \[12], \[13] and \[14] should represent X, Y and Z translation coordinates.
     * *   All other elements should be \[0, 0, 0, 1].
     *
     * Hash: 0x2C3CDA93 | Since: unknown
     */
    function getMapdataEntityMatrix(mapDataHash, entityInternalIdx, matrixPtr) {
        return Citizen.invokeNative('0x2C3CDA93', mapDataHash, entityInternalIdx, matrixPtr);
    }
    misc.getMapdataEntityMatrix = getMapdataEntityMatrix;
    /**
     * Returns the transient map data index for a specified hash.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xD29D8EDD | Since: unknown
     */
    function getMapdataFromHashKey(mapdataHandle) {
        if (typeof mapdataHandle === 'string')
            mapdataHandle = misc.getHashKey(mapdataHandle);
        return Citizen.invokeNative('0xD29D8EDD', mapdataHandle);
    }
    misc.getMapdataFromHashKey = getMapdataFromHashKey;
    /**
     * A getter for [SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\_0xEAE6DCC7EEE3DB1D).
     *
     * Hash: 0xFF72DF84 | Since: unknown
     */
    function getParkedVehicleDensityMultiplier() {
        return Citizen.invokeNative('0xFF72DF84');
    }
    misc.getParkedVehicleDensityMultiplier = getParkedVehicleDensityMultiplier;
    /**
     * A getter for [SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\_0xB3B3359379FE77D3).
     * Same as vehicle density multiplier.
     *
     * Hash: 0x7B0D00C5 | Since: unknown
     */
    function getRandomVehicleDensityMultiplier() {
        return Citizen.invokeNative('0x7B0D00C5');
    }
    misc.getRandomVehicleDensityMultiplier = getRandomVehicleDensityMultiplier;
    /**
     * A getter for [SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\_0x7A556143A1C03898).
     *
     * Hash: 0x77C598B2 | Since: unknown
     */
    function getScenarioPedDensityMultiplier() {
        return Citizen.invokeNative('0x77C598B2');
    }
    misc.getScenarioPedDensityMultiplier = getScenarioPedDensityMultiplier;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Returns whether an asynchronous streaming file registration completed.
     *
     * Hash: 0xA194934D | Since: unknown
     */
    function isStreamingFileReady(registerAs) {
        return Citizen.invokeNative('0xA194934D', registerAs);
    }
    misc.isStreamingFileReady = isStreamingFileReady;
    /**
     * Leaves cursor mode. This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xADECF19E | Since: unknown
     */
    function leaveCursorMode() {
        Citizen.invokeNative('0xADECF19E');
    }
    misc.leaveCursorMode = leaveCursorMode;
    /**
     * Toggles a check that prevents attaching (networked) entities to remotely owned peds. This is disabled by default.
     *
     * Hash: 0x30CE39D8 | Since: unknown
     */
    function onesyncEnableRemoteAttachmentSanitization(enable) {
        Citizen.invokeNative('0x30CE39D8', enable);
    }
    misc.onesyncEnableRemoteAttachmentSanitization = onesyncEnableRemoteAttachmentSanitization;
    /**
     * Replaces the `popgroups` (CPopGroupList) meta file with the file in the specified path.
     *
     * Hash: 0xD3BC438F | Since: unknown
     */
    function overridePopGroups(path) {
        Citizen.invokeNative('0xD3BC438F', path);
    }
    misc.overridePopGroups = overridePopGroups;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game.
     *
     * Hash: 0x3C2F9037 | Since: unknown
     */
    function registerArchetypes(factory) {
        Citizen.invokeNative('0x3C2F9037', factory);
    }
    misc.registerArchetypes = registerArchetypes;
    /**
     * Registers a specified .gfx file as GFx font library.
     * The .gfx file has to be registered with the streamer already.
     *
     * Hash: 0x1B3A363 | Since: unknown
     */
    function registerFontFile(fileName) {
        Citizen.invokeNative('0x1B3A363', fileName);
    }
    misc.registerFontFile = registerFontFile;
    /**
     * Registers a specified font name for use with text draw commands.
     *
     * Hash: 0xACF6D8EE | Since: unknown
     */
    function registerFontId(fontName) {
        return Citizen.invokeNative('0xACF6D8EE', fontName);
    }
    misc.registerFontId = registerFontId;
    /**
     * Registers a key mapping for the current resource.
     *
     * See the related [cookbook post](https://cookbook.fivem.net/2020/01/06/using-the-new-console-key-bindings/) for more information.
     *
     * Below you can find some examples on how to create these keybindings as well as the alternate keybinding syntax, which is preceded by `~!` to indicate that it's an alternate key.
     *
     * Hash: 0xD7664FD1 | Since: unknown
     */
    function registerKeyMapping(commandString, description, defaultMapper, defaultParameter) {
        Citizen.invokeNative('0xD7664FD1', commandString, description, defaultMapper, defaultParameter);
    }
    misc.registerKeyMapping = registerKeyMapping;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a dynamic streaming asset from the server with the GTA streaming module system.
     *
     * Hash: 0xCEAD2D4B | Since: unknown
     */
    function registerStreamingFileFromCache(resourceName, fileName, cacheString) {
        Citizen.invokeNative('0xCEAD2D4B', resourceName, fileName, cacheString);
    }
    misc.registerStreamingFileFromCache = registerStreamingFileFromCache;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a KVP value as an asset with the GTA streaming module system. This function currently won't work.
     *
     * Hash: 0x1493DCC1 | Since: unknown
     */
    function registerStreamingFileFromKvs(kvsKey) {
        Citizen.invokeNative('0x1493DCC1', kvsKey);
    }
    misc.registerStreamingFileFromKvs = registerStreamingFileFromKvs;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored.
     *
     * Use `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully.
     *
     * Hash: 0xF44BFB95 | Since: unknown
     */
    function registerStreamingFileFromUrl(registerAs, url) {
        Citizen.invokeNative('0xF44BFB95', registerAs, url);
    }
    misc.registerStreamingFileFromUrl = registerStreamingFileFromUrl;
    /**
     * Removes health config.
     *
     * Hash: 0xE0ED5FB | Since: unknown
     */
    function removeHealthConfig(configName) {
        Citizen.invokeNative('0xE0ED5FB', configName);
    }
    misc.removeHealthConfig = removeHealthConfig;
    /**
     * Adds a cooldown between instances of moving and then aiming.
     * Can be optionally used to hinder 'speedboosting'
     * To turn off, set value to 0
     *
     * Hash: 0xA42A3DBF | Since: unknown
     */
    function setAimCooldown(value) {
        Citizen.invokeNative('0xA42A3DBF', value);
    }
    misc.setAimCooldown = setAimCooldown;
    /**
     * No comment provided
     *
     * Hash: 0xC5945BD9 | Since: unknown
     */
    function setCalmingQuadBounds(waterQuad, minX, minY, maxX, maxY) {
        return Citizen.invokeNative('0xC5945BD9', waterQuad, minX, minY, maxX, maxY);
    }
    misc.setCalmingQuadBounds = setCalmingQuadBounds;
    /**
     * No comment provided
     *
     * Hash: 0x67977501 | Since: unknown
     */
    function setCalmingQuadDampening(calmingQuad, dampening) {
        return Citizen.invokeNative('0x67977501', calmingQuad, dampening);
    }
    misc.setCalmingQuadDampening = setCalmingQuadDampening;
    /**
     * Allows Weapon-Flashlight beams to stay visible while moving. Normally it only stays on while aiming.
     *
     * Hash: 0x7635B349 | Since: unknown
     */
    function setFlashLightKeepOnWhileMoving(state) {
        Citizen.invokeNative('0x7635B349', state);
    }
    misc.setFlashLightKeepOnWhileMoving = setFlashLightKeepOnWhileMoving;
    /**
     * Sets fuel consumption rate multiplier for all vehicles operated by a player. This is a way to slow down or speed up fuel consumption for all vehicles at a time. If 0 - it practically means that fuel will not be consumed. By default is set to 1.
     *
     * When the multiplier is set to 1 a default 65 litre gas tank car with average fuel consumption can stay idle for ~16.67 hours or run with max RPM for ~2.5 hours.
     *
     * To customize fuel consumption per vehicle / vehicle class use [`SET_HANDLING_FLOAT`](#\_0x90DD01C)/[`SET_VEHICLE_HANDLING_FLOAT`](#\_0x488C86D2) natives with `fieldName` equal to `fPetrolConsumptionRate`. By default it is set to 0.5 for all vehicles.
     *
     * Hash: 0x845F3E5C | Since: unknown
     */
    function setFuelConsumptionRateMultiplier(multiplier) {
        Citizen.invokeNative('0x845F3E5C', multiplier);
    }
    misc.setFuelConsumptionRateMultiplier = setFuelConsumptionRateMultiplier;
    /**
     * Turns on and off fuel consumption in all vehicles operated by a player. NPC operated vehicles will not consume fuel to avoid traffic disruptions.
     *
     * The default Gta5 behaviour is fuel consumption turned off.
     *
     * Hash: 0x81DAD03E | Since: unknown
     */
    function setFuelConsumptionState(state) {
        Citizen.invokeNative('0x81DAD03E', state);
    }
    misc.setFuelConsumptionState = setFuelConsumptionState;
    /**
     * No comment provided
     *
     * Hash: 0x1C47F6AC | Since: unknown
     */
    function setGlobalPassengerMassMultiplier(massMul) {
        Citizen.invokeNative('0x1C47F6AC', massMul);
    }
    misc.setGlobalPassengerMassMultiplier = setGlobalPassengerMassMultiplier;
    /**
     * Sets default armor value for specific health config.
     *
     * Hash: 0x20A1E6A2 | Since: unknown
     */
    function setHealthConfigDefaultArmor(configName, newValue) {
        Citizen.invokeNative('0x20A1E6A2', configName, newValue);
    }
    misc.setHealthConfigDefaultArmor = setHealthConfigDefaultArmor;
    /**
     * Sets default endurance value for specific health config.
     *
     * Hash: 0x60F20B81 | Since: unknown
     */
    function setHealthConfigDefaultEndurance(configName, newValue) {
        Citizen.invokeNative('0x60F20B81', configName, newValue);
    }
    misc.setHealthConfigDefaultEndurance = setHealthConfigDefaultEndurance;
    /**
     * Sets default health value for specific health config.
     *
     * Hash: 0xC705C778 | Since: unknown
     */
    function setHealthConfigDefaultHealth(configName, newValue) {
        Citizen.invokeNative('0xC705C778', configName, newValue);
    }
    misc.setHealthConfigDefaultHealth = setHealthConfigDefaultHealth;
    /**
     * Sets default dog takedown threshold value for specific health config.
     *
     * Hash: 0x9A995E96 | Since: unknown
     */
    function setHealthConfigDogTakedownThreshold(configName, newValue) {
        Citizen.invokeNative('0x9A995E96', configName, newValue);
    }
    misc.setHealthConfigDogTakedownThreshold = setHealthConfigDogTakedownThreshold;
    /**
     * Sets default dying health threshold value for specific health config.
     *
     * Hash: 0x9B00FD77 | Since: unknown
     */
    function setHealthConfigDyingThreshold(configName, newValue) {
        Citizen.invokeNative('0x9B00FD77', configName, newValue);
    }
    misc.setHealthConfigDyingThreshold = setHealthConfigDyingThreshold;
    /**
     * Sets default fatigued health threshold value for specific health config.
     *
     * Hash: 0xC58953FD | Since: unknown
     */
    function setHealthConfigFatiguedThreshold(configName, newValue) {
        Citizen.invokeNative('0xC58953FD', configName, newValue);
    }
    misc.setHealthConfigFatiguedThreshold = setHealthConfigFatiguedThreshold;
    /**
     * Sets default hurt health threshold value for specific health config.
     *
     * Hash: 0x98DF1A83 | Since: unknown
     */
    function setHealthConfigHurtThreshold(configName, newValue) {
        Citizen.invokeNative('0x98DF1A83', configName, newValue);
    }
    misc.setHealthConfigHurtThreshold = setHealthConfigHurtThreshold;
    /**
     * Sets default injured health threshold value for specific health config.
     *
     * Hash: 0xF9D9B647 | Since: unknown
     */
    function setHealthConfigInjuredThreshold(configName, newValue) {
        Citizen.invokeNative('0xF9D9B647', configName, newValue);
    }
    misc.setHealthConfigInjuredThreshold = setHealthConfigInjuredThreshold;
    /**
     * Sets default invincible value for specific health config.
     *
     * Hash: 0x4A9EEDE6 | Since: unknown
     */
    function setHealthConfigInvincible(configName, newValue) {
        Citizen.invokeNative('0x4A9EEDE6', configName, newValue);
    }
    misc.setHealthConfigInvincible = setHealthConfigInvincible;
    /**
     * Sets default melee cardinal fatal attack value for specific health config.
     *
     * Hash: 0xDD443E53 | Since: unknown
     */
    function setHealthConfigMeleeFatalAttack(configName, newValue) {
        Citizen.invokeNative('0xDD443E53', configName, newValue);
    }
    misc.setHealthConfigMeleeFatalAttack = setHealthConfigMeleeFatalAttack;
    /**
     * Sets default writhe from bullet threshold value for specific health config.
     *
     * Hash: 0xE97633CB | Since: unknown
     */
    function setHealthConfigWritheFromBulletThreshold(configName, newValue) {
        Citizen.invokeNative('0xE97633CB', configName, newValue);
    }
    misc.setHealthConfigWritheFromBulletThreshold = setHealthConfigWritheFromBulletThreshold;
    /**
     * Overrides how many real ms are equal to one game minute.
     * A setter for [`GetMillisecondsPerGameMinute`](#\_0x2F8B4D1C595B11DB).
     *
     * Hash: 0x36CA2554 | Since: unknown
     */
    function setMillisecondsPerGameMinute(value) {
        Citizen.invokeNative('0x36CA2554', value);
    }
    misc.setMillisecondsPerGameMinute = setMillisecondsPerGameMinute;
    /**
     * <strong>This native is deprecated and does nothing!</strong>
     *
     * Hash: 0x7F6B8D75 | Since: unknown
     */
    function setModelHeadlightConfiguration(modelHash, ratePerSecond, headlightRotation, invertRotation) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        Citizen.invokeNative('0x7F6B8D75', modelHash, ratePerSecond, headlightRotation, invertRotation);
    }
    misc.setModelHeadlightConfiguration = setModelHeadlightConfiguration;
    /**
     * Sets whether all tags should group (normal game behavior) or should remain independent and above each ped's respective head when in a vehicle.
     *
     * Hash: 0x7A27BC93 | Since: unknown
     */
    function setMpGamerTagsUseVehicleBehavior(enabled) {
        Citizen.invokeNative('0x7A27BC93', enabled);
    }
    misc.setMpGamerTagsUseVehicleBehavior = setMpGamerTagsUseVehicleBehavior;
    /**
     * Sets the maximum distance at which all tags will be visible and which beyond will not be displayed. Distance is measured from the camera position.
     *
     * Hash: 0xD61676B3 | Since: unknown
     */
    function setMpGamerTagsVisibleDistance(distance) {
        Citizen.invokeNative('0xD61676B3', distance);
    }
    misc.setMpGamerTagsVisibleDistance = setMpGamerTagsVisibleDistance;
    /**
     * Registers a keymap that will be triggered whenever `rawKeyIndex` is pressed or released.
     *
     * `onKeyUp` and `onKeyDown` will not provide any arguments.
     *
     * ```ts
     * function onStateChange();
     * ```
     *
     * Hash: 0x49C1F6DC | Since: unknown
     */
    function registerRawKeymap(keymapName, onKeyDown, onKeyUp, rawKeyIndex, canBeDisabled) {
        Citizen.invokeNative('0x49C1F6DC', keymapName, onKeyDown, onKeyUp, rawKeyIndex, canBeDisabled);
    }
    misc.registerRawKeymap = registerRawKeymap;
    /**
     * Remaps the keymap bound to `keymapName` to `newRawKeyIndex`
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x6E38C1B9 | Since: unknown
     */
    function remapRawKeymap(keymapName, newRawKeyIndex) {
        Citizen.invokeNative('0x6E38C1B9', keymapName, newRawKeyIndex);
    }
    misc.remapRawKeymap = remapRawKeymap;
    /**
     * No comment provided
     *
     * Hash: 0xC44C2F44 | Since: unknown
     */
    function setBackfaceculling(toggle) {
        Citizen.invokeNative('0xC44C2F44', toggle);
    }
    misc.setBackfaceculling = setBackfaceculling;
    /**
     * No comment provided
     *
     * Hash: 0x8A7A8DAC | Since: unknown
     */
    function setCursorLocation(x, y) {
        return Citizen.invokeNative('0x8A7A8DAC', x, y);
    }
    misc.setCursorLocation = setCursorLocation;
    /**
     * Sets whether or not ownership checks should be performed while trying to stow a carriable on a hunting wagon.
     *
     * Hash: 0x85A10FFD | Since: unknown
     */
    function setIgnoreVehicleOwnershipForStowing(ignore) {
        Citizen.invokeNative('0x85A10FFD', ignore);
    }
    misc.setIgnoreVehicleOwnershipForStowing = setIgnoreVehicleOwnershipForStowing;
    /**
     * Activates built-in timecycle editing tool.
     *
     * Hash: 0xEEB9B76A | Since: unknown
     */
    function activateTimecycleEditor() {
        Citizen.invokeNative('0xEEB9B76A');
    }
    misc.activateTimecycleEditor = activateTimecycleEditor;
    /**
     * No comment provided
     *
     * Hash: 0x3422291C | Since: unknown
     */
    function applyWeatherCycles(numEntries, msPerCycle) {
        return Citizen.invokeNative('0x3422291C', numEntries, msPerCycle);
    }
    misc.applyWeatherCycles = applyWeatherCycles;
    /**
     * No comment provided
     *
     * Hash: 0x54D636B3 | Since: unknown
     */
    function cloneTimecycleModifier(sourceModifierName, clonedModifierName) {
        return Citizen.invokeNative('0x54D636B3', sourceModifierName, clonedModifierName);
    }
    misc.cloneTimecycleModifier = cloneTimecycleModifier;
    /**
     * Create a clean timecycle modifier. See [`SET_TIMECYCLE_MODIFIER_VAR`](#\_0x6E0A422B) to add variables.
     *
     * Hash: 0x70FA2AFA | Since: unknown
     */
    function createTimecycleModifier(modifierName) {
        return Citizen.invokeNative('0x70FA2AFA', modifierName);
    }
    misc.createTimecycleModifier = createTimecycleModifier;
    /**
     * Disables the game's world horizon lods rendering (see `farlods.#dd`).
     * Using the island hopper natives might also affect this state.
     *
     * Hash: 0xA9C92CDC | Since: unknown
     */
    function disableWorldhorizonRendering(state) {
        Citizen.invokeNative('0xA9C92CDC', state);
    }
    misc.disableWorldhorizonRendering = disableWorldhorizonRendering;
    /**
     * No comment provided
     *
     * Hash: 0xC53BB6D3 | Since: unknown
     */
    function doesTimecycleModifierHasVar(modifierName, varName) {
        return Citizen.invokeNative('0xC53BB6D3', modifierName, varName);
    }
    misc.doesTimecycleModifierHasVar = doesTimecycleModifierHasVar;
    /**
     * No comment provided
     *
     * Hash: 0xDEDA4E50 | Since: unknown
     */
    function endFindObject(findHandle) {
        Citizen.invokeNative('0xDEDA4E50', findHandle);
    }
    misc.endFindObject = endFindObject;
    /**
     * No comment provided
     *
     * Hash: 0x9615C2AD | Since: unknown
     */
    function endFindPed(findHandle) {
        Citizen.invokeNative('0x9615C2AD', findHandle);
    }
    misc.endFindPed = endFindPed;
    /**
     * No comment provided
     *
     * Hash: 0x3C407D53 | Since: unknown
     */
    function endFindPickup(findHandle) {
        Citizen.invokeNative('0x3C407D53', findHandle);
    }
    misc.endFindPickup = endFindPickup;
    /**
     * No comment provided
     *
     * Hash: 0x9227415A | Since: unknown
     */
    function endFindVehicle(findHandle) {
        Citizen.invokeNative('0x9227415A', findHandle);
    }
    misc.endFindVehicle = endFindVehicle;
    /**
     * This native is not implemented.
     *
     * Hash: 0xD2CB95A3 | Since: unknown
     */
    function experimentalLoadCloneCreate(data, objectId, tree) {
        return Citizen.invokeNative('0xD2CB95A3', data, objectId, tree);
    }
    misc.experimentalLoadCloneCreate = experimentalLoadCloneCreate;
    /**
     * This native is not implemented.
     *
     * Hash: 0x6BC189AC | Since: unknown
     */
    function experimentalLoadCloneSync(entity, data) {
        Citizen.invokeNative('0x6BC189AC', entity, data);
    }
    misc.experimentalLoadCloneSync = experimentalLoadCloneSync;
    /**
     * This native is not implemented.
     *
     * Hash: 0x9D65CAD2 | Since: unknown
     */
    function experimentalSaveCloneCreate(entity) {
        return Citizen.invokeNative('0x9D65CAD2', entity);
    }
    misc.experimentalSaveCloneCreate = experimentalSaveCloneCreate;
    /**
     * This native is not implemented.
     *
     * Hash: 0x38D19210 | Since: unknown
     */
    function experimentalSaveCloneSync(entity) {
        return Citizen.invokeNative('0x38D19210', entity);
    }
    misc.experimentalSaveCloneSync = experimentalSaveCloneSync;
    /**
     * No comment provided
     *
     * Hash: 0xFAA6CB5D | Since: unknown
     */
    function findFirstObject() {
        return Citizen.invokeNative('0xFAA6CB5D');
    }
    misc.findFirstObject = findFirstObject;
    /**
     * No comment provided
     *
     * Hash: 0xFB012961 | Since: unknown
     */
    function findFirstPed() {
        return Citizen.invokeNative('0xFB012961');
    }
    misc.findFirstPed = findFirstPed;
    /**
     * No comment provided
     *
     * Hash: 0x3FF9D340 | Since: unknown
     */
    function findFirstPickup() {
        return Citizen.invokeNative('0x3FF9D340');
    }
    misc.findFirstPickup = findFirstPickup;
    /**
     * No comment provided
     *
     * Hash: 0x15E55694 | Since: unknown
     */
    function findFirstVehicle() {
        return Citizen.invokeNative('0x15E55694');
    }
    misc.findFirstVehicle = findFirstVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x4E129DBF | Since: unknown
     */
    function findNextObject(findHandle) {
        return Citizen.invokeNative('0x4E129DBF', findHandle);
    }
    misc.findNextObject = findNextObject;
    /**
     * No comment provided
     *
     * Hash: 0xAB09B548 | Since: unknown
     */
    function findNextPed(findHandle) {
        return Citizen.invokeNative('0xAB09B548', findHandle);
    }
    misc.findNextPed = findNextPed;
    /**
     * No comment provided
     *
     * Hash: 0x4107EF0F | Since: unknown
     */
    function findNextPickup(findHandle) {
        return Citizen.invokeNative('0x4107EF0F', findHandle);
    }
    misc.findNextPickup = findNextPickup;
    /**
     * No comment provided
     *
     * Hash: 0x8839120D | Since: unknown
     */
    function findNextVehicle(findHandle) {
        return Citizen.invokeNative('0x8839120D', findHandle);
    }
    misc.findNextVehicle = findNextVehicle;
    /**
     * This native returns the currently used game's name.
     *
     * Hash: 0xACA18ECD | Since: unknown
     */
    function getCurrentGameName() {
        return Citizen.invokeNative('0xACA18ECD');
    }
    misc.getCurrentGameName = getCurrentGameName;
    /**
     * Returns the peer address of the remote game server that the user is currently connected to.
     *
     * Hash: 0xEA11BFBA | Since: unknown
     */
    function getCurrentServerEndpoint() {
        return Citizen.invokeNative('0xEA11BFBA');
    }
    misc.getCurrentServerEndpoint = getCurrentServerEndpoint;
    /**
     * No comment provided
     *
     * Hash: 0xFE2A1D4D | Since: unknown
     */
    function getTimecycleModifierCount() {
        return Citizen.invokeNative('0xFE2A1D4D');
    }
    misc.getTimecycleModifierCount = getTimecycleModifierCount;
    /**
     * No comment provided
     *
     * Hash: 0x5F4CD0E2 | Since: unknown
     */
    function getTimecycleModifierIndexByName(modifierName) {
        return Citizen.invokeNative('0x5F4CD0E2', modifierName);
    }
    misc.getTimecycleModifierIndexByName = getTimecycleModifierIndexByName;
    /**
     * No comment provided
     *
     * Hash: 0x28CB8608 | Since: unknown
     */
    function getTimecycleModifierNameByIndex(modifierIndex) {
        return Citizen.invokeNative('0x28CB8608', modifierIndex);
    }
    misc.getTimecycleModifierNameByIndex = getTimecycleModifierNameByIndex;
    /**
     * A getter for [SET_TIMECYCLE_MODIFIER_STRENGTH](#\_0x82E7FFCD5B2326B3).
     *
     * Hash: 0xBE54124A | Since: unknown
     */
    function getTimecycleModifierStrength() {
        return Citizen.invokeNative('0xBE54124A');
    }
    misc.getTimecycleModifierStrength = getTimecycleModifierStrength;
    /**
     * No comment provided
     *
     * Hash: 0xA7109E12 | Since: unknown
     */
    function getTimecycleModifierVar(modifierName, varName) {
        return Citizen.invokeNative('0xA7109E12', modifierName, varName);
    }
    misc.getTimecycleModifierVar = getTimecycleModifierVar;
    /**
     * No comment provided
     *
     * Hash: 0x60FB60FE | Since: unknown
     */
    function getTimecycleModifierVarCount(modifierName) {
        return Citizen.invokeNative('0x60FB60FE', modifierName);
    }
    misc.getTimecycleModifierVarCount = getTimecycleModifierVarCount;
    /**
     * No comment provided
     *
     * Hash: 0xE874AB1D | Since: unknown
     */
    function getTimecycleModifierVarNameByIndex(modifierName, modifierVarIndex) {
        return Citizen.invokeNative('0xE874AB1D', modifierName, modifierVarIndex);
    }
    misc.getTimecycleModifierVarNameByIndex = getTimecycleModifierVarNameByIndex;
    /**
     * Returns the amount of variables available to be applied on timecycle modifiers.
     *
     * Hash: 0x838B34D8 | Since: unknown
     */
    function getTimecycleVarCount() {
        return Citizen.invokeNative('0x838B34D8');
    }
    misc.getTimecycleVarCount = getTimecycleVarCount;
    /**
     * See [GET_TIMECYCLE_VAR_COUNT](#\_0x838B34D8).
     *
     * Hash: 0x3B90238 | Since: unknown
     */
    function getTimecycleVarDefaultValueByIndex(varIndex) {
        return Citizen.invokeNative('0x3B90238', varIndex);
    }
    misc.getTimecycleVarDefaultValueByIndex = getTimecycleVarDefaultValueByIndex;
    /**
     * See [GET_TIMECYCLE_VAR_COUNT](#\_0x838B34D8).
     *
     * Hash: 0xC6C55AAF | Since: unknown
     */
    function getTimecycleVarNameByIndex(varIndex) {
        return Citizen.invokeNative('0xC6C55AAF', varIndex);
    }
    misc.getTimecycleVarNameByIndex = getTimecycleVarNameByIndex;
    /**
     * Converts a screen coordinate into its relative world coordinate.
     *
     * Hash: 0xC81D0659 | Since: unknown
     */
    function getWorldCoordFromScreenCoord(screenSize) {
        return Citizen.invokeNative('0xC81D0659', screenSize.x, screenSize.y);
    }
    misc.getWorldCoordFromScreenCoord = getWorldCoordFromScreenCoord;
    /**
     * No comment provided
     *
     * Hash: 0x36DF8612 | Since: unknown
     */
    function removeTimecycleModifier(modifierName) {
        Citizen.invokeNative('0x36DF8612', modifierName);
    }
    misc.removeTimecycleModifier = removeTimecycleModifier;
    /**
     * No comment provided
     *
     * Hash: 0x5A5E0D05 | Since: unknown
     */
    function removeTimecycleModifierVar(modifierName, varName) {
        Citizen.invokeNative('0x5A5E0D05', modifierName, varName);
    }
    misc.removeTimecycleModifierVar = removeTimecycleModifierVar;
    /**
     * Requests a resource file set with the specified name to be downloaded and mounted on top of the current resource.
     *
     * Resource file sets are specified in `fxmanifest.lua` with the following syntax:
     *
     * ```lua
     * file_set 'addon_ui' {
     * 'ui/addon/index.html',
     * 'ui/addon\/\**.js',
     * }
     * ```
     *
     * This command will trigger a script error if the request failed.
     *
     * Hash: 0xE7490533 | Since: unknown
     */
    function requestResourceFileSet(setName) {
        return Citizen.invokeNative('0xE7490533', setName);
    }
    misc.requestResourceFileSet = requestResourceFileSet;
    /**
     * Sends a message to the `loadingScreen` NUI frame, which contains the HTML page referenced in `loadscreen` resources.
     *
     * Hash: 0x8BBE6CC0 | Since: unknown
     */
    function sendLoadingScreenMessage(jsonString) {
        return Citizen.invokeNative('0x8BBE6CC0', jsonString);
    }
    misc.sendLoadingScreenMessage = sendLoadingScreenMessage;
    /**
     * Toggles the visibility of resource names in the FiveM key mapping page.
     *
     * Hash: 0xCB0241B5 | Since: unknown
     */
    function setKeyMappingHideResources(hide) {
        Citizen.invokeNative('0xCB0241B5', hide);
    }
    misc.setKeyMappingHideResources = setKeyMappingHideResources;
    /**
     * No comment provided
     *
     * Hash: 0xA7DD3209 | Since: unknown
     */
    function setSnakeoilForEntry(name, path, data) {
        Citizen.invokeNative('0xA7DD3209', name, path, data);
    }
    misc.setSnakeoilForEntry = setSnakeoilForEntry;
    /**
     * No comment provided
     *
     * Hash: 0x97B2F9F8 | Since: unknown
     */
    function setTextChatEnabled(enabled) {
        return Citizen.invokeNative('0x97B2F9F8', enabled);
    }
    misc.setTextChatEnabled = setTextChatEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x6E0A422B | Since: unknown
     */
    function setTimecycleModifierVar(modifierName, varName, value1, value2) {
        Citizen.invokeNative('0x6E0A422B', modifierName, varName, value1, value2);
    }
    misc.setTimecycleModifierVar = setTimecycleModifierVar;
    /**
     * No comment provided
     *
     * Hash: 0xD264D4E1 | Since: unknown
     */
    function setWeatherCycleEntry(index, typeName, timeMult) {
        return Citizen.invokeNative('0xD264D4E1', index, typeName, timeMult);
    }
    misc.setWeatherCycleEntry = setWeatherCycleEntry;
    /**
     * Sets whether or not the weather should be owned by the network subsystem.
     *
     * To be able to use [\_SET_WEATHER_TYPE_TRANSITION](#\_0x578C752848ECFA0C), this has to be set to false.
     *
     * Hash: 0x2703D582 | Since: unknown
     */
    function setWeatherOwnedByNetwork(network) {
        Citizen.invokeNative('0x2703D582', network);
    }
    misc.setWeatherOwnedByNetwork = setWeatherOwnedByNetwork;
    /**
     * The backing function for TriggerLatentServerEvent.
     *
     * Hash: 0x128737EA | Since: unknown
     */
    function triggerLatentServerEventInternal(eventName, eventPayload, payloadLength, bps) {
        Citizen.invokeNative('0x128737EA', eventName, eventPayload, payloadLength, bps);
    }
    misc.triggerLatentServerEventInternal = triggerLatentServerEventInternal;
    /**
     * The backing function for TriggerServerEvent.
     *
     * Hash: 0x7FDD1128 | Since: unknown
     */
    function triggerServerEventInternal(eventName, eventPayload, payloadLength) {
        Citizen.invokeNative('0x7FDD1128', eventName, eventPayload, payloadLength);
    }
    misc.triggerServerEventInternal = triggerServerEventInternal;
    /**
     * No comment provided
     *
     * Hash: 0xF97B1C93 | Since: unknown
     */
    function enableEnhancedHostSupport(enabled) {
        Citizen.invokeNative('0xF97B1C93', enabled);
    }
    misc.enableEnhancedHostSupport = enableEnhancedHostSupport;
    /**
     * No comment provided
     *
     * Hash: 0x13B6855D | Since: unknown
     */
    function flagServerAsPrivate(private_) {
        Citizen.invokeNative('0x13B6855D', private_);
    }
    misc.flagServerAsPrivate = flagServerAsPrivate;
    /**
     * Returns the current console output buffer.
     *
     * Hash: 0xE57429FA | Since: unknown
     */
    function getConsoleBuffer() {
        return Citizen.invokeNative('0xE57429FA');
    }
    misc.getConsoleBuffer = getConsoleBuffer;
    /**
     * Gets the current game timer in milliseconds.
     *
     * Hash: 0xA4EA0691 | Since: unknown
     */
    function getGameTimer() {
        return Citizen.invokeNative('0xA4EA0691');
    }
    misc.getGameTimer = getGameTimer;
    /**
     * This native converts the passed string to a hash.
     *
     * Hash: 0x98EFF6F1 | Since: unknown
     */
    function getHashKey(model) {
        return Citizen.invokeNative('0x98EFF6F1', model);
    }
    misc.getHashKey = getHashKey;
    /**
     * No comment provided
     *
     * Hash: 0xF01E2AAB | Since: unknown
     */
    function getHeliMainRotorHealth(vehicle) {
        return Citizen.invokeNative('0xF01E2AAB', vehicle);
    }
    misc.getHeliMainRotorHealth = getHeliMainRotorHealth;
    /**
     * No comment provided
     *
     * Hash: 0x5F70F5A3 | Since: unknown
     */
    function getHostId() {
        return Citizen.invokeNative('0x5F70F5A3');
    }
    misc.getHostId = getHostId;
    /**
     * No comment provided
     *
     * Hash: 0x23473EA4 | Since: unknown
     */
    function getPasswordHash(password) {
        return Citizen.invokeNative('0x23473EA4', password);
    }
    misc.getPasswordHash = getPasswordHash;
    /**
     * No comment provided
     *
     * Hash: 0x76876154 | Since: unknown
     */
    function isFlashLightOn(ped) {
        return Citizen.invokeNative('0x76876154', ped);
    }
    misc.isFlashLightOn = isFlashLightOn;
    /**
     * No comment provided
     *
     * Hash: 0x8E8CC653 | Since: unknown
     */
    function performHttpRequestInternal(requestData, requestDataLength) {
        return Citizen.invokeNative('0x8E8CC653', requestData, requestDataLength);
    }
    misc.performHttpRequestInternal = performHttpRequestInternal;
    /**
     * No comment provided
     *
     * Hash: 0x6B171E87 | Since: unknown
     */
    function performHttpRequestInternalEx(requestData) {
        return Citizen.invokeNative('0x6B171E87', requestData);
    }
    misc.performHttpRequestInternalEx = performHttpRequestInternalEx;
    /**
     * Prints 'structured trace' data to the server `file descriptor 3` channel. This is not generally useful outside of
     * server monitoring utilities.
     *
     * Hash: 0x90892DED | Since: unknown
     */
    function printStructuredTrace(jsonString) {
        Citizen.invokeNative('0x90892DED', jsonString);
    }
    misc.printStructuredTrace = printStructuredTrace;
    /**
     * Registers a listener for console output messages.
     *
     * Hash: 0x281B5448 | Since: unknown
     */
    function registerConsoleListener(listener) {
        Citizen.invokeNative('0x281B5448', listener);
    }
    misc.registerConsoleListener = registerConsoleListener;
    /**
     * No comment provided
     *
     * Hash: 0x341B16D2 | Since: unknown
     */
    function setConvar(varName, value) {
        Citizen.invokeNative('0x341B16D2', varName, value);
    }
    misc.setConvar = setConvar;
    /**
     * Used to replicate a server variable onto clients.
     *
     * Hash: 0xF292858C | Since: unknown
     */
    function setConvarReplicated(varName, value) {
        Citizen.invokeNative('0xF292858C', varName, value);
    }
    misc.setConvarReplicated = setConvarReplicated;
    /**
     * No comment provided
     *
     * Hash: 0x9338D547 | Since: unknown
     */
    function setConvarServerInfo(varName, value) {
        Citizen.invokeNative('0x9338D547', varName, value);
    }
    misc.setConvarServerInfo = setConvarServerInfo;
    /**
     * No comment provided
     *
     * Hash: 0xF90B7469 | Since: unknown
     */
    function setGameType(gametypeName) {
        Citizen.invokeNative('0xF90B7469', gametypeName);
    }
    misc.setGameType = setGameType;
    /**
     * Sets the handler for HTTP requests made to the executing resource.
     *
     * Example request URL: `http://localhost:30120/http-test/ping` - this request will be sent to the `http-test` resource with the `/ping` path.
     *
     * The handler function assumes the following signature:
     *
     * ```ts
     * function HttpHandler(
     * request: {
     * address: string;
     * headers: Record<string, string>;
     * method: string;
     * path: string;
     * setDataHandler(handler: (data: string) => void): void;
     * setDataHandler(handler: (data: ArrayBuffer) => void, binary: 'binary'): void;
     * setCancelHandler(handler: () => void): void;
     * },
     * response: {
     * writeHead(code: number, headers?: Record<string, string | string[]>): void;
     * write(data: string): void;
     * send(data?: string): void;
     * }
     * ): void;
     * ```
     *
     * *   **request**: The request object.
     * *   **address**: The IP address of the request sender.
     * *   **path**: The path to where the request was sent.
     * *   **headers**: The headers sent with the request.
     * *   **method**: The request method.
     * *   **setDataHandler**: Sets the handler for when a data body is passed with the request. Additionally you can pass the `'binary'` argument to receive a `BufferArray` in JavaScript or `System.Byte[]` in C# (has no effect in Lua).
     * *   **setCancelHandler**: Sets the handler for when the request is cancelled.
     * *   **response**: An object to control the response.
     * *   **writeHead**: Sets the status code & headers of the response. Can be only called once and won't work if called after running other response functions.
     * *   **write**: Writes to the response body without sending it. Can be called multiple times.
     * *   **send**: Writes to the response body and then sends it along with the status code & headers, finishing the request.
     *
     * Hash: 0xF5C6330C | Since: unknown
     */
    function setHttpHandler(handler) {
        Citizen.invokeNative('0xF5C6330C', handler);
    }
    misc.setHttpHandler = setHttpHandler;
    /**
     * No comment provided
     *
     * Hash: 0xB7BA82DC | Since: unknown
     */
    function setMapName(mapName) {
        Citizen.invokeNative('0xB7BA82DC', mapName);
    }
    misc.setMapName = setMapName;
    /**
     * Sets the entity lockdown mode for a specific routing bucket.
     *
     * Lockdown modes are:
     *
     * | Mode       | Meaning                                                    |
     * | ---------- | ---------------------------------------------------------- |
     * | `strict`   | No entities can be created by clients at all.              |
     * | `relaxed`  | Only script-owned entities created by clients are blocked. |
     * | `inactive` | Clients can create any entity they want.                   |
     *
     * Hash: 0xA0F2201F | Since: unknown
     */
    function setRoutingBucketEntityLockdownMode(bucketId, mode) {
        Citizen.invokeNative('0xA0F2201F', bucketId, mode);
    }
    misc.setRoutingBucketEntityLockdownMode = setRoutingBucketEntityLockdownMode;
    /**
     * Sets whether or not the specified routing bucket has automatically-created population enabled.
     *
     * Hash: 0xCE51AC2C | Since: unknown
     */
    function setRoutingBucketPopulationEnabled(bucketId, mode) {
        Citizen.invokeNative('0xCE51AC2C', bucketId, mode);
    }
    misc.setRoutingBucketPopulationEnabled = setRoutingBucketPopulationEnabled;
    /**
     * The backing function for TriggerClientEvent.
     *
     * Hash: 0x2F7A49E6 | Since: unknown
     */
    function triggerClientEventInternal(eventName, eventTarget, eventPayload, payloadLength) {
        Citizen.invokeNative('0x2F7A49E6', eventName, eventTarget, eventPayload, payloadLength);
    }
    misc.triggerClientEventInternal = triggerClientEventInternal;
    /**
     * The backing function for TriggerLatentClientEvent.
     *
     * Hash: 0x70B35890 | Since: unknown
     */
    function triggerLatentClientEventInternal(eventName, eventTarget, eventPayload, payloadLength, bps) {
        Citizen.invokeNative('0x70B35890', eventName, eventTarget, eventPayload, payloadLength, bps);
    }
    misc.triggerLatentClientEventInternal = triggerLatentClientEventInternal;
    /**
     * No comment provided
     *
     * Hash: 0x2E310ACD | Since: unknown
     */
    function verifyPasswordHash(password, hash) {
        return Citizen.invokeNative('0x2E310ACD', password, hash);
    }
    misc.verifyPasswordHash = verifyPasswordHash;
    /**
     * Adds a listener for Console Variable changes.
     *
     * The function called expects to match the following signature:
     *
     * ```ts
     * function ConVarChangeListener(conVarName: string, reserved: any);
     * ```
     *
     * *   **conVarName**: The ConVar that changed.
     * *   **reserved**: Currently unused.
     *
     * Hash: 0xAB7F7241 | Since: unknown
     */
    function addConvarChangeListener(conVarFilter, handler) {
        return Citizen.invokeNative('0xAB7F7241', conVarFilter, handler);
    }
    misc.addConvarChangeListener = addConvarChangeListener;
    /**
     * Adds a handler for changes to a state bag.
     *
     * The function called expects to match the following signature:
     *
     * ```ts
     * function StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean);
     * ```
     *
     * *   **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID`
     * or `localEntity:Handle`.
     * *   **key**: The changed key.
     * *   **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes.
     * *   **reserved**: Currently unused.
     * *   **replicated**: Whether the set is meant to be replicated.
     *
     * At this time, the change handler can't opt to reject changes.
     *
     * If bagName refers to an entity, use [GET_ENTITY_FROM_STATE_BAG_NAME](#\_0x4BDF1867) to get the entity handle
     * If bagName refers to a player, use [GET_PLAYER_FROM_STATE_BAG_NAME](#\_0xA56135E0) to get the player handle
     *
     * Hash: 0x5BA35AAF | Since: unknown
     */
    function addStateBagChangeHandler(keyFilter, bagFilter, handler) {
        return Citizen.invokeNative('0x5BA35AAF', keyFilter, bagFilter, handler);
    }
    misc.addStateBagChangeHandler = addStateBagChangeHandler;
    /**
     * Cancels the currently executing event.
     *
     * Hash: 0xFA29D35D | Since: unknown
     */
    function cancelEvent() {
        Citizen.invokeNative('0xFA29D35D');
    }
    misc.cancelEvent = cancelEvent;
    /**
     * No comment provided
     *
     * Hash: 0x1E86F206 | Since: unknown
     */
    function deleteFunctionReference(referenceIdentity) {
        Citizen.invokeNative('0x1E86F206', referenceIdentity);
    }
    misc.deleteFunctionReference = deleteFunctionReference;
    /**
     * No comment provided
     *
     * Hash: 0xF4E2079D | Since: unknown
     */
    function duplicateFunctionReference(referenceIdentity) {
        return Citizen.invokeNative('0xF4E2079D', referenceIdentity);
    }
    misc.duplicateFunctionReference = duplicateFunctionReference;
    /**
     * Depending on your use case you may need to use `add_acl resource.<your_resource_name> command.<command_name> allow` to use this native in your resource.
     *
     * Hash: 0x561C060B | Since: unknown
     */
    function executeCommand(commandString) {
        Citizen.invokeNative('0x561C060B', commandString);
    }
    misc.executeCommand = executeCommand;
    /**
     * An internal function for converting a stack trace object to a string.
     *
     * Hash: 0xD70C3BCA | Since: unknown
     */
    function formatStackTrace(traceData) {
        return Citizen.invokeNative('0xD70C3BCA', traceData);
    }
    misc.formatStackTrace = formatStackTrace;
    /**
     * Can be used to get a console variable of type `char*`, for example a string.
     *
     * Hash: 0x6CCD2564 | Since: unknown
     */
    function getConvar(varName, default_) {
        return Citizen.invokeNative('0x6CCD2564', varName, default_);
    }
    misc.getConvar = getConvar;
    /**
     * Can be used to get a console variable casted back to `bool`.
     *
     * Hash: 0x7E8EBFE5 | Since: unknown
     */
    function getConvarBool(varName, defaultValue) {
        return Citizen.invokeNative('0x7E8EBFE5', varName, defaultValue);
    }
    misc.getConvarBool = getConvarBool;
    /**
     * This will have floating point inaccuracy.
     *
     * Hash: 0x9E666D | Since: unknown
     */
    function getConvarFloat(varName, defaultValue) {
        return Citizen.invokeNative('0x9E666D', varName, defaultValue);
    }
    misc.getConvarFloat = getConvarFloat;
    /**
     * Can be used to get a console variable casted back to `int` (an integer value).
     *
     * Hash: 0x935C0AB2 | Since: unknown
     */
    function getConvarInt(varName, default_) {
        return Citizen.invokeNative('0x935C0AB2', varName, default_);
    }
    misc.getConvarInt = getConvarInt;
    /**
     * Returns the internal build number of the current game being executed.
     *
     * Possible values:
     *
     * *   FiveM
     * *   1604
     * *   2060
     * *   2189
     * *   2372
     * *   2545
     * *   2612
     * *   2699
     * *   2802
     * *   2944
     * *   3095
     * *   3258
     * *   3323
     * *   3407
     * *   3570
     * *   RedM
     * *   1311
     * *   1355
     * *   1436
     * *   1491
     * *   LibertyM
     * *   43
     * *   FXServer
     * *   0
     *
     * Hash: 0x804B9F7B | Since: unknown
     */
    function getGameBuildNumber() {
        return Citizen.invokeNative('0x804B9F7B');
    }
    misc.getGameBuildNumber = getGameBuildNumber;
    /**
     * Returns the current game being executed.
     *
     * Possible values:
     *
     * | Return value | Meaning                        |
     * | ------------ | ------------------------------ |
     * | `fxserver`   | Server-side code ('Duplicity') |
     * | `fivem`      | FiveM for GTA V                |
     * | `libertym`   | LibertyM for GTA IV            |
     * | `redm`       | RedM for Red Dead Redemption 2 |
     *
     * Hash: 0xE8EAA18B | Since: unknown
     */
    function getGameName() {
        return Citizen.invokeNative('0xE8EAA18B');
    }
    misc.getGameName = getGameName;
    /**
     * Returns a list of entity handles (script GUID) for all entities in the specified pool - the data returned is an array as
     * follows:
     *
     * ```json
     * [ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]
     * ```
     *
     * ### Supported pools
     *
     * *   `CPed`: Peds (including animals) and players.
     * *   `CObject`: Objects (props), doors, and projectiles.
     * *   `CNetObject`: Networked objects
     * *   `CVehicle`: Vehicles.
     * *   `CPickup`: Pickups.
     *
     * Hash: 0x2B9D4F50 | Since: unknown
     */
    function getGamePool(poolName) {
        return Citizen.invokeNative('0x2B9D4F50', poolName);
    }
    misc.getGamePool = getGamePool;
    /**
     * No comment provided
     *
     * Hash: 0x9F1C4383 | Since: unknown
     */
    function getInstanceId() {
        return Citizen.invokeNative('0x9F1C4383');
    }
    misc.getInstanceId = getInstanceId;
    /**
     * Returns all commands that are registered in the command system.
     * The data returned adheres to the following layout:
     *
     * ```
     * [
     * {
     * "name": "cmdlist",
     * "resource": "resource",
     * "arity" = -1,
     * },
     * {
     * "name": "command1"
     * "resource": "resource_2",
     * "arity" = -1,
     * }
     * ]
     * ```
     *
     * Hash: 0xD4BEF069 | Since: unknown
     */
    function getRegisteredCommands() {
        return Citizen.invokeNative('0xD4BEF069');
    }
    misc.getRegisteredCommands = getRegisteredCommands;
    /**
     * No comment provided
     *
     * Hash: 0x78D864C7 | Since: unknown
     */
    function getStateBagKeys(bagName) {
        return Citizen.invokeNative('0x78D864C7', bagName);
    }
    misc.getStateBagKeys = getStateBagKeys;
    /**
     * Returns the value of a state bag key.
     *
     * Hash: 0x637F4C75 | Since: unknown
     */
    function getStateBagValue(bagName, key) {
        return Citizen.invokeNative('0x637F4C75', bagName, key);
    }
    misc.getStateBagValue = getStateBagValue;
    /**
     * No comment provided
     *
     * Hash: 0x7EBB9929 | Since: unknown
     */
    function isAceAllowed(_object) {
        return Citizen.invokeNative('0x7EBB9929', _object);
    }
    misc.isAceAllowed = isAceAllowed;
    /**
     * Gets whether or not this is the CitizenFX server.
     *
     * Hash: 0xCF24C52E | Since: unknown
     */
    function isDuplicityVersion() {
        return Citizen.invokeNative('0xCF24C52E');
    }
    misc.isDuplicityVersion = isDuplicityVersion;
    /**
     * No comment provided
     *
     * Hash: 0x37CF52CE | Since: unknown
     */
    function isPrincipalAceAllowed(principal, _object) {
        return Citizen.invokeNative('0x37CF52CE', principal, _object);
    }
    misc.isPrincipalAceAllowed = isPrincipalAceAllowed;
    /**
     * Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.
     *
     * Commands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\_0x561C060B).
     *
     * The restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).
     *
     * **Example result**:
     *
     * ![](https://i.imgur.com/TaCnG09.png)
     *
     * Hash: 0x5FA79B0F | Since: unknown
     */
    function registerCommand(commandName, handler, restricted) {
        Citizen.invokeNative('0x5FA79B0F', commandName, handler, restricted);
    }
    misc.registerCommand = registerCommand;
    /**
     * No comment provided
     *
     * Hash: 0xEAC49841 | Since: unknown
     */
    function removeConvarChangeListener(cookie) {
        Citizen.invokeNative('0xEAC49841', cookie);
    }
    misc.removeConvarChangeListener = removeConvarChangeListener;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Removes a handler for changes to a state bag.
     *
     * Hash: 0xD36BE661 | Since: unknown
     */
    function removeStateBagChangeHandler(cookie) {
        Citizen.invokeNative('0xD36BE661', cookie);
    }
    misc.removeStateBagChangeHandler = removeStateBagChangeHandler;
    /**
     * Internal function for setting a state bag value.
     *
     * Hash: 0x8D50E33A | Since: unknown
     */
    function setStateBagValue(bagName, keyName, valueData, valueLength, replicated) {
        Citizen.invokeNative('0x8D50E33A', bagName, keyName, valueData, valueLength, replicated);
    }
    misc.setStateBagValue = setStateBagValue;
    /**
     * No comment provided
     *
     * Hash: 0x12A330 | Since: unknown
     */
    function stateBagHasKey(bagName, key) {
        return Citizen.invokeNative('0x12A330', bagName, key);
    }
    misc.stateBagHasKey = stateBagHasKey;
    /**
     * The backing function for TriggerEvent.
     *
     * Hash: 0x91310870 | Since: unknown
     */
    function triggerEventInternal(eventName, eventPayload, payloadLength) {
        Citizen.invokeNative('0x91310870', eventName, eventPayload, payloadLength);
    }
    misc.triggerEventInternal = triggerEventInternal;
    /**
     * Returns whether or not the currently executing event was canceled.
     *
     * Hash: 0x58382A19 | Since: unknown
     */
    function wasEventCanceled() {
        return Citizen.invokeNative('0x58382A19');
    }
    misc.wasEventCanceled = wasEventCanceled;
    /**
     * No comment provided
     *
     * Hash: 0x73D57CFFDD12C355 | Since: 323
     */
    function absf(value) {
        return Absf(value);
    }
    misc.absf = absf;
    /**
     * No comment provided
     *
     * Hash: 0xF0D31AD191A74F87 | Since: 323
     */
    function absi(value) {
        return Absi(value);
    }
    misc.absi = absi;
    /**
     * No comment provided
     *
     * Hash: 0x1D08B970013C34B6 | Since: 323
     */
    function acos() {
        return Acos(0);
    }
    misc.acos = acos;
    /**
     * Appears to remove stealth kill action from memory
     *
     * Hash: 0xA6A12939F16D85BE | Since: 323
     */
    function actionManagerEnableAction(hash, enable) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        RemoveStealthKill(hash, enable);
    }
    misc.actionManagerEnableAction = actionManagerEnableAction;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0xEB078CA2B5E82ADD | Since: 323
     */
    function activityFeedActionStartWithCommandLine() {
        Citizen.invokeNative('0xEB078CA2B5E82ADD', undefined, undefined);
    }
    misc.activityFeedActionStartWithCommandLine = activityFeedActionStartWithCommandLine;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x703CC7F60CBB2B57 | Since: 323
     */
    function activityFeedActionStartWithCommandLineAdd() {
        Citizen.invokeNative('0x703CC7F60CBB2B57', undefined);
    }
    misc.activityFeedActionStartWithCommandLineAdd = activityFeedActionStartWithCommandLineAdd;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x97E7E2C04245115B | Since: 323
     */
    function activityFeedAddIntToCaption() {
        Citizen.invokeNative('0x97E7E2C04245115B', undefined);
    }
    misc.activityFeedAddIntToCaption = activityFeedAddIntToCaption;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0xEBD3205A207939ED | Since: 323
     */
    function activityFeedAddLiteralSubstringToCaption() {
        Citizen.invokeNative('0xEBD3205A207939ED', undefined);
    }
    misc.activityFeedAddLiteralSubstringToCaption = activityFeedAddLiteralSubstringToCaption;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x31125FD509D9043F | Since: 323
     */
    function activityFeedAddSubstringToCaption() {
        Citizen.invokeNative('0x31125FD509D9043F', undefined);
    }
    misc.activityFeedAddSubstringToCaption = activityFeedAddSubstringToCaption;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x4DCDF92BF64236CD | Since: 323
     */
    function activityFeedCreate() {
        ActivityFeedCreate(undefined, undefined);
    }
    misc.activityFeedCreate = activityFeedCreate;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x916CA67D26FD1E37 | Since: 2060
     */
    function activityFeedLargeImageUrl() {
        Citizen.invokeNative('0x916CA67D26FD1E37', undefined);
    }
    misc.activityFeedLargeImageUrl = activityFeedLargeImageUrl;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"
     *
     * Hash: 0xBA4B8D83BDC75551 | Since: 323
     */
    function activityFeedOnlinePlayedWithPost() {
        Citizen.invokeNative('0xBA4B8D83BDC75551', undefined);
    }
    misc.activityFeedOnlinePlayedWithPost = activityFeedOnlinePlayedWithPost;
    /**
     * Does nothing (it's a nullsub). Seems to be PS4 specific.
     *
     * Hash: 0x8951EB9C6906D3C8 | Since: 323
     */
    function activityFeedPost() {
        Citizen.invokeNative('0x8951EB9C6906D3C8');
    }
    misc.activityFeedPost = activityFeedPost;
    /**
     * To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x918C7B2D2FF3928B | Since: 323
     */
    function addDispatchSpawnAngledBlockingArea(x1, y1, z1, x2, y2, z2, width) {
        return AddDispatchSpawnBlockingAngledArea(x1, y1, z1, x2, y2, z2, width);
    }
    misc.addDispatchSpawnAngledBlockingArea = addDispatchSpawnAngledBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0x2D4259F1FEB81DA9 | Since: 323
     */
    function addDispatchSpawnSphereBlockingArea(x1, y1, x2, y2) {
        return AddDispatchSpawnBlockingArea(x1, y1, x2, y2);
    }
    misc.addDispatchSpawnSphereBlockingArea = addDispatchSpawnSphereBlockingArea;
    /**
     * Returns the index of the newly created hospital spawn point.
     *
     * p3 might be radius?
     *
     * Hash: 0x1F464EF988465A81 | Since: 323
     */
    function addHospitalRestart(pos) {
        return AddHospitalRestart(pos.x, pos.y, pos.z, 0, undefined);
    }
    misc.addHospitalRestart = addHospitalRestart;
    /**
     * No comment provided
     *
     * Hash: 0x452736765B31FC4B | Since: 323
     */
    function addPoliceRestart() {
        return AddPoliceRestart(0, 0, 0, 0, undefined);
    }
    misc.addPoliceRestart = addPoliceRestart;
    /**
     * No comment provided
     *
     * Hash: 0x67F6413D3220E18D | Since: 323
     */
    function addPopMultiplierArea(x1, y1, z1, x2, y2, z2) {
        return AddPopMultiplierArea(x1, y1, z1, x2, y2, z2, 0, 0, false, false);
    }
    misc.addPopMultiplierArea = addPopMultiplierArea;
    /**
     * This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
     *
     * Hash: 0x32C7A7E8C43A1F80 | Since: 323
     */
    function addPopMultiplierSphere(pos, radius, pedMultiplier, vehicleMultiplier) {
        return AddPopMultiplierSphere(pos.x, pos.y, pos.z, radius, pedMultiplier, vehicleMultiplier, false, false);
    }
    misc.addPopMultiplierSphere = addPopMultiplierSphere;
    /**
     * No comment provided
     *
     * Hash: 0x69FE6DC87BD2A5E9 | Since: 323
     */
    function addReplayStatValue(value) {
        AddReplayStatValue(value);
    }
    misc.addReplayStatValue = addReplayStatValue;
    /**
     * See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
     *
     * Hash: 0x1A992DA297A4630C | Since: 323
     */
    function addStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ) {
        return AddStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, 0, 0, 0);
    }
    misc.addStuntJump = addStuntJump;
    /**
     * Creates a new stunt jump.
     *
     * The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.
     *
     * Info about the specific 'parameter sections':
     *
     *
     * <strong>x1, y1, z1, x2, y2, z2 and radius1:</strong>
     *
     * First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
     *
     *
     * <strong>x3, y3, z3, x4, y4, z4 and radius2:</strong>
     *
     * Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
     *
     *
     * <strong>camX, camY and camZ:</strong>
     *
     * The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
     *
     *
     * <strong>unk1, unk2 and unk3:</strong>
     *
     * Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
     *
     * Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
     *
     * Hash: 0xBBE5D803A5360CBF | Since: 323
     */
    function addStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ) {
        return AddStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, 0, 0, 0);
    }
    misc.addStuntJumpAngled = addStuntJumpAngled;
    /**
     * No comment provided
     *
     * Hash: 0xB8721407EE9C3FF6 | Since: 323
     */
    function addTacticalNavMeshPoint(pos) {
        AddTacticalAnalysisPoint(pos.x, pos.y, pos.z);
    }
    misc.addTacticalNavMeshPoint = addTacticalNavMeshPoint;
    /**
     * No comment provided
     *
     * Hash: 0xDEA36202FC3382DF | Since: 323
     */
    function allowMissionCreatorWarp(toggle) {
        AllowMissionCreatorWarp(toggle);
    }
    misc.allowMissionCreatorWarp = allowMissionCreatorWarp;
    /**
     * No comment provided
     *
     * Hash: 0xD19C0826DC20CF1C | Since: 2802
     */
    function areCreditsRunning() {
        return Citizen.invokeNative('0xD19C0826DC20CF1C');
    }
    misc.areCreditsRunning = areCreditsRunning;
    /**
     * No comment provided
     *
     * Hash: 0x5AA3BEFA29F03AD4 | Since: 323
     */
    function areProfileSettingsValid() {
        return AreProfileSettingsValid();
    }
    misc.areProfileSettingsValid = areProfileSettingsValid;
    /**
     * No comment provided
     *
     * Hash: 0x0C515FAB3FF9EA92 | Since: 323
     */
    function areStringsEqual(string1, string2) {
        return AreStringsEqual(string1, string2);
    }
    misc.areStringsEqual = areStringsEqual;
    /**
     * No comment provided
     *
     * Hash: 0xC843060B5765DCE7 | Since: 323
     */
    function asin() {
        return Asin(0);
    }
    misc.asin = asin;
    /**
     * No comment provided
     *
     * Hash: 0xA9D1795CD5043663 | Since: 323
     */
    function atan() {
        return Atan(0);
    }
    misc.atan = atan;
    /**
     * No comment provided
     *
     * Hash: 0x8927CBF9D22261A4 | Since: 323
     */
    function atan2() {
        return Atan2(0, 0);
    }
    misc.atan2 = atan2;
    /**
     * No comment provided
     *
     * Hash: 0xE0E500246FF73D66 | Since: 323
     */
    function beginReplayStats() {
        BeginReplayStats(undefined, undefined);
    }
    misc.beginReplayStats = beginReplayStats;
    /**
     * No comment provided
     *
     * Hash: 0x9B2BD3773123EA2F | Since: 323
     */
    function blockDispatchServiceResourceCreation(dispatchService, toggle) {
        BlockDispatchServiceResourceCreation(dispatchService, toggle);
    }
    misc.blockDispatchServiceResourceCreation = blockDispatchServiceResourceCreation;
    /**
     * DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
     * Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
     *
     * Hash: 0x58A39BE597CE99CD | Since: 757
     */
    function cancelOnscreenKeyboard() {
        CancelOnscreenKeyboard();
    }
    misc.cancelOnscreenKeyboard = cancelOnscreenKeyboard;
    /**
     * No comment provided
     *
     * Hash: 0xE6B7B0ACD4E4B75E | Since: 323
     */
    function cancelStuntJump() {
        CancelStuntJump();
    }
    misc.cancelStuntJump = cancelStuntJump;
    /**
     * No comment provided
     *
     * Hash: 0xC79AE21974B01FB2 | Since: 323
     */
    function cleanupAsyncInstall() {
        CleanupAsyncInstall();
    }
    misc.cleanupAsyncInstall = cleanupAsyncInstall;
    /**
     * No comment provided
     *
     * Hash: 0x11DB3500F042A8AA | Since: 323
     */
    function clearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width) {
        ClearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width, false, false, false, false, false, undefined, undefined);
    }
    misc.clearAngledAreaOfVehicles = clearAngledAreaOfVehicles;
    /**
     * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
     *
     * Hash: 0xA56F01F3765B93A0 | Since: 323
     */
    function clearArea(pos, radius, ignoreCopCars, ignoreObjects) {
        ClearArea(pos.x, pos.y, pos.z, radius, false, ignoreCopCars, ignoreObjects, false);
    }
    misc.clearArea = clearArea;
    /**
     * `MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.`
     *
     * Hash: 0x957838AAF91BD12D | Since: 323
     */
    function clearAreaLeaveVehicleHealth(pos, radius) {
        ClearAreaLeaveVehicleHealth(pos.x, pos.y, pos.z, radius, false, false, false, false);
    }
    misc.clearAreaLeaveVehicleHealth = clearAreaLeaveVehicleHealth;
    /**
     * flags appears to always be 0
     *
     * Hash: 0x04F8FC8FCF58F88D | Since: 323
     */
    function clearAreaOfCops(pos, radius, flags) {
        ClearAreaOfCops(pos.x, pos.y, pos.z, radius, flags);
    }
    misc.clearAreaOfCops = clearAreaOfCops;
    /**
     * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
     *
     * Hash: 0xDD9B9B385AAC7F5B | Since: 323
     */
    function clearAreaOfObjects(pos, radius, flags) {
        ClearAreaOfObjects(pos.x, pos.y, pos.z, radius, flags);
    }
    misc.clearAreaOfObjects = clearAreaOfObjects;
    /**
     * Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
     *
     * Hash: 0xBE31FD6CE464AC59 | Since: 323
     */
    function clearAreaOfPeds(pos, radius, flags) {
        ClearAreaOfPeds(pos.x, pos.y, pos.z, radius, flags);
    }
    misc.clearAreaOfPeds = clearAreaOfPeds;
    /**
     * flags is usually 0 in the scripts.
     *
     * Hash: 0x0A1CB9094635D1A6 | Since: 323
     */
    function clearAreaOfProjectiles(pos, radius, flags) {
        ClearAreaOfProjectiles(pos.x, pos.y, pos.z, radius, flags);
    }
    misc.clearAreaOfProjectiles = clearAreaOfProjectiles;
    /**
     * Example:
     * CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
     *
     * Hash: 0x01C7B9B38428AEB6 | Since: 323
     */
    function clearAreaOfVehicles(pos, radius) {
        ClearAreaOfVehicles(pos.x, pos.y, pos.z, radius, false, false, false, false, false, false, undefined);
    }
    misc.clearAreaOfVehicles = clearAreaOfVehicles;
    /**
     * This sets bit [offset] of [address] to off.
     *
     * Example:
     * `MISC::CLEAR_BIT(&bitAddress, 1);`
     *
     * To check if this bit has been enabled:
     * `MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards`
     *
     * Hash: 0xE80492A9AC099A93 | Since: 323
     */
    function clearBit(offset) {
        return ClearBit(offset);
    }
    misc.clearBit = clearBit;
    /**
     * No comment provided
     *
     * Hash: 0x06462A961E94B67C | Since: 323
     */
    function clearCodeRequestedAutosave() {
        Citizen.invokeNative('0x06462A961E94B67C');
    }
    misc.clearCodeRequestedAutosave = clearCodeRequestedAutosave;
    /**
     * No comment provided
     *
     * Hash: 0x338D2E3477711050 | Since: 323
     */
    function clearOverrideWeather() {
        ClearOverrideWeather();
    }
    misc.clearOverrideWeather = clearOverrideWeather;
    /**
     * No comment provided
     *
     * Hash: 0x1B1AB132A16FDA55 | Since: 323
     */
    function clearReplayStats() {
        ClearReplayStats();
    }
    misc.clearReplayStats = clearReplayStats;
    /**
     * No comment provided
     *
     * Hash: 0xA2716D40842EAF79 | Since: 323
     */
    function clearRestartCoordOverride() {
        ClearRestartCustomPosition();
    }
    misc.clearRestartCoordOverride = clearRestartCoordOverride;
    /**
     * Possibly used to clear scenario points.
     *
     * Hash: 0x7EC6F9A478A6A512 | Since: 323
     */
    function clearScenarioSpawnHistory() {
        Citizen.invokeNative('0x7EC6F9A478A6A512');
    }
    misc.clearScenarioSpawnHistory = clearScenarioSpawnHistory;
    /**
     * No comment provided
     *
     * Hash: 0xB3CD58CCA6CDA852 | Since: 323
     */
    function clearTacticalNavMeshPoints() {
        ClearTacticalAnalysisPoints();
    }
    misc.clearTacticalNavMeshPoints = clearTacticalNavMeshPoints;
    /**
     * No comment provided
     *
     * Hash: 0x0CF97F497FE7D048 | Since: 1103
     */
    function clearWeatherTypeNowPersistNetwork(milliseconds) {
        ClearWeatherTypeNowPersistNetwork(milliseconds);
    }
    misc.clearWeatherTypeNowPersistNetwork = clearWeatherTypeNowPersistNetwork;
    /**
     * No comment provided
     *
     * Hash: 0xCCC39339BEF76CF5 | Since: 323
     */
    function clearWeatherTypePersist() {
        ClearWeatherTypePersist();
    }
    misc.clearWeatherTypePersist = clearWeatherTypePersist;
    /**
     * Compares two strings up to a specified number of characters.
     *
     * Parameters:
     * str1 - String to be compared.
     * str2 - String to be compared.
     * matchCase - Comparison will be case-sensitive.
     * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
     *
     * Returns:
     * A value indicating the relationship between the strings:
     * <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
     * 0 - The contents of both strings are equal.
     * >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
     *
     * Examples:
     * `MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal`
     * `MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal`
     * `MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal`
     * `MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'`
     * `MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal`
     *
     * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
     * `MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'`
     * `MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'`
     *
     * Hash: 0x1E34710ECD4AB0EB | Since: 323
     */
    function compareStrings(str1, str2, matchCase, maxLength) {
        return CompareStrings(str1, str2, matchCase, maxLength);
    }
    misc.compareStrings = compareStrings;
    /**
     * No comment provided
     *
     * Hash: 0x213AEB2B90CBA7AC | Since: 877
     */
    function copyScriptStruct(size) {
        return CopyMemory(size);
    }
    misc.copyScriptStruct = copyScriptStruct;
    /**
     * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
     *
     * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
     *
     * Side Note 2: I say it breaks as if you call this proper,
     * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
     * =====================================================
     *
     * Hash: 0x3F892CAF67444AE7 | Since: 323
     */
    function createIncident(dispatchService, pos, numUnits, radius) {
        return CreateIncident(dispatchService, pos.x, pos.y, pos.z, numUnits, radius, undefined, undefined);
    }
    misc.createIncident = createIncident;
    /**
     * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
     *
     * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
     *
     * Side Note 2: I say it breaks as if you call this proper,
     * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
     * =====================================================
     *
     * Hash: 0x05983472F0494E60 | Since: 323
     */
    function createIncidentWithEntity(dispatchService, ped, numUnits, radius) {
        return CreateIncidentWithEntity(dispatchService, ped, numUnits, radius, undefined, undefined);
    }
    misc.createIncidentWithEntity = createIncidentWithEntity;
    /**
     * Delete an incident with a given id.
     *
     * =======================================================
     * Correction, I have change this to int, instead of int*
     * as it doesn't use a pointer to the createdIncident.
     * If you try it you will crash (or) freeze.
     * =======================================================
     *
     * Hash: 0x556C1AA270D5A207 | Since: 323
     */
    function deleteIncident(incidentId) {
        DeleteIncident(incidentId);
    }
    misc.deleteIncident = deleteIncident;
    /**
     * No comment provided
     *
     * Hash: 0xDC518000E39DAE1F | Since: 323
     */
    function deleteStuntJump() {
        DeleteStuntJump(0);
    }
    misc.deleteStuntJump = deleteStuntJump;
    /**
     * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
     *
     * Hash: 0xC8535819C450EBA8 | Since: 323
     */
    function disableHospitalRestart(hospitalIndex, toggle) {
        DisableHospitalRestart(hospitalIndex, toggle);
    }
    misc.disableHospitalRestart = disableHospitalRestart;
    /**
     * Disables the spawn point at the police house on the specified index.
     *
     * policeIndex: The police house index.
     * toggle: true to enable the spawn point, false to disable.
     *
     * - Nacorpio
     *
     * Hash: 0x23285DED6EBD7EA3 | Since: 323
     */
    function disablePoliceRestart(policeIndex, toggle) {
        DisablePoliceRestart(policeIndex, toggle);
    }
    misc.disablePoliceRestart = disablePoliceRestart;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x23227DF0B2115469 | Since: 323
     */
    function disableScreenDimmingThisFrame() {
        Citizen.invokeNative('0x23227DF0B2115469');
    }
    misc.disableScreenDimmingThisFrame = disableScreenDimmingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xA5272EBEDD4747F6 | Since: 323
     */
    function disableStuntJumpSet() {
        DisableStuntJumpSet(0);
    }
    misc.disableStuntJumpSet = disableStuntJumpSet;
    /**
     * `sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.`
     *
     * NOTE: windowTitle uses text labels, and an invalid value will display nothing.
     *
     * www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
     *
     * windowTitle's
     * -----------------
     * CELL_EMAIL_BOD  =   "Enter your Eyefind message"
     * CELL_EMAIL_BODE =   "Message too long. Try again"
     * CELL_EMAIL_BODF    =   "Forbidden message. Try again"
     * CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
     * CELL_EMAIL_SODE =   "Subject too long. Try again"
     * CELL_EMAIL_SODF    =   "Forbidden text. Try again"
     * CELL_EMASH_BOD   =   "Enter your Eyefind message"
     * CELL_EMASH_BODE =   "Message too long. Try again"
     * CELL_EMASH_BODF    =   "Forbidden message. Try again"
     * CELL_EMASH_SOD    =   "Enter your Eyefind subject"
     * CELL_EMASH_SODE =   "Subject too long. Try again"
     * CELL_EMASH_SODF    =   "Forbidden Text. Try again"
     * FMMC_KEY_TIP10   =   "Enter Synopsis"
     * FMMC_KEY_TIP12  =   "Enter Custom Team Name"
     * FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
     * FMMC_KEY_TIP12N  =   "Custom Team Name"
     * FMMC_KEY_TIP8 =   "Enter Message"
     * FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
     * FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
     * FMMC_KEY_TIP8S  =   "Enter Message"
     * FMMC_KEY_TIP9    =   "Enter Outfit Name"
     * FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
     * FMMC_KEY_TIP9N  =   "Outfit Name"
     * PM_NAME_CHALL  =   "Enter Challenge Name"
     *
     * Hash: 0x00DC833F2568DBF6 | Since: 323
     */
    function displayOnscreenKeyboard(windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength) {
        DisplayOnscreenKeyboard(0, windowTitle, undefined, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
    }
    misc.displayOnscreenKeyboard = displayOnscreenKeyboard;
    /**
     * No comment provided
     *
     * Hash: 0xCA78CFA0366592FE | Since: 323
     */
    function displayOnscreenKeyboardWithLongerInitialString(windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength) {
        return DisplayOnscreenKeyboardWithLongerInitialString(0, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
    }
    misc.displayOnscreenKeyboardWithLongerInitialString = displayOnscreenKeyboardWithLongerInitialString;
    /**
     * No comment provided
     *
     * Hash: 0x1327E2FE9746BAEE | Since: 323
     */
    function doesPopMultiplierAreaExist(id) {
        return DoesPopMultiplierAreaExist(id);
    }
    misc.doesPopMultiplierAreaExist = doesPopMultiplierAreaExist;
    /**
     * No comment provided
     *
     * Hash: 0x171BAFB3C60389F4 | Since: 791
     */
    function doesPopMultiplierSphereExist(id) {
        return DoesPopMultiplierSphereExist(id);
    }
    misc.doesPopMultiplierSphereExist = doesPopMultiplierSphereExist;
    /**
     * No comment provided
     *
     * Hash: 0x50EEAAD86232EE55 | Since: 323
     */
    function doAutoSave() {
        DoAutoSave();
    }
    misc.doAutoSave = doAutoSave;
    /**
     * https://alloc8or.re/gta5/doc/enums/DispatchType.txt
     *
     * Hash: 0xDC0F817884CDD856 | Since: 323
     */
    function enableDispatchService(dispatchService, toggle) {
        EnableDispatchService(dispatchService, toggle);
    }
    misc.enableDispatchService = enableDispatchService;
    /**
     * No comment provided
     *
     * Hash: 0xE369A5783B866016 | Since: 323
     */
    function enableStuntJumpSet() {
        EnableStuntJumpSet(0);
    }
    misc.enableStuntJumpSet = enableStuntJumpSet;
    /**
     * Makes the ped jump around like they're in a tennis match
     *
     * Hash: 0x28A04B411933F8A6 | Since: 323
     */
    function enableTennisMode(ped, toggle) {
        EnableTennisMode(ped, toggle, false);
    }
    misc.enableTennisMode = enableTennisMode;
    /**
     * No comment provided
     *
     * Hash: 0xA23E821FBDF8A5F2 | Since: 323
     */
    function endReplayStats() {
        EndReplayStats();
    }
    misc.endReplayStats = endReplayStats;
    /**
     * Finds a position ahead of the player by predicting the players next actions.
     * The positions match path finding node positions.
     * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
     *
     * Hash: 0x6874E2190B0C1972 | Since: 323
     */
    function findSpawnPointInDirection(pos, fwdVecX, fwdVecY, fwdVecZ, distance) {
        return FindSpawnPointInDirection(pos.x, pos.y, pos.z, fwdVecX, fwdVecY, fwdVecZ, distance);
    }
    misc.findSpawnPointInDirection = findSpawnPointInDirection;
    /**
     * Sets the localplayer playerinfo state back to playing (State 0)
     *
     * States are:
     * -1: "Invalid"
     * 0: "Playing"
     * 1: "Died"
     * 2: "Arrested"
     * 3: "Failed Mission"
     * 4: "Left Game"
     * 5: "Respawn"
     * 6: "In MP Cutscene"
     *
     * Hash: 0xC0AA53F866B3134D | Since: 323
     */
    function forceGameStatePlaying() {
        ForceGameStatePlaying();
    }
    misc.forceGameStatePlaying = forceGameStatePlaying;
    /**
     * creates single lightning+thunder at random position
     *
     * Hash: 0xF6062E089251C898 | Since: 323
     */
    function forceLightningFlash() {
        ForceLightningFlash();
    }
    misc.forceLightningFlash = forceLightningFlash;
    /**
     * No comment provided
     *
     * Hash: 0x8B3CA62B1EF19B62 | Since: 323
     */
    function getAllocatedStackSize() {
        return GetAllocatedStackSize();
    }
    misc.getAllocatedStackSize = getAllocatedStackSize;
    /**
     * No comment provided
     *
     * Hash: 0x186FC4BE848E1C92 | Since: 323
     */
    function getAngleBetween2dVectors(x1, y1, x2, y2) {
        return GetAngleBetween2dVectors(x1, y1, x2, y2);
    }
    misc.getAngleBetween2dVectors = getAngleBetween2dVectors;
    /**
     * No comment provided
     *
     * Hash: 0xB335F761606DB47C | Since: 323
     */
    function getBaseElementLocationFromMetadataBlock() {
        return GetBaseElementMetadata(undefined, false);
    }
    misc.getBaseElementLocationFromMetadataBlock = getBaseElementLocationFromMetadataBlock;
    /**
     * Returns value of the '-benchmarkIterations' command line option.
     *
     * Hash: 0x4750FC27570311EC | Since: 323
     */
    function getBenchmarkIterations() {
        return GetBenchmarkIterationsFromCommandLine();
    }
    misc.getBenchmarkIterations = getBenchmarkIterations;
    /**
     * Returns value of the '-benchmarkPass' command line option.
     *
     * Hash: 0x1B2366C3F2A5C8DF | Since: 323
     */
    function getBenchmarkPass() {
        return GetBenchmarkPassFromCommandLine();
    }
    misc.getBenchmarkPass = getBenchmarkPass;
    /**
     * No comment provided
     *
     * Hash: 0x53158863FCC0893A | Since: 323
     */
    function getBitsInRange(_var, rangeStart, rangeEnd) {
        return GetBitsInRange(_var, rangeStart, rangeEnd);
    }
    misc.getBitsInRange = getBitsInRange;
    /**
     * No comment provided
     *
     * Hash: 0xD10282B6E3751BA0 | Since: 323
     */
    function getCityDensity() {
        return Citizen.invokeNative('0xD10282B6E3751BA0');
    }
    misc.getCityDensity = getCityDensity;
    /**
     * clamp: sets whether the product should be clamped between the given coordinates
     *
     * Hash: 0x21C235BC64831E5A | Since: 323
     */
    function getClosestPointOnLine(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp) {
        return new Vector3(Citizen.invokeNative('0x21C235BC64831E5A', x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp));
    }
    misc.getClosestPointOnLine = getClosestPointOnLine;
    /**
     * No comment provided
     *
     * Hash: 0x20AC25E781AE4A84 | Since: 323
     */
    function getCloudsAlpha() {
        return GetCloudHatOpacity();
    }
    misc.getCloudsAlpha = getCloudsAlpha;
    /**
     * No comment provided
     *
     * Hash: 0xECF041186C5A94DC | Since: 2612
     */
    function getContentIdIndex(contentId) {
        if (typeof contentId === 'string')
            contentId = misc.getHashKey(contentId);
        return Citizen.invokeNative('0xECF041186C5A94DC', contentId);
    }
    misc.getContentIdIndex = getContentIdIndex;
    /**
     * Returns pointer to an empty string.
     *
     * Hash: 0x24DA7D7667FD7B09 | Since: 323
     */
    function getContentToLoad() {
        return GetGlobalCharBuffer();
    }
    misc.getContentToLoad = getContentToLoad;
    /**
     * No comment provided
     *
     * Hash: 0x3DA8C28346B62CED | Since: 2802
     */
    function getCoordsOfProjectileTypeInAngledArea(vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace, weaponType, bIsPlayer) {
        if (typeof weaponType === 'string')
            weaponType = misc.getHashKey(weaponType);
        return Citizen.invokeNative('0x3DA8C28346B62CED', vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace, weaponType, bIsPlayer);
    }
    misc.getCoordsOfProjectileTypeInAngledArea = getCoordsOfProjectileTypeInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x8D7A43EC6A5FEA45 | Since: 323
     */
    function getCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer) {
        if (typeof projectileHash === 'string')
            projectileHash = misc.getHashKey(projectileHash);
        return GetCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer);
    }
    misc.getCoordsOfProjectileTypeInArea = getCoordsOfProjectileTypeInArea;
    /**
     * No comment provided
     *
     * Hash: 0xDFB4138EEFED7B81 | Since: 323
     */
    function getCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance, false);
    }
    misc.getCoordsOfProjectileTypeWithinDistance = getCoordsOfProjectileTypeWithinDistance;
    /**
     * No comment provided
     *
     * Hash: 0xF3BBE884A14BB413 | Since: 323
     */
    function getCurrWeatherState() {
        return GetWeatherTypeTransition();
    }
    misc.getCurrWeatherState = getCurrWeatherState;
    /**
     * Returns the distance between two three-dimensional points, optionally ignoring the Z values.
     * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
     *
     * `Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.`
     *
     * Hash: 0xF1B760881820C952 | Since: 323
     */
    function getDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ) {
        return GetDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ);
    }
    misc.getDistanceBetweenCoords = getDistanceBetweenCoords;
    /**
     * No comment provided
     *
     * Hash: 0x4C9296CBCD1B971E | Since: 323
     */
    function getFakeWantedLevel() {
        return GetFakeWantedLevel();
    }
    misc.getFakeWantedLevel = getFakeWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0xFC8202EFC642E6F2 | Since: 323
     */
    function getFrameCount() {
        return GetFrameCount();
    }
    misc.getFrameCount = getFrameCount;
    /**
     * No comment provided
     *
     * Hash: 0x15C40837039FFAF7 | Since: 323
     */
    function getFrameTime() {
        return GetFrameTime();
    }
    misc.getFrameTime = getFrameTime;
    /**
     * No comment provided
     *
     * Hash: 0x9CD27B0045628463 | Since: 323
     */
    function getGameTimer() {
        return GetGameTimer();
    }
    misc.getGameTimer = getGameTimer;
    /**
     * No comment provided
     *
     * Hash: 0x8BDC7BFC57A81E76 | Since: 323
     */
    function getGroundZAndNormalFor3dCoord(pos) {
        return GetGroundZAndNormalFor3dCoord(pos.x, pos.y, pos.z);
    }
    misc.getGroundZAndNormalFor3dCoord = getGroundZAndNormalFor3dCoord;
    /**
     * No comment provided
     *
     * Hash: 0x9E82F0F362881B29 | Since: 505
     */
    function getGroundZExcludingObjectsFor3dCoord(pos) {
        return GetGroundZExcludingObjectsFor3dCoord(pos.x, pos.y, pos.z, false, false);
    }
    misc.getGroundZExcludingObjectsFor3dCoord = getGroundZExcludingObjectsFor3dCoord;
    /**
     * Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
     *
     * x: Position on the X-axis to get ground elevation at.
     * y: Position on the Y-axis to get ground elevation at.
     * z: Position on the Z-axis to get ground elevation at.
     * groundZ: The ground elevation at the specified position.
     * ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket
     *
     * Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
     *
     * Hash: 0xC906A7DAB05C8D2B | Since: 323
     */
    function getGroundZFor3dCoord(pos, ignoreWater) {
        return GetGroundZFor3dCoord(pos.x, pos.y, pos.z, ignoreWater, false);
    }
    misc.getGroundZFor3dCoord = getGroundZFor3dCoord;
    /**
     * This native converts its past string to hash. It is hashed using jenkins one at a time method.
     *
     * Hash: 0xD24D37CC275948CC | Since: 323
     */
    function getHashKey(_string) {
        return GetHashKey(_string);
    }
    misc.getHashKey = getHashKey;
    /**
     * dx = x1 - x2
     * dy = y1 - y2
     *
     * Hash: 0x2FFB6B224F4B2926 | Since: 323
     */
    function getHeadingFromVector2d(dx, dy) {
        return GetHeadingFromVector2d(dx, dy);
    }
    misc.getHeadingFromVector2d = getHeadingFromVector2d;
    /**
     * No comment provided
     *
     * Hash: 0xCBAD6729F7B1F4FC | Since: 323
     */
    function getIndexOfCurrentLevel() {
        return GetIndexOfCurrentLevel();
    }
    misc.getIndexOfCurrentLevel = getIndexOfCurrentLevel;
    /**
     * Returns true if profile setting 208 is equal to 0.
     *
     * Hash: 0x6E04F06094C87047 | Since: 323
     */
    function getIsAutoSaveOff() {
        return GetIsAutoSaveOff();
    }
    misc.getIsAutoSaveOff = getIsAutoSaveOff;
    /**
     * Although we don't have a jenkins hash for this one, the name is 100% confirmed.
     *
     * Hash: 0x9689123E3F213AA5 | Since: 323
     */
    function getIsPlayerInAnimalForm() {
        return GetIsPlayerInAnimalForm();
    }
    misc.getIsPlayerInAnimalForm = getIsPlayerInAnimalForm;
    /**
     * No comment provided
     *
     * Hash: 0xF56DFB7B61BE7276 | Since: 323
     */
    function getLinePlaneIntersection() {
        return GetLinePlaneIntersection(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    misc.getLinePlaneIntersection = getLinePlaneIntersection;
    /**
     * No comment provided
     *
     * Hash: 0xA33CDCCDA663159E | Since: 323
     */
    function getMissionFlag() {
        return GetMissionFlag();
    }
    misc.getMissionFlag = getMissionFlag;
    /**
     * Gets the dimensions of a model.
     *
     * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
     *
     * `Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);`
     *
     * Hash: 0x03E8D3D5F549087A | Since: 323
     */
    function getModelDimensions(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetModelDimensions(modelHash);
    }
    misc.getModelDimensions = getModelDimensions;
    /**
     * Returns weather name hash
     *
     * Hash: 0x711327CD09C8F162 | Since: 323
     */
    function getNextWeatherTypeHashName() {
        return GetNextWeatherTypeHashName();
    }
    misc.getNextWeatherTypeHashName = getNextWeatherTypeHashName;
    /**
     * No comment provided
     *
     * Hash: 0xFEAD16FC8F9DFC0F | Since: 323
     */
    function getNumberOfFreeStacksOfThisSize(stackSize) {
        return GetNumberOfFreeStacksOfThisSize(stackSize);
    }
    misc.getNumberOfFreeStacksOfThisSize = getNumberOfFreeStacksOfThisSize;
    /**
     * No comment provided
     *
     * Hash: 0xEB4A0C2D56441717 | Since: 323
     */
    function getNumberResourcesAllocatedToWantedLevel(dispatchService) {
        return GetNumDispatchedUnitsForPlayer(dispatchService);
    }
    misc.getNumberResourcesAllocatedToWantedLevel = getNumberResourcesAllocatedToWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x996DD1E1E02F1008 | Since: 323
     */
    function getNumSuccessfulStuntJumps() {
        return GetNumSuccessfulStuntJumps();
    }
    misc.getNumSuccessfulStuntJumps = getNumSuccessfulStuntJumps;
    /**
     * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
     *
     * Hash: 0x8362B09B91893647 | Since: 323
     */
    function getOnscreenKeyboardResult() {
        return GetOnscreenKeyboardResult();
    }
    misc.getOnscreenKeyboardResult = getOnscreenKeyboardResult;
    /**
     * No comment provided
     *
     * Hash: 0xA0AD167E4B39D9A2 | Since: 2189
     */
    function getPointAreaOverlap() {
        return Citizen.invokeNative('0xA0AD167E4B39D9A2', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    misc.getPointAreaOverlap = getPointAreaOverlap;
    /**
     * Returns current weather name hash
     *
     * Hash: 0x564B884A05EC45A3 | Since: 323
     */
    function getPrevWeatherTypeHashName() {
        return GetPrevWeatherTypeHashName();
    }
    misc.getPrevWeatherTypeHashName = getPrevWeatherTypeHashName;
    /**
     * No comment provided
     *
     * Hash: 0xC488FF2356EA7791 | Since: 323
     */
    function getProfileSetting(profileSetting) {
        return GetProfileSetting(profileSetting);
    }
    misc.getProfileSetting = getProfileSetting;
    /**
     * No comment provided
     *
     * Hash: 0x82FDE6A57EE4EE44 | Since: 323
     */
    function getProjectileOfProjectileTypeWithinDistance(ped, weaponHash, distance) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetProjectileNearPed(ped, weaponHash, distance, false);
    }
    misc.getProjectileOfProjectileTypeWithinDistance = getProjectileOfProjectileTypeWithinDistance;
    /**
     * No comment provided
     *
     * Hash: 0x96695E368AD855F3 | Since: 323
     */
    function getRainLevel() {
        return GetRainLevel();
    }
    misc.getRainLevel = getRainLevel;
    /**
     * No comment provided
     *
     * Hash: 0xD2D57F1D764117B1 | Since: 323
     */
    function getRandomEventFlag() {
        return GetRandomEventFlag();
    }
    misc.getRandomEventFlag = getRandomEventFlag;
    /**
     * No comment provided
     *
     * Hash: 0x313CE5879CEB6FCD | Since: 323
     */
    function getRandomFloatInRange(startRange, endRange) {
        return GetRandomFloatInRange(startRange, endRange);
    }
    misc.getRandomFloatInRange = getRandomFloatInRange;
    /**
     * No comment provided
     *
     * Hash: 0xD53343AA4FB7DD28 | Since: 323
     */
    function getRandomIntInRange(startRange, endRange) {
        return GetRandomIntInRange(startRange, endRange);
    }
    misc.getRandomIntInRange = getRandomIntInRange;
    /**
     * No comment provided
     *
     * Hash: 0xF2D49816A804D134 | Since: 1734
     */
    function getRandomMwcIntInRange(startRange, endRange) {
        return GetRandomIntInRange2(startRange, endRange);
    }
    misc.getRandomMwcIntInRange = getRandomMwcIntInRange;
    /**
     * returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
     *
     * Hash: 0x7F8F6405F4777AF6 | Since: 323
     */
    function getRatioOfClosestPointOnLine(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp) {
        return Citizen.invokeNative('0x7F8F6405F4777AF6', x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
    }
    misc.getRatioOfClosestPointOnLine = getRatioOfClosestPointOnLine;
    /**
     * GET_GAME_TIMER() / 1000
     *
     * Hash: 0x3F60413F5DF65748 | Since: 2612
     */
    function getRealWorldTime() {
        return Citizen.invokeNative('0x3F60413F5DF65748');
    }
    misc.getRealWorldTime = getRealWorldTime;
    /**
     * No comment provided
     *
     * Hash: 0x8098C8D6597AAE18 | Since: 323
     */
    function getReplayStatAtIndex(index) {
        return GetReplayStatAtIndex(index);
    }
    misc.getReplayStatAtIndex = getReplayStatAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0xDC9274A7EF6B2867 | Since: 323
     */
    function getReplayStatCount() {
        return GetReplayStatCount();
    }
    misc.getReplayStatCount = getReplayStatCount;
    /**
     * No comment provided
     *
     * Hash: 0x5B1F2E327B6B6FE1 | Since: 323
     */
    function getReplayStatMissionId() {
        return Citizen.invokeNative('0x5B1F2E327B6B6FE1');
    }
    misc.getReplayStatMissionId = getReplayStatMissionId;
    /**
     * No comment provided
     *
     * Hash: 0x2B626A0150E4D449 | Since: 323
     */
    function getReplayStatMissionType() {
        return GetReplayStatMissionType();
    }
    misc.getReplayStatMissionType = getReplayStatMissionType;
    /**
     * No comment provided
     *
     * Hash: 0xA4A0065E39C9F25C | Since: 323
     */
    function getSaveHouseDetailsAfterSuccessfulLoad() {
        return Citizen.invokeNative('0xA4A0065E39C9F25C');
    }
    misc.getSaveHouseDetailsAfterSuccessfulLoad = getSaveHouseDetailsAfterSuccessfulLoad;
    /**
     * No comment provided
     *
     * Hash: 0xA09F896CE912481F | Since: 323
     */
    function getSizeOfSaveData() {
        return GetSizeOfSaveData(false);
    }
    misc.getSizeOfSaveData = getSizeOfSaveData;
    /**
     * No comment provided
     *
     * Hash: 0xC5868A966E5BE3AE | Since: 323
     */
    function getSnowLevel() {
        return GetSnowLevel();
    }
    misc.getSnowLevel = getSnowLevel;
    /**
     * No comment provided
     *
     * Hash: 0x397BAA01068BAA96 | Since: 323
     */
    function getStatusOfManualSave() {
        return Citizen.invokeNative('0x397BAA01068BAA96');
    }
    misc.getStatusOfManualSave = getStatusOfManualSave;
    /**
     * No comment provided
     *
     * Hash: 0x2B5E102E4A42F2BF | Since: 323
     */
    function getStatusOfMissionRepeatSave() {
        return GetStatusOfMissionRepeatSave();
    }
    misc.getStatusOfMissionRepeatSave = getStatusOfMissionRepeatSave;
    /**
     * No comment provided
     *
     * Hash: 0xE599A503B3837E1B | Since: 323
     */
    function getSystemTimeStep() {
        return GetBenchmarkTime();
    }
    misc.getSystemTimeStep = getSystemTimeStep;
    /**
     * No comment provided
     *
     * Hash: 0x19BFED045C647C49 | Since: 323
     */
    function getTennisSwingAnimCanBeInterrupted(ped) {
        return Citizen.invokeNative('0x19BFED045C647C49', ped);
    }
    misc.getTennisSwingAnimCanBeInterrupted = getTennisSwingAnimCanBeInterrupted;
    /**
     * No comment provided
     *
     * Hash: 0x17DF68D720AA77F8 | Since: 323
     */
    function getTennisSwingAnimComplete(ped) {
        return GetTennisSwingAnimComplete(ped);
    }
    misc.getTennisSwingAnimComplete = getTennisSwingAnimComplete;
    /**
     * No comment provided
     *
     * Hash: 0xE95B0C7D5BA3B96B | Since: 323
     */
    function getTennisSwingAnimSwung(ped) {
        return Citizen.invokeNative('0xE95B0C7D5BA3B96B', ped);
    }
    misc.getTennisSwingAnimSwung = getTennisSwingAnimSwung;
    /**
     * No comment provided
     *
     * Hash: 0x6856EC3D35C81EA4 | Since: 323
     */
    function getTotalSuccessfulStuntJumps() {
        return GetTotalSuccessfulStuntJumps();
    }
    misc.getTotalSuccessfulStuntJumps = getTotalSuccessfulStuntJumps;
    /**
     * No comment provided
     *
     * Hash: 0x1F400FEF721170DA | Since: 323
     */
    function getWindDirection() {
        return new Vector3(GetWindDirection());
    }
    misc.getWindDirection = getWindDirection;
    /**
     * No comment provided
     *
     * Hash: 0xA8CF1CC0AFCD3F12 | Since: 323
     */
    function getWindSpeed() {
        return GetWindSpeed();
    }
    misc.getWindSpeed = getWindSpeed;
    /**
     * Hardcoded to always return true.
     *
     * Hash: 0x14832BF2ABA53FC5 | Since: 323
     */
    function hasAsyncInstallFinished() {
        return HasAsyncInstallFinished();
    }
    misc.hasAsyncInstallFinished = hasAsyncInstallFinished;
    /**
     * p3 - possibly radius?
     *
     * Hash: 0x9870ACFB89A90995 | Since: 323
     */
    function hasBulletImpactedInArea(pos) {
        return HasBulletImpactedInArea(pos.x, pos.y, pos.z, 0, false, false);
    }
    misc.hasBulletImpactedInArea = hasBulletImpactedInArea;
    /**
     * No comment provided
     *
     * Hash: 0xDC8C5D7CFEAB8394 | Since: 323
     */
    function hasBulletImpactedInBox() {
        return HasBulletImpactedInBox(0, 0, 0, 0, 0, 0, false, false);
    }
    misc.hasBulletImpactedInBox = hasBulletImpactedInBox;
    /**
     * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
     *
     * INT_SCORES_SCORTED was a hash collision
     *
     * Hash: 0x071E2A839DE82D90 | Since: 323
     */
    function hasCheatWithHashBeenActivated(hash, amount) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return HasButtonCombinationJustBeenEntered(hash, amount);
    }
    misc.hasCheatWithHashBeenActivated = hasCheatWithHashBeenActivated;
    /**
     * No comment provided
     *
     * Hash: 0x2107A3773771186D | Since: 323
     */
    function hasCodeRequestedAutosave() {
        return Citizen.invokeNative('0x2107A3773771186D');
    }
    misc.hasCodeRequestedAutosave = hasCodeRequestedAutosave;
    /**
     * No comment provided
     *
     * Hash: 0x6FDDF453C0C756EC | Since: 323
     */
    function hasGameInstalledThisSession() {
        return Citizen.invokeNative('0x6FDDF453C0C756EC');
    }
    misc.hasGameInstalledThisSession = hasGameInstalledThisSession;
    /**
     * Get inputted "Cheat code", for example:
     *
     * while (TRUE)
     * {
     * `if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))`
     * {
     * // Do something.
     * }
     * `SYSTEM::WAIT(0);`
     * }
     *
     * Calling this will also set the last saved string hash to zero.
     *
     *
     * Hash: 0x557E43C447E700A8 | Since: 323
     */
    function hasPcCheatWithHashBeenActivated(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return HasCheatStringJustBeenEntered(hash);
    }
    misc.hasPcCheatWithHashBeenActivated = hasPcCheatWithHashBeenActivated;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0xE8B9C0EC9E183F35 | Since: 323
     */
    function hasResumedFromSuspend() {
        return HasResumedFromSuspend();
    }
    misc.hasResumedFromSuspend = hasResumedFromSuspend;
    /**
     * No comment provided
     *
     * Hash: 0x075F1D57402C93BA | Since: 323
     */
    function haveCreditsReachedEnd() {
        return HaveCreditsReachedEnd();
    }
    misc.haveCreditsReachedEnd = haveCreditsReachedEnd;
    /**
     * No comment provided
     *
     * Hash: 0xD642319C54AADEB6 | Since: 323
     */
    function haveReplayStatsBeenStored() {
        return Citizen.invokeNative('0xD642319C54AADEB6');
    }
    misc.haveReplayStatsBeenStored = haveReplayStatsBeenStored;
    /**
     * No comment provided
     *
     * Hash: 0x21FFB63D8C615361 | Since: 323
     */
    function ignoreNextRestart(toggle) {
        IgnoreNextRestart(toggle);
    }
    misc.ignoreNextRestart = ignoreNextRestart;
    /**
     * No comment provided
     *
     * Hash: 0x8D74E26F54B4E5C3 | Since: 323
     */
    function informCodeOfContentIdOfCurrentUgcMission() {
        Citizen.invokeNative('0x8D74E26F54B4E5C3', undefined);
    }
    misc.informCodeOfContentIdOfCurrentUgcMission = informCodeOfContentIdOfCurrentUgcMission;
    /**
     * No comment provided
     *
     * Hash: 0xA61B4DF533DCB56E | Since: 323
     */
    function isAreaOccupied() {
        return IsAreaOccupied(0, 0, 0, 0, 0, 0, false, false, false, false, false, undefined, false);
    }
    misc.isAreaOccupied = isAreaOccupied;
    /**
     * No comment provided
     *
     * Hash: 0x39455BF4F4F55186 | Since: 1868
     */
    function isAreaOccupiedSlow() {
        return Citizen.invokeNative('0x39455BF4F4F55186', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    misc.isAreaOccupiedSlow = isAreaOccupiedSlow;
    /**
     * Used to block some of the prostitute stuff due to laws in Australia.
     *
     * Hash: 0x9F1935CA1F724008 | Since: 323
     */
    function isAussieVersion() {
        return IsAussieVersion();
    }
    misc.isAussieVersion = isAussieVersion;
    /**
     * No comment provided
     *
     * Hash: 0x69240733738C19A0 | Since: 323
     */
    function isAutoSaveInProgress() {
        return IsAutoSaveInProgress();
    }
    misc.isAutoSaveInProgress = isAutoSaveInProgress;
    /**
     * For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     * Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
     *
     * Hash: 0x1A8B5F3C01E2B477 | Since: 323
     */
    function isBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer) {
        return IsBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer);
    }
    misc.isBulletInAngledArea = isBulletInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x3F2023999AD51C1F | Since: 323
     */
    function isBulletInArea(pos, radius, ownedByPlayer) {
        return IsBulletInArea(pos.x, pos.y, pos.z, radius, ownedByPlayer);
    }
    misc.isBulletInArea = isBulletInArea;
    /**
     * No comment provided
     *
     * Hash: 0xDE0F6D7450D37351 | Since: 323
     */
    function isBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer) {
        return IsBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer);
    }
    misc.isBulletInBox = isBulletInBox;
    /**
     * Returns true if command line option '-benchmark' is set.
     *
     * Hash: 0xA049A5BE0F04F2F8 | Since: 323
     */
    function isCommandlineEndUserBenchmark() {
        return IsCommandLineBenchmarkValueSet();
    }
    misc.isCommandlineEndUserBenchmark = isCommandlineEndUserBenchmark;
    /**
     * XBOX ONE
     *
     * Hash: 0x4D982ADB1978442D | Since: 323
     */
    function isDurangoVersion() {
        return IsDurangoVersion();
    }
    misc.isDurangoVersion = isDurangoVersion;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x7EA2B6AF97ECA6ED | Since: 323
     */
    function isFrontendFading() {
        return IsFrontendFading();
    }
    misc.isFrontendFading = isFrontendFading;
    /**
     * =======================================================
     * Correction, I have change this to int, instead of int*
     * as it doesn't use a pointer to the createdIncident.
     * If you try it you will crash (or) freeze.
     * =======================================================
     *
     * Hash: 0xC8BC6461E629BEAA | Since: 323
     */
    function isIncidentValid(incidentId) {
        return IsIncidentValid(incidentId);
    }
    misc.isIncidentValid = isIncidentValid;
    /**
     * No comment provided
     *
     * Hash: 0xB8C0BB75D8A77DB3 | Since: 2545
     */
    function isJapaneseVersion() {
        return IsJapaneseVersion();
    }
    misc.isJapaneseVersion = isJapaneseVersion;
    /**
     * No comment provided
     *
     * Hash: 0x8A75CE2956274ADD | Since: 323
     */
    function isMemoryCardInUse() {
        return IsMemoryCardInUse();
    }
    misc.isMemoryCardInUse = isMemoryCardInUse;
    /**
     * No comment provided
     *
     * Hash: 0x2B4A15E44DE0F478 | Since: 323
     */
    function isMinigameInProgress() {
        return IsMinigameInProgress();
    }
    misc.isMinigameInProgress = isMinigameInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x2FAA3A30BEC0F25D | Since: 323
     */
    function isNextWeatherType(weatherType) {
        return IsNextWeatherType(weatherType);
    }
    misc.isNextWeatherType = isNextWeatherType;
    /**
     * PS4
     *
     * Hash: 0xA72BC0B675B1519E | Since: 323
     */
    function isOrbisVersion() {
        return IsOrbisVersion();
    }
    misc.isOrbisVersion = isOrbisVersion;
    /**
     * No comment provided
     *
     * Hash: 0x48AF36444B965238 | Since: 323
     */
    function isPcVersion() {
        return IsPcVersion();
    }
    misc.isPcVersion = isPcVersion;
    /**
     * No comment provided
     *
     * Hash: 0xE54E209C35FFA18D | Since: 323
     */
    function isPointObscuredByAMissionEntity() {
        return IsPointObscuredByAMissionEntity(0, 0, 0, 0, 0, 0, undefined);
    }
    misc.isPointObscuredByAMissionEntity = isPointObscuredByAMissionEntity;
    /**
     * No comment provided
     *
     * Hash: 0x1312F4B242609CE3 | Since: 1290
     */
    function isPopMultiplierAreaNetworked(id) {
        return IsPopMultiplierAreaUnk(id);
    }
    misc.isPopMultiplierAreaNetworked = isPopMultiplierAreaNetworked;
    /**
     * `range`: The range, seems to not be very accurate during testing.
     * `p4`: Unknown, when set to true it seems to always return true no matter what I try.
     * `checkVehicle`: Check for any vehicles in that area.
     * `checkPeds`: Check for any peds in that area.
     * `ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
     * The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
     *
     * Returns true if there is anything in that location matching the provided parameters.
     *
     * Hash: 0xADCDE75E1C60F32D | Since: 323
     */
    function isPositionOccupied(pos, range, checkVehicles, checkPeds, ignoreEntity) {
        return IsPositionOccupied(pos.x, pos.y, pos.z, range, false, checkVehicles, checkPeds, false, false, ignoreEntity, false);
    }
    misc.isPositionOccupied = isPositionOccupied;
    /**
     * No comment provided
     *
     * Hash: 0x44F28F86433B10A9 | Since: 323
     */
    function isPrevWeatherType(weatherType) {
        return IsPrevWeatherType(weatherType);
    }
    misc.isPrevWeatherType = isPrevWeatherType;
    /**
     * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
     *
     * - Nacorpio
     *
     *
     * ownedByPlayer = only projectiles fired by the player will be detected.
     *
     * Hash: 0x5270A8FBC098C3F8 | Since: 323
     */
    function isProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer) {
        return IsProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer);
    }
    misc.isProjectileInArea = isProjectileInArea;
    /**
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0xF0BC12401061DEA0 | Since: 323
     */
    function isProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer) {
        return IsProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, undefined, ownedByPlayer);
    }
    misc.isProjectileTypeInAngledArea = isProjectileTypeInAngledArea;
    /**
     * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
     *
     * Hash: 0x2E0DC353342C4A6D | Since: 323
     */
    function isProjectileTypeInArea(x1, y1, z1, x2, y2, z2, _type, ownedByPlayer) {
        return IsProjectileTypeInArea(x1, y1, z1, x2, y2, z2, _type, ownedByPlayer);
    }
    misc.isProjectileTypeInArea = isProjectileTypeInArea;
    /**
     * No comment provided
     *
     * Hash: 0x34318593248C8FB2 | Since: 323
     */
    function isProjectileTypeWithinDistance(pos, projectileHash, radius, ownedByPlayer) {
        if (typeof projectileHash === 'string')
            projectileHash = misc.getHashKey(projectileHash);
        return IsProjectileTypeWithinDistance(pos.x, pos.y, pos.z, projectileHash, radius, ownedByPlayer);
    }
    misc.isProjectileTypeWithinDistance = isProjectileTypeWithinDistance;
    /**
     * PS5 (Prospero) version...
     *
     * Hash: 0x807ABE1AB65C24D2 | Since: 2612
     */
    function isProsperoVersion() {
        return Citizen.invokeNative('0x807ABE1AB65C24D2');
    }
    misc.isProsperoVersion = isProsperoVersion;
    /**
     * No comment provided
     *
     * Hash: 0xCCA1072C29D096C2 | Since: 323
     */
    function isPs3Version() {
        return IsPs3Version();
    }
    misc.isPs3Version = isPs3Version;
    /**
     * Xbox Series (Scarlett) version...
     *
     * Hash: 0xC545AB1CF97ABB34 | Since: 2612
     */
    function isScarlettVersion() {
        return Citizen.invokeNative('0xC545AB1CF97ABB34');
    }
    misc.isScarlettVersion = isScarlettVersion;
    /**
     * No comment provided
     *
     * Hash: 0xF911E695C1EB8518 | Since: 2612
     */
    function isScePlatform() {
        return Citizen.invokeNative('0xF911E695C1EB8518');
    }
    misc.isScePlatform = isScePlatform;
    /**
     * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
     *
     * Hash: 0xFEFCF11B01287125 | Since: 323
     */
    function isSniperBulletInArea(x1, y1, z1, x2, y2, z2) {
        return IsSniperBulletInArea(x1, y1, z1, x2, y2, z2);
    }
    misc.isSniperBulletInArea = isSniperBulletInArea;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x61A23B7EDA9BDA24 | Since: 323
     */
    function isSniperInverted() {
        return IsSniperInverted();
    }
    misc.isSniperInverted = isSniperInverted;
    /**
     * No comment provided
     *
     * Hash: 0x0A27B2B6282F7169 | Since: 2545
     */
    function isSteamVersion() {
        return IsSteamVersion();
    }
    misc.isSteamVersion = isSteamVersion;
    /**
     * No comment provided
     *
     * Hash: 0xF22B6C47C6EAB066 | Since: 323
     */
    function isStringNull(_string) {
        return IsStringNull(_string);
    }
    misc.isStringNull = isStringNull;
    /**
     * No comment provided
     *
     * Hash: 0xCA042B6957743895 | Since: 323
     */
    function isStringNullOrEmpty(_string) {
        return IsStringNullOrEmpty(_string);
    }
    misc.isStringNullOrEmpty = isStringNullOrEmpty;
    /**
     * No comment provided
     *
     * Hash: 0x7A3F19700A4D0525 | Since: 323
     */
    function isStuntJumpInProgress() {
        return IsStuntJumpInProgress();
    }
    misc.isStuntJumpInProgress = isStuntJumpInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x2272B0A1343129F4 | Since: 323
     */
    function isStuntJumpMessageShowing() {
        return IsStuntJumpMessageShowing();
    }
    misc.isStuntJumpMessageShowing = isStuntJumpMessageShowing;
    /**
     * No comment provided
     *
     * Hash: 0x5D5479D115290C3F | Since: 323
     */
    function isTennisMode(ped) {
        return IsTennisMode(ped);
    }
    misc.isTennisMode = isTennisMode;
    /**
     * No comment provided
     *
     * Hash: 0x7B30F65D7B710098 | Since: 323
     */
    function isThisAMinigameScript() {
        return IsThisAMinigameScript();
    }
    misc.isThisAMinigameScript = isThisAMinigameScript;
    /**
     * No comment provided
     *
     * Hash: 0xF6201B4DAF662A9D | Since: 323
     */
    function isXbox360Version() {
        return IsXbox360Version();
    }
    misc.isXbox360Version = isXbox360Version;
    /**
     * No comment provided
     *
     * Hash: 0x138679CA01E21F53 | Since: 2612
     */
    function isXboxPlatform() {
        return Citizen.invokeNative('0x138679CA01E21F53');
    }
    misc.isXboxPlatform = isXboxPlatform;
    /**
     * Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
     *
     * Hash: 0x3BBBD13E5041A79E | Since: 323
     */
    function landingScreenStartedEndUserBenchmark() {
        return LandingMenuIsActive();
    }
    misc.landingScreenStartedEndUserBenchmark = landingScreenStartedEndUserBenchmark;
    /**
     * The following cloudhats are useable:
     * altostratus
     * Cirrus
     * cirrocumulus
     * Clear 01
     * Cloudy 01
     * Contrails
     * Horizon
     * horizonband1
     * horizonband2
     * horizonband3
     * horsey
     * Nimbus
     * Puffs
     * RAIN
     * Snowy 01
     * Stormy 01
     * stratoscumulus
     * Stripey
     * shower
     * Wispy
     *
     *
     * Hash: 0xFC4842A34657BFCB | Since: 323
     */
    function loadCloudHat(name, transitionTime) {
        LoadCloudHat(name, transitionTime);
    }
    misc.loadCloudHat = loadCloudHat;
    /**
     * No comment provided
     *
     * Hash: 0x9243BAC96D64C050 | Since: 323
     */
    function networkSetScriptIsSafeForNetworkGame() {
        NetworkSetScriptIsSafeForNetworkGame();
    }
    misc.networkSetScriptIsSafeForNetworkGame = networkSetScriptIsSafeForNetworkGame;
    /**
     * p0 was always 2 in R* scripts.
     * Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
     *
     * Hash: 0x3ED1438C1F5C6612 | Since: 323
     */
    function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts() {
        NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(0);
    }
    misc.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts = nextOnscreenKeyboardResultWillDisplayUsingTheseFonts;
    /**
     * No comment provided
     *
     * Hash: 0xFA3FFB0EEBC288A3 | Since: 2060
     */
    function overrideFreezeFlags() {
        Citizen.invokeNative('0xFA3FFB0EEBC288A3', false);
    }
    misc.overrideFreezeFlags = overrideFreezeFlags;
    /**
     * No comment provided
     *
     * Hash: 0x1162EA8AE9D24EEA | Since: 323
     */
    function overrideSaveHouse() {
        return OverrideSaveHouse(false, 0, 0, 0, 0, false, 0, 0);
    }
    misc.overrideSaveHouse = overrideSaveHouse;
    /**
     * No comment provided
     *
     * Hash: 0x2C2B3493FBF51C71 | Since: 323
     */
    function pauseDeathArrestRestart(toggle) {
        PauseDeathArrestRestart(toggle);
    }
    misc.pauseDeathArrestRestart = pauseDeathArrestRestart;
    /**
     * No comment provided
     *
     * Hash: 0x8FA9C42FC5D7C64B | Since: 323
     */
    function playTennisDiveAnim(ped) {
        PlayTennisDiveAnim(ped, 0, 0, 0, 0, false);
    }
    misc.playTennisDiveAnim = playTennisDiveAnim;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xE266ED23311F24D4 | Since: 323
     */
    function playTennisSwingAnim(ped, animDict, animName) {
        PlayTennisSwingAnim(ped, animDict, animName, 0, 0, false);
    }
    misc.playTennisSwingAnim = playTennisSwingAnim;
    /**
     * Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
     *
     * Hash: 0xABB2FA71C83A1B72 | Since: 323
     */
    function plmGetConstrainedDurationMs() {
        return GetPowerSavingModeDuration();
    }
    misc.plmGetConstrainedDurationMs = plmGetConstrainedDurationMs;
    /**
     * aka "constrained"
     *
     * Hash: 0x684A41975F077262 | Since: 323
     */
    function plmIsInConstrainedMode() {
        return IsInPowerSavingMode();
    }
    misc.plmIsInConstrainedMode = plmIsInConstrainedMode;
    /**
     * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
     *
     * Hash: 0x7472BB270D7B4F3E | Since: 323
     */
    function populateNow() {
        PopulateNow();
    }
    misc.populateNow = populateNow;
    /**
     * No comment provided
     *
     * Hash: 0x11B56FBBF7224868 | Since: 323
     */
    function preloadCloudHat(name) {
        PreloadCloudHat(name);
    }
    misc.preloadCloudHat = preloadCloudHat;
    /**
     * No comment provided
     *
     * Hash: 0xE3D969D2785FFB5E | Since: 323
     */
    function preventArrestStateThisFrame() {
        Citizen.invokeNative('0xE3D969D2785FFB5E');
    }
    misc.preventArrestStateThisFrame = preventArrestStateThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x72DE52178C291CB5 | Since: 323
     */
    function queueMissionRepeatLoad() {
        return QueueMissionRepeatLoad();
    }
    misc.queueMissionRepeatLoad = queueMissionRepeatLoad;
    /**
     * Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
     * Returns 1 if the message isn't currently on screen
     *
     * Hash: 0x44A0BDC559B35F6E | Since: 323
     */
    function queueMissionRepeatSave() {
        return QueueMissionRepeatSave();
    }
    misc.queueMissionRepeatSave = queueMissionRepeatSave;
    /**
     * No comment provided
     *
     * Hash: 0xEB2104E905C6F2E9 | Since: 323
     */
    function queueMissionRepeatSaveForBenchmarkTest() {
        return Citizen.invokeNative('0xEB2104E905C6F2E9');
    }
    misc.queueMissionRepeatSaveForBenchmarkTest = queueMissionRepeatSaveForBenchmarkTest;
    /**
     * Exits the game and downloads a fresh social club update on next restart.
     *
     * Hash: 0xEB6891F03362FB12 | Since: 323
     */
    function quitGame() {
        QuitGame();
    }
    misc.quitGame = quitGame;
    /**
     * No comment provided
     *
     * Hash: 0xC8F4131414C835A1 | Since: 323
     */
    function registerBoolToSave(name) {
        return RegisterBoolToSave(name);
    }
    misc.registerBoolToSave = registerBoolToSave;
    /**
     * No comment provided
     *
     * Hash: 0x10C2FA78D0E128A1 | Since: 323
     */
    function registerEnumToSave(name) {
        return RegisterEnumToSave(name);
    }
    misc.registerEnumToSave = registerEnumToSave;
    /**
     * No comment provided
     *
     * Hash: 0x7CAEC29ECB5DFEBB | Since: 323
     */
    function registerFloatToSave(name) {
        return RegisterFloatToSave(name);
    }
    misc.registerFloatToSave = registerFloatToSave;
    /**
     * No comment provided
     *
     * Hash: 0xA735353C77334EA0 | Since: 323
     */
    function registerInt64ToSave(name) {
        return RegisterInt64ToSave(name);
    }
    misc.registerInt64ToSave = registerInt64ToSave;
    /**
     * No comment provided
     *
     * Hash: 0x34C9EE5986258415 | Since: 323
     */
    function registerIntToSave(name) {
        return RegisterIntToSave(name);
    }
    misc.registerIntToSave = registerIntToSave;
    /**
     * returns savehouseHandle
     *
     * Hash: 0xC0714D0A7EEECA54 | Since: 323
     */
    function registerSaveHouse(pos) {
        return RegisterSaveHouse(pos.x, pos.y, pos.z, 0, undefined, undefined, undefined);
    }
    misc.registerSaveHouse = registerSaveHouse;
    /**
     * `MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");`
     * `MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");`
     * `MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText");`
     *
     * Hash: 0x6F7794F28C6B2535 | Since: 323
     */
    function registerTextLabel15ToSave(name) {
        return RegisterTextLabelToSave2(name);
    }
    misc.registerTextLabel15ToSave = registerTextLabel15ToSave;
    /**
     * Only found 3 times in decompiled scripts.
     *
     * `MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");`
     * `MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");`
     * `MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A\/\*6\*\/], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"`
     *
     * Hash: 0x48F069265A0E4BEC | Since: 323
     */
    function registerTextLabel23ToSave(name) {
        return Citizen.invokeNative('0x48F069265A0E4BEC', name);
    }
    misc.registerTextLabel23ToSave = registerTextLabel23ToSave;
    /**
     * Only found 2 times in decompiled scripts.
     *
     * `MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0\/\*8\*\/], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"`
     * `MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A\/\*8\*\/], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"`
     *
     * Hash: 0x8269816F6CFD40F8 | Since: 323
     */
    function registerTextLabel31ToSave(name) {
        return Citizen.invokeNative('0x8269816F6CFD40F8', name);
    }
    misc.registerTextLabel31ToSave = registerTextLabel31ToSave;
    /**
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A\/\*16\*\/], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");`
     * `MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION");`
     *
     * Hash: 0xFAA457EF263E8763 | Since: 323
     */
    function registerTextLabel63ToSave(name) {
        return Citizen.invokeNative('0xFAA457EF263E8763', name);
    }
    misc.registerTextLabel63ToSave = registerTextLabel63ToSave;
    /**
     * No comment provided
     *
     * Hash: 0xEDB1232C5BEAE62F | Since: 323
     */
    function registerTextLabelToSave(name) {
        return RegisterTextLabelToSave(name);
    }
    misc.registerTextLabelToSave = registerTextLabelToSave;
    /**
     * No comment provided
     *
     * Hash: 0x264AC28B01B353A5 | Since: 323
     */
    function removeDispatchSpawnBlockingArea() {
        RemoveDispatchSpawnBlockingArea(0);
    }
    misc.removeDispatchSpawnBlockingArea = removeDispatchSpawnBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0xB129E447A2EDA4BF | Since: 323
     */
    function removePopMultiplierArea(id) {
        RemovePopMultiplierArea(id, false);
    }
    misc.removePopMultiplierArea = removePopMultiplierArea;
    /**
     * Removes population multiplier sphere
     *
     * Hash: 0xE6869BECDD8F2403 | Since: 323
     */
    function removePopMultiplierSphere(id) {
        RemovePopMultiplierSphere(id, false);
    }
    misc.removePopMultiplierSphere = removePopMultiplierSphere;
    /**
     * No comment provided
     *
     * Hash: 0x77A84429DD9F0A15 | Since: 323
     */
    function resetDispatchIdealSpawnDistance() {
        ResetDispatchIdealSpawnDistance();
    }
    misc.resetDispatchIdealSpawnDistance = resetDispatchIdealSpawnDistance;
    /**
     * No comment provided
     *
     * Hash: 0xAC7BFD5C1D83EA75 | Since: 323
     */
    function resetDispatchSpawnBlockingAreas() {
        ResetDispatchSpawnBlockingAreas();
    }
    misc.resetDispatchSpawnBlockingAreas = resetDispatchSpawnBlockingAreas;
    /**
     * No comment provided
     *
     * Hash: 0x5896F2BD5683A4E1 | Since: 1868
     */
    function resetDispatchSpawnLocation() {
        ResetDispatchSpawnLocation();
    }
    misc.resetDispatchSpawnLocation = resetDispatchSpawnLocation;
    /**
     * No comment provided
     *
     * Hash: 0xEB2DB0CAD13154B3 | Since: 323
     */
    function resetDispatchTimeBetweenSpawnAttempts() {
        ResetDispatchTimeBetweenSpawnAttempts(undefined);
    }
    misc.resetDispatchTimeBetweenSpawnAttempts = resetDispatchTimeBetweenSpawnAttempts;
    /**
     * No comment provided
     *
     * Hash: 0x437138B6A830166A | Since: 323
     */
    function resetEndUserBenchmark() {
        ResetBenchmarkRecording();
    }
    misc.resetEndUserBenchmark = resetEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0xD9F692D349249528 | Since: 323
     */
    function resetWantedResponseNumPedsToSpawn() {
        Citizen.invokeNative('0xD9F692D349249528');
    }
    misc.resetWantedResponseNumPedsToSpawn = resetWantedResponseNumPedsToSpawn;
    /**
     * In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
     *
     * Hash: 0xE574A662ACAEFBB1 | Since: 372
     */
    function restartGame() {
        RestartGame();
    }
    misc.restartGame = restartGame;
    /**
     * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
     *
     * Hash: 0x37DEB0AA183FB6D8 | Since: 323
     */
    function saveEndUserBenchmark() {
        SaveBenchmarkRecording();
    }
    misc.saveEndUserBenchmark = saveEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0x8EF5573A1F801A5C | Since: 323
     */
    function scriptRaceGetPlayerSplitTime(player) {
        return ScriptRaceGetPlayerSplitTime(player);
    }
    misc.scriptRaceGetPlayerSplitTime = scriptRaceGetPlayerSplitTime;
    /**
     * No comment provided
     *
     * Hash: 0x0A60017F841A54F2 | Since: 323
     */
    function scriptRaceInit() {
        ScriptRaceInit(0, 0, undefined, undefined);
    }
    misc.scriptRaceInit = scriptRaceInit;
    /**
     * No comment provided
     *
     * Hash: 0x1BB299305C3E8C13 | Since: 323
     */
    function scriptRacePlayerHitCheckpoint(player) {
        ScriptRacePlayerHitCheckpoint(player, undefined, undefined, undefined);
    }
    misc.scriptRacePlayerHitCheckpoint = scriptRacePlayerHitCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0x1FF6BF9A63E5757F | Since: 323
     */
    function scriptRaceShutdown() {
        ScriptRaceShutdown();
    }
    misc.scriptRaceShutdown = scriptRaceShutdown;
    /**
     * No comment provided
     *
     * Hash: 0x438822C279B73B93 | Since: 573
     */
    function setBeastJumpThisFrame(player) {
        SetBeastModeActive(player);
    }
    misc.setBeastJumpThisFrame = setBeastJumpThisFrame;
    /**
     * This sets bit [offset] of [address] to on.
     *
     * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
     *
     * Example:
     * `MISC::SET_BIT(&bitAddress, 1);`
     *
     * To check if this bit has been enabled:
     * `MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards`
     *
     * Please note, this method may assign a value to [address] when used.
     *
     * Hash: 0x933D6A9EEC1BACD0 | Since: 323
     */
    function setBit(offset) {
        return SetBit(offset);
    }
    misc.setBit = setBit;
    /**
     * No comment provided
     *
     * Hash: 0x8EF07E15701D61ED | Since: 323
     */
    function setBitsInRange(rangeStart, rangeEnd) {
        return SetBitsInRange(rangeStart, rangeEnd, 0);
    }
    misc.setBitsInRange = setBitsInRange;
    /**
     * No comment provided
     *
     * Hash: 0xF36199225D6D8C86 | Since: 323
     */
    function setCloudsAlpha(opacity) {
        SetCloudsAlpha(opacity);
    }
    misc.setCloudsAlpha = setCloudsAlpha;
    /**
     * No comment provided
     *
     * Hash: 0x02DEAAC8F8EA7FE7 | Since: 323
     */
    function setCloudSettingsOverride() {
        SetCloudSettingsOverride(undefined);
    }
    misc.setCloudSettingsOverride = setCloudSettingsOverride;
    /**
     * No comment provided
     *
     * Hash: 0x4B82FA6F2D624634 | Since: 2612
     */
    function setContentIdIndex(contentId, index) {
        if (typeof contentId === 'string')
            contentId = misc.getHashKey(contentId);
        Citizen.invokeNative('0x4B82FA6F2D624634', contentId, index);
    }
    misc.setContentIdIndex = setContentIdIndex;
    /**
     * No comment provided
     *
     * Hash: 0xB938B7E6D3C0620C | Since: 323
     */
    function setCreditsActive(toggle) {
        SetCreditsActive(toggle);
    }
    misc.setCreditsActive = setCreditsActive;
    /**
     * No comment provided
     *
     * Hash: 0xB51B9AB9EF81868C | Since: 323
     */
    function setCreditsFadeOutWithScreen(toggle) {
        Citizen.invokeNative('0xB51B9AB9EF81868C', toggle);
    }
    misc.setCreditsFadeOutWithScreen = setCreditsFadeOutWithScreen;
    /**
     * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
     *
     * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
     *
     * Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
     *
     * CLEAR  0x36A83D84
     * EXTRASUNNY  0x97AA0A79
     * CLOUDS  0x30FDAF5C
     * OVERCAST    0xBB898D2D
     * RAIN    0x54A69840
     * CLEARING    0x6DB1A50D
     * THUNDER 0xB677829F
     * SMOG    0x10DCF4B5
     * FOGGY   0xAE737644
     * XMAS    0xAAC9C895
     * SNOWLIGHT   0x23FB812B
     * BLIZZARD    0x27EA2814
     *
     *
     *
     *
     *
     * \/\* OLD INVALID INFO BELOW \*\/
     * Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
     *
     * If an invalid hash is specified for sourceWeather, the current weather type will be used.
     * If an invalid hash is specified for targetWeather, the next weather type will be used.
     * If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
     *
     * Hash: 0x578C752848ECFA0C | Since: 323
     */
    function setCurrWeatherState(weatherType1, weatherType2, percentWeather2) {
        if (typeof weatherType1 === 'string')
            weatherType1 = misc.getHashKey(weatherType1);
        if (typeof weatherType2 === 'string')
            weatherType2 = misc.getHashKey(weatherType2);
        SetWeatherTypeTransition(weatherType1, weatherType2, percentWeather2);
    }
    misc.setCurrWeatherState = setCurrWeatherState;
    /**
     * No comment provided
     *
     * Hash: 0x6FE601A64180D423 | Since: 323
     */
    function setDispatchIdealSpawnDistance(distance) {
        SetDispatchIdealSpawnDistance(distance);
    }
    misc.setDispatchIdealSpawnDistance = setDispatchIdealSpawnDistance;
    /**
     * No comment provided
     *
     * Hash: 0xD10F442036302D50 | Since: 323
     */
    function setDispatchSpawnLocation(pos) {
        SetDispatchSpawnLocation(pos.x, pos.y, pos.z);
    }
    misc.setDispatchSpawnLocation = setDispatchSpawnLocation;
    /**
     * No comment provided
     *
     * Hash: 0x44F7CBC1BEB3327D | Since: 323
     */
    function setDispatchTimeBetweenSpawnAttempts() {
        SetDispatchTimeBetweenSpawnAttempts(undefined, 0);
    }
    misc.setDispatchTimeBetweenSpawnAttempts = setDispatchTimeBetweenSpawnAttempts;
    /**
     * No comment provided
     *
     * Hash: 0x48838ED9937A15D1 | Since: 323
     */
    function setDispatchTimeBetweenSpawnAttemptsMultiplier() {
        SetDispatchTimeBetweenSpawnAttemptsMultiplier(undefined, 0);
    }
    misc.setDispatchTimeBetweenSpawnAttemptsMultiplier = setDispatchTimeBetweenSpawnAttemptsMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xA66C71C98D5F2CFB | Since: 323
     */
    function setExplosiveAmmoThisFrame(player) {
        SetExplosiveAmmoThisFrame(player);
    }
    misc.setExplosiveAmmoThisFrame = setExplosiveAmmoThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xFF1BED81BFDC0FE0 | Since: 323
     */
    function setExplosiveMeleeThisFrame(player) {
        SetExplosiveMeleeThisFrame(player);
    }
    misc.setExplosiveMeleeThisFrame = setExplosiveMeleeThisFrame;
    /**
     * Sets whether the game should fade in after the player dies or is arrested.
     *
     * Hash: 0xDA66D2796BA33F12 | Since: 323
     */
    function setFadeInAfterDeathArrest(toggle) {
        SetFadeInAfterDeathArrest(toggle);
    }
    misc.setFadeInAfterDeathArrest = setFadeInAfterDeathArrest;
    /**
     * No comment provided
     *
     * Hash: 0xF3D78F59DFE18D79 | Since: 323
     */
    function setFadeInAfterLoad(toggle) {
        SetFadeInAfterLoad(toggle);
    }
    misc.setFadeInAfterLoad = setFadeInAfterLoad;
    /**
     * Sets whether the game should fade out after the player is arrested.
     *
     * Hash: 0x1E0B4DC0D990A4E7 | Since: 323
     */
    function setFadeOutAfterArrest(toggle) {
        SetFadeOutAfterArrest(toggle);
    }
    misc.setFadeOutAfterArrest = setFadeOutAfterArrest;
    /**
     * Sets whether the game should fade out after the player dies.
     *
     * Hash: 0x4A18E01DF2C87B86 | Since: 323
     */
    function setFadeOutAfterDeath(toggle) {
        SetFadeOutAfterDeath(toggle);
    }
    misc.setFadeOutAfterDeath = setFadeOutAfterDeath;
    /**
     * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
     *
     * Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
     *
     * Hash: 0x1454F2448DE30163 | Since: 323
     */
    function setFakeWantedLevel(fakeWantedLevel) {
        SetFakeWantedLevel(fakeWantedLevel);
    }
    misc.setFakeWantedLevel = setFakeWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x11879CDD803D30F4 | Since: 323
     */
    function setFireAmmoThisFrame(player) {
        SetFireAmmoThisFrame(player);
    }
    misc.setFireAmmoThisFrame = setFireAmmoThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xA1183BCFEE0F93D1 | Since: 1180
     */
    function setForcedJumpThisFrame(player) {
        SetForcePlayerToJump(player);
    }
    misc.setForcedJumpThisFrame = setForcedJumpThisFrame;
    /**
     * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
     *
     * Hash: 0x577D1284D6873711 | Since: 323
     */
    function setGamePaused(toggle) {
        SetGamePaused(toggle);
    }
    misc.setGamePaused = setGamePaused;
    /**
     * level can be from 0 to 3
     * 0: 9.8 - normal
     * 1: 2.4 - low
     * 2: 0.1 - very low
     * 3: 0.0 - off
     *
     * Hash: 0x740E14FAD5842351 | Since: 323
     */
    function setGravityLevel(level) {
        SetGravityLevel(level);
    }
    misc.setGravityLevel = setGravityLevel;
    /**
     * No comment provided
     *
     * Hash: 0xD261BA3E7E998072 | Since: 323
     */
    function setIdealSpawnDistanceForIncident(incidentId) {
        SetIncidentUnk(incidentId, 0);
    }
    misc.setIdealSpawnDistanceForIncident = setIdealSpawnDistanceForIncident;
    /**
     * No comment provided
     *
     * Hash: 0xB08B85D860E7BA3C | Since: 323
     */
    function setIncidentRequestedUnits(incidentId, dispatchService, numUnits) {
        SetIncidentRequestedUnits(incidentId, dispatchService, numUnits);
    }
    misc.setIncidentRequestedUnits = setIncidentRequestedUnits;
    /**
     * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
     *
     * Hash: 0xC5F0A8EBD3F361CE | Since: 323
     */
    function setInstancePriorityHint(flag) {
        SetInstancePriorityHint(flag);
    }
    misc.setInstancePriorityHint = setInstancePriorityHint;
    /**
     * Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
     * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
     *
     * In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
     *
     * Hash: 0x9BAE5AD2508DF078 | Since: 323
     */
    function setInstancePriorityMode() {
        SetInstancePriorityMode(0);
    }
    misc.setInstancePriorityMode = setInstancePriorityMode;
    /**
     * No comment provided
     *
     * Hash: 0x19E00D7322C6F85B | Since: 323
     */
    function setMinigameInProgress(toggle) {
        SetMinigameInProgress(toggle);
    }
    misc.setMinigameInProgress = setMinigameInProgress;
    /**
     * If true, the player can't save the game.
     *
     *
     * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
     *
     * ^ also, if the mission flag is already set, the function does nothing at all
     *
     * Hash: 0xC4301E5121A0ED73 | Since: 323
     */
    function setMissionFlag(toggle) {
        SetMissionFlag(toggle);
    }
    misc.setMissionFlag = setMissionFlag;
    /**
     * Appears to have an optional bool parameter that is unused in the scripts.
     *
     * If you pass true, something will be set to zero.
     *
     * Hash: 0xA43D5C6FE51ADBEF | Since: 323
     */
    function setOverrideWeather(weatherType) {
        SetOverrideWeather(weatherType);
    }
    misc.setOverrideWeather = setOverrideWeather;
    /**
     * Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true
     *
     * Hash: 0x1178E104409FE58C | Since: 2189
     */
    function setOverrideWeatherex(weatherType) {
        Citizen.invokeNative('0x1178E104409FE58C', weatherType, false);
    }
    misc.setOverrideWeatherex = setOverrideWeatherex;
    /**
     * If toggle is true, the ped's head is shown in the pause menu
     * If toggle is false, the ped's head is not shown in the pause menu
     *
     * Hash: 0x4EBB7E87AA0DBED4 | Since: 323
     */
    function setPlayerIsInAnimalForm(toggle) {
        SetPlayerIsInAnimalForm(toggle);
    }
    misc.setPlayerIsInAnimalForm = setPlayerIsInAnimalForm;
    /**
     * No comment provided
     *
     * Hash: 0x9D8D44ADBBA61EF2 | Since: 323
     */
    function setPlayerIsRepeatingAMission(toggle) {
        SetPlayerRockstarEditorDisabled(toggle);
    }
    misc.setPlayerIsRepeatingAMission = setPlayerIsRepeatingAMission;
    /**
     * With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
     * With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
     * To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
     *
     * Hash: 0x643E26EA6E024D92 | Since: 323
     */
    function setRain(intensity) {
        SetRainLevel(intensity);
    }
    misc.setRain = setRain;
    /**
     * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
     * Does nothing if the mission flag is set.
     *
     * Hash: 0x971927086CFD2158 | Since: 323
     */
    function setRandomEventFlag(toggle) {
        SetRandomEventFlag(toggle);
    }
    misc.setRandomEventFlag = setRandomEventFlag;
    /**
     * No comment provided
     *
     * Hash: 0x444D98F98C11F3EC | Since: 323
     */
    function setRandomSeed(seed) {
        SetRandomSeed(seed);
    }
    misc.setRandomSeed = setRandomSeed;
    /**
     * No comment provided
     *
     * Hash: 0x8B05F884CF7E8020 | Since: 323
     */
    function setRandomWeatherType() {
        SetRandomWeatherType();
    }
    misc.setRandomWeatherType = setRandomWeatherType;
    /**
     * No comment provided
     *
     * Hash: 0x706B5EDCAA7FA663 | Since: 323
     */
    function setRestartCoordOverride(pos, heading) {
        SetRestartCustomPosition(pos.x, pos.y, pos.z, heading);
    }
    misc.setRestartCoordOverride = setRestartCoordOverride;
    /**
     * Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
     *
     * Hash: 0x2587A48BC88DFADF | Since: 323
     */
    function setRiotModeEnabled(toggle) {
        SetRiotModeEnabled(toggle);
    }
    misc.setRiotModeEnabled = setRiotModeEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x4F548CABEAE553BC | Since: 323
     */
    function setSaveHouse(savehouseHandle) {
        SetSaveHouse(savehouseHandle, false, false);
    }
    misc.setSaveHouse = setSaveHouse;
    /**
     * ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
     *
     * Hash: 0xC9BF75D28165FF77 | Since: 323
     */
    function setSaveMenuActive(ignoreVehicle) {
        SetSaveMenuActive(ignoreVehicle);
    }
    misc.setSaveMenuActive = setSaveMenuActive;
    /**
     * Sets GtaThread+0x14A
     *
     * Hash: 0x65D2EBB47E1CEC21 | Since: 323
     */
    function setScriptHighPrio(toggle) {
        Citizen.invokeNative('0x65D2EBB47E1CEC21', toggle);
    }
    misc.setScriptHighPrio = setScriptHighPrio;
    /**
     * No comment provided
     *
     * Hash: 0x7F06937B0CDCBC1A | Since: 1868
     */
    function setSnow(level) {
        SetSnowLevel(level);
    }
    misc.setSnow = setSnow;
    /**
     * No comment provided
     *
     * Hash: 0xD79185689F8FD5DF | Since: 323
     */
    function setStuntJumpsCanTrigger(toggle) {
        SetStuntJumpsCanTrigger(toggle);
    }
    misc.setStuntJumpsCanTrigger = setStuntJumpsCanTrigger;
    /**
     * No comment provided
     *
     * Hash: 0x57FFF03E423A4C0B | Since: 323
     */
    function setSuperJumpThisFrame(player) {
        SetSuperJumpThisFrame(player);
    }
    misc.setSuperJumpThisFrame = setSuperJumpThisFrame;
    /**
     * From the scripts:
     *
     * `MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);`
     *
     * Related to tennis mode.
     *
     * Hash: 0x54F157E0336A3822 | Since: 323
     */
    function setTennisMoveNetworkSignalFloat(ped) {
        Citizen.invokeNative('0x54F157E0336A3822', ped, undefined, 0);
    }
    misc.setTennisMoveNetworkSignalFloat = setTennisMoveNetworkSignalFloat;
    /**
     * Sets bit 3 in GtaThread+0x150
     *
     * Hash: 0x6F2135B6129620C1 | Since: 323
     */
    function setThisIsATriggerScript(toggle) {
        Citizen.invokeNative('0x6F2135B6129620C1', toggle);
    }
    misc.setThisIsATriggerScript = setThisIsATriggerScript;
    /**
     * No comment provided
     *
     * Hash: 0xAA391C728106F7AF | Since: 323
     */
    function setThisScriptCanBePaused(toggle) {
        SetThisScriptCanBePaused(toggle);
    }
    misc.setThisScriptCanBePaused = setThisScriptCanBePaused;
    /**
     * No comment provided
     *
     * Hash: 0xB98236CAAECEF897 | Since: 323
     */
    function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle) {
        SetThisScriptCanRemoveBlipsCreatedByAnyScript(toggle);
    }
    misc.setThisScriptCanRemoveBlipsCreatedByAnyScript = setThisScriptCanRemoveBlipsCreatedByAnyScript;
    /**
     * No comment provided
     *
     * Hash: 0xFB00CA71DA386228 | Since: 323
     */
    function setTickerJohnmarstonIsDone() {
        Citizen.invokeNative('0xFB00CA71DA386228');
    }
    misc.setTickerJohnmarstonIsDone = setTickerJohnmarstonIsDone;
    /**
     * Maximum value is 1.
     * At a value of 0 the game will still run at a minimum time scale.
     *
     * Slow Motion 1: 0.6
     * Slow Motion 2: 0.4
     * Slow Motion 3: 0.2
     *
     * Hash: 0x1D408577D440E81E | Since: 323
     */
    function setTimeScale(timeScale) {
        SetTimeScale(timeScale);
    }
    misc.setTimeScale = setTimeScale;
    /**
     * No comment provided
     *
     * Hash: 0xE532EC1A63231B4F | Since: 323
     */
    function setWantedResponseNumPedsToSpawn() {
        Citizen.invokeNative('0xE532EC1A63231B4F', 0, 0);
    }
    misc.setWantedResponseNumPedsToSpawn = setWantedResponseNumPedsToSpawn;
    /**
     * The following weatherTypes are used in the scripts:
     * "CLEAR"
     * "EXTRASUNNY"
     * "CLOUDS"
     * "OVERCAST"
     * "RAIN"
     * "CLEARING"
     * "THUNDER"
     * "SMOG"
     * "FOGGY"
     * "XMAS"
     * "SNOW"
     * "SNOWLIGHT"
     * "BLIZZARD"
     * "HALLOWEEN"
     * "NEUTRAL"
     *
     * Hash: 0x29B487C359E19889 | Since: 323
     */
    function setWeatherTypeNow(weatherType) {
        SetWeatherTypeNow(weatherType);
    }
    misc.setWeatherTypeNow = setWeatherTypeNow;
    /**
     * The following weatherTypes are used in the scripts:
     * "CLEAR"
     * "EXTRASUNNY"
     * "CLOUDS"
     * "OVERCAST"
     * "RAIN"
     * "CLEARING"
     * "THUNDER"
     * "SMOG"
     * "FOGGY"
     * "XMAS"
     * "SNOW"
     * "SNOWLIGHT"
     * "BLIZZARD"
     * "HALLOWEEN"
     * "NEUTRAL"
     *
     * Hash: 0xED712CA327900C8A | Since: 323
     */
    function setWeatherTypeNowPersist(weatherType) {
        SetWeatherTypeNowPersist(weatherType);
    }
    misc.setWeatherTypeNowPersist = setWeatherTypeNowPersist;
    /**
     * No comment provided
     *
     * Hash: 0xFB5045B7C42B75BF | Since: 323
     */
    function setWeatherTypeOvertimePersist(weatherType, time) {
        SetWeatherTypeOvertimePersist(weatherType, time);
    }
    misc.setWeatherTypeOvertimePersist = setWeatherTypeOvertimePersist;
    /**
     * The following weatherTypes are used in the scripts:
     * "CLEAR"
     * "EXTRASUNNY"
     * "CLOUDS"
     * "OVERCAST"
     * "RAIN"
     * "CLEARING"
     * "THUNDER"
     * "SMOG"
     * "FOGGY"
     * "XMAS"
     * "SNOW"
     * "SNOWLIGHT"
     * "BLIZZARD"
     * "HALLOWEEN"
     * "NEUTRAL"
     *
     * Hash: 0x704983DF373B198F | Since: 323
     */
    function setWeatherTypePersist(weatherType) {
        SetWeatherTypePersist(weatherType);
    }
    misc.setWeatherTypePersist = setWeatherTypePersist;
    /**
     * Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
     *
     * Hash: 0xAC3A74E8384A9919 | Since: 323
     */
    function setWind(speed) {
        SetWind(speed);
    }
    misc.setWind = setWind;
    /**
     * The wind direction in radians
     * 180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
     *
     * Hash: 0xEB0F4468467B4528 | Since: 323
     */
    function setWindDirection(direction) {
        SetWindDirection(direction);
    }
    misc.setWindDirection = setWindDirection;
    /**
     * Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
     *
     * Hash: 0xEE09ECEDBABE47FC | Since: 323
     */
    function setWindSpeed(speed) {
        SetWindSpeed(speed);
    }
    misc.setWindSpeed = setWindSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x867654CBC7606F2C | Since: 323
     */
    function shootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, weaponHash, ownerPed, isAudible, isInvisible, speed) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        ShootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, false, weaponHash, ownerPed, isAudible, isInvisible, speed);
    }
    misc.shootSingleBulletBetweenCoords = shootSingleBulletBetweenCoords;
    /**
     * entity - entity to ignore
     *
     * Hash: 0xE3A7742E0B7A2F8B | Since: 323
     */
    function shootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, weaponHash, ownerPed, isAudible, isInvisible, speed, entity) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        ShootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, false, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, undefined);
    }
    misc.shootSingleBulletBetweenCoordsIgnoreEntity = shootSingleBulletBetweenCoordsIgnoreEntity;
    /**
     * entity - entity to ignore
     * targetEntity - entity to home in on, if the weapon hash provided supports homing
     *
     * Hash: 0xBFE5756E7407064A | Since: 323
     */
    function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, targetEntity) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        ShootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, false, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, false, false, targetEntity, false, undefined, undefined, undefined);
    }
    misc.shootSingleBulletBetweenCoordsIgnoreEntityNew = shootSingleBulletBetweenCoordsIgnoreEntityNew;
    /**
     * Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
     *
     * Hash: 0xD3D15555431AB793 | Since: 323
     */
    function shouldUseMetricMeasurements() {
        return ShouldUseMetricMeasurements();
    }
    misc.shouldUseMetricMeasurements = shouldUseMetricMeasurements;
    /**
     * This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
     *
     * Hash: 0xF2F6A2FA49278625 | Since: 323
     */
    function slerpNearQuaternion(t, pos, w, x1, y1, z1, w1) {
        return SlerpNearQuaternion(t, pos.x, pos.y, pos.z, w, x1, y1, z1, w1);
    }
    misc.slerpNearQuaternion = slerpNearQuaternion;
    /**
     * No comment provided
     *
     * Hash: 0x92790862E36C2ADA | Since: 323
     */
    function startEndUserBenchmark() {
        StartBenchmarkRecording();
    }
    misc.startEndUserBenchmark = startEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0x60FE567DF1B1AF9D | Since: 323
     */
    function startSaveArrayWithSize(size, arrayName) {
        return StartSaveArrayWithSize(size, arrayName);
    }
    misc.startSaveArrayWithSize = startSaveArrayWithSize;
    /**
     * No comment provided
     *
     * Hash: 0xA9575F812C6A7997 | Since: 323
     */
    function startSaveData() {
        return StartSaveData(undefined, false);
    }
    misc.startSaveData = startSaveData;
    /**
     * No comment provided
     *
     * Hash: 0xBF737600CDDBEADD | Since: 323
     */
    function startSaveStructWithSize(size, structName) {
        return StartSaveStructWithSize(size, structName);
    }
    misc.startSaveStructWithSize = startSaveStructWithSize;
    /**
     * No comment provided
     *
     * Hash: 0xC7DB36C24634F52B | Since: 323
     */
    function stopEndUserBenchmark() {
        StopBenchmarkRecording();
    }
    misc.stopEndUserBenchmark = stopEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0x04456F95153C6BE4 | Since: 323
     */
    function stopSaveArray() {
        StopSaveArray();
    }
    misc.stopSaveArray = stopSaveArray;
    /**
     * No comment provided
     *
     * Hash: 0x74E20C9145FB66FD | Since: 323
     */
    function stopSaveData() {
        StopSaveData();
    }
    misc.stopSaveData = stopSaveData;
    /**
     * No comment provided
     *
     * Hash: 0xEB1774DF12BB9F12 | Since: 323
     */
    function stopSaveStruct() {
        StopSaveStruct();
    }
    misc.stopSaveStruct = stopSaveStruct;
    /**
     * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
     *
     * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
     *
     * Hash: 0x5A5F40FE637EB584 | Since: 323
     */
    function stringToInt(_string) {
        return StringToInt(_string);
    }
    misc.stringToInt = stringToInt;
    /**
     * No comment provided
     *
     * Hash: 0x1EAE0A6E978894A2 | Since: 323
     */
    function supressRandomEventThisFrame(eventType, suppress) {
        SupressRandomEventThisFrame(eventType, suppress);
    }
    misc.supressRandomEventThisFrame = supressRandomEventThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x632106CC96E82E91 | Since: 323
     */
    function tan() {
        return Tan(0);
    }
    misc.tan = tan;
    /**
     * No comment provided
     *
     * Hash: 0x9DC711BC69C548DF | Since: 323
     */
    function terminateAllScriptsWithThisName(scriptName) {
        TerminateAllScriptsWithThisName(scriptName);
    }
    misc.terminateAllScriptsWithThisName = terminateAllScriptsWithThisName;
    /**
     * Toggles some stunt jump stuff.
     *
     * Hash: 0xFB80AB299D2EE1BD | Since: 757
     */
    function toggleShowOptionalStuntJumpCamera(toggle) {
        ToggleShowOptionalStuntJumpCamera(toggle);
    }
    misc.toggleShowOptionalStuntJumpCamera = toggleShowOptionalStuntJumpCamera;
    /**
     * Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
     *
     * Hash: 0xEA2F2061875EED90 | Since: 323
     */
    function uiStartedEndUserBenchmark() {
        return UiStartedEndUserBenchmark();
    }
    misc.uiStartedEndUserBenchmark = uiStartedEndUserBenchmark;
    /**
     * No comment provided
     *
     * Hash: 0x957E790EA1727B64 | Since: 323
     */
    function unloadAllCloudHats() {
        ClearCloudHat();
    }
    misc.unloadAllCloudHats = unloadAllCloudHats;
    /**
     * No comment provided
     *
     * Hash: 0xA74802FB8D0B7814 | Since: 323
     */
    function unloadCloudHat(name) {
        UnloadCloudHat(name, 0);
    }
    misc.unloadCloudHat = unloadCloudHat;
    /**
     * Returns the current status of the onscreen keyboard, and updates the output.
     *
     * Status Codes:
     *
     * -1: Keyboard isn't active
     * 0: User still editing
     * 1: User has finished editing
     * 2: User has canceled editing
     *
     * Hash: 0x0CF2B696BBF945AE | Since: 323
     */
    function updateOnscreenKeyboard() {
        return UpdateOnscreenKeyboard();
    }
    misc.updateOnscreenKeyboard = updateOnscreenKeyboard;
    /**
     * No comment provided
     *
     * Hash: 0x693478ACBD7F18E7 | Since: 1103
     */
    function useActiveCameraForTimeslicingCentre() {
        Citizen.invokeNative('0x693478ACBD7F18E7');
    }
    misc.useActiveCameraForTimeslicingCentre = useActiveCameraForTimeslicingCentre;
    /**
     * No comment provided
     *
     * Hash: 0xF14878FC50BEC6EE | Since: 323
     */
    function usingMissionCreator(toggle) {
        UsingMissionCreator(toggle);
    }
    misc.usingMissionCreator = usingMissionCreator;
    /**
     * No comment provided
     *
     * Hash: 0xA8434F1DFF41D6E7 | Since: 323
     */
    function waterOverrideFadeIn() {
        WaterOverrideFadeIn(0);
    }
    misc.waterOverrideFadeIn = waterOverrideFadeIn;
    /**
     * No comment provided
     *
     * Hash: 0xC3C221ADDDE31A11 | Since: 323
     */
    function waterOverrideFadeOut() {
        WaterOverrideFadeOut(0);
    }
    misc.waterOverrideFadeOut = waterOverrideFadeOut;
    /**
     * No comment provided
     *
     * Hash: 0x31727907B2C43C55 | Since: 323
     */
    function waterOverrideSetOceannoiseminamplitude(minAmplitude) {
        WaterOverrideSetOceannoiseminamplitude(minAmplitude);
    }
    misc.waterOverrideSetOceannoiseminamplitude = waterOverrideSetOceannoiseminamplitude;
    /**
     * No comment provided
     *
     * Hash: 0x405591EC8FD9096D | Since: 323
     */
    function waterOverrideSetOceanwaveamplitude(amplitude) {
        WaterOverrideSetOceanwaveamplitude(amplitude);
    }
    misc.waterOverrideSetOceanwaveamplitude = waterOverrideSetOceanwaveamplitude;
    /**
     * No comment provided
     *
     * Hash: 0xB3E6360DDE733E82 | Since: 323
     */
    function waterOverrideSetOceanwavemaxamplitude(maxAmplitude) {
        WaterOverrideSetOceanwavemaxamplitude(maxAmplitude);
    }
    misc.waterOverrideSetOceanwavemaxamplitude = waterOverrideSetOceanwavemaxamplitude;
    /**
     * No comment provided
     *
     * Hash: 0xF751B16FB32ABC1D | Since: 323
     */
    function waterOverrideSetOceanwaveminamplitude(minAmplitude) {
        WaterOverrideSetOceanwaveminamplitude(minAmplitude);
    }
    misc.waterOverrideSetOceanwaveminamplitude = waterOverrideSetOceanwaveminamplitude;
    /**
     * No comment provided
     *
     * Hash: 0x7C9C0B1EEB1F9072 | Since: 323
     */
    function waterOverrideSetRipplebumpiness(bumpiness) {
        WaterOverrideSetRipplebumpiness(bumpiness);
    }
    misc.waterOverrideSetRipplebumpiness = waterOverrideSetRipplebumpiness;
    /**
     * No comment provided
     *
     * Hash: 0xB9854DFDE0D833D6 | Since: 323
     */
    function waterOverrideSetRippledisturb(disturb) {
        WaterOverrideSetRippledisturb(disturb);
    }
    misc.waterOverrideSetRippledisturb = waterOverrideSetRippledisturb;
    /**
     * No comment provided
     *
     * Hash: 0x9F5E6BB6B34540DA | Since: 323
     */
    function waterOverrideSetRipplemaxbumpiness(maxBumpiness) {
        WaterOverrideSetRipplemaxbumpiness(maxBumpiness);
    }
    misc.waterOverrideSetRipplemaxbumpiness = waterOverrideSetRipplemaxbumpiness;
    /**
     * No comment provided
     *
     * Hash: 0x6216B116083A7CB4 | Since: 323
     */
    function waterOverrideSetRippleminbumpiness(minBumpiness) {
        WaterOverrideSetRippleminbumpiness(minBumpiness);
    }
    misc.waterOverrideSetRippleminbumpiness = waterOverrideSetRippleminbumpiness;
    /**
     * No comment provided
     *
     * Hash: 0xB8F87EAD7533B176 | Since: 323
     */
    function waterOverrideSetShorewaveamplitude(amplitude) {
        WaterOverrideSetShorewaveamplitude(amplitude);
    }
    misc.waterOverrideSetShorewaveamplitude = waterOverrideSetShorewaveamplitude;
    /**
     * No comment provided
     *
     * Hash: 0xA7A1127490312C36 | Since: 323
     */
    function waterOverrideSetShorewavemaxamplitude(maxAmplitude) {
        WaterOverrideSetShorewavemaxamplitude(maxAmplitude);
    }
    misc.waterOverrideSetShorewavemaxamplitude = waterOverrideSetShorewavemaxamplitude;
    /**
     * No comment provided
     *
     * Hash: 0xC3EAD29AB273ECE8 | Since: 323
     */
    function waterOverrideSetShorewaveminamplitude(minAmplitude) {
        WaterOverrideSetShorewaveminamplitude(minAmplitude);
    }
    misc.waterOverrideSetShorewaveminamplitude = waterOverrideSetShorewaveminamplitude;
    /**
     * This seems to edit the water wave, intensity around your current location.
     *
     * 0.0f = Normal
     * 1.0f = So Calm and Smooth, a boat will stay still.
     * 3.0f = Really Intense.
     *
     * Hash: 0xC54A08C85AE4D410 | Since: 323
     */
    function waterOverrideSetStrength(strength) {
        WaterOverrideSetStrength(strength);
    }
    misc.waterOverrideSetStrength = waterOverrideSetStrength;
    /**
     * Returns prop type for given model hash
     *
     * Hash: 0x8BAF8AD59F47AAFC | Since: 3095
     */
    function getContentPropType(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return Citizen.invokeNative('0x8BAF8AD59F47AAFC', model);
    }
    misc.getContentPropType = getContentPropType;
    /**
     * No comment provided
     *
     * Hash: 0xE2BCD0EFAE90D1F4 | Since: 3504
     */
    function isXboxpcVersion() {
        return Citizen.invokeNative('0xE2BCD0EFAE90D1F4');
    }
    misc.isXboxpcVersion = isXboxpcVersion;
    /**
     * No comment provided
     *
     * Hash: 0xBA4583AF4C678A9B | Since: 3095
     */
    function setContentPropType(model, _type) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        Citizen.invokeNative('0xBA4583AF4C678A9B', model, _type);
    }
    misc.setContentPropType = setContentPropType;
})(misc || (misc = {}));
export var ped;
(function (ped_1) {
    /**
     * An analogue of [GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS](#\_0x27561561732A7842) that returns number of drawable variations inside a single collection instead of the total number across all collections.
     *
     * Hash: 0x310D0271 | Since: unknown
     */
    function getNumberOfCollectionDrawableVariations(ped, componentId, collection) {
        return Citizen.invokeNative('0x310D0271', ped, componentId, collection);
    }
    ped_1.getNumberOfCollectionDrawableVariations = getNumberOfCollectionDrawableVariations;
    /**
     * An analogue of [GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS](#\_0x5FAF9754E789FB47) that returns number of prop variations inside a single collection instead of the total number across all collections.
     *
     * Hash: 0x3B6A13E1 | Since: unknown
     */
    function getNumberOfCollectionPropDrawableVariations(ped, anchorPoint, collection) {
        return Citizen.invokeNative('0x3B6A13E1', ped, anchorPoint, collection);
    }
    ped_1.getNumberOfCollectionPropDrawableVariations = getNumberOfCollectionPropDrawableVariations;
    /**
     * An alternative to [GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS](#\_0xA6E7F1CEB523E171) that uses local collection indexing instead of the global one.
     *
     * Hash: 0x75CAF9CC | Since: unknown
     */
    function getNumberOfCollectionPropTextureVariations(ped, anchorPoint, collection, propIndex) {
        return Citizen.invokeNative('0x75CAF9CC', ped, anchorPoint, collection, propIndex);
    }
    ped_1.getNumberOfCollectionPropTextureVariations = getNumberOfCollectionPropTextureVariations;
    /**
     * An alternative to [GET_NUMBER_OF_PED_TEXTURE_VARIATIONS](#\_0x8F7156A3142A6BAD) that uses local collection indexing instead of the global one.
     *
     * Hash: 0xD2C15D7 | Since: unknown
     */
    function getNumberOfCollectionTextureVariations(ped, componentId, collection, drawableId) {
        return Citizen.invokeNative('0xD2C15D7', ped, componentId, collection, drawableId);
    }
    ped_1.getNumberOfCollectionTextureVariations = getNumberOfCollectionTextureVariations;
    /**
     * Returns number of variation collections available for the given Ped.
     *
     * Collections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA), [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB), [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\_0x310D0271) etc natives for more details on how to work with collections.
     *
     * `GET_PED_COLLECTIONS_COUNT` can be used together with [GET_PED_COLLECTION_NAME](#\_0xFED5D83A) to list all collections attached to Ped.
     *
     * Hash: 0x45946359 | Since: unknown
     */
    function getCollectionsCount(ped) {
        return Citizen.invokeNative('0x45946359', ped);
    }
    ped_1.getCollectionsCount = getCollectionsCount;
    /**
     * Gets local index inside a collection (which can be obtained using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B)) for the given global drawable ID. The collection name and index are used in functions like [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA).
     *
     * Hash: 0x94EB1FE4 | Since: unknown
     */
    function getCollectionLocalIndexFromDrawable(ped, componentId, drawableId) {
        return Citizen.invokeNative('0x94EB1FE4', ped, componentId, drawableId);
    }
    ped_1.getCollectionLocalIndexFromDrawable = getCollectionLocalIndexFromDrawable;
    /**
     * Gets local index inside a collection (which can be obtained using [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17)) for the given global prop index. The collection name and index are used in functions like [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB).
     *
     * Hash: 0xFBDB885F | Since: unknown
     */
    function getCollectionLocalIndexFromProp(ped, anchorPoint, propIndex) {
        return Citizen.invokeNative('0xFBDB885F', ped, anchorPoint, propIndex);
    }
    ped_1.getCollectionLocalIndexFromProp = getCollectionLocalIndexFromProp;
    /**
     * Returns name of collection under given index for the given Ped.
     *
     * Collections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA), [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB), [GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS](#\_0x310D0271) etc natives for more details on how to work with collections.
     *
     * `GET_PED_COLLECTION_NAME` can be used together with [GET_PED_COLLECTIONS_COUNT](#\_0x45946359) to list all collections attached to Ped.
     *
     * Hash: 0xFED5D83A | Since: unknown
     */
    function getCollectionName(ped, index) {
        return Citizen.invokeNative('0xFED5D83A', ped, index);
    }
    ped_1.getCollectionName = getCollectionName;
    /**
     * Gets collection name for the given global drawable ID. Together with [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) is used to get collection and local index (inside the given collection) of the drawable. The collection name and index are used in functions like [SET_PED_COLLECTION_COMPONENT_VARIATION](#\_0x88711BBA).
     *
     * Hash: 0xD6BBA48B | Since: unknown
     */
    function getCollectionNameFromDrawable(ped, componentId, drawableId) {
        return Citizen.invokeNative('0xD6BBA48B', ped, componentId, drawableId);
    }
    ped_1.getCollectionNameFromDrawable = getCollectionNameFromDrawable;
    /**
     * Gets collection name for the given global prop index. Together with [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) is used to get collection and local index (inside the given collection) of the prop. The collection name and index are used in functions like [SET_PED_COLLECTION_PROP_INDEX](#\_0x75240BCB).
     *
     * Hash: 0x8ED0C17 | Since: unknown
     */
    function getCollectionNameFromProp(ped, anchorPoint, propIndex) {
        return Citizen.invokeNative('0x8ED0C17', ped, anchorPoint, propIndex);
    }
    ped_1.getCollectionNameFromProp = getCollectionNameFromProp;
    /**
     * Returns a list of decorations applied to a ped.
     *
     * The data returned adheres to the following layout:
     *
     * ```
     * [ [ collectionHash1, overlayHash1 ], ..., [c ollectionHashN, overlayHashN ] ]
     * ```
     *
     * This command will return undefined data if invoked on a remote player ped.
     *
     * Hash: 0x7CCE1163 | Since: unknown
     */
    function getDecorations(ped) {
        return Citizen.invokeNative('0x7CCE1163', ped);
    }
    ped_1.getDecorations = getDecorations;
    /**
     * A getter for [SET_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\_0x95E3D6257B166CF2).
     *
     * Hash: 0xF5A904F9 | Since: unknown
     */
    function getDensityMultiplier() {
        return Citizen.invokeNative('0xF5A904F9');
    }
    ped_1.getDensityMultiplier = getDensityMultiplier;
    /**
     * Returns global drawable index based on the local one. Is it a reverse to [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Drawables are stored inside collections. Each collection usually corresponds to a certain DCL or the base game.
     *
     * If all drawables from all collections are placed into one continuous array - the global index will correspond to the index of drawable in such array. Local index is index of drawable in this array relative to the start of the given collection.
     *
     * Hash: 0x280F1FC3 | Since: unknown
     */
    function getDrawableGlobalIndexFromCollection(ped, componentId, collection, drawableId) {
        return Citizen.invokeNative('0x280F1FC3', ped, componentId, collection, drawableId);
    }
    ped_1.getDrawableGlobalIndexFromCollection = getDrawableGlobalIndexFromCollection;
    /**
     * An analogue to [GET_PED_DRAWABLE_VARIATION](#\_0x67F3780DD425D4FC) that returns collection local drawable index (inside [GET_PED_DRAWABLE_VARIATION_COLLECTION_NAME](#\_0xBCE0AB63) collection) instead of the global drawable index.
     *
     * Hash: 0x9970386F | Since: unknown
     */
    function getDrawableVariationCollectionLocalIndex(ped, componentId) {
        return Citizen.invokeNative('0x9970386F', ped, componentId);
    }
    ped_1.getDrawableVariationCollectionLocalIndex = getDrawableVariationCollectionLocalIndex;
    /**
     * An analogue to [GET_PED_DRAWABLE_VARIATION](#\_0x67F3780DD425D4FC) that returns collection name instead of the global drawable index.
     *
     * Should be used together with [GET_PED_DRAWABLE_VARIATION_COLLECTION_LOCAL_INDEX](#\_0x9970386F).
     *
     * Hash: 0xBCE0AB63 | Since: unknown
     */
    function getDrawableVariationCollectionName(ped, componentId) {
        return Citizen.invokeNative('0xBCE0AB63', ped, componentId);
    }
    ped_1.getDrawableVariationCollectionName = getDrawableVariationCollectionName;
    /**
     * A getter for [\_SET_PED_EYE_COLOR](#\_0x50B56988B170AFDF). Returns -1 if fails to get.
     *
     * Hash: 0xA47B860F | Since: unknown
     */
    function getEyeColor(ped) {
        return Citizen.invokeNative('0xA47B860F', ped);
    }
    ped_1.getEyeColor = getEyeColor;
    /**
     * A getter for [\_SET_PED_FACE_FEATURE](#\_0x71A5C1DBA060049E). Returns 0.0 if fails to get.
     *
     * Hash: 0xBA352ADD | Since: unknown
     */
    function getFaceFeature(ped, index) {
        return Citizen.invokeNative('0xBA352ADD', ped, index);
    }
    ped_1.getFaceFeature = getFaceFeature;
    /**
     * A getter for [\_SET_PED_HAIR_COLOR](#\_0x4CFFC65454C93A49). Returns -1 if fails to get.
     *
     * Hash: 0xA3EA2893 | Since: unknown
     */
    function getHairColor(ped) {
        return Citizen.invokeNative('0xA3EA2893', ped);
    }
    ped_1.getHairColor = getHairColor;
    /**
     * A getter for [\_SET_PED_HAIR_COLOR](#\_0x4CFFC65454C93A49). Returns -1 if fails to get.
     *
     * Hash: 0x4B087305 | Since: unknown
     */
    function getHairHighlightColor(ped) {
        return Citizen.invokeNative('0x4B087305', ped);
    }
    ped_1.getHairHighlightColor = getHairHighlightColor;
    /**
     * A getter for [SET_PED_HEAD_OVERLAY](#\_0x48F44967FA05CC1E) and [\_SET_PED_HEAD_OVERLAY_COLOR](#\_0x497BF74A7B9CB952) natives.
     *
     * Hash: 0xC46EE605 | Since: unknown
     */
    function getHeadOverlayData(ped, index) {
        return Citizen.invokeNative('0xC46EE605', ped, index);
    }
    ped_1.getHeadOverlayData = getHeadOverlayData;
    /**
     * Gets a ped model's health config.
     *
     * Hash: 0xF71542F7 | Since: unknown
     */
    function getModelHealthConfig(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0xF71542F7', modelHash);
    }
    ped_1.getModelHealthConfig = getModelHealthConfig;
    /**
     * Gets a ped model's personality type.
     *
     * Hash: 0xFE08CAD6 | Since: unknown
     */
    function getModelPersonality(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0xFE08CAD6', modelHash);
    }
    ped_1.getModelPersonality = getModelPersonality;
    /**
     * No comment provided
     *
     * Hash: 0x69E81E3D | Since: unknown
     */
    function getMovementClipset(ped) {
        return Citizen.invokeNative('0x69E81E3D', ped);
    }
    ped_1.getMovementClipset = getMovementClipset;
    /**
     * An analogue to [GET_PED_PROP_INDEX](#\_0x898CC20EA75BACD8) that returns collection local prop index (inside [GET_PED_PROP_COLLECTION_NAME](#\_0x6B5653E4) collection) instead of the global prop index.
     *
     * Hash: 0xCD420AD1 | Since: unknown
     */
    function getPropCollectionLocalIndex(ped, anchorPoint) {
        return Citizen.invokeNative('0xCD420AD1', ped, anchorPoint);
    }
    ped_1.getPropCollectionLocalIndex = getPropCollectionLocalIndex;
    /**
     * An analogue to [GET_PED_PROP_INDEX](#\_0x898CC20EA75BACD8) that returns collection name instead of the global drawable index.
     *
     * Should be used together with [GET_PED_PROP_COLLECTION_LOCAL_INDEX](#\_0xCD420AD1).
     *
     * Hash: 0x6B5653E4 | Since: unknown
     */
    function getPropCollectionName(ped, anchorPoint) {
        return Citizen.invokeNative('0x6B5653E4', ped, anchorPoint);
    }
    ped_1.getPropCollectionName = getPropCollectionName;
    /**
     * Returns global prop index based on the local one. Is it a reverse to [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) natives.
     *
     * Props are stored inside collections. Each collection usually corresponds to a certain DCL or the base game.
     *
     * If all props from all collections are placed into one continuous array - the global index will correspond to the index of the prop in such array. Local index is index of the prop in this array relative to the start of the given collection.
     *
     * Hash: 0x2CB45CDC | Since: unknown
     */
    function getPropGlobalIndexFromCollection(ped, anchorPoint, collection, propIndex) {
        return Citizen.invokeNative('0x2CB45CDC', ped, anchorPoint, collection, propIndex);
    }
    ped_1.getPropGlobalIndexFromCollection = getPropGlobalIndexFromCollection;
    /**
     * A getter for [SET_PED_SWEAT](#\_0x27B0405F59637D1F).
     *
     * Hash: 0x44B91E94 | Since: unknown
     */
    function getSweat(ped) {
        return Citizen.invokeNative('0x44B91E94', ped);
    }
    ped_1.getSweat = getSweat;
    /**
     * An alternative to [IS_PED_COMPONENT_VARIATION_GEN9\_EXCLUSIVE](#\_0xC767B581) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0x33B2AFA2 | Since: unknown
     */
    function isCollectionComponentVariationGen9Exclusive(ped, componentId, collection, drawableId) {
        return Citizen.invokeNative('0x33B2AFA2', ped, componentId, collection, drawableId);
    }
    ped_1.isCollectionComponentVariationGen9Exclusive = isCollectionComponentVariationGen9Exclusive;
    /**
     * An alternative to [IS_PED_COMPONENT_VARIATION_VALID](#\_0xE825F6B6CEA7671D) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0xCA63A52A | Since: unknown
     */
    function isCollectionComponentVariationValid(ped, componentId, collection, drawableId, textureId) {
        return Citizen.invokeNative('0xCA63A52A', ped, componentId, collection, drawableId, textureId);
    }
    ped_1.isCollectionComponentVariationValid = isCollectionComponentVariationValid;
    /**
     * No comment provided
     *
     * Hash: 0xC767B581 | Since: unknown
     */
    function isComponentVariationGen9Exclusive(ped, componentId, drawableId) {
        return Citizen.invokeNative('0xC767B581', ped, componentId, drawableId);
    }
    ped_1.isComponentVariationGen9Exclusive = isComponentVariationGen9Exclusive;
    /**
     * Sets whether peds can stand on top of *all* vehicles without falling off.
     *
     * Note this flag is not replicated automatically, you will have to manually do so.
     *
     * Hash: 0x90A9E0B2 | Since: unknown
     */
    function overridesCanStandOnTopFlag(flag) {
        Citizen.invokeNative('0x90A9E0B2', flag);
    }
    ped_1.overridesCanStandOnTopFlag = overridesCanStandOnTopFlag;
    /**
     * Allows the bypassing of default game behavior that prevents the use of [SET_PED_DRIVE_BY_CLIPSET_OVERRIDE](#\_0xED34AB6C5CB36520) in certain scenarios to avoid clipping issues (e.g., when there is more than one Ped in a vehicle).
     *
     * Note: This flag and the overridden clipset are not replicated values and require synchronization through user scripts. Additionally, current game behavior also restricts applying this clipset locally when in first-person mode and will require a temporary workaround.
     *
     * Hash: 0xB14F8EAD | Since: unknown
     */
    function overridesUseDefaultDriveByClipset(flag) {
        Citizen.invokeNative('0xB14F8EAD', flag);
    }
    ped_1.overridesUseDefaultDriveByClipset = overridesUseDefaultDriveByClipset;
    /**
     * Restores an overridden ped model personality type to the default value.
     *
     * Hash: 0x79A12861 | Since: unknown
     */
    function resetModelPersonality(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        Citizen.invokeNative('0x79A12861', modelHash);
    }
    ped_1.resetModelPersonality = resetModelPersonality;
    /**
     * An alternative to [SET_PED_COMPONENT_VARIATION](#\_0x262B14F48D29DE80) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0x88711BBA | Since: unknown
     */
    function setCollectionComponentVariation(ped, componentId, collection, drawableId, textureId, paletteId) {
        Citizen.invokeNative('0x88711BBA', ped, componentId, collection, drawableId, textureId, paletteId);
    }
    ped_1.setCollectionComponentVariation = setCollectionComponentVariation;
    /**
     * An alternative to [SET_PED_PRELOAD_PROP_DATA](#\_0x2B16A3BFF1FBCE49) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) natives.
     *
     * Hash: 0x14B5BBE0 | Since: unknown
     */
    function setCollectionPreloadPropData(ped, anchorPoint, collection, propIndex, textureId) {
        Citizen.invokeNative('0x14B5BBE0', ped, anchorPoint, collection, propIndex, textureId);
    }
    ped_1.setCollectionPreloadPropData = setCollectionPreloadPropData;
    /**
     * An alternative to [SET_PED_PRELOAD_VARIATION_DATA](#\_0x39D55A620FCB6A3A) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_DRAWABLE](#\_0xD6BBA48B) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE](#\_0x94EB1FE4) natives.
     *
     * Hash: 0x3EC75558 | Since: unknown
     */
    function setCollectionPreloadVariationData(ped, componentId, collection, drawableId, textureId) {
        Citizen.invokeNative('0x3EC75558', ped, componentId, collection, drawableId, textureId);
    }
    ped_1.setCollectionPreloadVariationData = setCollectionPreloadVariationData;
    /**
     * An alternative to [SET_PED_PROP_INDEX](#\_0x93376B65A266EB5F) that uses local collection indexing instead of the global one.
     *
     * The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version.
     *
     * Collection name and local index inside the collection can be obtained from the global index using [GET_PED_COLLECTION_NAME_FROM_PROP](#\_0x8ED0C17) and [GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP](#\_0xFBDB885F) natives.
     *
     * Hash: 0x75240BCB | Since: unknown
     */
    function setCollectionPropIndex(ped, anchorPoint, collection, propIndex, textureId, attach) {
        Citizen.invokeNative('0x75240BCB', ped, anchorPoint, collection, propIndex, textureId, attach);
    }
    ped_1.setCollectionPropIndex = setCollectionPropIndex;
    /**
     * Override the limits on the number and types of melee combatants. The game is limited to at most ten combatants among the three types: primary, secondary, and observers.
     *
     * This native infers the number of observers based on the primary and secondary counts.
     *
     * Hash: 0x8E51EC29 | Since: unknown
     */
    function setMeleeCombatLimits(primaryCount, secondaryCount, populationPedCount) {
        Citizen.invokeNative('0x8E51EC29', primaryCount, secondaryCount, populationPedCount);
    }
    ped_1.setMeleeCombatLimits = setMeleeCombatLimits;
    /**
     * Sets a ped model's health config.
     * Takes effect only after setting player model with `SET_PLAYER_MODEL`.
     *
     * Hash: 0xAF12A05D | Since: unknown
     */
    function setModelHealthConfig(modelHash, configName) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        Citizen.invokeNative('0xAF12A05D', modelHash, configName);
    }
    ped_1.setModelHealthConfig = setModelHealthConfig;
    /**
     * Overrides a ped model personality type.
     *
     * Hash: 0x46F6B38B | Since: unknown
     */
    function setModelPersonality(modelHash, personalityHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        if (typeof personalityHash === 'string')
            personalityHash = misc.getHashKey(personalityHash);
        Citizen.invokeNative('0x46F6B38B', modelHash, personalityHash);
    }
    ped_1.setModelPersonality = setModelPersonality;
    /**
     * Purpose: The game's default values for these make shooting while traveling Left quite a bit slower than shooting while traveling right (This could be a game-balance thing?)
     *
     * Default Min: -45 Degrees
     * Default Max: 135 Degrees
     *
     * ```
     * \ ,- ~ ||~ - ,
     * , ' \    x   x    ' ,
     * ```
     *
     * ,      \    x    x   x  ,
     * ,         \  x     x      ,
     * ,            \     x    x  ,
     * ,              \      x    ,
     * ,                \   x     ,
     * ,                 \   x x ,
     * ,                  \  x ,
     * ,                 , '
     * ' - , \_ \_ \_ ,  '  \\
     *
     * If the transition angle is within the shaded portion (x), there will be no transition(Quicker)
     * The angle corresponds to where you are looking(North on the circle) vs. the heading of your Ped.
     * Note: For some reason,
     *
     * You can set these values to whatever you'd like with this native, but keep in mind that the transitional spin is only clockwise for some reason.
     *
     * I'd personally recommend something like -135/135
     *
     * Hash: 0xB300F03 | Since: unknown
     */
    function setTurningThresholds(min, max) {
        Citizen.invokeNative('0xB300F03', min, max);
    }
    ped_1.setTurningThresholds = setTurningThresholds;
    /**
     * Returns the bone matrix of the specified bone id. usefull for entity attachment
     *
     * Hash: 0x9C5E7C9C | Since: unknown
     */
    function getBoneMatrix(ped, boneId) {
        return Citizen.invokeNative('0x9C5E7C9C', ped, boneId);
    }
    ped_1.getBoneMatrix = getBoneMatrix;
    /**
     * ```
     * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
     * collection - PedDecorationCollection filename hash
     * overlay - Item name hash
     * Example:
     * Entry inside "mpbeach_overlays.xml" -
     * <Item>
     * <uvPos x="0.500000" y="0.500000" />
     * <scale x="0.600000" y="0.500000" />
     * <rotation value="0.000000" />
     * <nameHash>FM_Hair_Fuzz</nameHash>
     * <txdHash>mp_hair_fuzz</txdHash>
     * <txtHash>mp_hair_fuzz</txtHash>
     * <zone>ZONE_HEAD</zone>
     * <type>TYPE_TATTOO</type>
     * <faction>FM</faction>
     * <garment>All</garment>
     * <gender>GENDER_DONTCARE</gender>
     * <award />
     * <awardLevel />
     * </Item>
     * Code:
     * `PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))`
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [ADD_PED_DECORATION_FROM_HASHES](?\_0x5F5D1665E352A839).</strong>
     *
     * Hash: 0x70559AC7 | Since: unknown
     */
    function addDecorationFromHashes(ped, collection, overlay) {
        if (typeof collection === 'string')
            collection = misc.getHashKey(collection);
        if (typeof overlay === 'string')
            overlay = misc.getHashKey(overlay);
        Citizen.invokeNative('0x70559AC7', ped, collection, overlay);
    }
    ped_1.addDecorationFromHashes = addDecorationFromHashes;
    /**
     * CLEAR_PED_PROP
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CLEAR_PED_PROP](?\_0x0943E5B8E078E76E).</strong>
     *
     * Hash: 0x2D23D743 | Since: unknown
     */
    function clearProp(ped, propId) {
        Citizen.invokeNative('0x2D23D743', ped, propId);
    }
    ped_1.clearProp = clearProp;
    /**
     * CLEAR_PED_SECONDARY_TASK
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CLEAR_PED_SECONDARY_TASK](?\_0x176CECF6F920D707).</strong>
     *
     * Hash: 0xA635F451 | Since: unknown
     */
    function clearSecondaryTask(ped) {
        Citizen.invokeNative('0xA635F451', ped);
    }
    ped_1.clearSecondaryTask = clearSecondaryTask;
    /**
     * Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.
     * This ped will initially be owned by the creating script as a mission entity, and the model should be loaded already
     * (e.g. using REQUEST_MODEL).
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CREATE_PED](?\_0xD49F9B0955C367DE).</strong>
     *
     * Hash: 0x389EF71 | Since: unknown
     */
    function create(pedType, modelHash, pos, heading, isNetwork, bScriptHostPed) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0x389EF71', pedType, modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostPed);
    }
    ped_1.create = create;
    /**
     * CREATE_PED_INSIDE_VEHICLE
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CREATE_PED_INSIDE_VEHICLE](?\_0x7DD959874C1FD534).</strong>
     *
     * Hash: 0x3000F092 | Since: unknown
     */
    function createInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0x3000F092', vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);
    }
    ped_1.createInsideVehicle = createInsideVehicle;
    /**
     * Returns all peds handles known to the server.
     * The data returned adheres to the following layout:
     *
     * ```
     * [127, 42, 13, 37]
     * ```
     *
     * Hash: 0xB8584FEF | Since: unknown
     */
    function getAlls() {
        return Citizen.invokeNative('0xB8584FEF');
    }
    ped_1.getAlls = getAlls;
    /**
     * Returns the hash of weapon the Ped is currently using.
     *
     * Hash: 0xB0237302 | Since: unknown
     */
    function getCurrentWeapon(ped) {
        return Citizen.invokeNative('0xB0237302', ped);
    }
    ped_1.getCurrentWeapon = getCurrentWeapon;
    /**
     * No comment provided
     *
     * Hash: 0xF7C6792D | Since: unknown
     */
    function getLastInVehicleSeat(vehicle, seatIndex) {
        return Citizen.invokeNative('0xF7C6792D', vehicle, seatIndex);
    }
    ped_1.getLastInVehicleSeat = getLastInVehicleSeat;
    /**
     * No comment provided
     *
     * Hash: 0x2CE311A7 | Since: unknown
     */
    function getArmour(ped) {
        return Citizen.invokeNative('0x2CE311A7', ped);
    }
    ped_1.getArmour = getArmour;
    /**
     * No comment provided
     *
     * Hash: 0x63458C27 | Since: unknown
     */
    function getCauseOfDeath(ped) {
        return Citizen.invokeNative('0x63458C27', ped);
    }
    ped_1.getCauseOfDeath = getCauseOfDeath;
    /**
     * No comment provided
     *
     * Hash: 0xC182F76E | Since: unknown
     */
    function getDesiredHeading(ped) {
        return Citizen.invokeNative('0xC182F76E', ped);
    }
    ped_1.getDesiredHeading = getDesiredHeading;
    /**
     * No comment provided
     *
     * Hash: 0x388FDE9A | Since: unknown
     */
    function getInVehicleSeat(vehicle, seatIndex) {
        return Citizen.invokeNative('0x388FDE9A', vehicle, seatIndex);
    }
    ped_1.getInVehicleSeat = getInVehicleSeat;
    /**
     * No comment provided
     *
     * Hash: 0xA45B6C8D | Since: unknown
     */
    function getMaxHealth(ped) {
        return Citizen.invokeNative('0xA45B6C8D', ped);
    }
    ped_1.getMaxHealth = getMaxHealth;
    /**
     * Gets the current relationship group hash of a ped.
     *
     * Hash: 0x354F283C | Since: unknown
     */
    function getRelationshipGroupHash(ped) {
        return Citizen.invokeNative('0x354F283C', ped);
    }
    ped_1.getRelationshipGroupHash = getRelationshipGroupHash;
    /**
     * Gets the script task command currently assigned to the ped.
     *
     * Hash: 0x84FE084 | Since: unknown
     */
    function getScriptTaskCommand(ped) {
        return Citizen.invokeNative('0x84FE084', ped);
    }
    ped_1.getScriptTaskCommand = getScriptTaskCommand;
    /**
     * Gets the stage of the peds scripted task.
     *
     * Hash: 0x44B0E5E2 | Since: unknown
     */
    function getScriptTaskStage(ped) {
        return Citizen.invokeNative('0x44B0E5E2', ped);
    }
    ped_1.getScriptTaskStage = getScriptTaskStage;
    /**
     * Get the last entity that damaged the ped. This native is used server side when using OneSync.
     *
     * Hash: 0x535DB43F | Since: unknown
     */
    function getSourceOfDamage(ped) {
        return Citizen.invokeNative('0x535DB43F', ped);
    }
    ped_1.getSourceOfDamage = getSourceOfDamage;
    /**
     * Get the entity that killed the ped. This native is used server side when using OneSync.
     *
     * Hash: 0x84ADF9EB | Since: unknown
     */
    function getSourceOfDeath(ped) {
        return Citizen.invokeNative('0x84ADF9EB', ped);
    }
    ped_1.getSourceOfDeath = getSourceOfDeath;
    /**
     * Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes.
     * A ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.
     *
     * Hash: 0x7F4563D3 | Since: unknown
     */
    function getSpecificTaskType(ped, index) {
        return Citizen.invokeNative('0x7F4563D3', ped, index);
    }
    ped_1.getSpecificTaskType = getSpecificTaskType;
    /**
     * No comment provided
     *
     * Hash: 0x40321B83 | Since: unknown
     */
    function getStealthMovement(ped) {
        return Citizen.invokeNative('0x40321B83', ped);
    }
    ped_1.getStealthMovement = getStealthMovement;
    /**
     * An alias of [GET_CURRENT_PED_WEAPON](#\_0xB0237302).
     *
     * Note, the client-side [GET_SELECTED_PED_WEAPON](#\_0x0A6DB4965674D243) native returns the weapon selected via the HUD (weapon wheel). This data is not available to FXServer.
     *
     * Hash: 0xD240123E | Since: unknown
     */
    function getSelectedWeapon(ped) {
        return Citizen.invokeNative('0xD240123E', ped);
    }
    ped_1.getSelectedWeapon = getSelectedWeapon;
    /**
     * No comment provided
     *
     * Hash: 0x25865633 | Since: unknown
     */
    function isHandcuffed(ped) {
        return Citizen.invokeNative('0x25865633', ped);
    }
    ped_1.isHandcuffed = isHandcuffed;
    /**
     * No comment provided
     *
     * Hash: 0xC833BBE1 | Since: unknown
     */
    function isRagdoll(ped) {
        return Citizen.invokeNative('0xC833BBE1', ped);
    }
    ped_1.isRagdoll = isRagdoll;
    /**
     * No comment provided
     *
     * Hash: 0xEFEED13C | Since: unknown
     */
    function isStrafing(ped) {
        return Citizen.invokeNative('0xEFEED13C', ped);
    }
    ped_1.isStrafing = isStrafing;
    /**
     * No comment provided
     *
     * Hash: 0x5AE7EDA2 | Since: unknown
     */
    function isUsingActionMode(ped) {
        return Citizen.invokeNative('0x5AE7EDA2', ped);
    }
    ped_1.isUsingActionMode = isUsingActionMode;
    /**
     * SET_CURRENT_PED_WEAPON
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_CURRENT_PED_WEAPON](?\_0xADF692B254977C0C).</strong>
     *
     * Hash: 0xB8278882 | Since: unknown
     */
    function setCurrentWeapon(ped, weaponHash, bForceInHand) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0xB8278882', ped, weaponHash, bForceInHand);
    }
    ped_1.setCurrentWeapon = setCurrentWeapon;
    /**
     * ```
     * NativeDB Added Parameter 4: BOOL p3
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_AMMO](?\_0x14E56BC5B5DB6A19).</strong>
     *
     * Hash: 0xBF90DF1A | Since: unknown
     */
    function setAmmo(ped, weaponHash, ammo) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0xBF90DF1A', ped, weaponHash, ammo);
    }
    ped_1.setAmmo = setAmmo;
    /**
     * ```
     * Sets the armor of the specified ped.
     * ped: The Ped to set the armor of.
     * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_ARMOUR](?\_0xCEA04D83135264CC).</strong>
     *
     * Hash: 0x4E3A0CC4 | Since: unknown
     */
    function setArmour(ped, amount) {
        Citizen.invokeNative('0x4E3A0CC4', ped, amount);
    }
    ped_1.setArmour = setArmour;
    /**
     * SET_PED_CAN_RAGDOLL
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_CAN_RAGDOLL](?\_0xB128377056A54E2A).</strong>
     *
     * Hash: 0xCF1384C4 | Since: unknown
     */
    function setCanRagdoll(ped, toggle) {
        Citizen.invokeNative('0xCF1384C4', ped, toggle);
    }
    ped_1.setCanRagdoll = setCanRagdoll;
    /**
     * This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.
     *
     * ### MP Freemode list of components
     *
     * **0**: Face
     * **1**: Mask
     * **2**: Hair
     * **3**: Torso
     * **4**: Leg
     * **5**: Parachute / bag
     * **6**: Shoes
     * **7**: Accessory
     * **8**: Undershirt
     * **9**: Kevlar
     * **10**: Badge
     * **11**: Torso 2
     * List of Component IDs
     *
     * ```cpp
     * // Components
     * enum ePedVarComp
     * {
     * PV_COMP_INVALID = 0xFFFFFFFF,
     * PV_COMP_HEAD = 0, // "HEAD"
     * PV_COMP_BERD = 1, // "BEARD"
     * PV_COMP_HAIR = 2, // "HAIR"
     * PV_COMP_UPPR = 3, // "UPPER"
     * PV_COMP_LOWR = 4, // "LOWER"
     * PV_COMP_HAND = 5, // "HAND"
     * PV_COMP_FEET = 6, // "FEET"
     * PV_COMP_TEEF = 7, // "TEETH"
     * PV_COMP_ACCS = 8, // "ACCESSORIES"
     * PV_COMP_TASK = 9, // "TASK"
     * PV_COMP_DECL = 10, // "DECL"
     * PV_COMP_JBIB = 11, // "JBIB"
     * PV_COMP_MAX = 12,
     * };
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_COMPONENT_VARIATION](?\_0x262B14F48D29DE80).</strong>
     *
     * Hash: 0xD4F7B05C | Since: unknown
     */
    function setComponentVariation(ped, componentId, drawableId, textureId, paletteId) {
        Citizen.invokeNative('0xD4F7B05C', ped, componentId, drawableId, textureId, paletteId);
    }
    ped_1.setComponentVariation = setComponentVariation;
    /**
     * ```cpp
     * // Potential names and hash collisions included as comments
     * enum ePedConfigFlags {
     * CPED_CONFIG_FLAG_CreatedByFactory = 0,
     * CPED_CONFIG_FLAG_CanBeShotInVehicle = 1,
     * CPED_CONFIG_FLAG_NoCriticalHits = 2,
     * CPED_CONFIG_FLAG_DrownsInWater = 3,
     * CPED_CONFIG_FLAG_DrownsInSinkingVehicle = 4,
     * CPED_CONFIG_FLAG_DiesInstantlyWhenSwimming = 5,
     * CPED_CONFIG_FLAG_HasBulletProofVest = 6,
     * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
     * CPED_CONFIG_FLAG_NeverFallOffSkis = 8,
     * CPED_CONFIG_FLAG_NeverEverTargetThisPed = 9,
     * CPED_CONFIG_FLAG_ThisPedIsATargetPriority = 10,
     * CPED_CONFIG_FLAG_TargettableWithNoLos = 11,
     * CPED_CONFIG_FLAG_DoesntListenToPlayerGroupCommands = 12,
     * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
     * CPED_CONFIG_FLAG_DoesntDropWeaponsWhenDead = 14,
     * CPED_CONFIG_FLAG_SetDelayedWeaponAsCurrent = 15,
     * CPED_CONFIG_FLAG_KeepTasksAfterCleanUp = 16,
     * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
     * CPED_CONFIG_FLAG_HasAScriptBrain = 18,
     * CPED_CONFIG_FLAG_WaitingForScriptBrainToLoad = 19,
     * CPED_CONFIG_FLAG_AllowMedicsToReviveMe = 20,
     * CPED_CONFIG_FLAG_MoneyHasBeenGivenByScript = 21,
     * CPED_CONFIG_FLAG_NotAllowedToCrouch = 22,
     * CPED_CONFIG_FLAG_DeathPickupsPersist = 23,
     * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
     * CPED_CONFIG_FLAG_ForceDieIfInjured = 25,
     * CPED_CONFIG_FLAG_DontDragMeOutCar = 26,
     * CPED_CONFIG_FLAG_StayInCarOnJack = 27,
     * CPED_CONFIG_FLAG_ForceDieInCar = 28,
     * CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
     * CPED_CONFIG_FLAG_WillRemainOnBoatAfterMissionEnds = 30,
     * CPED_CONFIG_FLAG_DontStoreAsPersistent = 31,
     * CPED_CONFIG_FLAG_WillFlyThroughWindscreen = 32,
     * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
     * CPED_CONFIG_FLAG_HasHelmet = 34,
     * CPED_CONFIG_FLAG_UseHelmet = 35,
     * CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
     * CPED_CONFIG_FLAG_HideInCutscene = 37,
     * CPED_CONFIG_FLAG_PedIsEnemyToPlayer = 38,
     * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
     * CPED_CONFIG_FLAG_PedGeneratesDeadBodyEvents = 40,
     * CPED_CONFIG_FLAG_DontAttackPlayerWithoutWantedLevel = 41,
     * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
     * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
     * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
     * CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
     * _0xDB115BFA = 46,
     * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
     * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
     * CPED_CONFIG_FLAG_BlockGroupPedAimedAtResponse = 49,
     * CPED_CONFIG_FLAG_WillFollowLeaderAnyMeans = 50,
     * CPED_CONFIG_FLAG_BlippedByScript = 51,
     * CPED_CONFIG_FLAG_DrawRadarVisualField = 52,
     * CPED_CONFIG_FLAG_StopWeaponFiringOnImpact = 53,
     * CPED_CONFIG_FLAG_DissableAutoFallOffTests = 54,
     * CPED_CONFIG_FLAG_SteerAroundDeadBodies = 55,
     * CPED_CONFIG_FLAG_ConstrainToNavMesh = 56,
     * CPED_CONFIG_FLAG_SyncingAnimatedProps = 57,
     * CPED_CONFIG_FLAG_IsFiring = 58,
     * CPED_CONFIG_FLAG_WasFiring = 59,
     * CPED_CONFIG_FLAG_IsStanding = 60,
     * CPED_CONFIG_FLAG_WasStanding = 61,
     * CPED_CONFIG_FLAG_InVehicle = 62,
     * CPED_CONFIG_FLAG_OnMount = 63,
     * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
     * CPED_CONFIG_FLAG_IsSwimming = 65,
     * CPED_CONFIG_FLAG_WasSwimming = 66,
     * CPED_CONFIG_FLAG_IsSkiing = 67,
     * CPED_CONFIG_FLAG_IsSitting = 68,
     * CPED_CONFIG_FLAG_KilledByStealth = 69,
     * CPED_CONFIG_FLAG_KilledByTakedown = 70,
     * CPED_CONFIG_FLAG_Knockedout = 71,
     * CPED_CONFIG_FLAG_ClearRadarBlipOnDeath = 72,
     * CPED_CONFIG_FLAG_JustGotOffTrain = 73,
     * CPED_CONFIG_FLAG_JustGotOnTrain = 74,
     * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
     * CPED_CONFIG_FLAG_IsInTheAir = 76,
     * CPED_CONFIG_FLAG_KnockedUpIntoAir = 77,
     * CPED_CONFIG_FLAG_IsAimingGun = 78,
     * CPED_CONFIG_FLAG_HasJustLeftCar = 79,
     * CPED_CONFIG_FLAG_TargetWhenInjuredAllowed = 80,
     * CPED_CONFIG_FLAG_CurrLeftFootCollNM = 81,
     * CPED_CONFIG_FLAG_PrevLeftFootCollNM = 82,
     * CPED_CONFIG_FLAG_CurrRightFootCollNM = 83,
     * CPED_CONFIG_FLAG_PrevRightFootCollNM = 84,
     * CPED_CONFIG_FLAG_HasBeenBumpedInCar = 85,
     * CPED_CONFIG_FLAG_InWaterTaskQuitToClimbLadder = 86,
     * CPED_CONFIG_FLAG_NMTwoHandedWeaponBothHandsConstrained = 87,
     * CPED_CONFIG_FLAG_CreatedBloodPoolTimer = 88,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact = 89,
     * CPED_CONFIG_FLAG_GroupPedFailedToEnterCover = 90,
     * CPED_CONFIG_FLAG_AlreadyChattedOnPhone = 91,
     * CPED_CONFIG_FLAG_AlreadyReactedToPedOnRoof = 92,
     * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
     * CPED_CONFIG_FLAG_BlockCoweringInCover = 94,
     * CPED_CONFIG_FLAG_BlockPeekingInCover = 95,
     * CPED_CONFIG_FLAG_JustLeftCarNotCheckedForDoors = 96,
     * CPED_CONFIG_FLAG_VaultFromCover = 97,
     * CPED_CONFIG_FLAG_AutoConversationLookAts = 98,
     * CPED_CONFIG_FLAG_UsingCrouchedPedCapsule = 99,
     * CPED_CONFIG_FLAG_HasDeadPedBeenReported = 100,
     * CPED_CONFIG_FLAG_ForcedAim = 101,
     * CPED_CONFIG_FLAG_SteersAroundPeds = 102,
     * CPED_CONFIG_FLAG_SteersAroundObjects = 103,
     * CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
     * CPED_CONFIG_FLAG_ForceReload = 105,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
     * CPED_CONFIG_FLAG_IsBeingDraggedToSafety = 111,
     * CPED_CONFIG_FLAG_HasBeenDraggedToSafety = 112,
     * CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
     * CPED_CONFIG_FLAG_ForceScriptControlledKnockout = 114,
     * CPED_CONFIG_FLAG_FallOutOfVehicleWhenKilled = 115,
     * CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
     * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
     * CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
     * CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
     * CPED_CONFIG_FLAG_IsHandCuffed = 120,
     * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
     * CPED_CONFIG_FLAG_DisableMelee = 122,
     * CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
     * CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
     * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME = 125,
     * CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
     * CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
     * CPED_CONFIG_FLAG_CanBeAgitated = 128,
     * CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
     * CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
     * CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
     * CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
     * CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
     * CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
     * CPED_CONFIG_FLAG_IsScuba = 135,
     * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
     * CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
     * CPED_CONFIG_FLAG_RidingTrain = 138,
     * CPED_CONFIG_FLAG_ArrestResult = 139,
     * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
     * CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
     * CPED_CONFIG_FLAG_BumpedByPlayerVehicle = 142,
     * CPED_CONFIG_FLAG_DodgedPlayerVehicle = 143,
     * CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
     * CPED_CONFIG_FLAG_NoCopWantedAggro = 145,
     * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
     * CPED_CONFIG_FLAG_StairsDetected = 147,
     * CPED_CONFIG_FLAG_SlopeDetected = 148,
     * CPED_CONFIG_FLAG_HelmetHasBeenShot = 149,
     * CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
     * CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
     * CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
     * CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
     * CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
     * CPED_CONFIG_FLAG_CanPerformArrest = 155,
     * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
     * CPED_CONFIG_FLAG_CanBeArrested = 157,
     * CPED_CONFIG_FLAG_MoverConstrictedByOpposingCollisions = 158,
     * CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject = 160,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromMelee = 161,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet = 162,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning = 163,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromFalling = 164,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet = 165,
     * CPED_CONFIG_FLAG_IsInjured = 166,
     * CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
     * CPED_CONFIG_FLAG_SwimmingTasksRunning = 168,
     * CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
     * CPED_CONFIG_FLAG_ForceDirectEntry = 170,
     * CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
     * CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
     * CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
     * CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
     * CPED_CONFIG_FLAG_PlayerInContactWithKinematicPed = 175,
     * CPED_CONFIG_FLAG_PlayerInContactWithSomethingOtherThanKinematicPed = 176,
     * CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
     * CPED_CONFIG_FLAG_AdditionalRappellingPed = 178,
     * CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
     * CPED_CONFIG_FLAG_IsInCustody = 180,
     * CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
     * CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
     * CPED_CONFIG_FLAG_IsAgitated = 183,
     * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
     * CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
     * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
     * CPED_CONFIG_FLAG_HasHurtStarted = 187,
     * CPED_CONFIG_FLAG_DisableHurt = 188,
     * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
     * CPED_CONFIG_FLAG_PedHadPhoneConversation = 190,
     * CPED_CONFIG_FLAG_BeganCrossingRoad = 191,
     * CPED_CONFIG_FLAG_WarpIntoLeadersVehicle = 192,
     * CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
     * CPED_CONFIG_FLAG_UsingScenario = 194,
     * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
     * CPED_CONFIG_FLAG_DontCollideWithKinematic = 196,
     * CPED_CONFIG_FLAG_ActivateOnSwitchFromLowPhysicsLod = 197,
     * CPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead = 198,
     * CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
     * CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
     * CPED_CONFIG_FLAG_UseDiminishingAmmoRate = 201,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
     * CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
     * CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
     * CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
     * CPED_CONFIG_FLAG_LowPhysicsLodMayPlaceOnNavMesh = 207,
     * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
     * CPED_CONFIG_FLAG_DodgedPlayer = 209,
     * CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
     * CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
     * CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
     * CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
     * CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
     * CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
     * CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
     * CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
     * CPED_CONFIG_FLAG_SteersAroundVehicles = 218,
     * CPED_CONFIG_FLAG_AllowPedInVehiclesOverrideTaskFlags = 219,
     * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
     * CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
     * CPED_CONFIG_FLAG_ScriptHasDisabledCollision = 222,
     * CPED_CONFIG_FLAG_UseAmbientModelScaling = 223,
     * CPED_CONFIG_FLAG_DontWatchFirstOnNextHurryAway = 224,
     * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
     * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
     * CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
     * CPED_CONFIG_FLAG_CanLosePropsOnDamage = 228,
     * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
     * CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
     * CPED_CONFIG_FLAG_HasShotBeenReactedToFromFront = 231,
     * CPED_CONFIG_FLAG_HasShotBeenReactedToFromBack = 232,
     * CPED_CONFIG_FLAG_HasShotBeenReactedToFromLeft = 233,
     * CPED_CONFIG_FLAG_HasShotBeenReactedToFromRight = 234,
     * CPED_CONFIG_FLAG_AllowBlockDeadPedRagdollActivation = 235,
     * CPED_CONFIG_FLAG_IsHoldingProp = 236,
     * CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
     * CPED_CONFIG_FLAG_ForcePlayNormalScenarioExitOnNextScriptCommand = 238,
     * CPED_CONFIG_FLAG_ForcePlayImmediateScenarioExitOnNextScriptCommand = 239,
     * CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
     * CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
     * CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
     * CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
     * CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
     * CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
     * CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
     * CPED_CONFIG_FLAG_InStrafeTransition = 247,
     * CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
     * CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
     * CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
     * CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
     * CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
     * CPED_CONFIG_FLAG_OnStairs = 253,
     * CPED_CONFIG_FLAG_SimulatingAiming = 254,
     * CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
     * CPED_CONFIG_FLAG_ParentCarIsBeingRemoved = 256,
     * CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
     * CPED_CONFIG_FLAG_CanLoseHelmetOnDamage = 258,
     * CPED_CONFIG_FLAG_NeverDoScenarioExitProbeChecks = 259,
     * CPED_CONFIG_FLAG_SuppressLowLODRagdollSwitchWhenCorpseSettles = 260,
     * CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
     * CPED_CONFIG_FLAG_JustLeftVehicleNeedsReset = 262,
     * CPED_CONFIG_FLAG_TeleportIfCantReachPlayer = 263,
     * CPED_CONFIG_FLAG_PedsInVehiclePositionNeedsReset = 264,
     * CPED_CONFIG_FLAG_PedsFullyInSeat = 265,
     * CPED_CONFIG_FLAG_AllowPlayerLockOnIfFriendly = 266,
     * CPED_CONFIG_FLAG_UseCameraHeadingForDesiredDirectionLockOnTest = 267,
     * CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
     * CPED_CONFIG_FLAG_OnStairSlope = 270,
     * CPED_CONFIG_FLAG_HasPlayedNMGetup = 271,
     * CPED_CONFIG_FLAG_DontBlipCop = 272,
     * CPED_CONFIG_FLAG_SpawnedAtExtendedRangeScenario = 273,
     * CPED_CONFIG_FLAG_WalkAlongsideLeaderWhenClose = 274,
     * CPED_CONFIG_FLAG_KillWhenTrapped = 275,
     * CPED_CONFIG_FLAG_EdgeDetected = 276,
     * CPED_CONFIG_FLAG_AlwaysWakeUpPhysicsOfIntersectedPeds = 277,
     * CPED_CONFIG_FLAG_EquippedAmbientLoadOutWeapon = 278,
     * CPED_CONFIG_FLAG_AvoidTearGas = 279,
     * CPED_CONFIG_FLAG_StoppedSpeechUponFreezing = 280,
     * CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
     * CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
     * CPED_CONFIG_FLAG_ThrownFromVehicleDueToExhaustion = 283,
     * CPED_CONFIG_FLAG_UpdateEnclosedSearchRegion = 284,
     * CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
     * CPED_CONFIG_FLAG_ShouldChargeNow = 286,
     * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
     * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
     * CPED_CONFIG_FLAG_AllowMinorReactionsAsMissionPed = 289,
     * CPED_CONFIG_FLAG_BlockDeadBodyShockingEventsWhenDead = 290,
     * CPED_CONFIG_FLAG_PedHasBeenSeen = 291,
     * CPED_CONFIG_FLAG_PedIsInReusePool = 292,
     * CPED_CONFIG_FLAG_PedWasReused = 293,
     * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
     * CPED_CONFIG_FLAG_MovedUsingLowLodPhysicsSinceLastActive = 295,
     * CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
     * CPED_CONFIG_FLAG_ForcePlayFleeScenarioExitOnNextScriptCommand = 297,
     * CPED_CONFIG_FLAG_JustBumpedIntoVehicle = 298,
     * CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
     * CPED_CONFIG_FLAG_ShouldThrowSmokeNow = 300,
     * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
     * CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
     * CPED_CONFIG_FLAG_CreatedByDispatch = 303,
     * CPED_CONFIG_FLAG_PointGunLeftHandSupporting = 304,
     * CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerPedImpact = 306,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromAiRagdollImpact = 307,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerRagdollImpact = 308,
     * CPED_CONFIG_FLAG_DisableQuadrupedSpring = 309,
     * CPED_CONFIG_FLAG_IsInCluster = 310,
     * CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
     * CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
     * CPED_CONFIG_FLAG_PreferInjuredGetup = 313,
     * CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
     * CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
     * CPED_CONFIG_FLAG_JackedAbandonedCar = 316,
     * CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
     * CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
     * CPED_CONFIG_FLAG_HasPortablePickupAttached = 319,
     * CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
     * CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
     * CPED_CONFIG_FLAG_HasHighHeels = 322,
     * CPED_CONFIG_FLAG_TreatAsAmbientPedForDriverLockOn = 323,
     * CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
     * CPED_CONFIG_FLAG_SpawnedAtScenario = 325,
     * CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
     * CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
     * CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
     * CPED_CONFIG_FLAG_DisableTalkTo = 329,
     * CPED_CONFIG_FLAG_DontBlip = 330,
     * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
     * CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
     * CPED_CONFIG_FLAG_ScriptForceNoTimesliceIntelligenceUpdate = 333,
     * CPED_CONFIG_FLAG_JackedOutOfMyVehicle = 334,
     * CPED_CONFIG_FLAG_WentIntoCombatAfterBeingJacked = 335,
     * CPED_CONFIG_FLAG_DontActivateRagdollForVehicleGrab = 336,
     * CPED_CONFIG_FLAG_ForcePackageCharacterCloth = 337,
     * CPED_CONFIG_FLAG_DontRemoveWithValidOrder = 338,
     * CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
     * CPED_CONFIG_FLAG_ForcedToStayInCoverDueToPlayerSwitch = 340,
     * CPED_CONFIG_FLAG_ForceProneCharacterCloth = 341,
     * CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
     * CPED_CONFIG_FLAG_InToStrafeTransition = 343,
     * CPED_CONFIG_FLAG_KilledByStandardMelee = 344,
     * CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
     * CPED_CONFIG_FLAG_ForcePlayDirectedNormalScenarioExitOnNextScriptCommand = 346,
     * CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
     * CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
     * CPED_CONFIG_FLAG_EquipJetpack = 349,
     * CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
     * CPED_CONFIG_FLAG_ScriptHasCompletelyDisabledCollision = 351,
     * CPED_CONFIG_FLAG_NeverDoScenarioNavChecks = 352,
     * CPED_CONFIG_FLAG_ForceSynchronousScenarioExitChecking = 353,
     * CPED_CONFIG_FLAG_ThrowingGrenadeWhileAiming = 354,
     * CPED_CONFIG_FLAG_HeadbobToRadioEnabled = 355,
     * CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
     * CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
     * CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
     * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
     * CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
     * CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
     * CPED_CONFIG_FLAG_HasReserveParachute = 362,
     * CPED_CONFIG_FLAG_UseReserveParachute = 363,
     * CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
     * CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
     * CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromSmokeGrenade = 367,
     * CPED_CONFIG_FLAG_LinkMBRToOwnerOnChain = 368,
     * CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayer = 369,
     * CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayerVehicle = 370,
     * CPED_CONFIG_FLAG_InFPSUnholsterTransition = 371,
     * CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
     * CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
     * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
     * CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
     * CPED_CONFIG_FLAG_UseFPSUnholsterTransitionDuringCombatRoll = 376,
     * CPED_CONFIG_FLAG_ExitingFPSCombatRoll = 377,
     * CPED_CONFIG_FLAG_ScriptHasControlOfPlayer = 378,
     * CPED_CONFIG_FLAG_PlayFPSIdleFidgetsForProjectile = 379,
     * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
     * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInAircraft = 381,
     * CPED_CONFIG_FLAG_WasPlayingFPSGetup = 382,
     * CPED_CONFIG_FLAG_WasPlayingFPSMeleeActionResult = 383,
     * CPED_CONFIG_FLAG_PreferNoPriorityRemoval = 384,
     * CPED_CONFIG_FLAG_FPSFidgetsAbortedOnFire = 385,
     * CPED_CONFIG_FLAG_ForceFPSIKWithUpperBodyAnim = 386,
     * CPED_CONFIG_FLAG_SwitchingCharactersInFirstPerson = 387,
     * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
     * CPED_CONFIG_FLAG_HasBareFeet = 389,
     * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
     * CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
     * CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
     * CPED_CONFIG_FLAG_ResetLastVehicleOnVehicleExit = 393,
     * CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
     * CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
     * CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
     * CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
     * CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
     * CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
     * CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
     * CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
     * CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
     * CPED_CONFIG_FLAG_ChangeFromPermanentToAmbientPopTypeOnMigration = 403,
     * CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
     * CPED_CONFIG_FLAG_UsingLowriderLeans = 405,
     * CPED_CONFIG_FLAG_UsingAlternateLowriderLeans = 406,
     * CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
     * CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
     * CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
     * CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
     * CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
     * CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
     * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
     * CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
     * CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
     * CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
     * CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
     * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
     * CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
     * CPED_CONFIG_FLAG_IsPerformingVehicleMelee = 420,
     * CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
     * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
     * CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamage = 423,
     * CPED_CONFIG_FLAG_AllowBikeAlternateAnimations = 424,
     * CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamageNonSynced = 425,
     * CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
     * CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
     * CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
     * CPED_CONFIG_FLAG_DisableStartEngine = 429,
     * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
     * CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
     * CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
     * CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
     * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
     * CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
     * CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
     * CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
     * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
     * CPED_CONFIG_FLAG_CreatedByConcealedPlayer = 439,
     * CPED_CONFIG_FLAG_PermanentlyDisablePotentialToBeWalkedIntoResponse = 440,
     * CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
     * CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
     * CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
     * CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
     * CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
     * CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
     * CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
     * CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
     * CPED_CONFIG_FLAG_FiresDummyRockets = 449,
     * CPED_CONFIG_FLAG_PedIsArresting = 450,
     * CPED_CONFIG_FLAG_IsDecoyPed = 451,
     * CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
     * CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
     * CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
     * CPED_CONFIG_FLAG_HitByTranqWeapon = 455,
     * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
     * CPED_CONFIG_FLAG_ForcedAimFromArrest = 457,
     * CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
     * _0x4376ABF2 = 459,
     * CPED_CONFIG_FLAG_RagdollFloatsIndefinitely = 460,
     * CPED_CONFIG_FLAG_BlockElectricWeaponDamage = 461,
     * _0x262A3B8E = 462,
     * _0x1AA79A25 = 463,
     * }
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_CONFIG_FLAG](?\_0x1913FE4CBF41C463).</strong>
     *
     * Hash: 0x9CFBE10D | Since: unknown
     */
    function setConfigFlag(ped, flagId, value) {
        Citizen.invokeNative('0x9CFBE10D', ped, flagId, value);
    }
    ped_1.setConfigFlag = setConfigFlag;
    /**
     * ```
     * Sets Ped Default Clothes
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_DEFAULT_COMPONENT_VARIATION](?\_0x45EEE61580806D63).</strong>
     *
     * Hash: 0xC866A984 | Since: unknown
     */
    function setDefaultComponentVariation(ped) {
        Citizen.invokeNative('0xC866A984', ped);
    }
    ped_1.setDefaultComponentVariation = setDefaultComponentVariation;
    /**
     * Sets the tint index for the hair on the specified ped.
     *
     * ```
     * NativeDB Introduced: v323
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_HAIR_TINT](?\_0x4CFFC65454C93A49).</strong>
     *
     * Hash: 0xA23FE32C | Since: unknown
     */
    function setHairTint(ped, colorID, highlightColorID) {
        Citizen.invokeNative('0xA23FE32C', ped, colorID, highlightColorID);
    }
    ped_1.setHairTint = setHairTint;
    /**
     * For more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.
     * <strong>Other information:</strong>
     * IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>
     * This native function is often called prior to calling natives such as:
     *
     * *   [`SetPedHairColor`](#\_0xA23FE32C)
     * *   [`SetPedHeadOverlayColor`](#\_0x78935A27)
     * *   [`SetPedHeadOverlay`](#\_0xD28DBA90)
     * *   [`SetPedFaceFeature`](#\_0x6C8D4458)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_BLEND_DATA](?\_0x9414E18B9434C2FE).</strong>
     *
     * Hash: 0x60746B88 | Since: unknown
     */
    function setHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) {
        Citizen.invokeNative('0x60746B88', ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
    }
    ped_1.setHeadBlendData = setHeadBlendData;
    /**
     * ```
     * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
     * overlayID       Part                  Index, to disable
     * 0               Blemishes             0 - 23, 255
     * 1               Facial Hair           0 - 28, 255
     * 2               Eyebrows              0 - 33, 255
     * 3               Ageing                0 - 14, 255
     * 4               Makeup                0 - 74, 255
     * 5               Blush                 0 - 6, 255
     * 6               Complexion            0 - 11, 255
     * 7               Sun Damage            0 - 10, 255
     * 8               Lipstick              0 - 9, 255
     * 9               Moles/Freckles        0 - 17, 255
     * 10              Chest Hair            0 - 16, 255
     * 11              Body Blemishes        0 - 11, 255
     * 12              Add Body Blemishes    0 - 1, 255
     * ```
     *
     * <strong>Note:</strong>
     * You may need to call [`SetPedHeadBlendData`](#\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_HEAD_OVERLAY](?\_0x48F44967FA05CC1E).</strong>
     *
     * Hash: 0xD28DBA90 | Since: unknown
     */
    function setHeadOverlay(ped, overlayID, index, opacity) {
        Citizen.invokeNative('0xD28DBA90', ped, overlayID, index, opacity);
    }
    ped_1.setHeadOverlay = setHeadOverlay;
    /**
     * SET_PED_INTO_VEHICLE
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_INTO_VEHICLE](?\_0xF75B0D629E1C063D).</strong>
     *
     * Hash: 0x7500C79 | Since: unknown
     */
    function setIntoVehicle(ped, vehicle, seatIndex) {
        Citizen.invokeNative('0x7500C79', ped, vehicle, seatIndex);
    }
    ped_1.setIntoVehicle = setIntoVehicle;
    /**
     * This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.
     *
     * ### MP Freemode list of props
     *
     * **0**: Hats
     * **1**: Glasses
     * **2**: Ears
     * **6**: Watches
     * **7**: Bracelets
     * List of Prop IDs
     *
     * ```cpp
     * enum eAnchorPoints
     * {
     * ANCHOR_HEAD = 0, // "p_head"
     * ANCHOR_EYES = 1, // "p_eyes"
     * ANCHOR_EARS = 2, // "p_ears"
     * ANCHOR_MOUTH = 3, // "p_mouth"
     * ANCHOR_LEFT_HAND = 4, // "p_lhand"
     * ANCHOR_RIGHT_HAND = 5, // "p_rhand"
     * ANCHOR_LEFT_WRIST = 6, // "p_lwrist"
     * ANCHOR_RIGHT_WRIST = 7, // "p_rwrist"
     * ANCHOR_HIP = 8, // "p_lhip"
     * ANCHOR_LEFT_FOOT = 9, // "p_lfoot"
     * ANCHOR_RIGHT_FOOT = 10, // "p_rfoot"
     * ANCHOR_PH_L_HAND = 11, // "ph_lhand"
     * ANCHOR_PH_R_HAND = 12, // "ph_rhand"
     * NUM_ANCHORS = 13,
     * };
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_PROP_INDEX](?\_0x93376B65A266EB5F).</strong>
     *
     * Hash: 0x829F2E2 | Since: unknown
     */
    function setPropIndex(ped, componentId, drawableId, textureId, attach) {
        Citizen.invokeNative('0x829F2E2', ped, componentId, drawableId, textureId, attach);
    }
    ped_1.setPropIndex = setPropIndex;
    /**
     * ```
     * p1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_COMPONENT_VARIATION](?\_0xC8A9481A01E63C28).</strong>
     *
     * Hash: 0x4111BA46 | Since: unknown
     */
    function setRandomComponentVariation(ped) {
        Citizen.invokeNative('0x4111BA46', ped, 0);
    }
    ped_1.setRandomComponentVariation = setRandomComponentVariation;
    /**
     * SET_PED_RANDOM_PROPS
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_RANDOM_PROPS](?\_0xC44AA05345C992C6).</strong>
     *
     * Hash: 0xE3318E0E | Since: unknown
     */
    function setRandomProps(ped) {
        Citizen.invokeNative('0xE3318E0E', ped);
    }
    ped_1.setRandomProps = setRandomProps;
    /**
     * `PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);`
     * Known values:
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_RESET_FLAG](?\_0xC1E8A365BF3B29F2).</strong>
     *
     * Hash: 0xCFF6FF66 | Since: unknown
     */
    function setResetFlag(ped, flagId, doReset) {
        Citizen.invokeNative('0xCFF6FF66', ped, flagId, doReset);
    }
    ped_1.setResetFlag = setResetFlag;
    /**
     * p4/p5: Unusued in TU27
     *
     * ### Ragdoll Types
     *
     * **0**: CTaskNMRelax
     * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
     * **Else**: CTaskNMBalance
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL](?\_0xAE99FB955581844A).</strong>
     *
     * Hash: 0x83CB5052 | Since: unknown
     */
    function setToRagdoll(ped, minTime, maxTime, ragdollType, bAbortIfInjured, bAbortIfDead, bForceScriptControl) {
        Citizen.invokeNative('0x83CB5052', ped, minTime, maxTime, ragdollType, bAbortIfInjured, bAbortIfDead, bForceScriptControl);
    }
    ped_1.setToRagdoll = setToRagdoll;
    /**
     * ```cpp
     * enum eNMFallType {
     * TYPE_FROM_HIGH = 0,
     * TYPE_OVER_WALL = 1,
     * TYPE_DOWN_STAIRS = 2,
     * TYPE_DIE_TYPES = 3,
     * TYPE_DIE_FROM_HIGH = 4,
     * TYPE_DIE_OVER_WALL = 5,
     * TYPE_DIE_DOWN_STAIRS = 6
     * }
     * ```
     *
     * ```
     * Return variable is never used in R*'s scripts.
     * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
     * x, y, and z are coordinates, most likely to where the ped will fall.
     * p7 is probably the force of the fall, but untested, so I left the variable name the same.
     * p8 to p13 are always 0f in R*'s scripts.
     * (Simplified) Example of the usage of the function from R*'s scripts:
     * `ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);`
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PED_TO_RAGDOLL_WITH_FALL](?\_0xD76632D99E4966C8).</strong>
     *
     * Hash: 0xFA12E286 | Since: unknown
     */
    function setToRagdollWithFall(ped, minTime, maxTime, nFallType, dirX, dirY, dirZ, fGroundHeight, grab1X, grab1Y, grab1Z, grab2X, grab2Y, grab2Z) {
        Citizen.invokeNative('0xFA12E286', ped, minTime, maxTime, nFallType, dirX, dirY, dirZ, fGroundHeight, grab1X, grab1Y, grab1Z, grab2X, grab2Y, grab2Z);
    }
    ped_1.setToRagdollWithFall = setToRagdollWithFall;
    /**
     * Used for freemode (online) characters.
     * Indices:
     *
     * 1.  black
     * 2.  very light blue/green
     * 3.  dark blue
     * 4.  brown
     * 5.  darker brown
     * 6.  light brown
     * 7.  blue
     * 8.  light blue
     * 9.  pink
     * 10. yellow
     * 11. purple
     * 12. black
     * 13. dark green
     * 14. light brown
     * 15. yellow/black pattern
     * 16. light colored spiral pattern
     * 17. shiny red
     * 18. shiny half blue/half red
     * 19. half black/half light blue
     * 20. white/red perimter
     * 21. green snake
     * 22. red snake
     * 23. dark blue snake
     * 24. dark yellow
     * 25. bright yellow
     * 26. all black
     * 27. red small pupil
     * 28. devil blue/black
     * 29. white small pupil
     * 30. glossed over
     *
     * <strong>This is the server-side RPC native equivalent of the client native [\_SET_PED_EYE_COLOR](?\_0x50B56988B170AFDF).</strong>
     *
     * Hash: 0xEC09DB1B | Since: unknown
     */
    function setEyeColor(ped, index) {
        Citizen.invokeNative('0xEC09DB1B', ped, index);
    }
    ped_1.setEyeColor = setEyeColor;
    /**
     * Sets the various freemode face features, e.g. nose length, chin shape.
     * <strong>Indexes (From 0 to 19):</strong>
     * Parentheses indicate morph scale/direction as in (-1.0 to 1.0)
     *
     * *   **0**: Nose Width (Thin/Wide)
     * *   **1**: Nose Peak (Up/Down)
     * *   **2**: Nose Length (Long/Short)
     * *   **3**: Nose Bone Curveness (Crooked/Curved)
     * *   **4**: Nose Tip (Up/Down)
     * *   **5**: Nose Bone Twist (Left/Right)
     * *   **6**: Eyebrow (Up/Down)
     * *   **7**: Eyebrow (In/Out)
     * *   **8**: Cheek Bones (Up/Down)
     * *   **9**: Cheek Sideways Bone Size (In/Out)
     * *   **10**: Cheek Bones Width (Puffed/Gaunt)
     * *   **11**: Eye Opening (Both) (Wide/Squinted)
     * *   **12**: Lip Thickness (Both) (Fat/Thin)
     * *   **13**: Jaw Bone Width (Narrow/Wide)
     * *   **14**: Jaw Bone Shape (Round/Square)
     * *   **15**: Chin Bone (Up/Down)
     * *   **16**: Chin Bone Length (In/Out or Backward/Forward)
     * *   **17**: Chin Bone Shape (Pointed/Square)
     * *   **18**: Chin Hole (Chin Bum)
     * *   **19**: Neck Thickness (Thin/Thick)
     * <strong>Note:</strong>
     * You may need to call [`SetPedHeadBlendData`](#\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [\_SET_PED_FACE_FEATURE](?\_0x71A5C1DBA060049E).</strong>
     *
     * Hash: 0x6C8D4458 | Since: unknown
     */
    function setFaceFeature(ped, index, scale) {
        Citizen.invokeNative('0x6C8D4458', ped, index, scale);
    }
    ped_1.setFaceFeature = setFaceFeature;
    /**
     * ```
     * Used for freemode (online) characters.
     * Called after SET_PED_HEAD_OVERLAY().
     * ```
     *
     * <strong>Note:</strong>
     * You may need to call [`SetPedHeadBlendData`](#\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [\_SET_PED_HEAD_OVERLAY_COLOR](?\_0x497BF74A7B9CB952).</strong>
     *
     * Hash: 0x78935A27 | Since: unknown
     */
    function setHeadOverlayColor(ped, overlayID, colorType, colorID, secondColorID) {
        Citizen.invokeNative('0x78935A27', ped, overlayID, colorType, colorID, secondColorID);
    }
    ped_1.setHeadOverlayColor = setHeadOverlayColor;
    /**
     * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
     *
     * Hash: 0x5BA652A0CD14DF2F | Since: 323
     */
    function addArmourTo(ped, amount) {
        AddArmourToPed(ped, amount);
    }
    ped_1.addArmourTo = addArmourTo;
    /**
     * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
     *
     * collection - PedDecorationCollection filename hash
     * overlay - Item name hash
     *
     * Example:
     * Entry inside "mpbeach_overlays.xml" -
     * <Item>
     * <uvPos x="0.500000" y="0.500000" />
     * <scale x="0.600000" y="0.500000" />
     * <rotation value="0.000000" />
     * <nameHash>FM_Hair_Fuzz</nameHash>
     * <txdHash>mp_hair_fuzz</txdHash>
     * <txtHash>mp_hair_fuzz</txtHash>
     * <zone>ZONE_HEAD</zone>
     * <type>TYPE_TATTOO</type>
     * <faction>FM</faction>
     * <garment>All</garment>
     * <gender>GENDER_DONTCARE</gender>
     * <award />
     * <awardLevel />
     * </Item>
     *
     * Code:
     * `PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))`
     *
     * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
     *
     * Hash: 0x5F5D1665E352A839 | Since: 323
     */
    function addDecorationFromHashes(ped, collection, overlay) {
        if (typeof collection === 'string')
            collection = misc.getHashKey(collection);
        if (typeof overlay === 'string')
            overlay = misc.getHashKey(overlay);
        AddPedDecorationFromHashes(ped, collection, overlay);
    }
    ped_1.addDecorationFromHashes = addDecorationFromHashes;
    /**
     * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
     *
     * Hash: 0x5619BFA07CFD7833 | Since: 323
     */
    function addDecorationFromHashesInCorona(ped, collection, overlay) {
        if (typeof collection === 'string')
            collection = misc.getHashKey(collection);
        if (typeof overlay === 'string')
            overlay = misc.getHashKey(overlay);
        AddPedDecorationFromHashesInCorona(ped, collection, overlay);
    }
    ped_1.addDecorationFromHashesInCorona = addDecorationFromHashesInCorona;
    /**
     * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
     *
     * Hash: 0xF372BC22FCB88606 | Since: 323
     */
    function addRelationshipGroup(name) {
        return AddRelationshipGroup(name);
    }
    ped_1.addRelationshipGroup = addRelationshipGroup;
    /**
     * No comment provided
     *
     * Hash: 0x1B5C85C612E5256E | Since: 323
     */
    function addScenarioBlockingArea(x1, y1, z1, x2, y2, z2) {
        return AddScenarioBlockingArea(x1, y1, z1, x2, y2, z2, false, false, false, false, undefined);
    }
    ped_1.addScenarioBlockingArea = addScenarioBlockingArea;
    /**
     * damages a ped with the given amount
     *
     * Hash: 0x697157CED63F18D4 | Since: 323
     */
    function applyDamageTo(ped, damageAmount, weaponType) {
        if (typeof weaponType === 'string')
            weaponType = misc.getHashKey(weaponType);
        ApplyDamageToPed(ped, damageAmount, false, undefined, weaponType);
    }
    ped_1.applyDamageTo = applyDamageTo;
    /**
     * woundTypes:
     * - soak_splat
     * - wound_sheet
     * - BulletSmall
     * - BulletLarge
     * - ShotgunSmall
     * - ShotgunSmallMonolithic
     * - ShotgunLarge
     * - ShotgunLargeMonolithic
     * - NonFatalHeadshot
     * - stab
     * - BasicSlash
     * - Scripted_Ped_Splash_Back
     * - BackSplash
     *
     * Hash: 0x83F7E01C7B769A26 | Since: 323
     */
    function applyBlood(ped, boneIndex, rot, woundType) {
        ApplyPedBlood(ped, boneIndex, rot.x, rot.y, rot.z, woundType);
    }
    ped_1.applyBlood = applyBlood;
    /**
     * No comment provided
     *
     * Hash: 0x3311E47B91EDCBBC | Since: 323
     */
    function applyBloodByZone(ped) {
        ApplyPedBloodByZone(ped, 0, 0, 0, undefined);
    }
    ped_1.applyBloodByZone = applyBloodByZone;
    /**
     * No comment provided
     *
     * Hash: 0x816F6981C60BF53B | Since: 323
     */
    function applyBloodDamageByZone(ped) {
        ApplyPedBloodDamageByZone(ped, undefined, 0, 0, undefined);
    }
    ped_1.applyBloodDamageByZone = applyBloodDamageByZone;
    /**
     * No comment provided
     *
     * Hash: 0xEF0D582CBF2D9B0F | Since: 323
     */
    function applyBloodSpecific(ped) {
        ApplyPedBloodSpecific(ped, 0, 0, 0, 0, 0, 0, 0, undefined);
    }
    ped_1.applyBloodSpecific = applyBloodSpecific;
    /**
     * enum eDamageZone
     * {
     * DZ_Torso = 0,
     * DZ_Head,
     * DZ_LeftArm,
     * DZ_RightArm,
     * DZ_LeftLeg,
     * DZ_RightLeg,
     * };
     *
     * Decal Names:
     * scar
     * blushing
     * cs_flush_anger
     * cs_flush_anger_face
     * bruise
     * bruise_large
     * herpes
     * ArmorBullet
     * basic_dirt_cloth
     * basic_dirt_skin
     * cs_trev1_dirt
     *
     * APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
     *
     * Hash: 0x397C38AA7B4A5F83 | Since: 323
     */
    function applyDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName) {
        ApplyPedDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
    }
    ped_1.applyDamageDecal = applyDamageDecal;
    /**
     * Damage Packs:
     *
     * "SCR_TrevorTreeBang"
     * "HOSPITAL_0"
     * "HOSPITAL_1"
     * "HOSPITAL_2"
     * "HOSPITAL_3"
     * "HOSPITAL_4"
     * "HOSPITAL_5"
     * "HOSPITAL_6"
     * "HOSPITAL_7"
     * "HOSPITAL_8"
     * "HOSPITAL_9"
     * "SCR_Dumpster"
     * "BigHitByVehicle"
     * "SCR_Finale_Michael_Face"
     * "SCR_Franklin_finb"
     * "SCR_Finale_Michael"
     * "SCR_Franklin_finb2"
     * "Explosion_Med"
     * "SCR_Torture"
     * "SCR_TracySplash"
     * "Skin_Melee_0"
     *
     * Additional damage packs:
     *
     * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
     * Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
     *
     * Hash: 0x46DF918788CB093F | Since: 323
     */
    function applyDamagePack(ped, damagePack, damage, mult) {
        ApplyPedDamagePack(ped, damagePack, damage, mult);
    }
    ped_1.applyDamagePack = applyDamagePack;
    /**
     * No comment provided
     *
     * Hash: 0x272E4723B56A3B96 | Since: 323
     */
    function attachSynchronizedSceneToEntity(sceneID, entity, boneIndex) {
        AttachSynchronizedSceneToEntity(sceneID, entity, boneIndex);
    }
    ped_1.attachSynchronizedSceneToEntity = attachSynchronizedSceneToEntity;
    /**
     * No comment provided
     *
     * Hash: 0xE43A13C9E4CCCBCF | Since: 323
     */
    function blockFromGeneratingDeadBodyEventsWhenDead(ped, toggle) {
        BlockPedDeadBodyShockingEvents(ped, toggle);
    }
    ped_1.blockFromGeneratingDeadBodyEventsWhenDead = blockFromGeneratingDeadBodyEventsWhenDead;
    /**
     * No comment provided
     *
     * Hash: 0xEACEEDA81751915C | Since: 323
     */
    function canCreateRandomBikeRider() {
        return CanCreateRandomBikeRider();
    }
    ped_1.canCreateRandomBikeRider = canCreateRandomBikeRider;
    /**
     * No comment provided
     *
     * Hash: 0x5EE2CAFF7F17770D | Since: 323
     */
    function canCreateRandomCops() {
        return CanCreateRandomCops();
    }
    ped_1.canCreateRandomCops = canCreateRandomCops;
    /**
     * No comment provided
     *
     * Hash: 0xB8EB95E5B4E56978 | Since: 323
     */
    function canCreateRandomDriver() {
        return CanCreateRandomDriver();
    }
    ped_1.canCreateRandomDriver = canCreateRandomDriver;
    /**
     * No comment provided
     *
     * Hash: 0x3E8349C08E4B82E4 | Since: 323
     */
    function canCreateRandom() {
        return CanCreateRandomPed(false);
    }
    ped_1.canCreateRandom = canCreateRandom;
    /**
     * No comment provided
     *
     * Hash: 0x51AC07A44D4F5B8A | Since: 323
     */
    function canKnockOffVehicle(ped) {
        return CanKnockPedOffVehicle(ped);
    }
    ped_1.canKnockOffVehicle = canKnockOffVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xEAD42DE3610D0721 | Since: 323
     */
    function canInCombatSeeTarget(ped, target) {
        return CanPedInCombatSeeTarget(ped, target);
    }
    ped_1.canInCombatSeeTarget = canInCombatSeeTarget;
    /**
     * Prevents the ped from going limp.
     *
     * [Example: Can prevent peds from falling when standing on moving vehicles.]
     *
     * Hash: 0x128F79EDCECE4FD5 | Since: 323
     */
    function canRagdoll(ped) {
        return CanPedRagdoll(ped);
    }
    ped_1.canRagdoll = canRagdoll;
    /**
     * No comment provided
     *
     * Hash: 0x6CD5A433374D4CFB | Since: 323
     */
    function canSeeHatedPed(ped1, ped2) {
        return CanPedSeeHatedPed(ped1, ped2);
    }
    ped_1.canSeeHatedPed = canSeeHatedPed;
    /**
     * No comment provided
     *
     * Hash: 0x2DFC81C9B9608549 | Since: 944
     */
    function canShuffleToOrFromExtraSeat(ped) {
        return Citizen.invokeNative('0x2DFC81C9B9608549', ped);
    }
    ped_1.canShuffleToOrFromExtraSeat = canShuffleToOrFromExtraSeat;
    /**
     * No comment provided
     *
     * Hash: 0x9C6A6C19B6C0C496 | Since: 323
     */
    function canShuffleToOrFromTurretSeat(ped) {
        return Citizen.invokeNative('0x9C6A6C19B6C0C496', ped);
    }
    ped_1.canShuffleToOrFromTurretSeat = canShuffleToOrFromTurretSeat;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xCD8A7537A9B52F06 | Since: 323
     */
    function clearAllProps(ped) {
        ClearAllPedProps(ped, undefined);
    }
    ped_1.clearAllProps = clearAllProps;
    /**
     * No comment provided
     *
     * Hash: 0xE6CA85E7259CE16B | Since: 323
     */
    function clearAllVehicleForcedSeatUsage(ped) {
        ClearAllPedVehicleForcedSeatUsage(ped);
    }
    ped_1.clearAllVehicleForcedSeatUsage = clearAllVehicleForcedSeatUsage;
    /**
     * No comment provided
     *
     * Hash: 0x637822DC2AFEEBF8 | Since: 1493
     */
    function clearCoverPointFor(ped) {
        ClearFacialClipsetOverride(ped);
    }
    ped_1.clearCoverPointFor = clearCoverPointFor;
    /**
     * No comment provided
     *
     * Hash: 0x726256CC1EEB182F | Since: 323
     */
    function clearFacialIdleAnimOverride(ped) {
        ClearFacialIdleAnimOverride(ped);
    }
    ped_1.clearFacialIdleAnimOverride = clearFacialIdleAnimOverride;
    /**
     * No comment provided
     *
     * Hash: 0xD8D19675ED5FBDCE | Since: 323
     */
    function clearAlternateMovementAnim(ped, stance) {
        ClearPedAlternateMovementAnim(ped, stance, 0);
    }
    ped_1.clearAlternateMovementAnim = clearAlternateMovementAnim;
    /**
     * No comment provided
     *
     * Hash: 0x8844BBFCE30AA9E9 | Since: 323
     */
    function clearAlternateWalkAnim(ped) {
        ClearPedAlternateWalkAnim(ped, 0);
    }
    ped_1.clearAlternateWalkAnim = clearAlternateWalkAnim;
    /**
     * No comment provided
     *
     * Hash: 0x8FE22675A5A45817 | Since: 323
     */
    function clearBloodDamage(ped) {
        ClearPedBloodDamage(ped);
    }
    ped_1.clearBloodDamage = clearBloodDamage;
    /**
     * Somehow related to changing ped's clothes.
     *
     * Hash: 0x56E3B78C5408D9F4 | Since: 323
     */
    function clearBloodDamageByZone(ped) {
        ClearPedBloodDamageByZone(ped, 0);
    }
    ped_1.clearBloodDamageByZone = clearBloodDamageByZone;
    /**
     * p1: from 0 to 5 in the b617d scripts.
     * p2: "blushing" and "ALL" found in the b617d scripts.
     *
     * Hash: 0x523C79AEEFCC4A2A | Since: 323
     */
    function clearDamageDecalByZone(ped) {
        ClearPedDamageDecalByZone(ped, 0, undefined);
    }
    ped_1.clearDamageDecalByZone = clearDamageDecalByZone;
    /**
     * No comment provided
     *
     * Hash: 0x0E5173C163976E38 | Since: 323
     */
    function clearDecorations(ped) {
        ClearPedDecorations(ped);
    }
    ped_1.clearDecorations = clearDecorations;
    /**
     * No comment provided
     *
     * Hash: 0xE3B27E70CEAB9F0C | Since: 323
     */
    function clearDecorationsLeaveScars(ped) {
        ClearPedDecorationsLeaveScars(ped);
    }
    ped_1.clearDecorationsLeaveScars = clearDecorationsLeaveScars;
    /**
     * No comment provided
     *
     * Hash: 0x4AFE3690D7E0B5AC | Since: 323
     */
    function clearDriveByClipsetOverride(ped) {
        ClearPedDriveByClipsetOverride(ped);
    }
    ped_1.clearDriveByClipsetOverride = clearDriveByClipsetOverride;
    /**
     * No comment provided
     *
     * Hash: 0x6585D955A68452A5 | Since: 323
     */
    function clearEnvDirt(ped) {
        ClearPedEnvDirt(ped);
    }
    ped_1.clearEnvDirt = clearEnvDirt;
    /**
     * No comment provided
     *
     * Hash: 0x80054D7FCC70EEC6 | Since: 323
     */
    function clearFallUpperBodyClipsetOverride(ped) {
        Citizen.invokeNative('0x80054D7FCC70EEC6', ped);
    }
    ped_1.clearFallUpperBodyClipsetOverride = clearFallUpperBodyClipsetOverride;
    /**
     * No comment provided
     *
     * Hash: 0x8EF6B7AC68E2F01B | Since: 323
     */
    function clearLastDamageBone(ped) {
        ClearPedLastDamageBone(ped);
    }
    ped_1.clearLastDamageBone = clearLastDamageBone;
    /**
     * No comment provided
     *
     * Hash: 0xC79196DCB36F6121 | Since: 323
     */
    function clearMotionInCoverClipsetOverride(ped) {
        ClearPedCoverClipsetOverride(ped);
    }
    ped_1.clearMotionInCoverClipsetOverride = clearMotionInCoverClipsetOverride;
    /**
     * No comment provided
     *
     * Hash: 0x2E05208086BA0651 | Since: 323
     */
    function clearNonCreationArea() {
        ClearPedNonCreationArea();
    }
    ped_1.clearNonCreationArea = clearNonCreationArea;
    /**
     * No comment provided
     *
     * Hash: 0x1280804F7CFD2D6C | Since: 323
     */
    function clearParachutePackVariation(ped) {
        ClearPedParachutePackVariation(ped);
    }
    ped_1.clearParachutePackVariation = clearParachutePackVariation;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x0943E5B8E078E76E | Since: 323
     */
    function clearProp(ped, propId) {
        ClearPedProp(ped, propId, undefined);
    }
    ped_1.clearProp = clearProp;
    /**
     * Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
     *
     * Hash: 0xB50EB4CCB29704AC | Since: 323
     */
    function clearScubaGearVariation(ped) {
        ClearPedScubaGearVariation(ped);
    }
    ped_1.clearScubaGearVariation = clearScubaGearVariation;
    /**
     * No comment provided
     *
     * Hash: 0x687C0B594907D2E8 | Since: 323
     */
    function clearStoredHatProp(ped) {
        ClearPedStoredHatProp(ped);
    }
    ped_1.clearStoredHatProp = clearStoredHatProp;
    /**
     * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
     *
     * Hash: 0x9C720776DAA43E7E | Since: 323
     */
    function clearWetness(ped) {
        ClearPedWetness(ped);
    }
    ped_1.clearWetness = clearWetness;
    /**
     * See SET_RAGDOLL_BLOCKING_FLAGS for flags
     *
     * Hash: 0xD86D101FCFD00A4B | Since: 323
     */
    function clearRagdollBlockingFlags(ped, blockingFlag) {
        ClearRagdollBlockingFlags(ped, blockingFlag);
    }
    ped_1.clearRagdollBlockingFlags = clearRagdollBlockingFlags;
    /**
     * Clears the relationship between two groups. This should be called twice (once for each group).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     * (Credits: Inco)
     *
     * Example:
     * `PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);`
     * `PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);`
     *
     * Hash: 0x5E29243FB56FC6D4 | Since: 323
     */
    function clearRelationshipBetweenGroups(relationship, group1, group2) {
        if (typeof group1 === 'string')
            group1 = misc.getHashKey(group1);
        if (typeof group2 === 'string')
            group2 = misc.getHashKey(group2);
        ClearRelationshipBetweenGroups(relationship, group1, group2);
    }
    ped_1.clearRelationshipBetweenGroups = clearRelationshipBetweenGroups;
    /**
     * No comment provided
     *
     * Hash: 0xEF29A16337FACADB | Since: 323
     */
    function clone(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) {
        return ClonePed(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
    }
    ped_1.clone = clone;
    /**
     * No comment provided
     *
     * Hash: 0x668FD40BCBA5DE48 | Since: 463
     */
    function cloneAlt(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) {
        return ClonePedEx(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, false);
    }
    ped_1.cloneAlt = cloneAlt;
    /**
     * Copies ped's components and props to targetPed.
     *
     * Hash: 0xE952D6431689AD9A | Since: 323
     */
    function cloneToTarget(ped, targetPed) {
        ClonePedToTarget(ped, targetPed);
    }
    ped_1.cloneToTarget = cloneToTarget;
    /**
     * No comment provided
     *
     * Hash: 0x148B08C2D2ACB884 | Since: 463
     */
    function cloneToTargetAlt(ped, targetPed) {
        ClonePedToTargetEx(ped, targetPed, false);
    }
    ped_1.cloneToTargetAlt = cloneToTargetAlt;
    /**
     * No comment provided
     *
     * Hash: 0x5407B7288D0478B7 | Since: 323
     */
    function countsInCombatWithTarget(ped) {
        return Citizen.invokeNative('0x5407B7288D0478B7', ped);
    }
    ped_1.countsInCombatWithTarget = countsInCombatWithTarget;
    /**
     * No comment provided
     *
     * Hash: 0x336B3D200AB007CB | Since: 323
     */
    function countsInCombatWithTargetWithinRadius(ped, pos, radius) {
        return Citizen.invokeNative('0x336B3D200AB007CB', ped, pos.x, pos.y, pos.z, radius);
    }
    ped_1.countsInCombatWithTargetWithinRadius = countsInCombatWithTargetWithinRadius;
    /**
     * Creates a new ped group.
     * Groups can contain up to 8 peds.
     *
     * The parameter is unused.
     *
     * Returns a handle to the created group, or 0 if a group couldn't be created.
     *
     * Hash: 0x90370EBE0FEE1A3D | Since: 323
     */
    function createGroup(unused) {
        return CreateGroup(unused);
    }
    ped_1.createGroup = createGroup;
    /**
     * Creates a new NaturalMotion message.
     *
     * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
     * messageId: The ID of the NaturalMotion message.
     *
     * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
     *
     * Hash: 0x418EF2A1BCE56685 | Since: 323
     */
    function createNmMessage(startImmediately, messageId) {
        CreateNmMessage(startImmediately, messageId);
    }
    ped_1.createNmMessage = createNmMessage;
    /**
     * No comment provided
     *
     * Hash: 0x8C4F3BF23B6237DB | Since: 323
     */
    function createParachuteBagObject(ped) {
        return CreateParachuteBagObject(ped, false, false);
    }
    ped_1.createParachuteBagObject = createParachuteBagObject;
    /**
     * https://alloc8or.re/gta5/doc/enums/ePedType.txt
     *
     * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
     *
     * Hash: 0xD49F9B0955C367DE | Since: 323
     */
    function create(pedType, modelHash, pos, heading, isNetwork, bScriptHostPed) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePed(pedType, modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostPed);
    }
    ped_1.create = create;
    /**
     * pedType: see CREATE_PED
     *
     * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
     *
     * Hash: 0x7DD959874C1FD534 | Since: 323
     */
    function createInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePedInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);
    }
    ped_1.createInsideVehicle = createInsideVehicle;
    /**
     * vb.net
     * Dim ped_handle As Integer
     * With Game.Player.Character
     * Dim pos As Vector3 = .Position + .ForwardVector * 3
     * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
     * End With
     *
     * Creates a Ped at the specified location, returns the Ped Handle.
     * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
     *
     * Hash: 0xB4AC7D0CF06BFE8F | Since: 323
     */
    function createRandom(pos) {
        return CreateRandomPed(pos.x, pos.y, pos.z);
    }
    ped_1.createRandom = createRandom;
    /**
     * No comment provided
     *
     * Hash: 0x9B62392B474F44A0 | Since: 323
     */
    function createRandomAsDriver(vehicle, returnHandle) {
        return CreateRandomPedAsDriver(vehicle, returnHandle);
    }
    ped_1.createRandomAsDriver = createRandomAsDriver;
    /**
     * p6 always 2 (but it doesnt seem to matter...)
     *
     * roll and pitch 0
     * yaw to Ped.rotation
     *
     * Hash: 0x8C18E0F9080ADD73 | Since: 323
     */
    function createSynchronizedScene(pos, roll, pitch, yaw) {
        return CreateSynchronizedScene(pos.x, pos.y, pos.z, roll, pitch, yaw, 0);
    }
    ped_1.createSynchronizedScene = createSynchronizedScene;
    /**
     * No comment provided
     *
     * Hash: 0x62EC273D00187DCA | Since: 323
     */
    function createSynchronizedSceneAtMapObject(pos, radius, _object) {
        if (typeof _object === 'string')
            _object = misc.getHashKey(_object);
        return CreateSynchronizedScene2(pos.x, pos.y, pos.z, radius, _object);
    }
    ped_1.createSynchronizedSceneAtMapObject = createSynchronizedSceneAtMapObject;
    /**
     * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0x9614299DCB53E54B | Since: 323
     */
    function deletePed(ped) {
        DeletePed(ped);
    }
    ped_1.deletePed = deletePed;
    /**
     * No comment provided
     *
     * Hash: 0x6D38F1F04CBB37EA | Since: 323
     */
    function detachSynchronizedScene(sceneID) {
        DetachSynchronizedScene(sceneID);
    }
    ped_1.detachSynchronizedScene = detachSynchronizedScene;
    /**
     * No comment provided
     *
     * Hash: 0xA21C118553BBDF02 | Since: 323
     */
    function disableHeadBlendPaletteColor(ped) {
        DisableHeadBlendPaletteColor(ped);
    }
    ped_1.disableHeadBlendPaletteColor = disableHeadBlendPaletteColor;
    /**
     * No comment provided
     *
     * Hash: 0x600048C60D5C2C51 | Since: 323
     */
    function disableHeatscaleOverride(ped) {
        DisablePedHeatscaleOverride(ped);
    }
    ped_1.disableHeatscaleOverride = disableHeatscaleOverride;
    /**
     * No comment provided
     *
     * Hash: 0x733C87D4CE22BEA2 | Since: 323
     */
    function disableInjuredOnGroundBehaviour(ped) {
        Citizen.invokeNative('0x733C87D4CE22BEA2', ped);
    }
    ped_1.disableInjuredOnGroundBehaviour = disableInjuredOnGroundBehaviour;
    /**
     * No comment provided
     *
     * Hash: 0x7C6B0C22F9F40BBE | Since: 323
     */
    function doesGroupExist(groupId) {
        return DoesGroupExist(groupId);
    }
    ped_1.doesGroupExist = doesGroupExist;
    /**
     * No comment provided
     *
     * Hash: 0xCC6E3B6BB69501F1 | Since: 505
     */
    function doesRelationshipGroupExist(groupHash) {
        if (typeof groupHash === 'string')
            groupHash = misc.getHashKey(groupHash);
        return DoesRelationshipGroupExist(groupHash);
    }
    ped_1.doesRelationshipGroupExist = doesRelationshipGroupExist;
    /**
     * No comment provided
     *
     * Hash: 0x8A24B067D175A7BD | Since: 678
     */
    function doesScenarioBlockingAreaExists(x1, y1, z1, x2, y2, z2) {
        return DoesScenarioBlockingAreaExist(x1, y1, z1, x2, y2, z2);
    }
    ped_1.doesScenarioBlockingAreaExists = doesScenarioBlockingAreaExists;
    /**
     * No comment provided
     *
     * Hash: 0xAFF4710E2A0A6C12 | Since: 323
     */
    function dropAmbientProp(ped) {
        DropAmbientProp(ped);
    }
    ped_1.dropAmbientProp = dropAmbientProp;
    /**
     * No comment provided
     *
     * Hash: 0xEE2476B9EE4A094F | Since: 1493
     */
    function enableMpLight(ped, toggle) {
        SetEnableScubaGearLight(ped, toggle);
    }
    ped_1.enableMpLight = enableMpLight;
    /**
     * Forces the ped to fall back and kills it.
     *
     * It doesn't really explode the ped's head but it kills the ped
     *
     * Hash: 0x2D05CED3A38D0F3A | Since: 323
     */
    function explodeHead(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        ExplodePedHead(ped, weaponHash);
    }
    ped_1.explodeHead = explodeHead;
    /**
     * No comment provided
     *
     * Hash: 0x4668D80430D6C299 | Since: 323
     */
    function finalizeHeadBlend(ped) {
        FinalizeHeadBlend(ped);
    }
    ped_1.finalizeHeadBlend = finalizeHeadBlend;
    /**
     * No comment provided
     *
     * Hash: 0xFF287323B0E2C69A | Since: 323
     */
    function forceAllHeadingValuesToAlign(ped) {
        FreezePedCameraRotation(ped);
    }
    ped_1.forceAllHeadingValuesToAlign = forceAllHeadingValuesToAlign;
    /**
     * No comment provided
     *
     * Hash: 0xED3C76ADFA6D07C4 | Since: 323
     */
    function forceInstantLegIkSetup(ped) {
        Citizen.invokeNative('0xED3C76ADFA6D07C4', ped);
    }
    ped_1.forceInstantLegIkSetup = forceInstantLegIkSetup;
    /**
     * No comment provided
     *
     * Hash: 0x2208438012482A1A | Since: 323
     */
    function forceAiAndAnimationUpdate(ped) {
        ForcePedAiAndAnimationUpdate(ped, false, false);
    }
    ped_1.forceAiAndAnimationUpdate = forceAiAndAnimationUpdate;
    /**
     * Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.
     *
     * enum eMotionState // 0x92A659FE
     * {
     * MotionState_None = 0xEE717723,
     * MotionState_Idle = 0x9072A713,
     * MotionState_Walk = 0xD827C3DB,
     * MotionState_Run = 0xFFF7E7A4,
     * MotionState_Sprint = 0xBD8817DB,
     * MotionState_Crouch_Idle = 0x43FB099E,
     * MotionState_Crouch_Walk = 0x08C31A98,
     * MotionState_Crouch_Run = 0x3593CF09,
     * MotionState_DoNothing = 0x0EC17E58,
     * MotionState_AnimatedVelocity = 0x551AAC43,
     * MotionState_InVehicle = 0x94D9D58D,
     * MotionState_Aiming = 0x3F67C6AF,
     * MotionState_Diving_Idle = 0x4848CDED,
     * MotionState_Diving_Swim = 0x916E828C,
     * MotionState_Swimming_TreadWater = 0xD1BF11C7,
     * MotionState_Dead = 0x0DBB071C,
     * MotionState_Stealth_Idle = 0x422D7A25,
     * MotionState_Stealth_Walk = 0x042AB6A2,
     * MotionState_Stealth_Run = 0xFB0B79E1,
     * MotionState_Parachuting = 0xBAC0F10B,
     * MotionState_ActionMode_Idle = 0xDA40A0DC,
     * MotionState_ActionMode_Walk = 0xD2905EA7,
     * MotionState_ActionMode_Run = 0x31BADE14,
     * MotionState_Jetpack = 0x535E6A5E
     * };
     *
     * Hash: 0xF28965D04F570DCA | Since: 323
     */
    function forceMotionState(ped, motionStateHash) {
        if (typeof motionStateHash === 'string')
            motionStateHash = misc.getHashKey(motionStateHash);
        return ForcePedMotionState(ped, motionStateHash, false, 0, false);
    }
    ped_1.forceMotionState = forceMotionState;
    /**
     * No comment provided
     *
     * Hash: 0x16E42E800B472221 | Since: 323
     */
    function forceToOpenParachute(ped) {
        ForcePedToOpenParachute(ped);
    }
    ped_1.forceToOpenParachute = forceToOpenParachute;
    /**
     * No comment provided
     *
     * Hash: 0xD33DAA36272177C4 | Since: 323
     */
    function forceZeroMassInCollisions(ped) {
        Citizen.invokeNative('0xD33DAA36272177C4', ped);
    }
    ped_1.forceZeroMassInCollisions = forceZeroMassInCollisions;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xBE22B26DD764C040 | Since: 323
     */
    function getAnimInitialOffsetPosition(animDict, animName, pos, rot) {
        return new Vector3(GetAnimInitialOffsetPosition(animDict, animName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0));
    }
    ped_1.getAnimInitialOffsetPosition = getAnimInitialOffsetPosition;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x4B805E6046EE9E47 | Since: 323
     */
    function getAnimInitialOffsetRotation(animDict, animName, pos, rot) {
        return new Vector3(GetAnimInitialOffsetRotation(animDict, animName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, 0));
    }
    ped_1.getAnimInitialOffsetRotation = getAnimInitialOffsetRotation;
    /**
     * No comment provided
     *
     * Hash: 0x03EA03AF85A85CB7 | Since: 323
     */
    function getCanBeGrabbedByScript(ped) {
        return Citizen.invokeNative('0x03EA03AF85A85CB7', ped, false, false, false, false, false, false, false, undefined);
    }
    ped_1.getCanBeGrabbedByScript = getCanBeGrabbedByScript;
    /**
     * Gets the closest ped in a radius.
     *
     * Ped Types:
     * Any ped = -1
     * Player = 1
     * Male = 4
     * Female = 5
     * Cop = 6
     * Human = 26
     * SWAT = 27
     * Animal = 28
     * Army = 29
     *
     * ------------------
     * P4 P5 P7 P8
     * 1  0  x  x  = return nearest walking Ped
     * 1  x  0  x  = return nearest walking Ped
     * x  1  1  x  = return Ped you are using
     * 0  0  x  x  = no effect
     * 0  x  0  x  = no effect
     *
     * x = can be 1 or 0. Does not have any obvious changes.
     *
     * This function does not return ped who is:
     * 1. Standing still
     * 2. Driving
     * 3. Fleeing
     * 4. Attacking
     *
     * This function only work if the ped is:
     * 1. walking normally.
     * 2. waiting to cross a road.
     *
     * `Note: PED::GET_PED_NEARBY_PEDS works for more peds.`
     *
     * Hash: 0xC33AB876A77F8164 | Since: 323
     */
    function getClosest(pos, radius, pedType) {
        return GetClosestPed(pos.x, pos.y, pos.z, radius, false, false, false, false, pedType);
    }
    ped_1.getClosest = getClosest;
    /**
     * p0: Ped Handle
     * p1: int i | 0 <= i <= 27
     *
     * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
     *
     * <BlindFireChance value="0.1"/>
     * <WeaponShootRateModifier value="1.0"/>
     * <TimeBetweenBurstsInCover value="1.25"/>
     * <BurstDurationInCover value="2.0"/>
     * <TimeBetweenPeeks value="10.0"/>
     * <WeaponAccuracy value="0.18"/>
     * <FightProficiency value="0.8"/>
     * <StrafeWhenMovingChance value="1.0"/>
     * <WalkWhenStrafingChance value="0.0"/>
     * <AttackWindowDistanceForCover value="55.0"/>
     * <TimeToInvalidateInjuredTarget value="9.0"/>
     * <TriggerChargeTime_Near value="4.0"/>
     * <TriggerChargeTime_Far value="10.0"/>
     *
     * -------------Confirmed by editing combatbehavior.meta:
     * p1:
     * 0=BlindFireChance
     * 1=BurstDurationInCover
     * 3=TimeBetweenBurstsInCover
     * 4=TimeBetweenPeeks
     * 5=StrafeWhenMovingChance
     * 8=WalkWhenStrafingChance
     * 11=AttackWindowDistanceForCover
     * 12=TimeToInvalidateInjuredTarget
     * 16=OptimalCoverDistance
     *
     *
     * Hash: 0x52DFF8A10508090A | Since: 323
     */
    function getCombatFloat(ped) {
        return GetCombatFloat(ped, 0);
    }
    ped_1.getCombatFloat = getCombatFloat;
    /**
     * No comment provided
     *
     * Hash: 0xCD5003B097200F36 | Since: 323
     */
    function getDeadPickupCoords(ped) {
        return new Vector3(GetDeadPedPickupCoords(ped, 0, 0));
    }
    ped_1.getDeadPickupCoords = getDeadPickupCoords;
    /**
     * No comment provided
     *
     * Hash: 0xAAA6A3698A69E048 | Since: 323
     */
    function getDefaultSecondaryTintForBarber(colorID) {
        return Citizen.invokeNative('0xAAA6A3698A69E048', colorID);
    }
    ped_1.getDefaultSecondaryTintForBarber = getDefaultSecondaryTintForBarber;
    /**
     * No comment provided
     *
     * Hash: 0xEA9960D07DADCF10 | Since: 323
     */
    function getDefaultSecondaryTintForCreator(colorId) {
        return Citizen.invokeNative('0xEA9960D07DADCF10', colorId);
    }
    ped_1.getDefaultSecondaryTintForCreator = getDefaultSecondaryTintForCreator;
    /**
     * No comment provided
     *
     * Hash: 0xF033419D1B81FAE8 | Since: 323
     */
    function getFmFemaleShopApparelItemIndex() {
        return Citizen.invokeNative('0xF033419D1B81FAE8', 0);
    }
    ped_1.getFmFemaleShopApparelItemIndex = getFmFemaleShopApparelItemIndex;
    /**
     * No comment provided
     *
     * Hash: 0x1E77FA7A62EE6C4C | Since: 323
     */
    function getFmMaleShopApparelItemIndex() {
        return Citizen.invokeNative('0x1E77FA7A62EE6C4C', 0);
    }
    ped_1.getFmMaleShopApparelItemIndex = getFmMaleShopApparelItemIndex;
    /**
     * p1 may be a BOOL representing whether or not the group even exists
     *
     * Hash: 0x8DE69FE35CA09A45 | Since: 323
     */
    function getGroupSize(groupID) {
        return GetGroupSize(groupID);
    }
    ped_1.getGroupSize = getGroupSize;
    /**
     * A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
     *
     * Hash: 0x76BBA2CEE66D47E9 | Since: 1011
     */
    function getHeadBlendEyeColor(ped) {
        return GetPedEyeColor(ped);
    }
    ped_1.getHeadBlendEyeColor = getHeadBlendEyeColor;
    /**
     * No comment provided
     *
     * Hash: 0x5486A79D9FBD342D | Since: 323
     */
    function getJackTarget(ped) {
        return GetJackTarget(ped);
    }
    ped_1.getJackTarget = getJackTarget;
    /**
     * No comment provided
     *
     * Hash: 0x18A3E9EE1297FD39 | Since: 323
     */
    function getMeleeTargetFor(ped) {
        return GetMeleeTargetForPed(ped);
    }
    ped_1.getMeleeTargetFor = getMeleeTargetFor;
    /**
     *
     * Function just returns 0
     * void __fastcall ped__get_mount(NativeContext *a1)
     * {
     * NativeContext *v1; // rbx@1
     *
     * v1 = a1;
     * GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
     * v1->Returns->Item1= 0;
     * }
     *
     * Hash: 0xE7E11B8DCBED1058 | Since: 323
     */
    function getMount(ped) {
        return GetMount(ped);
    }
    ped_1.getMount = getMount;
    /**
     * No comment provided
     *
     * Hash: 0x88274C11CF0D866D | Since: 1493
     */
    function getMpLightEnabled(ped) {
        return IsScubaGearLightEnabled(ped);
    }
    ped_1.getMpLightEnabled = getMpLightEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x9E30E91FB03A2CAF | Since: 323
     */
    function getMpOutfitDataFromMetadata() {
        return Citizen.invokeNative('0x9E30E91FB03A2CAF');
    }
    ped_1.getMpOutfitDataFromMetadata = getMpOutfitDataFromMetadata;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x27561561732A7842 | Since: 323
     */
    function getNumberOfDrawableVariations(ped, componentId) {
        return GetNumberOfPedDrawableVariations(ped, componentId);
    }
    ped_1.getNumberOfDrawableVariations = getNumberOfDrawableVariations;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x5FAF9754E789FB47 | Since: 323
     */
    function getNumberOfPropDrawableVariations(ped, propId) {
        return GetNumberOfPedPropDrawableVariations(ped, propId);
    }
    ped_1.getNumberOfPropDrawableVariations = getNumberOfPropDrawableVariations;
    /**
     * Need to check behavior when drawableId = -1
     *
     * - Doofy.Ass
     * Why this function doesn't work and return nill value?
     * GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
     *
     * tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
     *
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xA6E7F1CEB523E171 | Since: 323
     */
    function getNumberOfPropTextureVariations(ped, propId, drawableId) {
        return GetNumberOfPedPropTextureVariations(ped, propId, drawableId);
    }
    ped_1.getNumberOfPropTextureVariations = getNumberOfPropTextureVariations;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x8F7156A3142A6BAD | Since: 323
     */
    function getNumberOfTextureVariations(ped, componentId, drawableId) {
        return GetNumberOfPedTextureVariations(ped, componentId, drawableId);
    }
    ped_1.getNumberOfTextureVariations = getNumberOfTextureVariations;
    /**
     * No comment provided
     *
     * Hash: 0xE5C0CF872C2AD150 | Since: 323
     */
    function getNumHairTints() {
        return GetNumHairColors();
    }
    ped_1.getNumHairTints = getNumHairTints;
    /**
     * No comment provided
     *
     * Hash: 0xD1F7CA1535D22818 | Since: 323
     */
    function getNumMakeupTints() {
        return GetNumMakeupColors();
    }
    ped_1.getNumMakeupTints = getNumMakeupTints;
    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0xDB4EACD4AD0A5D6B | Since: 323
     */
    function getheadshotTxdString(id) {
        return GetPedheadshotTxdString(id);
    }
    ped_1.getheadshotTxdString = getheadshotTxdString;
    /**
     * No comment provided
     *
     * Hash: 0x9B128DC36C1E04CF | Since: 323
     */
    function getsJacker(ped) {
        return GetPedsJacker(ped);
    }
    ped_1.getsJacker = getsJacker;
    /**
     * No comment provided
     *
     * Hash: 0x37F4AD56ECBC0CD6 | Since: 323
     */
    function getAccuracy(ped) {
        return GetPedAccuracy(ped);
    }
    ped_1.getAccuracy = getAccuracy;
    /**
     * Returns the ped's alertness (0-3).
     *
     * Values :
     *
     * 0 : Neutral
     * 1 : Heard something (gun shot, hit, etc)
     * 2 : Knows (the origin of the event)
     * 3 : Fully alerted (is facing the event?)
     *
     * If the Ped does not exist, returns -1.
     *
     * Hash: 0xF6AA118530443FD2 | Since: 323
     */
    function getAlertness(ped) {
        return GetPedAlertness(ped);
    }
    ped_1.getAlertness = getAlertness;
    /**
     * No comment provided
     *
     * Hash: 0x9483AF821605B1D8 | Since: 323
     */
    function getArmour(ped) {
        return GetPedArmour(ped);
    }
    ped_1.getArmour = getArmour;
    /**
     * No comment provided
     *
     * Hash: 0x5CCE68DBD5FE93EC | Since: 323
     */
    function getAsGroupLeader(groupID) {
        return GetPedAsGroupLeader(groupID);
    }
    ped_1.getAsGroupLeader = getAsGroupLeader;
    /**
     * from fm_mission_controller.c4 (variable names changed for clarity):
     *
     * `int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());`
     * `PED::GET_GROUP_SIZE(group, &unused, &groupSize);`
     * if (groupSize >= 1) {
     * . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
     * `. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);`
     * . . . . . . . . //and so on
     *
     * Hash: 0x51455483CF23ED97 | Since: 323
     */
    function getAsGroupMember(groupID, memberNumber) {
        return GetPedAsGroupMember(groupID, memberNumber);
    }
    ped_1.getAsGroupMember = getAsGroupMember;
    /**
     * Gets the position of the specified bone of the specified ped.
     *
     * ped: The ped to get the position of a bone from.
     * boneId: The ID of the bone to get the position from. This is NOT the index.
     * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
     * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
     * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
     *
     * Hash: 0x17C07FC640E86B4E | Since: 323
     */
    function getBoneCoords(ped, boneId, offsetX, offsetY, offsetZ) {
        return new Vector3(GetPedBoneCoords(ped, boneId, offsetX, offsetY, offsetZ));
    }
    ped_1.getBoneCoords = getBoneCoords;
    /**
     * no bone= -1
     *
     * boneIds:
     * SKEL_ROOT = 0x0,
     * SKEL_Pelvis = 0x2e28,
     * SKEL_L_Thigh = 0xe39f,
     * SKEL_L_Calf = 0xf9bb,
     * SKEL_L_Foot = 0x3779,
     * SKEL_L_Toe0 = 0x83c,
     * IK_L_Foot = 0xfedd,
     * PH_L_Foot = 0xe175,
     * MH_L_Knee = 0xb3fe,
     * SKEL_R_Thigh = 0xca72,
     * SKEL_R_Calf = 0x9000,
     * SKEL_R_Foot = 0xcc4d,
     * SKEL_R_Toe0 = 0x512d,
     * IK_R_Foot = 0x8aae,
     * PH_R_Foot = 0x60e6,
     * MH_R_Knee = 0x3fcf,
     * RB_L_ThighRoll = 0x5c57,
     * RB_R_ThighRoll = 0x192a,
     * SKEL_Spine_Root = 0xe0fd,
     * SKEL_Spine0 = 0x5c01,
     * SKEL_Spine1 = 0x60f0,
     * SKEL_Spine2 = 0x60f1,
     * SKEL_Spine3 = 0x60f2,
     * SKEL_L_Clavicle = 0xfcd9,
     * SKEL_L_UpperArm = 0xb1c5,
     * SKEL_L_Forearm = 0xeeeb,
     * SKEL_L_Hand = 0x49d9,
     * SKEL_L_Finger00 = 0x67f2,
     * SKEL_L_Finger01 = 0xff9,
     * SKEL_L_Finger02 = 0xffa,
     * SKEL_L_Finger10 = 0x67f3,
     * SKEL_L_Finger11 = 0x1049,
     * SKEL_L_Finger12 = 0x104a,
     * SKEL_L_Finger20 = 0x67f4,
     * SKEL_L_Finger21 = 0x1059,
     * SKEL_L_Finger22 = 0x105a,
     * SKEL_L_Finger30 = 0x67f5,
     * SKEL_L_Finger31 = 0x1029,
     * SKEL_L_Finger32 = 0x102a,
     * SKEL_L_Finger40 = 0x67f6,
     * SKEL_L_Finger41 = 0x1039,
     * SKEL_L_Finger42 = 0x103a,
     * PH_L_Hand = 0xeb95,
     * IK_L_Hand = 0x8cbd,
     * RB_L_ForeArmRoll = 0xee4f,
     * RB_L_ArmRoll = 0x1470,
     * MH_L_Elbow = 0x58b7,
     * SKEL_R_Clavicle = 0x29d2,
     * SKEL_R_UpperArm = 0x9d4d,
     * SKEL_R_Forearm = 0x6e5c,
     * SKEL_R_Hand = 0xdead,
     * SKEL_R_Finger00 = 0xe5f2,
     * SKEL_R_Finger01 = 0xfa10,
     * SKEL_R_Finger02 = 0xfa11,
     * SKEL_R_Finger10 = 0xe5f3,
     * SKEL_R_Finger11 = 0xfa60,
     * SKEL_R_Finger12 = 0xfa61,
     * SKEL_R_Finger20 = 0xe5f4,
     * SKEL_R_Finger21 = 0xfa70,
     * SKEL_R_Finger22 = 0xfa71,
     * SKEL_R_Finger30 = 0xe5f5,
     * SKEL_R_Finger31 = 0xfa40,
     * SKEL_R_Finger32 = 0xfa41,
     * SKEL_R_Finger40 = 0xe5f6,
     * SKEL_R_Finger41 = 0xfa50,
     * SKEL_R_Finger42 = 0xfa51,
     * PH_R_Hand = 0x6f06,
     * IK_R_Hand = 0x188e,
     * RB_R_ForeArmRoll = 0xab22,
     * RB_R_ArmRoll = 0x90ff,
     * MH_R_Elbow = 0xbb0,
     * SKEL_Neck_1 = 0x9995,
     * SKEL_Head = 0x796e,
     * IK_Head = 0x322c,
     * FACIAL_facialRoot = 0xfe2c,
     * FB_L_Brow_Out_000 = 0xe3db,
     * FB_L_Lid_Upper_000 = 0xb2b6,
     * FB_L_Eye_000 = 0x62ac,
     * FB_L_CheekBone_000 = 0x542e,
     * FB_L_Lip_Corner_000 = 0x74ac,
     * FB_R_Lid_Upper_000 = 0xaa10,
     * FB_R_Eye_000 = 0x6b52,
     * FB_R_CheekBone_000 = 0x4b88,
     * FB_R_Brow_Out_000 = 0x54c,
     * FB_R_Lip_Corner_000 = 0x2ba6,
     * FB_Brow_Centre_000 = 0x9149,
     * FB_UpperLipRoot_000 = 0x4ed2,
     * FB_UpperLip_000 = 0xf18f,
     * FB_L_Lip_Top_000 = 0x4f37,
     * FB_R_Lip_Top_000 = 0x4537,
     * FB_Jaw_000 = 0xb4a0,
     * FB_LowerLipRoot_000 = 0x4324,
     * FB_LowerLip_000 = 0x508f,
     * FB_L_Lip_Bot_000 = 0xb93b,
     * FB_R_Lip_Bot_000 = 0xc33b,
     * FB_Tongue_000 = 0xb987,
     * RB_Neck_1 = 0x8b93,
     * IK_Root = 0xdd1c
     *
     * Hash: 0x3F428D08BE5AAE31 | Since: 323
     */
    function getBoneIndex(ped, boneId) {
        return GetPedBoneIndex(ped, boneId);
    }
    ped_1.getBoneIndex = getBoneIndex;
    /**
     * Returns the hash of the weapon/model/object that killed the ped.
     *
     * Hash: 0x16FFE42AB2D2DC59 | Since: 323
     */
    function getCauseOfDeath(ped) {
        return GetPedCauseOfDeath(ped);
    }
    ped_1.getCauseOfDeath = getCauseOfDeath;
    /**
     * See SET_PED_COMBAT_MOVEMENT
     *
     * Hash: 0xDEA92412FCAEB3F5 | Since: 323
     */
    function getCombatMovement(ped) {
        return GetPedCombatMovement(ped);
    }
    ped_1.getCombatMovement = getCombatMovement;
    /**
     * See SET_PED_COMBAT_RANGE
     *
     * Hash: 0xF9D9F7F2DB8E2FA0 | Since: 323
     */
    function getCombatRange(ped) {
        return GetPedCombatRange(ped);
    }
    ped_1.getCombatRange = getCombatRange;
    /**
     * See SET_PED_CONFIG_FLAG
     *
     * Hash: 0x7EE53118C892B513 | Since: 323
     */
    function getConfigFlag(ped, flagId) {
        return GetPedConfigFlag(ped, flagId, false);
    }
    ped_1.getConfigFlag = getConfigFlag;
    /**
     * No comment provided
     *
     * Hash: 0xF60165E1D2C5370B | Since: 323
     */
    function getCurrentMoveBlendRatio(ped) {
        return GetPedCurrentMovementSpeed(ped);
    }
    ped_1.getCurrentMoveBlendRatio = getCurrentMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0x71EAB450D86954A1 | Since: 323
     */
    function getDecorationsState(ped) {
        return GetPedDecorationsState(ped);
    }
    ped_1.getDecorationsState = getDecorationsState;
    /**
     * Returns the zoneID for the overlay if it is a member of collection.
     * enum ePedDecorationZone
     * {
     * ZONE_TORSO = 0,
     * ZONE_HEAD = 1,
     * ZONE_LEFT_ARM = 2,
     * ZONE_RIGHT_ARM = 3,
     * ZONE_LEFT_LEG = 4,
     * ZONE_RIGHT_LEG = 5,
     * ZONE_MEDALS = 6,
     * ZONE_INVALID = 7
     * };
     *
     * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
     *
     * Hash: 0x9FD452BFBE7A7A8B | Since: 323
     */
    function getDecorationZoneFromHashes(collection, overlay) {
        if (typeof collection === 'string')
            collection = misc.getHashKey(collection);
        if (typeof overlay === 'string')
            overlay = misc.getHashKey(overlay);
        return GetPedDecorationZoneFromHashes(collection, overlay);
    }
    ped_1.getDecorationZoneFromHashes = getDecorationZoneFromHashes;
    /**
     * No comment provided
     *
     * Hash: 0x3C06B8786DD94CD1 | Since: 323
     */
    function getDefensiveAreaPosition(ped) {
        return new Vector3(GetPedDefensiveAreaPosition(ped, false));
    }
    ped_1.getDefensiveAreaPosition = getDefensiveAreaPosition;
    /**
     * No comment provided
     *
     * Hash: 0x65671A4FB8218930 | Since: 2699
     */
    function getDiesInWater(ped) {
        return GetPedDiesInWater(ped);
    }
    ped_1.getDiesInWater = getDiesInWater;
    /**
     * Ids
     * 0 - Head
     * 1 - Beard
     * 2 - Hair
     * 3 - Torso
     * 4 - Legs
     * 5 - Hands
     * 6 - Foot
     * 7 - ------
     * 8 - Accessories 1
     * 9 - Accessories 2
     * 10- Decals
     * 11 - Auxiliary parts for torso
     *
     * Hash: 0x67F3780DD425D4FC | Since: 323
     */
    function getDrawableVariation(ped, componentId) {
        return GetPedDrawableVariation(ped, componentId);
    }
    ped_1.getDrawableVariation = getDrawableVariation;
    /**
     * Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
     * Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
     *
     * Hash: 0x1461B28A06717D68 | Since: 944
     */
    function getEmissiveScale(ped) {
        return GetPedEmissiveIntensity(ped);
    }
    ped_1.getEmissiveScale = getEmissiveScale;
    /**
     * No comment provided
     *
     * Hash: 0x9C14D30395A51A3C | Since: 323
     */
    function getEnveffScale(ped) {
        return GetPedEnveffScale(ped);
    }
    ped_1.getEnveffScale = getEnveffScale;
    /**
     * Gets the offset the specified ped has moved since the previous tick.
     *
     * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
     *
     * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
     *
     * Hash: 0xE0AF41401ADF87E3 | Since: 323
     */
    function getExtractedDisplacement(ped, worldSpace) {
        return new Vector3(GetPedExtractedDisplacement(ped, worldSpace));
    }
    ped_1.getExtractedDisplacement = getExtractedDisplacement;
    /**
     * Returns the group id of which the specified ped is a member of.
     *
     * Hash: 0xF162E133B4E7A675 | Since: 323
     */
    function getGroupIndex(ped) {
        return GetPedGroupIndex(ped);
    }
    ped_1.getGroupIndex = getGroupIndex;
    /**
     * Input: Haircolor index, value between 0 and 63 (inclusive).
     * Output: RGB values for the haircolor specified in the input.
     *
     * This is used with the hair color swatches scaleform.
     * Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.
     *
     * Hash: 0x4852FC386E2E1BB5 | Since: 323
     */
    function getHairTintColor(hairColorIndex) {
        return GetPedHairRgbColor(hairColorIndex);
    }
    ped_1.getHairTintColor = getHairTintColor;
    /**
     * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
     * pass this struct in the second parameter
     * struct headBlendData
     * {
     * int shapeFirst;
     * int padding1;
     * int shapeSecond;
     * int padding2;
     * int shapeThird;
     * int padding3;
     * int skinFirst;
     * int padding4;
     * int skinSecond;
     * int padding5;
     * int skinThird;
     * int padding6;
     * float shapeMix;
     * int padding7;
     * float skinMix;
     * int padding8;
     * float thirdMix;
     * int padding9;
     * bool isParent;
     * };
     *
     * Hash: 0x2746BD9D88C5C5D0 | Since: 323
     */
    function getHeadBlendData(ped) {
        return GetPedHeadBlendData(ped);
    }
    ped_1.getHeadBlendData = getHeadBlendData;
    /**
     * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
     *
     * Used when calling SET_PED_HEAD_BLEND_DATA.
     *
     * Hash: 0x68D353AB88B97E0C | Since: 323
     */
    function getHeadBlendFirstIndex(_type) {
        return GetPedHeadBlendFirstIndex(_type);
    }
    ped_1.getHeadBlendFirstIndex = getHeadBlendFirstIndex;
    /**
     * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
     *
     * Hash: 0x5EF37013A6539C9D | Since: 323
     */
    function getHeadBlendNumHeads(_type) {
        return GetPedHeadBlendNumHeads(_type);
    }
    ped_1.getHeadBlendNumHeads = getHeadBlendNumHeads;
    /**
     * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
     *
     * This might be the once removed native GET_PED_HEAD_OVERLAY.
     *
     * Hash: 0xA60EF3B6461A4D43 | Since: 323
     */
    function getHeadOverlay(ped, overlayID) {
        return GetPedHeadOverlayValue(ped, overlayID);
    }
    ped_1.getHeadOverlay = getHeadOverlay;
    /**
     * No comment provided
     *
     * Hash: 0xCF1CE768BB43480E | Since: 323
     */
    function getHeadOverlayNum(overlayID) {
        return GetPedHeadOverlayNum(overlayID);
    }
    ped_1.getHeadOverlayNum = getHeadOverlayNum;
    /**
     * No comment provided
     *
     * Hash: 0x451294E859ECC018 | Since: 323
     */
    function getHelmetStoredHatPropIndex(ped) {
        return GetPedHelmetStoredHatPropIndex(ped);
    }
    ped_1.getHelmetStoredHatPropIndex = getHelmetStoredHatPropIndex;
    /**
     * No comment provided
     *
     * Hash: 0x9D728C1E12BF5518 | Since: 323
     */
    function getHelmetStoredHatTexIndex(ped) {
        return GetPedHelmetStoredHatTexIndex(ped);
    }
    ped_1.getHelmetStoredHatTexIndex = getHelmetStoredHatTexIndex;
    /**
     * No comment provided
     *
     * Hash: 0xD75960F6BD9EA49C | Since: 323
     */
    function getLastDamageBone(ped) {
        return GetPedLastDamageBone(ped);
    }
    ped_1.getLastDamageBone = getLastDamageBone;
    /**
     * Input: Makeup color index, value between 0 and 63 (inclusive).
     * Output: RGB values for the makeup color specified in the input.
     *
     * This is used with the makeup color swatches scaleform.
     * Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.
     *
     * Hash: 0x013E5CFC38CD5387 | Since: 323
     */
    function getMakeupTintColor(makeupColorIndex) {
        return GetPedMakeupRgbColor(makeupColorIndex);
    }
    ped_1.getMakeupTintColor = getMakeupTintColor;
    /**
     * No comment provided
     *
     * Hash: 0x4700A416E8324EF3 | Since: 323
     */
    function getMaxHealth(ped) {
        return GetPedMaxHealth(ped);
    }
    ped_1.getMaxHealth = getMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0x3F69145BBA87BAE7 | Since: 323
     */
    function getMoney(ped) {
        return GetPedMoney(ped);
    }
    ped_1.getMoney = getMoney;
    /**
     * sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
     * ignore - ped type to ignore
     *
     * Return value is the number of peds found and added to the array passed.
     *
     * -----------------------------------
     *
     * To make this work in most menu bases at least in C++ do it like so,
     *
     * Formatted Example: https://pastebin.com/D8an9wwp
     *
     * -----------------------------------
     *
     * Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
     *
     * Hash: 0x23F8F5FC7E8C4A6B | Since: 323
     */
    function getNearbyPeds(ped, ignore) {
        return GetPedNearbyPeds(ped, ignore);
    }
    ped_1.getNearbyPeds = getNearbyPeds;
    /**
     * Returns size of array, passed into the second variable.
     *
     * See below for usage information.
     *
     * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
     *
     * //Setup the array
     * const int numElements = 10;
     * const int arrSize = numElements * 2 + 2;
     * Any veh[arrSize];
     * //0 index is the size of the array
     * veh[0] = numElements;
     *
     * `int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);`
     *
     * if (veh != NULL)
     * {
     * //Simple loop to go through results
     * for (int i = 0; i < count; i++)
     * {
     * int offsettedID = i * 2 + 2;
     * //Make sure it exists
     * `if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))`
     * {
     * //Do something
     * }
     * }
     * }
     *
     * Hash: 0xCFF869CBFA210D82 | Since: 323
     */
    function getNearbyVehicles(ped) {
        return GetPedNearbyVehicles(ped);
    }
    ped_1.getNearbyVehicles = getNearbyVehicles;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xE3DD5F2A84B42281 | Since: 323
     */
    function getPaletteVariation(ped, componentId) {
        return GetPedPaletteVariation(ped, componentId);
    }
    ped_1.getPaletteVariation = getPaletteVariation;
    /**
     * -1: no landing
     * 0: landing on both feet
     * 1: stumbling
     * 2: rolling
     * 3: ragdoll
     *
     * Hash: 0x8B9F1FC6AE8166C0 | Since: 323
     */
    function getParachuteLandingType(ped) {
        return GetPedParachuteLandingType(ped);
    }
    ped_1.getParachuteLandingType = getParachuteLandingType;
    /**
     * Returns:
     *
     * -1: Normal
     * 0: Wearing parachute on back
     * 1: Parachute opening
     * 2: Parachute open
     * 3: Falling to doom (e.g. after exiting parachute)
     *
     * Normal means no parachute?
     *
     * Hash: 0x79CFD9827CC979B6 | Since: 323
     */
    function getParachuteState(ped) {
        return GetPedParachuteState(ped);
    }
    ped_1.getParachuteState = getParachuteState;
    /**
     * No comment provided
     *
     * Hash: 0xEAF5F7E5AE7C6C9D | Since: 323
     */
    function getParachuteTintIndex(ped) {
        return GetPedParachuteTintIndex(ped);
    }
    ped_1.getParachuteTintIndex = getParachuteTintIndex;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x898CC20EA75BACD8 | Since: 323
     */
    function getPropIndex(ped, componentId) {
        return GetPedPropIndex(ped, componentId, undefined);
    }
    ped_1.getPropIndex = getPropIndex;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xE131A28626F81AB2 | Since: 323
     */
    function getPropTextureIndex(ped, componentId) {
        return GetPedPropTextureIndex(ped, componentId);
    }
    ped_1.getPropTextureIndex = getPropTextureIndex;
    /**
     * No comment provided
     *
     * Hash: 0x2057EF813397A772 | Since: 323
     */
    function getRagdollBoneIndex(ped, bone) {
        return GetPedRagdollBoneIndex(ped, bone);
    }
    ped_1.getRagdollBoneIndex = getRagdollBoneIndex;
    /**
     * No comment provided
     *
     * Hash: 0x42FDD0F017B1E38E | Since: 323
     */
    function getRelationshipGroupDefaultHash(ped) {
        return GetPedRelationshipGroupDefaultHash(ped);
    }
    ped_1.getRelationshipGroupDefaultHash = getRelationshipGroupDefaultHash;
    /**
     * No comment provided
     *
     * Hash: 0x7DBDD04862D95F04 | Since: 323
     */
    function getRelationshipGroupHash(ped) {
        return GetPedRelationshipGroupHash(ped);
    }
    ped_1.getRelationshipGroupHash = getRelationshipGroupHash;
    /**
     * No comment provided
     *
     * Hash: 0xAF9E59B1B1FBF2A0 | Since: 323
     */
    function getResetFlag(ped, flagId) {
        return GetPedResetFlag(ped, flagId);
    }
    ped_1.getResetFlag = getResetFlag;
    /**
     * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
     *
     * Is best to check if the Ped is dead before asking for its killer.
     *
     * Hash: 0x93C8B64DEB84728C | Since: 323
     */
    function getSourceOfDeath(ped) {
        return GetPedSourceOfDeath(ped);
    }
    ped_1.getSourceOfDeath = getSourceOfDeath;
    /**
     * Returns whether the entity is in stealth mode
     *
     * Hash: 0x7C2AC9CA66575FBF | Since: 323
     */
    function getStealthMovement(ped) {
        return GetPedStealthMovement(ped);
    }
    ped_1.getStealthMovement = getStealthMovement;
    /**
     * No comment provided
     *
     * Hash: 0x32C27A11307B01CC | Since: 2372
     */
    function getTargetFromCombatPed(ped) {
        return GetPedTaskCombatTarget(ped, undefined);
    }
    ped_1.getTargetFromCombatPed = getTargetFromCombatPed;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x04A355E041E004E6 | Since: 323
     */
    function getTextureVariation(ped, componentId) {
        return GetPedTextureVariation(ped, componentId);
    }
    ped_1.getTextureVariation = getTextureVariation;
    /**
     * No comment provided
     *
     * Hash: 0x1E98817B311AE98A | Since: 323
     */
    function getTimeOfDeath(ped) {
        return GetPedTimeOfDeath(ped);
    }
    ped_1.getTimeOfDeath = getTimeOfDeath;
    /**
     * https://alloc8or.re/gta5/doc/enums/ePedType.txt
     *
     * Hash: 0xFF059E1E4C01E63C | Since: 323
     */
    function getType(ped) {
        return GetPedType(ped);
    }
    ped_1.getType = getType;
    /**
     * No comment provided
     *
     * Hash: 0xEF2C71A32CAD5FBD | Since: 1493
     */
    function getVisualFieldCenterAngle(ped) {
        return GetPedVisualFieldCenterAngle(ped);
    }
    ped_1.getVisualFieldCenterAngle = getVisualFieldCenterAngle;
    /**
     * No comment provided
     *
     * Hash: 0x6A3975DEA89F9A17 | Since: 323
     */
    function getPlayerIsFollowing(ped) {
        return GetPlayerPedIsFollowing(ped);
    }
    ped_1.getPlayerIsFollowing = getPlayerIsFollowing;
    /**
     * No comment provided
     *
     * Hash: 0xBA656A3BB01BDEA3 | Since: 2189
     */
    function getPosFromFiredEvent(ped, eventType) {
        return GetPedEventData(ped, eventType);
    }
    ped_1.getPosFromFiredEvent = getPosFromFiredEvent;
    /**
     * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
     *
     * Ped Types:
     * Any = -1
     * Player = 1
     * Male = 4
     * Female = 5
     * Cop = 6
     * Human = 26
     * SWAT = 27
     * Animal = 28
     * Army = 29
     *
     * Hash: 0x876046A8E3A4B71C | Since: 323
     */
    function getRandomAtCoord(pos, xRadius, yRadius, zRadius, pedType) {
        return GetRandomPedAtCoord(pos.x, pos.y, pos.z, xRadius, yRadius, zRadius, pedType);
    }
    ped_1.getRandomAtCoord = getRandomAtCoord;
    /**
     * Gets the relationship between two groups. This should be called twice (once for each group).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     *
     * Example:
     * `PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);`
     * `PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);`
     *
     * Hash: 0x9E6B70061662AE5C | Since: 323
     */
    function getRelationshipBetweenGroups(group1, group2) {
        if (typeof group1 === 'string')
            group1 = misc.getHashKey(group1);
        if (typeof group2 === 'string')
            group2 = misc.getHashKey(group2);
        return GetRelationshipBetweenGroups(group1, group2);
    }
    ped_1.getRelationshipBetweenGroups = getRelationshipBetweenGroups;
    /**
     * Gets the relationship between two peds. This should be called twice (once for each ped).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     * (Credits: Inco)
     *
     * Example:
     * `PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);`
     * `PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);`
     *
     * Hash: 0xEBA5AD3A0EAF7121 | Since: 323
     */
    function getRelationshipBetweens(ped1, ped2) {
        return GetRelationshipBetweenPeds(ped1, ped2);
    }
    ped_1.getRelationshipBetweens = getRelationshipBetweens;
    /**
     * No comment provided
     *
     * Hash: 0x6F4C85ACD641BCD2 | Since: 323
     */
    function getSeatIsTryingToEnter(ped) {
        return GetSeatPedIsTryingToEnter(ped);
    }
    ped_1.getSeatIsTryingToEnter = getSeatIsTryingToEnter;
    /**
     * No comment provided
     *
     * Hash: 0xE4A310B1D7FA73CC | Since: 323
     */
    function getSynchronizedScenePhase(sceneID) {
        return GetSynchronizedScenePhase(sceneID);
    }
    ped_1.getSynchronizedScenePhase = getSynchronizedScenePhase;
    /**
     * No comment provided
     *
     * Hash: 0xD80932D577274D40 | Since: 323
     */
    function getSynchronizedSceneRate(sceneID) {
        return GetSynchronizedSceneRate(sceneID);
    }
    ped_1.getSynchronizedSceneRate = getSynchronizedSceneRate;
    /**
     * No comment provided
     *
     * Hash: 0x36B77BB84687C318 | Since: 323
     */
    function getTimeDamagedByWeapon(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetTimeOfLastPedWeaponDamage(ped, weaponHash);
    }
    ped_1.getTimeDamagedByWeapon = getTimeDamagedByWeapon;
    /**
     * No comment provided
     *
     * Hash: 0xC56FBF2F228E1DAC | Since: 323
     */
    function getTintIndexForLastGenHairTexture(modelHash, drawableId, textureId) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0xC56FBF2F228E1DAC', modelHash, drawableId, textureId);
    }
    ped_1.getTintIndexForLastGenHairTexture = getTintIndexForLastGenHairTexture;
    /**
     * No comment provided
     *
     * Hash: 0x511F1A683387C7E2 | Since: 323
     */
    function getTrackedPixelcount(ped) {
        return Citizen.invokeNative('0x511F1A683387C7E2', ped);
    }
    ped_1.getTrackedPixelcount = getTrackedPixelcount;
    /**
     * No comment provided
     *
     * Hash: 0xF92691AED837A5FC | Since: 323
     */
    function getVehicleIsEntering(ped) {
        return GetVehiclePedIsEntering(ped);
    }
    ped_1.getVehicleIsEntering = getVehicleIsEntering;
    /**
     * Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
     *
     * Hash: 0x9A9112A0FE9A4713 | Since: 323
     */
    function getVehicleIsIn(ped, includeEntering) {
        return GetVehiclePedIsIn(ped, includeEntering);
    }
    ped_1.getVehicleIsIn = getVehicleIsIn;
    /**
     * No comment provided
     *
     * Hash: 0x814FA8BE5449445D | Since: 323
     */
    function getVehicleIsTryingToEnter(ped) {
        return GetVehiclePedIsTryingToEnter(ped);
    }
    ped_1.getVehicleIsTryingToEnter = getVehicleIsTryingToEnter;
    /**
     * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
     *
     * Hash: 0x6094AD011A2EA87D | Since: 323
     */
    function getVehicleIsUsing(ped) {
        return GetVehiclePedIsUsing(ped);
    }
    ped_1.getVehicleIsUsing = getVehicleIsUsing;
    /**
     * PoliceMotorcycleHelmet   1024
     * RegularMotorcycleHelmet   4096
     * FiremanHelmet 16384
     * PilotHeadset  32768
     * PilotHelmet   65536
     * --
     * p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
     *
     * Hash: 0x54C7C4A94367717E | Since: 323
     */
    function giveHelmet(ped, cannotRemove, helmetFlag, textureIndex) {
        GivePedHelmet(ped, cannotRemove, helmetFlag, textureIndex);
    }
    ped_1.giveHelmet = giveHelmet;
    /**
     * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
     *
     * If a message hasn't been created already, this function does nothing.
     * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
     * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
     *
     * Call order:
     * SET_PED_TO_RAGDOLL
     * CREATE_NM_MESSAGE
     * GIVE_PED_NM_MESSAGE
     *
     * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
     * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
     * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
     * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
     * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
     * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
     * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
     * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
     *
     * Hash: 0xB158DFCCC56E5C5B | Since: 323
     */
    function giveNmMessage(ped) {
        GivePedNmMessage(ped);
    }
    ped_1.giveNmMessage = giveNmMessage;
    /**
     * No comment provided
     *
     * Hash: 0xE4B5F4BF2CB24E65 | Since: 323
     */
    function hasActionModeAssetLoaded(asset) {
        return HasActionModeAssetLoaded(asset);
    }
    ped_1.hasActionModeAssetLoaded = hasActionModeAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x876928DDDFCCC9CD | Since: 323
     */
    function hasheadshotImgUploadFailed() {
        return HasPedheadshotImgUploadFailed();
    }
    ped_1.hasheadshotImgUploadFailed = hasheadshotImgUploadFailed;
    /**
     * No comment provided
     *
     * Hash: 0xE8A169E666CBC541 | Since: 323
     */
    function hasheadshotImgUploadSucceeded() {
        return HasPedheadshotImgUploadSucceeded();
    }
    ped_1.hasheadshotImgUploadSucceeded = hasheadshotImgUploadSucceeded;
    /**
     * No comment provided
     *
     * Hash: 0x654CD0A825161131 | Since: 323
     */
    function hasHeadBlendFinished(ped) {
        return HasPedHeadBlendFinished(ped);
    }
    ped_1.hasHeadBlendFinished = hasHeadBlendFinished;
    /**
     * No comment provided
     *
     * Hash: 0x784002A632822099 | Since: 323
     */
    function hasPreloadPropDataFinished(ped) {
        return HasPedPreloadPropDataFinished(ped);
    }
    ped_1.hasPreloadPropDataFinished = hasPreloadPropDataFinished;
    /**
     * No comment provided
     *
     * Hash: 0x66680A92700F43DF | Since: 323
     */
    function hasPreloadVariationDataFinished(ped) {
        return HasPedPreloadVariationDataFinished(ped);
    }
    ped_1.hasPreloadVariationDataFinished = hasPreloadVariationDataFinished;
    /**
     * No comment provided
     *
     * Hash: 0x8507BCB710FA6DC0 | Since: 323
     */
    function hasReceivedEvent(ped, eventId) {
        return HasPedReceivedEvent(ped, eventId);
    }
    ped_1.hasReceivedEvent = hasReceivedEvent;
    /**
     * No comment provided
     *
     * Hash: 0xE977FC5B08AF3441 | Since: 323
     */
    function hasStealthModeAssetLoaded(asset) {
        return HasStealthModeAssetLoaded(asset);
    }
    ped_1.hasStealthModeAssetLoaded = hasStealthModeAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x7350823473013C02 | Since: 323
     */
    function haveAllStreamingRequestsCompleted(ped) {
        return HaveAllStreamingRequestsCompleted(ped);
    }
    ped_1.haveAllStreamingRequestsCompleted = haveAllStreamingRequestsCompleted;
    /**
     * No comment provided
     *
     * Hash: 0x62AB793144DE75DC | Since: 323
     */
    function hideBloodDamageByZone(ped) {
        HidePedBloodDamageByZone(ped, undefined, false);
    }
    ped_1.hideBloodDamageByZone = hideBloodDamageByZone;
    /**
     * No comment provided
     *
     * Hash: 0x4759CC730F947C81 | Since: 323
     */
    function instantlyFillPopulation() {
        InstantlyFillPedPopulation();
    }
    ped_1.instantlyFillPopulation = instantlyFillPopulation;
    /**
     * No comment provided
     *
     * Hash: 0x68772DB2B2526F9F | Since: 323
     */
    function isAnyHostileNearPoint(ped, pos, radius) {
        return IsAnyHostilePedNearPoint(ped, pos.x, pos.y, pos.z, radius);
    }
    ped_1.isAnyHostileNearPoint = isAnyHostileNearPoint;
    /**
     * No comment provided
     *
     * Hash: 0x083961498679DC9F | Since: 323
     */
    function isAnyNearPoint(pos, radius) {
        return IsAnyPedNearPoint(pos.x, pos.y, pos.z, radius);
    }
    ped_1.isAnyNearPoint = isAnyNearPoint;
    /**
     * No comment provided
     *
     * Hash: 0xA0D3D71EA1086C55 | Since: 323
     */
    function isAnyShootingInArea(x1, y1, z1, x2, y2, z2) {
        return IsAnyPedShootingInArea(x1, y1, z1, x2, y2, z2, false, false);
    }
    ped_1.isAnyShootingInArea = isAnyShootingInArea;
    /**
     * No comment provided
     *
     * Hash: 0xE0A0AEC214B1FABA | Since: 323
     */
    function isConversationDead(ped) {
        return IsConversationPedDead(ped);
    }
    ped_1.isConversationDead = isConversationDead;
    /**
     * xyz - relative to the world origin.
     *
     * Hash: 0x16EC4839969F9F5E | Since: 323
     */
    function isCopInArea3d(x1, y1, z1, x2, y2, z2) {
        return IsCopPedInArea3d(x1, y1, z1, x2, y2, z2);
    }
    ped_1.isCopInArea3d = isCopInArea3d;
    /**
     * No comment provided
     *
     * Hash: 0xF2385935BFFD4D92 | Since: 323
     */
    function isCurrentHeadPropAHelmet() {
        return Citizen.invokeNative('0xF2385935BFFD4D92', undefined);
    }
    ped_1.isCurrentHeadPropAHelmet = isCurrentHeadPropAHelmet;
    /**
     * No comment provided
     *
     * Hash: 0xA3F3564A5B3646C0 | Since: 323
     */
    function isMobilePhoneToEar(ped) {
        return Citizen.invokeNative('0xA3F3564A5B3646C0', ped);
    }
    ped_1.isMobilePhoneToEar = isMobilePhoneToEar;
    /**
     * No comment provided
     *
     * Hash: 0xEBB376779A760AA8 | Since: 323
     */
    function isheadshotImgUploadAvailable() {
        return IsPedheadshotImgUploadAvailable();
    }
    ped_1.isheadshotImgUploadAvailable = isheadshotImgUploadAvailable;
    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0x7085228842B13A67 | Since: 323
     */
    function isheadshotReady(id) {
        return IsPedheadshotReady(id);
    }
    ped_1.isheadshotReady = isheadshotReady;
    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0xA0A9668F158129A2 | Since: 323
     */
    function isheadshotValid(id) {
        return IsPedheadshotValid(id);
    }
    ped_1.isheadshotValid = isheadshotValid;
    /**
     * No comment provided
     *
     * Hash: 0x3998B1276A3300E5 | Since: 323
     */
    function isAimingFromCover(ped) {
        return IsPedAimingFromCover(ped);
    }
    ped_1.isAimingFromCover = isAimingFromCover;
    /**
     * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
     *
     * Hash: 0x12534C348C6CB68B | Since: 323
     */
    function isAPlayer(ped) {
        return IsPedAPlayer(ped);
    }
    ped_1.isAPlayer = isAPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x9A497FE2DF198913 | Since: 323
     */
    function isBeingJacked(ped) {
        return IsPedBeingJacked(ped);
    }
    ped_1.isBeingJacked = isBeingJacked;
    /**
     * No comment provided
     *
     * Hash: 0x863B23EFDE9C5DF2 | Since: 323
     */
    function isBeingStealthKilled(ped) {
        return IsPedBeingStealthKilled(ped);
    }
    ped_1.isBeingStealthKilled = isBeingStealthKilled;
    /**
     * p1 is always 0
     *
     * Hash: 0x4FBACCE3B4138EE8 | Since: 323
     */
    function isBeingStunned(ped) {
        return IsPedBeingStunned(ped, 0);
    }
    ped_1.isBeingStunned = isBeingStunned;
    /**
     * No comment provided
     *
     * Hash: 0x09E7ECA981D9B210 | Since: 1290
     */
    function isBlushFacepaintTintForBarber(colorId) {
        return IsPedBodyBlemishValid(colorId);
    }
    ped_1.isBlushFacepaintTintForBarber = isBlushFacepaintTintForBarber;
    /**
     * No comment provided
     *
     * Hash: 0x604E810189EE3A59 | Since: 323
     */
    function isBlushTintForBarber(colorID) {
        return IsPedBlushColorValid(colorID);
    }
    ped_1.isBlushTintForBarber = isBlushTintForBarber;
    /**
     * No comment provided
     *
     * Hash: 0xF41B5D290C99A3D6 | Since: 323
     */
    function isBlushTintForCreator(colorId) {
        return IsPedBlushColorValid2(colorId);
    }
    ped_1.isBlushTintForCreator = isBlushTintForCreator;
    /**
     * No comment provided
     *
     * Hash: 0x53E8CB4F48BFE623 | Since: 323
     */
    function isClimbing(ped) {
        return IsPedClimbing(ped);
    }
    ped_1.isClimbing = isClimbing;
    /**
     * Checks if the component variation is valid, this works great for randomizing components using loops.
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0xE825F6B6CEA7671D | Since: 323
     */
    function isComponentVariationValid(ped, componentId, drawableId, textureId) {
        return IsPedComponentVariationValid(ped, componentId, drawableId, textureId);
    }
    ped_1.isComponentVariationValid = isComponentVariationValid;
    /**
     * Seems to consistently return true if the ped is dead.
     *
     * p1 is always passed 1 in the scripts.
     *
     * I suggest to remove "OR_DYING" part, because it does not detect dying phase.
     *
     * That's what the devs call it, cry about it.
     *
     * lol
     *
     * Hash: 0x3317DEDB88C95038 | Since: 323
     */
    function isDeadOrDying(ped) {
        return IsPedDeadOrDying(ped, false);
    }
    ped_1.isDeadOrDying = isDeadOrDying;
    /**
     * No comment provided
     *
     * Hash: 0xBA63D9FE45412247 | Since: 323
     */
    function isDefensiveAreaActive(ped) {
        return IsPedDefensiveAreaActive(ped, false);
    }
    ped_1.isDefensiveAreaActive = isDefensiveAreaActive;
    /**
     * No comment provided
     *
     * Hash: 0x5527B8246FEF9B11 | Since: 323
     */
    function isDiving(ped) {
        return IsPedDiving(ped);
    }
    ped_1.isDiving = isDiving;
    /**
     * No comment provided
     *
     * Hash: 0x451D05012CCEC234 | Since: 573
     */
    function isDoingABeastJump() {
        return IsPedDoingBeastJump(undefined);
    }
    ped_1.isDoingABeastJump = isDoingABeastJump;
    /**
     * No comment provided
     *
     * Hash: 0xB2C086CC1BF8F2BF | Since: 323
     */
    function isDoingDriveby(ped) {
        return IsPedDoingDriveby(ped);
    }
    ped_1.isDoingDriveby = isDoingDriveby;
    /**
     * No comment provided
     *
     * Hash: 0xD125AE748725C6BC | Since: 323
     */
    function isDucking(ped) {
        return IsPedDucking(ped);
    }
    ped_1.isDucking = isDucking;
    /**
     * Presumably returns the Entity that the Ped is currently diving out of the way of.
     *
     * var num3;
     * `if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)`
     * `if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)`
     *
     * Hash: 0x414641C26E105898 | Since: 323
     */
    function isEvasiveDiving(ped) {
        return IsPedEvasiveDiving(ped);
    }
    ped_1.isEvasiveDiving = isEvasiveDiving;
    /**
     * angle is ped's view cone
     *
     * Hash: 0xD71649DB0A545AA3 | Since: 323
     */
    function isFacingPed(ped, otherPed, angle) {
        return IsPedFacingPed(ped, otherPed, angle);
    }
    ped_1.isFacingPed = isFacingPed;
    /**
     * No comment provided
     *
     * Hash: 0xFB92A102F1C4DFA3 | Since: 323
     */
    function isFalling(ped) {
        return IsPedFalling(ped);
    }
    ped_1.isFalling = isFalling;
    /**
     * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
     * If the handle is invalid, the function returns true.
     *
     * Hash: 0xD839450756ED5A80 | Since: 323
     */
    function isFatallyInjured(ped) {
        return IsPedFatallyInjured(ped);
    }
    ped_1.isFatallyInjured = isFatallyInjured;
    /**
     * No comment provided
     *
     * Hash: 0xBBCCE00B381F8482 | Since: 323
     */
    function isFleeing(ped) {
        return IsPedFleeing(ped);
    }
    ped_1.isFleeing = isFleeing;
    /**
     * No comment provided
     *
     * Hash: 0xC30BDAEE47256C13 | Since: 1868
     */
    function isGesturing() {
        return Citizen.invokeNative('0xC30BDAEE47256C13', undefined);
    }
    ped_1.isGesturing = isGesturing;
    /**
     * No comment provided
     *
     * Hash: 0xBB062B2B5722478E | Since: 323
     */
    function isGettingIntoAVehicle(ped) {
        return IsPedGettingIntoAVehicle(ped);
    }
    ped_1.isGettingIntoAVehicle = isGettingIntoAVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x9F65DBC537E59AD5 | Since: 323
     */
    function isGoingIntoCover(ped) {
        return IsPedGoingIntoCover(ped);
    }
    ped_1.isGoingIntoCover = isGoingIntoCover;
    /**
     * No comment provided
     *
     * Hash: 0x9BB01E3834671191 | Since: 323
     */
    function isGroupMember(ped, groupId) {
        return IsPedGroupMember(ped, groupId);
    }
    ped_1.isGroupMember = isGroupMember;
    /**
     * No comment provided
     *
     * Hash: 0xE0D36E5D9E99CC21 | Since: 323
     */
    function isHairTintForBarber(colorID) {
        return IsPedHairColorValid(colorID);
    }
    ped_1.isHairTintForBarber = isHairTintForBarber;
    /**
     * No comment provided
     *
     * Hash: 0xED6D8E27A43B8CDE | Since: 323
     */
    function isHairTintForCreator(colorId) {
        return IsPedHairColorValid2(colorId);
    }
    ped_1.isHairTintForCreator = isHairTintForCreator;
    /**
     * No comment provided
     *
     * Hash: 0x1C86D8AEF8254B78 | Since: 323
     */
    function isHangingOnToVehicle(ped) {
        return IsPedHangingOnToVehicle(ped);
    }
    ped_1.isHangingOnToVehicle = isHangingOnToVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xFCF37A457CB96DC0 | Since: 323
     */
    function isHeadingTowardsPosition(ped, pos) {
        return IsPedHeadingTowardsPosition(ped, pos.x, pos.y, pos.z, 0);
    }
    ped_1.isHeadingTowardsPosition = isHeadingTowardsPosition;
    /**
     * No comment provided
     *
     * Hash: 0x813A0A7C9D2E831F | Since: 323
     */
    function isHeadtrackingEntity(ped, entity) {
        return IsPedHeadtrackingEntity(ped, entity);
    }
    ped_1.isHeadtrackingEntity = isHeadtrackingEntity;
    /**
     * No comment provided
     *
     * Hash: 0x5CD3CB88A7F8850D | Since: 323
     */
    function isHeadtrackingPed(ped1, ped2) {
        return IsPedHeadtrackingPed(ped1, ped2);
    }
    ped_1.isHeadtrackingPed = isHeadtrackingPed;
    /**
     * No comment provided
     *
     * Hash: 0xB9496CE47546DB2C | Since: 791
     */
    function isHelmetVisorUp(ped) {
        return IsPedHelmetUnk(ped);
    }
    ped_1.isHelmetVisorUp = isHelmetVisorUp;
    /**
     * Returns true/false if the ped is/isn't humanoid.
     *
     * Hash: 0xB980061DA992779D | Since: 323
     */
    function isHuman(ped) {
        return IsPedHuman(ped);
    }
    ped_1.isHuman = isHuman;
    /**
     * Returns whether the specified ped is hurt.
     *
     * Hash: 0x5983BB449D7FDB12 | Since: 323
     */
    function isHurt(ped) {
        return IsPedHurt(ped);
    }
    ped_1.isHurt = isHurt;
    /**
     * Gets a value indicating whether this ped's health is below its injured threshold.
     *
     * The default threshold is 100.
     *
     * Hash: 0x84A2DD9AC37C35C1 | Since: 323
     */
    function isInjured(ped) {
        return IsPedInjured(ped);
    }
    ped_1.isInjured = isInjured;
    /**
     * No comment provided
     *
     * Hash: 0x2E0E1C2B4F6CB339 | Since: 323
     */
    function isInAnyBoat(ped) {
        return IsPedInAnyBoat(ped);
    }
    ped_1.isInAnyBoat = isInAnyBoat;
    /**
     * No comment provided
     *
     * Hash: 0x298B91AE825E5705 | Since: 323
     */
    function isInAnyHeli(ped) {
        return IsPedInAnyHeli(ped);
    }
    ped_1.isInAnyHeli = isInAnyHeli;
    /**
     * No comment provided
     *
     * Hash: 0x5FFF4CFC74D8FB80 | Since: 323
     */
    function isInAnyPlane(ped) {
        return IsPedInAnyPlane(ped);
    }
    ped_1.isInAnyPlane = isInAnyPlane;
    /**
     * No comment provided
     *
     * Hash: 0x0BD04E29640C9C12 | Since: 323
     */
    function isInAnyPoliceVehicle(ped) {
        return IsPedInAnyPoliceVehicle(ped);
    }
    ped_1.isInAnyPoliceVehicle = isInAnyPoliceVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xFBFC01CCFB35D99E | Since: 323
     */
    function isInAnySub(ped) {
        return IsPedInAnySub(ped);
    }
    ped_1.isInAnySub = isInAnySub;
    /**
     * No comment provided
     *
     * Hash: 0x6E575D6A898AB852 | Since: 323
     */
    function isInAnyTaxi(ped) {
        return IsPedInAnyTaxi(ped);
    }
    ped_1.isInAnyTaxi = isInAnyTaxi;
    /**
     * No comment provided
     *
     * Hash: 0x6F972C1AB75A1ED0 | Since: 323
     */
    function isInAnyTrain(ped) {
        return IsPedInAnyTrain(ped);
    }
    ped_1.isInAnyTrain = isInAnyTrain;
    /**
     * Gets a value indicating whether the specified ped is in any vehicle.
     *
     * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
     *
     * Hash: 0x997ABD671D25CA0B | Since: 323
     */
    function isInAnyVehicle(ped, atGetIn) {
        return IsPedInAnyVehicle(ped, atGetIn);
    }
    ped_1.isInAnyVehicle = isInAnyVehicle;
    /**
     * Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
     *
     * `p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4\/\*14\*\/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794`
     *
     * Hash: 0x4859F1FC66A6278E | Since: 323
     */
    function isInCombat(ped, target) {
        return IsPedInCombat(ped, target);
    }
    ped_1.isInCombat = isInCombat;
    /**
     * p1 is nearly always 0 in the scripts.
     *
     * Hash: 0x60DFD0691A170B88 | Since: 323
     */
    function isInCover(ped, exceptUseWeapon) {
        return IsPedInCover(ped, exceptUseWeapon);
    }
    ped_1.isInCover = isInCover;
    /**
     * No comment provided
     *
     * Hash: 0x845333B3150583AB | Since: 323
     */
    function isInCoverFacingLeft(ped) {
        return IsPedInCoverFacingLeft(ped);
    }
    ped_1.isInCoverFacingLeft = isInCoverFacingLeft;
    /**
     * No comment provided
     *
     * Hash: 0x9134873537FA419C | Since: 323
     */
    function isInFlyingVehicle(ped) {
        return IsPedInFlyingVehicle(ped);
    }
    ped_1.isInFlyingVehicle = isInFlyingVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x5891CAC5D4ACFF74 | Since: 323
     */
    function isInGroup(ped) {
        return IsPedInGroup(ped);
    }
    ped_1.isInGroup = isInGroup;
    /**
     * No comment provided
     *
     * Hash: 0x6A03BF943D767C93 | Since: 323
     */
    function isInHighCover(ped) {
        return IsPedInHighCover(ped);
    }
    ped_1.isInHighCover = isInHighCover;
    /**
     * Notes: The function only returns true while the ped is:
     * A.) Swinging a random melee attack (including pistol-whipping)
     *
     * B.) Reacting to being hit by a melee attack (including pistol-whipping)
     *
     * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
     *
     * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
     *
     * Hash: 0x4E209B2C1EAD5159 | Since: 323
     */
    function isInMeleeCombat(ped) {
        return IsPedInMeleeCombat(ped);
    }
    ped_1.isInMeleeCombat = isInMeleeCombat;
    /**
     * No comment provided
     *
     * Hash: 0x796D90EFB19AA332 | Since: 323
     */
    function isInModel(ped, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsPedInModel(ped, modelHash);
    }
    ped_1.isInModel = isInModel;
    /**
     * No comment provided
     *
     * Hash: 0x7DCE8BDA0F1C1200 | Since: 323
     */
    function isInParachuteFreeFall(ped) {
        return IsPedInParachuteFreeFall(ped);
    }
    ped_1.isInParachuteFreeFall = isInParachuteFreeFall;
    /**
     * Gets a value indicating whether the specified ped is in the specified vehicle.
     *
     * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
     *
     * Hash: 0xA3EE4A07279BB9DB | Since: 323
     */
    function isInVehicle(ped, vehicle, atGetIn) {
        return IsPedInVehicle(ped, vehicle, atGetIn);
    }
    ped_1.isInVehicle = isInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x4AE4FF911DFB61DA | Since: 323
     */
    function isJacking(ped) {
        return IsPedJacking(ped);
    }
    ped_1.isJacking = isJacking;
    /**
     * No comment provided
     *
     * Hash: 0xCEDABC5900A0BF97 | Since: 323
     */
    function isJumping(ped) {
        return IsPedJumping(ped);
    }
    ped_1.isJumping = isJumping;
    /**
     * No comment provided
     *
     * Hash: 0x433DDFFE2044B636 | Since: 323
     */
    function isJumpingOutOfVehicle(ped) {
        return IsPedJumpingOutOfVehicle(ped);
    }
    ped_1.isJumpingOutOfVehicle = isJumpingOutOfVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x412F1364FA066CFB | Since: 573
     */
    function isLanding() {
        return Citizen.invokeNative('0x412F1364FA066CFB', undefined);
    }
    ped_1.isLanding = isLanding;
    /**
     * No comment provided
     *
     * Hash: 0x0525A2C2562F3CD4 | Since: 323
     */
    function isLipstickTintForBarber(colorID) {
        return IsPedLipstickColorValid(colorID);
    }
    ped_1.isLipstickTintForBarber = isLipstickTintForBarber;
    /**
     * No comment provided
     *
     * Hash: 0x3E802F11FBE27674 | Since: 323
     */
    function isLipstickTintForCreator(colorId) {
        return IsPedLipstickColorValid2(colorId);
    }
    ped_1.isLipstickTintForCreator = isLipstickTintForCreator;
    /**
     * Returns true/false if the ped is/isn't male.
     *
     * Hash: 0x6D9F5FAA7488BA46 | Since: 323
     */
    function isMale(ped) {
        return IsPedMale(ped);
    }
    ped_1.isMale = isMale;
    /**
     * No comment provided
     *
     * Hash: 0xC9D55B1A358A5BF7 | Since: 323
     */
    function isModel(ped, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return IsPedModel(ped, modelHash);
    }
    ped_1.isModel = isModel;
    /**
     * No comment provided
     *
     * Hash: 0x94495889E22C6479 | Since: 323
     */
    function isOnAnyBike(ped) {
        return IsPedOnAnyBike(ped);
    }
    ped_1.isOnAnyBike = isOnAnyBike;
    /**
     * No comment provided
     *
     * Hash: 0x01FEE67DB37F59B2 | Since: 323
     */
    function isOnFoot(ped) {
        return IsPedOnFoot(ped);
    }
    ped_1.isOnFoot = isOnFoot;
    /**
     * `Same function call as PED::GET_MOUNT, aka just returns 0`
     *
     * Hash: 0x460BC76A0E10655E | Since: 323
     */
    function isOnMount(ped) {
        return IsPedOnMount(ped);
    }
    ped_1.isOnMount = isOnMount;
    /**
     * No comment provided
     *
     * Hash: 0xEC5F66E459AF3BB2 | Since: 323
     */
    function isOnSpecificVehicle(ped, vehicle) {
        return IsPedOnSpecificVehicle(ped, vehicle);
    }
    ped_1.isOnSpecificVehicle = isOnSpecificVehicle;
    /**
     * Gets a value indicating whether the specified ped is on top of any vehicle.
     *
     * Return 1 when ped is on vehicle.
     * Return 0 when ped is not on a vehicle.
     *
     *
     * Hash: 0x67722AEB798E5FAB | Since: 323
     */
    function isOnVehicle(ped) {
        return IsPedOnVehicle(ped);
    }
    ped_1.isOnVehicle = isOnVehicle;
    /**
     * Returns true if the ped is currently opening a door (CTaskOpenDoor).
     *
     * Hash: 0x26AF0E8E30BD2A2C | Since: 323
     */
    function isOpeningDoor(ped) {
        return IsPedOpeningADoor(ped);
    }
    ped_1.isOpeningDoor = isOpeningDoor;
    /**
     * No comment provided
     *
     * Hash: 0xEBD0EDBA5BE957CF | Since: 323
     */
    function isPerformingACounterAttack(ped) {
        return IsPedPerformingDependentComboLimit(ped);
    }
    ped_1.isPerformingACounterAttack = isPerformingACounterAttack;
    /**
     * No comment provided
     *
     * Hash: 0xDCCA191DF9980FD7 | Since: 323
     */
    function isPerformingMeleeAction(ped) {
        return IsPedPerformingMeleeAction(ped);
    }
    ped_1.isPerformingMeleeAction = isPerformingMeleeAction;
    /**
     * No comment provided
     *
     * Hash: 0xFD4CCDBCC59941B7 | Since: 323
     */
    function isPerformingStealthKill(ped) {
        return IsPedPerformingStealthKill(ped);
    }
    ped_1.isPerformingStealthKill = isPerformingStealthKill;
    /**
     * No comment provided
     *
     * Hash: 0xC70B5FAE151982D8 | Since: 323
     */
    function isPlantingBomb(ped) {
        return IsPedPlantingBomb(ped);
    }
    ped_1.isPlantingBomb = isPlantingBomb;
    /**
     * No comment provided
     *
     * Hash: 0xD6A86331A537A7B9 | Since: 323
     */
    function isProne(ped) {
        return IsPedProne(ped);
    }
    ped_1.isProne = isProne;
    /**
     * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
     *
     * Hash: 0x47E4E977581C5B55 | Since: 323
     */
    function isRagdoll(ped) {
        return IsPedRagdoll(ped);
    }
    ped_1.isRagdoll = isRagdoll;
    /**
     * Returns whether the specified ped is reloading.
     *
     * Hash: 0x24B100C68C645951 | Since: 323
     */
    function isReloading(ped) {
        return IsPedReloading(ped);
    }
    ped_1.isReloading = isReloading;
    /**
     * No comment provided
     *
     * Hash: 0x625B774D75C87068 | Since: 323
     */
    function isRespondingToEvent(ped, event) {
        return IsPedRespondingToEvent(ped, event);
    }
    ped_1.isRespondingToEvent = isRespondingToEvent;
    /**
     * No comment provided
     *
     * Hash: 0xD1871251F3B5ACD7 | Since: 323
     */
    function isRunningMeleeTask(ped) {
        return IsPedRunningMeleeTask(ped);
    }
    ped_1.isRunningMeleeTask = isRunningMeleeTask;
    /**
     * No comment provided
     *
     * Hash: 0x2AFE52F782F25775 | Since: 323
     */
    function isRunningMobilePhoneTask(ped) {
        return IsPedRunningMobilePhoneTask(ped);
    }
    ped_1.isRunningMobilePhoneTask = isRunningMobilePhoneTask;
    /**
     * No comment provided
     *
     * Hash: 0xE3B6097CC25AA69E | Since: 323
     */
    function isRunningRagdollTask(ped) {
        return IsPedRunningRagdollTask(ped);
    }
    ped_1.isRunningRagdollTask = isRunningRagdollTask;
    /**
     * No comment provided
     *
     * Hash: 0x81AA517FBBA05D39 | Since: 944
     */
    function isShaderReady(ped) {
        return IsPedShaderEffectValid(ped);
    }
    ped_1.isShaderReady = isShaderReady;
    /**
     * No comment provided
     *
     * Hash: 0xB8B52E498014F5B0 | Since: 323
     */
    function isSheltered(ped) {
        return Citizen.invokeNative('0xB8B52E498014F5B0', ped);
    }
    ped_1.isSheltered = isSheltered;
    /**
     * Returns whether the specified ped is shooting.
     *
     * Hash: 0x34616828CD07F1A1 | Since: 323
     */
    function isShooting(ped) {
        return IsPedShooting(ped);
    }
    ped_1.isShooting = isShooting;
    /**
     * No comment provided
     *
     * Hash: 0x7E9DFE24AC1E58EF | Since: 323
     */
    function isShootingInArea(ped, x1, y1, z1, x2, y2, z2) {
        return IsPedShootingInArea(ped, x1, y1, z1, x2, y2, z2, false, false);
    }
    ped_1.isShootingInArea = isShootingInArea;
    /**
     * Detect if ped is in any vehicle
     * [True/False]
     *
     * Hash: 0x826AA586EDB9FEF8 | Since: 323
     */
    function isSittingInAnyVehicle(ped) {
        return IsPedSittingInAnyVehicle(ped);
    }
    ped_1.isSittingInAnyVehicle = isSittingInAnyVehicle;
    /**
     * Detect if ped is sitting in the specified vehicle
     * [True/False]
     *
     * Hash: 0xA808AA1D79230FC2 | Since: 323
     */
    function isSittingInVehicle(ped, vehicle) {
        return IsPedSittingInVehicle(ped, vehicle);
    }
    ped_1.isSittingInVehicle = isSittingInVehicle;
    /**
     * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
     *
     * Hash: 0x530944F6F4B8A214 | Since: 323
     */
    function isStopped(ped) {
        return IsPedStopped(ped);
    }
    ped_1.isStopped = isStopped;
    /**
     * No comment provided
     *
     * Hash: 0x9DE327631295B4C2 | Since: 323
     */
    function isSwimming(ped) {
        return IsPedSwimming(ped);
    }
    ped_1.isSwimming = isSwimming;
    /**
     * No comment provided
     *
     * Hash: 0xC024869A53992F34 | Since: 323
     */
    function isSwimmingUnderWater(ped) {
        return IsPedSwimmingUnderWater(ped);
    }
    ped_1.isSwimmingUnderWater = isSwimmingUnderWater;
    /**
     * No comment provided
     *
     * Hash: 0x3795688A307E1EB6 | Since: 505
     */
    function isSwitchingWeapon(Ped) {
        return IsPedSwappingWeapon(Ped);
    }
    ped_1.isSwitchingWeapon = isSwitchingWeapon;
    /**
     * No comment provided
     *
     * Hash: 0x14590DDBEDB1EC85 | Since: 323
     */
    function isTakingOffHelmet(ped) {
        return IsPedTakingOffHelmet(ped);
    }
    ped_1.isTakingOffHelmet = isTakingOffHelmet;
    /**
     * No comment provided
     *
     * Hash: 0x4C5E1F087CD10BB7 | Since: 323
     */
    function isTracked(ped) {
        return IsPedTracked(ped);
    }
    ped_1.isTracked = isTracked;
    /**
     * No comment provided
     *
     * Hash: 0x44D28D5DDFE5F68C | Since: 323
     */
    function isTryingToEnterALockedVehicle(ped) {
        return IsPedTryingToEnterALockedVehicle(ped);
    }
    ped_1.isTryingToEnterALockedVehicle = isTryingToEnterALockedVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x00E73468D085F745 | Since: 323
     */
    function isUsingActionMode(ped) {
        return IsPedUsingActionMode(ped);
    }
    ped_1.isUsingActionMode = isUsingActionMode;
    /**
     * No comment provided
     *
     * Hash: 0x57AB4A3080F85143 | Since: 323
     */
    function isUsingAnyScenario(ped) {
        return IsPedUsingAnyScenario(ped);
    }
    ped_1.isUsingAnyScenario = isUsingAnyScenario;
    /**
     * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     *
     * Hash: 0x1BF094736DD62C2E | Since: 323
     */
    function isUsingScenario(ped, scenario) {
        return IsPedUsingScenario(ped, scenario);
    }
    ped_1.isUsingScenario = isUsingScenario;
    /**
     * No comment provided
     *
     * Hash: 0x117C70D1F5730B5E | Since: 323
     */
    function isVaulting(ped) {
        return IsPedVaulting(ped);
    }
    ped_1.isVaulting = isVaulting;
    /**
     * Returns true if the ped passed through the parenthesis is wearing a helmet.
     *
     * Hash: 0xF33BDFE19B309B19 | Since: 323
     */
    function isWearingHelmet(ped) {
        return IsPedWearingHelmet(ped);
    }
    ped_1.isWearingHelmet = isWearingHelmet;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x6EC47A344923E1ED | Since: 323
     */
    function isScriptedScenarioUsingConditionalAnim(ped, animDict, anim) {
        return IsScriptedScenarioPedUsingConditionalAnim(ped, animDict, anim);
    }
    ped_1.isScriptedScenarioUsingConditionalAnim = isScriptedScenarioUsingConditionalAnim;
    /**
     * No comment provided
     *
     * Hash: 0x7F2F4F13AC5257EF | Since: 323
     */
    function isSynchronizedSceneHoldLastFrame(sceneID) {
        return IsSynchronizedSceneHoldLastFrame(sceneID);
    }
    ped_1.isSynchronizedSceneHoldLastFrame = isSynchronizedSceneHoldLastFrame;
    /**
     * No comment provided
     *
     * Hash: 0x62522002E0C391BA | Since: 323
     */
    function isSynchronizedSceneLoo(sceneID) {
        return IsSynchronizedSceneLooped(sceneID);
    }
    ped_1.isSynchronizedSceneLoo = isSynchronizedSceneLoo;
    /**
     * Returns true if a synchronized scene is running
     *
     * Hash: 0x25D39B935A038A26 | Since: 323
     */
    function isSynchronizedSceneRunning(sceneId) {
        return IsSynchronizedSceneRunning(sceneId);
    }
    ped_1.isSynchronizedSceneRunning = isSynchronizedSceneRunning;
    /**
     * No comment provided
     *
     * Hash: 0x06087579E7AA85A9 | Since: 323
     */
    function isTargetInPerceptionArea(ped, targetPed) {
        return Citizen.invokeNative('0x06087579E7AA85A9', ped, targetPed, 0, 0, 0, 0);
    }
    ped_1.isTargetInPerceptionArea = isTargetInPerceptionArea;
    /**
     * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
     *
     *
     * Target needs to be tracked.. won't work otherwise.
     *
     * Hash: 0x91C8E617F64188AC | Since: 323
     */
    function isTrackedVisible(ped) {
        return IsTrackedPedVisible(ped);
    }
    ped_1.isTrackedVisible = isTrackedVisible;
    /**
     * No comment provided
     *
     * Hash: 0xFEC9A3B1820F3331 | Since: 323
     */
    function isUsingScubaGearVariation() {
        return Citizen.invokeNative('0xFEC9A3B1820F3331', undefined);
    }
    ped_1.isUsingScubaGearVariation = isUsingScubaGearVariation;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x6FD7816A36615F48 | Since: 323
     */
    function knockOffProp(ped) {
        KnockOffPedProp(ped, false, false, false, false);
    }
    ped_1.knockOffProp = knockOffProp;
    /**
     * No comment provided
     *
     * Hash: 0x45BBCBA77C29A841 | Since: 323
     */
    function knockOffVehicle(ped) {
        KnockPedOffVehicle(ped);
    }
    ped_1.knockOffVehicle = knockOffVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x2B694AFCF64E6994 | Since: 323
     */
    function markDecorationsAsClonedFromLocalPlayer(ped) {
        Citizen.invokeNative('0x2B694AFCF64E6994', ped, false);
    }
    ped_1.markDecorationsAsClonedFromLocalPlayer = markDecorationsAsClonedFromLocalPlayer;
    /**
     * Checks if the specified sexiness flag is set
     *
     * enum eSexinessFlags
     * {
     * SF_JEER_AT_HOT_PED = 0,
     * SF_HURRIEDFEMALES_SEXY = 1,
     * SF_HOT_PERSON = 2,
     * };
     *
     * Hash: 0x46B05BCAE43856B0 | Since: 323
     */
    function hasSexinessFlagSet(ped, sexinessFlag) {
        return Citizen.invokeNative('0x46B05BCAE43856B0', ped, sexinessFlag);
    }
    ped_1.hasSexinessFlagSet = hasSexinessFlagSet;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xE1E65CA8AC9C00ED | Since: 323
     */
    function playFacialAnim(ped, animName, animDict) {
        PlayFacialAnim(ped, animName, animDict);
    }
    ped_1.playFacialAnim = playFacialAnim;
    /**
     * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
     *
     * Hash: 0x9222F300BF8354FE | Since: 323
     */
    function registerHatedTargetsAround(ped, radius) {
        RegisterHatedTargetsAroundPed(ped, radius);
    }
    ped_1.registerHatedTargetsAround = registerHatedTargetsAround;
    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0x4462658788425076 | Since: 323
     */
    function registerheadshot(ped) {
        return RegisterPedheadshot(ped);
    }
    ped_1.registerheadshot = registerheadshot;
    /**
     * No comment provided
     *
     * Hash: 0xBA8805A1108A2515 | Since: 877
     */
    function registerheadshotHires(ped) {
        return RegisterPedheadshot3(ped);
    }
    ped_1.registerheadshotHires = registerheadshotHires;
    /**
     * Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
     *
     * Hash: 0x953563CE563143AF | Since: 323
     */
    function registerheadshotTransparent(ped) {
        return RegisterPedheadshotTransparent(ped);
    }
    ped_1.registerheadshotTransparent = registerheadshotTransparent;
    /**
     * `PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.`
     *
     * l_216 = RECSBRobber1
     *
     * Hash: 0x2F25D9AEFA34FBA2 | Since: 323
     */
    function registerTarget(ped, target) {
        RegisterTarget(ped, target);
    }
    ped_1.registerTarget = registerTarget;
    /**
     * No comment provided
     *
     * Hash: 0x5D517B27CF6ECD04 | Since: 323
     */
    function releaseheadshotImgUpload(id) {
        ReleasePedheadshotImgUpload(id);
    }
    ped_1.releaseheadshotImgUpload = releaseheadshotImgUpload;
    /**
     * No comment provided
     *
     * Hash: 0xF79F9DEF0AADE61A | Since: 323
     */
    function releasePreloadPropData(ped) {
        ReleasePedPreloadPropData(ped);
    }
    ped_1.releasePreloadPropData = releasePreloadPropData;
    /**
     * No comment provided
     *
     * Hash: 0x5AAB586FFEC0FD96 | Since: 323
     */
    function releasePreloadVariationData(ped) {
        ReleasePedPreloadVariationData(ped);
    }
    ped_1.releasePreloadVariationData = releasePreloadVariationData;
    /**
     * No comment provided
     *
     * Hash: 0x13E940F88470FA51 | Since: 323
     */
    function removeActionModeAsset(asset) {
        RemoveActionModeAsset(asset);
    }
    ped_1.removeActionModeAsset = removeActionModeAsset;
    /**
     * No comment provided
     *
     * Hash: 0x8EB2F69076AF7053 | Since: 323
     */
    function removeGroup(groupId) {
        RemoveGroup(groupId);
    }
    ped_1.removeGroup = removeGroup;
    /**
     * Ped will no longer get angry when you stay near him.
     *
     * Hash: 0x74D4E028107450A9 | Since: 323
     */
    function removeDefensiveArea(ped, toggle) {
        RemovePedDefensiveArea(ped, toggle);
    }
    ped_1.removeDefensiveArea = removeDefensiveArea;
    /**
     * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
     *
     * Hash: 0xAC6D445B994DF95E | Since: 323
     */
    function removeElegantly(ped) {
        RemovePedElegantly(ped);
    }
    ped_1.removeElegantly = removeElegantly;
    /**
     * No comment provided
     *
     * Hash: 0xED74007FFB146BC2 | Since: 323
     */
    function removeFromGroup(ped) {
        RemovePedFromGroup(ped);
    }
    ped_1.removeFromGroup = removeFromGroup;
    /**
     * No comment provided
     *
     * Hash: 0xA7B2458D0AD6DED8 | Since: 323
     */
    function removeHelmet(ped, instantly) {
        RemovePedHelmet(ped, instantly);
    }
    ped_1.removeHelmet = removeHelmet;
    /**
     * No comment provided
     *
     * Hash: 0xFDDB234CF74073D9 | Since: 323
     */
    function removePreferredCoverSet(ped) {
        RemovePedPreferredCoverSet(ped);
    }
    ped_1.removePreferredCoverSet = removePreferredCoverSet;
    /**
     * No comment provided
     *
     * Hash: 0xB6BA2444AB393DA2 | Since: 323
     */
    function removeRelationshipGroup(groupHash) {
        if (typeof groupHash === 'string')
            groupHash = misc.getHashKey(groupHash);
        RemoveRelationshipGroup(groupHash);
    }
    ped_1.removeRelationshipGroup = removeRelationshipGroup;
    /**
     * No comment provided
     *
     * Hash: 0x31D16B74C6E29D66 | Since: 323
     */
    function removeScenarioBlockingArea() {
        RemoveScenarioBlockingArea(undefined, false);
    }
    ped_1.removeScenarioBlockingArea = removeScenarioBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0xD37401D78A929A49 | Since: 323
     */
    function removeScenarioBlockingAreas() {
        RemoveScenarioBlockingAreas();
    }
    ped_1.removeScenarioBlockingAreas = removeScenarioBlockingAreas;
    /**
     * No comment provided
     *
     * Hash: 0x9219857D21F0E842 | Since: 323
     */
    function removeStealthModeAsset(asset) {
        RemoveStealthModeAsset(asset);
    }
    ped_1.removeStealthModeAsset = removeStealthModeAsset;
    /**
     * No comment provided
     *
     * Hash: 0x290E2780BB7AA598 | Since: 323
     */
    function requestActionModeAsset(asset) {
        RequestActionModeAsset(asset);
    }
    ped_1.requestActionModeAsset = requestActionModeAsset;
    /**
     * No comment provided
     *
     * Hash: 0xF0DAEF2F545BEE25 | Since: 323
     */
    function requestheadshotImgUpload(id) {
        return RequestPedheadshotImgUpload(id);
    }
    ped_1.requestheadshotImgUpload = requestheadshotImgUpload;
    /**
     * No comment provided
     *
     * Hash: 0xCD018C591F94CB43 | Since: 323
     */
    function requestRestrictedVehicleVisibilityTracking(ped) {
        Citizen.invokeNative('0xCD018C591F94CB43', ped, false);
    }
    ped_1.requestRestrictedVehicleVisibilityTracking = requestRestrictedVehicleVisibilityTracking;
    /**
     * No comment provided
     *
     * Hash: 0x75BA1CB3B7D40CAF | Since: 323
     */
    function requestUseSmallBboxVisibilityTracking(ped) {
        Citizen.invokeNative('0x75BA1CB3B7D40CAF', ped, false);
    }
    ped_1.requestUseSmallBboxVisibilityTracking = requestUseSmallBboxVisibilityTracking;
    /**
     * No comment provided
     *
     * Hash: 0x2BC338A7B21F4608 | Since: 323
     */
    function requestVehicleVisibilityTracking(ped) {
        RequestPedVehicleVisibilityTracking(ped, false);
    }
    ped_1.requestVehicleVisibilityTracking = requestVehicleVisibilityTracking;
    /**
     * No comment provided
     *
     * Hash: 0x7D7A2E43E74E2EB8 | Since: 323
     */
    function requestVisibilityTracking(ped) {
        RequestPedVisibilityTracking(ped);
    }
    ped_1.requestVisibilityTracking = requestVisibilityTracking;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x1216E0BFA72CC703 | Since: 323
     */
    function requestRagdollBoundsUpdate() {
        Citizen.invokeNative('0x1216E0BFA72CC703', undefined, undefined);
    }
    ped_1.requestRagdollBoundsUpdate = requestRagdollBoundsUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x2A0A62FCDEE16D4F | Since: 323
     */
    function requestStealthModeAsset(asset) {
        RequestStealthModeAsset(asset);
    }
    ped_1.requestStealthModeAsset = requestStealthModeAsset;
    /**
     * No comment provided
     *
     * Hash: 0x46E56A7CD1D63C3F | Since: 323
     */
    function resetAiMeleeWeaponDamageModifier() {
        ResetAiMeleeWeaponDamageModifier();
    }
    ped_1.resetAiMeleeWeaponDamageModifier = resetAiMeleeWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0xEA16670E7BA4743C | Since: 323
     */
    function resetAiWeaponDamageModifier() {
        ResetAiWeaponDamageModifier();
    }
    ped_1.resetAiWeaponDamageModifier = resetAiWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x007FDE5A7897E426 | Since: 2802
     */
    function resetFacialIdleAnim(ped) {
        Citizen.invokeNative('0x007FDE5A7897E426', ped);
    }
    ped_1.resetFacialIdleAnim = resetFacialIdleAnim;
    /**
     * No comment provided
     *
     * Hash: 0x63DAB4CCB3273205 | Since: 323
     */
    function resetGroupFormationDefaultSpacing(groupHandle) {
        ResetGroupFormationDefaultSpacing(groupHandle);
    }
    ped_1.resetGroupFormationDefaultSpacing = resetGroupFormationDefaultSpacing;
    /**
     * No comment provided
     *
     * Hash: 0x22EF8FF8778030EB | Since: 323
     */
    function resetInVehicleContext(ped) {
        ResetPedInVehicleContext(ped);
    }
    ped_1.resetInVehicleContext = resetInVehicleContext;
    /**
     * Resets the value for the last vehicle driven by the Ped.
     *
     * Hash: 0xBB8DE8CF6A8DD8BB | Since: 323
     */
    function resetLastVehicle(ped) {
        ResetPedLastVehicle(ped);
    }
    ped_1.resetLastVehicle = resetLastVehicle;
    /**
     * If p1 is 0.0, I believe you are back to normal.
     * If p1 is 1.0, it looks like you can only rotate the ped, not walk.
     *
     * Using the following code to reset back to normal
     * `PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);`
     *
     * Hash: 0xAA74EC0CB0AAEA2C | Since: 323
     */
    function resetMovementClipset(ped) {
        ResetPedMovementClipset(ped, 0);
    }
    ped_1.resetMovementClipset = resetMovementClipset;
    /**
     * No comment provided
     *
     * Hash: 0x9FA4664CF62E47E8 | Since: 323
     */
    function resetRagdollTimer(ped) {
        ResetPedRagdollTimer(ped);
    }
    ped_1.resetRagdollTimer = resetRagdollTimer;
    /**
     * No comment provided
     *
     * Hash: 0x20510814175EA477 | Since: 323
     */
    function resetStrafeClipset(ped) {
        ResetPedStrafeClipset(ped);
    }
    ped_1.resetStrafeClipset = resetStrafeClipset;
    /**
     * No comment provided
     *
     * Hash: 0x3AC1F7B898F30C05 | Since: 323
     */
    function resetVisibleDamage(ped) {
        ResetPedVisibleDamage(ped);
    }
    ped_1.resetVisibleDamage = resetVisibleDamage;
    /**
     * No comment provided
     *
     * Hash: 0x97B0DB5B4AA74E77 | Since: 323
     */
    function resetWeaponMovementClipset(ped) {
        ResetPedWeaponMovementClipset(ped);
    }
    ped_1.resetWeaponMovementClipset = resetWeaponMovementClipset;
    /**
     * This function will simply bring the dead person back to life.
     *
     * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
     *
     * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
     *
     * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
     *
     * Hash: 0x71BC8E838B9C6035 | Since: 323
     */
    function resurrect(ped) {
        ResurrectPed(ped);
    }
    ped_1.resurrect = resurrect;
    /**
     * It will revive/cure the injured ped. The condition is ped must not be dead.
     *
     * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
     *
     * This function is well suited there.
     *
     * Hash: 0x8D8ACD8388CD99CE | Since: 323
     */
    function reviveInjured(ped) {
        ReviveInjuredPed(ped);
    }
    ped_1.reviveInjured = reviveInjured;
    /**
     * No comment provided
     *
     * Hash: 0x66460DEDDD417254 | Since: 323
     */
    function setAiMeleeWeaponDamageModifier(modifier) {
        SetAiMeleeWeaponDamageModifier(modifier);
    }
    ped_1.setAiMeleeWeaponDamageModifier = setAiMeleeWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x1B1E2A40A65B8521 | Since: 323
     */
    function setAiWeaponDamageModifier(value) {
        SetAiWeaponDamageModifier(value);
    }
    ped_1.setAiWeaponDamageModifier = setAiWeaponDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x061CB768363D6424 | Since: 323
     */
    function setAllowLockonToIfFriendly(ped, toggle) {
        Citizen.invokeNative('0x061CB768363D6424', ped, toggle);
    }
    ped_1.setAllowLockonToIfFriendly = setAllowLockonToIfFriendly;
    /**
     * No comment provided
     *
     * Hash: 0xFAB944D4D481ACCB | Since: 1734
     */
    function setAllowStuntJumpCamera(ped, toggle) {
        Citizen.invokeNative('0xFAB944D4D481ACCB', ped, toggle);
    }
    ped_1.setAllowStuntJumpCamera = setAllowStuntJumpCamera;
    /**
     * No comment provided
     *
     * Hash: 0x87DDEB611B329A9C | Since: 1103
     */
    function setAmbientLawAccuracyModifier(multiplier) {
        Citizen.invokeNative('0x87DDEB611B329A9C', multiplier);
    }
    ped_1.setAmbientLawAccuracyModifier = setAmbientLawAccuracyModifier;
    /**
     * No comment provided
     *
     * Hash: 0x6B0E6172C9A4D902 | Since: 323
     */
    function setAmbientsDropMoney() {
        SetAmbientPedsDropMoney(false);
    }
    ped_1.setAmbientsDropMoney = setAmbientsDropMoney;
    /**
     * `works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him`
     *
     * Hash: 0x9F8AA94D6D97DBF4 | Since: 323
     */
    function setBlockingOfNonTemporaryEvents(ped, toggle) {
        SetBlockingOfNonTemporaryEvents(ped, toggle);
    }
    ped_1.setBlockingOfNonTemporaryEvents = setBlockingOfNonTemporaryEvents;
    /**
     * No comment provided
     *
     * Hash: 0x9911F4A24485F653 | Since: 323
     */
    function setBlockingOfNonTemporaryEventsForAmbientsThisFrame() {
        Citizen.invokeNative('0x9911F4A24485F653', false);
    }
    ped_1.setBlockingOfNonTemporaryEventsForAmbientsThisFrame = setBlockingOfNonTemporaryEventsForAmbientsThisFrame;
    /**
     * Setting ped to true allows the ped to shoot "friendlies".
     *
     * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
     *
     * p1 = false & p2 = false for unable to aim at.
     * p1 = true & p2 = false for able to aim at.
     *
     * Hash: 0xB3B1CB349FF9C75D | Since: 323
     */
    function setCanAttackFriendly(ped, toggle) {
        SetCanAttackFriendly(ped, toggle, false);
    }
    ped_1.setCanAttackFriendly = setCanAttackFriendly;
    /**
     * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
     *
     * Hash: 0xFF41B4B141ED981C | Since: 323
     */
    function setCombatFloat(ped, combatType) {
        SetCombatFloat(ped, combatType, 0);
    }
    ped_1.setCombatFloat = setCombatFloat;
    /**
     * No comment provided
     *
     * Hash: 0x2F074C904D85129E | Since: 393
     */
    function setCopPerceptionOverrides(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle) {
        Citizen.invokeNative('0x2F074C904D85129E', seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, 0);
    }
    ped_1.setCopPerceptionOverrides = setCopPerceptionOverrides;
    /**
     * No comment provided
     *
     * Hash: 0x2735233A786B1BEF | Since: 323
     */
    function setCorpseRagdollFriction(ped) {
        Citizen.invokeNative('0x2735233A786B1BEF', ped, 0);
    }
    ped_1.setCorpseRagdollFriction = setCorpseRagdollFriction;
    /**
     * No comment provided
     *
     * Hash: 0x102E68B2024D536D | Since: 323
     */
    function setCreateRandomCops(toggle) {
        SetCreateRandomCops(toggle);
    }
    ped_1.setCreateRandomCops = setCreateRandomCops;
    /**
     * No comment provided
     *
     * Hash: 0x8A4986851C4EF6E7 | Since: 323
     */
    function setCreateRandomCopsNotOnScenarios(toggle) {
        SetCreateRandomCopsNotOnScenarios(toggle);
    }
    ped_1.setCreateRandomCopsNotOnScenarios = setCreateRandomCopsNotOnScenarios;
    /**
     * No comment provided
     *
     * Hash: 0x444CB7D7DBE6973D | Since: 323
     */
    function setCreateRandomCopsOnScenarios(toggle) {
        SetCreateRandomCopsOnScenarios(toggle);
    }
    ped_1.setCreateRandomCopsOnScenarios = setCreateRandomCopsOnScenarios;
    /**
     * No comment provided
     *
     * Hash: 0x711794453CFD692B | Since: 463
     */
    function setDisableHighFallDeath(ped, toggle) {
        Citizen.invokeNative('0x711794453CFD692B', ped, toggle);
    }
    ped_1.setDisableHighFallDeath = setDisableHighFallDeath;
    /**
     * No comment provided
     *
     * Hash: 0xDFE68C4B787E1BFB | Since: 1180
     */
    function setDisableMapCollision(ped) {
        Citizen.invokeNative('0xDFE68C4B787E1BFB', ped);
    }
    ped_1.setDisableMapCollision = setDisableMapCollision;
    /**
     * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
     *
     * Hash: 0xB195FFA8042FC5C3 | Since: 323
     */
    function setDriverAbility(driver, ability) {
        SetDriverAbility(driver, ability);
    }
    ped_1.setDriverAbility = setDriverAbility;
    /**
     * range 0.0f - 1.0f
     *
     * Hash: 0xA731F608CA104E3C | Since: 323
     */
    function setDriverAggressiveness(driver, aggressiveness) {
        SetDriverAggressiveness(driver, aggressiveness);
    }
    ped_1.setDriverAggressiveness = setDriverAggressiveness;
    /**
     * Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
     *
     * Hash: 0xDED5AF5A0EA4B297 | Since: 323
     */
    function setDriverRacingModifier(driver, modifier) {
        SetDriverRacingModifier(driver, modifier);
    }
    ped_1.setDriverRacingModifier = setDriverRacingModifier;
    /**
     * Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
     *
     * Hash: 0xC52E0F855C58FC2E | Since: 323
     */
    function setEnableBoundAnkles(ped, toggle) {
        SetEnableBoundAnkles(ped, toggle);
    }
    ped_1.setEnableBoundAnkles = setEnableBoundAnkles;
    /**
     * ped can not pull out a weapon when true
     *
     * Hash: 0xDF1AF8B5D56542FA | Since: 323
     */
    function setEnableHandcuffs(ped, toggle) {
        SetEnableHandcuffs(ped, toggle);
    }
    ped_1.setEnableHandcuffs = setEnableHandcuffs;
    /**
     * No comment provided
     *
     * Hash: 0xD2C5AA0C0E8D0F1E | Since: 323
     */
    function setEnableEnveffScale(ped, toggle) {
        SetEnablePedEnveffScale(ped, toggle);
    }
    ped_1.setEnableEnveffScale = setEnableEnveffScale;
    /**
     * Enables diving motion when underwater.
     *
     * Hash: 0xF99F62004024D506 | Since: 323
     */
    function setEnableScuba(ped, toggle) {
        SetEnableScuba(ped, toggle);
    }
    ped_1.setEnableScuba = setEnableScuba;
    /**
     * Clipsets:
     * facials@gen_female@base
     * facials@gen_male@base
     * facials@p_m_zero@base
     *
     * Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
     * mood_drunk_1
     * mood_stressed_1
     * mood_happy_1
     * mood_talking_1
     *
     *
     * Hash: 0x5687C7F05B39E401 | Since: 1493
     */
    function setFacialClipset(ped, animDict) {
        SetFacialClipsetOverride(ped, animDict);
    }
    ped_1.setFacialClipset = setFacialClipset;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xFFC24B988B938B38 | Since: 323
     */
    function setFacialIdleAnimOverride(ped, animName, animDict) {
        SetFacialIdleAnimOverride(ped, animName, animDict);
    }
    ped_1.setFacialIdleAnimOverride = setFacialIdleAnimOverride;
    /**
     * No comment provided
     *
     * Hash: 0x129466ED55140F8D | Since: 323
     */
    function setForceFootstepUpdate(ped, toggle) {
        SetForceFootstepUpdate(ped, toggle);
    }
    ped_1.setForceFootstepUpdate = setForceFootstepUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xCB968B53FC7F916D | Since: 323
     */
    function setForceStepType(ped, _type) {
        SetForceStepType(ped, false, _type, 0);
    }
    ped_1.setForceStepType = setForceStepType;
    /**
     * 0: Default
     * 1: Circle Around Leader
     * 2: Alternative Circle Around Leader
     * 3: Line, with Leader at center
     *
     * Hash: 0xCE2F5FC3AF7E8C1E | Since: 323
     */
    function setGroupFormation(groupId, formationType) {
        SetGroupFormation(groupId, formationType);
    }
    ped_1.setGroupFormation = setGroupFormation;
    /**
     * No comment provided
     *
     * Hash: 0x1D9D45004C28C916 | Since: 323
     */
    function setGroupFormationSpacing(groupId, pos) {
        SetGroupFormationSpacing(groupId, pos.x, pos.y, pos.z);
    }
    ped_1.setGroupFormationSpacing = setGroupFormationSpacing;
    /**
     * Sets the range at which members will automatically leave the group.
     *
     * Hash: 0x4102C7858CFEE4E4 | Since: 323
     */
    function setGroupSeparationRange(groupHandle, separationRange) {
        SetGroupSeparationRange(groupHandle, separationRange);
    }
    ped_1.setGroupSeparationRange = setGroupSeparationRange;
    /**
     * Used for freemode (online) characters.
     *
     * For some reason, the scripts use a rounded float for the index.
     * Indexes:
     * 1. black
     * 2. very light blue/green
     * 3. dark blue
     * 4. brown
     * 5. darker brown
     * 6. light brown
     * 7. blue
     * 8. light blue
     * 9. pink
     * 10. yellow
     * 11. purple
     * 12. black
     * 13. dark green
     * 14. light brown
     * 15. yellow/black pattern
     * 16. light colored spiral pattern
     * 17. shiny red
     * 18. shiny half blue/half red
     * 19. half black/half light blue
     * 20. white/red perimter
     * 21. green snake
     * 22. red snake
     * 23. dark blue snake
     * 24. dark yellow
     * 25. bright yellow
     * 26. all black
     * 28. red small pupil
     * 29. devil blue/black
     * 30. white small pupil
     * 31. glossed over
     *
     * Hash: 0x50B56988B170AFDF | Since: 323
     */
    function setHeadBlendEyeColor(ped, index) {
        SetPedEyeColor(ped, index);
    }
    ped_1.setHeadBlendEyeColor = setHeadBlendEyeColor;
    /**
     * p4 seems to vary from 0 to 3.
     * Preview: https://gfycat.com/MaleRareAmazonparrot
     *
     * Hash: 0xCC9682B8951C5229 | Since: 323
     */
    function setHeadBlendPaletteColor(ped, r, g, b, id) {
        SetHeadBlendPaletteColor(ped, r, g, b, id);
    }
    ped_1.setHeadBlendPaletteColor = setHeadBlendPaletteColor;
    /**
     * Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
     *
     * Hash: 0xFF4803BC019852D9 | Since: 323
     */
    function setHealthSnacksCarriedByAllNews() {
        Citizen.invokeNative('0xFF4803BC019852D9', 0, undefined);
    }
    ped_1.setHealthSnacksCarriedByAllNews = setHealthSnacksCarriedByAllNews;
    /**
     * No comment provided
     *
     * Hash: 0xC32779C16FCEECD9 | Since: 323
     */
    function setIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, blendInDuration, blendOutDuration) {
        SetIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, undefined, blendInDuration, blendOutDuration);
    }
    ped_1.setIkTarget = setIkTarget;
    /**
     * Only appears in lamar1 script.
     *
     * Hash: 0x1A330D297AAC6BC1 | Since: 323
     */
    function setLadderClimbInputState(ped) {
        Citizen.invokeNative('0x1A330D297AAC6BC1', ped, 0);
    }
    ped_1.setLadderClimbInputState = setLadderClimbInputState;
    /**
     * name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
     *
     * Hash: 0x781DE8FA214E87D2 | Since: 323
     */
    function setMovementModeOverride(ped, name) {
        SetMovementModeOverride(ped, name);
    }
    ped_1.setMovementModeOverride = setMovementModeOverride;
    /**
     * accuracy = 0-100, 100 being perfectly accurate
     *
     * Hash: 0x7AEFB85C1D49DEB6 | Since: 323
     */
    function setAccuracy(ped, accuracy) {
        SetPedAccuracy(ped, accuracy);
    }
    ped_1.setAccuracy = setAccuracy;
    /**
     * value ranges from 0 to 3.
     *
     * Hash: 0xDBA71115ED9941A6 | Since: 323
     */
    function setAlertness(ped, value) {
        SetPedAlertness(ped, value);
    }
    ped_1.setAlertness = setAlertness;
    /**
     * No comment provided
     *
     * Hash: 0xDA1F1B7BE1A8766F | Since: 323
     */
    function setAllowedToDuck(ped, toggle) {
        SetPedAllowedToDuck(ped, toggle);
    }
    ped_1.setAllowedToDuck = setAllowedToDuck;
    /**
     * ntoggle was always false except in one instance (b678).
     *
     * The one time this is set to true seems to do with when you fail the mission.
     *
     * Hash: 0xF2BEBCDFAFDAA19E | Since: 323
     */
    function setAllowHurtCombatForAllMissionPeds(toggle) {
        Citizen.invokeNative('0xF2BEBCDFAFDAA19E', toggle);
    }
    ped_1.setAllowHurtCombatForAllMissionPeds = setAllowHurtCombatForAllMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x49E50BDB8BA4DAB2 | Since: 323
     */
    function setAllowMinorReactionsAsMissionPed(ped, toggle) {
        Citizen.invokeNative('0x49E50BDB8BA4DAB2', ped, toggle);
    }
    ped_1.setAllowMinorReactionsAsMissionPed = setAllowMinorReactionsAsMissionPed;
    /**
     * No comment provided
     *
     * Hash: 0x3C028C636A414ED9 | Since: 323
     */
    function setAllowVehiclesOverride(ped, toggle) {
        SetPedAllowVehiclesOverride(ped, toggle);
    }
    ped_1.setAllowVehiclesOverride = setAllowVehiclesOverride;
    /**
     * stance:
     * 0 = idle
     * 1 = walk
     * 2 = running
     *
     * p5 = usually set to true
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x90A43CC281FFAB46 | Since: 323
     */
    function setAlternateMovementAnim(ped, stance, animDictionary, animationName) {
        SetPedAlternateMovementAnim(ped, stance, animDictionary, animationName, 0, false);
    }
    ped_1.setAlternateMovementAnim = setAlternateMovementAnim;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x6C60394CB4F75E9A | Since: 323
     */
    function setAlternateWalkAnim(ped, animDict, animName) {
        SetPedAlternateWalkAnim(ped, animDict, animName, 0, false);
    }
    ped_1.setAlternateWalkAnim = setAlternateWalkAnim;
    /**
     * No comment provided
     *
     * Hash: 0xC7F76DF27A5045A1 | Since: 323
     */
    function setAngledDefensiveArea(ped) {
        SetPedAngledDefensiveArea(ped, 0, 0, 0, 0, 0, 0, 0, false, false);
    }
    ped_1.setAngledDefensiveArea = setAngledDefensiveArea;
    /**
     * Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
     *
     * Hash: 0x2B5AA717A181FB4C | Since: 323
     */
    function setAoBlobRendering(ped, toggle) {
        SetPedAoBlobRendering(ped, toggle);
    }
    ped_1.setAoBlobRendering = setAoBlobRendering;
    /**
     * Sets the armor of the specified ped.
     *
     * ped: The Ped to set the armor of.
     * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
     *
     * Hash: 0xCEA04D83135264CC | Since: 323
     */
    function setArmour(ped, amount) {
        SetPedArmour(ped, amount);
    }
    ped_1.setArmour = setArmour;
    /**
     * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
     *
     * Hash: 0xBB03C38DD3FB7FFD | Since: 323
     */
    function setAsCop(ped, toggle) {
        SetPedAsCop(ped, toggle);
    }
    ped_1.setAsCop = setAsCop;
    /**
     * No comment provided
     *
     * Hash: 0x02A0C9720B854BFA | Since: 323
     */
    function setAsEnemy(ped, toggle) {
        SetPedAsEnemy(ped, toggle);
    }
    ped_1.setAsEnemy = setAsEnemy;
    /**
     * No comment provided
     *
     * Hash: 0x2A7819605465FBCE | Since: 323
     */
    function setAsGroupLeader(ped, groupId) {
        SetPedAsGroupLeader(ped, groupId);
    }
    ped_1.setAsGroupLeader = setAsGroupLeader;
    /**
     * No comment provided
     *
     * Hash: 0x9F3480FE65DB31B5 | Since: 323
     */
    function setAsGroupMember(ped, groupId) {
        SetPedAsGroupMember(ped, groupId);
    }
    ped_1.setAsGroupMember = setAsGroupMember;
    /**
     * No comment provided
     *
     * Hash: 0x137BBD05230DB22D | Since: 323
     */
    function setBlendFromParents(ped) {
        SetPedBlendFromParents(ped, undefined, undefined, 0, 0);
    }
    ped_1.setBlendFromParents = setBlendFromParents;
    /**
     * No comment provided
     *
     * Hash: 0x576594E8D64375E2 | Since: 323
     */
    function setBlocksPathingWhenDead(ped, toggle) {
        SetPedBlocksPathingWhenDead(ped, toggle);
    }
    ped_1.setBlocksPathingWhenDead = setBlocksPathingWhenDead;
    /**
     * No comment provided
     *
     * Hash: 0x4F5F651ACCC9C4CF | Since: 323
     */
    function setBoundsOrientation(ped, pos) {
        SetPedBoundsOrientation(ped, 0, 0, pos.x, pos.y, pos.z);
    }
    ped_1.setBoundsOrientation = setBoundsOrientation;
    /**
     * No comment provided
     *
     * Hash: 0x6C3B4D6D13B4C841 | Since: 323
     */
    function setCanArmIk(ped, toggle) {
        SetPedCanArmIk(ped, toggle);
    }
    ped_1.setCanArmIk = setCanArmIk;
    /**
     * No comment provided
     *
     * Hash: 0xC1670E958EEE24E5 | Since: 323
     */
    function setCanBeDraggedOut(ped, toggle) {
        SetPedCanBeDraggedOut(ped, toggle);
    }
    ped_1.setCanBeDraggedOut = setCanBeDraggedOut;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xB282749D5E028163 | Since: 877
     */
    function setCanBeKnockedOffBike() {
        Citizen.invokeNative('0xB282749D5E028163', undefined, undefined);
    }
    ped_1.setCanBeKnockedOffBike = setCanBeKnockedOffBike;
    /**
     * state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
     *
     * Hash: 0x7A6535691B477C48 | Since: 323
     */
    function setCanBeKnockedOffVehicle(ped, state) {
        SetPedCanBeKnockedOffVehicle(ped, state);
    }
    ped_1.setCanBeKnockedOffVehicle = setCanBeKnockedOffVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xC7EF1BA83230BA07 | Since: 323
     */
    function setCanBeShotInVehicle(ped, toggle) {
        SetPedCanBeShotInVehicle(ped, toggle);
    }
    ped_1.setCanBeShotInVehicle = setCanBeShotInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x638C03B0F9878F57 | Since: 323
     */
    function setCanBeTargetedWhenInjured(ped, toggle) {
        SetPedCanBeTargetedWhenInjured(ped, toggle);
    }
    ped_1.setCanBeTargetedWhenInjured = setCanBeTargetedWhenInjured;
    /**
     * No comment provided
     *
     * Hash: 0x4328652AE5769C71 | Since: 323
     */
    function setCanBeTargetedWithoutLos(ped, toggle) {
        SetPedCanBeTargetedWithoutLos(ped, toggle);
    }
    ped_1.setCanBeTargetedWithoutLos = setCanBeTargetedWithoutLos;
    /**
     * No comment provided
     *
     * Hash: 0x63F58F7C80513AAD | Since: 323
     */
    function setCanBeTargetted(ped, toggle) {
        SetPedCanBeTargetted(ped, toggle);
    }
    ped_1.setCanBeTargetted = setCanBeTargetted;
    /**
     * No comment provided
     *
     * Hash: 0x66B57B72E0836A76 | Since: 323
     */
    function setCanBeTargettedByPlayer(ped, player, toggle) {
        SetPedCanBeTargettedByPlayer(ped, player, toggle);
    }
    ped_1.setCanBeTargettedByPlayer = setCanBeTargettedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xBF1CA77833E58F2C | Since: 323
     */
    function setCanBeTargettedByTeam(ped, team, toggle) {
        SetPedCanBeTargettedByTeam(ped, team, toggle);
    }
    ped_1.setCanBeTargettedByTeam = setCanBeTargettedByTeam;
    /**
     * It simply makes the said ped to cower behind cover object(wall, desk, car)
     *
     * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
     *
     * Hash: 0xCB7553CDCEF4A735 | Since: 323
     */
    function setCanCowerInCover(ped, toggle) {
        SetPedCanCowerInCover(ped, toggle);
    }
    ped_1.setCanCowerInCover = setCanCowerInCover;
    /**
     * No comment provided
     *
     * Hash: 0x6B7A646C242A7059 | Since: 323
     */
    function setCanEvasiveDive(ped, toggle) {
        SetPedCanEvasiveDive(ped, toggle);
    }
    ped_1.setCanEvasiveDive = setCanEvasiveDive;
    /**
     * No comment provided
     *
     * Hash: 0xC11C18092C5530DC | Since: 323
     */
    function setCanHeadIk(ped, toggle) {
        SetPedCanHeadIk(ped, toggle);
    }
    ped_1.setCanHeadIk = setCanHeadIk;
    /**
     * No comment provided
     *
     * Hash: 0x73518ECE2485412B | Since: 323
     */
    function setCanLegIk(ped, toggle) {
        SetPedCanLegIk(ped, toggle);
    }
    ped_1.setCanLegIk = setCanLegIk;
    /**
     * No comment provided
     *
     * Hash: 0xE861D0B05C7662B8 | Since: 323
     */
    function setCanLosePropsOnDamage(ped, toggle) {
        SetPedCanLosePropsOnDamage(ped, toggle, 0);
    }
    ped_1.setCanLosePropsOnDamage = setCanLosePropsOnDamage;
    /**
     * No comment provided
     *
     * Hash: 0xC514825C507E3736 | Since: 323
     */
    function setCanPeekInCover(ped, toggle) {
        SetPedCanPeekInCover(ped, toggle);
    }
    ped_1.setCanPeekInCover = setCanPeekInCover;
    /**
     * No comment provided
     *
     * Hash: 0x6373D1349925A70E | Since: 323
     */
    function setCanPlayAmbientAnims(ped, toggle) {
        SetPedCanPlayAmbientAnims(ped, toggle);
    }
    ped_1.setCanPlayAmbientAnims = setCanPlayAmbientAnims;
    /**
     * No comment provided
     *
     * Hash: 0x0EB0585D15254740 | Since: 323
     */
    function setCanPlayAmbientBaseAnims(ped, toggle) {
        SetPedCanPlayAmbientBaseAnims(ped, toggle);
    }
    ped_1.setCanPlayAmbientBaseAnims = setCanPlayAmbientBaseAnims;
    /**
     * No comment provided
     *
     * Hash: 0xBAF20C5432058024 | Since: 323
     */
    function setCanPlayGestureAnims(ped, toggle) {
        SetPedCanPlayGestureAnims(ped, toggle);
    }
    ped_1.setCanPlayGestureAnims = setCanPlayGestureAnims;
    /**
     * Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.
     *
     * Hash: 0x820E9892A77E97CD | Since: 877
     */
    function setCanPlayInCarIdles(ped, toggle) {
        Citizen.invokeNative('0x820E9892A77E97CD', ped, toggle);
    }
    ped_1.setCanPlayInCarIdles = setCanPlayInCarIdles;
    /**
     * p2 usually 0
     *
     * Hash: 0xF833DDBA3B104D43 | Since: 323
     */
    function setCanPlayVisemeAnims(ped, toggle) {
        SetPedCanPlayVisemeAnims(ped, toggle, false);
    }
    ped_1.setCanPlayVisemeAnims = setCanPlayVisemeAnims;
    /**
     * No comment provided
     *
     * Hash: 0xB128377056A54E2A | Since: 323
     */
    function setCanRagdoll(ped, toggle) {
        SetPedCanRagdoll(ped, toggle);
    }
    ped_1.setCanRagdoll = setCanRagdoll;
    /**
     * No comment provided
     *
     * Hash: 0xDF993EE5E90ABA25 | Since: 323
     */
    function setCanRagdollFromPlayerImpact(ped, toggle) {
        SetPedCanRagdollFromPlayerImpact(ped, toggle);
    }
    ped_1.setCanRagdollFromPlayerImpact = setCanRagdollFromPlayerImpact;
    /**
     * No comment provided
     *
     * Hash: 0x1CCE141467FF42A2 | Since: 323
     */
    function setCanSmashGlass(ped) {
        SetPedCanSmashGlass(ped, false, false);
    }
    ped_1.setCanSmashGlass = setCanSmashGlass;
    /**
     * No comment provided
     *
     * Hash: 0xED7F7EFE9FABF340 | Since: 323
     */
    function setCanSwitchWeapon(ped, toggle) {
        SetPedCanSwitchWeapon(ped, toggle);
    }
    ped_1.setCanSwitchWeapon = setCanSwitchWeapon;
    /**
     * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
     *
     * Only works in singleplayer
     *
     * Hash: 0x2E2F4240B3F24647 | Since: 323
     */
    function setCanTeleportToGroupLeader(pedHandle, groupHandle, toggle) {
        SetPedCanTeleportToGroupLeader(pedHandle, groupHandle, toggle);
    }
    ped_1.setCanTeleportToGroupLeader = setCanTeleportToGroupLeader;
    /**
     * No comment provided
     *
     * Hash: 0xF2B7106D37947CE0 | Since: 323
     */
    function setCanTorsoIk(ped, toggle) {
        SetPedCanTorsoIk(ped, toggle);
    }
    ped_1.setCanTorsoIk = setCanTorsoIk;
    /**
     * No comment provided
     *
     * Hash: 0xF5846EDB26A98A24 | Since: 323
     */
    function setCanTorsoReactIk(ped) {
        SetPedCanTorsoReactIk(ped, false);
    }
    ped_1.setCanTorsoReactIk = setCanTorsoReactIk;
    /**
     * No comment provided
     *
     * Hash: 0x6647C5F6F5792496 | Since: 323
     */
    function setCanTorsoVehicleIk(ped) {
        SetPedCanTorsoVehicleIk(ped, false);
    }
    ped_1.setCanTorsoVehicleIk = setCanTorsoVehicleIk;
    /**
     * No comment provided
     *
     * Hash: 0xEC4686EC06434678 | Since: 323
     */
    function setCanUseAutoConversationLookat(ped, toggle) {
        SetPedCanUseAutoConversationLookat(ped, toggle);
    }
    ped_1.setCanUseAutoConversationLookat = setCanUseAutoConversationLookat;
    /**
     * Overrides the ped's collision capsule radius for the current tick.
     * Must be called every tick to be effective.
     *
     * Setting this to 0.001 will allow warping through some objects.
     *
     * Hash: 0x364DF566EC833DE2 | Since: 323
     */
    function setCapsule(ped, value) {
        SetPedCapsule(ped, value);
    }
    ped_1.setCapsule = setCapsule;
    /**
     * No comment provided
     *
     * Hash: 0x82A3D6D9CC2CB8E3 | Since: 323
     */
    function setClothPackageIndex() {
        SetPedClothProne(undefined, undefined);
    }
    ped_1.setClothPackageIndex = setClothPackageIndex;
    /**
     * No comment provided
     *
     * Hash: 0x78C4E9961DB3EB5B | Since: 323
     */
    function setClothPinFrames() {
        SetPedClothPackageIndex(undefined, undefined);
    }
    ped_1.setClothPinFrames = setClothPinFrames;
    /**
     * No comment provided
     *
     * Hash: 0xA660FAF550EB37E5 | Since: 323
     */
    function setClothProne() {
        Citizen.invokeNative('0xA660FAF550EB37E5', undefined, false);
    }
    ped_1.setClothProne = setClothProne;
    /**
     * enum eCombatAbility // 0xE793438C
     * {
     * CA_Poor,
     * CA_Average,
     * CA_Professional,
     * CA_NumTypes
     * };
     *
     * Hash: 0xC7622C0D36B2FDA8 | Since: 323
     */
    function setCombatAbility(ped, abilityLevel) {
        SetPedCombatAbility(ped, abilityLevel);
    }
    ped_1.setCombatAbility = setCombatAbility;
    /**
     * enum eCombatAttributes // 0x0E8E7201
     * {
     * BF_CanUseCover = 0,
     * BF_CanUseVehicles = 1,
     * BF_CanDoDrivebys = 2,
     * BF_CanLeaveVehicle = 3,
     * BF_CanUseDynamicStrafeDecisions = 4,
     * BF_AlwaysFight = 5,
     * BF_0x66BB9FCC = 6,
     * BF_0x6837DA41 = 7,
     * BF_0xB4A13A5A = 8,
     * BF_0xEE326AAD = 9,
     * BF_0x7DF2CCFA = 10,
     * BF_0x0036D422 = 11,
     * BF_BlindFireWhenInCover = 12,
     * BF_Aggressive = 13,
     * BF_CanInvestigate = 14,
     * BF_HasRadio = 15,
     * BF_0x6BDE28D1 = 16,
     * BF_AlwaysFlee = 17,
     * BF_0x7852797D = 18,
     * BF_0x33497B95 = 19,
     * BF_CanTauntInVehicle = 20,
     * BF_CanChaseTargetOnFoot = 21,
     * BF_WillDragInjuredPedsToSafety = 22,
     * BF_0xCD7168B8 = 23,
     * BF_UseProximityFiringRate = 24,
     * BF_0x48F914F8 = 25,
     * BF_0x2EA543D0 = 26,
     * BF_PerfectAccuracy = 27,
     * BF_CanUseFrustratedAdvance = 28,
     * BF_0x3D131AC1 = 29,
     * BF_0x3AD95F27 = 30,
     * BF_MaintainMinDistanceToTarget = 31,
     * BF_0xEAD68AD2 = 32,
     * BF_0xA206C2E0 = 33,
     * BF_CanUsePeekingVariations = 34,
     * BF_0xA5715184 = 35,
     * BF_0xD5265533 = 36,
     * BF_0x2B84C2BF = 37,
     * BF_DisableBulletReactions = 38,
     * BF_CanBust = 39,
     * BF_0xAA525726 = 40,
     * BF_CanCommandeerVehicles = 41,
     * BF_CanFlank = 42,
     * BF_SwitchToAdvanceIfCantFindCover = 43,
     * BF_SwitchToDefensiveIfInCover = 44,
     * BF_0xEB4786A0 = 45,
     * BF_CanFightArmedPedsWhenNotArmed = 46,
     * BF_0xA08E9402 = 47,
     * BF_0x952EAD7D = 48,
     * BF_UseEnemyAccuracyScaling = 49,
     * BF_CanCharge = 50,
     * BF_0xDA8C2BD3 = 51,
     * BF_0x6562F017 = 52,
     * BF_0xA2C3D53B = 53,
     * BF_AlwaysEquipBestWeapon = 54,
     * BF_CanSeeUnderwaterPeds = 55,
     * BF_0xF619486B = 56,
     * BF_0x61EB63A3 = 57,
     * BF_DisableFleeFromCombat = 58,
     * BF_0x8976D12B = 59,
     * BF_CanThrowSmokeGrenade = 60,
     * BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
     * BF_0x5452A10C = 62,
     * BF_FleesFromInvincibleOpponents = 63,
     * BF_DisableBlockFromPursueDuringVehicleChase = 64,
     * BF_DisableSpinOutDuringVehicleChase = 65,
     * BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
     * BF_0x0B404731 = 67,
     * BF_DisableReactToBuddyShot = 68,
     * BF_0x7FFD6AEB = 69,
     * BF_0x51F4AEF8 = 70,
     * BF_PermitChargeBeyondDefensiveArea = 71,
     * BF_0x63E0A8E2 = 72,
     * BF_0xDF974436 = 73,
     * BF_0x556C080B = 74,
     * BF_0xA4D50035 = 75,
     * BF_SetDisableShoutTargetPositionOnCombatStart = 76,
     * BF_DisableRespondedToThreatBroadcast = 77,
     * BF_0xCBB01765 = 78,
     * BF_0x4F862ED4 = 79,
     * BF_0xEF9C7C40 = 80,
     * BF_0xE51B494F = 81,
     * BF_0x054D0199 = 82,
     * BF_0xD36BCE94 = 83,
     * BF_0xFB11F690 = 84,
     * BF_0xD208A9AD = 85,
     * BF_AllowDogFighting = 86,
     * BF_0x07A6E531 = 87,
     * BF_0x34F9317B = 88,
     * BF_0x4240F5A9 = 89,
     * BF_0xEE129DBD = 90,
     * BF_0x053AEAD9 = 91
     * };
     *
     * Hash: 0x9F7794730795E019 | Since: 323
     */
    function setCombatAttributes(ped, attributeId, enabled) {
        SetPedCombatAttributes(ped, attributeId, enabled);
    }
    ped_1.setCombatAttributes = setCombatAttributes;
    /**
     * enum eCombatMovement // 0x4F456B61
     * {
     * CM_Stationary,
     * CM_Defensive,
     * CM_WillAdvance,
     * CM_WillRetreat
     * };
     *
     * Hash: 0x4D9CA1009AFBD057 | Since: 323
     */
    function setCombatMovement(ped, combatMovement) {
        SetPedCombatMovement(ped, combatMovement);
    }
    ped_1.setCombatMovement = setCombatMovement;
    /**
     * enum eCombatRange // 0xB69160F5
     * {
     * CR_Near,
     * CR_Medium,
     * CR_Far,
     * CR_VeryFar,
     * CR_NumRanges
     * };
     *
     * Hash: 0x3C606747B23E497B | Since: 323
     */
    function setCombatRange(ped, combatRange) {
        SetPedCombatRange(ped, combatRange);
    }
    ped_1.setCombatRange = setCombatRange;
    /**
     * paletteId: 0 to 3.
     *
     * componentId:
     * enum ePedVarComp
     * {
     * PV_COMP_INVALID = -1,
     * PV_COMP_HEAD,
     * PV_COMP_BERD,
     * PV_COMP_HAIR,
     * PV_COMP_UPPR,
     * PV_COMP_LOWR,
     * PV_COMP_HAND,
     * PV_COMP_FEET,
     * PV_COMP_TEEF,
     * PV_COMP_ACCS,
     * PV_COMP_TASK,
     * PV_COMP_DECL,
     * PV_COMP_JBIB,
     * PV_COMP_MAX
     * };
     *
     * Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0x262B14F48D29DE80 | Since: 323
     */
    function setComponentVariation(ped, componentId, drawableId, textureId, paletteId) {
        SetPedComponentVariation(ped, componentId, drawableId, textureId, paletteId);
    }
    ped_1.setComponentVariation = setComponentVariation;
    /**
     * enum ePedConfigFlags
     * {
     * _CPED_CONFIG_FLAG_0xC63DE95E = 1,
     * CPED_CONFIG_FLAG_NoCriticalHits = 2,
     * CPED_CONFIG_FLAG_DrownsInWater = 3,
     * CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
     * _CPED_CONFIG_FLAG_0x37D196F4 = 5,
     * _CPED_CONFIG_FLAG_0xE2462399 = 6,
     * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
     * _CPED_CONFIG_FLAG_0xEDDEB838 = 8,
     * _CPED_CONFIG_FLAG_0xB398B6FD = 9,
     * _CPED_CONFIG_FLAG_0xF6664E68 = 10,
     * _CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
     * _CPED_CONFIG_FLAG_0xCE394045 = 12,
     * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
     * _CPED_CONFIG_FLAG_0xCD8D1411 = 14,
     * _CPED_CONFIG_FLAG_0xB031F1A9 = 15,
     * _CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
     * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
     * _CPED_CONFIG_FLAG_0x380165BD = 18,
     * _CPED_CONFIG_FLAG_0x07C045C7 = 19,
     * _CPED_CONFIG_FLAG_0x583B5E2D = 20,
     * _CPED_CONFIG_FLAG_0x475EDA58 = 21,
     * _CPED_CONFIG_FLAG_0x8629D05B = 22,
     * _CPED_CONFIG_FLAG_0x1522968B = 23,
     * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
     * _CPED_CONFIG_FLAG_0x4CC09C4B = 25,
     * _CPED_CONFIG_FLAG_0x034F3053 = 26,
     * _CPED_CONFIG_FLAG_0xD91BA7CC = 27,
     * _CPED_CONFIG_FLAG_0x5C8DC66E = 28,
     * CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
     * _CPED_CONFIG_FLAG_0x6580B9D2 = 30,
     * _CPED_CONFIG_FLAG_0x0EF7A297 = 31,
     * CPED_CONFIG_FLAG_WillFlyThruWindscreen = 32,
     * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
     * CPED_CONFIG_FLAG_HasHelmet = 34,
     * CPED_CONFIG_FLAG_UseHelmet = 35,
     * CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
     * _CPED_CONFIG_FLAG_0xB130D17B = 37,
     * _CPED_CONFIG_FLAG_0x5F071200 = 38,
     * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
     * _CPED_CONFIG_FLAG_0xC287AAFF = 40,
     * _CPED_CONFIG_FLAG_0x203328CC = 41,
     * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
     * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
     * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
     * CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
     * _CPED_CONFIG_FLAG_0xDB115BFA = 46,
     * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
     * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
     * _CPED_CONFIG_FLAG_0xF8E99565 = 49,
     * _CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
     * _CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
     * _CPED_CONFIG_FLAG_NoCollison = 52,
     * _CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
     * _CPED_CONFIG_FLAG_0xD749FC41 = 54,
     * _CPED_CONFIG_FLAG_0x357F63F3 = 55,
     * _CPED_CONFIG_FLAG_0xC5E60961 = 56,
     * _CPED_CONFIG_FLAG_0x29275C3E = 57,
     * CPED_CONFIG_FLAG_IsFiring = 58,
     * CPED_CONFIG_FLAG_WasFiring = 59,
     * CPED_CONFIG_FLAG_IsStanding = 60,
     * CPED_CONFIG_FLAG_WasStanding = 61,
     * CPED_CONFIG_FLAG_InVehicle = 62,
     * CPED_CONFIG_FLAG_OnMount = 63,
     * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
     * CPED_CONFIG_FLAG_IsSwimming = 65,
     * CPED_CONFIG_FLAG_WasSwimming = 66,
     * CPED_CONFIG_FLAG_IsSkiing = 67,
     * CPED_CONFIG_FLAG_IsSitting = 68,
     * CPED_CONFIG_FLAG_KilledByStealth = 69,
     * CPED_CONFIG_FLAG_KilledByTakedown = 70,
     * CPED_CONFIG_FLAG_Knockedout = 71,
     * _CPED_CONFIG_FLAG_0x3E3C4560 = 72,
     * _CPED_CONFIG_FLAG_0x2994C7B7 = 73,
     * _CPED_CONFIG_FLAG_0x6D59D275 = 74,
     * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
     * CPED_CONFIG_FLAG_IsInTheAir = 76,
     * _CPED_CONFIG_FLAG_0x2D493FB7 = 77,
     * CPED_CONFIG_FLAG_IsAimingGun = 78,
     * _CPED_CONFIG_FLAG_0x14D69875 = 79,
     * _CPED_CONFIG_FLAG_0x40B05311 = 80,
     * _CPED_CONFIG_FLAG_0x8B230BC5 = 81,
     * _CPED_CONFIG_FLAG_0xC74E5842 = 82,
     * _CPED_CONFIG_FLAG_0x9EA86147 = 83,
     * _CPED_CONFIG_FLAG_0x674C746C = 84,
     * _CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
     * _CPED_CONFIG_FLAG_0xC144A1EF = 86,
     * _CPED_CONFIG_FLAG_0x0548512D = 87,
     * _CPED_CONFIG_FLAG_0x31C93909 = 88,
     * _CPED_CONFIG_FLAG_0xA0269315 = 89,
     * _CPED_CONFIG_FLAG_0xD4D59D4D = 90,
     * _CPED_CONFIG_FLAG_0x411D4420 = 91,
     * _CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
     * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
     * _CPED_CONFIG_FLAG_0x300E4CD3 = 94,
     * _CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
     * _CPED_CONFIG_FLAG_0x89C2EF13 = 96,
     * CPED_CONFIG_FLAG_VaultFromCover = 97,
     * _CPED_CONFIG_FLAG_0x02A852C8 = 98,
     * _CPED_CONFIG_FLAG_0x3D9407F1 = 99,
     * _CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
     * CPED_CONFIG_FLAG_ForcedAim = 101,
     * _CPED_CONFIG_FLAG_0xB942D71A = 102,
     * _CPED_CONFIG_FLAG_0xD26C55A8 = 103,
     * CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
     * CPED_CONFIG_FLAG_ForceReload = 105,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
     * CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
     * _CPED_CONFIG_FLAG_0x83C0A4BF = 111,
     * _CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
     * CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
     * _CPED_CONFIG_FLAG_0x43B80B79 = 114,
     * _CPED_CONFIG_FLAG_0x0D2A9309 = 115,
     * CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
     * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
     * CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
     * CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
     * CPED_CONFIG_FLAG_IsHandCuffed = 120,
     * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
     * CPED_CONFIG_FLAG_DisableMelee = 122,
     * CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
     * CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
     * _CPED_CONFIG_FLAG_0x5FED6BFD = 125,
     * CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
     * CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
     * CPED_CONFIG_FLAG_CanBeAgitated = 128,
     * CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
     * CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
     * CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
     * CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
     * CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
     * CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
     * CPED_CONFIG_FLAG_IsScuba = 135,
     * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
     * CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
     * CPED_CONFIG_FLAG_RidingTrain = 138,
     * CPED_CONFIG_FLAG_ArrestResult = 139,
     * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
     * CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
     * _CPED_CONFIG_FLAG_0x6901E731 = 142,
     * _CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
     * CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
     * CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
     * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
     * CPED_CONFIG_FLAG_StairsDetected = 147,
     * CPED_CONFIG_FLAG_SlopeDetected = 148,
     * _CPED_CONFIG_FLAG_0x1A15670B = 149,
     * CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
     * CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
     * CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
     * CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
     * CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
     * CPED_CONFIG_FLAG_CanPerformArrest = 155,
     * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
     * CPED_CONFIG_FLAG_CanBeArrested = 157,
     * _CPED_CONFIG_FLAG_0xF7960FF5 = 158,
     * CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
     * _CPED_CONFIG_FLAG_0x0C6C3099 = 160,
     * _CPED_CONFIG_FLAG_0x645F927A = 161,
     * _CPED_CONFIG_FLAG_0xA86549B9 = 162,
     * _CPED_CONFIG_FLAG_0x8AAF337A = 163,
     * _CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
     * _CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
     * CPED_CONFIG_FLAG_IsInjured = 166,
     * CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
     * _CPED_CONFIG_FLAG_0xD8072639 = 168,
     * CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
     * CPED_CONFIG_FLAG_ForceDirectEntry = 170,
     * CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
     * CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
     * CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
     * CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
     * _CPED_CONFIG_FLAG_0x90008BFA = 175,
     * _CPED_CONFIG_FLAG_0x07C7A910 = 176,
     * CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
     * _CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
     * CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
     * CPED_CONFIG_FLAG_IsInCustody = 180,
     * CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
     * CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
     * CPED_CONFIG_FLAG_IsAgitated = 183,
     * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
     * CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
     * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
     * CPED_CONFIG_FLAG_HasHurtStarted = 187,
     * CPED_CONFIG_FLAG_DisableHurt = 188,
     * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
     * _CPED_CONFIG_FLAG_0x32FC208B = 190,
     * _CPED_CONFIG_FLAG_0x0C296E5A = 191,
     * _CPED_CONFIG_FLAG_0xE63B73EC = 192,
     * CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
     * CPED_CONFIG_FLAG_UsingScenario = 194,
     * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
     * _CPED_CONFIG_FLAG_0xD88C58A1 = 196,
     * _CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
     * _CPED_CONFIG_FLAG_0xEA02B420 = 198,
     * CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
     * CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
     * _CPED_CONFIG_FLAG_0x5E6466F6 = 201,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
     * CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
     * CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
     * CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
     * _CPED_CONFIG_FLAG_0x415B26B9 = 207,
     * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
     * CPED_CONFIG_FLAG_DodgedPlayer = 209,
     * CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
     * CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
     * CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
     * CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
     * CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
     * CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
     * CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
     * CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
     * _CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
     * _CPED_CONFIG_FLAG_0x848FFEF2 = 219,
     * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
     * CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
     * _CPED_CONFIG_FLAG_0x84F722FA = 222,
     * _CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
     * _CPED_CONFIG_FLAG_0x728AA918 = 224,
     * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
     * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
     * CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
     * _CPED_CONFIG_FLAG_0x1EA7225F = 228,
     * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
     * CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
     * _CPED_CONFIG_FLAG_0xFC3E572D = 231,
     * _CPED_CONFIG_FLAG_0x08E9F9CF = 232,
     * _CPED_CONFIG_FLAG_0x2D3BA52D = 233,
     * _CPED_CONFIG_FLAG_0xFD2F53EA = 234,
     * _CPED_CONFIG_FLAG_0x31A1B03B = 235,
     * CPED_CONFIG_FLAG_IsHoldingProp = 236,
     * CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
     * _CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
     * _CPED_CONFIG_FLAG_0x26149198 = 239,
     * CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
     * CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
     * CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
     * CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
     * CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
     * CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
     * CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
     * _CPED_CONFIG_FLAG_0x0C754ACA = 247,
     * CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
     * CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
     * CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
     * CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
     * CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
     * CPED_CONFIG_FLAG_OnStairs = 253,
     * _CPED_CONFIG_FLAG_0xE1A2F73F = 254,
     * CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
     * _CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
     * CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
     * _CPED_CONFIG_FLAG_0x329DCF1A = 258,
     * _CPED_CONFIG_FLAG_0x8D90DD1B = 259,
     * _CPED_CONFIG_FLAG_0xB8A292B7 = 260,
     * CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
     * _CPED_CONFIG_FLAG_0x2AF558F0 = 262,
     * _CPED_CONFIG_FLAG_0x82251455 = 263,
     * _CPED_CONFIG_FLAG_0x30CF498B = 264,
     * _CPED_CONFIG_FLAG_0xE1CD50AF = 265,
     * _CPED_CONFIG_FLAG_0x72E4AE48 = 266,
     * _CPED_CONFIG_FLAG_0xC2657EA1 = 267,
     * CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
     * CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
     * CPED_CONFIG_FLAG_OnStairSlope = 270,
     * _CPED_CONFIG_FLAG_0xA0897933 = 271,
     * CPED_CONFIG_FLAG_DontBlipCop = 272,
     * CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
     * _CPED_CONFIG_FLAG_0xF7823618 = 274,
     * CPED_CONFIG_FLAG_KillWhenTrapped = 275,
     * CPED_CONFIG_FLAG_EdgeDetected = 276,
     * _CPED_CONFIG_FLAG_0x92B67896 = 277,
     * _CPED_CONFIG_FLAG_0xCAD677C9 = 278,
     * CPED_CONFIG_FLAG_AvoidTearGas = 279,
     * _CPED_CONFIG_FLAG_0x5276AC7B = 280,
     * CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
     * CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
     * _CPED_CONFIG_FLAG_0x9139724D = 283,
     * _CPED_CONFIG_FLAG_0xA1457461 = 284,
     * CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
     * CPED_CONFIG_FLAG_ShouldChargeNow = 286,
     * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
     * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
     * _CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
     * _CPED_CONFIG_FLAG_0xF3F5758C = 290,
     * _CPED_CONFIG_FLAG_0x2A9307F1 = 291,
     * _CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
     * _CPED_CONFIG_FLAG_0xA06A3C6C = 293,
     * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
     * _CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
     * CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
     * _CPED_CONFIG_FLAG_0xB31F1187 = 297,
     * _CPED_CONFIG_FLAG_0x84315402 = 298,
     * CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
     * _CPED_CONFIG_FLAG_0xC7829B67 = 300,
     * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
     * CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
     * _CPED_CONFIG_FLAG_0x2ADA871B = 303,
     * _CPED_CONFIG_FLAG_0x47BC8A58 = 304,
     * CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
     * _CPED_CONFIG_FLAG_0x4A133C50 = 306,
     * _CPED_CONFIG_FLAG_0xC58099C3 = 307,
     * _CPED_CONFIG_FLAG_0xF3D76D41 = 308,
     * _CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
     * CPED_CONFIG_FLAG_IsInCluster = 310,
     * CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
     * CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
     * _CPED_CONFIG_FLAG_0xD4136C22 = 313,
     * CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
     * CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
     * _CPED_CONFIG_FLAG_0xD5C98277 = 316,
     * CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
     * CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
     * _CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
     * CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
     * CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
     * CPED_CONFIG_FLAG_HasHighHeels = 322,
     * _CPED_CONFIG_FLAG_0x86B01E54 = 323,
     * CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
     * _CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
     * CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
     * CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
     * CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
     * CPED_CONFIG_FLAG_DisableTalkTo = 329,
     * CPED_CONFIG_FLAG_DontBlip = 330,
     * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
     * CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
     * _CPED_CONFIG_FLAG_0x150468FD = 333,
     * _CPED_CONFIG_FLAG_0x914EBD6B = 334,
     * _CPED_CONFIG_FLAG_0x79AF3B6D = 335,
     * _CPED_CONFIG_FLAG_0x75C7A632 = 336,
     * _CPED_CONFIG_FLAG_0x52D530E2 = 337,
     * _CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
     * CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
     * _CPED_CONFIG_FLAG_0x12ADB567 = 340,
     * _CPED_CONFIG_FLAG_0x105C8518 = 341,
     * CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
     * _CPED_CONFIG_FLAG_0xED152C3E = 343,
     * _CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
     * CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
     * _CPED_CONFIG_FLAG_0xCDDFE830 = 346,
     * CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
     * CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
     * CPED_CONFIG_FLAG_EquipJetpack = 349,
     * CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
     * _CPED_CONFIG_FLAG_0xE13D1F7C = 351,
     * _CPED_CONFIG_FLAG_0x40E25FB9 = 352,
     * _CPED_CONFIG_FLAG_0x930629D9 = 353,
     * _CPED_CONFIG_FLAG_0xECCF0C7F = 354,
     * _CPED_CONFIG_FLAG_0xB6E9613B = 355,
     * CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
     * CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
     * CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
     * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
     * CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
     * CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
     * CPED_CONFIG_FLAG_HasReserveParachute = 362,
     * CPED_CONFIG_FLAG_UseReserveParachute = 363,
     * CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
     * CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
     * CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
     * _CPED_CONFIG_FLAG_0xD7E07D37 = 367,
     * _CPED_CONFIG_FLAG_0x03C4FD24 = 368,
     * _CPED_CONFIG_FLAG_0x7675789A = 369,
     * _CPED_CONFIG_FLAG_0xB7288A88 = 370,
     * _CPED_CONFIG_FLAG_0xC06B6291 = 371,
     * CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
     * CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
     * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
     * CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
     * _CPED_CONFIG_FLAG_0x147F1FFB = 376,
     * _CPED_CONFIG_FLAG_0x4376DD79 = 377,
     * _CPED_CONFIG_FLAG_0xCD3DB518 = 378,
     * _CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
     * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
     * _CPED_CONFIG_FLAG_0xBCD816CD = 381,
     * _CPED_CONFIG_FLAG_0xCF02DD69 = 382,
     * _CPED_CONFIG_FLAG_0xF73AFA2E = 383,
     * _CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
     * _CPED_CONFIG_FLAG_0xF601F7EE = 385,
     * _CPED_CONFIG_FLAG_0xA91350FC = 386,
     * _CPED_CONFIG_FLAG_0x3AB23B96 = 387,
     * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
     * CPED_CONFIG_FLAG_HasBareFeet = 389,
     * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
     * CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
     * CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
     * _CPED_CONFIG_FLAG_0xC11D3E8F = 393,
     * CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
     * CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
     * CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
     * CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
     * CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
     * CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
     * CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
     * CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
     * CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
     * _CPED_CONFIG_FLAG_0x5E5B9591 = 403,
     * CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
     * _CPED_CONFIG_FLAG_0x77840177 = 405,
     * _CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
     * CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
     * CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
     * CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
     * CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
     * CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
     * CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
     * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
     * CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
     * CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
     * CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
     * CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
     * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
     * CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
     * _CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
     * CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
     * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
     * _CPED_CONFIG_FLAG_0xFE401D26 = 423,
     * CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
     * _CPED_CONFIG_FLAG_0x2B42AE82 = 425,
     * CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
     * CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
     * CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
     * CPED_CONFIG_FLAG_DisableStartEngine = 429,
     * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
     * CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
     * CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
     * CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
     * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
     * CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
     * CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
     * CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
     * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
     * _CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
     * _CPED_CONFIG_FLAG_0x50178878 = 440,
     * CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
     * CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
     * CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
     * CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
     * CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
     * CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
     * CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
     * CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
     * CPED_CONFIG_FLAG_FiresDummyRockets = 449,
     * CPED_CONFIG_FLAG_PedIsArresting = 450,
     * CPED_CONFIG_FLAG_IsDecoyPed = 451,
     * CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
     * CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
     * CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
     * _CPED_CONFIG_FLAG_0xB68D3EAB = 455,
     * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
     * _CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
     * CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
     * };
     *
     * Hash: 0x1913FE4CBF41C463 | Since: 323
     */
    function setConfigFlag(ped, flagId, value) {
        SetPedConfigFlag(ped, flagId, value);
    }
    ped_1.setConfigFlag = setConfigFlag;
    /**
     * teleports ped to coords along with the vehicle ped is in
     *
     * Hash: 0x9AFEFF481A85AB2E | Since: 323
     */
    function setCoordsKeepVehicle(ped, pos) {
        SetPedCoordsKeepVehicle(ped, pos.x, pos.y, pos.z);
    }
    ped_1.setCoordsKeepVehicle = setCoordsKeepVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x87052FE446E07247 | Since: 323
     */
    function setCoordsNoGang(ped, pos) {
        SetPedCoordsNoGang(ped, pos.x, pos.y, pos.z);
    }
    ped_1.setCoordsNoGang = setCoordsNoGang;
    /**
     * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
     *
     * Hash: 0xA549131166868ED3 | Since: 323
     */
    function setCowerHash(ped) {
        SetPedCowerHash(ped, undefined);
    }
    ped_1.setCowerHash = setCowerHash;
    /**
     * Sets Ped Default Clothes
     *
     * Hash: 0x45EEE61580806D63 | Since: 323
     */
    function setDefaultComponentVariation(ped) {
        SetPedDefaultComponentVariation(ped);
    }
    ped_1.setDefaultComponentVariation = setDefaultComponentVariation;
    /**
     * No comment provided
     *
     * Hash: 0x4EF47FE21698A8B6 | Since: 323
     */
    function setDefensiveAreaAttachedToPed(ped, attachPed) {
        SetPedDefensiveAreaAttachedToPed(ped, attachPed, 0, 0, 0, 0, 0, 0, 0, false, false);
    }
    ped_1.setDefensiveAreaAttachedToPed = setDefensiveAreaAttachedToPed;
    /**
     * No comment provided
     *
     * Hash: 0x413C6C763A4AFFAD | Since: 323
     */
    function setDefensiveAreaDirection(ped) {
        SetPedDefensiveAreaDirection(ped, 0, 0, 0, false);
    }
    ped_1.setDefensiveAreaDirection = setDefensiveAreaDirection;
    /**
     * No comment provided
     *
     * Hash: 0xF9B8F91AAD3B953E | Since: 323
     */
    function setDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius) {
        SetPedDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius, false);
    }
    ped_1.setDefensiveSphereAttachedToPed = setDefensiveSphereAttachedToPed;
    /**
     * No comment provided
     *
     * Hash: 0xE4723DB6E736CCFF | Since: 323
     */
    function setDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius) {
        SetPedDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius, false);
    }
    ped_1.setDefensiveSphereAttachedToVehicle = setDefensiveSphereAttachedToVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x95E3D6257B166CF2 | Since: 323
     */
    function setDensityMultiplierThisFrame(multiplier) {
        SetPedDensityMultiplierThisFrame(multiplier);
    }
    ped_1.setDensityMultiplierThisFrame = setDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xAA5A7ECE2AA8FE70 | Since: 323
     */
    function setDesiredHeading(ped, heading) {
        SetPedDesiredHeading(ped, heading);
    }
    ped_1.setDesiredHeading = setDesiredHeading;
    /**
     * No comment provided
     *
     * Hash: 0xEEB64139BA29A7CF | Since: 323
     */
    function setDiesInstantlyInWater(ped, toggle) {
        SetPedDiesInstantlyInWater(ped, toggle);
    }
    ped_1.setDiesInstantlyInWater = setDiesInstantlyInWater;
    /**
     * No comment provided
     *
     * Hash: 0xD718A22995E2B4BC | Since: 323
     */
    function setDiesInSinkingVehicle(ped, toggle) {
        SetPedDiesInSinkingVehicle(ped, toggle);
    }
    ped_1.setDiesInSinkingVehicle = setDiesInSinkingVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x2A30922C90C9B42C | Since: 323
     */
    function setDiesInVehicle(ped, toggle) {
        SetPedDiesInVehicle(ped, toggle);
    }
    ped_1.setDiesInVehicle = setDiesInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x56CEF0AC79073BDE | Since: 323
     */
    function setDiesInWater(ped, toggle) {
        SetPedDiesInWater(ped, toggle);
    }
    ped_1.setDiesInWater = setDiesInWater;
    /**
     * No comment provided
     *
     * Hash: 0x5BA7919BED300023 | Since: 323
     */
    function setDiesWhenInjured(ped, toggle) {
        SetPedDiesWhenInjured(ped, toggle);
    }
    ped_1.setDiesWhenInjured = setDiesWhenInjured;
    /**
     * No comment provided
     *
     * Hash: 0xED34AB6C5CB36520 | Since: 323
     */
    function setDriveByClipsetOverride(ped, clipset) {
        SetPedDriveByClipsetOverride(ped, clipset);
    }
    ped_1.setDriveByClipsetOverride = setDriveByClipsetOverride;
    /**
     * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
     *
     * Hash: 0x030983CA930B692D | Since: 323
     */
    function setDucking(ped, toggle) {
        SetPedDucking(ped, toggle);
    }
    ped_1.setDucking = setDucking;
    /**
     * intensity: 0.0f - 1.0f
     *
     * This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.
     *
     * Hash: 0x4E90D746056E273D | Since: 944
     */
    function setEmissiveScale(ped, intensity) {
        SetPedEmissiveIntensity(ped, intensity);
    }
    ped_1.setEmissiveScale = setEmissiveScale;
    /**
     * No comment provided
     *
     * Hash: 0xE906EC930F5FE7C8 | Since: 791
     */
    function setEnableCrewEmblem(ped, toggle) {
        Citizen.invokeNative('0xE906EC930F5FE7C8', ped, toggle);
    }
    ped_1.setEnableCrewEmblem = setEnableCrewEmblem;
    /**
     * No comment provided
     *
     * Hash: 0x97A790315D3831FD | Since: 323
     */
    function setEnableWeaponBlocking(ped, toggle) {
        SetPedEnableWeaponBlocking(ped, toggle);
    }
    ped_1.setEnableWeaponBlocking = setEnableWeaponBlocking;
    /**
     * Something related to the environmental effects natives.
     * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
     *
     * Hash: 0xD69411AA0CEBF9E9 | Since: 323
     */
    function setEnveffColorModulator(ped) {
        SetPedEnveffColorModulator(ped, 0, 0, 0);
    }
    ped_1.setEnveffColorModulator = setEnveffColorModulator;
    /**
     * In agency_heist3b.c4, its like this 90% of the time:
     *
     * `PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);`
     * `PED::SET_PED_ENVEFF_SCALE(ped, 1.0);`
     * `PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);`
     * `PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);`
     *
     * and its like this 10% of the time:
     *
     * `PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);`
     * `PED::SET_PED_ENVEFF_SCALE(ped, 0.65);`
     * `PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);`
     * `PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);`
     *
     * Hash: 0x110F526AB784111F | Since: 323
     */
    function setEnveffCpvAdd(ped) {
        Citizen.invokeNative('0x110F526AB784111F', ped, 0);
    }
    ped_1.setEnveffCpvAdd = setEnveffCpvAdd;
    /**
     * Values look to be between 0.0 and 1.0
     * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
     *
     * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
     *
     * Hash: 0xBF29516833893561 | Since: 323
     */
    function setEnveffScale(ped, value) {
        SetPedEnveffScale(ped, value);
    }
    ped_1.setEnveffScale = setEnveffScale;
    /**
     * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
     * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
     * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
     * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
     * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
     * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
     * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
     * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
     * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
     * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
     * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
     * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
     * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
     * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
     * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
     * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
     *
     * Firing pattern info: https://pastebin.com/Px036isB
     *
     * Hash: 0x9AC577F5A12AD8A9 | Since: 323
     */
    function setFiringPattern(ped, patternHash) {
        if (typeof patternHash === 'string')
            patternHash = misc.getHashKey(patternHash);
        SetPedFiringPattern(ped, patternHash);
    }
    ped_1.setFiringPattern = setFiringPattern;
    /**
     * bit 1 (0x2) = use vehicle
     * bit 15 (0x8000) = force cower
     *
     * Hash: 0x70A2D1137C8ED7C9 | Since: 323
     */
    function setFleeAttributes(ped, attributeFlags, enable) {
        SetPedFleeAttributes(ped, attributeFlags, enable);
    }
    ped_1.setFleeAttributes = setFleeAttributes;
    /**
     * No comment provided
     *
     * Hash: 0x7FB17BA2E7DECA5B | Since: 323
     */
    function setGeneratesDeadBodyEvents(ped, toggle) {
        SetPedGeneratesDeadBodyEvents(ped, toggle);
    }
    ped_1.setGeneratesDeadBodyEvents = setGeneratesDeadBodyEvents;
    /**
     * From the scripts:
     * `PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),`
     * "ANIM_GROUP_GESTURE_MISS_FRA0");
     * `PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),`
     * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
     *
     * Hash: 0xDDF803377F94AAA8 | Since: 323
     */
    function setGestureGroup(ped, animGroupGesture) {
        SetPedGestureGroup(ped, animGroupGesture);
    }
    ped_1.setGestureGroup = setGestureGroup;
    /**
     * No comment provided
     *
     * Hash: 0xBC0ED94165A48BC2 | Since: 323
     */
    function setGetOutUpsideDownVehicle(ped, toggle) {
        SetPedGetOutUpsideDownVehicle(ped, toggle);
    }
    ped_1.setGetOutUpsideDownVehicle = setGetOutUpsideDownVehicle;
    /**
     * enable or disable the gravity of a ped
     *
     * Examples:
     * `PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);`
     * `PED::SET_PED_GRAVITY(Local_289[iVar0 \/\*20\*\/], 0x00000001);`
     *
     * Hash: 0x9FF447B6B6AD960A | Since: 323
     */
    function setGravity(ped, toggle) {
        SetPedGravity(ped, toggle);
    }
    ped_1.setGravity = setGravity;
    /**
     * No comment provided
     *
     * Hash: 0x0BDDB8D9EC6BCF3C | Since: 323
     */
    function setGroupMemberPassengerIndex(ped, index) {
        SetPedGroupMemberPassengerIndex(ped, index);
    }
    ped_1.setGroupMemberPassengerIndex = setGroupMemberPassengerIndex;
    /**
     * No comment provided
     *
     * Hash: 0x4CFFC65454C93A49 | Since: 323
     */
    function setHairTint(ped, colorID, highlightColorID) {
        SetPedHairTint(ped, colorID, highlightColorID);
    }
    ped_1.setHairTint = setHairTint;
    /**
     * The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
     *
     * The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
     *
     * !!!Can someone add working example for this???
     *
     * try this:
     * headBlendData headData;
     * GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
     *
     * SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
     * , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
     *
     *
     * For more info please refer to this topic.
     * gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
     *
     * Hash: 0x9414E18B9434C2FE | Since: 323
     */
    function setHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) {
        SetPedHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
    }
    ped_1.setHeadBlendData = setHeadBlendData;
    /**
     * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
     *
     * overlayID       Part                  Index, to disable
     * 0               Blemishes             0 - 23, 255
     * 1               Facial Hair           0 - 28, 255
     * 2               Eyebrows              0 - 33, 255
     * 3               Ageing                0 - 14, 255
     * 4               Makeup                0 - 74, 255
     * 5               Blush                 0 - 6, 255
     * 6               Complexion            0 - 11, 255
     * 7               Sun Damage            0 - 10, 255
     * 8               Lipstick              0 - 9, 255
     * 9               Moles/Freckles        0 - 17, 255
     * 10              Chest Hair            0 - 16, 255
     * 11              Body Blemishes        0 - 11, 255
     * 12              Add Body Blemishes    0 - 1, 255
     *
     * Hash: 0x48F44967FA05CC1E | Since: 323
     */
    function setHeadOverlay(ped, overlayID, index, opacity) {
        SetPedHeadOverlay(ped, overlayID, index, opacity);
    }
    ped_1.setHeadOverlay = setHeadOverlay;
    /**
     *
     *
     * ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
     *
     * Called after SET_PED_HEAD_OVERLAY().
     *
     * Hash: 0x497BF74A7B9CB952 | Since: 323
     */
    function setHeadOverlayTint(ped, overlayID, colorType, colorID, secondColorID) {
        SetPedHeadOverlayColor(ped, overlayID, colorType, colorID, secondColorID);
    }
    ped_1.setHeadOverlayTint = setHeadOverlayTint;
    /**
     * No comment provided
     *
     * Hash: 0xB3352E018D6F89DF | Since: 2699
     */
    function setHealthPendingLastDamageEventOverrideFlag(toggle) {
        Citizen.invokeNative('0xB3352E018D6F89DF', toggle);
    }
    ped_1.setHealthPendingLastDamageEventOverrideFlag = setHealthPendingLastDamageEventOverrideFlag;
    /**
     * No comment provided
     *
     * Hash: 0x33A8F7F7D5F7F33C | Since: 323
     */
    function setHearingRange(ped, value) {
        SetPedHearingRange(ped, value);
    }
    ped_1.setHearingRange = setHearingRange;
    /**
     * No comment provided
     *
     * Hash: 0xC1F6EBF9A3D55538 | Since: 323
     */
    function setHeatscaleOverride(ped, heatScale) {
        SetPedHeatscaleOverride(ped, heatScale);
    }
    ped_1.setHeatscaleOverride = setHeatscaleOverride;
    /**
     * No comment provided
     *
     * Hash: 0x560A43136EB58105 | Since: 323
     */
    function setHelmet(ped, canWearHelmet) {
        SetPedHelmet(ped, canWearHelmet);
    }
    ped_1.setHelmet = setHelmet;
    /**
     * No comment provided
     *
     * Hash: 0xC0E78D5C2CE3EB25 | Since: 323
     */
    function setHelmetFlag(ped, helmetFlag) {
        SetPedHelmetFlag(ped, helmetFlag);
    }
    ped_1.setHelmetFlag = setHelmetFlag;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x26D83693ED99291C | Since: 323
     */
    function setHelmetPropIndex(ped, propIndex) {
        SetPedHelmetPropIndex(ped, propIndex, false);
    }
    ped_1.setHelmetPropIndex = setHelmetPropIndex;
    /**
     * No comment provided
     *
     * Hash: 0xF1550C4BD22582E2 | Since: 323
     */
    function setHelmetTextureIndex(ped, textureIndex) {
        SetPedHelmetTextureIndex(ped, textureIndex);
    }
    ped_1.setHelmetTextureIndex = setHelmetTextureIndex;
    /**
     * No comment provided
     *
     * Hash: 0x3F7325574E41B44D | Since: 791
     */
    function setHelmetVisorPropIndices(ped) {
        SetPedHelmetUnk(ped, false, 0, 0);
    }
    ped_1.setHelmetVisorPropIndices = setHelmetVisorPropIndices;
    /**
     * No comment provided
     *
     * Hash: 0x52D59AB61DDC05DD | Since: 323
     */
    function setHighlyPerceptive(ped, toggle) {
        SetPedHighlyPerceptive(ped, toggle);
    }
    ped_1.setHighlyPerceptive = setHighlyPerceptive;
    /**
     * No comment provided
     *
     * Hash: 0xF107E836A70DCE05 | Since: 323
     */
    function setIdRange(ped, value) {
        SetPedIdRange(ped, value);
    }
    ped_1.setIdRange = setIdRange;
    /**
     * No comment provided
     *
     * Hash: 0x570389D1C3DE3C6B | Since: 323
     */
    function setIncreasedAvoidanceRadius(ped) {
        SetPedIncreasedAvoidanceRadius(ped);
    }
    ped_1.setIncreasedAvoidanceRadius = setIncreasedAvoidanceRadius;
    /**
     * No comment provided
     *
     * Hash: 0xEC4B4B3B9908052A | Since: 323
     */
    function setInjuredOnGroundBehaviour(ped) {
        Citizen.invokeNative('0xEC4B4B3B9908052A', ped, 0);
    }
    ped_1.setInjuredOnGroundBehaviour = setInjuredOnGroundBehaviour;
    /**
     * Ped: The ped to warp.
     * vehicle: The vehicle to warp the ped into.
     * Seat_Index: [-1 is driver seat, -2 first free passenger seat]
     *
     * Moreinfo of Seat Index
     * DriverSeat = -1
     * Passenger = 0
     * Left Rear = 1
     * RightRear = 2
     *
     * Hash: 0xF75B0D629E1C063D | Since: 323
     */
    function setIntoVehicle(ped, vehicle, seatIndex) {
        SetPedIntoVehicle(ped, vehicle, seatIndex);
    }
    ped_1.setIntoVehicle = setIntoVehicle;
    /**
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));`
     * `PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));`
     *
     * Hash: 0x530071295899A8C6 | Since: 323
     */
    function setInVehicleContext(ped, context) {
        if (typeof context === 'string')
            context = misc.getHashKey(context);
        SetPedInVehicleContext(ped, context);
    }
    ped_1.setInVehicleContext = setInVehicleContext;
    /**
     * No comment provided
     *
     * Hash: 0xA9B61A329BFDCBEA | Since: 323
     */
    function setIsAvoidedByOthers() {
        Citizen.invokeNative('0xA9B61A329BFDCBEA', undefined, false);
    }
    ped_1.setIsAvoidedByOthers = setIsAvoidedByOthers;
    /**
     * No comment provided
     *
     * Hash: 0x33A60D8BDD6E508C | Since: 323
     */
    function setIsIgnoredByAutoOpenDoors(ped) {
        SetPedCanPlayInjuredAnims(ped, false);
    }
    ped_1.setIsIgnoredByAutoOpenDoors = setIsIgnoredByAutoOpenDoors;
    /**
     * No comment provided
     *
     * Hash: 0x971D38760FBC02EF | Since: 323
     */
    function setKeepTask(ped, toggle) {
        SetPedKeepTask(ped, toggle);
    }
    ped_1.setKeepTask = setKeepTask;
    /**
     * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
     *
     * Hash: 0xC396F5B86FF9FEBD | Since: 323
     */
    function setLegIkMode(ped, mode) {
        SetPedLegIkMode(ped, mode);
    }
    ped_1.setLegIkMode = setLegIkMode;
    /**
     * No comment provided
     *
     * Hash: 0xDC2C5C242AAC342B | Since: 323
     */
    function setLodMultiplier(ped, multiplier) {
        SetPedLodMultiplier(ped, multiplier);
    }
    ped_1.setLodMultiplier = setLodMultiplier;
    /**
     * Sets the maximum health of a ped.
     *
     * Hash: 0xF5F6378C4F3419D3 | Since: 323
     */
    function setMaxHealth(ped, value) {
        SetPedMaxHealth(ped, value);
    }
    ped_1.setMaxHealth = setMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0x433083750C5E064A | Since: 323
     */
    function setMaxMoveBlendRatio(ped, value) {
        SetPedMaxMoveBlendRatio(ped, value);
    }
    ped_1.setMaxMoveBlendRatio = setMaxMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0x43C851690662113D | Since: 323
     */
    function setMaxTimeInWater(ped, value) {
        SetPedMaxTimeInWater(ped, value);
    }
    ped_1.setMaxTimeInWater = setMaxTimeInWater;
    /**
     * No comment provided
     *
     * Hash: 0x6BA428C528D9E522 | Since: 323
     */
    function setMaxTimeUnderwater(ped, value) {
        SetPedMaxTimeUnderwater(ped, value);
    }
    ped_1.setMaxTimeUnderwater = setMaxTimeUnderwater;
    /**
     * Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
     *
     *
     *
     * 0 - Nose Width (Thin/Wide)
     *
     * 1 - Nose Peak (Up/Down)
     *
     * 2 - Nose Length (Long/Short)
     *
     * 3 - Nose Bone Curveness (Crooked/Curved)
     *
     * 4 - Nose Tip (Up/Down)
     *
     * 5 - Nose Bone Twist (Left/Right)
     *
     * 6 - Eyebrow (Up/Down)
     *
     * 7 - Eyebrow (In/Out)
     *
     * 8 - Cheek Bones (Up/Down)
     *
     * 9 - Cheek Sideways Bone Size (In/Out)
     *
     * 10 - Cheek Bones Width (Puffed/Gaunt)
     *
     * 11 - Eye Opening (Both) (Wide/Squinted)
     *
     * 12 - Lip Thickness (Both) (Fat/Thin)
     *
     * 13 - Jaw Bone Width (Narrow/Wide)
     *
     * 14 - Jaw Bone Shape (Round/Square)
     *
     * 15 - Chin Bone (Up/Down)
     *
     * 16 - Chin Bone Length (In/Out or Backward/Forward)
     *
     * 17 - Chin Bone Shape (Pointed/Square)
     *
     * 18 - Chin Hole (Chin Bum)
     *
     * 19 - Neck Thickness (Thin/Thick)
     *
     * Hash: 0x71A5C1DBA060049E | Since: 323
     */
    function setMicroMorph(ped, index, scale) {
        SetPedFaceFeature(ped, index, scale);
    }
    ped_1.setMicroMorph = setMicroMorph;
    /**
     * Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
     *
     * Hash: 0xFA0675AB151073FA | Since: 323
     */
    function setMinGroundTimeForStungun(ped, ms) {
        SetPedMinGroundTimeForStungun(ped, ms);
    }
    ped_1.setMinGroundTimeForStungun = setMinGroundTimeForStungun;
    /**
     * No comment provided
     *
     * Hash: 0x01A898D26E2333DD | Since: 323
     */
    function setMinMoveBlendRatio(ped, value) {
        SetPedMinMoveBlendRatio(ped, value);
    }
    ped_1.setMinMoveBlendRatio = setMinMoveBlendRatio;
    /**
     * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
     *
     * Hash: 0xE163A4BCE4DE6F11 | Since: 323
     */
    function setModelIsSuppressed(modelHash, toggle) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetPedModelIsSuppressed(modelHash, toggle);
    }
    ped_1.setModelIsSuppressed = setModelIsSuppressed;
    /**
     * Maximum possible amount of money on MP is 2000. ~JX
     *
     * -----------------------------------------------------------------------------
     *
     * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
     *
     * Hash: 0xA9C8960E8684C1B5 | Since: 323
     */
    function setMoney(ped, amount) {
        SetPedMoney(ped, amount);
    }
    ped_1.setMoney = setMoney;
    /**
     * No comment provided
     *
     * Hash: 0x0A986918B102B448 | Since: 323
     */
    function setMotionBlur(ped, toggle) {
        SetPedMotionBlur(ped, toggle);
    }
    ped_1.setMotionBlur = setMotionBlur;
    /**
     * Found in the b617d scripts:
     * `PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h");`
     *
     * Hash: 0x9DBA107B4937F809 | Since: 323
     */
    function setMotionInCoverClipsetOverride(ped) {
        SetPedCoverClipsetOverride(ped, undefined);
    }
    ped_1.setMotionInCoverClipsetOverride = setMotionInCoverClipsetOverride;
    /**
     * transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f
     *
     * List of movement clipsets:
     * Thanks to elsewhat for list.
     *
     * "ANIM_GROUP_MOVE_BALLISTIC"
     * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
     * "clipset@move@trash_fast_turn"
     * "FEMALE_FAST_RUNNER"
     * "missfbi4prepp1_garbageman"
     * "move_characters@franklin@fire"
     * "move_characters@Jimmy@slow@"
     * "move_characters@michael@fire"
     * "move_f@flee@a"
     * "move_f@scared"
     * "move_f@sexy@a"
     * "move_heist_lester"
     * "move_injured_generic"
     * "move_lester_CaneUp"
     * "move_m@bag"
     * "MOVE_M@BAIL_BOND_NOT_TAZERED"
     * "MOVE_M@BAIL_BOND_TAZERED"
     * "move_m@brave"
     * "move_m@casual@d"
     * "move_m@drunk@moderatedrunk"
     * "MOVE_M@DRUNK@MODERATEDRUNK"
     * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
     * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
     * "MOVE_M@DRUNK@VERYDRUNK"
     * "move_m@fire"
     * "move_m@gangster@var_e"
     * "move_m@gangster@var_f"
     * "move_m@gangster@var_i"
     * "move_m@JOG@"
     * "MOVE_M@PRISON_GAURD"
     * "MOVE_P_M_ONE"
     * "MOVE_P_M_ONE_BRIEFCASE"
     * "move_p_m_zero_janitor"
     * "move_p_m_zero_slow"
     * "move_ped_bucket"
     * "move_ped_crouched"
     * "move_ped_mop"
     * "MOVE_M@FEMME@"
     * "MOVE_F@FEMME@"
     * "MOVE_M@GANGSTER@NG"
     * "MOVE_F@GANGSTER@NG"
     * "MOVE_M@POSH@"
     * "MOVE_F@POSH@"
     * "MOVE_M@TOUGH_GUY@"
     * "MOVE_F@TOUGH_GUY@"
     *
     * ~ NotCrunchyTaco
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0xAF8A94EDE7712BEF | Since: 323
     */
    function setMovementClipset(ped, clipSet, transitionSpeed) {
        SetPedMovementClipset(ped, clipSet, transitionSpeed);
    }
    ped_1.setMovementClipset = setMovementClipset;
    /**
     * No comment provided
     *
     * Hash: 0x9E8C908F41584ECD | Since: 323
     */
    function setMoveAnimsBlendOut(ped) {
        SetPedMoveAnimsBlendOut(ped);
    }
    ped_1.setMoveAnimsBlendOut = setMoveAnimsBlendOut;
    /**
     * No comment provided
     *
     * Hash: 0x0B3E35AC043707D9 | Since: 573
     */
    function setMoveRateInWaterOverride(ped) {
        Citizen.invokeNative('0x0B3E35AC043707D9', ped, 0);
    }
    ped_1.setMoveRateInWaterOverride = setMoveRateInWaterOverride;
    /**
     * Min: 0.00
     * Max: 10.00
     *
     * Can be used in combo with fast run cheat.
     *
     * When value is set to 10.00:
     * Sprinting without fast run cheat: 66 m/s
     * Sprinting with fast run cheat: 77 m/s
     *
     * Needs to be looped!
     *
     * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
     *
     * Hash: 0x085BF80FA50A39D1 | Since: 323
     */
    function setMoveRateOverride(ped, value) {
        SetPedMoveRateOverride(ped, value);
    }
    ped_1.setMoveRateOverride = setMoveRateOverride;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * *untested but char *name could also be a hash for a localized string
     *
     * Hash: 0x98EFA132A4117BE1 | Since: 323
     */
    function setNameDebug(ped, name) {
        SetPedNameDebug(ped, name);
    }
    ped_1.setNameDebug = setNameDebug;
    /**
     * No comment provided
     *
     * Hash: 0x3DBFC55D5C9BB447 | Since: 323
     */
    function setNeverLeavesGroup(ped, toggle) {
        SetPedNeverLeavesGroup(ped, toggle);
    }
    ped_1.setNeverLeavesGroup = setNeverLeavesGroup;
    /**
     * The distance between these points, is the diagonal of a box (remember it's 3D).
     *
     * Hash: 0xEE01041D559983EA | Since: 323
     */
    function setNonCreationArea(x1, y1, z1, x2, y2, z2) {
        SetPedNonCreationArea(x1, y1, z1, x2, y2, z2);
    }
    ped_1.setNonCreationArea = setNonCreationArea;
    /**
     * No comment provided
     *
     * Hash: 0xA52D5247A4227E14 | Since: 323
     */
    function setNoTimeDelayBeforeShot() {
        Citizen.invokeNative('0xA52D5247A4227E14', undefined);
    }
    ped_1.setNoTimeDelayBeforeShot = setNoTimeDelayBeforeShot;
    /**
     * No comment provided
     *
     * Hash: 0xFE07FF6495D52E2A | Since: 323
     */
    function setPanicExitScenario() {
        return SetPedPanicExitScenario(undefined, undefined, undefined, undefined);
    }
    ped_1.setPanicExitScenario = setPanicExitScenario;
    /**
     * No comment provided
     *
     * Hash: 0x333FC8DB079B7186 | Since: 323
     */
    function setParachuteTintIndex(ped, tintIndex) {
        SetPedParachuteTintIndex(ped, tintIndex);
    }
    ped_1.setParachuteTintIndex = setParachuteTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0x83A169EABCDB10A2 | Since: 323
     */
    function setPhonePaletteIdx() {
        SetPedPhonePaletteIdx(undefined, undefined);
    }
    ped_1.setPhonePaletteIdx = setPhonePaletteIdx;
    /**
     * i could be time. Only example in the decompiled scripts uses it as -1.
     *
     * Hash: 0xAAD6D1ACF08F4612 | Since: 323
     */
    function setPinnedDown(ped, pinned, i) {
        return SetPedPinnedDown(ped, pinned, i);
    }
    ped_1.setPinnedDown = setPinnedDown;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x94D94BF1A75AED3D | Since: 323
     */
    function setPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle) {
        SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle);
    }
    ped_1.setPlaysHeadOnHornAnimWhenDiesInVehicle = setPlaysHeadOnHornAnimWhenDiesInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x8421EB4DA7E391B9 | Since: 323
     */
    function setPreferredCoverSet(ped, itemSet) {
        SetPedPreferredCoverSet(ped, itemSet);
    }
    ped_1.setPreferredCoverSet = setPreferredCoverSet;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x2B16A3BFF1FBCE49 | Since: 323
     */
    function setPreloadPropData(ped, componentId, drawableId, TextureId) {
        return SetPedPreloadPropData(ped, componentId, drawableId, TextureId);
    }
    ped_1.setPreloadPropData = setPreloadPropData;
    /**
     * from extreme3.c4
     * `PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));`
     *
     * p1 is probably componentId
     *
     * Hash: 0x39D55A620FCB6A3A | Since: 323
     */
    function setPreloadVariationData(ped, slot, drawableId, textureId) {
        return SetPedPreloadVariationData(ped, slot, drawableId, textureId);
    }
    ped_1.setPreloadVariationData = setPreloadVariationData;
    /**
     * This is only called once in the scripts.
     *
     * sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
     * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
     * `PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());`
     *
     * Hash: 0xCD17B554996A8D9E | Since: 323
     */
    function setPrimaryLookat(ped, lookAt) {
        SetPedPrimaryLookat(ped, lookAt);
    }
    ped_1.setPrimaryLookat = setPrimaryLookat;
    /**
     * ComponentId can be set to various things based on what category you're wanting to set
     * enum PedPropsData
     * {
     * PED_PROP_HATS = 0,
     * PED_PROP_GLASSES = 1,
     * PED_PROP_EARS = 2,
     * PED_PROP_WATCHES = 3,
     * };
     * Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0x93376B65A266EB5F | Since: 323
     */
    function setPropIndex(ped, componentId, drawableId, TextureId, attach) {
        SetPedPropIndex(ped, componentId, drawableId, TextureId, attach, undefined);
    }
    ped_1.setPropIndex = setPropIndex;
    /**
     * No comment provided
     *
     * Hash: 0x01F6594B923B9251 | Since: 323
     */
    function setRagdollForceFall(ped) {
        SetPedRagdollForceFall(ped);
    }
    ped_1.setRagdollForceFall = setRagdollForceFall;
    /**
     * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
     *
     * Hash: 0xF0A4F1BBF4FA7497 | Since: 323
     */
    function setRagdollOnCollision(ped, toggle) {
        SetPedRagdollOnCollision(ped, toggle);
    }
    ped_1.setRagdollOnCollision = setRagdollOnCollision;
    /**
     * p1 is always 0 in R* scripts.
     *
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xC8A9481A01E63C28 | Since: 323
     */
    function setRandomComponentVariation(ped) {
        SetPedRandomComponentVariation(ped, 0);
    }
    ped_1.setRandomComponentVariation = setRandomComponentVariation;
    /**
     * List of component/props ID
     * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
     *
     * Hash: 0xC44AA05345C992C6 | Since: 323
     */
    function setRandomProps(ped) {
        SetPedRandomProps(ped);
    }
    ped_1.setRandomProps = setRandomProps;
    /**
     * No comment provided
     *
     * Hash: 0xADB3F206518799E8 | Since: 323
     */
    function setRelationshipGroupDefaultHash(ped, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        SetPedRelationshipGroupDefaultHash(ped, hash);
    }
    ped_1.setRelationshipGroupDefaultHash = setRelationshipGroupDefaultHash;
    /**
     * No comment provided
     *
     * Hash: 0xC80A74AC829DDD92 | Since: 323
     */
    function setRelationshipGroupHash(ped, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        SetPedRelationshipGroupHash(ped, hash);
    }
    ped_1.setRelationshipGroupHash = setRelationshipGroupHash;
    /**
     * No comment provided
     *
     * Hash: 0xE88DA0751C22A2AD | Since: 323
     */
    function setReserveParachuteTintIndex(ped) {
        SetPedReserveParachuteTintIndex(ped, undefined);
    }
    ped_1.setReserveParachuteTintIndex = setReserveParachuteTintIndex;
    /**
     * `PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);`
     * Known values:
     * PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
     *
     * Hash: 0xC1E8A365BF3B29F2 | Since: 323
     */
    function setResetFlag(ped, flagId, doReset) {
        SetPedResetFlag(ped, flagId, doReset);
    }
    ped_1.setResetFlag = setResetFlag;
    /**
     * This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
     *
     * Hash: 0x36C6984C3ED0C911 | Since: 323
     */
    function setScubaGearVariation(ped) {
        SetPedScubaGearVariation(ped);
    }
    ped_1.setScubaGearVariation = setScubaGearVariation;
    /**
     * No comment provided
     *
     * Hash: 0xF29CF591C4BF6CEE | Since: 323
     */
    function setSeeingRange(ped, value) {
        SetPedSeeingRange(ped, value);
    }
    ped_1.setSeeingRange = setSeeingRange;
    /**
     * No comment provided
     *
     * Hash: 0x96A05E4FB321B1BA | Since: 323
     */
    function setShootsAtCoord(ped, pos, toggle) {
        SetPedShootsAtCoord(ped, pos.x, pos.y, pos.z, toggle);
    }
    ped_1.setShootsAtCoord = setShootsAtCoord;
    /**
     * shootRate 0-1000
     *
     * Hash: 0x614DA022990752DC | Since: 323
     */
    function setShootRate(ped, shootRate) {
        SetPedShootRate(ped, shootRate);
    }
    ped_1.setShootRate = setShootRate;
    /**
     * No comment provided
     *
     * Hash: 0x425AECF167663F48 | Since: 323
     */
    function setShouldIgnoreScenarioExitCollisionChecks(ped) {
        Citizen.invokeNative('0x425AECF167663F48', ped, false);
    }
    ped_1.setShouldIgnoreScenarioExitCollisionChecks = setShouldIgnoreScenarioExitCollisionChecks;
    /**
     * No comment provided
     *
     * Hash: 0x5B6010B3CBC29095 | Since: 323
     */
    function setShouldIgnoreScenarioNavChecks() {
        Citizen.invokeNative('0x5B6010B3CBC29095', undefined, false);
    }
    ped_1.setShouldIgnoreScenarioNavChecks = setShouldIgnoreScenarioNavChecks;
    /**
     * No comment provided
     *
     * Hash: 0xEC6935EBE0847B90 | Since: 323
     */
    function setShouldPlayDirectedNormalScenarioExit() {
        return SetPedShouldPlayDirectedScenarioExit(undefined, undefined, undefined, undefined);
    }
    ped_1.setShouldPlayDirectedNormalScenarioExit = setShouldPlayDirectedNormalScenarioExit;
    /**
     * No comment provided
     *
     * Hash: 0xEEED8FAFEC331A70 | Since: 323
     */
    function setShouldPlayFleeScenarioExit(ped) {
        return SetPedShouldPlayFleeScenarioExit(ped, undefined, undefined, undefined);
    }
    ped_1.setShouldPlayFleeScenarioExit = setShouldPlayFleeScenarioExit;
    /**
     * No comment provided
     *
     * Hash: 0xF1C03A5352243A30 | Since: 323
     */
    function setShouldPlayImmediateScenarioExit(ped) {
        SetPedShouldPlayImmediateScenarioExit(ped);
    }
    ped_1.setShouldPlayImmediateScenarioExit = setShouldPlayImmediateScenarioExit;
    /**
     * No comment provided
     *
     * Hash: 0xA3A9299C4F2ADB98 | Since: 323
     */
    function setShouldPlayNormalScenarioExit(ped) {
        SetPedShouldPlayNormalScenarioExit(ped);
    }
    ped_1.setShouldPlayNormalScenarioExit = setShouldPlayNormalScenarioExit;
    /**
     * No comment provided
     *
     * Hash: 0xCEDA60A74219D064 | Since: 323
     */
    function setShouldProbeForScenarioExitsInOneFrame() {
        Citizen.invokeNative('0xCEDA60A74219D064', undefined, false);
    }
    ped_1.setShouldProbeForScenarioExitsInOneFrame = setShouldProbeForScenarioExitsInOneFrame;
    /**
     * No comment provided
     *
     * Hash: 0x9D3151A373974804 | Since: 323
     */
    function setSphereDefensiveArea(ped, pos, radius) {
        SetPedSphereDefensiveArea(ped, pos.x, pos.y, pos.z, radius, false, false);
    }
    ped_1.setSphereDefensiveArea = setSphereDefensiveArea;
    /**
     * No comment provided
     *
     * Hash: 0xEDF4079F9D54C9A1 | Since: 323
     */
    function setStayInVehicleWhenJacked(ped, toggle) {
        SetPedStayInVehicleWhenJacked(ped, toggle);
    }
    ped_1.setStayInVehicleWhenJacked = setStayInVehicleWhenJacked;
    /**
     * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
     *
     * Hash: 0x88CBB5CEB96B7BD2 | Since: 323
     */
    function setStealthMovement(ped, action) {
        SetPedStealthMovement(ped, false, action);
    }
    ped_1.setStealthMovement = setStealthMovement;
    /**
     * No comment provided
     *
     * Hash: 0x2016C603D6B8987C | Since: 323
     */
    function setSteersAroundDeadBodies(ped, toggle) {
        Citizen.invokeNative('0x2016C603D6B8987C', ped, toggle);
    }
    ped_1.setSteersAroundDeadBodies = setSteersAroundDeadBodies;
    /**
     * No comment provided
     *
     * Hash: 0x1509C089ADC208BF | Since: 323
     */
    function setSteersAroundObjects(ped, toggle) {
        SetPedSteersAroundObjects(ped, toggle);
    }
    ped_1.setSteersAroundObjects = setSteersAroundObjects;
    /**
     * No comment provided
     *
     * Hash: 0x46F2193B3AD1D891 | Since: 323
     */
    function setSteersAroundPeds(ped, toggle) {
        SetPedSteersAroundPeds(ped, toggle);
    }
    ped_1.setSteersAroundPeds = setSteersAroundPeds;
    /**
     * No comment provided
     *
     * Hash: 0xEB6FB9D48DDE23EC | Since: 323
     */
    function setSteersAroundVehicles(ped, toggle) {
        SetPedSteersAroundVehicles(ped, toggle);
    }
    ped_1.setSteersAroundVehicles = setSteersAroundVehicles;
    /**
     * No comment provided
     *
     * Hash: 0x288DF530C92DAD6F | Since: 323
     */
    function setSteerBias(ped, value) {
        Citizen.invokeNative('0x288DF530C92DAD6F', ped, value);
    }
    ped_1.setSteerBias = setSteerBias;
    /**
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x29A28F3F8CF6D854 | Since: 323
     */
    function setStrafeClipset(ped, clipSet) {
        SetPedStrafeClipset(ped, clipSet);
    }
    ped_1.setStrafeClipset = setStrafeClipset;
    /**
     * Ped no longer takes critical damage modifiers if set to FALSE.
     * Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
     *
     * Hash: 0xEBD76F2359F190AC | Since: 323
     */
    function setSuffersCriticalHits(ped, toggle) {
        SetPedSuffersCriticalHits(ped, toggle);
    }
    ped_1.setSuffersCriticalHits = setSuffersCriticalHits;
    /**
     * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
     *
     * Hash: 0x27B0405F59637D1F | Since: 323
     */
    function setSweat(ped, sweat) {
        SetPedSweat(ped, sweat);
    }
    ped_1.setSweat = setSweat;
    /**
     * enum eTargetLossResponseType
     * {
     * TLR_ExitTask,
     * TLR_NeverLoseTarget,
     * TLR_SearchForTarget
     * };
     *
     * Hash: 0x0703B9079823DA4A | Since: 323
     */
    function setTargetLossResponse(ped, responseType) {
        SetPedTargetLossResponse(ped, responseType);
    }
    ped_1.setTargetLossResponse = setTargetLossResponse;
    /**
     * No comment provided
     *
     * Hash: 0x112942C6E708F70B | Since: 323
     */
    function setToInformRespectedFriends(ped, radius, maxFriends) {
        SetPedToInformRespectedFriends(ped, radius, maxFriends);
    }
    ped_1.setToInformRespectedFriends = setToInformRespectedFriends;
    /**
     * No comment provided
     *
     * Hash: 0x332B562EEDA62399 | Since: 323
     */
    function setToLoadCover(ped, toggle) {
        SetPedToLoadCover(ped, toggle);
    }
    ped_1.setToLoadCover = setToLoadCover;
    /**
     * p4/p5: Unused in TU27
     * Ragdoll Types:
     * **0**: CTaskNMRelax
     * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
     * **Else**: CTaskNMBalance
     * time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
     *
     * time2- Unknown time, in milliseconds
     *
     * ragdollType-
     * 0 : Normal ragdoll
     * 1 : Falls with stiff legs/body
     * 2 : Narrow leg stumble(may not fall)
     * 3 : Wide leg stumble(may not fall)
     *
     * p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
     *
     *
     *
     *
     * EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
     *
     * Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
     *
     * Hash: 0xAE99FB955581844A | Since: 323
     */
    function setToRagdoll(ped, time1, time2, ragdollType) {
        return SetPedToRagdoll(ped, time1, time2, ragdollType, false, false, false);
    }
    ped_1.setToRagdoll = setToRagdoll;
    /**
     * Return variable is never used in R*'s scripts.
     *
     * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
     *
     * enum eRagdollType
     * {
     * RD_MALE=0,
     * RD_FEMALE = 1,
     * RD_MALE_LARGE = 2,
     * RD_CUSTOM = 3,
     * }
     *
     * x, y, and z are coordinates, most likely to where the ped will fall.
     *
     * p8 to p13 are always 0f in R*'s scripts.
     *
     * (Simplified) Example of the usage of the function from R*'s scripts:
     * `ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);`
     *
     *
     * Hash: 0xD76632D99E4966C8 | Since: 323
     */
    function setToRagdollWithFall(ped, time, ragdollType, pos, velocity) {
        return SetPedToRagdollWithFall(ped, time, 0, ragdollType, pos.x, pos.y, pos.z, velocity, 0, 0, 0, 0, 0, 0);
    }
    ped_1.setToRagdollWithFall = setToRagdollWithFall;
    /**
     * No comment provided
     *
     * Hash: 0x0F62619393661D6E | Since: 877
     */
    function setTreatedAsFriendly() {
        Citizen.invokeNative('0x0F62619393661D6E', undefined, undefined, undefined);
    }
    ped_1.setTreatedAsFriendly = setTreatedAsFriendly;
    /**
     * No comment provided
     *
     * Hash: 0xAFC976FD0580C7B3 | Since: 323
     */
    function setUpperBodyDamageOnly(ped, toggle) {
        Citizen.invokeNative('0xAFC976FD0580C7B3', ped, toggle);
    }
    ped_1.setUpperBodyDamageOnly = setUpperBodyDamageOnly;
    /**
     * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
     *
     * Hash: 0xD75ACCF5E0FB5367 | Since: 323
     */
    function setUsingActionMode(ped, action) {
        SetPedUsingActionMode(ped, false, 0, action);
    }
    ped_1.setUsingActionMode = setUsingActionMode;
    /**
     * seatIndex must be <= 2
     *
     * Hash: 0x952F06BEECD775CC | Since: 323
     */
    function setVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags) {
        SetPedVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags, undefined);
    }
    ped_1.setVehicleForcedSeatUsage = setVehicleForcedSeatUsage;
    /**
     * No comment provided
     *
     * Hash: 0x3B6405E8AB34A907 | Since: 323
     */
    function setVisualFieldCenterAngle(ped, angle) {
        SetPedVisualFieldCenterAngle(ped, angle);
    }
    ped_1.setVisualFieldCenterAngle = setVisualFieldCenterAngle;
    /**
     * No comment provided
     *
     * Hash: 0x70793BDCA1E854D4 | Since: 323
     */
    function setVisualFieldMaxAngle(ped, value) {
        SetPedVisualFieldMaxAngle(ped, value);
    }
    ped_1.setVisualFieldMaxAngle = setVisualFieldMaxAngle;
    /**
     * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
     *
     * Hash: 0x78D0B67629D75856 | Since: 323
     */
    function setVisualFieldMaxElevationAngle(ped, angle) {
        SetPedVisualFieldMaxElevationAngle(ped, angle);
    }
    ped_1.setVisualFieldMaxElevationAngle = setVisualFieldMaxElevationAngle;
    /**
     * No comment provided
     *
     * Hash: 0x2DB492222FB21E26 | Since: 323
     */
    function setVisualFieldMinAngle(ped, value) {
        SetPedVisualFieldMinAngle(ped, value);
    }
    ped_1.setVisualFieldMinAngle = setVisualFieldMinAngle;
    /**
     * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
     * -90f should let the ped see 90 degrees below them, for example.
     *
     * Hash: 0x7A276EB2C224D70F | Since: 323
     */
    function setVisualFieldMinElevationAngle(ped, angle) {
        SetPedVisualFieldMinElevationAngle(ped, angle);
    }
    ped_1.setVisualFieldMinElevationAngle = setVisualFieldMinElevationAngle;
    /**
     * No comment provided
     *
     * Hash: 0x9C74B0BC831B753A | Since: 323
     */
    function setVisualFieldPeripheralRange(ped, range) {
        SetPedVisualFieldPeripheralRange(ped, range);
    }
    ped_1.setVisualFieldPeripheralRange = setVisualFieldPeripheralRange;
    /**
     * No comment provided
     *
     * Hash: 0x2622E35B77D3ACA2 | Since: 323
     */
    function setWeaponMovementClipset(ped, clipSet) {
        SetPedWeaponMovementClipset(ped, clipSet);
    }
    ped_1.setWeaponMovementClipset = setWeaponMovementClipset;
    /**
     * No comment provided
     *
     * Hash: 0xAC0BB4D87777CAE2 | Since: 2802
     */
    function setWetness(ped, wetLevel) {
        Citizen.invokeNative('0xAC0BB4D87777CAE2', ped, wetLevel);
    }
    ped_1.setWetness = setWetness;
    /**
     * `combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function`
     *
     * Hash: 0xB5485E4907B53019 | Since: 323
     */
    function setWetnessEnabledThisFrame(ped) {
        SetPedWetnessEnabledThisFrame(ped);
    }
    ped_1.setWetnessEnabledThisFrame = setWetnessEnabledThisFrame;
    /**
     * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
     *
     *
     *
     * Hash: 0x44CB6447D2571AA0 | Since: 323
     */
    function setWetnessHeight(ped, height) {
        SetPedWetnessHeight(ped, height);
    }
    ped_1.setWetnessHeight = setWetnessHeight;
    /**
     * No comment provided
     *
     * Hash: 0x3E9679C1DFCF422C | Since: 877
     */
    function setWillOnlyAttackWantedPlayer() {
        Citizen.invokeNative('0x3E9679C1DFCF422C', undefined, undefined);
    }
    ped_1.setWillOnlyAttackWantedPlayer = setWillOnlyAttackWantedPlayer;
    /**
     * Min and max are usually 100.0 and 200.0
     *
     * Hash: 0xD8C3BE3EE94CAF2D | Since: 323
     */
    function setPopControlSphereThisFrame(pos, min, max) {
        SetPopControlSphereThisFrame(pos.x, pos.y, pos.z, min, max);
    }
    ped_1.setPopControlSphereThisFrame = setPopControlSphereThisFrame;
    /**
     * Works for both player and peds,
     *
     * enum eRagdollBlockingFlags
     * {
     * RBF_BULLET_IMPACT = 0,
     * RBF_VEHICLE_IMPACT = 1,
     * RBF_FIRE = 2,
     * RBF_ELECTROCUTION = 3,
     * RBF_PLAYER_IMPACT = 4,
     * RBF_EXPLOSION = 5,0
     * RBF_IMPACT_OBJECT = 6,
     * RBF_MELEE = 7,
     * RBF_RUBBER_BULLET = 8,
     * RBF_FALLING = 9,
     * RBF_WATER_JET = 10,
     * RBF_DROWNING = 11,
     * _0x9F52E2C4 = 12,
     * RBF_PLAYER_BUMP = 13,
     * RBF_PLAYER_RAGDOLL_BUMP = 14,
     * RBF_PED_RAGDOLL_BUMP = 15,
     * RBF_VEHICLE_GRAB = 16,
     * RBF_SMOKE_GRENADE = 17,
     * };
     *
     *
     *
     * Hash: 0x26695EC767728D84 | Since: 323
     */
    function setRagdollBlockingFlags(ped, blockingFlag) {
        SetRagdollBlockingFlags(ped, blockingFlag);
    }
    ped_1.setRagdollBlockingFlags = setRagdollBlockingFlags;
    /**
     * Sets the relationship between two groups. This should be called twice (once for each group).
     *
     * Relationship types:
     * 0 = Companion
     * 1 = Respect
     * 2 = Like
     * 3 = Neutral
     * 4 = Dislike
     * 5 = Hate
     * 255 = Pedestrians
     *
     * Example:
     * `PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);`
     * `PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);`
     *
     * Hash: 0xBF25EB89375A37AD | Since: 323
     */
    function setRelationshipBetweenGroups(relationship, group1, group2) {
        if (typeof group1 === 'string')
            group1 = misc.getHashKey(group1);
        if (typeof group2 === 'string')
            group2 = misc.getHashKey(group2);
        SetRelationshipBetweenGroups(relationship, group1, group2);
    }
    ped_1.setRelationshipBetweenGroups = setRelationshipBetweenGroups;
    /**
     * No comment provided
     *
     * Hash: 0x5615E0C5EB2BC6E2 | Since: 877
     */
    function setRelationshipGroupAffectsWantedLevel(group) {
        if (typeof group === 'string')
            group = misc.getHashKey(group);
        SetRelationshipGroupDontAffectWantedLevel(group, false);
    }
    ped_1.setRelationshipGroupAffectsWantedLevel = setRelationshipGroupAffectsWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x28157D43CF600981 | Since: 323
     */
    function setScenariosSpawnInSphereArea(pos, range) {
        SetScenarioPedsSpawnInSphereArea(pos.x, pos.y, pos.z, range, 0);
    }
    ped_1.setScenariosSpawnInSphereArea = setScenariosSpawnInSphereArea;
    /**
     * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
     *
     * Hash: 0x14F19A8782C8071E | Since: 323
     */
    function setScenariosToBeReturnedByNextCommand(value) {
        SetScenarioPedsToBeReturnedByNextCommand(value);
    }
    ped_1.setScenariosToBeReturnedByNextCommand = setScenariosToBeReturnedByNextCommand;
    /**
     * No comment provided
     *
     * Hash: 0x7A556143A1C03898 | Since: 323
     */
    function setScenarioDensityMultiplierThisFrame() {
        SetScenarioPedDensityMultiplierThisFrame(0, 0);
    }
    ped_1.setScenarioDensityMultiplierThisFrame = setScenarioDensityMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x5917BBA32D06C230 | Since: 323
     */
    function setScriptedAnimSeatOffset(ped) {
        SetScriptedAnimSeatOffset(ped, 0);
    }
    ped_1.setScriptedAnimSeatOffset = setScriptedAnimSeatOffset;
    /**
     * No comment provided
     *
     * Hash: 0x5086C7843552CF85 | Since: 323
     */
    function setScriptedConversionCoordThisFrame(pos) {
        SetScriptedConversionCoordThisFrame(pos.x, pos.y, pos.z);
    }
    ped_1.setScriptedConversionCoordThisFrame = setScriptedConversionCoordThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x394B9CD12435C981 | Since: 323
     */
    function setSynchronizedSceneHoldLastFrame(sceneID, toggle) {
        SetSynchronizedSceneHoldLastFrame(sceneID, toggle);
    }
    ped_1.setSynchronizedSceneHoldLastFrame = setSynchronizedSceneHoldLastFrame;
    /**
     * No comment provided
     *
     * Hash: 0xD9A897A4C6C2974F | Since: 323
     */
    function setSynchronizedSceneLoo(sceneID, toggle) {
        SetSynchronizedSceneLooped(sceneID, toggle);
    }
    ped_1.setSynchronizedSceneLoo = setSynchronizedSceneLoo;
    /**
     * No comment provided
     *
     * Hash: 0x6ACF6B7225801CD7 | Since: 323
     */
    function setSynchronizedSceneOrigin(sceneID, pos, roll, pitch, yaw) {
        SetSynchronizedSceneOrigin(sceneID, pos.x, pos.y, pos.z, roll, pitch, yaw, false);
    }
    ped_1.setSynchronizedSceneOrigin = setSynchronizedSceneOrigin;
    /**
     * No comment provided
     *
     * Hash: 0x734292F4F0ABF6D0 | Since: 323
     */
    function setSynchronizedScenePhase(sceneID, phase) {
        SetSynchronizedScenePhase(sceneID, phase);
    }
    ped_1.setSynchronizedScenePhase = setSynchronizedScenePhase;
    /**
     * No comment provided
     *
     * Hash: 0xB6C49F8A5E295A5D | Since: 323
     */
    function setSynchronizedSceneRate(sceneID, rate) {
        SetSynchronizedSceneRate(sceneID, rate);
    }
    ped_1.setSynchronizedSceneRate = setSynchronizedSceneRate;
    /**
     * No comment provided
     *
     * Hash: 0x2F3C3D9F50681DE4 | Since: 323
     */
    function setTreatAsAmbientForDriverLockon(ped) {
        Citizen.invokeNative('0x2F3C3D9F50681DE4', ped, false);
    }
    ped_1.setTreatAsAmbientForDriverLockon = setTreatAsAmbientForDriverLockon;
    /**
     * No comment provided
     *
     * Hash: 0xFD325494792302D7 | Since: 323
     */
    function setUseCameraHeadingForDesiredDirectionLockOnTest(ped, toggle) {
        Citizen.invokeNative('0xFD325494792302D7', ped, toggle);
    }
    ped_1.setUseCameraHeadingForDesiredDirectionLockOnTest = setUseCameraHeadingForDesiredDirectionLockOnTest;
    /**
     * No comment provided
     *
     * Hash: 0xFEE4A5459472A9F8 | Since: 323
     */
    function spawnpointsCancelSearch() {
        SpawnpointsCancelSearch();
    }
    ped_1.spawnpointsCancelSearch = spawnpointsCancelSearch;
    /**
     * No comment provided
     *
     * Hash: 0xA635C11B8C44AFC2 | Since: 323
     */
    function spawnpointsGetNumSearchResults() {
        return SpawnpointsGetNumSearchResults();
    }
    ped_1.spawnpointsGetNumSearchResults = spawnpointsGetNumSearchResults;
    /**
     * No comment provided
     *
     * Hash: 0x280C7E3AC7F56E90 | Since: 323
     */
    function spawnpointsGetSearchResult(randomInt) {
        return SpawnpointsGetSearchResult(randomInt);
    }
    ped_1.spawnpointsGetSearchResult = spawnpointsGetSearchResult;
    /**
     * No comment provided
     *
     * Hash: 0xB782F8238512BAD5 | Since: 323
     */
    function spawnpointsGetSearchResultFlags() {
        return SpawnpointsGetSearchResultFlags(0);
    }
    ped_1.spawnpointsGetSearchResultFlags = spawnpointsGetSearchResultFlags;
    /**
     * No comment provided
     *
     * Hash: 0x3C67506996001F5E | Since: 323
     */
    function spawnpointsIsSearchActive() {
        return SpawnpointsIsSearchActive();
    }
    ped_1.spawnpointsIsSearchActive = spawnpointsIsSearchActive;
    /**
     * No comment provided
     *
     * Hash: 0xA586FBEB32A53DBB | Since: 323
     */
    function spawnpointsIsSearchComplete() {
        return SpawnpointsIsSearchComplete();
    }
    ped_1.spawnpointsIsSearchComplete = spawnpointsIsSearchComplete;
    /**
     * No comment provided
     *
     * Hash: 0xF445DE8DA80A1792 | Since: 323
     */
    function spawnpointsIsSearchFailed() {
        return SpawnpointsIsSearchFailed();
    }
    ped_1.spawnpointsIsSearchFailed = spawnpointsIsSearchFailed;
    /**
     * No comment provided
     *
     * Hash: 0x2DF9038C90AD5264 | Since: 323
     */
    function spawnpointsStartSearch(interiorFlags, scale, duration) {
        SpawnpointsStartSearch(0, 0, 0, 0, 0, interiorFlags, scale, duration);
    }
    ped_1.spawnpointsStartSearch = spawnpointsStartSearch;
    /**
     * No comment provided
     *
     * Hash: 0xB2AFF10216DEFA2F | Since: 323
     */
    function spawnpointsStartSearchInAngledArea(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration) {
        SpawnpointsStartSearchInAngledArea(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration);
    }
    ped_1.spawnpointsStartSearchInAngledArea = spawnpointsStartSearchInAngledArea;
    /**
     * p1 was always 1 (true).
     *
     * Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
     *
     * Hash: 0xF9ACF4A08098EA25 | Since: 323
     */
    function specialFunctionDoNotUse(ped) {
        SpecialFunctionDoNotUse(ped, false);
    }
    ped_1.specialFunctionDoNotUse = specialFunctionDoNotUse;
    /**
     * No comment provided
     *
     * Hash: 0xB47BD05FA66B40CF | Since: 323
     */
    function stopAnyModelBeingSuppressed() {
        StopAnyPedModelBeingSuppressed();
    }
    ped_1.stopAnyModelBeingSuppressed = stopAnyModelBeingSuppressed;
    /**
     * No comment provided
     *
     * Hash: 0xC158D28142A34608 | Since: 323
     */
    function stopWeaponFiringWhenDropped(ped) {
        StopPedWeaponFiringWhenDropped(ped);
    }
    ped_1.stopWeaponFiringWhenDropped = stopWeaponFiringWhenDropped;
    /**
     * No comment provided
     *
     * Hash: 0x5A7F62FDA59759BD | Since: 323
     */
    function suppressAmbientAggressiveCleanupThisFrame() {
        Citizen.invokeNative('0x5A7F62FDA59759BD');
    }
    ped_1.suppressAmbientAggressiveCleanupThisFrame = suppressAmbientAggressiveCleanupThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xCD9CC7E200A52A6F | Since: 323
     */
    function takeOwnershipOfSynchronizedScene(scene) {
        TakeOwnershipOfSynchronizedScene(scene);
    }
    ped_1.takeOwnershipOfSynchronizedScene = takeOwnershipOfSynchronizedScene;
    /**
     * No comment provided
     *
     * Hash: 0xAD27D957598E49E9 | Since: 1290
     */
    function tellGroupsInAreaToAttack(ped, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        Citizen.invokeNative('0xAD27D957598E49E9', ped, undefined, 0, hash, undefined, undefined);
    }
    ped_1.tellGroupsInAreaToAttack = tellGroupsInAreaToAttack;
    /**
     * No comment provided
     *
     * Hash: 0x9A77DFD295E29B09 | Since: 323
     */
    function toggleScenarioCowerInPlace(ped, toggle) {
        Citizen.invokeNative('0x9A77DFD295E29B09', ped, toggle);
    }
    ped_1.toggleScenarioCowerInPlace = toggleScenarioCowerInPlace;
    /**
     * No comment provided
     *
     * Hash: 0xC2EE020F5FB4DB53 | Since: 323
     */
    function triggerIdleAnimationOn(ped) {
        Citizen.invokeNative('0xC2EE020F5FB4DB53', ped);
    }
    ped_1.triggerIdleAnimationOn = triggerIdleAnimationOn;
    /**
     * No comment provided
     *
     * Hash: 0x25361A96E0F7E419 | Since: 323
     */
    function triggerScenarioPanicexittoflee() {
        return Citizen.invokeNative('0x25361A96E0F7E419', undefined, undefined, undefined, undefined);
    }
    ped_1.triggerScenarioPanicexittoflee = triggerScenarioPanicexittoflee;
    /**
     * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
     *
     * Hash: 0x96B1361D9B24C2FF | Since: 323
     */
    function unregisterheadshot(id) {
        UnregisterPedheadshot(id);
    }
    ped_1.unregisterheadshot = unregisterheadshot;
    /**
     * See SET_PED_HEAD_BLEND_DATA().
     *
     * Hash: 0x723538F61C647C5A | Since: 323
     */
    function updateHeadBlendData(ped, shapeMix, skinMix, thirdMix) {
        UpdatePedHeadBlendData(ped, shapeMix, skinMix, thirdMix);
    }
    ped_1.updateHeadBlendData = updateHeadBlendData;
    /**
     * No comment provided
     *
     * Hash: 0xF9800AA1A771B000 | Since: 323
     */
    function wasKilledByStealth(ped) {
        return WasPedKilledByStealth(ped);
    }
    ped_1.wasKilledByStealth = wasKilledByStealth;
    /**
     * No comment provided
     *
     * Hash: 0x7F08E26039C7347C | Since: 323
     */
    function wasKilledByTakedown(ped) {
        return WasPedKilledByTakedown(ped);
    }
    ped_1.wasKilledByTakedown = wasKilledByTakedown;
    /**
     * No comment provided
     *
     * Hash: 0x61767F73EACEED21 | Since: 323
     */
    function wasKnockedOut(ped) {
        return WasPedKnockedOut(ped);
    }
    ped_1.wasKnockedOut = wasKnockedOut;
    /**
     * Despite this function's name, it simply returns whether the specified handle is a Ped.
     *
     * Hash: 0x11B499C1E0FF8559 | Since: 323
     */
    function wasSkeletonUpdated(ped) {
        return WasPedSkeletonUpdated(ped);
    }
    ped_1.wasSkeletonUpdated = wasSkeletonUpdated;
    /**
     * No comment provided
     *
     * Hash: 0xA32ABFEB2A03B306 | Since: 3095
     */
    function hasClearLosToEntity(ped, entity, pos) {
        return Citizen.invokeNative('0xA32ABFEB2A03B306', ped, entity, pos.x, pos.y, pos.z, 0, false, false);
    }
    ped_1.hasClearLosToEntity = hasClearLosToEntity;
    /**
     * No comment provided
     *
     * Hash: 0xC73EFFC5E043A8BA | Since: 3258
     */
    function setBlockAmbientsFromDroppingWeaponsThisFrame() {
        SetBlockAmbientPedsFromDroppingWeaponsThisFrame();
    }
    ped_1.setBlockAmbientsFromDroppingWeaponsThisFrame = setBlockAmbientsFromDroppingWeaponsThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x100CD221F572F6E1 | Since: 3407
     */
    function setSurvivesBeingOutOfWater(ped, toggle) {
        return Citizen.invokeNative('0x100CD221F572F6E1', ped, toggle);
    }
    ped_1.setSurvivesBeingOutOfWater = setSurvivesBeingOutOfWater;
})(ped || (ped = {}));
export var physics;
(function (physics) {
    /**
     * Returns all rope handles. The data returned adheres to the following layout:
     *
     * ```
     * [ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]
     * ```
     *
     * Hash: 0x760A2D67 | Since: unknown
     */
    function getAllRopes() {
        return Citizen.invokeNative('0x760A2D67');
    }
    physics.getAllRopes = getAllRopes;
    /**
     * ```cpp
     * enum eRopeFlags
     * {
     * DrawShadowEnabled = 2,
     * Breakable = 4,
     * RopeUnwindingFront = 8,
     * RopeWinding = 32
     * }
     * ```
     *
     * Hash: 0xA80FFE99 | Since: unknown
     */
    function getRopeFlags(rope) {
        return Citizen.invokeNative('0xA80FFE99', rope);
    }
    physics.getRopeFlags = getRopeFlags;
    /**
     * No comment provided
     *
     * Hash: 0x66D70EA3 | Since: unknown
     */
    function getRopeLengthChangeRate(rope) {
        return Citizen.invokeNative('0x66D70EA3', rope);
    }
    physics.getRopeLengthChangeRate = getRopeLengthChangeRate;
    /**
     * No comment provided
     *
     * Hash: 0xF341E6CA | Since: unknown
     */
    function getRopeTimeMultiplier(rope) {
        return Citizen.invokeNative('0xF341E6CA', rope);
    }
    physics.getRopeTimeMultiplier = getRopeTimeMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x2AB2E0F6 | Since: unknown
     */
    function getRopeUpdateOrder(rope) {
        return Citizen.invokeNative('0x2AB2E0F6', rope);
    }
    physics.getRopeUpdateOrder = getRopeUpdateOrder;
    /**
     * Registers a custom rope data with the game. For guidance on what these values should be use common:/data/ropedata.xml as a reference.
     * Returns a rope type which can be passed into [ADD_ROPE](#\_0xE832D760399EB220) to use a custom rope design.
     * Once a rope data is registered it can be used indefinitely and you should take caution not too register too many as to exceed the games limit.
     *
     * Hash: 0xF213AE8D | Since: unknown
     */
    function registerRopeData(numSections, radius, diffuseTextureName, normalMapName, distanceMappingScale, uvScaleX, uvScaleY, specularFresnel, specularFalloff, specularIntensity, bumpiness, color) {
        return Citizen.invokeNative('0xF213AE8D', numSections, radius, diffuseTextureName, normalMapName, distanceMappingScale, uvScaleX, uvScaleY, specularFresnel, specularFalloff, specularIntensity, bumpiness, color);
    }
    physics.registerRopeData = registerRopeData;
    /**
     * Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.
     *
     * Hash: 0x6D712937 | Since: unknown
     */
    function resetFlyThroughWindscreenParams() {
        Citizen.invokeNative('0x6D712937');
    }
    physics.resetFlyThroughWindscreenParams = resetFlyThroughWindscreenParams;
    /**
     * Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.
     *
     * Hash: 0x4D3118ED | Since: unknown
     */
    function setFlyThroughWindscreenParams(vehMinSpeed, unkMinSpeed, unkModifier, minDamage) {
        return Citizen.invokeNative('0x4D3118ED', vehMinSpeed, unkMinSpeed, unkModifier, minDamage);
    }
    physics.setFlyThroughWindscreenParams = setFlyThroughWindscreenParams;
    /**
     * Toggles whether the usage of [ADD_ROPE](#\_0xE832D760399EB220) should create an underlying CNetworkRopeWorldStateData. By default this is set to false.
     *
     * Hash: 0xE62FC73 | Since: unknown
     */
    function setRopesCreateNetworkWorldState(shouldCreate) {
        Citizen.invokeNative('0xE62FC73', shouldCreate);
    }
    physics.setRopesCreateNetworkWorldState = setRopesCreateNetworkWorldState;
    /**
     * Set's the ropes length change rate, which is the speed that rope should wind if started.
     *
     * Hash: 0x69B680A7 | Since: unknown
     */
    function setRopeLengthChangeRate(rope, lengthChangeRate) {
        Citizen.invokeNative('0x69B680A7', rope, lengthChangeRate);
    }
    physics.setRopeLengthChangeRate = setRopeLengthChangeRate;
    /**
     * No comment provided
     *
     * Hash: 0x710311ADF0E20730 | Since: 323
     */
    function activate(entity) {
        ActivatePhysics(entity);
    }
    physics.activate = activate;
    /**
     * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
     * __
     *
     * Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
     *
     * When attached, Position<vector> does not matter
     * When attached, Angle<vector> does not matter
     *
     * Rope Type:
     * 4 and bellow is a thick rope
     * 5 and up are small metal wires
     * 0 crashes the game
     *
     * Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
     *
     * windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.
     *
     * Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
     *
     * breakable - Whether or not shooting the rope will break it.
     *
     * unkPtr - unknown ptr, always 0 in orig scripts
     * __
     *
     * Lengths can be calculated like so:
     *
     * float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
     *
     *
     * NOTES:
     *
     * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
     *
     * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
     *
     * Hash: 0xE832D760399EB220 | Since: 323
     */
    function addRope(pos, rot, length, ropeType, maxLength, minLength, windingSpeed, rigid, breakWhenShot) {
        return AddRope(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, length, ropeType, maxLength, minLength, windingSpeed, false, false, rigid, 0, breakWhenShot);
    }
    physics.addRope = addRope;
    /**
     * No comment provided
     *
     * Hash: 0xE37F721824571784 | Since: 323
     */
    function applyImpulseToCloth(pos, vecX, vecY, vecZ, impulse) {
        ApplyImpulseToCloth(pos.x, pos.y, pos.z, vecX, vecY, vecZ, impulse);
    }
    physics.applyImpulseToCloth = applyImpulseToCloth;
    /**
     * Attaches entity 1 to entity 2.
     *
     * Hash: 0x3D95EC8B6D940AC3 | Since: 323
     */
    function attachEntitiesToRope(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length) {
        return AttachEntitiesToRope(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, false, false);
    }
    physics.attachEntitiesToRope = attachEntitiesToRope;
    /**
     * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
     *
     * Hash: 0x4B490A6832559A65 | Since: 323
     */
    function attachRopeToEntity(ropeId, entity, pos) {
        AttachRopeToEntity(ropeId, entity, pos.x, pos.y, pos.z, false);
    }
    physics.attachRopeToEntity = attachRopeToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x2E648D16F6E308F3 | Since: 323
     */
    function breakEntityGlass(entity) {
        BreakEntityGlass(entity, 0, 0, 0, 0, 0, 0, 0, 0, undefined, false);
    }
    physics.breakEntityGlass = breakEntityGlass;
    /**
     * No comment provided
     *
     * Hash: 0xAA5D6B1888E4DB20 | Since: 323
     */
    function deleteChildRope(ropeId) {
        DeleteChildRope(ropeId);
    }
    physics.deleteChildRope = deleteChildRope;
    /**
     * No comment provided
     *
     * Hash: 0x52B4829281364649 | Since: 323
     */
    function deleteRope(ropeId) {
        DeleteRope(ropeId);
    }
    physics.deleteRope = deleteRope;
    /**
     * No comment provided
     *
     * Hash: 0xBCF3026912A8647D | Since: 323
     */
    function detachRopeFromEntity(ropeId, entity) {
        DetachRopeFromEntity(ropeId, entity);
    }
    physics.detachRopeFromEntity = detachRopeFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xFD5448BE3111ED96 | Since: 323
     */
    function doesRopeExist() {
        return DoesRopeExist();
    }
    physics.doesRopeExist = doesRopeExist;
    /**
     * No comment provided
     *
     * Hash: 0x271C9D3ACA5D6409 | Since: 323
     */
    function doesScriptOwnRope(ropeId) {
        return DoesRopeBelongToThisScript(ropeId);
    }
    physics.doesScriptOwnRope = doesScriptOwnRope;
    /**
     * No comment provided
     *
     * Hash: 0x8214A4B5A7A33612 | Since: 323
     */
    function getCgoffset(entity) {
        return new Vector3(GetCgoffset(entity));
    }
    physics.getCgoffset = getCgoffset;
    /**
     * No comment provided
     *
     * Hash: 0x8C520A929415BCD2 | Since: 3407
     */
    function getDamping(entity, _type) {
        return new Vector3(Citizen.invokeNative('0x8C520A929415BCD2', entity, _type));
    }
    physics.getDamping = getDamping;
    /**
     * No comment provided
     *
     * Hash: 0x0C112765300C7E1E | Since: 505
     */
    function getIsEntityAFrag(_object) {
        return GetHasObjectFragInst(_object);
    }
    physics.getIsEntityAFrag = getIsEntityAFrag;
    /**
     * No comment provided
     *
     * Hash: 0x21BB0FBD3E217C2D | Since: 323
     */
    function getRopeLastVertexCoord(ropeId) {
        return new Vector3(GetRopeLastVertexCoord(ropeId));
    }
    physics.getRopeLastVertexCoord = getRopeLastVertexCoord;
    /**
     * No comment provided
     *
     * Hash: 0xEA61CA8E80F09E4D | Since: 323
     */
    function getRopeVertexCoord(ropeId, vertex) {
        return new Vector3(GetRopeVertexCoord(ropeId, vertex));
    }
    physics.getRopeVertexCoord = getRopeVertexCoord;
    /**
     * No comment provided
     *
     * Hash: 0x3655F544CD30F0B5 | Since: 323
     */
    function getRopeVertexCount(ropeId) {
        return GetRopeVertexCount(ropeId);
    }
    physics.getRopeVertexCount = getRopeVertexCount;
    /**
     * No comment provided
     *
     * Hash: 0x84DE3B5FB3E666F0 | Since: 323
     */
    function isRopeAttachedAtBothEnds() {
        return Citizen.invokeNative('0x84DE3B5FB3E666F0');
    }
    physics.isRopeAttachedAtBothEnds = isRopeAttachedAtBothEnds;
    /**
     * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
     *
     * Hash: 0xCBB203C04D1ABD27 | Since: 323
     */
    function loadRopeData(ropeId, rope_preset) {
        LoadRopeData(ropeId, rope_preset);
    }
    physics.loadRopeData = loadRopeData;
    /**
     * No comment provided
     *
     * Hash: 0x2B320CF14146B69A | Since: 323
     */
    function pinRopeVertex(ropeId, vertex, pos) {
        PinRopeVertex(ropeId, vertex, pos.x, pos.y, pos.z);
    }
    physics.pinRopeVertex = pinRopeVertex;
    /**
     * No comment provided
     *
     * Hash: 0xCC6E963682533882 | Since: 323
     */
    function resetDisableBreaking(_object) {
        Citizen.invokeNative('0xCC6E963682533882', _object);
    }
    physics.resetDisableBreaking = resetDisableBreaking;
    /**
     * No comment provided
     *
     * Hash: 0xF2D0E6A75CC05597 | Since: 323
     */
    function ropeAreTexturesLoaded() {
        return RopeAreTexturesLoaded();
    }
    physics.ropeAreTexturesLoaded = ropeAreTexturesLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xBC0CE682D4D05650 | Since: 323
     */
    function ropeAttachVirtualBoundGeom(ropeId) {
        Citizen.invokeNative('0xBC0CE682D4D05650', ropeId, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    physics.ropeAttachVirtualBoundGeom = ropeAttachVirtualBoundGeom;
    /**
     * No comment provided
     *
     * Hash: 0xB1B6216CA2E7B55E | Since: 323
     */
    function ropeChangeScriptOwner() {
        Citizen.invokeNative('0xB1B6216CA2E7B55E', undefined, false, false);
    }
    physics.ropeChangeScriptOwner = ropeChangeScriptOwner;
    /**
     * No comment provided
     *
     * Hash: 0x5389D48EFA2F079A | Since: 323
     */
    function ropeConvertToSimple(ropeId) {
        RopeConvertToSimple(ropeId);
    }
    physics.ropeConvertToSimple = ropeConvertToSimple;
    /**
     * No comment provided
     *
     * Hash: 0xA1AE736541B0FCA3 | Since: 1868
     */
    function ropeDrawEnabled() {
        return Citizen.invokeNative('0xA1AE736541B0FCA3', false);
    }
    physics.ropeDrawEnabled = ropeDrawEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xF159A63806BB5BA8 | Since: 323
     */
    function ropeDrawShadowEnabled(toggle) {
        return RopeDrawShadowEnabled(toggle);
    }
    physics.ropeDrawShadowEnabled = ropeDrawShadowEnabled;
    /**
     * Forces a rope to a certain length.
     *
     * Hash: 0xD009F759A723DB1B | Since: 323
     */
    function ropeForceLength(ropeId, length) {
        RopeForceLength(ropeId, length);
    }
    physics.ropeForceLength = ropeForceLength;
    /**
     * No comment provided
     *
     * Hash: 0x73040398DFF9A4A6 | Since: 323
     */
    function ropeGetDistanceBetweenEnds(ropeId) {
        return RopeGetDistanceBetweenEnds(ropeId);
    }
    physics.ropeGetDistanceBetweenEnds = ropeGetDistanceBetweenEnds;
    /**
     * Loads rope textures for all ropes in the current scene.
     *
     * Hash: 0x9B9039DBF2D258C1 | Since: 323
     */
    function ropeLoadTextures() {
        RopeLoadTextures();
    }
    physics.ropeLoadTextures = ropeLoadTextures;
    /**
     * Reset a rope to a certain length.
     *
     * Hash: 0xC16DE94D9BEA14A0 | Since: 323
     */
    function ropeResetLength(ropeId, length) {
        RopeResetLength(ropeId, length);
    }
    physics.ropeResetLength = ropeResetLength;
    /**
     * No comment provided
     *
     * Hash: 0xB743F735C03D7810 | Since: 323
     */
    function ropeSetRefframevelocityColliderorder(ropeId) {
        Citizen.invokeNative('0xB743F735C03D7810', ropeId, 0);
    }
    physics.ropeSetRefframevelocityColliderorder = ropeSetRefframevelocityColliderorder;
    /**
     * No comment provided
     *
     * Hash: 0x36CCB9BE67B970FD | Since: 323
     */
    function ropeSetSmoothReelin(ropeId) {
        Citizen.invokeNative('0x36CCB9BE67B970FD', ropeId, false);
    }
    physics.ropeSetSmoothReelin = ropeSetSmoothReelin;
    /**
     * No comment provided
     *
     * Hash: 0xDC57A637A20006ED | Since: 323
     */
    function ropeSetUpdateOrder(ropeId) {
        RopeSetUpdateOrder(ropeId, undefined);
    }
    physics.ropeSetUpdateOrder = ropeSetUpdateOrder;
    /**
     * No comment provided
     *
     * Hash: 0xC8D667EE52114ABA | Since: 323
     */
    function ropeSetUpdatePinverts(ropeId) {
        RopeSetUpdatePinverts(ropeId);
    }
    physics.ropeSetUpdatePinverts = ropeSetUpdatePinverts;
    /**
     * Unloads rope textures for all ropes in the current scene.
     *
     * Hash: 0x6CE36C35C1AC8163 | Since: 323
     */
    function ropeUnloadTextures() {
        RopeUnloadTextures();
    }
    physics.ropeUnloadTextures = ropeUnloadTextures;
    /**
     * No comment provided
     *
     * Hash: 0xD8FA3908D7B86904 | Since: 323
     */
    function setCgoffset(entity, pos) {
        SetCgoffset(entity, pos.x, pos.y, pos.z);
    }
    physics.setCgoffset = setCgoffset;
    /**
     * No comment provided
     *
     * Hash: 0xBE520D9761FF811F | Since: 323
     */
    function setCgAtBoundcenter(entity) {
        SetCgAtBoundcenter(entity);
    }
    physics.setCgAtBoundcenter = setCgAtBoundcenter;
    /**
     * No comment provided
     *
     * Hash: 0xEEA3B200A6FEB65B | Since: 323
     */
    function setDamping(entity, vertex, value) {
        SetDamping(entity, vertex, value);
    }
    physics.setDamping = setDamping;
    /**
     * No comment provided
     *
     * Hash: 0x5CEC1A84620E7D5B | Since: 323
     */
    function setDisableBreaking(_object, toggle) {
        SetDisableBreaking(_object, toggle);
    }
    physics.setDisableBreaking = setDisableBreaking;
    /**
     * No comment provided
     *
     * Hash: 0x01BA3AED21C16CFB | Since: 323
     */
    function setDisableFragDamage(_object, toggle) {
        SetDisableFragDamage(_object, toggle);
    }
    physics.setDisableFragDamage = setDisableFragDamage;
    /**
     * Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
     *
     * Hash: 0xAA6A6098851C396F | Since: 1604
     */
    function setInArenaMode(toggle) {
        SetLaunchControlEnabled(toggle);
    }
    physics.setInArenaMode = setInArenaMode;
    /**
     * No comment provided
     *
     * Hash: 0x9EBD751E5787BAF2 | Since: 791
     */
    function setInStuntMode() {
        Citizen.invokeNative('0x9EBD751E5787BAF2', false);
    }
    physics.setInStuntMode = setInStuntMode;
    /**
     * No comment provided
     *
     * Hash: 0x15F944730C832252 | Since: 463
     */
    function setUseKinematic(entity, toggle) {
        SetEntityProofUnk(entity, toggle);
    }
    physics.setUseKinematic = setUseKinematic;
    /**
     * No comment provided
     *
     * Hash: 0x538D1179EC1AA9A9 | Since: 323
     */
    function startRopeUnwindingFront(ropeId) {
        StartRopeUnwindingFront(ropeId);
    }
    physics.startRopeUnwindingFront = startRopeUnwindingFront;
    /**
     * No comment provided
     *
     * Hash: 0x1461C72C889E343E | Since: 323
     */
    function startRopeWinding(ropeId) {
        StartRopeWinding(ropeId);
    }
    physics.startRopeWinding = startRopeWinding;
    /**
     * No comment provided
     *
     * Hash: 0xFFF3A50779EFBBB3 | Since: 323
     */
    function stopRopeUnwindingFront(ropeId) {
        StopRopeUnwindingFront(ropeId);
    }
    physics.stopRopeUnwindingFront = stopRopeUnwindingFront;
    /**
     * No comment provided
     *
     * Hash: 0xCB2D4AB84A19AA7C | Since: 323
     */
    function stopRopeWinding(ropeId) {
        StopRopeWinding(ropeId);
    }
    physics.stopRopeWinding = stopRopeWinding;
    /**
     * No comment provided
     *
     * Hash: 0x4B5AE2EEE4A8F180 | Since: 323
     */
    function unpinRopeVertex(ropeId, vertex) {
        UnpinRopeVertex(ropeId, vertex);
    }
    physics.unpinRopeVertex = unpinRopeVertex;
})(physics || (physics = {}));
export var player;
(function (player_1) {
    /**
     * Unlike [GET_PLAYER_INVINCIBLE](#\_0xB721981B2B939E07) this native gets both [SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED](#\_0x6BC97F4F4BB3C04B) and [SET_PLAYER_INVINCIBLE](#\_0x239528EACDC3E7DE) invincibility state.
     *
     * Hash: 0xF2E3912B | Since: unknown
     */
    function getInvincible2(player) {
        return Citizen.invokeNative('0xF2E3912B', player);
    }
    player_1.getInvincible2 = getInvincible2;
    /**
     * No comment provided
     *
     * Hash: 0xD014AB79 | Since: unknown
     */
    function getMaxStamina(playerId) {
        return Citizen.invokeNative('0xD014AB79', playerId);
    }
    player_1.getMaxStamina = getMaxStamina;
    /**
     * A getter for [SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER](#\_0xAE540335B4ABC4E2).
     *
     * Hash: 0x27E94EF8 | Since: unknown
     */
    function getMeleeWeaponDefenseModifier(playerId) {
        return Citizen.invokeNative('0x27E94EF8', playerId);
    }
    player_1.getMeleeWeaponDefenseModifier = getMeleeWeaponDefenseModifier;
    /**
     * No comment provided
     *
     * Hash: 0xE415EC5C | Since: unknown
     */
    function getStamina(playerId) {
        return Citizen.invokeNative('0xE415EC5C', playerId);
    }
    player_1.getStamina = getStamina;
    /**
     * A getter for [SET_PLAYER_VEHICLE_DAMAGE_MODIFIER](#\_0xA50E117CDDF82F0C).
     *
     * Hash: 0x78F27B1F | Since: unknown
     */
    function getVehicleDamageModifier(playerId) {
        return Citizen.invokeNative('0x78F27B1F', playerId);
    }
    player_1.getVehicleDamageModifier = getVehicleDamageModifier;
    /**
     * A getter for [SET_PLAYER_VEHICLE_DEFENSE_MODIFIER](#\_0x4C60E6EFDAFF2462).
     *
     * Hash: 0x8326E7CD | Since: unknown
     */
    function getVehicleDefenseModifier(playerId) {
        return Citizen.invokeNative('0x8326E7CD', playerId);
    }
    player_1.getVehicleDefenseModifier = getVehicleDefenseModifier;
    /**
     * No comment provided
     *
     * Hash: 0x35594F67 | Since: unknown
     */
    function setMaxStamina(playerId, maxStamina) {
        return Citizen.invokeNative('0x35594F67', playerId, maxStamina);
    }
    player_1.setMaxStamina = setMaxStamina;
    /**
     * No comment provided
     *
     * Hash: 0xA9EC16C7 | Since: unknown
     */
    function setStamina(playerId, stamina) {
        return Citizen.invokeNative('0xA9EC16C7', playerId, stamina);
    }
    player_1.setStamina = setStamina;
    /**
     * A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\_0x4A3DC7ECCC321032).
     *
     * Hash: 0x8689A825 | Since: unknown
     */
    function getMeleeWeaponDamageModifier(playerId) {
        return Citizen.invokeNative('0x8689A825', playerId);
    }
    player_1.getMeleeWeaponDamageModifier = getMeleeWeaponDamageModifier;
    /**
     * A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\_0xCE07B9F7817AADA3).
     *
     * Hash: 0x2A3D7CDA | Since: unknown
     */
    function getWeaponDamageModifier(playerId) {
        return Citizen.invokeNative('0x2A3D7CDA', playerId);
    }
    player_1.getWeaponDamageModifier = getWeaponDamageModifier;
    /**
     * A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\_0x2D83BC011CA14A3C).
     *
     * Hash: 0xF1543251 | Since: unknown
     */
    function getWeaponDefenseModifier(playerId) {
        return Citizen.invokeNative('0xF1543251', playerId);
    }
    player_1.getWeaponDefenseModifier = getWeaponDefenseModifier;
    /**
     * A getter for [\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\_2](#\_0xBCFDE9EDE4CF27DC).
     *
     * Hash: 0x986B65FF | Since: unknown
     */
    function getWeaponDefenseModifier2(playerId) {
        return Citizen.invokeNative('0x986B65FF', playerId);
    }
    player_1.getWeaponDefenseModifier2 = getWeaponDefenseModifier2;
    /**
     * Returns all player indices for 'active' physical players known to the client.
     * The data returned adheres to the following layout:
     *
     * ```
     * [127, 42, 13, 37]
     * ```
     *
     * Hash: 0xCF143FB9 | Since: unknown
     */
    function getActives() {
        return Citizen.invokeNative('0xCF143FB9');
    }
    player_1.getActives = getActives;
    /**
     * Gets a local client's Player ID from its server ID counterpart, assuming the passed `serverId` exists on the client.
     *
     * If no matching client is found, or an invalid value is passed over as the `serverId` native's parameter, the native result will be `-1`.
     *
     * It's worth noting that this native method can only retrieve information about clients that are culled to the connected client.
     *
     * Hash: 0x344EA166 | Since: unknown
     */
    function getFromServerId(serverId) {
        return Citizen.invokeNative('0x344EA166', serverId);
    }
    player_1.getFromServerId = getFromServerId;
    /**
     * No comment provided
     *
     * Hash: 0x4D97BCC7 | Since: unknown
     */
    function getServerId(player) {
        return Citizen.invokeNative('0x4D97BCC7', player);
    }
    player_1.getServerId = getServerId;
    /**
     * the status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation.
     * This function doesn't need to be called every frame, it works like a switcher.
     *
     * Hash: 0xFC02CAF6 | Since: unknown
     */
    function setTalkingOverride(player, state) {
        Citizen.invokeNative('0xFC02CAF6', player, state);
    }
    player_1.setTalkingOverride = setTalkingOverride;
    /**
     * Returns whether or not the specified player has enough information to start a commerce session for.
     *
     * Hash: 0x429461C3 | Since: unknown
     */
    function canStartCommerceSession(playerSrc) {
        return Citizen.invokeNative('0x429461C3', playerSrc);
    }
    player_1.canStartCommerceSession = canStartCommerceSession;
    /**
     * ```
     * `This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);`
     * `PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.`
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CLEAR_PLAYER_WANTED_LEVEL](?\_0xB302540597885499).</strong>
     *
     * Hash: 0x54EA5BCC | Since: unknown
     */
    function clearWantedLevel(player) {
        Citizen.invokeNative('0x54EA5BCC', player);
    }
    player_1.clearWantedLevel = clearWantedLevel;
    /**
     * Returns whether or not the player exists
     *
     * Hash: 0x12038599 | Since: unknown
     */
    function doesExist(playerSrc) {
        return Citizen.invokeNative('0x12038599', playerSrc);
    }
    player_1.doesExist = doesExist;
    /**
     * Requests whether or not the player owns the specified SKU.
     *
     * Hash: 0x167ABA27 | Since: unknown
     */
    function doesOwnSku(playerSrc, skuId) {
        return Citizen.invokeNative('0x167ABA27', playerSrc, skuId);
    }
    player_1.doesOwnSku = doesOwnSku;
    /**
     * Requests whether or not the player owns the specified package.
     *
     * Hash: 0xDEF0480B | Since: unknown
     */
    function doesOwnSkuExt(playerSrc, skuId) {
        return Citizen.invokeNative('0xDEF0480B', playerSrc, skuId);
    }
    player_1.doesOwnSkuExt = doesOwnSkuExt;
    /**
     * No comment provided
     *
     * Hash: 0xBA0613E1 | Since: unknown
     */
    function drop(playerSrc, reason) {
        Citizen.invokeNative('0xBA0613E1', playerSrc, reason);
    }
    player_1.drop = drop;
    /**
     * No comment provided
     *
     * Hash: 0x62FC38D0 | Since: unknown
     */
    function getAirDragMultiplierForsVehicle(playerSrc) {
        return Citizen.invokeNative('0x62FC38D0', playerSrc);
    }
    player_1.getAirDragMultiplierForsVehicle = getAirDragMultiplierForsVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xFF7F66AB | Since: unknown
     */
    function getNumIdentifiers(playerSrc) {
        return Citizen.invokeNative('0xFF7F66AB', playerSrc);
    }
    player_1.getNumIdentifiers = getNumIdentifiers;
    /**
     * No comment provided
     *
     * Hash: 0x63D13184 | Since: unknown
     */
    function getNumIndices() {
        return Citizen.invokeNative('0x63D13184');
    }
    player_1.getNumIndices = getNumIndices;
    /**
     * No comment provided
     *
     * Hash: 0x619E4A3D | Since: unknown
     */
    function getNumTokens(playerSrc) {
        return Citizen.invokeNative('0x619E4A3D', playerSrc);
    }
    player_1.getNumTokens = getNumTokens;
    /**
     * Gets the current camera rotation for a specified player. This native is used server side when using OneSync.
     *
     * Hash: 0x433C765D | Since: unknown
     */
    function getCameraRotation(playerSrc) {
        return new Vector3(Citizen.invokeNative('0x433C765D', playerSrc));
    }
    player_1.getCameraRotation = getCameraRotation;
    /**
     * No comment provided
     *
     * Hash: 0xFEE404F9 | Since: unknown
     */
    function getEndpoint(playerSrc) {
        return Citizen.invokeNative('0xFEE404F9', playerSrc);
    }
    player_1.getEndpoint = getEndpoint;
    /**
     * Gets the current fake wanted level for a specified player. This native is used server side when using OneSync.
     *
     * Hash: 0x98D244 | Since: unknown
     */
    function getFakeWantedLevel(playerSrc) {
        return Citizen.invokeNative('0x98D244', playerSrc);
    }
    player_1.getFakeWantedLevel = getFakeWantedLevel;
    /**
     * Gets the focus position (i.e. the position of the active camera in the game world) of a player.
     *
     * Hash: 0x586F80FF | Since: unknown
     */
    function getFocusPos(playerSrc) {
        return new Vector3(Citizen.invokeNative('0x586F80FF', playerSrc));
    }
    player_1.getFocusPos = getFocusPos;
    /**
     * No comment provided
     *
     * Hash: 0xC8A9CE08 | Since: unknown
     */
    function getFromIndex(index) {
        return Citizen.invokeNative('0xC8A9CE08', index);
    }
    player_1.getFromIndex = getFromIndex;
    /**
     * No comment provided
     *
     * Hash: 0xE52D9680 | Since: unknown
     */
    function getGuid(playerSrc) {
        return Citizen.invokeNative('0xE52D9680', playerSrc);
    }
    player_1.getGuid = getGuid;
    /**
     * To get the number of identifiers, use [GET_NUM_PLAYER_IDENTIFIERS](#\_0xFF7F66AB)
     *
     * To get a specific type of identifier, use [GET_PLAYER_IDENTIFIER_BY_TYPE](#\_0xA61C8FC6)
     *
     * Hash: 0x7302DBCF | Since: unknown
     */
    function getIdentifier(playerSrc, identiferIndex) {
        return Citizen.invokeNative('0x7302DBCF', playerSrc, identiferIndex);
    }
    player_1.getIdentifier = getIdentifier;
    /**
     * Get an identifier from a player by the type of the identifier.
     * Known [Identifiers](https://docs.fivem.net/docs/scripting-reference/runtimes/lua/functions/GetPlayerIdentifiers/#identifier-types)
     *
     * Hash: 0xA61C8FC6 | Since: unknown
     */
    function getIdentifierByType(playerSrc, identifierType) {
        return Citizen.invokeNative('0xA61C8FC6', playerSrc, identifierType);
    }
    player_1.getIdentifierByType = getIdentifierByType;
    /**
     * No comment provided
     *
     * Hash: 0x680C90EE | Since: unknown
     */
    function getInvincible(playerSrc) {
        return Citizen.invokeNative('0x680C90EE', playerSrc);
    }
    player_1.getInvincible = getInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x427E8E6A | Since: unknown
     */
    function getLastMsg(playerSrc) {
        return Citizen.invokeNative('0x427E8E6A', playerSrc);
    }
    player_1.getLastMsg = getLastMsg;
    /**
     * No comment provided
     *
     * Hash: 0x2A50657 | Since: unknown
     */
    function getMaxArmour(playerSrc) {
        return Citizen.invokeNative('0x2A50657', playerSrc);
    }
    player_1.getMaxArmour = getMaxArmour;
    /**
     * No comment provided
     *
     * Hash: 0x8154E470 | Since: unknown
     */
    function getMaxHealth(playerSrc) {
        return Citizen.invokeNative('0x8154E470', playerSrc);
    }
    player_1.getMaxHealth = getMaxHealth;
    /**
     * No comment provided
     *
     * Hash: 0x406B4B20 | Since: unknown
     */
    function getName(playerSrc) {
        return Citizen.invokeNative('0x406B4B20', playerSrc);
    }
    player_1.getName = getName;
    /**
     * Used to get the player's Ped Entity ID when a valid `playerSrc` is passed.
     *
     * Hash: 0x6E31E993 | Since: unknown
     */
    function getPed(playerSrc) {
        return Citizen.invokeNative('0x6E31E993', playerSrc);
    }
    player_1.getPed = getPed;
    /**
     * ```cpp
     * const int ENET_PACKET_LOSS_SCALE = 65536;
     *
     * enum PeerStatistics
     * {
     * // PacketLoss will only update once every 10 seconds, use PacketLossEpoch if you want the time
     * // since the last time the packet loss was updated.
     *
     * // the amount of packet loss the player has, needs to be scaled with PACKET_LOSS_SCALE
     * PacketLoss = 0,
     * // The variance in the packet loss
     * PacketLossVariance = 1,
     * // The time since the last packet update in ms, relative to the peers connection time
     * PacketLossEpoch = 2,
     * // The mean amount of time it takes for a packet to get to the client (ping)
     * RoundTripTime = 3,
     * // The variance in the round trip time
     * RoundTripTimeVariance = 4,
     * // Despite their name, these are only updated once every 5 seconds, you can get the last time this was updated with PacketThrottleEpoch
     * // The last recorded round trip time of a packet
     * LastRoundTripTime = 5,
     * // The last round trip time variance
     * LastRoundTripTimeVariance = 6,
     * // The time since the last packet throttle update, relative to the peers connection time
     * PacketThrottleEpoch = 7,
     * };
     * ```
     *
     * These statistics only update once every 10 seconds.
     *
     * Hash: 0x9A928294 | Since: unknown
     */
    function getPeerStatistics(playerSrc, peerStatistic) {
        return Citizen.invokeNative('0x9A928294', playerSrc, peerStatistic);
    }
    player_1.getPeerStatistics = getPeerStatistics;
    /**
     * See [GET_PLAYER_PEER_STATISTICS](#\_0x9A928294) if you want more detailed information, like packet loss, and packet/rtt variance
     *
     * Hash: 0xFF1290D4 | Since: unknown
     */
    function getPing(playerSrc) {
        return Citizen.invokeNative('0xFF1290D4', playerSrc);
    }
    player_1.getPing = getPing;
    /**
     * Gets the routing bucket for the specified player.
     *
     * Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
     *
     * Hash: 0x52441C34 | Since: unknown
     */
    function getRoutingBucket(playerSrc) {
        return Citizen.invokeNative('0x52441C34', playerSrc);
    }
    player_1.getRoutingBucket = getRoutingBucket;
    /**
     * No comment provided
     *
     * Hash: 0x9873E404 | Since: unknown
     */
    function getTeam(playerSrc) {
        return Citizen.invokeNative('0x9873E404', playerSrc);
    }
    player_1.getTeam = getTeam;
    /**
     * ```
     * Gets the amount of time player has spent evading the cops.
     * Counter starts and increments only when cops are chasing the player.
     * If the player is evading, the timer will pause.
     * ```
     *
     * Hash: 0x7ADE63E1 | Since: unknown
     */
    function getTimeInPursuit(playerSrc, lastPursuit) {
        return Citizen.invokeNative('0x7ADE63E1', playerSrc, lastPursuit);
    }
    player_1.getTimeInPursuit = getTimeInPursuit;
    /**
     * Gets the current time online for a specified player.
     *
     * Hash: 0x67D2E605 | Since: unknown
     */
    function getTimeOnline(playerSrc) {
        return Citizen.invokeNative('0x67D2E605', playerSrc);
    }
    player_1.getTimeOnline = getTimeOnline;
    /**
     * Gets a player's token. Tokens can be used to enhance banning logic, however are specific to a server.
     *
     * Hash: 0x54C06897 | Since: unknown
     */
    function getToken(playerSrc, index) {
        return Citizen.invokeNative('0x54C06897', playerSrc, index);
    }
    player_1.getToken = getToken;
    /**
     * Gets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync.
     *
     * Hash: 0x821F2D2C | Since: unknown
     */
    function getWantedCentrePosition(playerSrc) {
        return new Vector3(Citizen.invokeNative('0x821F2D2C', playerSrc));
    }
    player_1.getWantedCentrePosition = getWantedCentrePosition;
    /**
     * ```
     * Returns given players wanted level server-side.
     * ```
     *
     * Hash: 0xBDCDD163 | Since: unknown
     */
    function getWantedLevel(playerSrc) {
        return Citizen.invokeNative('0xBDCDD163', playerSrc);
    }
    player_1.getWantedLevel = getWantedLevel;
    /**
     * This native checks if the given ped is a player.
     *
     * Hash: 0x404794CA | Since: unknown
     */
    function isPedA(ped) {
        return Citizen.invokeNative('0x404794CA', ped);
    }
    player_1.isPedA = isPedA;
    /**
     * No comment provided
     *
     * Hash: 0xDEDAE23D | Since: unknown
     */
    function isAceAllowed(playerSrc, _object) {
        return Citizen.invokeNative('0xDEDAE23D', playerSrc, _object);
    }
    player_1.isAceAllowed = isAceAllowed;
    /**
     * Requests whether or not the commerce data for the specified player has loaded.
     *
     * Hash: 0xBEFE93F4 | Since: unknown
     */
    function isCommerceInfoLoaded(playerSrc) {
        return Citizen.invokeNative('0xBEFE93F4', playerSrc);
    }
    player_1.isCommerceInfoLoaded = isCommerceInfoLoaded;
    /**
     * Requests whether or not the commerce data for the specified player has loaded from Tebex.
     *
     * Hash: 0x1D14F4FE | Since: unknown
     */
    function isCommerceInfoLoadedExt(playerSrc) {
        return Citizen.invokeNative('0x1D14F4FE', playerSrc);
    }
    player_1.isCommerceInfoLoadedExt = isCommerceInfoLoadedExt;
    /**
     * ```
     * This will return true if the player is evading wanted level, meaning that the wanted level stars are blink.
     * Otherwise will return false.
     *
     * If the player is not wanted, it simply returns false.
     * ```
     *
     * Hash: 0x89A3881A | Since: unknown
     */
    function isEvadingWantedLevel(playerSrc) {
        return Citizen.invokeNative('0x89A3881A', playerSrc);
    }
    player_1.isEvadingWantedLevel = isEvadingWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x1F14F2AC | Since: unknown
     */
    function isInFreeCamMode(playerSrc) {
        return Citizen.invokeNative('0x1F14F2AC', playerSrc);
    }
    player_1.isInFreeCamMode = isInFreeCamMode;
    /**
     * No comment provided
     *
     * Hash: 0xC7D2C20C | Since: unknown
     */
    function isUsingSuperJump(playerSrc) {
        return Citizen.invokeNative('0xC7D2C20C', playerSrc);
    }
    player_1.isUsingSuperJump = isUsingSuperJump;
    /**
     * Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.
     *
     * Hash: 0xA8F63EAB | Since: unknown
     */
    function loadCommerceData(playerSrc) {
        Citizen.invokeNative('0xA8F63EAB', playerSrc);
    }
    player_1.loadCommerceData = loadCommerceData;
    /**
     * Requests the commerce data from Tebex for the specified player, including the owned SKUs.
     *
     * Use [`IS_PLAYER_COMMERCE_INFO_LOADED_EXT`](#\_0x1D14F4FE) to check if it has loaded.
     *
     * This will not automatically update whenever a client purchases a package, if you want to fetch new purchases you will need to call this native again.
     *
     * This native will temporarily cache the players commerce data for 10 seconds, a call to this native after 10 seconds will re-fetch the players commerce data.
     *
     * Hash: 0x7995539E | Since: unknown
     */
    function loadCommerceDataExt(playerSrc) {
        Citizen.invokeNative('0x7995539E', playerSrc);
    }
    player_1.loadCommerceDataExt = loadCommerceDataExt;
    /**
     * Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance
     * will open the browser prompting further purchase details.
     *
     * Hash: 0x96F93CCE | Since: unknown
     */
    function requestCommerceSession(playerSrc, skuId) {
        Citizen.invokeNative('0x96F93CCE', playerSrc, skuId);
    }
    player_1.requestCommerceSession = requestCommerceSession;
    /**
     * ```
     * Flags:
     * SPC_AMBIENT_SCRIPT = (1 << 1),
     * SPC_CLEAR_TASKS = (1 << 2),
     * SPC_REMOVE_FIRES = (1 << 3),
     * SPC_REMOVE_EXPLOSIONS = (1 << 4),
     * SPC_REMOVE_PROJECTILES = (1 << 5),
     * SPC_DEACTIVATE_GADGETS = (1 << 6),
     * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
     * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
     * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
     * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
     * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
     * SPC_ALLOW_PAD_SHAKE = (1 << 12)
     * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PLAYER_CONTROL](?\_0x8D32347D6D4C40A2).</strong>
     *
     * Hash: 0xD17AFCD8 | Since: unknown
     */
    function setControl(player, bHasControl, flags) {
        Citizen.invokeNative('0xD17AFCD8', player, bHasControl, flags);
    }
    player_1.setControl = setControl;
    /**
     * Sets the culling radius for the specified player.
     * Set to `0.0` to reset.
     *
     * **WARNING**: Culling natives are deprecated and have known, [unfixable issues](https://forum.cfx.re/t/issue-with-culling-radius-and-server-side-entities/4900677/4)
     *
     * Hash: 0x8A2FBAD4 | Since: unknown
     */
    function setCullingRadius(playerSrc, radius) {
        Citizen.invokeNative('0x8A2FBAD4', playerSrc, radius);
    }
    player_1.setCullingRadius = setCullingRadius;
    /**
     * Make the player impervious to all forms of damage.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PLAYER_INVINCIBLE](?\_0x239528EACDC3E7DE).</strong>
     *
     * Hash: 0xDFB9A2A2 | Since: unknown
     */
    function setInvincible(player, bInvincible) {
        Citizen.invokeNative('0xDFB9A2A2', player, bInvincible);
    }
    player_1.setInvincible = setInvincible;
    /**
     * Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this.
     * As per usual, make sure to request the model first and wait until it has loaded.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PLAYER_MODEL](?\_0x00A1CADD00108836).</strong>
     *
     * Hash: 0x774A4C54 | Since: unknown
     */
    function setModel(player, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        Citizen.invokeNative('0x774A4C54', player, model);
    }
    player_1.setModel = setModel;
    /**
     * Sets the routing bucket for the specified player.
     *
     * Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
     *
     * Hash: 0x6504EB38 | Since: unknown
     */
    function setRoutingBucket(playerSrc, bucket) {
        Citizen.invokeNative('0x6504EB38', playerSrc, bucket);
    }
    player_1.setRoutingBucket = setRoutingBucket;
    /**
     * SET_PLAYER_WANTED_LEVEL
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_PLAYER_WANTED_LEVEL](?\_0x39FF19C64EF7DA5B).</strong>
     *
     * Hash: 0xB7A0914B | Since: unknown
     */
    function setWantedLevel(player, wantedLevel, delayedResponse) {
        Citizen.invokeNative('0xB7A0914B', player, wantedLevel, delayedResponse);
    }
    player_1.setWantedLevel = setWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x1E35DBBA | Since: unknown
     */
    function tempBan(playerSrc, reason) {
        Citizen.invokeNative('0x1E35DBBA', playerSrc, reason);
    }
    player_1.tempBan = tempBan;
    /**
     * On the server this will return the players source, on the client it will return the player handle.
     *
     * Hash: 0xA56135E0 | Since: unknown
     */
    function getFromStateBagName(bagName) {
        return Citizen.invokeNative('0xA56135E0', bagName);
    }
    player_1.getFromStateBagName = getFromStateBagName;
    /**
     * No comment provided
     *
     * Hash: 0x9097EB6D4BB9A12A | Since: 1868
     */
    function addTargetableEntity(player, entity) {
        Citizen.invokeNative('0x9097EB6D4BB9A12A', player, entity);
    }
    player_1.addTargetableEntity = addTargetableEntity;
    /**
     * No comment provided
     *
     * Hash: 0x2F41A3BAE005E5FA | Since: 372
     */
    function allowEvasionHudIfDisablingHiddenEvasionThisFrame(player) {
        Citizen.invokeNative('0x2F41A3BAE005E5FA', player, undefined);
    }
    player_1.allowEvasionHudIfDisablingHiddenEvasionThisFrame = allowEvasionHudIfDisablingHiddenEvasionThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xAFAF86043E5874E9 | Since: 323
     */
    function areFlashingStarsAboutToDrop(player) {
        return ArePlayerFlashingStarsAboutToDrop(player);
    }
    player_1.areFlashingStarsAboutToDrop = areFlashingStarsAboutToDrop;
    /**
     * No comment provided
     *
     * Hash: 0x0A6EB355EE14A2DB | Since: 323
     */
    function areStarsGreyedOut(player) {
        return ArePlayerStarsGreyedOut(player);
    }
    player_1.areStarsGreyedOut = areStarsGreyedOut;
    /**
     * No comment provided
     *
     * Hash: 0xAEBF081FFC0A0E5E | Since: 323
     */
    function assistedMovementCloseRoute() {
        AssistedMovementCloseRoute();
    }
    player_1.assistedMovementCloseRoute = assistedMovementCloseRoute;
    /**
     * No comment provided
     *
     * Hash: 0x8621390F0CDCFE1F | Since: 323
     */
    function assistedMovementFlushRoute() {
        AssistedMovementFlushRoute();
    }
    player_1.assistedMovementFlushRoute = assistedMovementFlushRoute;
    /**
     * No comment provided
     *
     * Hash: 0xF297383AA91DCA29 | Since: 323
     */
    function canPedHear(player, ped) {
        return CanPedHearPlayer(player, ped);
    }
    player_1.canPedHear = canPedHear;
    /**
     * No comment provided
     *
     * Hash: 0xDE7465A27D403C06 | Since: 323
     */
    function canStartMission(player) {
        return CanPlayerStartMission(player);
    }
    player_1.canStartMission = canStartMission;
    /**
     * No comment provided
     *
     * Hash: 0x048189FAC643DEEE | Since: 323
     */
    function changePed(player, ped, resetDamage) {
        ChangePlayerPed(player, ped, false, resetDamage);
    }
    player_1.changePed = changePed;
    /**
     * No comment provided
     *
     * Hash: 0x4AACB96203D11A31 | Since: 323
     */
    function clearHasDamagedAtLeastOneNonAnimalPed(player) {
        ClearPlayerHasDamagedAtLeastOneNonAnimalPed(player);
    }
    player_1.clearHasDamagedAtLeastOneNonAnimalPed = clearHasDamagedAtLeastOneNonAnimalPed;
    /**
     * No comment provided
     *
     * Hash: 0xF0B67A4DE6AB5F98 | Since: 323
     */
    function clearHasDamagedAtLeastOnePed(player) {
        ClearPlayerHasDamagedAtLeastOnePed(player);
    }
    player_1.clearHasDamagedAtLeastOnePed = clearHasDamagedAtLeastOnePed;
    /**
     * No comment provided
     *
     * Hash: 0x8753997EB5F6EE3F | Since: 323
     */
    function clearParachuteModelOverride(player) {
        ClearPlayerParachuteModelOverride(player);
    }
    player_1.clearParachuteModelOverride = clearParachuteModelOverride;
    /**
     * No comment provided
     *
     * Hash: 0x10C54E4389C12B42 | Since: 323
     */
    function clearParachutePackModelOverride(player) {
        ClearPlayerParachutePackModelOverride(player);
    }
    player_1.clearParachutePackModelOverride = clearParachutePackModelOverride;
    /**
     * No comment provided
     *
     * Hash: 0x0F4CC924CF8C7B21 | Since: 323
     */
    function clearParachuteVariationOverride(player) {
        ClearPlayerParachuteVariationOverride(player);
    }
    player_1.clearParachuteVariationOverride = clearParachuteVariationOverride;
    /**
     * No comment provided
     *
     * Hash: 0x290D248E25815AE8 | Since: 2372
     */
    function clearReserveParachuteModelOverride(player) {
        ClearPlayerReserveParachuteModelOverride(player);
    }
    player_1.clearReserveParachuteModelOverride = clearReserveParachuteModelOverride;
    /**
     * `This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);`
     *
     * `PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.`
     *
     * Hash: 0xB302540597885499 | Since: 323
     */
    function clearWantedLevel(player) {
        ClearPlayerWantedLevel(player);
    }
    player_1.clearWantedLevel = clearWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x5501B7A5CDB79D37 | Since: 323
     */
    function disableCameraViewModeCycle(player) {
        Citizen.invokeNative('0x5501B7A5CDB79D37', player);
    }
    player_1.disableCameraViewModeCycle = disableCameraViewModeCycle;
    /**
     * Inhibits the player from using any method of combat including melee and firearms.
     *
     * NOTE: Only disables the firing for one frame
     *
     * Hash: 0x5E6CC07646BBEAB8 | Since: 323
     */
    function disableFiring(player, toggle) {
        DisablePlayerFiring(player, toggle);
    }
    player_1.disableFiring = disableFiring;
    /**
     * Needs to be called every frame.
     *
     * Hash: 0xBCB06442F7E52666 | Since: 2802
     */
    function disableHealthRecharge(player) {
        Citizen.invokeNative('0xBCB06442F7E52666', player);
    }
    player_1.disableHealthRecharge = disableHealthRecharge;
    /**
     * Used only once in R* scripts (freemode.ysc).
     *
     * Hash: 0xB885852C39CC265D | Since: 323
     */
    function disableThrowGrenadeWhileUsingGun() {
        Citizen.invokeNative('0xB885852C39CC265D');
    }
    player_1.disableThrowGrenadeWhileUsingGun = disableThrowGrenadeWhileUsingGun;
    /**
     * No comment provided
     *
     * Hash: 0xC142BE3BB9CE125F | Since: 323
     */
    function disableVehicleRewards(player) {
        DisablePlayerVehicleRewards(player);
    }
    player_1.disableVehicleRewards = disableVehicleRewards;
    /**
     * Purpose of the BOOL currently unknown.
     * Both, true and false, work
     *
     * Hash: 0x94DD7888C10A979E | Since: 323
     */
    function displaySystemSigninUi() {
        DisplaySystemSigninUi(false);
    }
    player_1.displaySystemSigninUi = displaySystemSigninUi;
    /**
     * No comment provided
     *
     * Hash: 0x181EC197DAEFE121 | Since: 323
     */
    function enableSpecialAbility(player, toggle) {
        EnableSpecialAbility(player, toggle, undefined);
    }
    player_1.enableSpecialAbility = enableSpecialAbility;
    /**
     * Appears only 3 times in the scripts, more specifically in michael1.ysc
     *
     * -
     * This can be used to prevent dying if you are "out of the world"
     *
     * Hash: 0x5006D96C995A5827 | Since: 323
     */
    function extendWorldBoundaryFor(pos) {
        ExtendWorldBoundaryForPlayer(pos.x, pos.y, pos.z);
    }
    player_1.extendWorldBoundaryFor = extendWorldBoundaryFor;
    /**
     * used with 1,2,8,64,128 in the scripts
     *
     * Hash: 0xBC8983F38F78ED51 | Since: 323
     */
    function forceCleanup(cleanupFlags) {
        ForceCleanup(cleanupFlags);
    }
    player_1.forceCleanup = forceCleanup;
    /**
     * `PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation`
     *
     * Hash: 0x4C68DDDDF0097317 | Since: 323
     */
    function forceCleanupForAllThreadsWithThisName(name, cleanupFlags) {
        ForceCleanupForAllThreadsWithThisName(name, cleanupFlags);
    }
    player_1.forceCleanupForAllThreadsWithThisName = forceCleanupForAllThreadsWithThisName;
    /**
     * No comment provided
     *
     * Hash: 0xF745B37630DF176B | Since: 323
     */
    function forceCleanupForThreadWithThisId(id, cleanupFlags) {
        ForceCleanupForThreadWithThisId(id, cleanupFlags);
    }
    player_1.forceCleanupForThreadWithThisId = forceCleanupForThreadWithThisId;
    /**
     * This has been found in use in the decompiled files.
     *
     * Hash: 0xAD73CE5A09E42D12 | Since: 323
     */
    function forceStartHiddenEvasion(player) {
        Citizen.invokeNative('0xAD73CE5A09E42D12', player);
    }
    player_1.forceStartHiddenEvasion = forceStartHiddenEvasion;
    /**
     * For Steam.
     * Always returns 0 in retail version of the game.
     *
     * Hash: 0x1C186837D0619335 | Since: 323
     */
    function getAchievementProgress(achievementId) {
        return GetAchievementProgress(achievementId);
    }
    player_1.getAchievementProgress = getAchievementProgress;
    /**
     * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
     *
     * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
     *
     * Hash: 0x7C814D2FB49F40C0 | Since: 323
     */
    function getAreCameraControlsDisabled() {
        return IsPlayerCamControlDisabled();
    }
    player_1.getAreCameraControlsDisabled = getAreCameraControlsDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x9A41CF4674A12272 | Since: 323
     */
    function getCauseOfMostRecentForceCleanup() {
        return GetCauseOfMostRecentForceCleanup();
    }
    player_1.getCauseOfMostRecentForceCleanup = getCauseOfMostRecentForceCleanup;
    /**
     * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
     * Returns false if no entity found.
     *
     * Hash: 0x2975C866E6713290 | Since: 323
     */
    function getEntityIsFreeAimingAt(player) {
        return GetEntityPlayerIsFreeAimingAt(player);
    }
    player_1.getEntityIsFreeAimingAt = getEntityIsFreeAimingAt;
    /**
     * 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
     *
     * Hash: 0xDD2620B7B9D16FF1 | Since: 323
     */
    function getIsMoppingAreaFreeInFrontOf(player) {
        return Citizen.invokeNative('0xDD2620B7B9D16FF1', player, 0);
    }
    player_1.getIsMoppingAreaFreeInFrontOf = getIsMoppingAreaFreeInFrontOf;
    /**
     * Appears once in "re_dealgonewrong"
     *
     * Hash: 0x5FC472C501CCADB3 | Since: 323
     */
    function getIsDrivingOnHighway(player) {
        return GetIsPlayerDrivingOnHighway(player);
    }
    player_1.getIsDrivingOnHighway = getIsDrivingOnHighway;
    /**
     * Only 1 occurrence. p1 was 2.
     *
     * Hash: 0xF10B44FD479D69F3 | Since: 323
     */
    function getIsDrivingWreckless(player) {
        return IsPlayerDrivingDangerously(player, 0);
    }
    player_1.getIsDrivingWreckless = getIsDrivingWreckless;
    /**
     * Returns profile setting 237.
     *
     * Hash: 0xB9CF1F793A9F1BF1 | Since: 323
     */
    function getIsUsingFpsThirdPersonCover() {
        return Citizen.invokeNative('0xB9CF1F793A9F1BF1');
    }
    player_1.getIsUsingFpsThirdPersonCover = getIsUsingFpsThirdPersonCover;
    /**
     * Returns profile setting 243.
     *
     * Hash: 0xCB645E85E97EA48B | Since: 372
     */
    function getIsUsingHoodCamera() {
        return Citizen.invokeNative('0xCB645E85E97EA48B');
    }
    player_1.getIsUsingHoodCamera = getIsUsingHoodCamera;
    /**
     * Gets the maximum wanted level the player can get.
     * Ranges from 0 to 5.
     *
     * Hash: 0x462E0DB9B137DC5F | Since: 323
     */
    function getMaxWantedLevel() {
        return GetMaxWantedLevel();
    }
    player_1.getMaxWantedLevel = getMaxWantedLevel;
    /**
     * Gets the number of players in the current session.
     * If not multiplayer, always returns 1.
     *
     * Hash: 0x407C7F91DDB46C16 | Since: 323
     */
    function getNumberOfs() {
        return GetNumberOfPlayers();
    }
    player_1.getNumberOfs = getNumberOfs;
    /**
     * No comment provided
     *
     * Hash: 0x1FC200409F10E6F1 | Since: 1180
     */
    function getNumberOfsInTeam(team) {
        return GetNumberOfPlayersInTeam(team);
    }
    player_1.getNumberOfsInTeam = getNumberOfsInTeam;
    /**
     * Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
     *
     * Hash: 0xB6997A7EB3F5C8C0 | Since: 323
     */
    function getsLastVehicle() {
        return GetPlayersLastVehicle();
    }
    player_1.getsLastVehicle = getsLastVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x2F395D61F3A1F877 | Since: 323
     */
    function getCurrentStealthNoise(player) {
        return GetPlayerCurrentStealthNoise(player);
    }
    player_1.getCurrentStealthNoise = getCurrentStealthNoise;
    /**
     * Always returns false.
     *
     * Hash: 0xDCC07526B8EC45AF | Since: 1868
     */
    function getDebugInvincible(player) {
        return Citizen.invokeNative('0xDCC07526B8EC45AF', player);
    }
    player_1.getDebugInvincible = getDebugInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x56105E599CAB0EFA | Since: 323
     */
    function getFakeWantedLevel(player) {
        return GetPlayerFakeWantedLevel(player);
    }
    player_1.getFakeWantedLevel = getFakeWantedLevel;
    /**
     * Returns the group ID the player is member of.
     *
     * Hash: 0x0D127585F77030AF | Since: 323
     */
    function getGroup(player) {
        return GetPlayerGroup(player);
    }
    player_1.getGroup = getGroup;
    /**
     * No comment provided
     *
     * Hash: 0x5DDFE2FF727F3CA3 | Since: 323
     */
    function getHasReserveParachute(player) {
        return GetPlayerHasReserveParachute(player);
    }
    player_1.getHasReserveParachute = getHasReserveParachute;
    /**
     * No comment provided
     *
     * Hash: 0x8BC515BAE4AAF8FF | Since: 617
     */
    function getHealthRechargeMaxPercent(player) {
        return GetPlayerHealthRechargeLimit(player);
    }
    player_1.getHealthRechargeMaxPercent = getHealthRechargeMaxPercent;
    /**
     * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
     *
     * Hash: 0xA5EDC40EF369B48D | Since: 323
     */
    function getIndex() {
        return GetPlayerIndex();
    }
    player_1.getIndex = getIndex;
    /**
     * Returns the Player's Invincible status.
     *
     * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
     *
     * bool IsPlayerInvincible(Player player)
     * {
     * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
     *
     * if (addr)
     * {
     * DWORD flag = *(DWORD *)(addr + 0x188);
     * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
     * }
     *
     * return false;
     * }
     *
     *
     *
     * Hash: 0xB721981B2B939E07 | Since: 323
     */
    function getInvincible(player) {
        return GetPlayerInvincible(player);
    }
    player_1.getInvincible = getInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x92659B4CE1863CB3 | Since: 323
     */
    function getMaxArmour(player) {
        return GetPlayerMaxArmour(player);
    }
    player_1.getMaxArmour = getMaxArmour;
    /**
     * No comment provided
     *
     * Hash: 0x6D0DE6A7B5DA71F8 | Since: 323
     */
    function getName(player) {
        return GetPlayerName(player);
    }
    player_1.getName = getName;
    /**
     * No comment provided
     *
     * Hash: 0xC219887CA3E65C41 | Since: 2372
     */
    function getParachuteModelOverride(player) {
        return GetPlayerParachuteModelOverride(player);
    }
    player_1.getParachuteModelOverride = getParachuteModelOverride;
    /**
     * No comment provided
     *
     * Hash: 0x6E9C742F340CE5A2 | Since: 323
     */
    function getParachutePackTintIndex(player) {
        return GetPlayerParachutePackTintIndex(player);
    }
    player_1.getParachutePackTintIndex = getParachutePackTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0xEF56DBABD3CD4887 | Since: 323
     */
    function getParachuteSmokeTrailColor(player) {
        return GetPlayerParachuteSmokeTrailColor(player);
    }
    player_1.getParachuteSmokeTrailColor = getParachuteSmokeTrailColor;
    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     * Hash: 0x75D3F7A1B0D9B145 | Since: 323
     */
    function getParachuteTintIndex(player) {
        return GetPlayerParachuteTintIndex(player);
    }
    player_1.getParachuteTintIndex = getParachuteTintIndex;
    /**
     * Gets the ped for a specified player index.
     *
     * Hash: 0x43A66C31C68491C0 | Since: 323
     */
    function getPed(player) {
        return GetPlayerPed(player);
    }
    player_1.getPed = getPed;
    /**
     * `Does the same like PLAYER::GET_PLAYER_PED`
     *
     * Hash: 0x50FAC3A3E030A6E1 | Since: 323
     */
    function getPedScriptIndex(player) {
        return GetPlayerPedScriptIndex(player);
    }
    player_1.getPedScriptIndex = getPedScriptIndex;
    /**
     * No comment provided
     *
     * Hash: 0xBC0753C9CA14B506 | Since: 323
     */
    function getReceivedBattleEventRecently(player) {
        return HasPlayerBeenShotByCop(player, 0, false);
    }
    player_1.getReceivedBattleEventRecently = getReceivedBattleEventRecently;
    /**
     * No comment provided
     *
     * Hash: 0x37FAAA68DCA9D08D | Since: 2372
     */
    function getReserveParachuteModelOverride(player) {
        return GetPlayerReserveParachuteModelOverride(player);
    }
    player_1.getReserveParachuteModelOverride = getReserveParachuteModelOverride;
    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     * Hash: 0xD5A016BC3C09CF40 | Since: 323
     */
    function getReserveParachuteTintIndex(player) {
        return GetPlayerReserveParachuteTintIndex(player);
    }
    player_1.getReserveParachuteTintIndex = getReserveParachuteTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0xE902EF951DCE178F | Since: 323
     */
    function getRgbColour(player) {
        return GetPlayerRgbColour(player);
    }
    player_1.getRgbColour = getRgbColour;
    /**
     * No comment provided
     *
     * Hash: 0x3F9F16F8E65A7ED7 | Since: 323
     */
    function getSprintStaminaRemaining(player) {
        return GetPlayerSprintStaminaRemaining(player);
    }
    player_1.getSprintStaminaRemaining = getSprintStaminaRemaining;
    /**
     * No comment provided
     *
     * Hash: 0x1885BC9B108B4C99 | Since: 323
     */
    function getSprintTimeRemaining(player) {
        return GetPlayerSprintTimeRemaining(player);
    }
    player_1.getSprintTimeRemaining = getSprintTimeRemaining;
    /**
     * No comment provided
     *
     * Hash: 0x875BDD898B99C8CE | Since: 3570
     */
    function getTargetingMode() {
        return Citizen.invokeNative('0x875BDD898B99C8CE');
    }
    player_1.getTargetingMode = getTargetingMode;
    /**
     * Assigns the handle of locked-on melee target to *entity that you pass it.
     * Returns false if no entity found.
     *
     * Hash: 0x13EDE1A5DBF797C9 | Since: 323
     */
    function getTargetEntity(player) {
        return GetPlayerTargetEntity(player);
    }
    player_1.getTargetEntity = getTargetEntity;
    /**
     * Gets the player's team.
     * Does nothing in singleplayer.
     *
     * Hash: 0x37039302F4E0A008 | Since: 323
     */
    function getTeam(player) {
        return GetPlayerTeam(player);
    }
    player_1.getTeam = getTeam;
    /**
     * No comment provided
     *
     * Hash: 0xA1FCF8E6AF40B731 | Since: 323
     */
    function getUnderwaterTimeRemaining(player) {
        return GetPlayerUnderwaterTimeRemaining(player);
    }
    player_1.getUnderwaterTimeRemaining = getUnderwaterTimeRemaining;
    /**
     * No comment provided
     *
     * Hash: 0x0C92BA89F1AF26F8 | Since: 323
     */
    function getWantedCentrePosition(player) {
        return new Vector3(GetPlayerWantedCentrePosition(player));
    }
    player_1.getWantedCentrePosition = getWantedCentrePosition;
    /**
     * No comment provided
     *
     * Hash: 0xE28E54788CE8F12D | Since: 323
     */
    function getWantedLevel(player) {
        return GetPlayerWantedLevel(player);
    }
    player_1.getWantedLevel = getWantedLevel;
    /**
     * Returns the time since the character was arrested in (ms) milliseconds.
     *
     * example
     *
     * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
     *
     * UI.DrawSubtitle(time.ToString());
     *
     * if player has not been arrested, the int returned will be -1.
     *
     * Hash: 0x5063F92F07C2A316 | Since: 323
     */
    function getTimeSinceLastArrest() {
        return GetTimeSinceLastArrest();
    }
    player_1.getTimeSinceLastArrest = getTimeSinceLastArrest;
    /**
     * Returns the time since the character died in (ms) milliseconds.
     *
     * example
     *
     * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
     *
     * UI.DrawSubtitle(time.ToString());
     *
     * if player has not died, the int returned will be -1.
     *
     * Hash: 0xC7034807558DDFCA | Since: 323
     */
    function getTimeSinceLastDeath() {
        return GetTimeSinceLastDeath();
    }
    player_1.getTimeSinceLastDeath = getTimeSinceLastDeath;
    /**
     * No comment provided
     *
     * Hash: 0xDB89591E290D9182 | Since: 323
     */
    function getTimeSinceDroveAgainstTraffic(player) {
        return GetTimeSincePlayerDroveAgainstTraffic(player);
    }
    player_1.getTimeSinceDroveAgainstTraffic = getTimeSinceDroveAgainstTraffic;
    /**
     * No comment provided
     *
     * Hash: 0xD559D2BE9E37853B | Since: 323
     */
    function getTimeSinceDroveOnPavement(player) {
        return GetTimeSincePlayerDroveOnPavement(player);
    }
    player_1.getTimeSinceDroveOnPavement = getTimeSinceDroveOnPavement;
    /**
     * No comment provided
     *
     * Hash: 0xE36A25322DC35F42 | Since: 323
     */
    function getTimeSinceHitPed(player) {
        return GetTimeSincePlayerHitPed(player);
    }
    player_1.getTimeSinceHitPed = getTimeSinceHitPed;
    /**
     * No comment provided
     *
     * Hash: 0x5D35ECF3A81A0EE0 | Since: 323
     */
    function getTimeSinceHitVehicle(player) {
        return GetTimeSincePlayerHitVehicle(player);
    }
    player_1.getTimeSinceHitVehicle = getTimeSinceHitVehicle;
    /**
     * Remnant from GTA IV. Does nothing in GTA V.
     *
     * Hash: 0x085DEB493BE80812 | Since: 323
     */
    function getWantedLevelRadius(player) {
        return GetWantedLevelRadius(player);
    }
    player_1.getWantedLevelRadius = getWantedLevelRadius;
    /**
     * Drft
     *
     * Hash: 0xFDD179EAF45B556C | Since: 323
     */
    function getWantedLevelThreshold(wantedLevel) {
        return GetWantedLevelThreshold(wantedLevel);
    }
    player_1.getWantedLevelThreshold = getWantedLevelThreshold;
    /**
     * No comment provided
     *
     * Hash: 0xA72200F51875FEA4 | Since: 2372
     */
    function getWantedLevelTimeToEscape() {
        return GetWantedLevelParoleDuration();
    }
    player_1.getWantedLevelTimeToEscape = getWantedLevelTimeToEscape;
    /**
     * 1 - Welcome to Los Santos
     * 2 - A Friendship Resurrected
     * 3 - A Fair Day's Pay
     * 4 - The Moment of Truth
     * 5 - To Live or Die in Los Santos
     * 6 - Diamond Hard
     * 7 - Subversive
     * 8 - Blitzed
     * 9 - Small Town, Big Job
     * 10 - The Government Gimps
     * 11 - The Big One!
     * 12 - Solid Gold, Baby!
     * 13 - Career Criminal
     * 14 - San Andreas Sightseer
     * 15 - All's Fare in Love and War
     * 16 - TP Industries Arms Race
     * 17 - Multi-Disciplined
     * 18 - From Beyond the Stars
     * 19 - A Mystery, Solved
     * 20 - Waste Management
     * 21 - Red Mist
     * 22 - Show Off
     * 23 - Kifflom!
     * 24 - Three Man Army
     * 25 - Out of Your Depth
     * 26 - Altruist Acolyte
     * 27 - A Lot of Cheddar
     * 28 - Trading Pure Alpha
     * 29 - Pimp My Sidearm
     * 30 - Wanted: Alive Or Alive
     * 31 - Los Santos Customs
     * 32 - Close Shave
     * 33 - Off the Plane
     * 34 - Three-Bit Gangster
     * 35 - Making Moves
     * 36 - Above the Law
     * 37 - Numero Uno
     * 38 - The Midnight Club
     * 39 - Unnatural Selection
     * 40 - Backseat Driver
     * 41 - Run Like The Wind
     * 42 - Clean Sweep
     * 43 - Decorated
     * 44 - Stick Up Kid
     * 45 - Enjoy Your Stay
     * 46 - Crew Cut
     * 47 - Full Refund
     * 48 - Dialling Digits
     * 49 - American Dream
     * 50 - A New Perspective
     * 51 - Be Prepared
     * 52 - In the Name of Science
     * 53 - Dead Presidents
     * 54 - Parole Day
     * 55 - Shot Caller
     * 56 - Four Way
     * 57 - Live a Little
     * 58 - Can't Touch This
     * 59 - Mastermind
     * 60 - Vinewood Visionary
     * 61 - Majestic
     * 62 - Humans of Los Santos
     * 63 - First Time Director
     * 64 - Animal Lover
     * 65 - Ensemble Piece
     * 66 - Cult Movie
     * 67 - Location Scout
     * 68 - Method Actor
     * 69 - Cryptozoologist
     * 70 - Getting Started
     * 71 - The Data Breaches
     * 72 - The Bogdan Problem
     * 73 - The Doomsday Scenario
     * 74 - A World Worth Saving
     * 75 - Orbital Obliteration
     * 76 - Elitist
     * 77 - Masterminds
     *
     * Hash: 0xBEC7076D64130195 | Since: 323
     */
    function giveAchievementTo(achievementId) {
        return GiveAchievementToPlayer(achievementId);
    }
    player_1.giveAchievementTo = giveAchievementTo;
    /**
     * No comment provided
     *
     * Hash: 0x3C49C870E66F0A28 | Since: 323
     */
    function giveRagdollControl(player, toggle) {
        GivePlayerRagdollControl(player, toggle);
    }
    player_1.giveRagdollControl = giveRagdollControl;
    /**
     * See GIVE_ACHIEVEMENT_TO_PLAYER
     *
     * Hash: 0x867365E111A3B6EB | Since: 323
     */
    function hasAchievementBeenPassed(achievementId) {
        return HasAchievementBeenPassed(achievementId);
    }
    player_1.hasAchievementBeenPassed = hasAchievementBeenPassed;
    /**
     * No comment provided
     *
     * Hash: 0xC968670BFACE42D9 | Since: 323
     */
    function hasForceCleanupOccurred(cleanupFlags) {
        return HasForceCleanupOccurred(cleanupFlags);
    }
    player_1.hasForceCleanupOccurred = hasForceCleanupOccurred;
    /**
     * No comment provided
     *
     * Hash: 0xD705740BB0A1CF4C | Since: 323
     */
    function hasBeenSpottedInStolenVehicle(player) {
        return HasPlayerBeenSpottedInStolenVehicle(player);
    }
    player_1.hasBeenSpottedInStolenVehicle = hasBeenSpottedInStolenVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xE4B90F367BD81752 | Since: 323
     */
    function hasDamagedAtLeastOneNonAnimalPed(player) {
        return HasPlayerDamagedAtLeastOneNonAnimalPed(player);
    }
    player_1.hasDamagedAtLeastOneNonAnimalPed = hasDamagedAtLeastOneNonAnimalPed;
    /**
     * No comment provided
     *
     * Hash: 0x20CE80B0C2BF4ACC | Since: 323
     */
    function hasDamagedAtLeastOnePed(player) {
        return HasPlayerDamagedAtLeastOnePed(player);
    }
    player_1.hasDamagedAtLeastOnePed = hasDamagedAtLeastOnePed;
    /**
     * No comment provided
     *
     * Hash: 0xD55DDFB47991A294 | Since: 323
     */
    function hasLeftTheWorld(player) {
        return HasPlayerLeftTheWorld(player);
    }
    player_1.hasLeftTheWorld = hasLeftTheWorld;
    /**
     * No comment provided
     *
     * Hash: 0x9EDD76E87D5D51BA | Since: 323
     */
    function increaseJumpSuppressionRange(player) {
        Citizen.invokeNative('0x9EDD76E87D5D51BA', player);
    }
    player_1.increaseJumpSuppressionRange = increaseJumpSuppressionRange;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     * --------------------------------------------------------
     * `if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))`
     *
     *
     * Hash: 0x9EC6603812C24710 | Since: 323
     */
    function intToParticipantindex(value) {
        return IntToParticipantindex(value);
    }
    player_1.intToParticipantindex = intToParticipantindex;
    /**
     * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
     *
     * Hash: 0x41BD2A6B006AF756 | Since: 323
     */
    function intToindex(value) {
        return IntToPlayerindex(value);
    }
    player_1.intToindex = intToindex;
    /**
     * Returns true if an unk value is greater than 0.0f
     *
     * Hash: 0x38D28DA81E4E9BF9 | Since: 323
     */
    function isBattleAware(player) {
        return IsPlayerBattleAware(player);
    }
    player_1.isBattleAware = isBattleAware;
    /**
     * Return true while player is being arrested / busted.
     *
     * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
     *
     * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
     *
     * Hash: 0x388A47C51ABDAC8E | Since: 323
     */
    function isBeingArrested(player, atArresting) {
        return IsPlayerBeingArrested(player, atArresting);
    }
    player_1.isBeingArrested = isBeingArrested;
    /**
     * No comment provided
     *
     * Hash: 0x65FAEE425DE637B0 | Since: 323
     */
    function isBluetoothEnable(player) {
        return IsPlayerBluetoothEnable(player);
    }
    player_1.isBluetoothEnable = isBluetoothEnable;
    /**
     * Returns TRUE if the player ('s ped) is climbing at the moment.
     *
     * Hash: 0x95E8F73DC65EFB9C | Since: 323
     */
    function isClimbing(player) {
        return IsPlayerClimbing(player);
    }
    player_1.isClimbing = isClimbing;
    /**
     * Can the player control himself, used to disable controls for player for things like a cutscene.
     *
     * ---
     *
     * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
     *
     * Hash: 0x49C32D60007AFA47 | Since: 323
     */
    function isControlOn(player) {
        return IsPlayerControlOn(player);
    }
    player_1.isControlOn = isControlOn;
    /**
     * No comment provided
     *
     * Hash: 0x424D4687FA1E5652 | Since: 323
     */
    function isDead(player) {
        return IsPlayerDead(player);
    }
    player_1.isDead = isDead;
    /**
     * Gets a value indicating whether the specified player is currently aiming freely.
     *
     * Hash: 0x2E397FD2ECD37C87 | Since: 323
     */
    function isFreeAiming(player) {
        return IsPlayerFreeAiming(player);
    }
    player_1.isFreeAiming = isFreeAiming;
    /**
     * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
     *
     * Hash: 0x3C06B5C839B38F7B | Since: 323
     */
    function isFreeAimingAtEntity(player, entity) {
        return IsPlayerFreeAimingAtEntity(player, entity);
    }
    player_1.isFreeAimingAtEntity = isFreeAimingAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0xDCCFD3F106C36AB4 | Since: 323
     */
    function isFreeForAmbientTask(player) {
        return IsPlayerFreeForAmbientTask(player);
    }
    player_1.isFreeForAmbientTask = isFreeForAmbientTask;
    /**
     * this function is hard-coded to always return 0.
     *
     * Hash: 0x74556E1420867ECA | Since: 323
     */
    function isLoggingInNp() {
        return IsPlayerLoggingInNp();
    }
    player_1.isLoggingInNp = isLoggingInNp;
    /**
     * Returns TRUE if the game is in online mode and FALSE if in offline mode.
     *
     * This is an alias for NETWORK_IS_SIGNED_ONLINE.
     *
     * Hash: 0xF25D331DC2627BBC | Since: 323
     */
    function isOnline() {
        return IsPlayerOnline();
    }
    player_1.isOnline = isOnline;
    /**
     * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
     *
     * Hash: 0x5E9564D8246B909A | Since: 323
     */
    function isPlaying(player) {
        return IsPlayerPlaying(player);
    }
    player_1.isPlaying = isPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xFA1E2BF8B10598F9 | Since: 323
     */
    function isPressingHorn(player) {
        return IsPlayerPressingHorn(player);
    }
    player_1.isPressingHorn = isPressingHorn;
    /**
     * No comment provided
     *
     * Hash: 0x908CBECC2CAA3690 | Since: 323
     */
    function isReadyForCutscene(player) {
        return IsPlayerReadyForCutscene(player);
    }
    player_1.isReadyForCutscene = isReadyForCutscene;
    /**
     * Returns true if the player is riding a train.
     *
     * Hash: 0x4EC12697209F2196 | Since: 323
     */
    function isRidingTrain(player) {
        return IsPlayerRidingTrain(player);
    }
    player_1.isRidingTrain = isRidingTrain;
    /**
     * No comment provided
     *
     * Hash: 0x8A876A65283DD7D7 | Since: 323
     */
    function isScriptControlOn(player) {
        return IsPlayerScriptControlOn(player);
    }
    player_1.isScriptControlOn = isScriptControlOn;
    /**
     * No comment provided
     *
     * Hash: 0x78CFE51896B6B8A4 | Since: 323
     */
    function isTargettingAnything(player) {
        return IsPlayerTargettingAnything(player);
    }
    player_1.isTargettingAnything = isTargettingAnything;
    /**
     * No comment provided
     *
     * Hash: 0x7912F7FC4F6264B6 | Since: 323
     */
    function isTargettingEntity(player, entity) {
        return IsPlayerTargettingEntity(player, entity);
    }
    player_1.isTargettingEntity = isTargettingEntity;
    /**
     * No comment provided
     *
     * Hash: 0x02B15662D7F8886F | Since: 323
     */
    function isTeleportActive() {
        return IsPlayerTeleportActive();
    }
    player_1.isTeleportActive = isTeleportActive;
    /**
     * No comment provided
     *
     * Hash: 0x6E4361FF3E8CD7CA | Since: 1011
     */
    function isVehicleWeaponToggledToNonHoming() {
        return Citizen.invokeNative('0x6E4361FF3E8CD7CA', undefined);
    }
    player_1.isVehicleWeaponToggledToNonHoming = isVehicleWeaponToggledToNonHoming;
    /**
     * No comment provided
     *
     * Hash: 0x238DB2A2C23EE9EF | Since: 323
     */
    function isWantedLevelGreater(player, wantedLevel) {
        return IsPlayerWantedLevelGreater(player, wantedLevel);
    }
    player_1.isWantedLevelGreater = isWantedLevelGreater;
    /**
     * No comment provided
     *
     * Hash: 0x690A61A6D13583F6 | Since: 323
     */
    function isRemoteInNonClonedVehicle(player) {
        return Citizen.invokeNative('0x690A61A6D13583F6', player);
    }
    player_1.isRemoteInNonClonedVehicle = isRemoteInNonClonedVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x3E5F7FC85D854E15 | Since: 323
     */
    function isSpecialAbilityActive(player) {
        return IsSpecialAbilityActive(player, undefined);
    }
    player_1.isSpecialAbilityActive = isSpecialAbilityActive;
    /**
     * No comment provided
     *
     * Hash: 0xB1D200FE26AEF3CB | Since: 323
     */
    function isSpecialAbilityEnabled(player) {
        return IsSpecialAbilityEnabled(player, undefined);
    }
    player_1.isSpecialAbilityEnabled = isSpecialAbilityEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x05A1FE504B7F2587 | Since: 323
     */
    function isSpecialAbilityMeterFull(player) {
        return IsSpecialAbilityMeterFull(player, undefined);
    }
    player_1.isSpecialAbilityMeterFull = isSpecialAbilityMeterFull;
    /**
     * No comment provided
     *
     * Hash: 0xC6017F6A6CDFA694 | Since: 323
     */
    function isSpecialAbilityUnlocked(playerModel) {
        if (typeof playerModel === 'string')
            playerModel = misc.getHashKey(playerModel);
        return IsSpecialAbilityUnlocked(playerModel);
    }
    player_1.isSpecialAbilityUnlocked = isSpecialAbilityUnlocked;
    /**
     * No comment provided
     *
     * Hash: 0x5D511E3867C87139 | Since: 323
     */
    function isSystemUiBeingDisplayed() {
        return IsSystemUiBeingDisplayed();
    }
    player_1.isSystemUiBeingDisplayed = isSystemUiBeingDisplayed;
    /**
     * No comment provided
     *
     * Hash: 0x7E07C78925D5FD96 | Since: 372
     */
    function isWantedAndHasBeenSeenByCops(player) {
        return Citizen.invokeNative('0x7E07C78925D5FD96', player);
    }
    player_1.isWantedAndHasBeenSeenByCops = isWantedAndHasBeenSeenByCops;
    /**
     * Does exactly the same thing as PLAYER_ID()
     *
     * Hash: 0xEE68096F9F37341E | Since: 323
     */
    function networkIdToInt() {
        return NetworkPlayerIdToInt();
    }
    player_1.networkIdToInt = networkIdToInt;
    /**
     * Only 1 match. ob_sofa_michael.
     *
     * `PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;`
     *
     * Hash: 0xED51733DC73AED51 | Since: 323
     */
    function attachVirtualBound() {
        PlayerAttachVirtualBound(0, 0, 0, 0, 0, 0, 0, 0);
    }
    player_1.attachVirtualBound = attachVirtualBound;
    /**
     * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
     *
     * Hash: 0x1DD5897E2FA6E7C9 | Since: 323
     */
    function detachVirtualBound() {
        PlayerDetachVirtualBound();
    }
    player_1.detachVirtualBound = detachVirtualBound;
    /**
     * This returns YOUR 'identity' as a Player type.
     *
     * Always returns 0 in story mode.
     *
     * Hash: 0x4F8644AF03D0E0D6 | Since: 323
     */
    function id() {
        return PlayerId();
    }
    player_1.id = id;
    /**
     * Returns current player ped
     *
     * Hash: 0xD80958FC74E988A6 | Since: 323
     */
    function pedId() {
        return PlayerPedId();
    }
    player_1.pedId = pedId;
    /**
     * No comment provided
     *
     * Hash: 0xF3AC26D3CC576528 | Since: 323
     */
    function removeHelmet(player) {
        RemovePlayerHelmet(player, false);
    }
    player_1.removeHelmet = removeHelmet;
    /**
     * No comment provided
     *
     * Hash: 0x9F260BFB59ADBCA3 | Since: 1868
     */
    function removeTargetableEntity(player, entity) {
        Citizen.invokeNative('0x9F260BFB59ADBCA3', player, entity);
    }
    player_1.removeTargetableEntity = removeTargetableEntity;
    /**
     * Resets values set by SET_SCRIPT_FIRE_POSITION
     *
     * Hash: 0x7148E0F43D11F0D9 | Since: 1604
     */
    function removeScriptFirePosition() {
        Citizen.invokeNative('0x7148E0F43D11F0D9');
    }
    player_1.removeScriptFirePosition = removeScriptFirePosition;
    /**
     * `PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));`
     *
     * From am_armybase.ysc.c4:
     *
     * `PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));`
     *
     * -----
     *
     * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7
     *
     * -----
     * crimeType:
     * 1: Firearms possession
     * 2: Person running a red light ("5-0-5")
     * 3: Reckless driver
     * 4: Speeding vehicle (a "5-10")
     * 5: Traffic violation (a "5-0-5")
     * 6: Motorcycle rider without a helmet
     * 7: Vehicle theft (a "5-0-3")
     * 8: Grand Theft Auto
     * 9: ???
     * 10: ???
     * 11: Assault on a civilian (a "2-40")
     * 12: Assault on an officer
     * 13: Assault with a deadly weapon (a "2-45")
     * 14: Officer shot (a "2-45")
     * 15: Pedestrian struck by a vehicle
     * 16: Officer struck by a vehicle
     * 17: Helicopter down (an "AC"?)
     * 18: Civilian on fire (a "2-40")
     * 19: Officer set on fire (a "10-99")
     * 20: Car on fire
     * 21: Air unit down (an "AC"?)
     * 22: An explosion (a "9-96")
     * 23: A stabbing (a "2-45") (also something else I couldn't understand)
     * 24: Officer stabbed (also something else I couldn't understand)
     * 25: Attack on a vehicle ("MDV"?)
     * 26: Damage to property
     * 27: Suspect threatening officer with a firearm
     * 28: Shots fired
     * 29: ???
     * 30: ???
     * 31: ???
     * 32: ???
     * 33: ???
     * 34: A "2-45"
     * 35: ???
     * 36: A "9-25"
     * 37: ???
     * 38: ???
     * 39: ???
     * 40: ???
     * 41: ???
     * 42: ???
     * 43: Possible disturbance
     * 44: Civilian in need of assistance
     * 45: ???
     * 46: ???
     *
     * Hash: 0xE9B09589827545E7 | Since: 323
     */
    function reportCrime(player, crimeType, wantedLvlThresh) {
        ReportCrime(player, crimeType, wantedLvlThresh);
    }
    player_1.reportCrime = reportCrime;
    /**
     * No comment provided
     *
     * Hash: 0xDC64D2C53493ED12 | Since: 323
     */
    function reportPoliceSpotted(player) {
        ReportPoliceSpottedPlayer(player);
    }
    player_1.reportPoliceSpotted = reportPoliceSpotted;
    /**
     * No comment provided
     *
     * Hash: 0x0032A6DBA562C518 | Since: 323
     */
    function resetLawResponseDelayOverride() {
        Citizen.invokeNative('0x0032A6DBA562C518');
    }
    player_1.resetLawResponseDelayOverride = resetLawResponseDelayOverride;
    /**
     * No comment provided
     *
     * Hash: 0x2D03E13C460760D6 | Since: 323
     */
    function resetArrestState(player) {
        ResetPlayerArrestState(player);
    }
    player_1.resetArrestState = resetArrestState;
    /**
     * No comment provided
     *
     * Hash: 0x19531C47A2ABD691 | Since: 323
     */
    function resetInputGait(player) {
        ResetPlayerInputGait(player);
    }
    player_1.resetInputGait = resetInputGait;
    /**
     * No comment provided
     *
     * Hash: 0xA6F312FCCE9C1DFE | Since: 323
     */
    function resetStamina(player) {
        ResetPlayerStamina(player);
    }
    player_1.resetStamina = resetStamina;
    /**
     * No comment provided
     *
     * Hash: 0xB9D0DD990DC141DD | Since: 323
     */
    function resetWantedLevelDifficulty(player) {
        ResetWantedLevelDifficulty(player);
    }
    player_1.resetWantedLevelDifficulty = resetWantedLevelDifficulty;
    /**
     * No comment provided
     *
     * Hash: 0x823EC8E82BA45986 | Since: 2060
     */
    function resetWantedLevelHiddenEscapeTime(player) {
        Citizen.invokeNative('0x823EC8E82BA45986', player);
    }
    player_1.resetWantedLevelHiddenEscapeTime = resetWantedLevelHiddenEscapeTime;
    /**
     * No comment provided
     *
     * Hash: 0xDA1DF03D5A315F4E | Since: 323
     */
    function resetWorldBoundaryFor() {
        ResetWorldBoundaryForPlayer();
    }
    player_1.resetWorldBoundaryFor = resetWorldBoundaryFor;
    /**
     * No comment provided
     *
     * Hash: 0xA352C1B864CAFD33 | Since: 323
     */
    function restoreStamina(player) {
        RestorePlayerStamina(player, 0);
    }
    player_1.restoreStamina = restoreStamina;
    /**
     * For Steam.
     * Does nothing and always returns false in the retail version of the game.
     *
     * Hash: 0xC2AFFFDABBDC2C5C | Since: 323
     */
    function setAchievementProgress(achievementId, progress) {
        return SetAchievementProgress(achievementId, progress);
    }
    player_1.setAchievementProgress = setAchievementProgress;
    /**
     * This can be between 1.0f - 14.9f
     *
     * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
     *
     *
     *
     * Hash: 0xCA7DC8329F0A1E9E | Since: 323
     */
    function setAirDragMultiplierForsVehicle(player, multiplier) {
        SetAirDragMultiplierForPlayersVehicle(player, multiplier);
    }
    player_1.setAirDragMultiplierForsVehicle = setAirDragMultiplierForsVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xDE45D1A1EF45EE61 | Since: 323
     */
    function setAllNeutralRandomPedsFlee(player, toggle) {
        Citizen.invokeNative('0xDE45D1A1EF45EE61', player, toggle);
    }
    player_1.setAllNeutralRandomPedsFlee = setAllNeutralRandomPedsFlee;
    /**
     * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
     *
     *
     * Hash: 0xC3376F42B1FACCC6 | Since: 323
     */
    function setAllNeutralRandomPedsFleeThisFrame(player) {
        Citizen.invokeNative('0xC3376F42B1FACCC6', player);
    }
    player_1.setAllNeutralRandomPedsFleeThisFrame = setAllNeutralRandomPedsFleeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x056E0FE8534C2949 | Since: 323
     */
    function setAllRandomPedsFlee(player, toggle) {
        SetAllRandomPedsFlee(player, toggle);
    }
    player_1.setAllRandomPedsFlee = setAllRandomPedsFlee;
    /**
     * No comment provided
     *
     * Hash: 0x471D2FF42A94B4F2 | Since: 323
     */
    function setAllRandomPedsFleeThisFrame(player) {
        SetAllRandomPedsFleeThisFrame(player);
    }
    player_1.setAllRandomPedsFleeThisFrame = setAllRandomPedsFleeThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x2382AB11450AE7BA | Since: 877
     */
    function setApplyWaypointOf(player, hudColor) {
        Citizen.invokeNative('0x2382AB11450AE7BA', player, hudColor);
    }
    player_1.setApplyWaypointOf = setApplyWaypointOf;
    /**
     * No comment provided
     *
     * Hash: 0x9F343285A00B4BB6 | Since: 323
     */
    function setAutoGiveParachuteWhenEnterPlane(player, toggle) {
        SetAutoGiveParachuteWhenEnterPlane(player, toggle);
    }
    player_1.setAutoGiveParachuteWhenEnterPlane = setAutoGiveParachuteWhenEnterPlane;
    /**
     * No comment provided
     *
     * Hash: 0xD2B315B6689D537D | Since: 323
     */
    function setAutoGiveScubaGearWhenExitVehicle(player, toggle) {
        SetAutoGiveScubaGearWhenExitVehicle(player, toggle);
    }
    player_1.setAutoGiveScubaGearWhenExitVehicle = setAutoGiveScubaGearWhenExitVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x2E8AABFA40A84F8C | Since: 323
     */
    function setDisableAmbientMeleeMove(player, toggle) {
        SetDisableAmbientMeleeMove(player, toggle);
    }
    player_1.setDisableAmbientMeleeMove = setDisableAmbientMeleeMove;
    /**
     * No comment provided
     *
     * Hash: 0xDB172424876553F4 | Since: 323
     */
    function setDispatchCopsFor(player, toggle) {
        SetDispatchCopsForPlayer(player, toggle);
    }
    player_1.setDispatchCopsFor = setDispatchCopsFor;
    /**
     * No comment provided
     *
     * Hash: 0x8EEDA153AD141BA4 | Since: 323
     */
    function setEveryoneIgnore(player, toggle) {
        SetEveryoneIgnorePlayer(player, toggle);
    }
    player_1.setEveryoneIgnore = setEveryoneIgnore;
    /**
     * No comment provided
     *
     * Hash: 0x596976B02B6B5700 | Since: 323
     */
    function setIgnoreLowPriorityShockingEvents(player, toggle) {
        SetIgnoreLowPriorityShockingEvents(player, toggle);
    }
    player_1.setIgnoreLowPriorityShockingEvents = setIgnoreLowPriorityShockingEvents;
    /**
     * No comment provided
     *
     * Hash: 0xFAC75988A7D078D3 | Since: 463
     */
    function setLawPedsCanAttackNonWantedThisFrame(player) {
        Citizen.invokeNative('0xFAC75988A7D078D3', player);
    }
    player_1.setLawPedsCanAttackNonWantedThisFrame = setLawPedsCanAttackNonWantedThisFrame;
    /**
     * `PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation`
     *
     * <strong></strong>
     *
     * In "am_hold_up.ysc" used once:
     *
     * `l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);`
     * `PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));`
     *
     * Hash: 0xB45EFF719D8427A6 | Since: 323
     */
    function setLawResponseDelayOverride() {
        Citizen.invokeNative('0xB45EFF719D8427A6', 0);
    }
    player_1.setLawResponseDelayOverride = setLawResponseDelayOverride;
    /**
     * No comment provided
     *
     * Hash: 0xAA5F02DB48D704B9 | Since: 323
     */
    function setMaxWantedLevel(maxWantedLevel) {
        SetMaxWantedLevel(maxWantedLevel);
    }
    player_1.setMaxWantedLevel = setMaxWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0x5DC40A8869C22141 | Since: 323
     */
    function setBluetoothState(player, state) {
        SetPlayerBluetoothState(player, state);
    }
    player_1.setBluetoothState = setBluetoothState;
    /**
     * Sets whether this player can be hassled by gangs.
     *
     * Hash: 0xD5E460AD7020A246 | Since: 323
     */
    function setCanBeHassledByGangs(player, toggle) {
        SetPlayerCanBeHassledByGangs(player, toggle);
    }
    player_1.setCanBeHassledByGangs = setCanBeHassledByGangs;
    /**
     * No comment provided
     *
     * Hash: 0xCAC57395B151135F | Since: 323
     */
    function setCanCollectDroppedMoney(player) {
        Citizen.invokeNative('0xCAC57395B151135F', player, false);
    }
    player_1.setCanCollectDroppedMoney = setCanCollectDroppedMoney;
    /**
     * No comment provided
     *
     * Hash: 0x55FCC0C390620314 | Since: 573
     */
    function setCanDamagePlayer(player1, player2, toggle) {
        Citizen.invokeNative('0x55FCC0C390620314', player1, player2, toggle);
    }
    player_1.setCanDamagePlayer = setCanDamagePlayer;
    /**
     * Set whether this player should be able to do drive-bys.
     *
     * "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
     *
     *
     * Hash: 0x6E8834B52EC20C77 | Since: 323
     */
    function setCanDoDriveBy(player, toggle) {
        SetPlayerCanDoDriveBy(player, toggle);
    }
    player_1.setCanDoDriveBy = setCanDoDriveBy;
    /**
     * No comment provided
     *
     * Hash: 0xF401B182DBA8AF53 | Since: 323
     */
    function setCanLeaveParachuteSmokeTrail(player, enabled) {
        SetPlayerCanLeaveParachuteSmokeTrail(player, enabled);
    }
    player_1.setCanLeaveParachuteSmokeTrail = setCanLeaveParachuteSmokeTrail;
    /**
     * Sets whether this player can take cover.
     *
     * Hash: 0xD465A8599DFF6814 | Since: 323
     */
    function setCanUseCover(player, toggle) {
        SetPlayerCanUseCover(player, toggle);
    }
    player_1.setCanUseCover = setCanUseCover;
    /**
     * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
     *
     * Hash: 0x14D913B777DFF5DA | Since: 323
     */
    function setClothLockCounter(value) {
        SetPlayerClothLockCounter(value);
    }
    player_1.setClothLockCounter = setClothLockCounter;
    /**
     * Every occurrence was either 0 or 2.
     *
     * Hash: 0x9F7BBA2EA6372500 | Since: 323
     */
    function setClothPackageIndex(index) {
        SetPlayerClothPackageIndex(index);
    }
    player_1.setClothPackageIndex = setClothPackageIndex;
    /**
     * No comment provided
     *
     * Hash: 0x749FADDF97DFE930 | Since: 323
     */
    function setClothPinFrames(player) {
        SetPlayerClothPinFrames(player, 0);
    }
    player_1.setClothPinFrames = setClothPinFrames;
    /**
     * Flags:
     * SPC_AMBIENT_SCRIPT = (1 << 1),
     * SPC_CLEAR_TASKS = (1 << 2),
     * SPC_REMOVE_FIRES = (1 << 3),
     * SPC_REMOVE_EXPLOSIONS = (1 << 4),
     * SPC_REMOVE_PROJECTILES = (1 << 5),
     * SPC_DEACTIVATE_GADGETS = (1 << 6),
     * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
     * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
     * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
     * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
     * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
     * SPC_ALLOW_PAD_SHAKE = (1 << 12)
     *
     * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
     *
     * Hash: 0x8D32347D6D4C40A2 | Since: 323
     */
    function setControl(player, bHasControl, flags) {
        SetPlayerControl(player, bHasControl, flags);
    }
    player_1.setControl = setControl;
    /**
     * No comment provided
     *
     * Hash: 0xD821056B9ACF8052 | Since: 1011
     */
    function setExplosiveDamageModifier(player) {
        Citizen.invokeNative('0xD821056B9ACF8052', player, undefined);
    }
    player_1.setExplosiveDamageModifier = setExplosiveDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0xEFD79FA81DFBA9CB | Since: 573
     */
    function setFallDistanceToTriggerRagdollOverride(player) {
        SetPlayerFallDistance(player, 0);
    }
    player_1.setFallDistanceToTriggerRagdollOverride = setFallDistanceToTriggerRagdollOverride;
    /**
     * No comment provided
     *
     * Hash: 0x0FEE4F80AC44A726 | Since: 323
     */
    function setForcedAim(player, toggle) {
        SetPlayerForcedAim(player, toggle);
    }
    player_1.setForcedAim = setForcedAim;
    /**
     * No comment provided
     *
     * Hash: 0x75E7D505F2B15902 | Since: 323
     */
    function setForcedZoom(player, toggle) {
        SetPlayerForcedZoom(player, toggle);
    }
    player_1.setForcedZoom = setForcedZoom;
    /**
     * No comment provided
     *
     * Hash: 0x7651BC64AE59E128 | Since: 323
     */
    function setForceSkipAimIntro(player, toggle) {
        SetPlayerForceSkipAimIntro(player, toggle);
    }
    player_1.setForceSkipAimIntro = setForceSkipAimIntro;
    /**
     * No comment provided
     *
     * Hash: 0x7DDAB28D31FAC363 | Since: 323
     */
    function setHasReserveParachute(player) {
        SetPlayerHasReserveParachute(player);
    }
    player_1.setHasReserveParachute = setHasReserveParachute;
    /**
     * No comment provided
     *
     * Hash: 0xC388A0F065F5BC34 | Since: 573
     */
    function setHealthRechargeMaxPercent(player, limit) {
        SetPlayerHealthRechargeLimit(player, limit);
    }
    player_1.setHealthRechargeMaxPercent = setHealthRechargeMaxPercent;
    /**
     * `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
     * Use 1.0 to reset it back to normal
     *
     * Hash: 0x5DB660B38DD98A31 | Since: 323
     */
    function setHealthRechargeMultiplier(player, regenRate) {
        SetPlayerHealthRechargeMultiplier(player, regenRate);
    }
    player_1.setHealthRechargeMultiplier = setHealthRechargeMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xEE4EBDD2593BA844 | Since: 1180
     */
    function setHomingDisabledForAllVehicleWeapons() {
        SetPlayerHomingRocketDisabled(undefined, undefined);
    }
    player_1.setHomingDisabledForAllVehicleWeapons = setHomingDisabledForAllVehicleWeapons;
    /**
     * Simply sets you as invincible (Health will not deplete).
     *
     * Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
     * *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
     *
     * Hash: 0x239528EACDC3E7DE | Since: 323
     */
    function setInvincible(player, toggle) {
        SetPlayerInvincible(player, toggle);
    }
    player_1.setInvincible = setInvincible;
    /**
     * No comment provided
     *
     * Hash: 0x6BC97F4F4BB3C04B | Since: 463
     */
    function setInvincibleButHasReactions(player, toggle) {
        SetPlayerInvincibleKeepRagdollEnabled(player, toggle);
    }
    player_1.setInvincibleButHasReactions = setInvincibleButHasReactions;
    /**
     * No comment provided
     *
     * Hash: 0xFF300C7649724A0B | Since: 323
     */
    function setLeavePedBehind(player, toggle) {
        SetPlayerLeavePedBehind(player, toggle);
    }
    player_1.setLeavePedBehind = setLeavePedBehind;
    /**
     * Example from fm_mission_controler.ysc.c4:
     *
     * `PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);`
     *
     * All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
     *
     * No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
     *
     * Hash: 0x5C8B2F450EE4328E | Since: 323
     */
    function setLockon(player, toggle) {
        SetPlayerLockon(player, toggle);
    }
    player_1.setLockon = setLockon;
    /**
     * Affects the range of auto aim target.
     *
     * Hash: 0x29961D490E5814FD | Since: 323
     */
    function setLockonRangeOverride(player, range) {
        SetPlayerLockonRangeOverride(player, range);
    }
    player_1.setLockonRangeOverride = setLockonRangeOverride;
    /**
     * `Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4`
     *
     * Hash: 0x77DFCCF5948B8C71 | Since: 323
     */
    function setMaxArmour(player, value) {
        SetPlayerMaxArmour(player, value);
    }
    player_1.setMaxArmour = setMaxArmour;
    /**
     * No comment provided
     *
     * Hash: 0x8D768602ADEF2245 | Since: 463
     */
    function setMaxExplosiveDamage(player) {
        Citizen.invokeNative('0x8D768602ADEF2245', player, 0);
    }
    player_1.setMaxExplosiveDamage = setMaxExplosiveDamage;
    /**
     * No comment provided
     *
     * Hash: 0x1DE37BBF9E9CC14A | Since: 323
     */
    function setMayNotEnterAnyVehicle(player) {
        SetPlayerMayNotEnterAnyVehicle(player);
    }
    player_1.setMayNotEnterAnyVehicle = setMayNotEnterAnyVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x8026FF78F208978A | Since: 323
     */
    function setMayOnlyEnterThisVehicle(player, vehicle) {
        SetPlayerMayOnlyEnterThisVehicle(player, vehicle);
    }
    player_1.setMayOnlyEnterThisVehicle = setMayOnlyEnterThisVehicle;
    /**
     * modifier's min value is 0.1
     *
     * Hash: 0x4A3DC7ECCC321032 | Since: 323
     */
    function setMeleeWeaponDamageModifier(player, modifier) {
        SetPlayerMeleeWeaponDamageModifier(player, modifier, false);
    }
    player_1.setMeleeWeaponDamageModifier = setMeleeWeaponDamageModifier;
    /**
     * modifier's min value is 0.1
     *
     * Hash: 0xAE540335B4ABC4E2 | Since: 323
     */
    function setMeleeWeaponDefenseModifier(player, modifier) {
        SetPlayerMeleeWeaponDefenseModifier(player, modifier);
    }
    player_1.setMeleeWeaponDefenseModifier = setMeleeWeaponDefenseModifier;
    /**
     * Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
     * Make sure to request the model first and wait until it has loaded.
     *
     * Hash: 0x00A1CADD00108836 | Since: 323
     */
    function setModel(player, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetPlayerModel(player, model);
    }
    player_1.setModel = setModel;
    /**
     * No comment provided
     *
     * Hash: 0xDB89EF50FF25FCE9 | Since: 323
     */
    function setNoiseMultiplier(player, multiplier) {
        SetPlayerNoiseMultiplier(player, multiplier);
    }
    player_1.setNoiseMultiplier = setNoiseMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x977DB4641F6FC3DB | Since: 323
     */
    function setParachuteModelOverride(player, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetPlayerParachuteModelOverride(player, model);
    }
    player_1.setParachuteModelOverride = setParachuteModelOverride;
    /**
     * No comment provided
     *
     * Hash: 0xDC80A4C2F18A2B64 | Since: 323
     */
    function setParachutePackModelOverride(player, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetPlayerParachutePackModelOverride(player, model);
    }
    player_1.setParachutePackModelOverride = setParachutePackModelOverride;
    /**
     * tints 0- 13
     * 0 - unkown
     * 1 - unkown
     * 2 - unkown
     * 3 - unkown
     * 4 - unkown
     *
     * Hash: 0x93B0FB27C9A04060 | Since: 323
     */
    function setParachutePackTintIndex(player, tintIndex) {
        SetPlayerParachutePackTintIndex(player, tintIndex);
    }
    player_1.setParachutePackTintIndex = setParachutePackTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0x8217FD371A4625CF | Since: 323
     */
    function setParachuteSmokeTrailColor(player, r, g, b) {
        SetPlayerParachuteSmokeTrailColor(player, r, g, b);
    }
    player_1.setParachuteSmokeTrailColor = setParachuteSmokeTrailColor;
    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     *
     * Hash: 0xA3D0E54541D9A5E5 | Since: 323
     */
    function setParachuteTintIndex(player, tintIndex) {
        SetPlayerParachuteTintIndex(player, tintIndex);
    }
    player_1.setParachuteTintIndex = setParachuteTintIndex;
    /**
     * p1 was always 5.
     * p4 was always false.
     *
     * Hash: 0xD9284A8C0D48352C | Since: 323
     */
    function setParachuteVariationOverride(player) {
        SetPlayerParachuteVariationOverride(player, 0, undefined, undefined, false);
    }
    player_1.setParachuteVariationOverride = setParachuteVariationOverride;
    /**
     * No comment provided
     *
     * Hash: 0x11D5F725F0E780E0 | Since: 323
     */
    function setPhonePaletteIdx(player, idx) {
        SetPlayerResetFlagPreferRearSeats(player, idx);
    }
    player_1.setPhonePaletteIdx = setPhonePaletteIdx;
    /**
     * No comment provided
     *
     * Hash: 0x7BAE68775557AE0B | Since: 1290
     */
    function setPreviousVariationData(player) {
        Citizen.invokeNative('0x7BAE68775557AE0B', player, 0, 0, undefined, undefined, undefined);
    }
    player_1.setPreviousVariationData = setPreviousVariationData;
    /**
     * No comment provided
     *
     * Hash: 0x0764486AEDE748DB | Since: 2372
     */
    function setReserveParachuteModelOverride(player, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetPlayerReserveParachuteModelOverride(player, model);
    }
    player_1.setReserveParachuteModelOverride = setReserveParachuteModelOverride;
    /**
     * Tints:
     * None = -1,
     * Rainbow = 0,
     * Red = 1,
     * SeasideStripes = 2,
     * WidowMaker = 3,
     * Patriot = 4,
     * Blue = 5,
     * Black = 6,
     * Hornet = 7,
     * AirFocce = 8,
     * Desert = 9,
     * Shadow = 10,
     * HighAltitude = 11,
     * Airbone = 12,
     * Sunrise = 13,
     *
     * Hash: 0xAF04C87F5DC1DF38 | Since: 323
     */
    function setReserveParachuteTintIndex(player, index) {
        SetPlayerReserveParachuteTintIndex(player, index);
    }
    player_1.setReserveParachuteTintIndex = setReserveParachuteTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0xC54C95DA968EC5B5 | Since: 323
     */
    function setSimulateAiming(player, toggle) {
        SetPlayerSimulateAiming(player, toggle);
    }
    player_1.setSimulateAiming = setSimulateAiming;
    /**
     * Values around 1.0f to 2.0f used in game scripts.
     *
     * Hash: 0xB2C1A29588A9F47C | Since: 323
     */
    function setSneakingNoiseMultiplier(player, multiplier) {
        SetPlayerSneakingNoiseMultiplier(player, multiplier);
    }
    player_1.setSneakingNoiseMultiplier = setSneakingNoiseMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x2F7CEB6520288061 | Since: 323
     */
    function setSpectatedVehicleRadioOverride() {
        Citizen.invokeNative('0x2F7CEB6520288061', false);
    }
    player_1.setSpectatedVehicleRadioOverride = setSpectatedVehicleRadioOverride;
    /**
     * No comment provided
     *
     * Hash: 0xA01B8075D8B92DF4 | Since: 323
     */
    function setSprint(player, toggle) {
        SetPlayerSprint(player, toggle);
    }
    player_1.setSprint = setSprint;
    /**
     * No comment provided
     *
     * Hash: 0x4E9021C1FCDD507A | Since: 323
     */
    function setStealthPerceptionModifier(player, value) {
        SetPlayerStealthPerceptionModifier(player, value);
    }
    player_1.setStealthPerceptionModifier = setStealthPerceptionModifier;
    /**
     * Sets your targeting mode.
     * 0 = Assisted Aim - Full
     * 1 = Assisted Aim - Partial
     * 2 = Free Aim - Assisted
     * 3 = Free Aim
     *
     * Hash: 0xB1906895227793F3 | Since: 323
     */
    function setTargetingMode(targetMode) {
        SetPlayerTargetingMode(targetMode);
    }
    player_1.setTargetingMode = setTargetingMode;
    /**
     * No comment provided
     *
     * Hash: 0x5702B917B99DB1CD | Since: 323
     */
    function setTargetLevel(targetLevel) {
        SetPlayerTargetLevel(targetLevel);
    }
    player_1.setTargetLevel = setTargetLevel;
    /**
     * Set player team on deathmatch and last team standing..
     *
     * Hash: 0x0299FA38396A4940 | Since: 323
     */
    function setTeam(player, team) {
        SetPlayerTeam(player, team);
    }
    player_1.setTeam = setTeam;
    /**
     * No comment provided
     *
     * Hash: 0xA0D3E4F7AAFB7E78 | Since: 757
     */
    function setUnderwaterBreathPercentRemaining(player, time) {
        return SetPlayerUnderwaterTimeRemaining(player, time);
    }
    player_1.setUnderwaterBreathPercentRemaining = setUnderwaterBreathPercentRemaining;
    /**
     * modifier's min value is 0.1
     *
     * Hash: 0xA50E117CDDF82F0C | Since: 323
     */
    function setVehicleDamageModifier(player, modifier) {
        SetPlayerVehicleDamageModifier(player, modifier);
    }
    player_1.setVehicleDamageModifier = setVehicleDamageModifier;
    /**
     * modifier's min value is 0.1
     *
     * Hash: 0x4C60E6EFDAFF2462 | Since: 323
     */
    function setVehicleDefenseModifier(player, modifier) {
        SetPlayerVehicleDefenseModifier(player, modifier);
    }
    player_1.setVehicleDefenseModifier = setVehicleDefenseModifier;
    /**
     * Unsets playerPed+330 if the current weapon has certain flags.
     *
     * Hash: 0x237440E46D918649 | Since: 1290
     */
    function setVehicleWeaponToNonHoming() {
        Citizen.invokeNative('0x237440E46D918649', undefined);
    }
    player_1.setVehicleWeaponToNonHoming = setVehicleWeaponToNonHoming;
    /**
     * # Predominant call signatures
     * `PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));`
     *
     * # Parameter value ranges
     * `P0: PLAYER::PLAYER_ID()`
     * `P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)`
     * P2: Not set by any call
     *
     * Hash: 0x520E541A97A13354 | Since: 323
     */
    function setWantedCentrePosition(player) {
        return SetPlayerWantedCentrePosition(player, false, false);
    }
    player_1.setWantedCentrePosition = setWantedCentrePosition;
    /**
     * Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
     *
     * wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
     *
     * disableNoMission-  Disables When Off Mission- appears to always be false
     *
     *
     * Hash: 0x39FF19C64EF7DA5B | Since: 323
     */
    function setWantedLevel(player, wantedLevel, disableNoMission) {
        SetPlayerWantedLevel(player, wantedLevel, disableNoMission);
    }
    player_1.setWantedLevel = setWantedLevel;
    /**
     * Forces any pending wanted level to be applied to the specified player immediately.
     *
     * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
     *
     * Second parameter is unknown (always false).
     *
     * Hash: 0xE0A7D1E497FFCD6F | Since: 323
     */
    function setWantedLevelNow(player) {
        SetPlayerWantedLevelNow(player, false);
    }
    player_1.setWantedLevelNow = setWantedLevelNow;
    /**
     * p2 is always false in R* scripts
     *
     * Hash: 0x340E61DE7F471565 | Since: 323
     */
    function setWantedLevelNoDrop(player, wantedLevel) {
        SetPlayerWantedLevelNoDrop(player, wantedLevel, false);
    }
    player_1.setWantedLevelNoDrop = setWantedLevelNoDrop;
    /**
     * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
     *
     * Based on tests, it is unlikely to be a multiplier.
     *
     * modifier's min value is 0.1
     *
     * Hash: 0xCE07B9F7817AADA3 | Since: 323
     */
    function setWeaponDamageModifier(player, modifier) {
        SetPlayerWeaponDamageModifier(player, modifier);
    }
    player_1.setWeaponDamageModifier = setWeaponDamageModifier;
    /**
     * modifier's min value is 0.1
     *
     * Hash: 0x2D83BC011CA14A3C | Since: 323
     */
    function setWeaponDefenseModifier(player, modifier) {
        SetPlayerWeaponDefenseModifier(player, modifier);
    }
    player_1.setWeaponDefenseModifier = setWeaponDefenseModifier;
    /**
     * modifier's min value is 0.1
     *
     * Hash: 0xBCFDE9EDE4CF27DC | Since: 944
     */
    function setWeaponMinigunDefenseModifier(player, modifier) {
        SetPlayerWeaponDefenseModifier2(player, modifier);
    }
    player_1.setWeaponMinigunDefenseModifier = setWeaponMinigunDefenseModifier;
    /**
     * No comment provided
     *
     * Hash: 0x31E90B8873A4CD3B | Since: 617
     */
    function setWeaponTakedownDefenseModifier(player) {
        Citizen.invokeNative('0x31E90B8873A4CD3B', player, 0);
    }
    player_1.setWeaponTakedownDefenseModifier = setWeaponTakedownDefenseModifier;
    /**
     * The player will be ignored by the police if toggle is set to true
     *
     * Hash: 0x32C62AA929C2DA6A | Since: 323
     */
    function setPoliceIgnore(player, toggle) {
        SetPoliceIgnorePlayer(player, toggle);
    }
    player_1.setPoliceIgnore = setPoliceIgnore;
    /**
     * If toggle is set to false:
     * The police won't be shown on the (mini)map
     *
     * If toggle is set to true:
     * The police will be shown on the (mini)map
     *
     * Hash: 0x43286D561B72B8BF | Since: 323
     */
    function setPoliceRadarBlips(toggle) {
        SetPoliceRadarBlips(toggle);
    }
    player_1.setPoliceRadarBlips = setPoliceRadarBlips;
    /**
     * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
     *
     * Just call it one time, it is not required to be called once every tick.
     *
     * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
     *
     * Hash: 0x6DB47AA77FD94E09 | Since: 323
     */
    function setRunSprintMultiplierFor(player, multiplier) {
        SetRunSprintMultiplierForPlayer(player, multiplier);
    }
    player_1.setRunSprintMultiplierFor = setRunSprintMultiplierFor;
    /**
     * No comment provided
     *
     * Hash: 0x70A382ADEC069DD3 | Since: 1604
     */
    function setScriptFirePosition(coordX, coordY, coordZ) {
        Citizen.invokeNative('0x70A382ADEC069DD3', coordX, coordY, coordZ);
    }
    player_1.setScriptFirePosition = setScriptFirePosition;
    /**
     * No comment provided
     *
     * Hash: 0xB214D570EAD7F81A | Since: 678
     */
    function setSpecialAbilityMp(player) {
        SetSpecialAbility(player, 0, undefined);
    }
    player_1.setSpecialAbilityMp = setSpecialAbilityMp;
    /**
     * No comment provided
     *
     * Hash: 0xA49C426ED0CA4AB7 | Since: 323
     */
    function setSpecialAbilityMultiplier(multiplier) {
        SetSpecialAbilityMultiplier(multiplier);
    }
    player_1.setSpecialAbilityMultiplier = setSpecialAbilityMultiplier;
    /**
     * Swim speed multiplier.
     * Multiplier goes up to 1.49
     *
     * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
     *
     * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
     *
     * Hash: 0xA91C6F0FF7D16A13 | Since: 323
     */
    function setSwimMultiplierFor(player, multiplier) {
        SetSwimMultiplierForPlayer(player, multiplier);
    }
    player_1.setSwimMultiplierFor = setSwimMultiplierFor;
    /**
     * Max value is 1.0
     *
     * Hash: 0x9B0BB33B04405E7A | Since: 323
     */
    function setWantedLevelDifficulty(player, difficulty) {
        SetWantedLevelDifficulty(player, difficulty);
    }
    player_1.setWantedLevelDifficulty = setWantedLevelDifficulty;
    /**
     * No comment provided
     *
     * Hash: 0x49B856B1360C47C7 | Since: 2060
     */
    function setWantedLevelHiddenEscapeTime(player, wantedLevel, lossTime) {
        SetWantedLevelHiddenEvasionTime(player, wantedLevel, lossTime);
    }
    player_1.setWantedLevelHiddenEscapeTime = setWantedLevelHiddenEscapeTime;
    /**
     * No comment provided
     *
     * Hash: 0x020E5F00CDA207BA | Since: 323
     */
    function setWantedLevelMultiplier(multiplier) {
        SetWantedLevelMultiplier(multiplier);
    }
    player_1.setWantedLevelMultiplier = setWantedLevelMultiplier;
    /**
     * This is to make the player walk without accepting input from INPUT.
     *
     * gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
     *
     * p4 is always 1 and p5 is always 0.
     *
     * C# Example :
     *
     * Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
     *
     * Hash: 0x477D5D63E63ECA5D | Since: 323
     */
    function simulateInputGait(player, amount, gaitType, speed) {
        SimulatePlayerInputGait(player, amount, gaitType, speed, false, false, undefined);
    }
    player_1.simulateInputGait = simulateInputGait;
    /**
     * p1 is always 0 in the scripts
     *
     * Hash: 0x821FDC827D6F4090 | Since: 678
     */
    function specialAbilityActivate(player) {
        SpecialAbilityActivate(player, 0);
    }
    player_1.specialAbilityActivate = specialAbilityActivate;
    /**
     * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
     *
     * Hash: 0xB7B0870EB531D08D | Since: 323
     */
    function specialAbilityChargeAbsolute(player) {
        SpecialAbilityChargeAbsolute(player, 0, false, undefined);
    }
    player_1.specialAbilityChargeAbsolute = specialAbilityChargeAbsolute;
    /**
     * p1 appears to always be 1 (only comes up twice)
     *
     * Hash: 0xED481732DFF7E997 | Since: 323
     */
    function specialAbilityChargeContinuous(player, p1) {
        SpecialAbilityChargeContinuous(player, p1, undefined);
    }
    player_1.specialAbilityChargeContinuous = specialAbilityChargeContinuous;
    /**
     * 2 matches. p1 was always true.
     *
     * Hash: 0xF733F45FA4497D93 | Since: 323
     */
    function specialAbilityChargeLarge(player) {
        SpecialAbilityChargeLarge(player, false, false, undefined);
    }
    player_1.specialAbilityChargeLarge = specialAbilityChargeLarge;
    /**
     * Only 1 match. Both p1 & p2 were true.
     *
     * Hash: 0xF113E3AA9BC54613 | Since: 323
     */
    function specialAbilityChargeMedium(player) {
        SpecialAbilityChargeMedium(player, false, false, undefined);
    }
    player_1.specialAbilityChargeMedium = specialAbilityChargeMedium;
    /**
     *
     * normalizedValue is from 0.0 - 1.0
     * p2 is always 1
     *
     * Hash: 0xA0696A65F009EE18 | Since: 323
     */
    function specialAbilityChargeNormalized(player, normalizedValue) {
        SpecialAbilityChargeNormalized(player, normalizedValue, false, undefined);
    }
    player_1.specialAbilityChargeNormalized = specialAbilityChargeNormalized;
    /**
     * No comment provided
     *
     * Hash: 0xC9A763D8FE87436A | Since: 323
     */
    function specialAbilityChargeOnMissionFailed(player) {
        SpecialAbilityChargeOnMissionFailed(player, undefined);
    }
    player_1.specialAbilityChargeOnMissionFailed = specialAbilityChargeOnMissionFailed;
    /**
     * Every occurrence of p1 & p2 were both true.
     *
     * Hash: 0x2E7B9B683481687D | Since: 323
     */
    function specialAbilityChargeSmall(player) {
        SpecialAbilityChargeSmall(player, false, false, undefined);
    }
    player_1.specialAbilityChargeSmall = specialAbilityChargeSmall;
    /**
     * No comment provided
     *
     * Hash: 0xD6A953C6D1492057 | Since: 323
     */
    function specialAbilityDeactivate(player) {
        SpecialAbilityDeactivate(player, undefined);
    }
    player_1.specialAbilityDeactivate = specialAbilityDeactivate;
    /**
     * No comment provided
     *
     * Hash: 0x9CB5CE07A3968D5A | Since: 323
     */
    function specialAbilityDeactivateFast(player) {
        SpecialAbilityDeactivateFast(player, undefined);
    }
    player_1.specialAbilityDeactivateFast = specialAbilityDeactivateFast;
    /**
     * p1 is always 0 in the scripts
     *
     * Hash: 0x17F7471EACA78290 | Since: 678
     */
    function specialAbilityDeactivateMp(player) {
        SpecialAbilityDeplete(player, 0);
    }
    player_1.specialAbilityDeactivateMp = specialAbilityDeactivateMp;
    /**
     * p1 was always true.
     *
     * Hash: 0x1D506DBBBC51E64B | Since: 323
     */
    function specialAbilityDepleteMeter(player) {
        SpecialAbilityDepleteMeter(player, false, undefined);
    }
    player_1.specialAbilityDepleteMeter = specialAbilityDepleteMeter;
    /**
     * Also known as _RECHARGE_SPECIAL_ABILITY
     *
     * Hash: 0x3DACA8DDC6FD4980 | Since: 323
     */
    function specialAbilityFillMeter(player) {
        SpecialAbilityFillMeter(player, false, undefined);
    }
    player_1.specialAbilityFillMeter = specialAbilityFillMeter;
    /**
     * No comment provided
     *
     * Hash: 0x6A09D0D590A47D13 | Since: 323
     */
    function specialAbilityLock(playerModel) {
        if (typeof playerModel === 'string')
            playerModel = misc.getHashKey(playerModel);
        SpecialAbilityLock(playerModel, undefined);
    }
    player_1.specialAbilityLock = specialAbilityLock;
    /**
     * No comment provided
     *
     * Hash: 0x375F0E738F861A94 | Since: 323
     */
    function specialAbilityReset(player) {
        SpecialAbilityReset(player, undefined);
    }
    player_1.specialAbilityReset = specialAbilityReset;
    /**
     * No comment provided
     *
     * Hash: 0xF145F3BE2EFA9A3B | Since: 323
     */
    function specialAbilityUnlock(playerModel) {
        if (typeof playerModel === 'string')
            playerModel = misc.getHashKey(playerModel);
        SpecialAbilityUnlock(playerModel, undefined);
    }
    player_1.specialAbilityUnlock = specialAbilityUnlock;
    /**
     * No comment provided
     *
     * Hash: 0xBF9BD71691857E48 | Since: 323
     */
    function startFiringAmnesty(duration) {
        StartFiringAmnesty(duration);
    }
    player_1.startFiringAmnesty = startFiringAmnesty;
    /**
     * `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.
     *
     * Hash: 0xAD15F075A4DA0FDE | Since: 323
     */
    function startTeleport(player, pos, heading, findCollisionLand) {
        StartPlayerTeleport(player, pos.x, pos.y, pos.z, heading, false, findCollisionLand, false);
    }
    player_1.startTeleport = startTeleport;
    /**
     * Disables the player's teleportation
     *
     * Hash: 0xC449EDED9D73009C | Since: 323
     */
    function stopTeleport() {
        StopPlayerTeleport();
    }
    player_1.stopTeleport = stopTeleport;
    /**
     * crimeType: see REPORT_CRIME
     *
     * Hash: 0x9A987297ED8BD838 | Since: 323
     */
    function suppressCrimeThisFrame(player, crimeType) {
        SuppressCrimeThisFrame(player, crimeType);
    }
    player_1.suppressCrimeThisFrame = suppressCrimeThisFrame;
    /**
     * This has been found in use in the decompiled files.
     *
     * Hash: 0x4669B3ED80F24B4E | Since: 323
     */
    function suppressLosingWantedLevelIfHiddenThisFrame(player) {
        Citizen.invokeNative('0x4669B3ED80F24B4E', player);
    }
    player_1.suppressLosingWantedLevelIfHiddenThisFrame = suppressLosingWantedLevelIfHiddenThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x36F1B38855F2A8DF | Since: 323
     */
    function suppressWitnessesCallingPoliceThisFrame(player) {
        Citizen.invokeNative('0x36F1B38855F2A8DF', player);
    }
    player_1.suppressWitnessesCallingPoliceThisFrame = suppressWitnessesCallingPoliceThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xE23D5873C2394C61 | Since: 323
     */
    function updateTeleport(player) {
        return UpdatePlayerTeleport(player);
    }
    player_1.updateTeleport = updateTeleport;
    /**
     * No comment provided
     *
     * Hash: 0xFFEE8FA29AB9A18E | Since: 323
     */
    function updateSpecialAbilityFromStat(player) {
        Citizen.invokeNative('0xFFEE8FA29AB9A18E', player, undefined);
    }
    player_1.updateSpecialAbilityFromStat = updateSpecialAbilityFromStat;
    /**
     * This native is used in both singleplayer and multiplayer scripts.
     *
     * Always used like this in scripts
     * `PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());`
     *
     * Hash: 0xBC9490CA15AEA8FB | Since: 323
     */
    function updateWantedPositionThisFrame(player) {
        Citizen.invokeNative('0xBC9490CA15AEA8FB', player);
    }
    player_1.updateWantedPositionThisFrame = updateWantedPositionThisFrame;
})(player || (player = {}));
export var streaming;
(function (streaming) {
    /**
     * No comment provided
     *
     * Hash: 0x322B1192 | Since: unknown
     */
    function getInteriorEntitiesExtents(interiorId) {
        return Citizen.invokeNative('0x322B1192', interiorId);
    }
    streaming.getInteriorEntitiesExtents = getInteriorEntitiesExtents;
    /**
     * No comment provided
     *
     * Hash: 0xF772BB2C | Since: unknown
     */
    function getInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex) {
        return Citizen.invokeNative('0xF772BB2C', interiorId, portalIndex, cornerIndex);
    }
    streaming.getInteriorPortalCornerPosition = getInteriorPortalCornerPosition;
    /**
     * No comment provided
     *
     * Hash: 0xD05BB8B1 | Since: unknown
     */
    function getInteriorPortalCount(interiorId) {
        return Citizen.invokeNative('0xD05BB8B1', interiorId);
    }
    streaming.getInteriorPortalCount = getInteriorPortalCount;
    /**
     * No comment provided
     *
     * Hash: 0x9A0E1700 | Since: unknown
     */
    function getInteriorPortalEntityArchetype(interiorId, portalIndex, entityIndex) {
        return Citizen.invokeNative('0x9A0E1700', interiorId, portalIndex, entityIndex);
    }
    streaming.getInteriorPortalEntityArchetype = getInteriorPortalEntityArchetype;
    /**
     * No comment provided
     *
     * Hash: 0xC68021B | Since: unknown
     */
    function getInteriorPortalEntityCount(interiorId, portalIndex) {
        return Citizen.invokeNative('0xC68021B', interiorId, portalIndex);
    }
    streaming.getInteriorPortalEntityCount = getInteriorPortalEntityCount;
    /**
     * No comment provided
     *
     * Hash: 0x9DA2E811 | Since: unknown
     */
    function getInteriorPortalEntityFlag(interiorId, portalIndex, entityIndex) {
        return Citizen.invokeNative('0x9DA2E811', interiorId, portalIndex, entityIndex);
    }
    streaming.getInteriorPortalEntityFlag = getInteriorPortalEntityFlag;
    /**
     * No comment provided
     *
     * Hash: 0x9B7AB83C | Since: unknown
     */
    function getInteriorPortalEntityPosition(interiorId, portalIndex, entityIndex) {
        return Citizen.invokeNative('0x9B7AB83C', interiorId, portalIndex, entityIndex);
    }
    streaming.getInteriorPortalEntityPosition = getInteriorPortalEntityPosition;
    /**
     * No comment provided
     *
     * Hash: 0x9F9CEB63 | Since: unknown
     */
    function getInteriorPortalEntityRotation(interiorId, portalIndex, entityIndex) {
        return Citizen.invokeNative('0x9F9CEB63', interiorId, portalIndex, entityIndex);
    }
    streaming.getInteriorPortalEntityRotation = getInteriorPortalEntityRotation;
    /**
     * No comment provided
     *
     * Hash: 0xC74DA47C | Since: unknown
     */
    function getInteriorPortalFlag(interiorId, portalIndex) {
        return Citizen.invokeNative('0xC74DA47C', interiorId, portalIndex);
    }
    streaming.getInteriorPortalFlag = getInteriorPortalFlag;
    /**
     * No comment provided
     *
     * Hash: 0xAA9C141D | Since: unknown
     */
    function getInteriorPortalRoomFrom(interiorId, portalIndex) {
        return Citizen.invokeNative('0xAA9C141D', interiorId, portalIndex);
    }
    streaming.getInteriorPortalRoomFrom = getInteriorPortalRoomFrom;
    /**
     * No comment provided
     *
     * Hash: 0x3F47F0E8 | Since: unknown
     */
    function getInteriorPortalRoomTo(interiorId, portalIndex) {
        return Citizen.invokeNative('0x3F47F0E8', interiorId, portalIndex);
    }
    streaming.getInteriorPortalRoomTo = getInteriorPortalRoomTo;
    /**
     * No comment provided
     *
     * Hash: 0x77A435B0 | Since: unknown
     */
    function getInteriorPosition(interiorId) {
        return Citizen.invokeNative('0x77A435B0', interiorId);
    }
    streaming.getInteriorPosition = getInteriorPosition;
    /**
     * No comment provided
     *
     * Hash: 0xA2737C2C | Since: unknown
     */
    function getInteriorRoomCount(interiorId) {
        return Citizen.invokeNative('0xA2737C2C', interiorId);
    }
    streaming.getInteriorRoomCount = getInteriorRoomCount;
    /**
     * No comment provided
     *
     * Hash: 0xF9E795DD | Since: unknown
     */
    function getInteriorRoomExtents(interiorId, roomIndex) {
        return Citizen.invokeNative('0xF9E795DD', interiorId, roomIndex);
    }
    streaming.getInteriorRoomExtents = getInteriorRoomExtents;
    /**
     * No comment provided
     *
     * Hash: 0x6B7AF743 | Since: unknown
     */
    function getInteriorRoomFlag(interiorId, roomIndex) {
        return Citizen.invokeNative('0x6B7AF743', interiorId, roomIndex);
    }
    streaming.getInteriorRoomFlag = getInteriorRoomFlag;
    /**
     * No comment provided
     *
     * Hash: 0xE0EE05F8 | Since: unknown
     */
    function getInteriorRoomIndexByHash(interiorId, roomHash) {
        return Citizen.invokeNative('0xE0EE05F8', interiorId, roomHash);
    }
    streaming.getInteriorRoomIndexByHash = getInteriorRoomIndexByHash;
    /**
     * No comment provided
     *
     * Hash: 0x11755DF2 | Since: unknown
     */
    function getInteriorRoomName(interiorId, roomIndex) {
        return Citizen.invokeNative('0x11755DF2', interiorId, roomIndex);
    }
    streaming.getInteriorRoomName = getInteriorRoomName;
    /**
     * No comment provided
     *
     * Hash: 0x82BA3F88 | Since: unknown
     */
    function getInteriorRoomTimecycle(interiorId, roomIndex) {
        return Citizen.invokeNative('0x82BA3F88', interiorId, roomIndex);
    }
    streaming.getInteriorRoomTimecycle = getInteriorRoomTimecycle;
    /**
     * No comment provided
     *
     * Hash: 0x5A039998 | Since: unknown
     */
    function getInteriorRotation(interiorId) {
        return Citizen.invokeNative('0x5A039998', interiorId);
    }
    streaming.getInteriorRotation = getInteriorRotation;
    /**
     * No comment provided
     *
     * Hash: 0x87F43553 | Since: unknown
     */
    function setInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex, pos) {
        Citizen.invokeNative('0x87F43553', interiorId, portalIndex, cornerIndex, pos.x, pos.y, pos.z);
    }
    streaming.setInteriorPortalCornerPosition = setInteriorPortalCornerPosition;
    /**
     * No comment provided
     *
     * Hash: 0x8349CD76 | Since: unknown
     */
    function setInteriorPortalEntityFlag(interiorId, portalIndex, entityIndex, flag) {
        Citizen.invokeNative('0x8349CD76', interiorId, portalIndex, entityIndex, flag);
    }
    streaming.setInteriorPortalEntityFlag = setInteriorPortalEntityFlag;
    /**
     * No comment provided
     *
     * Hash: 0x88B2355E | Since: unknown
     */
    function setInteriorPortalFlag(interiorId, portalIndex, flag) {
        Citizen.invokeNative('0x88B2355E', interiorId, portalIndex, flag);
    }
    streaming.setInteriorPortalFlag = setInteriorPortalFlag;
    /**
     * No comment provided
     *
     * Hash: 0x298FC783 | Since: unknown
     */
    function setInteriorPortalRoomFrom(interiorId, portalIndex, roomFrom) {
        Citizen.invokeNative('0x298FC783', interiorId, portalIndex, roomFrom);
    }
    streaming.setInteriorPortalRoomFrom = setInteriorPortalRoomFrom;
    /**
     * No comment provided
     *
     * Hash: 0x58982680 | Since: unknown
     */
    function setInteriorPortalRoomTo(interiorId, portalIndex, roomTo) {
        Citizen.invokeNative('0x58982680', interiorId, portalIndex, roomTo);
    }
    streaming.setInteriorPortalRoomTo = setInteriorPortalRoomTo;
    /**
     * Overwrite the games default CPortalTracker interior detection range.
     * This fixes potentially unwanted behaviour in the base game and allows you to build custom interiors with larger ceiling heights without running into graphical glitches.
     *
     * By default CPortalTracker will probe 4 units downward trying to reach collisions that are part of the interior the entity is in.
     * If no collision can be found 16 units are used in some circumstances.
     *
     * There are 30+ hard coded special cases, only some of them exposed via script (for example `ENABLE_STADIUM_PROBES_THIS_FRAME`).
     *
     * This native allows you to extend the probe range up to 150 units which is the same value the game uses for the `xs_arena_interior`
     *
     * Hash: 0x423F7E39 | Since: unknown
     */
    function setInteriorProbeLength(probeLength) {
        Citizen.invokeNative('0x423F7E39', probeLength);
    }
    streaming.setInteriorProbeLength = setInteriorProbeLength;
    /**
     * No comment provided
     *
     * Hash: 0x4FDCF51E | Since: unknown
     */
    function setInteriorRoomExtents(interiorId, roomIndex, bbMinX, bbMinY, bbMinZ, bbMaxX, bbMaxY, bbMaxZ) {
        Citizen.invokeNative('0x4FDCF51E', interiorId, roomIndex, bbMinX, bbMinY, bbMinZ, bbMaxX, bbMaxY, bbMaxZ);
    }
    streaming.setInteriorRoomExtents = setInteriorRoomExtents;
    /**
     * No comment provided
     *
     * Hash: 0x5518D60B | Since: unknown
     */
    function setInteriorRoomFlag(interiorId, roomIndex, flag) {
        Citizen.invokeNative('0x5518D60B', interiorId, roomIndex, flag);
    }
    streaming.setInteriorRoomFlag = setInteriorRoomFlag;
    /**
     * No comment provided
     *
     * Hash: 0x31C9A848 | Since: unknown
     */
    function setInteriorRoomTimecycle(interiorId, roomIndex, timecycleHash) {
        Citizen.invokeNative('0x31C9A848', interiorId, roomIndex, timecycleHash);
    }
    streaming.setInteriorRoomTimecycle = setInteriorRoomTimecycle;
    /**
     * Transiently updates the entity with the specified mapdata index and entity index.
     * This function supports SDK infrastructure and is not intended to be used directly from your code.
     *
     * Hash: 0xFC52CB91 | Since: unknown
     */
    function updateMapdataEntity(mapdata, entity, entityDef) {
        Citizen.invokeNative('0xFC52CB91', mapdata, entity, entityDef);
    }
    streaming.updateMapdataEntity = updateMapdataEntity;
    /**
     * No comment provided
     *
     * Hash: 0x32CA01C3 | Since: unknown
     */
    function addTextEntry(entryKey, entryText) {
        Citizen.invokeNative('0x32CA01C3', entryKey, entryText);
    }
    streaming.addTextEntry = addTextEntry;
    /**
     * No comment provided
     *
     * Hash: 0x289DA860 | Since: unknown
     */
    function addTextEntryByHash(entryKey, entryText) {
        if (typeof entryKey === 'string')
            entryKey = misc.getHashKey(entryKey);
        Citizen.invokeNative('0x289DA860', entryKey, entryText);
    }
    streaming.addTextEntryByHash = addTextEntryByHash;
    /**
     * No comment provided
     *
     * Hash: 0x0BC3144DEB678666 | Since: 323
     */
    function addModelToCreatorBudget(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return AddModelToCreatorBudget(modelHash);
    }
    streaming.addModelToCreatorBudget = addModelToCreatorBudget;
    /**
     * No comment provided
     *
     * Hash: 0x8E2A065ABDAE6994 | Since: 323
     */
    function allowPlayerSwitchAscent() {
        AllowPlayerSwitchAscent();
    }
    streaming.allowPlayerSwitchAscent = allowPlayerSwitchAscent;
    /**
     * No comment provided
     *
     * Hash: 0xAD5FDF34B81BFE79 | Since: 323
     */
    function allowPlayerSwitchDescent() {
        AllowPlayerSwitchDescent();
    }
    streaming.allowPlayerSwitchDescent = allowPlayerSwitchDescent;
    /**
     * No comment provided
     *
     * Hash: 0x74DE2E8739086740 | Since: 323
     */
    function allowPlayerSwitchOutro() {
        AllowPlayerSwitchOutro();
    }
    streaming.allowPlayerSwitchOutro = allowPlayerSwitchOutro;
    /**
     * No comment provided
     *
     * Hash: 0x43D1680C6D19A8E9 | Since: 323
     */
    function allowPlayerSwitchPan() {
        AllowPlayerSwitchPan();
    }
    streaming.allowPlayerSwitchPan = allowPlayerSwitchPan;
    /**
     * No comment provided
     *
     * Hash: 0x9BADDC94EF83B823 | Since: 323
     */
    function beginSrl() {
        BeginSrl();
    }
    streaming.beginSrl = beginSrl;
    /**
     * No comment provided
     *
     * Hash: 0x31B73D1EA9F01DA2 | Since: 323
     */
    function clearFocus() {
        ClearFocus();
    }
    streaming.clearFocus = clearFocus;
    /**
     * No comment provided
     *
     * Hash: 0xCE58B1CFB9290813 | Since: 323
     */
    function clearHdArea() {
        ClearHdArea();
    }
    streaming.clearHdArea = clearHdArea;
    /**
     * No comment provided
     *
     * Hash: 0xBD605B8E0E18B3BB | Since: 323
     */
    function disableSwitchOutroFx() {
        DisableSwitchOutroFx();
    }
    streaming.disableSwitchOutroFx = disableSwitchOutroFx;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x2DA49C3B79856961 | Since: 323
     */
    function doesAnimDictExist(animDict) {
        return DoesAnimDictExist(animDict);
    }
    streaming.doesAnimDictExist = doesAnimDictExist;
    /**
     * No comment provided
     *
     * Hash: 0xD4793DFF3AF2ABCD | Since: 323
     */
    function enableSwitchPauseBeforeDescent() {
        EnableSwitchPauseBeforeDescent();
    }
    streaming.enableSwitchPauseBeforeDescent = enableSwitchPauseBeforeDescent;
    /**
     * Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
     *
     * Hash: 0x0A41540E63C9EE17 | Since: 323
     */
    function endSrl() {
        EndSrl();
    }
    streaming.endSrl = endSrl;
    /**
     * No comment provided
     *
     * Hash: 0x03F1A106BDA7DD3E | Since: 323
     */
    function forceAllowTimeBasedFadingThisFrame() {
        Citizen.invokeNative('0x03F1A106BDA7DD3E');
    }
    streaming.forceAllowTimeBasedFadingThisFrame = forceAllowTimeBasedFadingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xF741BD853611592D | Since: 2189
     */
    function getGlobalWaterFile() {
        return GetGlobalWaterType();
    }
    streaming.getGlobalWaterFile = getGlobalWaterFile;
    /**
     * x1, y1, z1 -- Coords of your ped model
     * x2, y2, z2 -- Coords of the ped you want to switch to
     *
     * Hash: 0xB5D7B26B45720E05 | Since: 323
     */
    function getIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2) {
        return GetIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2);
    }
    streaming.getIdealPlayerSwitchType = getIdealPlayerSwitchType;
    /**
     * No comment provided
     *
     * Hash: 0x0C15B0E443B2349D | Since: 323
     */
    function getLodscale() {
        return GetLodscale();
    }
    streaming.getLodscale = getLodscale;
    /**
     * No comment provided
     *
     * Hash: 0x4060057271CEBC89 | Since: 323
     */
    function getNumberOfRequests() {
        return GetNumberOfStreamingRequests();
    }
    streaming.getNumberOfRequests = getNumberOfRequests;
    /**
     * No comment provided
     *
     * Hash: 0x20F898A5D9782800 | Since: 323
     */
    function getPlayerShortSwitchState() {
        return GetPlayerShortSwitchState();
    }
    streaming.getPlayerShortSwitchState = getPlayerShortSwitchState;
    /**
     * No comment provided
     *
     * Hash: 0x5B48A06DD0E792A5 | Since: 323
     */
    function getPlayerSwitchInterpOutCurrentTime() {
        return GetPlayerSwitchInterpOutCurrentTime();
    }
    streaming.getPlayerSwitchInterpOutCurrentTime = getPlayerSwitchInterpOutCurrentTime;
    /**
     * No comment provided
     *
     * Hash: 0x08C2D6C52A3104BB | Since: 323
     */
    function getPlayerSwitchInterpOutDuration() {
        return GetPlayerSwitchInterpOutDuration();
    }
    streaming.getPlayerSwitchInterpOutDuration = getPlayerSwitchInterpOutDuration;
    /**
     * No comment provided
     *
     * Hash: 0x78C0D93253149435 | Since: 323
     */
    function getPlayerSwitchJumpCutIndex() {
        return GetPlayerSwitchJumpCutIndex();
    }
    streaming.getPlayerSwitchJumpCutIndex = getPlayerSwitchJumpCutIndex;
    /**
     * No comment provided
     *
     * Hash: 0x470555300D10B2A5 | Since: 323
     */
    function getPlayerSwitchState() {
        return GetPlayerSwitchState();
    }
    streaming.getPlayerSwitchState = getPlayerSwitchState;
    /**
     * No comment provided
     *
     * Hash: 0xB3C94A90D9FC9E62 | Since: 323
     */
    function getPlayerSwitchType() {
        return GetPlayerSwitchType();
    }
    streaming.getPlayerSwitchType = getPlayerSwitchType;
    /**
     * 0.0 = no memory used
     * 1.0 = all memory used
     *
     * Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
     *
     * Hash: 0x3D3D8B3BE5A83D35 | Since: 323
     */
    function getUsedCreatorBudget() {
        return GetUsedCreatorModelMemoryPercentage();
    }
    streaming.getUsedCreatorBudget = getUsedCreatorBudget;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xD031A9162D01088C | Since: 323
     */
    function hasAnimDictLoaded(animDict) {
        return HasAnimDictLoaded(animDict);
    }
    streaming.hasAnimDictLoaded = hasAnimDictLoaded;
    /**
     * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
     *
     * Animation set and clip set are synonymous.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0xC4EA073D86FB29B0 | Since: 323
     */
    function hasAnimSetLoaded(animSet) {
        return HasAnimSetLoaded(animSet);
    }
    streaming.hasAnimSetLoaded = hasAnimSetLoaded;
    /**
     * Alias for HAS_ANIM_SET_LOADED.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x318234F4F3738AF3 | Since: 323
     */
    function hasClipSetLoaded(clipSet) {
        return HasClipSetLoaded(clipSet);
    }
    streaming.hasClipSetLoaded = hasClipSetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x22CCA434E368F03A | Since: 323
     */
    function hasCollisionForModelLoaded(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return HasCollisionForModelLoaded(model);
    }
    streaming.hasCollisionForModelLoaded = hasCollisionForModelLoaded;
    /**
     * Checks if the specified model has loaded into memory.
     *
     * Hash: 0x98A4EB5D89A0C952 | Since: 323
     */
    function hasModelLoaded(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return HasModelLoaded(model);
    }
    streaming.hasModelLoaded = hasModelLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x8702416E512EC454 | Since: 323
     */
    function hasNamedPtfxAssetLoaded(fxName) {
        return HasNamedPtfxAssetLoaded(fxName);
    }
    streaming.hasNamedPtfxAssetLoaded = hasNamedPtfxAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xCA7D9B86ECA7481B | Since: 323
     */
    function hasPtfxAssetLoaded() {
        return HasPtfxAssetLoaded();
    }
    streaming.hasPtfxAssetLoaded = hasPtfxAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xB5A4DB34FE89B88A | Since: 323
     */
    function initCreatorBudget() {
        InitCreatorBudget();
    }
    streaming.initCreatorBudget = initCreatorBudget;
    /**
     * No comment provided
     *
     * Hash: 0x63EB2B972A218CAC | Since: 323
     */
    function iplGroupSwapCancel() {
        Citizen.invokeNative('0x63EB2B972A218CAC');
    }
    streaming.iplGroupSwapCancel = iplGroupSwapCancel;
    /**
     * No comment provided
     *
     * Hash: 0xF4A0DADB70F57FA6 | Since: 323
     */
    function iplGroupSwapFinish() {
        Citizen.invokeNative('0xF4A0DADB70F57FA6');
    }
    streaming.iplGroupSwapFinish = iplGroupSwapFinish;
    /**
     * No comment provided
     *
     * Hash: 0x5068F488DDB54DD8 | Since: 323
     */
    function iplGroupSwapIsActive() {
        return Citizen.invokeNative('0x5068F488DDB54DD8');
    }
    streaming.iplGroupSwapIsActive = iplGroupSwapIsActive;
    /**
     * No comment provided
     *
     * Hash: 0xFB199266061F820A | Since: 323
     */
    function iplGroupSwapIsReady() {
        return Citizen.invokeNative('0xFB199266061F820A');
    }
    streaming.iplGroupSwapIsReady = iplGroupSwapIsReady;
    /**
     * No comment provided
     *
     * Hash: 0x95A7DABDDBB78AE7 | Since: 323
     */
    function iplGroupSwapStart(iplName1, iplName2) {
        Citizen.invokeNative('0x95A7DABDDBB78AE7', iplName1, iplName2);
    }
    streaming.iplGroupSwapStart = iplGroupSwapStart;
    /**
     * No comment provided
     *
     * Hash: 0x2DDFF3FB9075D747 | Since: 323
     */
    function isEntityFocus(entity) {
        return IsEntityFocus(entity);
    }
    streaming.isEntityFocus = isEntityFocus;
    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x88A741E44A2B3495 | Since: 323
     */
    function isIplActive(iplName) {
        return IsIplActive(iplName);
    }
    streaming.isIplActive = isIplActive;
    /**
     * No comment provided
     *
     * Hash: 0x75816577FEA6DAD5 | Since: 1103
     */
    function isModelAPed(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelAPed(model);
    }
    streaming.isModelAPed = isModelAPed;
    /**
     * Returns whether the specified model represents a vehicle.
     *
     * Hash: 0x19AAC8F07BFEC53E | Since: 323
     */
    function isModelAVehicle(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelAVehicle(model);
    }
    streaming.isModelAVehicle = isModelAVehicle;
    /**
     * Check if model is in cdimage(rpf)
     *
     * Hash: 0x35B9E0803292B641 | Since: 323
     */
    function isModelInCdimage(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelInCdimage(model);
    }
    streaming.isModelInCdimage = isModelInCdimage;
    /**
     * Returns whether the specified model exists in the game.
     *
     * Hash: 0xC0296A2EDF545E92 | Since: 323
     */
    function isModelValid(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsModelValid(model);
    }
    streaming.isModelValid = isModelValid;
    /**
     * No comment provided
     *
     * Hash: 0x41CA5A33160EA4AB | Since: 323
     */
    function isNetworkLoadingScene() {
        return IsNetworkLoadingScene();
    }
    streaming.isNetworkLoadingScene = isNetworkLoadingScene;
    /**
     * No comment provided
     *
     * Hash: 0xA41A05B6CB741B85 | Since: 323
     */
    function isNewLoadSceneActive() {
        return IsNewLoadSceneActive();
    }
    streaming.isNewLoadSceneActive = isNewLoadSceneActive;
    /**
     * No comment provided
     *
     * Hash: 0x01B8247A7A8B9AD1 | Since: 323
     */
    function isNewLoadSceneLoaded() {
        return IsNewLoadSceneLoaded();
    }
    streaming.isNewLoadSceneLoaded = isNewLoadSceneLoaded;
    /**
     * Returns true if the player is currently switching, false otherwise.
     * (When the camera is in the sky moving from Trevor to Franklin for example)
     *
     * Hash: 0xD9D2CFFF49FAB35F | Since: 323
     */
    function isPlayerSwitchInProgress() {
        return IsPlayerSwitchInProgress();
    }
    streaming.isPlayerSwitchInProgress = isPlayerSwitchInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x71E7B2E657449AAD | Since: 323
     */
    function isSafeToStartPlayerSwitch() {
        return Citizen.invokeNative('0x71E7B2E657449AAD');
    }
    streaming.isSafeToStartPlayerSwitch = isSafeToStartPlayerSwitch;
    /**
     * Returns true when the srl from BEGIN_SRL is loaded.
     *
     * Hash: 0xD0263801A4C5B0BB | Since: 323
     */
    function isSrlLoaded() {
        return IsSrlLoaded();
    }
    streaming.isSrlLoaded = isSrlLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xBC9823AB80A3DCAC | Since: 323
     */
    function isStreamvolActive() {
        return IsStreamvolActive();
    }
    streaming.isStreamvolActive = isStreamvolActive;
    /**
     * No comment provided
     *
     * Hash: 0xDFA80CB25D0A19B3 | Since: 323
     */
    function isSwitchReadyForDescent() {
        return IsSwitchReadyForDescent();
    }
    streaming.isSwitchReadyForDescent = isSwitchReadyForDescent;
    /**
     * No comment provided
     *
     * Hash: 0x5B74EA8CFD5E3E7E | Since: 323
     */
    function isSwitchSkippingDescent() {
        return IsSwitchSkippingDescent();
    }
    streaming.isSwitchSkippingDescent = isSwitchSkippingDescent;
    /**
     * No comment provided
     *
     * Hash: 0x933BBEEB8C61B5F4 | Since: 323
     */
    function isSwitchToMultiFirstpartFinished() {
        return Citizen.invokeNative('0x933BBEEB8C61B5F4');
    }
    streaming.isSwitchToMultiFirstpartFinished = isSwitchToMultiFirstpartFinished;
    /**
     * No comment provided
     *
     * Hash: 0xBD6E84632DD4CB3F | Since: 323
     */
    function loadAllObjectsNow() {
        LoadAllObjectsNow();
    }
    streaming.loadAllObjectsNow = loadAllObjectsNow;
    /**
     * 0 - default
     * 1 - HeistIsland
     *
     * Hash: 0x7E3F55ED251B76D3 | Since: 2189
     */
    function loadGlobalWaterFile(waterType) {
        LoadGlobalWaterType(waterType);
    }
    streaming.loadGlobalWaterFile = loadGlobalWaterFile;
    /**
     * No comment provided
     *
     * Hash: 0x4448EB75B4904BDB | Since: 323
     */
    function loadScene(pos) {
        LoadScene(pos.x, pos.y, pos.z);
    }
    streaming.loadScene = loadScene;
    /**
     * No comment provided
     *
     * Hash: 0xC4582015556D1C46 | Since: 323
     */
    function networkUpdateLoadScene() {
        return NetworkUpdateLoadScene();
    }
    streaming.networkUpdateLoadScene = networkUpdateLoadScene;
    /**
     * `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
     * `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
     * Returns True if success, used only 7 times in decompiled scripts of 1868
     *
     * Hash: 0x212A8D0D2BABFAC2 | Since: 323
     */
    function newLoadSceneStart(pos, offsetX, offsetY, offsetZ, radius) {
        return NewLoadSceneStart(pos.x, pos.y, pos.z, offsetX, offsetY, offsetZ, radius, 0);
    }
    streaming.newLoadSceneStart = newLoadSceneStart;
    /**
     * No comment provided
     *
     * Hash: 0xACCFB4ACF53551B0 | Since: 323
     */
    function newLoadSceneStartSphere(pos, radius) {
        return NewLoadSceneStartSphere(pos.x, pos.y, pos.z, radius, undefined);
    }
    streaming.newLoadSceneStartSphere = newLoadSceneStartSphere;
    /**
     * No comment provided
     *
     * Hash: 0xC197616D221FF4A4 | Since: 323
     */
    function newLoadSceneStop() {
        NewLoadSceneStop();
    }
    streaming.newLoadSceneStop = newLoadSceneStop;
    /**
     * This allows you to override "extended distance scaling" setting. Needs to be called each frame.
     * Max scaling seems to be 200.0, normal is 1.0
     * See https://gfycat.com/DetailedHauntingIncatern
     *
     * Hash: 0xA76359FC80B2438E | Since: 323
     */
    function overrideLodscaleThisFrame(scaling) {
        OverrideLodscaleThisFrame(scaling);
    }
    streaming.overrideLodscaleThisFrame = overrideLodscaleThisFrame;
    /**
     * This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
     * For instance, GTA:O opening cutscene.
     * https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
     * https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
     *
     * Hash: 0x3D245789CE12982C | Since: 323
     */
    function prefetchSrl(srl) {
        PrefetchSrl(srl);
    }
    streaming.prefetchSrl = prefetchSrl;
    /**
     * No comment provided
     *
     * Hash: 0xBED8CA5FF5E04113 | Since: 323
     */
    function remapLodscaleRangeThisFrame() {
        Citizen.invokeNative('0xBED8CA5FF5E04113', 0, 0, 0, 0);
    }
    streaming.remapLodscaleRangeThisFrame = remapLodscaleRangeThisFrame;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xF66A602F829E2A06 | Since: 323
     */
    function removeAnimDict(animDict) {
        RemoveAnimDict(animDict);
    }
    streaming.removeAnimDict = removeAnimDict;
    /**
     * Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
     *
     * Animation set and clip set are synonymous.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x16350528F93024B3 | Since: 323
     */
    function removeAnimSet(animSet) {
        RemoveAnimSet(animSet);
    }
    streaming.removeAnimSet = removeAnimSet;
    /**
     * Alias for REMOVE_ANIM_SET.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x01F73A131C18CD94 | Since: 323
     */
    function removeClipSet(clipSet) {
        RemoveClipSet(clipSet);
    }
    streaming.removeClipSet = removeClipSet;
    /**
     * Removes an IPL from the map.
     *
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Example:
     * C#:
     * Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
     *
     * C++:
     * `STREAMING::REMOVE_IPL("trevorstrailertidy");`
     *
     * iplName = Name of IPL you want to remove.
     *
     * Hash: 0xEE6C5AD3ECE0A82D | Since: 323
     */
    function removeIpl(iplName) {
        RemoveIpl(iplName);
    }
    streaming.removeIpl = removeIpl;
    /**
     * No comment provided
     *
     * Hash: 0xF086AD9354FAC3A3 | Since: 323
     */
    function removeModelFromCreatorBudget(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        RemoveModelFromCreatorBudget(modelHash);
    }
    streaming.removeModelFromCreatorBudget = removeModelFromCreatorBudget;
    /**
     * No comment provided
     *
     * Hash: 0x5F61EBBE1A00F96D | Since: 323
     */
    function removeNamedPtfxAsset(fxName) {
        RemoveNamedPtfxAsset(fxName);
    }
    streaming.removeNamedPtfxAsset = removeNamedPtfxAsset;
    /**
     * No comment provided
     *
     * Hash: 0x88C6814073DD4A73 | Since: 323
     */
    function removePtfxAsset() {
        RemovePtfxAsset();
    }
    streaming.removePtfxAsset = removePtfxAsset;
    /**
     * Alias of REQUEST_COLLISION_AT_COORD.
     *
     * Hash: 0xC9156DC11411A9EA | Since: 323
     */
    function requestAdditionalCollisionAtCoord(pos) {
        RequestAdditionalCollisionAtCoord(pos.x, pos.y, pos.z);
    }
    streaming.requestAdditionalCollisionAtCoord = requestAdditionalCollisionAtCoord;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xD3BD40951412FEF6 | Since: 323
     */
    function requestAnimDict(animDict) {
        RequestAnimDict(animDict);
    }
    streaming.requestAnimDict = requestAnimDict;
    /**
     * Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0x6EA47DAE7FAD0EED | Since: 323
     */
    function requestAnimSet(animSet) {
        RequestAnimSet(animSet);
    }
    streaming.requestAnimSet = requestAnimSet;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
     *
     * Hash: 0xD2A71E1A77418A49 | Since: 323
     */
    function requestClipSet(clipSet) {
        RequestClipSet(clipSet);
    }
    streaming.requestClipSet = requestClipSet;
    /**
     * No comment provided
     *
     * Hash: 0x07503F7948F491A7 | Since: 323
     */
    function requestCollisionAtCoord(pos) {
        RequestCollisionAtCoord(pos.x, pos.y, pos.z);
    }
    streaming.requestCollisionAtCoord = requestCollisionAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x923CB32A3B874FCB | Since: 323
     */
    function requestCollisionForModel(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        RequestCollisionForModel(model);
    }
    streaming.requestCollisionForModel = requestCollisionForModel;
    /**
     * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
     *
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x41B4893843BBDB74 | Since: 323
     */
    function requestIpl(iplName) {
        RequestIpl(iplName);
    }
    streaming.requestIpl = requestIpl;
    /**
     * No comment provided
     *
     * Hash: 0xA0261AEF7ACFC51E | Since: 323
     */
    function requestMenuPedModel(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        RequestMenuPedModel(model);
    }
    streaming.requestMenuPedModel = requestMenuPedModel;
    /**
     * Request a model to be loaded into memory.
     *
     *
     * Hash: 0x963D27A58DF860AC | Since: 323
     */
    function requestModel(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        RequestModel(model);
    }
    streaming.requestModel = requestModel;
    /**
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");`
     * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");`
     *
     * Hash: 0x8A7A40100EDFEC58 | Since: 323
     */
    function requestModelsInRoom(interior, roomName) {
        RequestModelsInRoom(interior, roomName);
    }
    streaming.requestModelsInRoom = requestModelsInRoom;
    /**
     * From the b678d decompiled scripts:
     *
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");`
     * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");`
     *
     * Hash: 0xB80D8756B4668AB6 | Since: 323
     */
    function requestNamedPtfxAsset(fxName) {
        RequestNamedPtfxAsset(fxName);
    }
    streaming.requestNamedPtfxAsset = requestNamedPtfxAsset;
    /**
     * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
     *
     * Hash: 0x944955FB2A3935C8 | Since: 323
     */
    function requestPtfxAsset() {
        RequestPtfxAsset();
    }
    streaming.requestPtfxAsset = requestPtfxAsset;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x4E52E752C76E7E7A | Since: 323
     */
    function setAllMapdataCulled() {
        Citizen.invokeNative('0x4E52E752C76E7E7A', undefined);
    }
    streaming.setAllMapdataCulled = setAllMapdataCulled;
    /**
     * This is a NOP function. It does nothing at all.
     *
     * Hash: 0x42CBE54462D92634 | Since: 323
     */
    function setDitchPoliceModels(toggle) {
        SetDitchPoliceModels(toggle);
    }
    streaming.setDitchPoliceModels = setDitchPoliceModels;
    /**
     * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
     *
     * Hash: 0x198F77705FA0931D | Since: 323
     */
    function setFocusEntity(entity) {
        SetFocusEntity(entity);
    }
    streaming.setFocusEntity = setFocusEntity;
    /**
     * Override the area where the camera will render the terrain.
     * p3, p4 and p5 are usually set to 0.0
     *
     *
     * Hash: 0xBB7454BAFF08FE25 | Since: 323
     */
    function setFocusPosAndVel(pos, offsetX, offsetY, offsetZ) {
        SetFocusPosAndVel(pos.x, pos.y, pos.z, offsetX, offsetY, offsetZ);
    }
    streaming.setFocusPosAndVel = setFocusPosAndVel;
    /**
     * No comment provided
     *
     * Hash: 0x717CD6E6FAEBBEDC | Since: 323
     */
    function setGamePausesFor(toggle) {
        SetGamePausesForStreaming(toggle);
    }
    streaming.setGamePausesFor = setGamePausesFor;
    /**
     * No comment provided
     *
     * Hash: 0xB85F26619073E775 | Since: 323
     */
    function setHdArea(pos, radius) {
        SetHdArea(pos.x, pos.y, pos.z, radius);
    }
    streaming.setHdArea = setHdArea;
    /**
     * No comment provided
     *
     * Hash: 0xE37B76C387BE28ED | Since: 323
     */
    function setInteriorActive(interiorID, toggle) {
        SetInteriorActive(interiorID, toggle);
    }
    streaming.setInteriorActive = setInteriorActive;
    /**
     * Enables the specified island. For more information, see islandhopper.meta
     *
     * Hash: 0x9A9D1BA639675CF1 | Since: 2189
     */
    function setIslandEnabled(name, toggle) {
        SetIslandEnabled(name, toggle);
    }
    streaming.setIslandEnabled = setIslandEnabled;
    /**
     * Possible p0 values:
     *
     * "prologue"
     * "Prologue_Main"
     *
     * Hash: 0xAF12610C644A35C9 | Since: 323
     */
    function setMapdatacullboxEnabled(name, toggle) {
        SetMapdatacullboxEnabled(name, toggle);
    }
    streaming.setMapdatacullboxEnabled = setMapdatacullboxEnabled;
    /**
     * Unloads model from memory
     *
     * Hash: 0xE532F5D78798DAAB | Since: 323
     */
    function setModelAsNoLongerNeeded(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetModelAsNoLongerNeeded(model);
    }
    streaming.setModelAsNoLongerNeeded = setModelAsNoLongerNeeded;
    /**
     * Control how many new (ambient?) peds will spawn in the game world.
     * Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
     *
     * Hash: 0x8C95333CFC3340F3 | Since: 323
     */
    function setPedPopulationBudget() {
        SetPedPopulationBudget(0);
    }
    streaming.setPedPopulationBudget = setPedPopulationBudget;
    /**
     * No comment provided
     *
     * Hash: 0x5F2013F8BC24EE69 | Since: 323
     */
    function setPlayerShortSwitchStyle() {
        SetPlayerShortSwitchStyle(0);
    }
    streaming.setPlayerShortSwitchStyle = setPlayerShortSwitchStyle;
    /**
     * All names can be found in playerswitchestablishingshots.meta
     *
     * Hash: 0x0FDE9DBFC0A6BC65 | Since: 323
     */
    function setPlayerSwitchEstablishingShot(name) {
        SetPlayerSwitchEstablishingShot(name);
    }
    streaming.setPlayerSwitchEstablishingShot = setPlayerSwitchEstablishingShot;
    /**
     * No comment provided
     *
     * Hash: 0xC208B673CE446B61 | Since: 323
     */
    function setPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder) {
        SetPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
    }
    streaming.setPlayerSwitchOutro = setPlayerSwitchOutro;
    /**
     * No comment provided
     *
     * Hash: 0x77B5F9A36BF96710 | Since: 323
     */
    function setReducePedModelBudget(toggle) {
        SetReducePedModelBudget(toggle);
    }
    streaming.setReducePedModelBudget = setReducePedModelBudget;
    /**
     * No comment provided
     *
     * Hash: 0x80C527893080CCF3 | Since: 323
     */
    function setReduceVehicleModelBudget(toggle) {
        SetReduceVehicleModelBudget(toggle);
    }
    streaming.setReduceVehicleModelBudget = setReduceVehicleModelBudget;
    /**
     * No comment provided
     *
     * Hash: 0x40AEFD1A244741F2 | Since: 323
     */
    function setRenderHdOnly(toggle) {
        SetRenderHdOnly(toggle);
    }
    streaming.setRenderHdOnly = setRenderHdOnly;
    /**
     * No comment provided
     *
     * Hash: 0x0811381EF5062FEC | Since: 323
     */
    function setRestoreFocusEntity(p0) {
        Citizen.invokeNative('0x0811381EF5062FEC', p0);
    }
    streaming.setRestoreFocusEntity = setRestoreFocusEntity;
    /**
     * No comment provided
     *
     * Hash: 0x1E9057A74FD73E23 | Since: 323
     */
    function setSceneTracksCamPosThisFrame() {
        Citizen.invokeNative('0x1E9057A74FD73E23');
    }
    streaming.setSceneTracksCamPosThisFrame = setSceneTracksCamPosThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xF8155A7F03DDFC8E | Since: 323
     */
    function setSrlForcePrestream() {
        Citizen.invokeNative('0xF8155A7F03DDFC8E', undefined);
    }
    streaming.setSrlForcePrestream = setSrlForcePrestream;
    /**
     * No comment provided
     *
     * Hash: 0x20C6C7E4EB082A7F | Since: 323
     */
    function setSrlLongJumpMode() {
        Citizen.invokeNative('0x20C6C7E4EB082A7F', false);
    }
    streaming.setSrlLongJumpMode = setSrlLongJumpMode;
    /**
     * No comment provided
     *
     * Hash: 0xEF39EE20C537E98C | Since: 323
     */
    function setSrlPostCutsceneCamera() {
        Citizen.invokeNative('0xEF39EE20C537E98C', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    streaming.setSrlPostCutsceneCamera = setSrlPostCutsceneCamera;
    /**
     * No comment provided
     *
     * Hash: 0xBEB2D9A1D9A8F55A | Since: 323
     */
    function setSrlReadaheadTimes() {
        Citizen.invokeNative('0xBEB2D9A1D9A8F55A', undefined, undefined, undefined, undefined);
    }
    streaming.setSrlReadaheadTimes = setSrlReadaheadTimes;
    /**
     * No comment provided
     *
     * Hash: 0xA74A541C6884E7B8 | Since: 323
     */
    function setSrlTime() {
        SetSrlTime(0);
    }
    streaming.setSrlTime = setSrlTime;
    /**
     * No comment provided
     *
     * Hash: 0x6E0C692677008888 | Since: 323
     */
    function setStreaming(toggle) {
        SetStreaming(toggle);
    }
    streaming.setStreaming = setStreaming;
    /**
     * No comment provided
     *
     * Hash: 0xCB9E1EB3BE2AF4E9 | Since: 323
     */
    function setVehiclePopulationBudget() {
        SetVehiclePopulationBudget(0);
    }
    streaming.setVehiclePopulationBudget = setVehiclePopulationBudget;
    /**
     * No comment provided
     *
     * Hash: 0xCCE26000E9A6FAD7 | Since: 323
     */
    function shutdownCreatorBudget() {
        ShutdownCreatorBudget();
    }
    streaming.shutdownCreatorBudget = shutdownCreatorBudget;
    /**
     * // this enum comes directly from R* so don't edit this
     * enum ePlayerSwitchTypes
     * {
     * SWITCH_TYPE_AUTO,
     * SWITCH_TYPE_LONG,
     * SWITCH_TYPE_MEDIUM,
     * SWITCH_TYPE_SHORT
     * };
     *
     * Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
     *
     * ----------------------------------------------------
     *
     * Examples from the decompiled scripts:
     *
     * `STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);`
     * `STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);`
     * `STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);`
     * `STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);`
     *
     * Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
     *
     * Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
     * Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
     *
     * Hash: 0xFAA23F2CBA159D67 | Since: 323
     */
    function startPlayerSwitch(_from, to, flags, switchType) {
        StartPlayerSwitch(_from, to, flags, switchType);
    }
    streaming.startPlayerSwitch = startPlayerSwitch;
    /**
     * No comment provided
     *
     * Hash: 0x95C0A5BBDC189AA1 | Since: 323
     */
    function stopPlayerSwitch() {
        StopPlayerSwitch();
    }
    streaming.stopPlayerSwitch = stopPlayerSwitch;
    /**
     * Always returns zero.
     *
     * Hash: 0x1F3F018BC3AFA77C | Since: 323
     */
    function streamvolCreateFrustum() {
        return StreamvolCreateFrustum(0, 0, 0, 0, 0, 0, 0, undefined, undefined);
    }
    streaming.streamvolCreateFrustum = streamvolCreateFrustum;
    /**
     * Always returns zero.
     *
     * Hash: 0x0AD9710CEE2F590F | Since: 323
     */
    function streamvolCreateLine() {
        return StreamvolCreateLine(0, 0, 0, 0, 0, 0, undefined);
    }
    streaming.streamvolCreateLine = streamvolCreateLine;
    /**
     * Always returns zero.
     *
     * Hash: 0x219C7B8D53E429FD | Since: 323
     */
    function streamvolCreateSphere(pos, rad) {
        return StreamvolCreateSphere(pos.x, pos.y, pos.z, rad, undefined, undefined);
    }
    streaming.streamvolCreateSphere = streamvolCreateSphere;
    /**
     * No comment provided
     *
     * Hash: 0x1EE7D8DF4425F053 | Since: 323
     */
    function streamvolDelete(unused) {
        StreamvolDelete(unused);
    }
    streaming.streamvolDelete = streamvolDelete;
    /**
     * No comment provided
     *
     * Hash: 0x7D41E9D2D17C5B2D | Since: 323
     */
    function streamvolHasLoaded(unused) {
        return StreamvolHasLoaded(unused);
    }
    streaming.streamvolHasLoaded = streamvolHasLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x07C313F94746702C | Since: 323
     */
    function streamvolIsValid(unused) {
        return StreamvolIsValid(unused);
    }
    streaming.streamvolIsValid = streamvolIsValid;
    /**
     * No comment provided
     *
     * Hash: 0x472397322E92A856 | Since: 323
     */
    function suppressHdMapThisFrame() {
        Citizen.invokeNative('0x472397322E92A856');
    }
    streaming.suppressHdMapThisFrame = suppressHdMapThisFrame;
    /**
     * doesn't act normally when used on mount chilliad
     * Flags is a bitflag:
     * 2^n - Enabled Functionality:
     * 0 - Skip camera rotate up
     * 3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
     * 6 - Invert Switch Direction (false = out, true = in)
     * 8 - Hang above ped
     *
     * switchType: 0 - 3
     * 0: 1 step towards ped
     * 1: 3 steps out from ped
     * 2: 1 step out from ped
     * 3: 1 step towards ped
     *
     * Hash: 0xAAB3200ED59016BC | Since: 323
     */
    function switchToMultiFirstpart(ped, flags, switchType) {
        SwitchToMultiFirstpart(ped, flags, switchType);
    }
    streaming.switchToMultiFirstpart = switchToMultiFirstpart;
    /**
     * No comment provided
     *
     * Hash: 0xD8295AF639FD9CB8 | Since: 323
     */
    function switchToMultiSecondpart(ped) {
        SwitchToMultiSecondpart(ped);
    }
    streaming.switchToMultiSecondpart = switchToMultiSecondpart;
})(streaming || (streaming = {}));
export var track;
(function (track_1) {
    /**
     * Returns all track junctions on the client
     * The data returned adheres to the following structure:
     *
     * ```
     * [1, 2, 4, 6, 69, 420]
     * ```
     *
     * Hash: 0x81A08523 | Since: unknown
     */
    function getAllJunctions() {
        return Citizen.invokeNative('0x81A08523');
    }
    track_1.getAllJunctions = getAllJunctions;
    /**
     * Get all track nodes and their track ids within the radius of the specified coordinates.
     *
     * Hash: 0x59FC24A7 | Since: unknown
     */
    function getClosestNodes(position, radius) {
        return Citizen.invokeNative('0x59FC24A7', position, radius);
    }
    track_1.getClosestNodes = getClosestNodes;
    /**
     * No comment provided
     *
     * Hash: 0xBF482A5E | Since: unknown
     */
    function getBrakingDistance(track) {
        return Citizen.invokeNative('0xBF482A5E', track);
    }
    track_1.getBrakingDistance = getBrakingDistance;
    /**
     * No comment provided
     *
     * Hash: 0x34EE2BF3 | Since: unknown
     */
    function getMaxSpeed(track) {
        return Citizen.invokeNative('0x34EE2BF3', track);
    }
    track_1.getMaxSpeed = getMaxSpeed;
    /**
     * Gets the coordinates of a specific track node.
     *
     * Hash: 0x1628548E | Since: unknown
     */
    function getNodeCoords(trackIndex, trackNode) {
        return Citizen.invokeNative('0x1628548E', trackIndex, trackNode);
    }
    track_1.getNodeCoords = getNodeCoords;
    /**
     * Gets the specified tracks node count.
     *
     * Hash: 0x896A0C11 | Since: unknown
     */
    function getNodeCount(trackIndex) {
        return Citizen.invokeNative('0x896A0C11', trackIndex);
    }
    track_1.getNodeCount = getNodeCount;
    /**
     * Getter for [SET_TRACK_ENABLED](#\_0x4B41E84C)
     *
     * Hash: 0x31E695CB | Since: unknown
     */
    function isEnabled(track) {
        return Citizen.invokeNative('0x31E695CB', track);
    }
    track_1.isEnabled = isEnabled;
    /**
     * Getter for [SWITCH_TRAIN_TRACK](#\_0xFD813BB7DB977F20). Determines if ambient trains are able to spawn on this track.
     *
     * Hash: 0xE0C53765 | Since: unknown
     */
    function isSwitchedOff(track) {
        return Citizen.invokeNative('0xE0C53765', track);
    }
    track_1.isSwitchedOff = isSwitchedOff;
    /**
     * Registers a track junction that when enabled will cause a train on the defined trackIndex, node and direction to change its current track index and begin traveling on the new node
     *
     * Hash: 0x35F743B5 | Since: unknown
     */
    function registerJunction(trackIndex, trackNode, newIndex, newNode, direction) {
        return Citizen.invokeNative('0x35F743B5', trackIndex, trackNode, newIndex, newNode, direction);
    }
    track_1.registerJunction = registerJunction;
    /**
     * Removes the specified track junction.
     *
     * Hash: 0x4F3D2B2A | Since: unknown
     */
    function removeJunction(junctionIndex) {
        return Citizen.invokeNative('0x4F3D2B2A', junctionIndex);
    }
    track_1.removeJunction = removeJunction;
    /**
     * Sets the braking distance of the track. Used by trains to determine the point to slow down when entering a station.
     *
     * Hash: 0x77EB78D0 | Since: unknown
     */
    function setBrakingDistance(track, brakingDistance) {
        Citizen.invokeNative('0x77EB78D0', track, brakingDistance);
    }
    track_1.setBrakingDistance = setBrakingDistance;
    /**
     * Toggles the track being active. If disabled mission trains will not be able to spawn on this track and will look for the next closest track to spawn
     *
     * Hash: 0x4B41E84C | Since: unknown
     */
    function setEnabled(track, enabled) {
        Citizen.invokeNative('0x4B41E84C', track, enabled);
    }
    track_1.setEnabled = setEnabled;
    /**
     * Sets the state of a track junction.
     *
     * Hash: 0x537B449D | Since: unknown
     */
    function setJunctionActive(junctionIndex, state) {
        return Citizen.invokeNative('0x537B449D', junctionIndex, state);
    }
    track_1.setJunctionActive = setJunctionActive;
    /**
     * Sets the max speed for the train tracks. Used by ambient trains and for station calculations
     *
     * Hash: 0x37BFC732 | Since: unknown
     */
    function setMaxSpeed(track, newSpeed) {
        Citizen.invokeNative('0x37BFC732', track, newSpeed);
    }
    track_1.setMaxSpeed = setMaxSpeed;
})(track || (track = {}));
export var vehicle;
(function (vehicle_1) {
    /**
     * Break off vehicle wheel by index. The `leaveDebrisTrail` flag requires `putOnFire` to be true.
     *
     * Hash: 0xA274CADB | Since: unknown
     */
    function breakOffWheel(vehicle, wheelIndex, leaveDebrisTrail, deleteWheel, unknownFlag, putOnFire) {
        Citizen.invokeNative('0xA274CADB', vehicle, wheelIndex, leaveDebrisTrail, deleteWheel, unknownFlag, putOnFire);
    }
    vehicle_1.breakOffWheel = breakOffWheel;
    /**
     * Removes vehicle xenon lights custom RGB color.
     *
     * Hash: 0x2867ED8C | Since: unknown
     */
    function clearXenonLightsCustomColor(vehicle) {
        Citizen.invokeNative('0x2867ED8C', vehicle);
    }
    vehicle_1.clearXenonLightsCustomColor = clearXenonLightsCustomColor;
    /**
     * Disables the game's afk camera that starts panning around after 30 seconds of inactivity(While riding in a car as a passenger)
     *
     * Hash: 0x5C140555 | Since: unknown
     */
    function disablePassengerIdleCamera(state) {
        Citizen.invokeNative('0x5C140555', state);
    }
    vehicle_1.disablePassengerIdleCamera = disablePassengerIdleCamera;
    /**
     * Checks whether the vehicle consumes fuel. The check is done based on petrol tank volume and vehicle type. Bicycles and vehicles with petrol tank volume equal to zero (only bicycles by default) do not use fuel. All other vehicles do.
     *
     * You can customize petrol tank volume using [`SET_HANDLING_FLOAT`](#\_0x90DD01C)/[`SET_VEHICLE_HANDLING_FLOAT`](#\_0x488C86D2) natives with `fieldName` equal to `fPetrolTankVolume`.
     *
     * Hash: 0xEF30A696 | Since: unknown
     */
    function doesUseFuel(vehicle) {
        return Citizen.invokeNative('0xEF30A696', vehicle);
    }
    vehicle_1.doesUseFuel = doesUseFuel;
    /**
     * Returns all registered vehicle model names, including non-dlc vehicles and custom vehicles in no particular order.
     *
     * <strong>Example output</strong>
     *
     * ```
     * ["dubsta", "dubsta2", "dubsta3", "myverycoolcar", "sultan", "sultanrs", ...]
     * ```
     *
     * This native will not return vehicles that are unregistered (i.e from a resource being stopped) during runtime.
     *
     * Hash: 0xD7531645 | Since: unknown
     */
    function getAllModels() {
        return Citizen.invokeNative('0xD7531645');
    }
    vehicle_1.getAllModels = getAllModels;
    /**
     * A getter for [SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME](#\_0x90B6DA738A9A25DA).
     *
     * Hash: 0x667EC929 | Since: unknown
     */
    function getAmbientRangeMultiplier() {
        return Citizen.invokeNative('0x667EC929');
    }
    vehicle_1.getAmbientRangeMultiplier = getAmbientRangeMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xE015E854 | Since: unknown
     */
    function getTrainCurrentTrackNode(train) {
        return Citizen.invokeNative('0xE015E854', train);
    }
    vehicle_1.getTrainCurrentTrackNode = getTrainCurrentTrackNode;
    /**
     * Gets the door count for the specified train.
     *
     * Hash: 0x99974721 | Since: unknown
     */
    function getTrainDoorCount(train) {
        return Citizen.invokeNative('0x99974721', train);
    }
    vehicle_1.getTrainDoorCount = getTrainDoorCount;
    /**
     * Gets the ratio that a door is open for on a train.
     *
     * Hash: 0x40B16551 | Since: unknown
     */
    function getTrainDoorOpenRatio(train, doorIndex) {
        return Citizen.invokeNative('0x40B16551', train, doorIndex);
    }
    vehicle_1.getTrainDoorOpenRatio = getTrainDoorOpenRatio;
    /**
     * Gets the speed the train is currently going.
     *
     * Hash: 0x428668B7 | Since: unknown
     */
    function getTrainSpeed(train) {
        return Citizen.invokeNative('0x428668B7', train);
    }
    vehicle_1.getTrainSpeed = getTrainSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xC62AAC98 | Since: unknown
     */
    function getAlarmTimeLeft(vehicle) {
        return Citizen.invokeNative('0xC62AAC98', vehicle);
    }
    vehicle_1.getAlarmTimeLeft = getAlarmTimeLeft;
    /**
     * A getter for [SET_VEHICLE_CHEAT_POWER_INCREASE](#\_0xB59E4BD37AE292DB).
     *
     * Hash: 0xC3C93F28 | Since: unknown
     */
    function getCheatPowerIncrease(vehicle) {
        return Citizen.invokeNative('0xC3C93F28', vehicle);
    }
    vehicle_1.getCheatPowerIncrease = getCheatPowerIncrease;
    /**
     * No comment provided
     *
     * Hash: 0x1DAD4583 | Since: unknown
     */
    function getClutch(vehicle) {
        return Citizen.invokeNative('0x1DAD4583', vehicle);
    }
    vehicle_1.getClutch = getClutch;
    /**
     * No comment provided
     *
     * Hash: 0xB4F4E566 | Since: unknown
     */
    function getCurrentGear(vehicle) {
        return Citizen.invokeNative('0xB4F4E566', vehicle);
    }
    vehicle_1.getCurrentGear = getCurrentGear;
    /**
     * No comment provided
     *
     * Hash: 0xE7B12B54 | Since: unknown
     */
    function getCurrentRpm(vehicle) {
        return Citizen.invokeNative('0xE7B12B54', vehicle);
    }
    vehicle_1.getCurrentRpm = getCurrentRpm;
    /**
     * No comment provided
     *
     * Hash: 0xDFFABA2A | Since: unknown
     */
    function getDashboardBoost() {
        return Citizen.invokeNative('0xDFFABA2A');
    }
    vehicle_1.getDashboardBoost = getDashboardBoost;
    /**
     * Retrieves the current gear displayed on the dashboard of the vehicle the player is in, returned as a float. This value represents the gear shown in the instrument cluster, such as "R" (0.0) or positive values (e.g., 1.0, 2.0, etc.) for drive gears.
     *
     * Hash: 0x435C86F4 | Since: unknown
     */
    function getDashboardCurrentGear() {
        return Citizen.invokeNative('0x435C86F4');
    }
    vehicle_1.getDashboardCurrentGear = getDashboardCurrentGear;
    /**
     * No comment provided
     *
     * Hash: 0x19B0B2CE | Since: unknown
     */
    function getDashboardFuel() {
        return Citizen.invokeNative('0x19B0B2CE');
    }
    vehicle_1.getDashboardFuel = getDashboardFuel;
    /**
     * Gets the state of the player vehicle's dashboard lights as a bit set
     * indicator_left = 1
     * indicator_right = 2
     * handbrakeLight = 4
     * engineLight = 8
     * ABSLight = 16
     * gasLight = 32
     * oilLight = 64
     * headlights = 128
     * highBeam = 256
     * batteryLight = 512
     *
     * Hash: 0x500FFE9D | Since: unknown
     */
    function getDashboardLights() {
        return Citizen.invokeNative('0x500FFE9D');
    }
    vehicle_1.getDashboardLights = getDashboardLights;
    /**
     * No comment provided
     *
     * Hash: 0x3856D767 | Since: unknown
     */
    function getDashboardOilPressure() {
        return Citizen.invokeNative('0x3856D767');
    }
    vehicle_1.getDashboardOilPressure = getDashboardOilPressure;
    /**
     * No comment provided
     *
     * Hash: 0x1F5996AA | Since: unknown
     */
    function getDashboardOilTemp() {
        return Citizen.invokeNative('0x1F5996AA');
    }
    vehicle_1.getDashboardOilTemp = getDashboardOilTemp;
    /**
     * No comment provided
     *
     * Hash: 0xF9716A11 | Since: unknown
     */
    function getDashboardRpm() {
        return Citizen.invokeNative('0xF9716A11');
    }
    vehicle_1.getDashboardRpm = getDashboardRpm;
    /**
     * No comment provided
     *
     * Hash: 0x9AAD420E | Since: unknown
     */
    function getDashboardSpeed(vehicle) {
        return Citizen.invokeNative('0x9AAD420E', vehicle);
    }
    vehicle_1.getDashboardSpeed = getDashboardSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x6B6ADAFA | Since: unknown
     */
    function getDashboardTemp() {
        return Citizen.invokeNative('0x6B6ADAFA');
    }
    vehicle_1.getDashboardTemp = getDashboardTemp;
    /**
     * No comment provided
     *
     * Hash: 0xFABE67A9 | Since: unknown
     */
    function getDashboardVacuum() {
        return Citizen.invokeNative('0xFABE67A9');
    }
    vehicle_1.getDashboardVacuum = getDashboardVacuum;
    /**
     * A getter for [SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\_0x245A6883D966D537).
     *
     * Hash: 0xEF7C6538 | Since: unknown
     */
    function getDensityMultiplier() {
        return Citizen.invokeNative('0xEF7C6538');
    }
    vehicle_1.getDensityMultiplier = getDensityMultiplier;
    /**
     * Gets a vehicle's multiplier used with a wheel's GET_VEHICLE_WHEEL_STEERING_ANGLE to determine the angle the wheel is rendered.
     *
     * Hash: 0x21C1DA8E | Since: unknown
     */
    function getDrawnWheelAngleMult(vehicle) {
        return Citizen.invokeNative('0x21C1DA8E', vehicle);
    }
    vehicle_1.getDrawnWheelAngleMult = getDrawnWheelAngleMult;
    /**
     * No comment provided
     *
     * Hash: 0xF4F495CB | Since: unknown
     */
    function getEngineTemperature(vehicle) {
        return Citizen.invokeNative('0xF4F495CB', vehicle);
    }
    vehicle_1.getEngineTemperature = getEngineTemperature;
    /**
     * No comment provided
     *
     * Hash: 0x5F739BB8 | Since: unknown
     */
    function getFuelLevel(vehicle) {
        return Citizen.invokeNative('0x5F739BB8', vehicle);
    }
    vehicle_1.getFuelLevel = getFuelLevel;
    /**
     * Gets vehicles gear ratio on choosen gear.
     *
     * Hash: 0x82E794B7 | Since: unknown
     */
    function getGearRatio(vehicle, gear) {
        return Citizen.invokeNative('0x82E794B7', vehicle, gear);
    }
    vehicle_1.getGearRatio = getGearRatio;
    /**
     * No comment provided
     *
     * Hash: 0xB48A1292 | Since: unknown
     */
    function getGravityAmount(vehicle) {
        return Citizen.invokeNative('0xB48A1292', vehicle);
    }
    vehicle_1.getGravityAmount = getGravityAmount;
    /**
     * Returns the effective handling data of a vehicle as a floating-point value.
     * Example: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`
     *
     * Hash: 0x642FC12F | Since: unknown
     */
    function getHandlingFloat(vehicle, class_, fieldName) {
        return Citizen.invokeNative('0x642FC12F', vehicle, class_, fieldName);
    }
    vehicle_1.getHandlingFloat = getHandlingFloat;
    /**
     * Returns the effective handling data of a vehicle as an integer value.
     * Example: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`
     *
     * Hash: 0x27396C75 | Since: unknown
     */
    function getHandlingInt(vehicle, class_, fieldName) {
        return Citizen.invokeNative('0x27396C75', vehicle, class_, fieldName);
    }
    vehicle_1.getHandlingInt = getHandlingInt;
    /**
     * Returns the effective handling data of a vehicle as a vector value.
     * Example: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`
     *
     * Hash: 0xFB341304 | Since: unknown
     */
    function getHandlingVector(vehicle, class_, fieldName) {
        return new Vector3(Citizen.invokeNative('0xFB341304', vehicle, class_, fieldName));
    }
    vehicle_1.getHandlingVector = getHandlingVector;
    /**
     * No comment provided
     *
     * Hash: 0xF1D1D689 | Since: unknown
     */
    function getHighGear(vehicle) {
        return Citizen.invokeNative('0xF1D1D689', vehicle);
    }
    vehicle_1.getHighGear = getHighGear;
    /**
     * Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both
     *
     * Hash: 0x83070354 | Since: unknown
     */
    function getIndicatorLights(vehicle) {
        return Citizen.invokeNative('0x83070354', vehicle);
    }
    vehicle_1.getIndicatorLights = getIndicatorLights;
    /**
     * No comment provided
     *
     * Hash: 0x7E6E219C | Since: unknown
     */
    function getLightMultiplier(vehicle) {
        return Citizen.invokeNative('0x7E6E219C', vehicle);
    }
    vehicle_1.getLightMultiplier = getLightMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xDDB298AE | Since: unknown
     */
    function getNextGear(vehicle) {
        return Citizen.invokeNative('0xDDB298AE', vehicle);
    }
    vehicle_1.getNextGear = getNextGear;
    /**
     * No comment provided
     *
     * Hash: 0xEDF4B0FC | Since: unknown
     */
    function getNumberOfWheels(vehicle) {
        return Citizen.invokeNative('0xEDF4B0FC', vehicle);
    }
    vehicle_1.getNumberOfWheels = getNumberOfWheels;
    /**
     * No comment provided
     *
     * Hash: 0xFC7F8EF4 | Since: unknown
     */
    function getOilLevel(vehicle) {
        return Citizen.invokeNative('0xFC7F8EF4', vehicle);
    }
    vehicle_1.getOilLevel = getOilLevel;
    /**
     * No comment provided
     *
     * Hash: 0x954465DE | Since: unknown
     */
    function getSteeringScale(vehicle) {
        return Citizen.invokeNative('0x954465DE', vehicle);
    }
    vehicle_1.getSteeringScale = getSteeringScale;
    /**
     * No comment provided
     *
     * Hash: 0xD1D07351 | Since: unknown
     */
    function getThrottleOffset(vehicle) {
        return Citizen.invokeNative('0xD1D07351', vehicle);
    }
    vehicle_1.getThrottleOffset = getThrottleOffset;
    /**
     * A getter for [MODIFY_VEHICLE_TOP_SPEED](#\_0x93A3996368C94158). Returns -1.0 if a modifier is not set.
     *
     * Hash: 0x998B7FEE | Since: unknown
     */
    function getTopSpeedModifier(vehicle) {
        return Citizen.invokeNative('0x998B7FEE', vehicle);
    }
    vehicle_1.getTopSpeedModifier = getTopSpeedModifier;
    /**
     * No comment provided
     *
     * Hash: 0xE02B51D7 | Since: unknown
     */
    function getTurboPressure(vehicle) {
        return Citizen.invokeNative('0xE02B51D7', vehicle);
    }
    vehicle_1.getTurboPressure = getTurboPressure;
    /**
     * List of known states:
     *
     * ```
     * 1: Not wheeling.
     * 65: Vehicle is ready to do wheelie (burnouting).
     * 129: Vehicle is doing wheelie.
     * ```
     *
     * Hash: 0x137260D1 | Since: unknown
     */
    function getWheelieState(vehicle) {
        return Citizen.invokeNative('0x137260D1', vehicle);
    }
    vehicle_1.getWheelieState = getWheelieState;
    /**
     * Gets brake pressure of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * Normal values around 1.0f when braking.
     *
     * Hash: 0x70FE2EFF | Since: unknown
     */
    function getWheelBrakePressure(vehicle, wheelIndex) {
        return Citizen.invokeNative('0x70FE2EFF', vehicle, wheelIndex);
    }
    vehicle_1.getWheelBrakePressure = getWheelBrakePressure;
    /**
     * Gets the flags of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xC70FA0C7 | Since: unknown
     */
    function getWheelFlags(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xC70FA0C7', vehicle, wheelIndex);
    }
    vehicle_1.getWheelFlags = getWheelFlags;
    /**
     * No comment provided
     *
     * Hash: 0x54A677F5 | Since: unknown
     */
    function getWheelHealth(vehicle, wheelIndex) {
        return Citizen.invokeNative('0x54A677F5', vehicle, wheelIndex);
    }
    vehicle_1.getWheelHealth = getWheelHealth;
    /**
     * Gets whether the wheel is powered.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * This is a shortcut to a flag in GET_VEHICLE_WHEEL_FLAGS.
     *
     * Hash: 0x3CCF1B49 | Since: unknown
     */
    function getWheelIsPowered(vehicle, wheelIndex) {
        return Citizen.invokeNative('0x3CCF1B49', vehicle, wheelIndex);
    }
    vehicle_1.getWheelIsPowered = getWheelIsPowered;
    /**
     * Gets power being sent to a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xD203287 | Since: unknown
     */
    function getWheelPower(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xD203287', vehicle, wheelIndex);
    }
    vehicle_1.getWheelPower = getWheelPower;
    /**
     * No comment provided
     *
     * Hash: 0xCEE21AB2 | Since: unknown
     */
    function getWheelRimColliderSize(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xCEE21AB2', vehicle, wheelIndex);
    }
    vehicle_1.getWheelRimColliderSize = getWheelRimColliderSize;
    /**
     * Gets the rotation speed of a wheel.
     * This is used internally to calcuate GET_VEHICLE_WHEEL_SPEED.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xEA1859E5 | Since: unknown
     */
    function getWheelRotationSpeed(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xEA1859E5', vehicle, wheelIndex);
    }
    vehicle_1.getWheelRotationSpeed = getWheelRotationSpeed;
    /**
     * Returns vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels (returns 0 in case of default wheels).
     *
     * Hash: 0x4046B66 | Since: unknown
     */
    function getWheelSize(vehicle) {
        return Citizen.invokeNative('0x4046B66', vehicle);
    }
    vehicle_1.getWheelSize = getWheelSize;
    /**
     * Gets speed of a wheel at the tyre.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x149C9DA0 | Since: unknown
     */
    function getWheelSpeed(vehicle, wheelIndex) {
        return Citizen.invokeNative('0x149C9DA0', vehicle, wheelIndex);
    }
    vehicle_1.getWheelSpeed = getWheelSpeed;
    /**
     * Gets steering angle of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xA0867448 | Since: unknown
     */
    function getWheelSteeringAngle(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xA0867448', vehicle, wheelIndex);
    }
    vehicle_1.getWheelSteeringAngle = getWheelSteeringAngle;
    /**
     * No comment provided
     *
     * Hash: 0xA7F04022 | Since: unknown
     */
    function getWheelSurfaceMaterial(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xA7F04022', vehicle, wheelIndex);
    }
    vehicle_1.getWheelSurfaceMaterial = getWheelSurfaceMaterial;
    /**
     * Gets the current suspension compression of a wheel.
     * Returns a positive value. 0 means the suspension is fully extended, the wheel is off the ground.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x2B48175B | Since: unknown
     */
    function getWheelSuspensionCompression(vehicle, wheelIndex) {
        return Citizen.invokeNative('0x2B48175B', vehicle, wheelIndex);
    }
    vehicle_1.getWheelSuspensionCompression = getWheelSuspensionCompression;
    /**
     * No comment provided
     *
     * Hash: 0xE0BA9FE6 | Since: unknown
     */
    function getWheelTireColliderSize(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xE0BA9FE6', vehicle, wheelIndex);
    }
    vehicle_1.getWheelTireColliderSize = getWheelTireColliderSize;
    /**
     * No comment provided
     *
     * Hash: 0xEF65929C | Since: unknown
     */
    function getWheelTireColliderWidth(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xEF65929C', vehicle, wheelIndex);
    }
    vehicle_1.getWheelTireColliderWidth = getWheelTireColliderWidth;
    /**
     * Gets the traction vector length of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x3BCFEE14 | Since: unknown
     */
    function getWheelTractionVectorLength(vehicle, wheelIndex) {
        return Citizen.invokeNative('0x3BCFEE14', vehicle, wheelIndex);
    }
    vehicle_1.getWheelTractionVectorLength = getWheelTractionVectorLength;
    /**
     * Returns vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels (returns 0 in case of default wheels).
     *
     * Hash: 0x9C7B59F9 | Since: unknown
     */
    function getWheelWidth(vehicle) {
        return Citizen.invokeNative('0x9C7B59F9', vehicle);
    }
    vehicle_1.getWheelWidth = getWheelWidth;
    /**
     * Returns the offset of the specified wheel relative to the wheel's axle center.
     *
     * Hash: 0xCC90CBCA | Since: unknown
     */
    function getWheelXOffset(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xCC90CBCA', vehicle, wheelIndex);
    }
    vehicle_1.getWheelXOffset = getWheelXOffset;
    /**
     * No comment provided
     *
     * Hash: 0x2EA4AFFE | Since: unknown
     */
    function getWheelYRotation(vehicle, wheelIndex) {
        return Citizen.invokeNative('0x2EA4AFFE', vehicle, wheelIndex);
    }
    vehicle_1.getWheelYRotation = getWheelYRotation;
    /**
     * Returns vehicle xenon lights custom RGB color values. Do note this native doesn't return non-RGB colors that was set with [\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\_0xE41033B25D003A07).
     *
     * Hash: 0xC715F730 | Since: unknown
     */
    function getXenonLightsCustomColor(vehicle) {
        return Citizen.invokeNative('0xC715F730', vehicle);
    }
    vehicle_1.getXenonLightsCustomColor = getXenonLightsCustomColor;
    /**
     * A getter for [SET_VEHICLE_XMAS_SNOW_FACTOR](#\_0x80CC4C9E).
     *
     * Hash: 0x16605B30 | Since: unknown
     */
    function getXmasSnowFactor() {
        return Citizen.invokeNative('0x16605B30');
    }
    vehicle_1.getXmasSnowFactor = getXmasSnowFactor;
    /**
     * No comment provided
     *
     * Hash: 0xDC921211 | Since: unknown
     */
    function isAlarmSet(vehicle) {
        return Citizen.invokeNative('0xDC921211', vehicle);
    }
    vehicle_1.isAlarmSet = isAlarmSet;
    /**
     * No comment provided
     *
     * Hash: 0xA411F72C | Since: unknown
     */
    function isInteriorLightOn(vehicle) {
        return Citizen.invokeNative('0xA411F72C', vehicle);
    }
    vehicle_1.isInteriorLightOn = isInteriorLightOn;
    /**
     * No comment provided
     *
     * Hash: 0xF9933BF4 | Since: unknown
     */
    function isNeedsToBeHotwired(vehicle) {
        return Citizen.invokeNative('0xF9933BF4', vehicle);
    }
    vehicle_1.isNeedsToBeHotwired = isNeedsToBeHotwired;
    /**
     * No comment provided
     *
     * Hash: 0xF849ED67 | Since: unknown
     */
    function isPreviouslyOwnedByPlayer(vehicle) {
        return Citizen.invokeNative('0xF849ED67', vehicle);
    }
    vehicle_1.isPreviouslyOwnedByPlayer = isPreviouslyOwnedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xA7DAF7C | Since: unknown
     */
    function isWanted(vehicle) {
        return Citizen.invokeNative('0xA7DAF7C', vehicle);
    }
    vehicle_1.isWanted = isWanted;
    /**
     * Setting the state to true and a value between 0 and 2 will cause pedestrian vehicles to react accordingly to sirens.
     *
     * ```cpp
     * enum Reactions {
     * Left = 0,
     * Right = 1,
     * Stop = 2
     * }
     * ```
     *
     * Hash: 0x3F3EB3F7 | Since: unknown
     */
    function overrideReactionToSiren(state, reaction) {
        Citizen.invokeNative('0x3F3EB3F7', state, reaction);
    }
    vehicle_1.overrideReactionToSiren = overrideReactionToSiren;
    /**
     * Overrides whether or not peds can stand on top of the specified vehicle.
     *
     * Note this flag is not replicated automatically, you will have to manually do so.
     *
     * Hash: 0x7FA03E76 | Since: unknown
     */
    function overridePedsCanStandOnTopFlag(vehicle, can) {
        Citizen.invokeNative('0x7FA03E76', vehicle, can);
    }
    vehicle_1.overridePedsCanStandOnTopFlag = overridePedsCanStandOnTopFlag;
    /**
     * Resets whether or not peds can stand on top of the specified vehicle.
     *
     * Note this flag is not replicated automatically, you will have to manually do so.
     *
     * Hash: 0xDF62CFE2 | Since: unknown
     */
    function resetPedsCanStandOnTopFlag(vehicle) {
        Citizen.invokeNative('0xDF62CFE2', vehicle);
    }
    vehicle_1.resetPedsCanStandOnTopFlag = resetPedsCanStandOnTopFlag;
    /**
     * Sets the default number plate text pattern for vehicles seen on the local client with the specified plate index as their *default* index (`plateProbabilities` from carvariations).
     *
     * For consistency, this should be used with the same value on all clients, since vehicles *without* custom text will use a seeded random number generator with this pattern to determine the default plate text.
     *
     * The default value is `11AAA111`, and using this or a NULL string will revert to the default game RNG.
     *
     * ### Pattern string format
     *
     * *   `1` will lead to a random number from 0-9.
     * *   `A` will lead to a random letter from A-Z.
     * *   `.` will lead to a random letter *or* number, with 50% probability of being either.
     * *   `^1` will lead to a literal `1` being emitted.
     * *   `^A` will lead to a literal `A` being emitted.
     * *   Any other character will lead to said character being emitted.
     * *   A string shorter than 8 characters will be padded on the right.
     *
     * Hash: 0x79780FD2 | Since: unknown
     */
    function setDefaultNumberPlateTextPattern(plateIndex, pattern) {
        Citizen.invokeNative('0x79780FD2', plateIndex, pattern);
    }
    vehicle_1.setDefaultNumberPlateTextPattern = setDefaultNumberPlateTextPattern;
    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     * Example: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0xFE8064E3 | Since: unknown
     */
    function setHandlingField(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0xFE8064E3', vehicle, class_, fieldName, value);
    }
    vehicle_1.setHandlingField = setHandlingField;
    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     * Example: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0x90DD01C | Since: unknown
     */
    function setHandlingFloat(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0x90DD01C', vehicle, class_, fieldName, value);
    }
    vehicle_1.setHandlingFloat = setHandlingFloat;
    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     *
     * Hash: 0x8AB3F46C | Since: unknown
     */
    function setHandlingInt(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0x8AB3F46C', vehicle, class_, fieldName, value);
    }
    vehicle_1.setHandlingInt = setHandlingInt;
    /**
     * Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
     * Example: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`
     *
     * Hash: 0x7F9D543 | Since: unknown
     */
    function setHandlingVector(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0x7F9D543', vehicle, class_, fieldName, value);
    }
    vehicle_1.setHandlingVector = setHandlingVector;
    /**
     * This completely disables pedestrian vehicles from reacting to sirens. They will not try to do any maneuver to evade.
     *
     * Hash: 0xB90BBC6E | Since: unknown
     */
    function setReactionToWithSirenDisabled(state) {
        Citizen.invokeNative('0xB90BBC6E', state);
    }
    vehicle_1.setReactionToWithSirenDisabled = setReactionToWithSirenDisabled;
    /**
     * Enables or disables whether train doors should be forced open whilst a player is inside the train. This is enabled by default in multiplayer.
     *
     * Hash: 0xD4D1BA63 | Since: unknown
     */
    function setTrainsForceDoorsOpen(forceOpen) {
        Citizen.invokeNative('0xD4D1BA63', forceOpen);
    }
    vehicle_1.setTrainsForceDoorsOpen = setTrainsForceDoorsOpen;
    /**
     * Sets the ratio that a door is open for on a train.
     *
     * Hash: 0x2468DBE8 | Since: unknown
     */
    function setTrainDoorOpenRatio(train, doorIndex, ratio) {
        Citizen.invokeNative('0x2468DBE8', train, doorIndex, ratio);
    }
    vehicle_1.setTrainDoorOpenRatio = setTrainDoorOpenRatio;
    /**
     * No comment provided
     *
     * Hash: 0x61CB74A0 | Since: unknown
     */
    function setTrainState(train, state) {
        Citizen.invokeNative('0x61CB74A0', train, state);
    }
    vehicle_1.setTrainState = setTrainState;
    /**
     * Toggles a train's ability to stop at stations
     *
     * Hash: 0xECB8B577 | Since: unknown
     */
    function setTrainStopAtStations(train, state) {
        Citizen.invokeNative('0xECB8B577', train, state);
    }
    vehicle_1.setTrainStopAtStations = setTrainStopAtStations;
    /**
     * No comment provided
     *
     * Hash: 0xC108EE6F | Since: unknown
     */
    function setAlarmTimeLeft(vehicle, time) {
        Citizen.invokeNative('0xC108EE6F', vehicle, time);
    }
    vehicle_1.setAlarmTimeLeft = setAlarmTimeLeft;
    /**
     * Disables the vehicle from being repaired when a vehicle extra is enabled.
     *
     * Hash: 0x5F3A3574 | Since: unknown
     */
    function setAutoRepairDisabled(vehicle, value) {
        Citizen.invokeNative('0x5F3A3574', vehicle, value);
    }
    vehicle_1.setAutoRepairDisabled = setAutoRepairDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x2F70ACED | Since: unknown
     */
    function setClutch(vehicle, clutch) {
        Citizen.invokeNative('0x2F70ACED', vehicle, clutch);
    }
    vehicle_1.setClutch = setClutch;
    /**
     * No comment provided
     *
     * Hash: 0x2A01A8FC | Since: unknown
     */
    function setCurrentRpm(vehicle, rpm) {
        Citizen.invokeNative('0x2A01A8FC', vehicle, rpm);
    }
    vehicle_1.setCurrentRpm = setCurrentRpm;
    /**
     * No comment provided
     *
     * Hash: 0x6C93C4A9 | Since: unknown
     */
    function setEngineTemperature(vehicle, temperature) {
        Citizen.invokeNative('0x6C93C4A9', vehicle, temperature);
    }
    vehicle_1.setEngineTemperature = setEngineTemperature;
    /**
     * No comment provided
     *
     * Hash: 0xBA970511 | Since: unknown
     */
    function setFuelLevel(vehicle, level) {
        Citizen.invokeNative('0xBA970511', vehicle, level);
    }
    vehicle_1.setFuelLevel = setFuelLevel;
    /**
     * Sets the vehicles gear ratio on choosen gear, reverse gear needs to be a negative float and forward moving gear needs to be a positive float. Refer to the examples if confused.
     *
     * Hash: 0x496EF2F2 | Since: unknown
     */
    function setGearRatio(vehicle, gear, ratio) {
        Citizen.invokeNative('0x496EF2F2', vehicle, gear, ratio);
    }
    vehicle_1.setGearRatio = setGearRatio;
    /**
     * No comment provided
     *
     * Hash: 0x1A963E58 | Since: unknown
     */
    function setGravityAmount(vehicle, gravity) {
        Citizen.invokeNative('0x1A963E58', vehicle, gravity);
    }
    vehicle_1.setGravityAmount = setGravityAmount;
    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation.
     * Example: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0x2BA40795 | Since: unknown
     */
    function setVehicleHandlingField(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0x2BA40795', vehicle, class_, fieldName, value);
    }
    vehicle_1.setVehicleHandlingField = setVehicleHandlingField;
    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation.
     * Example: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`
     *
     * Hash: 0x488C86D2 | Since: unknown
     */
    function setVehicleHandlingFloat(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0x488C86D2', vehicle, class_, fieldName, value);
    }
    vehicle_1.setVehicleHandlingFloat = setVehicleHandlingFloat;
    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation.
     *
     * Hash: 0xC37F4CF9 | Since: unknown
     */
    function setVehicleHandlingInt(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0xC37F4CF9', vehicle, class_, fieldName, value);
    }
    vehicle_1.setVehicleHandlingInt = setVehicleHandlingInt;
    /**
     * Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation.
     *
     * Hash: 0x12497890 | Since: unknown
     */
    function setVehicleHandlingVector(vehicle, class_, fieldName, value) {
        Citizen.invokeNative('0x12497890', vehicle, class_, fieldName, value);
    }
    vehicle_1.setVehicleHandlingVector = setVehicleHandlingVector;
    /**
     * No comment provided
     *
     * Hash: 0x20B1B3E6 | Since: unknown
     */
    function setHighGear(vehicle, gear) {
        Citizen.invokeNative('0x20B1B3E6', vehicle, gear);
    }
    vehicle_1.setHighGear = setHighGear;
    /**
     * Sets the maximum distance in which [\_SET_VEHICLE_NITRO_ENABLED](#\_0xC8E9B6B71B8E660D) PTFX are rendered. Distance is measured from the camera position.
     *
     * Hash: 0xA40CB822 | Since: unknown
     */
    function setNitroPtfxRange(range) {
        Citizen.invokeNative('0xA40CB822', range);
    }
    vehicle_1.setNitroPtfxRange = setNitroPtfxRange;
    /**
     * No comment provided
     *
     * Hash: 0x90D1CAD1 | Since: unknown
     */
    function setOilLevel(vehicle, level) {
        Citizen.invokeNative('0x90D1CAD1', vehicle, level);
    }
    vehicle_1.setOilLevel = setOilLevel;
    /**
     * Set the vehicle's pitch bias. Only works on planes.
     *
     * Hash: 0x2A6CC9F2 | Since: unknown
     */
    function setPitchBias(vehicle, value) {
        Citizen.invokeNative('0x2A6CC9F2', vehicle, value);
    }
    vehicle_1.setPitchBias = setPitchBias;
    /**
     * Set the vehicle's roll bias. Only works on planes.
     *
     * Hash: 0x264B45DE | Since: unknown
     */
    function setRollBias(vehicle, value) {
        Citizen.invokeNative('0x264B45DE', vehicle, value);
    }
    vehicle_1.setRollBias = setRollBias;
    /**
     * No comment provided
     *
     * Hash: 0xFFCCC2EA | Since: unknown
     */
    function setSteeringAngle(vehicle, angle) {
        Citizen.invokeNative('0xFFCCC2EA', vehicle, angle);
    }
    vehicle_1.setSteeringAngle = setSteeringAngle;
    /**
     * No comment provided
     *
     * Hash: 0xEB46596F | Since: unknown
     */
    function setSteeringScale(vehicle, scale) {
        Citizen.invokeNative('0xEB46596F', vehicle, scale);
    }
    vehicle_1.setSteeringScale = setSteeringScale;
    /**
     * Sets the height of the vehicle's suspension.
     * This changes the same value set by Suspension in the mod shop.
     * Negatives values raise the car. Positive values lower the car.
     *
     * This is change is visual only. The collision of the vehicle will not move.
     *
     * Hash: 0xB3439A01 | Since: unknown
     */
    function setSuspensionHeight(vehicle, newHeight) {
        Citizen.invokeNative('0xB3439A01', vehicle, newHeight);
    }
    vehicle_1.setSuspensionHeight = setSuspensionHeight;
    /**
     * No comment provided
     *
     * Hash: 0x6485615E | Since: unknown
     */
    function setTurboPressure(vehicle, pressure) {
        Citizen.invokeNative('0x6485615E', vehicle, pressure);
    }
    vehicle_1.setTurboPressure = setTurboPressure;
    /**
     * Example script: https://pastebin.com/J6XGbkCW
     *
     * List of known states:
     *
     * ```
     * 1: Not wheeling.
     * 65: Vehicle is ready to do wheelie (burnouting).
     * 129: Vehicle is doing wheelie.
     * ```
     *
     * Hash: 0xEAB8DB65 | Since: unknown
     */
    function setWheelieState(vehicle, state) {
        Citizen.invokeNative('0xEAB8DB65', vehicle, state);
    }
    vehicle_1.setWheelieState = setWheelieState;
    /**
     * Sets brake pressure of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * Normal values around 1.0f
     *
     * Hash: 0xE80F4E31 | Since: unknown
     */
    function setWheelBrakePressure(vehicle, wheelIndex, pressure) {
        Citizen.invokeNative('0xE80F4E31', vehicle, wheelIndex, pressure);
    }
    vehicle_1.setWheelBrakePressure = setWheelBrakePressure;
    /**
     * Sets the flags of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xD2B9E90D | Since: unknown
     */
    function setWheelFlags(vehicle, wheelIndex, flags) {
        Citizen.invokeNative('0xD2B9E90D', vehicle, wheelIndex, flags);
    }
    vehicle_1.setWheelFlags = setWheelFlags;
    /**
     * No comment provided
     *
     * Hash: 0xB22ECEFD | Since: unknown
     */
    function setWheelHealth(vehicle, wheelIndex, health) {
        Citizen.invokeNative('0xB22ECEFD', vehicle, wheelIndex, health);
    }
    vehicle_1.setWheelHealth = setWheelHealth;
    /**
     * Sets whether the wheel is powered.
     * On all wheel drive cars this works to change which wheels receive power, but if a car's fDriveBiasFront doesn't send power to that wheel, it won't get power anyway. This can be fixed by changing the fDriveBiasFront with SET_VEHICLE_HANDLING_FLOAT.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     * This is a shortcut to a flag in SET_VEHICLE_WHEEL_FLAGS.
     *
     * Hash: 0xBD5291A0 | Since: unknown
     */
    function setWheelIsPowered(vehicle, wheelIndex, powered) {
        Citizen.invokeNative('0xBD5291A0', vehicle, wheelIndex, powered);
    }
    vehicle_1.setWheelIsPowered = setWheelIsPowered;
    /**
     * Sets power being sent to a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0xC6146043 | Since: unknown
     */
    function setWheelPower(vehicle, wheelIndex, power) {
        Citizen.invokeNative('0xC6146043', vehicle, wheelIndex, power);
    }
    vehicle_1.setWheelPower = setWheelPower;
    /**
     * Not sure what this changes, probably determines physical rim size in case the tire is blown.
     *
     * Hash: 0xF380E184 | Since: unknown
     */
    function setWheelRimColliderSize(vehicle, wheelIndex, value) {
        Citizen.invokeNative('0xF380E184', vehicle, wheelIndex, value);
    }
    vehicle_1.setWheelRimColliderSize = setWheelRimColliderSize;
    /**
     * Sets the rotation speed of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x35ED100D | Since: unknown
     */
    function setWheelRotationSpeed(vehicle, wheelIndex, speed) {
        Citizen.invokeNative('0x35ED100D', vehicle, wheelIndex, speed);
    }
    vehicle_1.setWheelRotationSpeed = setWheelRotationSpeed;
    /**
     * Sets vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels.
     * Returns whether change was successful (can be false if trying to set size for non-default wheels).
     *
     * Hash: 0x53AB5C35 | Since: unknown
     */
    function setWheelSize(vehicle, size) {
        return Citizen.invokeNative('0x53AB5C35', vehicle, size);
    }
    vehicle_1.setWheelSize = setWheelSize;
    /**
     * Use along with SetVehicleWheelSize to resize the wheels (this native sets the collider size affecting physics while SetVehicleWheelSize will change visual size).
     *
     * Hash: 0xB962D05C | Since: unknown
     */
    function setWheelTireColliderSize(vehicle, wheelIndex, value) {
        Citizen.invokeNative('0xB962D05C', vehicle, wheelIndex, value);
    }
    vehicle_1.setWheelTireColliderSize = setWheelTireColliderSize;
    /**
     * Use along with SetVehicleWheelWidth to resize the wheels (this native sets the collider width affecting physics while SetVehicleWheelWidth will change visual width).
     *
     * Hash: 0x47BD0270 | Since: unknown
     */
    function setWheelTireColliderWidth(vehicle, wheelIndex, value) {
        Citizen.invokeNative('0x47BD0270', vehicle, wheelIndex, value);
    }
    vehicle_1.setWheelTireColliderWidth = setWheelTireColliderWidth;
    /**
     * Sets the traction vector length of a wheel.
     * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
     *
     * Hash: 0x85C85A3A | Since: unknown
     */
    function setWheelTractionVectorLength(vehicle, wheelIndex, length) {
        Citizen.invokeNative('0x85C85A3A', vehicle, wheelIndex, length);
    }
    vehicle_1.setWheelTractionVectorLength = setWheelTractionVectorLength;
    /**
     * Sets vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).
     * Only works on non-default wheels.
     * Returns whether change was successful (can be false if trying to set width for non-default wheels).
     *
     * Hash: 0x64C3F1C0 | Since: unknown
     */
    function setWheelWidth(vehicle, width) {
        return Citizen.invokeNative('0x64C3F1C0', vehicle, width);
    }
    vehicle_1.setWheelWidth = setWheelWidth;
    /**
     * Adjusts the offset of the specified wheel relative to the wheel's axle center.
     * Needs to be called every frame in order to function properly, as GTA will reset the offset otherwise.
     * This function can be especially useful to set the track width of a vehicle, for example:
     *
     * ```
     * function SetVehicleFrontTrackWidth(vehicle, width)
     * SetVehicleWheelXOffset(vehicle, 0, -width/2)
     * SetVehicleWheelXOffset(vehicle, 1, width/2)
     * end
     * ```
     *
     * Hash: 0xBD6357D | Since: unknown
     */
    function setWheelXOffset(vehicle, wheelIndex, offset) {
        Citizen.invokeNative('0xBD6357D', vehicle, wheelIndex, offset);
    }
    vehicle_1.setWheelXOffset = setWheelXOffset;
    /**
     * No comment provided
     *
     * Hash: 0xC6C2171F | Since: unknown
     */
    function setWheelYRotation(vehicle, wheelIndex, value) {
        Citizen.invokeNative('0xC6C2171F', vehicle, wheelIndex, value);
    }
    vehicle_1.setWheelYRotation = setWheelYRotation;
    /**
     * Sets custom vehicle xenon lights color, allowing to use RGB palette. The game will ignore lights color set by [\_SET_VEHICLE_XENON_LIGHTS_COLOR](#\_0xE41033B25D003A07) when custom color is active. This native is not synced between players. Requires xenon lights mod to be set on vehicle.
     *
     * Hash: 0x1683E7F0 | Since: unknown
     */
    function setXenonLightsCustomColor(vehicle, red, green, blue) {
        Citizen.invokeNative('0x1683E7F0', vehicle, red, green, blue);
    }
    vehicle_1.setXenonLightsCustomColor = setXenonLightsCustomColor;
    /**
     * No comment provided
     *
     * Hash: 0x80CC4C9E | Since: unknown
     */
    function setXmasSnowFactor(gripFactor) {
        Citizen.invokeNative('0x80CC4C9E', gripFactor);
    }
    vehicle_1.setXmasSnowFactor = setXmasSnowFactor;
    /**
     * **Note** This native will always return `1000.0` unless [SET_VEHICLE_BODY_HEALTH](#\_0xB77D05AC8C78AADB), [SET_VEHICLE_ENGINE_HEALTH](#\_0x45F6D8EEF34ABEF1), or [SET_VEHICLE_PETROL_TANK_HEALTH](#\_0x70DB57649FA8D0D8) have been called with a value greater than `1000.0`.
     *
     * Hash: 0xA886495D | Since: unknown
     */
    function getHeliBodyHealth(heli) {
        return Citizen.invokeNative('0xA886495D', heli);
    }
    vehicle_1.getHeliBodyHealth = getHeliBodyHealth;
    /**
     * This is a getter for [SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE](#\_0xEDBC8405B3895CC9)
     *
     * Hash: 0x82AFC0A3 | Since: unknown
     */
    function getHeliDisableExplodeFromBodyDamage(heli) {
        return Citizen.invokeNative('0x82AFC0A3', heli);
    }
    vehicle_1.getHeliDisableExplodeFromBodyDamage = getHeliDisableExplodeFromBodyDamage;
    /**
     * **Note** This native will always return `1000.0` unless [SET_VEHICLE_BODY_HEALTH](#\_0xB77D05AC8C78AADB), [SET_VEHICLE_ENGINE_HEALTH](#\_0x45F6D8EEF34ABEF1), or [SET_VEHICLE_PETROL_TANK_HEALTH](#\_0x70DB57649FA8D0D8) have been called with a value greater than `1000.0`.
     *
     * Hash: 0xA0FA0354 | Since: unknown
     */
    function getHeliEngineHealth(heli) {
        return Citizen.invokeNative('0xA0FA0354', heli);
    }
    vehicle_1.getHeliEngineHealth = getHeliEngineHealth;
    /**
     * **Note** This native will always return `1000.0` unless [SET_VEHICLE_BODY_HEALTH](#\_0xB77D05AC8C78AADB), [SET_VEHICLE_ENGINE_HEALTH](#\_0x45F6D8EEF34ABEF1), or [SET_VEHICLE_PETROL_TANK_HEALTH](#\_0x70DB57649FA8D0D8) have been called with a value greater than `1000.0`.
     *
     * Hash: 0xD4EC7858 | Since: unknown
     */
    function getHeliGasTankHealth(heli) {
        return Citizen.invokeNative('0xD4EC7858', heli);
    }
    vehicle_1.getHeliGasTankHealth = getHeliGasTankHealth;
    /**
     * No comment provided
     *
     * Hash: 0xC37D668 | Since: unknown
     */
    function getHeliMainRotorDamageScale(heli) {
        return Citizen.invokeNative('0xC37D668', heli);
    }
    vehicle_1.getHeliMainRotorDamageScale = getHeliMainRotorDamageScale;
    /**
     * No comment provided
     *
     * Hash: 0x1944AC95 | Since: unknown
     */
    function getHeliPitchControl(heli) {
        return Citizen.invokeNative('0x1944AC95', heli);
    }
    vehicle_1.getHeliPitchControl = getHeliPitchControl;
    /**
     * No comment provided
     *
     * Hash: 0xC40161E2 | Since: unknown
     */
    function getHeliRearRotorDamageScale(heli) {
        return Citizen.invokeNative('0xC40161E2', heli);
    }
    vehicle_1.getHeliRearRotorDamageScale = getHeliRearRotorDamageScale;
    /**
     * This native is a getter for [SET_HELI_TAIL_ROTOR_HEALTH](#\_0xFE205F38AAA58E5B)
     *
     * Hash: 0x33EE6E2B | Since: unknown
     */
    function getHeliRearRotorHealth(vehicle) {
        return Citizen.invokeNative('0x33EE6E2B', vehicle);
    }
    vehicle_1.getHeliRearRotorHealth = getHeliRearRotorHealth;
    /**
     * No comment provided
     *
     * Hash: 0x12948DE9 | Since: unknown
     */
    function getHeliRollControl(heli) {
        return Citizen.invokeNative('0x12948DE9', heli);
    }
    vehicle_1.getHeliRollControl = getHeliRollControl;
    /**
     * No comment provided
     *
     * Hash: 0x22239130 | Since: unknown
     */
    function getHeliTailRotorDamageScale(heli) {
        return Citizen.invokeNative('0x22239130', heli);
    }
    vehicle_1.getHeliTailRotorDamageScale = getHeliTailRotorDamageScale;
    /**
     * **Note**: This native is deprecated, please use [`GET_HELI_REAR_ROTOR_HEALTH`](#\_0x33EE6E2B) instead.
     *
     * Hash: 0xA41BC13D | Since: unknown
     */
    function getHeliTailRotorHealth(vehicle) {
        return Citizen.invokeNative('0xA41BC13D', vehicle);
    }
    vehicle_1.getHeliTailRotorHealth = getHeliTailRotorHealth;
    /**
     * No comment provided
     *
     * Hash: 0x8E86238D | Since: unknown
     */
    function getHeliThrottleControl(heli) {
        return Citizen.invokeNative('0x8E86238D', heli);
    }
    vehicle_1.getHeliThrottleControl = getHeliThrottleControl;
    /**
     * No comment provided
     *
     * Hash: 0x8FDC0768 | Since: unknown
     */
    function getHeliYawControl(heli) {
        return Citizen.invokeNative('0x8FDC0768', heli);
    }
    vehicle_1.getHeliYawControl = getHeliYawControl;
    /**
     * No comment provided
     *
     * Hash: 0x3EFE38D1 | Since: unknown
     */
    function getIsHeliEngineRunning(heli) {
        return Citizen.invokeNative('0x3EFE38D1', heli);
    }
    vehicle_1.getIsHeliEngineRunning = getIsHeliEngineRunning;
    /**
     * No comment provided
     *
     * Hash: 0x1C939E87 | Since: unknown
     */
    function getThrusterSideRcsThrottle(jetpack) {
        return Citizen.invokeNative('0x1C939E87', jetpack);
    }
    vehicle_1.getThrusterSideRcsThrottle = getThrusterSideRcsThrottle;
    /**
     * No comment provided
     *
     * Hash: 0x94E24C96 | Since: unknown
     */
    function getThrusterThrottle(jetpack) {
        return Citizen.invokeNative('0x94E24C96', jetpack);
    }
    vehicle_1.getThrusterThrottle = getThrusterThrottle;
    /**
     * No comment provided
     *
     * Hash: 0x456E34A | Since: unknown
     */
    function getTrainBackwardCarriage(train) {
        return Citizen.invokeNative('0x456E34A', train);
    }
    vehicle_1.getTrainBackwardCarriage = getTrainBackwardCarriage;
    /**
     * No comment provided
     *
     * Hash: 0x24DC88D9 | Since: unknown
     */
    function getTrainForwardCarriage(train) {
        return Citizen.invokeNative('0x24DC88D9', train);
    }
    vehicle_1.getTrainForwardCarriage = getTrainForwardCarriage;
    /**
     * This is a getter for the client-side native [`START_VEHICLE_HORN`](#\_0x9C8C6504B5B63D2C), which allows you to return the horn type of the vehicle.
     *
     * **Note**: This native only gets the hash value set with `START_VEHICLE_HORN`. If a wrong hash is passed into `START_VEHICLE_HORN`, it will return this wrong hash.
     *
     * ```cpp
     * enum eHornTypes
     * {
     * NORMAL = 1330140148,
     * HELDDOWN = -2087385909,
     * AGGRESSIVE = -92810745
     * }
     * ```
     *
     * Hash: 0xDEA49773 | Since: unknown
     */
    function getHornType(vehicle) {
        return Citizen.invokeNative('0xDEA49773', vehicle);
    }
    vehicle_1.getHornType = getHornType;
    /**
     * This is a getter for [SET_HELI_TAIL_EXPLODE_THROW_DASHBOARD](#\_0x3EC8BF18AA453FE9)
     *
     * Hash: 0x23E46BD7 | Since: unknown
     */
    function isHeliTailBoomBreakable(heli) {
        return Citizen.invokeNative('0x23E46BD7', heli);
    }
    vehicle_1.isHeliTailBoomBreakable = isHeliTailBoomBreakable;
    /**
     * No comment provided
     *
     * Hash: 0x2C59F987 | Since: unknown
     */
    function isHeliTailBoomBroken(heli) {
        return Citizen.invokeNative('0x2C59F987', heli);
    }
    vehicle_1.isHeliTailBoomBroken = isHeliTailBoomBroken;
    /**
     * No comment provided
     *
     * Hash: 0xFA9336E5 | Since: unknown
     */
    function isTrainCaboose(train) {
        return Citizen.invokeNative('0xFA9336E5', train);
    }
    vehicle_1.isTrainCaboose = isTrainCaboose;
    /**
     * No comment provided
     *
     * Hash: 0x77CC80DC | Since: unknown
     */
    function doesTrainStopAtStations(train) {
        return Citizen.invokeNative('0x77CC80DC', train);
    }
    vehicle_1.doesTrainStopAtStations = doesTrainStopAtStations;
    /**
     * Gets the trains desired speed.
     *
     * Hash: 0xA4921EF5 | Since: unknown
     */
    function getTrainCruiseSpeed(train) {
        return Citizen.invokeNative('0xA4921EF5', train);
    }
    vehicle_1.getTrainCruiseSpeed = getTrainCruiseSpeed;
    /**
     * Gets the direction the train is facing
     *
     * Hash: 0x8DAF79B6 | Since: unknown
     */
    function getTrainDirection(train) {
        return Citizen.invokeNative('0x8DAF79B6', train);
    }
    vehicle_1.getTrainDirection = getTrainDirection;
    /**
     * No comment provided
     *
     * Hash: 0x81B50033 | Since: unknown
     */
    function getTrainState(train) {
        return Citizen.invokeNative('0x81B50033', train);
    }
    vehicle_1.getTrainState = getTrainState;
    /**
     * No comment provided
     *
     * Hash: 0x9AA339D | Since: unknown
     */
    function getTrainTrackIndex(train) {
        return Citizen.invokeNative('0x9AA339D', train);
    }
    vehicle_1.getTrainTrackIndex = getTrainTrackIndex;
    /**
     * No comment provided
     *
     * Hash: 0x483B013C | Since: unknown
     */
    function getHandbrake(vehicle) {
        return Citizen.invokeNative('0x483B013C', vehicle);
    }
    vehicle_1.getHandbrake = getHandbrake;
    /**
     * No comment provided
     *
     * Hash: 0x1382FCEA | Since: unknown
     */
    function getSteeringAngle(vehicle) {
        return Citizen.invokeNative('0x1382FCEA', vehicle);
    }
    vehicle_1.getSteeringAngle = getSteeringAngle;
    /**
     * No comment provided
     *
     * Hash: 0xBB340D04 | Since: unknown
     */
    function isEngineStarting(vehicle) {
        return Citizen.invokeNative('0xBB340D04', vehicle);
    }
    vehicle_1.isEngineStarting = isEngineStarting;
    /**
     * **Note**: Flags are not the same based on your `gamebuild`. Please see [here](https://docs.fivem.net/docs/game-references/vehicle-references/vehicle-flags) to see a complete list of all vehicle flags.
     *
     * Get vehicle.meta flag by index. Useful examples include `FLAG_LAW_ENFORCEMENT` (31), `FLAG_RICH_CAR` (36), `FLAG_IS_ELECTRIC` (43), `FLAG_IS_OFFROAD_VEHICLE` (48).
     *
     * Hash: 0xD85C9F57 | Since: unknown
     */
    function getHasFlag(vehicle, flagIndex) {
        return Citizen.invokeNative('0xD85C9F57', vehicle, flagIndex);
    }
    vehicle_1.getHasFlag = getHasFlag;
    /**
     * Returns the model type of the vehicle as defined by:
     *
     * ```cpp
     * enum VehicleType
     * {
     * VEHICLE_TYPE_NONE = -1,
     * VEHICLE_TYPE_CAR = 0,
     * VEHICLE_TYPE_PLANE = 1,
     * VEHICLE_TYPE_TRAILER = 2,
     * VEHICLE_TYPE_QUADBIKE = 3,
     * VEHICLE_TYPE_DRAFT = 4,
     * VEHICLE_TYPE_SUBMARINECAR = 5,
     * VEHICLE_TYPE_AMPHIBIOUS_AUTOMOBILE = 6,
     * VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE = 7,
     * VEHICLE_TYPE_HELI = 8,
     * VEHICLE_TYPE_BLIMP = 9,
     * VEHICLE_TYPE_AUTOGYRO = 10,
     * VEHICLE_TYPE_BIKE = 11,
     * VEHICLE_TYPE_BICYCLE = 12,
     * VEHICLE_TYPE_BOAT = 13,
     * VEHICLE_TYPE_TRAIN = 14,
     * VEHICLE_TYPE_SUBMARINE = 15,
     * };
     * ```
     *
     * Hash: 0xDE73BC10 | Since: unknown
     */
    function getTypeRaw(vehicle) {
        return Citizen.invokeNative('0xDE73BC10', vehicle);
    }
    vehicle_1.getTypeRaw = getTypeRaw;
    /**
     * Getter for [BREAK_OFF_VEHICLE_WHEEL](?\_0xA274CADB).
     *
     * Hash: 0xCF1BC668 | Since: unknown
     */
    function isWheelBrokenOff(vehicle, wheelIndex) {
        return Citizen.invokeNative('0xCF1BC668', vehicle, wheelIndex);
    }
    vehicle_1.isWheelBrokenOff = isWheelBrokenOff;
    /**
     * No comment provided
     *
     * Hash: 0x8923DD42 | Since: unknown
     */
    function setCurrentGear(vehicle, gear) {
        Citizen.invokeNative('0x8923DD42', vehicle, gear);
    }
    vehicle_1.setCurrentGear = setCurrentGear;
    /**
     * This native is a setter for [`GET_VEHICLE_HAS_FLAG`](#\_0xD85C9F57).
     *
     * Hash: 0x63AE1A34 | Since: unknown
     */
    function setFlag(vehicle, flagIndex, value) {
        return Citizen.invokeNative('0x63AE1A34', vehicle, flagIndex, value);
    }
    vehicle_1.setFlag = setFlag;
    /**
     * No comment provided
     *
     * Hash: 0x3A4566F4 | Since: unknown
     */
    function setNextGear(vehicle, nextGear) {
        Citizen.invokeNative('0x3A4566F4', vehicle, nextGear);
    }
    vehicle_1.setNextGear = setNextGear;
    /**
     * Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating
     * script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
     *
     * ```
     * NativeDB Added Parameter 8: BOOL p7
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CREATE_VEHICLE](?\_0xAF35D0D2583051B0).</strong>
     *
     * Hash: 0xDD75460A | Since: unknown
     */
    function create(modelHash, pos, heading, isNetwork, netMissionEntity) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0xDD75460A', modelHash, pos.x, pos.y, pos.z, heading, isNetwork, netMissionEntity);
    }
    vehicle_1.create = create;
    /**
     * Equivalent to CREATE_VEHICLE, but it uses 'server setter' logic (like the former CREATE_AUTOMOBILE) as a workaround for
     * reliability concerns regarding entity creation RPC.
     *
     * Unlike CREATE_AUTOMOBILE, this supports other vehicle types as well.
     *
     * Hash: 0x6AE51D4B | Since: unknown
     */
    function createServerSetter(modelHash, _type, pos, heading) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0x6AE51D4B', modelHash, _type, pos.x, pos.y, pos.z, heading);
    }
    vehicle_1.createServerSetter = createServerSetter;
    /**
     * Deletes the specified `entity` and any carriage its attached to, or that is attached to it.
     *
     * Hash: 0x523BA3DA | Since: unknown
     */
    function deleteTrain(entity) {
        Citizen.invokeNative('0x523BA3DA', entity);
    }
    vehicle_1.deleteTrain = deleteTrain;
    /**
     * No comment provided
     *
     * Hash: 0x43F15989 | Since: unknown
     */
    function doesBoatSinkWhenWrecked(vehicle) {
        return Citizen.invokeNative('0x43F15989', vehicle);
    }
    vehicle_1.doesBoatSinkWhenWrecked = doesBoatSinkWhenWrecked;
    /**
     * Returns all vehicle handles known to the server.
     * The data returned adheres to the following layout:
     *
     * ```
     * [127, 42, 13, 37]
     * ```
     *
     * Hash: 0x332169F5 | Since: unknown
     */
    function getAlls() {
        return Citizen.invokeNative('0x332169F5');
    }
    vehicle_1.getAlls = getAlls;
    /**
     * No comment provided
     *
     * Hash: 0x7DC6D022 | Since: unknown
     */
    function getIsEngineRunning(vehicle) {
        return Citizen.invokeNative('0x7DC6D022', vehicle);
    }
    vehicle_1.getIsEngineRunning = getIsEngineRunning;
    /**
     * No comment provided
     *
     * Hash: 0xD7EC8760 | Since: unknown
     */
    function getIsPrimaryColourCustom(vehicle) {
        return Citizen.invokeNative('0xD7EC8760', vehicle);
    }
    vehicle_1.getIsPrimaryColourCustom = getIsPrimaryColourCustom;
    /**
     * No comment provided
     *
     * Hash: 0x288AD228 | Since: unknown
     */
    function getIsSecondaryColourCustom(vehicle) {
        return Citizen.invokeNative('0x288AD228', vehicle);
    }
    vehicle_1.getIsSecondaryColourCustom = getIsSecondaryColourCustom;
    /**
     * See the client-side [GET_LANDING_GEAR_STATE](#\_0x9B0F3DCA3DB0F4CD) native for a description of landing gear states.
     *
     * Hash: 0xA6F02670 | Since: unknown
     */
    function getLandingGearState(vehicle) {
        return Citizen.invokeNative('0xA6F02670', vehicle);
    }
    vehicle_1.getLandingGearState = getLandingGearState;
    /**
     * No comment provided
     *
     * Hash: 0x95070FA | Since: unknown
     */
    function getTrainCarriageEngine(train) {
        return Citizen.invokeNative('0x95070FA', train);
    }
    vehicle_1.getTrainCarriageEngine = getTrainCarriageEngine;
    /**
     * No comment provided
     *
     * Hash: 0x4B8285CF | Since: unknown
     */
    function getTrainCarriageIndex(train) {
        return Citizen.invokeNative('0x4B8285CF', train);
    }
    vehicle_1.getTrainCarriageIndex = getTrainCarriageIndex;
    /**
     * No comment provided
     *
     * Hash: 0x2B2FCC28 | Since: unknown
     */
    function getBodyHealth(vehicle) {
        return Citizen.invokeNative('0x2B2FCC28', vehicle);
    }
    vehicle_1.getBodyHealth = getBodyHealth;
    /**
     * No comment provided
     *
     * Hash: 0x40D82D88 | Since: unknown
     */
    function getColours(vehicle) {
        return Citizen.invokeNative('0x40D82D88', vehicle);
    }
    vehicle_1.getColours = getColours;
    /**
     * No comment provided
     *
     * Hash: 0x1C2B9FEF | Since: unknown
     */
    function getCustomPrimaryColour(vehicle) {
        return Citizen.invokeNative('0x1C2B9FEF', vehicle);
    }
    vehicle_1.getCustomPrimaryColour = getCustomPrimaryColour;
    /**
     * No comment provided
     *
     * Hash: 0x3FF247A2 | Since: unknown
     */
    function getCustomSecondaryColour(vehicle) {
        return Citizen.invokeNative('0x3FF247A2', vehicle);
    }
    vehicle_1.getCustomSecondaryColour = getCustomSecondaryColour;
    /**
     * No comment provided
     *
     * Hash: 0xA0DBD08D | Since: unknown
     */
    function getDashboardColour(vehicle) {
        return Citizen.invokeNative('0xA0DBD08D', vehicle);
    }
    vehicle_1.getDashboardColour = getDashboardColour;
    /**
     * No comment provided
     *
     * Hash: 0xFD15C065 | Since: unknown
     */
    function getDirtLevel(vehicle) {
        return Citizen.invokeNative('0xFD15C065', vehicle);
    }
    vehicle_1.getDirtLevel = getDirtLevel;
    /**
     * Currently it only works when set to "all players".
     *
     * Hash: 0x1DC50247 | Since: unknown
     */
    function getDoorsLockedForPlayer(vehicle) {
        return Citizen.invokeNative('0x1DC50247', vehicle);
    }
    vehicle_1.getDoorsLockedForPlayer = getDoorsLockedForPlayer;
    /**
     * ```lua
     * enum_VehicleLockStatus = {
     * None = 0,
     * Locked = 2,
     * LockedForPlayer = 3,
     * StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
     * CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
     * CanBeBrokenIntoPersist = 8, -- Can be broken into persist
     * CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
     * }
     * ```
     *
     * It should be [noted](https://forum.cfx.re/t/4863241) that while the [client-side command](#\_0x25BC98A59C2EA962) and its
     * setter distinguish between states 0 (unset) and 1 (unlocked), the game will synchronize both as state 0, so the server-side
     * command will return only '0' if unlocked.
     *
     * Hash: 0xD72CEF2 | Since: unknown
     */
    function getDoorLockStatus(vehicle) {
        return Citizen.invokeNative('0xD72CEF2', vehicle);
    }
    vehicle_1.getDoorLockStatus = getDoorLockStatus;
    /**
     * Returns the open position of the specified door on the target vehicle.
     *
     * Hash: 0x6E35C49C | Since: unknown
     */
    function getDoorStatus(vehicle, doorIndex) {
        return Citizen.invokeNative('0x6E35C49C', vehicle, doorIndex);
    }
    vehicle_1.getDoorStatus = getDoorStatus;
    /**
     * No comment provided
     *
     * Hash: 0x8880038A | Since: unknown
     */
    function getEngineHealth(vehicle) {
        return Citizen.invokeNative('0x8880038A', vehicle);
    }
    vehicle_1.getEngineHealth = getEngineHealth;
    /**
     * No comment provided
     *
     * Hash: 0x80E4659B | Since: unknown
     */
    function getExtraColours(vehicle) {
        return Citizen.invokeNative('0x80E4659B', vehicle);
    }
    vehicle_1.getExtraColours = getExtraColours;
    /**
     * Gets the flight nozzel position for the specified vehicle. See the client-side [\_GET_VEHICLE_FLIGHT_NOZZLE_POSITION](#\_0xDA62027C8BDB326E) native for usage examples.
     *
     * Hash: 0xAD40AD55 | Since: unknown
     */
    function getFlightNozzlePosition(vehicle) {
        return Citizen.invokeNative('0xAD40AD55', vehicle);
    }
    vehicle_1.getFlightNozzlePosition = getFlightNozzlePosition;
    /**
     * No comment provided
     *
     * Hash: 0xD7147656 | Since: unknown
     */
    function getHeadlightsColour(vehicle) {
        return Citizen.invokeNative('0xD7147656', vehicle);
    }
    vehicle_1.getHeadlightsColour = getHeadlightsColour;
    /**
     * Gets the lock on state for the specified vehicle. See the client-side [GET_VEHICLE_HOMING_LOCKON_STATE](#\_0xE6B0E8CFC3633BF0) native for a description of lock on states.
     *
     * Hash: 0xFBDE9FD8 | Since: unknown
     */
    function getHomingLockonState(vehicle) {
        return Citizen.invokeNative('0xFBDE9FD8', vehicle);
    }
    vehicle_1.getHomingLockonState = getHomingLockonState;
    /**
     * No comment provided
     *
     * Hash: 0xCCFF3B6E | Since: unknown
     */
    function getInteriorColour(vehicle) {
        return Citizen.invokeNative('0xCCFF3B6E', vehicle);
    }
    vehicle_1.getInteriorColour = getInteriorColour;
    /**
     * No comment provided
     *
     * Hash: 0x7C278621 | Since: unknown
     */
    function getLightsState(vehicle) {
        return Citizen.invokeNative('0x7C278621', vehicle);
    }
    vehicle_1.getLightsState = getLightsState;
    /**
     * No comment provided
     *
     * Hash: 0xEC82A51D | Since: unknown
     */
    function getLivery(vehicle) {
        return Citizen.invokeNative('0xEC82A51D', vehicle);
    }
    vehicle_1.getLivery = getLivery;
    /**
     * Gets the vehicle that is locked on to for the specified vehicle.
     *
     * Hash: 0x4A557117 | Since: unknown
     */
    function getLockOnTarget(vehicle) {
        return Citizen.invokeNative('0x4A557117', vehicle);
    }
    vehicle_1.getLockOnTarget = getLockOnTarget;
    /**
     * Getter to check the neon colour of a vehicle. This native is the server side getter of [GET_VEHICLE_NEON_LIGHTS_COLOUR](#\_0x7619EEE8C886757F).
     *
     * Hash: 0xD9319DCB | Since: unknown
     */
    function getNeonColour(vehicle) {
        return Citizen.invokeNative('0xD9319DCB', vehicle);
    }
    vehicle_1.getNeonColour = getNeonColour;
    /**
     * Getter to check if one of the neon lights of a vehicle is enabled. This native is the server side getter of [IS_VEHICLE_NEON_LIGHT_ENABLED](#\_0x8C4B92553E4766A5).
     *
     * ```cpp
     * enum neonIndex
     * {
     * NEON_BACK = 0,   // Back neon
     * NEON_RIGHT = 1,  // Right neon
     * NEON_LEFT = 2,   // Left neon
     * NEON_FRONT = 3   // Front neon
     * };
     * ```
     *
     * Hash: 0x684BDBF2 | Since: unknown
     */
    function getNeonEnabled(vehicle, neonIndex) {
        return Citizen.invokeNative('0x684BDBF2', vehicle, neonIndex);
    }
    vehicle_1.getNeonEnabled = getNeonEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xE8522D58 | Since: unknown
     */
    function getNumberPlateText(vehicle) {
        return Citizen.invokeNative('0xE8522D58', vehicle);
    }
    vehicle_1.getNumberPlateText = getNumberPlateText;
    /**
     * No comment provided
     *
     * Hash: 0x499747B6 | Since: unknown
     */
    function getNumberPlateTextIndex(vehicle) {
        return Citizen.invokeNative('0x499747B6', vehicle);
    }
    vehicle_1.getNumberPlateTextIndex = getNumberPlateTextIndex;
    /**
     * Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.
     *
     * Hash: 0xAFE92319 | Since: unknown
     */
    function getPedIsIn(ped, lastVehicle) {
        return Citizen.invokeNative('0xAFE92319', ped, lastVehicle);
    }
    vehicle_1.getPedIsIn = getPedIsIn;
    /**
     * No comment provided
     *
     * Hash: 0xE41595CE | Since: unknown
     */
    function getPetrolTankHealth(vehicle) {
        return Citizen.invokeNative('0xE41595CE', vehicle);
    }
    vehicle_1.getPetrolTankHealth = getPetrolTankHealth;
    /**
     * No comment provided
     *
     * Hash: 0x57037960 | Since: unknown
     */
    function getRadioStationIndex(vehicle) {
        return Citizen.invokeNative('0x57037960', vehicle);
    }
    vehicle_1.getRadioStationIndex = getRadioStationIndex;
    /**
     * No comment provided
     *
     * Hash: 0x872CF42 | Since: unknown
     */
    function getRoofLivery(vehicle) {
        return Citizen.invokeNative('0x872CF42', vehicle);
    }
    vehicle_1.getRoofLivery = getRoofLivery;
    /**
     * No comment provided
     *
     * Hash: 0x9963D5F9 | Since: unknown
     */
    function getTotalRepairs(vehicle) {
        return Citizen.invokeNative('0x9963D5F9', vehicle);
    }
    vehicle_1.getTotalRepairs = getTotalRepairs;
    /**
     * No comment provided
     *
     * Hash: 0x75280015 | Since: unknown
     */
    function getTyreSmokeColor(vehicle) {
        return Citizen.invokeNative('0x75280015', vehicle);
    }
    vehicle_1.getTyreSmokeColor = getTyreSmokeColor;
    /**
     * No comment provided
     *
     * Hash: 0xDA58D7AE | Since: unknown
     */
    function getWheelType(vehicle) {
        return Citizen.invokeNative('0xDA58D7AE', vehicle);
    }
    vehicle_1.getWheelType = getWheelType;
    /**
     * No comment provided
     *
     * Hash: 0x13D53892 | Since: unknown
     */
    function getWindowTint(vehicle) {
        return Citizen.invokeNative('0x13D53892', vehicle);
    }
    vehicle_1.getWindowTint = getWindowTint;
    /**
     * No comment provided
     *
     * Hash: 0xB8AF3137 | Since: unknown
     */
    function hasBeenDamagedByBullets(vehicle) {
        return Citizen.invokeNative('0xB8AF3137', vehicle);
    }
    vehicle_1.hasBeenDamagedByBullets = hasBeenDamagedByBullets;
    /**
     * No comment provided
     *
     * Hash: 0xE4E83A5B | Since: unknown
     */
    function hasBeenOwnedByPlayer(vehicle) {
        return Citizen.invokeNative('0xE4E83A5B', vehicle);
    }
    vehicle_1.hasBeenOwnedByPlayer = hasBeenOwnedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xD5C39EE6 | Since: unknown
     */
    function isBoatAnchoredAndFrozen(vehicle) {
        return Citizen.invokeNative('0xD5C39EE6', vehicle);
    }
    vehicle_1.isBoatAnchoredAndFrozen = isBoatAnchoredAndFrozen;
    /**
     * No comment provided
     *
     * Hash: 0x9049DB44 | Since: unknown
     */
    function isBoatWrecked(vehicle) {
        return Citizen.invokeNative('0x9049DB44', vehicle);
    }
    vehicle_1.isBoatWrecked = isBoatWrecked;
    /**
     * No comment provided
     *
     * Hash: 0x42098B5 | Since: unknown
     */
    function isExtraTurnedOn(vehicle, extraId) {
        return Citizen.invokeNative('0x42098B5', vehicle, extraId);
    }
    vehicle_1.isExtraTurnedOn = isExtraTurnedOn;
    /**
     * No comment provided
     *
     * Hash: 0x25EB5873 | Since: unknown
     */
    function isSirenOn(vehicle) {
        return Citizen.invokeNative('0x25EB5873', vehicle);
    }
    vehicle_1.isSirenOn = isSirenOn;
    /**
     * No comment provided
     *
     * Hash: 0x48C80210 | Since: unknown
     */
    function isTyreBurst(vehicle, wheelID, completely) {
        return Citizen.invokeNative('0x48C80210', vehicle, wheelID, completely);
    }
    vehicle_1.isTyreBurst = isTyreBurst;
    /**
     * See the client-side [IS_VEHICLE_WINDOW_INTACT](#\_0x46E571A0E20D01F1) for a window indexes list.
     *
     * Hash: 0xAC4EF23D | Since: unknown
     */
    function isWindowIntact(vehicle, windowIndex) {
        return Citizen.invokeNative('0xAC4EF23D', vehicle, windowIndex);
    }
    vehicle_1.isWindowIntact = isWindowIntact;
    /**
     * SET_VEHICLE_ALARM
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_ALARM](?\_0xCDE5E70C1DDB954C).</strong>
     *
     * Hash: 0x24877D84 | Since: unknown
     */
    function setAlarm(vehicle, state) {
        Citizen.invokeNative('0x24877D84', vehicle, state);
    }
    vehicle_1.setAlarm = setAlarm;
    /**
     * ```
     * p2 often set to 1000.0 in the decompiled scripts.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_BODY_HEALTH](?\_0xB77D05AC8C78AADB).</strong>
     *
     * Hash: 0x920C2517 | Since: unknown
     */
    function setBodyHealth(vehicle, value) {
        Citizen.invokeNative('0x920C2517', vehicle, value);
    }
    vehicle_1.setBodyHealth = setBodyHealth;
    /**
     * colorPrimary & colorSecondary are the paint indexes for the vehicle.
     * For a list of valid paint indexes, view: pastebin.com/pwHci0xK
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_COLOURS](?\_0x4F1D4BE3A7F24601).</strong>
     *
     * Hash: 0x57F24253 | Since: unknown
     */
    function setColours(vehicle, colorPrimary, colorSecondary) {
        Citizen.invokeNative('0x57F24253', vehicle, colorPrimary, colorSecondary);
    }
    vehicle_1.setColours = setColours;
    /**
     * Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).
     * Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_COLOUR_COMBINATION](?\_0x33E8CD3322E2FE31).</strong>
     *
     * Hash: 0xA557AEAD | Since: unknown
     */
    function setColourCombination(vehicle, colorCombination) {
        Citizen.invokeNative('0xA557AEAD', vehicle, colorCombination);
    }
    vehicle_1.setColourCombination = setColourCombination;
    /**
     * ```
     * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_PRIMARY_COLOUR](?\_0x7141766F91D15BEA).</strong>
     *
     * Hash: 0x8DF9F9BC | Since: unknown
     */
    function setCustomPrimaryColour(vehicle, r, g, b) {
        Citizen.invokeNative('0x8DF9F9BC', vehicle, r, g, b);
    }
    vehicle_1.setCustomPrimaryColour = setCustomPrimaryColour;
    /**
     * ```
     * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_CUSTOM_SECONDARY_COLOUR](?\_0x36CED73BFED89754).</strong>
     *
     * Hash: 0x9D77259E | Since: unknown
     */
    function setCustomSecondaryColour(vehicle, r, g, b) {
        Citizen.invokeNative('0x9D77259E', vehicle, r, g, b);
    }
    vehicle_1.setCustomSecondaryColour = setCustomSecondaryColour;
    /**
     * Sets the dirt level of the passed vehicle.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DIRT_LEVEL](?\_0x79D3B596FE44EE8B).</strong>
     *
     * Hash: 0x2B39128B | Since: unknown
     */
    function setDirtLevel(vehicle, dirtLevel) {
        Citizen.invokeNative('0x2B39128B', vehicle, dirtLevel);
    }
    vehicle_1.setDirtLevel = setDirtLevel;
    /**
     * Locks the doors of a specified vehicle to a defined lock state, affecting how players and NPCs can interact with the vehicle.
     *
     * ```
     * NativeDB Introduced: v323
     * ```
     *
     * ```cpp
     * enum eVehicleLockState {
     * // No specific lock state, vehicle behaves according to the game's default settings.
     * VEHICLELOCK_NONE = 0,
     * // Vehicle is fully unlocked, allowing free entry by players and NPCs.
     * VEHICLELOCK_UNLOCKED = 1,
     * // Vehicle is locked, preventing entry by players and NPCs.
     * VEHICLELOCK_LOCKED = 2,
     * // Vehicle locks out only players, allowing NPCs to enter.
     * VEHICLELOCK_LOCKOUT_PLAYER_ONLY = 3,
     * // Vehicle is locked once a player enters, preventing others from entering.
     * VEHICLELOCK_LOCKED_PLAYER_INSIDE = 4,
     * // Vehicle starts in a locked state, but may be unlocked through game events.
     * VEHICLELOCK_LOCKED_INITIALLY = 5,
     * // Forces the vehicle's doors to shut and lock.
     * VEHICLELOCK_FORCE_SHUT_DOORS = 6,
     * // Vehicle is locked but can still be damaged.
     * VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7,
     * // Vehicle is locked, but its trunk/boot remains unlocked.
     * VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED = 8,
     * // Vehicle is locked and does not allow passengers, except for the driver.
     * VEHICLELOCK_LOCKED_NO_PASSENGERS = 9,
     * // Vehicle is completely locked, preventing entry entirely, even if previously inside.
     * VEHICLELOCK_CANNOT_ENTER = 10
     * };
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOORS_LOCKED](?\_0xB664292EAECF7FA6).</strong>
     *
     * Hash: 0x4CDD35D0 | Since: unknown
     */
    function setDoorsLocked(vehicle, doorLockStatus) {
        Citizen.invokeNative('0x4CDD35D0', vehicle, doorLockStatus);
    }
    vehicle_1.setDoorsLocked = setDoorsLocked;
    /**
     * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_DOOR_BROKEN](?\_0xD4D4F6A4AB575A33).</strong>
     *
     * Hash: 0x8147FEA7 | Since: unknown
     */
    function setDoorBroken(vehicle, doorIndex, deleteDoor) {
        Citizen.invokeNative('0x8147FEA7', vehicle, doorIndex, deleteDoor);
    }
    vehicle_1.setDoorBroken = setDoorBroken;
    /**
     * SET_VEHICLE_NUMBER_PLATE_TEXT
     *
     * <strong>This is the server-side RPC native equivalent of the client native [SET_VEHICLE_NUMBER_PLATE_TEXT](?\_0x95A88F0B409CDA47).</strong>
     *
     * Hash: 0x400F9556 | Since: unknown
     */
    function setNumberPlateText(vehicle, plateText) {
        Citizen.invokeNative('0x400F9556', vehicle, plateText);
    }
    vehicle_1.setNumberPlateText = setNumberPlateText;
    /**
     * Returns the type of the passed vehicle.
     *
     * For client scripts, reference the more detailed [GET_VEHICLE_TYPE_RAW](#\_0xDE73BC10) native.
     *
     * ### Vehicle types
     *
     * *   automobile
     * *   bike
     * *   boat
     * *   heli
     * *   plane
     * *   submarine
     * *   trailer
     * *   train
     *
     * Hash: 0xA273060E | Since: unknown
     */
    function getType(vehicle) {
        return Citizen.invokeNative('0xA273060E', vehicle);
    }
    vehicle_1.getType = getType;
    /**
     * No comment provided
     *
     * Hash: 0x2CE544C68FB812A0 | Since: 323
     */
    function addRoadNodeSpeedZone(pos, radius, speed) {
        return AddRoadNodeSpeedZone(pos.x, pos.y, pos.z, radius, speed, false);
    }
    vehicle_1.addRoadNodeSpeedZone = addRoadNodeSpeedZone;
    /**
     * No comment provided
     *
     * Hash: 0x54B0F614960F4A5F | Since: 323
     */
    function addCombatAngledAvoidanceArea() {
        return AddVehicleCombatAngledAvoidanceArea(0, 0, 0, 0, 0, 0, 0);
    }
    vehicle_1.addCombatAngledAvoidanceArea = addCombatAngledAvoidanceArea;
    /**
     * No comment provided
     *
     * Hash: 0x99AD4CCCB128CBC9 | Since: 323
     */
    function addPhoneExplosiveDevice(vehicle) {
        AddVehiclePhoneExplosiveDevice(vehicle);
    }
    vehicle_1.addPhoneExplosiveDevice = addPhoneExplosiveDevice;
    /**
     * No comment provided
     *
     * Hash: 0x2FA9923062DD396C | Since: 323
     */
    function addStuckCheckWithWarp() {
        AddVehicleStuckCheckWithWarp(undefined, 0, undefined, false, false, false, undefined);
    }
    vehicle_1.addStuckCheckWithWarp = addStuckCheckWithWarp;
    /**
     * No comment provided
     *
     * Hash: 0xB72E26D81006005B | Since: 323
     */
    function addUpsidedownCheck(vehicle) {
        AddVehicleUpsidedownCheck(vehicle);
    }
    vehicle_1.addUpsidedownCheck = addUpsidedownCheck;
    /**
     * This native doesn't seem to do anything, might be a debug-only native.
     *
     * Confirmed, it is a debug native.
     *
     * Hash: 0xB264C4D2F2B0A78B | Since: 323
     */
    function allowAmbientsToAvoidAdverseConditions(vehicle) {
        AllowAmbientVehiclesToAvoidAdverseConditions(vehicle);
    }
    vehicle_1.allowAmbientsToAvoidAdverseConditions = allowAmbientsToAvoidAdverseConditions;
    /**
     * No comment provided
     *
     * Hash: 0x0F3B4D4E43177236 | Since: 323
     */
    function allowBoatBoomToAnimate(vehicle, toggle) {
        GetBoatBoomPositionRatio3(vehicle, toggle);
    }
    vehicle_1.allowBoatBoomToAnimate = allowBoatBoomToAnimate;
    /**
     * No comment provided
     *
     * Hash: 0x2310A8F9421EBF43 | Since: 2372
     */
    function allowTrainToBeRemovedByPopulation() {
        Citizen.invokeNative('0x2310A8F9421EBF43', undefined);
    }
    vehicle_1.allowTrainToBeRemovedByPopulation = allowTrainToBeRemovedByPopulation;
    /**
     * No comment provided
     *
     * Hash: 0x249249D74F813EB2 | Since: 3095
     */
    function applyEmpEffect(vehicle) {
        Citizen.invokeNative('0x249249D74F813EB2', vehicle);
    }
    vehicle_1.applyEmpEffect = applyEmpEffect;
    /**
     * Appears to return false if any window is broken.
     *
     * Hash: 0x11D862A3E977A9EF | Since: 323
     */
    function areAllWindowsIntact(vehicle) {
        return AreAllVehicleWindowsIntact(vehicle);
    }
    vehicle_1.areAllWindowsIntact = areAllWindowsIntact;
    /**
     * Returns false if every seat is occupied.
     *
     * Hash: 0x2D34FC3BC4ADB780 | Since: 323
     */
    function areAnySeatsFree(vehicle) {
        return AreAnyVehicleSeatsFree(vehicle);
    }
    vehicle_1.areAnySeatsFree = areAnySeatsFree;
    /**
     * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
     *
     * Hash: 0xAEF12960FA943792 | Since: 1290
     */
    function areFoldingWingsDeployed(vehicle) {
        return AreHeliStubWingsDeployed(vehicle);
    }
    vehicle_1.areFoldingWingsDeployed = areFoldingWingsDeployed;
    /**
     * No comment provided
     *
     * Hash: 0xF78F94D60248C737 | Since: 323
     */
    function arePlaneControlPanelsIntact(vehicle) {
        return ArePlaneControlPanelsIntact(vehicle, false);
    }
    vehicle_1.arePlaneControlPanelsIntact = arePlaneControlPanelsIntact;
    /**
     * No comment provided
     *
     * Hash: 0x755D6D5267CBBD7E | Since: 323
     */
    function arePlanePropellersIntact(plane) {
        return ArePlanePropellersIntact(plane);
    }
    vehicle_1.arePlanePropellersIntact = arePlanePropellersIntact;
    /**
     * No comment provided
     *
     * Hash: 0x5991A01434CE9677 | Since: 323
     */
    function areWingsOfPlaneIntact(plane) {
        return ArePlaneWingsIntact(plane);
    }
    vehicle_1.areWingsOfPlaneIntact = areWingsOfPlaneIntact;
    /**
     * No comment provided
     *
     * Hash: 0x6A98C2ECF57FA5D4 | Since: 323
     */
    function attachContainerToHandlerFrameWhenLinedUp(vehicle, entity) {
        AttachContainerToHandlerFrame(vehicle, entity);
    }
    vehicle_1.attachContainerToHandlerFrameWhenLinedUp = attachContainerToHandlerFrameWhenLinedUp;
    /**
     * No comment provided
     *
     * Hash: 0xA1DD82F3CCF9A01E | Since: 944
     */
    function attachEntityToCargobob() {
        AttachEntityToCargobob(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1.attachEntityToCargobob = attachEntityToCargobob;
    /**
     * This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
     *
     * Hash: 0x16B5E274BDE402F8 | Since: 323
     */
    function attachOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions) {
        AttachVehicleOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
    }
    vehicle_1.attachOnToTrailer = attachOnToTrailer;
    /**
     * No comment provided
     *
     * Hash: 0x4127F1D84E347769 | Since: 323
     */
    function attachToCargobob(cargobob, vehicle, pos) {
        AttachVehicleToCargobob(cargobob, vehicle, 0, pos.x, pos.y, pos.z);
    }
    vehicle_1.attachToCargobob = attachToCargobob;
    /**
     * HookOffset defines where the hook is attached. leave at 0 for default attachment.
     *
     * Hash: 0x29A16F8D621C4508 | Since: 323
     */
    function attachToTowTruck(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ) {
        AttachVehicleToTowTruck(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
    }
    vehicle_1.attachToTowTruck = attachToTowTruck;
    /**
     * No comment provided
     *
     * Hash: 0x3C7D42D58F770B54 | Since: 323
     */
    function attachToTrailer(vehicle, trailer, radius) {
        AttachVehicleToTrailer(vehicle, trailer, radius);
    }
    vehicle_1.attachToTrailer = attachToTrailer;
    /**
     * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
     *
     * . distance defines how far it will travel until stopping. Garage doors use 3.0.
     *
     * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
     *
     * Hash: 0x260BE8F09E326A20 | Since: 323
     */
    function bringToHalt(vehicle, distance, duration) {
        BringVehicleToHalt(vehicle, distance, duration, false);
    }
    vehicle_1.bringToHalt = bringToHalt;
    /**
     * No comment provided
     *
     * Hash: 0x26C10ECBDA5D043B | Since: 323
     */
    function canAnchorBoatHere(vehicle) {
        return CanAnchorBoatHere(vehicle);
    }
    vehicle_1.canAnchorBoatHere = canAnchorBoatHere;
    /**
     * No comment provided
     *
     * Hash: 0x24F4121D07579880 | Since: 678
     */
    function canAnchorBoatHereIgnorePlayers(vehicle) {
        return CanAnchorBoatHereIgnorePlayers(vehicle);
    }
    vehicle_1.canAnchorBoatHereIgnorePlayers = canAnchorBoatHereIgnorePlayers;
    /**
     * No comment provided
     *
     * Hash: 0x2C1D8B3B19E517CC | Since: 757
     */
    function canCargobobPickUpEntity() {
        return CanCargobobPickUpEntity(undefined, undefined);
    }
    vehicle_1.canCargobobPickUpEntity = canCargobobPickUpEntity;
    /**
     * No comment provided
     *
     * Hash: 0x30785D90C956BF35 | Since: 323
     */
    function canShuffleSeat(vehicle, seatIndex) {
        return CanShuffleSeat(vehicle, seatIndex);
    }
    vehicle_1.canShuffleSeat = canShuffleSeat;
    /**
     * No comment provided
     *
     * Hash: 0xE01903C47C7AC89E | Since: 323
     */
    function clearLastDriven() {
        ClearLastDrivenVehicle();
    }
    vehicle_1.clearLastDriven = clearLastDriven;
    /**
     * No comment provided
     *
     * Hash: 0xC889AE921400E1ED | Since: 3095
     */
    function clearNitrous(vehicle) {
        ClearNitrous(vehicle);
    }
    vehicle_1.clearNitrous = clearNitrous;
    /**
     * No comment provided
     *
     * Hash: 0x55E1D2758F34E437 | Since: 323
     */
    function clearCustomPrimaryColour(vehicle) {
        ClearVehicleCustomPrimaryColour(vehicle);
    }
    vehicle_1.clearCustomPrimaryColour = clearCustomPrimaryColour;
    /**
     * No comment provided
     *
     * Hash: 0x5FFBDEEC3E8E2009 | Since: 323
     */
    function clearCustomSecondaryColour(vehicle) {
        ClearVehicleCustomSecondaryColour(vehicle);
    }
    vehicle_1.clearCustomSecondaryColour = clearCustomSecondaryColour;
    /**
     * No comment provided
     *
     * Hash: 0x0A436B8643716D14 | Since: 323
     */
    function clearGeneratorAreaOfInterest() {
        ClearVehicleGeneratorAreaOfInterest();
    }
    vehicle_1.clearGeneratorAreaOfInterest = clearGeneratorAreaOfInterest;
    /**
     * No comment provided
     *
     * Hash: 0x4419966C9936071A | Since: 463
     */
    function clearPetroltankFireCulprit(vehicle) {
        Citizen.invokeNative('0x4419966C9936071A', vehicle);
    }
    vehicle_1.clearPetroltankFireCulprit = clearPetroltankFireCulprit;
    /**
     * No comment provided
     *
     * Hash: 0xAA3F739ABDDCF21F | Since: 463
     */
    function clearPhoneExplosiveDevice() {
        ClearVehiclePhoneExplosiveDevice();
    }
    vehicle_1.clearPhoneExplosiveDevice = clearPhoneExplosiveDevice;
    /**
     * No comment provided
     *
     * Hash: 0x6D6AF961B72728AE | Since: 323
     */
    function clearRouteHistory(vehicle) {
        ClearVehicleRouteHistory(vehicle);
    }
    vehicle_1.clearRouteHistory = clearRouteHistory;
    /**
     * No comment provided
     *
     * Hash: 0x3556041742A0DC74 | Since: 323
     */
    function closeBombBayDoors(vehicle) {
        CloseBombBayDoors(vehicle);
    }
    vehicle_1.closeBombBayDoors = closeBombBayDoors;
    /**
     * Works for vehicles with a retractable landing gear
     *
     * Landing gear states:
     *
     * 0: Deployed
     * 1: Closing
     * 2: Opening
     * 3: Retracted
     *
     * Hash: 0xCFC8BE9A5E1FE575 | Since: 323
     */
    function controlLandingGear(vehicle, state) {
        ControlLandingGear(vehicle, state);
    }
    vehicle_1.controlLandingGear = controlLandingGear;
    /**
     * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
     *
     * Hash: 0xE44A982368A4AF23 | Since: 323
     */
    function copyDamages(sourceVehicle, targetVehicle) {
        CopyVehicleDamages(sourceVehicle, targetVehicle);
    }
    vehicle_1.copyDamages = copyDamages;
    /**
     * Train models HAVE TO be loaded (requested) before you use this.
     * For variation 15 - request:
     *
     * freight
     * freightcar
     * freightgrain
     * freightcont1
     * freightcont2
     * freighttrailer
     *
     *
     *
     * Hash: 0x63C6CCA8E68AE8C8 | Since: 323
     */
    function createMissionTrain(variation, pos, direction) {
        return CreateMissionTrain(variation, pos.x, pos.y, pos.z, direction, undefined, undefined);
    }
    vehicle_1.createMissionTrain = createMissionTrain;
    /**
     * Drops the Hook/Magnet on a cargobob
     *
     * state
     * enum eCargobobHook
     * {
     * CARGOBOB_HOOK = 0,
     * CARGOBOB_MAGNET = 1,
     * };
     *
     * Hash: 0x7BEB0C7A235F6F3B | Since: 323
     */
    function createPickUpRopeForCargobob(cargobob, state) {
        CreatePickUpRopeForCargobob(cargobob, state);
    }
    vehicle_1.createPickUpRopeForCargobob = createPickUpRopeForCargobob;
    /**
     * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
     *
     * Parameters:
     * x/y/z - Generator position
     * heading - Generator heading
     * p4 - Unknown (always 5.0)
     * p5 - Unknown (always 3.0)
     * modelHash - Vehicle model hash
     * p7/8/9/10 - Unknown (always -1)
     * p11 - Unknown (usually TRUE, only one instance of FALSE)
     * p12/13 - Unknown (always FALSE)
     * p14 - Unknown (usally FALSE, only two instances of TRUE)
     * p15 - Unknown (always TRUE)
     * p16 - Unknown (always -1)
     *
     * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
     *
     * Hash: 0x9DEF883114668116 | Since: 323
     */
    function createScriptGenerator(pos, heading, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateScriptVehicleGenerator(pos.x, pos.y, pos.z, heading, 0, 0, modelHash, 0, 0, 0, 0, false, false, false, false, false, 0);
    }
    vehicle_1.createScriptGenerator = createScriptGenerator;
    /**
     * p7 when set to true allows you to spawn vehicles under -100 z.
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xAF35D0D2583051B0 | Since: 323
     */
    function create(modelHash, pos, heading, isNetwork, bScriptHostVeh) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateVehicle(modelHash, pos.x, pos.y, pos.z, heading, isNetwork, bScriptHostVeh, false);
    }
    vehicle_1.create = create;
    /**
     * No comment provided
     *
     * Hash: 0x736A718577F39C7D | Since: 323
     */
    function deleteAllTrains() {
        DeleteAllTrains();
    }
    vehicle_1.deleteAllTrains = deleteAllTrains;
    /**
     * No comment provided
     *
     * Hash: 0x5B76B14AE875C795 | Since: 323
     */
    function deleteMissionTrain(train) {
        DeleteMissionTrain(train);
    }
    vehicle_1.deleteMissionTrain = deleteMissionTrain;
    /**
     * No comment provided
     *
     * Hash: 0x22102C9ABFCF125D | Since: 323
     */
    function deleteScriptGenerator(vehicleGenerator) {
        DeleteScriptVehicleGenerator(vehicleGenerator);
    }
    vehicle_1.deleteScriptGenerator = deleteScriptGenerator;
    /**
     * Deletes a vehicle.
     * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
     *
     * eg how to use:
     * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
     * DELETE_VEHICLE(&vehicle);
     *
     * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0xEA386986E786A54F | Since: 323
     */
    function deleteVehicle(vehicle) {
        DeleteVehicle(vehicle);
    }
    vehicle_1.deleteVehicle = deleteVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x7C0043FDFF6436BC | Since: 323
     */
    function detachContainerFromHandlerFrame(vehicle) {
        DetachContainerFromHandlerFrame(vehicle);
    }
    vehicle_1.detachContainerFromHandlerFrame = detachContainerFromHandlerFrame;
    /**
     * No comment provided
     *
     * Hash: 0xAF03011701811146 | Since: 678
     */
    function detachEntityFromCargobob(cargobob, entity) {
        return DetachEntityFromCargobob(cargobob, entity);
    }
    vehicle_1.detachEntityFromCargobob = detachEntityFromCargobob;
    /**
     * No comment provided
     *
     * Hash: 0xADF7BE450512C12F | Since: 323
     */
    function detachFromAnyCargobob(vehicle) {
        return DetachVehicleFromAnyCargobob(vehicle);
    }
    vehicle_1.detachFromAnyCargobob = detachFromAnyCargobob;
    /**
     * No comment provided
     *
     * Hash: 0xD0E9CE05A1E68CD8 | Since: 323
     */
    function detachFromAnyTowTruck(vehicle) {
        return DetachVehicleFromAnyTowTruck(vehicle);
    }
    vehicle_1.detachFromAnyTowTruck = detachFromAnyTowTruck;
    /**
     * No comment provided
     *
     * Hash: 0x0E21D3DF1051399D | Since: 323
     */
    function detachFromCargobob(vehicle, cargobob) {
        DetachVehicleFromCargobob(vehicle, cargobob);
    }
    vehicle_1.detachFromCargobob = detachFromCargobob;
    /**
     * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
     *
     * Hash: 0xC2DB6B6708350ED8 | Since: 323
     */
    function detachFromTowTruck(towTruck, vehicle) {
        DetachVehicleFromTowTruck(towTruck, vehicle);
    }
    vehicle_1.detachFromTowTruck = detachFromTowTruck;
    /**
     * No comment provided
     *
     * Hash: 0x90532EDF0D2BDD86 | Since: 323
     */
    function detachFromTrailer(vehicle) {
        DetachVehicleFromTrailer(vehicle);
    }
    vehicle_1.detachFromTrailer = detachFromTrailer;
    /**
     * No comment provided
     *
     * Hash: 0xEF49CF0270307CBE | Since: 323
     */
    function detonatePhoneExplosiveDevice() {
        DetonateVehiclePhoneExplosiveDevice();
    }
    vehicle_1.detonatePhoneExplosiveDevice = detonatePhoneExplosiveDevice;
    /**
     * No comment provided
     *
     * Hash: 0x500873A45724C863 | Since: 323
     */
    function disableIndividualPlanePropeller(vehicle, propeller) {
        DisableIndividualPlanePropeller(vehicle, propeller);
    }
    vehicle_1.disableIndividualPlanePropeller = disableIndividualPlanePropeller;
    /**
     * No comment provided
     *
     * Hash: 0x23428FC53C60919C | Since: 323
     */
    function disablePlaneAileron(vehicle) {
        DisablePlaneAileron(vehicle, false, false);
    }
    vehicle_1.disablePlaneAileron = disablePlaneAileron;
    /**
     * Adds some kind of shadow to the vehicle.
     *
     * p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.
     *
     * Hash: 0xF0E4BA16D1DB546C | Since: 323
     */
    function disableVehcileDynamicAmbientScales(vehicle) {
        SetVehicleShadowEffect(vehicle, 0, 0);
    }
    vehicle_1.disableVehcileDynamicAmbientScales = disableVehcileDynamicAmbientScales;
    /**
     * No comment provided
     *
     * Hash: 0xF25E02CB9C5818F8 | Since: 323
     */
    function disableExplosionBreakOffParts() {
        Citizen.invokeNative('0xF25E02CB9C5818F8');
    }
    vehicle_1.disableExplosionBreakOffParts = disableExplosionBreakOffParts;
    /**
     * No comment provided
     *
     * Hash: 0x32CAEDF24A583345 | Since: 463
     */
    function disableTurretMovementThisFrame(vehicle) {
        DisableVehicleTurretMovementThisFrame(vehicle);
    }
    vehicle_1.disableTurretMovementThisFrame = disableTurretMovementThisFrame;
    /**
     * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF4FC6A6F67D8D856 | Since: 323
     */
    function disableWeapon(disabled, weaponHash, vehicle, owner) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        DisableVehicleWeapon(disabled, weaponHash, vehicle, owner);
    }
    vehicle_1.disableWeapon = disableWeapon;
    /**
     * Returns true only when the magnet is active, will return false if the hook is active
     *
     * Hash: 0x6E08BF5B3722BAC9 | Since: 323
     */
    function doesCargobobHavePickupMagnet(cargobob) {
        return DoesCargobobHavePickupMagnet(cargobob);
    }
    vehicle_1.doesCargobobHavePickupMagnet = doesCargobobHavePickupMagnet;
    /**
     * Returns true only when the hook is active, will return false if the magnet is active
     *
     * Hash: 0x1821D91AD4B56108 | Since: 323
     */
    function doesCargobobHavePickUpRope(cargobob) {
        return DoesCargobobHavePickUpRope(cargobob);
    }
    vehicle_1.doesCargobobHavePickUpRope = doesCargobobHavePickUpRope;
    /**
     * Checks via CVehicleModelInfo
     *
     * Hash: 0x1262D55792428154 | Since: 323
     */
    function doesExtraExist(vehicle, extraId) {
        return DoesExtraExist(vehicle, extraId);
    }
    vehicle_1.doesExtraExist = doesExtraExist;
    /**
     * No comment provided
     *
     * Hash: 0xF6086BC836400876 | Since: 323
     */
    function doesScriptGeneratorExist(vehicleGenerator) {
        return DoesScriptVehicleGeneratorExist(vehicleGenerator);
    }
    vehicle_1.doesScriptGeneratorExist = doesScriptGeneratorExist;
    /**
     * Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
     *
     * Hash: 0x4E417C547182C84D | Since: 757
     */
    function doesAllowRappel(vehicle) {
        return DoesVehicleAllowRappel(vehicle);
    }
    vehicle_1.doesAllowRappel = doesAllowRappel;
    /**
     * No comment provided
     *
     * Hash: 0x956B409B984D9BF7 | Since: 323
     */
    function doesExistWithDecorator(decorator) {
        return DoesVehicleExistWithDecorator(decorator);
    }
    vehicle_1.doesExistWithDecorator = doesExistWithDecorator;
    /**
     * No comment provided
     *
     * Hash: 0x8AC862B0B32C5B80 | Since: 323
     */
    function doesHaveRoof(vehicle) {
        return DoesVehicleHaveRoof(vehicle);
    }
    vehicle_1.doesHaveRoof = doesHaveRoof;
    /**
     * No comment provided
     *
     * Hash: 0x99015ED7DBEA5113 | Since: 2189
     */
    function doesHaveSearchlight(vehicle) {
        return DoesVehicleHaveSearchlight(vehicle);
    }
    vehicle_1.doesHaveSearchlight = doesHaveSearchlight;
    /**
     * Maximum amount of vehicles with vehicle stuck check appears to be 16.
     *
     * Hash: 0x57E4C39DE5EE8470 | Since: 323
     */
    function doesHaveStuckVehicleCheck(vehicle) {
        return DoesVehicleHaveStuckVehicleCheck(vehicle);
    }
    vehicle_1.doesHaveStuckVehicleCheck = doesHaveStuckVehicleCheck;
    /**
     * No comment provided
     *
     * Hash: 0x25ECB9F8017D98E0 | Since: 323
     */
    function doesHaveWeapons(vehicle) {
        return DoesVehicleHaveWeapons(vehicle);
    }
    vehicle_1.doesHaveWeapons = doesHaveWeapons;
    /**
     * Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
     *
     * Hash: 0xF87D9F2301F7D206 | Since: 323
     */
    function enableDynamicAmbientScales(vehicle) {
        RemoveVehicleShadowEffect(vehicle);
    }
    vehicle_1.enableDynamicAmbientScales = enableDynamicAmbientScales;
    /**
     * Explodes a selected vehicle.
     *
     * Vehicle vehicle = Vehicle you want to explode.
     * BOOL isAudible = If explosion makes a sound.
     * BOOL isInvisible = If the explosion is invisible or not.
     *
     * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
     *
     * Hash: 0xBA71116ADF5B514C | Since: 323
     */
    function explode(vehicle, isAudible, isInvisible) {
        ExplodeVehicle(vehicle, isAudible, isInvisible);
    }
    vehicle_1.explode = explode;
    /**
     * No comment provided
     *
     * Hash: 0x786A4EB67B01BF0B | Since: 323
     */
    function explodeInCutscene(vehicle) {
        ExplodeVehicleInCutscene(vehicle, false);
    }
    vehicle_1.explodeInCutscene = explodeInCutscene;
    /**
     * Finds the vehicle that is carrying this entity with a handler frame.
     * The model of the entity must be prop_contr_03b_ld or the function will return 0.
     *
     * Hash: 0x375E7FC44F21C8AB | Since: 323
     */
    function findHandlerContainerIsAttachedTo(entity) {
        return FindVehicleCarryingThisEntity(entity);
    }
    vehicle_1.findHandlerContainerIsAttachedTo = findHandlerContainerIsAttachedTo;
    /**
     * Native is significantly more complicated than simply generating a random vector & length.
     * `The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible`
     *
     * Hash: 0x8DC9675797123522 | Since: 1290
     */
    function findSpawnCoordinatesForHeli(ped) {
        return new Vector3(FindRandomPointInSpace(ped));
    }
    vehicle_1.findSpawnCoordinatesForHeli = findSpawnCoordinatesForHeli;
    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.
     *
     * Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
     *
     * Hash: 0x772282EBEB95E682 | Since: 323
     */
    function fixWindow(vehicle, windowIndex) {
        FixVehicleWindow(vehicle, windowIndex);
    }
    vehicle_1.fixWindow = fixWindow;
    /**
     * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
     *
     * Hash: 0x1F2E4E06DEA8992B | Since: 323
     */
    function forcePlaybackRecordedUpdate(vehicle) {
        ForcePlaybackRecordedVehicleUpdate(vehicle, false);
    }
    vehicle_1.forcePlaybackRecordedUpdate = forcePlaybackRecordedUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xC67DB108A9ADE3BE | Since: 2189
     */
    function forceSubmarineNeurtalBuoyancy() {
        ForceSubmarineNeurtalBuoyancy(undefined, undefined);
    }
    vehicle_1.forceSubmarineNeurtalBuoyancy = forceSubmarineNeurtalBuoyancy;
    /**
     * No comment provided
     *
     * Hash: 0x33506883545AC0DF | Since: 323
     */
    function forceSubmarineSurfaceMode(vehicle, toggle) {
        ForceSubmarineSurfaceMode(vehicle, toggle);
    }
    vehicle_1.forceSubmarineSurfaceMode = forceSubmarineSurfaceMode;
    /**
     * No comment provided
     *
     * Hash: 0x99CAD8E7AFDB60FA | Since: 323
     */
    function forceSubThrottleForTime(vehicle) {
        Citizen.invokeNative('0x99CAD8E7AFDB60FA', vehicle, 0, 0);
    }
    vehicle_1.forceSubThrottleForTime = forceSubThrottleForTime;
    /**
     * No comment provided
     *
     * Hash: 0x1A2BCC8C636F9226 | Since: 3095
     */
    function fullyChargeNitrous(vehicle) {
        FullyChargeNitrous(vehicle);
    }
    vehicle_1.fullyChargeNitrous = fullyChargeNitrous;
    /**
     * No comment provided
     *
     * Hash: 0xA4822F1CF23F4810 | Since: 323
     */
    function generateCreationPosFromPaths() {
        return Citizen.invokeNative('0xA4822F1CF23F4810', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    vehicle_1.generateCreationPosFromPaths = generateCreationPosFromPaths;
    /**
     * No comment provided
     *
     * Hash: 0x9B8E1BF04B51F2E8 | Since: 1103
     */
    function getAlls() {
        return GetAllVehicles();
    }
    vehicle_1.getAlls = getAlls;
    /**
     * Returns true when the bomb bay doors of this plane are open. False if they're closed.
     *
     * Hash: 0xD0917A423314BBA8 | Since: 1180
     */
    function getAreBombBayDoorsOpen(aircraft) {
        return AreBombBayDoorsOpen(aircraft);
    }
    vehicle_1.getAreBombBayDoorsOpen = getAreBombBayDoorsOpen;
    /**
     * Gets the position of the cargobob hook, in world coords.
     *
     * Hash: 0xCBDB9B923CACC92D | Since: 323
     */
    function getAttachedPickUpHookPosition(cargobob) {
        return new Vector3(GetCargobobHookPosition(cargobob));
    }
    vehicle_1.getAttachedPickUpHookPosition = getAttachedPickUpHookPosition;
    /**
     * No comment provided
     *
     * Hash: 0x6636C535F6CC2725 | Since: 323
     */
    function getBoatBoomPositionRatio(vehicle) {
        return GetBoatBoomPositionRatio(vehicle);
    }
    vehicle_1.getBoatBoomPositionRatio = getBoatBoomPositionRatio;
    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x5AA3F878A178C4FC | Since: 323
     */
    function getBoatModelAgility(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetBoatVehicleModelAgility(modelHash);
    }
    vehicle_1.getBoatModelAgility = getBoatModelAgility;
    /**
     * Returns true when both headlights are broken. This does not include extralights.
     *
     * Hash: 0xEC69ADF931AAE0C3 | Since: 505
     */
    function getBothHeadlightsDamaged(vehicle) {
        return IsVehicleEngineOnFire(vehicle);
    }
    vehicle_1.getBothHeadlightsDamaged = getBothHeadlightsDamaged;
    /**
     * Used in decompiled scripts in combination with GET_VEHICLE_SIZE
     * p7 is usually 2
     * p8 is usually 1
     *
     * Hash: 0x51F30DB60626A20E | Since: 1180
     */
    function getCanBePlacedHere(vehicle, pos, rot) {
        return Citizen.invokeNative('0x51F30DB60626A20E', vehicle, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, 0, undefined);
    }
    vehicle_1.getCanBePlacedHere = getCanBePlacedHere;
    /**
     * Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
     *
     * Hash: 0x9078C0C5EF8C19E9 | Since: 944
     */
    function getCarHasJump(vehicle) {
        return GetCanVehicleJump(vehicle);
    }
    vehicle_1.getCarHasJump = getCarHasJump;
    /**
     * Example usage
     * `VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)`
     *
     * x, y, z: Position to get closest vehicle to.
     * radius: Max radius to get a vehicle.
     * modelHash: Limit to vehicles with this model. 0 for any.
     * flags: The bitwise flags altering the function's behaviour.
     *
     * Does not return police cars or helicopters.
     *
     * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
     *
     * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
     *
     * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
     * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
     *
     * Conversion of found flags to binary: https://pastebin.com/kghNFkRi
     *
     * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
     *
     * `It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT`
     *
     * -------------------------------------------------------------------------
     *
     * Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xF73EB622C4F1689B | Since: 323
     */
    function getClosest(pos, radius, modelHash, flags) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetClosestVehicle(pos.x, pos.y, pos.z, radius, modelHash, flags);
    }
    vehicle_1.getClosest = getClosest;
    /**
     * 0 -> up
     * 1 -> lowering down
     * 2 -> down
     * 3 -> raising up
     *
     * Hash: 0xF8C397922FC03F41 | Since: 323
     */
    function getConvertibleRoofState(vehicle) {
        return GetConvertibleRoofState(vehicle);
    }
    vehicle_1.getConvertibleRoofState = getConvertibleRoofState;
    /**
     * No comment provided
     *
     * Hash: 0x42BC05C27A946054 | Since: 323
     */
    function getCurrentPlaybackFor(vehicle) {
        return GetCurrentPlaybackForVehicle(vehicle);
    }
    vehicle_1.getCurrentPlaybackFor = getCurrentPlaybackFor;
    /**
     * Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
     * -----------------------------------------------------------------------------------------------------------------------------------------
     * While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
     * -----------------------------------------------------------------------------------------------------------------------------------------
     *
     * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
     *
     * `Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.`
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xB215AAC32D25D019 | Since: 323
     */
    function getDisplayNameFromModel(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetDisplayNameFromVehicleModel(modelHash);
    }
    vehicle_1.getDisplayNameFromModel = getDisplayNameFromModel;
    /**
     * Appears to return true if the vehicle has any damage, including cosmetically.
     *
     * Hash: 0xBCDC5017D3CE1E9E | Since: 323
     */
    function getDoesHaveDamageDecals(vehicle) {
        return IsVehicleDamaged(vehicle);
    }
    vehicle_1.getDoesHaveDamageDecals = getDoesHaveDamageDecals;
    /**
     * Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false.
     *
     * Hash: 0x71AFB258CCED3A27 | Since: 1604
     */
    function getDoesHaveTombstone(vehicle) {
        return GetDoesVehicleHaveTombstone(vehicle);
    }
    vehicle_1.getDoesHaveTombstone = getDoesHaveTombstone;
    /**
     * No comment provided
     *
     * Hash: 0x2F5A72430E78C8D3 | Since: 2372
     */
    function getDriftTyresSet(vehicle) {
        return GetDriftTyresEnabled(vehicle);
    }
    vehicle_1.getDriftTyresSet = getDriftTyresSet;
    /**
     * No comment provided
     *
     * Hash: 0x99093F60746708CA | Since: 1103
     */
    function getEntityAttachedToCargobob() {
        return GetEntityAttachedToCargobob(undefined);
    }
    vehicle_1.getEntityAttachedToCargobob = getEntityAttachedToCargobob;
    /**
     * No comment provided
     *
     * Hash: 0xEFEA18DCF10F8F75 | Since: 323
     */
    function getEntityAttachedToTowTruck(towTruck) {
        return GetEntityAttachedToTowTruck(towTruck);
    }
    vehicle_1.getEntityAttachedToTowTruck = getEntityAttachedToTowTruck;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xC0572928C0ABFDA3 | Since: 944
     */
    function getEntryPointPosition(vehicle, doorId) {
        return new Vector3(GetEntryPositionOfDoor(vehicle, doorId));
    }
    vehicle_1.getEntryPointPosition = getEntryPointPosition;
    /**
     * Gets the height of the vehicle's suspension.
     * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
     * 0.000 is the stock suspension.
     * 0.008 is Ultra Suspension.
     *
     * Hash: 0x53952FD2BAA19F17 | Since: 323
     */
    function getFakeSuspensionLoweringAmount(vehicle) {
        return GetVehicleSuspensionHeight(vehicle);
    }
    vehicle_1.getFakeSuspensionLoweringAmount = getFakeSuspensionLoweringAmount;
    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xC6AD107DDC9054CC | Since: 323
     */
    function getFlyingModelAgility(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelMaxKnots(modelHash);
    }
    vehicle_1.getFlyingModelAgility = getFlyingModelAgility;
    /**
     * No comment provided
     *
     * Hash: 0xDCA174A42133F08C | Since: 944
     */
    function getHasRetractableWheels(vehicle) {
        return GetHasRetractableWheels(vehicle);
    }
    vehicle_1.getHasRetractableWheels = getHasRetractableWheels;
    /**
     * No comment provided
     *
     * Hash: 0x36D782F68B309BDA | Since: 944
     */
    function getHasRocketBoost(vehicle) {
        return GetHasRocketBoost(vehicle);
    }
    vehicle_1.getHasRocketBoost = getHasRocketBoost;
    /**
     * No comment provided
     *
     * Hash: 0xE8718FAF591FD224 | Since: 1604
     */
    function getHasBeenHitByShunt(vehicle) {
        return Citizen.invokeNative('0xE8718FAF591FD224', vehicle);
    }
    vehicle_1.getHasBeenHitByShunt = getHasBeenHitByShunt;
    /**
     * Max 1000.
     * At 0 the main rotor will stall.
     *
     * Hash: 0xE4CB7541F413D2C5 | Since: 323
     */
    function getHeliMainRotorHealth(vehicle) {
        return GetHeliMainRotorHealth(vehicle);
    }
    vehicle_1.getHeliMainRotorHealth = getHeliMainRotorHealth;
    /**
     * Max 1000.
     * At -100 both helicopter rotors will stall.
     *
     * Hash: 0xAC51915D27E4A5F7 | Since: 323
     */
    function getHeliTailBoomHealth(vehicle) {
        return GetHeliTailBoomHealth(vehicle);
    }
    vehicle_1.getHeliTailBoomHealth = getHeliTailBoomHealth;
    /**
     * Max 1000.
     * At 0 the tail rotor will stall.
     *
     * Hash: 0xAE8CE82A4219AC8C | Since: 323
     */
    function getHeliTailRotorHealth(vehicle) {
        return GetHeliTailRotorHealth(vehicle);
    }
    vehicle_1.getHeliTailRotorHealth = getHeliTailRotorHealth;
    /**
     * No comment provided
     *
     * Hash: 0x0BB5CBDDD0F25AE3 | Since: 2372
     */
    function getHydraulicSuspensionRaiseFactor(vehicle, wheelId) {
        return GetHydraulicWheelValue(vehicle, wheelId);
    }
    vehicle_1.getHydraulicSuspensionRaiseFactor = getHydraulicSuspensionRaiseFactor;
    /**
     * No comment provided
     *
     * Hash: 0xA01BC64DD4BFBBAC | Since: 323
     */
    function getInClipsetHashForSeat(vehicle) {
        return Citizen.invokeNative('0xA01BC64DD4BFBBAC', vehicle, 0);
    }
    vehicle_1.getInClipsetHashForSeat = getInClipsetHashForSeat;
    /**
     * No comment provided
     *
     * Hash: 0xBA91D045575699AD | Since: 877
     */
    function getIsBoatCapsized(vehicle) {
        return GetIsBoatCapsized(vehicle);
    }
    vehicle_1.getIsBoatCapsized = getIsBoatCapsized;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x645F4B6E8499F632 | Since: 944
     */
    function getIsDoorValid(vehicle, doorId) {
        return GetIsDoorValid(vehicle, doorId);
    }
    vehicle_1.getIsDoorValid = getIsDoorValid;
    /**
     * From the driver's perspective, is the left headlight broken.
     *
     * Hash: 0x5EF77C9ADD3B11A3 | Since: 323
     */
    function getIsLeftHeadlightDamaged(vehicle) {
        return GetIsLeftVehicleHeadlightDamaged(vehicle);
    }
    vehicle_1.getIsLeftHeadlightDamaged = getIsLeftHeadlightDamaged;
    /**
     * From the driver's perspective, is the right headlight broken.
     *
     * Hash: 0xA7ECB73355EB2F20 | Since: 323
     */
    function getIsRightHeadlightDamaged(vehicle) {
        return GetIsRightVehicleHeadlightDamaged(vehicle);
    }
    vehicle_1.getIsRightHeadlightDamaged = getIsRightHeadlightDamaged;
    /**
     * Returns whether this vehicle is currently disabled by an EMP mine.
     *
     * Hash: 0x0506ED94363AD905 | Since: 1604
     */
    function getIsDisabledByEmp(vehicle) {
        return GetIsVehicleEmpDisabled(vehicle);
    }
    vehicle_1.getIsDisabledByEmp = getIsDisabledByEmp;
    /**
     * Returns true when in a vehicle, false whilst entering/exiting.
     *
     * Hash: 0xAE31E7DF9B5B132E | Since: 323
     */
    function getIsEngineRunning(vehicle) {
        return GetIsVehicleEngineRunning(vehicle);
    }
    vehicle_1.getIsEngineRunning = getIsEngineRunning;
    /**
     * No comment provided
     *
     * Hash: 0xF095C0405307B21B | Since: 323
     */
    function getIsPrimaryColourCustom(vehicle) {
        return GetIsVehiclePrimaryColourCustom(vehicle);
    }
    vehicle_1.getIsPrimaryColourCustom = getIsPrimaryColourCustom;
    /**
     * Check if Vehicle Secondary is avaliable for customize
     *
     * Hash: 0x910A32E7AAD2656C | Since: 323
     */
    function getIsSecondaryColourCustom(vehicle) {
        return GetIsVehicleSecondaryColourCustom(vehicle);
    }
    vehicle_1.getIsSecondaryColourCustom = getIsSecondaryColourCustom;
    /**
     * No comment provided
     *
     * Hash: 0xA2459F72C14E2E8D | Since: 1604
     */
    function getIsShunting(vehicle) {
        return GetIsVehicleShuntBoostActive(vehicle);
    }
    vehicle_1.getIsShunting = getIsShunting;
    /**
     * No comment provided
     *
     * Hash: 0x1DA0DA9CB3F0C8BF | Since: 944
     */
    function getIsWheelsRetracted(vehicle) {
        return GetIsWheelsLoweredStateActive(vehicle);
    }
    vehicle_1.getIsWheelsRetracted = getIsWheelsRetracted;
    /**
     * Landing gear states:
     *
     * 0: Deployed
     * 1: Closing (Retracting)
     * 2: (Landing gear state 2 is never used.)
     * 3: Opening (Deploying)
     * 4: Retracted
     *
     * Returns the current state of the vehicles landing gear.
     *
     * Hash: 0x9B0F3DCA3DB0F4CD | Since: 323
     */
    function getLandingGearState(vehicle) {
        return GetLandingGearState(vehicle);
    }
    vehicle_1.getLandingGearState = getLandingGearState;
    /**
     * No comment provided
     *
     * Hash: 0xB2D06FAEDE65B577 | Since: 323
     */
    function getLastDriven() {
        return GetLastDrivenVehicle();
    }
    vehicle_1.getLastDriven = getLastDriven;
    /**
     * No comment provided
     *
     * Hash: 0x83F969AA1EE2A664 | Since: 323
     */
    function getLastPedInSeat(vehicle, seatIndex) {
        return GetLastPedInVehicleSeat(vehicle, seatIndex);
    }
    vehicle_1.getLastPedInSeat = getLastPedInSeat;
    /**
     * Returns last vehicle that was rammed by the given vehicle using the shunt boost.
     *
     * Hash: 0x04F2FA6E234162F7 | Since: 1604
     */
    function getLastShunt(vehicle) {
        return GetLastRammedVehicle(vehicle);
    }
    vehicle_1.getLastShunt = getLastShunt;
    /**
     * Returns the text label of the vehicle's liveryIndex, as specified by the liveryNames section of the vehicle's modkit data in the carcols file.
     *
     * example
     *
     * `int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);`
     * for (int i = 0; i < count; i++)
     * {
     * `const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);`
     * }
     *
     *
     * this example will work fine to fetch all names
     * for example for Sanchez we get
     *
     * SANC_LV1
     * SANC_LV2
     * SANC_LV3
     * SANC_LV4
     * SANC_LV5
     *
     *
     * Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.
     *
     * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
     *
     * Hash: 0xB4C7A93837C91A1F | Since: 323
     */
    function getLiveryName(vehicle, liveryIndex) {
        return GetLiveryName(vehicle, liveryIndex);
    }
    vehicle_1.getLiveryName = getLiveryName;
    /**
     * Will return a vehicle's manufacturer display label.
     * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xF7AF4F159FF99F97 | Since: 1868
     */
    function getMakeNameFromModel(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetMakeNameFromVehicleModel(modelHash);
    }
    vehicle_1.getMakeNameFromModel = getMakeNameFromModel;
    /**
     * Returns the name for the type of vehicle mod(Armour, engine etc)
     *
     *
     * Hash: 0x51F0FEB9F6AE98C0 | Since: 323
     */
    function getModSlotName(vehicle, modType) {
        return GetModSlotName(vehicle, modType);
    }
    vehicle_1.getModSlotName = getModSlotName;
    /**
     * Returns the text label of a mod type for a given vehicle
     *
     * Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language
     *
     * Hash: 0x8935624F8C5592CC | Since: 323
     */
    function getModTextLabel(vehicle, modType, modValue) {
        return GetModTextLabel(vehicle, modType, modValue);
    }
    vehicle_1.getModTextLabel = getModTextLabel;
    /**
     * Returns the total amount of color combinations found in the vehicle's carvariations.meta entry.
     *
     * Hash: 0x3B963160CD65D41E | Since: 323
     */
    function getNumberOfColours(vehicle) {
        return GetNumberOfVehicleColours(vehicle);
    }
    vehicle_1.getNumberOfColours = getNumberOfColours;
    /**
     * No comment provided
     *
     * Hash: 0x92922A607497B14D | Since: 463
     */
    function getNumberOfDoors(vehicle) {
        return GetNumberOfVehicleDoors(vehicle);
    }
    vehicle_1.getNumberOfDoors = getNumberOfDoors;
    /**
     * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
     *
     * Hash: 0x4C4D6B2644F458CB | Since: 323
     */
    function getNumberOfNumberPlates() {
        return GetNumberOfVehicleNumberPlates();
    }
    vehicle_1.getNumberOfNumberPlates = getNumberOfNumberPlates;
    /**
     * paintType:
     * 0: Normal
     * 1: Metallic
     * 2: Pearl
     * 3: Matte
     * 4: Metal
     * 5: Chrome
     * 6: Chameleon
     *
     * Hash: 0xA551BE18C11A476D | Since: 323
     */
    function getNumModColors(paintType) {
        return GetNumModColors(paintType, false);
    }
    vehicle_1.getNumModColors = getNumModColors;
    /**
     * No comment provided
     *
     * Hash: 0x33F2E3FE70EAAE1D | Since: 323
     */
    function getNumModKits(vehicle) {
        return GetNumModKits(vehicle);
    }
    vehicle_1.getNumModKits = getNumModKits;
    /**
     * Returns how many possible mods a vehicle has for a given mod type
     *
     * Hash: 0xE38E9162A2500646 | Since: 323
     */
    function getNumMods(vehicle, modType) {
        return GetNumVehicleMods(vehicle, modType);
    }
    vehicle_1.getNumMods = getNumMods;
    /**
     * No comment provided
     *
     * Hash: 0x9D1224004B3A6707 | Since: 323
     */
    function getNumWindowTints() {
        return GetNumVehicleWindowTints();
    }
    vehicle_1.getNumWindowTints = getNumWindowTints;
    /**
     * Checks if Chernobog's stabilizers are deployed or not.
     * These are the metal supports that allow it to fire.
     * This native only applies to the Chernobog.
     *
     * Hash: 0x3A9128352EAC9E85 | Since: 1290
     */
    function getOutriggersDeployed(vehicle) {
        return AreOutriggerLegsDeployed(vehicle);
    }
    vehicle_1.getOutriggersDeployed = getOutriggersDeployed;
    /**
     * If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
     *
     * Seat indexes:
     * -1 = Driver
     * 0 = Front Right Passenger
     * 1 = Back Left Passenger
     * 2 = Back Right Passenger
     * 3 = Further Back Left Passenger (vehicles > 4 seats)
     * 4 = Further Back Right Passenger (vehicles > 4 seats)
     * etc.
     *
     * If p2 is true it uses a different GetOccupant function.
     *
     * Hash: 0xBB40DD2270B65366 | Since: 323
     */
    function getPedInSeat(vehicle, seatIndex) {
        return GetPedInVehicleSeat(vehicle, seatIndex, false);
    }
    vehicle_1.getPedInSeat = getPedInSeat;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x218297BF0CFD853B | Since: 323
     */
    function getPedUsingDoor(vehicle, doord) {
        return GetPedUsingVehicleDoor(vehicle, doord);
    }
    vehicle_1.getPedUsingDoor = getPedUsingDoor;
    /**
     * Distance traveled in the vehicles current recording.
     *
     * Hash: 0x2DACD605FC681475 | Since: 323
     */
    function getPositionInRecording(vehicle) {
        return GetPositionInRecording(vehicle);
    }
    vehicle_1.getPositionInRecording = getPositionInRecording;
    /**
     * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0xD242728AA6F0FBA2 | Since: 323
     */
    function getPositionOfRecordingAtTime(recording, time, script) {
        return new Vector3(GetPositionOfVehicleRecordingAtTime(recording, time, script));
    }
    vehicle_1.getPositionOfRecordingAtTime = getPositionOfRecordingAtTime;
    /**
     * No comment provided
     *
     * Hash: 0x92523B76657A517D | Since: 323
     */
    function getPositionOfRecordingIdAtTime(id, time) {
        return new Vector3(GetPositionOfVehicleRecordingIdAtTime(id, time));
    }
    vehicle_1.getPositionOfRecordingIdAtTime = getPositionOfRecordingIdAtTime;
    /**
     * No comment provided
     *
     * Hash: 0xB50807EABE20A8DC | Since: 323
     */
    function getRandomBackBumperInSphere() {
        return GetRandomVehicleBackBumperInSphere(0, 0, 0, 0, 0, 0, 0);
    }
    vehicle_1.getRandomBackBumperInSphere = getRandomBackBumperInSphere;
    /**
     * No comment provided
     *
     * Hash: 0xC5574E0AEB86BA68 | Since: 323
     */
    function getRandomFrontBumperInSphere() {
        return GetRandomVehicleFrontBumperInSphere(0, 0, 0, 0, 0, 0, 0);
    }
    vehicle_1.getRandomFrontBumperInSphere = getRandomFrontBumperInSphere;
    /**
     * Gets a random vehicle in a sphere at the specified position, of the specified radius.
     *
     * x: The X-component of the position of the sphere.
     * y: The Y-component of the position of the sphere.
     * z: The Z-component of the position of the sphere.
     * radius: The radius of the sphere. Max is 9999.9004.
     * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
     * flags: The bitwise flags that modifies the behaviour of this function.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x386F6CE5BAF6091C | Since: 323
     */
    function getRandomInSphere(pos, radius, modelHash, flags) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetRandomVehicleInSphere(pos.x, pos.y, pos.z, radius, modelHash, flags);
    }
    vehicle_1.getRandomInSphere = getRandomInSphere;
    /**
     * Not present in the retail version! It's just a nullsub.
     *
     * p0 always true (except in one case)
     * successIndicator: 0 if success, -1 if failed
     *
     * Hash: 0x055BF0AC0C34F4FD | Since: 323
     */
    function getRandomModelInMemory() {
        return GetRandomVehicleModelInMemory(false);
    }
    vehicle_1.getRandomModelInMemory = getRandomModelInMemory;
    /**
     * This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x2058206FBE79A8AD | Since: 323
     */
    function getRotationOfRecordingAtTime(recording, time, script) {
        return new Vector3(GetRotationOfVehicleRecordingAtTime(recording, time, script));
    }
    vehicle_1.getRotationOfRecordingAtTime = getRotationOfRecordingAtTime;
    /**
     * No comment provided
     *
     * Hash: 0xF0F2103EFAF8CBA7 | Since: 323
     */
    function getRotationOfRecordingIdAtTime(id, time) {
        return new Vector3(GetRotationOfVehicleRecordingIdAtTime(id, time));
    }
    vehicle_1.getRotationOfRecordingIdAtTime = getRotationOfRecordingIdAtTime;
    /**
     * No comment provided
     *
     * Hash: 0x3E71D0B300B7AA79 | Since: 2189
     */
    function getSubmarineIsUnderDesignDepth(submarine) {
        return GetSubmarineIsUnderDesignDepth(submarine);
    }
    vehicle_1.getSubmarineIsUnderDesignDepth = getSubmarineIsUnderDesignDepth;
    /**
     * No comment provided
     *
     * Hash: 0x093D6DDCA5B8FBAE | Since: 2189
     */
    function getSubmarineNumberOfAirLeaks(submarine) {
        return GetSubmarineNumberOfAirLeaks(submarine);
    }
    vehicle_1.getSubmarineNumberOfAirLeaks = getSubmarineNumberOfAirLeaks;
    /**
     * Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
     *
     * Hash: 0x5746F3A7AB7FE544 | Since: 323
     */
    function getTimePositionInRecording(vehicle) {
        return GetTimePositionInRecording(vehicle);
    }
    vehicle_1.getTimePositionInRecording = getTimePositionInRecording;
    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x0E48D1C262390950 | Since: 323
     */
    function getTotalDurationOfRecording(recording, script) {
        return GetTotalDurationOfVehicleRecording(recording, script);
    }
    vehicle_1.getTotalDurationOfRecording = getTotalDurationOfRecording;
    /**
     * No comment provided
     *
     * Hash: 0x102D125411A7B6E6 | Since: 323
     */
    function getTotalDurationOfRecordingId(id) {
        return GetTotalDurationOfVehicleRecordingId(id);
    }
    vehicle_1.getTotalDurationOfRecordingId = getTotalDurationOfRecordingId;
    /**
     * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
     *
     * Hash: 0x08AAFD0814722BC3 | Since: 323
     */
    function getTrainCarriage(train, trailerNumber) {
        return GetTrainCarriage(train, trailerNumber);
    }
    vehicle_1.getTrainCarriage = getTrainCarriage;
    /**
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x55EAB010FAEE9380 | Since: 1868
     */
    function getTyreHealth(vehicle, wheelIndex) {
        return GetTyreHealth(vehicle, wheelIndex);
    }
    vehicle_1.getTyreHealth = getTyreHealth;
    /**
     * Returns the multiplier value from SET_TYRE_WEAR_RATE
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x6E387895952F4F71 | Since: 2060
     */
    function getTyreWearRate(vehicle, wheelIndex) {
        return GetTyreWearMultiplier(vehicle, wheelIndex);
    }
    vehicle_1.getTyreWearRate = getTyreWearRate;
    /**
     * static - max acceleration
     *
     * Hash: 0x5DD35C8D074E57AE | Since: 323
     */
    function getAcceleration(vehicle) {
        return GetVehicleAcceleration(vehicle);
    }
    vehicle_1.getAcceleration = getAcceleration;
    /**
     * Returns attached vehicle (Vehicle in parameter must be cargobob)
     *
     * Hash: 0x873B82D42AC2B9E5 | Since: 323
     */
    function getAttachedToCargobob(cargobob) {
        return GetVehicleAttachedToCargobob(cargobob);
    }
    vehicle_1.getAttachedToCargobob = getAttachedToCargobob;
    /**
     * Seems related to vehicle health, like the one in IV.
     * Max 1000, min 0.
     * Vehicle does not necessarily explode or become undrivable at 0.
     *
     * Hash: 0xF271147EB7B40F12 | Since: 323
     */
    function getBodyHealth(vehicle) {
        return GetVehicleBodyHealth(vehicle);
    }
    vehicle_1.getBodyHealth = getBodyHealth;
    /**
     * Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
     *
     * Hash: 0xEA12BD130D7569A1 | Since: 1180
     */
    function getBombAmmo(vehicle) {
        return GetVehicleBombCount(vehicle);
    }
    vehicle_1.getBombAmmo = getBombAmmo;
    /**
     * No comment provided
     *
     * Hash: 0xA916396DF4154EE3 | Since: 944
     */
    function getCanDeployParachute(vehicle) {
        return GetVehicleCanActivateParachute(vehicle);
    }
    vehicle_1.getCanDeployParachute = getCanDeployParachute;
    /**
     * iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
     * if (iVar3 == joaat("weapon_stickybomb"))
     * {
     * func_171(726);
     * iLocal_260 = 1;
     * }
     *
     * Hash: 0xE495D1EF4C91FD20 | Since: 323
     */
    function getCauseOfDestruction(vehicle) {
        return GetVehicleCauseOfDestruction(vehicle);
    }
    vehicle_1.getCauseOfDestruction = getCauseOfDestruction;
    /**
     * Returns an int
     *
     * Vehicle Classes:
     * 0: Compacts
     * 1: Sedans
     * 2: SUVs
     * 3: Coupes
     * 4: Muscle
     * 5: Sports Classics
     * 6: Sports
     * 7: Super
     * 8: Motorcycles
     * 9: Off-road
     * 10: Industrial
     * 11: Utility
     * 12: Vans
     * 13: Cycles
     * 14: Boats
     * 15: Helicopters
     * 16: Planes
     * 17: Service
     * 18: Emergency
     * 19: Military
     * 20: Commercial
     * 21: Trains
     *
     * char buffer[128];
     * `std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));`
     *
     * `const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);`
     *
     * Hash: 0x29439776AAA00A62 | Since: 323
     */
    function getClass(vehicle) {
        return GetVehicleClass(vehicle);
    }
    vehicle_1.getClass = getClass;
    /**
     * No comment provided
     *
     * Hash: 0x00C09F246ABEDD82 | Since: 323
     */
    function getClassEstimatedMaxSpeed(vehicleClass) {
        return GetVehicleClassEstimatedMaxSpeed(vehicleClass);
    }
    vehicle_1.getClassEstimatedMaxSpeed = getClassEstimatedMaxSpeed;
    /**
     * char buffer[128];
     * `std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));`
     *
     * `const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);`
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xDEDF1C8BD47C2200 | Since: 323
     */
    function getClassFromName(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleClassFromName(modelHash);
    }
    vehicle_1.getClassFromName = getClassFromName;
    /**
     * No comment provided
     *
     * Hash: 0x2F83E7E45D9EA7AE | Since: 323
     */
    function getClassMaxAcceleration(vehicleClass) {
        return GetVehicleClassMaxAcceleration(vehicleClass);
    }
    vehicle_1.getClassMaxAcceleration = getClassMaxAcceleration;
    /**
     * No comment provided
     *
     * Hash: 0x4F930AD022D6DE3B | Since: 323
     */
    function getClassMaxAgility(vehicleClass) {
        return GetVehicleClassMaxAgility(vehicleClass);
    }
    vehicle_1.getClassMaxAgility = getClassMaxAgility;
    /**
     * No comment provided
     *
     * Hash: 0x4BF54C16EC8FEC03 | Since: 323
     */
    function getClassMaxBraking(vehicleClass) {
        return GetVehicleClassMaxBraking(vehicleClass);
    }
    vehicle_1.getClassMaxBraking = getClassMaxBraking;
    /**
     * No comment provided
     *
     * Hash: 0xDBC86D85C5059461 | Since: 323
     */
    function getClassMaxTraction(vehicleClass) {
        return GetVehicleClassMaxTraction(vehicleClass);
    }
    vehicle_1.getClassMaxTraction = getClassMaxTraction;
    /**
     * What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
     *
     * Hash: 0xF3CC740D36221548 | Since: 323
     */
    function getColor(vehicle) {
        return GetVehicleColor(vehicle);
    }
    vehicle_1.getColor = getColor;
    /**
     * No comment provided
     *
     * Hash: 0xA19435F193E081AC | Since: 323
     */
    function getColours(vehicle) {
        return GetVehicleColours(vehicle);
    }
    vehicle_1.getColours = getColours;
    /**
     * Some kind of flags.
     *
     * Hash: 0xEEBFC7A7EFDC35B4 | Since: 323
     */
    function getColoursWhichCanBeSet(vehicle) {
        return Citizen.invokeNative('0xEEBFC7A7EFDC35B4', vehicle);
    }
    vehicle_1.getColoursWhichCanBeSet = getColoursWhichCanBeSet;
    /**
     * Returns the index of the color combination found in the vehicle's carvariations.meta entry.
     *
     * Hash: 0x6A842D197F845D56 | Since: 323
     */
    function getColourCombination(vehicle) {
        return GetVehicleColourCombination(vehicle);
    }
    vehicle_1.getColourCombination = getColourCombination;
    /**
     * Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
     * Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.
     *
     * Hash: 0xF846AA63DF56B804 | Since: 1180
     */
    function getCountermeasureAmmo(vehicle) {
        return GetVehicleCountermeasureCount(vehicle);
    }
    vehicle_1.getCountermeasureAmmo = getCountermeasureAmmo;
    /**
     * Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
     *
     * Hash: 0x36492C2F0D134C56 | Since: 323
     */
    function getCurrentTimeInSlipStream(vehicle) {
        return GetVehicleCurrentSlipstreamDraft(vehicle);
    }
    vehicle_1.getCurrentTimeInSlipStream = getCurrentTimeInSlipStream;
    /**
     * No comment provided
     *
     * Hash: 0xB64CF2CCA9D95F52 | Since: 323
     */
    function getCustomPrimaryColour(vehicle) {
        return GetVehicleCustomPrimaryColour(vehicle);
    }
    vehicle_1.getCustomPrimaryColour = getCustomPrimaryColour;
    /**
     * No comment provided
     *
     * Hash: 0x8389CD56CA8072DC | Since: 323
     */
    function getCustomSecondaryColour(vehicle) {
        return GetVehicleCustomSecondaryColour(vehicle);
    }
    vehicle_1.getCustomSecondaryColour = getCustomSecondaryColour;
    /**
     * The only example I can find of this function in the scripts, is this:
     *
     * `struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);`
     *
     * -----------------------------------------------------------------------------------------------------------------------------------------
     * PC scripts:
     *
     * `v_5\/\*{3}\*\/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);`
     *
     * Hash: 0x4EC6CFBC7B2E9536 | Since: 323
     */
    function getDeformationAtPos(vehicle, offsetX, offsetY, offsetZ) {
        return new Vector3(GetVehicleDeformationAtPos(vehicle, offsetX, offsetY, offsetZ));
    }
    vehicle_1.getDeformationAtPos = getDeformationAtPos;
    /**
     * Dirt level does not become greater than 15.0
     *
     * Hash: 0x8F17BC8BA08DA62B | Since: 323
     */
    function getDirtLevel(vehicle) {
        return GetVehicleDirtLevel(vehicle);
    }
    vehicle_1.getDirtLevel = getDirtLevel;
    /**
     * No comment provided
     *
     * Hash: 0xF6AF6CB341349015 | Since: 323
     */
    function getDoorsLockedForPlayer(vehicle, player) {
        return GetVehicleDoorsLockedForPlayer(vehicle, player);
    }
    vehicle_1.getDoorsLockedForPlayer = getDoorsLockedForPlayer;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xFE3F9C29F7B32BD5 | Since: 323
     */
    function getDoorAngleRatio(vehicle, doorId) {
        return GetVehicleDoorAngleRatio(vehicle, doorId);
    }
    vehicle_1.getDoorAngleRatio = getDoorAngleRatio;
    /**
     * enum VehicleLockStatus = {
     * None = 0,
     * Unlocked = 1,
     * Locked = 2,
     * LockedForPlayer = 3,
     * StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
     * CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
     * CanBeBrokenIntoPersist = 8, -- Can be broken into persist
     * CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
     * }
     *
     * Hash: 0x25BC98A59C2EA962 | Since: 323
     */
    function getDoorLockStatus(vehicle) {
        return GetVehicleDoorLockStatus(vehicle);
    }
    vehicle_1.getDoorLockStatus = getDoorLockStatus;
    /**
     * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
     *
     * Minimum: -4000
     * Maximum: 1000
     *
     * -4000: Engine is destroyed
     * 0 and below: Engine catches fire and health rapidly declines
     * 300: Engine is smoking and losing functionality
     * 1000: Engine is perfect
     *
     * Hash: 0xC45D23BAF168AAB8 | Since: 323
     */
    function getEngineHealth(vehicle) {
        return GetVehicleEngineHealth(vehicle);
    }
    vehicle_1.getEngineHealth = getEngineHealth;
    /**
     * The result is a value from 0-1, where 0 is fresh paint.
     *
     * Hash: 0xA82819CAC9C4C403 | Since: 323
     */
    function getEnveffScale(vehicle) {
        return GetVehicleEnveffScale(vehicle);
    }
    vehicle_1.getEnveffScale = getEnveffScale;
    /**
     * No comment provided
     *
     * Hash: 0x53AF99BAA671CA47 | Since: 323
     */
    function getEstimatedMaxSpeed(vehicle) {
        return GetVehicleEstimatedMaxSpeed(vehicle);
    }
    vehicle_1.getEstimatedMaxSpeed = getEstimatedMaxSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x3BC4245933A166F7 | Since: 323
     */
    function getExtraColours(vehicle) {
        return GetVehicleExtraColours(vehicle);
    }
    vehicle_1.getExtraColours = getExtraColours;
    /**
     * No comment provided
     *
     * Hash: 0x7D1464D472D32136 | Since: 505
     */
    function getExtraColour5(vehicle) {
        return GetVehicleInteriorColor(vehicle);
    }
    vehicle_1.getExtraColour5 = getExtraColour5;
    /**
     * No comment provided
     *
     * Hash: 0xB7635E80A5C31BFF | Since: 505
     */
    function getExtraColour6(vehicle) {
        return GetVehicleDashboardColor(vehicle);
    }
    vehicle_1.getExtraColour6 = getExtraColour6;
    /**
     * No comment provided
     *
     * Hash: 0xDA62027C8BDB326E | Since: 1180
     */
    function getFlightNozzlePosition(plane) {
        return GetVehicleFlightNozzlePosition(plane);
    }
    vehicle_1.getFlightNozzlePosition = getFlightNozzlePosition;
    /**
     * Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.
     *
     * Hash: 0x50634E348C8D44EF | Since: 372
     */
    function getHasKers(vehicle) {
        return GetVehicleHasKers(vehicle);
    }
    vehicle_1.getHasKers = getHasKers;
    /**
     * No comment provided
     *
     * Hash: 0xE43701C36CAFF1A4 | Since: 1180
     */
    function getHasLandingGear(vehicle) {
        return DoesVehicleHaveLandingGear(vehicle);
    }
    vehicle_1.getHasLandingGear = getHasLandingGear;
    /**
     * No comment provided
     *
     * Hash: 0xBC9CFF381338CB4F | Since: 944
     */
    function getHasParachute(vehicle) {
        return GetVehicleHasParachute(vehicle);
    }
    vehicle_1.getHasParachute = getHasParachute;
    /**
     * 0 min 100 max
     * starts at 100
     * Seams to have health zones
     * Front of vehicle when damaged goes from 100-50 and stops at 50.
     * Rear can be damaged from 100-0
     * Only tested with two cars.
     *
     * any idea how this differs from the first one?
     *
     * --
     * May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
     *
     * example:
     *
     * `v_F = ENTITY::GET_ENTITY_MODEL(v_3);`
     * if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
     * `if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) <= 1.0) {`
     * `NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);`
     * }
     * }
     *
     * Hash: 0xB8EF61207C2393A9 | Since: 323
     */
    function getHealthPercentage(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth) {
        return GetVehicleHealthPercentage(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth);
    }
    vehicle_1.getHealthPercentage = getHealthPercentage;
    /**
     * No comment provided
     *
     * Hash: 0x6EAAEFC76ACC311F | Since: 757
     */
    function getHomingLockedontoState() {
        return Citizen.invokeNative('0x6EAAEFC76ACC311F', undefined);
    }
    vehicle_1.getHomingLockedontoState = getHomingLockedontoState;
    /**
     * Returns a value depending on the lock-on state of vehicle weapons.
     * 0: not locked on
     * 1: locking on
     * 2: locked on
     *
     * Hash: 0xE6B0E8CFC3633BF0 | Since: 323
     */
    function getHomingLockonState(vehicle) {
        return GetVehicleHomingLockonState(vehicle);
    }
    vehicle_1.getHomingLockonState = getHomingLockonState;
    /**
     * Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
     *
     * Hash: 0xCA4AC3EAAE46EC7B | Since: 1103
     */
    function getIndividualDoorLockStatus(vehicle, doorId) {
        return GetVehicleIndividualDoorLockStatus(vehicle, doorId);
    }
    vehicle_1.getIndividualDoorLockStatus = getIndividualDoorLockStatus;
    /**
     * No comment provided
     *
     * Hash: 0x8533CAFDE1F0F336 | Since: 505
     */
    function getIsDummy() {
        return Citizen.invokeNative('0x8533CAFDE1F0F336', undefined);
    }
    vehicle_1.getIsDummy = getIsDummy;
    /**
     * No comment provided
     *
     * Hash: 0xD4C4642CB7F50B5D | Since: 323
     */
    function getIsMercenary(vehicle) {
        return GetVehicleIsMercenary(vehicle);
    }
    vehicle_1.getIsMercenary = getIsMercenary;
    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x28D37D4F71AC5C58 | Since: 323
     */
    function getLayoutHash(vehicle) {
        return GetVehicleLayoutHash(vehicle);
    }
    vehicle_1.getLayoutHash = getLayoutHash;
    /**
     * No comment provided
     *
     * Hash: 0xB91B4C20085BD12F | Since: 323
     */
    function getLightsState(vehicle) {
        return GetVehicleLightsState(vehicle);
    }
    vehicle_1.getLightsState = getLightsState;
    /**
     * -1 = no livery
     *
     * Hash: 0x2BB9230590DA5E8A | Since: 323
     */
    function getLivery(vehicle) {
        return GetVehicleLivery(vehicle);
    }
    vehicle_1.getLivery = getLivery;
    /**
     * Returns index of the current vehicle's secondary livery. A getter for SET_VEHICLE_LIVERY2.
     *
     * Hash: 0x60190048C0764A26 | Since: 505
     */
    function getLivery2(vehicle) {
        return GetVehicleRoofLivery(vehicle);
    }
    vehicle_1.getLivery2 = getLivery2;
    /**
     * Returns a number of available secondary liveries, or -1 if vehicle has no secondary liveries available.
     *
     * Hash: 0x5ECB40269053C0D4 | Since: 505
     */
    function getLivery2Count(vehicle) {
        return GetVehicleRoofLiveryCount(vehicle);
    }
    vehicle_1.getLivery2Count = getLivery2Count;
    /**
     * Returns -1 if the vehicle has no livery
     *
     * Hash: 0x87B63E25A529D526 | Since: 323
     */
    function getLiveryCount(vehicle) {
        return GetVehicleLiveryCount(vehicle);
    }
    vehicle_1.getLiveryCount = getLiveryCount;
    /**
     * No comment provided
     *
     * Hash: 0x8F5EBAB1F260CFCE | Since: 323
     */
    function getLockOnTarget(vehicle) {
        return GetVehicleLockOnTarget(vehicle);
    }
    vehicle_1.getLockOnTarget = getLockOnTarget;
    /**
     * No comment provided
     *
     * Hash: 0xAD7E85FC227197C4 | Since: 323
     */
    function getMaxBraking(vehicle) {
        return GetVehicleMaxBraking(vehicle);
    }
    vehicle_1.getMaxBraking = getMaxBraking;
    /**
     * No comment provided
     *
     * Hash: 0xA7C4F2C6E744A550 | Since: 323
     */
    function getMaxNumberOfPassengers(vehicle) {
        return GetVehicleMaxNumberOfPassengers(vehicle);
    }
    vehicle_1.getMaxNumberOfPassengers = getMaxNumberOfPassengers;
    /**
     * No comment provided
     *
     * Hash: 0xA132FB5370554DB0 | Since: 323
     */
    function getMaxTraction(vehicle) {
        return GetVehicleMaxTraction(vehicle);
    }
    vehicle_1.getMaxTraction = getMaxTraction;
    /**
     * In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.
     *
     * Returns -1 if the vehicle mod is stock
     *
     * Hash: 0x772960298DA26FDB | Since: 323
     */
    function getMod(vehicle, modType) {
        return GetVehicleMod(vehicle, modType);
    }
    vehicle_1.getMod = getMod;
    /**
     * Returns the acceleration of the specified model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x8C044C5C84505B6A | Since: 323
     */
    function getModelAcceleration(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelAcceleration(modelHash);
    }
    vehicle_1.getModelAcceleration = getModelAcceleration;
    /**
     * 9.8 * thrust if air vehicle, else 0.38 + drive force?
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x53409B5163D5B846 | Since: 323
     */
    function getModelAccelerationMaxMods(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelEstimatedAgility(modelHash);
    }
    vehicle_1.getModelAccelerationMaxMods = getModelAccelerationMaxMods;
    /**
     * Returns max speed (without mods) of the specified vehicle model in m/s.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xF417C2502FFFED43 | Since: 323
     */
    function getModelEstimatedMaxSpeed(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelEstimatedMaxSpeed(modelHash);
    }
    vehicle_1.getModelEstimatedMaxSpeed = getModelEstimatedMaxSpeed;
    /**
     * Returns max braking of the specified vehicle model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xDC53FD41B4ED944C | Since: 323
     */
    function getModelMaxBraking(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelMaxBraking(modelHash);
    }
    vehicle_1.getModelMaxBraking = getModelMaxBraking;
    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0xBFBA3BA79CFF7EBF | Since: 323
     */
    function getModelMaxBrakingMaxMods(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelMaxBrakingMaxMods(modelHash);
    }
    vehicle_1.getModelMaxBrakingMaxMods = getModelMaxBrakingMaxMods;
    /**
     * Returns max traction of the specified vehicle model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x539DE94D44FDFD0D | Since: 323
     */
    function getModelMaxTraction(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelMaxTraction(modelHash);
    }
    vehicle_1.getModelMaxTraction = getModelMaxTraction;
    /**
     * Returns max number of passengers (including the driver) for the specified vehicle model.
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x2AD93716F184EDA4 | Since: 323
     */
    function getModelNumberOfSeats(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetVehicleModelNumberOfSeats(modelHash);
    }
    vehicle_1.getModelNumberOfSeats = getModelNumberOfSeats;
    /**
     * Returns `nMonetaryValue` from handling.meta for specific model.
     *
     * Hash: 0x5873C14A52D74236 | Since: 463
     */
    function getModelValue(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        return GetVehicleModelValue(vehicleModel);
    }
    vehicle_1.getModelValue = getModelValue;
    /**
     * No comment provided
     *
     * Hash: 0xE8D65CA700C9A693 | Since: 323
     */
    function getModColor1(vehicle) {
        return GetVehicleModColor1(vehicle);
    }
    vehicle_1.getModColor1 = getModColor1;
    /**
     * Returns a string which is the codename of the vehicle's currently selected primary color
     *
     * p1 is always 0
     *
     * Hash: 0xB45085B721EFD38C | Since: 323
     */
    function getModColor1Name(vehicle) {
        return GetVehicleModColor1Name(vehicle, false);
    }
    vehicle_1.getModColor1Name = getModColor1Name;
    /**
     * No comment provided
     *
     * Hash: 0x81592BE4E3878728 | Since: 323
     */
    function getModColor2(vehicle) {
        return GetVehicleModColor2(vehicle);
    }
    vehicle_1.getModColor2 = getModColor2;
    /**
     * Returns a string which is the codename of the vehicle's currently selected secondary color
     *
     * Hash: 0x4967A516ED23A5A1 | Since: 323
     */
    function getModColor2Name(vehicle) {
        return GetVehicleModColor2Name(vehicle);
    }
    vehicle_1.getModColor2Name = getModColor2Name;
    /**
     * Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH
     *
     * Hash: 0x4593CF82AA179706 | Since: 323
     */
    function getModIdentifierHash(vehicle, modType, modIndex) {
        return GetVehicleModIdentifierHash(vehicle, modType, modIndex);
    }
    vehicle_1.getModIdentifierHash = getModIdentifierHash;
    /**
     * No comment provided
     *
     * Hash: 0x6325D1A044AE510D | Since: 323
     */
    function getModKit(vehicle) {
        return GetVehicleModKit(vehicle);
    }
    vehicle_1.getModKit = getModKit;
    /**
     * No comment provided
     *
     * Hash: 0xFC058F5121E54C32 | Since: 323
     */
    function getModKitType(vehicle) {
        return GetVehicleModKitType(vehicle);
    }
    vehicle_1.getModKitType = getModKitType;
    /**
     * No comment provided
     *
     * Hash: 0x90A38E9838E0A8C1 | Since: 323
     */
    function getModModifierValue(vehicle, modType, modIndex) {
        return GetVehicleModModifierValue(vehicle, modType, modIndex);
    }
    vehicle_1.getModModifierValue = getModModifierValue;
    /**
     * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
     *
     * Hash: 0xB3924ECD70E095DC | Since: 323
     */
    function getModVariation(vehicle, modType) {
        return GetVehicleModVariation(vehicle, modType);
    }
    vehicle_1.getModVariation = getModVariation;
    /**
     * Gets the color of the neon lights of the specified vehicle.
     *
     * See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information
     *
     * Hash: 0x7619EEE8C886757F | Since: 323
     */
    function getNeonColour(vehicle) {
        return GetVehicleNeonLightsColour(vehicle);
    }
    vehicle_1.getNeonColour = getNeonColour;
    /**
     * indices:
     * 0 = Left
     * 1 = Right
     * 2 = Front
     * 3 = Back
     *
     * Hash: 0x8C4B92553E4766A5 | Since: 323
     */
    function getNeonEnabled(vehicle, index) {
        return IsVehicleNeonLightEnabled(vehicle, index);
    }
    vehicle_1.getNeonEnabled = getNeonEnabled;
    /**
     * Gets the number of passengers.
     *
     * This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.
     *
     * To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
     *
     * Hash: 0x24CB2137731FFE89 | Since: 323
     */
    function getNumberOfPassengers(vehicle, includeDriver, includeDeadOccupants) {
        return GetVehicleNumberOfPassengers(vehicle, includeDriver, includeDeadOccupants);
    }
    vehicle_1.getNumberOfPassengers = getNumberOfPassengers;
    /**
     * Returns the license plate text from a vehicle. 8 chars maximum.
     *
     * Hash: 0x7CE1CCB9B293020E | Since: 323
     */
    function getNumberPlateText(vehicle) {
        return GetVehicleNumberPlateText(vehicle);
    }
    vehicle_1.getNumberPlateText = getNumberPlateText;
    /**
     * Returns the PlateType of a vehicle
     * Blue_on_White_1 = 3,
     * Blue_on_White_2 = 0,
     * Blue_on_White_3 = 4,
     * Yellow_on_Blue = 2,
     * Yellow_on_Black = 1,
     * North_Yankton = 5,
     *
     * Hash: 0xF11BC2DD9A3E7195 | Since: 323
     */
    function getNumberPlateTextIndex(vehicle) {
        return GetVehicleNumberPlateTextIndex(vehicle);
    }
    vehicle_1.getNumberPlateTextIndex = getNumberPlateTextIndex;
    /**
     * No comment provided
     *
     * Hash: 0x2C8CBFE1EA5FC631 | Since: 323
     */
    function getNumOfBrokenLoosenParts(vehicle) {
        return GetVehicleNumberOfBrokenBones(vehicle);
    }
    vehicle_1.getNumOfBrokenLoosenParts = getNumOfBrokenLoosenParts;
    /**
     * Also includes some "turnOffBones" when vehicle mods are installed.
     *
     * Hash: 0x42A4BEB35D372407 | Since: 323
     */
    function getNumOfBrokenOffParts(vehicle) {
        return GetVehicleNumberOfBrokenOffBones(vehicle);
    }
    vehicle_1.getNumOfBrokenOffParts = getNumOfBrokenOffParts;
    /**
     * 1000 is max health
     * Begins leaking gas at around 650 health
     * -999.90002441406 appears to be minimum health, although nothing special occurs
     *
     * Hash: 0x7D5DABE888D2D074 | Since: 323
     */
    function getPetrolTankHealth(vehicle) {
        return GetVehiclePetrolTankHealth(vehicle);
    }
    vehicle_1.getPetrolTankHealth = getPetrolTankHealth;
    /**
     * No comment provided
     *
     * Hash: 0x9CCC9525BF2408E0 | Since: 323
     */
    function getPlateType(vehicle) {
        return GetVehiclePlateType(vehicle);
    }
    vehicle_1.getPlateType = getPlateType;
    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x21543C612379DB3C | Since: 323
     */
    function getRecordingId(recording, script) {
        return GetVehicleRecordingId(recording, script);
    }
    vehicle_1.getRecordingId = getRecordingId;
    /**
     * Outputs 2 Vector3's.
     * Scripts check if out2.x - out1.x > someshit.x
     * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
     *
     * Hash: 0xDF7E3EEB29642C38 | Since: 323
     */
    function getSize(vehicle) {
        return GetVehicleSuspensionBounds(vehicle);
    }
    vehicle_1.getSize = getSize;
    /**
     * Gets the trailer of a vehicle and puts it into the trailer parameter.
     *
     * Hash: 0x1CDD6BADC297830D | Since: 323
     */
    function getTrailerVehicle(vehicle) {
        return GetVehicleTrailerVehicle(vehicle);
    }
    vehicle_1.getTrailerVehicle = getTrailerVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x678B9BB8C3F58FEB | Since: 323
     */
    function getTyresCanBurst(vehicle) {
        return GetVehicleTyresCanBurst(vehicle);
    }
    vehicle_1.getTyresCanBurst = getTyresCanBurst;
    /**
     * No comment provided
     *
     * Hash: 0xB635392A4938B3C3 | Since: 323
     */
    function getTyreSmokeColor(vehicle) {
        return GetVehicleTyreSmokeColor(vehicle);
    }
    vehicle_1.getTyreSmokeColor = getTyreSmokeColor;
    /**
     * No comment provided
     *
     * Hash: 0x8181CE2F25CB9BB7 | Since: 1011
     */
    function getWeaponRestrictedAmmo(vehicle, weaponIndex) {
        return GetVehicleWeaponCapacity(vehicle, weaponIndex);
    }
    vehicle_1.getWeaponRestrictedAmmo = getWeaponRestrictedAmmo;
    /**
     * Returns an int
     *
     * Wheel Types:
     * 0: Sport
     * 1: Muscle
     * 2: Lowrider
     * 3: SUV
     * 4: Offroad
     * 5: Tuner
     * 6: Bike Wheels
     * 7: High End
     * 8: Benny's Originals
     * 9: Benny's Bespoke
     * 10: Racing
     * 11: Street
     * 12: Track
     *
     * Tested in Los Santos Customs
     *
     * Hash: 0xB3ED1BFB4BE636DC | Since: 323
     */
    function getWheelType(vehicle) {
        return GetVehicleWheelType(vehicle);
    }
    vehicle_1.getWheelType = getWheelType;
    /**
     * No comment provided
     *
     * Hash: 0x0EE21293DAD47C95 | Since: 323
     */
    function getWindowTint(vehicle) {
        return GetVehicleWindowTint(vehicle);
    }
    vehicle_1.getWindowTint = getWindowTint;
    /**
     * Returns the headlight color index from the vehicle. Value between 0, 12.
     * Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
     * Must enable xenon headlights before it'll take affect.
     *
     * Returns an int, value between 0-12 or 255 if no color is set.
     *
     * Hash: 0x3DFF319A831E0CDB | Since: 1604
     */
    function getXenonLightColorIndex(vehicle) {
        return GetVehicleXenonLightsColor(vehicle);
    }
    vehicle_1.getXenonLightColorIndex = getXenonLightColorIndex;
    /**
     * No comment provided
     *
     * Hash: 0x91D6DD290888CBAB | Since: 323
     */
    function hasInstantFillPopulationFinished() {
        return HasFilledVehiclePopulation();
    }
    vehicle_1.hasInstantFillPopulationFinished = hasInstantFillPopulationFinished;
    /**
     * No comment provided
     *
     * Hash: 0x06F43E5175EB6D96 | Since: 323
     */
    function hasPreloadModsFinished(vehicle) {
        return HasPreloadModsFinished(vehicle);
    }
    vehicle_1.hasPreloadModsFinished = hasPreloadModsFinished;
    /**
     * No comment provided
     *
     * Hash: 0x1BBE0523B8DB9A21 | Since: 323
     */
    function hasAssetLoaded(vehicleAsset) {
        return HasVehicleAssetLoaded(vehicleAsset);
    }
    vehicle_1.hasAssetLoaded = hasAssetLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x5BA68A0840D546AC | Since: 463
     */
    function hasPetroltankSetOnFireByEntity() {
        return Citizen.invokeNative('0x5BA68A0840D546AC', undefined, undefined);
    }
    vehicle_1.hasPetroltankSetOnFireByEntity = hasPetroltankSetOnFireByEntity;
    /**
     * No comment provided
     *
     * Hash: 0x6ADAABD3068C5235 | Since: 323
     */
    function hasPhoneExplosiveDevice() {
        return HasVehiclePhoneExplosiveDevice();
    }
    vehicle_1.hasPhoneExplosiveDevice = hasPhoneExplosiveDevice;
    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x300D614A4C785FC4 | Since: 323
     */
    function hasRecordingBeenLoaded(recording, script) {
        return HasVehicleRecordingBeenLoaded(recording, script);
    }
    vehicle_1.hasRecordingBeenLoaded = hasRecordingBeenLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x9A83F5F9963775EF | Since: 323
     */
    function haveModsStreamedIn(vehicle) {
        return HaveVehicleModsStreamedIn(vehicle);
    }
    vehicle_1.haveModsStreamedIn = haveModsStreamedIn;
    /**
     * No comment provided
     *
     * Hash: 0x6B407F2525E93644 | Since: 2944
     */
    function haveRearDoorsBeenBlownOpenByStickybomb(vehicle) {
        return Citizen.invokeNative('0x6B407F2525E93644', vehicle);
    }
    vehicle_1.haveRearDoorsBeenBlownOpenByStickybomb = haveRearDoorsBeenBlownOpenByStickybomb;
    /**
     * Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
     *
     * Hash: 0xAE71FB656C600587 | Since: 1604
     */
    function hideTombstone(vehicle, toggle) {
        HideVehicleTombstone(vehicle, toggle);
    }
    vehicle_1.hideTombstone = hideTombstone;
    /**
     * No comment provided
     *
     * Hash: 0x48ADC8A773564670 | Since: 323
     */
    function instantlyFillPopulation() {
        InstantlyFillVehiclePopulation();
    }
    vehicle_1.instantlyFillPopulation = instantlyFillPopulation;
    /**
     * No comment provided
     *
     * Hash: 0x62CA17B74C435651 | Since: 323
     */
    function isAnyEntityAttachedToHandlerFrame(vehicle) {
        return IsAnyEntityAttachedToHandlerFrame(vehicle);
    }
    vehicle_1.isAnyEntityAttachedToHandlerFrame = isAnyEntityAttachedToHandlerFrame;
    /**
     * No comment provided
     *
     * Hash: 0x291E373D483E7EE7 | Since: 323
     */
    function isAnyPedRappellingFromHeli(vehicle) {
        return IsAnyPedRappellingFromHeli(vehicle);
    }
    vehicle_1.isAnyPedRappellingFromHeli = isAnyPedRappellingFromHeli;
    /**
     * No comment provided
     *
     * Hash: 0x61E1DD6125A3EEE6 | Since: 323
     */
    function isAnyNearPoint(pos, radius) {
        return IsAnyVehicleNearPoint(pos.x, pos.y, pos.z, radius);
    }
    vehicle_1.isAnyNearPoint = isAnyNearPoint;
    /**
     * Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.
     *
     * Hash: 0x9F243D3919F442FE | Since: 323
     */
    function isBig(vehicle) {
        return IsBigVehicle(vehicle);
    }
    vehicle_1.isBig = isBig;
    /**
     * No comment provided
     *
     * Hash: 0xB0AD1238A709B1A2 | Since: 573
     */
    function isBoatAnchored(vehicle) {
        return IsBoatAnchored(vehicle);
    }
    vehicle_1.isBoatAnchored = isBoatAnchored;
    /**
     * Usage:
     *
     * public bool isCopInRange(Vector3 Location, float Range)
     * {
     * return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
     * }
     *
     * Hash: 0x7EEF65D5F153E26A | Since: 323
     */
    function isCopInArea3d(x1, x2, y1, y2, z1, z2) {
        return IsCopVehicleInArea3d(x1, x2, y1, y2, z1, z2);
    }
    vehicle_1.isCopInArea3d = isCopInArea3d;
    /**
     * No comment provided
     *
     * Hash: 0x57715966069157AD | Since: 323
     */
    function isEntityAttachedToHandlerFrame(vehicle, entity) {
        return IsEntityAttachedToHandlerFrame(vehicle, entity);
    }
    vehicle_1.isEntityAttachedToHandlerFrame = isEntityAttachedToHandlerFrame;
    /**
     * Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
     *
     * seatIndex  = -1 being the driver seat.
     * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
     * side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
     * onEnter = check if you can enter (true) or exit (false) a vehicle.
     *
     * Hash: 0x639431E895B9AA57 | Since: 323
     */
    function isEntryPointForSeatClear(ped, vehicle, seatIndex, side, onEnter) {
        return IsVehicleSeatAccessible(ped, vehicle, seatIndex, side, onEnter);
    }
    vehicle_1.isEntryPointForSeatClear = isEntryPointForSeatClear;
    /**
     * Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.
     *
     * Hash: 0x534E36D4DB9ECC5D | Since: 1493
     */
    function isExtraBrokenOff(vehicle, extraId) {
        return DoesVehicleTyreExist(vehicle, extraId);
    }
    vehicle_1.isExtraBrokenOff = isExtraBrokenOff;
    /**
     * No comment provided
     *
     * Hash: 0x89D630CF5EA96D23 | Since: 323
     */
    function isHandlerFrameLinedUpWithContainer(vehicle, entity) {
        return IsHandlerFrameAboveContainer(vehicle, entity);
    }
    vehicle_1.isHandlerFrameLinedUpWithContainer = isHandlerFrameLinedUpWithContainer;
    /**
     * No comment provided
     *
     * Hash: 0x634148744F385576 | Since: 323
     */
    function isHeliLandingAreaBlocked(vehicle) {
        return IsHeliLandingAreaBlocked(vehicle);
    }
    vehicle_1.isHeliLandingAreaBlocked = isHeliLandingAreaBlocked;
    /**
     * No comment provided
     *
     * Hash: 0xBC74B4BE25EB6C8A | Since: 323
     */
    function isHeliPartBroken(vehicle) {
        return IsHeliPartBroken(vehicle, false, false, false);
    }
    vehicle_1.isHeliPartBroken = isHeliPartBroken;
    /**
     * No comment provided
     *
     * Hash: 0xAD464F2E18836BFC | Since: 2372
     */
    function isMissionTrain(train) {
        return IsMissionTrain(train);
    }
    vehicle_1.isMissionTrain = isMissionTrain;
    /**
     * No comment provided
     *
     * Hash: 0x491E822B2C464FE4 | Since: 3095
     */
    function isNitrousActive(vehicle) {
        return IsNitrousActive(vehicle);
    }
    vehicle_1.isNitrousActive = isNitrousActive;
    /**
     * No comment provided
     *
     * Hash: 0xB09D25E77C33EB3F | Since: 463
     */
    function isPedExclusiveDriverOf(ped, vehicle) {
        return IsPedExclusiveDriverOfVehicle(ped, vehicle);
    }
    vehicle_1.isPedExclusiveDriverOf = isPedExclusiveDriverOf;
    /**
     * No comment provided
     *
     * Hash: 0x4198AB0022B15F87 | Since: 323
     */
    function isPlaneLandingGearIntact(plane) {
        return IsPlaneLandingGearIntact(plane);
    }
    vehicle_1.isPlaneLandingGearIntact = isPlaneLandingGearIntact;
    /**
     * No comment provided
     *
     * Hash: 0x1C8A4C2C19E68EEC | Since: 323
     */
    function isPlaybackGoingOnFor(vehicle) {
        return IsPlaybackGoingOnForVehicle(vehicle);
    }
    vehicle_1.isPlaybackGoingOnFor = isPlaybackGoingOnFor;
    /**
     * No comment provided
     *
     * Hash: 0xAEA8FD591FAD4106 | Since: 323
     */
    function isPlaybackUsingAiGoingOnFor(vehicle) {
        return IsPlaybackUsingAiGoingOnForVehicle(vehicle);
    }
    vehicle_1.isPlaybackUsingAiGoingOnFor = isPlaybackUsingAiGoingOnFor;
    /**
     * No comment provided
     *
     * Hash: 0x3D34E80EED4AE3BE | Since: 944
     */
    function isRocketBoostActive(vehicle) {
        return IsVehicleRocketBoostActive(vehicle);
    }
    vehicle_1.isRocketBoostActive = isRocketBoostActive;
    /**
     * No comment provided
     *
     * Hash: 0xF7F203E31F96F6A1 | Since: 323
     */
    function isSeatWarpOnly(vehicle, seatIndex) {
        return IsSeatWarpOnly(vehicle, seatIndex);
    }
    vehicle_1.isSeatWarpOnly = isSeatWarpOnly;
    /**
     * No comment provided
     *
     * Hash: 0x7504C0F113AB50FC | Since: 323
     */
    function isTaxiLightOn(vehicle) {
        return IsTaxiLightOn(vehicle);
    }
    vehicle_1.isTaxiLightOn = isTaxiLightOn;
    /**
     * No comment provided
     *
     * Hash: 0x633F6F44A537EBB6 | Since: 944
     */
    function isThisModelAnAmphibiousCar(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelAnAmphibiousCar(model);
    }
    vehicle_1.isThisModelAnAmphibiousCar = isThisModelAnAmphibiousCar;
    /**
     * No comment provided
     *
     * Hash: 0xA1A9FC1C76A6730D | Since: 1103
     */
    function isThisModelAnAmphibiousQuadbike(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelAnAmphibiousQuadbike(model);
    }
    vehicle_1.isThisModelAnAmphibiousQuadbike = isThisModelAnAmphibiousQuadbike;
    /**
     * No comment provided
     *
     * Hash: 0xBF94DD42F63BDED2 | Since: 323
     */
    function isThisModelABicycle(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelABicycle(model);
    }
    vehicle_1.isThisModelABicycle = isThisModelABicycle;
    /**
     * No comment provided
     *
     * Hash: 0xB50C0B0CEDC6CE84 | Since: 323
     */
    function isThisModelABike(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelABike(model);
    }
    vehicle_1.isThisModelABike = isThisModelABike;
    /**
     * No comment provided
     *
     * Hash: 0x45A9187928F4B9E3 | Since: 323
     */
    function isThisModelABoat(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelABoat(model);
    }
    vehicle_1.isThisModelABoat = isThisModelABoat;
    /**
     * To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.
     *
     * Hash: 0x7F6DB52EEFC96DF8 | Since: 323
     */
    function isThisModelACar(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelACar(model);
    }
    vehicle_1.isThisModelACar = isThisModelACar;
    /**
     * No comment provided
     *
     * Hash: 0xDCE4334788AF94EA | Since: 323
     */
    function isThisModelAHeli(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelAHeli(model);
    }
    vehicle_1.isThisModelAHeli = isThisModelAHeli;
    /**
     * Checks if model is a boat, then checks for FLAG_IS_JETSKI.
     *
     * Hash: 0x9537097412CF75FE | Since: 323
     */
    function isThisModelAJetski(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelAJetski(model);
    }
    vehicle_1.isThisModelAJetski = isThisModelAJetski;
    /**
     * No comment provided
     *
     * Hash: 0xA0948AB42D7BA0DE | Since: 323
     */
    function isThisModelAPlane(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelAPlane(model);
    }
    vehicle_1.isThisModelAPlane = isThisModelAPlane;
    /**
     * No comment provided
     *
     * Hash: 0x39DAC362EE65FA28 | Since: 323
     */
    function isThisModelAQuadbike(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelAQuadbike(model);
    }
    vehicle_1.isThisModelAQuadbike = isThisModelAQuadbike;
    /**
     * No comment provided
     *
     * Hash: 0xAB935175B22E822B | Since: 323
     */
    function isThisModelATrain(model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsThisModelATrain(model);
    }
    vehicle_1.isThisModelATrain = isThisModelATrain;
    /**
     * No comment provided
     *
     * Hash: 0x84B233A8C8FC8AE7 | Since: 323
     */
    function isToggleModOn(vehicle, modType) {
        return IsToggleModOn(vehicle, modType);
    }
    vehicle_1.isToggleModOn = isToggleModOn;
    /**
     * No comment provided
     *
     * Hash: 0xE33FFA906CE74880 | Since: 323
     */
    function isTurretSeat(vehicle, seatIndex) {
        return IsTurretSeat(vehicle, seatIndex);
    }
    vehicle_1.isTurretSeat = isTurretSeat;
    /**
     * No comment provided
     *
     * Hash: 0x4319E335B71FFF34 | Since: 323
     */
    function isAlarmActivated(vehicle) {
        return IsVehicleAlarmActivated(vehicle);
    }
    vehicle_1.isAlarmActivated = isAlarmActivated;
    /**
     * No comment provided
     *
     * Hash: 0xD40148F22E81A1D9 | Since: 323
     */
    function isAttachedToCargobob(cargobob, vehicleAttached) {
        return IsVehicleAttachedToCargobob(cargobob, vehicleAttached);
    }
    vehicle_1.isAttachedToCargobob = isAttachedToCargobob;
    /**
     * Scripts verify that towTruck is the first parameter, not the second.
     *
     * Hash: 0x146DF9EC4C4B9FD4 | Since: 323
     */
    function isAttachedToTowTruck(towTruck, vehicle) {
        return IsVehicleAttachedToTowTruck(towTruck, vehicle);
    }
    vehicle_1.isAttachedToTowTruck = isAttachedToTowTruck;
    /**
     * No comment provided
     *
     * Hash: 0xE7CF3C4F9F489F0C | Since: 323
     */
    function isAttachedToTrailer(vehicle) {
        return IsVehicleAttachedToTrailer(vehicle);
    }
    vehicle_1.isAttachedToTrailer = isAttachedToTrailer;
    /**
     * Returns true if the vehicle has a convertible roof.
     *
     * p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.
     *
     * Hash: 0x52F357A30698BCCE | Since: 323
     */
    function isAConvertible(vehicle) {
        return IsVehicleAConvertible(vehicle, false);
    }
    vehicle_1.isAConvertible = isAConvertible;
    /**
     * Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
     *
     * Hash: 0xC69BB1D832A710EF | Since: 1493
     */
    function isBeingBroughtToHalt(vehicle) {
        return IsVehicleBeingHalted(vehicle);
    }
    vehicle_1.isBeingBroughtToHalt = isBeingBroughtToHalt;
    /**
     * No comment provided
     *
     * Hash: 0x27B926779DEB502D | Since: 323
     */
    function isBumperBouncing(vehicle, frontBumper) {
        return IsVehicleBumperBouncing(vehicle, frontBumper);
    }
    vehicle_1.isBumperBouncing = isBumperBouncing;
    /**
     * No comment provided
     *
     * Hash: 0x468056A6BB6F3846 | Since: 323
     */
    function isBumperBrokenOff(vehicle, frontBumper) {
        return IsVehicleBumperBrokenOff(vehicle, frontBumper);
    }
    vehicle_1.isBumperBrokenOff = isBumperBrokenOff;
    /**
     * doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
     *
     * Hash: 0xB8E181E559464527 | Since: 323
     */
    function isDoorDamaged(veh, doorID) {
        return IsVehicleDoorDamaged(veh, doorID);
    }
    vehicle_1.isDoorDamaged = isDoorDamaged;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x3E933CFF7B111C22 | Since: 323
     */
    function isDoorFullyOpen(vehicle, doorId) {
        return IsVehicleDoorFullyOpen(vehicle, doorId);
    }
    vehicle_1.isDoorFullyOpen = isDoorFullyOpen;
    /**
     * p1 is always 0 in the scripts.
     *
     * p1 = check if vehicle is on fire
     *
     * Hash: 0x4C241E39B23DF959 | Since: 323
     */
    function isDriveable(vehicle, isOnFireCheck) {
        return IsVehicleDriveable(vehicle, isOnFireCheck);
    }
    vehicle_1.isDriveable = isDriveable;
    /**
     * No comment provided
     *
     * Hash: 0xD2E6822DBFD6C8BD | Since: 323
     */
    function isExtraTurnedOn(vehicle, extraId) {
        return IsVehicleExtraTurnedOn(vehicle, extraId);
    }
    vehicle_1.isExtraTurnedOn = isExtraTurnedOn;
    /**
     * No comment provided
     *
     * Hash: 0x1F25887F3C104278 | Since: 323
     */
    function isHighDetail(vehicle) {
        return IsVehicleHighDetail(vehicle);
    }
    vehicle_1.isHighDetail = isHighDetail;
    /**
     * Returns whether the specified vehicle is currently in a burnout.
     *
     *
     * vb.net
     * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
     * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
     * End Function
     *
     * Hash: 0x1297A88E081430EB | Since: 323
     */
    function isInBurnout(vehicle) {
        return IsVehicleInBurnout(vehicle);
    }
    vehicle_1.isInBurnout = isInBurnout;
    /**
     * garageName example "Michael - Beverly Hills"
     *
     * Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
     *
     * Hash: 0xCEE4490CD57BB3C2 | Since: 323
     */
    function isInGarageArea(garageName, vehicle) {
        return IsVehicleInGarageArea(garageName, vehicle);
    }
    vehicle_1.isInGarageArea = isInGarageArea;
    /**
     * No comment provided
     *
     * Hash: 0xA77DC70BD689A1E5 | Since: 1290
     */
    function isInSubmarineMode(vehicle) {
        return IsVehicleInSubmarineMode(vehicle);
    }
    vehicle_1.isInSubmarineMode = isInSubmarineMode;
    /**
     * No comment provided
     *
     * Hash: 0x423E8DE37D934D89 | Since: 323
     */
    function isModel(vehicle, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        return IsVehicleModel(vehicle, model);
    }
    vehicle_1.isModel = isModel;
    /**
     * Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.
     *
     * Hash: 0x00834EAC4A96E010 | Since: 2699
     */
    function isModGen9Exclusive(vehicle, modType, modIndex) {
        return IsVehicleModHswExclusive(vehicle, modType, modIndex);
    }
    vehicle_1.isModGen9Exclusive = isModGen9Exclusive;
    /**
     * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
     * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
     * End Function
     *
     *
     * Hash: 0xB104CD1BABF302E2 | Since: 323
     */
    function isOnAllWheels(vehicle) {
        return IsVehicleOnAllWheels(vehicle);
    }
    vehicle_1.isOnAllWheels = isOnAllWheels;
    /**
     * No comment provided
     *
     * Hash: 0x3DE51E9C80B116CF | Since: 1011
     */
    function isParachuteDeployed(vehicle) {
        return IsVehicleParachuteActive(vehicle);
    }
    vehicle_1.isParachuteDeployed = isParachuteDeployed;
    /**
     * Returns true if the vehicle is being slipstreamed by another vehicle
     *
     * Hash: 0x48C633E94A8142A7 | Since: 877
     */
    function isProducingSlipStream(vehicle) {
        return IsVehicleSlipstreamLeader(vehicle);
    }
    vehicle_1.isProducingSlipStream = isProducingSlipStream;
    /**
     * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
     *
     * @Author Nac
     *
     * Hash: 0xC0F97FCE55094987 | Since: 323
     */
    function isSearchlightOn(vehicle) {
        return IsVehicleSearchlightOn(vehicle);
    }
    vehicle_1.isSearchlightOn = isSearchlightOn;
    /**
     * Check if a vehicle seat is free.
     *
     * seatIndex  = -1 being the driver seat.
     * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
     * isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
     *
     * Hash: 0x22AC59A870E6A669 | Since: 323
     */
    function isSeatFree(vehicle, seatIndex, isTaskRunning) {
        return IsVehicleSeatFree(vehicle, seatIndex, isTaskRunning);
    }
    vehicle_1.isSeatFree = isSeatFree;
    /**
     * No comment provided
     *
     * Hash: 0xB5CC40FBCB586380 | Since: 323
     */
    function isSirenAudioOn(vehicle) {
        return IsVehicleSirenAudioOn(vehicle);
    }
    vehicle_1.isSirenAudioOn = isSirenAudioOn;
    /**
     * No comment provided
     *
     * Hash: 0x4C9BF537BE2634B2 | Since: 323
     */
    function isSirenOn(vehicle) {
        return IsVehicleSirenOn(vehicle);
    }
    vehicle_1.isSirenOn = isSirenOn;
    /**
     * Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
     *
     * Hash: 0x8D474C8FAEFF6CDE | Since: 323
     */
    function isSprayable(vehicle) {
        return IsVehicleSprayable(vehicle);
    }
    vehicle_1.isSprayable = isSprayable;
    /**
     * Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.
     *
     * Hash: 0x4AF9BD80EEBEB453 | Since: 323
     */
    function isStolen(vehicle) {
        return IsVehicleStolen(vehicle);
    }
    vehicle_1.isStolen = isStolen;
    /**
     * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
     *
     * For some vehicles it returns true if the current speed is <= 0.00039999999.
     *
     * Hash: 0x5721B434AD84D57A | Since: 323
     */
    function isStopped(vehicle) {
        return IsVehicleStopped(vehicle);
    }
    vehicle_1.isStopped = isStopped;
    /**
     * No comment provided
     *
     * Hash: 0x2959F696AE390A99 | Since: 323
     */
    function isStoppedAtTrafficLights(vehicle) {
        return IsVehicleStoppedAtTrafficLights(vehicle);
    }
    vehicle_1.isStoppedAtTrafficLights = isStoppedAtTrafficLights;
    /**
     * No comment provided
     *
     * Hash: 0xB497F06B288DCFDF | Since: 323
     */
    function isStuckOnRoof(vehicle) {
        return IsVehicleStuckOnRoof(vehicle);
    }
    vehicle_1.isStuckOnRoof = isStuckOnRoof;
    /**
     * p1 can be anywhere from 0 to 3 in the scripts.
     * p2 being how long in milliseconds the vehicle has been stuck
     *
     * Hash: 0x679BE1DAF71DA874 | Since: 323
     */
    function isStuckTimerUp(vehicle, ms) {
        return IsVehicleStuckTimerUp(vehicle, 0, ms);
    }
    vehicle_1.isStuckTimerUp = isStuckTimerUp;
    /**
     * wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
     * completely - is to check if tire completely gone from rim.
     *
     * '0 = wheel_lf / bike, plane or jet front
     * '1 = wheel_rf
     * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
     * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
     * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
     * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
     * '45 = 6 wheels trailer mid wheel left
     * '47 = 6 wheels trailer mid wheel right
     *
     * Hash: 0xBA291848A0815CA9 | Since: 323
     */
    function isTyreBurst(vehicle, wheelID, completely) {
        return IsVehicleTyreBurst(vehicle, wheelID, completely);
    }
    vehicle_1.isTyreBurst = isTyreBurst;
    /**
     * must be called after TRACK_VEHICLE_VISIBILITY
     *
     * it's not instant so probabilly must pass an 'update' to see correct result.
     *
     * Hash: 0xAA0A52D24FB98293 | Since: 323
     */
    function isVisible(vehicle) {
        return IsVehicleVisible(vehicle);
    }
    vehicle_1.isVisible = isVisible;
    /**
     * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x563B65A643ED072E | Since: 1011
     */
    function isWeaponDisabled(weaponHash, vehicle, owner) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsVehicleWeaponDisabled(weaponHash, vehicle, owner);
    }
    vehicle_1.isWeaponDisabled = isWeaponDisabled;
    /**
     * This will return false if the window is broken, or rolled down.
     * Window indexes:
     * 0 = Front Right Window
     * 1 = Front Left Window
     * 2 = Back Right Window
     * 3 = Back Left Window
     *
     *
     * Those numbers go on for vehicles that have more than 4 doors with windows.
     *
     * Hash: 0x46E571A0E20D01F1 | Since: 323
     */
    function isWindowIntact(vehicle, windowIndex) {
        return IsVehicleWindowIntact(vehicle, windowIndex);
    }
    vehicle_1.isWindowIntact = isWindowIntact;
    /**
     * No comment provided
     *
     * Hash: 0xCFD778E7904C255E | Since: 323
     */
    function lockDoorsWhenNoLongerNeeded(vehicle) {
        Citizen.invokeNative('0xCFD778E7904C255E', vehicle);
    }
    vehicle_1.lockDoorsWhenNoLongerNeeded = lockDoorsWhenNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0xDED51F703D0FA83D | Since: 323
     */
    function lowerConvertibleRoof(vehicle, instantlyLower) {
        LowerConvertibleRoof(vehicle, instantlyLower);
    }
    vehicle_1.lowerConvertibleRoof = lowerConvertibleRoof;
    /**
     * No comment provided
     *
     * Hash: 0x923A293361DF44E5 | Since: 2802
     */
    function lowerForkliftForks(forklift) {
        Citizen.invokeNative('0x923A293361DF44E5', forklift);
    }
    vehicle_1.lowerForkliftForks = lowerForkliftForks;
    /**
     * No comment provided
     *
     * Hash: 0x93A3996368C94158 | Since: 323
     */
    function modifyTopSpeed(vehicle, value) {
        ModifyVehicleTopSpeed(vehicle, value);
    }
    vehicle_1.modifyTopSpeed = modifyTopSpeed;
    /**
     * Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.
     *
     * Hash: 0xA4A9A4C40E615885 | Since: 1604
     */
    function networkCapEmptyCrowdingsRemoval() {
        Citizen.invokeNative('0xA4A9A4C40E615885', 0);
    }
    vehicle_1.networkCapEmptyCrowdingsRemoval = networkCapEmptyCrowdingsRemoval;
    /**
     * No comment provided
     *
     * Hash: 0x51DB102F4A3BA5E0 | Since: 323
     */
    function networkEnableEmptyCrowdingsRemoval(toggle) {
        Citizen.invokeNative('0x51DB102F4A3BA5E0', toggle);
    }
    vehicle_1.networkEnableEmptyCrowdingsRemoval = networkEnableEmptyCrowdingsRemoval;
    /**
     * Implemented only for trains.
     *
     * Hash: 0xEC0C1D4922AF9754 | Since: 2372
     */
    function networkUseHighPrecisionTrainBlending(vehicle, toggle) {
        NetworkUseHighPrecisionVehicleBlending(vehicle, toggle);
    }
    vehicle_1.networkUseHighPrecisionTrainBlending = networkUseHighPrecisionTrainBlending;
    /**
     * No comment provided
     *
     * Hash: 0x87E7F24270732CB1 | Since: 323
     */
    function openBombBayDoors(vehicle) {
        OpenBombBayDoors(vehicle);
    }
    vehicle_1.openBombBayDoors = openBombBayDoors;
    /**
     * Used for helis.
     *
     * Hash: 0x5EE5632F47AE9695 | Since: 463
     */
    function overridePlaneDamageThrehsold(vehicle, health) {
        Citizen.invokeNative('0x5EE5632F47AE9695', vehicle, health);
    }
    vehicle_1.overridePlaneDamageThrehsold = overridePlaneDamageThrehsold;
    /**
     * No comment provided
     *
     * Hash: 0x632A689BF42301B1 | Since: 323
     */
    function pausePlaybackRecorded(vehicle) {
        PausePlaybackRecordedVehicle(vehicle);
    }
    vehicle_1.pausePlaybackRecorded = pausePlaybackRecorded;
    /**
     * Pops off the "roof" bone in the direction of the specified offset from the vehicle.
     *
     * Hash: 0xE38CB9D7D39FDBCC | Since: 323
     */
    function popOffRoofWithImpulse(vehicle, pos) {
        EjectJb700Roof(vehicle, pos.x, pos.y, pos.z);
    }
    vehicle_1.popOffRoofWithImpulse = popOffRoofWithImpulse;
    /**
     * Detaches the vehicle's windscreen.
     * For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
     *
     * Hash: 0x6D645D59FB5F5AD3 | Since: 323
     */
    function popOutWindscreen(vehicle) {
        PopOutVehicleWindscreen(vehicle);
    }
    vehicle_1.popOutWindscreen = popOutWindscreen;
    /**
     * No comment provided
     *
     * Hash: 0x758F49C24925568A | Since: 323
     */
    function preloadMod(vehicle, modType, modIndex) {
        PreloadVehicleMod(vehicle, modType, modIndex);
    }
    vehicle_1.preloadMod = preloadMod;
    /**
     * No comment provided
     *
     * Hash: 0x8F5FB35D7E88FC70 | Since: 323
     */
    function raiseConvertibleRoof(vehicle, instantlyRaise) {
        RaiseConvertibleRoof(vehicle, instantlyRaise);
    }
    vehicle_1.raiseConvertibleRoof = raiseConvertibleRoof;
    /**
     * No comment provided
     *
     * Hash: 0x445D79F995508307 | Since: 323
     */
    function releasePreloadMods(vehicle) {
        ReleasePreloadMods(vehicle);
    }
    vehicle_1.releasePreloadMods = releasePreloadMods;
    /**
     * Retracts the hook on the cargobob.
     *
     * Note: after you retract it the natives for dropping the hook no longer work
     *
     * Hash: 0x9768CF648F54C804 | Since: 323
     */
    function removePickUpRopeForCargobob(cargobob) {
        RemovePickUpRopeForCargobob(cargobob);
    }
    vehicle_1.removePickUpRopeForCargobob = removePickUpRopeForCargobob;
    /**
     * No comment provided
     *
     * Hash: 0x1033371FC8E842A7 | Since: 323
     */
    function removeRoadNodeSpeedZone(speedzone) {
        return RemoveRoadNodeSpeedZone(speedzone);
    }
    vehicle_1.removeRoadNodeSpeedZone = removeRoadNodeSpeedZone;
    /**
     * No comment provided
     *
     * Hash: 0x46A1E1A299EC4BBA | Since: 323
     */
    function removesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2) {
        RemoveVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, undefined);
    }
    vehicle_1.removesFromGeneratorsInArea = removesFromGeneratorsInArea;
    /**
     * No comment provided
     *
     * Hash: 0xACE699C71AB9DEB5 | Since: 323
     */
    function removeAsset(vehicleAsset) {
        RemoveVehicleAsset(vehicleAsset);
    }
    vehicle_1.removeAsset = removeAsset;
    /**
     * No comment provided
     *
     * Hash: 0xE30524E1871F481D | Since: 323
     */
    function removeCombatAvoidanceArea() {
        RemoveVehicleCombatAvoidanceArea(0);
    }
    vehicle_1.removeCombatAvoidanceArea = removeCombatAvoidanceArea;
    /**
     * No comment provided
     *
     * Hash: 0x00689CDE5F7C6787 | Since: 323
     */
    function removeHighDetailModel(vehicle) {
        RemoveVehicleHighDetailModel(vehicle);
    }
    vehicle_1.removeHighDetailModel = removeHighDetailModel;
    /**
     * No comment provided
     *
     * Hash: 0x92D619E420858204 | Since: 323
     */
    function removeMod(vehicle, modType) {
        RemoveVehicleMod(vehicle, modType);
    }
    vehicle_1.removeMod = removeMod;
    /**
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0xF1160ACCF98A3FC8 | Since: 323
     */
    function removeRecording(recording, script) {
        RemoveVehicleRecording(recording, script);
    }
    vehicle_1.removeRecording = removeRecording;
    /**
     * No comment provided
     *
     * Hash: 0x8386BFB614D06749 | Since: 323
     */
    function removeStuckCheck(vehicle) {
        RemoveVehicleStuckCheck(vehicle);
    }
    vehicle_1.removeStuckCheck = removeStuckCheck;
    /**
     * No comment provided
     *
     * Hash: 0xC53EB42A499A7E90 | Since: 323
     */
    function removeUpsidedownCheck(vehicle) {
        RemoveVehicleUpsidedownCheck(vehicle);
    }
    vehicle_1.removeUpsidedownCheck = removeUpsidedownCheck;
    /**
     * windowIndex:
     * 0 = Front Right Window
     * 1 = Front Left Window
     * 2 = Back Right Window
     * 3 = Back Left Window
     * 4 = Unknown
     * 5 = Unknown
     * 6 = Windscreen
     * 7 = Rear Windscreen
     *
     * Hash: 0xA711568EEDB43069 | Since: 323
     */
    function removeWindow(vehicle, windowIndex) {
        RemoveVehicleWindow(vehicle, windowIndex);
    }
    vehicle_1.removeWindow = removeWindow;
    /**
     * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
     *
     * vehicle found that have asset's:
     * cargobob3
     * submersible
     * blazer
     *
     * Hash: 0x81A15811460FAB3A | Since: 323
     */
    function requestAsset(vehicleHash, vehicleAsset) {
        if (typeof vehicleHash === 'string')
            vehicleHash = misc.getHashKey(vehicleHash);
        RequestVehicleAsset(vehicleHash, vehicleAsset);
    }
    vehicle_1.requestAsset = requestAsset;
    /**
     * No comment provided
     *
     * Hash: 0xDBA3C090E3D74690 | Since: 323
     */
    function requestDial(vehicle) {
        RequestVehicleDashboardScaleformMovie(vehicle);
    }
    vehicle_1.requestDial = requestDial;
    /**
     * No comment provided
     *
     * Hash: 0xA6E9FDCB2C76785E | Since: 323
     */
    function requestHighDetailModel(vehicle) {
        RequestVehicleHighDetailModel(vehicle);
    }
    vehicle_1.requestHighDetailModel = requestHighDetailModel;
    /**
     * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
     * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
     * Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
     *
     * Hash: 0xAF514CABE74CBF15 | Since: 323
     */
    function requestRecording(recording, script) {
        RequestVehicleRecording(recording, script);
    }
    vehicle_1.requestRecording = requestRecording;
    /**
     * Resets the effect of SET_FORMATION_LEADER
     *
     * Hash: 0xE2F53F172B45EDE1 | Since: 877
     */
    function resetFormationLeader() {
        Citizen.invokeNative('0xE2F53F172B45EDE1');
    }
    vehicle_1.resetFormationLeader = resetFormationLeader;
    /**
     * The inner function has a switch on the second parameter. It's the stuck timer index.
     *
     * Here's some pseudo code I wrote for the inner function:
     * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
     * {
     * switch (timerIndex)
     * {
     * case 0:
     * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
     * case 1:
     * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
     * case 2:
     * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
     * case 3:
     * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
     * case 4:
     * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
     * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
     * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
     * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
     * break;
     * };
     * }
     *
     * Hash: 0xD7591B0065AFAA7A | Since: 323
     */
    function resetStuckTimer(vehicle, nullAttributes) {
        ResetVehicleStuckTimer(vehicle, nullAttributes);
    }
    vehicle_1.resetStuckTimer = resetStuckTimer;
    /**
     * No comment provided
     *
     * Hash: 0x21D2E5662C1F6FED | Since: 323
     */
    function resetWheels(vehicle, toggle) {
        ResetVehicleWheels(vehicle, toggle);
    }
    vehicle_1.resetWheels = resetWheels;
    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Hash: 0x7AD9E6CE657D69E3 | Since: 323
     */
    function rollDownWindow(vehicle, windowIndex) {
        RollDownWindow(vehicle, windowIndex);
    }
    vehicle_1.rollDownWindow = rollDownWindow;
    /**
     * Roll down all the windows of the vehicle passed through the first parameter.
     *
     * Hash: 0x85796B0549DDE156 | Since: 323
     */
    function rollDownWindows(vehicle) {
        RollDownWindows(vehicle);
    }
    vehicle_1.rollDownWindows = rollDownWindows;
    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Hash: 0x602E548F46E24D59 | Since: 323
     */
    function rollUpWindow(vehicle, windowIndex) {
        RollUpWindow(vehicle, windowIndex);
    }
    vehicle_1.rollUpWindow = rollUpWindow;
    /**
     * No comment provided
     *
     * Hash: 0x5845066D8A1EA7F7 | Since: 323
     */
    function setAdditionalRotationForRecordedPlayback(vehicle, pos) {
        Citizen.invokeNative('0x5845066D8A1EA7F7', vehicle, pos.x, pos.y, pos.z, undefined);
    }
    vehicle_1.setAdditionalRotationForRecordedPlayback = setAdditionalRotationForRecordedPlayback;
    /**
     * No comment provided
     *
     * Hash: 0xF8B49F5BA7F850E7 | Since: 2060
     */
    function setAircraftIgnoreHightmapOptimisation(vehicle) {
        Citizen.invokeNative('0xF8B49F5BA7F850E7', vehicle, 0);
    }
    vehicle_1.setAircraftIgnoreHightmapOptimisation = setAircraftIgnoreHightmapOptimisation;
    /**
     * No comment provided
     *
     * Hash: 0xE5810AC70602F2F5 | Since: 323
     */
    function setAircraftPilotSkillNoiseScalar(vehicle) {
        Citizen.invokeNative('0xE5810AC70602F2F5', vehicle, 0);
    }
    vehicle_1.setAircraftPilotSkillNoiseScalar = setAircraftPilotSkillNoiseScalar;
    /**
     * No comment provided
     *
     * Hash: 0x80E3357FDEF45C21 | Since: 944
     */
    function setAllowRammingSoopOrRamp() {
        Citizen.invokeNative('0x80E3357FDEF45C21', undefined, undefined);
    }
    vehicle_1.setAllowRammingSoopOrRamp = setAllowRammingSoopOrRamp;
    /**
     * No comment provided
     *
     * Hash: 0x3441CAD2F2231923 | Since: 323
     */
    function setAllowExplodesOnContact(vehicle, toggle) {
        Citizen.invokeNative('0x3441CAD2F2231923', vehicle, toggle);
    }
    vehicle_1.setAllowExplodesOnContact = setAllowExplodesOnContact;
    /**
     * No comment provided
     *
     * Hash: 0x608207E7A8FB787C | Since: 323
     */
    function setAllLowPriorityGeneratorsActive(active) {
        SetAllLowPriorityVehicleGeneratorsActive(active);
    }
    vehicle_1.setAllLowPriorityGeneratorsActive = setAllLowPriorityGeneratorsActive;
    /**
     * No comment provided
     *
     * Hash: 0x34AD89078831A4BC | Since: 323
     */
    function setAllGeneratorsActive() {
        SetAllVehicleGeneratorsActive();
    }
    vehicle_1.setAllGeneratorsActive = setAllGeneratorsActive;
    /**
     * When p6 is true, vehicle generators are active.
     * p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.
     *
     * Hash: 0xC12321827687FE4D | Since: 323
     */
    function setAllGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, toggle) {
        SetAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, toggle, false);
    }
    vehicle_1.setAllGeneratorsActiveInArea = setAllGeneratorsActiveInArea;
    /**
     * No comment provided
     *
     * Hash: 0x35E0654F4BAD7971 | Since: 323
     */
    function setAmbientNeonEnabled() {
        Citizen.invokeNative('0x35E0654F4BAD7971', false);
    }
    vehicle_1.setAmbientNeonEnabled = setAmbientNeonEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x90B6DA738A9A25DA | Since: 323
     */
    function setAmbientRangeMultiplierThisFrame(value) {
        SetAmbientVehicleRangeMultiplierThisFrame(value);
    }
    vehicle_1.setAmbientRangeMultiplierThisFrame = setAmbientRangeMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x0205F5365292D2EB | Since: 1290
     */
    function setArriveDistanceOverrideForPersuitAttack(vehicle) {
        Citizen.invokeNative('0x0205F5365292D2EB', vehicle, 0);
    }
    vehicle_1.setArriveDistanceOverrideForPersuitAttack = setArriveDistanceOverrideForPersuitAttack;
    /**
     * When enabled, the player won't fall off the bike when landing from large heights.
     *
     * Hash: 0x73561D4425A021A2 | Since: 791
     */
    function setBikeEasyToLand(vehicle, toggle) {
        Citizen.invokeNative('0x73561D4425A021A2', vehicle, toggle);
    }
    vehicle_1.setBikeEasyToLand = setBikeEasyToLand;
    /**
     * Only works on bikes, both X and Y work in the -1 - 1 range.
     *
     * X forces the bike to turn left or right (-1, 1)
     * Y forces the bike to lean to the left or to the right (-1, 1)
     *
     * Example with X -1/Y 1
     * http://i.imgur.com/TgIuAPJ.jpg
     *
     * Hash: 0x9CFA4896C3A53CBB | Since: 323
     */
    function setBikeOnStand(vehicle, x, y) {
        SetBikeOnStand(vehicle, x, y);
    }
    vehicle_1.setBikeOnStand = setBikeOnStand;
    /**
     * No comment provided
     *
     * Hash: 0x75DBEC174AEEAD10 | Since: 323
     */
    function setBoatAnchor(vehicle, toggle) {
        SetBoatAnchor(vehicle, toggle);
    }
    vehicle_1.setBoatAnchor = setBoatAnchor;
    /**
     * No comment provided
     *
     * Hash: 0x0A6A279F3AA4FD70 | Since: 323
     */
    function setBoatDisableAvoidance(vehicle) {
        SetBoatDisableAvoidance(vehicle, false);
    }
    vehicle_1.setBoatDisableAvoidance = setBoatDisableAvoidance;
    /**
     * No comment provided
     *
     * Hash: 0xED5EDE9E676643C9 | Since: 944
     */
    function setBoatIgnoreLandProbes() {
        Citizen.invokeNative('0xED5EDE9E676643C9', undefined, undefined);
    }
    vehicle_1.setBoatIgnoreLandProbes = setBoatIgnoreLandProbes;
    /**
     * No comment provided
     *
     * Hash: 0xE842A9398079BD82 | Since: 323
     */
    function setBoatLowLodAnchorDistance(vehicle, value) {
        SetBoatLowLodAnchorDistance(vehicle, value);
    }
    vehicle_1.setBoatLowLodAnchorDistance = setBoatLowLodAnchorDistance;
    /**
     * No comment provided
     *
     * Hash: 0xE3EBAAE484798530 | Since: 323
     */
    function setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle, toggle) {
        SetBoatRemainsAnchoredWhilePlayerIsDriver(vehicle, toggle);
    }
    vehicle_1.setBoatRemainsAnchoredWhilePlayerIsDriver = setBoatRemainsAnchoredWhilePlayerIsDriver;
    /**
     * No comment provided
     *
     * Hash: 0x8F719973E1445BA2 | Since: 323
     */
    function setBoatSinksWhenWrecked(vehicle, toggle) {
        SetBoatSinksWhenWrecked(vehicle, toggle);
    }
    vehicle_1.setBoatSinksWhenWrecked = setBoatSinksWhenWrecked;
    /**
     * No comment provided
     *
     * Hash: 0xBD32E46AA95C1DD2 | Since: 757
     */
    function setBoatWrecked(vehicle) {
        SetBoatIsSinking(vehicle);
    }
    vehicle_1.setBoatWrecked = setBoatWrecked;
    /**
     * No comment provided
     *
     * Hash: 0xA7DCDF4DED40A8F4 | Since: 323
     */
    function setCanAdjustGroundClearance(vehicle) {
        Citizen.invokeNative('0xA7DCDF4DED40A8F4', vehicle, false);
    }
    vehicle_1.setCanAdjustGroundClearance = setCanAdjustGroundClearance;
    /**
     * Hardcoded to not work in multiplayer.
     *
     * Hash: 0x52BBA29D5EC69356 | Since: 323
     */
    function setCanRespray(vehicle, state) {
        SetCanResprayVehicle(vehicle, state);
    }
    vehicle_1.setCanRespray = setCanRespray;
    /**
     * No comment provided
     *
     * Hash: 0x1201E8A3290A3B98 | Since: 505
     */
    function setCanUseHydraulics(vehicle, toggle) {
        SetCamberedWheelsDisabled(vehicle, toggle);
    }
    vehicle_1.setCanUseHydraulics = setCanUseHydraulics;
    /**
     * No comment provided
     *
     * Hash: 0x1F34B0626C594380 | Since: 757
     */
    function setCargobobExcludeFromPickupEntity() {
        SetCargobobExcludeFromPickupEntity(undefined, undefined);
    }
    vehicle_1.setCargobobExcludeFromPickupEntity = setCargobobExcludeFromPickupEntity;
    /**
     * No comment provided
     *
     * Hash: 0x72BECCF4B829522E | Since: 1103
     */
    function setCargobobExtaPickupRange() {
        Citizen.invokeNative('0x72BECCF4B829522E', undefined, undefined);
    }
    vehicle_1.setCargobobExtaPickupRange = setCargobobExtaPickupRange;
    /**
     * Stops cargobob from being able to detach the attached vehicle.
     *
     * Hash: 0x571FEB383F629926 | Since: 323
     */
    function setCargobobForceDontDetach(cargobob, toggle) {
        SetCargobobForceDontDetachVehicle(cargobob, toggle);
    }
    vehicle_1.setCargobobForceDontDetach = setCargobobForceDontDetach;
    /**
     * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
     *
     * Hash: 0x9A665550F8DA349B | Since: 323
     */
    function setCargobobPickupMagnetActive(cargobob, isActive) {
        SetCargobobPickupMagnetActive(cargobob, isActive);
    }
    vehicle_1.setCargobobPickupMagnetActive = setCargobobPickupMagnetActive;
    /**
     * No comment provided
     *
     * Hash: 0x56EB5E94318D3FB6 | Since: 323
     */
    function setCargobobPickupMagnetEnsurePickupEntityUpright(vehicle) {
        Citizen.invokeNative('0x56EB5E94318D3FB6', vehicle, false);
    }
    vehicle_1.setCargobobPickupMagnetEnsurePickupEntityUpright = setCargobobPickupMagnetEnsurePickupEntityUpright;
    /**
     * No comment provided
     *
     * Hash: 0xA17BAD153B51547E | Since: 323
     */
    function setCargobobPickupMagnetFalloff(cargobob) {
        SetCargobobPickupMagnetEffectRadius(cargobob, 0);
    }
    vehicle_1.setCargobobPickupMagnetFalloff = setCargobobPickupMagnetFalloff;
    /**
     * No comment provided
     *
     * Hash: 0x685D5561680D088B | Since: 323
     */
    function setCargobobPickupMagnetPullRopeLength(vehicle) {
        SetCargobobPickupMagnetFalloff(vehicle, 0);
    }
    vehicle_1.setCargobobPickupMagnetPullRopeLength = setCargobobPickupMagnetPullRopeLength;
    /**
     * No comment provided
     *
     * Hash: 0xED8286F71A819BAA | Since: 323
     */
    function setCargobobPickupMagnetPullStrength(cargobob) {
        SetCargobobPickupMagnetPullStrength(cargobob, 0);
    }
    vehicle_1.setCargobobPickupMagnetPullStrength = setCargobobPickupMagnetPullStrength;
    /**
     * No comment provided
     *
     * Hash: 0x6D8EAC07506291FB | Since: 323
     */
    function setCargobobPickupMagnetReducedFalloff(cargobob) {
        SetCargobobPickupMagnetPullRopeLength(cargobob, 0);
    }
    vehicle_1.setCargobobPickupMagnetReducedFalloff = setCargobobPickupMagnetReducedFalloff;
    /**
     * No comment provided
     *
     * Hash: 0x66979ACF5102FD2F | Since: 323
     */
    function setCargobobPickupMagnetReducedStrength(cargobob) {
        SetCargobobPickupMagnetReducedFalloff(cargobob, 0);
    }
    vehicle_1.setCargobobPickupMagnetReducedStrength = setCargobobPickupMagnetReducedStrength;
    /**
     * No comment provided
     *
     * Hash: 0x9BDDC73CC6A115D4 | Since: 323
     */
    function setCargobobPickupMagnetSetAmbientMode(vehicle) {
        Citizen.invokeNative('0x9BDDC73CC6A115D4', vehicle, false, false);
    }
    vehicle_1.setCargobobPickupMagnetSetAmbientMode = setCargobobPickupMagnetSetAmbientMode;
    /**
     * No comment provided
     *
     * Hash: 0xE301BD63E9E13CF0 | Since: 323
     */
    function setCargobobPickupMagnetSetTargetedMode(vehicle, cargobob) {
        SetCargobobPickupMagnetReducedStrength(vehicle, cargobob);
    }
    vehicle_1.setCargobobPickupMagnetSetTargetedMode = setCargobobPickupMagnetSetTargetedMode;
    /**
     * No comment provided
     *
     * Hash: 0xBCBFCD9D1DAC19E2 | Since: 323
     */
    function setCargobobPickupMagnetStrength(cargobob, strength) {
        SetCargobobPickupMagnetStrength(cargobob, strength);
    }
    vehicle_1.setCargobobPickupMagnetStrength = setCargobobPickupMagnetStrength;
    /**
     * No comment provided
     *
     * Hash: 0xCF1182F682F65307 | Since: 323
     */
    function setCargobobPickupRopeDampingMultiplier() {
        SetCargobobPickupRopeDampingMultiplier(undefined, undefined);
    }
    vehicle_1.setCargobobPickupRopeDampingMultiplier = setCargobobPickupRopeDampingMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x0D5F65A8F4EBDAB5 | Since: 1103
     */
    function setCargobobPickupRopeType() {
        SetCargobobPickupRopeType(undefined, undefined);
    }
    vehicle_1.setCargobobPickupRopeType = setCargobobPickupRopeType;
    /**
     * No comment provided
     *
     * Hash: 0xB9562064627FF9DB | Since: 573
     */
    function setCarjackMissionRemovalParameters() {
        Citizen.invokeNative('0xB9562064627FF9DB', undefined, undefined);
    }
    vehicle_1.setCarjackMissionRemovalParameters = setCarjackMissionRemovalParameters;
    /**
     * Initially used in Max Payne 3, that's why we know the name.
     *
     * Hash: 0xFC40CBF7B90CA77C | Since: 877
     */
    function setCarBootOpen(vehicle) {
        SetCarBootOpen(vehicle);
    }
    vehicle_1.setCarBootOpen = setCarBootOpen;
    /**
     * No comment provided
     *
     * Hash: 0x84FD40F56075E816 | Since: 323
     */
    function setCarHighSpeedBumpSeverityMultiplier(multiplier) {
        SetCarHighSpeedBumpSeverityMultiplier(multiplier);
    }
    vehicle_1.setCarHighSpeedBumpSeverityMultiplier = setCarHighSpeedBumpSeverityMultiplier;
    /**
     * Only used in R* Script fm_content_cargo
     *
     * Hash: 0xEF9D388F8D377F44 | Since: 2699
     */
    function setCheckForEnoughRoomForPed(vehicle) {
        Citizen.invokeNative('0xEF9D388F8D377F44', vehicle, false);
    }
    vehicle_1.setCheckForEnoughRoomForPed = setCheckForEnoughRoomForPed;
    /**
     * No comment provided
     *
     * Hash: 0xB2E0C0D6922D31F2 | Since: 944
     */
    function setClearFreezeWaitingOnCollisionOncePlayerEnters(vehicle, toggle) {
        Citizen.invokeNative('0xB2E0C0D6922D31F2', vehicle, toggle);
    }
    vehicle_1.setClearFreezeWaitingOnCollisionOncePlayerEnters = setClearFreezeWaitingOnCollisionOncePlayerEnters;
    /**
     * No comment provided
     *
     * Hash: 0xF39C4F538B5124C2 | Since: 323
     */
    function setConvertibleRoof(vehicle) {
        SetConvertibleRoof(vehicle, false);
    }
    vehicle_1.setConvertibleRoof = setConvertibleRoof;
    /**
     * No comment provided
     *
     * Hash: 0x1A78AD3D8240536F | Since: 323
     */
    function setConvertibleRoofLatchState(vehicle, state) {
        SetConvertibleRoofLatchState(vehicle, state);
    }
    vehicle_1.setConvertibleRoofLatchState = setConvertibleRoofLatchState;
    /**
     * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
     *
     * Hash: 0xB251E0B33E58B424 | Since: 1290
     */
    function setDeployFoldingWings(vehicle, deploy) {
        SetDeployHeliStubWings(vehicle, deploy, false);
    }
    vehicle_1.setDeployFoldingWings = setDeployFoldingWings;
    /**
     * No comment provided
     *
     * Hash: 0xAA653AE61924B0A0 | Since: 1290
     */
    function setDipStraightDownWhenCrashingPlane(vehicle, toggle) {
        Citizen.invokeNative('0xAA653AE61924B0A0', vehicle, toggle);
    }
    vehicle_1.setDipStraightDownWhenCrashingPlane = setDipStraightDownWhenCrashingPlane;
    /**
     * Sets a flag on heli and another vehicle type.
     *
     * Hash: 0x97841634EF7DF1D6 | Since: 1180
     */
    function setDisableAutomaticCrashTask(vehicle, toggle) {
        Citizen.invokeNative('0x97841634EF7DF1D6', vehicle, toggle);
    }
    vehicle_1.setDisableAutomaticCrashTask = setDisableAutomaticCrashTask;
    /**
     * No comment provided
     *
     * Hash: 0x26D99D5A82FD18E8 | Since: 463
     */
    function setDisableBmxExtraTrickForces() {
        SetDisableBmxExtraTrickForces(undefined);
    }
    vehicle_1.setDisableBmxExtraTrickForces = setDisableBmxExtraTrickForces;
    /**
     * No comment provided
     *
     * Hash: 0xD4196117AF7BB974 | Since: 757
     */
    function setDisableDamageWithPickedUpEntity() {
        return Citizen.invokeNative('0xD4196117AF7BB974', undefined, undefined);
    }
    vehicle_1.setDisableDamageWithPickedUpEntity = setDisableDamageWithPickedUpEntity;
    /**
     * Prevents the vehicle from exploding when taking body damage if it was caused by a collision. Only works for planes.
     *
     * Hash: 0x26E13D440E7F6064 | Since: 1290
     */
    function setDisableExplodeFromBodyDamageOnCollision(vehicle, disable) {
        SetDisableExplodeFromBodyDamageOnCollision(vehicle, disable);
    }
    vehicle_1.setDisableExplodeFromBodyDamageOnCollision = setDisableExplodeFromBodyDamageOnCollision;
    /**
     * Prevents the vehicle from exploding when taking body damage. Only works for helis and planes.
     *
     * Hash: 0xEDBC8405B3895CC9 | Since: 1103
     */
    function setDisableHeliExplodeFromBodyDamage(vehicle, disable) {
        SetDisableHeliExplodeFromBodyDamage(vehicle, disable);
    }
    vehicle_1.setDisableHeliExplodeFromBodyDamage = setDisableHeliExplodeFromBodyDamage;
    /**
     * Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
     * For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
     * For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
     * But for opressor 2 you still can fly if you somehow get back in the air.
     *
     * Hash: 0x2D55FE374D5FDB91 | Since: 1290
     */
    function setDisableHoverModeFlight(vehicle, toggle) {
        SetDisableHoverModeFlight(vehicle, toggle);
    }
    vehicle_1.setDisableHoverModeFlight = setDisableHoverModeFlight;
    /**
     * Disables collision for this vehicle (maybe it also supports other entities, not sure).
     * Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
     * Example: https://streamable.com/6n45d5
     * Not sure if there is a native (and if so, which one) that resets the collisions.
     *
     * Hash: 0x75627043C6AA90AD | Since: 1180
     */
    function setDisableMapCollision(vehicle) {
        DisableVehicleWorldCollision(vehicle);
    }
    vehicle_1.setDisableMapCollision = setDisableMapCollision;
    /**
     * No comment provided
     *
     * Hash: 0x8235F1BEAD557629 | Since: 1180
     */
    function setDisablePedStandOnTop(vehicle, toggle) {
        Citizen.invokeNative('0x8235F1BEAD557629', vehicle, toggle);
    }
    vehicle_1.setDisablePedStandOnTop = setDisablePedStandOnTop;
    /**
     * No comment provided
     *
     * Hash: 0x25367DE49D64CF16 | Since: 323
     */
    function setDisablePretendOccupants(vehicle, toggle) {
        SetDisablePretendOccupants(vehicle, toggle);
    }
    vehicle_1.setDisablePretendOccupants = setDisablePretendOccupants;
    /**
     * No comment provided
     *
     * Hash: 0xD4B8E3D1917BC86B | Since: 323
     */
    function setDisableRandomTrainsThisFrame(toggle) {
        SetDisableRandomTrainsThisFrame(toggle);
    }
    vehicle_1.setDisableRandomTrainsThisFrame = setDisableRandomTrainsThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x8F0D5BA1C2CC91D7 | Since: 1604
     */
    function setDisableRetractingWeaponBlades(toggle) {
        Citizen.invokeNative('0x8F0D5BA1C2CC91D7', toggle);
    }
    vehicle_1.setDisableRetractingWeaponBlades = setDisableRetractingWeaponBlades;
    /**
     * No comment provided
     *
     * Hash: 0xB088E9A47AE6EDD5 | Since: 323
     */
    function setDisableSuperdummy(vehicle) {
        SetDisableSuperdummyMode(vehicle, false);
    }
    vehicle_1.setDisableSuperdummy = setDisableSuperdummy;
    /**
     * Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
     *
     * Hash: 0xE615BB7A7752C76A | Since: 1365
     */
    function setDisableTurretMovement(vehicle, turretId) {
        SetDisableTurretMovementThisFrame(vehicle, turretId);
    }
    vehicle_1.setDisableTurretMovement = setDisableTurretMovement;
    /**
     * No comment provided
     *
     * Hash: 0x91A0BD635321F145 | Since: 323
     */
    function setDisableEngineFires(vehicle, toggle) {
        SetDisableVehicleEngineFires(vehicle, toggle);
    }
    vehicle_1.setDisableEngineFires = setDisableEngineFires;
    /**
     * No comment provided
     *
     * Hash: 0x143921E45EC44D62 | Since: 1604
     */
    function setDisableExplosionsDamage(toggle) {
        SetDisableVehicleUnk(toggle);
    }
    vehicle_1.setDisableExplosionsDamage = setDisableExplosionsDamage;
    /**
     * No comment provided
     *
     * Hash: 0x37C8252A7C92D017 | Since: 323
     */
    function setDisablePetrolTankDamage(vehicle, toggle) {
        SetDisableVehiclePetrolTankDamage(vehicle, toggle);
    }
    vehicle_1.setDisablePetrolTankDamage = setDisablePetrolTankDamage;
    /**
     * No comment provided
     *
     * Hash: 0x465BF26AB9684352 | Since: 323
     */
    function setDisablePetrolTankFires(vehicle, toggle) {
        SetDisableVehiclePetrolTankFires(vehicle, toggle);
    }
    vehicle_1.setDisablePetrolTankFires = setDisablePetrolTankFires;
    /**
     * True stops vtols from switching modes. Doesn't stop the sound though.
     *
     * Hash: 0xCE2B43770B655F8F | Since: 1290
     */
    function setDisableVerticalFlightModeTransition(vehicle, toggle) {
        SetDisableVehicleFlightNozzlePosition(vehicle, toggle);
    }
    vehicle_1.setDisableVerticalFlightModeTransition = setDisableVerticalFlightModeTransition;
    /**
     * No comment provided
     *
     * Hash: 0x4AD280EB48B2D8E6 | Since: 1868
     */
    function setDisableWantedConesResponse(vehicle, toggle) {
        Citizen.invokeNative('0x4AD280EB48B2D8E6', vehicle, toggle);
    }
    vehicle_1.setDisableWantedConesResponse = setDisableWantedConesResponse;
    /**
     * Sets some global vehicle related bool
     *
     * Hash: 0x211E95CE9903940C | Since: 1604
     */
    function setDisableWeaponBladeForces(toggle) {
        SetDisableVehicleUnk2(toggle);
    }
    vehicle_1.setDisableWeaponBladeForces = setDisableWeaponBladeForces;
    /**
     * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
     *
     * Hash: 0xF796359A959DF65D | Since: 323
     */
    function setDistantCarsEnabled(toggle) {
        SetDistantCarsEnabled(toggle);
    }
    vehicle_1.setDistantCarsEnabled = setDistantCarsEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xDBC631F109350B8C | Since: 323
     */
    function setDontAllowPlayerToEnterIfLockedForPlayer(vehicle) {
        Citizen.invokeNative('0xDBC631F109350B8C', vehicle, false);
    }
    vehicle_1.setDontAllowPlayerToEnterIfLockedForPlayer = setDontAllowPlayerToEnterIfLockedForPlayer;
    /**
     * R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
     *
     * Hash: 0x1087BC8EC540DAEB | Since: 1103
     */
    function setDontProcessGlass(vehicle, toggle) {
        SetDisableVehicleWindowCollisions(vehicle, toggle);
    }
    vehicle_1.setDontProcessGlass = setDontProcessGlass;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x2FA133A4A9D37ED8 | Since: 323
     */
    function setDoorAllowedToBeBrokenOff(vehicle, doorId, isBreakable) {
        SetVehicleDoorCanBreak(vehicle, doorId, isBreakable);
    }
    vehicle_1.setDoorAllowedToBeBrokenOff = setDoorAllowedToBeBrokenOff;
    /**
     * No comment provided
     *
     * Hash: 0x5AC79C98C5C17F05 | Since: 2372
     */
    function setDriftTyres(vehicle, toggle) {
        SetDriftTyresEnabled(vehicle, toggle);
    }
    vehicle_1.setDriftTyres = setDriftTyres;
    /**
     * Enable/Disables global slipstream physics
     *
     * Hash: 0xE6C0C80B8C867537 | Since: 323
     */
    function setEnableSlipstreaming(toggle) {
        SetEnableVehicleSlipstreaming(toggle);
    }
    vehicle_1.setEnableSlipstreaming = setEnableSlipstreaming;
    /**
     * No comment provided
     *
     * Hash: 0x26324F33423F3CC3 | Since: 323
     */
    function setFarDraws(toggle) {
        SetFarDrawVehicles(toggle);
    }
    vehicle_1.setFarDraws = setFarDraws;
    /**
     * No comment provided
     *
     * Hash: 0xA247F9EF01D8082E | Since: 1103
     */
    function setFleeingsUseSwitchedOffNodes() {
        Citizen.invokeNative('0xA247F9EF01D8082E', undefined);
    }
    vehicle_1.setFleeingsUseSwitchedOffNodes = setFleeingsUseSwitchedOffNodes;
    /**
     * No comment provided
     *
     * Hash: 0x887FA38787DE8C72 | Since: 1365
     */
    function setForceFixLinkMatrices(vehicle) {
        Citizen.invokeNative('0x887FA38787DE8C72', vehicle);
    }
    vehicle_1.setForceFixLinkMatrices = setForceFixLinkMatrices;
    /**
     * No comment provided
     *
     * Hash: 0x97CE68CB032583F0 | Since: 323
     */
    function setForceHd(vehicle, toggle) {
        SetForceHdVehicle(vehicle, toggle);
    }
    vehicle_1.setForceHd = setForceHd;
    /**
     * No observed effect.
     *
     * Hash: 0xB28B1FE5BFADD7F5 | Since: 323
     */
    function setForceLowLodAnchorMode(vehicle) {
        SetForceLowLodAnchorMode(vehicle, false);
    }
    vehicle_1.setForceLowLodAnchorMode = setForceLowLodAnchorMode;
    /**
     * No comment provided
     *
     * Hash: 0x4D9D109F63FEE1D4 | Since: 323
     */
    function setForceEngineDamageByBullet() {
        Citizen.invokeNative('0x4D9D109F63FEE1D4', undefined, false);
    }
    vehicle_1.setForceEngineDamageByBullet = setForceEngineDamageByBullet;
    /**
     * 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
     *
     * Hash: 0x37EBBF3117BD6A25 | Since: 323
     */
    function setForkliftForkHeight(vehicle, height) {
        SetForkliftForkHeight(vehicle, height);
    }
    vehicle_1.setForkliftForkHeight = setForkliftForkHeight;
    /**
     * No comment provided
     *
     * Hash: 0x428AD3E26C8D9EB0 | Since: 877
     */
    function setFormationLeader(vehicle, pos) {
        Citizen.invokeNative('0x428AD3E26C8D9EB0', vehicle, pos.x, pos.y, pos.z, 0);
    }
    vehicle_1.setFormationLeader = setFormationLeader;
    /**
     * No comment provided
     *
     * Hash: 0x2AFD795EEAC8D30D | Since: 323
     */
    function setGarbageTrucks(toggle) {
        SetGarbageTrucks(toggle);
    }
    vehicle_1.setGarbageTrucks = setGarbageTrucks;
    /**
     * Set state to true to extend the wings, false to retract them.
     *
     * Hash: 0x544996C0081ABDEB | Since: 1103
     */
    function setGliderActive(vehicle, state) {
        SetOppressorTransformState(vehicle, state);
    }
    vehicle_1.setGliderActive = setGliderActive;
    /**
     * No comment provided
     *
     * Hash: 0xFAF2A78061FD9EF4 | Since: 323
     */
    function setGlobalPositionOffsetForRecordedPlayback(vehicle, pos) {
        Citizen.invokeNative('0xFAF2A78061FD9EF4', vehicle, pos.x, pos.y, pos.z);
    }
    vehicle_1.setGlobalPositionOffsetForRecordedPlayback = setGlobalPositionOffsetForRecordedPlayback;
    /**
     * Used for GTAO CEO/Associate spawned vehicles.
     *
     * Hash: 0xAB31EF4DE6800CE9 | Since: 573
     */
    function setGoonBoss(vehicle, toggle) {
        Citizen.invokeNative('0xAB31EF4DE6800CE9', vehicle, toggle);
    }
    vehicle_1.setGoonBoss = setGoonBoss;
    /**
     * No comment provided
     *
     * Hash: 0x430A7631A84C9BE7 | Since: 1180
     */
    function setGroundEffectReducesDrag(toggle) {
        Citizen.invokeNative('0x430A7631A84C9BE7', toggle);
    }
    vehicle_1.setGroundEffectReducesDrag = setGroundEffectReducesDrag;
    /**
     * Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
     *
     * Hash: 0xA178472EBB8AE60D | Since: 323
     */
    function setHeliBladesFullSpeed(vehicle) {
        SetHeliBladesFullSpeed(vehicle);
    }
    vehicle_1.setHeliBladesFullSpeed = setHeliBladesFullSpeed;
    /**
     * Sets the speed of the helicopter blades in percentage of the full speed.
     *
     * vehicleHandle: The helicopter.
     * speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
     *
     * Hash: 0xFD280B4D7F3ABC4D | Since: 323
     */
    function setHeliBladesSpeed(vehicle, speed) {
        SetHeliBladesSpeed(vehicle, speed);
    }
    vehicle_1.setHeliBladesSpeed = setHeliBladesSpeed;
    /**
     * Stops the cargobob from being able to attach any vehicle
     *
     * Hash: 0x94A68DA412C4007D | Since: 1180
     */
    function setHeliCanPickupEntityThatHasPickUpDisabled(vehicle, toggle) {
        SetCargobobHookCanAttach(vehicle, toggle);
    }
    vehicle_1.setHeliCanPickupEntityThatHasPickUpDisabled = setHeliCanPickupEntityThatHasPickUpDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x0A3F820A9A9A9AC5 | Since: 1180
     */
    function setHeliCombatOffset(vehicle, pos) {
        SetHeliCombatOffset(vehicle, pos.x, pos.y, pos.z);
    }
    vehicle_1.setHeliCombatOffset = setHeliCombatOffset;
    /**
     * value between 0.0 and 1.0
     *
     * Hash: 0x6E0859B530A365CC | Since: 323
     */
    function setHeliControlLaggingRateScalar(helicopter, multiplier) {
        SetHelicopterRollPitchYawMult(helicopter, multiplier);
    }
    vehicle_1.setHeliControlLaggingRateScalar = setHeliControlLaggingRateScalar;
    /**
     * No comment provided
     *
     * Hash: 0x4056EA1105F5ABD7 | Since: 463
     */
    function setHeliMainRotorHealth(vehicle, health) {
        SetHeliMainRotorHealth(vehicle, health);
    }
    vehicle_1.setHeliMainRotorHealth = setHeliMainRotorHealth;
    /**
     * No comment provided
     *
     * Hash: 0x8074CC1886802912 | Since: 2545
     */
    function setHeliResistToExplosion(vehicle, toggle) {
        SetHeliResistToExplosion(vehicle, toggle);
    }
    vehicle_1.setHeliResistToExplosion = setHeliResistToExplosion;
    /**
     * No comment provided
     *
     * Hash: 0x3EC8BF18AA453FE9 | Since: 323
     */
    function setHeliTailBoomCanBreakOff(vehicle, toggle) {
        return SetHeliTailBoomCanBreakOff(vehicle, toggle);
    }
    vehicle_1.setHeliTailBoomCanBreakOff = setHeliTailBoomCanBreakOff;
    /**
     * No comment provided
     *
     * Hash: 0xFE205F38AAA58E5B | Since: 463
     */
    function setHeliTailRotorHealth(vehicle, health) {
        SetHeliTailRotorHealth(vehicle, health);
    }
    vehicle_1.setHeliTailRotorHealth = setHeliTailRotorHealth;
    /**
     * No comment provided
     *
     * Hash: 0xE6F13851780394DA | Since: 323
     */
    function setHeliTurbulenceScalar(vehicle) {
        SetHeliTurbulenceScalar(vehicle, 0);
    }
    vehicle_1.setHeliTurbulenceScalar = setHeliTurbulenceScalar;
    /**
     * No comment provided
     *
     * Hash: 0x70A252F60A3E036B | Since: 1365
     */
    function setHoverModeWingRatio(vehicle, ratio) {
        SetHoverModeWingRatio(vehicle, ratio);
    }
    vehicle_1.setHoverModeWingRatio = setHoverModeWingRatio;
    /**
     * If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.
     *
     * Only used once in each carmod script, on a car that does not have hydraulics to begin with.
     *
     * Hash: 0x28B18377EB6E25F6 | Since: 505
     */
    function setHydraulicsControl(vehicle, toggle) {
        SetHydraulicRaised(vehicle, toggle);
    }
    vehicle_1.setHydraulicsControl = setHydraulicsControl;
    /**
     * Works only on vehicles that support hydraulics.
     *
     * Hash: 0x84EA99C62CB3EF0C | Since: 505
     */
    function setHydraulicSuspensionRaiseFactor(vehicle, wheelId, value) {
        SetHydraulicWheelValue(vehicle, wheelId, value);
    }
    vehicle_1.setHydraulicSuspensionRaiseFactor = setHydraulicSuspensionRaiseFactor;
    /**
     * States:
     * 4 = raise
     * 5 = lower
     * 6 = jump
     *
     * Hash: 0x8EA86DF356801C7D | Since: 505
     */
    function setHydraulicState(vehicle, state) {
        SetHydraulicWheelState(vehicle, state);
    }
    vehicle_1.setHydraulicState = setHydraulicState;
    /**
     * Sets vehicle wheel hydraulic states transition. Known states:
     * 0 - reset
     * 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
     * 2 - jump using wheel
     *
     * Hash: 0xC24075310A8B9CD1 | Since: 505
     */
    function setHydraulicWheelState(vehicle, wheelId, state, value) {
        SetHydraulicWheelStateTransition(vehicle, wheelId, state, value, undefined);
    }
    vehicle_1.setHydraulicWheelState = setHydraulicWheelState;
    /**
     * No comment provided
     *
     * Hash: 0x8664170EF165C4A6 | Since: 2189
     */
    function setIgnorePlanesSmallPitchChange() {
        Citizen.invokeNative('0x8664170EF165C4A6', undefined, undefined);
    }
    vehicle_1.setIgnorePlanesSmallPitchChange = setIgnorePlanesSmallPitchChange;
    /**
     * No comment provided
     *
     * Hash: 0x2970EAA18FD5E42F | Since: 1604
     */
    function setIncreaseWheelCrushDamage(vehicle, toggle) {
        SetVehicleWheelsDealDamage(vehicle, toggle);
    }
    vehicle_1.setIncreaseWheelCrushDamage = setIncreaseWheelCrushDamage;
    /**
     * Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
     * Doesn't work for planes/helis.
     *
     * Hash: 0x5B91B229243351A8 | Since: 791
     */
    function setInvertControls(vehicle, state) {
        SetVehicleControlsInverted(vehicle, state);
    }
    vehicle_1.setInvertControls = setInvertControls;
    /**
     * No comment provided
     *
     * Hash: 0xACFB2463CC22BED2 | Since: 323
     */
    function setLastDriven(vehicle) {
        SetLastDrivenVehicle(vehicle);
    }
    vehicle_1.setLastDriven = setLastDriven;
    /**
     * No comment provided
     *
     * Hash: 0xBC3CCA5844452B06 | Since: 323
     */
    function setLightsCutoffDistanceTweak(distance) {
        SetLightsCutoffDistanceTweak(distance);
    }
    vehicle_1.setLightsCutoffDistanceTweak = setLightsCutoffDistanceTweak;
    /**
     * p1 is always 0
     *
     * Hash: 0xBBE7648349B49BE8 | Since: 323
     */
    function setMissionTrainAsNoLongerNeeded(train) {
        SetMissionTrainAsNoLongerNeeded(train, false);
    }
    vehicle_1.setMissionTrainAsNoLongerNeeded = setMissionTrainAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x591CA673AA6AB736 | Since: 323
     */
    function setMissionTrainCoords(train, pos) {
        SetMissionTrainCoords(train, pos.x, pos.y, pos.z);
    }
    vehicle_1.setMissionTrainCoords = setMissionTrainCoords;
    /**
     * No comment provided
     *
     * Hash: 0x9E566EA551F4F1A6 | Since: 3407
     */
    function setNitrousIsActive(vehicle, toggle) {
        Citizen.invokeNative('0x9E566EA551F4F1A6', vehicle, toggle);
    }
    vehicle_1.setNitrousIsActive = setNitrousIsActive;
    /**
     * No comment provided
     *
     * Hash: 0xCAA15F13EBD417FF | Since: 323
     */
    function setNumberOfParkeds(value) {
        SetNumberOfParkedVehicles(value);
    }
    vehicle_1.setNumberOfParkeds = setNumberOfParkeds;
    /**
     * No comment provided
     *
     * Hash: 0x1B212B26DD3C04DF | Since: 757
     */
    function setOpenRearDoorsOnExplosion(vehicle, toggle) {
        SetOpenRearDoorsOnExplosion(vehicle, toggle);
    }
    vehicle_1.setOpenRearDoorsOnExplosion = setOpenRearDoorsOnExplosion;
    /**
     * No comment provided
     *
     * Hash: 0xC8E9B6B71B8E660D | Since: 1604
     */
    function setOverrideNitrousLevel(vehicle, toggle, level, power, rechargeTime, disableSound) {
        SetOverrideNitrousLevel(vehicle, toggle, level, power, rechargeTime, disableSound);
    }
    vehicle_1.setOverrideNitrousLevel = setOverrideNitrousLevel;
    /**
     * No comment provided
     *
     * Hash: 0x66E3AAFACE2D1EB8 | Since: 1103
     */
    function setOverrideDoorTorque() {
        Citizen.invokeNative('0x66E3AAFACE2D1EB8', undefined, undefined, undefined);
    }
    vehicle_1.setOverrideDoorTorque = setOverrideDoorTorque;
    /**
     * No comment provided
     *
     * Hash: 0xEAE6DCC7EEE3DB1D | Since: 323
     */
    function setParkedDensityMultiplierThisFrame(multiplier) {
        SetParkedVehicleDensityMultiplierThisFrame(multiplier);
    }
    vehicle_1.setParkedDensityMultiplierThisFrame = setParkedDensityMultiplierThisFrame;
    /**
     * Sets some bit and float of vehicle. float is >= 0
     *
     * Hash: 0x59C3757B3B7408E8 | Since: 1493
     */
    function setPedsCanFallOffThisFromLargeFallDamage(vehicle, toggle) {
        Citizen.invokeNative('0x59C3757B3B7408E8', vehicle, toggle, 0);
    }
    vehicle_1.setPedsCanFallOffThisFromLargeFallDamage = setPedsCanFallOffThisFromLargeFallDamage;
    /**
     * min: 1.9f, max: 100.0f
     *
     * Hash: 0x877C1EAEAC531023 | Since: 323
     */
    function setPickupRopeLengthForCargobob(cargobob, length1, length2) {
        SetPickupRopeLengthForCargobob(cargobob, length1, length2, false);
    }
    vehicle_1.setPickupRopeLengthForCargobob = setPickupRopeLengthForCargobob;
    /**
     * No comment provided
     *
     * Hash: 0xC0ED6438E6D39BA8 | Since: 944
     */
    function setPickupRopeLengthWithoutCreatingRopeForCargobob() {
        Citizen.invokeNative('0xC0ED6438E6D39BA8', undefined, undefined, undefined);
    }
    vehicle_1.setPickupRopeLengthWithoutCreatingRopeForCargobob = setPickupRopeLengthWithoutCreatingRopeForCargobob;
    /**
     * No comment provided
     *
     * Hash: 0xDD8A2D3337F04196 | Since: 3407
     */
    function setPlaneControlSectionsShouldBreakOffFromExplosions(vehicle, toggle) {
        Citizen.invokeNative('0xDD8A2D3337F04196', vehicle, toggle);
    }
    vehicle_1.setPlaneControlSectionsShouldBreakOffFromExplosions = setPlaneControlSectionsShouldBreakOffFromExplosions;
    /**
     * Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.
     *
     * Hash: 0x2A86A0475B6A1434 | Since: 1103
     */
    function setPlaneEngineHealth(vehicle, health) {
        SetPlaneEngineHealth(vehicle, health);
    }
    vehicle_1.setPlaneEngineHealth = setPlaneEngineHealth;
    /**
     * No comment provided
     *
     * Hash: 0x4C815EB175086F84 | Since: 1103
     */
    function setPlanePropellerHealth(plane, health) {
        return SetPlanePropellersHealth(plane, health);
    }
    vehicle_1.setPlanePropellerHealth = setPlanePropellerHealth;
    /**
     * No comment provided
     *
     * Hash: 0xE16142B94664DEFD | Since: 323
     */
    function setPlaneResistToExplosion(vehicle, toggle) {
        SetPlaneResistToExplosion(vehicle, toggle);
    }
    vehicle_1.setPlaneResistToExplosion = setPlaneResistToExplosion;
    /**
     * No comment provided
     *
     * Hash: 0x0BBB9A7A8FFE931B | Since: 1290
     */
    function setPlaneSectionDamageScale(vehicle) {
        SetPlaneSectionDamageScale(vehicle, undefined, undefined);
    }
    vehicle_1.setPlaneSectionDamageScale = setPlaneSectionDamageScale;
    /**
     * This native sets the turbulence multiplier. It only works for planes.
     * 0.0 = no turbulence at all.
     * 1.0 = heavy turbulence.
     * Works by just calling it once, does not need to be called every tick.
     *
     * Hash: 0xAD2D28A1AFDFF131 | Since: 323
     */
    function setPlaneTurbulenceMultiplier(vehicle, multiplier) {
        SetPlaneTurbulenceMultiplier(vehicle, multiplier);
    }
    vehicle_1.setPlaneTurbulenceMultiplier = setPlaneTurbulenceMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x6683AB880E427778 | Since: 323
     */
    function setPlaybackSpeed(vehicle, speed) {
        SetPlaybackSpeed(vehicle, speed);
    }
    vehicle_1.setPlaybackSpeed = setPlaybackSpeed;
    /**
     * Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
     *
     * Hash: 0xA549C3B37EA28131 | Since: 323
     */
    function setPlaybackToUseAi(vehicle, drivingStyle) {
        SetPlaybackToUseAi(vehicle, drivingStyle);
    }
    vehicle_1.setPlaybackToUseAi = setPlaybackToUseAi;
    /**
     * Time is number of milliseconds before reverting, zero for indefinitely.
     *
     * Hash: 0x6E63860BBB190730 | Since: 323
     */
    function setPlaybackToUseAiTryToRevertBackLater(vehicle, time, drivingStyle) {
        SetPlaybackToUseAiTryToRevertBackLater(vehicle, time, drivingStyle, false);
    }
    vehicle_1.setPlaybackToUseAiTryToRevertBackLater = setPlaybackToUseAiTryToRevertBackLater;
    /**
     * No comment provided
     *
     * Hash: 0xBCDF8BAF56C87B6A | Since: 323
     */
    function setPlayersLast(vehicle) {
        SetPlayersLastVehicle(vehicle);
    }
    vehicle_1.setPlayersLast = setPlayersLast;
    /**
     * No comment provided
     *
     * Hash: 0x4E74E62E0A97E901 | Since: 323
     */
    function setPoliceFocusWillTrack(vehicle, toggle) {
        SetPoliceFocusWillTrackVehicle(vehicle, toggle);
    }
    vehicle_1.setPoliceFocusWillTrack = setPoliceFocusWillTrack;
    /**
     * No comment provided
     *
     * Hash: 0x796A877E459B99EA | Since: 323
     */
    function setPositionOffsetForRecordedPlayback(vehicle, pos) {
        Citizen.invokeNative('0x796A877E459B99EA', vehicle, pos.x, pos.y, pos.z);
    }
    vehicle_1.setPositionOffsetForRecordedPlayback = setPositionOffsetForRecordedPlayback;
    /**
     * No comment provided
     *
     * Hash: 0x84436EC293B1415F | Since: 323
     */
    function setRandomBoats(toggle) {
        SetRandomBoats(toggle);
    }
    vehicle_1.setRandomBoats = setRandomBoats;
    /**
     * No comment provided
     *
     * Hash: 0xDA5E12F728DB30CA | Since: 2372
     */
    function setRandomBoatsMp(toggle) {
        SetRandomBoatsInMp(toggle);
    }
    vehicle_1.setRandomBoatsMp = setRandomBoatsMp;
    /**
     * No comment provided
     *
     * Hash: 0x80D9F74197EA47D9 | Since: 323
     */
    function setRandomTrains(toggle) {
        SetRandomTrains(toggle);
    }
    vehicle_1.setRandomTrains = setRandomTrains;
    /**
     * No comment provided
     *
     * Hash: 0xB3B3359379FE77D3 | Since: 323
     */
    function setRandomDensityMultiplierThisFrame(multiplier) {
        SetRandomVehicleDensityMultiplierThisFrame(multiplier);
    }
    vehicle_1.setRandomDensityMultiplierThisFrame = setRandomDensityMultiplierThisFrame;
    /**
     * Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.
     *
     * Hash: 0x3A375167F5782A65 | Since: 2372
     */
    function setReducedSuspensionForce(vehicle, enable) {
        SetReduceDriftVehicleSuspension(vehicle, enable);
    }
    vehicle_1.setReducedSuspensionForce = setReducedSuspensionForce;
    /**
     * Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
     *
     * Hash: 0x317B11A312DF5534 | Since: 323
     */
    function setRenderTrainAsDerailed(train, toggle) {
        SetRenderTrainAsDerailed(train, toggle);
    }
    vehicle_1.setRenderTrainAsDerailed = setRenderTrainAsDerailed;
    /**
     * No comment provided
     *
     * Hash: 0x81E1552E35DC3839 | Since: 944
     */
    function setRocketBoostActive(vehicle, active) {
        SetVehicleRocketBoostActive(vehicle, active);
    }
    vehicle_1.setRocketBoostActive = setRocketBoostActive;
    /**
     * No comment provided
     *
     * Hash: 0xFEB2DDED3509562E | Since: 1103
     */
    function setRocketBoostFill(vehicle, percentage) {
        SetVehicleRocketBoostPercentage(vehicle, percentage);
    }
    vehicle_1.setRocketBoostFill = setRocketBoostFill;
    /**
     * No comment provided
     *
     * Hash: 0xEFC13B1CE30D755D | Since: 944
     */
    function setScriptRampImpulseScale(vehicle, impulseScale) {
        SetVehicleRampLaunchModifier(vehicle, impulseScale);
    }
    vehicle_1.setScriptRampImpulseScale = setScriptRampImpulseScale;
    /**
     * No comment provided
     *
     * Hash: 0xE00F2AB100B76E89 | Since: 944
     */
    function setScriptRocketBoostRechargeTime(vehicle, seconds) {
        SetVehicleRocketBoostRefillTime(vehicle, seconds);
    }
    vehicle_1.setScriptRocketBoostRechargeTime = setScriptRocketBoostRechargeTime;
    /**
     * Only called once in the decompiled scripts. Presumably activates the specified generator.
     *
     * Hash: 0xD9D620E0AC6DC4B0 | Since: 323
     */
    function setScriptGenerator(vehicleGenerator, enabled) {
        SetScriptVehicleGenerator(vehicleGenerator, enabled);
    }
    vehicle_1.setScriptGenerator = setScriptGenerator;
    /**
     * Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
     *
     * Hash: 0x107A473D7A6647A9 | Since: 1290
     */
    function setShortSlowdownForLanding(vehicle) {
        Citizen.invokeNative('0x107A473D7A6647A9', vehicle);
    }
    vehicle_1.setShortSlowdownForLanding = setShortSlowdownForLanding;
    /**
     * A vehicle recording playback flag only used in jewelry_heist
     *
     * Hash: 0x063AE2B2CC273588 | Since: 323
     */
    function setShouldLerpFromAiToFullRecording(vehicle) {
        Citizen.invokeNative('0x063AE2B2CC273588', vehicle, false);
    }
    vehicle_1.setShouldLerpFromAiToFullRecording = setShouldLerpFromAiToFullRecording;
    /**
     * Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped.
     *
     * Hash: 0x78CEEE41F49F421F | Since: 1103
     */
    function setShouldResetTurretInScriptedCameras(vehicle, shouldReset) {
        Citizen.invokeNative('0x78CEEE41F49F421F', vehicle, shouldReset);
    }
    vehicle_1.setShouldResetTurretInScriptedCameras = setShouldResetTurretInScriptedCameras;
    /**
     * Disables the screen effects and sound effects when driving over a slowdown pad.
     *
     * Hash: 0x65B080555EA48149 | Since: 1011
     */
    function setSlowDownEffectDisabled(disabled) {
        Citizen.invokeNative('0x65B080555EA48149', disabled);
    }
    vehicle_1.setSlowDownEffectDisabled = setSlowDownEffectDisabled;
    /**
     * It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT
     *
     * Hash: 0xF1211889DF15A763 | Since: 1290
     */
    function setSpecialFlightModeAllowed(vehicle, toggle) {
        SetSpecialFlightModeAllowed(vehicle, toggle);
    }
    vehicle_1.setSpecialFlightModeAllowed = setSpecialFlightModeAllowed;
    /**
     * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.
     *
     * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
     *
     * Example:
     * `Ped playerPed = PLAYER::PLAYER_PED_ID();`
     * `Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);`
     *
     * Hash: 0xD138FA15C9776837 | Since: 1290
     */
    function setSpecialFlightModeRatio(vehicle, ratio) {
        SetSpecialFlightModeRatio(vehicle, ratio);
    }
    vehicle_1.setSpecialFlightModeRatio = setSpecialFlightModeRatio;
    /**
     * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.
     *
     * targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.
     *
     * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
     *
     * Example:
     * `Ped playerPed = PLAYER::PLAYER_PED_ID();`
     * `Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);`
     * `VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);`
     *
     * Hash: 0x438B3D7CA026FE91 | Since: 1290
     */
    function setSpecialFlightModeTargetRatio(vehicle, targetRatio) {
        SetSpecialFlightModeTargetRatio(vehicle, targetRatio);
    }
    vehicle_1.setSpecialFlightModeTargetRatio = setSpecialFlightModeTargetRatio;
    /**
     * Disables the screen effects and sound effects when driving over a speed boost pad.
     *
     * Hash: 0x7BBE7FF626A591FE | Since: 877
     */
    function setSpeedBoostEffectDisabled(disabled) {
        Citizen.invokeNative('0x7BBE7FF626A591FE', disabled);
    }
    vehicle_1.setSpeedBoostEffectDisabled = setSpeedBoostEffectDisabled;
    /**
     * No comment provided
     *
     * Hash: 0xC59872A5134879C7 | Since: 323
     */
    function setSubmarineCrushDepths(vehicle, depth1, depth2, depth3) {
        SetSubmarineCrushDepths(vehicle, false, depth1, depth2, depth3);
    }
    vehicle_1.setSubmarineCrushDepths = setSubmarineCrushDepths;
    /**
     * No comment provided
     *
     * Hash: 0xB893215D8D4C015B | Since: 323
     */
    function setTaskGotoPlaneMinHeightAboveTerrain(plane, height) {
        SetTaskVehicleGotoPlaneMinHeightAboveTerrain(plane, height);
    }
    vehicle_1.setTaskGotoPlaneMinHeightAboveTerrain = setTaskGotoPlaneMinHeightAboveTerrain;
    /**
     * This is not tested - it's just an assumption.
     * - Nac
     *
     * Doesn't seem to work.  I'll try with an int instead. --JT
     *
     * Read the scripts, im dumpass.
     *
     * `if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {`
     * `VEHICLE::SET_TAXI_LIGHTS(l_115, 1);`
     * }
     *
     * Hash: 0x598803E85E8448D9 | Since: 323
     */
    function setTaxiLights(vehicle, state) {
        SetTaxiLights(vehicle, state);
    }
    vehicle_1.setTaxiLights = setTaxiLights;
    /**
     * No comment provided
     *
     * Hash: 0x2FA2494B47FDD009 | Since: 1103
     */
    function setTrailerAttachmentEnabled() {
        Citizen.invokeNative('0x2FA2494B47FDD009', undefined, undefined);
    }
    vehicle_1.setTrailerAttachmentEnabled = setTrailerAttachmentEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x2A8F319B392E7B3F | Since: 323
     */
    function setTrailerInverseMassScale(vehicle) {
        SetTrailerInverseMassScale(vehicle, 0);
    }
    vehicle_1.setTrailerInverseMassScale = setTrailerInverseMassScale;
    /**
     * No comment provided
     *
     * Hash: 0x878C75C09FBDB942 | Since: 1103
     */
    function setTrailerLegsLowered(vehicle) {
        SetTrailerLegsLowered(vehicle);
    }
    vehicle_1.setTrailerLegsLowered = setTrailerLegsLowered;
    /**
     * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
     *
     * Hash: 0x95CF53B3D687F9FA | Since: 323
     */
    function setTrailerLegsRaised(vehicle) {
        SetTrailerLegsRaised(vehicle);
    }
    vehicle_1.setTrailerLegsRaised = setTrailerLegsRaised;
    /**
     * No comment provided
     *
     * Hash: 0x16469284DB8C62B5 | Since: 323
     */
    function setTrainCruiseSpeed(train, speed) {
        SetTrainCruiseSpeed(train, speed);
    }
    vehicle_1.setTrainCruiseSpeed = setTrainCruiseSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xAA0BC91BE0B796E3 | Since: 323
     */
    function setTrainSpeed(train, speed) {
        SetTrainSpeed(train, speed);
    }
    vehicle_1.setTrainSpeed = setTrainSpeed;
    /**
     * Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
     *
     * trackIndex: 0 - 26
     * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
     *
     * Hash: 0x21973BBF8D17EDFA | Since: 323
     */
    function setTrainTrackSpawnFrequency(trackIndex, frequency) {
        SetTrainTrackSpawnFrequency(trackIndex, frequency);
    }
    vehicle_1.setTrainTrackSpawnFrequency = setTrainTrackSpawnFrequency;
    /**
     * Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.
     *
     * Hash: 0x498218259FB7C72D | Since: 1365
     */
    function setTransformRateForAnimation(vehicle, transformRate) {
        SetTransformRateForAnimation(vehicle, transformRate);
    }
    vehicle_1.setTransformRateForAnimation = setTransformRateForAnimation;
    /**
     * When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)
     *
     * Hash: 0x41B9FB92EDED32A6 | Since: 1365
     */
    function setTransformToSubmarineUsesAlternateInput(vehicle, toggle) {
        SetTransformToSubmarineUsesAlternateInput(vehicle, toggle);
    }
    vehicle_1.setTransformToSubmarineUsesAlternateInput = setTransformToSubmarineUsesAlternateInput;
    /**
     * Toggles specific flag on turret
     *
     * Hash: 0xC60060EB0D8AC7B1 | Since: 1290
     */
    function setTurretHidden(vehicle, index, toggle) {
        SetVehicleTurretUnk(vehicle, index, toggle);
    }
    vehicle_1.setTurretHidden = setTurretHidden;
    /**
     * SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x74C68EF97645E79D | Since: 1868
     */
    function setTyreHealth(vehicle, wheelIndex, health) {
        SetTyreHealth(vehicle, wheelIndex, health);
    }
    vehicle_1.setTyreHealth = setTyreHealth;
    /**
     * Controls how much traction the wheel loses.
     *
     * Default values from Rockstar's Open Wheel Race JSON's:
     * "owrtds" (Soft): 0.05
     * "owrtdm" (Medium): 0.45
     * "owrtdh" (Hard): 0.8
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0xC970D0E0FC31D768 | Since: 2060
     */
    function setTyreMaximumGripDifferenceDueToWearRate(vehicle, wheelIndex, multiplier) {
        SetTyreTractionLossMultiplier(vehicle, wheelIndex, multiplier);
    }
    vehicle_1.setTyreMaximumGripDifferenceDueToWearRate = setTyreMaximumGripDifferenceDueToWearRate;
    /**
     * Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
     * Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x01894E2EDE923CA2 | Since: 1868
     */
    function setTyreWearRate(vehicle, wheelIndex, multiplier) {
        SetTyreWearMultiplier(vehicle, wheelIndex, multiplier);
    }
    vehicle_1.setTyreWearRate = setTyreWearRate;
    /**
     * Controls how fast the tires wear out.
     *
     * Default values from Rockstar's Open Wheel Race JSON's:
     * "owrtss" (Soft): 2.2
     * "owrtsm" (Medium): 1.7
     * "owrtsh" (Hard): 1.2
     *
     * Usable wheels:
     * 0: wheel_lf
     * 1: wheel_rf
     * 2: wheel_lm1
     * 3: wheel_rm1
     * 4: wheel_lr
     * 5: wheel_rr
     *
     * Hash: 0x392183BB9EA57697 | Since: 2060
     */
    function setTyreWearRateScale(vehicle, wheelIndex, multiplier) {
        SetTyreSoftnessMultiplier(vehicle, wheelIndex, multiplier);
    }
    vehicle_1.setTyreWearRateScale = setTyreWearRateScale;
    /**
     * No comment provided
     *
     * Hash: 0xB68CFAF83A02768D | Since: 1290
     */
    function setUseDesiredZCruiseSpeedForLanding(vehicle, toggle) {
        Citizen.invokeNative('0xB68CFAF83A02768D', vehicle, toggle);
    }
    vehicle_1.setUseDesiredZCruiseSpeedForLanding = setUseDesiredZCruiseSpeedForLanding;
    /**
     * Changes the car jump control to require a double-tap to activate.
     *
     * Hash: 0x5BBCF35BF6E456F7 | Since: 1604
     */
    function setUseDoubleClickForCarJump(toggle) {
        Citizen.invokeNative('0x5BBCF35BF6E456F7', toggle);
    }
    vehicle_1.setUseDoubleClickForCarJump = setUseDoubleClickForCarJump;
    /**
     * Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
     *
     * Hash: 0xF06A16CA55D138D8 | Since: 944
     */
    function setUseHigherCarJump(vehicle, toggle) {
        SetUseHigherVehicleJumpForce(vehicle, toggle);
    }
    vehicle_1.setUseHigherCarJump = setUseHigherCarJump;
    /**
     * No comment provided
     *
     * Hash: 0xDFFCEF48E511DB48 | Since: 323
     */
    function setActiveDuringPlayback(vehicle, toggle) {
        SetVehicleActiveDuringPlayback(vehicle, toggle);
    }
    vehicle_1.setActiveDuringPlayback = setActiveDuringPlayback;
    /**
     * No comment provided
     *
     * Hash: 0x21115BCD6E44656A | Since: 323
     */
    function setActiveForPedNavigation(vehicle, toggle) {
        SetVehicleActiveForPedNavigation(vehicle, toggle);
    }
    vehicle_1.setActiveForPedNavigation = setActiveForPedNavigation;
    /**
     * No comment provided
     *
     * Hash: 0x9BECD4B9FEF3F8A6 | Since: 323
     */
    function setActAsIfHasSirenOn(vehicle) {
        Citizen.invokeNative('0x9BECD4B9FEF3F8A6', vehicle, false);
    }
    vehicle_1.setActAsIfHasSirenOn = setActAsIfHasSirenOn;
    /**
     * No comment provided
     *
     * Hash: 0x1F9FB66F3A3842D2 | Since: 323
     */
    function setActAsIfHighSpeedForFragSmashing(vehicle) {
        SetVehicleActAsIfHighSpeedForFragSmashing(vehicle, false);
    }
    vehicle_1.setActAsIfHighSpeedForFragSmashing = setActAsIfHighSpeedForFragSmashing;
    /**
     * Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
     * Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).
     *
     * Hash: 0x41062318F23ED854 | Since: 323
     */
    function setAiCanUseExclusiveSeats(vehicle, toggle) {
        SetVehicleExclusiveDriver(vehicle, toggle);
    }
    vehicle_1.setAiCanUseExclusiveSeats = setAiCanUseExclusiveSeats;
    /**
     * No comment provided
     *
     * Hash: 0xCDE5E70C1DDB954C | Since: 323
     */
    function setAlarm(vehicle, state) {
        SetVehicleAlarm(vehicle, state);
    }
    vehicle_1.setAlarm = setAlarm;
    /**
     * No comment provided
     *
     * Hash: 0x7D6F9A3EF26136A0 | Since: 323
     */
    function setAllowHomingMissleLockon(vehicle, toggle) {
        Citizen.invokeNative('0x7D6F9A3EF26136A0', vehicle, toggle, false);
    }
    vehicle_1.setAllowHomingMissleLockon = setAllowHomingMissleLockon;
    /**
     * No comment provided
     *
     * Hash: 0x1DDA078D12879EEE | Since: 463
     */
    function setAllowHomingMissleLockonSynced(vehicle, canBeLockedOn) {
        SetVehicleCanBeLockedOn(vehicle, canBeLockedOn, false);
    }
    vehicle_1.setAllowHomingMissleLockonSynced = setAllowHomingMissleLockonSynced;
    /**
     * Makes the vehicle accept no passengers.
     *
     * Hash: 0x5D14D4154BFE7B2C | Since: 323
     */
    function setAllowNoPassengersLockon(veh, toggle) {
        SetVehicleAllowNoPassengersLockon(veh, toggle);
    }
    vehicle_1.setAllowNoPassengersLockon = setAllowNoPassengersLockon;
    /**
     * No comment provided
     *
     * Hash: 0x8BA6F76BC53A1493 | Since: 323
     */
    function setAutomaticallyAttaches(vehicle) {
        return SetVehicleAutomaticallyAttaches(vehicle, false, undefined);
    }
    vehicle_1.setAutomaticallyAttaches = setAutomaticallyAttaches;
    /**
     * No comment provided
     *
     * Hash: 0xD3301660A57C9272 | Since: 757
     */
    function setAvoidPlayerVehicleRiotVanMission() {
        Citizen.invokeNative('0xD3301660A57C9272', undefined);
    }
    vehicle_1.setAvoidPlayerVehicleRiotVanMission = setAvoidPlayerVehicleRiotVanMission;
    /**
     * No comment provided
     *
     * Hash: 0x9F3F689B814F2599 | Since: 323
     */
    function setBlipThrottleRandomly(vehicle) {
        Citizen.invokeNative('0x9F3F689B814F2599', vehicle, false);
    }
    vehicle_1.setBlipThrottleRandomly = setBlipThrottleRandomly;
    /**
     * Controls how fast bobbleheads and tsurikawas move on each axis.
     *
     * p2 is probably z, but changing that value didn't seem to have a noticeable effect.
     *
     * Hash: 0x870B8B7A766615C8 | Since: 505
     */
    function setBobbleheadVelocity(x, y) {
        Citizen.invokeNative('0x870B8B7A766615C8', x, y, 0);
    }
    vehicle_1.setBobbleheadVelocity = setBobbleheadVelocity;
    /**
     * p2 often set to 1000.0 in the decompiled scripts.
     *
     * Hash: 0xB77D05AC8C78AADB | Since: 323
     */
    function setBodyHealth(vehicle, value) {
        SetVehicleBodyHealth(vehicle, value);
    }
    vehicle_1.setBodyHealth = setBodyHealth;
    /**
     * Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
     *
     * Hash: 0xF4B2ED59DEB5D774 | Since: 1180
     */
    function setBombAmmo(vehicle, bombCount) {
        SetVehicleBombCount(vehicle, bombCount);
    }
    vehicle_1.setBombAmmo = setBombAmmo;
    /**
     * No comment provided
     *
     * Hash: 0xE4E2FD323574965C | Since: 757
     */
    function setBrake(vehicle, toggle) {
        SetVehicleBrake(vehicle, toggle);
    }
    vehicle_1.setBrake = setBrake;
    /**
     * No comment provided
     *
     * Hash: 0x92B35082E0B42F66 | Since: 323
     */
    function setBrakeLights(vehicle, toggle) {
        SetVehicleBrakeLights(vehicle, toggle);
    }
    vehicle_1.setBrakeLights = setBrakeLights;
    /**
     * No comment provided
     *
     * Hash: 0xC361AA040D6637A8 | Since: 323
     */
    function setBrokenPartsDontAffectAiHandling(vehicle) {
        Citizen.invokeNative('0xC361AA040D6637A8', vehicle, false);
    }
    vehicle_1.setBrokenPartsDontAffectAiHandling = setBrokenPartsDontAffectAiHandling;
    /**
     * Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
     *
     * Hash: 0xF8EBCCC96ADB9FB7 | Since: 323
     */
    function setBulldozerArmPosition(vehicle, position) {
        SetVehicleBulldozerArmPosition(vehicle, position, false);
    }
    vehicle_1.setBulldozerArmPosition = setBulldozerArmPosition;
    /**
     * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
     *
     * Hash: 0xFB8794444A7D60FB | Since: 323
     */
    function setBurnout(vehicle, toggle) {
        SetVehicleBurnout(vehicle, toggle);
    }
    vehicle_1.setBurnout = setBurnout;
    /**
     * This has not yet been tested - it's just an assumption of what the types could be.
     *
     * Hash: 0x3750146A28097A82 | Since: 323
     */
    function setCanBeTargetted(vehicle, state) {
        SetVehicleCanBeTargetted(vehicle, state);
    }
    vehicle_1.setCanBeTargetted = setCanBeTargetted;
    /**
     * No comment provided
     *
     * Hash: 0x300504B23BD3B711 | Since: 323
     */
    function setCanBeUsedByFleeingPeds(vehicle, toggle) {
        SetVehicleCanBeUsedByFleeingPeds(vehicle, toggle);
    }
    vehicle_1.setCanBeUsedByFleeingPeds = setCanBeUsedByFleeingPeds;
    /**
     * No comment provided
     *
     * Hash: 0x4C7028F78FFD3681 | Since: 323
     */
    function setCanBeVisiblyDamaged(vehicle, state) {
        SetVehicleCanBeVisiblyDamaged(vehicle, state);
    }
    vehicle_1.setCanBeVisiblyDamaged = setCanBeVisiblyDamaged;
    /**
     * No comment provided
     *
     * Hash: 0x59BF8C3D52C92F66 | Since: 323
     */
    function setCanBreak(vehicle, toggle) {
        SetVehicleCanBreak(vehicle, toggle);
    }
    vehicle_1.setCanBreak = setCanBreak;
    /**
     * No comment provided
     *
     * Hash: 0x0CDDA42F9E360CA6 | Since: 323
     */
    function setCanDeformWheels(vehicle, toggle) {
        SetVehicleCanDeformWheels(vehicle, toggle);
    }
    vehicle_1.setCanDeformWheels = setCanDeformWheels;
    /**
     * No comment provided
     *
     * Hash: 0x065D03A9D6B2C6B5 | Since: 463
     */
    function setCanEjectPassengersIfLocked() {
        Citizen.invokeNative('0x065D03A9D6B2C6B5', undefined, undefined);
    }
    vehicle_1.setCanEjectPassengersIfLocked = setCanEjectPassengersIfLocked;
    /**
     * No comment provided
     *
     * Hash: 0x206BC5DC9D1AC70A | Since: 323
     */
    function setCanEngineMissfire(vehicle, toggle) {
        SetVehicleCanEngineOperateOnFire(vehicle, toggle);
    }
    vehicle_1.setCanEngineMissfire = setCanEngineMissfire;
    /**
     * No comment provided
     *
     * Hash: 0x51BB2D88D31A914B | Since: 323
     */
    function setCanLeakOil(vehicle, toggle) {
        SetVehicleCanLeakOil(vehicle, toggle);
    }
    vehicle_1.setCanLeakOil = setCanLeakOil;
    /**
     * No comment provided
     *
     * Hash: 0x192547247864DFDD | Since: 323
     */
    function setCanLeakPetrol(vehicle, toggle) {
        SetVehicleCanLeakPetrol(vehicle, toggle);
    }
    vehicle_1.setCanLeakPetrol = setCanLeakPetrol;
    /**
     * No comment provided
     *
     * Hash: 0x428BACCDF5E26EAD | Since: 323
     */
    function setCanSaveInGarage(vehicle, toggle) {
        SetVehicleCanSaveInGarage(vehicle, toggle);
    }
    vehicle_1.setCanSaveInGarage = setCanSaveInGarage;
    /**
     * No comment provided
     *
     * Hash: 0x9849DE24FCF23CCC | Since: 1604
     */
    function setCausesSwerving(vehicle, toggle) {
        Citizen.invokeNative('0x9849DE24FCF23CCC', vehicle, toggle);
    }
    vehicle_1.setCausesSwerving = setCausesSwerving;
    /**
     * No comment provided
     *
     * Hash: 0xA46413066687A328 | Since: 323
     */
    function setCeilingHeight(vehicle, height) {
        SetVehicleCeilingHeight(vehicle, height);
    }
    vehicle_1.setCeilingHeight = setCeilingHeight;
    /**
     * <1.0 - Decreased torque
     * =1.0 - Default torque
     * >1.0 - Increased torque
     *
     * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
     *
     * value - is between 0.2 and 1.8 in the decompiled scripts.
     *
     * This needs to be called every frame to take effect.
     *
     * Hash: 0xB59E4BD37AE292DB | Since: 323
     */
    function setCheatPowerIncrease(vehicle, value) {
        SetVehicleCheatPowerIncrease(vehicle, value);
    }
    vehicle_1.setCheatPowerIncrease = setCheatPowerIncrease;
    /**
     * colorPrimary & colorSecondary are the paint index for the vehicle.
     * For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
     * -------------------------------------------------------------------------
     * Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
     *
     * Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x4F1D4BE3A7F24601 | Since: 323
     */
    function setColours(vehicle, colorPrimary, colorSecondary) {
        SetVehicleColours(vehicle, colorPrimary, colorSecondary);
    }
    vehicle_1.setColours = setColours;
    /**
     * Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry.
     *
     * Hash: 0x33E8CD3322E2FE31 | Since: 323
     */
    function setColourCombination(vehicle, colorCombination) {
        SetVehicleColourCombination(vehicle, colorCombination);
    }
    vehicle_1.setColourCombination = setColourCombination;
    /**
     * Does nothing. It's a nullsub.
     *
     * Hash: 0x36DE109527A2C0C4 | Since: 1604
     */
    function setCombatMode(toggle) {
        Citizen.invokeNative('0x36DE109527A2C0C4', toggle);
    }
    vehicle_1.setCombatMode = setCombatMode;
    /**
     * Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
     * Use GET_VEHICLE_BOMB_AMMO to get the current amount.
     *
     * Hash: 0x9BDA23BF666F0855 | Since: 1180
     */
    function setCountermeasureAmmo(vehicle, counterMeasureCount) {
        SetVehicleCountermeasureCount(vehicle, counterMeasureCount);
    }
    vehicle_1.setCountermeasureAmmo = setCountermeasureAmmo;
    /**
     * No comment provided
     *
     * Hash: 0x182F266C2D9E2BEB | Since: 323
     */
    function setCustomPathNodeStreamingRadius(vehicle) {
        Citizen.invokeNative('0x182F266C2D9E2BEB', vehicle, 0);
    }
    vehicle_1.setCustomPathNodeStreamingRadius = setCustomPathNodeStreamingRadius;
    /**
     * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
     *
     * Hash: 0x7141766F91D15BEA | Since: 323
     */
    function setCustomPrimaryColour(vehicle, r, g, b) {
        SetVehicleCustomPrimaryColour(vehicle, r, g, b);
    }
    vehicle_1.setCustomPrimaryColour = setCustomPrimaryColour;
    /**
     * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
     *
     * Hash: 0x36CED73BFED89754 | Since: 323
     */
    function setCustomSecondaryColour(vehicle, r, g, b) {
        SetVehicleCustomSecondaryColour(vehicle, r, g, b);
    }
    vehicle_1.setCustomSecondaryColour = setCustomSecondaryColour;
    /**
     * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
     *
     * Radius of effect damage applied in a sphere at impact location
     * When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
     *
     * Hash: 0xA1DD317EA8FD4F29 | Since: 323
     */
    function setDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel) {
        SetVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel);
    }
    vehicle_1.setDamage = setDamage;
    /**
     * No comment provided
     *
     * Hash: 0x4E20D2A627011E8E | Since: 757
     */
    function setDamageScale(vehicle) {
        return SetVehicleDamageModifier(vehicle, 0);
    }
    vehicle_1.setDamageScale = setDamageScale;
    /**
     * No comment provided
     *
     * Hash: 0x9640E30A7F395E4B | Since: 1290
     */
    function setDamageScales(vehicle) {
        Citizen.invokeNative('0x9640E30A7F395E4B', vehicle, undefined, undefined, undefined, undefined);
    }
    vehicle_1.setDamageScales = setDamageScales;
    /**
     * This fixes the deformation of a vehicle but the vehicle health doesn't improve
     *
     * Hash: 0x953DA1E1B12C0491 | Since: 323
     */
    function setDeformationFixed(vehicle) {
        SetVehicleDeformationFixed(vehicle);
    }
    vehicle_1.setDeformationFixed = setDeformationFixed;
    /**
     * Use this native inside a looped function.
     * Values:
     * - `0.0` = no vehicles on streets
     * - `1.0` = normal vehicles on streets
     *
     * Hash: 0x245A6883D966D537 | Since: 323
     */
    function setDensityMultiplierThisFrame(multiplier) {
        SetVehicleDensityMultiplierThisFrame(multiplier);
    }
    vehicle_1.setDensityMultiplierThisFrame = setDensityMultiplierThisFrame;
    /**
     * Does nothing. It's a nullsub.
     *
     * Hash: 0x82E0AC411E41A5B4 | Since: 1604
     */
    function setDetonationMode(toggle) {
        Citizen.invokeNative('0x82E0AC411E41A5B4', toggle);
    }
    vehicle_1.setDetonationMode = setDetonationMode;
    /**
     * You can't use values greater than 15.0
     * Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
     *
     * Hash: 0x79D3B596FE44EE8B | Since: 323
     */
    function setDirtLevel(vehicle, dirtLevel) {
        SetVehicleDirtLevel(vehicle, dirtLevel);
    }
    vehicle_1.setDirtLevel = setDirtLevel;
    /**
     * No comment provided
     *
     * Hash: 0xAF60E6A2936F982A | Since: 1103
     */
    function setDisableCollisionUponCreation(vehicle, disable) {
        Citizen.invokeNative('0xAF60E6A2936F982A', vehicle, disable);
    }
    vehicle_1.setDisableCollisionUponCreation = setDisableCollisionUponCreation;
    /**
     * No comment provided
     *
     * Hash: 0x8AA9180DE2FEDD45 | Since: 323
     */
    function setDisableHeightMapAvoidance(vehicle) {
        EnableAircraftObstacleAvoidance(vehicle, false);
    }
    vehicle_1.setDisableHeightMapAvoidance = setDisableHeightMapAvoidance;
    /**
     * No comment provided
     *
     * Hash: 0x2B6747FAA9DB9D6B | Since: 323
     */
    function setDisableTowing(vehicle, toggle) {
        SetVehicleDisableTowing(vehicle, toggle);
    }
    vehicle_1.setDisableTowing = setDisableTowing;
    /**
     * No comment provided
     *
     * Hash: 0x76D26A22750E849E | Since: 1103
     */
    function setDontTerminateTaskWhenAchieved(vehicle) {
        Citizen.invokeNative('0x76D26A22750E849E', vehicle);
    }
    vehicle_1.setDontTerminateTaskWhenAchieved = setDontTerminateTaskWhenAchieved;
    /**
     * enum eVehicleLockState
     * {
     * VEHICLELOCK_NONE,
     * VEHICLELOCK_UNLOCKED,
     * VEHICLELOCK_LOCKED,
     * VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
     * VEHICLELOCK_LOCKED_PLAYER_INSIDE,
     * VEHICLELOCK_LOCKED_INITIALLY,
     * VEHICLELOCK_FORCE_SHUT_DOORS,
     * VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
     * VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
     * VEHICLELOCK_LOCKED_NO_PASSENGERS,
     * VEHICLELOCK_CANNOT_ENTER
     * };
     *
     * Hash: 0xB664292EAECF7FA6 | Since: 323
     */
    function setDoorsLocked(vehicle, doorLockStatus) {
        SetVehicleDoorsLocked(vehicle, doorLockStatus);
    }
    vehicle_1.setDoorsLocked = setDoorsLocked;
    /**
     * After some analysis, I've decided that these are what the parameters are.
     *
     * We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
     * `l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);`
     * ...
     * `VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);`
     *
     * Hash: 0xA2F80B8D040727CC | Since: 323
     */
    function setDoorsLockedForAllPlayers(vehicle, toggle) {
        SetVehicleDoorsLockedForAllPlayers(vehicle, toggle);
    }
    vehicle_1.setDoorsLockedForAllPlayers = setDoorsLockedForAllPlayers;
    /**
     * No comment provided
     *
     * Hash: 0x203B527D1B77904C | Since: 1365
     */
    function setDoorsLockedForAllTeams(vehicle, toggle) {
        SetVehicleDoorsLockedForUnk(vehicle, toggle);
    }
    vehicle_1.setDoorsLockedForAllTeams = setDoorsLockedForAllTeams;
    /**
     * No comment provided
     *
     * Hash: 0x9737A37136F07E75 | Since: 323
     */
    function setDoorsLockedForNonScriptPlayers(vehicle, toggle) {
        SetVehicleDoorsLockedForNonScriptPlayers(vehicle, toggle);
    }
    vehicle_1.setDoorsLockedForNonScriptPlayers = setDoorsLockedForNonScriptPlayers;
    /**
     * No comment provided
     *
     * Hash: 0x517AAF684BB50CD1 | Since: 323
     */
    function setDoorsLockedForPlayer(vehicle, player, toggle) {
        SetVehicleDoorsLockedForPlayer(vehicle, player, toggle);
    }
    vehicle_1.setDoorsLockedForPlayer = setDoorsLockedForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xB81F6D4A8F5EEBA8 | Since: 323
     */
    function setDoorsLockedForTeam(vehicle, team, toggle) {
        SetVehicleDoorsLockedForTeam(vehicle, team, toggle);
    }
    vehicle_1.setDoorsLockedForTeam = setDoorsLockedForTeam;
    /**
     * Closes all doors of a vehicle:
     *
     * Hash: 0x781B3D62BB013EF5 | Since: 323
     */
    function setDoorsShut(vehicle, closeInstantly) {
        SetVehicleDoorsShut(vehicle, closeInstantly);
    }
    vehicle_1.setDoorsShut = setDoorsShut;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Usually used alongside other vehicle door natives.
     *
     * Hash: 0x3B458DDB57038F08 | Since: 877
     */
    function setDoorAutoLock(vehicle, doorId, toggle) {
        Citizen.invokeNative('0x3B458DDB57038F08', vehicle, doorId, toggle);
    }
    vehicle_1.setDoorAutoLock = setDoorAutoLock;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xD4D4F6A4AB575A33 | Since: 323
     */
    function setDoorBroken(vehicle, doorId, deleteDoor) {
        SetVehicleDoorBroken(vehicle, doorId, deleteDoor);
    }
    vehicle_1.setDoorBroken = setDoorBroken;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xF2BFA0430F0A0FCB | Since: 323
     */
    function setDoorControl(vehicle, doorId, speed, angle) {
        SetVehicleDoorControl(vehicle, doorId, speed, angle);
    }
    vehicle_1.setDoorControl = setDoorControl;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xA5A9653A8D2CAF48 | Since: 323
     */
    function setDoorLatched(vehicle, doorId) {
        SetVehicleDoorLatched(vehicle, doorId, false, false, false);
    }
    vehicle_1.setDoorLatched = setDoorLatched;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0x7C65DAC73C35C862 | Since: 323
     */
    function setDoorOpen(vehicle, doorId, loose, openInstantly) {
        SetVehicleDoorOpen(vehicle, doorId, loose, openInstantly);
    }
    vehicle_1.setDoorOpen = setDoorOpen;
    /**
     * enum eDoorId
     * {
     * VEH_EXT_DOOR_INVALID_ID = -1,
     * VEH_EXT_DOOR_DSIDE_F,
     * VEH_EXT_DOOR_DSIDE_R,
     * VEH_EXT_DOOR_PSIDE_F,
     * VEH_EXT_DOOR_PSIDE_R,
     * VEH_EXT_BONNET,
     * VEH_EXT_BOOT
     * };
     *
     * Hash: 0x93D9BD300D7789E5 | Since: 323
     */
    function setDoorShut(vehicle, doorId, closeInstantly) {
        SetVehicleDoorShut(vehicle, doorId, closeInstantly);
    }
    vehicle_1.setDoorShut = setDoorShut;
    /**
     * Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
     *
     * youtu.be/3arlUxzHl5Y
     * i.imgur.com/WrNpYFs.jpg
     *
     * Hash: 0x068F64F2470F9656 | Since: 323
     */
    function setDropsMoneyWhenBlownUp(vehicle, toggle) {
        SetVehicleDropsMoneyWhenBlownUp(vehicle, toggle);
    }
    vehicle_1.setDropsMoneyWhenBlownUp = setDropsMoneyWhenBlownUp;
    /**
     * No comment provided
     *
     * Hash: 0x983765856F2564F9 | Since: 323
     */
    function setEngineCanDegrade(vehicle, toggle) {
        SetVehicleEngineCanDegrade(vehicle, toggle);
    }
    vehicle_1.setEngineCanDegrade = setEngineCanDegrade;
    /**
     * 1000 is max health
     * Begins leaking gas at around 650 health
     * Minimum: -4000
     * Maximum: 1000
     *
     * -4000: Engine is destroyed
     * 0 and below: Engine catches fire and health rapidly declines
     * 300: Engine is smoking and losing functionality
     * 1000: Engine is perfect
     *
     * Hash: 0x45F6D8EEF34ABEF1 | Since: 323
     */
    function setEngineHealth(vehicle, health) {
        SetVehicleEngineHealth(vehicle, health);
    }
    vehicle_1.setEngineHealth = setEngineHealth;
    /**
     * Starts or stops the engine on the specified vehicle.
     *
     * vehicle: The vehicle to start or stop the engine on.
     * value: true to turn the vehicle on; false to turn it off.
     * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
     * disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.
     *
     * Hash: 0x2497C4717C8B881E | Since: 323
     */
    function setEngineOn(vehicle, value, instantly, disableAutoStart) {
        SetVehicleEngineOn(vehicle, value, instantly, disableAutoStart);
    }
    vehicle_1.setEngineOn = setEngineOn;
    /**
     * The parameter fade is a value from 0-1, where 0 is fresh paint.
     *
     * Hash: 0x3AFDC536C3D01674 | Since: 323
     */
    function setEnveffScale(vehicle, fade) {
        SetVehicleEnveffScale(vehicle, fade);
    }
    vehicle_1.setEnveffScale = setEnveffScale;
    /**
     * index: 0 - 1
     *
     * Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
     *
     * Hash: 0xB5C51B5502E85E83 | Since: 323
     */
    function setExclusiveDriver(vehicle, ped, index) {
        SetVehicleExclusiveDriver2(vehicle, ped, index);
    }
    vehicle_1.setExclusiveDriver = setExclusiveDriver;
    /**
     * No comment provided
     *
     * Hash: 0xD565F438137F0E10 | Since: 1103
     */
    function setExplodesOnExplosionDamageAtZeroBodyHealth(vehicle, toggle) {
        Citizen.invokeNative('0xD565F438137F0E10', vehicle, toggle);
    }
    vehicle_1.setExplodesOnExplosionDamageAtZeroBodyHealth = setExplodesOnExplosionDamageAtZeroBodyHealth;
    /**
     * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
     *
     * Hash: 0x71B0892EC081D60A | Since: 323
     */
    function setExplodesOnHighExplosionDamage(vehicle, toggle) {
        SetVehicleExplodesOnHighExplosionDamage(vehicle, toggle);
    }
    vehicle_1.setExplodesOnHighExplosionDamage = setExplodesOnHighExplosionDamage;
    /**
     * Max value is 32767
     *
     * Hash: 0x79DF7E806202CE01 | Since: 323
     */
    function setExtendedRemovalRange(vehicle, range) {
        SetVehicleExtendedRemovalRange(vehicle, range);
    }
    vehicle_1.setExtendedRemovalRange = setExtendedRemovalRange;
    /**
     * Available extraIds are 1-14, however none of the vehicles have extras above 12.
     *
     * Hash: 0x7EE3A3C5E4A40CC9 | Since: 323
     */
    function setExtra(vehicle, extraId, disable) {
        SetVehicleExtra(vehicle, extraId, disable);
    }
    vehicle_1.setExtra = setExtra;
    /**
     * They use the same color indexs as SET_VEHICLE_COLOURS.
     *
     * Hash: 0x2036F561ADD12E33 | Since: 323
     */
    function setExtraColours(vehicle, pearlescentColor, wheelColor) {
        SetVehicleExtraColours(vehicle, pearlescentColor, wheelColor);
    }
    vehicle_1.setExtraColours = setExtraColours;
    /**
     * No comment provided
     *
     * Hash: 0xF40DD601A65F7F19 | Since: 505
     */
    function setExtraColour5(vehicle, color) {
        SetVehicleInteriorColor(vehicle, color);
    }
    vehicle_1.setExtraColour5 = setExtraColour5;
    /**
     * No comment provided
     *
     * Hash: 0x6089CDF6A57F326C | Since: 505
     */
    function setExtraColour6(vehicle, color) {
        SetVehicleDashboardColor(vehicle, color);
    }
    vehicle_1.setExtraColour6 = setExtraColour6;
    /**
     * This fixes a vehicle.
     * If the vehicle's engine's broken then you cannot fix it with this native.
     *
     * Hash: 0x115722B1B9C14C1C | Since: 323
     */
    function setFixed(vehicle) {
        SetVehicleFixed(vehicle);
    }
    vehicle_1.setFixed = setFixed;
    /**
     * No comment provided
     *
     * Hash: 0x30D779DE7C4F6DD3 | Since: 323
     */
    function setFlightNozzlePosition(vehicle, angleRatio) {
        SetVehicleFlightNozzlePosition(vehicle, angleRatio);
    }
    vehicle_1.setFlightNozzlePosition = setFlightNozzlePosition;
    /**
     * No comment provided
     *
     * Hash: 0x9AA47FFF660CB932 | Since: 323
     */
    function setFlightNozzlePositionImmediate(vehicle, angle) {
        SetVehicleFlightNozzlePositionImmediate(vehicle, angle);
    }
    vehicle_1.setFlightNozzlePositionImmediate = setFlightNozzlePositionImmediate;
    /**
     * No comment provided
     *
     * Hash: 0xB055A34527CB8FD7 | Since: 323
     */
    function setForceAfterburner(vehicle, toggle) {
        SetVehicleForceAfterburner(vehicle, toggle);
    }
    vehicle_1.setForceAfterburner = setForceAfterburner;
    /**
     * Sets some bit of vehicle
     *
     * Hash: 0x8821196D91FA2DE5 | Since: 1290
     */
    function setForceInteriorlight(vehicle, toggle) {
        Citizen.invokeNative('0x8821196D91FA2DE5', vehicle, toggle);
    }
    vehicle_1.setForceInteriorlight = setForceInteriorlight;
    /**
     * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
     *
     * Speed is in meters per second
     * You can convert meters/s to mph here:
     * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
     *
     * Hash: 0xAB54A438726D25D5 | Since: 323
     */
    function setForwardSpeed(vehicle, speed) {
        SetVehicleForwardSpeed(vehicle, speed);
    }
    vehicle_1.setForwardSpeed = setForwardSpeed;
    /**
     * Seems to be identical to SET_VEHICLE_FORWARD_SPEED
     *
     * Hash: 0x6501129C9E0FFA05 | Since: 877
     */
    function setForwardSpeedXy(vehicle, speed) {
        Citizen.invokeNative('0x6501129C9E0FFA05', vehicle, speed);
    }
    vehicle_1.setForwardSpeedXy = setForwardSpeedXy;
    /**
     * Seems to be related to the metal parts, not tyres (like i was expecting lol)
     *
     * Hash: 0x1837AF7C627009BA | Since: 323
     */
    function setFrictionOverride(vehicle, friction) {
        SetVehicleFrictionOverride(vehicle, friction);
    }
    vehicle_1.setFrictionOverride = setFrictionOverride;
    /**
     * It switch to highbeam when p1 is set to true.
     *
     * Hash: 0x8B7FD87F0DDB421E | Since: 323
     */
    function setFullbeam(vehicle, toggle) {
        SetVehicleFullbeam(vehicle, toggle);
    }
    vehicle_1.setFullbeam = setFullbeam;
    /**
     * Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
     *
     * Hash: 0x279D50DE5652D935 | Since: 323
     */
    function setGeneratesEngineShockingEvents(vehicle, toggle) {
        SetVehicleGeneratesEngineShockingEvents(vehicle, toggle);
    }
    vehicle_1.setGeneratesEngineShockingEvents = setGeneratesEngineShockingEvents;
    /**
     * Related to car generators & CPlayerSwitchMgrLong
     *
     * Hash: 0x9A75585FB2E54FAD | Since: 323
     */
    function setGeneratorAreaOfInterest(pos, radius) {
        SetVehicleGeneratorAreaOfInterest(pos.x, pos.y, pos.z, radius);
    }
    vehicle_1.setGeneratorAreaOfInterest = setGeneratorAreaOfInterest;
    /**
     * No comment provided
     *
     * Hash: 0x89F149B6131E57DA | Since: 323
     */
    function setGravity(vehicle, toggle) {
        SetVehicleGravity(vehicle, toggle);
    }
    vehicle_1.setGravity = setGravity;
    /**
     * No comment provided
     *
     * Hash: 0x684785568EF26A22 | Since: 323
     */
    function setHandbrake(vehicle, toggle) {
        SetVehicleHandbrake(vehicle, toggle);
    }
    vehicle_1.setHandbrake = setHandbrake;
    /**
     * Use the "AIHandling" string found in handling.meta
     *
     * Hash: 0x10655FAB9915623D | Since: 323
     */
    function setHandlingOverride(vehicle, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        SetVehicleHandlingHashForAi(vehicle, hash);
    }
    vehicle_1.setHandlingOverride = setHandlingOverride;
    /**
     * No comment provided
     *
     * Hash: 0x02398B627547189C | Since: 323
     */
    function setHasBeenDrivenFlag(vehicle, toggle) {
        SetVehicleHasBeenDrivenFlag(vehicle, toggle);
    }
    vehicle_1.setHasBeenDrivenFlag = setHasBeenDrivenFlag;
    /**
     * No comment provided
     *
     * Hash: 0x2B5F9D2AF1F1722D | Since: 323
     */
    function setHasBeenOwnedByPlayer(vehicle, owned) {
        SetVehicleHasBeenOwnedByPlayer(vehicle, owned);
    }
    vehicle_1.setHasBeenOwnedByPlayer = setHasBeenOwnedByPlayer;
    /**
     * If set to true, prevents vehicle sirens from having sound, leaving only the lights.
     *
     * Hash: 0xD8050E0EB60CF274 | Since: 323
     */
    function setHasMutedSirens(vehicle, toggle) {
        SetVehicleHasMutedSirens(vehicle, toggle);
    }
    vehicle_1.setHasMutedSirens = setHasMutedSirens;
    /**
     * if true, axles won't bend.
     *
     * Hash: 0x92F0CF722BC4202F | Since: 323
     */
    function setHasStrongAxles(vehicle, toggle) {
        SetVehicleHasStrongAxles(vehicle, toggle);
    }
    vehicle_1.setHasStrongAxles = setHasStrongAxles;
    /**
     * No comment provided
     *
     * Hash: 0x1AA8A837D2169D94 | Since: 323
     */
    function setHasUnbreakableLights(vehicle, toggle) {
        SetVehicleHasUnbreakableLights(vehicle, toggle);
    }
    vehicle_1.setHasUnbreakableLights = setHasUnbreakableLights;
    /**
     * p1 can be either 0, 1 or 2.
     *
     * Determines how vehicle lights behave when toggled.
     *
     * 0 = Default (Lights can be toggled between off, normal and high beams)
     * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
     * 2 = Always On (Lights can be toggled between normal and high beams)
     *
     * Hash: 0x1FD09E7390A74D54 | Since: 323
     */
    function setHeadlightShadows(vehicle) {
        SetVehicleHeadlightShadows(vehicle, 0);
    }
    vehicle_1.setHeadlightShadows = setHeadlightShadows;
    /**
     * No comment provided
     *
     * Hash: 0x407DC5E97DB1A4D3 | Since: 1493
     */
    function setHomingLockedontoState() {
        Citizen.invokeNative('0x407DC5E97DB1A4D3', undefined, undefined);
    }
    vehicle_1.setHomingLockedontoState = setHomingLockedontoState;
    /**
     * Seems to copy some values in vehicle
     *
     * Hash: 0x6A973569BA094650 | Since: 1604
     */
    function setImpatienceTimer(vehicle) {
        Citizen.invokeNative('0x6A973569BA094650', vehicle, undefined);
    }
    vehicle_1.setImpatienceTimer = setImpatienceTimer;
    /**
     * No comment provided
     *
     * Hash: 0x06582AFF74894C75 | Since: 323
     */
    function setInactiveDuringPlayback(vehicle, toggle) {
        SetVehicleInactiveDuringPlayback(vehicle, toggle);
    }
    vehicle_1.setInactiveDuringPlayback = setInactiveDuringPlayback;
    /**
     * Sets the turn signal enabled for a vehicle.
     * Set turnSignal to 1 for left light, 0 for right light.
     *
     * Hash: 0xB5D45264751B7DF0 | Since: 323
     */
    function setIndicatorLights(vehicle, turnSignal, toggle) {
        SetVehicleIndicatorLights(vehicle, turnSignal, toggle);
    }
    vehicle_1.setIndicatorLights = setIndicatorLights;
    /**
     * doorId: see SET_VEHICLE_DOOR_SHUT
     *
     * Hash: 0xBE70724027F85BCD | Since: 323
     */
    function setIndividualDoorsLocked(vehicle, doorId, doorLockStatus) {
        SetVehicleIndividualDoorsLocked(vehicle, doorId, doorLockStatus);
    }
    vehicle_1.setIndividualDoorsLocked = setIndividualDoorsLocked;
    /**
     * No comment provided
     *
     * Hash: 0x0AD9E8F87FF7C16F | Since: 323
     */
    function setInfluencesWantedLevel() {
        SetVehicleInfluencesWantedLevel(undefined, false);
    }
    vehicle_1.setInfluencesWantedLevel = setInfluencesWantedLevel;
    /**
     * No comment provided
     *
     * Hash: 0xBC2042F090AF6AD3 | Since: 323
     */
    function setInteriorlight(vehicle, toggle) {
        SetVehicleInteriorlight(vehicle, toggle);
    }
    vehicle_1.setInteriorlight = setInteriorlight;
    /**
     * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
     *
     * Hash: 0x9D44FCCE98450843 | Since: 323
     */
    function setInCarModShop(vehicle, toggle) {
        SetVehicleSilent(vehicle, toggle);
    }
    vehicle_1.setInCarModShop = setInCarModShop;
    /**
     * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
     *
     * Hash: 0x31B927BBC44156CD | Since: 323
     */
    function setIsConsideredByPlayer(vehicle, toggle) {
        SetVehicleIsConsideredByPlayer(vehicle, toggle);
    }
    vehicle_1.setIsConsideredByPlayer = setIsConsideredByPlayer;
    /**
     * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
     *
     * Hash: 0x07116E24E9D1929D | Since: 323
     */
    function setIsRacing(vehicle, toggle) {
        SetVehicleIsRacing(vehicle, toggle);
    }
    vehicle_1.setIsRacing = setIsRacing;
    /**
     * No comment provided
     *
     * Hash: 0x67B2C79AA7FF5738 | Since: 323
     */
    function setIsStolen(vehicle, isStolen) {
        SetVehicleIsStolen(vehicle, isStolen);
    }
    vehicle_1.setIsStolen = setIsStolen;
    /**
     * Sets the wanted state of this vehicle.
     *
     * Hash: 0xF7EC25A3EBEEC726 | Since: 323
     */
    function setIsWanted(vehicle, state) {
        SetVehicleIsWanted(vehicle, state);
    }
    vehicle_1.setIsWanted = setIsWanted;
    /**
     * No comment provided
     *
     * Hash: 0xB8FBC8B1330CA9B4 | Since: 323
     */
    function setKeepEngineOnWhenAbandoned(vehicle, toggle) {
        SetVehicleKeepEngineOnWhenAbandoned(vehicle, toggle);
    }
    vehicle_1.setKeepEngineOnWhenAbandoned = setKeepEngineOnWhenAbandoned;
    /**
     * No comment provided
     *
     * Hash: 0x99C82F8A139F3E4E | Since: 323
     */
    function setKersAllowed(vehicle, toggle) {
        SetVehicleKersAllowed(vehicle, toggle);
    }
    vehicle_1.setKersAllowed = setKersAllowed;
    /**
     * set's if the vehicle has lights or not.
     * not an on off toggle.
     * p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
     * p1 = 1 ;vehicle doesn't have lights, always off
     * p1 = 2 ;vehicle has always on lights
     * p1 = 3 ;or even larger like 4,5,... normal lights like =1
     * note1: when using =2 on day it's lowbeam,highbeam
     * but at night it's lowbeam,lowbeam,highbeam
     * note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
     *
     * Hash: 0x34E710FF01247C5A | Since: 323
     */
    function setLights(vehicle, state) {
        SetVehicleLights(vehicle, state);
    }
    vehicle_1.setLights = setLights;
    /**
     * multiplier = brightness of head lights.
     * this value isn't capped afaik.
     *
     * multiplier = 0.0 no lights
     * multiplier = 1.0 default game value
     *
     *
     * Hash: 0xB385454F8791F57C | Since: 323
     */
    function setLightMultiplier(vehicle, multiplier) {
        SetVehicleLightMultiplier(vehicle, multiplier);
    }
    vehicle_1.setLightMultiplier = setLightMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xC50CE861B55EAB8B | Since: 323
     */
    function setLimitSpeedWhenPlayerInactive(vehicle, toggle) {
        Citizen.invokeNative('0xC50CE861B55EAB8B', vehicle, toggle);
    }
    vehicle_1.setLimitSpeedWhenPlayerInactive = setLimitSpeedWhenPlayerInactive;
    /**
     * No comment provided
     *
     * Hash: 0x60BF608F1B8CD1B6 | Since: 323
     */
    function setLivery(vehicle, livery) {
        SetVehicleLivery(vehicle, livery);
    }
    vehicle_1.setLivery = setLivery;
    /**
     * Used to set the secondary livery (the roof on Tornado Custom being one such example.)
     *
     * Livery value is dependent on the amount of liveries present in the vehicle's texture dictionary, for Tornado Custom this would be 0-6.
     *
     * Hash: 0xA6D3A8750DC73270 | Since: 505
     */
    function setLivery2(vehicle, livery) {
        SetVehicleRoofLivery(vehicle, livery);
    }
    vehicle_1.setLivery2 = setLivery2;
    /**
     * No comment provided
     *
     * Hash: 0x93AE6A61BE015BF1 | Since: 323
     */
    function setLodMultiplier(vehicle, multiplier) {
        SetVehicleLodMultiplier(vehicle, multiplier);
    }
    vehicle_1.setLodMultiplier = setLodMultiplier;
    /**
     * To reset the max speed, set the `speed` value to `0.0` or lower.
     *
     * Hash: 0xBAA045B4E42F3C06 | Since: 1103
     */
    function setMaxSpeed(vehicle, speed) {
        SetVehicleMaxSpeed(vehicle, speed);
    }
    vehicle_1.setMaxSpeed = setMaxSpeed;
    /**
     * No comment provided
     *
     * Hash: 0xE851E480B814D4BA | Since: 323
     */
    function setMayBeUsedByGotoPointAnyMeans(vehicle) {
        Citizen.invokeNative('0xE851E480B814D4BA', vehicle, false);
    }
    vehicle_1.setMayBeUsedByGotoPointAnyMeans = setMayBeUsedByGotoPointAnyMeans;
    /**
     * In b944, there are 50 (0 - 49) mod types.
     *
     * Sets the vehicle mod.
     * The vehicle must have a mod kit first.
     *
     * Any out of range ModIndex is stock.
     *
     * #Mod Type
     * Spoilers - 0
     * Front Bumper - 1
     * Rear Bumper - 2
     * Side Skirt - 3
     * Exhaust - 4
     * Frame - 5
     * Grille - 6
     * Hood - 7
     * Fender - 8
     * Right Fender - 9
     * Roof - 10
     * Engine - 11
     * Brakes - 12
     * Transmission - 13
     * Horns - 14 (modIndex from 0 to 51)
     * Suspension - 15
     * Armor - 16
     * Front Wheels - 23
     * Back Wheels - 24 //only for motocycles
     * Plate holders - 25
     * Trim Design - 27
     * Ornaments - 28
     * Dial Design - 30
     * Steering Wheel - 33
     * Shifter Leavers - 34
     * Plaques - 35
     * Hydraulics - 38
     * Livery - 48
     *
     * ENUMS: https://pastebin.com/QzEAn02v
     *
     * Hash: 0x6AF0636DDEDCB6DD | Since: 323
     */
    function setMod(vehicle, modType, modIndex, customTires) {
        SetVehicleMod(vehicle, modType, modIndex, customTires);
    }
    vehicle_1.setMod = setMod;
    /**
     * Makes the vehicle stop spawning naturally in traffic. Here's an essential example:
     *
     * `VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);`
     *
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x0FC2D89AC25A5814 | Since: 323
     */
    function setModelIsSuppressed(model, suppressed) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        SetVehicleModelIsSuppressed(model, suppressed);
    }
    vehicle_1.setModelIsSuppressed = setModelIsSuppressed;
    /**
     * paintType:
     * 0: Normal
     * 1: Metallic
     * 2: Pearl
     * 3: Matte
     * 4: Metal
     * 5: Chrome
     * 6: Chameleon
     *
     * color: number of the color.
     *
     * p3 seems to always be 0.
     *
     * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x43FEB945EE7F85B8 | Since: 323
     */
    function setModColor1(vehicle, paintType, color, pearlescentColor) {
        SetVehicleModColor1(vehicle, paintType, color, pearlescentColor);
    }
    vehicle_1.setModColor1 = setModColor1;
    /**
     * Changes the secondary paint type and color
     * paintType:
     * 0: Normal
     * 1: Metallic
     * 2: Pearl
     * 3: Matte
     * 4: Metal
     * 5: Chrome
     * 6: Chameleon
     *
     * color: number of the color
     *
     * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x816562BADFDEC83E | Since: 323
     */
    function setModColor2(vehicle, paintType, color) {
        SetVehicleModColor2(vehicle, paintType, color);
    }
    vehicle_1.setModColor2 = setModColor2;
    /**
     * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
     *
     * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
     *
     * Hash: 0x1F2AA07F00B3217A | Since: 323
     */
    function setModKit(vehicle, modKit) {
        SetVehicleModKit(vehicle, modKit);
    }
    vehicle_1.setModKit = setModKit;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0xBFDF984E2C22B94F | Since: 323
     */
    function setNameDebug(vehicle, name) {
        SetVehicleNameDebug(vehicle, name);
    }
    vehicle_1.setNameDebug = setNameDebug;
    /**
     * No comment provided
     *
     * Hash: 0xFBA550EA44404EE6 | Since: 323
     */
    function setNeedsToBeHotwired(vehicle, toggle) {
        SetVehicleNeedsToBeHotwired(vehicle, toggle);
    }
    vehicle_1.setNeedsToBeHotwired = setNeedsToBeHotwired;
    /**
     * Sets the color of the neon lights of the specified vehicle.
     *
     * Hash: 0x8E0A582209A62695 | Since: 323
     */
    function setNeonColour(vehicle, r, g, b) {
        SetVehicleNeonLightsColour(vehicle, r, g, b);
    }
    vehicle_1.setNeonColour = setNeonColour;
    /**
     * Sets the neon lights of the specified vehicle on/off.
     *
     * Indices:
     * 0 = Left
     * 1 = Right
     * 2 = Front
     * 3 = Back
     *
     * Hash: 0x2AA720E4287BF269 | Since: 323
     */
    function setNeonEnabled(vehicle, index, toggle) {
        SetVehicleNeonLightEnabled(vehicle, index, toggle);
    }
    vehicle_1.setNeonEnabled = setNeonEnabled;
    /**
     * Index references CVehicleModelColor
     *
     * Hash: 0xB93B2867F7B479D1 | Since: 1493
     */
    function setNeonIndexColour(vehicle, index) {
        SetVehicleNeonLightsColor2(vehicle, index);
    }
    vehicle_1.setNeonIndexColour = setNeonIndexColour;
    /**
     * No comment provided
     *
     * Hash: 0xAB04325045427AAE | Since: 323
     */
    function setNotStealableAmbiently(vehicle) {
        Citizen.invokeNative('0xAB04325045427AAE', vehicle, false);
    }
    vehicle_1.setNotStealableAmbiently = setNotStealableAmbiently;
    /**
     * No comment provided
     *
     * Hash: 0x5E569EC46EC21CAE | Since: 323
     */
    function setNoExplosionDamageFromDriver(vehicle, toggle) {
        Citizen.invokeNative('0x5E569EC46EC21CAE', vehicle, toggle);
    }
    vehicle_1.setNoExplosionDamageFromDriver = setNoExplosionDamageFromDriver;
    /**
     * Sets a vehicle's license plate text.  8 chars maximum.
     *
     * Example:
     * `Ped playerPed = PLAYER::PLAYER_PED_ID();`
     * `Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);`
     * char *plateText = "KING";
     * `VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);`
     *
     * Hash: 0x95A88F0B409CDA47 | Since: 323
     */
    function setNumberPlateText(vehicle, plateText) {
        SetVehicleNumberPlateText(vehicle, plateText);
    }
    vehicle_1.setNumberPlateText = setNumberPlateText;
    /**
     * Plates:
     * Blue/White - 0
     * Yellow/black - 1
     * Yellow/Blue - 2
     * Blue/White2 - 3
     * Blue/White3 - 4
     * Yankton - 5
     *
     * Hash: 0x9088EB5A43FFB0A1 | Since: 323
     */
    function setNumberPlateTextIndex(vehicle, plateIndex) {
        SetVehicleNumberPlateTextIndex(vehicle, plateIndex);
    }
    vehicle_1.setNumberPlateTextIndex = setNumberPlateTextIndex;
    /**
     * No comment provided
     *
     * Hash: 0x35BB21DE06784373 | Since: 463
     */
    function setOccupantsTakeExplosiveDamage(vehicle, toggle) {
        Citizen.invokeNative('0x35BB21DE06784373', vehicle, toggle);
    }
    vehicle_1.setOccupantsTakeExplosiveDamage = setOccupantsTakeExplosiveDamage;
    /**
     * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
     *
     * sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
     *
     * Hash: 0x49733E92263139D1 | Since: 323
     */
    function setOnGroundProperly(vehicle) {
        return SetVehicleOnGroundProperly(vehicle, 0);
    }
    vehicle_1.setOnGroundProperly = setOnGroundProperly;
    /**
     * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
     *
     * Hash: 0xF19D095E42D430CC | Since: 323
     */
    function setOutOfControl(vehicle, killDriver, explodeOnImpact) {
        SetVehicleOutOfControl(vehicle, killDriver, explodeOnImpact);
    }
    vehicle_1.setOutOfControl = setOutOfControl;
    /**
     * 1000 is max health
     * Begins leaking gas at around 650 health
     * -999.90002441406 appears to be minimum health, although nothing special occurs
     *
     * Hash: 0x70DB57649FA8D0D8 | Since: 323
     */
    function setPetrolTankHealth(vehicle, health) {
        SetVehiclePetrolTankHealth(vehicle, health);
    }
    vehicle_1.setPetrolTankHealth = setPetrolTankHealth;
    /**
     * No comment provided
     *
     * Hash: 0x5AFEEDD9BB2899D7 | Since: 323
     */
    function setProvidesCover(vehicle, toggle) {
        SetVehicleProvidesCover(vehicle, toggle);
    }
    vehicle_1.setProvidesCover = setProvidesCover;
    /**
     * No comment provided
     *
     * Hash: 0xCF9159024555488C | Since: 944
     */
    function setReadyForCleanup() {
        Citizen.invokeNative('0xCF9159024555488C', undefined);
    }
    vehicle_1.setReadyForCleanup = setReadyForCleanup;
    /**
     * Reduces grip significantly so it's hard to go anywhere.
     *
     * Hash: 0x222FF6A823D122E2 | Since: 323
     */
    function setReduceGrip(vehicle, toggle) {
        SetVehicleReduceGrip(vehicle, toggle);
    }
    vehicle_1.setReduceGrip = setReduceGrip;
    /**
     * val is 0-3
     * Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
     *
     * Hash: 0x6DEE944E1EE90CFB | Since: 1604
     */
    function setReduceGripLevel(vehicle, val) {
        SetVehicleReduceTraction(vehicle, val);
    }
    vehicle_1.setReduceGripLevel = setReduceGripLevel;
    /**
     * No comment provided
     *
     * Hash: 0xC4B3347BD68BD609 | Since: 573
     */
    function setRemoveAggressiveCarjackMission() {
        Citizen.invokeNative('0xC4B3347BD68BD609', undefined);
    }
    vehicle_1.setRemoveAggressiveCarjackMission = setRemoveAggressiveCarjackMission;
    /**
     * No comment provided
     *
     * Hash: 0x2311DD7159F00582 | Since: 323
     */
    function setRespectsLocksWhenHasDriver(vehicle) {
        Citizen.invokeNative('0x2311DD7159F00582', vehicle, false);
    }
    vehicle_1.setRespectsLocksWhenHasDriver = setRespectsLocksWhenHasDriver;
    /**
     * No comment provided
     *
     * Hash: 0x09606148B6C71DEF | Since: 323
     */
    function setRudderBroken(vehicle, toggle) {
        SetVehicleRudderBroken(vehicle, toggle);
    }
    vehicle_1.setRudderBroken = setRudderBroken;
    /**
     * Only works during nighttime.
     *
     * Hash: 0x14E85C5EE7A4D542 | Since: 323
     */
    function setSearchlight(heli, toggle, canBeUsedByAI) {
        SetVehicleSearchlight(heli, toggle, canBeUsedByAI);
    }
    vehicle_1.setSearchlight = setSearchlight;
    /**
     * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
     *
     * `WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);`
     *
     * Hash: 0x74CD9A9327A282EA | Since: 323
     */
    function setShootAtTarget(driver, entity, xTarget, yTarget, zTarget) {
        SetVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget);
    }
    vehicle_1.setShootAtTarget = setShootAtTarget;
    /**
     * Does nothing. It's a nullsub.
     *
     * Hash: 0x99A05839C46CE316 | Since: 1604
     */
    function setShuntOnStick(toggle) {
        Citizen.invokeNative('0x99A05839C46CE316', toggle);
    }
    vehicle_1.setShuntOnStick = setShuntOnStick;
    /**
     * Activate siren on vehicle (Only works if the vehicle has a siren).
     *
     * Hash: 0xF4924635A19EB37D | Since: 323
     */
    function setSiren(vehicle, toggle) {
        SetVehicleSiren(vehicle, toggle);
    }
    vehicle_1.setSiren = setSiren;
    /**
     * No comment provided
     *
     * Hash: 0xF051D9BFB6BA39C0 | Since: 877
     */
    function setSlipstreamingShouldTimeOut(toggle) {
        Citizen.invokeNative('0xF051D9BFB6BA39C0', toggle);
    }
    vehicle_1.setSlipstreamingShouldTimeOut = setSlipstreamingShouldTimeOut;
    /**
     * Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
     * May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
     *
     * Hash: 0x1CF38D529D7441D9 | Since: 323
     */
    function setStaysFrozenWhenCleanedUp(vehicle, toggle) {
        SetVehicleSt(vehicle, toggle);
    }
    vehicle_1.setStaysFrozenWhenCleanedUp = setStaysFrozenWhenCleanedUp;
    /**
     * No comment provided
     *
     * Hash: 0x9007A2F21DC108D4 | Since: 323
     */
    function setSteeringBiasScalar() {
        SetVehicleSteeringBiasScalar(undefined, 0);
    }
    vehicle_1.setSteeringBiasScalar = setSteeringBiasScalar;
    /**
     * Locks the vehicle's steering to the desired angle, explained below.
     *
     * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
     *
     * Steer bias:
     * -1.0 = full right
     * 0.0 = centered steering
     * 1.0 = full left
     *
     * Hash: 0x42A8EC77D5150CBE | Since: 323
     */
    function setSteerBias(vehicle, value) {
        SetVehicleSteerBias(vehicle, value);
    }
    vehicle_1.setSteerBias = setSteerBias;
    /**
     * No comment provided
     *
     * Hash: 0xDCE97BDF8A0EABC8 | Since: 1103
     */
    function setSteerForBuildings(vehicle) {
        Citizen.invokeNative('0xDCE97BDF8A0EABC8', vehicle, undefined);
    }
    vehicle_1.setSteerForBuildings = setSteerForBuildings;
    /**
     * sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:
     * CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
     * {
     * CVehicle *result; // rax@1
     *
     * result = EntityAsCVehicle(a1);
     * if ( result )
     * {
     * result->field_886 &= 0xEFu;
     * result->field_886 |= 16 * (a2 & 1);
     * }
     * return result;
     * }
     *
     * Hash: 0x6EBFB22D646FFC18 | Since: 323
     */
    function setStopInstantlyWhenPlayerInactive(vehicle, toggle) {
        Citizen.invokeNative('0x6EBFB22D646FFC18', vehicle, toggle);
    }
    vehicle_1.setStopInstantlyWhenPlayerInactive = setStopInstantlyWhenPlayerInactive;
    /**
     * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
     *
     * Hash: 0x3E8C8727991A8A0B | Since: 323
     */
    function setStrong(vehicle, toggle) {
        SetVehicleStrong(vehicle, toggle);
    }
    vehicle_1.setStrong = setStrong;
    /**
     * No comment provided
     *
     * Hash: 0x5815BD2763178DF4 | Since: 2802
     */
    function setTailLights(vehicle, toggle) {
        Citizen.invokeNative('0x5815BD2763178DF4', vehicle, toggle);
    }
    vehicle_1.setTailLights = setTailLights;
    /**
     * No comment provided
     *
     * Hash: 0x737E398138550FFF | Since: 944
     */
    function setTankStationary(vehicle) {
        Citizen.invokeNative('0x737E398138550FFF', vehicle, false);
    }
    vehicle_1.setTankStationary = setTankStationary;
    /**
     * No comment provided
     *
     * Hash: 0x56B94C6D7127DFBA | Since: 323
     */
    function setTankTurretPosition(vehicle, position) {
        SetVehicleTankTurretPosition(vehicle, position, false);
    }
    vehicle_1.setTankTurretPosition = setTankTurretPosition;
    /**
     * No comment provided
     *
     * Hash: 0x2E0A74E1002380B1 | Since: 323
     */
    function setTimedExplosion(vehicle, ped, toggle) {
        SetVehicleTimedExplosion(vehicle, ped, toggle);
    }
    vehicle_1.setTimedExplosion = setTimedExplosion;
    /**
     * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
     *
     * Hash: 0xFE54B92A344583CA | Since: 323
     */
    function setTowTruckArmPosition(vehicle, position) {
        SetVehicleTowTruckArmPosition(vehicle, position);
    }
    vehicle_1.setTowTruckArmPosition = setTowTruckArmPosition;
    /**
     * No comment provided
     *
     * Hash: 0x1093408B4B9D1146 | Since: 323
     */
    function setTurretSpeedThisFrame(vehicle, speed) {
        SetVehicleTurretSpeedThisFrame(vehicle, speed);
    }
    vehicle_1.setTurretSpeedThisFrame = setTurretSpeedThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x0581730AB9380412 | Since: 1103
     */
    function setTurretTarget(vehicle, pos) {
        Citizen.invokeNative('0x0581730AB9380412', vehicle, false, pos.x, pos.y, pos.z, false);
    }
    vehicle_1.setTurretTarget = setTurretTarget;
    /**
     * Allows you to toggle bulletproof tires.
     *
     * Hash: 0xEB9DC3C7D8596C46 | Since: 323
     */
    function setTyresCanBurst(vehicle, toggle) {
        SetVehicleTyresCanBurst(vehicle, toggle);
    }
    vehicle_1.setTyresCanBurst = setTyresCanBurst;
    /**
     * `"To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)`
     * to burst all tyres type it 8 times where p1 = 0 to 7.
     *
     * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
     *
     * '0 = wheel_lf / bike, plane or jet front
     * '1 = wheel_rf
     * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
     * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
     * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
     * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
     * '45 = 6 wheels trailer mid wheel left
     * '47 = 6 wheels trailer mid wheel right
     *
     * Hash: 0xEC6A202EE4960385 | Since: 323
     */
    function setTyreBurst(vehicle, index, onRim) {
        SetVehicleTyreBurst(vehicle, index, onRim, 0);
    }
    vehicle_1.setTyreBurst = setTyreBurst;
    /**
     * tyreIndex = 0 to 4 on normal vehicles
     *
     * '0 = wheel_lf / bike, plane or jet front
     * '1 = wheel_rf
     * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
     * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
     * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
     * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
     * '45 = 6 wheels trailer mid wheel left
     * '47 = 6 wheels trailer mid wheel right
     *
     * Hash: 0x6E13FC662B882D1D | Since: 323
     */
    function setTyreFixed(vehicle, tyreIndex) {
        SetVehicleTyreFixed(vehicle, tyreIndex);
    }
    vehicle_1.setTyreFixed = setTyreFixed;
    /**
     * Sets the tire smoke's color of this vehicle.
     *
     * vehicle: The vehicle that is the target of this method.
     * r: The red level in the RGB color code.
     * g: The green level in the RGB color code.
     * b: The blue level in the RGB color code.
     *
     * Note: setting r,g,b to 0 will give the car the "Patriot" tire smoke.
     *
     * Hash: 0xB5BA80F839791C0F | Since: 323
     */
    function setTyreSmokeColor(vehicle, r, g, b) {
        SetVehicleTyreSmokeColor(vehicle, r, g, b);
    }
    vehicle_1.setTyreSmokeColor = setTyreSmokeColor;
    /**
     * No comment provided
     *
     * Hash: 0x8ABA6AF54B942B95 | Since: 323
     */
    function setUndriveable(vehicle, toggle) {
        SetVehicleUndriveable(vehicle, toggle);
    }
    vehicle_1.setUndriveable = setUndriveable;
    /**
     * No comment provided
     *
     * Hash: 0xE05DD0E9707003A3 | Since: 323
     */
    function setUsedForPilotSchool(vehicle, toggle) {
        Citizen.invokeNative('0xE05DD0E9707003A3', vehicle, toggle);
    }
    vehicle_1.setUsedForPilotSchool = setUsedForPilotSchool;
    /**
     * vehicle must be a plane
     *
     * Hash: 0xCAC66558B944DA67 | Since: 323
     */
    function setUsesLargeRearRamp(vehicle, toggle) {
        SetVehicleUsesLargeRearRamp(vehicle, toggle);
    }
    vehicle_1.setUsesLargeRearRamp = setUsesLargeRearRamp;
    /**
     * No comment provided
     *
     * Hash: 0xBB2333BB87DDD87F | Since: 757
     */
    function setUsesMpPlayerDamageMultiplier() {
        Citizen.invokeNative('0xBB2333BB87DDD87F', undefined, undefined);
    }
    vehicle_1.setUsesMpPlayerDamageMultiplier = setUsesMpPlayerDamageMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x1D97D1E3A70A649F | Since: 323
     */
    function setUseAlternateHandling(vehicle, toggle) {
        SetVehicleUseAlternateHandling(vehicle, toggle);
    }
    vehicle_1.setUseAlternateHandling = setUseAlternateHandling;
    /**
     * Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)
     *
     * Hash: 0x41290B40FA63E6DA | Since: 1011
     */
    function setUseBoostButtonForWheelRetract(toggle) {
        Citizen.invokeNative('0x41290B40FA63E6DA', toggle);
    }
    vehicle_1.setUseBoostButtonForWheelRetract = setUseBoostButtonForWheelRetract;
    /**
     * No comment provided
     *
     * Hash: 0xE023E8AC4EF7C117 | Since: 323
     */
    function setUseCutsceneWheelCompression(p0) {
        return SetVehicleUseCutsceneWheelCompression(p0, false, false, false);
    }
    vehicle_1.setUseCutsceneWheelCompression = setUseCutsceneWheelCompression;
    /**
     * No comment provided
     *
     * Hash: 0x88BC673CA9E0AE99 | Since: 323
     */
    function setUseMoreRestrictiveSpawnChecks(vehicle) {
        Citizen.invokeNative('0x88BC673CA9E0AE99', vehicle, false);
    }
    vehicle_1.setUseMoreRestrictiveSpawnChecks = setUseMoreRestrictiveSpawnChecks;
    /**
     * No comment provided
     *
     * Hash: 0xC45C27EF50F36ADC | Since: 323
     */
    function setUsePlayerLightSettings(vehicle, toggle) {
        SetVehicleUsePlayerLightSettings(vehicle, toggle);
    }
    vehicle_1.setUsePlayerLightSettings = setUsePlayerLightSettings;
    /**
     * No comment provided
     *
     * Hash: 0x86B4B6212CB8B627 | Since: 1011
     */
    function setWeaponCanTargetObjects(vehicle, toggle) {
        SetVehicleWeaponsDisabled(vehicle, toggle);
    }
    vehicle_1.setWeaponCanTargetObjects = setWeaponCanTargetObjects;
    /**
     * No comment provided
     *
     * Hash: 0x45A561A9421AB6AD | Since: 944
     */
    function setWeaponDamageScale(vehicle, multiplier) {
        return SetVehicleUnkDamageMultiplier(vehicle, multiplier);
    }
    vehicle_1.setWeaponDamageScale = setWeaponDamageScale;
    /**
     * Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
     * For example, you can "remove" any vehicle weapon from any vehicle.
     * ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
     *
     * Hash: 0x44CD1F493DB2A0A6 | Since: 944
     */
    function setWeaponRestrictedAmmo(vehicle, weaponIndex, capacity) {
        SetVehicleWeaponCapacity(vehicle, weaponIndex, capacity);
    }
    vehicle_1.setWeaponRestrictedAmmo = setWeaponRestrictedAmmo;
    /**
     * No comment provided
     *
     * Hash: 0x29B18B4FD460CA8F | Since: 323
     */
    function setWheelsCanBreak(vehicle, enabled) {
        SetVehicleWheelsCanBreak(vehicle, enabled);
    }
    vehicle_1.setWheelsCanBreak = setWheelsCanBreak;
    /**
     * No comment provided
     *
     * Hash: 0xA37B9A517B133349 | Since: 323
     */
    function setWheelsCanBreakOffWhenBlowUp(vehicle, toggle) {
        SetVehicleWheelsCanBreakOffWhenBlowUp(vehicle, toggle);
    }
    vehicle_1.setWheelsCanBreakOffWhenBlowUp = setWheelsCanBreakOffWhenBlowUp;
    /**
     * 0: Sport
     * 1: Muscle
     * 2: Lowrider
     * 3: SUV
     * 4: Offroad
     * 5: Tuner
     * 6: Bike Wheels
     * 7: High End
     * 8: Benny's Originals
     * 9: Benny's Bespoke
     * 10: Racing
     * 11: Street
     * 12: Track
     *
     * Hash: 0x487EB21CC7295BA1 | Since: 323
     */
    function setWheelType(vehicle, WheelType) {
        SetVehicleWheelType(vehicle, WheelType);
    }
    vehicle_1.setWheelType = setWheelType;
    /**
     * No comment provided
     *
     * Hash: 0xBE5C1255A1830FF5 | Since: 323
     */
    function setWillForceOtherVehiclesToStop(vehicle, toggle) {
        Citizen.invokeNative('0xBE5C1255A1830FF5', vehicle, toggle);
    }
    vehicle_1.setWillForceOtherVehiclesToStop = setWillForceOtherVehiclesToStop;
    /**
     * No comment provided
     *
     * Hash: 0x2C4A1590ABF43E8B | Since: 323
     */
    function setWillTellOthersToHurry(vehicle) {
        Citizen.invokeNative('0x2C4A1590ABF43E8B', vehicle, false);
    }
    vehicle_1.setWillTellOthersToHurry = setWillTellOthersToHurry;
    /**
     * enum WindowTints
     * {
     * WINDOWTINT_NONE,
     * WINDOWTINT_PURE_BLACK,
     * WINDOWTINT_DARKSMOKE,
     * WINDOWTINT_LIGHTSMOKE,
     * WINDOWTINT_STOCK,
     * WINDOWTINT_LIMO,
     * WINDOWTINT_GREEN
     * };
     * Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0x57C51E6BAD752696 | Since: 323
     */
    function setWindowTint(vehicle, tint) {
        SetVehicleWindowTint(vehicle, tint);
    }
    vehicle_1.setWindowTint = setWindowTint;
    /**
     * `color`: is the paint index for the vehicle.
     * Paint index goes from 0 to 12.
     * Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
     * Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
     *
     * Hash: 0xE41033B25D003A07 | Since: 1604
     */
    function setXenonLightColorIndex(vehicle, colorIndex) {
        SetVehicleXenonLightsColor(vehicle, colorIndex);
    }
    vehicle_1.setXenonLightColorIndex = setXenonLightColorIndex;
    /**
     * Enables/disables the ability to wheelie on motorcycles.
     *
     * Hash: 0x1312DDD8385AEE4E | Since: 1103
     */
    function setWheelieEnabled(vehicle, enabled) {
        Citizen.invokeNative('0x1312DDD8385AEE4E', vehicle, enabled);
    }
    vehicle_1.setWheelieEnabled = setWheelieEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xF660602546D27BA8 | Since: 944
     */
    function setWheelsExtendedInstantly(vehicle) {
        RaiseRetractableWheels(vehicle);
    }
    vehicle_1.setWheelsExtendedInstantly = setWheelsExtendedInstantly;
    /**
     * No comment provided
     *
     * Hash: 0x5335BE58C083E74E | Since: 1011
     */
    function setWheelsRetractedInstantly(vehicle) {
        LowerRetractableWheels(vehicle);
    }
    vehicle_1.setWheelsRetractedInstantly = setWheelsRetractedInstantly;
    /**
     * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
     *
     * Hash: 0x9438F7AD68771A20 | Since: 323
     */
    function skipTimeInPlaybackRecorded(vehicle, time) {
        SkipTimeInPlaybackRecordedVehicle(vehicle, time);
    }
    vehicle_1.skipTimeInPlaybackRecorded = skipTimeInPlaybackRecorded;
    /**
     * No comment provided
     *
     * Hash: 0xAB8E2EDA0C0A5883 | Since: 323
     */
    function skipToEndAndStopPlaybackRecorded(vehicle) {
        SkipToEndAndStopPlaybackRecordedVehicle(vehicle);
    }
    vehicle_1.skipToEndAndStopPlaybackRecorded = skipToEndAndStopPlaybackRecorded;
    /**
     * windowIndex:
     * 0 = Front Left Window
     * 1 = Front Right Window
     * 2 = Rear Left Window
     * 3 = Rear Right Window
     * 4 = Front Windscreen
     * 5 = Rear Windscreen
     * 6 = Mid Left
     * 7 = Mid Right
     * 8 = Invalid
     *
     * Hash: 0x9E5B5E4D2CCD2259 | Since: 323
     */
    function smashWindow(vehicle, windowIndex) {
        SmashVehicleWindow(vehicle, windowIndex);
    }
    vehicle_1.smashWindow = smashWindow;
    /**
     * No comment provided
     *
     * Hash: 0x374706271354CB18 | Since: 323
     */
    function stabiliseEntityAttachedToHeli(vehicle, entity) {
        StabiliseEntityAttachedToHeli(vehicle, entity, 0);
    }
    vehicle_1.stabiliseEntityAttachedToHeli = stabiliseEntityAttachedToHeli;
    /**
     * `p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).`
     *
     * See REQUEST_VEHICLE_RECORDING
     *
     * Hash: 0x3F878F92B3A7A071 | Since: 323
     */
    function startPlaybackRecorded(vehicle, recording, script) {
        StartPlaybackRecordedVehicle(vehicle, recording, script, false);
    }
    vehicle_1.startPlaybackRecorded = startPlaybackRecorded;
    /**
     * AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
     *
     * FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.
     *
     * Hash: 0x29DE5FA52D00428C | Since: 323
     */
    function startPlaybackRecordedUsingAi(vehicle, recording, script, speed, drivingStyle) {
        StartPlaybackRecordedVehicleUsingAi(vehicle, recording, script, speed, drivingStyle);
    }
    vehicle_1.startPlaybackRecordedUsingAi = startPlaybackRecordedUsingAi;
    /**
     * flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
     *
     * time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
     *
     * Hash: 0x7D80FD645D4DA346 | Since: 323
     */
    function startPlaybackRecordedWithFlags(vehicle, recording, script, flags, time, drivingStyle) {
        StartPlaybackRecordedVehicleWithFlags(vehicle, recording, script, flags, time, drivingStyle);
    }
    vehicle_1.startPlaybackRecordedWithFlags = startPlaybackRecordedWithFlags;
    /**
     * No comment provided
     *
     * Hash: 0xB8FF7AB45305C345 | Since: 323
     */
    function startAlarm(vehicle) {
        StartVehicleAlarm(vehicle);
    }
    vehicle_1.startAlarm = startAlarm;
    /**
     * Sounds the horn for the specified vehicle.
     *
     * vehicle: The vehicle to activate the horn for.
     * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
     * duration: The duration to sound the horn, in milliseconds.
     *
     * Note: If a player is in the vehicle, it will only sound briefly.
     *
     * Hash: 0x9C8C6504B5B63D2C | Since: 323
     */
    function startHorn(vehicle, duration, mode, forever) {
        if (typeof mode === 'string')
            mode = misc.getHashKey(mode);
        StartVehicleHorn(vehicle, duration, mode, forever);
    }
    vehicle_1.startHorn = startHorn;
    /**
     * No comment provided
     *
     * Hash: 0x0F87E938BDF29D66 | Since: 323
     */
    function stopAllGarageActivity() {
        StopAllGarageActivity();
    }
    vehicle_1.stopAllGarageActivity = stopAllGarageActivity;
    /**
     * Stops CTaskBringVehicleToHalt
     *
     * Hash: 0x7C06330BFDDA182E | Since: 1103
     */
    function stopBringingToHalt(vehicle) {
        StopBringVehicleToHalt(vehicle);
    }
    vehicle_1.stopBringingToHalt = stopBringingToHalt;
    /**
     * No comment provided
     *
     * Hash: 0x54833611C17ABDEA | Since: 323
     */
    function stopPlaybackRecorded(vehicle) {
        StopPlaybackRecordedVehicle(vehicle);
    }
    vehicle_1.stopPlaybackRecorded = stopPlaybackRecorded;
    /**
     * No comment provided
     *
     * Hash: 0x83F813570FF519DE | Since: 573
     */
    function suppressNeonsOn(vehicle, toggle) {
        DisableVehicleNeonLights(vehicle, toggle);
    }
    vehicle_1.suppressNeonsOn = suppressNeonsOn;
    /**
     * Same call as ALLOW_BOAT_BOOM_TO_ANIMATE
     *
     * Hash: 0xC1F981A6F74F0C23 | Since: 323
     */
    function swingBoatBoomFreely(vehicle, toggle) {
        GetBoatBoomPositionRatio2(vehicle, toggle);
    }
    vehicle_1.swingBoatBoomFreely = swingBoatBoomFreely;
    /**
     * Sets the boat boom position for the `TR3` trailer.
     * Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
     * To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
     *
     * Hash: 0xF488C566413B4232 | Since: 323
     */
    function swingBoatBoomToRatio(vehicle, ratio) {
        SetBoatBoomPositionRatio(vehicle, ratio);
    }
    vehicle_1.swingBoatBoomToRatio = swingBoatBoomToRatio;
    /**
     * Toggles whether ambient trains can spawn on the specified track or not
     *
     * `trackId` is the internal id of the train track to switch.
     * `state` is whether ambient trains can spawn or not
     *
     * trackIds
     * 0 (`trains1.dat`) Main track around SA
     * 1 (`trains2.dat`) Davis Quartz Quarry branch
     * 2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
     * 3 (`trains4.dat`) Metro track circuit
     * 4 (`trains5.dat`) Branch in Mirror Park Railyard
     * 5 (`trains6.dat`) Branch in Mirror Park Railyard
     * 6 (`trains7.dat`) LS branch to Mirror Park Railyard
     * 7 (`trains8.dat`) Overground part of metro track along Forum Dr.
     * 8 (`trains9.dat`) Branch to Mirror Park Railyard
     * 9 (`trains10.dat`) Yankton train
     * 10 (`trains11.dat`) Part of metro track near mission row
     * 11 (`trains12.dat`) Yankton prologue mission train
     * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
     *
     * Hash: 0xFD813BB7DB977F20 | Since: 323
     */
    function switchTrainTrack(trackId, state) {
        SwitchTrainTrack(trackId, state);
    }
    vehicle_1.switchTrainTrack = switchTrainTrack;
    /**
     * Toggles:
     * UNK17 - 17
     * Turbo - 18
     * UNK19 - 19
     * Tire Smoke - 20
     * UNK21 - 21
     * Xenon Headlights - 22
     *
     * Hash: 0x2A1F4F37F95BAD08 | Since: 323
     */
    function toggleMod(vehicle, modType, toggle) {
        ToggleVehicleMod(vehicle, modType, toggle);
    }
    vehicle_1.toggleMod = toggleMod;
    /**
     * in script hook .net
     *
     * Vehicle v = ...;
     * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
     *
     * Hash: 0x64473AEFDCF47DCA | Since: 323
     */
    function trackVisibility(vehicle) {
        TrackVehicleVisibility(vehicle);
    }
    vehicle_1.trackVisibility = trackVisibility;
    /**
     * Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
     *
     * Hash: 0x2A69FFD1B42BFF9E | Since: 1290
     */
    function transformToCar(vehicle, noAnimation) {
        TransformToCar(vehicle, noAnimation);
    }
    vehicle_1.transformToCar = transformToCar;
    /**
     * Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
     *
     * Hash: 0xBE4C854FFDB6EEBE | Since: 1365
     */
    function transformToSubmarine(vehicle, noAnimation) {
        return TransformToSubmarine(vehicle, noAnimation);
    }
    vehicle_1.transformToSubmarine = transformToSubmarine;
    /**
     * No comment provided
     *
     * Hash: 0x8879EE09268305D5 | Since: 323
     */
    function unpausePlaybackRecorded(vehicle) {
        UnpausePlaybackRecordedVehicle(vehicle);
    }
    vehicle_1.unpausePlaybackRecorded = unpausePlaybackRecorded;
    /**
     * No comment provided
     *
     * Hash: 0x756AE6E962168A04 | Since: 944
     */
    function setEnableNormaliseRampCarVerticalVeloctiy() {
        SetVehicleRampUpwardsLaunchMotion(undefined, undefined);
    }
    vehicle_1.setEnableNormaliseRampCarVerticalVeloctiy = setEnableNormaliseRampCarVerticalVeloctiy;
    /**
     * No comment provided
     *
     * Hash: 0x1BBAC99C0BC53656 | Since: 944
     */
    function setEnableRampCarSideImpulse() {
        SetVehicleRampSidewaysLaunchMotion(undefined, undefined);
    }
    vehicle_1.setEnableRampCarSideImpulse = setEnableRampCarSideImpulse;
    /**
     * No comment provided
     *
     * Hash: 0xF3B0E0AED097A3F5 | Since: 1103
     */
    function setExtenableSideTargetRatio() {
        return Citizen.invokeNative('0xF3B0E0AED097A3F5', undefined, undefined);
    }
    vehicle_1.setExtenableSideTargetRatio = setExtenableSideTargetRatio;
    /**
     * No comment provided
     *
     * Hash: 0x9D30687C57BAA0BB | Since: 1011
     */
    function setJetWashForceEnabled() {
        Citizen.invokeNative('0x9D30687C57BAA0BB', undefined);
    }
    vehicle_1.setJetWashForceEnabled = setJetWashForceEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x0419B167EE128F33 | Since: 1103
     */
    function setOverrideExtenableSideRatio() {
        return Citizen.invokeNative('0x0419B167EE128F33', undefined, undefined);
    }
    vehicle_1.setOverrideExtenableSideRatio = setOverrideExtenableSideRatio;
    /**
     * No comment provided
     *
     * Hash: 0xD3E51C0AB8C26EEE | Since: 1103
     */
    function setOverrideSideRatio() {
        return Citizen.invokeNative('0xD3E51C0AB8C26EEE', undefined, undefined);
    }
    vehicle_1.setOverrideSideRatio = setOverrideSideRatio;
    /**
     * Parachute models:
     * - sr_prop_specraces_para_s_01
     * - imp_prop_impexp_para_s (SecuroServ; Default)
     * Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.
     *
     * Hash: 0x4D610C6B56031351 | Since: 1011
     */
    function setParachuteModelOverride(vehicle, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetVehicleParachuteModel(vehicle, modelHash);
    }
    vehicle_1.setParachuteModelOverride = setParachuteModelOverride;
    /**
     * Variations available for the generic parachute (sr_prop_specraces_para_s_01):
     * - 0: Rainbow
     * - 1: Red
     * - 2: White, blue, yellow
     * - 3: Black, red, white
     * - 4: Red, white, blue
     * - 5: Blue
     * - 6: Black
     * - 7: Black, yellow
     *
     * Hash: 0xA74AD2439468C883 | Since: 1011
     */
    function setParachuteModelTintIndex(vehicle, textureVariation) {
        SetVehicleParachuteTextureVariation(vehicle, textureVariation);
    }
    vehicle_1.setParachuteModelTintIndex = setParachuteModelTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0x28D034A93FE31BF5 | Since: 944
     */
    function setRampAndRammingCarsTakeDamage(vehicle, toggle) {
        SetVehicleReceivesRampDamage(vehicle, toggle);
    }
    vehicle_1.setRampAndRammingCarsTakeDamage = setRampAndRammingCarsTakeDamage;
    /**
     * No comment provided
     *
     * Hash: 0x0BFFB028B3DD0A97 | Since: 944
     */
    function startParachuting(vehicle, active) {
        SetVehicleParachuteActive(vehicle, active);
    }
    vehicle_1.startParachuting = startParachuting;
    /**
     * No comment provided
     *
     * Hash: 0xEA4743874D515F13 | Since: 2944
     */
    function areMissileBaysDeployed(vehicle) {
        return Citizen.invokeNative('0xEA4743874D515F13', vehicle);
    }
    vehicle_1.areMissileBaysDeployed = areMissileBaysDeployed;
    /**
     * No comment provided
     *
     * Hash: 0xDC05D2777F855F44 | Since: 3407
     */
    function enableIndividualPlanePropeller(vehicle, propeller) {
        Citizen.invokeNative('0xDC05D2777F855F44', vehicle, propeller);
    }
    vehicle_1.enableIndividualPlanePropeller = enableIndividualPlanePropeller;
    /**
     * No comment provided
     *
     * Hash: 0x1FCB07FE230B6639 | Since: 3258
     */
    function getIsElectric(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        return GetIsVehicleElectric(vehicleModel);
    }
    vehicle_1.getIsElectric = getIsElectric;
    /**
     * No comment provided
     *
     * Hash: 0xBEC4B8653462450E | Since: 3095
     */
    function getRemainingNitrousDuration(vehicle) {
        return GetRemainingNitrousDuration(vehicle);
    }
    vehicle_1.getRemainingNitrousDuration = getRemainingNitrousDuration;
    /**
     * No comment provided
     *
     * Hash: 0x56185A25D45A0DCD | Since: 3095
     */
    function getCurrentDriveGear(vehicle) {
        return Citizen.invokeNative('0x56185A25D45A0DCD', vehicle);
    }
    vehicle_1.getCurrentDriveGear = getCurrentDriveGear;
    /**
     * No comment provided
     *
     * Hash: 0xF9DDA40BC293A61E | Since: 3095
     */
    function getCurrentRevRatio(vehicle) {
        return Citizen.invokeNative('0xF9DDA40BC293A61E', vehicle);
    }
    vehicle_1.getCurrentRevRatio = getCurrentRevRatio;
    /**
     * No comment provided
     *
     * Hash: 0xFD8CE53356B5D745 | Since: 3095
     */
    function getDesiredDriveGear(vehicle) {
        return Citizen.invokeNative('0xFD8CE53356B5D745', vehicle);
    }
    vehicle_1.getDesiredDriveGear = getDesiredDriveGear;
    /**
     * Returns the vehicle's drivetrain type.
     *
     * enum eVehicleDrivetrainType
     * {
     * VehicleDrivetrainType_INVALID,
     * VehicleDrivetrainType_FWD,
     * VehicleDrivetrainType_RWD,
     * VehicleDrivetrainType_AWD
     * };
     *
     * _GET_VEHICLE_DE* - _GET_VEHICLE_DI*
     *
     * Hash: 0x1423725069EE1D14 | Since: 3258
     */
    function getDrivetrainType(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        return GetVehicleDrivetrainType(vehicleModel);
    }
    vehicle_1.getDrivetrainType = getDrivetrainType;
    /**
     * No comment provided
     *
     * Hash: 0xE728F090D538CB18 | Since: 3095
     */
    function getExhaustBone(vehicle, index) {
        return Citizen.invokeNative('0xE728F090D538CB18', vehicle, index);
    }
    vehicle_1.getExhaustBone = getExhaustBone;
    /**
     * No comment provided
     *
     * Hash: 0x24910C3D66BA770D | Since: 3095
     */
    function getMaxDriveGearCount(vehicle) {
        return Citizen.invokeNative('0x24910C3D66BA770D', vehicle);
    }
    vehicle_1.getMaxDriveGearCount = getMaxDriveGearCount;
    /**
     * No comment provided
     *
     * Hash: 0x3EE18B00CD86C54F | Since: 3095
     */
    function getMaxExhaustBoneCount() {
        return Citizen.invokeNative('0x3EE18B00CD86C54F');
    }
    vehicle_1.getMaxExhaustBoneCount = getMaxExhaustBoneCount;
    /**
     * No comment provided
     *
     * Hash: 0x61F02E4E9A7A61EA | Since: 3095
     */
    function getModelNumDriveGears(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        return Citizen.invokeNative('0x61F02E4E9A7A61EA', vehicleModel);
    }
    vehicle_1.getModelNumDriveGears = getModelNumDriveGears;
    /**
     * No comment provided
     *
     * Hash: 0x92D96892FC06AF22 | Since: 3095
     */
    function getThrottle(vehicle) {
        return Citizen.invokeNative('0x92D96892FC06AF22', vehicle);
    }
    vehicle_1.getThrottle = getThrottle;
    /**
     * No comment provided
     *
     * Hash: 0x80D9D32636369C92 | Since: 2802
     */
    function getTrailerParentVehicle(trailer) {
        return Citizen.invokeNative('0x80D9D32636369C92', trailer);
    }
    vehicle_1.getTrailerParentVehicle = getTrailerParentVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x6638C0F19DE692FE | Since: 3095
     */
    function isGen9ExclusiveModel(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        return Citizen.invokeNative('0x6638C0F19DE692FE', vehicleModel);
    }
    vehicle_1.isGen9ExclusiveModel = isGen9ExclusiveModel;
    /**
     * No comment provided
     *
     * Hash: 0x71C6302CBCA6CA35 | Since: 3407
     */
    function isOnBoostPad(vehicle) {
        return Citizen.invokeNative('0x71C6302CBCA6CA35', vehicle);
    }
    vehicle_1.isOnBoostPad = isOnBoostPad;
    /**
     * _SET_ALLOW_R* - _SET_ALLOW_V*
     *
     * Hash: 0x27D27223E8EF22ED | Since: 3095
     */
    function setAllowCollisionWhenIn(vehicle, toggle) {
        Citizen.invokeNative('0x27D27223E8EF22ED', vehicle, toggle);
    }
    vehicle_1.setAllowCollisionWhenIn = setAllowCollisionWhenIn;
    /**
     * No comment provided
     *
     * Hash: 0x48BD57D0DD17786A | Since: 3095
     */
    function setAttachedToTowTruckArm(towTruck, vehicle) {
        Citizen.invokeNative('0x48BD57D0DD17786A', towTruck, vehicle);
    }
    vehicle_1.setAttachedToTowTruckArm = setAttachedToTowTruckArm;
    /**
     * Use the vehicle bounds (instead of viewport) when deciding if a vehicle is sufficiently above the water (waterheight.dat), bypassing wave simulation checks
     *
     * Hash: 0x85FC953F6C6CBDE1 | Since: 2802
     */
    function setBoundsAffectWaterProbes(vehicle, toggle) {
        Citizen.invokeNative('0x85FC953F6C6CBDE1', vehicle, toggle);
    }
    vehicle_1.setBoundsAffectWaterProbes = setBoundsAffectWaterProbes;
    /**
     * No comment provided
     *
     * Hash: 0x0C02468829E4AA65 | Since: 2944
     */
    function setDeployMissileBays(vehicle, deploy) {
        Citizen.invokeNative('0x0C02468829E4AA65', vehicle, deploy);
    }
    vehicle_1.setDeployMissileBays = setDeployMissileBays;
    /**
     * Prevents the vehicle from exploding when taking body damage if the inflictor is an AI-controlled vehicle. Only works for planes.
     *
     * Hash: 0xB0B7DF5CB876FF5E | Since: 3407
     */
    function setDisableExplodeFromBodyDamageReceivedByAi(vehicle, disable) {
        Citizen.invokeNative('0xB0B7DF5CB876FF5E', vehicle, disable);
    }
    vehicle_1.setDisableExplodeFromBodyDamageReceivedByAi = setDisableExplodeFromBodyDamageReceivedByAi;
    /**
     * First two floats relate to rumble, the last is a threshold
     *
     * Hash: 0xDAF4C98C18AC6F06 | Since: 3095
     */
    function setDriftSlipAngleLimits(vehicle, durationScalar, amplitudeScalar, slipAngleLimit) {
        Citizen.invokeNative('0xDAF4C98C18AC6F06', vehicle, durationScalar, amplitudeScalar, slipAngleLimit);
    }
    vehicle_1.setDriftSlipAngleLimits = setDriftSlipAngleLimits;
    /**
     * No comment provided
     *
     * Hash: 0x16CFBC5E7EB32861 | Since: 3095
     */
    function setMinimumTimeBetweenGearShifts(vehicle, time) {
        Citizen.invokeNative('0x16CFBC5E7EB32861', vehicle, time);
    }
    vehicle_1.setMinimumTimeBetweenGearShifts = setMinimumTimeBetweenGearShifts;
    /**
     * No comment provided
     *
     * Hash: 0x465EEA70AF251045 | Since: 3095
     */
    function setNitrousIsVisible(vehicle, enabled) {
        SetNitrousIsActive(vehicle, enabled);
    }
    vehicle_1.setNitrousIsVisible = setNitrousIsVisible;
    /**
     * No comment provided
     *
     * Hash: 0xAFD262ACCA64479A | Since: 3095
     */
    function setOverrideTractionLossMultiplier(vehicle, modifier) {
        Citizen.invokeNative('0xAFD262ACCA64479A', vehicle, modifier);
    }
    vehicle_1.setOverrideTractionLossMultiplier = setOverrideTractionLossMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xBAFB99B304BC52A7 | Since: 3407
     */
    function setPlaneAvoidsOthers(vehicle, toggle) {
        Citizen.invokeNative('0xBAFB99B304BC52A7', vehicle, toggle);
    }
    vehicle_1.setPlaneAvoidsOthers = setPlaneAvoidsOthers;
    /**
     * No comment provided
     *
     * Hash: 0x1AD0F63A94E10EFF | Since: 3407
     */
    function setRemainingNitrousDuration(vehicle, duration) {
        Citizen.invokeNative('0x1AD0F63A94E10EFF', vehicle, duration);
    }
    vehicle_1.setRemainingNitrousDuration = setRemainingNitrousDuration;
    /**
     * No comment provided
     *
     * Hash: 0x337EF33DA3DDB990 | Since: 3095
     */
    function setTransmissionReducedGearRatio(vehicle, toggle) {
        Citizen.invokeNative('0x337EF33DA3DDB990', vehicle, toggle);
    }
    vehicle_1.setTransmissionReducedGearRatio = setTransmissionReducedGearRatio;
    /**
     * Does not actually return anything.
     *
     * Hash: 0x84D7FFD223CAAFFD | Since: 3407
     */
    function setExplosiveDamageScale(vehicle, scale) {
        return Citizen.invokeNative('0x84D7FFD223CAAFFD', vehicle, scale);
    }
    vehicle_1.setExplosiveDamageScale = setExplosiveDamageScale;
    /**
     * 0.0f = engine rev minimum
     * 1.0f = engine rev limit
     *
     * Hash: 0x5AE614ECA5FDD423 | Since: 3095
     */
    function setMaxLaunchEngineRevs(vehicle, modifier) {
        Citizen.invokeNative('0x5AE614ECA5FDD423', vehicle, modifier);
    }
    vehicle_1.setMaxLaunchEngineRevs = setMaxLaunchEngineRevs;
    /**
     * No comment provided
     *
     * Hash: 0x1980F68872CC2C3D | Since: 3095
     */
    function setUseHornButtonForNitrous(toggle) {
        SetVehicleUseHornButtonForNitrous(toggle);
    }
    vehicle_1.setUseHornButtonForNitrous = setUseHornButtonForNitrous;
})(vehicle || (vehicle = {}));
export var water;
(function (water) {
    /**
     * Creates a volume where water effects do not apply.
     * Useful for preventing water collisions from flooding areas underneath them.
     * This has no effect on waterquads, only water created from drawables and collisions.
     * Don't create volumes when your local ped is swimming (e.g. use IS_PED_SWIMMING in your scripts before you call this)
     *
     * Hash: 0xEB1C6DD | Since: unknown
     */
    function createDryVolume(xMin, yMin, zMin, xMax, yMax, zMax) {
        return Citizen.invokeNative('0xEB1C6DD', xMin, yMin, zMin, xMax, yMax, zMax);
    }
    water.createDryVolume = createDryVolume;
    /**
     * No comment provided
     *
     * Hash: 0x14088095 | Since: unknown
     */
    function getQuadAlpha(waterQuad) {
        return Citizen.invokeNative('0x14088095', waterQuad);
    }
    water.getQuadAlpha = getQuadAlpha;
    /**
     * This native returns the index of a water quad if the given point is inside its bounds.
     *
     * *If you also want to check for water level, check out [`GetWaterQuadAtCoords_3d`](#\_0xF8E03DB8)*
     *
     * Hash: 0x17321452 | Since: unknown
     */
    function getQuadAtCoords(x, y) {
        return Citizen.invokeNative('0x17321452', x, y);
    }
    water.getQuadAtCoords = getQuadAtCoords;
    /**
     * This alternative implementation of [`GetWaterQuadAtCoords`](#\_0x17321452) also checks the height of the water level.
     *
     * Hash: 0xF8E03DB8 | Since: unknown
     */
    function getQuadAtCoords3d(pos) {
        return Citizen.invokeNative('0xF8E03DB8', pos.x, pos.y, pos.z);
    }
    water.getQuadAtCoords3d = getQuadAtCoords3d;
    /**
     * No comment provided
     *
     * Hash: 0x42E9A06A | Since: unknown
     */
    function getQuadBounds(waterQuad) {
        return Citizen.invokeNative('0x42E9A06A', waterQuad);
    }
    water.getQuadBounds = getQuadBounds;
    /**
     * No comment provided
     *
     * Hash: 0xB1884159 | Since: unknown
     */
    function getQuadCount() {
        return Citizen.invokeNative('0xB1884159');
    }
    water.getQuadCount = getQuadCount;
    /**
     * No comment provided
     *
     * Hash: 0x22EA3BD8 | Since: unknown
     */
    function getQuadHasLimitedDepth(waterQuad) {
        return Citizen.invokeNative('0x22EA3BD8', waterQuad);
    }
    water.getQuadHasLimitedDepth = getQuadHasLimitedDepth;
    /**
     * No comment provided
     *
     * Hash: 0x1DEDBD77 | Since: unknown
     */
    function getQuadIsInvisible(waterQuad) {
        return Citizen.invokeNative('0x1DEDBD77', waterQuad);
    }
    water.getQuadIsInvisible = getQuadIsInvisible;
    /**
     * *level is defined as "z" in water.xml*
     *
     * Hash: 0x6523816B | Since: unknown
     */
    function getQuadLevel(waterQuad) {
        return Citizen.invokeNative('0x6523816B', waterQuad);
    }
    water.getQuadLevel = getQuadLevel;
    /**
     * No comment provided
     *
     * Hash: 0x6F4ACBA | Since: unknown
     */
    function getQuadNoStencil(waterQuad) {
        return Citizen.invokeNative('0x6F4ACBA', waterQuad);
    }
    water.getQuadNoStencil = getQuadNoStencil;
    /**
     * Valid type definitions:
     *
     * *   **0** Square
     * *   **1** Right triangle where the 90 degree angle is at maxX, minY
     * *   **2** Right triangle where the 90 degree angle is at minX, minY
     * *   **3** Right triangle where the 90 degree angle is at minX, maxY
     * *   **4** Right triangle where the 90 degree angle is at maxY, maxY
     *
     * Hash: 0xE2501B8B | Since: unknown
     */
    function getQuadType(waterQuad) {
        return Citizen.invokeNative('0xE2501B8B', waterQuad);
    }
    water.getQuadType = getQuadType;
    /**
     * No comment provided
     *
     * Hash: 0x865139A3 | Since: unknown
     */
    function getWaveQuadAmplitude(waveQuad) {
        return Citizen.invokeNative('0x865139A3', waveQuad);
    }
    water.getWaveQuadAmplitude = getWaveQuadAmplitude;
    /**
     * This native returns the index of a wave quad if the given point is inside its bounds.
     *
     * Hash: 0x3F5A61A7 | Since: unknown
     */
    function getWaveQuadAtCoords(x, y) {
        return Citizen.invokeNative('0x3F5A61A7', x, y);
    }
    water.getWaveQuadAtCoords = getWaveQuadAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xF86136DB | Since: unknown
     */
    function getWaveQuadBounds(waveQuad) {
        return Citizen.invokeNative('0xF86136DB', waveQuad);
    }
    water.getWaveQuadBounds = getWaveQuadBounds;
    /**
     * No comment provided
     *
     * Hash: 0x9250C76 | Since: unknown
     */
    function getWaveQuadCount() {
        return Citizen.invokeNative('0x9250C76');
    }
    water.getWaveQuadCount = getWaveQuadCount;
    /**
     * No comment provided
     *
     * Hash: 0xCCE49A1C | Since: unknown
     */
    function getWaveQuadDirection(waveQuad) {
        return Citizen.invokeNative('0xCCE49A1C', waveQuad);
    }
    water.getWaveQuadDirection = getWaveQuadDirection;
    /**
     * Define the xml in a resources fxmanifest, under the file(s) section.
     *
     * Hash: 0xF5102568 | Since: unknown
     */
    function loadFromPath(resourceName, fileName) {
        return Citizen.invokeNative('0xF5102568', resourceName, fileName);
    }
    water.loadFromPath = loadFromPath;
    /**
     * Removes a dry volume from the game session.
     * See CREATE_DRY_VOLUME for more info
     *
     * Hash: 0x7BCAA6E7 | Since: unknown
     */
    function removeDryVolume(handle) {
        Citizen.invokeNative('0x7BCAA6E7', handle);
    }
    water.removeDryVolume = removeDryVolume;
    /**
     * Resets the water to the games default water.xml.
     *
     * Hash: 0x1DA4791 | Since: unknown
     */
    function reset() {
        Citizen.invokeNative('0x1DA4791');
    }
    water.reset = reset;
    /**
     * Sets world clip boundaries for water quads file (water.xml, water_heistisland.xml)
     * Used internally by LOAD_GLOBAL_WATER_FILE
     *
     * Hash: 0x9FCD2EE6 | Since: unknown
     */
    function setAreaClipRect(minX, minY, maxX, maxY) {
        Citizen.invokeNative('0x9FCD2EE6', minX, minY, maxX, maxY);
    }
    water.setAreaClipRect = setAreaClipRect;
    /**
     * No comment provided
     *
     * Hash: 0xF49797EB | Since: unknown
     */
    function setQuadAlpha(waterQuad, a0, a1, a2, a3) {
        return Citizen.invokeNative('0xF49797EB', waterQuad, a0, a1, a2, a3);
    }
    water.setQuadAlpha = setQuadAlpha;
    /**
     * This native allows you to update the bounds of a specified water quad index.
     *
     * Hash: 0x80AD144C | Since: unknown
     */
    function setQuadBounds(waterQuad, minX, minY, maxX, maxY) {
        return Citizen.invokeNative('0x80AD144C', waterQuad, minX, minY, maxX, maxY);
    }
    water.setQuadBounds = setQuadBounds;
    /**
     * No comment provided
     *
     * Hash: 0xD1FDCFC1 | Since: unknown
     */
    function setQuadHasLimitedDepth(waterQuad, hasLimitedDepth) {
        return Citizen.invokeNative('0xD1FDCFC1', waterQuad, hasLimitedDepth);
    }
    water.setQuadHasLimitedDepth = setQuadHasLimitedDepth;
    /**
     * No comment provided
     *
     * Hash: 0xA387D917 | Since: unknown
     */
    function setQuadIsInvisible(waterQuad, isInvisible) {
        return Citizen.invokeNative('0xA387D917', waterQuad, isInvisible);
    }
    water.setQuadIsInvisible = setQuadIsInvisible;
    /**
     * No comment provided
     *
     * Hash: 0x6292F7A8 | Since: unknown
     */
    function setQuadLevel(waterQuad, level) {
        return Citizen.invokeNative('0x6292F7A8', waterQuad, level);
    }
    water.setQuadLevel = setQuadLevel;
    /**
     * No comment provided
     *
     * Hash: 0xC3FF42FF | Since: unknown
     */
    function setQuadNoStencil(waterQuad, noStencil) {
        return Citizen.invokeNative('0xC3FF42FF', waterQuad, noStencil);
    }
    water.setQuadNoStencil = setQuadNoStencil;
    /**
     * This native allows you to update the water quad type.
     *
     * Valid type definitions:
     *
     * *   **0** Square
     * *   **1** Right triangle where the 90 degree angle is at maxX, minY
     * *   **2** Right triangle where the 90 degree angle is at minX, minY
     * *   **3** Right triangle where the 90 degree angle is at minX, maxY
     * *   **4** Right triangle where the 90 degree angle is at maxY, maxY
     *
     * Hash: 0x50131EB2 | Since: unknown
     */
    function setQuadType(waterQuad, _type) {
        return Citizen.invokeNative('0x50131EB2', waterQuad, _type);
    }
    water.setQuadType = setQuadType;
    /**
     * No comment provided
     *
     * Hash: 0xE4174B7B | Since: unknown
     */
    function setWaveQuadAmplitude(waveQuad, amplitude) {
        return Citizen.invokeNative('0xE4174B7B', waveQuad, amplitude);
    }
    water.setWaveQuadAmplitude = setWaveQuadAmplitude;
    /**
     * This native allows you to update the bounds of a specified water quad index.
     *
     * Hash: 0x1FCC1FAF | Since: unknown
     */
    function setWaveQuadBounds(waveQuad, minX, minY, maxX, maxY) {
        return Citizen.invokeNative('0x1FCC1FAF', waveQuad, minX, minY, maxX, maxY);
    }
    water.setWaveQuadBounds = setWaveQuadBounds;
    /**
     * directionX/Y should be constrained between -1.0 and 1.0
     * A positive value will create the wave starting at min and rolling towards max
     * A negative value will create the wave starting at max and rolling towards min
     * Applying both values allows you to make diagonal waves
     *
     * Hash: 0xFC9341A3 | Since: unknown
     */
    function setWaveQuadDirection(waveQuad, directionX, directionY) {
        return Citizen.invokeNative('0xFC9341A3', waveQuad, directionX, directionY);
    }
    water.setWaveQuadDirection = setWaveQuadDirection;
    /**
     * No comment provided
     *
     * Hash: 0xFDBF4CDBC07E1706 | Since: 323
     */
    function addExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height) {
        return AddExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height);
    }
    water.addExtraCalmingQuad = addExtraCalmingQuad;
    /**
     * Gets the aggressiveness factor of the ocean waves.
     *
     * Hash: 0x2B2A2CC86778B619 | Since: 323
     */
    function getDeepOceanScaler() {
        return GetDeepOceanScaler();
    }
    water.getDeepOceanScaler = getDeepOceanScaler;
    /**
     * This function set height to the value of z-axis of the water surface.
     *
     * This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
     *
     * note: seems to return true when you are in water
     *
     * Hash: 0xF6829842C06AE524 | Since: 323
     */
    function getHeight(pos) {
        return GetWaterHeight(pos.x, pos.y, pos.z);
    }
    water.getHeight = getHeight;
    /**
     * No comment provided
     *
     * Hash: 0x8EE6B53CE13A9794 | Since: 323
     */
    function getHeightNoWaves(pos) {
        return GetWaterHeightNoWaves(pos.x, pos.y, pos.z);
    }
    water.getHeightNoWaves = getHeightNoWaves;
    /**
     * Sets the water height for a given position and radius.
     *
     *
     * Hash: 0xC443FD757C3BA637 | Since: 323
     */
    function modify(x, y, radius, height) {
        ModifyWater(x, y, radius, height);
    }
    water.modify = modify;
    /**
     * p0 is the handle returned from ADD_EXTRA_CALMING_QUAD
     *
     * Hash: 0xB1252E3E59A82AAF | Since: 323
     */
    function removeExtraCalmingQuad(calmingQuad) {
        RemoveCurrentRise(calmingQuad);
    }
    water.removeExtraCalmingQuad = removeExtraCalmingQuad;
    /**
     * Sets the waves intensity back to original (1.0 in most cases).
     *
     * Hash: 0x5E5E99285AE812DB | Since: 323
     */
    function resetDeepOceanScaler() {
        ResetDeepOceanScaler();
    }
    water.resetDeepOceanScaler = resetDeepOceanScaler;
    /**
     * No comment provided
     *
     * Hash: 0x547237AA71AB44DE | Since: 573
     */
    function setCalmedWaveHeightScaler(height) {
        Citizen.invokeNative('0x547237AA71AB44DE', height);
    }
    water.setCalmedWaveHeightScaler = setCalmedWaveHeightScaler;
    /**
     * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
     *
     * Works only ~200 meters around the player.
     *
     * Hash: 0xB96B00E976BE977F | Since: 323
     */
    function setDeepOceanScaler(intensity) {
        SetDeepOceanScaler(intensity);
    }
    water.setDeepOceanScaler = setDeepOceanScaler;
    /**
     * enum eScriptWaterTestResult
     * {
     * SCRIPT_WATER_TEST_RESULT_NONE,
     * SCRIPT_WATER_TEST_RESULT_WATER,
     * SCRIPT_WATER_TEST_RESULT_BLOCKED,
     * };
     *
     * Hash: 0x8974647ED222EA5F | Since: 323
     */
    function testProbeAgainstAll(x1, y1, z1, x2, y2, z2, flags) {
        return TestProbeAgainstAllWater(x1, y1, z1, x2, y2, z2, flags);
    }
    water.testProbeAgainstAll = testProbeAgainstAll;
    /**
     * No comment provided
     *
     * Hash: 0xFFA5D878809819DB | Since: 323
     */
    function testProbeAgainst(x1, y1, z1, x2, y2, z2) {
        return TestProbeAgainstWater(x1, y1, z1, x2, y2, z2);
    }
    water.testProbeAgainst = testProbeAgainst;
    /**
     * See TEST_PROBE_AGAINST_ALL_WATER.
     *
     * Hash: 0x2B3451FA1E3142E2 | Since: 323
     */
    function testVerticalProbeAgainstAll(pos, flags) {
        return TestVerticalProbeAgainstAllWater(pos.x, pos.y, pos.z, flags);
    }
    water.testVerticalProbeAgainstAll = testVerticalProbeAgainstAll;
})(water || (water = {}));
export var weapon;
(function (weapon_1) {
    /**
     * A getter for the accuracy spread of a weapon.
     *
     * Hash: 0x5343721 | Since: unknown
     */
    function getAccuracySpread(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return Citizen.invokeNative('0x5343721', weaponHash);
    }
    weapon_1.getAccuracySpread = getAccuracySpread;
    /**
     * A getter for [SET_WEAPON_ANIMATION_OVERRIDE](#\_0x1055AC3A667F09D9).
     *
     * Hash: 0x63ED2E7 | Since: unknown
     */
    function getAnimationOverride(ped) {
        return Citizen.invokeNative('0x63ED2E7', ped);
    }
    weapon_1.getAnimationOverride = getAnimationOverride;
    /**
     * A getter for `CWeaponAccuracyModifier` in a weapon component.
     *
     * Hash: 0xC693E278 | Since: unknown
     */
    function getComponentAccuracyModifier(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0xC693E278', componentHash);
    }
    weapon_1.getComponentAccuracyModifier = getComponentAccuracyModifier;
    /**
     * A getter for `CameraHash` in a weapon scope component.
     *
     * Hash: 0xACB7E68F | Since: unknown
     */
    function getComponentCameraHash(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0xACB7E68F', componentHash);
    }
    weapon_1.getComponentCameraHash = getComponentCameraHash;
    /**
     * A getter for `ClipSize` in a weapon component.
     *
     * Hash: 0xE14CF665 | Since: unknown
     */
    function getComponentClipSize(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0xE14CF665', componentHash);
    }
    weapon_1.getComponentClipSize = getComponentClipSize;
    /**
     * A getter for `CWeaponDamageModifier` in a weapon component.
     *
     * Hash: 0x4A0E3855 | Since: unknown
     */
    function getComponentDamageModifier(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0x4A0E3855', componentHash);
    }
    weapon_1.getComponentDamageModifier = getComponentDamageModifier;
    /**
     * A getter for `CWeaponFallOffModifier` damage modifier value in a weapon component.
     *
     * Hash: 0xE134FB8D | Since: unknown
     */
    function getComponentRangeDamageModifier(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0xE134FB8D', componentHash);
    }
    weapon_1.getComponentRangeDamageModifier = getComponentRangeDamageModifier;
    /**
     * A getter for `CWeaponFallOffModifier` range modifier value in a weapon component.
     *
     * Hash: 0x2FD0BC1B | Since: unknown
     */
    function getComponentRangeModifier(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0x2FD0BC1B', componentHash);
    }
    weapon_1.getComponentRangeModifier = getComponentRangeModifier;
    /**
     * A getter for `ReticuleHash` in a weapon scope component.
     *
     * Hash: 0xF9AB9297 | Since: unknown
     */
    function getComponentReticuleHash(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0xF9AB9297', componentHash);
    }
    weapon_1.getComponentReticuleHash = getComponentReticuleHash;
    /**
     * A getter for [\_SET_WEAPON_DAMAGE_MODIFIER](#\_0x4757F00BC6323CFE).
     *
     * Hash: 0xD979143 | Since: unknown
     */
    function getDamageModifier(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return Citizen.invokeNative('0xD979143', weaponHash);
    }
    weapon_1.getDamageModifier = getDamageModifier;
    /**
     * A getter for the recoil shake amplitude of a weapon.
     *
     * Hash: 0x5E1AF5F | Since: unknown
     */
    function getRecoilShakeAmplitude(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return Citizen.invokeNative('0x5E1AF5F', weaponHash);
    }
    weapon_1.getRecoilShakeAmplitude = getRecoilShakeAmplitude;
    /**
     * Disables weapons aim blocking due to environment for local player.
     * For non-player peds [SET_PED_ENABLE_WEAPON_BLOCKING](#\_0x97A790315D3831FD) can be used.
     *
     * Hash: 0xDFD8F6DE | Since: unknown
     */
    function setsNoAimBlocking(state) {
        Citizen.invokeNative('0xDFD8F6DE', state);
    }
    weapon_1.setsNoAimBlocking = setsNoAimBlocking;
    /**
     * Disables the game's built-in auto-reloading.
     *
     * Hash: 0x311150E5 | Since: unknown
     */
    function setsNoAutoreload(state) {
        Citizen.invokeNative('0x311150E5', state);
    }
    weapon_1.setsNoAutoreload = setsNoAutoreload;
    /**
     * Disables autoswapping to another weapon when the current weapon runs out of ammo.
     *
     * Hash: 0x2A7B50E | Since: unknown
     */
    function setsNoAutoswap(state) {
        Citizen.invokeNative('0x2A7B50E', state);
    }
    weapon_1.setsNoAutoswap = setsNoAutoswap;
    /**
     * A setter for the accuracy spread of a weapon.
     *
     * Hash: 0x598DD6AE | Since: unknown
     */
    function setAccuracySpread(weaponHash, spread) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0x598DD6AE', weaponHash, spread);
    }
    weapon_1.setAccuracySpread = setAccuracySpread;
    /**
     * A setter for the recoil shake amplitude of a weapon.
     *
     * Hash: 0x9864312F | Since: unknown
     */
    function setRecoilShakeAmplitude(weaponHash, amplitude) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0x9864312F', weaponHash, amplitude);
    }
    weapon_1.setRecoilShakeAmplitude = setRecoilShakeAmplitude;
    /**
     * GIVE_WEAPON_COMPONENT_TO_PED
     *
     * <strong>This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_COMPONENT_TO_PED](?\_0xD966D51AA5B28BB9).</strong>
     *
     * Hash: 0x3E1E286D | Since: unknown
     */
    function giveComponentToPed(ped, weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        Citizen.invokeNative('0x3E1E286D', ped, weaponHash, componentHash);
    }
    weapon_1.giveComponentToPed = giveComponentToPed;
    /**
     * GIVE_WEAPON_TO_PED
     *
     * <strong>This is the server-side RPC native equivalent of the client native [GIVE_WEAPON_TO_PED](?\_0xBF0FD6E56C964FCB).</strong>
     *
     * Hash: 0xC4D88A85 | Since: unknown
     */
    function giveToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0xC4D88A85', ped, weaponHash, ammoCount, isHidden, bForceInHand);
    }
    weapon_1.giveToPed = giveToPed;
    /**
     * Parameter `p1` does not seem to be used or referenced in game binaries.\
     * **Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [REMOVE_ALL_PED_WEAPONS](?\_0xF25DF915FA38C5F3).</strong>
     *
     * Hash: 0xA44CE817 | Since: unknown
     */
    function removeAllPeds(ped) {
        Citizen.invokeNative('0xA44CE817', ped, false);
    }
    weapon_1.removeAllPeds = removeAllPeds;
    /**
     * REMOVE_WEAPON_COMPONENT_FROM_PED
     *
     * <strong>This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_COMPONENT_FROM_PED](?\_0x1E8BE90C74FB4C09).</strong>
     *
     * Hash: 0x412AA00D | Since: unknown
     */
    function removeComponentFromPed(ped, weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        Citizen.invokeNative('0x412AA00D', ped, weaponHash, componentHash);
    }
    weapon_1.removeComponentFromPed = removeComponentFromPed;
    /**
     * ```
     * This native removes a specified weapon from your selected ped.
     * Weapon Hashes: pastebin.com/0wwDZgkF
     * Example:
     * C#:
     * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
     * C++:
     * `WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);`
     * The code above removes the knife from the player.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [REMOVE_WEAPON_FROM_PED](?\_0x4899CB088EDF59B8).</strong>
     *
     * Hash: 0x9C37F220 | Since: unknown
     */
    function removeFromPed(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        Citizen.invokeNative('0x9C37F220', ped, weaponHash);
    }
    weapon_1.removeFromPed = removeFromPed;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x78F0424C34306220 | Since: 323
     */
    function addAmmoToPed(ped, weaponHash, ammo) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        AddAmmoToPed(ped, weaponHash, ammo);
    }
    weapon_1.addAmmoToPed = addAmmoToPed;
    /**
     * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
     *
     * Hash: 0x2472622CE1F2D45F | Since: 1103
     */
    function addPedAmmoByType(ped, ammoTypeHash, ammo) {
        if (typeof ammoTypeHash === 'string')
            ammoTypeHash = misc.getHashKey(ammoTypeHash);
        AddAmmoToPedByType(ped, ammoTypeHash, ammo);
    }
    weapon_1.addPedAmmoByType = addPedAmmoByType;
    /**
     * this returns if you can use the weapon while using a parachute
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xBC7BE5ABC0879F74 | Since: 323
     */
    function canUseOnParachute(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return CanUseWeaponOnParachute(weaponHash);
    }
    weapon_1.canUseOnParachute = canUseOnParachute;
    /**
     * No comment provided
     *
     * Hash: 0xAC678E40BE7C74D2 | Since: 323
     */
    function clearEntityLastDamage(entity) {
        ClearEntityLastWeaponDamage(entity);
    }
    weapon_1.clearEntityLastDamage = clearEntityLastDamage;
    /**
     * Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
     *
     * Hash: 0x0E98F88A24C5F4B8 | Since: 323
     */
    function clearPedLastDamage(ped) {
        ClearPedLastWeaponDamage(ped);
    }
    weapon_1.clearPedLastDamage = clearPedLastDamage;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x9DA58CDBF6BDBC08 | Since: 1011
     */
    function createAirDefenceAngledArea(radius, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return CreateAirDefenseArea(0, 0, 0, 0, 0, 0, 0, 0, 0, radius, weaponHash);
    }
    weapon_1.createAirDefenceAngledArea = createAirDefenceAngledArea;
    /**
     * Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
     *
     * Hash: 0x91EF34584710BE99 | Since: 573
     */
    function createAirDefenceSphere(pos, radius, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return CreateAirDefenseSphere(pos.x, pos.y, pos.z, radius, 0, 0, 0, weaponHash);
    }
    weapon_1.createAirDefenceSphere = createAirDefenceSphere;
    /**
     * Now has 8 params.
     *
     * Hash: 0x9541D3CF0D398F36 | Since: 323
     */
    function createObject(weaponHash, ammoCount, pos, showWorldModel, scale) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return CreateWeaponObject(weaponHash, ammoCount, pos.x, pos.y, pos.z, showWorldModel, scale, undefined, undefined, undefined);
    }
    weapon_1.createObject = createObject;
    /**
     * No comment provided
     *
     * Hash: 0xCD79A550999D7D4F | Since: 678
     */
    function doesAirDefenceSphereExist(zoneId) {
        return DoesAirDefenseZoneExist(zoneId);
    }
    weapon_1.doesAirDefenceSphereExist = doesAirDefenceSphereExist;
    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x5CEE3DF569CECAB0 | Since: 323
     */
    function doesTakeWeaponComponent(weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return DoesWeaponTakeWeaponComponent(weaponHash, componentHash);
    }
    weapon_1.doesTakeWeaponComponent = doesTakeWeaponComponent;
    /**
     * Enables laser sight on any weapon.
     *
     * It doesn't work. Neither on tick nor OnKeyDown
     *
     * Hash: 0xC8B46D7727D864AA | Since: 323
     */
    function enableLaserSightRendering(toggle) {
        EnableLaserSightRendering(toggle);
    }
    weapon_1.enableLaserSightRendering = enableLaserSightRendering;
    /**
     * `WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);`
     *
     * Hash: 0xFC4BD125DE7611E4 | Since: 323
     */
    function explodeProjectiles(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        ExplodeProjectiles(ped, weaponHash, false);
    }
    weapon_1.explodeProjectiles = explodeProjectiles;
    /**
     * No comment provided
     *
     * Hash: 0x44F1012B69313374 | Since: 573
     */
    function fireAirDefenceSphereAtPosition(zoneId, pos) {
        FireAirDefenseWeapon(zoneId, pos.x, pos.y, pos.z);
    }
    weapon_1.fireAirDefenceSphereAtPosition = fireAirDefenceSphereAtPosition;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x2E1202248937775C | Since: 323
     */
    function getAmmoInClip(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetAmmoInClip(ped, weaponHash);
    }
    weapon_1.getAmmoInClip = getAmmoInClip;
    /**
     * `WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)`
     *
     * From decompiled scripts
     * Returns total ammo in weapon
     *
     * GTALua Example :
     * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x015A522136D7F951 | Since: 323
     */
    function getAmmoInPed(ped, weaponhash) {
        if (typeof weaponhash === 'string')
            weaponhash = misc.getHashKey(weaponhash);
        return GetAmmoInPedWeapon(ped, weaponhash);
    }
    weapon_1.getAmmoInPed = getAmmoInPed;
    /**
     * p1 is always 0 in the scripts.
     *
     * Hash: 0x8483E98E8B888AE2 | Since: 323
     */
    function getBestPed(ped) {
        return GetBestPedWeapon(ped, false);
    }
    weapon_1.getBestPed = getBestPed;
    /**
     * Example in VB
     *
     * Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
     * Dim arg As New OutputArgument()
     * Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
     * Return arg.GetResult(Of Integer)()
     * End Function
     *
     * Usage:
     * If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
     * Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
     *
     * Hash: 0x1017582BCD3832DC | Since: 323
     */
    function getCurrentPedVehicle(ped) {
        return GetCurrentPedVehicleWeapon(ped);
    }
    weapon_1.getCurrentPedVehicle = getCurrentPedVehicle;
    /**
     * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
     * p2 seems to be 1 most of the time.
     *
     *
     *
     *
     *
     * p2 is not implemented
     *
     * disassembly said that?
     *
     *
     * Hash: 0x3A87E44BB9A01D54 | Since: 323
     */
    function getCurrentPed(ped) {
        return GetCurrentPedWeapon(ped, false);
    }
    weapon_1.getCurrentPed = getCurrentPed;
    /**
     * No comment provided
     *
     * Hash: 0x3B390A939AF0B5FC | Since: 323
     */
    function getCurrentPedEntityIndex(ped) {
        return GetCurrentPedWeaponEntityIndex(ped, undefined);
    }
    weapon_1.getCurrentPedEntityIndex = getCurrentPedEntityIndex;
    /**
     * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
     *
     * Hash: 0xF731332072F5156C | Since: 323
     */
    function getIsPedGadgetEquipped(ped, gadgetHash) {
        if (typeof gadgetHash === 'string')
            gadgetHash = misc.getHashKey(gadgetHash);
        return GetIsPedGadgetEquipped(ped, gadgetHash);
    }
    weapon_1.getIsPedGadgetEquipped = getIsPedGadgetEquipped;
    /**
     * No comment provided
     *
     * Hash: 0x840F03E9041E2C9C | Since: 323
     */
    function getLockonDistanceOfCurrentPed(ped) {
        return GetLockonDistanceOfCurrentPedWeapon(ped);
    }
    weapon_1.getLockonDistanceOfCurrentPed = getLockonDistanceOfCurrentPed;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xDC16122C7A20C933 | Since: 323
     */
    function getMaxAmmo(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetMaxAmmo(ped, weaponHash);
    }
    weapon_1.getMaxAmmo = getMaxAmmo;
    /**
     * Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
     *
     * Hash: 0x585847C5E4E11709 | Since: 1103
     */
    function getMaxAmmoByType(ped, ammoTypeHash) {
        if (typeof ammoTypeHash === 'string')
            ammoTypeHash = misc.getHashKey(ammoTypeHash);
        return GetMaxAmmoByType(ped, ammoTypeHash);
    }
    weapon_1.getMaxAmmoByType = getMaxAmmoByType;
    /**
     * p2 is mostly 1 in the scripts.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xA38DCFFCEA8962FA | Since: 323
     */
    function getMaxAmmoInClip(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetMaxAmmoInClip(ped, weaponHash, false);
    }
    weapon_1.getMaxAmmoInClip = getMaxAmmoInClip;
    /**
     * No comment provided
     *
     * Hash: 0x814C9D19DFD69679 | Since: 323
     */
    function getMaxRangeOfCurrentPed(ped) {
        return GetMaxRangeOfCurrentPedWeapon(ped);
    }
    weapon_1.getMaxRangeOfCurrentPed = getMaxRangeOfCurrentPed;
    /**
     * No comment provided
     *
     * Hash: 0x39D22031557946C1 | Since: 323
     */
    function getPedAmmoByType(ped, ammoTypeHash) {
        if (typeof ammoTypeHash === 'string')
            ammoTypeHash = misc.getHashKey(ammoTypeHash);
        return GetPedAmmoByType(ped, ammoTypeHash);
    }
    weapon_1.getPedAmmoByType = getPedAmmoByType;
    /**
     * Returns the current ammo type of the specified ped's specified weapon.
     * MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
     * Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x7FEAD38B326B9F74 | Since: 323
     */
    function getPedAmmoTypeFrom(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetPedAmmoTypeFromWeapon(ped, weaponHash);
    }
    weapon_1.getPedAmmoTypeFrom = getPedAmmoTypeFrom;
    /**
     * Pass ped. Pass address of Vector3.
     * The coord will be put into the Vector3.
     * The return will determine whether there was a coord found or not.
     *
     * Hash: 0x6C4D0409BA1A2BC2 | Since: 323
     */
    function getPedLastImpactCoord(ped) {
        return GetPedLastWeaponImpactCoord(ped);
    }
    weapon_1.getPedLastImpactCoord = getPedLastImpactCoord;
    /**
     * Returns the base/default ammo type of the specified ped's specified weapon.
     * Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF489B44DD5AF4BD9 | Since: 1103
     */
    function getPedOriginalAmmoTypeFrom(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetPedAmmoTypeFromWeapon2(ped, weaponHash);
    }
    weapon_1.getPedOriginalAmmoTypeFrom = getPedOriginalAmmoTypeFrom;
    /**
     * No comment provided
     *
     * Hash: 0xEFFED78E9011134D | Since: 323
     */
    function getPedtypeInSlot(ped, weaponSlot) {
        if (typeof weaponSlot === 'string')
            weaponSlot = misc.getHashKey(weaponSlot);
        return GetPedWeapontypeInSlot(ped, weaponSlot);
    }
    weapon_1.getPedtypeInSlot = getPedtypeInSlot;
    /**
     * No comment provided
     *
     * Hash: 0xA2C9AC24B4061285 | Since: 1103
     */
    function getPedCamoIndex(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return Citizen.invokeNative('0xA2C9AC24B4061285', ped, weaponHash);
    }
    weapon_1.getPedCamoIndex = getPedCamoIndex;
    /**
     * Returns -1 if camoComponentHash is invalid/not attached to the weapon.
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF0A60040BE558F2D | Since: 1103
     */
    function getPedComponentTintIndex(ped, weaponHash, camoComponentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof camoComponentHash === 'string')
            camoComponentHash = misc.getHashKey(camoComponentHash);
        return GetPedWeaponLiveryColor(ped, weaponHash, camoComponentHash);
    }
    weapon_1.getPedComponentTintIndex = getPedComponentTintIndex;
    /**
     * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x2B9EEDC07BD06B9F | Since: 323
     */
    function getPedTintIndex(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetPedWeaponTintIndex(ped, weaponHash);
    }
    weapon_1.getPedTintIndex = getPedTintIndex;
    /**
     * Returns the hash of the weapon.
     *
     * `var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);`
     * sub_27D3(num7);
     * switch (num7)
     * {
     * case 0x24B17070:
     *
     * `Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?`
     *
     * -------------------------------------------------------------------------
     *
     * The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x0A6DB4965674D243 | Since: 323
     */
    function getSelectedPed(ped) {
        return GetSelectedPedWeapon(ped);
    }
    weapon_1.getSelectedPed = getSelectedPed;
    /**
     * No comment provided
     *
     * Hash: 0xC3287EE3050FB74C | Since: 323
     */
    function gettypeGroup(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeapontypeGroup(weaponHash);
    }
    weapon_1.gettypeGroup = gettypeGroup;
    /**
     * Returns the model of any weapon.
     *
     * Can also take an ammo hash?
     * `sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));`
     *
     * Hash: 0xF46CDC33180FDA94 | Since: 323
     */
    function gettypeModel(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeapontypeModel(weaponHash);
    }
    weapon_1.gettypeModel = gettypeModel;
    /**
     * No comment provided
     *
     * Hash: 0x4215460B9B8B7FA0 | Since: 323
     */
    function gettypeSlot(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeapontypeSlot(weaponHash);
    }
    weapon_1.gettypeSlot = gettypeSlot;
    /**
     * // Returns the size of the default weapon component clip.
     *
     * Use it like this:
     *
     * char cClipSize[32];
     * Hash cur;
     * `if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))`
     * {
     * `if (WEAPON::IS_WEAPON_VALID(cur))`
     * {
     * `int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);`
     * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
     * vDrawString(cClipSize, 0.5f, 0.5f);
     * }
     * }
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x583BE370B1EC6EB4 | Since: 323
     */
    function getClipSize(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponClipSize(weaponHash);
    }
    weapon_1.getClipSize = getClipSize;
    /**
     * No comment provided
     *
     * Hash: 0xB3CAF387AE12E9F8 | Since: 323
     */
    function getComponentHudStats(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetWeaponComponentHudStats(componentHash);
    }
    weapon_1.getComponentHudStats = getComponentHudStats;
    /**
     * No comment provided
     *
     * Hash: 0x0DB57B41EC1DB083 | Since: 323
     */
    function getComponentTypeModel(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetWeaponComponentTypeModel(componentHash);
    }
    weapon_1.getComponentTypeModel = getComponentTypeModel;
    /**
     * Returns the amount of extra components the specified component has.
     * Returns -1 if the component isn't of type CWeaponComponentVariantModel.
     *
     * Hash: 0x6558AC7C17BFEF58 | Since: 372
     */
    function getComponentVariantExtraCount(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetWeaponComponentVariantExtraComponentCount(componentHash);
    }
    weapon_1.getComponentVariantExtraCount = getComponentVariantExtraCount;
    /**
     * Returns the model hash of the extra component at specified index.
     *
     * Hash: 0x4D1CB8DC40208A17 | Since: 372
     */
    function getComponentVariantExtraModel(componentHash, extraComponentIndex) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetWeaponComponentVariantExtraComponentModel(componentHash, extraComponentIndex);
    }
    weapon_1.getComponentVariantExtraModel = getComponentVariantExtraModel;
    /**
     * This native does not return damages of weapons from the melee and explosive group.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x3133B907D8B32053 | Since: 323
     */
    function getDamage(weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetWeaponDamage(weaponHash, componentHash);
    }
    weapon_1.getDamage = getDamage;
    /**
     * enum class eDamageType
     * {
     * UNKNOWN = 0,
     * NONE = 1,
     * MELEE = 2,
     * BULLET = 3,
     * BULLET_RUBBER = 4,
     * EXPLOSIVE = 5,
     * FIRE = 6,
     * COLLISION = 7,
     * FALL = 8,
     * DROWN = 9,
     * ELECTRIC = 10,
     * BARBED_WIRE = 11,
     * FIRE_EXTINGUISHER = 12,
     * SMOKE = 13,
     * WATER_CANNON = 14,
     * TRANQUILIZER = 15,
     * };
     *
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x3BE0BB12D25FB305 | Since: 323
     */
    function getDamageType(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponDamageType(weaponHash);
    }
    weapon_1.getDamageType = getDamageType;
    /**
     * struct WeaponHudStatsData
     * {
     * BYTE hudDamage; // 0x0000
     * char _0x0001[0x7]; // 0x0001
     * BYTE hudSpeed; // 0x0008
     * char _0x0009[0x7]; // 0x0009
     * BYTE hudCapacity; // 0x0010
     * char _0x0011[0x7]; // 0x0011
     * BYTE hudAccuracy; // 0x0018
     * char _0x0019[0x7]; // 0x0019
     * BYTE hudRange; // 0x0020
     * };
     *
     * Usage:
     *
     * WeaponHudStatsData data;
     * if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
     * {
     * // BYTE damagePercentage = data.hudDamage and so on
     * }
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xD92C739EE34C9EBA | Since: 323
     */
    function getHudStats(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponHudStats(weaponHash);
    }
    weapon_1.getHudStats = getHudStats;
    /**
     * Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xB3EA4FEABF41464B | Since: 1103
     */
    function getObjectComponentTintIndex(weaponObject, camoComponentHash) {
        if (typeof camoComponentHash === 'string')
            camoComponentHash = misc.getHashKey(camoComponentHash);
        return GetWeaponObjectLiveryColor(weaponObject, camoComponentHash);
    }
    weapon_1.getObjectComponentTintIndex = getObjectComponentTintIndex;
    /**
     * Drops the current weapon and returns the object
     *
     * Unknown behavior when unarmed.
     *
     * Hash: 0xCAE1DC9A0E22A16D | Since: 323
     */
    function getObjectFromPed(ped) {
        return GetWeaponObjectFromPed(ped, false);
    }
    weapon_1.getObjectFromPed = getObjectFromPed;
    /**
     * No comment provided
     *
     * Hash: 0xCD183314F7CD2E57 | Since: 323
     */
    function getObjectTintIndex(weapon) {
        return GetWeaponObjectTintIndex(weapon);
    }
    weapon_1.getObjectTintIndex = getObjectTintIndex;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x065D2AACAD8CF7A4 | Since: 1290
     */
    function getTimeBetweenShots(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponTimeBetweenShots(weaponHash);
    }
    weapon_1.getTimeBetweenShots = getTimeBetweenShots;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x5DCF6C5CAB2E9BF7 | Since: 323
     */
    function getTintCount(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetWeaponTintCount(weaponHash);
    }
    weapon_1.getTintCount = getTintCount;
    /**
     * Gives a weapon to PED with a delay, example:
     *
     * `WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)`
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xB282DC6EBD803C75 | Since: 323
     */
    function giveDelayedToPed(ped, weaponHash, ammoCount, bForceInHand) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        GiveDelayedWeaponToPed(ped, weaponHash, ammoCount, bForceInHand);
    }
    weapon_1.giveDelayedToPed = giveDelayedToPed;
    /**
     * Gives the specified loadout to the specified ped.
     * Loadouts are defined in common.rpf\data\ai\loadouts.meta
     *
     * Hash: 0x68F8BE6AF5CDF8A6 | Since: 505
     */
    function giveLoadoutToPed(ped, loadoutHash) {
        if (typeof loadoutHash === 'string')
            loadoutHash = misc.getHashKey(loadoutHash);
        GiveLoadoutToPed(ped, loadoutHash);
    }
    weapon_1.giveLoadoutToPed = giveLoadoutToPed;
    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xD966D51AA5B28BB9 | Since: 323
     */
    function giveComponentToPed(ped, weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        GiveWeaponComponentToPed(ped, weaponHash, componentHash);
    }
    weapon_1.giveComponentToPed = giveComponentToPed;
    /**
     * componentHash:
     * `(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)`
     * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
     *
     * Hash: 0x33E179436C0B31DB | Since: 323
     */
    function giveComponentToWeaponObject(weaponObject, componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        GiveWeaponComponentToWeaponObject(weaponObject, componentHash);
    }
    weapon_1.giveComponentToWeaponObject = giveComponentToWeaponObject;
    /**
     * No comment provided
     *
     * Hash: 0xB1FA61371AF7C4B7 | Since: 323
     */
    function giveObjectToPed(weaponObject, ped) {
        GiveWeaponObjectToPed(weaponObject, ped);
    }
    weapon_1.giveObjectToPed = giveObjectToPed;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xBF0FD6E56C964FCB | Since: 323
     */
    function giveToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        GiveWeaponToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand);
    }
    weapon_1.giveToPed = giveToPed;
    /**
     * It determines what weapons caused damage:
     *
     * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
     * If you want to define any melee weapon, second parameter=0, third parameter=1.
     * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x131D401334815E94 | Since: 323
     */
    function hasEntityBeenDamagedBy(entity, weaponHash, weaponType) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasEntityBeenDamagedByWeapon(entity, weaponHash, weaponType);
    }
    weapon_1.hasEntityBeenDamagedBy = hasEntityBeenDamagedBy;
    /**
     * It determines what weapons caused damage:
     *
     * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
     * If you want to define any melee weapon, second parameter=0, third parameter=1.
     * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x2D343D2219CD027A | Since: 323
     */
    function hasPedBeenDamagedBy(ped, weaponHash, weaponType) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasPedBeenDamagedByWeapon(ped, weaponHash, weaponType);
    }
    weapon_1.hasPedBeenDamagedBy = hasPedBeenDamagedBy;
    /**
     * p2 should be FALSE, otherwise it seems to always return FALSE
     *
     * Bool does not check if the weapon is current equipped, unfortunately.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x8DECB02F88F428BC | Since: 323
     */
    function hasPedGot(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasPedGotWeapon(ped, weaponHash, false);
    }
    weapon_1.hasPedGot = hasPedGot;
    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xC593212475FAE340 | Since: 323
     */
    function hasPedGotComponent(ped, weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return HasPedGotWeaponComponent(ped, weaponHash, componentHash);
    }
    weapon_1.hasPedGotComponent = hasPedGotComponent;
    /**
     * Fourth Parameter = unsure, almost always -1
     *
     * Hash: 0x717C8481234E3B88 | Since: 323
     */
    function hasVehicleGotProjectileAttached(driver, vehicle, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasVehicleGotProjectileAttached(driver, vehicle, weaponHash, undefined);
    }
    weapon_1.hasVehicleGotProjectileAttached = hasVehicleGotProjectileAttached;
    /**
     * No comment provided
     *
     * Hash: 0x36E353271F0E90EE | Since: 323
     */
    function hasAssetLoaded(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return HasWeaponAssetLoaded(weaponHash);
    }
    weapon_1.hasAssetLoaded = hasAssetLoaded;
    /**
     * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
     *
     * Hash: 0x76A18844E743BF91 | Since: 323
     */
    function hasGotWeaponComponent(weapon, componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return HasWeaponGotWeaponComponent(weapon, componentHash);
    }
    weapon_1.hasGotWeaponComponent = hasGotWeaponComponent;
    /**
     * Hides the players weapon during a cutscene.
     *
     * Hash: 0x6F6981D2253C208F | Since: 323
     */
    function hidePedForScriptedCutscene(ped, toggle) {
        HidePedWeaponForScriptedCutscene(ped, toggle);
    }
    weapon_1.hidePedForScriptedCutscene = hidePedForScriptedCutscene;
    /**
     * No comment provided
     *
     * Hash: 0xDAB963831DBFD3F4 | Since: 1103
     */
    function isAirDefenceSphereInArea(pos, radius) {
        return IsAnyAirDefenseZoneInsideSphere(pos.x, pos.y, pos.z, radius);
    }
    weapon_1.isAirDefenceSphereInArea = isAirDefenceSphereInArea;
    /**
     * No comment provided
     *
     * Hash: 0x4B7620C47217126C | Since: 323
     */
    function isFlashLightOn(ped) {
        return IsFlashLightOn(ped);
    }
    weapon_1.isFlashLightOn = isFlashLightOn;
    /**
     * Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
     *
     * Type flag bit values:
     * 1 = Melee weapons
     * 2 = Explosive weapons
     * 4 = Any other weapons
     *
     * Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
     * 7 returns true if you are equipped with any weapon except your fists.
     * 6 returns true if you are equipped with any weapon except melee weapons.
     * 5 returns true if you are equipped with any weapon except the Explosives weapon group.
     * 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
     * 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
     * 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
     * 1 returns true only if you are equipped with any Melee weapon.
     * 0 never returns true.
     *
     * Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
     *
     * Hash: 0x475768A975D5AD17 | Since: 323
     */
    function isPedArmed(ped, typeFlags) {
        return IsPedArmed(ped, typeFlags);
    }
    weapon_1.isPedArmed = isPedArmed;
    /**
     * This native returns a true or false value.
     *
     * Ped ped = The ped whose weapon you want to check.
     *
     * Hash: 0x65F0C5AE05943EC7 | Since: 323
     */
    function isPedCurrentSilenced(ped) {
        return IsPedCurrentWeaponSilenced(ped);
    }
    weapon_1.isPedCurrentSilenced = isPedCurrentSilenced;
    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x0D78DE0572D3969E | Since: 323
     */
    function isPedComponentActive(ped, weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return IsPedWeaponComponentActive(ped, weaponHash, componentHash);
    }
    weapon_1.isPedComponentActive = isPedComponentActive;
    /**
     * No comment provided
     *
     * Hash: 0xB80CA294F2F26749 | Since: 323
     */
    function isPedReadyToShoot(ped) {
        return IsPedWeaponReadyToShoot(ped);
    }
    weapon_1.isPedReadyToShoot = isPedReadyToShoot;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x937C71165CF334B3 | Since: 323
     */
    function isValid(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return IsWeaponValid(weaponHash);
    }
    weapon_1.isValid = isValid;
    /**
     * Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
     *
     * Hash: 0x20AE33F3AC9C0033 | Since: 323
     */
    function makePedReload(ped) {
        return MakePedReload(ped);
    }
    weapon_1.makePedReload = makePedReload;
    /**
     * No comment provided
     *
     * Hash: 0x8C0D57EA686FAD87 | Since: 323
     */
    function refillAmmoInstantly(ped) {
        return RefillAmmoInstantly(ped);
    }
    weapon_1.refillAmmoInstantly = refillAmmoInstantly;
    /**
     * No comment provided
     *
     * Hash: 0x0ABF535877897560 | Since: 573
     */
    function removeAirDefenceSphere(zoneId) {
        return RemoveAirDefenseZone(zoneId);
    }
    weapon_1.removeAirDefenceSphere = removeAirDefenceSphere;
    /**
     * No comment provided
     *
     * Hash: 0x1E45B34ADEBEE48E | Since: 573
     */
    function removeAllAirDefenceSpheres() {
        RemoveAllAirDefenseZones();
    }
    weapon_1.removeAllAirDefenceSpheres = removeAllAirDefenceSpheres;
    /**
     * setting the last params to false it does that same so I would suggest its not a toggle
     *
     * Hash: 0xF25DF915FA38C5F3 | Since: 323
     */
    function removeAllPeds(ped) {
        RemoveAllPedWeapons(ped, false);
    }
    weapon_1.removeAllPeds = removeAllPeds;
    /**
     * If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
     *
     * Hash: 0xFC52E0F37E446528 | Since: 323
     */
    function removeAllProjectilesOfType(weaponHash, explode) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        RemoveAllProjectilesOfType(weaponHash, explode);
    }
    weapon_1.removeAllProjectilesOfType = removeAllProjectilesOfType;
    /**
     * No comment provided
     *
     * Hash: 0xAA08EF13F341C8FC | Since: 323
     */
    function removeAsset(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        RemoveWeaponAsset(weaponHash);
    }
    weapon_1.removeAsset = removeAsset;
    /**
     * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x1E8BE90C74FB4C09 | Since: 323
     */
    function removeComponentFromPed(ped, weaponHash, componentHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        RemoveWeaponComponentFromPed(ped, weaponHash, componentHash);
    }
    weapon_1.removeComponentFromPed = removeComponentFromPed;
    /**
     * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
     *
     * Hash: 0xF7D82B0D66777611 | Since: 323
     */
    function removeComponentFromWeaponObject(_object, componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        RemoveWeaponComponentFromWeaponObject(_object, componentHash);
    }
    weapon_1.removeComponentFromWeaponObject = removeComponentFromWeaponObject;
    /**
     * This native removes a specified weapon from your selected ped.
     *
     * Example:
     * C#:
     * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
     *
     * C++:
     * `WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);`
     *
     * The code above removes the knife from the player.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x4899CB088EDF59B8 | Since: 323
     */
    function removeFromPed(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        RemoveWeaponFromPed(ped, weaponHash);
    }
    weapon_1.removeFromPed = removeFromPed;
    /**
     * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
     *
     * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
     *
     * Hash: 0x5443438F033E29C3 | Since: 323
     */
    function requestAsset(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        RequestWeaponAsset(weaponHash, 0, 0);
    }
    weapon_1.requestAsset = requestAsset;
    /**
     * No comment provided
     *
     * Hash: 0x48164DBB970AC3F0 | Since: 323
     */
    function requestHighDetailModel(weaponObject) {
        RequestWeaponHighDetailModel(weaponObject);
    }
    weapon_1.requestHighDetailModel = requestHighDetailModel;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xDCD2A934D65CB497 | Since: 323
     */
    function setAmmoInClip(ped, weaponHash, ammo) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return SetAmmoInClip(ped, weaponHash, ammo);
    }
    weapon_1.setAmmoInClip = setAmmoInClip;
    /**
     * Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
     *
     * Hash: 0xEFF296097FF1E509 | Since: 1103
     */
    function setCanPedSelectAlls(ped, toggle) {
        SetCanPedEquipAllWeapons(ped, toggle);
    }
    weapon_1.setCanPedSelectAlls = setCanPedSelectAlls;
    /**
     * Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xB4771B9AAF4E68E4 | Since: 1103
     */
    function setCanPedSelectInventory(ped, weaponHash, toggle) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetCanPedEquipWeapon(ped, weaponHash, toggle);
    }
    weapon_1.setCanPedSelectInventory = setCanPedSelectInventory;
    /**
     * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x75C55983C2C39DAA | Since: 323
     */
    function setCurrentPedVehicle(ped, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return SetCurrentPedVehicleWeapon(ped, weaponHash);
    }
    weapon_1.setCurrentPedVehicle = setCurrentPedVehicle;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xADF692B254977C0C | Since: 323
     */
    function setCurrentPed(ped, weaponHash, bForceInHand) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetCurrentPedWeapon(ped, weaponHash, bForceInHand);
    }
    weapon_1.setCurrentPed = setCurrentPed;
    /**
     * No comment provided
     *
     * Hash: 0xE4DCEC7FD5B739A5 | Since: 323
     */
    function setEqippedStartSpinningAtFullSpeed(ped) {
        Citizen.invokeNative('0xE4DCEC7FD5B739A5', ped);
    }
    weapon_1.setEqippedStartSpinningAtFullSpeed = setEqippedStartSpinningAtFullSpeed;
    /**
     * Enables/disables flashlight on ped's weapon.
     *
     * Hash: 0x988DB6FE9B3AC000 | Since: 2060
     */
    function setFlashLightActiveHistory(ped, toggle) {
        SetFlashLightEnabled(ped, toggle);
    }
    weapon_1.setFlashLightActiveHistory = setFlashLightActiveHistory;
    /**
     * No comment provided
     *
     * Hash: 0xCEA66DAD478CD39B | Since: 323
     */
    function setFlashLightFadeDistance(distance) {
        return SetFlashLightFadeDistance(distance);
    }
    weapon_1.setFlashLightFadeDistance = setFlashLightFadeDistance;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x14E56BC5B5DB6A19 | Since: 323
     */
    function setPedAmmo(ped, weaponHash, ammo) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPedAmmo(ped, weaponHash, ammo, false);
    }
    weapon_1.setPedAmmo = setPedAmmo;
    /**
     * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
     *
     * Hash: 0x5FD1E1F011E76D7E | Since: 323
     */
    function setPedAmmoByType(ped, ammoTypeHash, ammo) {
        if (typeof ammoTypeHash === 'string')
            ammoTypeHash = misc.getHashKey(ammoTypeHash);
        SetPedAmmoByType(ped, ammoTypeHash, ammo);
    }
    weapon_1.setPedAmmoByType = setPedAmmoByType;
    /**
     * No comment provided
     *
     * Hash: 0xA4EFEF9440A5B0EF | Since: 323
     */
    function setPedAmmoToDrop(ped) {
        SetPedAmmoToDrop(ped, 0);
    }
    weapon_1.setPedAmmoToDrop = setPedAmmoToDrop;
    /**
     * No comment provided
     *
     * Hash: 0x8378627201D5497D | Since: 323
     */
    function setPedChanceOfFiringBlanks(ped, xBias, yBias) {
        SetPedChanceOfFiringBlanks(ped, xBias, yBias);
    }
    weapon_1.setPedChanceOfFiringBlanks = setPedChanceOfFiringBlanks;
    /**
     * Has 5 parameters since latest patches.
     *
     * Hash: 0x0725A4CCFDED9A70 | Since: 323
     */
    function setPedCurrentVisible(ped, visible, deselectWeapon) {
        SetPedCurrentWeaponVisible(ped, visible, deselectWeapon, false, false);
    }
    weapon_1.setPedCurrentVisible = setPedCurrentVisible;
    /**
     * No comment provided
     *
     * Hash: 0x50276EF8172F5F12 | Since: 1734
     */
    function setPedCycleVehiclesOnly(ped) {
        Citizen.invokeNative('0x50276EF8172F5F12', ped);
    }
    weapon_1.setPedCycleVehiclesOnly = setPedCycleVehiclesOnly;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x208A1888007FC0E6 | Since: 323
     */
    function setPedDropsInventory(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPedDropsInventoryWeapon(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
    }
    weapon_1.setPedDropsInventory = setPedDropsInventory;
    /**
     * No comment provided
     *
     * Hash: 0x6B7513D9966FBEC0 | Since: 323
     */
    function setPedDrops(ped) {
        SetPedDropsWeapon(ped);
    }
    weapon_1.setPedDrops = setPedDrops;
    /**
     * No comment provided
     *
     * Hash: 0x476AE72C1D19D1A8 | Since: 323
     */
    function setPedDropssWhenDead(ped, toggle) {
        SetPedDropsWeaponsWhenDead(ped, toggle);
    }
    weapon_1.setPedDropssWhenDead = setPedDropssWhenDead;
    /**
     * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
     * p2 is always true.
     *
     * Hash: 0xD0D7B1E680ED4A1A | Since: 323
     */
    function setPedGadget(ped, gadgetHash) {
        if (typeof gadgetHash === 'string')
            gadgetHash = misc.getHashKey(gadgetHash);
        SetPedGadget(ped, gadgetHash, false);
    }
    weapon_1.setPedGadget = setPedGadget;
    /**
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x3EDCB0505123623B | Since: 323
     */
    function setPedInfiniteAmmo(ped, toggle, weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPedInfiniteAmmo(ped, toggle, weaponHash);
    }
    weapon_1.setPedInfiniteAmmo = setPedInfiniteAmmo;
    /**
     * No comment provided
     *
     * Hash: 0x183DADC6AA953186 | Since: 323
     */
    function setPedInfiniteAmmoClip(ped, toggle) {
        SetPedInfiniteAmmoClip(ped, toggle);
    }
    weapon_1.setPedInfiniteAmmoClip = setPedInfiniteAmmoClip;
    /**
     * Returns handle of the projectile.
     *
     * Hash: 0xB4C8D77C80C0421E | Since: 323
     */
    function setPedShootOrdnance(ped) {
        return SetPedShootOrdnanceWeapon(ped, 0);
    }
    weapon_1.setPedShootOrdnance = setPedShootOrdnance;
    /**
     * No comment provided
     *
     * Hash: 0x24C024BA8379A70A | Since: 1868
     */
    function setPedStunGunFiniteAmmo() {
        Citizen.invokeNative('0x24C024BA8379A70A', undefined, undefined);
    }
    weapon_1.setPedStunGunFiniteAmmo = setPedStunGunFiniteAmmo;
    /**
     * Colors:
     * 0 = Gray
     * 1 = Dark Gray
     * 2 = Black
     * 3 = White
     * 4 = Blue
     * 5 = Cyan
     * 6 = Aqua
     * 7 = Cool Blue
     * 8 = Dark Blue
     * 9 = Royal Blue
     * 10 = Plum
     * 11 = Dark Purple
     * 12 = Purple
     * 13 = Red
     * 14 = Wine Red
     * 15 = Magenta
     * 16 = Pink
     * 17 = Salmon
     * 18 = Hot Pink
     * 19 = Rust Orange
     * 20 = Brown
     * 21 = Earth
     * 22 = Orange
     * 23 = Light Orange
     * 24 = Dark Yellow
     * 25 = Yellow
     * 26 = Light Brown
     * 27 = Lime Green
     * 28 = Olive
     * 29 = Moss
     * 30 = Turquoise
     * 31 = Dark Green
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x9FE5633880ECD8ED | Since: 1103
     */
    function setPedComponentTintIndex(ped, weaponHash, camoComponentHash, colorIndex) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof camoComponentHash === 'string')
            camoComponentHash = misc.getHashKey(camoComponentHash);
        SetPedWeaponLiveryColor(ped, weaponHash, camoComponentHash, colorIndex);
    }
    weapon_1.setPedComponentTintIndex = setPedComponentTintIndex;
    /**
     * tintIndex can be the following:
     *
     * 0 - Normal
     * 1 - Green
     * 2 - Gold
     * 3 - Pink
     * 4 - Army
     * 5 - LSPD
     * 6 - Orange
     * 7 - Platinum
     * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x50969B9B89ED5738 | Since: 323
     */
    function setPedTintIndex(ped, weaponHash, tintIndex) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetPedWeaponTintIndex(ped, weaponHash, tintIndex);
    }
    weapon_1.setPedTintIndex = setPedTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0xE620FD3512A04F18 | Since: 323
     */
    function setPickupAmmoAmountScaler() {
        SetPickupAmmoAmountScaler(0);
    }
    weapon_1.setPickupAmmoAmountScaler = setPickupAmmoAmountScaler;
    /**
     * No comment provided
     *
     * Hash: 0xECDC202B25E5CF48 | Since: 573
     */
    function setPlayerTargettableForAirDefenceSphere(player, zoneId, enable) {
        SetPlayerAirDefenseZoneFlag(player, zoneId, enable);
    }
    weapon_1.setPlayerTargettableForAirDefenceSphere = setPlayerTargettableForAirDefenceSphere;
    /**
     * Changes the selected ped aiming animation style.
     * Note : You must use GET_HASH_KEY!
     *
     * Strings to use with GET_HASH_KEY :
     *
     * "Ballistic",
     * "Default",
     * "Fat",
     * "Female",
     * "FirstPerson",
     * "FirstPersonAiming",
     * "FirstPersonFranklin",
     * "FirstPersonFranklinAiming",
     * "FirstPersonFranklinRNG",
     * "FirstPersonFranklinScope",
     * "FirstPersonMPFemale",
     * "FirstPersonMichael",
     * "FirstPersonMichaelAiming",
     * "FirstPersonMichaelRNG",
     * "FirstPersonMichaelScope",
     * "FirstPersonRNG",
     * "FirstPersonScope",
     * "FirstPersonTrevor",
     * "FirstPersonTrevorAiming",
     * "FirstPersonTrevorRNG",
     * "FirstPersonTrevorScope",
     * "Franklin",
     * "Gang",
     * "Gang1H",
     * "GangFemale",
     * "Hillbilly",
     * "MP_F_Freemode",
     * "Michael",
     * "SuperFat",
     * "Trevor"
     *
     * Hash: 0x1055AC3A667F09D9 | Since: 323
     */
    function setAnimationOverride(ped, animStyle) {
        if (typeof animStyle === 'string')
            animStyle = misc.getHashKey(animStyle);
        SetWeaponAnimationOverride(ped, animStyle);
    }
    weapon_1.setAnimationOverride = setAnimationOverride;
    /**
     * No comment provided
     *
     * Hash: 0x4AE5AC8B852D642C | Since: 2372
     */
    function setAoeModifier(weaponHash, multiplier) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetWeaponExplosionRadiusMultiplier(weaponHash, multiplier);
    }
    weapon_1.setAoeModifier = setAoeModifier;
    /**
     * Changes the weapon damage output by the given multiplier value. Must be run every frame.
     * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x4757F00BC6323CFE | Since: 505
     */
    function setDamageModifier(weaponHash, damageMultiplier) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        SetWeaponDamageModifier(weaponHash, damageMultiplier);
    }
    weapon_1.setDamageModifier = setDamageModifier;
    /**
     * `ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat("vehicle_weapon_mine_slick"), 1.0);`
     *
     * Hash: 0xE6D2CEDD370FF98E | Since: 2372
     */
    function setEffectDurationModifier(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        Citizen.invokeNative('0xE6D2CEDD370FF98E', p0, 0);
    }
    weapon_1.setEffectDurationModifier = setEffectDurationModifier;
    /**
     * No comment provided
     *
     * Hash: 0x977CA98939E82E4B | Since: 1103
     */
    function setObjectCamoIndex(weaponObject) {
        Citizen.invokeNative('0x977CA98939E82E4B', weaponObject, 0);
    }
    weapon_1.setObjectCamoIndex = setObjectCamoIndex;
    /**
     * Colors:
     * 0 = Gray
     * 1 = Dark Gray
     * 2 = Black
     * 3 = White
     * 4 = Blue
     * 5 = Cyan
     * 6 = Aqua
     * 7 = Cool Blue
     * 8 = Dark Blue
     * 9 = Royal Blue
     * 10 = Plum
     * 11 = Dark Purple
     * 12 = Purple
     * 13 = Red
     * 14 = Wine Red
     * 15 = Magenta
     * 16 = Pink
     * 17 = Salmon
     * 18 = Hot Pink
     * 19 = Rust Orange
     * 20 = Brown
     * 21 = Earth
     * 22 = Orange
     * 23 = Light Orange
     * 24 = Dark Yellow
     * 25 = Yellow
     * 26 = Light Brown
     * 27 = Lime Green
     * 28 = Olive
     * 29 = Moss
     * 30 = Turquoise
     * 31 = Dark Green
     * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0x5DA825A85D0EA6E6 | Since: 1103
     */
    function setObjectComponentTintIndex(weaponObject, camoComponentHash, colorIndex) {
        if (typeof camoComponentHash === 'string')
            camoComponentHash = misc.getHashKey(camoComponentHash);
        SetWeaponObjectLiveryColor(weaponObject, camoComponentHash, colorIndex);
    }
    weapon_1.setObjectComponentTintIndex = setObjectComponentTintIndex;
    /**
     * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
     *
     * Hash: 0xF827589017D4E4A9 | Since: 323
     */
    function setObjectTintIndex(weapon, tintIndex) {
        SetWeaponObjectTintIndex(weapon, tintIndex);
    }
    weapon_1.setObjectTintIndex = setObjectTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0x2857938C5D407AFA | Since: 3407
     */
    function getAmmoInVehicleClip(vehicle, seat) {
        return Citizen.invokeNative('0x2857938C5D407AFA', vehicle, seat);
    }
    weapon_1.getAmmoInVehicleClip = getAmmoInVehicleClip;
    /**
     * No comment provided
     *
     * Hash: 0xC8C6F4B1CDEB40EF | Since: 3407
     */
    function getTimeBeforeVehicleReloadFinishes(vehicle, seat) {
        return Citizen.invokeNative('0xC8C6F4B1CDEB40EF', vehicle, seat);
    }
    weapon_1.getTimeBeforeVehicleReloadFinishes = getTimeBeforeVehicleReloadFinishes;
    /**
     * No comment provided
     *
     * Hash: 0xD0AD348FFD7A6868 | Since: 3407
     */
    function getVehicleReloadTime(vehicle, seat) {
        return Citizen.invokeNative('0xD0AD348FFD7A6868', vehicle, seat);
    }
    weapon_1.getVehicleReloadTime = getVehicleReloadTime;
    /**
     * No comment provided
     *
     * Hash: 0x8062F07153F4446F | Since: 3407
     */
    function hasReloadingInVehicle(vehicle, seat) {
        return Citizen.invokeNative('0x8062F07153F4446F', vehicle, seat);
    }
    weapon_1.hasReloadingInVehicle = hasReloadingInVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x873906720EE842C3 | Since: 3407
     */
    function setAmmoInVehicleClip(vehicle, seat, ammo) {
        return Citizen.invokeNative('0x873906720EE842C3', vehicle, seat, ammo);
    }
    weapon_1.setAmmoInVehicleClip = setAmmoInVehicleClip;
    /**
     * No comment provided
     *
     * Hash: 0x1091922715B68DF0 | Since: 3095
     */
    function setPedDamageModifier(weapon, damageModifier) {
        if (typeof weapon === 'string')
            weapon = misc.getHashKey(weapon);
        Citizen.invokeNative('0x1091922715B68DF0', weapon, damageModifier);
    }
    weapon_1.setPedDamageModifier = setPedDamageModifier;
    /**
     * No comment provided
     *
     * Hash: 0x5B1513F27F279A44 | Since: 3407
     */
    function triggerVehicleReload(vehicle, seat, ped) {
        return Citizen.invokeNative('0x5B1513F27F279A44', vehicle, seat, ped);
    }
    weapon_1.triggerVehicleReload = triggerVehicleReload;
})(weapon || (weapon = {}));
export var network;
(function (network) {
    /**
     * No comment provided
     *
     * Hash: 0x2CAFD5E9 | Since: unknown
     */
    function getWalkMode() {
        return Citizen.invokeNative('0x2CAFD5E9');
    }
    network.getWalkMode = getWalkMode;
    /**
     * No comment provided
     *
     * Hash: 0x55188D2D | Since: unknown
     */
    function setWalkMode(enabled) {
        Citizen.invokeNative('0x55188D2D', enabled);
    }
    network.setWalkMode = setWalkMode;
    /**
     * No comment provided
     *
     * Hash: 0x1E2E3177 | Since: unknown
     */
    function doesEntityExistWithNetworkId(netId) {
        return Citizen.invokeNative('0x1E2E3177', netId);
    }
    network.doesEntityExistWithNetworkId = doesEntityExistWithNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x5B912C3F | Since: unknown
     */
    function getEntityFromNetworkId(netId) {
        return Citizen.invokeNative('0x5B912C3F', netId);
    }
    network.getEntityFromNetworkId = getEntityFromNetworkId;
    /**
     * Returns the first owner ID of the specified entity.
     *
     * Hash: 0x1E546224 | Since: unknown
     */
    function getFirstEntityOwner(entity) {
        return Citizen.invokeNative('0x1E546224', entity);
    }
    network.getFirstEntityOwner = getFirstEntityOwner;
    /**
     * No comment provided
     *
     * Hash: 0x9E35DAB6 | Since: unknown
     */
    function getNetworkIdFromEntity(entity) {
        return Citizen.invokeNative('0x9E35DAB6', entity);
    }
    network.getNetworkIdFromEntity = getNetworkIdFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xFFEEF513 | Since: unknown
     */
    function getVoiceProximityOverrideForPlayer(playerSrc) {
        return new Vector3(Citizen.invokeNative('0xFFEEF513', playerSrc));
    }
    network.getVoiceProximityOverrideForPlayer = getVoiceProximityOverrideForPlayer;
    /**
     * Returns the owner ID of the specified entity.
     *
     * Hash: 0x526FEE31 | Since: unknown
     */
    function getEntityOwner(entity) {
        return Citizen.invokeNative('0x526FEE31', entity);
    }
    network.getEntityOwner = getEntityOwner;
    /**
     * No comment provided
     *
     * Hash: 0xD45B1FFCCD52FF19 | Since: 323
     */
    function activateDamageTrackerOnId(netID, toggle) {
        ActivateDamageTrackerOnNetworkId(netID, toggle);
    }
    network.activateDamageTrackerOnId = activateDamageTrackerOnId;
    /**
     * No comment provided
     *
     * Hash: 0xBEC0816FF5ACBCDA | Since: 757
     */
    function activateDamageTrackerOnPlayer(player, toggle) {
        ActivateDamageTrackerOnPlayer(player, toggle);
    }
    network.activateDamageTrackerOnPlayer = activateDamageTrackerOnPlayer;
    /**
     * Getter for SET_NETWORK_CUTSCENE_ENTITIES.
     *
     * Hash: 0x66D6A5E9C511214A | Since: 2699
     */
    function areCutsceneEntitiesed() {
        return NetworkAreCutsceneEntities();
    }
    network.areCutsceneEntitiesed = areCutsceneEntitiesed;
    /**
     * No comment provided
     *
     * Hash: 0xEC5E3AF5289DCA81 | Since: 323
     */
    function badSportPlayerLeftDetected(event, amountReceived) {
        return BadSportPlayerLeftDetected(event, amountReceived);
    }
    network.badSportPlayerLeftDetected = badSportPlayerLeftDetected;
    /**
     * No comment provided
     *
     * Hash: 0xE16AA70CE9BEEDC3 | Since: 877
     */
    function canRegisterMissionDoors() {
        return Citizen.invokeNative('0xE16AA70CE9BEEDC3', undefined);
    }
    network.canRegisterMissionDoors = canRegisterMissionDoors;
    /**
     * No comment provided
     *
     * Hash: 0x69778E7564BADE6D | Since: 323
     */
    function canRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt) {
        return CanRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt);
    }
    network.canRegisterMissionEntities = canRegisterMissionEntities;
    /**
     * No comment provided
     *
     * Hash: 0x800DD4721A8B008B | Since: 323
     */
    function canRegisterMissionObjects(amount) {
        return CanRegisterMissionObjects(amount);
    }
    network.canRegisterMissionObjects = canRegisterMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0xBCBF4FEF9FA5D781 | Since: 323
     */
    function canRegisterMissionPeds(amount) {
        return CanRegisterMissionPeds(amount);
    }
    network.canRegisterMissionPeds = canRegisterMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x0A49D1CB6E34AF72 | Since: 757
     */
    function canRegisterMissionPickups(amount) {
        return CanRegisterMissionPickups(amount);
    }
    network.canRegisterMissionPickups = canRegisterMissionPickups;
    /**
     * No comment provided
     *
     * Hash: 0x7277F1F2E085EE74 | Since: 323
     */
    function canRegisterMissionVehicles(amount) {
        return CanRegisterMissionVehicles(amount);
    }
    network.canRegisterMissionVehicles = canRegisterMissionVehicles;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x966DD84FB6A46017 | Since: 323
     */
    function clearServiceEventArguments() {
        ClearLaunchParams();
    }
    network.clearServiceEventArguments = clearServiceEventArguments;
    /**
     * Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
     *
     * Hash: 0x4F18196C8D38768D | Since: 323
     */
    function cloudCheckAvailability() {
        CloudCheckAvailability();
    }
    network.cloudCheckAvailability = cloudCheckAvailability;
    /**
     * No comment provided
     *
     * Hash: 0xC64DED7EF0D2FE37 | Since: 323
     */
    function cloudDeleteMemberFile() {
        return CloudDeleteMemberFile(undefined);
    }
    network.cloudDeleteMemberFile = cloudDeleteMemberFile;
    /**
     * No comment provided
     *
     * Hash: 0x3A3D5568AF297CD5 | Since: 323
     */
    function cloudDidRequestSucceed(requestId) {
        return CloudDidRequestSucceed(requestId);
    }
    network.cloudDidRequestSucceed = cloudDidRequestSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x0B0CC10720653F3B | Since: 323
     */
    function cloudGetAvailabilityCheckResult() {
        return CloudGetAvailabilityCheckResult();
    }
    network.cloudGetAvailabilityCheckResult = cloudGetAvailabilityCheckResult;
    /**
     * No comment provided
     *
     * Hash: 0x4C61B39930D045DA | Since: 323
     */
    function cloudHasRequestCompleted(requestId) {
        return CloudHasRequestCompleted(requestId);
    }
    network.cloudHasRequestCompleted = cloudHasRequestCompleted;
    /**
     * No comment provided
     *
     * Hash: 0xC7ABAC5DE675EE3B | Since: 323
     */
    function cloudIsCheckingAvailability() {
        return CloudIsCheckingAvailability();
    }
    network.cloudIsCheckingAvailability = cloudIsCheckingAvailability;
    /**
     * Takes the specified time and writes it to the structure specified in the second argument.
     *
     * struct date_time
     * {
     * int year;
     * int PADDING1;
     * int month;
     * int PADDING2;
     * int day;
     * int PADDING3;
     * int hour;
     * int PADDING4;
     * int minute;
     * int PADDING5;
     * int second;
     * int PADDING6;
     * };
     *
     * Hash: 0xAC97AF97FA68E5D5 | Since: 323
     */
    function convertPosixTime(posixTime) {
        return ConvertPosixTime(posixTime);
    }
    network.convertPosixTime = convertPosixTime;
    /**
     * No comment provided
     *
     * Hash: 0x265635150FB0D82E | Since: 323
     */
    function delayMpStoreOpen() {
        Citizen.invokeNative('0x265635150FB0D82E');
    }
    network.delayMpStoreOpen = delayMpStoreOpen;
    /**
     * No comment provided
     *
     * Hash: 0x43865688AE10F0D7 | Since: 323
     */
    function facebookCanPostToFacebook() {
        return FacebookIsAvailable();
    }
    network.facebookCanPostToFacebook = facebookCanPostToFacebook;
    /**
     * No comment provided
     *
     * Hash: 0xA75E2B6733DA5142 | Since: 323
     */
    function facebookDidPostSucceed() {
        return FacebookDoUnkCheck();
    }
    network.facebookDidPostSucceed = facebookDidPostSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x62B9FEC9A11F10EF | Since: 323
     */
    function facebookHasPostCompleted() {
        return FacebookIsSendingData();
    }
    network.facebookHasPostCompleted = facebookHasPostCompleted;
    /**
     * No comment provided
     *
     * Hash: 0x098AB65B9ED9A9EC | Since: 323
     */
    function facebookPostCompletedHeist(heistName, cashEarned, xpEarned) {
        return FacebookSetHeistComplete(heistName, cashEarned, xpEarned);
    }
    network.facebookPostCompletedHeist = facebookPostCompletedHeist;
    /**
     * No comment provided
     *
     * Hash: 0x0AE1F1653B554AB9 | Since: 323
     */
    function facebookPostCompletedMilestone(milestoneId) {
        return FacebookSetMilestoneComplete(milestoneId);
    }
    network.facebookPostCompletedMilestone = facebookPostCompletedMilestone;
    /**
     * No comment provided
     *
     * Hash: 0xDC48473142545431 | Since: 323
     */
    function facebookPostCreateCharacter() {
        return FacebookSetCreateCharacterComplete();
    }
    network.facebookPostCreateCharacter = facebookPostCreateCharacter;
    /**
     * Hardcoded to not work in SP.
     *
     * Hash: 0x416DBD4CD6ED8DD2 | Since: 323
     */
    function fadeOutLocalPlayer() {
        FadeOutLocalPlayer(false);
    }
    network.fadeOutLocalPlayer = fadeOutLocalPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xCBBD7C4991B64809 | Since: 323
     */
    function filloutPmPlayerList() {
        return FilloutPmPlayerList(undefined, undefined);
    }
    network.filloutPmPlayerList = filloutPmPlayerList;
    /**
     * No comment provided
     *
     * Hash: 0x716B6DB9D1886106 | Since: 323
     */
    function filloutPmPlayerListWithNames() {
        return FilloutPmPlayerListWithNames(undefined, undefined);
    }
    network.filloutPmPlayerListWithNames = filloutPmPlayerListWithNames;
    /**
     * Returns POSIX timestamp, an int representing the cloud time.
     *
     * Hash: 0x9A73240B49945C76 | Since: 323
     */
    function getCloudTimeAsInt() {
        return GetCloudTimeAsInt();
    }
    network.getCloudTimeAsInt = getCloudTimeAsInt;
    /**
     * Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
     *
     * Hash: 0xF12E6CD06C73D69E | Since: 1103
     */
    function getCloudTimeAsString() {
        return GetCloudTimeAsString();
    }
    network.getCloudTimeAsString = getCloudTimeAsString;
    /**
     * index2 is unused
     *
     * Hash: 0x6F44CBF56D79FAC0 | Since: 323
     */
    function getCommerceItemCat(index, index2) {
        return GetCommerceItemCat(index, index2);
    }
    network.getCommerceItemCat = getCommerceItemCat;
    /**
     * No comment provided
     *
     * Hash: 0x662635855957C411 | Since: 323
     */
    function getCommerceItemId(index) {
        return GetCommerceItemId(index);
    }
    network.getCommerceItemId = getCommerceItemId;
    /**
     * No comment provided
     *
     * Hash: 0xB4271092CA7EDF48 | Since: 323
     */
    function getCommerceItemName(index) {
        return GetCommerceItemName(index);
    }
    network.getCommerceItemName = getCommerceItemName;
    /**
     * No comment provided
     *
     * Hash: 0x2A7776C709904AB0 | Since: 323
     */
    function getCommerceItemNumCats(index) {
        return GetCommerceItemNumCats(index);
    }
    network.getCommerceItemNumCats = getCommerceItemNumCats;
    /**
     * No comment provided
     *
     * Hash: 0x722F5D28B61C5EA8 | Since: 323
     */
    function getCommerceItemTexturename(index) {
        return GetCommerceItemTexturename(index);
    }
    network.getCommerceItemTexturename = getCommerceItemTexturename;
    /**
     * No comment provided
     *
     * Hash: 0xCA94551B50B4932C | Since: 323
     */
    function getCommerceProductPrice(index) {
        return GetCommerceProductPrice(index);
    }
    network.getCommerceProductPrice = getCommerceProductPrice;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x8B0C2964BA471961 | Since: 323
     */
    function getContentToLoadType() {
        return Citizen.invokeNative('0x8B0C2964BA471961');
    }
    network.getContentToLoadType = getContentToLoadType;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x88B588B41FF7868E | Since: 323
     */
    function getIsLaunchFromLiveArea() {
        return Citizen.invokeNative('0x88B588B41FF7868E');
    }
    network.getIsLaunchFromLiveArea = getIsLaunchFromLiveArea;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x67FC09BC554A75E5 | Since: 323
     */
    function getIsLiveAreaLaunchWithContent() {
        return Citizen.invokeNative('0x67FC09BC554A75E5');
    }
    network.getIsLiveAreaLaunchWithContent = getIsLiveAreaLaunchWithContent;
    /**
     * No comment provided
     *
     * Hash: 0xC7BE335216B5EC7C | Since: 323
     */
    function getMaxNumObjects() {
        return GetMaxNumNetworkObjects();
    }
    network.getMaxNumObjects = getMaxNumObjects;
    /**
     * No comment provided
     *
     * Hash: 0x0C1F7D49C39D2289 | Since: 323
     */
    function getMaxNumPeds() {
        return GetMaxNumNetworkPeds();
    }
    network.getMaxNumPeds = getMaxNumPeds;
    /**
     * No comment provided
     *
     * Hash: 0xA72835064DD63E4C | Since: 323
     */
    function getMaxNumPickups() {
        return GetMaxNumNetworkPickups();
    }
    network.getMaxNumPickups = getMaxNumPickups;
    /**
     * No comment provided
     *
     * Hash: 0x0AFCE529F69B21FF | Since: 323
     */
    function getMaxNumVehicles() {
        return GetMaxNumNetworkVehicles();
    }
    network.getMaxNumVehicles = getMaxNumVehicles;
    /**
     * No comment provided
     *
     * Hash: 0x7A5487FE9FAA6B48 | Since: 323
     */
    function getTime() {
        return GetNetworkTime();
    }
    network.getTime = getTime;
    /**
     * Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
     * Could be used for benchmarking since it can return times in ticks.
     *
     * Hash: 0x89023FBBF9200E9F | Since: 323
     */
    function getTimeAccurate() {
        return GetNetworkTimeAccurate();
    }
    network.getTimeAccurate = getTimeAccurate;
    /**
     * No comment provided
     *
     * Hash: 0xF2EAC213D5EA0623 | Since: 323
     */
    function getNumCommerceItems() {
        return GetNumCommerceItems();
    }
    network.getNumCommerceItems = getNumCommerceItems;
    /**
     * No comment provided
     *
     * Hash: 0x12B6281B6C6706C0 | Since: 323
     */
    function getNumCreatedMissionObjects() {
        return GetNumCreatedMissionObjects(false);
    }
    network.getNumCreatedMissionObjects = getNumCreatedMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0xCB215C4B56A7FAE7 | Since: 323
     */
    function getNumCreatedMissionPeds() {
        return GetNumCreatedMissionPeds(false);
    }
    network.getNumCreatedMissionPeds = getNumCreatedMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x0CD9AB83489430EA | Since: 323
     */
    function getNumCreatedMissionVehicles() {
        return GetNumCreatedMissionVehicles(false);
    }
    network.getNumCreatedMissionVehicles = getNumCreatedMissionVehicles;
    /**
     * p0 appears to be for MP
     *
     * Hash: 0xAA81B5F10BC43AC2 | Since: 323
     */
    function getNumReservedMissionObjects() {
        return GetNumReservedMissionObjects(false, undefined);
    }
    network.getNumReservedMissionObjects = getNumReservedMissionObjects;
    /**
     * p0 appears to be for MP
     *
     * Hash: 0x1F13D5AE5CB17E17 | Since: 323
     */
    function getNumReservedMissionPeds() {
        return GetNumReservedMissionPeds(false, undefined);
    }
    network.getNumReservedMissionPeds = getNumReservedMissionPeds;
    /**
     * p0 appears to be for MP
     *
     * Hash: 0xCF3A965906452031 | Since: 323
     */
    function getNumReservedMissionVehicles() {
        return GetNumReservedMissionVehicles(false, undefined);
    }
    network.getNumReservedMissionVehicles = getNumReservedMissionVehicles;
    /**
     * Online version is defined here: update\update.rpf\common\data\version.txt
     *
     * Example:
     *
     * [ONLINE_VERSION_NUMBER]
     * 1.33
     *
     * _GET_ONLINE_VERSION() will return "1.33"
     *
     * Hash: 0xFCA9373EF340AC0A | Since: 323
     */
    function getOnlineVersion() {
        return GetOnlineVersion();
    }
    network.getOnlineVersion = getOnlineVersion;
    /**
     * No comment provided
     *
     * Hash: 0xE42D626EEC94E5D9 | Since: 1290
     */
    function getReservedMissionEntitiesInArea(pos) {
        return Citizen.invokeNative('0xE42D626EEC94E5D9', pos.x, pos.y, pos.z, undefined);
    }
    network.getReservedMissionEntitiesInArea = getReservedMissionEntitiesInArea;
    /**
     * 0 = succeeded
     * 1 = pending
     * 2 = failed
     *
     * Hash: 0x8BD6C6DEA20E82C6 | Since: 323
     */
    function getStatusOfTextureDownload() {
        return GetStatusOfTextureDownload(0);
    }
    network.getStatusOfTextureDownload = getStatusOfTextureDownload;
    /**
     * No comment provided
     *
     * Hash: 0x9E23B1777A927DAD | Since: 323
     */
    function getTimeAsString(time) {
        return GetTimeAsString(time);
    }
    network.getTimeAsString = getTimeAsString;
    /**
     * Subtracts the second argument from the first.
     *
     * Hash: 0xA2C6FC031D46FFF0 | Since: 323
     */
    function getTimeDifference(timeA, timeB) {
        return GetTimeDifference(timeA, timeB);
    }
    network.getTimeDifference = getTimeDifference;
    /**
     * Adds the first argument to the second.
     *
     * Hash: 0x017008CCDAD48503 | Since: 323
     */
    function getTimeOffset(timeA, timeB) {
        return GetTimeOffset(timeA, timeB);
    }
    network.getTimeOffset = getTimeOffset;
    /**
     * Checks some commerce stuff
     *
     * Hash: 0x754615490A029508 | Since: 1290
     */
    function getUserPremiumAccess() {
        return Citizen.invokeNative('0x754615490A029508');
    }
    network.getUserPremiumAccess = getUserPremiumAccess;
    /**
     * Checks some commerce stuff
     *
     * Hash: 0x155467ACA0F55705 | Since: 1290
     */
    function getUserStarterAccess() {
        return Citizen.invokeNative('0x155467ACA0F55705');
    }
    network.getUserStarterAccess = getUserStarterAccess;
    /**
     * No comment provided
     *
     * Hash: 0x46718ACEEDEAFC84 | Since: 323
     */
    function hasTimeStarted() {
        return HasNetworkTimeStarted();
    }
    network.hasTimeStarted = hasTimeStarted;
    /**
     * No comment provided
     *
     * Hash: 0x1D4DC17C38FEAFF0 | Since: 323
     */
    function isCommerceDataFetchInProgress() {
        return Citizen.invokeNative('0x1D4DC17C38FEAFF0');
    }
    network.isCommerceDataFetchInProgress = isCommerceDataFetchInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xEA14EEF5B7CD2C30 | Since: 323
     */
    function isCommerceDataValid() {
        return IsCommerceDataValid();
    }
    network.isCommerceDataValid = isCommerceDataValid;
    /**
     * No comment provided
     *
     * Hash: 0x2EAC52B4019E2782 | Since: 323
     */
    function isCommerceStoreOpen() {
        return IsCommerceStoreOpen();
    }
    network.isCommerceStoreOpen = isCommerceStoreOpen;
    /**
     * No comment provided
     *
     * Hash: 0x6E192E33AD436366 | Since: 323
     */
    function isDamageTrackerActiveOnId(netID) {
        return IsDamageTrackerActiveOnNetworkId(netID);
    }
    network.isDamageTrackerActiveOnId = isDamageTrackerActiveOnId;
    /**
     * No comment provided
     *
     * Hash: 0xB2092A1EAA7FD45F | Since: 757
     */
    function isDamageTrackerActiveOnPlayer(player) {
        return IsDamageTrackerActiveOnPlayer(player);
    }
    network.isDamageTrackerActiveOnPlayer = isDamageTrackerActiveOnPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x21D04D7BC538C146 | Since: 323
     */
    function isEntityAGhost(entity) {
        return IsEntityGhostedToLocalPlayer(entity);
    }
    network.isEntityAGhost = isEntityAGhost;
    /**
     * No comment provided
     *
     * Hash: 0x7EF7649B64D7FF10 | Since: 944
     */
    function isEntityInGhostCollision(entity) {
        return Citizen.invokeNative('0x7EF7649B64D7FF10', entity);
    }
    network.isEntityInGhostCollision = isEntityInGhostCollision;
    /**
     * No comment provided
     *
     * Hash: 0xA1607996431332DF | Since: 323
     */
    function isIdOwnedByParticipant(netId) {
        return IsNetworkIdOwnedByParticipant(netId);
    }
    network.isIdOwnedByParticipant = isIdOwnedByParticipant;
    /**
     * No comment provided
     *
     * Hash: 0xDD7CEF5B3A4DA8A6 | Since: 2802
     */
    function isVehicleRunningRespotTimer(networkID) {
        return Citizen.invokeNative('0xDD7CEF5B3A4DA8A6', networkID);
    }
    network.isVehicleRunningRespotTimer = isVehicleRunningRespotTimer;
    /**
     * No comment provided
     *
     * Hash: 0x28123C8B056CC8AA | Since: 3274
     */
    function isObjectReassignmentInProgress() {
        return Citizen.invokeNative('0x28123C8B056CC8AA');
    }
    network.isObjectReassignmentInProgress = isObjectReassignmentInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xE73092F4157CD126 | Since: 323
     */
    function isPlayerInCutscene(player) {
        return IsPlayerInCutscene(player);
    }
    network.isPlayerInCutscene = isPlayerInCutscene;
    /**
     * No comment provided
     *
     * Hash: 0xD82CF8E64C8729D8 | Since: 323
     */
    function isSphereVisibleToAnotherMachine() {
        return IsSphereVisibleToAnotherMachine(0, 0, 0, 0);
    }
    network.isSphereVisibleToAnotherMachine = isSphereVisibleToAnotherMachine;
    /**
     * No comment provided
     *
     * Hash: 0xDC3A310219E5DA62 | Since: 323
     */
    function isSphereVisibleToPlayer() {
        return IsSphereVisibleToPlayer(undefined, 0, 0, 0, 0);
    }
    network.isSphereVisibleToPlayer = isSphereVisibleToPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x883D79C4071E18B3 | Since: 323
     */
    function isStoreAvailableToUser() {
        return IsStoreAvailableToUser();
    }
    network.isStoreAvailableToUser = isStoreAvailableToUser;
    /**
     * Returns true if the two times are equal; otherwise returns false.
     *
     * Hash: 0xF5BC95857BD6D512 | Since: 323
     */
    function isTimeEqualTo(timeA, timeB) {
        return IsTimeEqualTo(timeA, timeB);
    }
    network.isTimeEqualTo = isTimeEqualTo;
    /**
     * Subtracts the second argument from the first, then returns whether the result is negative.
     *
     * Hash: 0xCB2CF5148012C8D0 | Since: 323
     */
    function isTimeLessThan(timeA, timeB) {
        return IsTimeLessThan(timeA, timeB);
    }
    network.isTimeLessThan = isTimeLessThan;
    /**
     * Subtracts the first argument from the second, then returns whether the result is negative.
     *
     * Hash: 0xDE350F8651E4346C | Since: 323
     */
    function isTimeMoreThan(timeA, timeB) {
        return IsTimeMoreThan(timeA, timeB);
    }
    network.isTimeMoreThan = isTimeMoreThan;
    /**
     * No comment provided
     *
     * Hash: 0x59328EB08C5CEB2B | Since: 323
     */
    function isUserOldEnoughToAccessStore() {
        return Citizen.invokeNative('0x59328EB08C5CEB2B');
    }
    network.isUserOldEnoughToAccessStore = isUserOldEnoughToAccessStore;
    /**
     * No comment provided
     *
     * Hash: 0xFA91550DF9318B22 | Since: 323
     */
    function acceptPresenceInvite() {
        return NetworkAcceptPresenceInvite(0);
    }
    network.acceptPresenceInvite = acceptPresenceInvite;
    /**
     * No comment provided
     *
     * Hash: 0xAA6A47A573ABB75A | Since: 323
     */
    function accessTunableBool(tunableContext, tunableName) {
        return NetworkAccessTunableBool(tunableContext, tunableName);
    }
    network.accessTunableBool = accessTunableBool;
    /**
     * No comment provided
     *
     * Hash: 0xEA16B69D93D71A45 | Since: 323
     */
    function accessTunableBoolHash(tunableContext, tunableName) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkAccessTunableBoolHash(tunableContext, tunableName);
    }
    network.accessTunableBoolHash = accessTunableBoolHash;
    /**
     * No comment provided
     *
     * Hash: 0x697F508861875B42 | Since: 393
     */
    function accessTunableBoolModificationDetectionRegistrationHash(contextHash, nameHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        if (typeof nameHash === 'string')
            nameHash = misc.getHashKey(nameHash);
        return NetworkRegisterTunableBoolHash(contextHash, nameHash);
    }
    network.accessTunableBoolModificationDetectionRegistrationHash = accessTunableBoolModificationDetectionRegistrationHash;
    /**
     * No comment provided
     *
     * Hash: 0xE5608CA7BC163A5F | Since: 323
     */
    function accessTunableFloat(tunableContext, tunableName) {
        return NetworkAccessTunableFloat(tunableContext, tunableName);
    }
    network.accessTunableFloat = accessTunableFloat;
    /**
     * No comment provided
     *
     * Hash: 0x972BC203BBC4C4D5 | Since: 323
     */
    function accessTunableFloatHash(tunableContext, tunableName) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkAccessTunableFloatHash(tunableContext, tunableName);
    }
    network.accessTunableFloatHash = accessTunableFloatHash;
    /**
     * No comment provided
     *
     * Hash: 0x1950DAE9848A4739 | Since: 393
     */
    function accessTunableFloatModificationDetectionRegistrationHash(contextHash, nameHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        if (typeof nameHash === 'string')
            nameHash = misc.getHashKey(nameHash);
        return NetworkRegisterTunableFloatHash(contextHash, nameHash);
    }
    network.accessTunableFloatModificationDetectionRegistrationHash = accessTunableFloatModificationDetectionRegistrationHash;
    /**
     * No comment provided
     *
     * Hash: 0x8BE1146DFD5D4468 | Since: 323
     */
    function accessTunableInt(tunableContext, tunableName) {
        return NetworkAccessTunableInt(tunableContext, tunableName);
    }
    network.accessTunableInt = accessTunableInt;
    /**
     * No comment provided
     *
     * Hash: 0x40FCE03E50E8DBE8 | Since: 323
     */
    function accessTunableIntHash(tunableContext, tunableName) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkAccessTunableIntHash(tunableContext, tunableName);
    }
    network.accessTunableIntHash = accessTunableIntHash;
    /**
     * No comment provided
     *
     * Hash: 0x3A8B55FDA4C8DDEF | Since: 393
     */
    function accessTunableIntModificationDetectionRegistrationHash(contextHash, nameHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        if (typeof nameHash === 'string')
            nameHash = misc.getHashKey(nameHash);
        return NetworkRegisterTunableIntHash(contextHash, nameHash);
    }
    network.accessTunableIntModificationDetectionRegistrationHash = accessTunableIntModificationDetectionRegistrationHash;
    /**
     * No comment provided
     *
     * Hash: 0xFAFC23AEE23868DB | Since: 393
     */
    function accessTunableModificationDetectionClear() {
        return NetworkAllocateTunablesRegistrationDataMap();
    }
    network.accessTunableModificationDetectionClear = accessTunableModificationDetectionClear;
    /**
     * No comment provided
     *
     * Hash: 0xC88156EBB786F8D5 | Since: 323
     */
    function actionFollowInvite() {
        return NetworkActionFollowInvite();
    }
    network.actionFollowInvite = actionFollowInvite;
    /**
     * No comment provided
     *
     * Hash: 0x2B1C623823DB0D9D | Since: 1103
     */
    function addClientEntityAngledArea(x1, y1, z1, x2, y2, z2, radius) {
        return Citizen.invokeNative('0x2B1C623823DB0D9D', x1, y1, z1, x2, y2, z2, radius);
    }
    network.addClientEntityAngledArea = addClientEntityAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x25B99872D588A101 | Since: 323
     */
    function addClientEntityArea(x1, y1, z1, x2, y2, z2) {
        return NetworkAddEntityDisplayedBoundaries(x1, y1, z1, x2, y2, z2);
    }
    network.addClientEntityArea = addClientEntityArea;
    /**
     * To remove, see: NETWORK_REMOVE_ENTITY_AREA
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x376C6375BA60293A | Since: 323
     */
    function addEntityAngledArea(x1, y1, z1, x2, y2, z2, width) {
        return NetworkAddEntityAngledArea(x1, y1, z1, x2, y2, z2, width);
    }
    network.addEntityAngledArea = addEntityAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0x494C8FB299290269 | Since: 323
     */
    function addEntityArea(x1, y1, z1, x2, y2, z2) {
        return NetworkAddEntityArea(x1, y1, z1, x2, y2, z2);
    }
    network.addEntityArea = addEntityArea;
    /**
     * No comment provided
     *
     * Hash: 0xF2404D68CBC855FA | Since: 323
     */
    function addEntityToSynchronisedScene(entity, netScene, animDict, animName, speed, speedMulitiplier, flag) {
        NetworkAddEntityToSynchronisedScene(entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
    }
    network.addEntityToSynchronisedScene = addEntityToSynchronisedScene;
    /**
     * ..
     *
     * Hash: 0x236406F60CF216D6 | Since: 323
     */
    function addFollowers() {
        return NetworkAddFollowers(0);
    }
    network.addFollowers = addFollowers;
    /**
     * No comment provided
     *
     * Hash: 0x8E02D73914064223 | Since: 323
     */
    function addFriend(message) {
        return NetworkAddFriend(message);
    }
    network.addFriend = addFriend;
    /**
     * No comment provided
     *
     * Hash: 0x7F562DBC212E81F9 | Since: 2545
     */
    function addInvalidObjectModel(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        Citizen.invokeNative('0x7F562DBC212E81F9', modelHash, undefined);
    }
    network.addInvalidObjectModel = addInvalidObjectModel;
    /**
     * Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
     * In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
     *
     * Hash: 0x45F35C0EDC33B03B | Since: 1734
     */
    function addMapEntityToSynchronisedScene(netScene, modelHash, pos, flags) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        NetworkAddMapEntityToSynchronisedScene(netScene, modelHash, pos.x, pos.y, pos.z, 0, undefined, 0, 0, flags);
    }
    network.addMapEntityToSynchronisedScene = addMapEntityToSynchronisedScene;
    /**
     * No comment provided
     *
     * Hash: 0x742A637471BCECD9 | Since: 323
     */
    function addPedToSynchronisedScene(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate) {
        NetworkAddPedToSynchronisedScene(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, undefined);
    }
    network.addPedToSynchronisedScene = addPedToSynchronisedScene;
    /**
     * No comment provided
     *
     * Hash: 0xA5EAFE473E45C442 | Since: 1290
     */
    function addPedToSynchronisedSceneWithIk() {
        NetworkAddPedToSynchronisedSceneWithIk(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    network.addPedToSynchronisedSceneWithIk = addPedToSynchronisedSceneWithIk;
    /**
     * No comment provided
     *
     * Hash: 0xCF8BD3B0BD6D42D7 | Since: 323
     */
    function addSynchronisedSceneCamera(netScene, animDict, animName) {
        NetworkAddSynchronisedSceneCamera(netScene, animDict, animName);
    }
    network.addSynchronisedSceneCamera = addSynchronisedSceneCamera;
    /**
     * No comment provided
     *
     * Hash: 0x0F1A4B45B7693B95 | Since: 2189
     */
    function allowCloningWhileInTutorial() {
        Citizen.invokeNative('0x0F1A4B45B7693B95', undefined, undefined);
    }
    network.allowCloningWhileInTutorial = allowCloningWhileInTutorial;
    /**
     * teamId must be < 3, instanceId must be < 64
     *
     * Hash: 0xFB680D403909DC70 | Since: 323
     */
    function allowGangToJoinTutorialSession(teamId, instanceId) {
        Citizen.invokeNative('0xFB680D403909DC70', teamId, instanceId);
    }
    network.allowGangToJoinTutorialSession = allowGangToJoinTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0x6B07B9CE4D390375 | Since: 323
     */
    function allowInviteProcessInPlayerSwitch() {
        NetworkBlockKickedPlayers(false);
    }
    network.allowInviteProcessInPlayerSwitch = allowInviteProcessInPlayerSwitch;
    /**
     * No comment provided
     *
     * Hash: 0x267C78C60E806B9A | Since: 323
     */
    function allowRemoteAttachmentModification(entity, toggle) {
        NetworkAllowRemoteAttachmentModification(entity, toggle);
    }
    network.allowRemoteAttachmentModification = allowRemoteAttachmentModification;
    /**
     * No comment provided
     *
     * Hash: 0x144DA052257AE7D8 | Since: 1103
     */
    function allowRemoteSyncedSceneLocalPlayerRequests() {
        Citizen.invokeNative('0x144DA052257AE7D8', undefined);
    }
    network.allowRemoteSyncedSceneLocalPlayerRequests = allowRemoteSyncedSceneLocalPlayerRequests;
    /**
     * No comment provided
     *
     * Hash: 0x15337C7C268A27B2 | Since: 323
     */
    function amIBlockedByGamer() {
        return NetworkAmIBlockedByGamer();
    }
    network.amIBlockedByGamer = amIBlockedByGamer;
    /**
     * No comment provided
     *
     * Hash: 0x87F395D957D4353D | Since: 323
     */
    function amIBlockedByPlayer(player) {
        return NetworkAmIBlockedByPlayer(player);
    }
    network.amIBlockedByPlayer = amIBlockedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xDF02A2C93F1F26DA | Since: 323
     */
    function amIMutedByGamer() {
        return NetworkAmIMutedByGamer();
    }
    network.amIMutedByGamer = amIMutedByGamer;
    /**
     * No comment provided
     *
     * Hash: 0x9D6981DFC91A8604 | Since: 323
     */
    function amIMutedByPlayer(player) {
        return NetworkAmIMutedByPlayer(player);
    }
    network.amIMutedByPlayer = amIMutedByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x99B72C7ABDE5C910 | Since: 323
     */
    function applyCachedPlayerHeadBlendData(ped, player) {
        return NetworkApplyCachedPlayerHeadBlendData(ped, player);
    }
    network.applyCachedPlayerHeadBlendData = applyCachedPlayerHeadBlendData;
    /**
     * No comment provided
     *
     * Hash: 0xE66C690248F11150 | Since: 323
     */
    function applyPedScarData(ped) {
        NetworkApplyPedScarData(ped, 0);
    }
    network.applyPedScarData = applyPedScarData;
    /**
     * No comment provided
     *
     * Hash: 0x521638ADA1BA0D18 | Since: 323
     */
    function applyTransitionParameter() {
        NetworkApplyTransitionParameter(0, 0);
    }
    network.applyTransitionParameter = applyTransitionParameter;
    /**
     * No comment provided
     *
     * Hash: 0xEBEFC2E77084F599 | Since: 323
     */
    function applyTransitionParameterString(_string) {
        NetworkApplyTransitionParameterString(0, _string, false);
    }
    network.applyTransitionParameterString = applyTransitionParameterString;
    /**
     * No comment provided
     *
     * Hash: 0xDBD2056652689917 | Since: 323
     */
    function applyVoiceProximityOverride(pos) {
        NetworkApplyVoiceProximityOverride(pos.x, pos.y, pos.z);
    }
    network.applyVoiceProximityOverride = applyVoiceProximityOverride;
    /**
     * No comment provided
     *
     * Hash: 0x57DBA049E110F217 | Since: 323
     */
    function areHandlesTheSame() {
        return NetworkAreHandlesTheSame();
    }
    network.areHandlesTheSame = areHandlesTheSame;
    /**
     * No comment provided
     *
     * Hash: 0x9DE986FC9A87C474 | Since: 323
     */
    function arePlayersInSameTutorialSession(player, index) {
        return NetworkIsPlayerEqualToIndex(player, index);
    }
    network.arePlayersInSameTutorialSession = arePlayersInSameTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0xBA9775570DB788CF | Since: 323
     */
    function areSocialClubPoliciesCurrent() {
        return NetworkAreSocialClubPoliciesCurrent();
    }
    network.areSocialClubPoliciesCurrent = areSocialClubPoliciesCurrent;
    /**
     * No comment provided
     *
     * Hash: 0x2615AA2A695930C1 | Since: 323
     */
    function areTransitionDetailsValid() {
        return NetworkAreTransitionDetailsValid(undefined);
    }
    network.areTransitionDetailsValid = areTransitionDetailsValid;
    /**
     * No comment provided
     *
     * Hash: 0x478DCBD2A98B705A | Since: 323
     */
    function attachSynchronisedSceneToEntity(netScene, entity, bone) {
        NetworkAttachSynchronisedSceneToEntity(netScene, entity, bone);
    }
    network.attachSynchronisedSceneToEntity = attachSynchronisedSceneToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x95914459A87EBA28 | Since: 323
     */
    function bail() {
        NetworkBail(0, 0, 0);
    }
    network.bail = bail;
    /**
     * No comment provided
     *
     * Hash: 0xEAA572036990CD1B | Since: 323
     */
    function bailTransition() {
        NetworkBailTransition(0, 0, 0);
    }
    network.bailTransition = bailTransition;
    /**
     * No comment provided
     *
     * Hash: 0x34F9E9049454A7A0 | Since: 323
     */
    function blockInvites(toggle) {
        NetworkBlockInvites(toggle);
    }
    network.blockInvites = blockInvites;
    /**
     * No comment provided
     *
     * Hash: 0xCFEB8AF24FC1D0BB | Since: 323
     */
    function blockJoinQueueInvites(toggle) {
        NetworkBlockJoinQueueInvites(toggle);
    }
    network.blockJoinQueueInvites = blockJoinQueueInvites;
    /**
     * No comment provided
     *
     * Hash: 0xFEA7A352DDB34D52 | Since: 2545
     */
    function blockProxyMigrationBetweenTutorialSessions() {
        Citizen.invokeNative('0xFEA7A352DDB34D52', undefined);
    }
    network.blockProxyMigrationBetweenTutorialSessions = blockProxyMigrationBetweenTutorialSessions;
    /**
     * No comment provided
     *
     * Hash: 0xBD0BE0BFC927EAC1 | Since: 323
     */
    function cacheLocalPlayerHeadBlendData() {
        NetworkCacheLocalPlayerHeadBlendData();
    }
    network.cacheLocalPlayerHeadBlendData = cacheLocalPlayerHeadBlendData;
    /**
     * No comment provided
     *
     * Hash: 0xFB8F2A6F3DF08CBE | Since: 323
     */
    function cancelRespawnSearch() {
        NetworkCancelRespawnSearch();
    }
    network.cancelRespawnSearch = cancelRespawnSearch;
    /**
     * No comment provided
     *
     * Hash: 0x023782EFC70585EE | Since: 2699
     */
    function cancelTransitionMatchmaking() {
        NetworkBailTransitionQuickmatch();
    }
    network.cancelTransitionMatchmaking = cancelTransitionMatchmaking;
    /**
     * 11 - Need to download tunables.
     * 12 - Need to download background script.
     *
     * Returns 1 if the multiplayer is loaded, otherwhise 0.
     *
     * Hash: 0xAF50DA1A3F8B1BA4 | Since: 323
     */
    function canAccessMultiplayer() {
        return NetworkCanAccessMultiplayer();
    }
    network.canAccessMultiplayer = canAccessMultiplayer;
    /**
     * No comment provided
     *
     * Hash: 0x580CE4438479CC61 | Since: 323
     */
    function canBail() {
        return NetworkCanBail();
    }
    network.canBail = canBail;
    /**
     * No comment provided
     *
     * Hash: 0x8F5D1AD832AEB06C | Since: 323
     */
    function canCommunicateWithGamer() {
        return NetworkCanCommunicateWithGamer2();
    }
    network.canCommunicateWithGamer = canCommunicateWithGamer;
    /**
     * No comment provided
     *
     * Hash: 0x7E782A910C362C25 | Since: 323
     */
    function canEnterMultiplayer() {
        return NetworkCanEnterMultiplayer();
    }
    network.canEnterMultiplayer = canEnterMultiplayer;
    /**
     * No comment provided
     *
     * Hash: 0x135F9B7B7ADD2185 | Since: 323
     */
    function canGamerPlayMultiplayerWithMe() {
        return NetworkCanGamerPlayMultiplayerWithMe();
    }
    network.canGamerPlayMultiplayerWithMe = canGamerPlayMultiplayerWithMe;
    /**
     * No comment provided
     *
     * Hash: 0x07DD29D5E22763F1 | Since: 323
     */
    function canPlayMultiplayerWithGamer() {
        return NetworkCanPlayMultiplayerWithGamer();
    }
    network.canPlayMultiplayerWithGamer = canPlayMultiplayerWithGamer;
    /**
     * No comment provided
     *
     * Hash: 0x2BF66D2E7414F686 | Since: 323
     */
    function canQueueForPreviousSessionJoin() {
        return Citizen.invokeNative('0x2BF66D2E7414F686');
    }
    network.canQueueForPreviousSessionJoin = canQueueForPreviousSessionJoin;
    /**
     * No comment provided
     *
     * Hash: 0x421E34C55F125964 | Since: 2612
     */
    function canReceiveLocalInvite() {
        return Citizen.invokeNative('0x421E34C55F125964');
    }
    network.canReceiveLocalInvite = canReceiveLocalInvite;
    /**
     * No comment provided
     *
     * Hash: 0x021ABCBD98EC4320 | Since: 2612
     */
    function canSendLocalInvite() {
        return Citizen.invokeNative('0x021ABCBD98EC4320');
    }
    network.canSendLocalInvite = canSendLocalInvite;
    /**
     * No comment provided
     *
     * Hash: 0x4EEBC3694E49C572 | Since: 323
     */
    function canSessionEnd() {
        return NetworkCanSessionEnd();
    }
    network.canSessionEnd = canSessionEnd;
    /**
     * No comment provided
     *
     * Hash: 0xC927EC229934AF60 | Since: 323
     */
    function canSetWaypoint() {
        return NetworkCanSetWaypoint();
    }
    network.canSetWaypoint = canSetWaypoint;
    /**
     * No comment provided
     *
     * Hash: 0xA150A4F065806B1F | Since: 944
     */
    function canTextChatWithGamer() {
        return NetworkCanCommunicateWithGamer();
    }
    network.canTextChatWithGamer = canTextChatWithGamer;
    /**
     * No comment provided
     *
     * Hash: 0xB57A49545BA53CE7 | Since: 323
     */
    function canViewGamerUserContent() {
        return NetworkCanViewGamerUserContent();
    }
    network.canViewGamerUserContent = canViewGamerUserContent;
    /**
     * No comment provided
     *
     * Hash: 0xEEEDA5E6D7080987 | Since: 323
     */
    function changeTransitionSlots() {
        NetworkChangeTransitionSlots(undefined, false);
    }
    network.changeTransitionSlots = changeTransitionSlots;
    /**
     * No comment provided
     *
     * Hash: 0x6FA9825D0B5A721B | Since: 3570
     */
    function checkCanAccessAndAlert() {
        return Citizen.invokeNative('0x6FA9825D0B5A721B');
    }
    network.checkCanAccessAndAlert = checkCanAccessAndAlert;
    /**
     * No comment provided
     *
     * Hash: 0x83F28CE49FBBFFBA | Since: 323
     */
    function checkCommunicationPrivileges() {
        return NetworkCheckCommunicationPrivileges(0, 0, false);
    }
    network.checkCommunicationPrivileges = checkCommunicationPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0x4AD490AE1536933B | Since: 372
     */
    function checkDataManagerForHandle() {
        return Citizen.invokeNative('0x4AD490AE1536933B', undefined);
    }
    network.checkDataManagerForHandle = checkDataManagerForHandle;
    /**
     * No comment provided
     *
     * Hash: 0x44B37CDCAE765AAE | Since: 323
     */
    function checkDataManagerSucceededForHandle() {
        return NetworkCheckDataManagerSucceededForHandle(0);
    }
    network.checkDataManagerSucceededForHandle = checkDataManagerSucceededForHandle;
    /**
     * No comment provided
     *
     * Hash: 0x78321BEA235FD8CD | Since: 323
     */
    function checkOnlinePrivileges() {
        return Citizen.invokeNative('0x78321BEA235FD8CD', undefined, false);
    }
    network.checkOnlinePrivileges = checkOnlinePrivileges;
    /**
     * No comment provided
     *
     * Hash: 0x0CF6CC51AA18F0F8 | Since: 1180
     */
    function checkPrivileges() {
        return Citizen.invokeNative('0x0CF6CC51AA18F0F8', undefined, undefined, undefined);
    }
    network.checkPrivileges = checkPrivileges;
    /**
     * Returns true if profile setting 901 is set to true and sets it to false.
     *
     * Hash: 0x60EDD13EB3AC1FF3 | Since: 323
     */
    function checkRosLinkWentdownNotNet() {
        return Citizen.invokeNative('0x60EDD13EB3AC1FF3');
    }
    network.checkRosLinkWentdownNotNet = checkRosLinkWentdownNotNet;
    /**
     * No comment provided
     *
     * Hash: 0x07EAB372C8841D99 | Since: 1011
     */
    function checkTextCommunicationPrivileges() {
        return Citizen.invokeNative('0x07EAB372C8841D99', undefined, undefined, undefined);
    }
    network.checkTextCommunicationPrivileges = checkTextCommunicationPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0x595F028698072DD9 | Since: 323
     */
    function checkUserContentPrivileges() {
        return NetworkCheckUserContentPrivileges(0, 0, false);
    }
    network.checkUserContentPrivileges = checkUserContentPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0xB3F64A6A91432477 | Since: 323
     */
    function clanAnyDownloadMembershipPending() {
        return NetworkClanAnyDownloadMembershipPending();
    }
    network.clanAnyDownloadMembershipPending = clanAnyDownloadMembershipPending;
    /**
     * No comment provided
     *
     * Hash: 0x2B51EDBEFC301339 | Since: 323
     */
    function clanCrewinfoGetCrewranktitle() {
        return Citizen.invokeNative('0x2B51EDBEFC301339', 0, undefined);
    }
    network.clanCrewinfoGetCrewranktitle = clanCrewinfoGetCrewranktitle;
    /**
     * Only documented...
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x729E3401F0430686 | Since: 323
     */
    function clanCrewinfoGetStringValue(animDict, animName) {
        return NetworkClanAnimation(animDict, animName);
    }
    network.clanCrewinfoGetStringValue = clanCrewinfoGetStringValue;
    /**
     * No comment provided
     *
     * Hash: 0xA989044E70010ABE | Since: 323
     */
    function clanDownloadMembership() {
        return NetworkClanDownloadMembership();
    }
    network.clanDownloadMembership = clanDownloadMembership;
    /**
     * No comment provided
     *
     * Hash: 0x5B9E023DC6EBEDC0 | Since: 323
     */
    function clanDownloadMembershipPending() {
        return NetworkClanDownloadMembershipPending();
    }
    network.clanDownloadMembershipPending = clanDownloadMembershipPending;
    /**
     * No comment provided
     *
     * Hash: 0x5835D9CD92E83184 | Since: 323
     */
    function clanGetEmblemTxdName() {
        return NetworkClanGetEmblemTxdName();
    }
    network.clanGetEmblemTxdName = clanGetEmblemTxdName;
    /**
     * No comment provided
     *
     * Hash: 0x1F471B79ACC90BEF | Since: 323
     */
    function clanGetLocalMembershipsCount() {
        return NetworkClanGetLocalMembershipsCount();
    }
    network.clanGetLocalMembershipsCount = clanGetLocalMembershipsCount;
    /**
     * No comment provided
     *
     * Hash: 0xC8BC2011F67B3411 | Since: 323
     */
    function clanGetMembership() {
        return NetworkClanGetMembership(0);
    }
    network.clanGetMembership = clanGetMembership;
    /**
     * No comment provided
     *
     * Hash: 0xAAB11F6C4ADBC2C1 | Since: 323
     */
    function clanGetMembershipCount() {
        return NetworkClanGetMembershipCount();
    }
    network.clanGetMembershipCount = clanGetMembershipCount;
    /**
     * No comment provided
     *
     * Hash: 0x48DE78AF2C8885B8 | Since: 323
     */
    function clanGetMembershipDesc() {
        return NetworkClanGetMembershipDesc(0);
    }
    network.clanGetMembershipDesc = clanGetMembershipDesc;
    /**
     * No comment provided
     *
     * Hash: 0x48A59CF88D43DF0E | Since: 323
     */
    function clanGetMembershipValid() {
        return NetworkClanGetMembershipValid(undefined);
    }
    network.clanGetMembershipValid = clanGetMembershipValid;
    /**
     * bufferSize is 35 in the scripts.
     *
     * Hash: 0xF45352426FF3A4F0 | Since: 323
     */
    function clanGetUiFormattedTag(bufferSize) {
        return NetworkClanGetUiFormattedTag(bufferSize);
    }
    network.clanGetUiFormattedTag = clanGetUiFormattedTag;
    /**
     * No comment provided
     *
     * Hash: 0xC32EA7A2F6CA7557 | Since: 323
     */
    function clanHasCrewinfoMetadataBeenReceived() {
        return Citizen.invokeNative('0xC32EA7A2F6CA7557');
    }
    network.clanHasCrewinfoMetadataBeenReceived = clanHasCrewinfoMetadataBeenReceived;
    /**
     * No comment provided
     *
     * Hash: 0xA134777FF7F33331 | Since: 323
     */
    function clanIsEmblemReady() {
        return NetworkClanIsEmblemReady(undefined);
    }
    network.clanIsEmblemReady = clanIsEmblemReady;
    /**
     * bufferSize is 35 in the scripts.
     *
     * Hash: 0x7543BB439F63792B | Since: 323
     */
    function clanIsRockstarClan(bufferSize) {
        return NetworkClanIsRockstarClan(bufferSize);
    }
    network.clanIsRockstarClan = clanIsRockstarClan;
    /**
     * No comment provided
     *
     * Hash: 0x9FAAA4F4FC71F87F | Since: 323
     */
    function clanJoin(clanDesc) {
        return NetworkClanJoin(clanDesc);
    }
    network.clanJoin = clanJoin;
    /**
     * bufferSize is 35 in the scripts.
     *
     * `bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.`
     *
     * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
     *
     * https://pastebin.com/cSZniHak
     *
     * Hash: 0xEEE6EACBE8874FBA | Since: 323
     */
    function clanPlayerGetDesc(bufferSize) {
        return NetworkClanPlayerGetDesc(bufferSize);
    }
    network.clanPlayerGetDesc = clanPlayerGetDesc;
    /**
     * No comment provided
     *
     * Hash: 0xB124B57F571D8F18 | Since: 323
     */
    function clanPlayerIsActive() {
        return NetworkClanPlayerIsActive();
    }
    network.clanPlayerIsActive = clanPlayerIsActive;
    /**
     * No comment provided
     *
     * Hash: 0x113E6E3E50E286B0 | Since: 323
     */
    function clanReleaseEmblem() {
        NetworkClanReleaseEmblem(undefined);
    }
    network.clanReleaseEmblem = clanReleaseEmblem;
    /**
     * No comment provided
     *
     * Hash: 0xBB6E6FEE99D866B2 | Since: 323
     */
    function clanRemoteMembershipsAreInCache() {
        return NetworkClanRemoteMembershipsAreInCache();
    }
    network.clanRemoteMembershipsAreInCache = clanRemoteMembershipsAreInCache;
    /**
     * No comment provided
     *
     * Hash: 0x13518FF1C6B28938 | Since: 323
     */
    function clanRequestEmblem() {
        return NetworkClanRequestEmblem(undefined);
    }
    network.clanRequestEmblem = clanRequestEmblem;
    /**
     * No comment provided
     *
     * Hash: 0x579CCED0265D4896 | Since: 323
     */
    function clanServiceIsValid() {
        return NetworkClanServiceIsValid();
    }
    network.clanServiceIsValid = clanServiceIsValid;
    /**
     * No comment provided
     *
     * Hash: 0xD972DF67326F966E | Since: 323
     */
    function clearClockTimeOverride() {
        NetworkClearClockTimeOverride();
    }
    network.clearClockTimeOverride = clearClockTimeOverride;
    /**
     * No comment provided
     *
     * Hash: 0x058F43EC59A8631A | Since: 323
     */
    function clearFollowers() {
        NetworkClearFollowers();
    }
    network.clearFollowers = clearFollowers;
    /**
     * No comment provided
     *
     * Hash: 0x439BFDE3CD0610F6 | Since: 323
     */
    function clearFollowInvite() {
        return NetworkClearFollowInvite();
    }
    network.clearFollowInvite = clearFollowInvite;
    /**
     * No comment provided
     *
     * Hash: 0x6D14CCEE1B40381A | Since: 323
     */
    function clearFoundGamers() {
        NetworkClearFoundGamers();
    }
    network.clearFoundGamers = clearFoundGamers;
    /**
     * No comment provided
     *
     * Hash: 0x86E0660E4F5C956D | Since: 323
     */
    function clearGetGamerStatus() {
        NetworkClearGetGamerStatus();
    }
    network.clearGetGamerStatus = clearGetGamerStatus;
    /**
     * No comment provided
     *
     * Hash: 0x1888694923EF4591 | Since: 393
     */
    function clearGroupActivity() {
        NetworkClearGroupActivity();
    }
    network.clearGroupActivity = clearGroupActivity;
    /**
     * No comment provided
     *
     * Hash: 0x03B2F03A53D85E41 | Since: 2545
     */
    function clearInvalidObjectModels() {
        Citizen.invokeNative('0x03B2F03A53D85E41');
    }
    network.clearInvalidObjectModels = clearInvalidObjectModels;
    /**
     * No comment provided
     *
     * Hash: 0x140E6A44870A11CE | Since: 323
     */
    function clearOfflineInvitePending() {
        Citizen.invokeNative('0x140E6A44870A11CE');
    }
    network.clearOfflineInvitePending = clearOfflineInvitePending;
    /**
     * No comment provided
     *
     * Hash: 0x6CE50E47F5543D0C | Since: 573
     */
    function clearQueuedJoinRequest() {
        Citizen.invokeNative('0x6CE50E47F5543D0C');
    }
    network.clearQueuedJoinRequest = clearQueuedJoinRequest;
    /**
     * No comment provided
     *
     * Hash: 0xFB3272229A82C759 | Since: 323
     */
    function clearTransitionCreatorHandle() {
        NetworkClearTransitionCreatorHandle();
    }
    network.clearTransitionCreatorHandle = clearTransitionCreatorHandle;
    /**
     * No comment provided
     *
     * Hash: 0xE036A705F989E049 | Since: 323
     */
    function clearVoiceChannel() {
        NetworkClearVoiceChannel();
    }
    network.clearVoiceChannel = clearVoiceChannel;
    /**
     * No comment provided
     *
     * Hash: 0xF03755696450470C | Since: 323
     */
    function clearVoiceProximityOverride() {
        NetworkClearVoiceProximityOverride();
    }
    network.clearVoiceProximityOverride = clearVoiceProximityOverride;
    /**
     * No comment provided
     *
     * Hash: 0x43F4DBA69710E01E | Since: 323
     */
    function closeTransitionMatchmaking() {
        NetworkCloseTransitionMatchmaking();
    }
    network.closeTransitionMatchmaking = closeTransitionMatchmaking;
    /**
     * No comment provided
     *
     * Hash: 0x1632BE0AC1E62876 | Since: 877
     */
    function concealEntity(entity, toggle) {
        NetworkConcealEntity(entity, toggle);
    }
    network.concealEntity = concealEntity;
    /**
     * No comment provided
     *
     * Hash: 0xBBDF066252829606 | Since: 323
     */
    function concealPlayer(player, toggle) {
        NetworkConcealPlayer(player, toggle, false);
    }
    network.concealPlayer = concealPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x7CD6BC4C2BBDD526 | Since: 323
     */
    function createSynchronisedScene(pos, rot, rotationOrder, useOcclusionPortal, looped, animTime) {
        return NetworkCreateSynchronisedScene(pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, rotationOrder, useOcclusionPortal, looped, 0, animTime, 0);
    }
    network.createSynchronisedScene = createSynchronisedScene;
    /**
     * No comment provided
     *
     * Hash: 0xF9B83B77929D8863 | Since: 323
     */
    function didFindGamersSucceed() {
        return NetworkDidFindGamersSucceed();
    }
    network.didFindGamersSucceed = didFindGamersSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x5AE17C6B0134B7F1 | Since: 323
     */
    function didGetGamerStatusSucceed() {
        return NetworkDidGetGamerStatusSucceed();
    }
    network.didGetGamerStatusSucceed = didGetGamerStatusSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x9DD368BF06983221 | Since: 323
     */
    function disableInvincibleFlashing(player, toggle) {
        NetworkDisableInvincibleFlashing(player, toggle);
    }
    network.disableInvincibleFlashing = disableInvincibleFlashing;
    /**
     * No comment provided
     *
     * Hash: 0xC505036A35AFD01B | Since: 323
     */
    function disableLeaveRemotePedBehind(toggle) {
        NetworkDisableLeaveRemotePedBehind(toggle);
    }
    network.disableLeaveRemotePedBehind = disableLeaveRemotePedBehind;
    /**
     * No comment provided
     *
     * Hash: 0x407091CF6037118E | Since: 323
     */
    function disableProximityMigration(netID) {
        NetworkDisableProximityMigration(netID);
    }
    network.disableProximityMigration = disableProximityMigration;
    /**
     * No comment provided
     *
     * Hash: 0x236905C700FDB54D | Since: 2612
     */
    function disableRealtimeMultiplayer() {
        Citizen.invokeNative('0x236905C700FDB54D');
    }
    network.disableRealtimeMultiplayer = disableRealtimeMultiplayer;
    /**
     * No comment provided
     *
     * Hash: 0xCA575C391FEA25CC | Since: 323
     */
    function disableVoiceBandwidthRestriction(player) {
        Citizen.invokeNative('0xCA575C391FEA25CC', player);
    }
    network.disableVoiceBandwidthRestriction = disableVoiceBandwidthRestriction;
    /**
     * Hardcoded to return -1.
     *
     * Hash: 0xD66C9E72B3CC4982 | Since: 323
     */
    function displaynamesFromHandlesStart() {
        return NetworkDisplaynamesFromHandlesStart(undefined);
    }
    network.displaynamesFromHandlesStart = displaynamesFromHandlesStart;
    /**
     * No comment provided
     *
     * Hash: 0x18A47D074708FD68 | Since: 323
     */
    function doesEntityExistWithNetworkId(netId) {
        return NetworkDoesEntityExistWithNetworkId(netId);
    }
    network.doesEntityExistWithNetworkId = doesEntityExistWithNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x38CE16C96BD11344 | Since: 323
     */
    function doesNetworkIdExist(netId) {
        return NetworkDoesNetworkIdExist(netId);
    }
    network.doesNetworkIdExist = doesNetworkIdExist;
    /**
     * No comment provided
     *
     * Hash: 0x85E5F8B9B898B20A | Since: 323
     */
    function doesTunableExist(tunableContext, tunableName) {
        return NetworkDoesTunableExist(tunableContext, tunableName);
    }
    network.doesTunableExist = doesTunableExist;
    /**
     * No comment provided
     *
     * Hash: 0xE4E53E1419D81127 | Since: 323
     */
    function doesTunableExistHash(tunableContext, tunableName) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkDoesTunableExistHash(tunableContext, tunableName);
    }
    network.doesTunableExistHash = doesTunableExistHash;
    /**
     * No comment provided
     *
     * Hash: 0x71FB0EBCD4915D56 | Since: 323
     */
    function doTransitionQuickmatch() {
        return NetworkDoTransitionQuickmatch(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    network.doTransitionQuickmatch = doTransitionQuickmatch;
    /**
     * No comment provided
     *
     * Hash: 0xA091A5E44F0072E5 | Since: 323
     */
    function doTransitionQuickmatchAsync() {
        return NetworkDoTransitionQuickmatchAsync(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    network.doTransitionQuickmatchAsync = doTransitionQuickmatchAsync;
    /**
     * No comment provided
     *
     * Hash: 0x9C4AB58491FDC98A | Since: 323
     */
    function doTransitionQuickmatchWithGroup() {
        return NetworkDoTransitionQuickmatchWithGroup(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    network.doTransitionQuickmatchWithGroup = doTransitionQuickmatchWithGroup;
    /**
     * p2 is true 3/4 of the occurrences I found.
     * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
     *
     * Hash: 0x3AAD8B2FCA1E289F | Since: 323
     */
    function doTransitionToFreemode(players) {
        return NetworkDoTransitionToFreemode(undefined, false, players, false);
    }
    network.doTransitionToFreemode = doTransitionToFreemode;
    /**
     * No comment provided
     *
     * Hash: 0x3E9BB38102A589B0 | Since: 323
     */
    function doTransitionToGame(maxPlayers) {
        return NetworkDoTransitionToGame(false, maxPlayers);
    }
    network.doTransitionToGame = doTransitionToGame;
    /**
     * No comment provided
     *
     * Hash: 0x9E80A5BA8109F974 | Since: 323
     */
    function doTransitionToNewFreemode(players) {
        return NetworkDoTransitionToNewFreemode(undefined, players, false, false, false);
    }
    network.doTransitionToNewFreemode = doTransitionToNewFreemode;
    /**
     * No comment provided
     *
     * Hash: 0x4665F51EFED00034 | Since: 323
     */
    function doTransitionToNewGame(maxPlayers) {
        return NetworkDoTransitionToNewGame(false, maxPlayers, false);
    }
    network.doTransitionToNewGame = doTransitionToNewGame;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xAEDF1BC1C133D6E3 | Since: 323
     */
    function dumpNetIfConfig() {
        Citizen.invokeNative('0xAEDF1BC1C133D6E3');
    }
    network.dumpNetIfConfig = dumpNetIfConfig;
    /**
     * No comment provided
     *
     * Hash: 0xE6717E652B8C8D8A | Since: 617
     */
    function enableExtraVehicleOrientationBlendChecks(netId, toggle) {
        Citizen.invokeNative('0xE6717E652B8C8D8A', netId, toggle);
    }
    network.enableExtraVehicleOrientationBlendChecks = enableExtraVehicleOrientationBlendChecks;
    /**
     * No comment provided
     *
     * Hash: 0x5E3AA4CA2B6FB0EE | Since: 323
     */
    function enableVoiceBandwidthRestriction(player) {
        Citizen.invokeNative('0x5E3AA4CA2B6FB0EE', player);
    }
    network.enableVoiceBandwidthRestriction = enableVoiceBandwidthRestriction;
    /**
     * No comment provided
     *
     * Hash: 0xD0AFAFF5A51D72F7 | Since: 323
     */
    function endTutorialSession() {
        NetworkEndTutorialSession();
    }
    network.endTutorialSession = endTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0xE64A3CA08DFA37A9 | Since: 323
     */
    function entityAreaDoesExist(areaHandle) {
        return NetworkEntityAreaDoesExist(areaHandle);
    }
    network.entityAreaDoesExist = entityAreaDoesExist;
    /**
     * No comment provided
     *
     * Hash: 0x4DF7CFFF471A7FB1 | Since: 323
     */
    function entityAreaHaveAllReplied(areaHandle) {
        return Citizen.invokeNative('0x4DF7CFFF471A7FB1', areaHandle);
    }
    network.entityAreaHaveAllReplied = entityAreaHaveAllReplied;
    /**
     * No comment provided
     *
     * Hash: 0x4A2D4E8BF4265B0F | Since: 323
     */
    function entityAreaIsOccupied(areaHandle) {
        return NetworkEntityAreaIsOccupied(areaHandle);
    }
    network.entityAreaIsOccupied = entityAreaIsOccupied;
    /**
     * No comment provided
     *
     * Hash: 0x815F18AD865F057F | Since: 463
     */
    function entityGetObjectId(entity) {
        return NetworkGetEntityNetScriptId(entity);
    }
    network.entityGetObjectId = entityGetObjectId;
    /**
     * No comment provided
     *
     * Hash: 0x95BAF97C82464629 | Since: 1604
     */
    function entityUseHighPrecisionRotation(netId, toggle) {
        Citizen.invokeNative('0x95BAF97C82464629', netId, toggle);
    }
    network.entityUseHighPrecisionRotation = entityUseHighPrecisionRotation;
    /**
     * No comment provided
     *
     * Hash: 0x2A5E0621DD815A9A | Since: 463
     */
    function explodeHeli(vehicle, isAudible, isInvisible, netId) {
        NetworkExplodeHeli(vehicle, isAudible, isInvisible, netId);
    }
    network.explodeHeli = explodeHeli;
    /**
     * In the console script dumps, this is only referenced once.
     * `NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);`
     *
     * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
     * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
     *
     * am_plane_takedown.c
     * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
     *
     * armenian2.c
     * network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
     *
     * fm_horde_controler.c
     * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
     *
     * fm_mission_controller.c, has 6 hits so not going to list them.
     *
     * Side note, setting the first parameter to 0 seems to mute sound or so?
     *
     * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
     *
     *
     * Hash: 0x301A42153C9AD707 | Since: 323
     */
    function explodeVehicle(vehicle, isAudible, isInvisible, netId) {
        return NetworkExplodeVehicle(vehicle, isAudible, isInvisible, netId);
    }
    network.explodeVehicle = explodeVehicle;
    /**
     * state - 0 does 5 fades
     * state - 1 does 6 fades
     *
     * p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
     *
     * Hash: 0x1F4ED342ACEFE62D | Since: 323
     */
    function fadeInEntity(entity, state) {
        NetworkFadeInEntity(entity, state, undefined);
    }
    network.fadeInEntity = fadeInEntity;
    /**
     * normal - transition like when your coming out of LSC
     * slow - transition like when you walk into a mission
     *
     *
     * Hash: 0xDE564951F95E09ED | Since: 323
     */
    function fadeOutEntity(entity, normal, slow) {
        NetworkFadeOutEntity(entity, normal, slow);
    }
    network.fadeOutEntity = fadeOutEntity;
    /**
     * No comment provided
     *
     * Hash: 0xE532D6811B3A4D2A | Since: 323
     */
    function findGamersInCrew(crewId) {
        return NetworkFindGamersInCrew(crewId);
    }
    network.findGamersInCrew = findGamersInCrew;
    /**
     * p0 is always 0. p1 is pointing to a global.
     *
     * Hash: 0xFB1F9381E80FA13F | Since: 323
     */
    function findLargestBunchOfPlayers() {
        return Citizen.invokeNative('0xFB1F9381E80FA13F', 0, undefined);
    }
    network.findLargestBunchOfPlayers = findLargestBunchOfPlayers;
    /**
     * Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
     * There can be up to 15 attributes, they are as follows:
     *
     * 0 = Races
     * 1 = Parachuting
     * 2 = Horde
     * 3 = Darts
     * 4 = Arm Wrestling
     * 5 = Tennis
     * 6 = Golf
     * 7 = Shooting Range
     * 8 = Deathmatch
     * 9 = MPPLY_MCMWIN/MPPLY_CRMISSION
     *
     * Hash: 0xF7B2CFDE5C9F700D | Since: 323
     */
    function findMatchedGamers(attribute, fallbackLimit, lowerLimit, upperLimit) {
        return NetworkFindMatchedGamers(attribute, fallbackLimit, lowerLimit, upperLimit);
    }
    network.findMatchedGamers = findMatchedGamers;
    /**
     * No comment provided
     *
     * Hash: 0x64F62AFB081E260D | Since: 323
     */
    function finishBroadcastingData() {
        NetworkFinishBroadcastingData();
    }
    network.finishBroadcastingData = finishBroadcastingData;
    /**
     * NETWORK_F[I-O]
     *
     * Hash: 0xB7C7F6AD6424304B | Since: 323
     */
    function forceLocalPlayerScarSync() {
        NetworkUpdatePlayerScars();
    }
    network.forceLocalPlayerScarSync = forceLocalPlayerScarSync;
    /**
     * No comment provided
     *
     * Hash: 0xC9B43A33D09CADA7 | Since: 323
     */
    function forceLocalUseOfSyncedSceneCamera(netScene) {
        NetworkForceLocalUseOfSyncedSceneCamera(netScene);
    }
    network.forceLocalUseOfSyncedSceneCamera = forceLocalUseOfSyncedSceneCamera;
    /**
     * No comment provided
     *
     * Hash: 0xB071E27958EF4CF0 | Since: 323
     */
    function gamertagFromHandlePending() {
        return NetworkGamertagFromHandlePending();
    }
    network.gamertagFromHandlePending = gamertagFromHandlePending;
    /**
     * No comment provided
     *
     * Hash: 0x9F0C0A981D73FA56 | Since: 323
     */
    function gamertagFromHandleStart() {
        return NetworkGamertagFromHandleStart();
    }
    network.gamertagFromHandleStart = gamertagFromHandleStart;
    /**
     * No comment provided
     *
     * Hash: 0xFD00798DBA7523DD | Since: 323
     */
    function gamertagFromHandleSucceeded() {
        return NetworkGamertagFromHandleSucceeded();
    }
    network.gamertagFromHandleSucceeded = gamertagFromHandleSucceeded;
    /**
     * No comment provided
     *
     * Hash: 0xF2FD55CB574BCC55 | Since: 323
     */
    function gamerHasHeadset() {
        return NetworkGamerHasHeadset();
    }
    network.gamerHasHeadset = gamerHasHeadset;
    /**
     * No comment provided
     *
     * Hash: 0x73E2B500410DA5A2 | Since: 323
     */
    function getActivityPlayerNum() {
        return NetworkGetActivityPlayerNum(false);
    }
    network.getActivityPlayerNum = getActivityPlayerNum;
    /**
     * No comment provided
     *
     * Hash: 0x9614B71F8ADB982B | Since: 323
     */
    function getAgeGroup() {
        return NetworkGetAgeGroup();
    }
    network.getAgeGroup = getAgeGroup;
    /**
     * No comment provided
     *
     * Hash: 0x4CACA84440FA26F6 | Since: 323
     */
    function getAssistedDamageOfEntity(player, entity) {
        return NetworkGetDestroyerOfEntity(player, entity);
    }
    network.getAssistedDamageOfEntity = getAssistedDamageOfEntity;
    /**
     * NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
     *
     * Hash: 0x83660B734994124D | Since: 463
     */
    function getAssistedKillOfEntity(player, entity) {
        return Citizen.invokeNative('0x83660B734994124D', player, entity);
    }
    network.getAssistedKillOfEntity = getAssistedKillOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0xD414BE129BB81B32 | Since: 323
     */
    function getAverageLatency(player) {
        return NetworkGetAverageLatencyForPlayer(player);
    }
    network.getAverageLatency = getAverageLatency;
    /**
     * No comment provided
     *
     * Hash: 0x350C23949E43686C | Since: 323
     */
    function getAveragePacketLoss(player) {
        return NetworkGetAveragePacketLossForPlayer(player);
    }
    network.getAveragePacketLoss = getAveragePacketLoss;
    /**
     * Same as NETWORK_GET_AVERAGE_LATENCY
     *
     * Hash: 0x0E3A041ED6AC2B45 | Since: 323
     */
    function getAveragePing(player) {
        return NetworkGetAverageLatencyForPlayer2(player);
    }
    network.getAveragePing = getAveragePing;
    /**
     * No comment provided
     *
     * Hash: 0x7DB53B37A2F211A0 | Since: 323
     */
    function getBoneIdOfFatalHit() {
        return Citizen.invokeNative('0x7DB53B37A2F211A0');
    }
    network.getBoneIdOfFatalHit = getBoneIdOfFatalHit;
    /**
     * Return the content modifier id (the tunables context if you want) of a specific content.
     *
     * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
     *
     * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
     *
     * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
     *
     *
     * Hash: 0x187382F8A3E0A6C3 | Since: 323
     */
    function getContentModifierListId(contentHash) {
        if (typeof contentHash === 'string')
            contentHash = misc.getHashKey(contentHash);
        return NetworkGetContentModifierListId(contentHash);
    }
    network.getContentModifierListId = getContentModifierListId;
    /**
     * No comment provided
     *
     * Hash: 0x74881E6BCAE2327C | Since: 323
     */
    function getCurrentlySelectedGamerHandleFromInviteMenu() {
        return NetworkGetCurrentlySelectedGamerHandleFromInviteMenu();
    }
    network.getCurrentlySelectedGamerHandleFromInviteMenu = getCurrentlySelectedGamerHandleFromInviteMenu;
    /**
     * No comment provided
     *
     * Hash: 0xC434133D9BA52777 | Since: 463
     */
    function getDestroyerOfEntity(entity) {
        return Citizen.invokeNative('0xC434133D9BA52777', entity);
    }
    network.getDestroyerOfEntity = getDestroyerOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0x7A1ADEEF01740A24 | Since: 323
     */
    function getDestroyerOfNetworkId(netId) {
        return NetworkGetDestroyerOfNetworkId(netId);
    }
    network.getDestroyerOfNetworkId = getDestroyerOfNetworkId;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x58CC181719256197 | Since: 323
     */
    function getDisplaynamesFromHandles() {
        return NetworkGetDisplaynamesFromHandles(undefined, undefined, undefined);
    }
    network.getDisplaynamesFromHandles = getDisplaynamesFromHandles;
    /**
     * No comment provided
     *
     * Hash: 0xCE4E5D9B0A4FF560 | Since: 323
     */
    function getEntityFromNetworkId(netId) {
        return NetworkGetEntityFromNetworkId(netId);
    }
    network.getEntityFromNetworkId = getEntityFromNetworkId;
    /**
     * I've had this return the player's ped handle sometimes, but also other random entities.
     * Whatever p0 is, it's at least not synced to other players.
     * At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
     * But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
     *
     * Returns an entity handle or -1, value changes based on p0's value.
     *
     * Hash: 0x37D5F739FD494675 | Since: 505
     */
    function getEntityFromObjectId() {
        return Citizen.invokeNative('0x37D5F739FD494675', undefined);
    }
    network.getEntityFromObjectId = getEntityFromObjectId;
    /**
     * No comment provided
     *
     * Hash: 0x0991549DE4D64762 | Since: 323
     */
    function getEntityIsLocal(entity) {
        return NetworkGetEntityIsLocal(entity);
    }
    network.getEntityIsLocal = getEntityIsLocal;
    /**
     * No comment provided
     *
     * Hash: 0xC7827959479DCC78 | Since: 323
     */
    function getEntityIsNetworked(entity) {
        return NetworkGetEntityIsNetworked(entity);
    }
    network.getEntityIsNetworked = getEntityIsNetworked;
    /**
     * No comment provided
     *
     * Hash: 0x42B2DAA6B596F5F8 | Since: 323
     */
    function getEntityKillerOfPlayer(player) {
        return NetworkGetEntityKillerOfPlayer(player);
    }
    network.getEntityKillerOfPlayer = getEntityKillerOfPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x9DCFF2AFB68B3476 | Since: 323
     */
    function getFoundGamer() {
        return NetworkGetFoundGamer(undefined);
    }
    network.getFoundGamer = getFoundGamer;
    /**
     * No comment provided
     *
     * Hash: 0x203F1CFD823B27A4 | Since: 323
     */
    function getFriendCount() {
        return NetworkGetFriendCount();
    }
    network.getFriendCount = getFriendCount;
    /**
     * No comment provided
     *
     * Hash: 0x4164F227D052E293 | Since: 323
     */
    function getFriendDisplayName(friendIndex) {
        return NetworkGetFriendNameFromIndex(friendIndex);
    }
    network.getFriendDisplayName = getFriendDisplayName;
    /**
     * No comment provided
     *
     * Hash: 0xE11EBBB2A783FE8B | Since: 323
     */
    function getFriendName(friendIndex) {
        return NetworkGetFriendName(friendIndex);
    }
    network.getFriendName = getFriendName;
    /**
     * No comment provided
     *
     * Hash: 0x426141162EBE5CDB | Since: 323
     */
    function getGamertagFromHandle() {
        return NetworkGetGamertagFromHandle();
    }
    network.getGamertagFromHandle = getGamertagFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0x2CC848A861D01493 | Since: 323
     */
    function getGamerStatusFromQueue() {
        return NetworkGetGamerStatusFromQueue();
    }
    network.getGamerStatusFromQueue = getGamerStatusFromQueue;
    /**
     * No comment provided
     *
     * Hash: 0x02A8BEC6FD9AF660 | Since: 323
     */
    function getGamerStatusResult() {
        return NetworkGetGamerStatusResult(undefined);
    }
    network.getGamerStatusResult = getGamerStatusResult;
    /**
     * No comment provided
     *
     * Hash: 0x4C9034162368E206 | Since: 2060
     */
    function getGameMode() {
        return Citizen.invokeNative('0x4C9034162368E206');
    }
    network.getGameMode = getGameMode;
    /**
     * No comment provided
     *
     * Hash: 0x6D03BFBD643B2A02 | Since: 323
     */
    function getGlobalMultiplayerClock() {
        return NetworkGetGlobalMultiplayerClock();
    }
    network.getGlobalMultiplayerClock = getGlobalMultiplayerClock;
    /**
     * No comment provided
     *
     * Hash: 0x52C1EADAF7B10302 | Since: 323
     */
    function getHighestReliableResendCount(player) {
        return NetworkGetOldestResendCountForPlayer(player);
    }
    network.getHighestReliableResendCount = getHighestReliableResendCount;
    /**
     * scriptName examples:
     * "freemode", "AM_CR_SecurityVan", ...
     *
     * Most of the time, these values are used:
     * instance_id = -1
     * position_hash = 0
     *
     * Hash: 0x1D6A14F1F9A736FC | Since: 323
     */
    function getHostOfScript(scriptName, instance_id, position_hash) {
        return NetworkGetHostOfScript(scriptName, instance_id, position_hash);
    }
    network.getHostOfScript = getHostOfScript;
    /**
     * No comment provided
     *
     * Hash: 0xC7B4D79B01FA7A5C | Since: 323
     */
    function getHostOfThisScript() {
        return NetworkGetHostOfThisScript();
    }
    network.getHostOfThisScript = getHostOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0x8251FB94DC4FDFC8 | Since: 2612
     */
    function getHostPlayerIndex() {
        return Citizen.invokeNative('0x8251FB94DC4FDFC8');
    }
    network.getHostPlayerIndex = getHostPlayerIndex;
    /**
     * No comment provided
     *
     * Hash: 0x638A3A81733086DB | Since: 323
     */
    function getInstanceIdOfThisScript() {
        return NetworkGetInstanceIdOfThisScript();
    }
    network.getInstanceIdOfThisScript = getInstanceIdOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0x3855FB5EB2C5E8B2 | Since: 505
     */
    function getInviteReplyStatus() {
        return Citizen.invokeNative('0x3855FB5EB2C5E8B2', undefined);
    }
    network.getInviteReplyStatus = getInviteReplyStatus;
    /**
     * No comment provided
     *
     * Hash: 0x2DA41ED6E1FCD7A5 | Since: 463
     */
    function getKillerOfPlayer(player) {
        return Citizen.invokeNative('0x2DA41ED6E1FCD7A5', player);
    }
    network.getKillerOfPlayer = getKillerOfPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x64D779659BC37B19 | Since: 393
     */
    function getLastEntityPosReceivedOverNetwork(entity) {
        return new Vector3(Citizen.invokeNative('0x64D779659BC37B19', entity));
    }
    network.getLastEntityPosReceivedOverNetwork = getLastEntityPosReceivedOverNetwork;
    /**
     * Returns the coordinates of another player.
     * Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
     *
     * Hash: 0x125E6D638B8605D4 | Since: 393
     */
    function getLastPlayerPosReceivedOverNetwork(player) {
        return new Vector3(NetworkGetPlayerCoords(player));
    }
    network.getLastPlayerPosReceivedOverNetwork = getLastPlayerPosReceivedOverNetwork;
    /**
     * Used by NetBlender
     *
     * Hash: 0x33DE49EDF4DDE77A | Since: 1103
     */
    function getLastVelReceivedOverNetwork(entity) {
        return new Vector3(NetworkGetLastVelocityReceived(entity));
    }
    network.getLastVelReceivedOverNetwork = getLastVelReceivedOverNetwork;
    /**
     * No comment provided
     *
     * Hash: 0xE86051786B66CD8E | Since: 323
     */
    function getLocalHandle(gamerHandleSize) {
        return NetworkGetLocalHandle(gamerHandleSize);
    }
    network.getLocalHandle = getLocalHandle;
    /**
     * No comment provided
     *
     * Hash: 0x02C40BF885C567B6 | Since: 323
     */
    function getLocalSceneFromNetworkId(netId) {
        return NetworkGetLocalSceneFromNetworkId(netId);
    }
    network.getLocalSceneFromNetworkId = getLocalSceneFromNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0xAFEBB0D5D8F687D2 | Since: 323
     */
    function getMaxFriends() {
        return NetworkGetMaxFriends();
    }
    network.getMaxFriends = getMaxFriends;
    /**
     * No comment provided
     *
     * Hash: 0xA6C90FBC38E395EE | Since: 323
     */
    function getMaxNumParticipants() {
        return NetworkGetMaxNumParticipants();
    }
    network.getMaxNumParticipants = getMaxNumParticipants;
    /**
     * NETWORK_GET_M[A-U]
     *
     * Hash: 0xADB57E5B663CCA8B | Since: 323
     */
    function getMuteCountForPlayer(p0) {
        return Citizen.invokeNative('0xADB57E5B663CCA8B', p0);
    }
    network.getMuteCountForPlayer = getMuteCountForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xA11700682F3AD45C | Since: 323
     */
    function getNetworkIdFromEntity(entity) {
        return NetworkGetNetworkIdFromEntity(entity);
    }
    network.getNetworkIdFromEntity = getNetworkIdFromEntity;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x6FD992C4A1C1B986 | Since: 323
     */
    function getNetStatisticsInfo() {
        return Citizen.invokeNative('0x6FD992C4A1C1B986');
    }
    network.getNetStatisticsInfo = getNetStatisticsInfo;
    /**
     * Hardcoded to return zero.
     *
     * ==== PS4 specific info ====
     *
     * Returns some sort of unavailable reason:
     * -1 = REASON_INVALID
     * 0 = REASON_OTHER
     * 1 = REASON_SYSTEM_UPDATE
     * 2 = REASON_GAME_UPDATE
     * 3 = REASON_SIGNED_OUT
     * 4 = REASON_AGE
     * 5 = REASON_CONNECTION
     *
     * =================================
     *
     * Hash: 0x74FB3E29E6D10FA9 | Since: 323
     */
    function getNpUnavailableReason() {
        return Citizen.invokeNative('0x74FB3E29E6D10FA9');
    }
    network.getNpUnavailableReason = getNpUnavailableReason;
    /**
     * No comment provided
     *
     * Hash: 0xD38C4A6D047C019D | Since: 323
     */
    function getNumberBodyTrackerHits() {
        return NetworkGetNumBodyTrackers();
    }
    network.getNumberBodyTrackerHits = getNumberBodyTrackerHits;
    /**
     * Returns the amount of players connected in the current session. Only works when connected to a session/server.
     *
     * Hash: 0xA4A79DD2D9600654 | Since: 323
     */
    function getNumConnectedPlayers() {
        return NetworkGetNumConnectedPlayers();
    }
    network.getNumConnectedPlayers = getNumConnectedPlayers;
    /**
     * No comment provided
     *
     * Hash: 0xA1B043EE79A916FB | Since: 323
     */
    function getNumFoundGamers() {
        return NetworkGetNumFoundGamers();
    }
    network.getNumFoundGamers = getNumFoundGamers;
    /**
     * No comment provided
     *
     * Hash: 0x18D0456E86604654 | Since: 323
     */
    function getNumParticipants() {
        return NetworkGetNumParticipants();
    }
    network.getNumParticipants = getNumParticipants;
    /**
     * No comment provided
     *
     * Hash: 0xCEFA968912D0F78D | Since: 323
     */
    function getNumPresenceInvites() {
        return NetworkGetNumPresenceInvites();
    }
    network.getNumPresenceInvites = getNumPresenceInvites;
    /**
     * No comment provided
     *
     * Hash: 0x3658E8CD94FC121A | Since: 323
     */
    function getNumScriptParticipants(scriptName, instance_id, position_hash) {
        return NetworkGetNumScriptParticipants(scriptName, instance_id, position_hash);
    }
    network.getNumScriptParticipants = getNumScriptParticipants;
    /**
     * No comment provided
     *
     * Hash: 0x617F49C2668E6155 | Since: 757
     */
    function getNumTransitionNonAsyncGamers() {
        return Citizen.invokeNative('0x617F49C2668E6155');
    }
    network.getNumTransitionNonAsyncGamers = getNumTransitionNonAsyncGamers;
    /**
     * No comment provided
     *
     * Hash: 0xFF8FCF9FFC458A1C | Since: 323
     */
    function getNumUnackedReliables(player) {
        return NetworkGetNumUnackedForPlayer(player);
    }
    network.getNumUnackedReliables = getNumUnackedReliables;
    /**
     * No comment provided
     *
     * Hash: 0x1B84DF6AF2A46938 | Since: 323
     */
    function getParticipantIndex(index) {
        return NetworkGetParticipantIndex(index);
    }
    network.getParticipantIndex = getParticipantIndex;
    /**
     * No comment provided
     *
     * Hash: 0x120364DE2845DAF8 | Since: 323
     */
    function getPlatformPartyMembers(dataSize) {
        return NetworkGetPlatformPartyMembers(dataSize);
    }
    network.getPlatformPartyMembers = getPlatformPartyMembers;
    /**
     * No comment provided
     *
     * Hash: 0x01ABCE5E7CBDA196 | Since: 323
     */
    function getPlatformPartyMemberCount() {
        return NetworkGetPlatformPartyUnk();
    }
    network.getPlatformPartyMemberCount = getPlatformPartyMemberCount;
    /**
     * No comment provided
     *
     * Hash: 0xDB663CC9FF3407A9 | Since: 1734
     */
    function getPlayerAccountId(player) {
        return Citizen.invokeNative('0xDB663CC9FF3407A9', player);
    }
    network.getPlayerAccountId = getPlayerAccountId;
    /**
     * No comment provided
     *
     * Hash: 0xCE5F689CF5A0A49D | Since: 323
     */
    function getPlayerFromGamerHandle() {
        return NetworkGetPlayerFromGamerHandle();
    }
    network.getPlayerFromGamerHandle = getPlayerFromGamerHandle;
    /**
     * No comment provided
     *
     * Hash: 0x24FB80D107371267 | Since: 323
     */
    function getPlayerIndex(player) {
        return NetworkGetPlayerIndex(player);
    }
    network.getPlayerIndex = getPlayerIndex;
    /**
     * Returns the Player associated to a given Ped when in an online session.
     *
     * Hash: 0x6C0E2E0125610278 | Since: 323
     */
    function getPlayerIndexFromPed(ped) {
        return NetworkGetPlayerIndexFromPed(ped);
    }
    network.getPlayerIndexFromPed = getPlayerIndexFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x21A1684A25C2867F | Since: 323
     */
    function getPlayerLoudness(player) {
        return NetworkGetPlayerLoudness(player);
    }
    network.getPlayerLoudness = getPlayerLoudness;
    /**
     * No comment provided
     *
     * Hash: 0x82377B65E943F72D | Since: 323
     */
    function getPlayerOwnsWaypoint(player) {
        return NetworkGetPlayerOwnsWaypoint(player);
    }
    network.getPlayerOwnsWaypoint = getPlayerOwnsWaypoint;
    /**
     * No comment provided
     *
     * Hash: 0x3B39236746714134 | Since: 323
     */
    function getPlayerTutorialSessionInstance(player) {
        return NetworkGetPlayerTutorialSessionInstance(player);
    }
    network.getPlayerTutorialSessionInstance = getPlayerTutorialSessionInstance;
    /**
     * No comment provided
     *
     * Hash: 0x257ED0FADF750BCF | Since: 2372
     */
    function getPositionHashOfThisScript() {
        return NetworkGetPositionHashOfThisScript();
    }
    network.getPositionHashOfThisScript = getPositionHashOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0xAA5FAFCD2C5F5E47 | Since: 1103
     */
    function getPredictedVelocity(entity, maxSpeedToPredict) {
        return new Vector3(Citizen.invokeNative('0xAA5FAFCD2C5F5E47', entity, maxSpeedToPredict));
    }
    network.getPredictedVelocity = getPredictedVelocity;
    /**
     * No comment provided
     *
     * Hash: 0x24409FC4C55CB22D | Since: 323
     */
    function getPresenceInviteContentId() {
        return NetworkGetPresenceInviteContentId(0);
    }
    network.getPresenceInviteContentId = getPresenceInviteContentId;
    /**
     * No comment provided
     *
     * Hash: 0x3DBF2DF0AEB7D289 | Since: 323
     */
    function getPresenceInviteFromAdmin() {
        return NetworkGetPresenceInviteFromAdmin(0);
    }
    network.getPresenceInviteFromAdmin = getPresenceInviteFromAdmin;
    /**
     * No comment provided
     *
     * Hash: 0x38D5B0FEBB086F75 | Since: 323
     */
    function getPresenceInviteHandle() {
        return NetworkGetPresenceInviteHandle(undefined);
    }
    network.getPresenceInviteHandle = getPresenceInviteHandle;
    /**
     * No comment provided
     *
     * Hash: 0xDFF09646E12EC386 | Since: 323
     */
    function getPresenceInviteId() {
        return NetworkGetPresenceInviteId(0);
    }
    network.getPresenceInviteId = getPresenceInviteId;
    /**
     * No comment provided
     *
     * Hash: 0x742B58F723233ED9 | Since: 323
     */
    function getPresenceInviteIndexById() {
        return Citizen.invokeNative('0x742B58F723233ED9', 0);
    }
    network.getPresenceInviteIndexById = getPresenceInviteIndexById;
    /**
     * No comment provided
     *
     * Hash: 0x4962CC4AA2F345B7 | Since: 323
     */
    function getPresenceInviteInviter() {
        return NetworkGetPresenceInviteInviter(0);
    }
    network.getPresenceInviteInviter = getPresenceInviteInviter;
    /**
     * No comment provided
     *
     * Hash: 0x8806CEBFABD3CE05 | Since: 323
     */
    function getPresenceInviteIsTournament() {
        return NetworkGetPresenceInviteIsTournament(undefined);
    }
    network.getPresenceInviteIsTournament = getPresenceInviteIsTournament;
    /**
     * No comment provided
     *
     * Hash: 0x728C4CC7920CD102 | Since: 323
     */
    function getPresenceInvitePlaylistCurrent() {
        return NetworkGetPresenceInvitePlaylistCurrent(0);
    }
    network.getPresenceInvitePlaylistCurrent = getPresenceInvitePlaylistCurrent;
    /**
     * No comment provided
     *
     * Hash: 0xD39B3FFF8FFDD5BF | Since: 323
     */
    function getPresenceInvitePlaylistLength() {
        return NetworkGetPresenceInvitePlaylistLength(0);
    }
    network.getPresenceInvitePlaylistLength = getPresenceInvitePlaylistLength;
    /**
     * No comment provided
     *
     * Hash: 0x26E1CD96B0903D60 | Since: 323
     */
    function getPresenceInviteSessionId() {
        return NetworkGetPresenceInviteSessionId(undefined);
    }
    network.getPresenceInviteSessionId = getPresenceInviteSessionId;
    /**
     * No comment provided
     *
     * Hash: 0x042E4B70B93E6054 | Since: 323
     */
    function getPrimaryClanDataCancel() {
        NetworkGetPrimaryClanDataCancel();
    }
    network.getPrimaryClanDataCancel = getPrimaryClanDataCancel;
    /**
     * No comment provided
     *
     * Hash: 0x9AA46BADAD0E27ED | Since: 323
     */
    function getPrimaryClanDataClear() {
        return NetworkGetPrimaryClanDataClear();
    }
    network.getPrimaryClanDataClear = getPrimaryClanDataClear;
    /**
     * No comment provided
     *
     * Hash: 0xC080FF658B2E41DA | Since: 323
     */
    function getPrimaryClanDataNew() {
        return NetworkGetPrimaryClanDataNew();
    }
    network.getPrimaryClanDataNew = getPrimaryClanDataNew;
    /**
     * No comment provided
     *
     * Hash: 0xB5074DB804E28CE7 | Since: 323
     */
    function getPrimaryClanDataPending() {
        return NetworkGetPrimaryClanDataPending();
    }
    network.getPrimaryClanDataPending = getPrimaryClanDataPending;
    /**
     * No comment provided
     *
     * Hash: 0xCE86D8191B762107 | Since: 323
     */
    function getPrimaryClanDataStart() {
        return NetworkGetPrimaryClanDataStart(undefined);
    }
    network.getPrimaryClanDataStart = getPrimaryClanDataStart;
    /**
     * No comment provided
     *
     * Hash: 0x5B4F04F19376A0BA | Since: 323
     */
    function getPrimaryClanDataSuccess() {
        return NetworkGetPrimaryClanDataSuccess();
    }
    network.getPrimaryClanDataSuccess = getPrimaryClanDataSuccess;
    /**
     * No comment provided
     *
     * Hash: 0x599E4FA1F87EB5FF | Since: 323
     */
    function getRandomInt() {
        return NetworkGetRandomInt();
    }
    network.getRandomInt = getRandomInt;
    /**
     * Same as GET_RANDOM_INT_IN_RANGE
     *
     * Hash: 0xE30CF56F1EFA5F43 | Since: 323
     */
    function getRandomIntRanged(rangeStart, rangeEnd) {
        return NetworkGetRandomIntRanged(rangeStart, rangeEnd);
    }
    network.getRandomIntRanged = getRandomIntRanged;
    /**
     * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
     *
     * Hash: 0x371EA43692861CF1 | Since: 323
     */
    function getRespawnResult(randomInt) {
        return NetworkGetRespawnResult(randomInt);
    }
    network.getRespawnResult = getRespawnResult;
    /**
     * No comment provided
     *
     * Hash: 0x6C34F1208B8923FD | Since: 323
     */
    function getRespawnResultFlags() {
        return NetworkGetRespawnResultFlags(0);
    }
    network.getRespawnResultFlags = getRespawnResultFlags;
    /**
     * No comment provided
     *
     * Hash: 0x57D158647A6BFABF | Since: 323
     */
    function getScriptStatus() {
        return NetworkGetScriptStatus();
    }
    network.getScriptStatus = getScriptStatus;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x2555CF7DA5473794 | Since: 323
     */
    function getSignallingInfo() {
        return Citizen.invokeNative('0x2555CF7DA5473794');
    }
    network.getSignallingInfo = getSignallingInfo;
    /**
     * No comment provided
     *
     * Hash: 0x84F0F13120B4E098 | Since: 323
     */
    function getTalkerProximity() {
        return NetworkGetTalkerProximity();
    }
    network.getTalkerProximity = getTalkerProximity;
    /**
     * No comment provided
     *
     * Hash: 0x2910669969E9535E | Since: 323
     */
    function getThisScriptIsNetworkScript() {
        return NetworkGetThisScriptIsNetworkScript();
    }
    network.getThisScriptIsNetworkScript = getThisScriptIsNetworkScript;
    /**
     * No comment provided
     *
     * Hash: 0x5ED0356A0CE3A34F | Since: 323
     */
    function getTimeoutTime() {
        return NetworkGetTimeoutTime();
    }
    network.getTimeoutTime = getTimeoutTime;
    /**
     * No comment provided
     *
     * Hash: 0xCF61D4B4702EE9EB | Since: 323
     */
    function getTotalNumPlayers() {
        return NetworkGetTotalNumPlayers();
    }
    network.getTotalNumPlayers = getTotalNumPlayers;
    /**
     * No comment provided
     *
     * Hash: 0x65042B9774C4435E | Since: 323
     */
    function getTransitionHost() {
        return NetworkGetTransitionHost();
    }
    network.getTransitionHost = getTransitionHost;
    /**
     * Returns count.
     *
     * Hash: 0x73B000F7FBC55829 | Since: 323
     */
    function getTransitionMembers(dataCount) {
        return NetworkGetTransitionMembers(dataCount);
    }
    network.getTransitionMembers = getTransitionMembers;
    /**
     * Actually returns the version (TUNABLE_VERSION)
     *
     * Hash: 0x10BD227A753B0D84 | Since: 323
     */
    function getTunableCloudCrc() {
        return NetworkGetTunableCloudCrc();
    }
    network.getTunableCloudCrc = getTunableCloudCrc;
    /**
     * No comment provided
     *
     * Hash: 0x3765C3A3E8192E10 | Since: 323
     */
    function getUnreliableResendCount(player) {
        return NetworkGetUnreliableResendCountForPlayer(player);
    }
    network.getUnreliableResendCount = getUnreliableResendCount;
    /**
     * No comment provided
     *
     * Hash: 0xD45CB817D7E177D2 | Since: 323
     */
    function handleFromFriend(friendIndex, gamerHandleSize) {
        return NetworkHandleFromFriend(friendIndex, gamerHandleSize);
    }
    network.handleFromFriend = handleFromFriend;
    /**
     * No comment provided
     *
     * Hash: 0xA0FD21BED61E5C4C | Since: 323
     */
    function handleFromMemberId(memberId, gamerHandleSize) {
        return NetworkHandleFromMemberId(memberId, gamerHandleSize);
    }
    network.handleFromMemberId = handleFromMemberId;
    /**
     * No comment provided
     *
     * Hash: 0x388EB2B86C73B6B3 | Since: 323
     */
    function handleFromPlayer(player, gamerHandleSize) {
        return NetworkHandleFromPlayer(player, gamerHandleSize);
    }
    network.handleFromPlayer = handleFromPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xDCD51DD8F87AEC5C | Since: 323
     */
    function handleFromUserId(userId, gamerHandleSize) {
        return NetworkHandleFromUserId(userId, gamerHandleSize);
    }
    network.handleFromUserId = handleFromUserId;
    /**
     * No comment provided
     *
     * Hash: 0x58575AC3CF2CA8EC | Since: 323
     */
    function hashFromGamerHandle() {
        return NetworkHashFromGamerHandle();
    }
    network.hashFromGamerHandle = hashFromGamerHandle;
    /**
     * No comment provided
     *
     * Hash: 0xBC1D768F2F5D6C05 | Since: 323
     */
    function hashFromPlayerHandle(player) {
        return NetworkHashFromPlayerHandle(player);
    }
    network.hashFromPlayerHandle = hashFromPlayerHandle;
    /**
     * No comment provided
     *
     * Hash: 0x1353F87E89946207 | Since: 323
     */
    function hasAgeRestrictions() {
        return NetworkHasAgeRestrictedProfile();
    }
    network.hasAgeRestrictions = hasAgeRestrictions;
    /**
     * No comment provided
     *
     * Hash: 0x26F07DD83A5F7F98 | Since: 323
     */
    function hasAutomuteOverride() {
        return Citizen.invokeNative('0x26F07DD83A5F7F98');
    }
    network.hasAutomuteOverride = hasAutomuteOverride;
    /**
     * No comment provided
     *
     * Hash: 0x2E0BF682CC778D49 | Since: 323
     */
    function hasBoneBeenHitByKiller(boneIndex) {
        return Citizen.invokeNative('0x2E0BF682CC778D49', boneIndex);
    }
    network.hasBoneBeenHitByKiller = hasBoneBeenHitByKiller;
    /**
     * No comment provided
     *
     * Hash: 0x237D5336A9A54108 | Since: 323
     */
    function hasCachedPlayerHeadBlendData(player) {
        return NetworkHasCachedPlayerHeadBlendData(player);
    }
    network.hasCachedPlayerHeadBlendData = hasCachedPlayerHeadBlendData;
    /**
     * No comment provided
     *
     * Hash: 0xC42DD763159F3461 | Since: 323
     */
    function hasConfirmedInvite() {
        return Citizen.invokeNative('0xC42DD763159F3461');
    }
    network.hasConfirmedInvite = hasConfirmedInvite;
    /**
     * No comment provided
     *
     * Hash: 0xCB3C68ADB06195DF | Since: 323
     */
    function hasControlOfDoor(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return NetworkHasControlOfDoor(doorHash);
    }
    network.hasControlOfDoor = hasControlOfDoor;
    /**
     * No comment provided
     *
     * Hash: 0x01BF60A500E28887 | Since: 323
     */
    function hasControlOfEntity(entity) {
        return NetworkHasControlOfEntity(entity);
    }
    network.hasControlOfEntity = hasControlOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0x4D36070FE0215186 | Since: 323
     */
    function hasControlOfNetworkId(netId) {
        return NetworkHasControlOfNetworkId(netId);
    }
    network.hasControlOfNetworkId = hasControlOfNetworkId;
    /**
     * No comment provided
     *
     * Hash: 0x5BC9495F0B3B6FA6 | Since: 323
     */
    function hasControlOfPickup(pickup) {
        return NetworkHasControlOfPickup(pickup);
    }
    network.hasControlOfPickup = hasControlOfPickup;
    /**
     * No comment provided
     *
     * Hash: 0xB07D3185E11657A5 | Since: 323
     */
    function hasEntityBeenRegisteredWithThisThread(entity) {
        return NetworkHasEntityBeenRegisteredWithThisThread(entity);
    }
    network.hasEntityBeenRegisteredWithThisThread = hasEntityBeenRegisteredWithThisThread;
    /**
     * No comment provided
     *
     * Hash: 0x76D9B976C4C09FDE | Since: 323
     */
    function hasFollowInvite() {
        return NetworkHasFollowInvite();
    }
    network.hasFollowInvite = hasFollowInvite;
    /**
     * No comment provided
     *
     * Hash: 0xE870F9F1F7B4F1FA | Since: 323
     */
    function hasHeadset() {
        return NetworkHasHeadset();
    }
    network.hasHeadset = hasHeadset;
    /**
     * No comment provided
     *
     * Hash: 0x4D86CD31E8976ECE | Since: 323
     */
    function hasInvitedGamer() {
        return NetworkHasInvitedGamer();
    }
    network.hasInvitedGamer = hasInvitedGamer;
    /**
     * No comment provided
     *
     * Hash: 0x7284A47B3540E6CF | Since: 323
     */
    function hasInvitedGamerToTransition() {
        return NetworkHasInvitedGamerToTransition();
    }
    network.hasInvitedGamerToTransition = hasInvitedGamerToTransition;
    /**
     * No comment provided
     *
     * Hash: 0x71DC455F5CD1C2B1 | Since: 505
     */
    function hasMadeInviteDecision() {
        return NetworkHasInviteBeenAcked();
    }
    network.hasMadeInviteDecision = hasMadeInviteDecision;
    /**
     * No comment provided
     *
     * Hash: 0xAC8C7B9B88C4A668 | Since: 323
     */
    function hasPendingInvite() {
        return NetworkHasPendingInvite();
    }
    network.hasPendingInvite = hasPendingInvite;
    /**
     * No comment provided
     *
     * Hash: 0x9AC9CCBFA8C29795 | Since: 323
     */
    function hasPlayerStartedTransition(player) {
        return NetworkHasPlayerStartedTransition(player);
    }
    network.hasPlayerStartedTransition = hasPlayerStartedTransition;
    /**
     * No comment provided
     *
     * Hash: 0x5D10B3795F3FC886 | Since: 323
     */
    function hasReceivedHostBroadcastData() {
        return NetworkHasReceivedHostBroadcastData();
    }
    network.hasReceivedHostBroadcastData = hasReceivedHostBroadcastData;
    /**
     * index is always 18 in scripts
     *
     * Hash: 0xA699957E60D80214 | Since: 323
     */
    function hasRosPrivilege(index) {
        return NetworkHasRosPrivilege(index);
    }
    network.hasRosPrivilege = hasRosPrivilege;
    /**
     * No comment provided
     *
     * Hash: 0xC22912B1D85F26B1 | Since: 323
     */
    function hasRosPrivilegeEndDate(privilege) {
        return NetworkHasRosPrivilegeEndDate(privilege);
    }
    network.hasRosPrivilegeEndDate = hasRosPrivilegeEndDate;
    /**
     * No comment provided
     *
     * Hash: 0x593570C289A77688 | Since: 323
     */
    function hasRosPrivilegePlayedLastGen() {
        return NetworkGetRosPrivilege24();
    }
    network.hasRosPrivilegePlayedLastGen = hasRosPrivilegePlayedLastGen;
    /**
     * No comment provided
     *
     * Hash: 0x91B87C55093DE351 | Since: 323
     */
    function hasRosPrivilegeSpecialEditionContent() {
        return NetworkGetRosPrivilege25();
    }
    network.hasRosPrivilegeSpecialEditionContent = hasRosPrivilegeSpecialEditionContent;
    /**
     * No comment provided
     *
     * Hash: 0x67A5589628E0CFF6 | Since: 323
     */
    function hasSocialClubAccount() {
        return NetworkHasSocialClubAccount();
    }
    network.hasSocialClubAccount = hasSocialClubAccount;
    /**
     * No comment provided
     *
     * Hash: 0x76BF03FADBF154F5 | Since: 323
     */
    function hasSocialNetworkingSharingPriv() {
        return NetworkHasSocialNetworkingSharingPriv();
    }
    network.hasSocialNetworkingSharingPriv = hasSocialNetworkingSharingPriv;
    /**
     * No comment provided
     *
     * Hash: 0x3F9990BF5F22759C | Since: 323
     */
    function hasTransitionInviteBeenAcked() {
        return NetworkHasTransitionInviteBeenAcked();
    }
    network.hasTransitionInviteBeenAcked = hasTransitionInviteBeenAcked;
    /**
     * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
     *
     * Hash: 0x85443FF4C328F53B | Since: 323
     */
    function hasValidRosCredentials() {
        return NetworkHasValidRosCredentials();
    }
    network.hasValidRosCredentials = hasValidRosCredentials;
    /**
     * No comment provided
     *
     * Hash: 0xCCA4318E1AB03F1F | Since: 323
     */
    function hasViewGamerUserContentResult() {
        return NetworkHasViewGamerUserContentResult();
    }
    network.hasViewGamerUserContentResult = hasViewGamerUserContentResult;
    /**
     * No comment provided
     *
     * Hash: 0xAEEF48CDF5B6CE7C | Since: 323
     */
    function haveCommunicationPrivileges(player) {
        return NetworkHaveCommunicationPrivileges(0, player);
    }
    network.haveCommunicationPrivileges = haveCommunicationPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0x25CB5A9F37BFD063 | Since: 323
     */
    function haveOnlinePrivileges() {
        return NetworkHaveOnlinePrivileges();
    }
    network.haveOnlinePrivileges = haveOnlinePrivileges;
    /**
     * No comment provided
     *
     * Hash: 0x5EA784D197556507 | Since: 323
     */
    function havePlatformSubscription() {
        return NetworkHaveOnlinePrivilege2();
    }
    network.havePlatformSubscription = havePlatformSubscription;
    /**
     * No comment provided
     *
     * Hash: 0x8020A73847E0CA7D | Since: 323
     */
    function haveRosBannedPriv() {
        return NetworkHaveRosBannedPriv();
    }
    network.haveRosBannedPriv = haveRosBannedPriv;
    /**
     * No comment provided
     *
     * Hash: 0xA0AD7E2AF5349F61 | Since: 323
     */
    function haveRosCreateTicketPriv() {
        return NetworkHaveRosCreateTicketPriv();
    }
    network.haveRosCreateTicketPriv = haveRosCreateTicketPriv;
    /**
     * No comment provided
     *
     * Hash: 0x422D396F80A96547 | Since: 323
     */
    function haveRosLeaderboardWritePriv() {
        return NetworkHaveRosLeaderboardWritePriv();
    }
    network.haveRosLeaderboardWritePriv = haveRosLeaderboardWritePriv;
    /**
     * No comment provided
     *
     * Hash: 0x5F91D5D0B36AA310 | Since: 323
     */
    function haveRosMultiplayerPriv() {
        return NetworkHaveRosMultiplayerPriv();
    }
    network.haveRosMultiplayerPriv = haveRosMultiplayerPriv;
    /**
     * No comment provided
     *
     * Hash: 0x606E4D3E3CCCF3EB | Since: 323
     */
    function haveRosSocialClubPriv() {
        return NetworkHaveRosSocialClubPriv();
    }
    network.haveRosSocialClubPriv = haveRosSocialClubPriv;
    /**
     * No comment provided
     *
     * Hash: 0x66B59CFFD78467AF | Since: 323
     */
    function haveScsPrivateMsgPriv() {
        return NetworkGetRosPrivilege9();
    }
    network.haveScsPrivateMsgPriv = haveScsPrivateMsgPriv;
    /**
     * No comment provided
     *
     * Hash: 0x72D918C99BCACC54 | Since: 323
     */
    function haveUserContentPrivileges() {
        return NetworkHaveUserContentPrivileges(0);
    }
    network.haveUserContentPrivileges = haveUserContentPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0xFAC18E7356BD3210 | Since: 1180
     */
    function hideProjectileInCutscene() {
        Citizen.invokeNative('0xFAC18E7356BD3210');
    }
    network.hideProjectileInCutscene = hideProjectileInCutscene;
    /**
     * p0: Unknown int
     * p1: Unknown int
     * p2: Unknown int
     * p3: Unknown int
     * p4: Unknown always 0 in decompiled scripts
     * p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
     * p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
     * p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
     * p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
     * p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?
     *
     * From what I can tell it looks like it does the following:
     * Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
     * You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
     *
     * Hash: 0xA60BB5CE242BB254 | Since: 323
     */
    function hostTransition() {
        return NetworkHostTransition(0, 0, 0, 0, undefined, false, false, 0, undefined, 0);
    }
    network.hostTransition = hostTransition;
    /**
     * No comment provided
     *
     * Hash: 0x4C2A9FDC22377075 | Since: 372
     */
    function ignoreRemoteWaypoints() {
        Citizen.invokeNative('0x4C2A9FDC22377075');
    }
    network.ignoreRemoteWaypoints = ignoreRemoteWaypoints;
    /**
     * No comment provided
     *
     * Hash: 0x9D80CD1D0E6327DE | Since: 323
     */
    function inviteGamers() {
        return NetworkInviteGamers(undefined, undefined);
    }
    network.inviteGamers = inviteGamers;
    /**
     * No comment provided
     *
     * Hash: 0x4A595C32F77DFF76 | Since: 323
     */
    function inviteGamersToTransition() {
        return NetworkInviteGamersToTransition(undefined);
    }
    network.inviteGamersToTransition = inviteGamersToTransition;
    /**
     * No comment provided
     *
     * Hash: 0x05095437424397FA | Since: 323
     */
    function isActivitySession() {
        return NetworkIsActivitySession();
    }
    network.isActivitySession = isActivitySession;
    /**
     * No comment provided
     *
     * Hash: 0x12103B9E0C9F92FB | Since: 323
     */
    function isActivitySpectator() {
        return NetworkIsActivitySpectator();
    }
    network.isActivitySpectator = isActivitySpectator;
    /**
     * No comment provided
     *
     * Hash: 0x2763BBAA72A7BCB9 | Since: 323
     */
    function isActivitySpectatorFromHandle() {
        return NetworkIsActivitySpectatorFromHandle();
    }
    network.isActivitySpectatorFromHandle = isActivitySpectatorFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0x6EA101606F6E4D81 | Since: 323
     */
    function isAddingFriend() {
        return NetworkIsAddingFriend();
    }
    network.isAddingFriend = isAddingFriend;
    /**
     * No comment provided
     *
     * Hash: 0x2E4C123D1C8A710E | Since: 505
     */
    function isAnyPlayerNear() {
        return Citizen.invokeNative('0x2E4C123D1C8A710E', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    network.isAnyPlayerNear = isAnyPlayerNear;
    /**
     * No comment provided
     *
     * Hash: 0xEFFB25453D8600F9 | Since: 323
     */
    function isCableConnected() {
        return NetworkIsCableConnected();
    }
    network.isCableConnected = isCableConnected;
    /**
     * This would be nice to see if someone is in party chat, but 2 sad notes.
     * 1) It only becomes true if said person is speaking in that party at the time.
     * 2) It will never, become true unless you are in that party with said person.
     *
     * Hash: 0x8DE9945BCC9AEC52 | Since: 323
     */
    function isChattingInPlatformParty() {
        return NetworkIsChattingInPlatformParty();
    }
    network.isChattingInPlatformParty = isChattingInPlatformParty;
    /**
     * No comment provided
     *
     * Hash: 0xD7C95D322FF57522 | Since: 323
     */
    function isClockTimeOverridden() {
        return NetworkIsClockTimeOverridden();
    }
    network.isClockTimeOverridden = isClockTimeOverridden;
    /**
     * No comment provided
     *
     * Hash: 0x9A4CF4F48AD77302 | Since: 323
     */
    function isCloudAvailable() {
        return NetworkIsCloudAvailable();
    }
    network.isCloudAvailable = isCloudAvailable;
    /**
     * No comment provided
     *
     * Hash: 0x8132C0EB8B2B3293 | Since: 323
     */
    function isCloudBackgroundScriptRequestPending() {
        return NetworkIsCloudBackgroundScriptRequestPending();
    }
    network.isCloudBackgroundScriptRequestPending = isCloudBackgroundScriptRequestPending;
    /**
     * No comment provided
     *
     * Hash: 0x16D3D49902F697BB | Since: 323
     */
    function isConnectedViaRelay(player) {
        return NetworkIsConnectionEndpointRelayServer(player);
    }
    network.isConnectedViaRelay = isConnectedViaRelay;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x7808619F31FF22DB | Since: 323
     */
    function isConnetedToNpPresence() {
        return Citizen.invokeNative('0x7808619F31FF22DB');
    }
    network.isConnetedToNpPresence = isConnetedToNpPresence;
    /**
     * No comment provided
     *
     * Hash: 0xC01E93FAC20C3346 | Since: 323
     */
    function isDoorNetworked(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return NetworkIsDoorNetworked(doorHash);
    }
    network.isDoorNetworked = isDoorNetworked;
    /**
     * Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
     *
     * Hash: 0x71302EC70689052A | Since: 877
     */
    function isEntityConcealed(entity) {
        return NetworkIsEntityConcealed(entity);
    }
    network.isEntityConcealed = isEntityConcealed;
    /**
     * No comment provided
     *
     * Hash: 0x422F32CC7E56ABAD | Since: 323
     */
    function isEntityFading(entity) {
        return NetworkIsEntityFading(entity);
    }
    network.isEntityFading = isEntityFading;
    /**
     * No comment provided
     *
     * Hash: 0xDDDF64C91BFCF0AA | Since: 323
     */
    function isFindingGamers() {
        return NetworkIsFindingGamers();
    }
    network.isFindingGamers = isFindingGamers;
    /**
     * No comment provided
     *
     * Hash: 0x1A24A179F9B31654 | Since: 323
     */
    function isFriend() {
        return NetworkIsFriend();
    }
    network.isFriend = isFriend;
    /**
     * No comment provided
     *
     * Hash: 0x87EB7A3FFCB314DB | Since: 323
     */
    function isFriendHandleOnline() {
        return NetworkIsFriendHandleOnline();
    }
    network.isFriendHandleOnline = isFriendHandleOnline;
    /**
     * No comment provided
     *
     * Hash: 0xBAD8F2A42B844821 | Since: 323
     */
    function isFriendIndexOnline(friendIndex) {
        return NetworkIsFriendIndexOnline(friendIndex);
    }
    network.isFriendIndexOnline = isFriendIndexOnline;
    /**
     * No comment provided
     *
     * Hash: 0x57005C18827F3A28 | Since: 323
     */
    function isFriendInMultiplayer(friendName) {
        return NetworkIsFriendInMultiplayer(friendName);
    }
    network.isFriendInMultiplayer = isFriendInMultiplayer;
    /**
     * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
     *
     * Hash: 0x2EA9A3BEDF3F17B8 | Since: 323
     */
    function isFriendInSameTitle(friendName) {
        return NetworkIsFriendInSameTitle(friendName);
    }
    network.isFriendInSameTitle = isFriendInSameTitle;
    /**
     * No comment provided
     *
     * Hash: 0x425A44533437B64D | Since: 323
     */
    function isFriendOnline(name) {
        return NetworkIsFriendOnline(name);
    }
    network.isFriendOnline = isFriendOnline;
    /**
     * No comment provided
     *
     * Hash: 0xE944C4F5AF1B5883 | Since: 323
     */
    function isGamerBlockedByMe() {
        return NetworkIsGamerBlockedByMe();
    }
    network.isGamerBlockedByMe = isGamerBlockedByMe;
    /**
     * No comment provided
     *
     * Hash: 0x0F10B05DDF8D16E9 | Since: 323
     */
    function isGamerInMySession() {
        return NetworkIsGamerInMySession();
    }
    network.isGamerInMySession = isGamerInMySession;
    /**
     * No comment provided
     *
     * Hash: 0xCE60DE011B6C7978 | Since: 323
     */
    function isGamerMutedByMe() {
        return NetworkIsGamerMutedByMe();
    }
    network.isGamerMutedByMe = isGamerMutedByMe;
    /**
     * No comment provided
     *
     * Hash: 0x71C33B22606CD88A | Since: 323
     */
    function isGamerTalking() {
        return NetworkIsGamerTalking();
    }
    network.isGamerTalking = isGamerTalking;
    /**
     * No comment provided
     *
     * Hash: 0x10FAB35428CCC9D7 | Since: 323
     */
    function isGameInProgress() {
        return NetworkIsGameInProgress();
    }
    network.isGameInProgress = isGameInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x94A8394D150B013A | Since: 323
     */
    function isGettingGamerStatus() {
        return NetworkIsGettingGamerStatus();
    }
    network.isGettingGamerStatus = isGettingGamerStatus;
    /**
     * No comment provided
     *
     * Hash: 0x6F79B93B0A8E4133 | Since: 323
     */
    function isHandleValid(gamerHandleSize) {
        return NetworkIsHandleValid(gamerHandleSize);
    }
    network.isHandleValid = isHandleValid;
    /**
     * If you are host, returns true else returns false.
     *
     * Hash: 0x8DB296B814EDDA07 | Since: 323
     */
    function isHost() {
        return NetworkIsHost();
    }
    network.isHost = isHost;
    /**
     * No comment provided
     *
     * Hash: 0x83CD99A1E6061AB5 | Since: 323
     */
    function isHostOfThisScript() {
        return NetworkIsHostOfThisScript();
    }
    network.isHostOfThisScript = isHostOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0x7E58745504313A2E | Since: 323
     */
    function isInactiveProfile() {
        return NetworkIsInactiveProfile();
    }
    network.isInactiveProfile = isInactiveProfile;
    /**
     * No comment provided
     *
     * Hash: 0x6CC27C9FA2040220 | Since: 323
     */
    function isInMpCutscene() {
        return NetworkIsInMpCutscene();
    }
    network.isInMpCutscene = isInMpCutscene;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x2FC5650B0271CB57 | Since: 323
     */
    function isInPlatformParty() {
        return NetworkIsInPlatformParty();
    }
    network.isInPlatformParty = isInPlatformParty;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0xFD8B834A8BA05048 | Since: 323
     */
    function isInPlatformPartyChat() {
        return NetworkIsInPlatformPartyChat();
    }
    network.isInPlatformPartyChat = isInPlatformPartyChat;
    /**
     * No comment provided
     *
     * Hash: 0xCA97246103B63917 | Since: 323
     */
    function isInSession() {
        return NetworkIsInSession();
    }
    network.isInSession = isInSession;
    /**
     * No comment provided
     *
     * Hash: 0x048746E388762E11 | Since: 323
     */
    function isInSpectatorMode() {
        return NetworkIsInSpectatorMode();
    }
    network.isInSpectatorMode = isInSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0x68049AEFF83D8F0A | Since: 323
     */
    function isInTransition() {
        return NetworkIsInTransition();
    }
    network.isInTransition = isInTransition;
    /**
     * No comment provided
     *
     * Hash: 0xADA24309FE08DACF | Since: 323
     */
    function isInTutorialSession() {
        return NetworkIsInTutorialSession();
    }
    network.isInTutorialSession = isInTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0x8A8694B48715B000 | Since: 323
     */
    function isLocalPlayerInvincible() {
        return NetworkIsLocalPlayerInvincible();
    }
    network.isLocalPlayerInvincible = isLocalPlayerInvincible;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xA0FA4EC6A05DA44E | Since: 323
     */
    function isLoggedInToPsn() {
        return Citizen.invokeNative('0xA0FA4EC6A05DA44E');
    }
    network.isLoggedInToPsn = isLoggedInToPsn;
    /**
     * No comment provided
     *
     * Hash: 0x9747292807126EDA | Since: 323
     */
    function isMultiplayerDisabled() {
        return NetworkIsMultiplayerDisabled();
    }
    network.isMultiplayerDisabled = isMultiplayerDisabled;
    /**
     * Returns true if the specified network id is controlled by someone else.
     *
     * Hash: 0x7242F8B741CE1086 | Since: 678
     */
    function isNetworkIdRemotelyControlled(netId) {
        return NetworkIsNetworkIdAClone(netId);
    }
    network.isNetworkIdRemotelyControlled = isNetworkIdRemotelyControlled;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xBD545D44CCE70597 | Since: 323
     */
    function isNpAvailable() {
        return Citizen.invokeNative('0xBD545D44CCE70597');
    }
    network.isNpAvailable = isNpAvailable;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xEBCAB9E5048434F4 | Since: 323
     */
    function isNpPending() {
        return Citizen.invokeNative('0xEBCAB9E5048434F4');
    }
    network.isNpPending = isNpPending;
    /**
     * No comment provided
     *
     * Hash: 0x74698374C45701D2 | Since: 323
     */
    function isOfflineInvitePending() {
        return NetworkIsOfflineInvitePending();
    }
    network.isOfflineInvitePending = isOfflineInvitePending;
    /**
     * No comment provided
     *
     * Hash: 0x6FF8FF40B6357D45 | Since: 323
     */
    function isParticipantActive() {
        return NetworkIsParticipantActive(0);
    }
    network.isParticipantActive = isParticipantActive;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x0BE73DA6984A6E33 | Since: 323
     */
    function isPendingFriend() {
        return NetworkIsPendingFriend(undefined);
    }
    network.isPendingFriend = isPendingFriend;
    /**
     * No comment provided
     *
     * Hash: 0xA8ACB6459542A8C8 | Since: 323
     */
    function isPlatformSubscriptionCheckPending() {
        return Citizen.invokeNative('0xA8ACB6459542A8C8');
    }
    network.isPlatformSubscriptionCheckPending = isPlatformSubscriptionCheckPending;
    /**
     * No comment provided
     *
     * Hash: 0xB8DFD30D6973E135 | Since: 323
     */
    function isPlayerActive(player) {
        return NetworkIsPlayerActive(player);
    }
    network.isPlayerActive = isPlayerActive;
    /**
     * No comment provided
     *
     * Hash: 0x3CA58F6CB7CBD784 | Since: 323
     */
    function isPlayerAParticipant(player) {
        return NetworkIsPlayerAParticipant(player);
    }
    network.isPlayerAParticipant = isPlayerAParticipant;
    /**
     * No comment provided
     *
     * Hash: 0x1AD5B71586B94820 | Since: 323
     */
    function isPlayerAParticipantOnScript(player, script, instance_id) {
        return NetworkIsPlayerAParticipantOnScript(player, script, instance_id);
    }
    network.isPlayerAParticipantOnScript = isPlayerAParticipantOnScript;
    /**
     * No comment provided
     *
     * Hash: 0x57AF1F8E27483721 | Since: 323
     */
    function isPlayerBlockedByMe(player) {
        return NetworkIsPlayerBlockedByMe(player);
    }
    network.isPlayerBlockedByMe = isPlayerBlockedByMe;
    /**
     * No comment provided
     *
     * Hash: 0x919B3C98ED8292F9 | Since: 323
     */
    function isPlayerConcealed(player) {
        return NetworkIsPlayerConcealed(player);
    }
    network.isPlayerConcealed = isPlayerConcealed;
    /**
     * No comment provided
     *
     * Hash: 0x93DC1BE4E1ABE9D1 | Since: 323
     */
    function isPlayerConnected(player) {
        return NetworkIsPlayerConnected(player);
    }
    network.isPlayerConnected = isPlayerConnected;
    /**
     * No comment provided
     *
     * Hash: 0x631DC5DFF4B110E3 | Since: 323
     */
    function isPlayerFading(player) {
        return NetworkIsPlayerFading(player);
    }
    network.isPlayerFading = isPlayerFading;
    /**
     * No comment provided
     *
     * Hash: 0x63F9EE203C3619F2 | Since: 323
     */
    function isPlayerInMpCutscene(player) {
        return NetworkIsPlayerInMpCutscene(player);
    }
    network.isPlayerInMpCutscene = isPlayerInMpCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x8C71288AE68EDE39 | Since: 323
     */
    function isPlayerMutedByMe(player) {
        return NetworkIsPlayerMutedByMe(player);
    }
    network.isPlayerMutedByMe = isPlayerMutedByMe;
    /**
     * No comment provided
     *
     * Hash: 0xAD4326FCA30D62F8 | Since: 2802
     */
    function isPlayerOnBlocklist() {
        return Citizen.invokeNative('0xAD4326FCA30D62F8');
    }
    network.isPlayerOnBlocklist = isPlayerOnBlocklist;
    /**
     * returns true if someone is screaming or talking in a microphone
     *
     * Hash: 0x031E11F3D447647E | Since: 323
     */
    function isPlayerTalking(player) {
        return NetworkIsPlayerTalking(player);
    }
    network.isPlayerTalking = isPlayerTalking;
    /**
     * Hardcoded to return false.
     *
     * Hash: 0x64E5C4CC82847B73 | Since: 1734
     */
    function isPrivilegeCheckInProgress() {
        return Citizen.invokeNative('0x64E5C4CC82847B73');
    }
    network.isPrivilegeCheckInProgress = isPrivilegeCheckInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xC0D2AF00BCC234CA | Since: 323
     */
    function isPushToTalkActive() {
        return NetworkIsLocalTalking();
    }
    network.isPushToTalkActive = isPushToTalkActive;
    /**
     * No comment provided
     *
     * Hash: 0x14922ED3E38761F0 | Since: 323
     */
    function isQueuingForSessionJoin() {
        return Citizen.invokeNative('0x14922ED3E38761F0');
    }
    network.isQueuingForSessionJoin = isQueuingForSessionJoin;
    /**
     * No comment provided
     *
     * Hash: 0x8D11E61A4ABF49CC | Since: 323
     */
    function isRefreshingRosCredentials() {
        return NetworkIsPsnAvailable();
    }
    network.isRefreshingRosCredentials = isRefreshingRosCredentials;
    /**
     * No comment provided
     *
     * Hash: 0x9D40DF90FAD26098 | Since: 323
     */
    function isScriptActive(scriptName, instance_id, position_hash) {
        return NetworkIsScriptActive(scriptName, instance_id, false, position_hash);
    }
    network.isScriptActive = isScriptActive;
    /**
     * No comment provided
     *
     * Hash: 0xDA7DE67F5FE5EE13 | Since: 2245
     */
    function isScriptActiveByHash(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return NetworkIsScriptActiveByHash(scriptHash, 0, false, 0);
    }
    network.isScriptActiveByHash = isScriptActiveByHash;
    /**
     * No comment provided
     *
     * Hash: 0xD83C2B94E7508980 | Since: 323
     */
    function isSessionActive() {
        return NetworkIsSessionActive();
    }
    network.isSessionActive = isSessionActive;
    /**
     * No comment provided
     *
     * Hash: 0xF4435D66A8E2905E | Since: 323
     */
    function isSessionBusy() {
        return NetworkIsSessionBusy();
    }
    network.isSessionBusy = isSessionBusy;
    /**
     * This checks if player is playing on gta online or not.
     * Please add an if and block your mod if this is "true".
     *
     * Hash: 0x9DE624D2FC4B603F | Since: 323
     */
    function isSessionStarted() {
        return NetworkIsSessionStarted();
    }
    network.isSessionStarted = isSessionStarted;
    /**
     * No comment provided
     *
     * Hash: 0x7788DFE15016A182 | Since: 2612
     */
    function isShowingSystemUiOrRecentlyRequestedUpsell() {
        return Citizen.invokeNative('0x7788DFE15016A182');
    }
    network.isShowingSystemUiOrRecentlyRequestedUpsell = isShowingSystemUiOrRecentlyRequestedUpsell;
    /**
     * Returns whether the player is signed into Social Club.
     *
     * Hash: 0x054354A99211EB96 | Since: 323
     */
    function isSignedIn() {
        return NetworkIsSignedIn();
    }
    network.isSignedIn = isSignedIn;
    /**
     * Returns whether the game is not in offline mode.
     *
     * seemed not to work for some ppl
     *
     * Hash: 0x1077788E268557C2 | Since: 323
     */
    function isSignedOnline() {
        return NetworkIsSignedOnline();
    }
    network.isSignedOnline = isSignedOnline;
    /**
     * No comment provided
     *
     * Hash: 0x560B423D73015E77 | Since: 1604
     */
    function isThreadANetworkScript(threadId) {
        return Citizen.invokeNative('0x560B423D73015E77', threadId);
    }
    network.isThreadANetworkScript = isThreadANetworkScript;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x6FB7BB3607D27FA2 | Since: 323
     */
    function isTitleUpdateRequired() {
        return Citizen.invokeNative('0x6FB7BB3607D27FA2');
    }
    network.isTitleUpdateRequired = isTitleUpdateRequired;
    /**
     * No comment provided
     *
     * Hash: 0x520F3282A53D26B7 | Since: 323
     */
    function isTransitionBusy() {
        return NetworkIsTransitionBusy();
    }
    network.isTransitionBusy = isTransitionBusy;
    /**
     * No comment provided
     *
     * Hash: 0x0DBD5D7E3C5BEC3B | Since: 323
     */
    function isTransitionClosedCrew() {
        return NetworkIsTransitionClosedCrew();
    }
    network.isTransitionClosedCrew = isTransitionClosedCrew;
    /**
     * No comment provided
     *
     * Hash: 0x6512765E3BE78C50 | Since: 323
     */
    function isTransitionClosedFriends() {
        return NetworkIsTransitionClosedFriends();
    }
    network.isTransitionClosedFriends = isTransitionClosedFriends;
    /**
     * No comment provided
     *
     * Hash: 0x0B824797C9BF2159 | Since: 323
     */
    function isTransitionHost() {
        return NetworkIsTransitionHost();
    }
    network.isTransitionHost = isTransitionHost;
    /**
     * No comment provided
     *
     * Hash: 0x6B5C83BA3EFE6A10 | Since: 323
     */
    function isTransitionHostFromHandle() {
        return NetworkIsTransitionHostFromHandle();
    }
    network.isTransitionHostFromHandle = isTransitionHostFromHandle;
    /**
     * No comment provided
     *
     * Hash: 0xC571D0E77D8BBC29 | Since: 323
     */
    function isTransitionLeavePostponed() {
        return Citizen.invokeNative('0xC571D0E77D8BBC29');
    }
    network.isTransitionLeavePostponed = isTransitionLeavePostponed;
    /**
     * No comment provided
     *
     * Hash: 0x292564C735375EDF | Since: 323
     */
    function isTransitionMatchmaking() {
        return NetworkIsTransitionMatchmaking();
    }
    network.isTransitionMatchmaking = isTransitionMatchmaking;
    /**
     * No comment provided
     *
     * Hash: 0x37A4494483B9F5C9 | Since: 323
     */
    function isTransitionOpenToMatchmaking() {
        return NetworkIsTransitionOpenToMatchmaking();
    }
    network.isTransitionOpenToMatchmaking = isTransitionOpenToMatchmaking;
    /**
     * No comment provided
     *
     * Hash: 0x5A6AA44FF8E931E6 | Since: 323
     */
    function isTransitionPrivate() {
        return NetworkIsTransitionPrivate();
    }
    network.isTransitionPrivate = isTransitionPrivate;
    /**
     * No comment provided
     *
     * Hash: 0x5DC577201723960A | Since: 323
     */
    function isTransitionSolo() {
        return NetworkIsTransitionSolo();
    }
    network.isTransitionSolo = isTransitionSolo;
    /**
     * No comment provided
     *
     * Hash: 0x53FA83401D9C07FE | Since: 323
     */
    function isTransitionStarted() {
        return NetworkIsTransitionStarted();
    }
    network.isTransitionStarted = isTransitionStarted;
    /**
     * No comment provided
     *
     * Hash: 0x9D7696D8F4FA6CB7 | Since: 323
     */
    function isTransitionToGame() {
        return NetworkIsTransitionToGame();
    }
    network.isTransitionToGame = isTransitionToGame;
    /**
     * No comment provided
     *
     * Hash: 0xD0A484CB2F829FBE | Since: 323
     */
    function isTransitionVisibilityLocked() {
        return NetworkIsTransitionVisibilityLocked();
    }
    network.isTransitionVisibilityLocked = isTransitionVisibilityLocked;
    /**
     * No comment provided
     *
     * Hash: 0x0467C11ED88B7D28 | Since: 323
     */
    function isTunableCloudRequestPending() {
        return NetworkIsTunableCloudRequestPending();
    }
    network.isTunableCloudRequestPending = isTunableCloudRequestPending;
    /**
     * No comment provided
     *
     * Hash: 0x35F0B98A8387274D | Since: 323
     */
    function isTutorialSessionChangePending() {
        return NetworkIsTutorialSessionChangePending();
    }
    network.isTutorialSessionChangePending = isTutorialSessionChangePending;
    /**
     * No comment provided
     *
     * Hash: 0x906CA41A4B74ECA4 | Since: 1493
     */
    function isUsingOnlinePromotion() {
        return Citizen.invokeNative('0x906CA41A4B74ECA4');
    }
    network.isUsingOnlinePromotion = isUsingOnlinePromotion;
    /**
     * No comment provided
     *
     * Hash: 0xA06509A691D12BE4 | Since: 323
     */
    function joinGroupActivity() {
        return NetworkJoinGroupActivity();
    }
    network.joinGroupActivity = joinGroupActivity;
    /**
     * No comment provided
     *
     * Hash: 0x59DF79317F85A7E0 | Since: 323
     */
    function joinPreviouslyFailedSession() {
        return NetworkJoinPreviouslyFailedSession();
    }
    network.joinPreviouslyFailedSession = joinPreviouslyFailedSession;
    /**
     * No comment provided
     *
     * Hash: 0xFFE1E5B792D92B34 | Since: 323
     */
    function joinPreviouslyFailedTransition() {
        return NetworkJoinPreviouslyFailedTransition();
    }
    network.joinPreviouslyFailedTransition = joinPreviouslyFailedTransition;
    /**
     * int handle[76];
     * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
     * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
     * NETWORK_JOIN_TRANSITION(uVar2);
     * nothing doin.
     *
     * Hash: 0x9D060B08CD63321A | Since: 323
     */
    function joinTransition(player) {
        return NetworkJoinTransition(player);
    }
    network.joinTransition = joinTransition;
    /**
     * No comment provided
     *
     * Hash: 0x17C9E241111A674D | Since: 2060
     */
    function keepEntityCollisionDisabledAfterAnimScene() {
        Citizen.invokeNative('0x17C9E241111A674D', undefined, undefined);
    }
    network.keepEntityCollisionDisabledAfterAnimScene = keepEntityCollisionDisabledAfterAnimScene;
    /**
     * No comment provided
     *
     * Hash: 0x2DCF46CB1A4F0884 | Since: 323
     */
    function launchTransition() {
        return NetworkLaunchTransition();
    }
    network.launchTransition = launchTransition;
    /**
     * No comment provided
     *
     * Hash: 0xBF22E0F32968E967 | Since: 323
     */
    function leavePedBehindBeforeCutscene(player) {
        Citizen.invokeNative('0xBF22E0F32968E967', player, false);
    }
    network.leavePedBehindBeforeCutscene = leavePedBehindBeforeCutscene;
    /**
     * p4 and p5 are always 0 in scripts
     *
     * Hash: 0x9769F811D1785B03 | Since: 323
     */
    function leavePedBehindBeforeWarp(player, pos) {
        NetworkRespawnCoords(player, pos.x, pos.y, pos.z, false, false);
    }
    network.leavePedBehindBeforeWarp = leavePedBehindBeforeWarp;
    /**
     * No comment provided
     *
     * Hash: 0xD23A1A815D21DB19 | Since: 323
     */
    function leaveTransition() {
        return NetworkLeaveTransition();
    }
    network.leaveTransition = leaveTransition;
    /**
     * No comment provided
     *
     * Hash: 0x261E97AD7BCF3D40 | Since: 323
     */
    function markAsPreferredActivity() {
        Citizen.invokeNative('0x261E97AD7BCF3D40', false);
    }
    network.markAsPreferredActivity = markAsPreferredActivity;
    /**
     * No comment provided
     *
     * Hash: 0x39917E1B4CB0F911 | Since: 323
     */
    function markAsWaitingAsync() {
        Citizen.invokeNative('0x39917E1B4CB0F911', false);
    }
    network.markAsWaitingAsync = markAsWaitingAsync;
    /**
     * No comment provided
     *
     * Hash: 0x5728BB6D63E3FF1D | Since: 323
     */
    function markTransitionGamerAsFullyJoined() {
        return NetworkMarkTransitionGamerAsFullyJoined();
    }
    network.markTransitionGamerAsFullyJoined = markTransitionGamerAsFullyJoined;
    /**
     * No comment provided
     *
     * Hash: 0xC82630132081BB6F | Since: 323
     */
    function memberIdFromGamerHandle() {
        return NetworkMemberIdFromGamerHandle();
    }
    network.memberIdFromGamerHandle = memberIdFromGamerHandle;
    /**
     * No comment provided
     *
     * Hash: 0x53C10C8BD774F2C9 | Since: 1011
     */
    function needToStartNewGameButBlocked() {
        return Citizen.invokeNative('0x53C10C8BD774F2C9');
    }
    network.needToStartNewGameButBlocked = needToStartNewGameButBlocked;
    /**
     * No comment provided
     *
     * Hash: 0x283B6062A2C01E9B | Since: 323
     */
    function onReturnToSinglePlayer() {
        Citizen.invokeNative('0x283B6062A2C01E9B');
    }
    network.onReturnToSinglePlayer = onReturnToSinglePlayer;
    /**
     * No comment provided
     *
     * Hash: 0x2B3A8F7CA3A38FDE | Since: 323
     */
    function openTransitionMatchmaking() {
        NetworkOpenTransitionMatchmaking();
    }
    network.openTransitionMatchmaking = openTransitionMatchmaking;
    /**
     * Could possibly bypass being muted or automatically muted
     *
     * Hash: 0x3039AE5AD2C9C0C4 | Since: 323
     */
    function overrideChatRestrictions(player, toggle) {
        NetworkOverrideChatRestrictions(player, toggle);
    }
    network.overrideChatRestrictions = overrideChatRestrictions;
    /**
     * No comment provided
     *
     * Hash: 0x42BF1D2E723B6D7E | Since: 2189
     */
    function overrideClockRate(ms) {
        NetworkOverrideClockMillisecondsPerGameMinute(ms);
    }
    network.overrideClockRate = overrideClockRate;
    /**
     * Works in Singleplayer too.
     * Passing wrong data (e.g. hours above 23) will cause the game to crash.
     *
     * Hash: 0xE679E3E06E363892 | Since: 323
     */
    function overrideClockTime(hours, minutes, seconds) {
        NetworkOverrideClockTime(hours, minutes, seconds);
    }
    network.overrideClockTime = overrideClockTime;
    /**
     * No comment provided
     *
     * Hash: 0xA7E30DE9272B6D49 | Since: 323
     */
    function overrideCoordsAndHeading(entity, pos, heading) {
        NetworkOverrideCoordsAndHeading(entity, pos.x, pos.y, pos.z, heading);
    }
    network.overrideCoordsAndHeading = overrideCoordsAndHeading;
    /**
     * R* uses this to hear all player when spectating.
     * It allows you to hear other online players when their chat is on none, crew and or friends
     *
     * Hash: 0xDDF73E2B1FEC5AB4 | Since: 323
     */
    function overrideReceiveRestrictions(player, toggle) {
        NetworkOverrideReceiveRestrictions(player, toggle);
    }
    network.overrideReceiveRestrictions = overrideReceiveRestrictions;
    /**
     * p0 is always false in scripts.
     *
     * Hash: 0x0FF2862B61A58AF9 | Since: 323
     */
    function overrideReceiveRestrictionsAll(toggle) {
        NetworkOverrideReceiveRestrictionsAll(toggle);
    }
    network.overrideReceiveRestrictionsAll = overrideReceiveRestrictionsAll;
    /**
     * This is used alongside the native,
     * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
     *
     * Hash: 0x97DD4C5944CC2E6A | Since: 323
     */
    function overrideSendRestrictions(player, toggle) {
        NetworkOverrideSendRestrictions(player, toggle);
    }
    network.overrideSendRestrictions = overrideSendRestrictions;
    /**
     * No comment provided
     *
     * Hash: 0x57B192B4D4AD23D5 | Since: 323
     */
    function overrideSendRestrictionsAll(toggle) {
        NetworkOverrideSendRestrictionsAll(toggle);
    }
    network.overrideSendRestrictionsAll = overrideSendRestrictionsAll;
    /**
     * No comment provided
     *
     * Hash: 0x6F697A66CE78674E | Since: 323
     */
    function overrideTeamRestrictions(team, toggle) {
        NetworkOverrideTeamRestrictions(team, toggle);
    }
    network.overrideTeamRestrictions = overrideTeamRestrictions;
    /**
     * No comment provided
     *
     * Hash: 0xAF66059A131AA269 | Since: 323
     */
    function overrideTransitionChat() {
        NetworkOverrideTransitionChat(false);
    }
    network.overrideTransitionChat = overrideTransitionChat;
    /**
     * No comment provided
     *
     * Hash: 0xF0BC9BCD24A511D5 | Since: 2372
     */
    function patchPostCutsceneHs4fTunEnt(ped) {
        NetworkPedForceGameStateUpdate(ped);
    }
    network.patchPostCutsceneHs4fTunEnt = patchPostCutsceneHs4fTunEnt;
    /**
     * No comment provided
     *
     * Hash: 0x559EBF901A8C68E0 | Since: 2699
     */
    function permissionsHasGamerRecord() {
        return Citizen.invokeNative('0x559EBF901A8C68E0');
    }
    network.permissionsHasGamerRecord = permissionsHasGamerRecord;
    /**
     * No comment provided
     *
     * Hash: 0x172F75B6EE2233BA | Since: 323
     */
    function playerGetCheaterReason() {
        return NetworkPlayerGetCheaterReason();
    }
    network.playerGetCheaterReason = playerGetCheaterReason;
    /**
     * Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
     *
     * Hash: 0x7718D2E2060837D2 | Since: 323
     */
    function playerGetName(player) {
        return NetworkPlayerGetName(player);
    }
    network.playerGetName = playerGetName;
    /**
     * Returns a string of the player's Rockstar Id.
     * Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
     *
     * Hash: 0x4927FC39CD0869A0 | Since: 323
     */
    function playerGetUserid(player) {
        return NetworkPlayerGetUserid(player);
    }
    network.playerGetUserid = playerGetUserid;
    /**
     * No comment provided
     *
     * Hash: 0x3FB99A8B08D18FD6 | Since: 323
     */
    function playerHasHeadset(player) {
        return NetworkPlayerHasHeadset(player);
    }
    network.playerHasHeadset = playerHasHeadset;
    /**
     * No comment provided
     *
     * Hash: 0x565E430DB3B05BEC | Since: 323
     */
    function playerIndexIsCheater(player) {
        return NetworkPlayerIndexIsCheater(player);
    }
    network.playerIndexIsCheater = playerIndexIsCheater;
    /**
     * No comment provided
     *
     * Hash: 0x19D8DA0E5A68045A | Since: 323
     */
    function playerIsBadsport() {
        return NetworkPlayerIsBadsport();
    }
    network.playerIsBadsport = playerIsBadsport;
    /**
     * No comment provided
     *
     * Hash: 0x655B91F1495A9090 | Since: 323
     */
    function playerIsCheater() {
        return NetworkPlayerIsCheater();
    }
    network.playerIsCheater = playerIsCheater;
    /**
     * Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
     * Returns always false in Singleplayer.
     *
     * No longer used for dev checks since first mods were released on PS3 & 360.
     * R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
     * if that is present it will unlock dev stuff.
     *
     * Hash: 0x544ABDDA3B409B6D | Since: 323
     */
    function playerIsRockstarDev(player) {
        return NetworkPlayerIsRockstarDev(player);
    }
    network.playerIsRockstarDev = playerIsRockstarDev;
    /**
     * No comment provided
     *
     * Hash: 0x2302C0264EA58D31 | Since: 323
     */
    function preventScriptHostMigration() {
        Citizen.invokeNative('0x2302C0264EA58D31');
    }
    network.preventScriptHostMigration = preventScriptHostMigration;
    /**
     * No comment provided
     *
     * Hash: 0x3C891A251567DFCE | Since: 323
     */
    function queryRespawnResults() {
        return NetworkQueryRespawnResults();
    }
    network.queryRespawnResults = queryRespawnResults;
    /**
     * No comment provided
     *
     * Hash: 0x85A0EF54A500882C | Since: 323
     */
    function queueGamerForStatus() {
        return NetworkQueueGamerForStatus();
    }
    network.queueGamerForStatus = queueGamerForStatus;
    /**
     * No comment provided
     *
     * Hash: 0x45A83257ED02D9BC | Since: 323
     */
    function quitMpToDesktop() {
        NetworkQuitMpToDesktop();
    }
    network.quitMpToDesktop = quitMpToDesktop;
    /**
     * No comment provided
     *
     * Hash: 0x06FAACD625D80CAA | Since: 323
     */
    function registerEntityAsNetworked(entity) {
        NetworkRegisterEntityAsNetworked(entity);
    }
    network.registerEntityAsNetworked = registerEntityAsNetworked;
    /**
     * No comment provided
     *
     * Hash: 0xEA8C0DDB10E2822A | Since: 1868
     */
    function registerHighFrequencyHostBroadcastVariables() {
        Citizen.invokeNative('0xEA8C0DDB10E2822A', undefined, undefined, undefined);
    }
    network.registerHighFrequencyHostBroadcastVariables = registerHighFrequencyHostBroadcastVariables;
    /**
     * No comment provided
     *
     * Hash: 0xD6D7478CA62B8D41 | Since: 1868
     */
    function registerHighFrequencyPlayerBroadcastVariables() {
        Citizen.invokeNative('0xD6D7478CA62B8D41', undefined, undefined, undefined);
    }
    network.registerHighFrequencyPlayerBroadcastVariables = registerHighFrequencyPlayerBroadcastVariables;
    /**
     * No comment provided
     *
     * Hash: 0x3E9B2F01C50DF595 | Since: 323
     */
    function registerHostBroadcastVariables(numVars, debugName) {
        return NetworkRegisterHostBroadcastVariables(numVars, debugName);
    }
    network.registerHostBroadcastVariables = registerHostBroadcastVariables;
    /**
     * No comment provided
     *
     * Hash: 0x3364AA97340CA215 | Since: 323
     */
    function registerPlayerBroadcastVariables(numVars, debugName) {
        return NetworkRegisterPlayerBroadcastVariables(numVars, debugName);
    }
    network.registerPlayerBroadcastVariables = registerPlayerBroadcastVariables;
    /**
     * No comment provided
     *
     * Hash: 0xCFEB46DCD7D8D5EB | Since: 323
     */
    function remainInGameChat() {
        Citizen.invokeNative('0xCFEB46DCD7D8D5EB', false);
    }
    network.remainInGameChat = remainInGameChat;
    /**
     * No comment provided
     *
     * Hash: 0x25D990F8E0E3F13C | Since: 323
     */
    function removeAllQueuedJoinRequests() {
        Citizen.invokeNative('0x25D990F8E0E3F13C');
    }
    network.removeAllQueuedJoinRequests = removeAllQueuedJoinRequests;
    /**
     * No comment provided
     *
     * Hash: 0x726E0375C7A26368 | Since: 323
     */
    function removeAllTransitionInvite() {
        NetworkRemoveAllTransitionInvite();
    }
    network.removeAllTransitionInvite = removeAllTransitionInvite;
    /**
     * No comment provided
     *
     * Hash: 0xEBF8284D8CADEB53 | Since: 323
     */
    function removeAndCancelAllInvites() {
        Citizen.invokeNative('0xEBF8284D8CADEB53');
    }
    network.removeAndCancelAllInvites = removeAndCancelAllInvites;
    /**
     * No comment provided
     *
     * Hash: 0xF083835B70BA9BFE | Since: 323
     */
    function removeAndCancelAllTransitionInvites() {
        Citizen.invokeNative('0xF083835B70BA9BFE');
    }
    network.removeAndCancelAllTransitionInvites = removeAndCancelAllTransitionInvites;
    /**
     * No comment provided
     *
     * Hash: 0x93CF869BAA0C4874 | Since: 323
     */
    function removeEntityArea(areaHandle) {
        return NetworkRemoveEntityArea(areaHandle);
    }
    network.removeEntityArea = removeEntityArea;
    /**
     * No comment provided
     *
     * Hash: 0x791EDB5803B2F468 | Since: 2545
     */
    function removeInvalidObjectModel(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        Citizen.invokeNative('0x791EDB5803B2F468', modelHash);
    }
    network.removeInvalidObjectModel = removeInvalidObjectModel;
    /**
     * No comment provided
     *
     * Hash: 0xF0210268DB0974B1 | Since: 323
     */
    function removePresenceInvite() {
        return NetworkRemovePresenceInvite(0);
    }
    network.removePresenceInvite = removePresenceInvite;
    /**
     * No comment provided
     *
     * Hash: 0x7524B431B2E6F7EE | Since: 323
     */
    function removeTransitionInvite() {
        return NetworkRemoveTransitionInvite();
    }
    network.removeTransitionInvite = removeTransitionInvite;
    /**
     * No comment provided
     *
     * Hash: 0x5626D9D6810730D5 | Since: 350
     */
    function reportCodeTamper() {
        NetworkReportMyself();
    }
    network.reportCodeTamper = reportCodeTamper;
    /**
     * No comment provided
     *
     * Hash: 0x924426BFFD82E915 | Since: 323
     */
    function requestCloudBackgroundScripts() {
        return NetworkRequestCloudBackgroundScripts();
    }
    network.requestCloudBackgroundScripts = requestCloudBackgroundScripts;
    /**
     * No comment provided
     *
     * Hash: 0x42FB3B532D526E6C | Since: 323
     */
    function requestCloudTunables() {
        NetworkRequestCloudTunables();
    }
    network.requestCloudTunables = requestCloudTunables;
    /**
     * No comment provided
     *
     * Hash: 0x870DDFD5A4A796E4 | Since: 323
     */
    function requestControlOfDoor(doorID) {
        return NetworkRequestControlOfDoor(doorID);
    }
    network.requestControlOfDoor = requestControlOfDoor;
    /**
     * No comment provided
     *
     * Hash: 0xB69317BF5E782347 | Since: 323
     */
    function requestControlOfEntity(entity) {
        return NetworkRequestControlOfEntity(entity);
    }
    network.requestControlOfEntity = requestControlOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0xA670B3662FAFFBD0 | Since: 323
     */
    function requestControlOfNetworkId(netId) {
        return NetworkRequestControlOfNetworkId(netId);
    }
    network.requestControlOfNetworkId = requestControlOfNetworkId;
    /**
     * Triggers a CEventNetworkInviteConfirmed event
     *
     * Hash: 0x62A0296C1BB1CEB3 | Since: 323
     */
    function requestInviteConfirmedEvent() {
        return NetworkAcceptInvite();
    }
    network.requestInviteConfirmedEvent = requestInviteConfirmedEvent;
    /**
     * No comment provided
     *
     * Hash: 0x741A3D8380319A81 | Since: 323
     */
    function requestToBeHostOfThisScript() {
        Citizen.invokeNative('0x741A3D8380319A81');
    }
    network.requestToBeHostOfThisScript = requestToBeHostOfThisScript;
    /**
     * No comment provided
     *
     * Hash: 0x72433699B4E6DD64 | Since: 323
     */
    function resetBodyTracker() {
        NetworkResetBodyTracker();
    }
    network.resetBodyTracker = resetBodyTracker;
    /**
     * Hardcoded to return true.
     *
     * Hash: 0xDE9225854F37BF72 | Since: 2612
     */
    function resolvePrivilegeUserContent() {
        return Citizen.invokeNative('0xDE9225854F37BF72');
    }
    network.resolvePrivilegeUserContent = resolvePrivilegeUserContent;
    /**
     * No comment provided
     *
     * Hash: 0xEA23C49EAA83ACFB | Since: 323
     */
    function resurrectLocalPlayer(pos, heading, changetime) {
        NetworkResurrectLocalPlayer(pos.x, pos.y, pos.z, heading, false, changetime, false, 0, 0);
    }
    network.resurrectLocalPlayer = resurrectLocalPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xB13E88E655E5A3BC | Since: 323
     */
    function retainActivityGroup() {
        Citizen.invokeNative('0xB13E88E655E5A3BC');
    }
    network.retainActivityGroup = retainActivityGroup;
    /**
     * No comment provided
     *
     * Hash: 0xF1B84178F8674195 | Since: 323
     */
    function seedRandomNumberGenerator(seed) {
        NetworkSeedRandomNumberGenerator(seed);
    }
    network.seedRandomNumberGenerator = seedRandomNumberGenerator;
    /**
     * Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
     *
     * Hash: 0x1171A97A3D3981B6 | Since: 323
     */
    function sendImportantTransitionInviteViaPresence(dataCount) {
        return Citizen.invokeNative('0x1171A97A3D3981B6', undefined, dataCount, 0);
    }
    network.sendImportantTransitionInviteViaPresence = sendImportantTransitionInviteViaPresence;
    /**
     * No comment provided
     *
     * Hash: 0xC3C7A6AFDB244624 | Since: 323
     */
    function sendInviteViaPresence(dataCount) {
        return NetworkSendInviteViaPresence(undefined, dataCount, 0);
    }
    network.sendInviteViaPresence = sendInviteViaPresence;
    /**
     * No comment provided
     *
     * Hash: 0xFA2888E3833C8E96 | Since: 323
     */
    function sendQueuedJoinRequest() {
        Citizen.invokeNative('0xFA2888E3833C8E96');
    }
    network.sendQueuedJoinRequest = sendQueuedJoinRequest;
    /**
     * Message is limited to 64 characters.
     *
     * Hash: 0x3A214F2EC889B100 | Since: 323
     */
    function sendTextMessage(message) {
        return NetworkSendTextMessage(message);
    }
    network.sendTextMessage = sendTextMessage;
    /**
     * No comment provided
     *
     * Hash: 0x31D1D2B858D25E6B | Since: 323
     */
    function sendTransitionGamerInstruction() {
        return NetworkSendTransitionGamerInstruction(undefined, 0, 0, false);
    }
    network.sendTransitionGamerInstruction = sendTransitionGamerInstruction;
    /**
     * No comment provided
     *
     * Hash: 0xC116FF9B4D488291 | Since: 323
     */
    function sendTransitionInviteViaPresence(dataCount) {
        return NetworkSendPresenceTransitionInvite(undefined, dataCount, 0);
    }
    network.sendTransitionInviteViaPresence = sendTransitionInviteViaPresence;
    /**
     * groupId range: [0, 4]
     *
     * Hash: 0xCAE55F48D3D7875C | Since: 323
     */
    function sessionAddActiveMatchmakingGroup(groupId) {
        NetworkSessionAddActiveMatchmakingGroup(groupId);
    }
    network.sessionAddActiveMatchmakingGroup = sessionAddActiveMatchmakingGroup;
    /**
     * No comment provided
     *
     * Hash: 0xA73667484D7037C3 | Since: 323
     */
    function sessionBlockJoinRequests(toggle) {
        NetworkSessionBlockJoinRequests(toggle);
    }
    network.sessionBlockJoinRequests = sessionBlockJoinRequests;
    /**
     * No comment provided
     *
     * Hash: 0x2FBF47B1B36D36F9 | Since: 323
     */
    function sessionCancelInvite() {
        NetworkSessionCancelInvite();
    }
    network.sessionCancelInvite = sessionCancelInvite;
    /**
     * num player slots allowed in session, seems to work? 32 max
     *
     * Hash: 0xB4AB419E0D86ACAE | Since: 323
     */
    function sessionChangeSlots(slots) {
        NetworkSessionChangeSlots(slots, false);
    }
    network.sessionChangeSlots = sessionChangeSlots;
    /**
     * No comment provided
     *
     * Hash: 0xBE3E347A87ACEB82 | Since: 323
     */
    function sessionDoActivityQuickmatch() {
        return NetworkSessionActivityQuickmatch(undefined, undefined, undefined, undefined, undefined);
    }
    network.sessionDoActivityQuickmatch = sessionDoActivityQuickmatch;
    /**
     * p4 seems to be unused in 1.60/build 2628
     *
     * Hash: 0x94BC51E9449D917F | Since: 323
     */
    function sessionDoCrewMatchmaking(crewId, maxPlayers) {
        return NetworkSessionCrewMatchmaking(crewId, 0, 0, maxPlayers);
    }
    network.sessionDoCrewMatchmaking = sessionDoCrewMatchmaking;
    /**
     * No comment provided
     *
     * Hash: 0x330ED4D05491934F | Since: 323
     */
    function sessionDoFreeroamQuickmatch() {
        return NetworkSessionEnter(undefined, undefined, undefined);
    }
    network.sessionDoFreeroamQuickmatch = sessionDoFreeroamQuickmatch;
    /**
     * No comment provided
     *
     * Hash: 0x2CFC76E0D087C994 | Since: 323
     */
    function sessionDoFriendMatchmaking() {
        return NetworkSessionFriendMatchmaking(0, 0, 0);
    }
    network.sessionDoFriendMatchmaking = sessionDoFriendMatchmaking;
    /**
     * No comment provided
     *
     * Hash: 0xA29177F7703B5644 | Since: 323
     */
    function sessionForceCancelInvite() {
        NetworkSessionForceCancelInvite();
    }
    network.sessionForceCancelInvite = sessionForceCancelInvite;
    /**
     * No comment provided
     *
     * Hash: 0xDFFA5BE8381C3314 | Since: 463
     */
    function sessionGetHostAimPreference() {
        return NetworkGetTargetingMode();
    }
    network.sessionGetHostAimPreference = sessionGetHostAimPreference;
    /**
     * No comment provided
     *
     * Hash: 0xE57397B4A3429DD0 | Since: 323
     */
    function sessionGetInviter() {
        return NetworkSessionGetInviter();
    }
    network.sessionGetInviter = sessionGetInviter;
    /**
     * No comment provided
     *
     * Hash: 0xD6D09A6F32F49EF1 | Since: 323
     */
    function sessionGetKickVote(player) {
        return NetworkSessionGetKickVote(player);
    }
    network.sessionGetKickVote = sessionGetKickVote;
    /**
     * No comment provided
     *
     * Hash: 0x56CE820830EF040B | Since: 323
     */
    function sessionGetMatchmakingGroupFree() {
        return NetworkSessionGetMatchmakingGroupFree(0);
    }
    network.sessionGetMatchmakingGroupFree = sessionGetMatchmakingGroupFree;
    /**
     * No comment provided
     *
     * Hash: 0x53AFD64C6758F2F9 | Since: 323
     */
    function sessionGetPrivateSlots() {
        return NetworkSessionGetPrivateSlots();
    }
    network.sessionGetPrivateSlots = sessionGetPrivateSlots;
    /**
     * No comment provided
     *
     * Hash: 0xCDC936BF35EDCB73 | Since: 3095
     */
    function sessionGetUniqueCrewLimit() {
        return Citizen.invokeNative('0xCDC936BF35EDCB73');
    }
    network.sessionGetUniqueCrewLimit = sessionGetUniqueCrewLimit;
    /**
     * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
     *
     * Hash: 0x6F3D4ED9BEE4E61D | Since: 323
     */
    function sessionHost(maxPlayers) {
        return NetworkSessionHost(0, maxPlayers, false);
    }
    network.sessionHost = sessionHost;
    /**
     * No comment provided
     *
     * Hash: 0xED34C0C02C098BB7 | Since: 323
     */
    function sessionHostClosed(maxPlayers) {
        return NetworkSessionHostClosed(0, maxPlayers);
    }
    network.sessionHostClosed = sessionHostClosed;
    /**
     * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
     *
     * Hash: 0xB9CFD27A5D578D83 | Since: 323
     */
    function sessionHostFriendsOnly(maxPlayers) {
        return NetworkSessionHostFriendsOnly(0, maxPlayers);
    }
    network.sessionHostFriendsOnly = sessionHostFriendsOnly;
    /**
     * Loads up the map that is loaded when beeing in mission creator
     * Player gets placed in a mix between online/offline mode
     * p0 is always 2 in R* scripts.
     *
     * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
     *
     * Hash: 0xC74C33FCA52856D5 | Since: 323
     */
    function sessionHostSinglePlayer() {
        NetworkSessionHostSinglePlayer(0);
    }
    network.sessionHostSinglePlayer = sessionHostSinglePlayer;
    /**
     * Seems to be true while "Getting GTA Online session details" shows up.
     *
     * Hash: 0xD313DE83394AF134 | Since: 323
     */
    function sessionIsAwaitingInviteResponse() {
        return Citizen.invokeNative('0xD313DE83394AF134');
    }
    network.sessionIsAwaitingInviteResponse = sessionIsAwaitingInviteResponse;
    /**
     * No comment provided
     *
     * Hash: 0x74732C6CA90DA2B4 | Since: 323
     */
    function sessionIsClosedCrew() {
        return NetworkSessionIsClosedCrew();
    }
    network.sessionIsClosedCrew = sessionIsClosedCrew;
    /**
     * No comment provided
     *
     * Hash: 0xFBCFA2EA2E206890 | Since: 323
     */
    function sessionIsClosedFriends() {
        return NetworkSessionIsClosedFriends();
    }
    network.sessionIsClosedFriends = sessionIsClosedFriends;
    /**
     * No comment provided
     *
     * Hash: 0xBDB6F89C729CF388 | Since: 323
     */
    function sessionIsDisplayingInviteConfirmation() {
        return Citizen.invokeNative('0xBDB6F89C729CF388');
    }
    network.sessionIsDisplayingInviteConfirmation = sessionIsDisplayingInviteConfirmation;
    /**
     * No comment provided
     *
     * Hash: 0x855BC38818F6F684 | Since: 323
     */
    function sessionIsInVoiceSession() {
        return NetworkSessionIsInVoiceSession();
    }
    network.sessionIsInVoiceSession = sessionIsInVoiceSession;
    /**
     * No comment provided
     *
     * Hash: 0xCEF70AA5B3F89BA1 | Since: 323
     */
    function sessionIsPrivate() {
        return NetworkSessionIsPrivate();
    }
    network.sessionIsPrivate = sessionIsPrivate;
    /**
     * No comment provided
     *
     * Hash: 0xF3929C2379B60CCE | Since: 323
     */
    function sessionIsSolo() {
        return NetworkSessionIsSolo();
    }
    network.sessionIsSolo = sessionIsSolo;
    /**
     * No comment provided
     *
     * Hash: 0xBA416D68C631496A | Since: 323
     */
    function sessionIsVisible() {
        return NetworkSessionIsVisible();
    }
    network.sessionIsVisible = sessionIsVisible;
    /**
     * No comment provided
     *
     * Hash: 0xB5D3453C98456528 | Since: 323
     */
    function sessionIsVoiceSessionActive() {
        return Citizen.invokeNative('0xB5D3453C98456528');
    }
    network.sessionIsVoiceSessionActive = sessionIsVoiceSessionActive;
    /**
     * No comment provided
     *
     * Hash: 0xEF0912DDF7C4CB4B | Since: 323
     */
    function sessionIsVoiceSessionBusy() {
        return NetworkSessionIsVoiceSessionBusy();
    }
    network.sessionIsVoiceSessionBusy = sessionIsVoiceSessionBusy;
    /**
     * No comment provided
     *
     * Hash: 0xC6F8AB8A4189CF3A | Since: 323
     */
    function sessionJoinInvite() {
        NetworkSessionJoinInvite();
    }
    network.sessionJoinInvite = sessionJoinInvite;
    /**
     * Only works as host.
     *
     * Hash: 0xFA8904DC5F304220 | Since: 323
     */
    function sessionKickPlayer(player) {
        NetworkSessionKickPlayer(player);
    }
    network.sessionKickPlayer = sessionKickPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xB9351A07A0D458B1 | Since: 2060
     */
    function sessionLeave() {
        return Citizen.invokeNative('0xB9351A07A0D458B1', undefined);
    }
    network.sessionLeave = sessionLeave;
    /**
     * No comment provided
     *
     * Hash: 0x3442775428FD2DAA | Since: 323
     */
    function sessionLeaveSinglePlayer() {
        NetworkSessionLeaveSinglePlayer();
    }
    network.sessionLeaveSinglePlayer = sessionLeaveSinglePlayer;
    /**
     * No comment provided
     *
     * Hash: 0x271CC6AB59EBF9A5 | Since: 323
     */
    function sessionMarkVisible(toggle) {
        NetworkSessionMarkVisible(toggle);
    }
    network.sessionMarkVisible = sessionMarkVisible;
    /**
     * No comment provided
     *
     * Hash: 0x041C7F2A6C9894E6 | Since: 463
     */
    function sessionReserveSlotsTransition() {
        return Citizen.invokeNative('0x041C7F2A6C9894E6', undefined, undefined, undefined);
    }
    network.sessionReserveSlotsTransition = sessionReserveSlotsTransition;
    /**
     * No comment provided
     *
     * Hash: 0x702BC4D605522539 | Since: 323
     */
    function sessionSetCrewLimitMaxMembersTransition() {
        Citizen.invokeNative('0x702BC4D605522539', undefined);
    }
    network.sessionSetCrewLimitMaxMembersTransition = sessionSetCrewLimitMaxMembersTransition;
    /**
     * No comment provided
     *
     * Hash: 0x600F8CB31C7AAB6E | Since: 323
     */
    function sessionSetGamemode() {
        Citizen.invokeNative('0x600F8CB31C7AAB6E', undefined);
    }
    network.sessionSetGamemode = sessionSetGamemode;
    /**
     * No comment provided
     *
     * Hash: 0x49EC8030F5015F8B | Since: 323
     */
    function sessionSetMatchmakingGroup(matchmakingGroup) {
        NetworkSessionSetMatchmakingGroup(matchmakingGroup);
    }
    network.sessionSetMatchmakingGroup = sessionSetMatchmakingGroup;
    /**
     * playerType is an unsigned int from 0 to 4
     * 0 = regular joiner
     * 4 = spectator
     *
     * Hash: 0x8B6A4DD0AF9CE215 | Since: 323
     */
    function sessionSetMatchmakingGroupMax(playerType, playerCount) {
        NetworkSessionSetMatchmakingGroupMax(playerType, playerCount);
    }
    network.sessionSetMatchmakingGroupMax = sessionSetMatchmakingGroupMax;
    /**
     * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
     *
     * Hash: 0xF1EEA2DDA9FFA69D | Since: 323
     */
    function sessionSetMatchmakingMentalState() {
        NetworkSessionSetMatchmakingMentalState(0);
    }
    network.sessionSetMatchmakingMentalState = sessionSetMatchmakingMentalState;
    /**
     * No comment provided
     *
     * Hash: 0x3F52E880AAF6C8CA | Since: 323
     */
    function sessionSetMatchmakingPropertyId() {
        NetworkSessionSetMatchmakingPropertyId(false);
    }
    network.sessionSetMatchmakingPropertyId = sessionSetMatchmakingPropertyId;
    /**
     * No comment provided
     *
     * Hash: 0x59D421683D31835A | Since: 573
     */
    function sessionSetNumBosses(num) {
        Citizen.invokeNative('0x59D421683D31835A', num);
    }
    network.sessionSetNumBosses = sessionSetNumBosses;
    /**
     * No comment provided
     *
     * Hash: 0x1153FA02A659051C | Since: 323
     */
    function sessionSetScriptValidateJoin() {
        Citizen.invokeNative('0x1153FA02A659051C');
    }
    network.sessionSetScriptValidateJoin = sessionSetScriptValidateJoin;
    /**
     * No comment provided
     *
     * Hash: 0xF49ABC20D8552257 | Since: 323
     */
    function sessionSetUniqueCrewLimit() {
        Citizen.invokeNative('0xF49ABC20D8552257', undefined);
    }
    network.sessionSetUniqueCrewLimit = sessionSetUniqueCrewLimit;
    /**
     * No comment provided
     *
     * Hash: 0x4811BBAC21C5FCD5 | Since: 323
     */
    function sessionSetUniqueCrewLimitTransition() {
        Citizen.invokeNative('0x4811BBAC21C5FCD5', undefined);
    }
    network.sessionSetUniqueCrewLimitTransition = sessionSetUniqueCrewLimitTransition;
    /**
     * No comment provided
     *
     * Hash: 0x5539C3EBF104A53A | Since: 323
     */
    function sessionSetUniqueCrewOnlyCrewsTransition() {
        Citizen.invokeNative('0x5539C3EBF104A53A', false);
    }
    network.sessionSetUniqueCrewOnlyCrewsTransition = sessionSetUniqueCrewOnlyCrewsTransition;
    /**
     * No comment provided
     *
     * Hash: 0xC19F6C8E7865A6FF | Since: 323
     */
    function sessionValidateJoin() {
        NetworkSessionValidateJoin(false);
    }
    network.sessionValidateJoin = sessionValidateJoin;
    /**
     * No comment provided
     *
     * Hash: 0xABD5E88B8A2D3DB2 | Since: 323
     */
    function sessionVoiceConnectToPlayer() {
        return NetworkSessionVoiceConnectToPlayer();
    }
    network.sessionVoiceConnectToPlayer = sessionVoiceConnectToPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x9C1556705F864230 | Since: 323
     */
    function sessionVoiceHost() {
        return NetworkSessionVoiceHost();
    }
    network.sessionVoiceHost = sessionVoiceHost;
    /**
     * No comment provided
     *
     * Hash: 0x6793E42BE02B575D | Since: 323
     */
    function sessionVoiceLeave() {
        return NetworkSessionVoiceLeave();
    }
    network.sessionVoiceLeave = sessionVoiceLeave;
    /**
     * No comment provided
     *
     * Hash: 0x7F8413B7FC2AA6B9 | Since: 323
     */
    function sessionVoiceRespondToRequest() {
        NetworkSessionVoiceRespondToRequest(false, 0);
    }
    network.sessionVoiceRespondToRequest = sessionVoiceRespondToRequest;
    /**
     * No comment provided
     *
     * Hash: 0x5B8ED3DB018927B1 | Since: 323
     */
    function sessionVoiceSetTimeout(timeout) {
        NetworkSessionVoiceSetTimeout(timeout);
    }
    network.sessionVoiceSetTimeout = sessionVoiceSetTimeout;
    /**
     * No comment provided
     *
     * Hash: 0x23DFB504655D0CE4 | Since: 323
     */
    function sessionWasInvited() {
        return NetworkSessionWasInvited();
    }
    network.sessionWasInvited = sessionWasInvited;
    /**
     * No comment provided
     *
     * Hash: 0x0E4F77F7B9D74D84 | Since: 573
     */
    function setActivityPlayerMax() {
        NetworkSetActivityPlayerMax(undefined);
    }
    network.setActivityPlayerMax = setActivityPlayerMax;
    /**
     * No comment provided
     *
     * Hash: 0x75138790B4359A74 | Since: 323
     */
    function setActivitySpectator(toggle) {
        NetworkSetActivitySpectator(toggle);
    }
    network.setActivitySpectator = setActivitySpectator;
    /**
     * No comment provided
     *
     * Hash: 0x9D277B76D1D12222 | Since: 323
     */
    function setActivitySpectatorMax(maxSpectators) {
        NetworkSetActivitySpectatorMax(maxSpectators);
    }
    network.setActivitySpectatorMax = setActivitySpectatorMax;
    /**
     * No comment provided
     *
     * Hash: 0x5C707A667DF8B9FA | Since: 323
     */
    function setAntagonisticToPlayer(toggle, player) {
        NetworkSetChoiceMigrateOptions(toggle, player);
    }
    network.setAntagonisticToPlayer = setAntagonisticToPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x0EDE326D47CD0F3E | Since: 323
     */
    function setAttributeDamageToPlayer(ped, player) {
        return Citizen.invokeNative('0x0EDE326D47CD0F3E', ped, player);
    }
    network.setAttributeDamageToPlayer = setAttributeDamageToPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x68980414688F7F9D | Since: 2612
     */
    function setCanReceiveRsInvites() {
        Citizen.invokeNative('0x68980414688F7F9D', false);
    }
    network.setCanReceiveRsInvites = setCanReceiveRsInvites;
    /**
     * No comment provided
     *
     * Hash: 0x7206F674F2A3B1BB | Since: 323
     */
    function setCurrentlySelectedGamerHandleFromInviteMenu() {
        return NetworkSetCurrentlySelectedGamerHandleFromInviteMenu();
    }
    network.setCurrentlySelectedGamerHandleFromInviteMenu = setCurrentlySelectedGamerHandleFromInviteMenu;
    /**
     * No comment provided
     *
     * Hash: 0x3DAD00265FBF356B | Since: 2802
     */
    function setCurrentChatOption(newChatOption) {
        Citizen.invokeNative('0x3DAD00265FBF356B', newChatOption);
    }
    network.setCurrentChatOption = setCurrentChatOption;
    /**
     * No comment provided
     *
     * Hash: 0x796A87B3B68D1F3D | Since: 323
     */
    function setCurrentDataManagerHandle() {
        return NetworkSetCurrentDataManagerHandle();
    }
    network.setCurrentDataManagerHandle = setCurrentDataManagerHandle;
    /**
     * No comment provided
     *
     * Hash: 0x2C863ACDCD12B3DB | Since: 2699
     */
    function setCurrentPublicContentId(missionId) {
        NetworkSetCurrentMissionId(missionId);
    }
    network.setCurrentPublicContentId = setCurrentPublicContentId;
    /**
     * mpSettingSpawn:
     *
     * enum eMpSettingSpawn
     * {
     * MP_SETTING_SPAWN_NULL,
     * MP_SETTING_SPAWN_PROPERTY,
     * MP_SETTING_SPAWN_LAST_POSITION,
     * MP_SETTING_SPAWN_GARAGE,
     * MP_SETTING_SPAWN_RANDOM,
     * MP_SETTING_SPAWN_PRIVATE_YACHT,
     * MP_SETTING_SPAWN_OFFICE,
     * MP_SETTING_SPAWN_CLUBHOUSE,
     * MP_SETTING_SPAWN_IE_WAREHOUSE,
     * MP_SETTING_SPAWN_BUNKER,
     * MP_SETTING_SPAWN_HANGAR,
     * MP_SETTING_SPAWN_DEFUNCT_BASE,
     * MP_SETTING_SPAWN_NIGHTCLUB,
     * MP_SETTING_SPAWN_ARENA_GARAGE,
     * MP_SETTING_SPAWN_CASINO_APARTMENT,
     * MP_SETTING_SPAWN_ARCADE,
     * MP_SETTING_SPAWN_SUBMARINE,
     * MP_SETTING_SPAWN_CAR_MEET,
     * MP_SETTING_SPAWN_AUTO_SHOP,
     * MP_SETTING_SPAWN_FIXER_HQ,
     * MP_SETTING_SPAWN_MAX,
     * };
     *
     * Hash: 0xAA6D5451DC3448B6 | Since: 2699
     */
    function setCurrentSpawnLocationOption(mpSettingSpawn) {
        if (typeof mpSettingSpawn === 'string')
            mpSettingSpawn = misc.getHashKey(mpSettingSpawn);
        NetworkSetCurrentSpawnSetting(mpSettingSpawn);
    }
    network.setCurrentSpawnLocationOption = setCurrentSpawnLocationOption;
    /**
     * No comment provided
     *
     * Hash: 0xA6FCECCF4721D679 | Since: 1604
     */
    function setCustomArenaBallParams(netId) {
        Citizen.invokeNative('0xA6FCECCF4721D679', netId);
    }
    network.setCustomArenaBallParams = setCustomArenaBallParams;
    /**
     * Appears to set whether a transition should be started when the session is migrating.
     *
     * Hash: 0xA2E9C1AB8A92E8CD | Since: 323
     */
    function setDoNotLaunchFromJoinAsMigratedHost(toggle) {
        Citizen.invokeNative('0xA2E9C1AB8A92E8CD', toggle);
    }
    network.setDoNotLaunchFromJoinAsMigratedHost = setDoNotLaunchFromJoinAsMigratedHost;
    /**
     * No comment provided
     *
     * Hash: 0xD830567D88A1E873 | Since: 323
     */
    function setEntityCanBlend(entity, toggle) {
        NetworkSetEntityCanBlend(entity, toggle);
    }
    network.setEntityCanBlend = setEntityCanBlend;
    /**
     * if set to true other network players can't see it
     * if set to false other network player can see it
     * =========================================
     * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
     *
     * pc or last gen?
     *
     * ^^ last-gen
     *
     * Hash: 0xF1CA12B18AEF5298 | Since: 323
     */
    function setEntityOnlyExistsForParticipants(entity, toggle) {
        NetworkSetEntityInvisibleToNetwork(entity, toggle);
    }
    network.setEntityOnlyExistsForParticipants = setEntityOnlyExistsForParticipants;
    /**
     * No comment provided
     *
     * Hash: 0xF808475FA571D823 | Since: 323
     */
    function setFriendlyFireOption(toggle) {
        NetworkSetFriendlyFireOption(toggle);
    }
    network.setFriendlyFireOption = setFriendlyFireOption;
    /**
     * No comment provided
     *
     * Hash: 0xCA2C8073411ECDB6 | Since: 323
     */
    function setGamerInvitedToTransition() {
        return NetworkSetGamerInvitedToTransition();
    }
    network.setGamerInvitedToTransition = setGamerInvitedToTransition;
    /**
     * No comment provided
     *
     * Hash: 0x6A5D89D7769A40D8 | Since: 323
     */
    function setIgnoreSpectatorChatLimitsSameTeam(toggle) {
        Citizen.invokeNative('0x6A5D89D7769A40D8', toggle);
    }
    network.setIgnoreSpectatorChatLimitsSameTeam = setIgnoreSpectatorChatLimitsSameTeam;
    /**
     * No comment provided
     *
     * Hash: 0x0D77A82DC2D0DA59 | Since: 323
     */
    function setInviteFailedMessageForInviteMenu() {
        return Citizen.invokeNative('0x0D77A82DC2D0DA59');
    }
    network.setInviteFailedMessageForInviteMenu = setInviteFailedMessageForInviteMenu;
    /**
     * No comment provided
     *
     * Hash: 0x66F010A4B031A331 | Since: 323
     */
    function setInviteOnCallForInviteMenu() {
        return NetworkSetInviteOnCallForInviteMenu();
    }
    network.setInviteOnCallForInviteMenu = setInviteOnCallForInviteMenu;
    /**
     * No comment provided
     *
     * Hash: 0xFC18DB55AE19E046 | Since: 323
     */
    function setInFreeCamMode(toggle) {
        NetworkSetInFreeCamMode(toggle);
    }
    network.setInFreeCamMode = setInFreeCamMode;
    /**
     * No comment provided
     *
     * Hash: 0x9CA5DE655269FEC4 | Since: 323
     */
    function setInMpCutscene() {
        NetworkSetInMpCutscene(false, false);
    }
    network.setInMpCutscene = setInMpCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x2CE9D95E4051AECD | Since: 678
     */
    function setInProgressFinishTime() {
        Citizen.invokeNative('0x2CE9D95E4051AECD', undefined);
    }
    network.setInProgressFinishTime = setInProgressFinishTime;
    /**
     * No comment provided
     *
     * Hash: 0x423DE3854BB50894 | Since: 323
     */
    function setInSpectatorMode(toggle, playerPed) {
        NetworkSetInSpectatorMode(toggle, playerPed);
    }
    network.setInSpectatorMode = setInSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0x419594E137637120 | Since: 323
     */
    function setInSpectatorModeExtended(toggle, playerPed) {
        NetworkSetInSpectatorModeExtended(toggle, playerPed, false);
    }
    network.setInSpectatorModeExtended = setInSpectatorModeExtended;
    /**
     * No comment provided
     *
     * Hash: 0x2D95C7E2D7E07307 | Since: 323
     */
    function setLocalPlayerInvincibleTime(time) {
        NetworkSetLocalPlayerInvincibleTime(time);
    }
    network.setLocalPlayerInvincibleTime = setLocalPlayerInvincibleTime;
    /**
     * No comment provided
     *
     * Hash: 0x524FF0AEFF9C3973 | Since: 323
     */
    function setLocalPlayerSyncLookAt(toggle) {
        NetworkSetLocalPlayerSyncLookAt(toggle);
    }
    network.setLocalPlayerSyncLookAt = setLocalPlayerSyncLookAt;
    /**
     * No comment provided
     *
     * Hash: 0x7D395EA61622E116 | Since: 323
     */
    function setLookAtTalkers() {
        Citizen.invokeNative('0x7D395EA61622E116', false);
    }
    network.setLookAtTalkers = setLookAtTalkers;
    /**
     * No comment provided
     *
     * Hash: 0x94538037EE44F5CF | Since: 323
     */
    function setMinimumRankForMission() {
        Citizen.invokeNative('0x94538037EE44F5CF', false);
    }
    network.setMinimumRankForMission = setMinimumRankForMission;
    /**
     * No comment provided
     *
     * Hash: 0x3B3D11CD9FFCDFC9 | Since: 323
     */
    function setMissionFinished() {
        NetworkSetMissionFinished();
    }
    network.setMissionFinished = setMissionFinished;
    /**
     * No comment provided
     *
     * Hash: 0x3FC795691834481D | Since: 1868
     */
    function setNoLongerNeeded(entity, toggle) {
        Citizen.invokeNative('0x3FC795691834481D', entity, toggle);
    }
    network.setNoLongerNeeded = setNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0xF46A1E03E8755980 | Since: 323
     */
    function setNoSpectatorChat(toggle) {
        NetworkSetNoSpectatorChat(toggle);
    }
    network.setNoSpectatorChat = setNoSpectatorChat;
    /**
     * No comment provided
     *
     * Hash: 0x0379DAF89BA09AA5 | Since: 944
     */
    function setObjectCanBlendWhenFixed(_object, toggle) {
        NetworkSetObjectForceStaticBlend(_object, toggle);
    }
    network.setObjectCanBlendWhenFixed = setObjectCanBlendWhenFixed;
    /**
     * No comment provided
     *
     * Hash: 0xBA7F0B77D80A4EB7 | Since: 372
     */
    function setObjectScopeDistance(_object, range) {
        Citizen.invokeNative('0xBA7F0B77D80A4EB7', _object, range);
    }
    network.setObjectScopeDistance = setObjectScopeDistance;
    /**
     * No comment provided
     *
     * Hash: 0x70DA3BF8DACD3210 | Since: 323
     */
    function setOverrideSpectatorMode(toggle) {
        NetworkSetOverrideSpectatorMode(toggle);
    }
    network.setOverrideSpectatorMode = setOverrideSpectatorMode;
    /**
     * No comment provided
     *
     * Hash: 0x3C5C1E2C2FF814B1 | Since: 323
     */
    function setOverrideTutorialSessionChat(toggle) {
        Citizen.invokeNative('0x3C5C1E2C2FF814B1', toggle);
    }
    network.setOverrideTutorialSessionChat = setOverrideTutorialSessionChat;
    /**
     * No comment provided
     *
     * Hash: 0x1B857666604B1A74 | Since: 323
     */
    function setPlayerIsPassive(toggle) {
        NetworkSetPlayerIsPassive(toggle);
    }
    network.setPlayerIsPassive = setPlayerIsPassive;
    /**
     * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
     *
     * Hash: 0x367EF5E2F439B4C6 | Since: 323
     */
    function setPlayerMentalState() {
        Citizen.invokeNative('0x367EF5E2F439B4C6', 0);
    }
    network.setPlayerMentalState = setPlayerMentalState;
    /**
     * Does nothing. It's just a nullsub.
     *
     * Hash: 0x4A9FDE3A5A6D0437 | Since: 323
     */
    function setPresenceSessionInvitesBlocked(toggle) {
        Citizen.invokeNative('0x4A9FDE3A5A6D0437', toggle);
    }
    network.setPresenceSessionInvitesBlocked = setPresenceSessionInvitesBlocked;
    /**
     * No comment provided
     *
     * Hash: 0x1F7BC3539F9E0224 | Since: 1180
     */
    function setPrivilegeCheckResultNotNeeded() {
        Citizen.invokeNative('0x1F7BC3539F9E0224');
    }
    network.setPrivilegeCheckResultNotNeeded = setPrivilegeCheckResultNotNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x9D7AFCBF21C51712 | Since: 323
     */
    function setProximityAffectsTeam(toggle) {
        Citizen.invokeNative('0x9D7AFCBF21C51712', toggle);
    }
    network.setProximityAffectsTeam = setProximityAffectsTeam;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x1DCCACDCFC569362 | Since: 323
     */
    function setRichPresence() {
        NetworkSetRichPresence(0, 0, undefined, undefined);
    }
    network.setRichPresence = setRichPresence;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x3E200C2BCF4164EB | Since: 323
     */
    function setRichPresenceString(textLabel) {
        NetworkSetRichPresenceString(0, textLabel);
    }
    network.setRichPresenceString = setRichPresenceString;
    /**
     * No comment provided
     *
     * Hash: 0x4348BFDA56023A2F | Since: 573
     */
    function setSameTeamAsLocalPlayer() {
        return Citizen.invokeNative('0x4348BFDA56023A2F', undefined, undefined);
    }
    network.setSameTeamAsLocalPlayer = setSameTeamAsLocalPlayer;
    /**
     * No comment provided
     *
     * Hash: 0xB309EBEA797E001F | Since: 323
     */
    function setScriptAutomuted() {
        return Citizen.invokeNative('0xB309EBEA797E001F', undefined);
    }
    network.setScriptAutomuted = setScriptAutomuted;
    /**
     * No comment provided
     *
     * Hash: 0x265559DA40B3F327 | Since: 573
     */
    function setScriptControllingTeams() {
        Citizen.invokeNative('0x265559DA40B3F327', undefined);
    }
    network.setScriptControllingTeams = setScriptControllingTeams;
    /**
     * No comment provided
     *
     * Hash: 0x7AC752103856FB20 | Since: 323
     */
    function setScriptReadyForEvents(toggle) {
        NetworkSetScriptReadyForEvents(toggle);
    }
    network.setScriptReadyForEvents = setScriptReadyForEvents;
    /**
     * No comment provided
     *
     * Hash: 0x8EF52ACAECC51D9C | Since: 1734
     */
    function setSpectatorToNonSpectatorTextChat(toggle) {
        Citizen.invokeNative('0x8EF52ACAECC51D9C', toggle);
    }
    network.setSpectatorToNonSpectatorTextChat = setSpectatorToNonSpectatorTextChat;
    /**
     * No comment provided
     *
     * Hash: 0xCBF12D65F95AD686 | Since: 323
     */
    function setTalkerProximity(value) {
        NetworkSetTalkerProximity(value);
    }
    network.setTalkerProximity = setTalkerProximity;
    /**
     * A value between 1.0 and 5.0
     *
     * Hash: 0xC6FCEE21C6FCEE21 | Since: 2545
     */
    function setTaskCutsceneInscopeMultipler(multiplier) {
        Citizen.invokeNative('0xC6FCEE21C6FCEE21', multiplier);
    }
    network.setTaskCutsceneInscopeMultipler = setTaskCutsceneInscopeMultipler;
    /**
     * No comment provided
     *
     * Hash: 0xD5B4883AC32F24C3 | Since: 323
     */
    function setTeamOnlyChat(toggle) {
        NetworkSetTeamOnlyChat(toggle);
    }
    network.setTeamOnlyChat = setTeamOnlyChat;
    /**
     * No comment provided
     *
     * Hash: 0x1CA59E306ECB80A5 | Since: 323
     */
    function setThisScriptIsNetworkScript(maxNumMissionParticipants, instanceId) {
        NetworkSetThisScriptIsNetworkScript(maxNumMissionParticipants, false, instanceId);
    }
    network.setThisScriptIsNetworkScript = setThisScriptIsNetworkScript;
    /**
     * No comment provided
     *
     * Hash: 0x30DE938B516F0AD2 | Since: 323
     */
    function setTransitionActivityId() {
        NetworkSetTransitionActivityId(undefined);
    }
    network.setTransitionActivityId = setTransitionActivityId;
    /**
     * No comment provided
     *
     * Hash: 0xEF26739BCD9907D5 | Since: 323
     */
    function setTransitionCreatorHandle() {
        return NetworkSetTransitionCreatorHandle();
    }
    network.setTransitionCreatorHandle = setTransitionCreatorHandle;
    /**
     * No comment provided
     *
     * Hash: 0x0C978FDA19692C2C | Since: 323
     */
    function setTransitionVisibilityLock() {
        NetworkSetTransitionVisibilityLock(false, false);
    }
    network.setTransitionVisibilityLock = setTransitionVisibilityLock;
    /**
     * Used by MetricVEHICLE_DIST_DRIVEN
     *
     * Hash: 0x8C70252FC40F320B | Since: 2699
     */
    function setVehicleDrivenInTestDrive(toggle) {
        NetworkSetVehicleTestDrive(toggle);
    }
    network.setVehicleDrivenInTestDrive = setVehicleDrivenInTestDrive;
    /**
     * Sets 'loc' variable used in MetricVEHICLE_DIST_DRIVEN
     *
     * Hash: 0xA0CE91E47531D3BB | Since: 2944
     */
    function setVehicleDrivenLocation(location) {
        if (typeof location === 'string')
            location = misc.getHashKey(location);
        Citizen.invokeNative('0xA0CE91E47531D3BB', location);
    }
    network.setVehicleDrivenLocation = setVehicleDrivenLocation;
    /**
     * No comment provided
     *
     * Hash: 0xBABEC9E69A91C57B | Since: 323
     */
    function setVoiceActive(toggle) {
        NetworkSetVoiceActive(toggle);
    }
    network.setVoiceActive = setVoiceActive;
    /**
     * No comment provided
     *
     * Hash: 0xEF6212C2EFEF1A23 | Since: 323
     */
    function setVoiceChannel(channel) {
        NetworkSetVoiceChannel(channel);
    }
    network.setVoiceChannel = setVoiceChannel;
    /**
     * No comment provided
     *
     * Hash: 0x023ACAB2DC9DC4A4 | Since: 1493
     */
    function shouldShowPromotionAlertScreen() {
        return Citizen.invokeNative('0x023ACAB2DC9DC4A4');
    }
    network.shouldShowPromotionAlertScreen = shouldShowPromotionAlertScreen;
    /**
     * Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
     *
     * Hash: 0x82A2B386716608F1 | Since: 393
     */
    function shouldShowStrictNatWarning() {
        return NetworkShouldShowConnectivityTroubleshooting();
    }
    network.shouldShowStrictNatWarning = shouldShowStrictNatWarning;
    /**
     * No comment provided
     *
     * Hash: 0x83FE8D7229593017 | Since: 323
     */
    function showAccountUpgradeUi() {
        Citizen.invokeNative('0x83FE8D7229593017');
    }
    network.showAccountUpgradeUi = showAccountUpgradeUi;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x6BFF5F84102DF80A | Since: 323
     */
    function showChatRestrictionMsc(player) {
        Citizen.invokeNative('0x6BFF5F84102DF80A', player);
    }
    network.showChatRestrictionMsc = showChatRestrictionMsc;
    /**
     * No comment provided
     *
     * Hash: 0x859ED1CEA343FCA8 | Since: 323
     */
    function showProfileUi() {
        return NetworkShowProfileUi();
    }
    network.showProfileUi = showProfileUi;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x5C497525F803486B | Since: 323
     */
    function showPsnUgcRestriction() {
        Citizen.invokeNative('0x5C497525F803486B');
    }
    network.showPsnUgcRestriction = showPsnUgcRestriction;
    /**
     * No comment provided
     *
     * Hash: 0x9465E683B12D3F6B | Since: 323
     */
    function skipRadioResetNextClose() {
        Citizen.invokeNative('0x9465E683B12D3F6B');
    }
    network.skipRadioResetNextClose = skipRadioResetNextClose;
    /**
     * No comment provided
     *
     * Hash: 0xCA59CCAE5D01E4CE | Since: 1734
     */
    function skipRadioResetNextOpen() {
        Citizen.invokeNative('0xCA59CCAE5D01E4CE');
    }
    network.skipRadioResetNextOpen = skipRadioResetNextOpen;
    /**
     * Returns true if dinput8.dll is present in the game directory.
     * You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
     *
     * Hash: 0x659CF2EF7F550C4F | Since: 1011
     */
    function skipRadioWarning() {
        return NetworkHasGameBeenAltered();
    }
    network.skipRadioWarning = skipRadioWarning;
    /**
     * One of the first things it does is get the players ped.
     * Then it calls a function that is used in some tasks and ped based functions.
     * p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
     *
     * Hash: 0x5A6FFA2433E2F14C | Since: 323
     */
    function startRespawnSearchForPlayer(player, pos, radius, flags) {
        return NetworkStartRespawnSearchForPlayer(player, pos.x, pos.y, pos.z, radius, 0, 0, 0, flags);
    }
    network.startRespawnSearchForPlayer = startRespawnSearchForPlayer;
    /**
     * p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
     *
     * Hash: 0x4BA92A18502BCA61 | Since: 323
     */
    function startRespawnSearchInAngledAreaForPlayer(player, x1, y1, z1, x2, y2, z2, width, flags) {
        return NetworkStartRespawnSearchInAngledAreaForPlayer(player, x1, y1, z1, x2, y2, z2, width, 0, 0, 0, flags);
    }
    network.startRespawnSearchInAngledAreaForPlayer = startRespawnSearchInAngledAreaForPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x17E0198B3882C2CB | Since: 323
     */
    function startSoloTutorialSession() {
        NetworkStartSoloTutorialSession();
    }
    network.startSoloTutorialSession = startSoloTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0x9A1B3FCDB36C8697 | Since: 323
     */
    function startSynchronisedScene(netScene) {
        NetworkStartSynchronisedScene(netScene);
    }
    network.startSynchronisedScene = startSynchronisedScene;
    /**
     * Always returns -1. Seems to be XB1 specific.
     *
     * Hash: 0xDEB2B99A1AF1A2A6 | Since: 323
     */
    function startUserContentPermissionsCheck() {
        return NetworkStartUserContentPermissionsCheck();
    }
    network.startUserContentPermissionsCheck = startUserContentPermissionsCheck;
    /**
     * No comment provided
     *
     * Hash: 0xC254481A4574CB2F | Since: 323
     */
    function stopSynchronisedScene(netScene) {
        NetworkStopSynchronisedScene(netScene);
    }
    network.stopSynchronisedScene = stopSynchronisedScene;
    /**
     * No comment provided
     *
     * Hash: 0xF814FEC6A19FD6E0 | Since: 323
     */
    function storeInviteThroughRestart() {
        Citizen.invokeNative('0xF814FEC6A19FD6E0');
    }
    network.storeInviteThroughRestart = storeInviteThroughRestart;
    /**
     * No comment provided
     *
     * Hash: 0xA0682D67EF1FBA3D | Since: 323
     */
    function suppressInvite(toggle) {
        NetworkSuppressInvite(toggle);
    }
    network.suppressInvite = suppressInvite;
    /**
     * Does nothing in final builds.
     *
     * Hash: 0xCBD02360C5E16871 | Since: 3570
     */
    function syncClockTimeOverride() {
        Citizen.invokeNative('0xCBD02360C5E16871');
    }
    network.syncClockTimeOverride = syncClockTimeOverride;
    /**
     * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
     *
     * Hash: 0x5FCF4D7069B09026 | Since: 323
     */
    function textChatIsTyping() {
        return NetworkIsTextChatActive();
    }
    network.textChatIsTyping = textChatIsTyping;
    /**
     * No comment provided
     *
     * Hash: 0xC3BFED92026A2AAD | Since: 617
     */
    function transitionAddStage(hash, state) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return NetworkTransitionTrack(hash, 0, 0, state, 0);
    }
    network.transitionAddStage = transitionAddStage;
    /**
     * No comment provided
     *
     * Hash: 0x973D76AA760A6CB6 | Since: 323
     */
    function transitionBlockJoinRequests() {
        Citizen.invokeNative('0x973D76AA760A6CB6', false);
    }
    network.transitionBlockJoinRequests = transitionBlockJoinRequests;
    /**
     * No comment provided
     *
     * Hash: 0x04918A41BC9B8157 | Since: 617
     */
    function transitionFinish() {
        return Citizen.invokeNative('0x04918A41BC9B8157', undefined, undefined, undefined);
    }
    network.transitionFinish = transitionFinish;
    /**
     * No comment provided
     *
     * Hash: 0xF6F4383B7C92F11A | Since: 573
     */
    function transitionSetActivityIsland() {
        Citizen.invokeNative('0xF6F4383B7C92F11A', undefined);
    }
    network.transitionSetActivityIsland = transitionSetActivityIsland;
    /**
     * No comment provided
     *
     * Hash: 0x1F8E00FB18239600 | Since: 573
     */
    function transitionSetContentCreator() {
        Citizen.invokeNative('0x1F8E00FB18239600', undefined);
    }
    network.transitionSetContentCreator = transitionSetContentCreator;
    /**
     * No comment provided
     *
     * Hash: 0x1398582B7F72B3ED | Since: 505
     */
    function transitionSetInProgress() {
        Citizen.invokeNative('0x1398582B7F72B3ED', undefined);
    }
    network.transitionSetInProgress = transitionSetInProgress;
    /**
     * No comment provided
     *
     * Hash: 0x8B4FFC790CA131EF | Since: 617
     */
    function transitionStart() {
        return Citizen.invokeNative('0x8B4FFC790CA131EF', 0, undefined, undefined, undefined);
    }
    network.transitionStart = transitionStart;
    /**
     * Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
     *
     * Hash: 0x890E2C5ABED7236D | Since: 1365
     */
    function triggerDamageEventForZeroDamage(entity, toggle) {
        NetworkSetVehicleWheelsDestructible(entity, toggle);
    }
    network.triggerDamageEventForZeroDamage = triggerDamageEventForZeroDamage;
    /**
     * No comment provided
     *
     * Hash: 0x38B7C51AB1EDC7D8 | Since: 1734
     */
    function triggerDamageEventForZeroWeaponHash(entity, toggle) {
        Citizen.invokeNative('0x38B7C51AB1EDC7D8', entity, toggle);
    }
    network.triggerDamageEventForZeroWeaponHash = triggerDamageEventForZeroWeaponHash;
    /**
     * Returns defaultValue if the tunable doesn't exist.
     *
     * Hash: 0xC7420099936CE286 | Since: 323
     */
    function tryAccessTunableBoolHash(tunableContext, tunableName, defaultValue) {
        if (typeof tunableContext === 'string')
            tunableContext = misc.getHashKey(tunableContext);
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return NetworkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue);
    }
    network.tryAccessTunableBoolHash = tryAccessTunableBoolHash;
    /**
     * No comment provided
     *
     * Hash: 0xD1110739EEADB592 | Since: 323
     */
    function tryToSetThisScriptIsNetworkScript() {
        return NetworkIsThisScriptMarked(undefined, false, undefined);
    }
    network.tryToSetThisScriptIsNetworkScript = tryToSetThisScriptIsNetworkScript;
    /**
     * No comment provided
     *
     * Hash: 0xC1447451DDB512F0 | Since: 2372
     */
    function ugcNav() {
        NetworkUgcNav(undefined, undefined);
    }
    network.ugcNav = ugcNav;
    /**
     * No comment provided
     *
     * Hash: 0x7368E683BB9038D6 | Since: 323
     */
    function unregisterNetworkedEntity(entity) {
        NetworkUnregisterNetworkedEntity(entity);
    }
    network.unregisterNetworkedEntity = unregisterNetworkedEntity;
    /**
     * No comment provided
     *
     * Hash: 0x2B1813ABA29016C5 | Since: 323
     */
    function useHighPrecisionBlending(netID, toggle) {
        NetworkUseHighPrecisionBlending(netID, toggle);
    }
    network.useHighPrecisionBlending = useHighPrecisionBlending;
    /**
     * No comment provided
     *
     * Hash: 0xCD71A4ECAB22709E | Since: 323
     */
    function useLogarithmicBlendingThisFrame(entity) {
        NetworkUseLogarithmicBlendingThisFrame(entity);
    }
    network.useLogarithmicBlendingThisFrame = useLogarithmicBlendingThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xB37E4E6A2388CA7B | Since: 323
     */
    function waitingPopClearTutorialSession() {
        return Citizen.invokeNative('0xB37E4E6A2388CA7B');
    }
    network.waitingPopClearTutorialSession = waitingPopClearTutorialSession;
    /**
     * No comment provided
     *
     * Hash: 0x4237E822315D8BA9 | Since: 323
     */
    function wasGameSuspended() {
        return Citizen.invokeNative('0x4237E822315D8BA9');
    }
    network.wasGameSuspended = wasGameSuspended;
    /**
     * gets the entity id of a network id
     *
     * Hash: 0xBFFEAB45A9A9094A | Since: 323
     */
    function netToEnt(netHandle) {
        return NetToEnt(netHandle);
    }
    network.netToEnt = netToEnt;
    /**
     * gets the object id of a network id
     *
     * Hash: 0xD8515F5FEA14CB3F | Since: 323
     */
    function netToObj(netHandle) {
        return NetToObj(netHandle);
    }
    network.netToObj = netToObj;
    /**
     * gets the ped id of a network id
     *
     * Hash: 0xBDCD95FC216A8B3E | Since: 323
     */
    function netToPed(netHandle) {
        return NetToPed(netHandle);
    }
    network.netToPed = netToPed;
    /**
     * No comment provided
     *
     * Hash: 0x367B936610BA360C | Since: 323
     */
    function netToVeh(netHandle) {
        return NetToVeh(netHandle);
    }
    network.netToVeh = netToVeh;
    /**
     * Lets objects spawn online simply do it like this:
     *
     * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
     *
     * Hash: 0x99BFDC94A603E541 | Since: 323
     */
    function objToNet(_object) {
        return ObjToNet(_object);
    }
    network.objToNet = objToNet;
    /**
     * No comment provided
     *
     * Hash: 0x58C21165F6545892 | Since: 323
     */
    function openCommerceStore() {
        OpenCommerceStore(undefined, undefined, 0);
    }
    network.openCommerceStore = openCommerceStore;
    /**
     * Return the local Participant ID
     *
     * Hash: 0x90986E8876CE0A83 | Since: 323
     */
    function participantId() {
        return ParticipantId();
    }
    network.participantId = participantId;
    /**
     * Return the local Participant ID.
     *
     * This native is exactly the same as 'PARTICIPANT_ID' native.
     *
     * Hash: 0x57A3BDDAD8E5AA0A | Since: 323
     */
    function participantIdToInt() {
        return ParticipantIdToInt();
    }
    network.participantIdToInt = participantIdToInt;
    /**
     * gets the network id of a ped
     *
     * Hash: 0x0EDEC3C276198689 | Since: 323
     */
    function pedToNet(ped) {
        return PedToNet(ped);
    }
    network.pedToNet = pedToNet;
    /**
     * No comment provided
     *
     * Hash: 0xE26CCFF8094D8C74 | Since: 323
     */
    function refreshPlayerListStats() {
        return RefreshPlayerListStats(0);
    }
    network.refreshPlayerListStats = refreshPlayerListStats;
    /**
     * No comment provided
     *
     * Hash: 0x72D0706CD6CCDB58 | Since: 323
     */
    function releaseAllCommerceItemImages() {
        ReleaseAllCommerceItemImages();
    }
    network.releaseAllCommerceItemImages = releaseAllCommerceItemImages;
    /**
     * No comment provided
     *
     * Hash: 0x472841A026D26D8B | Since: 1103
     */
    function remoteCheaterPlayerDetected(player, a, b) {
        return RemoteCheatDetected(player, a, b);
    }
    network.remoteCheaterPlayerDetected = remoteCheaterPlayerDetected;
    /**
     * entity must be a valid entity; ped can be NULL
     *
     * Hash: 0x715135F4B82AC90D | Since: 323
     */
    function removeAllStickyBombsFromEntity(entity, ped) {
        RemoveAllStickyBombsFromEntity(entity, ped);
    }
    network.removeAllStickyBombsFromEntity = removeAllStickyBombsFromEntity;
    /**
     * No comment provided
     *
     * Hash: 0xA2F952104FC6DD4B | Since: 323
     */
    function requestCommerceItemImage(index) {
        return RequestCommerceItemImage(index);
    }
    network.requestCommerceItemImage = requestCommerceItemImage;
    /**
     * No comment provided
     *
     * Hash: 0x797F9C5E661D920E | Since: 1290
     */
    function reserveLocalMissionObjects(amount) {
        ReserveNetworkLocalObjects(amount);
    }
    network.reserveLocalMissionObjects = reserveLocalMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0x2C8DF5D129595281 | Since: 1493
     */
    function reserveLocalMissionPeds(amount) {
        ReserveNetworkLocalPeds(amount);
    }
    network.reserveLocalMissionPeds = reserveLocalMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x42613035157E4208 | Since: 1103
     */
    function reserveLocalMissionVehicles(amount) {
        ReserveNetworkLocalVehicles(amount);
    }
    network.reserveLocalMissionVehicles = reserveLocalMissionVehicles;
    /**
     * No comment provided
     *
     * Hash: 0x4E5C93BD0C32FBF8 | Since: 323
     */
    function reserveMissionObjects(amount) {
        ReserveNetworkMissionObjects(amount);
    }
    network.reserveMissionObjects = reserveMissionObjects;
    /**
     * No comment provided
     *
     * Hash: 0xB60FEBA45333D36F | Since: 323
     */
    function reserveMissionPeds(amount) {
        ReserveNetworkMissionPeds(amount);
    }
    network.reserveMissionPeds = reserveMissionPeds;
    /**
     * No comment provided
     *
     * Hash: 0x76B02E21ED27A469 | Since: 323
     */
    function reserveMissionVehicles(amount) {
        ReserveNetworkMissionVehicles(amount);
    }
    network.reserveMissionVehicles = reserveMissionVehicles;
    /**
     * Resets the entity ghost alpha to the default value (128)
     *
     * Hash: 0x17330EBF2F2124A8 | Since: 791
     */
    function resetGhostAlpha() {
        ResetGhostedEntityAlpha();
    }
    network.resetGhostAlpha = resetGhostAlpha;
    /**
     * No comment provided
     *
     * Hash: 0x444C4525ECE0A4B9 | Since: 323
     */
    function resetStoreGameTracking() {
        Citizen.invokeNative('0x444C4525ECE0A4B9');
    }
    network.resetStoreGameTracking = resetStoreGameTracking;
    /**
     * No comment provided
     *
     * Hash: 0x4BA166079D658ED4 | Since: 944
     */
    function setEntityGhostedForGhostPlayers(entity, toggle) {
        NetworkSetEntityGhostedWithOwner(entity, toggle);
    }
    network.setEntityGhostedForGhostPlayers = setEntityGhostedForGhostPlayers;
    /**
     * Makes the provided entity visible for yourself for the current frame.
     *
     * Hash: 0xE135A9FF3F5D05D8 | Since: 323
     */
    function setEntityLocallyInvisible(entity) {
        SetEntityLocallyInvisible(entity);
    }
    network.setEntityLocallyInvisible = setEntityLocallyInvisible;
    /**
     * No comment provided
     *
     * Hash: 0x241E289B5C059EDC | Since: 323
     */
    function setEntityLocallyVisible(entity) {
        SetEntityLocallyVisible(entity);
    }
    network.setEntityLocallyVisible = setEntityLocallyVisible;
    /**
     * No comment provided
     *
     * Hash: 0xE0031D3C8F36AB82 | Since: 323
     */
    function setEntityVisibleInCutscene() {
        SetEntityVisibleInCutscene(undefined, false, false);
    }
    network.setEntityVisibleInCutscene = setEntityVisibleInCutscene;
    /**
     * Must be a value between 1 and 254
     *
     * Hash: 0x658500AE6D723A7E | Since: 791
     */
    function setGhostAlpha(alpha) {
        SetGhostedEntityAlpha(alpha);
    }
    network.setGhostAlpha = setGhostAlpha;
    /**
     * No comment provided
     *
     * Hash: 0xD7B6C73CAD419BCF | Since: 944
     */
    function setInvertGhosting() {
        Citizen.invokeNative('0xD7B6C73CAD419BCF', false);
    }
    network.setInvertGhosting = setInvertGhosting;
    /**
     * No comment provided
     *
     * Hash: 0xFAE628F1E9ADB239 | Since: 323
     */
    function setLastViewedShopItem(p0, p2) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        Citizen.invokeNative('0xFAE628F1E9ADB239', p0, 0, p2);
    }
    network.setLastViewedShopItem = setLastViewedShopItem;
    /**
     * No comment provided
     *
     * Hash: 0x5FFE9B4144F9712F | Since: 323
     */
    function setLocalPlayerAsGhost(toggle) {
        SetLocalPlayerAsGhost(toggle, false);
    }
    network.setLocalPlayerAsGhost = setLocalPlayerAsGhost;
    /**
     * No comment provided
     *
     * Hash: 0xE5F773C1A1D9D168 | Since: 323
     */
    function setLocalPlayerInvisibleLocally(bIncludePlayersVehicle) {
        SetLocalPlayerInvisibleLocally(bIncludePlayersVehicle);
    }
    network.setLocalPlayerInvisibleLocally = setLocalPlayerInvisibleLocally;
    /**
     * No comment provided
     *
     * Hash: 0xD1065D68947E7B6E | Since: 323
     */
    function setLocalPlayerVisibleInCutscene() {
        SetLocalPlayerVisibleInCutscene(false, false);
    }
    network.setLocalPlayerVisibleInCutscene = setLocalPlayerVisibleInCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x7619364C82D3BF14 | Since: 323
     */
    function setLocalPlayerVisibleLocally(bIncludePlayersVehicle) {
        SetLocalPlayerVisibleLocally(bIncludePlayersVehicle);
    }
    network.setLocalPlayerVisibleLocally = setLocalPlayerVisibleLocally;
    /**
     * No comment provided
     *
     * Hash: 0xAAA553E7DD28A457 | Since: 323
     */
    function setCutsceneEntities(toggle) {
        SetNetworkCutsceneEntities(toggle);
    }
    network.setCutsceneEntities = setCutsceneEntities;
    /**
     * `Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).`
     *
     * Hash: 0x838DA0936A24ED4D | Since: 944
     */
    function setEnableHighSpeedEdgeFallDetection(vehicle, toggle) {
        SetNetworkEnableVehiclePositionCorrection(vehicle, toggle);
    }
    network.setEnableHighSpeedEdgeFallDetection = setEnableHighSpeedEdgeFallDetection;
    /**
     * No comment provided
     *
     * Hash: 0xA8A024587329F36A | Since: 323
     */
    function setIdAlwaysExistsForPlayer(netId, player, toggle) {
        SetNetworkIdAlwaysExistsForPlayer(netId, player, toggle);
    }
    network.setIdAlwaysExistsForPlayer = setIdAlwaysExistsForPlayer;
    /**
     * "No Reassign" in CPhysicalScriptGameStateDataNode
     *
     * Hash: 0x9D724B400A7E8FFC | Since: 2189
     */
    function setIdCanBeReassigned(netId, toggle) {
        Citizen.invokeNative('0x9D724B400A7E8FFC', netId, toggle);
    }
    network.setIdCanBeReassigned = setIdCanBeReassigned;
    /**
     * Whether or not another player is allowed to take control of the entity
     *
     * Hash: 0x299EEB23175895FC | Since: 323
     */
    function setIdCanMigrate(netId, toggle) {
        SetNetworkIdCanMigrate(netId, toggle);
    }
    network.setIdCanMigrate = setIdCanMigrate;
    /**
     * No comment provided
     *
     * Hash: 0xE05E81A888FA63C8 | Since: 323
     */
    function setIdExistsOnAllMachines(netId, toggle) {
        SetNetworkIdExistsOnAllMachines(netId, toggle);
    }
    network.setIdExistsOnAllMachines = setIdExistsOnAllMachines;
    /**
     * No comment provided
     *
     * Hash: 0x3FA36981311FA4FF | Since: 323
     */
    function setIdPassControlInTutorial(netId, state) {
        Citizen.invokeNative('0x3FA36981311FA4FF', netId, state);
    }
    network.setIdPassControlInTutorial = setIdPassControlInTutorial;
    /**
     * No comment provided
     *
     * Hash: 0xA6928482543022B4 | Since: 323
     */
    function setIdVisibleInCutscene(netId) {
        SetNetworkIdVisibleInCutscene(netId, false, false);
    }
    network.setIdVisibleInCutscene = setIdVisibleInCutscene;
    /**
     * No comment provided
     *
     * Hash: 0x32EBD154CB6B8B99 | Since: 505
     */
    function setIdVisibleInCutsceneHack(netId) {
        Citizen.invokeNative('0x32EBD154CB6B8B99', netId, false, false);
    }
    network.setIdVisibleInCutsceneHack = setIdVisibleInCutsceneHack;
    /**
     * No comment provided
     *
     * Hash: 0x76B3F29D3F967692 | Since: 2189
     */
    function setIdVisibleInCutsceneRemainHack() {
        Citizen.invokeNative('0x76B3F29D3F967692', undefined, undefined, undefined);
    }
    network.setIdVisibleInCutsceneRemainHack = setIdVisibleInCutsceneRemainHack;
    /**
     * No comment provided
     *
     * Hash: 0x6274C4712850841E | Since: 323
     */
    function setVehicleAsGhost(vehicle, toggle) {
        SetNetworkVehicleAsGhost(vehicle, toggle);
    }
    network.setVehicleAsGhost = setVehicleAsGhost;
    /**
     * `rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel`
     *
     * Hash: 0xA2A707979FE754DC | Since: 877
     */
    function setVehicleMaxPositionDeltaMultiplier(vehicle, multiplier) {
        SetNetworkVehiclePositionUpdateMultiplier(vehicle, multiplier);
    }
    network.setVehicleMaxPositionDeltaMultiplier = setVehicleMaxPositionDeltaMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xEC51713AB6EC36E8 | Since: 323
     */
    function setVehicleRespotTimer(netId, time) {
        SetNetworkVehicleRespotTimer(netId, time, undefined, undefined);
    }
    network.setVehicleRespotTimer = setVehicleRespotTimer;
    /**
     * No comment provided
     *
     * Hash: 0x13F1FCB111B820B0 | Since: 877
     */
    function setNonParticipantsOfThisScriptAsGhosts() {
        Citizen.invokeNative('0x13F1FCB111B820B0', false);
    }
    network.setNonParticipantsOfThisScriptAsGhosts = setNonParticipantsOfThisScriptAsGhosts;
    /**
     * No comment provided
     *
     * Hash: 0x12B37D54667DB0B8 | Since: 323
     */
    function setPlayerInvisibleLocally(player, bIncludePlayersVehicle) {
        SetPlayerInvisibleLocally(player, bIncludePlayersVehicle);
    }
    network.setPlayerInvisibleLocally = setPlayerInvisibleLocally;
    /**
     * No comment provided
     *
     * Hash: 0xFAA10F1FAFB11AF2 | Since: 323
     */
    function setPlayerVisibleLocally(player, bIncludePlayersVehicle) {
        SetPlayerVisibleLocally(player, bIncludePlayersVehicle);
    }
    network.setPlayerVisibleLocally = setPlayerVisibleLocally;
    /**
     * Enables ghosting between specific players
     *
     * Hash: 0xA7C511FA1C5BDA38 | Since: 463
     */
    function setRemotePlayerAsGhost(player) {
        SetRelationshipToPlayer(player, false);
    }
    network.setRemotePlayerAsGhost = setRemotePlayerAsGhost;
    /**
     * No comment provided
     *
     * Hash: 0x96320E6549DAE7B4 | Since: 2802
     */
    function setRemotePlayerVisibleInCutscene(player, locallyVisible) {
        Citizen.invokeNative('0x96320E6549DAE7B4', player, locallyVisible);
    }
    network.setRemotePlayerVisibleInCutscene = setRemotePlayerVisibleInCutscene;
    /**
     * Access to the store for shark cards etc...
     *
     * Hash: 0x9641A9FF718E9C5E | Since: 323
     */
    function setStoreEnabled(toggle) {
        SetStoreEnabled(toggle);
    }
    network.setStoreEnabled = setStoreEnabled;
    /**
     * Starts a new singleplayer game (at the prologue).
     *
     * Hash: 0x593850C16A36B692 | Since: 323
     */
    function shutdownAndLaunchSinglePlayerGame() {
        ShutdownAndLaunchSinglePlayerGame();
    }
    network.shutdownAndLaunchSinglePlayerGame = shutdownAndLaunchSinglePlayerGame;
    /**
     * In singleplayer this will re-load your game.
     *
     * In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
     *
     * You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
     *
     * Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
     *
     * Hash: 0x9ECA15ADFE141431 | Since: 505
     */
    function shutdownAndLoadMostRecentSave() {
        return ShutdownAndLoadMostRecentSave();
    }
    network.shutdownAndLoadMostRecentSave = shutdownAndLoadMostRecentSave;
    /**
     * No comment provided
     *
     * Hash: 0x3448505B6E35262D | Since: 323
     */
    function textureDownloadGetName() {
        return TextureDownloadGetName(0);
    }
    network.textureDownloadGetName = textureDownloadGetName;
    /**
     * No comment provided
     *
     * Hash: 0x5776ED562C134687 | Since: 323
     */
    function textureDownloadHasFailed() {
        return TextureDownloadHasFailed(0);
    }
    network.textureDownloadHasFailed = textureDownloadHasFailed;
    /**
     * No comment provided
     *
     * Hash: 0x487EB90B98E9FB19 | Since: 323
     */
    function textureDownloadRelease() {
        TextureDownloadRelease(0);
    }
    network.textureDownloadRelease = textureDownloadRelease;
    /**
     * No comment provided
     *
     * Hash: 0x16160DA74A8E74A2 | Since: 323
     */
    function textureDownloadRequest(filePath, name) {
        return TextureDownloadRequest(filePath, name, false);
    }
    network.textureDownloadRequest = textureDownloadRequest;
    /**
     * No comment provided
     *
     * Hash: 0x0B203B4AFDE53A4F | Since: 323
     */
    function titleTextureDownloadRequest(filePath, name) {
        return TitleTextureDownloadRequest(filePath, name, false);
    }
    network.titleTextureDownloadRequest = titleTextureDownloadRequest;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xB606E6CC59664972 | Since: 323
     */
    function triggerCommerceDataFetch() {
        Citizen.invokeNative('0xB606E6CC59664972', undefined);
    }
    network.triggerCommerceDataFetch = triggerCommerceDataFetch;
    /**
     * No comment provided
     *
     * Hash: 0xE9B99B6853181409 | Since: 323
     */
    function ugcCancelQuery() {
        UgcCancelQuery();
    }
    network.ugcCancelQuery = ugcCancelQuery;
    /**
     * No comment provided
     *
     * Hash: 0x17440AA15D1D3739 | Since: 323
     */
    function ugcClearCreateResult() {
        UgcClearCreateResult();
    }
    network.ugcClearCreateResult = ugcClearCreateResult;
    /**
     * No comment provided
     *
     * Hash: 0xA1E5E0204A6FCC70 | Since: 323
     */
    function ugcClearModifyResult() {
        UgcClearModifyResult();
    }
    network.ugcClearModifyResult = ugcClearModifyResult;
    /**
     * No comment provided
     *
     * Hash: 0x61A885D3F7CFEE9A | Since: 323
     */
    function ugcClearOfflineQuery() {
        UgcClearOfflineQuery();
    }
    network.ugcClearOfflineQuery = ugcClearOfflineQuery;
    /**
     * No comment provided
     *
     * Hash: 0xBA96394A0EECFA65 | Since: 323
     */
    function ugcClearQueryResults() {
        UgcClearQueryResults();
    }
    network.ugcClearQueryResults = ugcClearQueryResults;
    /**
     * No comment provided
     *
     * Hash: 0x152D90E4C1B4738A | Since: 323
     */
    function ugcCopyContent() {
        return UgcCopyContent();
    }
    network.ugcCopyContent = ugcCopyContent;
    /**
     * No comment provided
     *
     * Hash: 0x24E4E51FC16305F9 | Since: 323
     */
    function ugcDidCreateSucceed() {
        return Citizen.invokeNative('0x24E4E51FC16305F9');
    }
    network.ugcDidCreateSucceed = ugcDidCreateSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x162C23CA83ED0A62 | Since: 323
     */
    function ugcDidDescriptionRequestSucceed() {
        return Citizen.invokeNative('0x162C23CA83ED0A62', undefined);
    }
    network.ugcDidDescriptionRequestSucceed = ugcDidDescriptionRequestSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x941E5306BCD7C2C7 | Since: 323
     */
    function ugcDidGetSucceed() {
        return UgcDidGetSucceed();
    }
    network.ugcDidGetSucceed = ugcDidGetSucceed;
    /**
     * No comment provided
     *
     * Hash: 0x793FF272D5B365F4 | Since: 323
     */
    function ugcDidModifySucceed() {
        return Citizen.invokeNative('0x793FF272D5B365F4');
    }
    network.ugcDidModifySucceed = ugcDidModifySucceed;
    /**
     * No comment provided
     *
     * Hash: 0x4D02279C83BE69FE | Since: 323
     */
    function ugcDidQueryCreatorsSucceed() {
        return Citizen.invokeNative('0x4D02279C83BE69FE');
    }
    network.ugcDidQueryCreatorsSucceed = ugcDidQueryCreatorsSucceed;
    /**
     * No comment provided
     *
     * Hash: 0xD5A4B59980401588 | Since: 323
     */
    function ugcGetBookmarkedContent() {
        return UgcGetBookmarkedContent(undefined, undefined, undefined);
    }
    network.ugcGetBookmarkedContent = ugcGetBookmarkedContent;
    /**
     * No comment provided
     *
     * Hash: 0x40F7E66472DF3E5C | Since: 323
     */
    function ugcGetCachedDescription() {
        return UgcGetCachedDescription(undefined, undefined);
    }
    network.ugcGetCachedDescription = ugcGetCachedDescription;
    /**
     * No comment provided
     *
     * Hash: 0xA7BAB11E7C9C6C5A | Since: 323
     */
    function ugcGetContentCategory() {
        return UgcGetContentCategory(0);
    }
    network.ugcGetContentCategory = ugcGetContentCategory;
    /**
     * No comment provided
     *
     * Hash: 0x8C8D2739BA44AF0F | Since: 323
     */
    function ugcGetContentCreatedByLocalPlayer() {
        return Citizen.invokeNative('0x8C8D2739BA44AF0F', undefined);
    }
    network.ugcGetContentCreatedByLocalPlayer = ugcGetContentCreatedByLocalPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x584770794D758C18 | Since: 323
     */
    function ugcGetContentCreatorGamerHandle() {
        return Citizen.invokeNative('0x584770794D758C18', 0);
    }
    network.ugcGetContentCreatorGamerHandle = ugcGetContentCreatorGamerHandle;
    /**
     * No comment provided
     *
     * Hash: 0x4A56710BAB5C4DB4 | Since: 3407
     */
    function ugcGetContentDescription(index) {
        return Citizen.invokeNative('0x4A56710BAB5C4DB4', index);
    }
    network.ugcGetContentDescription = ugcGetContentDescription;
    /**
     * No comment provided
     *
     * Hash: 0x7CF0448787B23758 | Since: 323
     */
    function ugcGetContentDescriptionHash() {
        return UgcGetContentDescriptionHash(undefined);
    }
    network.ugcGetContentDescriptionHash = ugcGetContentDescriptionHash;
    /**
     * No comment provided
     *
     * Hash: 0x37025B27D9B658B1 | Since: 323
     */
    function ugcGetContentFileVersion() {
        return UgcGetContentFileVersion(undefined, undefined);
    }
    network.ugcGetContentFileVersion = ugcGetContentFileVersion;
    /**
     * No comment provided
     *
     * Hash: 0x3A17A27D75C74887 | Since: 323
     */
    function ugcGetContentHash() {
        return UgcGetContentHash();
    }
    network.ugcGetContentHash = ugcGetContentHash;
    /**
     * No comment provided
     *
     * Hash: 0x7FCC39C46C3C03BD | Since: 323
     */
    function ugcGetContentHasHiResPhoto() {
        return Citizen.invokeNative('0x7FCC39C46C3C03BD', 0);
    }
    network.ugcGetContentHasHiResPhoto = ugcGetContentHasHiResPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x1D610EB0FEA716D9 | Since: 323
     */
    function ugcGetContentHasLoResPhoto() {
        return Citizen.invokeNative('0x1D610EB0FEA716D9', 0);
    }
    network.ugcGetContentHasLoResPhoto = ugcGetContentHasLoResPhoto;
    /**
     * No comment provided
     *
     * Hash: 0x993CBE59D350D225 | Since: 323
     */
    function ugcGetContentHasPlayerBookmarked() {
        return UgcGetContentHasPlayerBookmarked(undefined);
    }
    network.ugcGetContentHasPlayerBookmarked = ugcGetContentHasPlayerBookmarked;
    /**
     * No comment provided
     *
     * Hash: 0x70EA8DA57840F9BE | Since: 323
     */
    function ugcGetContentHasPlayerRecord() {
        return UgcGetContentHasPlayerRecord(undefined);
    }
    network.ugcGetContentHasPlayerRecord = ugcGetContentHasPlayerRecord;
    /**
     * Return the mission id of a job.
     *
     * Hash: 0x55AA95F481D694D2 | Since: 323
     */
    function ugcGetContentId() {
        return UgcGetContentId(0);
    }
    network.ugcGetContentId = ugcGetContentId;
    /**
     * No comment provided
     *
     * Hash: 0x3054F114121C21EA | Since: 323
     */
    function ugcGetContentIsPublished() {
        return UgcGetContentIsPublished(undefined);
    }
    network.ugcGetContentIsPublished = ugcGetContentIsPublished;
    /**
     * No comment provided
     *
     * Hash: 0xAEAB987727C5A8A4 | Since: 323
     */
    function ugcGetContentIsUsingScNickname() {
        return Citizen.invokeNative('0xAEAB987727C5A8A4', undefined);
    }
    network.ugcGetContentIsUsingScNickname = ugcGetContentIsUsingScNickname;
    /**
     * No comment provided
     *
     * Hash: 0xA9240A96C74CCA13 | Since: 323
     */
    function ugcGetContentIsVerified() {
        return UgcGetContentIsVerified(undefined);
    }
    network.ugcGetContentIsVerified = ugcGetContentIsVerified;
    /**
     * No comment provided
     *
     * Hash: 0x32DD916F3F7C9672 | Since: 323
     */
    function ugcGetContentLanguage() {
        return UgcGetContentLanguage(undefined);
    }
    network.ugcGetContentLanguage = ugcGetContentLanguage;
    /**
     * No comment provided
     *
     * Hash: 0xBF09786A7FCAB582 | Since: 323
     */
    function ugcGetContentName() {
        return UgcGetContentName(undefined);
    }
    network.ugcGetContentName = ugcGetContentName;
    /**
     * No comment provided
     *
     * Hash: 0xE0A6138401BCB837 | Since: 323
     */
    function ugcGetContentNum() {
        return UgcGetContentNum();
    }
    network.ugcGetContentNum = ugcGetContentNum;
    /**
     * No comment provided
     *
     * Hash: 0xBAF6BABF9E7CCC13 | Since: 323
     */
    function ugcGetContentPath() {
        return UgcGetContentPath(0, 0);
    }
    network.ugcGetContentPath = ugcGetContentPath;
    /**
     * No comment provided
     *
     * Hash: 0x1ACCFBA3D8DAB2EE | Since: 323
     */
    function ugcGetContentRating() {
        return UgcGetContentRating(undefined, undefined);
    }
    network.ugcGetContentRating = ugcGetContentRating;
    /**
     * No comment provided
     *
     * Hash: 0x759299C5BB31D2A9 | Since: 323
     */
    function ugcGetContentRatingCount() {
        return UgcGetContentRatingCount(undefined, undefined);
    }
    network.ugcGetContentRatingCount = ugcGetContentRatingCount;
    /**
     * No comment provided
     *
     * Hash: 0x4E548C0D7AE39FF9 | Since: 323
     */
    function ugcGetContentRatingNegativeCount() {
        return UgcGetContentRatingNegativeCount(undefined, undefined);
    }
    network.ugcGetContentRatingNegativeCount = ugcGetContentRatingNegativeCount;
    /**
     * No comment provided
     *
     * Hash: 0x87E5C46C187FE0AE | Since: 323
     */
    function ugcGetContentRatingPositiveCount() {
        return UgcGetContentRatingPositiveCount(undefined, undefined);
    }
    network.ugcGetContentRatingPositiveCount = ugcGetContentRatingPositiveCount;
    /**
     * No comment provided
     *
     * Hash: 0x769951E2455E2EB5 | Since: 323
     */
    function ugcGetContentTotal() {
        return UgcGetContentTotal();
    }
    network.ugcGetContentTotal = ugcGetContentTotal;
    /**
     * No comment provided
     *
     * Hash: 0xCFD115B373C0DF63 | Since: 323
     */
    function ugcGetContentUpdatedDate() {
        return UgcGetContentUpdatedDate(undefined);
    }
    network.ugcGetContentUpdatedDate = ugcGetContentUpdatedDate;
    /**
     * No comment provided
     *
     * Hash: 0xCD67AD041A394C9C | Since: 323
     */
    function ugcGetContentUserId() {
        return UgcGetContentUserId(0);
    }
    network.ugcGetContentUserId = ugcGetContentUserId;
    /**
     * No comment provided
     *
     * Hash: 0x703F12425ECA8BF5 | Since: 323
     */
    function ugcGetContentUserName() {
        return UgcGetContentUserName(undefined);
    }
    network.ugcGetContentUserName = ugcGetContentUserName;
    /**
     * No comment provided
     *
     * Hash: 0xC55A0B40FFB1ED23 | Since: 323
     */
    function ugcGetCreateContentId() {
        return UgcGetCreateContentId();
    }
    network.ugcGetCreateContentId = ugcGetCreateContentId;
    /**
     * No comment provided
     *
     * Hash: 0xFBC5E768C7A77A6A | Since: 323
     */
    function ugcGetCreateResult() {
        return UgcGetCreateResult();
    }
    network.ugcGetCreateResult = ugcGetCreateResult;
    /**
     * No comment provided
     *
     * Hash: 0xB746D20B17F2A229 | Since: 323
     */
    function ugcGetCreatorsByUserId() {
        return Citizen.invokeNative('0xB746D20B17F2A229');
    }
    network.ugcGetCreatorsByUserId = ugcGetCreatorsByUserId;
    /**
     * No comment provided
     *
     * Hash: 0x597F8DBA9B206FC7 | Since: 323
     */
    function ugcGetCreatorNum() {
        return UgcGetCreatorNum();
    }
    network.ugcGetCreatorNum = ugcGetCreatorNum;
    /**
     * No comment provided
     *
     * Hash: 0x9F6E2821885CAEE2 | Since: 323
     */
    function ugcGetCrewContent() {
        return UgcGetCrewContent(undefined, undefined, undefined, undefined);
    }
    network.ugcGetCrewContent = ugcGetCrewContent;
    /**
     * No comment provided
     *
     * Hash: 0xF9E1CCAE8BA4C281 | Since: 323
     */
    function ugcGetFriendContent() {
        return UgcGetFriendContent(undefined, undefined, undefined);
    }
    network.ugcGetFriendContent = ugcGetFriendContent;
    /**
     * No comment provided
     *
     * Hash: 0x678BB03C1A3BD51E | Since: 323
     */
    function ugcGetGetByCategory() {
        return UgcGetGetByCategory(undefined, undefined, undefined, undefined);
    }
    network.ugcGetGetByCategory = ugcGetGetByCategory;
    /**
     * No comment provided
     *
     * Hash: 0x815E5E3073DA1D67 | Since: 323
     */
    function ugcGetGetByContentId(contentId, contentTypeName) {
        return SetBalanceAddMachine(contentId, contentTypeName);
    }
    network.ugcGetGetByContentId = ugcGetGetByContentId;
    /**
     * No comment provided
     *
     * Hash: 0xB8322EEB38BE7C26 | Since: 323
     */
    function ugcGetGetByContentIds(dataCount, contentTypeName) {
        return SetBalanceAddMachines(dataCount, contentTypeName);
    }
    network.ugcGetGetByContentIds = ugcGetGetByContentIds;
    /**
     * No comment provided
     *
     * Hash: 0x5A0A3D1A186A5508 | Since: 323
     */
    function ugcGetModifyResult() {
        return UgcGetModifyResult();
    }
    network.ugcGetModifyResult = ugcGetModifyResult;
    /**
     * No comment provided
     *
     * Hash: 0xA7862BC5ED1DFD7E | Since: 323
     */
    function ugcGetMostRecentlyCreatedContent() {
        return Citizen.invokeNative('0xA7862BC5ED1DFD7E', undefined, undefined);
    }
    network.ugcGetMostRecentlyCreatedContent = ugcGetMostRecentlyCreatedContent;
    /**
     * No comment provided
     *
     * Hash: 0x97A770BEEF227E2B | Since: 323
     */
    function ugcGetMostRecentlyPlayedContent() {
        return NetworkGetBackgroundLoadingRecipients(undefined, undefined);
    }
    network.ugcGetMostRecentlyPlayedContent = ugcGetMostRecentlyPlayedContent;
    /**
     * No comment provided
     *
     * Hash: 0x3195F8DD0D531052 | Since: 323
     */
    function ugcGetMyContent() {
        return UgcGetMyContent(undefined, undefined, undefined);
    }
    network.ugcGetMyContent = ugcGetMyContent;
    /**
     * No comment provided
     *
     * Hash: 0xEDF7F927136C224B | Since: 323
     */
    function ugcGetQueryResult() {
        return UgcGetQueryResult();
    }
    network.ugcGetQueryResult = ugcGetQueryResult;
    /**
     * Return the root content id of a job.
     *
     * Hash: 0xC0173D6BFF4E0348 | Since: 323
     */
    function ugcGetRootContentId() {
        return UgcGetRootContentId(0);
    }
    network.ugcGetRootContentId = ugcGetRootContentId;
    /**
     * No comment provided
     *
     * Hash: 0x5324A0E3E4CE3570 | Since: 323
     */
    function ugcGetTopRatedContent() {
        return Citizen.invokeNative('0x5324A0E3E4CE3570', undefined, undefined);
    }
    network.ugcGetTopRatedContent = ugcGetTopRatedContent;
    /**
     * No comment provided
     *
     * Hash: 0x5E24341A7F92A74B | Since: 323
     */
    function ugcHasCreateFinished() {
        return UgcHasCreateFinished();
    }
    network.ugcHasCreateFinished = ugcHasCreateFinished;
    /**
     * No comment provided
     *
     * Hash: 0xEBFA8D50ADDC54C4 | Since: 323
     */
    function ugcHasDescriptionRequestFinished() {
        return Citizen.invokeNative('0xEBFA8D50ADDC54C4', undefined);
    }
    network.ugcHasDescriptionRequestFinished = ugcHasDescriptionRequestFinished;
    /**
     * No comment provided
     *
     * Hash: 0x02ADA21EA2F6918F | Since: 323
     */
    function ugcHasGetFinished() {
        return UgcHasGetFinished();
    }
    network.ugcHasGetFinished = ugcHasGetFinished;
    /**
     * No comment provided
     *
     * Hash: 0x299EF3C576773506 | Since: 323
     */
    function ugcHasModifyFinished() {
        return UgcHasModifyFinished();
    }
    network.ugcHasModifyFinished = ugcHasModifyFinished;
    /**
     * No comment provided
     *
     * Hash: 0xC33E7CBC06EC1A8D | Since: 3095
     */
    function ugcHasPermissionToWrite() {
        return Citizen.invokeNative('0xC33E7CBC06EC1A8D');
    }
    network.ugcHasPermissionToWrite = ugcHasPermissionToWrite;
    /**
     * No comment provided
     *
     * Hash: 0x63B406D7884BFA95 | Since: 323
     */
    function ugcHasQueryCreatorsFinished() {
        return Citizen.invokeNative('0x63B406D7884BFA95');
    }
    network.ugcHasQueryCreatorsFinished = ugcHasQueryCreatorsFinished;
    /**
     * No comment provided
     *
     * Hash: 0x9FEDF86898F100E9 | Since: 323
     */
    function ugcIsCreating() {
        return Citizen.invokeNative('0x9FEDF86898F100E9');
    }
    network.ugcIsCreating = ugcIsCreating;
    /**
     * No comment provided
     *
     * Hash: 0x2D5DC831176D0114 | Since: 323
     */
    function ugcIsDescriptionRequestInProgress() {
        return Citizen.invokeNative('0x2D5DC831176D0114', undefined);
    }
    network.ugcIsDescriptionRequestInProgress = ugcIsDescriptionRequestInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xD53ACDBEF24A46E8 | Since: 323
     */
    function ugcIsGetting() {
        return UgcIsGetting();
    }
    network.ugcIsGetting = ugcIsGetting;
    /**
     * No comment provided
     *
     * Hash: 0xF53E48461B71EECB | Since: 323
     */
    function ugcIsLanguageSupported() {
        return UgcIsLanguageSupported(undefined);
    }
    network.ugcIsLanguageSupported = ugcIsLanguageSupported;
    /**
     * No comment provided
     *
     * Hash: 0x45E816772E93A9DB | Since: 323
     */
    function ugcIsModifying() {
        return Citizen.invokeNative('0x45E816772E93A9DB');
    }
    network.ugcIsModifying = ugcIsModifying;
    /**
     * No comment provided
     *
     * Hash: 0x5CAE833B0EE0C500 | Since: 323
     */
    function ugcLoadOfflineQuery() {
        return UgcPoliciesMakePrivate(undefined);
    }
    network.ugcLoadOfflineQuery = ugcLoadOfflineQuery;
    /**
     * No comment provided
     *
     * Hash: 0x1DE0F5F50D723CAA | Since: 323
     */
    function ugcPublish(contentId, baseContentId, contentTypeName) {
        return UgcPublish(contentId, baseContentId, contentTypeName);
    }
    network.ugcPublish = ugcPublish;
    /**
     * No comment provided
     *
     * Hash: 0x692D58DF40657E8C | Since: 323
     */
    function ugcQueryByCategory() {
        return Citizen.invokeNative('0x692D58DF40657E8C', undefined, undefined, undefined, undefined, undefined, false);
    }
    network.ugcQueryByCategory = ugcQueryByCategory;
    /**
     * No comment provided
     *
     * Hash: 0x158EC424F35EC469 | Since: 323
     */
    function ugcQueryByContentId(contentId, latestVersion, contentTypeName) {
        return UgcQueryByContentId(contentId, latestVersion, contentTypeName);
    }
    network.ugcQueryByContentId = ugcQueryByContentId;
    /**
     * No comment provided
     *
     * Hash: 0xC7397A83F7A2A462 | Since: 323
     */
    function ugcQueryByContentIds(count, latestVersion, contentTypeName) {
        return UgcQueryByContentIds(count, latestVersion, contentTypeName);
    }
    network.ugcQueryByContentIds = ugcQueryByContentIds;
    /**
     * No comment provided
     *
     * Hash: 0x6D4CB481FAC835E8 | Since: 323
     */
    function ugcQueryMostRecentlyCreatedContent(offset, count, contentTypeName) {
        return UgcQueryRecentlyCreatedContent(offset, count, contentTypeName, 0);
    }
    network.ugcQueryMostRecentlyCreatedContent = ugcQueryMostRecentlyCreatedContent;
    /**
     * No comment provided
     *
     * Hash: 0x9BF438815F5D96EA | Since: 323
     */
    function ugcQueryMyContent() {
        return UgcQueryMyContent(undefined, undefined, undefined, undefined, undefined);
    }
    network.ugcQueryMyContent = ugcQueryMyContent;
    /**
     * No comment provided
     *
     * Hash: 0x68103E2247887242 | Since: 323
     */
    function ugcReleaseAllCachedDescriptions() {
        Citizen.invokeNative('0x68103E2247887242');
    }
    network.ugcReleaseAllCachedDescriptions = ugcReleaseAllCachedDescriptions;
    /**
     * No comment provided
     *
     * Hash: 0x5A34CD9C3C5BEC44 | Since: 323
     */
    function ugcReleaseCachedDescription() {
        return Citizen.invokeNative('0x5A34CD9C3C5BEC44', undefined);
    }
    network.ugcReleaseCachedDescription = ugcReleaseCachedDescription;
    /**
     * No comment provided
     *
     * Hash: 0x5E0165278F6339EE | Since: 323
     */
    function ugcRequestCachedDescription() {
        return UgcRequestCachedDescription(0);
    }
    network.ugcRequestCachedDescription = ugcRequestCachedDescription;
    /**
     * No comment provided
     *
     * Hash: 0x171DF6A0C07FB3DC | Since: 323
     */
    function ugcRequestContentDataFromIndex() {
        return UgcRequestContentDataFromIndex(0, 0);
    }
    network.ugcRequestContentDataFromIndex = ugcRequestContentDataFromIndex;
    /**
     * No comment provided
     *
     * Hash: 0x7FD2990AF016795E | Since: 323
     */
    function ugcRequestContentDataFromParams(contentTypeName, contentId) {
        return UgcRequestContentDataFromParams(contentTypeName, contentId, 0, 0, 0);
    }
    network.ugcRequestContentDataFromParams = ugcRequestContentDataFromParams;
    /**
     * No comment provided
     *
     * Hash: 0x274A1519DFC1094F | Since: 323
     */
    function ugcSetBookmarked(contentId, bookmarked, contentTypeName) {
        return UgcSetBookmarked(contentId, bookmarked, contentTypeName);
    }
    network.ugcSetBookmarked = ugcSetBookmarked;
    /**
     * No comment provided
     *
     * Hash: 0xD05D1A6C74DA3498 | Since: 323
     */
    function ugcSetDeleted() {
        return UgcSetDeleted(false, undefined);
    }
    network.ugcSetDeleted = ugcSetDeleted;
    /**
     * No comment provided
     *
     * Hash: 0xF98DDE0A8ED09323 | Since: 323
     */
    function ugcSetQueryDataFromOffline() {
        UgcSetQueryDataFromOffline(false);
    }
    network.ugcSetQueryDataFromOffline = ugcSetQueryDataFromOffline;
    /**
     * No comment provided
     *
     * Hash: 0xFD75DABC0957BF33 | Since: 323
     */
    function ugcSetUsingOfflineContent() {
        Citizen.invokeNative('0xFD75DABC0957BF33', false);
    }
    network.ugcSetUsingOfflineContent = ugcSetUsingOfflineContent;
    /**
     * No comment provided
     *
     * Hash: 0x308F96458B7087CC | Since: 323
     */
    function ugcTextureDownloadRequest() {
        return UgcTextureDownloadRequest(undefined, 0, 0, 0, undefined, false);
    }
    network.ugcTextureDownloadRequest = ugcTextureDownloadRequest;
    /**
     * No comment provided
     *
     * Hash: 0xC87E740D9F3872CC | Since: 323
     */
    function ugcWasQueryForceCancelled() {
        return Citizen.invokeNative('0xC87E740D9F3872CC');
    }
    network.ugcWasQueryForceCancelled = ugcWasQueryForceCancelled;
    /**
     * No comment provided
     *
     * Hash: 0x77758139EC9B66C7 | Since: 323
     */
    function usePlayerColourInsteadOfTeamColour(toggle) {
        UsePlayerColourInsteadOfTeamColour(toggle);
    }
    network.usePlayerColourInsteadOfTeamColour = usePlayerColourInsteadOfTeamColour;
    /**
     * calls from vehicle to net.
     *
     *
     * Hash: 0xB4C94523F023419C | Since: 323
     */
    function vehToNet(vehicle) {
        return VehToNet(vehicle);
    }
    network.vehToNet = vehToNet;
    /**
     * NETWORK_CAN_*
     *
     * Hash: 0x9F633448E4C73207 | Since: 3258
     */
    function canTextFromGamerBeViewed() {
        return Citizen.invokeNative('0x9F633448E4C73207');
    }
    network.canTextFromGamerBeViewed = canTextFromGamerBeViewed;
    /**
     * Clears tunable contexts that were set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS
     *
     * Hash: 0x0C87C83C8950432B | Since: 3258
     */
    function clearTunablesRegistrationContexts() {
        Citizen.invokeNative('0x0C87C83C8950432B');
    }
    network.clearTunablesRegistrationContexts = clearTunablesRegistrationContexts;
    /**
     * If the restart reason is 4 (BE_RESTART_EF_DISABLED_WITH_BE), will cause the game to exit with exit code 622011. Otherwise exits with code 622010. Has no effect when a restart hasn't been requested (reason == 0 or reason > 6).
     *
     * Note that this 'confirmation' itself does not restart the game, a call to QUIT_GAME or similar is required afterwards.
     *
     * Hash: 0x0A141818CA2311AD | Since: 3323
     */
    function confirmGameRestart() {
        Citizen.invokeNative('0x0A141818CA2311AD');
    }
    network.confirmGameRestart = confirmGameRestart;
    /**
     * communicationType: 0 = VOICE; 1 = TEXT_CHAT; 2 = TEXT_MESSAGE; 3 = EMAIL; 4 = USER_CONTENT; 5 = USER_TEXT
     *
     * Hash: 0xDBDF80673BBA3D65 | Since: 3095
     */
    function doesCommunicationGroupHavePermission(communicationType) {
        return Citizen.invokeNative('0xDBDF80673BBA3D65', communicationType);
    }
    network.doesCommunicationGroupHavePermission = doesCommunicationGroupHavePermission;
    /**
     * No comment provided
     *
     * Hash: 0x20C12650830A64EC | Since: 3570
     */
    function doesCommunicationGroupHaveSettingsEnabled(communicationType) {
        return Citizen.invokeNative('0x20C12650830A64EC', communicationType);
    }
    network.doesCommunicationGroupHaveSettingsEnabled = doesCommunicationGroupHaveSettingsEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x214CA1730793EBA8 | Since: 3570
     */
    function getAccessCodeLabelBody(accessCode) {
        return Citizen.invokeNative('0x214CA1730793EBA8', accessCode);
    }
    network.getAccessCodeLabelBody = getAccessCodeLabelBody;
    /**
     * No comment provided
     *
     * Hash: 0x967E6FB554E1B6DE | Since: 3570
     */
    function getAccessCodeLabelHeading(accessCode) {
        return Citizen.invokeNative('0x967E6FB554E1B6DE', accessCode);
    }
    network.getAccessCodeLabelHeading = getAccessCodeLabelHeading;
    /**
     * 0x20211000 = HUD_BE_ERROR_FAILED_UNKNOWN
     * 0x20212000 = HUD_BE_ERROR_FAILED_CLIENT_INIT
     * 0x20213000 = HUD_BE_ERROR_FAILED_SERVER_INIT
     * 0x20214000 = HUD_BE_ERROR_FAILED_AUTH_ATTEMPTS
     * 0x20215000 = HUD_BE_ERROR_UNTRUSTED_HOST
     * 0x20216000 = HUD_BE_ERROR_KICKED
     * 0x20217000 = HUD_BE_ERROR_BANNED
     * 0x50140000 = HUD_BE_BLOCK_BANNED
     *
     * Note: an invalid error code returns a null pointer!
     *
     * Hash: 0xCBA50F371E45B90D | Since: 3323
     */
    function getBattleyeErrorMessageLabel(errorCode) {
        return Citizen.invokeNative('0xCBA50F371E45B90D', errorCode);
    }
    network.getBattleyeErrorMessageLabel = getBattleyeErrorMessageLabel;
    /**
     * No comment provided
     *
     * Hash: 0xE448693B3EA3B92C | Since: 3586
     */
    function getBroadcastDataHostUpdateSize(scriptNameHash, instance, positionHash, handlerNum) {
        if (typeof scriptNameHash === 'string')
            scriptNameHash = misc.getHashKey(scriptNameHash);
        if (typeof positionHash === 'string')
            positionHash = misc.getHashKey(positionHash);
        return Citizen.invokeNative('0xE448693B3EA3B92C', scriptNameHash, instance, positionHash, handlerNum);
    }
    network.getBroadcastDataHostUpdateSize = getBroadcastDataHostUpdateSize;
    /**
     * No comment provided
     *
     * Hash: 0xAC3F722321800755 | Since: 3586
     */
    function getBroadcastDataPlayerUpdateSize(scriptNameHash, instance, positionHash, handlerNum) {
        if (typeof scriptNameHash === 'string')
            scriptNameHash = misc.getHashKey(scriptNameHash);
        if (typeof positionHash === 'string')
            positionHash = misc.getHashKey(positionHash);
        return Citizen.invokeNative('0xAC3F722321800755', scriptNameHash, instance, positionHash, handlerNum);
    }
    network.getBroadcastDataPlayerUpdateSize = getBroadcastDataPlayerUpdateSize;
    /**
     * No comment provided
     *
     * Hash: 0x97F35B898D2D067F | Since: 3570
     */
    function getCommunicationGroupDefaultFlags(communicationType) {
        return Citizen.invokeNative('0x97F35B898D2D067F', communicationType);
    }
    network.getCommunicationGroupDefaultFlags = getCommunicationGroupDefaultFlags;
    /**
     * Returns communicationGroupFlag
     * communicationType: see 0xDBDF80673BBA3D65
     *
     * enum eCommunicationGroupFlag
     * {
     * COMMUNICATION_GROUP_LOCAL_PLAYER = 1 << 0,
     * COMMUNICATION_GROUP_FRIENDS = 1 << 1,
     * COMMUNICATION_GROUP_SMALL_CREW = 1 << 2,
     * COMMUNICATION_GROUP_LARGE_CREW = 1 << 3,
     * COMMUNICATION_GROUP_RECENT_PLAYER = 1 << 4,
     * COMMUNICATION_GROUP_SAME_SESSION = 1 << 5,
     * COMMUNICATION_GROUP_SAME_TEAM = 1 << 6,
     * COMMUNICATION_GROUP_INVALID = 1 << 7,
     * };
     *
     * Hash: 0x40DF02F371F40883 | Since: 3095
     */
    function getCommunicationGroupFlags(communicationType) {
        return Citizen.invokeNative('0x40DF02F371F40883', communicationType);
    }
    network.getCommunicationGroupFlags = getCommunicationGroupFlags;
    /**
     * No comment provided
     *
     * Hash: 0xBF66ACD9AE81A99F | Since: 3570
     */
    function getCommunicationGroupValue(communicationType) {
        return Citizen.invokeNative('0xBF66ACD9AE81A99F', communicationType);
    }
    network.getCommunicationGroupValue = getCommunicationGroupValue;
    /**
     * enum eNetworkGameRestartReason
     * {
     * BE_RESTART_SERVICE_NOT_RUNNING = 1, 	// BattlEye service not running
     * BE_RESTART_SERVICE_NEEDS_UPDATE, 		// BattlEye service needs an update
     * BE_RESTART_UNKNOWN_REASON,				// Unknown BattlEye reason
     * BE_RESTART_EF_DISABLED_WITH_BE,			// BattlEye Enforcement Flag is disabled, but BattlEye is active
     * BE_RESTART_EF_ENABLED_NO_BE,			// BattlEye Enforcement Flag is enabled, but BattlEye is not active
     * BE_RESTART_BE_MODULES_FAILED_TO_LOAD,	// BattlEye modules failed to load
     * NUM_NETWORK_GAME_RESTART_REASONS
     * };
     *
     * Hash: 0x7F7E8401F81CB65B | Since: 3323
     */
    function getGameRestartReason() {
        return Citizen.invokeNative('0x7F7E8401F81CB65B');
    }
    network.getGameRestartReason = getGameRestartReason;
    /**
     * Returns the restart reason as a string, see _NETWORK_GET_GAME_RESTART_REASON. Returns a null pointer when a restart hasn't been requested (reason == 0 or reason > 6).
     *
     * Hash: 0x47B11D51FC50A259 | Since: 3323
     */
    function getGameRestartReasonMessageLabel() {
        return Citizen.invokeNative('0x47B11D51FC50A259');
    }
    network.getGameRestartReasonMessageLabel = getGameRestartReasonMessageLabel;
    /**
     * No comment provided
     *
     * Hash: 0x72C8588ABE22C972 | Since: 3586
     */
    function getHostBroadcastDataSizeUnsynced(scriptNameHash, instance, positionHash, handlerNum) {
        if (typeof scriptNameHash === 'string')
            scriptNameHash = misc.getHashKey(scriptNameHash);
        if (typeof positionHash === 'string')
            positionHash = misc.getHashKey(positionHash);
        return Citizen.invokeNative('0x72C8588ABE22C972', scriptNameHash, instance, positionHash, handlerNum);
    }
    network.getHostBroadcastDataSizeUnsynced = getHostBroadcastDataSizeUnsynced;
    /**
     * No comment provided
     *
     * Hash: 0xB99CD664FD4720A1 | Since: 3586
     */
    function getPlayerBroadcastDataSizeUnsynced(scriptNameHash, instance, positionHash, handlerNum) {
        if (typeof scriptNameHash === 'string')
            scriptNameHash = misc.getHashKey(scriptNameHash);
        if (typeof positionHash === 'string')
            positionHash = misc.getHashKey(positionHash);
        return Citizen.invokeNative('0xB99CD664FD4720A1', scriptNameHash, instance, positionHash, handlerNum);
    }
    network.getPlayerBroadcastDataSizeUnsynced = getPlayerBroadcastDataSizeUnsynced;
    /**
     * No comment provided
     *
     * Hash: 0x04BD27B5ACB67067 | Since: 2802
     */
    function getRandomFloatRanged(rangeStart, rangeEnd) {
        return Citizen.invokeNative('0x04BD27B5ACB67067', rangeStart, rangeEnd);
    }
    network.getRandomFloatRanged = getRandomFloatRanged;
    /**
     * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
     * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
     *
     * Hash: 0xB327CF1B8C2C0EA3 | Since: 3258
     */
    function getTunablesRegistrationBool(tunableName, defaultValue) {
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return Citizen.invokeNative('0xB327CF1B8C2C0EA3', tunableName, defaultValue);
    }
    network.getTunablesRegistrationBool = getTunablesRegistrationBool;
    /**
     * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
     * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
     *
     * Hash: 0x367E5E33E7F0DD1A | Since: 3258
     */
    function getTunablesRegistrationFloat(tunableName, defaultValue) {
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return Citizen.invokeNative('0x367E5E33E7F0DD1A', tunableName, defaultValue);
    }
    network.getTunablesRegistrationFloat = getTunablesRegistrationFloat;
    /**
     * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
     * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
     *
     * Hash: 0x0D94071E55F4C9CE | Since: 3258
     */
    function getTunablesRegistrationInt(tunableName, defaultValue) {
        if (typeof tunableName === 'string')
            tunableName = misc.getHashKey(tunableName);
        return Citizen.invokeNative('0x0D94071E55F4C9CE', tunableName, defaultValue);
    }
    network.getTunablesRegistrationInt = getTunablesRegistrationInt;
    /**
     * _NETWORK_HAS_P*
     * checkType 3 is similar as using 0x9F633448E4C73207
     *
     * Hash: 0x62E29CDA11F9C230 | Since: 3258
     */
    function hasPlayerPassedCheckType(checkType) {
        return Citizen.invokeNative('0x62E29CDA11F9C230', checkType);
    }
    network.hasPlayerPassedCheckType = hasPlayerPassedCheckType;
    /**
     * Checks for privilege 29
     *
     * Hash: 0xD9719341663C385F | Since: 3095
     */
    function hasRosPrivilegeMpTextCommunication() {
        return Citizen.invokeNative('0xD9719341663C385F');
    }
    network.hasRosPrivilegeMpTextCommunication = hasRosPrivilegeMpTextCommunication;
    /**
     * Checks for privilege 30
     *
     * Hash: 0x8956A309BE90057C | Since: 3095
     */
    function hasRosPrivilegeMpVoiceCommunication() {
        return Citizen.invokeNative('0x8956A309BE90057C');
    }
    network.hasRosPrivilegeMpVoiceCommunication = hasRosPrivilegeMpVoiceCommunication;
    /**
     * Checks for privilege 31
     *
     * Hash: 0x9BA54B3CFB82ADDD | Since: 3258
     */
    function hasRosPrivilegeReporting() {
        return Citizen.invokeNative('0x9BA54B3CFB82ADDD');
    }
    network.hasRosPrivilegeReporting = hasRosPrivilegeReporting;
    /**
     * Appears to be PlayStation-specific. Always returns true on other platforms if signed in with the primary user profile
     *
     * Hash: 0xE1E02509169C124E | Since: 3095
     */
    function havePlatformCommunicationPrivileges() {
        return Citizen.invokeNative('0xE1E02509169C124E');
    }
    network.havePlatformCommunicationPrivileges = havePlatformCommunicationPrivileges;
    /**
     * No comment provided
     *
     * Hash: 0xCFE359CCCFE359CC | Since: 3258
     */
    function hideEntityInTutorialSession(netHandle, hide) {
        Citizen.invokeNative('0xCFE359CCCFE359CC', netHandle, hide);
    }
    network.hideEntityInTutorialSession = hideEntityInTutorialSession;
    /**
     * Clears the failed invite join alert reason
     *
     * Hash: 0x8EF5F5811A940F82 | Since: 3179
     */
    function inviteClearJoinFailReason() {
        Citizen.invokeNative('0x8EF5F5811A940F82');
    }
    network.inviteClearJoinFailReason = inviteClearJoinFailReason;
    /**
     * Retrieves the failed invite join alert reason
     *
     * Hash: 0x7B335F84501145BB | Since: 3179
     */
    function inviteGetJoinFailReason() {
        return Citizen.invokeNative('0x7B335F84501145BB');
    }
    network.inviteGetJoinFailReason = inviteGetJoinFailReason;
    /**
     * Hardcoded to return 0.
     *
     * Hash: 0x0292BD7F3766CEBC | Since: 3095
     */
    function isAmericasVersion() {
        return Citizen.invokeNative('0x0292BD7F3766CEBC');
    }
    network.isAmericasVersion = isAmericasVersion;
    /**
     * Returns the name from given friend gamer handle.
     *
     * Hash: 0x338ECE3637937BC2 | Since: 3258
     */
    function loadGamerDisplayName() {
        return Citizen.invokeNative('0x338ECE3637937BC2');
    }
    network.loadGamerDisplayName = loadGamerDisplayName;
    /**
     * For the XboxPC version this returns true if XPRIVILEGE_MULTIPLAYER_SESSIONS is granted but XPRIVILEGE_CROSS_PLAY is NOT granted.
     * For more information, see https://learn.microsoft.com/en-us/gaming/gdk/_content/gc/live/features/identity/privileges/concepts/live-user-privileges-client#privilege-ids-to-check
     *
     * Always returns false for non-XboxPC versions.
     *
     * Hash: 0xA6BC0D9BCF9662FA | Since: 3504
     */
    function multiplayerCrossplayNotAllowed() {
        return Citizen.invokeNative('0xA6BC0D9BCF9662FA');
    }
    network.multiplayerCrossplayNotAllowed = multiplayerCrossplayNotAllowed;
    /**
     * No comment provided
     *
     * Hash: 0xE0128328CF1FD9F4 | Since: 3095
     */
    function sessionLeaveIncludingReason(leaveFlags, leaveReason) {
        return Citizen.invokeNative('0xE0128328CF1FD9F4', leaveFlags, leaveReason);
    }
    network.sessionLeaveIncludingReason = sessionLeaveIncludingReason;
    /**
     * communicationType: see 0xDBDF80673BBA3D65
     * communicationGroupFlag: see 0x40DF02F371F40883
     *
     * Hash: 0xE549F846DE7D32D5 | Since: 3095
     */
    function setCommunicationGroupFlags(communicationType, communicationGroupFlag) {
        Citizen.invokeNative('0xE549F846DE7D32D5', communicationType, communicationGroupFlag);
    }
    network.setCommunicationGroupFlags = setCommunicationGroupFlags;
    /**
     * Sets up tunable contexts for _NETWORK_GET_TUNABLES_REGISTRATION_{BOOL|INT|FLOAT}
     *
     * Hash: 0x014A73449675121D | Since: 3258
     */
    function setTunablesRegistrationContexts() {
        return Citizen.invokeNative('0x014A73449675121D');
    }
    network.setTunablesRegistrationContexts = setTunablesRegistrationContexts;
    /**
     * No comment provided
     *
     * Hash: 0xE9D0244ACBEE1BC4 | Since: 3258
     */
    function triggerDamageEventForZeroPedDamage(entity, trigger) {
        Citizen.invokeNative('0xE9D0244ACBEE1BC4', entity, trigger);
    }
    network.triggerDamageEventForZeroPedDamage = triggerDamageEventForZeroPedDamage;
    /**
     * reportData includes mc, ceo, yacht and licenceplate names
     *
     * Hash: 0x527803286A8B6C81 | Since: 3258
     */
    function setFreemodeReportData() {
        return Citizen.invokeNative('0x527803286A8B6C81');
    }
    network.setFreemodeReportData = setFreemodeReportData;
})(network || (network = {}));
export var shapetest;
(function (shapetest) {
    /**
     * Returns the result of a shape test, also returning the material of any touched surface.
     *
     * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
     *
     * Unless the return value is 2, the other return values are undefined.
     *
     * Hash: 0x4301E10C | Since: unknown
     */
    function getResultIncludingMaterial(shapeTestHandle) {
        return Citizen.invokeNative('0x4301E10C', shapeTestHandle);
    }
    shapetest.getResultIncludingMaterial = getResultIncludingMaterial;
    /**
     * Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
     *
     * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
     *
     * Hash: 0x3D87450E15D98694 | Since: 323
     */
    function getResult(shapeTestHandle) {
        return GetShapeTestResult(shapeTestHandle);
    }
    shapetest.getResult = getResult;
    /**
     * Returns the result of a shape test, also returning the material of any touched surface.
     *
     * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
     *
     * Unless the return value is 2, the other return values are undefined.
     *
     * Hash: 0x65287525D951F6BE | Since: 323
     */
    function getResultIncludingMaterial(shapeTestHandle) {
        return GetShapeTestResultIncludingMaterial(shapeTestHandle);
    }
    shapetest.getResultIncludingMaterial = getResultIncludingMaterial;
    /**
     * Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
     *
     * Hash: 0x2B3334BCA57CD799 | Since: 323
     */
    function releaseScriptGuidFromEntity(entityHit) {
        ReleaseScriptGuidFromEntity(entityHit);
    }
    shapetest.releaseScriptGuidFromEntity = releaseScriptGuidFromEntity;
    /**
     * Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
     *
     * Hash: 0x377906D8A31E5586 | Since: 323
     */
    function startExpensiveSynchronousLosProbe(x1, y1, z1, x2, y2, z2, flags, entity) {
        return StartExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, 0);
    }
    shapetest.startExpensiveSynchronousLosProbe = startExpensiveSynchronousLosProbe;
    /**
     * No comment provided
     *
     * Hash: 0x37181417CE7C8900 | Since: 323
     */
    function startBound(entity, flags1, flags2) {
        return StartShapeTestBound(entity, flags1, flags2);
    }
    shapetest.startBound = startBound;
    /**
     * No comment provided
     *
     * Hash: 0x052837721A854EC7 | Since: 323
     */
    function startBoundingBox(entity, flags1, flags2) {
        return StartShapeTestBoundingBox(entity, flags1, flags2);
    }
    shapetest.startBoundingBox = startBoundingBox;
    /**
     * No comment provided
     *
     * Hash: 0xFE466162C4401D18 | Since: 323
     */
    function startBox(pos, dimX, dimY, dimZ, rot, flags, entity) {
        return StartShapeTestBox(pos.x, pos.y, pos.z, dimX, dimY, dimZ, rot.x, rot.y, rot.z, undefined, flags, entity, undefined);
    }
    shapetest.startBox = startBox;
    /**
     * Raycast from point to point, where the ray has a radius.
     *
     * flags:
     * vehicles=10
     * peds =12
     *
     * Iterating through flags yields many ped / vehicle/ object combinations
     *
     * p9 = 7, but no idea what it does
     *
     * Entity is an entity to ignore
     *
     * Hash: 0x28579D1B8F8AAC80 | Since: 323
     */
    function startCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity) {
        return StartShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity, 0);
    }
    shapetest.startCapsule = startCapsule;
    /**
     * Asynchronously starts a line-of-sight (raycast) world probe shape test.
     *
     * Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
     *
     * p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
     *
     * Hash: 0x7EE9F5D83DD4F90E | Since: 323
     */
    function startLosProbe(x1, y1, z1, x2, y2, z2, flags, entity) {
        return StartShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, 0);
    }
    shapetest.startLosProbe = startLosProbe;
    /**
     * Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
     *
     * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
     *
     * Hash: 0xFF6BE494C7987F34 | Since: 323
     */
    function startMouseCursorLosProbe(flag, entity, flag2) {
        return StartShapeTestSurroundingCoords(flag, entity, flag2);
    }
    shapetest.startMouseCursorLosProbe = startMouseCursorLosProbe;
    /**
     * No comment provided
     *
     * Hash: 0xE6AC6C45FBE83004 | Since: 323
     */
    function startSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity) {
        return StartShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity, undefined);
    }
    shapetest.startSweptSphere = startSweptSphere;
})(shapetest || (shapetest = {}));
export var camera;
(function (camera_1) {
    /**
     * Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.
     *
     * Hash: 0x8F57A89D | Since: unknown
     */
    function getCamMatrix(camera, rightVector, forwardVector, upVector, position) {
        Citizen.invokeNative('0x8F57A89D', camera, rightVector, forwardVector, upVector, position);
    }
    camera_1.getCamMatrix = getCamMatrix;
    /**
     * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
     *
     * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
     *
     * p8 big values ~100 will slow down the camera movement before reaching this node
     *
     * p9 != 0 seems to override the rotation/pitch (bool?)
     *
     * Hash: 0x8609C75EC438FB3B | Since: 323
     */
    function addCamSplineNode(camera, pos, rot, length, smoothingStyle, rotationOrder) {
        AddCamSplineNode(camera, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, length, smoothingStyle, rotationOrder);
    }
    camera_1.addCamSplineNode = addCamSplineNode;
    /**
     * p0 is the spline camera to which the node is being added.
     * p1 is the camera used to create the node.
     * p3 is always 3 in scripts. It might be smoothing style or rotation order.
     *
     * Hash: 0x0FB82563989CF4FB | Since: 323
     */
    function addCamSplineNodeUsing(cam, cam2, length) {
        AddCamSplineNodeUsingCamera(cam, cam2, length, 0);
    }
    camera_1.addCamSplineNodeUsing = addCamSplineNodeUsing;
    /**
     * p0 is the spline camera to which the node is being added.
     * p1 is the camera used to create the node.
     * p3 is always 3 in scripts. It might be smoothing style or rotation order.
     *
     * Hash: 0x0A9F2A468B328E74 | Since: 323
     */
    function addCamSplineNodeUsingFrame(cam, cam2, length) {
        AddCamSplineNodeUsingCameraFrame(cam, cam2, length, 0);
    }
    camera_1.addCamSplineNodeUsingFrame = addCamSplineNodeUsingFrame;
    /**
     * p2 is always 2 in scripts. It might be smoothing style or rotation order.
     *
     * Hash: 0x609278246A29CA34 | Since: 323
     */
    function addCamSplineNodeUsingGameplayFrame(cam, length) {
        AddCamSplineNodeUsingGameplayFrame(cam, length, 0);
    }
    camera_1.addCamSplineNodeUsingGameplayFrame = addCamSplineNodeUsingGameplayFrame;
    /**
     * No comment provided
     *
     * Hash: 0x271017B9BA825366 | Since: 323
     */
    function allowMotionBlurDecay() {
        Citizen.invokeNative('0x271017B9BA825366', undefined, false);
    }
    camera_1.allowMotionBlurDecay = allowMotionBlurDecay;
    /**
     * Example from michael2 script.
     *
     * `CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);`
     *
     * Hash: 0xA2746EEAE3E577CD | Since: 323
     */
    function animatedShakeCam(cam, amplitude) {
        AnimatedShakeCam(cam, undefined, undefined, undefined, amplitude);
    }
    camera_1.animatedShakeCam = animatedShakeCam;
    /**
     * `CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);`
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xC2EAE3FB8CDBED31 | Since: 323
     */
    function animatedShakeScriptGlobal() {
        AnimatedShakeScriptGlobal(undefined, undefined, undefined, 0);
    }
    camera_1.animatedShakeScriptGlobal = animatedShakeScriptGlobal;
    /**
     * No comment provided
     *
     * Hash: 0x4879E4FE39074CDF | Since: 372
     */
    function areWidescreenBordersActive() {
        return Citizen.invokeNative('0x4879E4FE39074CDF');
    }
    camera_1.areWidescreenBordersActive = areWidescreenBordersActive;
    /**
     * Last param determines if its relative to the Entity
     *
     * Hash: 0xFEDB7D269E8C60E3 | Since: 323
     */
    function attachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative) {
        AttachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative);
    }
    camera_1.attachCamToEntity = attachCamToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x61A3DBA14AB7F411 | Since: 323
     */
    function attachCamToPedBone(cam, ped, boneIndex, pos, heading) {
        AttachCamToPedBone(cam, ped, boneIndex, pos.x, pos.y, pos.z, heading);
    }
    camera_1.attachCamToPedBone = attachCamToPedBone;
    /**
     * This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
     *
     * Hash: 0x8DB3F12A02CAEF72 | Since: 1290
     */
    function attachCamToVehicleBone(cam, vehicle, boneIndex, relativeRotation, rot, offsetX, offsetY, offsetZ, fixedDirection) {
        AttachCamToVehicleBone(cam, vehicle, boneIndex, relativeRotation, rot.x, rot.y, rot.z, offsetX, offsetY, offsetZ, fixedDirection);
    }
    camera_1.attachCamToVehicleBone = attachCamToVehicleBone;
    /**
     * No comment provided
     *
     * Hash: 0x9F97DA93681F87EA | Since: 1734
     */
    function blockFirstPersonOrientationResetThisUpdate() {
        Citizen.invokeNative('0x9F97DA93681F87EA');
    }
    camera_1.blockFirstPersonOrientationResetThisUpdate = blockFirstPersonOrientationResetThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xA7092AFE81944852 | Since: 2189
     */
    function bypassCollisionBuoyancyTestThisUpdate() {
        Citizen.invokeNative('0xA7092AFE81944852');
    }
    camera_1.bypassCollisionBuoyancyTestThisUpdate = bypassCollisionBuoyancyTestThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xDB629FFD9285FA06 | Since: 323
     */
    function bypassCutsceneCamRenderingThisUpdate() {
        StopCutsceneCamShaking();
    }
    camera_1.bypassCutsceneCamRenderingThisUpdate = bypassCutsceneCamRenderingThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x62374889A4D59F72 | Since: 877
     */
    function preventCollisionSettingsForTripleheadInInteriorsThisUpdate() {
        Citizen.invokeNative('0x62374889A4D59F72');
    }
    camera_1.preventCollisionSettingsForTripleheadInInteriorsThisUpdate = preventCollisionSettingsForTripleheadInInteriorsThisUpdate;
    /**
     * "DEFAULT_SCRIPTED_CAMERA"
     * "DEFAULT_ANIMATED_CAMERA"
     * "DEFAULT_SPLINE_CAMERA"
     * "DEFAULT_SCRIPTED_FLY_CAMERA"
     * "TIMED_SPLINE_CAMERA"
     *
     * Hash: 0xC3981DCE61D9E13F | Since: 323
     */
    function createCam(camName) {
        return CreateCam(camName, false);
    }
    camera_1.createCam = createCam;
    /**
     * No comment provided
     *
     * Hash: 0x5E3CF89C6BCCA67D | Since: 323
     */
    function create(camHash) {
        if (typeof camHash === 'string')
            camHash = misc.getHashKey(camHash);
        return CreateCamera(camHash, false);
    }
    camera_1.create = create;
    /**
     * p9 uses 2 by default
     *
     * Hash: 0x6ABFA3E16460F22D | Since: 323
     */
    function createWithParams(camHash, pos, rot, fov) {
        if (typeof camHash === 'string')
            camHash = misc.getHashKey(camHash);
        return CreateCameraWithParams(camHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fov, false, undefined);
    }
    camera_1.createWithParams = createWithParams;
    /**
     * camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
     * ------------
     * Camera names found in the b617d scripts:
     * "DEFAULT_ANIMATED_CAMERA"
     * "DEFAULT_SCRIPTED_CAMERA"
     * "DEFAULT_SCRIPTED_FLY_CAMERA"
     * "DEFAULT_SPLINE_CAMERA"
     * ------------
     * Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
     *
     * Hash: 0xB51194800B257161 | Since: 323
     */
    function createCamWithParams(camName, pos, rot, fov) {
        return CreateCamWithParams(camName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fov, false, 0);
    }
    camera_1.createCamWithParams = createCamWithParams;
    /**
     * hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
     *
     * Hash: 0x741B0129D4560F31 | Since: 323
     */
    function createCinematicShot(p0, time, entity) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        CreateCinematicShot(p0, time, false, entity);
    }
    camera_1.createCinematicShot = createCinematicShot;
    /**
     * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
     *
     * Hash: 0x8E5FB15663F79120 | Since: 323
     */
    function destroyAllCams(bScriptHostCam) {
        DestroyAllCams(bScriptHostCam);
    }
    camera_1.destroyAllCams = destroyAllCams;
    /**
     * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
     *
     * Hash: 0x865908C81A2C22E9 | Since: 323
     */
    function destroyCam(cam, bScriptHostCam) {
        DestroyCam(cam, bScriptHostCam);
    }
    camera_1.destroyCam = destroyCam;
    /**
     * No comment provided
     *
     * Hash: 0xA2FABBE87F4BAD82 | Since: 323
     */
    function detachCam(cam) {
        DetachCam(cam);
    }
    camera_1.detachCam = detachCam;
    /**
     * No comment provided
     *
     * Hash: 0x1A31FE0049E542F6 | Since: 323
     */
    function disableAimCamThisUpdate() {
        DisableAimCamThisUpdate();
    }
    camera_1.disableAimCamThisUpdate = disableAimCamThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x49482F9FCD825AAA | Since: 323
     */
    function disableCamCollisionForObject(entity) {
        DisableCamCollisionForObject(entity);
    }
    camera_1.disableCamCollisionForObject = disableCamCollisionForObject;
    /**
     * No comment provided
     *
     * Hash: 0xADFF1B2A555F5FBA | Since: 323
     */
    function disableCinematicBonnetThisUpdate() {
        DisableVehicleFirstPersonCamThisFrame();
    }
    camera_1.disableCinematicBonnetThisUpdate = disableCinematicBonnetThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x17FCA7199A530203 | Since: 323
     */
    function disableCinematicSlowMoThisUpdate() {
        return Citizen.invokeNative('0x17FCA7199A530203');
    }
    camera_1.disableCinematicSlowMoThisUpdate = disableCinematicSlowMoThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x62ECFCFDEE7885D6 | Since: 323
     */
    function disableCinematicVehicleIdleModeThisUpdate() {
        Citizen.invokeNative('0x62ECFCFDEE7885D6');
    }
    camera_1.disableCinematicVehicleIdleModeThisUpdate = disableCinematicVehicleIdleModeThisUpdate;
    /**
     * Sets some flag on cinematic camera
     *
     * Hash: 0xB1381B97F70C7B30 | Since: 1180
     */
    function disableFirstPersonWaterClippingTestThisUpdate() {
        Citizen.invokeNative('0xB1381B97F70C7B30');
    }
    camera_1.disableFirstPersonWaterClippingTestThisUpdate = disableFirstPersonWaterClippingTestThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x59424BD75174C9B1 | Since: 323
     */
    function disableFirstPersonFlashEffectThisUpdate() {
        Citizen.invokeNative('0x59424BD75174C9B1');
    }
    camera_1.disableFirstPersonFlashEffectThisUpdate = disableFirstPersonFlashEffectThisUpdate;
    /**
     * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
     *
     * Hash: 0xEA7F0AD7E9BA676F | Since: 323
     */
    function disableGameplayCamAltitudeFovScalingThisUpdate() {
        EnableCrosshairThisFrame();
    }
    camera_1.disableGameplayCamAltitudeFovScalingThisUpdate = disableGameplayCamAltitudeFovScalingThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x5A43C76F7FC7BA5F | Since: 323
     */
    function disableNearClipScanThisUpdate() {
        Citizen.invokeNative('0x5A43C76F7FC7BA5F');
    }
    camera_1.disableNearClipScanThisUpdate = disableNearClipScanThisUpdate;
    /**
     * Disables first person camera for the current frame.
     *
     * Found in decompiled scripts:
     * `GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);`
     * `CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();`
     *
     * Hash: 0xDE2EF5DA284CC8DF | Since: 323
     */
    function disableOnFootFirstPersonViewThisUpdate() {
        DisableFirstPersonCamThisFrame();
    }
    camera_1.disableOnFootFirstPersonViewThisUpdate = disableOnFootFirstPersonViewThisUpdate;
    /**
     * Returns whether or not the passed camera handle exists.
     *
     * Hash: 0xA7A932170592B50E | Since: 323
     */
    function doesCamExist(cam) {
        return DoesCamExist(cam);
    }
    camera_1.doesCamExist = doesCamExist;
    /**
     * Fades the screen in.
     *
     * duration: The time the fade should take, in milliseconds.
     *
     * Hash: 0xD4E8E24955024033 | Since: 323
     */
    function doScreenFadeIn(duration) {
        DoScreenFadeIn(duration);
    }
    camera_1.doScreenFadeIn = doScreenFadeIn;
    /**
     * Fades the screen out.
     *
     * duration: The time the fade should take, in milliseconds.
     *
     * Hash: 0x891B5B39AC6302AF | Since: 323
     */
    function doScreenFadeOut(duration) {
        DoScreenFadeOut(duration);
    }
    camera_1.doScreenFadeOut = doScreenFadeOut;
    /**
     * No comment provided
     *
     * Hash: 0x28B022A17B068A3A | Since: 1734
     */
    function forceBonnetRelativeHeadingAndPitch() {
        Citizen.invokeNative('0x28B022A17B068A3A', 0, 0);
    }
    camera_1.forceBonnetRelativeHeadingAndPitch = forceBonnetRelativeHeadingAndPitch;
    /**
     * No comment provided
     *
     * Hash: 0x48608C3464F58AB4 | Since: 505
     */
    function forceRelativeHeadingAndPitch(roll, pitch, yaw) {
        SetGameplayCamRelativeRotation(roll, pitch, yaw);
    }
    camera_1.forceRelativeHeadingAndPitch = forceRelativeHeadingAndPitch;
    /**
     * No comment provided
     *
     * Hash: 0xAABD62873FFB1A33 | Since: 2189
     */
    function forceCamFarClip(cam) {
        Citizen.invokeNative('0xAABD62873FFB1A33', cam, 0);
    }
    camera_1.forceCamFarClip = forceCamFarClip;
    /**
     * No comment provided
     *
     * Hash: 0xA41BCD7213805AAC | Since: 323
     */
    function forceCinematicRenderingThisUpdate(toggle) {
        ForceCinematicRenderingThisUpdate(toggle);
    }
    camera_1.forceCinematicRenderingThisUpdate = forceCinematicRenderingThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x380B4968D1E09E55 | Since: 1290
     */
    function forceTightspaceCustomFramingThisUpdate() {
        Citizen.invokeNative('0x380B4968D1E09E55');
    }
    camera_1.forceTightspaceCustomFramingThisUpdate = forceTightspaceCustomFramingThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x0AA27680A0BD43FA | Since: 1103
     */
    function forceVehicleCamStuntSettingsThisUpdate() {
        Citizen.invokeNative('0x0AA27680A0BD43FA');
    }
    camera_1.forceVehicleCamStuntSettingsThisUpdate = forceVehicleCamStuntSettingsThisUpdate;
    /**
     * enum Context
     * {
     * ON_FOOT,
     * IN_VEHICLE,
     * ON_BIKE,
     * IN_BOAT,
     * IN_AIRCRAFT,
     * IN_SUBMARINE,
     * IN_HELI,
     * IN_TURRET
     * };
     *
     * Hash: 0x19CAFA3C87F7C2FF | Since: 323
     */
    function getCamActiveViewModeContext() {
        return GetCamActiveViewModeContext();
    }
    camera_1.getCamActiveViewModeContext = getCamActiveViewModeContext;
    /**
     * No comment provided
     *
     * Hash: 0xA10B2DB49E92A6B0 | Since: 323
     */
    function getCamAnimCurrentPhase(cam) {
        return GetCamAnimCurrentPhase(cam);
    }
    camera_1.getCamAnimCurrentPhase = getCamAnimCurrentPhase;
    /**
     * No comment provided
     *
     * Hash: 0xBAC038F7459AE5AE | Since: 323
     */
    function getCamCoord(cam) {
        return new Vector3(GetCamCoord(cam));
    }
    camera_1.getCamCoord = getCamCoord;
    /**
     * No comment provided
     *
     * Hash: 0x06D153C0B99B6128 | Since: 2699
     */
    function getCamDofStrength(cam) {
        return GetCamDofStrength(cam);
    }
    camera_1.getCamDofStrength = getCamDofStrength;
    /**
     * No comment provided
     *
     * Hash: 0xB60A9CFEB21CA6AA | Since: 323
     */
    function getCamFarClip(cam) {
        return GetCamFarClip(cam);
    }
    camera_1.getCamFarClip = getCamFarClip;
    /**
     * No comment provided
     *
     * Hash: 0x255F8DAFD540D397 | Since: 323
     */
    function getCamFarDof(cam) {
        return GetCamFarDof(cam);
    }
    camera_1.getCamFarDof = getCamFarDof;
    /**
     * No comment provided
     *
     * Hash: 0xC3330A45CCCDB26A | Since: 323
     */
    function getCamFov(cam) {
        return GetCamFov(cam);
    }
    camera_1.getCamFov = getCamFov;
    /**
     * No comment provided
     *
     * Hash: 0xC520A34DAFBF24B1 | Since: 323
     */
    function getCamNearClip(cam) {
        return GetCamNearClip(cam);
    }
    camera_1.getCamNearClip = getCamNearClip;
    /**
     * No comment provided
     *
     * Hash: 0xC2612D223D915A1C | Since: 2699
     */
    function getCamNearDof(cam) {
        return GetCamNearDof(cam);
    }
    camera_1.getCamNearDof = getCamNearDof;
    /**
     * The last parameter, as in other "ROT" methods, is usually 2.
     *
     * Hash: 0x7D304C1C955E3E12 | Since: 323
     */
    function getCamRot(cam, rotationOrder) {
        return new Vector3(GetCamRot(cam, rotationOrder));
    }
    camera_1.getCamRot = getCamRot;
    /**
     * No comment provided
     *
     * Hash: 0xB22B17DF858716A6 | Since: 323
     */
    function getCamSplineNodeIndex(cam) {
        return GetCamSplineNodeIndex(cam);
    }
    camera_1.getCamSplineNodeIndex = getCamSplineNodeIndex;
    /**
     * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
     *
     * Hash: 0xD9D0E694C8282C96 | Since: 323
     */
    function getCamSplineNodePhase(cam) {
        return GetCamSplineNodePhase(cam);
    }
    camera_1.getCamSplineNodePhase = getCamSplineNodePhase;
    /**
     * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
     *
     * (returns 1.0f when no nodes has been added, reached end of non existing spline)
     *
     * Hash: 0xB5349E36C546509A | Since: 323
     */
    function getCamSplinePhase(cam) {
        return GetCamSplinePhase(cam);
    }
    camera_1.getCamSplinePhase = getCamSplinePhase;
    /**
     * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
     *
     * Hash: 0xEE778F8C7E1142E2 | Since: 323
     */
    function getCamViewModeForContext(context) {
        return GetCamViewModeForContext(context);
    }
    camera_1.getCamViewModeForContext = getCamViewModeForContext;
    /**
     * No comment provided
     *
     * Hash: 0x77C3CEC46BE286F6 | Since: 2372
     */
    function getDebugCam() {
        return GetDebugCamera();
    }
    camera_1.getDebugCam = getDebugCam;
    /**
     * No comment provided
     *
     * Hash: 0xA200EB1EE790F448 | Since: 323
     */
    function getFinalRenderedCamCoord() {
        return new Vector3(GetFinalRenderedCamCoord());
    }
    camera_1.getFinalRenderedCamCoord = getFinalRenderedCamCoord;
    /**
     * No comment provided
     *
     * Hash: 0xDFC8CBC606FDB0FC | Since: 323
     */
    function getFinalRenderedCamFarClip() {
        return GetFinalRenderedCamFarClip();
    }
    camera_1.getFinalRenderedCamFarClip = getFinalRenderedCamFarClip;
    /**
     * No comment provided
     *
     * Hash: 0x9780F32BCAF72431 | Since: 323
     */
    function getFinalRenderedCamFarDof() {
        return GetFinalRenderedCamFarDof();
    }
    camera_1.getFinalRenderedCamFarDof = getFinalRenderedCamFarDof;
    /**
     * Gets some camera fov
     *
     * Hash: 0x80EC114669DAEFF4 | Since: 323
     */
    function getFinalRenderedCamFov() {
        return GetFinalRenderedCamFov();
    }
    camera_1.getFinalRenderedCamFov = getFinalRenderedCamFov;
    /**
     * No comment provided
     *
     * Hash: 0x162F9D995753DC19 | Since: 323
     */
    function getFinalRenderedCamMotionBlurStrength() {
        return GetFinalRenderedCamMotionBlurStrength();
    }
    camera_1.getFinalRenderedCamMotionBlurStrength = getFinalRenderedCamMotionBlurStrength;
    /**
     * No comment provided
     *
     * Hash: 0xD0082607100D7193 | Since: 323
     */
    function getFinalRenderedCamNearClip() {
        return GetFinalRenderedCamNearClip();
    }
    camera_1.getFinalRenderedCamNearClip = getFinalRenderedCamNearClip;
    /**
     * No comment provided
     *
     * Hash: 0xA03502FC581F7D9B | Since: 323
     */
    function getFinalRenderedCamNearDof() {
        return GetFinalRenderedCamNearDof();
    }
    camera_1.getFinalRenderedCamNearDof = getFinalRenderedCamNearDof;
    /**
     * p0 seems to consistently be 2 across scripts
     *
     * `Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS`
     *
     * Hash: 0x5B4E4C817FCC2DFB | Since: 323
     */
    function getFinalRenderedCamRot(rotationOrder) {
        return new Vector3(GetFinalRenderedCamRot(rotationOrder));
    }
    camera_1.getFinalRenderedCamRot = getFinalRenderedCamRot;
    /**
     * No comment provided
     *
     * Hash: 0x5F35F6732C3FBBA0 | Since: 323
     */
    function getFinalRenderedRemotePlayerCamFov(player) {
        return GetFinalRenderedInWhenFriendlyFov(player);
    }
    camera_1.getFinalRenderedRemotePlayerCamFov = getFinalRenderedRemotePlayerCamFov;
    /**
     * No comment provided
     *
     * Hash: 0x26903D9CD1175F2C | Since: 323
     */
    function getFinalRenderedRemotePlayerCamRot(player, rotationOrder) {
        return new Vector3(GetFinalRenderedInWhenFriendlyRot(player, rotationOrder));
    }
    camera_1.getFinalRenderedRemotePlayerCamRot = getFinalRenderedRemotePlayerCamRot;
    /**
     * No comment provided
     *
     * Hash: 0x7EC52CC40597D170 | Since: 323
     */
    function getFirstPersonAimCamZoomFactor() {
        return GetFirstPersonAimCamZoomFactor();
    }
    camera_1.getFirstPersonAimCamZoomFactor = getFirstPersonAimCamZoomFactor;
    /**
     * No comment provided
     *
     * Hash: 0x89215EC747DF244A | Since: 323
     */
    function getFocusPedOnScreen() {
        return GetFocusPedOnScreen(0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    camera_1.getFocusPedOnScreen = getFocusPedOnScreen;
    /**
     * See viewmode enum in CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE for return value
     *
     * Hash: 0x8D4D46230B2C353A | Since: 323
     */
    function getFollowPedCamViewMode() {
        return GetFollowPedCamViewMode();
    }
    camera_1.getFollowPedCamViewMode = getFollowPedCamViewMode;
    /**
     * No comment provided
     *
     * Hash: 0x33E6C8EFD0CD93E9 | Since: 323
     */
    function getFollowPedCamZoomLevel() {
        return GetFollowPedCamZoomLevel();
    }
    camera_1.getFollowPedCamZoomLevel = getFollowPedCamZoomLevel;
    /**
     * Returns the type of camera:
     *
     * enum _viewmode //0xA11D7CA8
     * {
     * THIRD_PERSON_NEAR = 0,
     * THIRD_PERSON_MEDIUM = 1,
     * THIRD_PERSON_FAR = 2,
     * CINEMATIC = 3,
     * FIRST_PERSON = 4
     * };
     *
     * Hash: 0xA4FF579AC0E3AAAE | Since: 323
     */
    function getFollowVehicleCamViewMode() {
        return GetFollowVehicleCamViewMode();
    }
    camera_1.getFollowVehicleCamViewMode = getFollowVehicleCamViewMode;
    /**
     * No comment provided
     *
     * Hash: 0xEE82280AB767B690 | Since: 323
     */
    function getFollowVehicleCamZoomLevel() {
        return GetFollowVehicleCamZoomLevel();
    }
    camera_1.getFollowVehicleCamZoomLevel = getFollowVehicleCamZoomLevel;
    /**
     * No comment provided
     *
     * Hash: 0x14D6F5678D8F1B37 | Since: 323
     */
    function getGameplayCamCoord() {
        return new Vector3(GetGameplayCamCoord());
    }
    camera_1.getGameplayCamCoord = getGameplayCamCoord;
    /**
     * No comment provided
     *
     * Hash: 0x65019750A0324133 | Since: 323
     */
    function getGameplayCamFov() {
        return GetGameplayCamFov();
    }
    camera_1.getGameplayCamFov = getGameplayCamFov;
    /**
     * No comment provided
     *
     * Hash: 0x743607648ADD4587 | Since: 323
     */
    function getGameplayCamRelativeHeading() {
        return GetGameplayCamRelativeHeading();
    }
    camera_1.getGameplayCamRelativeHeading = getGameplayCamRelativeHeading;
    /**
     * No comment provided
     *
     * Hash: 0x3A6867B4845BEDA2 | Since: 323
     */
    function getGameplayCamRelativePitch() {
        return GetGameplayCamRelativePitch();
    }
    camera_1.getGameplayCamRelativePitch = getGameplayCamRelativePitch;
    /**
     * p0 dosen't seem to change much, I tried it with 0, 1, 2:
     * 0-Pitch(X): -70.000092
     * 0-Roll(Y): -0.000001
     * 0-Yaw(Z): -43.886459
     * 1-Pitch(X): -70.000092
     * 1-Roll(Y): -0.000001
     * 1-Yaw(Z): -43.886463
     * 2-Pitch(X): -70.000092
     * 2-Roll(Y): -0.000002
     * 2-Yaw(Z): -43.886467
     *
     * Hash: 0x837765A25378F0BB | Since: 323
     */
    function getGameplayCamRot(rotationOrder) {
        return new Vector3(GetGameplayCamRot(rotationOrder));
    }
    camera_1.getGameplayCamRot = getGameplayCamRot;
    /**
     * No comment provided
     *
     * Hash: 0x5234F9F10919EABA | Since: 323
     */
    function getRenderingCam() {
        return GetRenderingCam();
    }
    camera_1.getRenderingCam = getRenderingCam;
    /**
     * Example from am_mp_drone script:
     *
     * `CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);`
     *
     * Hash: 0x202A5ED9CE01D6E7 | Since: 2189
     */
    function hardAttachCamToEntity(cam, entity, rot, xOffset, yOffset, zOffset, isRelative) {
        HardAttachCamToEntity(cam, entity, rot.x, rot.y, rot.z, xOffset, yOffset, zOffset, isRelative);
    }
    camera_1.hardAttachCamToEntity = hardAttachCamToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x149916F50C34A40D | Since: 1180
     */
    function hardAttachCamToPedBone(cam, ped, boneIndex) {
        HardAttachCamToPedBone(cam, ped, boneIndex, 0, 0, 0, 0, 0, 0, false);
    }
    camera_1.hardAttachCamToPedBone = hardAttachCamToPedBone;
    /**
     * No comment provided
     *
     * Hash: 0x7B8A361C1813FBEF | Since: 573
     */
    function ignoreMenuPreferenceForBonnetThisUpdate() {
        Citizen.invokeNative('0x7B8A361C1813FBEF');
    }
    camera_1.ignoreMenuPreferenceForBonnetThisUpdate = ignoreMenuPreferenceForBonnetThisUpdate;
    /**
     * Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
     *
     * Hash: 0x9E4CFFF989258472 | Since: 323
     */
    function invalidateCinematicVehicleIdleMode() {
        InvalidateVehicleIdleCam();
    }
    camera_1.invalidateCinematicVehicleIdleMode = invalidateCinematicVehicleIdleMode;
    /**
     * Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
     *
     * Hash: 0xF4F2C0D4EE209E20 | Since: 323
     */
    function invalidateIdleCam() {
        InvalidateIdleCam();
    }
    camera_1.invalidateIdleCam = invalidateIdleCam;
    /**
     * No comment provided
     *
     * Hash: 0x68EDDA28A5976D07 | Since: 323
     */
    function isAimCamActive() {
        return IsAimCamActive();
    }
    camera_1.isAimCamActive = isAimCamActive;
    /**
     * No comment provided
     *
     * Hash: 0x74BD83EA840F6BC9 | Since: 323
     */
    function isAimCamActiveInAccurateMode() {
        return IsAimCamThirdPersonActive();
    }
    camera_1.isAimCamActiveInAccurateMode = isAimCamActiveInAccurateMode;
    /**
     * No comment provided
     *
     * Hash: 0xEAF0FA793D05C592 | Since: 323
     */
    function isAllowedIndependentModes() {
        return Citizen.invokeNative('0xEAF0FA793D05C592');
    }
    camera_1.isAllowedIndependentModes = isAllowedIndependentModes;
    /**
     * No comment provided
     *
     * Hash: 0xD7360051C885628B | Since: 372
     */
    function isBonnetCinematicCamRendering() {
        return IsBonnetCinematicCamRendering();
    }
    camera_1.isBonnetCinematicCamRendering = isBonnetCinematicCamRendering;
    /**
     * Returns whether or not the passed camera handle is active.
     *
     * Hash: 0xDFB2B516207D3534 | Since: 323
     */
    function isCamActive(cam) {
        return IsCamActive(cam);
    }
    camera_1.isCamActive = isCamActive;
    /**
     * No comment provided
     *
     * Hash: 0x036F97C908C2B52C | Since: 323
     */
    function isCamInterpolating(cam) {
        return IsCamInterpolating(cam);
    }
    camera_1.isCamInterpolating = isCamInterpolating;
    /**
     * No comment provided
     *
     * Hash: 0xC90621D8A0CEECF2 | Since: 323
     */
    function isCamPlayingAnim(cam, animName, animDictionary) {
        return IsCamPlayingAnim(cam, animName, animDictionary);
    }
    camera_1.isCamPlayingAnim = isCamPlayingAnim;
    /**
     * No comment provided
     *
     * Hash: 0x02EC0AF5C5A49B7A | Since: 323
     */
    function isCamRendering(cam) {
        return IsCamRendering(cam);
    }
    camera_1.isCamRendering = isCamRendering;
    /**
     * No comment provided
     *
     * Hash: 0x6B24BFE83A2BE47B | Since: 323
     */
    function isCamShaking(cam) {
        return IsCamShaking(cam);
    }
    camera_1.isCamShaking = isCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0x0290F35C0AD97864 | Since: 323
     */
    function isCamSplinePaused(cam) {
        return IsCamSplinePaused(cam);
    }
    camera_1.isCamSplinePaused = isCamSplinePaused;
    /**
     * Tests some cinematic camera flags
     *
     * Hash: 0xF5F1E89A970B7796 | Since: 1493
     */
    function isCinematicCamInputActive() {
        return IsCinematicCamInputActive();
    }
    camera_1.isCinematicCamInputActive = isCinematicCamInputActive;
    /**
     * No comment provided
     *
     * Hash: 0xB15162CB5826E9E8 | Since: 323
     */
    function isCinematicCamRendering() {
        return IsCinematicCamRendering();
    }
    camera_1.isCinematicCamRendering = isCinematicCamRendering;
    /**
     * No comment provided
     *
     * Hash: 0xBBC08F6B4CB8FF0A | Since: 323
     */
    function isCinematicCamShaking() {
        return IsCinematicCamShaking();
    }
    camera_1.isCinematicCamShaking = isCinematicCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0x4F32C0D5A90A9B40 | Since: 323
     */
    function isCinematicFirstPersonVehicleInteriorCamRendering() {
        return IsInVehicleCamDisabled();
    }
    camera_1.isCinematicFirstPersonVehicleInteriorCamRendering = isCinematicFirstPersonVehicleInteriorCamRendering;
    /**
     * No comment provided
     *
     * Hash: 0xCA9D2AA3E326D720 | Since: 323
     */
    function isCinematicIdleCamRendering() {
        return IsCinematicIdleCamRendering();
    }
    camera_1.isCinematicIdleCamRendering = isCinematicIdleCamRendering;
    /**
     * Hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
     *
     * Hash: 0xCC9F3371A7C28BC9 | Since: 323
     */
    function isCinematicShotActive(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return IsCinematicShotActive(p0);
    }
    camera_1.isCinematicShotActive = isCinematicShotActive;
    /**
     * No comment provided
     *
     * Hash: 0xBF72910D0F26F025 | Since: 323
     */
    function isCodeGameplayHintActive() {
        return Citizen.invokeNative('0xBF72910D0F26F025');
    }
    camera_1.isCodeGameplayHintActive = isCodeGameplayHintActive;
    /**
     * No comment provided
     *
     * Hash: 0x5E346D934122613F | Since: 323
     */
    function isFirstPersonAimCamActive() {
        return IsFirstPersonAimCamActive();
    }
    camera_1.isFirstPersonAimCamActive = isFirstPersonAimCamActive;
    /**
     * No comment provided
     *
     * Hash: 0xC6D3D26810C8E0F9 | Since: 323
     */
    function isFollowPedCamActive() {
        return IsFollowPedCamActive();
    }
    camera_1.isFollowPedCamActive = isFollowPedCamActive;
    /**
     * No comment provided
     *
     * Hash: 0xCBBDE6D335D6D496 | Since: 323
     */
    function isFollowVehicleCamActive() {
        return IsFollowVehicleCamActive();
    }
    camera_1.isFollowVehicleCamActive = isFollowVehicleCamActive;
    /**
     * No comment provided
     *
     * Hash: 0x70FDA869F3317EA9 | Since: 323
     */
    function isGameplayCamLookingBehind() {
        return IsGameplayCamLookingBehind();
    }
    camera_1.isGameplayCamLookingBehind = isGameplayCamLookingBehind;
    /**
     * Examples when this function will return 0 are:
     * - During busted screen.
     * - When player is coming out from a hospital.
     * - When player is coming out from a police station.
     * - When player is buying gun from AmmuNation.
     *
     * Hash: 0x39B5D1B10383F0C8 | Since: 323
     */
    function isGameplayCamRendering() {
        return IsGameplayCamRendering();
    }
    camera_1.isGameplayCamRendering = isGameplayCamRendering;
    /**
     * No comment provided
     *
     * Hash: 0x016C090630DF1F89 | Since: 323
     */
    function isGameplayCamShaking() {
        return IsGameplayCamShaking();
    }
    camera_1.isGameplayCamShaking = isGameplayCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0xE520FF1AD2785B40 | Since: 323
     */
    function isGameplayHintActive() {
        return IsGameplayHintActive();
    }
    camera_1.isGameplayHintActive = isGameplayHintActive;
    /**
     * No comment provided
     *
     * Hash: 0x3044240D2E0FA842 | Since: 323
     */
    function isInterpolatingFromScriptCams() {
        return Citizen.invokeNative('0x3044240D2E0FA842');
    }
    camera_1.isInterpolatingFromScriptCams = isInterpolatingFromScriptCams;
    /**
     * No comment provided
     *
     * Hash: 0x705A276EBFF3133D | Since: 323
     */
    function isInterpolatingToScriptCams() {
        return Citizen.invokeNative('0x705A276EBFF3133D');
    }
    camera_1.isInterpolatingToScriptCams = isInterpolatingToScriptCams;
    /**
     * No comment provided
     *
     * Hash: 0x1F2300CB7FA7B7F6 | Since: 323
     */
    function isInVehicleMobilePhoneRendering() {
        return Citizen.invokeNative('0x1F2300CB7FA7B7F6');
    }
    camera_1.isInVehicleMobilePhoneRendering = isInVehicleMobilePhoneRendering;
    /**
     * No comment provided
     *
     * Hash: 0x5A859503B0C08678 | Since: 323
     */
    function isScreenFadedIn() {
        return IsScreenFadedIn();
    }
    camera_1.isScreenFadedIn = isScreenFadedIn;
    /**
     * No comment provided
     *
     * Hash: 0xB16FCE9DDC7BA182 | Since: 323
     */
    function isScreenFadedOut() {
        return IsScreenFadedOut();
    }
    camera_1.isScreenFadedOut = isScreenFadedOut;
    /**
     * No comment provided
     *
     * Hash: 0x5C544BC6C57AC575 | Since: 323
     */
    function isScreenFadingIn() {
        return IsScreenFadingIn();
    }
    camera_1.isScreenFadingIn = isScreenFadingIn;
    /**
     * No comment provided
     *
     * Hash: 0x797AC7CB535BA28F | Since: 323
     */
    function isScreenFadingOut() {
        return IsScreenFadingOut();
    }
    camera_1.isScreenFadingOut = isScreenFadingOut;
    /**
     * In drunk_controller.c4, sub_309
     * `if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {`
     * `CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);`
     * }
     *
     * Hash: 0xC912AF078AF19212 | Since: 323
     */
    function isScriptGlobalShaking() {
        return IsScriptGlobalShaking();
    }
    camera_1.isScriptGlobalShaking = isScriptGlobalShaking;
    /**
     * No comment provided
     *
     * Hash: 0xE33D59DA70B58FDF | Since: 323
     */
    function isSphereVisible(pos, radius) {
        return IsSphereVisible(pos.x, pos.y, pos.z, radius);
    }
    camera_1.isSphereVisible = isSphereVisible;
    /**
     * Max value for p1 is 15.
     *
     * Hash: 0x7DCF7C708D292D55 | Since: 323
     */
    function overrideCamSplineMotionBlur(cam) {
        OverrideCamSplineMotionBlur(cam, 0, 0, 0);
    }
    camera_1.overrideCamSplineMotionBlur = overrideCamSplineMotionBlur;
    /**
     * No comment provided
     *
     * Hash: 0x40B62FA033EB0346 | Since: 323
     */
    function overrideCamSplineVelocity(cam) {
        OverrideCamSplineVelocity(cam, 0, 0, 0);
    }
    camera_1.overrideCamSplineVelocity = overrideCamSplineVelocity;
    /**
     * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
     *
     * p9 is unknown at this time.
     * p10 throughout all the X360 Scripts is always 2.
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x9A2D0FB2E7852392 | Since: 323
     */
    function playCamAnim(cam, animName, animDictionary, pos, rot) {
        return PlayCamAnim(cam, animName, animDictionary, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, false, 0);
    }
    camera_1.playCamAnim = playCamAnim;
    /**
     * Examples:
     *
     * `CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");`
     *
     * `CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7\/\*1\*\/], l_F4D[15\/\*1\*\/], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");`
     *
     * Hash: 0xE32EFE9AB4A9AA0C | Since: 323
     */
    function playSynchronizedCamAnim(animName, animDictionary) {
        return PlaySynchronizedCamAnim(undefined, undefined, animName, animDictionary);
    }
    camera_1.playSynchronizedCamAnim = playSynchronizedCamAnim;
    /**
     * No comment provided
     *
     * Hash: 0xF75497BB865F0803 | Since: 323
     */
    function pointCamAtCoord(cam, pos) {
        PointCamAtCoord(cam, pos.x, pos.y, pos.z);
    }
    camera_1.pointCamAtCoord = pointCamAtCoord;
    /**
     * p5 always seems to be 1 i.e TRUE
     *
     * Hash: 0x5640BFF86B16E8DC | Since: 323
     */
    function pointCamAtEntity(cam, entity) {
        PointCamAtEntity(cam, entity, 0, 0, 0, false);
    }
    camera_1.pointCamAtEntity = pointCamAtEntity;
    /**
     * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
     *
     * Hash: 0x68B2B5F33BA63C41 | Since: 323
     */
    function pointCamAtPedBone(cam, ped, boneIndex, pos) {
        PointCamAtPedBone(cam, ped, boneIndex, pos.x, pos.y, pos.z, false);
    }
    camera_1.pointCamAtPedBone = pointCamAtPedBone;
    /**
     * ease - smooth transition between the camera's positions
     * easeTime - Time in milliseconds for the transition to happen
     *
     * If you have created a script (rendering) camera, and want to go back to the
     * character (gameplay) camera, call this native with render set to 0.
     * Setting ease to 1 will smooth the transition.
     *
     * Hash: 0x07E5B515DB0636FC | Since: 323
     */
    function renderScriptCams(render, ease, easeTime) {
        RenderScriptCams(render, ease, easeTime, false, false, undefined);
    }
    camera_1.renderScriptCams = renderScriptCams;
    /**
     * No comment provided
     *
     * Hash: 0x8BFCEB5EA1B161B6 | Since: 323
     */
    function replayGetMaxDistanceAllowedFromPlayer() {
        return ReplayFreeCamGetMaxRange();
    }
    camera_1.replayGetMaxDistanceAllowedFromPlayer = replayGetMaxDistanceAllowedFromPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x7295C203DD659DFE | Since: 2699
     */
    function resetGameplayCamFullAttachParentTransformTimer() {
        Citizen.invokeNative('0x7295C203DD659DFE');
    }
    camera_1.resetGameplayCamFullAttachParentTransformTimer = resetGameplayCamFullAttachParentTransformTimer;
    /**
     * No comment provided
     *
     * Hash: 0x4008EDF7D6E48175 | Since: 323
     */
    function setAllowCustomVehicleDriveByCamThisUpdate() {
        Citizen.invokeNative('0x4008EDF7D6E48175', false);
    }
    camera_1.setAllowCustomVehicleDriveByCamThisUpdate = setAllowCustomVehicleDriveByCamThisUpdate;
    /**
     * Set camera as active/inactive.
     *
     * Hash: 0x026FB97D0A425F84 | Since: 323
     */
    function setCamActive(cam, active) {
        SetCamActive(cam, active);
    }
    camera_1.setCamActive = setCamActive;
    /**
     * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
     *
     *
     * Hash: 0x9FBDA379383A52A4 | Since: 323
     */
    function setCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation) {
        SetCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation);
    }
    camera_1.setCamActiveWithInterp = setCamActiveWithInterp;
    /**
     * Allows you to aim and shoot at the direction the camera is facing.
     *
     * Hash: 0x8C1DC7770C51DC8D | Since: 323
     */
    function setCamAffectsAiming(cam, toggle) {
        SetCamAffectsAiming(cam, toggle);
    }
    camera_1.setCamAffectsAiming = setCamAffectsAiming;
    /**
     * No comment provided
     *
     * Hash: 0x4145A4C44FF3B5A6 | Since: 323
     */
    function setCamAnimCurrentPhase(cam, phase) {
        SetCamAnimCurrentPhase(cam, phase);
    }
    camera_1.setCamAnimCurrentPhase = setCamAnimCurrentPhase;
    /**
     * Rotates the radar to match the camera's Z rotation
     *
     * Hash: 0x661B5C8654ADD825 | Since: 323
     */
    function setCamControlsMiniMapHeading(cam, toggle) {
        SetCamControlsMiniMapHeading(cam, toggle);
    }
    camera_1.setCamControlsMiniMapHeading = setCamControlsMiniMapHeading;
    /**
     * Sets the position of the cam.
     *
     * Hash: 0x4D41783FB745E42E | Since: 323
     */
    function setCamCoord(cam, pos) {
        SetCamCoord(cam, pos.x, pos.y, pos.z);
    }
    camera_1.setCamCoord = setCamCoord;
    /**
     * if p0 is 0, effect is cancelled
     *
     * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
     *
     * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
     *
     * Hash: 0x80C8B1846639BB19 | Since: 323
     */
    function setCamDeathFailEffectState() {
        SetCamEffect(0);
    }
    camera_1.setCamDeathFailEffectState = setCamDeathFailEffectState;
    /**
     * NOTE: Debugging functions are not present in the retail version of the game.
     *
     * Hash: 0x1B93E0107865DD40 | Since: 323
     */
    function setCamDebugName(camera, name) {
        SetCamDebugName(camera, name);
    }
    camera_1.setCamDebugName = setCamDebugName;
    /**
     * This native has its name defined inside its codE
     *
     *
     * Hash: 0x7DD234D6F3914C5B | Since: 323
     */
    function setCamDofFnumberOfLens(camera) {
        SetCamDofFnumberOfLens(camera, 0);
    }
    camera_1.setCamDofFnumberOfLens = setCamDofFnumberOfLens;
    /**
     * Native name labeled within its code
     *
     * Hash: 0x47B595D60664CFFA | Since: 1011
     */
    function setCamDofFocalLengthMultiplier(camera, multiplier) {
        SetCamDofFocalLengthMultiplier(camera, multiplier);
    }
    camera_1.setCamDofFocalLengthMultiplier = setCamDofFocalLengthMultiplier;
    /**
     * This native has a name defined inside its code
     *
     * Hash: 0xC669EEA5D031B7DE | Since: 323
     */
    function setCamDofFocusDistanceBias(camera) {
        SetCamDofFocusDistanceBias(camera, 0);
    }
    camera_1.setCamDofFocusDistanceBias = setCamDofFocusDistanceBias;
    /**
     * This native has a name defined inside its code
     *
     * Hash: 0xC3654A441402562D | Since: 323
     */
    function setCamDofMaxNearInFocusDistance(camera) {
        SetCamDofMaxNearInFocusDistance(camera, 0);
    }
    camera_1.setCamDofMaxNearInFocusDistance = setCamDofMaxNearInFocusDistance;
    /**
     * This native has a name defined inside its code
     *
     * Hash: 0x2C654B4943BDDF7C | Since: 323
     */
    function setCamDofMaxNearInFocusDistanceBlendLevel(camera) {
        SetCamDofMaxNearInFocusDistanceBlendLevel(camera, 0);
    }
    camera_1.setCamDofMaxNearInFocusDistanceBlendLevel = setCamDofMaxNearInFocusDistanceBlendLevel;
    /**
     * No comment provided
     *
     * Hash: 0xF55E4046F6F831DC | Since: 323
     */
    function setCamDofOverriddenFocusDistance(camera) {
        Citizen.invokeNative('0xF55E4046F6F831DC', camera, 0);
    }
    camera_1.setCamDofOverriddenFocusDistance = setCamDofOverriddenFocusDistance;
    /**
     * No comment provided
     *
     * Hash: 0xE111A7C0D200CBC5 | Since: 323
     */
    function setCamDofOverriddenFocusDistanceBlendLevel() {
        Citizen.invokeNative('0xE111A7C0D200CBC5', undefined, 0);
    }
    camera_1.setCamDofOverriddenFocusDistanceBlendLevel = setCamDofOverriddenFocusDistanceBlendLevel;
    /**
     * No comment provided
     *
     * Hash: 0x3CF48F6F96E749DC | Since: 323
     */
    function setCamDofPlanes(cam) {
        SetCamDofPlanes(cam, 0, 0, 0, 0);
    }
    camera_1.setCamDofPlanes = setCamDofPlanes;
    /**
     * This native has a name defined inside its code
     *
     * Hash: 0x7CF3AF51DCFE4108 | Since: 2944
     */
    function setCamDofShouldKeepLookAtTargetInFocus(camera, state) {
        Citizen.invokeNative('0x7CF3AF51DCFE4108', camera, state);
    }
    camera_1.setCamDofShouldKeepLookAtTargetInFocus = setCamDofShouldKeepLookAtTargetInFocus;
    /**
     * No comment provided
     *
     * Hash: 0x5EE29B4D7D5DF897 | Since: 323
     */
    function setCamDofStrength(cam, dofStrength) {
        SetCamDofStrength(cam, dofStrength);
    }
    camera_1.setCamDofStrength = setCamDofStrength;
    /**
     * No comment provided
     *
     * Hash: 0xAE306F2A904BF86E | Since: 323
     */
    function setCamFarClip(cam, farClip) {
        SetCamFarClip(cam, farClip);
    }
    camera_1.setCamFarClip = setCamFarClip;
    /**
     * No comment provided
     *
     * Hash: 0xEDD91296CD01AEE0 | Since: 323
     */
    function setCamFarDof(cam, farDOF) {
        SetCamFarDof(cam, farDOF);
    }
    camera_1.setCamFarDof = setCamFarDof;
    /**
     * Sets the field of view of the cam.
     * ---------------------------------------------
     * Min: 1.0f
     * Max: 130.0f
     *
     * Hash: 0xB13C14F66A00D047 | Since: 323
     */
    function setCamFov(cam, fieldOfView) {
        SetCamFov(cam, fieldOfView);
    }
    camera_1.setCamFov = setCamFov;
    /**
     * The native seems to only be called once.
     *
     * The native is used as so,
     * `CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));`
     * In the exile1 script.
     *
     * Hash: 0x45F1DE9C34B93AE6 | Since: 323
     */
    function setCamInheritRollVehicle(cam) {
        SetCamInheritRollVehicle(cam, false);
    }
    camera_1.setCamInheritRollVehicle = setCamInheritRollVehicle;
    /**
     * When set to true shadows appear more smooth but less detailed.
     * Set to false by default.
     *
     * Hash: 0xA2767257A320FC82 | Since: 323
     */
    function setCamIsInsideVehicle(cam, toggle) {
        Citizen.invokeNative('0xA2767257A320FC82', cam, toggle);
    }
    camera_1.setCamIsInsideVehicle = setCamIsInsideVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x6F0F77FBA9A8F2E6 | Since: 323
     */
    function setCamMotionBlurStrength(cam, strength) {
        SetCamMotionBlurStrength(cam, strength);
    }
    camera_1.setCamMotionBlurStrength = setCamMotionBlurStrength;
    /**
     * No comment provided
     *
     * Hash: 0xC7848EFCCC545182 | Since: 323
     */
    function setCamNearClip(cam, nearClip) {
        SetCamNearClip(cam, nearClip);
    }
    camera_1.setCamNearClip = setCamNearClip;
    /**
     * No comment provided
     *
     * Hash: 0x3FA4BF0A7AB7DE2C | Since: 323
     */
    function setCamNearDof(cam, nearDOF) {
        SetCamNearDof(cam, nearDOF);
    }
    camera_1.setCamNearDof = setCamNearDof;
    /**
     * No comment provided
     *
     * Hash: 0xBFD8727AEA3CCEBA | Since: 323
     */
    function setCamParams(cam, pos, rot, fieldOfView) {
        SetCamParams(cam, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, fieldOfView, undefined, 0, 0, 0);
    }
    camera_1.setCamParams = setCamParams;
    /**
     * Sets the rotation of the cam.
     * Last parameter unknown.
     *
     * Last parameter seems to always be set to 2.
     *
     * Hash: 0x85973643155D0B07 | Since: 323
     */
    function setCamRot(cam, rot, rotationOrder) {
        SetCamRot(cam, rot.x, rot.y, rot.z, rotationOrder);
    }
    camera_1.setCamRot = setCamRot;
    /**
     * No comment provided
     *
     * Hash: 0xD93DB43B82BC0D00 | Since: 323
     */
    function setCamShakeAmplitude(cam, amplitude) {
        SetCamShakeAmplitude(cam, amplitude);
    }
    camera_1.setCamShakeAmplitude = setCamShakeAmplitude;
    /**
     * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
     *
     * Hash: 0x1381539FEE034CDA | Since: 323
     */
    function setCamSplineDuration(cam, timeDuration) {
        SetCamSplineDuration(cam, timeDuration);
    }
    camera_1.setCamSplineDuration = setCamSplineDuration;
    /**
     * No comment provided
     *
     * Hash: 0x83B8201ED82A9A2D | Since: 323
     */
    function setCamSplineNodeEase(cam, easingFunction) {
        SetCamSplineNodeEase(cam, easingFunction, 0, 0);
    }
    camera_1.setCamSplineNodeEase = setCamSplineNodeEase;
    /**
     * No comment provided
     *
     * Hash: 0x7BF1A54AE67AC070 | Since: 323
     */
    function setCamSplineNodeExtraFlags(cam, flags) {
        SetCamSplineNodeExtraFlags(cam, 0, flags);
    }
    camera_1.setCamSplineNodeExtraFlags = setCamSplineNodeExtraFlags;
    /**
     * No comment provided
     *
     * Hash: 0xA6385DEB180F319F | Since: 323
     */
    function setCamSplineNodeVelocityScale(cam, scale) {
        SetCamSplineNodeVelocityScale(cam, 0, scale);
    }
    camera_1.setCamSplineNodeVelocityScale = setCamSplineNodeVelocityScale;
    /**
     * No comment provided
     *
     * Hash: 0x242B5874F0A4E052 | Since: 323
     */
    function setCamSplinePhase(cam) {
        SetCamSplinePhase(cam, 0);
    }
    camera_1.setCamSplinePhase = setCamSplinePhase;
    /**
     * No comment provided
     *
     * Hash: 0xD1B0F412F109EA5D | Since: 323
     */
    function setCamSplineSmoothingStyle(cam, smoothingStyle) {
        SetCamSplineSmoothingStyle(cam, smoothingStyle);
    }
    camera_1.setCamSplineSmoothingStyle = setCamSplineSmoothingStyle;
    /**
     * No comment provided
     *
     * Hash: 0x16A96863A17552BB | Since: 323
     */
    function setCamUseShallowDofMode(cam, toggle) {
        SetCamUseShallowDofMode(cam, toggle);
    }
    camera_1.setCamUseShallowDofMode = setCamUseShallowDofMode;
    /**
     * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT, viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
     *
     * Hash: 0x2A2173E46DAECD12 | Since: 323
     */
    function setCamViewModeForContext(context, viewMode) {
        SetCamViewModeForContext(context, viewMode);
    }
    camera_1.setCamViewModeForContext = setCamViewModeForContext;
    /**
     * No comment provided
     *
     * Hash: 0x51669F7D1FB53D9F | Since: 323
     */
    function setCinematicButtonActive() {
        SetCinematicButtonActive(false);
    }
    camera_1.setCinematicButtonActive = setCinematicButtonActive;
    /**
     * No comment provided
     *
     * Hash: 0xC724C701C30B2FE7 | Since: 323
     */
    function setCinematicCamShakeAmplitude() {
        SetCinematicCamShakeAmplitude(0);
    }
    camera_1.setCinematicCamShakeAmplitude = setCinematicCamShakeAmplitude;
    /**
     * Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
     *
     * Hash: 0xDCF0754AC3D6FD4E | Since: 323
     */
    function setCinematicModeActive(toggle) {
        SetCinematicModeActive(toggle);
    }
    camera_1.setCinematicModeActive = setCinematicModeActive;
    /**
     * No comment provided
     *
     * Hash: 0xDC9DA9E8789F5246 | Since: 323
     */
    function setCinematicNewsChannelActiveThisUpdate() {
        SetCinematicNewsChannelActiveThisUpdate();
    }
    camera_1.setCinematicNewsChannelActiveThisUpdate = setCinematicNewsChannelActiveThisUpdate;
    /**
     * Hardcoded to only work in multiplayer.
     *
     * Hash: 0x12DED8CA53D47EA5 | Since: 323
     */
    function setCutsceneCamFarClipThisUpdate() {
        Citizen.invokeNative('0x12DED8CA53D47EA5', 0);
    }
    camera_1.setCutsceneCamFarClipThisUpdate = setCutsceneCamFarClipThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x0AF7B437918103B3 | Since: 323
     */
    function setFirstPersonAimCamNearClipThisUpdate() {
        SetFirstPersonAimCamNearClipThisUpdate(0);
    }
    camera_1.setFirstPersonAimCamNearClipThisUpdate = setFirstPersonAimCamNearClipThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x2F7F2B26DD3F18EE | Since: 323
     */
    function setFirstPersonAimCamRelativeHeadingLimitsThisUpdate() {
        Citizen.invokeNative('0x2F7F2B26DD3F18EE', 0, 0);
    }
    camera_1.setFirstPersonAimCamRelativeHeadingLimitsThisUpdate = setFirstPersonAimCamRelativeHeadingLimitsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xBCFC632DB7673BF0 | Since: 323
     */
    function setFirstPersonAimCamRelativePitchLimitsThisUpdate() {
        SetFirstPersonCamPitchRange(0, 0);
    }
    camera_1.setFirstPersonAimCamRelativePitchLimitsThisUpdate = setFirstPersonAimCamRelativePitchLimitsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x70894BD0915C5BCA | Since: 323
     */
    function setFirstPersonAimCamZoomFactor(zoomFactor) {
        SetFirstPersonAimCamZoomFactor(zoomFactor);
    }
    camera_1.setFirstPersonAimCamZoomFactor = setFirstPersonAimCamZoomFactor;
    /**
     * No comment provided
     *
     * Hash: 0xCED08CBE8EBB97C7 | Since: 323
     */
    function setFirstPersonAimCamZoomFactorLimitsThisUpdate() {
        Citizen.invokeNative('0xCED08CBE8EBB97C7', 0, 0);
    }
    camera_1.setFirstPersonAimCamZoomFactorLimitsThisUpdate = setFirstPersonAimCamZoomFactorLimitsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x5C41E6BABC9E2112 | Since: 323
     */
    function setFirstPersonFlashEffectType() {
        Citizen.invokeNative('0x5C41E6BABC9E2112', undefined);
    }
    camera_1.setFirstPersonFlashEffectType = setFirstPersonFlashEffectType;
    /**
     * No comment provided
     *
     * Hash: 0x11FA5D3479C7DD47 | Since: 323
     */
    function setFirstPersonFlashEffectVehicleModelHash(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        SetGameplayCamVehicleCameraName(vehicleModel);
    }
    camera_1.setFirstPersonFlashEffectVehicleModelHash = setFirstPersonFlashEffectVehicleModelHash;
    /**
     * From b617 scripts:
     *
     * `CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");`
     * `CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");`
     * `CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO");`
     *
     * Hash: 0x21E253A7F8DA5DFB | Since: 323
     */
    function setFirstPersonFlashEffectVehicleModelName(vehicleName) {
        SetGameplayCamVehicleCamera(vehicleName);
    }
    camera_1.setFirstPersonFlashEffectVehicleModelName = setFirstPersonFlashEffectVehicleModelName;
    /**
     * Does nothing
     *
     * Hash: 0x103991D4A307D472 | Since: 323
     */
    function setFirstPersonShooterHeading(yaw) {
        SetGameplayCamRawYaw(yaw);
    }
    camera_1.setFirstPersonShooterHeading = setFirstPersonShooterHeading;
    /**
     * No comment provided
     *
     * Hash: 0x759E13EBC1C15C5A | Since: 323
     */
    function setFirstPersonShooterPitch(pitch) {
        SetGameplayCamRawPitch(pitch);
    }
    camera_1.setFirstPersonShooterPitch = setFirstPersonShooterPitch;
    /**
     * No comment provided
     *
     * Hash: 0xC91C6C55199308CA | Since: 323
     */
    function setFlyCamCoordAndConstrain(cam, pos) {
        SetFlyCamCoordAndConstrain(cam, pos.x, pos.y, pos.z);
    }
    camera_1.setFlyCamCoordAndConstrain = setFlyCamCoordAndConstrain;
    /**
     * No comment provided
     *
     * Hash: 0x503F5920162365B2 | Since: 323
     */
    function setFlyCamHorizontalResponse(cam) {
        SetFlyCamHorizontalResponse(cam, 0, 0, 0);
    }
    camera_1.setFlyCamHorizontalResponse = setFlyCamHorizontalResponse;
    /**
     * No comment provided
     *
     * Hash: 0xF9D02130ECDD1D77 | Since: 323
     */
    function setFlyCamMaxHeight(cam, height) {
        SetFlyCamMaxHeight(cam, height);
    }
    camera_1.setFlyCamMaxHeight = setFlyCamMaxHeight;
    /**
     * No comment provided
     *
     * Hash: 0xC8B5C4A79CC18B94 | Since: 323
     */
    function setFlyCamVerticalControlsThisUpdate(cam) {
        Citizen.invokeNative('0xC8B5C4A79CC18B94', cam);
    }
    camera_1.setFlyCamVerticalControlsThisUpdate = setFlyCamVerticalControlsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xE827B9382CFB41BA | Since: 791
     */
    function setFlyCamVerticalResponse(cam) {
        SetFlyCamVerticalSpeedMultiplier(cam, 0, 0, 0);
    }
    camera_1.setFlyCamVerticalResponse = setFlyCamVerticalResponse;
    /**
     * No comment provided
     *
     * Hash: 0xDD79DF9F4D26E1C9 | Since: 323
     */
    function setFollowCamIgnoreAttachParentMovementThisUpdate() {
        Citizen.invokeNative('0xDD79DF9F4D26E1C9');
    }
    camera_1.setFollowCamIgnoreAttachParentMovementThisUpdate = setFollowCamIgnoreAttachParentMovementThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xC8391C309684595A | Since: 323
     */
    function setFollowPedCamLadderAlignThisUpdate() {
        Citizen.invokeNative('0xC8391C309684595A');
    }
    camera_1.setFollowPedCamLadderAlignThisUpdate = setFollowPedCamLadderAlignThisUpdate;
    /**
     * From the scripts:
     *
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);`
     * `CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);`
     *
     * Hash: 0x44A113DD6FFC48D1 | Since: 323
     */
    function setFollowPedCamThisUpdate(camName) {
        return SetFollowPedCamThisUpdate(camName, 0);
    }
    camera_1.setFollowPedCamThisUpdate = setFollowPedCamThisUpdate;
    /**
     * Sets the type of Player camera:
     *
     * 0 - Third Person Close
     * 1 - Third Person Mid
     * 2 - Third Person Far
     * 4 - First Person
     *
     * Hash: 0x5A4F9EDF1673F704 | Since: 323
     */
    function setFollowPedCamViewMode(viewMode) {
        SetFollowPedCamViewMode(viewMode);
    }
    camera_1.setFollowPedCamViewMode = setFollowPedCamViewMode;
    /**
     * No comment provided
     *
     * Hash: 0x9DFE13ECDC1EC196 | Since: 323
     */
    function setFollowVehicleCamHighAngleModeEveryUpdate() {
        Citizen.invokeNative('0x9DFE13ECDC1EC196', false, false);
    }
    camera_1.setFollowVehicleCamHighAngleModeEveryUpdate = setFollowVehicleCamHighAngleModeEveryUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x91EF6EE6419E5B97 | Since: 323
     */
    function setFollowVehicleCamHighAngleModeThisUpdate() {
        Citizen.invokeNative('0x91EF6EE6419E5B97', false);
    }
    camera_1.setFollowVehicleCamHighAngleModeThisUpdate = setFollowVehicleCamHighAngleModeThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x5C90CAB09951A12F | Since: 1365
     */
    function setFollowVehicleCamSeatThisUpdate(seatIndex) {
        SetFollowTurretSeatCam(seatIndex);
    }
    camera_1.setFollowVehicleCamSeatThisUpdate = setFollowVehicleCamSeatThisUpdate;
    /**
     * Sets the type of Player camera in vehicles:
     * viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
     *
     * Hash: 0xAC253D7842768F48 | Since: 323
     */
    function setFollowVehicleCamViewMode(viewMode) {
        SetFollowVehicleCamViewMode(viewMode);
    }
    camera_1.setFollowVehicleCamViewMode = setFollowVehicleCamViewMode;
    /**
     * No comment provided
     *
     * Hash: 0x19464CB6E4078C8A | Since: 323
     */
    function setFollowVehicleCamZoomLevel(zoomLevel) {
        SetFollowVehicleCamZoomLevel(zoomLevel);
    }
    camera_1.setFollowVehicleCamZoomLevel = setFollowVehicleCamZoomLevel;
    /**
     * No comment provided
     *
     * Hash: 0xDB90C6CCA48940F1 | Since: 323
     */
    function setGameplayCamAltitudeFovScalingState() {
        Citizen.invokeNative('0xDB90C6CCA48940F1', false);
    }
    camera_1.setGameplayCamAltitudeFovScalingState = setGameplayCamAltitudeFovScalingState;
    /**
     * No comment provided
     *
     * Hash: 0xFD3151CD37EA2245 | Since: 323
     */
    function setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(entity) {
        Citizen.invokeNative('0xFD3151CD37EA2245', entity);
    }
    camera_1.setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate = setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate;
    /**
     * Forces gameplay cam to specified ped as if you were the ped or spectating it
     *
     * Hash: 0x8BBACBF51DA047A8 | Since: 323
     */
    function setGameplayCamFollowPedThisUpdate(ped) {
        SetGameplayCamFollowPedThisUpdate(ped);
    }
    camera_1.setGameplayCamFollowPedThisUpdate = setGameplayCamFollowPedThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x2AED6301F67007D5 | Since: 323
     */
    function setGameplayCamIgnoreEntityCollisionThisUpdate(entity) {
        DisableCamCollisionForEntity(entity);
    }
    camera_1.setGameplayCamIgnoreEntityCollisionThisUpdate = setGameplayCamIgnoreEntityCollisionThisUpdate;
    /**
     * some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
     *
     * Hash: 0x0225778816FDC28C | Since: 323
     */
    function setGameplayCamMaxMotionBlurStrengthThisUpdate() {
        Citizen.invokeNative('0x0225778816FDC28C', 0);
    }
    camera_1.setGameplayCamMaxMotionBlurStrengthThisUpdate = setGameplayCamMaxMotionBlurStrengthThisUpdate;
    /**
     * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
     *
     * Hash: 0x487A82C650EB7799 | Since: 323
     */
    function setGameplayCamMotionBlurScalingThisUpdate() {
        CustomMenuCoordinates(0);
    }
    camera_1.setGameplayCamMotionBlurScalingThisUpdate = setGameplayCamMotionBlurScalingThisUpdate;
    /**
     * Sets the camera position relative to heading in float from -360 to +360.
     *
     * Heading is alwyas 0 in aiming camera.
     *
     * Hash: 0xB4EC2312F4E5B1F1 | Since: 323
     */
    function setGameplayCamRelativeHeading(heading) {
        SetGameplayCamRelativeHeading(heading);
    }
    camera_1.setGameplayCamRelativeHeading = setGameplayCamRelativeHeading;
    /**
     * This native sets the camera's pitch (rotation on the x-axis).
     *
     * Hash: 0x6D0858B8EDFD2B7D | Since: 323
     */
    function setGameplayCamRelativePitch(angle, scalingFactor) {
        SetGameplayCamRelativePitch(angle, scalingFactor);
    }
    camera_1.setGameplayCamRelativePitch = setGameplayCamRelativePitch;
    /**
     * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
     *
     * Hash: 0xA87E00932DB4D85D | Since: 323
     */
    function setGameplayCamShakeAmplitude(amplitude) {
        SetGameplayCamShakeAmplitude(amplitude);
    }
    camera_1.setGameplayCamShakeAmplitude = setGameplayCamShakeAmplitude;
    /**
     * No comment provided
     *
     * Hash: 0xD51ADCD2D8BC0FB3 | Since: 323
     */
    function setGameplayCoordHint(pos, duration, blendOutDuration, blendInDuration) {
        SetGameplayCoordHint(pos.x, pos.y, pos.z, duration, blendOutDuration, blendInDuration, 0);
    }
    camera_1.setGameplayCoordHint = setGameplayCoordHint;
    /**
     * p8 could be some sort of flag. Scripts use:
     * -244429742
     * 0
     * 1726668277
     * 1844968929
     *
     * Hash: 0x189E955A8313E298 | Since: 323
     */
    function setGameplayEntityHint(entity, xOffset, yOffset, zOffset, time, easeInTime, easeOutTime) {
        SetGameplayEntityHint(entity, xOffset, yOffset, zOffset, false, time, easeInTime, easeOutTime, 0);
    }
    camera_1.setGameplayEntityHint = setGameplayEntityHint;
    /**
     * No comment provided
     *
     * Hash: 0xD1F8363DFAD03848 | Since: 323
     */
    function setGameplayHintBaseOrbitPitchOffset(value) {
        SetGameplayHintBaseOrbitPitchOffset(value);
    }
    camera_1.setGameplayHintBaseOrbitPitchOffset = setGameplayHintBaseOrbitPitchOffset;
    /**
     * No comment provided
     *
     * Hash: 0xE3433EADAAF7EE40 | Since: 323
     */
    function setGameplayHintBlendToFollowPedMediumViewMode(toggle) {
        SetGameplayHintAnimCloseup(toggle);
    }
    camera_1.setGameplayHintBlendToFollowPedMediumViewMode = setGameplayHintBlendToFollowPedMediumViewMode;
    /**
     * No comment provided
     *
     * Hash: 0x5D7B620DAE436138 | Since: 323
     */
    function setGameplayHintRelativeSideOffset(xOffset) {
        SetGameplayHintAnimOffsetx(xOffset);
    }
    camera_1.setGameplayHintRelativeSideOffset = setGameplayHintRelativeSideOffset;
    /**
     * No comment provided
     *
     * Hash: 0xC92717EF615B6704 | Since: 323
     */
    function setGameplayHintRelativeVerticalOffset(yOffset) {
        SetGameplayHintAnimOffsety(yOffset);
    }
    camera_1.setGameplayHintRelativeVerticalOffset = setGameplayHintRelativeVerticalOffset;
    /**
     * No comment provided
     *
     * Hash: 0xF8BDBF3D573049A1 | Since: 323
     */
    function setGameplayHintFollowDistanceScalar(value) {
        SetGameplayHintFollowDistanceScalar(value);
    }
    camera_1.setGameplayHintFollowDistanceScalar = setGameplayHintFollowDistanceScalar;
    /**
     * No comment provided
     *
     * Hash: 0x513403FB9C56211F | Since: 323
     */
    function setGameplayHintFov(FOV) {
        SetGameplayHintFov(FOV);
    }
    camera_1.setGameplayHintFov = setGameplayHintFov;
    /**
     * No comment provided
     *
     * Hash: 0x83E87508A2CA2AC6 | Since: 323
     */
    function setGameplayObjectHint(_object, xOffset, yOffset, zOffset, time, easeInTime, easeOutTime) {
        SetGameplayObjectHint(_object, xOffset, yOffset, zOffset, false, time, easeInTime, easeOutTime);
    }
    camera_1.setGameplayObjectHint = setGameplayObjectHint;
    /**
     * No comment provided
     *
     * Hash: 0x2B486269ACD548D3 | Since: 323
     */
    function setGameplayPedHint(ped, x1, y1, z1, duration, blendOutDuration, blendInDuration) {
        SetGameplayPedHint(ped, x1, y1, z1, false, duration, blendOutDuration, blendInDuration);
    }
    camera_1.setGameplayPedHint = setGameplayPedHint;
    /**
     * Focuses the camera on the specified vehicle.
     *
     * Hash: 0xA2297E18F3E71C2E | Since: 323
     */
    function setGameplayVehicleHint(vehicle, offsetX, offsetY, offsetZ, time, easeInTime, easeOutTime) {
        SetGameplayVehicleHint(vehicle, offsetX, offsetY, offsetZ, false, time, easeInTime, easeOutTime);
    }
    camera_1.setGameplayVehicleHint = setGameplayVehicleHint;
    /**
     * Forces gameplay cam to specified vehicle as if you were in it
     *
     * Hash: 0xE9EA16D6E54CDCA4 | Since: 323
     */
    function setInVehicleCamStateThisUpdate(p0) {
        SetInVehicleCamStateThisUpdate(p0, 0);
    }
    camera_1.setInVehicleCamStateThisUpdate = setInVehicleCamStateThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x469F2ECDEC046337 | Since: 323
     */
    function setScriptedIsFirstPersonThisFrame() {
        Citizen.invokeNative('0x469F2ECDEC046337', false);
    }
    camera_1.setScriptedIsFirstPersonThisFrame = setScriptedIsFirstPersonThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x79C0E43EB9B944E2 | Since: 1734
     */
    function setTableGamesThisUpdate(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return SetTableGamesCameraThisUpdate(hash);
    }
    camera_1.setTableGamesThisUpdate = setTableGamesThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x42156508606DE65E | Since: 323
     */
    function setThirdPersonAimCamNearClipThisUpdate() {
        SetThirdPersonAimCamNearClipThisUpdate(0);
    }
    camera_1.setThirdPersonAimCamNearClipThisUpdate = setThirdPersonAimCamNearClipThisUpdate;
    /**
     * Seems to animate the gameplay camera zoom.
     *
     * Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
     * will animate the camera zooming in from 1000 meters away.
     *
     * Game scripts use it like this:
     *
     * // Setting this to 1 prevents V key from changing zoom
     * `PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);`
     *
     * // These restrict how far you can move cam up/down left/right
     * `CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);`
     * `CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);`
     *
     * `CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);`
     *
     * Hash: 0xDF2E1F7742402E81 | Since: 323
     */
    function setThirdPersonCamOrbitDistanceLimitsThisUpdate(distance) {
        AnimateGameplayCamZoom(0, distance);
    }
    camera_1.setThirdPersonCamOrbitDistanceLimitsThisUpdate = setThirdPersonCamOrbitDistanceLimitsThisUpdate;
    /**
     * minimum: Degrees between -180f and 180f.
     * maximum: Degrees between -180f and 180f.
     *
     * Clamps the gameplay camera's current yaw.
     *
     * Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.
     *
     * Hash: 0x8F993D26E0CA5E8E | Since: 323
     */
    function setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum, maximum) {
        ClampGameplayCamYaw(minimum, maximum);
    }
    camera_1.setThirdPersonCamRelativeHeadingLimitsThisUpdate = setThirdPersonCamRelativeHeadingLimitsThisUpdate;
    /**
     * minimum: Degrees between -90f and 90f.
     * maximum: Degrees between -90f and 90f.
     *
     * Clamps the gameplay camera's current pitch.
     *
     * Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.
     *
     * Hash: 0xA516C198B7DCA1E1 | Since: 323
     */
    function setThirdPersonCamRelativePitchLimitsThisUpdate(minimum, maximum) {
        ClampGameplayCamPitch(minimum, maximum);
    }
    camera_1.setThirdPersonCamRelativePitchLimitsThisUpdate = setThirdPersonCamRelativePitchLimitsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xA13B0222F3D94A94 | Since: 323
     */
    function setUseHiDof() {
        SetUseHiDof();
    }
    camera_1.setUseHiDof = setUseHiDof;
    /**
     * Only used in R* Script fm_mission_controller_2020
     *
     * Hash: 0x731A880555DA3647 | Since: 2699
     */
    function setUseHiDofOnSyncedSceneThisUpdate() {
        SetUseHiDofInCutscene();
    }
    camera_1.setUseHiDofOnSyncedSceneThisUpdate = setUseHiDofOnSyncedSceneThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xDCD4EA924F42D01A | Since: 323
     */
    function setWidescreenBorders() {
        SetWidescreenBorders(false, 0);
    }
    camera_1.setWidescreenBorders = setWidescreenBorders;
    /**
     * Possible shake types (updated b617d):
     *
     * DEATH_FAIL_IN_EFFECT_SHAKE
     * DRUNK_SHAKE
     * FAMILY5_DRUG_TRIP_SHAKE
     * HAND_SHAKE
     * JOLT_SHAKE
     * LARGE_EXPLOSION_SHAKE
     * MEDIUM_EXPLOSION_SHAKE
     * SMALL_EXPLOSION_SHAKE
     * ROAD_VIBRATION_SHAKE
     * SKY_DIVING_SHAKE
     * VIBRATE_SHAKE
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0x6A25241C340D3822 | Since: 323
     */
    function shakeCam(cam, _type, amplitude) {
        ShakeCam(cam, _type, amplitude);
    }
    camera_1.shakeCam = shakeCam;
    /**
     * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xDCE214D9ED58F3CF | Since: 323
     */
    function shakeCinematicCam(shakeType, amount) {
        ShakeCinematicCam(shakeType, amount);
    }
    camera_1.shakeCinematicCam = shakeCinematicCam;
    /**
     * Possible shake types (updated b617d):
     *
     * DEATH_FAIL_IN_EFFECT_SHAKE
     * DRUNK_SHAKE
     * FAMILY5_DRUG_TRIP_SHAKE
     * HAND_SHAKE
     * JOLT_SHAKE
     * LARGE_EXPLOSION_SHAKE
     * MEDIUM_EXPLOSION_SHAKE
     * SMALL_EXPLOSION_SHAKE
     * ROAD_VIBRATION_SHAKE
     * SKY_DIVING_SHAKE
     * VIBRATE_SHAKE
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xFD55E49555E017CF | Since: 323
     */
    function shakeGameplayCam(shakeName, intensity) {
        ShakeGameplayCam(shakeName, intensity);
    }
    camera_1.shakeGameplayCam = shakeGameplayCam;
    /**
     * `CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);`
     *
     * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
     *
     * Hash: 0xF4C8CF9E353AFECA | Since: 323
     */
    function shakeScriptGlobal() {
        ShakeScriptGlobal(undefined, 0);
    }
    camera_1.shakeScriptGlobal = shakeScriptGlobal;
    /**
     * No comment provided
     *
     * Hash: 0xF33AB75780BA57DE | Since: 323
     */
    function stopCamPointing(cam) {
        StopCamPointing(cam);
    }
    camera_1.stopCamPointing = stopCamPointing;
    /**
     * No comment provided
     *
     * Hash: 0xBDECF64367884AC3 | Since: 323
     */
    function stopCamShaking(cam) {
        StopCamShaking(cam, false);
    }
    camera_1.stopCamShaking = stopCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0x2238E588E588A6D7 | Since: 323
     */
    function stopCinematicCamShaking() {
        StopCinematicCamShaking(false);
    }
    camera_1.stopCinematicCamShaking = stopCinematicCamShaking;
    /**
     * Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
     *
     * Hash: 0x7660C6E75D3A078E | Since: 323
     */
    function stopCinematicShot(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        StopCinematicShot(p0);
    }
    camera_1.stopCinematicShot = stopCinematicShot;
    /**
     * No comment provided
     *
     * Hash: 0x247ACBC4ABBC9D1C | Since: 323
     */
    function stopCodeGameplayHint() {
        Citizen.invokeNative('0x247ACBC4ABBC9D1C', false);
    }
    camera_1.stopCodeGameplayHint = stopCodeGameplayHint;
    /**
     * No comment provided
     *
     * Hash: 0x324C5AA411DA7737 | Since: 323
     */
    function stopCutsceneCamShaking() {
        Citizen.invokeNative('0x324C5AA411DA7737', undefined);
    }
    camera_1.stopCutsceneCamShaking = stopCutsceneCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0x0EF93E9F3D08C178 | Since: 323
     */
    function stopGameplayCamShaking() {
        StopGameplayCamShaking(false);
    }
    camera_1.stopGameplayCamShaking = stopGameplayCamShaking;
    /**
     * No comment provided
     *
     * Hash: 0xF46C581C61718916 | Since: 323
     */
    function stopGameplayHint() {
        StopGameplayHint(false);
    }
    camera_1.stopGameplayHint = stopGameplayHint;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xCCD078C2665D2973 | Since: 323
     */
    function stopGameplayHintBeingCancelledThisUpdate() {
        Citizen.invokeNative('0xCCD078C2665D2973', false);
    }
    camera_1.stopGameplayHintBeingCancelledThisUpdate = stopGameplayHintBeingCancelledThisUpdate;
    /**
     * This native makes the gameplay camera zoom into first person/third person with a special effect.
     *
     * Hash: 0xC819F3CBB62BF692 | Since: 323
     */
    function stopRenderingScriptCamsUsingCatchUp(render) {
        StopRenderingScriptCamsUsingCatchUp(render, 0, 0, undefined);
    }
    camera_1.stopRenderingScriptCamsUsingCatchUp = stopRenderingScriptCamsUsingCatchUp;
    /**
     * In drunk_controller.c4, sub_309
     * `if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {`
     * `CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);`
     * }
     *
     * Hash: 0x1C9D7949FA533490 | Since: 323
     */
    function stopScriptGlobalShaking() {
        StopScriptGlobalShaking(false);
    }
    camera_1.stopScriptGlobalShaking = stopScriptGlobalShaking;
    /**
     * p1: 0..16
     *
     * Hash: 0x5D96CFB59DA076A0 | Since: 2060
     */
    function triggerVehiclePartBrokenShake(vehicle) {
        Citizen.invokeNative('0x5D96CFB59DA076A0', vehicle, 0, 0);
    }
    camera_1.triggerVehiclePartBrokenShake = triggerVehiclePartBrokenShake;
    /**
     * Sets gameplay camera to hash
     *
     * Hash: 0x425A920FDB9A0DDA | Since: 1180
     */
    function useDedicatedStuntThisUpdate(camName) {
        SetGameplayCamHash(camName);
    }
    camera_1.useDedicatedStuntThisUpdate = useDedicatedStuntThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x271401846BD26E92 | Since: 323
     */
    function useScriptCamForAmbientPopulationOriginThisFrame() {
        UseScriptCamForAmbientPopulationOriginThisFrame(false, false);
    }
    camera_1.useScriptCamForAmbientPopulationOriginThisFrame = useScriptCamForAmbientPopulationOriginThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x6493CF69859B116A | Since: 791
     */
    function useVehicleCamStuntSettingsThisUpdate() {
        UseVehicleCamStuntSettingsThisUpdate();
    }
    camera_1.useVehicleCamStuntSettingsThisUpdate = useVehicleCamStuntSettingsThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0x5C48A1D6E3B33179 | Since: 323
     */
    function wasFlyCamConstrainedOnPreviousUdpate(cam) {
        return Citizen.invokeNative('0x5C48A1D6E3B33179', cam);
    }
    camera_1.wasFlyCamConstrainedOnPreviousUdpate = wasFlyCamConstrainedOnPreviousUdpate;
    /**
     * No comment provided
     *
     * Hash: 0x34CFC4C2A38E83E3 | Since: 3258
     */
    function activateCamWithInterpAndFovCurve(camTo, camFrom, duration, easeLocation, easeRotation, easeFov) {
        ActivateCamWithInterpAndFovCurve(camTo, camFrom, duration, easeLocation, easeRotation, easeFov);
    }
    camera_1.activateCamWithInterpAndFovCurve = activateCamWithInterpAndFovCurve;
    /**
     * No comment provided
     *
     * Hash: 0xD4592A16D36673ED | Since: 3095
     */
    function getThirdPersonCamMaxOrbitDistanceSpring() {
        return Citizen.invokeNative('0xD4592A16D36673ED');
    }
    camera_1.getThirdPersonCamMaxOrbitDistanceSpring = getThirdPersonCamMaxOrbitDistanceSpring;
    /**
     * No comment provided
     *
     * Hash: 0xBC456FB703431785 | Since: 3095
     */
    function getThirdPersonCamMinOrbitDistanceSpring() {
        return Citizen.invokeNative('0xBC456FB703431785');
    }
    camera_1.getThirdPersonCamMinOrbitDistanceSpring = getThirdPersonCamMinOrbitDistanceSpring;
    /**
     * No comment provided
     *
     * Hash: 0xDDA77EE33C005AAF | Since: 3258
     */
    function interpolateCamWithParams(camera, camPosX, camPosY, camPosZ, camRotX, camRotY, camRotZ, fov, duration, posCurveType, rotCurveType, rotOrder, fovCurveType) {
        InterpolateCamWithParams(camera, camPosX, camPosY, camPosZ, camRotX, camRotY, camRotZ, fov, duration, posCurveType, rotCurveType, rotOrder, fovCurveType);
    }
    camera_1.interpolateCamWithParams = interpolateCamWithParams;
})(camera || (camera = {}));
export var discord;
(function (discord) {
    /**
     * This native sets the app id for the discord rich presence implementation.
     *
     * Hash: 0x6A02254D | Since: unknown
     */
    function setAppId(appId) {
        Citizen.invokeNative('0x6A02254D', appId);
    }
    discord.setAppId = setAppId;
    /**
     * Sets a clickable button to be displayed in a player's Discord rich presence.
     *
     * Hash: 0xCBBC3FAC | Since: unknown
     */
    function setRichPresenceAction(index, label, url) {
        Citizen.invokeNative('0xCBBC3FAC', index, label, url);
    }
    discord.setRichPresenceAction = setRichPresenceAction;
    /**
     * This native sets the image asset for the discord rich presence implementation.
     *
     * Hash: 0x53DFD530 | Since: unknown
     */
    function setRichPresenceAsset(assetName) {
        Citizen.invokeNative('0x53DFD530', assetName);
    }
    discord.setRichPresenceAsset = setRichPresenceAsset;
    /**
     * This native sets the small image asset for the discord rich presence implementation.
     *
     * Hash: 0xF61D04C4 | Since: unknown
     */
    function setRichPresenceAssetSmall(assetName) {
        Citizen.invokeNative('0xF61D04C4', assetName);
    }
    discord.setRichPresenceAssetSmall = setRichPresenceAssetSmall;
    /**
     * This native sets the hover text of the small image asset for the discord rich presence implementation.
     *
     * Hash: 0x35E62B6A | Since: unknown
     */
    function setRichPresenceAssetSmallText(text) {
        Citizen.invokeNative('0x35E62B6A', text);
    }
    discord.setRichPresenceAssetSmallText = setRichPresenceAssetSmallText;
    /**
     * This native sets the hover text of the image asset for the discord rich presence implementation.
     *
     * Hash: 0xB029D2FA | Since: unknown
     */
    function setRichPresenceAssetText(text) {
        Citizen.invokeNative('0xB029D2FA', text);
    }
    discord.setRichPresenceAssetText = setRichPresenceAssetText;
})(discord || (discord = {}));
export var dui;
(function (dui) {
    /**
     * Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.
     *
     * Hash: 0x23EAF899 | Since: unknown
     */
    function create(url, width, height) {
        return Citizen.invokeNative('0x23EAF899', url, width, height);
    }
    dui.create = create;
    /**
     * Destroys a DUI browser.
     *
     * Hash: 0xA085CB10 | Since: unknown
     */
    function destroy(duiObject) {
        Citizen.invokeNative('0xA085CB10', duiObject);
    }
    dui.destroy = destroy;
    /**
     * Returns the NUI window handle for a specified DUI browser object.
     *
     * Hash: 0x1655D41D | Since: unknown
     */
    function getHandle(duiObject) {
        return Citizen.invokeNative('0x1655D41D', duiObject);
    }
    dui.getHandle = getHandle;
    /**
     * Returns whether or not a browser is created for a specified DUI browser object.
     *
     * Hash: 0x7AAC3B4C | Since: unknown
     */
    function isAvailable(duiObject) {
        return Citizen.invokeNative('0x7AAC3B4C', duiObject);
    }
    dui.isAvailable = isAvailable;
    /**
     * Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.
     *
     * Hash: 0xCD380DA9 | Since: unknown
     */
    function sendMessage(duiObject, jsonString) {
        Citizen.invokeNative('0xCD380DA9', duiObject, jsonString);
    }
    dui.sendMessage = sendMessage;
    /**
     * Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.
     *
     * Hash: 0x5D01F191 | Since: unknown
     */
    function sendMouseDown(duiObject, button) {
        Citizen.invokeNative('0x5D01F191', duiObject, button);
    }
    dui.sendMouseDown = sendMouseDown;
    /**
     * Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.
     *
     * Hash: 0xD9D7A0AA | Since: unknown
     */
    function sendMouseMove(duiObject, x, y) {
        Citizen.invokeNative('0xD9D7A0AA', duiObject, x, y);
    }
    dui.sendMouseMove = sendMouseMove;
    /**
     * Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.
     *
     * Hash: 0x1D735B93 | Since: unknown
     */
    function sendMouseUp(duiObject, button) {
        Citizen.invokeNative('0x1D735B93', duiObject, button);
    }
    dui.sendMouseUp = sendMouseUp;
    /**
     * Injects a 'mouse wheel' event for a DUI object.
     *
     * Hash: 0x2D62133A | Since: unknown
     */
    function sendMouseWheel(duiObject, deltaY, deltaX) {
        Citizen.invokeNative('0x2D62133A', duiObject, deltaY, deltaX);
    }
    dui.sendMouseWheel = sendMouseWheel;
    /**
     * Navigates the specified DUI browser to a different URL.
     *
     * Hash: 0xF761D9F3 | Since: unknown
     */
    function setUrl(duiObject, url) {
        Citizen.invokeNative('0xF761D9F3', duiObject, url);
    }
    dui.setUrl = setUrl;
})(dui || (dui = {}));
export var mumble;
(function (mumble) {
    /**
     * Starts listening to the specified channel, when available.
     *
     * Hash: 0xC79F44BF | Since: unknown
     */
    function addVoiceChannelListen(channel) {
        Citizen.invokeNative('0xC79F44BF', channel);
    }
    mumble.addVoiceChannelListen = addVoiceChannelListen;
    /**
     * Adds the specified channel to the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x4D386C9E | Since: unknown
     */
    function addVoiceTargetChannel(targetId, channel) {
        Citizen.invokeNative('0x4D386C9E', targetId, channel);
    }
    mumble.addVoiceTargetChannel = addVoiceTargetChannel;
    /**
     * Adds the specified player to the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x32C5355A | Since: unknown
     */
    function addVoiceTargetPlayer(targetId, player) {
        Citizen.invokeNative('0x32C5355A', targetId, player);
    }
    mumble.addVoiceTargetPlayer = addVoiceTargetPlayer;
    /**
     * Adds the specified player to the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x25F2B65F | Since: unknown
     */
    function addVoiceTargetPlayerByServerId(targetId, serverId) {
        Citizen.invokeNative('0x25F2B65F', targetId, serverId);
    }
    mumble.addVoiceTargetPlayerByServerId = addVoiceTargetPlayerByServerId;
    /**
     * No comment provided
     *
     * Hash: 0xBF847807 | Since: unknown
     */
    function clearVoiceChannel() {
        Citizen.invokeNative('0xBF847807');
    }
    mumble.clearVoiceChannel = clearVoiceChannel;
    /**
     * Clears the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x8555DCBA | Since: unknown
     */
    function clearVoiceTarget(targetId) {
        Citizen.invokeNative('0x8555DCBA', targetId);
    }
    mumble.clearVoiceTarget = clearVoiceTarget;
    /**
     * Clears channels from the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x5EA72E76 | Since: unknown
     */
    function clearVoiceTargetChannels(targetId) {
        Citizen.invokeNative('0x5EA72E76', targetId);
    }
    mumble.clearVoiceTargetChannels = clearVoiceTargetChannels;
    /**
     * Clears players from the target list for the specified Mumble voice target ID.
     *
     * Hash: 0x912E21DA | Since: unknown
     */
    function clearVoiceTargetPlayers(targetId) {
        Citizen.invokeNative('0x912E21DA', targetId);
    }
    mumble.clearVoiceTargetPlayers = clearVoiceTargetPlayers;
    /**
     * Check whether specified channel exists on the Mumble server.
     *
     * Hash: 0xCC8CA25 | Since: unknown
     */
    function doesChannelExist(channel) {
        return Citizen.invokeNative('0xCC8CA25', channel);
    }
    mumble.doesChannelExist = doesChannelExist;
    /**
     * No comment provided
     *
     * Hash: 0x84E02A32 | Since: unknown
     */
    function getTalkerProximity() {
        return Citizen.invokeNative('0x84E02A32');
    }
    mumble.getTalkerProximity = getTalkerProximity;
    /**
     * Returns the mumble voice channel from a player's server id.
     *
     * Hash: 0x221C09F1 | Since: unknown
     */
    function getVoiceChannelFromServerId(serverId) {
        return Citizen.invokeNative('0x221C09F1', serverId);
    }
    mumble.getVoiceChannelFromServerId = getVoiceChannelFromServerId;
    /**
     * No comment provided
     *
     * Hash: 0xE820BC10 | Since: unknown
     */
    function isActive() {
        return Citizen.invokeNative('0xE820BC10');
    }
    mumble.isActive = isActive;
    /**
     * This native will return true if the user succesfully connected to the voice server.
     * If the user disabled the voice-chat setting it will return false.
     *
     * Hash: 0xB816370A | Since: unknown
     */
    function isConnected() {
        return Citizen.invokeNative('0xB816370A');
    }
    mumble.isConnected = isConnected;
    /**
     * No comment provided
     *
     * Hash: 0x33EEF97F | Since: unknown
     */
    function isPlayerTalking(player) {
        return Citizen.invokeNative('0x33EEF97F', player);
    }
    mumble.isPlayerTalking = isPlayerTalking;
    /**
     * Stops listening to the specified channel.
     *
     * Hash: 0x231523B7 | Since: unknown
     */
    function removeVoiceChannelListen(channel) {
        Citizen.invokeNative('0x231523B7', channel);
    }
    mumble.removeVoiceChannelListen = removeVoiceChannelListen;
    /**
     * Removes the specified voice channel from the user's voice targets.
     *
     * Performs the opposite operation of [MUMBLE_ADD_VOICE_TARGET_CHANNEL](#\_0x4D386C9E)
     *
     * Hash: 0x268DB867 | Since: unknown
     */
    function removeVoiceTargetChannel(targetId, channel) {
        Citizen.invokeNative('0x268DB867', targetId, channel);
    }
    mumble.removeVoiceTargetChannel = removeVoiceTargetChannel;
    /**
     * Removes the specified player from the user's voice targets.
     *
     * Performs the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER](#\_0x32C5355A)
     *
     * Hash: 0x88CD646F | Since: unknown
     */
    function removeVoiceTargetPlayer(targetId, player) {
        Citizen.invokeNative('0x88CD646F', targetId, player);
    }
    mumble.removeVoiceTargetPlayer = removeVoiceTargetPlayer;
    /**
     * Removes the specified player from the user's voice targets.
     *
     * Performs the opposite operation of [MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID](#\_0x25F2B65F)
     *
     * Hash: 0x930BD34B | Since: unknown
     */
    function removeVoiceTargetPlayerByServerId(targetId, serverId) {
        Citizen.invokeNative('0x930BD34B', targetId, serverId);
    }
    mumble.removeVoiceTargetPlayerByServerId = removeVoiceTargetPlayerByServerId;
    /**
     * No comment provided
     *
     * Hash: 0xD932A3F3 | Since: unknown
     */
    function setActive(state) {
        Citizen.invokeNative('0xD932A3F3', state);
    }
    mumble.setActive = setActive;
    /**
     * Sets the current input distance. The player will be able to talk to other players within this distance.
     *
     * Hash: 0x1B1052E2 | Since: unknown
     */
    function setAudioInputDistance(distance) {
        Citizen.invokeNative('0x1B1052E2', distance);
    }
    mumble.setAudioInputDistance = setAudioInputDistance;
    /**
     * Use this native to disable noise suppression and high pass filters.
     *
     * The possible intents for this are as follows (backticks are used to represent hashes):
     *
     * | Index | Description |
     * |-|-|
     * | \`speech\` | Default intent |
     * | \`music\` | Disable noise suppression and high pass filter |
     *
     * Hash: 0x6383526B | Since: unknown
     */
    function setAudioInputIntent(intentHash) {
        if (typeof intentHash === 'string')
            intentHash = misc.getHashKey(intentHash);
        Citizen.invokeNative('0x6383526B', intentHash);
    }
    mumble.setAudioInputIntent = setAudioInputIntent;
    /**
     * Sets the current output distance. The player will be able to hear other players talking within this distance.
     *
     * Hash: 0x74C597D9 | Since: unknown
     */
    function setAudioOutputDistance(distance) {
        Citizen.invokeNative('0x74C597D9', distance);
    }
    mumble.setAudioOutputDistance = setAudioOutputDistance;
    /**
     * Changes the Mumble server address to connect to, and reconnects to the new address.
     *
     * Setting the address to an empty string and the port to -1 will reset to the built in FXServer Mumble Implementation.
     *
     * Hash: 0xE6EB2CD8 | Since: unknown
     */
    function setServerAddress(address, port) {
        Citizen.invokeNative('0xE6EB2CD8', address, port);
    }
    mumble.setServerAddress = setServerAddress;
    /**
     * Sets the audio submix ID for a specified player using Mumble 'Native Audio' functionality.
     *
     * Hash: 0xFE3A3054 | Since: unknown
     */
    function setSubmixForServerId(serverId, submixId) {
        Citizen.invokeNative('0xFE3A3054', serverId, submixId);
    }
    mumble.setSubmixForServerId = setSubmixForServerId;
    /**
     * No comment provided
     *
     * Hash: 0x74E927B0 | Since: unknown
     */
    function setTalkerProximity(value) {
        Citizen.invokeNative('0x74E927B0', value);
    }
    mumble.setTalkerProximity = setTalkerProximity;
    /**
     * No comment provided
     *
     * Hash: 0x8737EEE8 | Since: unknown
     */
    function setVoiceChannel(channel) {
        Citizen.invokeNative('0x8737EEE8', channel);
    }
    mumble.setVoiceChannel = setVoiceChannel;
    /**
     * Sets the current Mumble voice target ID to broadcast voice to.
     *
     * Hash: 0x960A4A95 | Since: unknown
     */
    function setVoiceTarget(targetId) {
        Citizen.invokeNative('0x960A4A95', targetId);
    }
    mumble.setVoiceTarget = setVoiceTarget;
    /**
     * Overrides the output volume for a particular player on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.
     *
     * Set to -1.0 to reset the Volume override.
     *
     * Hash: 0x61C309E3 | Since: unknown
     */
    function setVolumeOverride(player, volume) {
        Citizen.invokeNative('0x61C309E3', player, volume);
    }
    mumble.setVolumeOverride = setVolumeOverride;
    /**
     * Overrides the output volume for a particular player with the specified server id and player name on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.
     *
     * Hash: 0xCE8E25B4 | Since: unknown
     */
    function setVolumeOverrideByServerId(serverId, volume) {
        Citizen.invokeNative('0xCE8E25B4', serverId, volume);
    }
    mumble.setVolumeOverrideByServerId = setVolumeOverrideByServerId;
    /**
     * Create a permanent voice channel.
     *
     * Hash: 0x262663C5 | Since: unknown
     */
    function createChannel(id) {
        Citizen.invokeNative('0x262663C5', id);
    }
    mumble.createChannel = createChannel;
    /**
     * Checks if the player is currently muted
     *
     * Hash: 0x1D5D50C2 | Since: unknown
     */
    function isPlayerMuted(playerSrc) {
        return Citizen.invokeNative('0x1D5D50C2', playerSrc);
    }
    mumble.isPlayerMuted = isPlayerMuted;
    /**
     * Mutes or unmutes the specified player
     *
     * Hash: 0xCC6C2EB1 | Since: unknown
     */
    function setPlayerMuted(playerSrc, toggle) {
        Citizen.invokeNative('0xCC6C2EB1', playerSrc, toggle);
    }
    mumble.setPlayerMuted = setPlayerMuted;
})(mumble || (mumble = {}));
export var nui;
(function (nui) {
    /**
     * No comment provided
     *
     * Hash: 0xBDBA226F | Since: unknown
     */
    function getCursorPosition() {
        return Citizen.invokeNative('0xBDBA226F');
    }
    nui.getCursorPosition = getCursorPosition;
    /**
     * Returns the current NUI focus state previously set with `SET_NUI_FOCUS`.
     *
     * Hash: 0x98545E6D | Since: unknown
     */
    function isFocused() {
        return Citizen.invokeNative('0x98545E6D');
    }
    nui.isFocused = isFocused;
    /**
     * Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`.
     *
     * Hash: 0x39C9DC92 | Since: unknown
     */
    function isFocusKeepingInput() {
        return Citizen.invokeNative('0x39C9DC92');
    }
    nui.isFocusKeepingInput = isFocusKeepingInput;
    /**
     * No comment provided
     *
     * Hash: 0xC59B980C | Since: unknown
     */
    function registerCallback(callbackType, callback) {
        Citizen.invokeNative('0xC59B980C', callbackType, callback);
    }
    nui.registerCallback = registerCallback;
    /**
     * No comment provided
     *
     * Hash: 0xCD03CDA9 | Since: unknown
     */
    function registerCallbackType(callbackType) {
        Citizen.invokeNative('0xCD03CDA9', callbackType);
    }
    nui.registerCallbackType = registerCallbackType;
    /**
     * No comment provided
     *
     * Hash: 0xA8AE9C2F | Since: unknown
     */
    function registerRawCallback(callbackType, callback) {
        Citizen.invokeNative('0xA8AE9C2F', callbackType, callback);
    }
    nui.registerRawCallback = registerRawCallback;
    /**
     * No comment provided
     *
     * Hash: 0x78608ACB | Since: unknown
     */
    function sendMessage(jsonString) {
        return Citizen.invokeNative('0x78608ACB', jsonString);
    }
    nui.sendMessage = sendMessage;
    /**
     * Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,
     * you will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.
     *
     * Hash: 0x1722C938 | Since: unknown
     */
    function setManualShutdownLoadingScreen(manualShutdown) {
        Citizen.invokeNative('0x1722C938', manualShutdown);
    }
    nui.setManualShutdownLoadingScreen = setManualShutdownLoadingScreen;
    /**
     * No comment provided
     *
     * Hash: 0x5B98AE30 | Since: unknown
     */
    function setFocus(hasFocus, hasCursor) {
        Citizen.invokeNative('0x5B98AE30', hasFocus, hasCursor);
    }
    nui.setFocus = setFocus;
    /**
     * No comment provided
     *
     * Hash: 0x3FF5E5F8 | Since: unknown
     */
    function setFocusKeepInput(keepInput) {
        Citizen.invokeNative('0x3FF5E5F8', keepInput);
    }
    nui.setFocusKeepInput = setFocusKeepInput;
    /**
     * Set the z-index of the NUI resource.
     *
     * Hash: 0x3734AAFF | Since: unknown
     */
    function setZindex(zIndex) {
        Citizen.invokeNative('0x3734AAFF', zIndex);
    }
    nui.setZindex = setZindex;
    /**
     * Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.
     *
     * Hash: 0xB9234AFB | Since: unknown
     */
    function shutdownLoadingScreen() {
        Citizen.invokeNative('0xB9234AFB');
    }
    nui.shutdownLoadingScreen = shutdownLoadingScreen;
    /**
     * Will unregister and cleanup a registered NUI callback handler.
     *
     * Use along side the REGISTER_RAW_NUI_CALLBACK native.
     *
     * Hash: 0x7FB46432 | Since: unknown
     */
    function unregisterRawCallback(callbackType) {
        Citizen.invokeNative('0x7FB46432', callbackType);
    }
    nui.unregisterRawCallback = unregisterRawCallback;
})(nui || (nui = {}));
export var object;
(function (object) {
    /**
     * Returns a list of door system entries: a door system hash (see [ADD_DOOR_TO_SYSTEM](#\_0x6F8838D03D1DC226)) and its object handle.
     *
     * The data returned adheres to the following layout:
     *
     * ```
     * [{doorHash1, doorHandle1}, ..., {doorHashN, doorHandleN}]
     * ```
     *
     * Hash: 0xF65BBA4B | Since: unknown
     */
    function doorSystemGetActive() {
        return Citizen.invokeNative('0xF65BBA4B');
    }
    object.doorSystemGetActive = doorSystemGetActive;
    /**
     * No comment provided
     *
     * Hash: 0x237613B3 | Since: unknown
     */
    function doorSystemGetSize() {
        return Citizen.invokeNative('0x237613B3');
    }
    object.doorSystemGetSize = doorSystemGetSize;
    /**
     * Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.
     * This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CREATE_OBJECT](?\_0x509D5878EB39E842).</strong>
     *
     * Hash: 0x2F7AA05C | Since: unknown
     */
    function create(modelHash, pos, isNetwork, netMissionEntity, doorFlag) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0x2F7AA05C', modelHash, pos.x, pos.y, pos.z, isNetwork, netMissionEntity, doorFlag);
    }
    object.create = create;
    /**
     * Creates an object (prop) with the specified model centered at the specified position.
     * This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CREATE_OBJECT_NO_OFFSET](?\_0x9A294B2138ABB884).</strong>
     *
     * Hash: 0x58040420 | Since: unknown
     */
    function createNoOffset(modelHash, pos, isNetwork, netMissionEntity, doorFlag) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return Citizen.invokeNative('0x58040420', modelHash, pos.x, pos.y, pos.z, isNetwork, netMissionEntity, doorFlag);
    }
    object.createNoOffset = createNoOffset;
    /**
     * Returns all object handles known to the server.
     * The data returned adheres to the following layout:
     *
     * ```
     * [127, 42, 13, 37]
     * ```
     *
     * Hash: 0x6886C3FE | Since: unknown
     */
    function getAlls() {
        return Citizen.invokeNative('0x6886C3FE');
    }
    object.getAlls = getAlls;
    /**
     * doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
     * p5 only set to true in single player native scripts.
     * If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
     *
     * door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
     * All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.
     *
     * Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)
     *
     * Hash: 0x6F8838D03D1DC226 | Since: 323
     */
    function addDoorToSystem(doorHash, modelHash, pos, scriptDoor, isLocal) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        AddDoorToSystem(doorHash, modelHash, pos.x, pos.y, pos.z, false, scriptDoor, isLocal, undefined);
    }
    object.addDoorToSystem = addDoorToSystem;
    /**
     * Adds an area that seems to be related to pickup physics behavior.
     * Max amount of areas is 10. Only works in multiplayer.
     *
     * Hash: 0xD4A7A435B3710D05 | Since: 1290
     */
    function addExtendedPickupProbeArea(pos, radius) {
        Citizen.invokeNative('0xD4A7A435B3710D05', pos.x, pos.y, pos.z, radius);
    }
    object.addExtendedPickupProbeArea = addExtendedPickupProbeArea;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0xFDC07C58E8AAB715 | Since: 1734
     */
    function allowAllPlayersToCollectPickupsOfType(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        Citizen.invokeNative('0xFDC07C58E8AAB715', pickupHash);
    }
    object.allowAllPlayersToCollectPickupsOfType = allowAllPlayersToCollectPickupsOfType;
    /**
     * No comment provided
     *
     * Hash: 0xABDABF4E1EDECBFA | Since: 1365
     */
    function allowDamageEventsForNonNetworkeds(value) {
        SetUnkGlobalBoolRelatedToDamage(value);
    }
    object.allowDamageEventsForNonNetworkeds = allowDamageEventsForNonNetworkeds;
    /**
     * No comment provided
     *
     * Hash: 0x834344A414C7C85D | Since: 2372
     */
    function allowPickupArrowMarkerWhenUncollectable(pickup, toggle) {
        Citizen.invokeNative('0x834344A414C7C85D', pickup, toggle);
    }
    object.allowPickupArrowMarkerWhenUncollectable = allowPickupArrowMarkerWhenUncollectable;
    /**
     * No comment provided
     *
     * Hash: 0xAA059C615DE9DD03 | Since: 1180
     */
    function allowPickupByNoneParticipant(pickup, toggle) {
        Citizen.invokeNative('0xAA059C615DE9DD03', pickup, toggle);
    }
    object.allowPickupByNoneParticipant = allowPickupByNoneParticipant;
    /**
     * No comment provided
     *
     * Hash: 0x641F272B52E2F0F8 | Since: 877
     */
    function allowPortablePickupToMigrateToNonParticipants(pickup, toggle) {
        Citizen.invokeNative('0x641F272B52E2F0F8', pickup, toggle);
    }
    object.allowPortablePickupToMigrateToNonParticipants = allowPortablePickupToMigrateToNonParticipants;
    /**
     * No comment provided
     *
     * Hash: 0x85B6C850546FDDE2 | Since: 323
     */
    function areEntitiesEntirelyInsideGarage(garageHash) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        return AreEntitiesEntirelyInsideGarage(garageHash, false, false, false, undefined);
    }
    object.areEntitiesEntirelyInsideGarage = areEntitiesEntirelyInsideGarage;
    /**
     * No comment provided
     *
     * Hash: 0x8DC39368BDD57755 | Since: 323
     */
    function attachPortablePickupToPed(pickupObject, ped) {
        AttachPortablePickupToPed(pickupObject, ped);
    }
    object.attachPortablePickupToPed = attachPortablePickupToPed;
    /**
     * No comment provided
     *
     * Hash: 0x1E3F1B1B891A2AAA | Since: 573
     */
    function blockPlayersForAmbientPickup() {
        Citizen.invokeNative('0x1E3F1B1B891A2AAA', undefined, undefined);
    }
    object.blockPlayersForAmbientPickup = blockPlayersForAmbientPickup;
    /**
     * No comment provided
     *
     * Hash: 0xE7E4C198B0185900 | Since: 323
     */
    function breakFragmentChild(p0) {
        BreakObjectFragmentChild(p0, undefined, false);
    }
    object.breakFragmentChild = breakFragmentChild;
    /**
     * No comment provided
     *
     * Hash: 0xA2C1F5E92AFE49ED | Since: 323
     */
    function clearAllPickupRewardTypeSuppression() {
        Citizen.invokeNative('0xA2C1F5E92AFE49ED');
    }
    object.clearAllPickupRewardTypeSuppression = clearAllPickupRewardTypeSuppression;
    /**
     * Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
     *
     * Hash: 0xB7C6D80FB371659A | Since: 1290
     */
    function clearExtendedPickupProbeAreas() {
        Citizen.invokeNative('0xB7C6D80FB371659A');
    }
    object.clearExtendedPickupProbeAreas = clearExtendedPickupProbeAreas;
    /**
     * No comment provided
     *
     * Hash: 0xDA05194260CDCDF9 | Since: 678
     */
    function clearGarage(garageHash, isNetwork) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        ClearGarageArea(garageHash, isNetwork);
    }
    object.clearGarage = clearGarage;
    /**
     * No comment provided
     *
     * Hash: 0x190428512B240692 | Since: 323
     */
    function clearsInsideGarage(garageHash, vehicles, peds, objects, isNetwork) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        ClearObjectsInsideGarage(garageHash, vehicles, peds, objects, isNetwork);
    }
    object.clearsInsideGarage = clearsInsideGarage;
    /**
     * No comment provided
     *
     * Hash: 0x762DB2D380B48D04 | Since: 323
     */
    function clearPickupRewardTypeSuppression(rewardType) {
        Citizen.invokeNative('0x762DB2D380B48D04', rewardType);
    }
    object.clearPickupRewardTypeSuppression = clearPickupRewardTypeSuppression;
    /**
     * Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
     * Related to its "Pre-networked state"?
     *
     * Hash: 0x701FDA1E82076BA4 | Since: 323
     */
    function closeAllBarriersForRace() {
        Citizen.invokeNative('0x701FDA1E82076BA4');
    }
    object.closeAllBarriersForRace = closeAllBarriersForRace;
    /**
     * No comment provided
     *
     * Hash: 0x66A49D021870FE88 | Since: 323
     */
    function closeSafehouseGarages() {
        Citizen.invokeNative('0x66A49D021870FE88');
    }
    object.closeSafehouseGarages = closeSafehouseGarages;
    /**
     * returns pickup hash.
     *
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x5EAAD83F8CFB4575 | Since: 323
     */
    function convertOldPickupTypeToNew(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return GetPickupHash(pickupHash);
    }
    object.convertOldPickupTypeToNew = convertOldPickupTypeToNew;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x673966A0C0FD7171 | Since: 323
     */
    function createAmbientPickup(pickupHash, pos, flags, value, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateAmbientPickup(pickupHash, pos.x, pos.y, pos.z, flags, value, modelHash, false, false);
    }
    object.createAmbientPickup = createAmbientPickup;
    /**
     * Spawns one or more money pickups.
     *
     * x: The X-component of the world position to spawn the money pickups at.
     * y: The Y-component of the world position to spawn the money pickups at.
     * z: The Z-component of the world position to spawn the money pickups at.
     * value: The combined value of the pickups (in dollars).
     * amount: The number of pickups to spawn.
     * model: The model to use, or 0 for default money model.
     *
     * Example:
     * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
     *
     * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
     *
     * ==============================================
     *
     * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
     *
     * Hash: 0x0589B5E791CE9B2B | Since: 323
     */
    function createMoneyPickups(pos, value, amount, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        CreateMoneyPickups(pos.x, pos.y, pos.z, value, amount, model);
    }
    object.createMoneyPickups = createMoneyPickups;
    /**
     * No comment provided
     *
     * Hash: 0x9C93764223E29C50 | Since: 2372
     */
    function createNonNetworkedAmbientPickup(pickupHash, pos, flags, value, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateNonNetworkedAmbientPickup(pickupHash, pos.x, pos.y, pos.z, flags, value, modelHash, false, false);
    }
    object.createNonNetworkedAmbientPickup = createNonNetworkedAmbientPickup;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x125494B98A21AAF7 | Since: 323
     */
    function createNonNetworkedPortablePickup(pickupHash, pos, placeOnGround, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateNonNetworkedPortablePickup(pickupHash, pos.x, pos.y, pos.z, placeOnGround, modelHash);
    }
    object.createNonNetworkedPortablePickup = createNonNetworkedPortablePickup;
    /**
     * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
     *
     * Hash: 0x509D5878EB39E842 | Since: 323
     */
    function create(modelHash, pos, isNetwork, bScriptHostObj, dynamic) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateObject(modelHash, pos.x, pos.y, pos.z, isNetwork, bScriptHostObj, dynamic);
    }
    object.create = create;
    /**
     * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
     *
     * Hash: 0x9A294B2138ABB884 | Since: 323
     */
    function createNoOffset(modelHash, pos, isNetwork, bScriptHostObj, dynamic) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreateObjectNoOffset(modelHash, pos.x, pos.y, pos.z, isNetwork, bScriptHostObj, dynamic, undefined);
    }
    object.createNoOffset = createNoOffset;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0xFBA08C503DD5FA58 | Since: 323
     */
    function createPickup(pickupHash, pos, value, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePickup(pickupHash, pos.x, pos.y, pos.z, 0, value, false, modelHash);
    }
    object.createPickup = createPickup;
    /**
     * flags:
     * 8 (1 << 3): place on ground
     * 512 (1 << 9): spin around
     *
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x891804727E0A98B7 | Since: 323
     */
    function createPickupRotate(pickupHash, pos, rot, flag, amount, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePickupRotate(pickupHash, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, flag, amount, undefined, false, modelHash);
    }
    object.createPickupRotate = createPickupRotate;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x2EAF1FDB2FB55698 | Since: 323
     */
    function createPortablePickup(pickupHash, pos, placeOnGround, modelHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CreatePortablePickup(pickupHash, pos.x, pos.y, pos.z, placeOnGround, modelHash);
    }
    object.createPortablePickup = createPortablePickup;
    /**
     * No comment provided
     *
     * Hash: 0xE05F6AEEFEB0BB02 | Since: 1180
     */
    function damageFragmentChild() {
        Citizen.invokeNative('0xE05F6AEEFEB0BB02', undefined, undefined, undefined);
    }
    object.damageFragmentChild = damageFragmentChild;
    /**
     * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
     *
     * Hash: 0x539E0AE3E6634B9F | Since: 323
     */
    function deleteObject(_object) {
        DeleteObject(_object);
    }
    object.deleteObject = deleteObject;
    /**
     * No comment provided
     *
     * Hash: 0xCF463D1E9A0AECB1 | Since: 323
     */
    function detachPortablePickupFromPed(pickupObject) {
        DetachPortablePickupFromPed(pickupObject);
    }
    object.detachPortablePickupFromPed = detachPortablePickupFromPed;
    /**
     * Sets a flag. A valid id is 0x157DC10D
     *
     * Hash: 0x659F9D71F52843F8 | Since: 1290
     */
    function disableTidyingUpInGarage(id, toggle) {
        Citizen.invokeNative('0x659F9D71F52843F8', id, toggle);
    }
    object.disableTidyingUpInGarage = disableTidyingUpInGarage;
    /**
     * p5 is usually 0.
     *
     * Hash: 0xBFA48E2FF417213F | Since: 323
     */
    function doesOfTypeExistAtCoords(pos, radius, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return DoesObjectOfTypeExistAtCoords(pos.x, pos.y, pos.z, radius, hash, false);
    }
    object.doesOfTypeExistAtCoords = doesOfTypeExistAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xAFC1CA75AD4074D1 | Since: 323
     */
    function doesPickupExist(pickup) {
        return DoesPickupExist(pickup);
    }
    object.doesPickupExist = doesPickupExist;
    /**
     * No comment provided
     *
     * Hash: 0xD9EFB6DBF7DAAEA3 | Since: 323
     */
    function doesPickupObjectExist(pickupObject) {
        return DoesPickupObjectExist(pickupObject);
    }
    object.doesPickupObjectExist = doesPickupObjectExist;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0xF9C36251F6E48E33 | Since: 323
     */
    function doesPickupOfTypeExistInArea(pickupHash, pos, radius) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return DoesPickupOfTypeExistInArea(pickupHash, pos.x, pos.y, pos.z, radius);
    }
    object.doesPickupOfTypeExistInArea = doesPickupOfTypeExistInArea;
    /**
     * Returns true if a destructible object with this handle exists, false otherwise.
     *
     * Hash: 0x52AF537A0C5B8AAD | Since: 323
     */
    function doesRayfireMapExist(_object) {
        return DoesRayfireMapObjectExist(_object);
    }
    object.doesRayfireMapExist = doesRayfireMapExist;
    /**
     * Search radius: 0.5
     *
     * Hash: 0x589F80B325CC82C5 | Since: 323
     */
    function doorSystemFindExistingDoor(pos, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return DoorSystemFindExistingDoor(pos.x, pos.y, pos.z, modelHash);
    }
    object.doorSystemFindExistingDoor = doorSystemFindExistingDoor;
    /**
     * No comment provided
     *
     * Hash: 0xE851471AEFC3374F | Since: 1868
     */
    function doorSystemGetAutomaticDistance(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return DoorSystemGetAutomaticDistance(doorHash);
    }
    object.doorSystemGetAutomaticDistance = doorSystemGetAutomaticDistance;
    /**
     * No comment provided
     *
     * Hash: 0x4BC2854478F3A749 | Since: 323
     */
    function doorSystemGetDoorPendingState(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return DoorSystemGetDoorPendingState(doorHash);
    }
    object.doorSystemGetDoorPendingState = doorSystemGetDoorPendingState;
    /**
     * No comment provided
     *
     * Hash: 0x160AA1B32F6139B8 | Since: 323
     */
    function doorSystemGetDoorState(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return DoorSystemGetDoorState(doorHash);
    }
    object.doorSystemGetDoorState = doorSystemGetDoorState;
    /**
     * No comment provided
     *
     * Hash: 0xDF97CDD4FC08FD34 | Since: 323
     */
    function doorSystemGetIsPhysicsLoaded() {
        return DoorSystemGetIsPhysicsLoaded(undefined);
    }
    object.doorSystemGetIsPhysicsLoaded = doorSystemGetIsPhysicsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x8562FD8AB1E94D39 | Since: 3407
     */
    function doorSystemGetIsSpringRemoved(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return Citizen.invokeNative('0x8562FD8AB1E94D39', doorHash);
    }
    object.doorSystemGetIsSpringRemoved = doorSystemGetIsSpringRemoved;
    /**
     * No comment provided
     *
     * Hash: 0x65499865FCA6E5EC | Since: 323
     */
    function doorSystemGetOpenRatio(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return DoorSystemGetOpenRatio(doorHash);
    }
    object.doorSystemGetOpenRatio = doorSystemGetOpenRatio;
    /**
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0x9BA001CB45CBF627 | Since: 323
     */
    function doorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate);
    }
    object.doorSystemSetAutomaticDistance = doorSystemSetAutomaticDistance;
    /**
     * Includes networking check: ownership vs. or the door itself **isn't** networked.
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0x03C27E13B42A0E82 | Since: 323
     */
    function doorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate);
    }
    object.doorSystemSetAutomaticRate = doorSystemSetAutomaticRate;
    /**
     * Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
     *
     * Hash: 0xA85A21582451E951 | Since: 323
     */
    function doorSystemSetDoorOpenForRaces(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        Citizen.invokeNative('0xA85A21582451E951', doorHash, false);
    }
    object.doorSystemSetDoorOpenForRaces = doorSystemSetDoorOpenForRaces;
    /**
     * Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
     * `requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
     * `forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
     * Door lock states:
     * 0: UNLOCKED
     * 1: LOCKED
     * 2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
     * 3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
     * 4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
     * 5: DOORSTATE_FORCE_OPEN_THIS_FRAME
     * 6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
     *
     * Hash: 0x6BAB9442830C7F53 | Since: 323
     */
    function doorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate);
    }
    object.doorSystemSetDoorState = doorSystemSetDoorState;
    /**
     * Includes networking check: ownership vs. or the door itself **isn't** networked.
     *
     * Hash: 0xD9B71952F78A2640 | Since: 323
     */
    function doorSystemSetHoldOpen(doorHash, toggle) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetHoldOpen(doorHash, toggle);
    }
    object.doorSystemSetHoldOpen = doorSystemSetHoldOpen;
    /**
     * Sets the ajar angle of a door.
     * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0xB6E6FBA95C7324AC | Since: 323
     */
    function doorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate);
    }
    object.doorSystemSetOpenRatio = doorSystemSetOpenRatio;
    /**
     * Includes networking check: ownership vs. or the door itself **isn't** networked.
     * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
     *
     * Hash: 0xC485E07E4F0B7958 | Since: 323
     */
    function doorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        DoorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate);
    }
    object.doorSystemSetSpringRemoved = doorSystemSetSpringRemoved;
    /**
     * No comment provided
     *
     * Hash: 0xF2E1A7133DD356A6 | Since: 323
     */
    function enableSavingInGarage(garageHash, toggle) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        EnableSavingInGarage(garageHash, toggle);
    }
    object.enableSavingInGarage = enableSavingInGarage;
    /**
     * No comment provided
     *
     * Hash: 0xF9C1681347C8BD15 | Since: 323
     */
    function fixFragment(_object) {
        FixObjectFragment(_object);
    }
    object.fixFragment = fixFragment;
    /**
     * No comment provided
     *
     * Hash: 0x4C134B4DF76025D0 | Since: 1180
     */
    function forceActivatePhysicsOnUnfixedPickup(pickup, toggle) {
        Citizen.invokeNative('0x4C134B4DF76025D0', pickup, toggle);
    }
    object.forceActivatePhysicsOnUnfixedPickup = forceActivatePhysicsOnUnfixedPickup;
    /**
     * No comment provided
     *
     * Hash: 0x758A5C1B3B1E1990 | Since: 1011
     */
    function forcePickupRegenerate() {
        ForcePickupRegenerate(undefined);
    }
    object.forcePickupRegenerate = forcePickupRegenerate;
    /**
     * No comment provided
     *
     * Hash: 0x394CD08E31313C28 | Since: 944
     */
    function forcePickupRotateFaceUp() {
        Citizen.invokeNative('0x394CD08E31313C28');
    }
    object.forcePickupRotateFaceUp = forcePickupRotateFaceUp;
    /**
     * No comment provided
     *
     * Hash: 0x5CE2E45A5CE2E45A | Since: 2545
     */
    function forcePortablePickupLastAccessiblePositionSetting(_object) {
        Citizen.invokeNative('0x5CE2E45A5CE2E45A', _object);
    }
    object.forcePortablePickupLastAccessiblePositionSetting = forcePortablePickupLastAccessiblePositionSetting;
    /**
     * Has 8 params in the latest patches.
     *
     * isMission - if true doesn't return mission objects
     *
     * Hash: 0xE143FA2249364369 | Since: 323
     */
    function getClosestOfType(pos, radius, modelHash, isMission) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetClosestObjectOfType(pos.x, pos.y, pos.z, radius, modelHash, isMission, false, false);
    }
    object.getClosestOfType = getClosestOfType;
    /**
     * No comment provided
     *
     * Hash: 0x163F8B586BC95F2A | Since: 323
     */
    function getCoordsAndRotationOfClosestOfType(pos, radius, modelHash, rotationOrder) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetCoordsAndRotationOfClosestObjectOfType(pos.x, pos.y, pos.z, radius, modelHash, rotationOrder);
    }
    object.getCoordsAndRotationOfClosestOfType = getCoordsAndRotationOfClosestOfType;
    /**
     * No comment provided
     *
     * Hash: 0xDB41D07A45A6D4B7 | Since: 323
     */
    function getDefaultAmmoForWeaponPickup(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return Citizen.invokeNative('0xDB41D07A45A6D4B7', pickupHash);
    }
    object.getDefaultAmmoForWeaponPickup = getDefaultAmmoForWeaponPickup;
    /**
     * No comment provided
     *
     * Hash: 0x2542269291C6AC84 | Since: 1180
     */
    function getHasBeenCompletelyDestroyed() {
        return Citizen.invokeNative('0x2542269291C6AC84', undefined);
    }
    object.getHasBeenCompletelyDestroyed = getHasBeenCompletelyDestroyed;
    /**
     * No comment provided
     *
     * Hash: 0x3BD770D281982DB5 | Since: 1604
     */
    function getIsArticulatedJointAtMaxAngle() {
        return Citizen.invokeNative('0x3BD770D281982DB5', undefined, undefined);
    }
    object.getIsArticulatedJointAtMaxAngle = getIsArticulatedJointAtMaxAngle;
    /**
     * No comment provided
     *
     * Hash: 0x43C677F1E1158005 | Since: 1604
     */
    function getIsArticulatedJointAtMinAngle(_object) {
        return GetIsArenaPropPhysicsDisabled(_object, undefined);
    }
    object.getIsArticulatedJointAtMinAngle = getIsArticulatedJointAtMinAngle;
    /**
     * No comment provided
     *
     * Hash: 0xB6FBFD079B8D0596 | Since: 323
     */
    function getFragmentDamageHealth() {
        return GetObjectFragmentDamageHealth(undefined, false);
    }
    object.getFragmentDamageHealth = getFragmentDamageHealth;
    /**
     * No comment provided
     *
     * Hash: 0xE84EB93729C5F36A | Since: 757
     */
    function getTintIndex(_object) {
        return GetObjectTextureVariation(_object);
    }
    object.getTintIndex = getTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0x163E252DE035A133 | Since: 323
     */
    function getOffsetFromCoordAndHeadingInWorldCoords(pos, heading, xOffset, yOffset, zOffset) {
        return new Vector3(GetOffsetFromCoordAndHeadingInWorldCoords(pos.x, pos.y, pos.z, heading, xOffset, yOffset, zOffset));
    }
    object.getOffsetFromCoordAndHeadingInWorldCoords = getOffsetFromCoordAndHeadingInWorldCoords;
    /**
     * No comment provided
     *
     * Hash: 0x225B8B35C88029B3 | Since: 323
     */
    function getPickupCoords(pickup) {
        return new Vector3(GetPickupCoords(pickup));
    }
    object.getPickupCoords = getPickupCoords;
    /**
     * No comment provided
     *
     * Hash: 0xB3ECA65C7317F174 | Since: 944
     */
    function getPickupGenerationRangeMultiplier() {
        return GetPickupGenerationRangeMultiplier();
    }
    object.getPickupGenerationRangeMultiplier = getPickupGenerationRangeMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0x5099BC55630B25AE | Since: 323
     */
    function getPickup(pickup) {
        return GetPickupObject(pickup);
    }
    object.getPickup = getPickup;
    /**
     * Returns the pickup hash for the given weapon hash
     *
     * Hash: 0xD6429A016084F1A5 | Since: 1290
     */
    function getPickupTypeFromWeaponHash(weaponHash) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        return GetPickupHashFromWeapon(weaponHash);
    }
    object.getPickupTypeFromWeaponHash = getPickupTypeFromWeaponHash;
    /**
     * Example:
     * `OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");`
     *
     * Hash: 0xB48FCED898292E52 | Since: 323
     */
    function getRayfireMap(pos, radius, name) {
        return GetRayfireMapObject(pos.x, pos.y, pos.z, radius, name);
    }
    object.getRayfireMap = getRayfireMap;
    /**
     * `object`: The des-object handle to get the animation progress from.
     * Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
     *
     * Hash: 0x260EE4FDBDF4DB01 | Since: 323
     */
    function getRayfireMapAnimPhase(_object) {
        return GetRayfireMapObjectAnimPhase(_object);
    }
    object.getRayfireMapAnimPhase = getRayfireMapAnimPhase;
    /**
     * No comment provided
     *
     * Hash: 0x6E16BC2503FF1FF0 | Since: 323
     */
    function getSafePickupCoords(pos) {
        return new Vector3(GetSafePickupCoords(pos.x, pos.y, pos.z, 0, 0));
    }
    object.getSafePickupCoords = getSafePickupCoords;
    /**
     * locked is 0 if no door is found
     * locked is 0 if door is unlocked
     * locked is 1 if door is found and unlocked.
     *
     * -------------
     * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
     *
     * Hash: 0xEDC1A5B84AEF33FF | Since: 323
     */
    function getStateOfClosestDoorOfType(_type, pos) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        return GetStateOfClosestDoorOfType(_type, pos.x, pos.y, pos.z);
    }
    object.getStateOfClosestDoorOfType = getStateOfClosestDoorOfType;
    /**
     * Get a destructible object's state.
     * Substract 1 to get the real state.
     * See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
     * For example, if the object just spawned (state 2), the native will return 3.
     *
     * Hash: 0x899BA936634A322E | Since: 323
     */
    function getStateOfRayfireMap(_object) {
        return GetStateOfRayfireMapObject(_object);
    }
    object.getStateOfRayfireMap = getStateOfRayfireMap;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x08F96CA6C551AD51 | Since: 323
     */
    function getWeaponTypeFromPickupType(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        return GetWeaponTypeFromPickupType(pickupHash);
    }
    object.getWeaponTypeFromPickupType = getWeaponTypeFromPickupType;
    /**
     * No comment provided
     *
     * Hash: 0x761B0E69AC4D007E | Since: 323
     */
    function hasClosestOfTypeBeenBroken(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return HasClosestObjectOfTypeBeenBroken(0, 0, 0, 0, modelHash, undefined);
    }
    object.hasClosestOfTypeBeenBroken = hasClosestOfTypeBeenBroken;
    /**
     * No comment provided
     *
     * Hash: 0x46494A2475701343 | Since: 323
     */
    function hasClosestOfTypeBeenCompletelyDestroyed(pos, radius, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return HasClosestObjectOfTypeBeenCompletelyDestroyed(pos.x, pos.y, pos.z, radius, modelHash, false);
    }
    object.hasClosestOfTypeBeenCompletelyDestroyed = hasClosestOfTypeBeenCompletelyDestroyed;
    /**
     * No comment provided
     *
     * Hash: 0x8ABFB70C49CC43E2 | Since: 323
     */
    function hasBeenBroken(_object) {
        return HasObjectBeenBroken(_object, undefined);
    }
    object.hasBeenBroken = hasBeenBroken;
    /**
     * No comment provided
     *
     * Hash: 0x80EC48E6679313F9 | Since: 323
     */
    function hasPickupBeenCollected(pickup) {
        return HasPickupBeenCollected(pickup);
    }
    object.hasPickupBeenCollected = hasPickupBeenCollected;
    /**
     * No comment provided
     *
     * Hash: 0x867458251D47CCB2 | Since: 463
     */
    function hidePortablePickupWhenDetached(pickupObject, toggle) {
        HidePortablePickupWhenDetached(pickupObject, toggle);
    }
    object.hidePortablePickupWhenDetached = hidePortablePickupWhenDetached;
    /**
     * No comment provided
     *
     * Hash: 0x673ED815D6E323B7 | Since: 323
     */
    function isAnyEntityEntirelyInsideGarage(garageHash) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        return IsAnyEntityEntirelyInsideGarage(garageHash, false, false, false, undefined);
    }
    object.isAnyEntityEntirelyInsideGarage = isAnyEntityEntirelyInsideGarage;
    /**
     * No comment provided
     *
     * Hash: 0x397DC58FF00298D1 | Since: 323
     */
    function isAnyNearPoint(pos, range) {
        return IsAnyObjectNearPoint(pos.x, pos.y, pos.z, range, false);
    }
    object.isAnyNearPoint = isAnyNearPoint;
    /**
     * No comment provided
     *
     * Hash: 0xC531EE8A1145A149 | Since: 323
     */
    function isDoorClosed(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return IsDoorClosed(doorHash);
    }
    object.isDoorClosed = isDoorClosed;
    /**
     * `if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))`
     * {
     * `OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);`
     * }
     *
     * Hash: 0xC153C43EA202C8C1 | Since: 323
     */
    function isDoorRegisteredWithSystem(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        return IsDoorRegisteredWithSystem(doorHash);
    }
    object.isDoorRegisteredWithSystem = isDoorRegisteredWithSystem;
    /**
     * No comment provided
     *
     * Hash: 0x90E47239EA1980B8 | Since: 323
     */
    function isGarageEmpty(garageHash) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        return IsGarageEmpty(garageHash, false, 0);
    }
    object.isGarageEmpty = isGarageEmpty;
    /**
     * No comment provided
     *
     * Hash: 0xFC481C641EBBD27D | Since: 1365
     */
    function isAPickup(_object) {
        return IsObjectAPickup(_object);
    }
    object.isAPickup = isAPickup;
    /**
     * No comment provided
     *
     * Hash: 0x0378C08504160D0D | Since: 323
     */
    function isAPortablePickup(_object) {
        return IsObjectAPortablePickup(_object);
    }
    object.isAPortablePickup = isAPortablePickup;
    /**
     * Despite the name, it does work for any entity type.
     *
     * Hash: 0x372EF6699146A1E4 | Since: 323
     */
    function isEntirelyInsideGarage(garageHash, entity) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        return IsObjectEntirelyInsideGarage(garageHash, entity, 0, 0);
    }
    object.isEntirelyInsideGarage = isEntirelyInsideGarage;
    /**
     * No comment provided
     *
     * Hash: 0x8C90FE4B381BA60A | Since: 323
     */
    function isNearPoint(objectHash, pos, range) {
        if (typeof objectHash === 'string')
            objectHash = misc.getHashKey(objectHash);
        return IsObjectNearPoint(objectHash, pos.x, pos.y, pos.z, range);
    }
    object.isNearPoint = isNearPoint;
    /**
     * Despite the name, it does work for any entity type.
     *
     * Hash: 0xF0EED5A6BC7B237A | Since: 323
     */
    function isPartiallyInsideGarage(garageHash, entity) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        return IsObjectPartiallyInsideGarage(garageHash, entity, 0);
    }
    object.isPartiallyInsideGarage = isPartiallyInsideGarage;
    /**
     * No comment provided
     *
     * Hash: 0x8B32ACE6326A7546 | Since: 323
     */
    function isVisible(_object) {
        return IsObjectVisible(_object);
    }
    object.isVisible = isVisible;
    /**
     * No comment provided
     *
     * Hash: 0x11D1E53A726891FE | Since: 323
     */
    function isPickupWeaponValid(_object) {
        return IsPickupWeaponObjectValid(_object);
    }
    object.isPickupWeaponValid = isPickupWeaponValid;
    /**
     * No comment provided
     *
     * Hash: 0x024A60DEB0EA69F0 | Since: 323
     */
    function isPlayerEntirelyInsideGarage(garageHash, player) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        return IsPlayerEntirelyInsideGarage(garageHash, player, 0, 0);
    }
    object.isPlayerEntirelyInsideGarage = isPlayerEntirelyInsideGarage;
    /**
     * No comment provided
     *
     * Hash: 0x1761DC5D8471CBAA | Since: 323
     */
    function isPlayerPartiallyInsideGarage(garageHash, player) {
        if (typeof garageHash === 'string')
            garageHash = misc.getHashKey(garageHash);
        return IsPlayerPartiallyInsideGarage(garageHash, player, 0);
    }
    object.isPlayerPartiallyInsideGarage = isPlayerPartiallyInsideGarage;
    /**
     * An angled area is an X-Z oriented rectangle with three parameters:
     * 1. origin: the mid-point along a base edge of the rectangle;
     * 2. extent: the mid-point of opposite base edge on the other Z;
     * 3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).
     *
     * The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
     * 1. golf_mp https://i.imgur.com/JhsQAK9.png
     * 2. am_taxi https://i.imgur.com/TJWCZaT.jpg
     *
     * Hash: 0x2A70BAE8883E4C81 | Since: 323
     */
    function isPointInAngledArea(pos, x1, y1, z1, x2, y2, z2, width, debug, includeZ) {
        return IsPointInAngledArea(pos.x, pos.y, pos.z, x1, y1, z1, x2, y2, z2, width, debug, includeZ);
    }
    object.isPointInAngledArea = isPointInAngledArea;
    /**
     * No comment provided
     *
     * Hash: 0xADF084FB8F075D06 | Since: 1604
     */
    function isPropLightOverriden(_object) {
        return Citizen.invokeNative('0xADF084FB8F075D06', _object);
    }
    object.isPropLightOverriden = isPropLightOverriden;
    /**
     * No comment provided
     *
     * Hash: 0xADBE4809F19F927A | Since: 323
     */
    function onlyCleanUpWhenOutOfRange(_object) {
        MarkObjectForDeletion(_object);
    }
    object.onlyCleanUpWhenOutOfRange = onlyCleanUpWhenOutOfRange;
    /**
     * No comment provided
     *
     * Hash: 0xC7F29CA00F46350E | Since: 323
     */
    function openAllBarriersForRace() {
        Citizen.invokeNative('0xC7F29CA00F46350E', false);
    }
    object.openAllBarriersForRace = openAllBarriersForRace;
    /**
     * No comment provided
     *
     * Hash: 0xD76EEEF746057FD6 | Since: 505
     */
    function placeOnGroundOrObjectProperly(_object) {
        return PlaceObjectOnGroundProperly2(_object);
    }
    object.placeOnGroundOrObjectProperly = placeOnGroundOrObjectProperly;
    /**
     * No comment provided
     *
     * Hash: 0x58A850EAEE20FAA3 | Since: 323
     */
    function placeOnGroundProperly(_object) {
        return PlaceObjectOnGroundProperly(_object);
    }
    object.placeOnGroundProperly = placeOnGroundProperly;
    /**
     * No comment provided
     *
     * Hash: 0x006E4B040ED37EC3 | Since: 1868
     */
    function playAutoStartAnim() {
        Citizen.invokeNative('0x006E4B040ED37EC3', undefined);
    }
    object.playAutoStartAnim = playAutoStartAnim;
    /**
     * No comment provided
     *
     * Hash: 0x92AEFB5F6E294023 | Since: 323
     */
    function preventCollectionOfPortablePickup(_object) {
        PreventCollectionOfPortablePickup(_object, false, false);
    }
    object.preventCollectionOfPortablePickup = preventCollectionOfPortablePickup;
    /**
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x27F9D613092159CF | Since: 323
     */
    function removeAllPickupsOfType(pickupHash) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        RemoveAllPickupsOfType(pickupHash);
    }
    object.removeAllPickupsOfType = removeAllPickupsOfType;
    /**
     * CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
     * Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
     *
     * Hash: 0x464D8E1427156FE4 | Since: 323
     */
    function removeDoorFromSystem(doorHash) {
        if (typeof doorHash === 'string')
            doorHash = misc.getHashKey(doorHash);
        RemoveDoorFromSystem(doorHash, undefined);
    }
    object.removeDoorFromSystem = removeDoorFromSystem;
    /**
     * No comment provided
     *
     * Hash: 0x4A39DB43E47CF3AA | Since: 323
     */
    function removeHighDetailModel(_object) {
        RemoveObjectHighDetailModel(_object);
    }
    object.removeHighDetailModel = removeHighDetailModel;
    /**
     * No comment provided
     *
     * Hash: 0x3288D8ACAECD2AB2 | Since: 323
     */
    function removePickup(pickup) {
        RemovePickup(pickup);
    }
    object.removePickup = removePickup;
    /**
     * draws circular marker at pos
     * -1 = none
     * 0 = red
     * 1 = green
     * 2 = blue
     * 3 = green larger
     * 4 = nothing
     * 5 = green small
     *
     * Hash: 0x3430676B11CDF21D | Since: 323
     */
    function renderFakePickupGlow(pos, colorIndex) {
        RenderFakePickupGlow(pos.x, pos.y, pos.z, colorIndex);
    }
    object.renderFakePickupGlow = renderFakePickupGlow;
    /**
     * No comment provided
     *
     * Hash: 0xAFE24E4D29249E4A | Since: 1734
     */
    function rotate(_object) {
        return Citizen.invokeNative('0xAFE24E4D29249E4A', _object, 0, 0, false);
    }
    object.rotate = rotate;
    /**
     * No comment provided
     *
     * Hash: 0x406137F8EF90EAF5 | Since: 323
     */
    function setActivatePhysicsAsSoonAsItIsUnfrozen(_object, toggle) {
        SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(_object, toggle);
    }
    object.setActivatePhysicsAsSoonAsItIsUnfrozen = setActivatePhysicsAsSoonAsItIsUnfrozen;
    /**
     * No comment provided
     *
     * Hash: 0x826D1EE4D1CAFC78 | Since: 505
     */
    function setCustomPickupWeaponHash(pickupHash, pickup) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        Citizen.invokeNative('0x826D1EE4D1CAFC78', pickupHash, pickup);
    }
    object.setCustomPickupWeaponHash = setCustomPickupWeaponHash;
    /**
     * Requires a component_at_*_flsh to be attached to the weapon object
     *
     * Hash: 0xBCE595371A5FBAAF | Since: 323
     */
    function setCutscenesWeaponFlashlightOnThisFrame(_object, toggle) {
        SetCreateWeaponObjectLightSource(_object, toggle);
    }
    object.setCutscenesWeaponFlashlightOnThisFrame = setCutscenesWeaponFlashlightOnThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x8CAAB2BD3EA58BD4 | Since: 1011
     */
    function setDisableCollisionsBetweenCarsAndCarParachute() {
        Citizen.invokeNative('0x8CAAB2BD3EA58BD4', undefined);
    }
    object.setDisableCollisionsBetweenCarsAndCarParachute = setDisableCollisionsBetweenCarsAndCarParachute;
    /**
     * Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
     *
     * Hash: 0x911024442F4898F0 | Since: 1604
     */
    function setDriveArticulatedJoint(_object, toggle) {
        SetEnableArenaPropPhysics(_object, toggle, 0);
    }
    object.setDriveArticulatedJoint = setDriveArticulatedJoint;
    /**
     * No comment provided
     *
     * Hash: 0xB20834A7DD3D8896 | Since: 1604
     */
    function setDriveArticulatedJointWithInflictor(_object, toggle, ped) {
        SetEnableArenaPropPhysicsOnPed(_object, toggle, 0, ped);
    }
    object.setDriveArticulatedJointWithInflictor = setDriveArticulatedJointWithInflictor;
    /**
     * No comment provided
     *
     * Hash: 0xB2D0BDE54F0E8E5A | Since: 323
     */
    function setEntityFlagRenderSmallShadow(_object, toggle) {
        Citizen.invokeNative('0xB2D0BDE54F0E8E5A', _object, toggle);
    }
    object.setEntityFlagRenderSmallShadow = setEntityFlagRenderSmallShadow;
    /**
     * Sets entity+38 to C (when false) or 0xFF3f (when true)
     *
     * Hash: 0xD05A3241B9A86F19 | Since: 1180
     */
    function setEntityFlagSuppressShadow(entity, toggle) {
        Citizen.invokeNative('0xD05A3241B9A86F19', entity, toggle);
    }
    object.setEntityFlagSuppressShadow = setEntityFlagSuppressShadow;
    /**
     * No comment provided
     *
     * Hash: 0xF538081986E49E9D | Since: 323
     */
    function setForceThisFrame(pos) {
        SetForceObjectThisFrame(pos.x, pos.y, pos.z, 0);
    }
    object.setForceThisFrame = setForceThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x1C57C94A6446492A | Since: 1604
     */
    function setIsArticulated(_object, toggle) {
        Citizen.invokeNative('0x1C57C94A6446492A', _object, toggle);
    }
    object.setIsArticulated = setIsArticulated;
    /**
     * No comment provided
     *
     * Hash: 0xB5B7742424BD4445 | Since: 1604
     */
    function setIsBall(_object, toggle) {
        Citizen.invokeNative('0xB5B7742424BD4445', _object, toggle);
    }
    object.setIsBall = setIsBall;
    /**
     * No comment provided
     *
     * Hash: 0x78857FC65CADB909 | Since: 323
     */
    function setLocalPlayerCanCollectPortablePickups(toggle) {
        SetLocalPlayerCanCollectPortablePickups(toggle);
    }
    object.setLocalPlayerCanCollectPortablePickups = setLocalPlayerCanCollectPortablePickups;
    /**
     * Maximum amount of pickup models that can be disallowed is 30.
     *
     * Hash: 0x88EAEC617CD26926 | Since: 323
     */
    function setLocalPlayerPermittedToCollectPickupsWithModel(modelHash, toggle) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetLocalPlayerCanUsePickupsWithThisModel(modelHash, toggle);
    }
    object.setLocalPlayerPermittedToCollectPickupsWithModel = setLocalPlayerPermittedToCollectPickupsWithModel;
    /**
     * Hardcoded not to work in multiplayer environments.
     * When you set locked to 0 the door open and to 1 the door close
     * `OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open`
     *
     * `OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close`
     *
     * Hash: 0x9B12F9A24FABEDB0 | Since: 323
     */
    function setLockedUnstreamedInDoorOfType(modelHash, pos, locked, xRotMult, yRotMult, zRotMult) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        DoorControl(modelHash, pos.x, pos.y, pos.z, locked, xRotMult, yRotMult, zRotMult);
    }
    object.setLockedUnstreamedInDoorOfType = setLockedUnstreamedInDoorOfType;
    /**
     * No comment provided
     *
     * Hash: 0x0BF3B3BD47D79C08 | Since: 323
     */
    function setMaxNumPortablePickupsCarriedByPlayer(modelHash, _number) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetMaxNumPortablePickupsCarriedByPlayer(modelHash, _number);
    }
    object.setMaxNumPortablePickupsCarriedByPlayer = setMaxNumPortablePickupsCarriedByPlayer;
    /**
     * Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
     *
     * Hash: 0x4D89D607CB3DD1D2 | Since: 323
     */
    function setAllowLowLodBuoyancy(_object, toggle) {
        SetObjectAllowLowLodBuoyancy(_object, toggle);
    }
    object.setAllowLowLodBuoyancy = setAllowLowLodBuoyancy;
    /**
     * Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
     *
     * Hash: 0x77F33F2CCF64B3AA | Since: 323
     */
    function setForceVehiclesToAvoid(_object, toggle) {
        SetObjectForceVehiclesToAvoid(_object, toggle);
    }
    object.setForceVehiclesToAvoid = setForceVehiclesToAvoid;
    /**
     * No comment provided
     *
     * Hash: 0x62454A641B41F3C5 | Since: 678
     */
    function setGlowInSameTeam(pickup) {
        Citizen.invokeNative('0x62454A641B41F3C5', pickup);
    }
    object.setGlowInSameTeam = setGlowInSameTeam;
    /**
     * No comment provided
     *
     * Hash: 0x734E1714D077DA9A | Since: 1604
     */
    function setIsAPressurePlate(_object, toggle) {
        Citizen.invokeNative('0x734E1714D077DA9A', _object, toggle);
    }
    object.setIsAPressurePlate = setIsAPressurePlate;
    /**
     * No comment provided
     *
     * Hash: 0xC6033D32241F6FB5 | Since: 323
     */
    function setIsSpecialGolfball(_object, toggle) {
        Citizen.invokeNative('0xC6033D32241F6FB5', _object, toggle);
    }
    object.setIsSpecialGolfball = setIsSpecialGolfball;
    /**
     * No comment provided
     *
     * Hash: 0x3B2FD68DB5F8331C | Since: 757
     */
    function setIsVisibleInMirrors(_object, toggle) {
        Citizen.invokeNative('0x3B2FD68DB5F8331C', _object, toggle);
    }
    object.setIsVisibleInMirrors = setIsVisibleInMirrors;
    /**
     * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
     *
     * Other parameters seem to be unknown.
     *
     * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
     * p3: seems similar to p2
     * p4: makes obj fall slower the higher the value
     * p5: similar to p4
     *
     * Hash: 0xF6DF6E90DE7DF90F | Since: 323
     */
    function setPhysicsParams(_object, weight, gravity, buoyancy) {
        SetObjectPhysicsParams(_object, weight, 0, 0, 0, 0, gravity, 0, 0, 0, 0, buoyancy);
    }
    object.setPhysicsParams = setPhysicsParams;
    /**
     * No comment provided
     *
     * Hash: 0x96EE0EBA0163DF80 | Since: 791
     */
    function setSpeedBoostAmount(_object) {
        SetObjectStuntPropSpeedup(_object, undefined);
    }
    object.setSpeedBoostAmount = setSpeedBoostAmount;
    /**
     * No comment provided
     *
     * Hash: 0xDF6CA0330F2E737B | Since: 791
     */
    function setSpeedBoostDuration(_object, duration) {
        SetObjectStuntPropDuration(_object, duration);
    }
    object.setSpeedBoostDuration = setSpeedBoostDuration;
    /**
     * No comment provided
     *
     * Hash: 0xEB6F1A9B5510A5D2 | Since: 323
     */
    function setTakesDamageFromCollidingWithBuildings() {
        Citizen.invokeNative('0xEB6F1A9B5510A5D2', undefined, false);
    }
    object.setTakesDamageFromCollidingWithBuildings = setTakesDamageFromCollidingWithBuildings;
    /**
     * No comment provided
     *
     * Hash: 0x8A7391690F5AFD81 | Since: 323
     */
    function setTargettable(_object, targettable) {
        SetObjectTargettable(_object, targettable, undefined);
    }
    object.setTargettable = setTargettable;
    /**
     * enum ObjectPaintVariants
     * {
     * Pacific = 0,
     * Azure = 1,
     * Nautical = 2,
     * Continental = 3,
     * Battleship = 4,
     * Intrepid = 5,
     * Uniform = 6,
     * Classico = 7,
     * Mediterranean = 8,
     * Command = 9,
     * Mariner = 10,
     * Ruby = 11,
     * Vintage = 12,
     * Pristine = 13,
     * Merchant = 14,
     * Voyager = 15
     * };
     *
     * Hash: 0x971DA0055324D033 | Since: 323
     */
    function setTintIndex(_object, textureVariation) {
        SetObjectTextureVariation(_object, textureVariation);
    }
    object.setTintIndex = setTintIndex;
    /**
     * No comment provided
     *
     * Hash: 0x31F924B53EADDF65 | Since: 323
     */
    function setOnlyAllowAmmoCollectionWhenLow() {
        Citizen.invokeNative('0x31F924B53EADDF65', false);
    }
    object.setOnlyAllowAmmoCollectionWhenLow = setOnlyAllowAmmoCollectionWhenLow;
    /**
     * No comment provided
     *
     * Hash: 0x318516E02DE3ECE2 | Since: 323
     */
    function setPickupGenerationRangeMultiplier(multiplier) {
        SetPickupGenerationRangeMultiplier(multiplier);
    }
    object.setPickupGenerationRangeMultiplier = setPickupGenerationRangeMultiplier;
    /**
     * p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
     *
     * Hash: 0x0596843B34B95CE5 | Since: 505
     */
    function setPickupGlowOffset(pickup) {
        Citizen.invokeNative('0x0596843B34B95CE5', pickup, 0);
    }
    object.setPickupGlowOffset = setPickupGlowOffset;
    /**
     * No comment provided
     *
     * Hash: 0x3ED2B83AB2E82799 | Since: 757
     */
    function setPickupHiddenWhenUncollectable(pickup, toggle) {
        SetPickupHiddenWhenUncollectable(pickup, toggle);
    }
    object.setPickupHiddenWhenUncollectable = setPickupHiddenWhenUncollectable;
    /**
     * p0 is either 0 or 50 in scripts.
     *
     * Hash: 0x8CFF648FBD7330F1 | Since: 757
     */
    function setPickupAlphaWhenTransparent() {
        Citizen.invokeNative('0x8CFF648FBD7330F1', 0);
    }
    object.setPickupAlphaWhenTransparent = setPickupAlphaWhenTransparent;
    /**
     * No comment provided
     *
     * Hash: 0x39A5FB7EAF150840 | Since: 678
     */
    function setPickupArrowMarker(pickup, toggle) {
        Citizen.invokeNative('0x39A5FB7EAF150840', pickup, toggle);
    }
    object.setPickupArrowMarker = setPickupArrowMarker;
    /**
     * No comment provided
     *
     * Hash: 0x7813E8B8C4AE4799 | Since: 1734
     */
    function setPickupCollectableInVehicle(pickup) {
        Citizen.invokeNative('0x7813E8B8C4AE4799', pickup);
    }
    object.setPickupCollectableInVehicle = setPickupCollectableInVehicle;
    /**
     * p1 is always -0.2 in scripts and p2 is always true in scripts.
     *
     * Hash: 0xA08FE5E49BDC39DD | Since: 323
     */
    function setPickupObjectGlowOffset(pickup) {
        Citizen.invokeNative('0xA08FE5E49BDC39DD', pickup, 0, false);
    }
    object.setPickupObjectGlowOffset = setPickupObjectGlowOffset;
    /**
     * No comment provided
     *
     * Hash: 0x27F248C3FEBFAAD3 | Since: 2372
     */
    function setPickupGlowWhenUncollectable(pickup, toggle) {
        Citizen.invokeNative('0x27F248C3FEBFAAD3', pickup, toggle);
    }
    object.setPickupGlowWhenUncollectable = setPickupGlowWhenUncollectable;
    /**
     * No comment provided
     *
     * Hash: 0x8881C98A31117998 | Since: 678
     */
    function setPickupObjectTransparentWhenUncollectable(pickup, toggle) {
        Citizen.invokeNative('0x8881C98A31117998', pickup, toggle);
    }
    object.setPickupObjectTransparentWhenUncollectable = setPickupObjectTransparentWhenUncollectable;
    /**
     * No comment provided
     *
     * Hash: 0x78015C9B4B3ECC9D | Since: 323
     */
    function setPickupRegenerationTime(pickup, duration) {
        SetPickupRegenerationTime(pickup, duration);
    }
    object.setPickupRegenerationTime = setPickupRegenerationTime;
    /**
     * No comment provided
     *
     * Hash: 0xBFFE53AE7E67FCDC | Since: 1290
     */
    function setPickupTrackDamageEvents(pickup, toggle) {
        Citizen.invokeNative('0xBFFE53AE7E67FCDC', pickup, toggle);
    }
    object.setPickupTrackDamageEvents = setPickupTrackDamageEvents;
    /**
     * No comment provided
     *
     * Hash: 0x858EC9FD25DE04AA | Since: 757
     */
    function setPickupTransparentWhenUncollectable(pickup, toggle) {
        Citizen.invokeNative('0x858EC9FD25DE04AA', pickup, toggle);
    }
    object.setPickupTransparentWhenUncollectable = setPickupTransparentWhenUncollectable;
    /**
     * No comment provided
     *
     * Hash: 0x1C1B69FAE509BA97 | Since: 757
     */
    function setPickupUncollectable(pickup, toggle) {
        SetPickupUncollectable(pickup, toggle);
    }
    object.setPickupUncollectable = setPickupUncollectable;
    /**
     * Disabling/enabling a player from getting pickups. From the scripts:
     *
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);`
     * `OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);`
     *
     * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
     *
     * Hash: 0x616093EC6B139DD9 | Since: 323
     */
    function setPlayerPermittedToCollectPickupsOfType(player, pickupHash, toggle) {
        if (typeof pickupHash === 'string')
            pickupHash = misc.getHashKey(pickupHash);
        ToggleUsePickupsForPlayer(player, pickupHash, toggle);
    }
    object.setPlayerPermittedToCollectPickupsOfType = setPlayerPermittedToCollectPickupsOfType;
    /**
     * No comment provided
     *
     * Hash: 0x46F3ADD1E2D5BAF2 | Since: 877
     */
    function setPortablePickupPersist(pickup, toggle) {
        Citizen.invokeNative('0x46F3ADD1E2D5BAF2', pickup, toggle);
    }
    object.setPortablePickupPersist = setPortablePickupPersist;
    /**
     * No comment provided
     *
     * Hash: 0x63ECF581BC70E363 | Since: 1365
     */
    function setProjectilesShouldExplodeOnContact(entity) {
        Citizen.invokeNative('0x63ECF581BC70E363', entity, undefined);
    }
    object.setProjectilesShouldExplodeOnContact = setProjectilesShouldExplodeOnContact;
    /**
     * No comment provided
     *
     * Hash: 0x5F048334B4A4E774 | Since: 1493
     */
    function setPropLightColor(_object, r, g, b) {
        return SetObjectLightColor(_object, false, r, g, b);
    }
    object.setPropLightColor = setPropLightColor;
    /**
     * No comment provided
     *
     * Hash: 0x31574B1B41268673 | Since: 2189
     */
    function setPropTintIndex() {
        Citizen.invokeNative('0x31574B1B41268673', undefined, undefined);
    }
    object.setPropTintIndex = setPropTintIndex;
    /**
     * Hardcoded to not work in multiplayer.
     *
     *
     * Used to lock/unlock doors to interior areas of the game.
     *
     * (Possible) Door Types:
     *
     * https://pastebin.com/9S2m3qA4
     *
     * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
     * Locked means that the heading is locked.
     * p6 is always 0.
     *
     * 225 door types, model names and coords found in stripclub.c4:
     * https://pastebin.com/gywnbzsH
     *
     * get door info: https://pastebin.com/i14rbekD
     *
     * Hash: 0xF82D8F1926A02C3D | Since: 323
     */
    function setStateOfClosestDoorOfType(_type, pos, locked, heading) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        SetStateOfClosestDoorOfType(_type, pos.x, pos.y, pos.z, locked, heading, false);
    }
    object.setStateOfClosestDoorOfType = setStateOfClosestDoorOfType;
    /**
     * Defines the state of a destructible object.
     * Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
     * State 2 == object just spawned
     * State 4 == Beginning of the animation
     * State 6 == Start animation
     * State 9 == End of the animation
     *
     * Hash: 0x5C29F698D404C5E1 | Since: 323
     */
    function setStateOfRayfireMap(_object, state) {
        SetStateOfRayfireMapObject(_object, state);
    }
    object.setStateOfRayfireMap = setStateOfRayfireMap;
    /**
     * No comment provided
     *
     * Hash: 0x53E0DF1A2A3CF0CA | Since: 323
     */
    function setTeamPickup(_object) {
        SetTeamPickupObject(_object, undefined, false);
    }
    object.setTeamPickup = setTeamPickup;
    /**
     * No comment provided
     *
     * Hash: 0xF12E33034D887F66 | Since: 1103
     */
    function setTintIndexClosestBuildingOfType(pos, radius, modelHash, textureVariation) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return SetTextureVariationOfClosestObjectOfType(pos.x, pos.y, pos.z, radius, modelHash, textureVariation);
    }
    object.setTintIndexClosestBuildingOfType = setTintIndexClosestBuildingOfType;
    /**
     * No comment provided
     *
     * Hash: 0x1A6CBB06E2D0D79D | Since: 1604
     */
    function setWeaponImpactsApplyGreaterForce(_object) {
        Citizen.invokeNative('0x1A6CBB06E2D0D79D', _object, false);
    }
    object.setWeaponImpactsApplyGreaterForce = setWeaponImpactsApplyGreaterForce;
    /**
     * Returns true if the object has finished moving.
     *
     * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
     *
     * See also: https://gtagmodding.com/opcode-database/opcode/034E/
     * Has to be looped until it returns true.
     *
     * Hash: 0x2FDFF4107B8C1147 | Since: 323
     */
    function slide(_object, toX, toY, toZ, speedX, speedY, speedZ, collision) {
        return SlideObject(_object, toX, toY, toZ, speedX, speedY, speedZ, collision);
    }
    object.slide = slide;
    /**
     * enum ePickupRewardType
     * {
     * PICKUP_REWARD_TYPE_AMMO = (1 << 0),
     * PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
     * PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
     * PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
     * PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
     * PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
     * PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
     * PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
     * PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
     * PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
     * PICKUP_REWARD_TYPE_STAT = (1 << 8),
     * PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
     * PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
     * PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
     * };
     *
     * Hash: 0xF92099527DB8E2A7 | Since: 323
     */
    function suppressPickupRewardType(rewardType, suppress) {
        Citizen.invokeNative('0xF92099527DB8E2A7', rewardType, suppress);
    }
    object.suppressPickupRewardType = suppressPickupRewardType;
    /**
     * No comment provided
     *
     * Hash: 0x8DCA505A5C196F05 | Since: 1180
     */
    function suppressPickupSoundForPickup() {
        Citizen.invokeNative('0x8DCA505A5C196F05', undefined, undefined);
    }
    object.suppressPickupSoundForPickup = suppressPickupSoundForPickup;
    /**
     * No comment provided
     *
     * Hash: 0xB252BC036B525623 | Since: 323
     */
    function trackVisibility(_object) {
        TrackObjectVisibility(_object);
    }
    object.trackVisibility = trackVisibility;
    /**
     * Sets the 34th and 35th object flags related to player peds.
     *
     * Hash: 0xB39F03368DB0CAA2 | Since: 3258
     */
    function setTargettableByPlayer(_object, setFlag34, setFlag35) {
        SetObjectTargettableByPlayer(_object, setFlag34, setFlag35);
    }
    object.setTargettableByPlayer = setTargettableByPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x08BD8BA5BDE2C2FA | Since: 3407
     */
    function setPickupGlowDisabled(pickup, toggle) {
        Citizen.invokeNative('0x08BD8BA5BDE2C2FA', pickup, toggle);
    }
    object.setPickupGlowDisabled = setPickupGlowDisabled;
})(object || (object = {}));
export var pad;
(function (pad) {
    /**
     * Disables the specified `rawKeyIndex`, making it not trigger the regular `IS_RAW_KEY_*` natives.
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x8BCF0014 | Since: unknown
     */
    function disableRawKeyThisFrame(rawKeyIndex) {
        return Citizen.invokeNative('0x8BCF0014', rawKeyIndex);
    }
    pad.disableRawKeyThisFrame = disableRawKeyThisFrame;
    /**
     * Gets if the specified `rawKeyIndex` is pressed down, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x36366EC3 | Since: unknown
     */
    function isDisabledRawKeyDown(rawKeyIndex) {
        return Citizen.invokeNative('0x36366EC3', rawKeyIndex);
    }
    pad.isDisabledRawKeyDown = isDisabledRawKeyDown;
    /**
     * Gets if the specified `rawKeyIndex` is pressed, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x1F7CBBAA | Since: unknown
     */
    function isDisabledRawKeyPressed(rawKeyIndex) {
        return Citizen.invokeNative('0x1F7CBBAA', rawKeyIndex);
    }
    pad.isDisabledRawKeyPressed = isDisabledRawKeyPressed;
    /**
     * Gets if the specified `rawKeyIndex` was released, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x72B66C09 | Since: unknown
     */
    function isDisabledRawKeyReleased(rawKeyIndex) {
        return Citizen.invokeNative('0x72B66C09', rawKeyIndex);
    }
    pad.isDisabledRawKeyReleased = isDisabledRawKeyReleased;
    /**
     * Gets if the specified `rawKeyIndex` is up, even if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014).
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x2C033875 | Since: unknown
     */
    function isDisabledRawKeyUp(rawKeyIndex) {
        return Citizen.invokeNative('0x2C033875', rawKeyIndex);
    }
    pad.isDisabledRawKeyUp = isDisabledRawKeyUp;
    /**
     * Gets if the specified `rawKeyIndex` is pressed down on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0xD95A7387 | Since: unknown
     */
    function isRawKeyDown(rawKeyIndex) {
        return Citizen.invokeNative('0xD95A7387', rawKeyIndex);
    }
    pad.isRawKeyDown = isRawKeyDown;
    /**
     * Gets if the specified `rawKeyIndex` is pressed on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x69F7C29E | Since: unknown
     */
    function isRawKeyPressed(rawKeyIndex) {
        return Citizen.invokeNative('0x69F7C29E', rawKeyIndex);
    }
    pad.isRawKeyPressed = isRawKeyPressed;
    /**
     * Gets if the specified `rawKeyIndex` was just released on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0xEAA50861 | Since: unknown
     */
    function isRawKeyReleased(rawKeyIndex) {
        return Citizen.invokeNative('0xEAA50861', rawKeyIndex);
    }
    pad.isRawKeyReleased = isRawKeyReleased;
    /**
     * Gets if the specified `rawKeyIndex` is up  on the keyboard.
     *
     * This will not be triggered if the key is disabled with [DISABLE_RAW_KEY_THIS_FRAME](#\_0x8BCF0014)
     *
     * Virtual key codes can be found [here](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes)
     *
     * Hash: 0x36F4E505 | Since: unknown
     */
    function isRawKeyUp(rawKeyIndex) {
        return Citizen.invokeNative('0x36F4E505', rawKeyIndex);
    }
    pad.isRawKeyUp = isRawKeyUp;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x7F4724035FDCA1DD | Since: 323
     */
    function allowAlternativeScriptControlsLayout(control) {
        DisableInputGroup(control);
    }
    pad.allowAlternativeScriptControlsLayout = allowAlternativeScriptControlsLayout;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xCB0360EFEFB2580D | Since: 323
     */
    function clearControlLightEffect(control) {
        Citizen.invokeNative('0xCB0360EFEFB2580D', control);
    }
    pad.clearControlLightEffect = clearControlLightEffect;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xA0CEFCEA390AAB9B | Since: 323
     */
    function clearControlShakeSuppressedId(control) {
        Citizen.invokeNative('0xA0CEFCEA390AAB9B', control);
    }
    pad.clearControlShakeSuppressedId = clearControlShakeSuppressedId;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x5F4B6931816E599B | Since: 323
     */
    function disableAllControlActions(control) {
        DisableAllControlActions(control);
    }
    pad.disableAllControlActions = disableAllControlActions;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xFE99B66D079CF6BC | Since: 323
     */
    function disableControlAction(control, action, disableRelatedActions) {
        DisableControlAction(control, action, disableRelatedActions);
    }
    pad.disableControlAction = disableControlAction;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xA5FFE9B05F199DE7 | Since: 323
     */
    function enableAllControlActions(control) {
        EnableAllControlActions(control);
    }
    pad.enableAllControlActions = enableAllControlActions;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x351220255D64C155 | Since: 323
     */
    function enableControlAction(control, action, enableRelatedActions) {
        EnableControlAction(control, action, enableRelatedActions);
    }
    pad.enableControlAction = enableControlAction;
    /**
     * Returns profile setting 17.
     *
     * Hash: 0xFC859E2374407556 | Since: 323
     */
    function getAllowMovementWhileZoomed() {
        return GetAllowMovementWhileZoomed();
    }
    pad.getAllowMovementWhileZoomed = getAllowMovementWhileZoomed;
    /**
     * control: unused parameter
     *
     * Hash: 0x80C2FD58D720C801 | Since: 323
     */
    function getControlGroupInstructionalButtonsString(control, controlGroup, allowXOSwap) {
        return GetControlGroupInstructionalButton(control, controlGroup, allowXOSwap);
    }
    pad.getControlGroupInstructionalButtonsString = getControlGroupInstructionalButtonsString;
    /**
     * Returns time in ms since last input.
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xD7D22F5592AED8BA | Since: 323
     */
    function getControlHowLongAgo(control) {
        return GetTimeSinceLastInput(control);
    }
    pad.getControlHowLongAgo = getControlHowLongAgo;
    /**
     * allowXOSwap appears to always be true.
     *
     * EG:
     * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) \/\*INPUT_FRONTEND_ACCEPT (e.g. Enter button)\*\/
     * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) \/\*INPUT_FRONTEND_CANCEL (e.g. ESC button)\*\/
     * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) \/\*INPUT_CONTEXT (e.g. E button)\*\/
     *
     * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
     *
     * control: unused parameter
     *
     * Hash: 0x0499D7B09FC9B407 | Since: 323
     */
    function getControlInstructionalButtonsString(control, action, allowXOSwap) {
        return GetControlInstructionalButton(control, action, allowXOSwap);
    }
    pad.getControlInstructionalButtonsString = getControlInstructionalButtonsString;
    /**
     * Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xEC3C9B8D5327B563 | Since: 323
     */
    function getControlNormal(control, action) {
        return GetControlNormal(control, action);
    }
    pad.getControlNormal = getControlNormal;
    /**
     * Seems to return values between -1 and 1 for controls like gas and steering.
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x5B84D09CEC5209C5 | Since: 323
     */
    function getControlUnboundNormal(control, action) {
        return GetControlUnboundNormal(control, action);
    }
    pad.getControlUnboundNormal = getControlUnboundNormal;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xD95E79E8686D2C27 | Since: 323
     */
    function getControlValue(control, action) {
        return GetControlValue(control, action);
    }
    pad.getControlValue = getControlValue;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x11E65974A982637C | Since: 323
     */
    function getDisabledControlNormal(control, action) {
        return GetDisabledControlNormal(control, action);
    }
    pad.getDisabledControlNormal = getDisabledControlNormal;
    /**
     * The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x4F8A26A890FD62FB | Since: 323
     */
    function getDisabledControlUnboundNormal(control, action) {
        return GetDisabledControlUnboundNormal(control, action);
    }
    pad.getDisabledControlUnboundNormal = getDisabledControlUnboundNormal;
    /**
     * Returns profile setting 225.
     *
     * Hash: 0x0F70731BACCFBB96 | Since: 323
     */
    function getIsUsingAlternateDriveby() {
        return GetIsUsingAlternateDriveby();
    }
    pad.getIsUsingAlternateDriveby = getIsUsingAlternateDriveby;
    /**
     * No comment provided
     *
     * Hash: 0x25AAA32BDC98F2A3 | Since: 1365
     */
    function getIsUsingAlternateHandbrake() {
        return Citizen.invokeNative('0x25AAA32BDC98F2A3');
    }
    pad.getIsUsingAlternateHandbrake = getIsUsingAlternateHandbrake;
    /**
     * Hard-coded to return 3 if using KBM, otherwise same behavior as GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE.
     *
     * Hash: 0xBB41AFBBBC0A0287 | Since: 323
     */
    function getLocalPlayerAimState() {
        return GetLocalPlayerAimState();
    }
    pad.getLocalPlayerAimState = getLocalPlayerAimState;
    /**
     * `Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.`
     *
     * Hash: 0x59B9A7AF4C95133C | Since: 323
     */
    function getLocalPlayerGameAimState() {
        return GetLocalPlayerAimState2();
    }
    pad.getLocalPlayerGameAimState = getLocalPlayerGameAimState;
    /**
     * control: unused parameter
     *
     * Hash: 0x6CD79468A1E595C6 | Since: 323
     */
    function haveControlsChanged(control) {
        return Citizen.invokeNative('0x6CD79468A1E595C6', control);
    }
    pad.haveControlsChanged = haveControlsChanged;
    /**
     * Used in carsteal3 script with schemeName = "Carsteal4_spycar".
     *
     * Hash: 0x3D42B92563939375 | Since: 323
     */
    function initPcScriptedControls(schemeName) {
        return SwitchToInputMappingScheme(schemeName);
    }
    pad.initPcScriptedControls = initPcScriptedControls;
    /**
     * control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
     * For more info, see https://docs.fivem.net/docs/game-references/controls/
     *
     * Hash: 0x1CEA6BFDF248E5D9 | Since: 323
     */
    function isControlEnabled(control, action) {
        return IsControlEnabled(control, action);
    }
    pad.isControlEnabled = isControlEnabled;
    /**
     * Returns whether a control was newly pressed since the last check.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x580417101DDB492F | Since: 323
     */
    function isControlJustPressed(control, action) {
        return IsControlJustPressed(control, action);
    }
    pad.isControlJustPressed = isControlJustPressed;
    /**
     * Returns whether a control was newly released since the last check.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x50F940259D3841E6 | Since: 323
     */
    function isControlJustReleased(control, action) {
        return IsControlJustReleased(control, action);
    }
    pad.isControlJustReleased = isControlJustReleased;
    /**
     * Returns whether a control is currently pressed.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xF3A21BCD95725A4A | Since: 323
     */
    function isControlPressed(control, action) {
        return IsControlPressed(control, action);
    }
    pad.isControlPressed = isControlPressed;
    /**
     * Returns whether a control is currently _not_ pressed.
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x648EE3E7F38877DD | Since: 323
     */
    function isControlReleased(control, action) {
        return IsControlReleased(control, action);
    }
    pad.isControlReleased = isControlReleased;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x91AEF906BCA88877 | Since: 323
     */
    function isDisabledControlJustPressed(control, action) {
        return IsDisabledControlJustPressed(control, action);
    }
    pad.isDisabledControlJustPressed = isDisabledControlJustPressed;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x305C8DCD79DA8B0F | Since: 323
     */
    function isDisabledControlJustReleased(control, action) {
        return IsDisabledControlJustReleased(control, action);
    }
    pad.isDisabledControlJustReleased = isDisabledControlJustReleased;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xE2587F8CBBD87B1D | Since: 323
     */
    function isDisabledControlPressed(control, action) {
        return IsDisabledControlPressed(control, action);
    }
    pad.isDisabledControlPressed = isDisabledControlPressed;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xFB6C4072E9A32E92 | Since: 757
     */
    function isDisabledControlReleased(control, action) {
        return IsDisabledControlReleased(control, action);
    }
    pad.isDisabledControlReleased = isDisabledControlReleased;
    /**
     * No comment provided
     *
     * Hash: 0x77B612531280010D | Since: 323
     */
    function isLookInverted() {
        return IsLookInverted();
    }
    pad.isLookInverted = isLookInverted;
    /**
     * Used with IS_LOOK_INVERTED() and negates its affect.
     *
     * --
     *
     * Not sure how the person above got that description, but here's an actual example:
     *
     * `if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {`
     * if (a_5) {
     * `if (PAD::IS_LOOK_INVERTED()) {`
     * a_3 *= -1;
     * }
     * `if (PAD::IS_MOUSE_LOOK_INVERTED()) {`
     * a_3 *= -1;
     * }
     * }
     * }
     *
     * Hash: 0xE1615EC03B3BB4FD | Since: 323
     */
    function isMouseLookInverted() {
        return Citizen.invokeNative('0xE1615EC03B3BB4FD');
    }
    pad.isMouseLookInverted = isMouseLookInverted;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x13337B38DB572509 | Since: 323
     */
    function isUsingCursor(control) {
        return IsUsingKeyboard2(control);
    }
    pad.isUsingCursor = isUsingCursor;
    /**
     * control: unused parameter
     *
     * Hash: 0xA571D46727E2B718 | Since: 323
     */
    function isUsingKeyboardAndMouse(control) {
        return IsUsingKeyboard(control);
    }
    pad.isUsingKeyboardAndMouse = isUsingKeyboardAndMouse;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hardcoded to return false.
     *
     * Hash: 0x23F09EADC01449D6 | Since: 323
     */
    function isUsingRemotePlay(control) {
        return Citizen.invokeNative('0x23F09EADC01449D6', control);
    }
    pad.isUsingRemotePlay = isUsingRemotePlay;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x8290252FFF36ACB5 | Since: 323
     */
    function setControlLightEffectColor(control, red, green, blue) {
        SetControlLightEffectColor(control, red, green, blue);
    }
    pad.setControlLightEffectColor = setControlLightEffectColor;
    /**
     * control: see IS_CONTROL_ENABLED
     * duration in milliseconds
     * frequency should range from about 10 (slow vibration) to 255 (very fast)
     *
     * example:
     * SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);
     *
     * Hash: 0x48B3886C1358D0D5 | Since: 323
     */
    function setControlShake(control, duration, frequency) {
        SetPadShake(control, duration, frequency);
    }
    pad.setControlShake = setControlShake;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xF239400E16C23E08 | Since: 323
     */
    function setControlShakeSuppressedId(control, uniqueId) {
        Citizen.invokeNative('0xF239400E16C23E08', control, uniqueId);
    }
    pad.setControlShakeSuppressedId = setControlShakeSuppressedId;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x14D29BB12D47F68C | Since: 323
     */
    function setControlTriggerShake(control, leftDuration, leftFrequency, rightDuration, rightFrequency) {
        Citizen.invokeNative('0x14D29BB12D47F68C', control, leftDuration, leftFrequency, rightDuration, rightFrequency);
    }
    pad.setControlTriggerShake = setControlTriggerShake;
    /**
     * This is for simulating player input.
     * value is a float value from 0 - 1
     *
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xE8A25867FBA3B05E | Since: 323
     */
    function setControlValueNextFrame(control, action, value) {
        return SetControlNormal(control, action, value);
    }
    pad.setControlValueNextFrame = setControlValueNextFrame;
    /**
     * No comment provided
     *
     * Hash: 0xFC695459D4D0E219 | Since: 323
     */
    function setCursorPosition(x, y) {
        return SetCursorLocation(x, y);
    }
    pad.setCursorPosition = setCursorPosition;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0xEDE476E5EE29EDB1 | Since: 323
     */
    function setInputExclusive(control, action) {
        SetInputExclusive(control, action);
    }
    pad.setInputExclusive = setInputExclusive;
    /**
     * No comment provided
     *
     * Hash: 0x798FDEB5B1575088 | Since: 323
     */
    function setPlayerShakesWhenControllerDisabled(toggle) {
        SetPlayerpadShakesWhenControllerDisabled(toggle);
    }
    pad.setPlayerShakesWhenControllerDisabled = setPlayerShakesWhenControllerDisabled;
    /**
     * No comment provided
     *
     * Hash: 0x5B73C77D9EB66E24 | Since: 323
     */
    function setUseAdjustedMouseCoords(toggle) {
        Citizen.invokeNative('0x5B73C77D9EB66E24', toggle);
    }
    pad.setUseAdjustedMouseCoords = setUseAdjustedMouseCoords;
    /**
     * No comment provided
     *
     * Hash: 0x643ED62D5EA3BEBD | Since: 323
     */
    function shutdownPcScriptedControls() {
        ResetInputMappingScheme();
    }
    pad.shutdownPcScriptedControls = shutdownPcScriptedControls;
    /**
     * control: see IS_CONTROL_ENABLED
     *
     * Hash: 0x38C16A305E8CDC8D | Since: 323
     */
    function stopControlShake(control) {
        StopPadShake(control);
    }
    pad.stopControlShake = stopControlShake;
    /**
     * Same as INIT_PC_SCRIPTED_CONTROLS
     *
     * Hash: 0x4683149ED1DDE7A1 | Since: 323
     */
    function switchPcScriptedControls(schemeName) {
        return SwitchToInputMappingScheme2(schemeName);
    }
    pad.switchPcScriptedControls = switchPcScriptedControls;
    /**
     * Always returns zero.
     *
     * Hash: 0x18E474F40EF05F10 | Since: 3570
     */
    function getGameType() {
        return Citizen.invokeNative('0x18E474F40EF05F10');
    }
    pad.getGameType = getGameType;
    /**
     * No comment provided
     *
     * Hash: 0xE9CB8C56E90D5079 | Since: 3407
     */
    function isControlHeldDown(control, action, duration) {
        return Citizen.invokeNative('0xE9CB8C56E90D5079', control, action, duration);
    }
    pad.isControlHeldDown = isControlHeldDown;
})(pad || (pad = {}));
export var resource;
(function (resource_1) {
    /**
     * A getter for [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938), but for a specified resource.
     *
     * Hash: 0x3CC98B25 | Since: unknown
     */
    function getExternalKvpFloat(resource, key) {
        return Citizen.invokeNative('0x3CC98B25', resource, key);
    }
    resource_1.getExternalKvpFloat = getExternalKvpFloat;
    /**
     * A getter for [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8), but for a specified resource.
     *
     * Hash: 0x12B8D689 | Since: unknown
     */
    function getExternalKvpInt(resource, key) {
        return Citizen.invokeNative('0x12B8D689', resource, key);
    }
    resource_1.getExternalKvpInt = getExternalKvpInt;
    /**
     * A getter for [SET_RESOURCE_KVP](#\_0x21C7A35B), but for a specified resource.
     *
     * Hash: 0x9080363A | Since: unknown
     */
    function getExternalKvpString(resource, key) {
        return Citizen.invokeNative('0x9080363A', resource, key);
    }
    resource_1.getExternalKvpString = getExternalKvpString;
    /**
     * Equivalent of [START_FIND_KVP](#\_0xDD379006), but for another resource than the current one.
     *
     * Hash: 0x8F2EECC3 | Since: unknown
     */
    function startFindExternalKvp(resourceName, prefix) {
        return Citizen.invokeNative('0x8F2EECC3', resourceName, prefix);
    }
    resource_1.startFindExternalKvp = startFindExternalKvp;
    /**
     * Nonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations.
     *
     * This native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem.
     *
     * Hash: 0xE27C97A0 | Since: unknown
     */
    function flushKvp() {
        Citizen.invokeNative('0xE27C97A0');
    }
    resource_1.flushKvp = flushKvp;
    /**
     * Returns the physical on-disk path of the specified resource.
     *
     * Hash: 0x61DCF017 | Since: unknown
     */
    function getPath(resourceName) {
        return Citizen.invokeNative('0x61DCF017', resourceName);
    }
    resource_1.getPath = getPath;
    /**
     * **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.
     *
     * Registers a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.
     *
     * Hash: 0x9862B266 | Since: unknown
     */
    function registerAsset(resourceName, fileName) {
        return Citizen.invokeNative('0x9862B266', resourceName, fileName);
    }
    resource_1.registerAsset = registerAsset;
    /**
     * Registers a build task factory for resources.
     * The function should return an object (msgpack map) with the following fields:
     *
     * ```
     * {
     * // returns whether the specific resource should be built
     * shouldBuild = func(resourceName: string): bool,
     *
     * // asynchronously start building the specific resource.
     * // call cb when completed
     * build = func(resourceName: string, cb: func(success: bool, status: string): void): void
     * }
     * ```
     *
     * Hash: 0x285B43CA | Since: unknown
     */
    function registerBuildTaskFactory(factoryId, factoryFn) {
        Citizen.invokeNative('0x285B43CA', factoryId, factoryFn);
    }
    resource_1.registerBuildTaskFactory = registerBuildTaskFactory;
    /**
     * Writes the specified data to a file in the specified resource.
     * Using a length of `-1` will automatically detect the length assuming the data is a C string.
     *
     * Hash: 0xA09E7E7B | Since: unknown
     */
    function saveFile(resourceName, fileName, data, dataLength) {
        return Citizen.invokeNative('0xA09E7E7B', resourceName, fileName, data, dataLength);
    }
    resource_1.saveFile = saveFile;
    /**
     * Scans the resources in the specified resource root. This function is only available in the 'monitor mode' process and is
     * not available for user resources.
     *
     * Hash: 0x636F097F | Since: unknown
     */
    function scanRoot(rootPath, callback) {
        Citizen.invokeNative('0x636F097F', rootPath, callback);
    }
    resource_1.scanRoot = scanRoot;
    /**
     * Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.
     *
     * Hash: 0xB88A73AD | Since: unknown
     */
    function scheduleTick(resourceName) {
        Citizen.invokeNative('0xB88A73AD', resourceName);
    }
    resource_1.scheduleTick = scheduleTick;
    /**
     * No comment provided
     *
     * Hash: 0x29B440DC | Since: unknown
     */
    function start(resourceName) {
        return Citizen.invokeNative('0x29B440DC', resourceName);
    }
    resource_1.start = start;
    /**
     * No comment provided
     *
     * Hash: 0x21783161 | Since: unknown
     */
    function stop(resourceName) {
        return Citizen.invokeNative('0x21783161', resourceName);
    }
    resource_1.stop = stop;
    /**
     * No comment provided
     *
     * Hash: 0x7389B5DF | Since: unknown
     */
    function deleteKvp(key) {
        Citizen.invokeNative('0x7389B5DF', key);
    }
    resource_1.deleteKvp = deleteKvp;
    /**
     * Nonsynchronous [DELETE_RESOURCE_KVP](#\_0x7389B5DF) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0x4152C90 | Since: unknown
     */
    function deleteKvpNoSync(key) {
        Citizen.invokeNative('0x4152C90', key);
    }
    resource_1.deleteKvpNoSync = deleteKvpNoSync;
    /**
     * No comment provided
     *
     * Hash: 0xB3210203 | Since: unknown
     */
    function endFindKvp(handle) {
        Citizen.invokeNative('0xB3210203', handle);
    }
    resource_1.endFindKvp = endFindKvp;
    /**
     * No comment provided
     *
     * Hash: 0xBD7BEBC5 | Since: unknown
     */
    function findKvp(handle) {
        return Citizen.invokeNative('0xBD7BEBC5', handle);
    }
    resource_1.findKvp = findKvp;
    /**
     * Returns the name of the currently executing resource.
     *
     * Hash: 0xE5E9EBBB | Since: unknown
     */
    function getCurrentName() {
        return Citizen.invokeNative('0xE5E9EBBB');
    }
    resource_1.getCurrentName = getCurrentName;
    /**
     * No comment provided
     *
     * Hash: 0x4D52FE5B | Since: unknown
     */
    function getInvoking() {
        return Citizen.invokeNative('0x4D52FE5B');
    }
    resource_1.getInvoking = getInvoking;
    /**
     * No comment provided
     *
     * Hash: 0x863F27B | Since: unknown
     */
    function getNums() {
        return Citizen.invokeNative('0x863F27B');
    }
    resource_1.getNums = getNums;
    /**
     * Gets the amount of metadata values with the specified key existing in the specified resource's manifest.
     * See also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)
     *
     * Hash: 0x776E864 | Since: unknown
     */
    function getNumMetadata(resourceName, metadataKey) {
        return Citizen.invokeNative('0x776E864', resourceName, metadataKey);
    }
    resource_1.getNumMetadata = getNumMetadata;
    /**
     * No comment provided
     *
     * Hash: 0x387246B7 | Since: unknown
     */
    function getByFindIndex(findIndex) {
        return Citizen.invokeNative('0x387246B7', findIndex);
    }
    resource_1.getByFindIndex = getByFindIndex;
    /**
     * Returns all commands registered by the specified resource.
     * The data returned adheres to the following layout:
     *
     * ```
     * [
     * {
     * "name": "cmdlist",
     * "resource": "example_resource",
     * "arity" = -1,
     * },
     * {
     * "name": "command1"
     * "resource": "example_resource2",
     * "arity" = -1,
     * }
     * ]
     * ```
     *
     * Hash: 0x97628584 | Since: unknown
     */
    function getCommands(resource) {
        return Citizen.invokeNative('0x97628584', resource);
    }
    resource_1.getCommands = getCommands;
    /**
     * A getter for [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938).
     *
     * Hash: 0x35BDCEEA | Since: unknown
     */
    function getKvpFloat(key) {
        return Citizen.invokeNative('0x35BDCEEA', key);
    }
    resource_1.getKvpFloat = getKvpFloat;
    /**
     * A getter for [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8).
     *
     * Hash: 0x557B586A | Since: unknown
     */
    function getKvpInt(key) {
        return Citizen.invokeNative('0x557B586A', key);
    }
    resource_1.getKvpInt = getKvpInt;
    /**
     * A getter for [SET_RESOURCE_KVP](#\_0x21C7A35B).
     *
     * Hash: 0x5240DA5A | Since: unknown
     */
    function getKvpString(key) {
        return Citizen.invokeNative('0x5240DA5A', key);
    }
    resource_1.getKvpString = getKvpString;
    /**
     * Gets the metadata value at a specified key/index from a resource's manifest.
     * See also: [Resource manifest](https://docs.fivem.net/docs/scripting-reference/resource-manifest/resource-manifest/)
     *
     * Hash: 0x964BAB1D | Since: unknown
     */
    function getMetadata(resourceName, metadataKey, index) {
        return Citizen.invokeNative('0x964BAB1D', resourceName, metadataKey, index);
    }
    resource_1.getMetadata = getMetadata;
    /**
     * Returns the current state of the specified resource.
     *
     * Hash: 0x4039B485 | Since: unknown
     */
    function getState(resourceName) {
        return Citizen.invokeNative('0x4039B485', resourceName);
    }
    resource_1.getState = getState;
    /**
     * Reads the contents of a text file in a specified resource.
     * If executed on the client, this file has to be included in `files` in the resource manifest.
     * Example: `local data = LoadResourceFile("devtools", "data.json")`
     *
     * Hash: 0x76A9EE1F | Since: unknown
     */
    function loadFile(resourceName, fileName) {
        return Citizen.invokeNative('0x76A9EE1F', resourceName, fileName);
    }
    resource_1.loadFile = loadFile;
    /**
     * An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.
     *
     * Hash: 0xD233A168 | Since: unknown
     */
    function registerAsEventHandler(eventName) {
        Citizen.invokeNative('0xD233A168', eventName);
    }
    resource_1.registerAsEventHandler = registerAsEventHandler;
    /**
     * A setter for [GET_RESOURCE_KVP_STRING](#\_0x5240DA5A).
     *
     * Hash: 0x21C7A35B | Since: unknown
     */
    function setKvp(key, value) {
        Citizen.invokeNative('0x21C7A35B', key, value);
    }
    resource_1.setKvp = setKvp;
    /**
     * A setter for [GET_RESOURCE_KVP_FLOAT](#\_0x35BDCEEA).
     *
     * Hash: 0x9ADD2938 | Since: unknown
     */
    function setKvpFloat(key, value) {
        Citizen.invokeNative('0x9ADD2938', key, value);
    }
    resource_1.setKvpFloat = setKvpFloat;
    /**
     * Nonsynchronous [SET_RESOURCE_KVP_FLOAT](#\_0x9ADD2938) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0x3517BFBE | Since: unknown
     */
    function setKvpFloatNoSync(key, value) {
        Citizen.invokeNative('0x3517BFBE', key, value);
    }
    resource_1.setKvpFloatNoSync = setKvpFloatNoSync;
    /**
     * A setter for [GET_RESOURCE_KVP_INT](#\_0x557B586A).
     *
     * Hash: 0x6A2B1E8 | Since: unknown
     */
    function setKvpInt(key, value) {
        Citizen.invokeNative('0x6A2B1E8', key, value);
    }
    resource_1.setKvpInt = setKvpInt;
    /**
     * Nonsynchronous [SET_RESOURCE_KVP_INT](#\_0x6A2B1E8) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0x26AEB707 | Since: unknown
     */
    function setKvpIntNoSync(key, value) {
        Citizen.invokeNative('0x26AEB707', key, value);
    }
    resource_1.setKvpIntNoSync = setKvpIntNoSync;
    /**
     * Nonsynchronous [SET_RESOURCE_KVP](#\_0x21C7A35B) operation; see [FLUSH_RESOURCE_KVP](#\_0x5240DA5A).
     *
     * Hash: 0xCF9A2FF | Since: unknown
     */
    function setKvpNoSync(key, value) {
        Citizen.invokeNative('0xCF9A2FF', key, value);
    }
    resource_1.setKvpNoSync = setKvpNoSync;
    /**
     * No comment provided
     *
     * Hash: 0xDD379006 | Since: unknown
     */
    function startFindKvp(prefix) {
        return Citizen.invokeNative('0xDD379006', prefix);
    }
    resource_1.startFindKvp = startFindKvp;
})(resource || (resource = {}));
export var social;
(function (social) {
    /**
     * Sets the player's rich presence detail state for social platform providers to a specified string.
     *
     * Hash: 0x7BDCBD45 | Since: unknown
     */
    function setRichPresence(presenceState) {
        Citizen.invokeNative('0x7BDCBD45', presenceState);
    }
    social.setRichPresence = setRichPresence;
})(social || (social = {}));
export var task;
(function (task_1) {
    /**
     * Clear a ped's tasks. Stop animations and other tasks created by scripts.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS](?\_0xE1EF3C1216AFF2CD).</strong>
     *
     * Hash: 0xDE3316AB | Since: unknown
     */
    function clearPeds(ped) {
        Citizen.invokeNative('0xDE3316AB', ped);
    }
    task_1.clearPeds = clearPeds;
    /**
     * Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [CLEAR_PED_TASKS_IMMEDIATELY](?\_0xAAA34F8A7CB32098).</strong>
     *
     * Hash: 0xBC045625 | Since: unknown
     */
    function clearPedsImmediately(ped) {
        Citizen.invokeNative('0xBC045625', ped);
    }
    task_1.clearPedsImmediately = clearPedsImmediately;
    /**
     * ```
     * Makes the specified ped attack the target ped.
     * p2 should be 0
     * p3 should be 16
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_COMBAT_PED](?\_0xF166E48407BAC484).</strong>
     *
     * Hash: 0xCB0D8932 | Since: unknown
     */
    function combatPed(ped, targetPed) {
        Citizen.invokeNative('0xCB0D8932', ped, targetPed, 0, 0);
    }
    task_1.combatPed = combatPed;
    /**
     * ```
     * Example:
     * `TASK::TASK_DRIVE_BY(l_467[1\/\*22\*\/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});`
     * Needs working example. Doesn't seem to do anything.
     * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
     * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
     * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_DRIVE_BY](?\_0x2F8AF0E82773A171).</strong>
     *
     * Hash: 0x2B84D1C4 | Since: unknown
     */
    function driveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        Citizen.invokeNative('0x2B84D1C4', driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, false, firingPattern);
    }
    task_1.driveBy = driveBy;
    /**
     * ```
     * speed 1.0 = walk, 2.0 = run
     * p5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle
     * p6 is always 0
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_ENTER_VEHICLE](?\_0xC20E50AA46D09CA8).</strong>
     *
     * Hash: 0xB8689B4E | Since: unknown
     */
    function enterVehicle(ped, vehicle, timeout, seatIndex, speed, flag) {
        Citizen.invokeNative('0xB8689B4E', ped, vehicle, timeout, seatIndex, speed, flag, undefined);
    }
    task_1.enterVehicle = enterVehicle;
    /**
     * TASK_EVERYONE_LEAVE_VEHICLE
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_EVERYONE_LEAVE_VEHICLE](?\_0x7F93691AB4B92272).</strong>
     *
     * Hash: 0xC1971F30 | Since: unknown
     */
    function everyoneLeaveVehicle(vehicle) {
        Citizen.invokeNative('0xC1971F30', vehicle);
    }
    task_1.everyoneLeaveVehicle = everyoneLeaveVehicle;
    /**
     * TASK_GO_STRAIGHT_TO_COORD
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_GO_STRAIGHT_TO_COORD](?\_0xD76B57B44F1E6F8B).</strong>
     *
     * Hash: 0x80A9E7A7 | Since: unknown
     */
    function goStraightToCoord(ped, pos, speed, timeout, targetHeading, distanceToSlide) {
        Citizen.invokeNative('0x80A9E7A7', ped, pos.x, pos.y, pos.z, speed, timeout, targetHeading, distanceToSlide);
    }
    task_1.goStraightToCoord = goStraightToCoord;
    /**
     * Tells a ped to go to a coord by any means.
     *
     * ```cpp
     * enum eDrivingMode {
     * DF_StopForCars = 1,
     * DF_StopForPeds = 2,
     * DF_SwerveAroundAllCars = 4,
     * DF_SteerAroundStationaryCars = 8,
     * DF_SteerAroundPeds = 16,
     * DF_SteerAroundObjects = 32,
     * DF_DontSteerAroundPlayerPed = 64,
     * DF_StopAtLights = 128,
     * DF_GoOffRoadWhenAvoiding = 256,
     * DF_DriveIntoOncomingTraffic = 512,
     * DF_DriveInReverse = 1024,
     * // If pathfinding fails, cruise randomly instead of going on a straight line
     * DF_UseWanderFallbackInsteadOfStraightLine = 2048,
     * DF_AvoidRestrictedAreas = 4096,
     * // These only work on MISSION_CRUISE
     * DF_PreventBackgroundPathfinding = 8192,
     * DF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384,
     * DF_UseShortCutLinks =  262144,
     * DF_ChangeLanesAroundObstructions = 524288,
     * // cruise tasks ignore this anyway--only used for goto's
     * DF_UseSwitchedOffNodes =  2097152,
     * // if you're going to be primarily driving off road
     * DF_PreferNavmeshRoute =  4194304,
     * // Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly
     * DF_PlaneTaxiMode =  8388608,
     * DF_ForceStraightLine = 16777216,
     * DF_UseStringPullingAtJunctions = 33554432,
     * DF_AvoidHighways = 536870912,
     * DF_ForceJoinInRoadDirection = 1073741824,
     * // Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions
     * DRIVINGMODE_STOPFORCARS = 786603, // DF_StopForCars|DF_StopForPeds|DF_SteerAroundObjects|DF_SteerAroundStationaryCars|DF_StopAtLights|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,		// Obey lights too
     * // Like the above, but doesn't steer around anything in its way - will only wait instead.
     * DRIVINGMODE_STOPFORCARS_STRICT = 262275, // DF_StopForCars|DF_StopForPeds|DF_StopAtLights|DF_UseShortCutLinks, // Doesn't deviate an inch.
     * // Default "alerted" driving mode. drives around everything, doesn't obey lights
     * DRIVINGMODE_AVOIDCARS = 786469, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars,
     * // Very erratic driving. difference between this and AvoidCars is that it doesn't use the brakes at ALL to help with steering
     * DRIVINGMODE_AVOIDCARS_RECKLESS = 786468, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,
     * // Smashes through everything
     * DRIVINGMODE_PLOUGHTHROUGH = 262144, // DF_UseShortCutLinks
     * // Drives normally except for the fact that it ignores lights
     * DRIVINGMODE_STOPFORCARS_IGNORELIGHTS = 786475, // DF_StopForCars|DF_SteerAroundStationaryCars|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions
     * // Try to swerve around everything, but stop for lights if necessary
     * DRIVINGMODE_AVOIDCARS_OBEYLIGHTS = 786597, // DF_SwerveAroundAllCars|DF_StopAtLights|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars
     * // Swerve around cars, be careful around peds, and stop for lights
     * DRIVINGMODE_AVOIDCARS_STOPFORPEDS_OBEYLIGHTS = 786599 // DF_SwerveAroundAllCars|DF_StopAtLights|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars
     * };
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_GO_TO_COORD_ANY_MEANS](?\_0x5BC448CB78FA3E88).</strong>
     *
     * Hash: 0xF91DF93B | Since: unknown
     */
    function goToCoordAnyMeans(ped, pos, fMoveBlendRatio, vehicle, bUseLongRangeVehiclePathing, drivingFlags, fMaxRangeToShootTargets) {
        Citizen.invokeNative('0xF91DF93B', ped, pos.x, pos.y, pos.z, fMoveBlendRatio, vehicle, bUseLongRangeVehiclePathing, drivingFlags, fMaxRangeToShootTargets);
    }
    task_1.goToCoordAnyMeans = goToCoordAnyMeans;
    /**
     * ```
     * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
     * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
     * `Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)`
     * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_GO_TO_ENTITY](?\_0x6A071245EB0D1882).</strong>
     *
     * Hash: 0x374827C2 | Since: unknown
     */
    function goToEntity(entity, target, duration, distance, speed) {
        Citizen.invokeNative('0x374827C2', entity, target, duration, distance, speed, 0, 0);
    }
    task_1.goToEntity = goToEntity;
    /**
     * ```
     * In the scripts, p3 was always -1.
     * p3 seems to be duration or timeout of turn animation.
     * Also facingPed can be 0 or -1 so ped will just raise hands up.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_HANDS_UP](?\_0xF2EAB31979A7F910).</strong>
     *
     * Hash: 0x8DCC19C5 | Since: unknown
     */
    function handsUp(ped, duration, facingPed) {
        Citizen.invokeNative('0x8DCC19C5', ped, duration, facingPed, 0, false);
    }
    task_1.handsUp = handsUp;
    /**
     * Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\_0xD3DBCE61A490BE02)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_LEAVE_ANY_VEHICLE](?\_0x504D54DF3F6F2247).</strong>
     *
     * Hash: 0xDBDD79FA | Since: unknown
     */
    function leaveAnyVehicle(ped, flags) {
        Citizen.invokeNative('0xDBDD79FA', ped, 0, flags);
    }
    task_1.leaveAnyVehicle = leaveAnyVehicle;
    /**
     * ```
     * Flags from decompiled scripts:
     * 0 = normal exit and closes door.
     * 1 = normal exit and closes door.
     * 16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)
     * 64 = normal exit and closes door, maybe a bit slower animation than 0.
     * 256 = normal exit but does not close the door.
     * 4160 = ped is throwing himself out, even when the vehicle is still.
     * 262144 = ped moves to passenger seat first, then exits normally
     * Others to be tried out: 320, 512, 131072.
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_LEAVE_VEHICLE](?\_0xD3DBCE61A490BE02).</strong>
     *
     * Hash: 0x7B1141C6 | Since: unknown
     */
    function leaveVehicle(ped, vehicle, flags) {
        Citizen.invokeNative('0x7B1141C6', ped, vehicle, flags);
    }
    task_1.leaveVehicle = leaveVehicle;
    /**
     * [Animations list](https://alexguirre.github.io/animations-list/)
     *
     * ```cpp
     * enum eScriptedAnimFlags
     * {
     * AF_LOOPING = 1,
     * AF_HOLD_LAST_FRAME = 2,
     * AF_REPOSITION_WHEN_FINISHED = 4,
     * AF_NOT_INTERRUPTABLE = 8,
     * AF_UPPERBODY = 16,
     * AF_SECONDARY = 32,
     * AF_REORIENT_WHEN_FINISHED = 64,
     * AF_ABORT_ON_PED_MOVEMENT = 128,
     * AF_ADDITIVE = 256,
     * AF_TURN_OFF_COLLISION = 512,
     * AF_OVERRIDE_PHYSICS = 1024,
     * AF_IGNORE_GRAVITY = 2048,
     * AF_EXTRACT_INITIAL_OFFSET = 4096,
     * AF_EXIT_AFTER_INTERRUPTED = 8192,
     * AF_TAG_SYNC_IN = 16384,
     * AF_TAG_SYNC_OUT = 32768,
     * AF_TAG_SYNC_CONTINUOUS = 65536,
     * AF_FORCE_START = 131072,
     * AF_USE_KINEMATIC_PHYSICS = 262144,
     * AF_USE_MOVER_EXTRACTION = 524288,
     * AF_HIDE_WEAPON = 1048576,
     * AF_ENDS_IN_DEAD_POSE = 2097152,
     * AF_ACTIVATE_RAGDOLL_ON_COLLISION = 4194304,
     * AF_DONT_EXIT_ON_DEATH = 8388608,
     * AF_ABORT_ON_WEAPON_DAMAGE = 16777216,
     * AF_DISABLE_FORCED_PHYSICS_UPDATE = 33554432,
     * AF_PROCESS_ATTACHMENTS_ON_START = 67108864,
     * AF_EXPAND_PED_CAPSULE_FROM_SKELETON = 134217728,
     * AF_USE_ALTERNATIVE_FP_ANIM = 268435456,
     * AF_BLENDOUT_WRT_LAST_FRAME = 536870912,
     * AF_USE_FULL_BLENDING = 1073741824
     * }
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM](?\_0xEA47FE3719165B94).</strong>
     *
     * Hash: 0x5AB552C6 | Since: unknown
     */
    function playAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
        Citizen.invokeNative('0x5AB552C6', ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
    }
    task_1.playAnim = playAnim;
    /**
     * Similar in functionality to [`TASK_PLAY_ANIM`](#\_0xEA47FE3719165B94), except the position and rotation parameters let you specify the initial position and rotation of the task. The ped is teleported to the position specified.
     * [Animations list](https://alexguirre.github.io/animations-list/)
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_PLAY_ANIM_ADVANCED](?\_0x83CDB10EA29B370B).</strong>
     *
     * Hash: 0x3DDEB0E6 | Since: unknown
     */
    function playAnimAdvanced(ped, animDictionary, animationName, pos, rot, blendInSpeed, blendOutSpeed, duration, flag, animTime) {
        Citizen.invokeNative('0x3DDEB0E6', ped, animDictionary, animationName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, blendInSpeed, blendOutSpeed, duration, flag, animTime, undefined, undefined);
    }
    task_1.playAnimAdvanced = playAnimAdvanced;
    /**
     * TASK_REACT_AND_FLEE_PED
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_REACT_AND_FLEE_PED](?\_0x72C896464915D1B1).</strong>
     *
     * Hash: 0x8A632BD8 | Since: unknown
     */
    function reactAndFleePed(ped, fleeTarget) {
        Citizen.invokeNative('0x8A632BD8', ped, fleeTarget);
    }
    task_1.reactAndFleePed = reactAndFleePed;
    /**
     * ```
     * Firing Pattern Hash Information: https://pastebin.com/Px036isB
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_COORD](?\_0x46A6CC01E0826106).</strong>
     *
     * Hash: 0x601C22E3 | Since: unknown
     */
    function shootAtCoord(ped, pos, duration, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        Citizen.invokeNative('0x601C22E3', ped, pos.x, pos.y, pos.z, duration, firingPattern);
    }
    task_1.shootAtCoord = shootAtCoord;
    /**
     * ```
     * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
     * Entity aimedentity;
     * `Player player = PLAYER::PLAYER_ID();`
     * `PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);`
     * //bg is an array of peds
     * `TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));`
     * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
     * Firing Pattern Hash Information: https://pastebin.com/Px036isB
     * ```
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_SHOOT_AT_ENTITY](?\_0x08DA95E8298AE772).</strong>
     *
     * Hash: 0xAC0631C9 | Since: unknown
     */
    function shootAtEntity(entity, target, duration, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        Citizen.invokeNative('0xAC0631C9', entity, target, duration, firingPattern);
    }
    task_1.shootAtEntity = shootAtEntity;
    /**
     * ```
     * NativeDB Introduced: v323
     * ```
     *
     * Warp a ped into a vehicle.
     * **Note**: It's better to use [`TASK_ENTER_VEHICLE`](#\_0xC20E50AA46D09CA8) with the flag "warp" flag instead of this native.
     *
     * <strong>This is the server-side RPC native equivalent of the client native [TASK_WARP_PED_INTO_VEHICLE](?\_0x9A7D091411C5F684).</strong>
     *
     * Hash: 0x65D4A35D | Since: unknown
     */
    function warpPedIntoVehicle(ped, vehicle, seatIndex) {
        Citizen.invokeNative('0x65D4A35D', ped, vehicle, seatIndex);
    }
    task_1.warpPedIntoVehicle = warpPedIntoVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x45C597097DD7CB81 | Since: 323
     */
    function addCoverBlockingArea(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer) {
        AddCoverBlockingArea(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
    }
    task_1.addCoverBlockingArea = addCoverBlockingArea;
    /**
     * No comment provided
     *
     * Hash: 0xD5C12A75C7B9497F | Since: 323
     */
    function addCoverPoint(pos, direction, usage, height, arc, isPriority) {
        return AddCoverPoint(pos.x, pos.y, pos.z, direction, usage, height, arc, isPriority);
    }
    task_1.addCoverPoint = addCoverPoint;
    /**
     * No comment provided
     *
     * Hash: 0x23083260DEC3A551 | Since: 323
     */
    function addPatrolRouteLink(nodeId1, nodeId2) {
        AddPatrolRouteLink(nodeId1, nodeId2);
    }
    task_1.addPatrolRouteLink = addPatrolRouteLink;
    /**
     * Example:
     * `TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);`
     *
     * p0 is between 0 and 4 in the scripts.
     *
     * p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
     *
     * p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
     * Examples:
     * `TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7\/\*3\*\/], 0.0, 0.0, 0.0, 0);`
     *
     * `TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17\/\*44\*\/]._f3, l_B0[17\/\*44\*\/]._f3, 2000);`
     *
     * p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
     *
     * `p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).`
     *
     * Hash: 0x8EDF950167586B7C | Since: 323
     */
    function addPatrolRouteNode(nodeId, nodeType, pos, headingX, headingY, headingZ, duration) {
        AddPatrolRouteNode(nodeId, nodeType, pos.x, pos.y, pos.z, headingX, headingY, headingZ, duration);
    }
    task_1.addPatrolRouteNode = addPatrolRouteNode;
    /**
     * No comment provided
     *
     * Hash: 0x28B7B9BFDAF274AA | Since: 2545
     */
    function addScriptedCoverArea(pos, radius) {
        Citizen.invokeNative('0x28B7B9BFDAF274AA', pos.x, pos.y, pos.z, radius);
    }
    task_1.addScriptedCoverArea = addScriptedCoverArea;
    /**
     * x, y, z: offset in world coords from some entity.
     *
     * Hash: 0x5CF0D8F9BBA0DD75 | Since: 323
     */
    function addVehicleSubAttackCoord(ped, pos) {
        AddVehicleSubtaskAttackCoord(ped, pos.x, pos.y, pos.z);
    }
    task_1.addVehicleSubAttackCoord = addVehicleSubAttackCoord;
    /**
     * No comment provided
     *
     * Hash: 0x85F462BADC7DA47F | Since: 323
     */
    function addVehicleSubAttackPed(ped, target) {
        AddVehicleSubtaskAttackPed(ped, target);
    }
    task_1.addVehicleSubAttackPed = addVehicleSubAttackPed;
    /**
     * No comment provided
     *
     * Hash: 0x60F9A4393A21F741 | Since: 323
     */
    function assistedMovementIsRouteLoaded(route) {
        return AssistedMovementIsRouteLoaded(route);
    }
    task_1.assistedMovementIsRouteLoaded = assistedMovementIsRouteLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x13945951E16EF912 | Since: 323
     */
    function assistedMovementOverrideLoadDistanceThisFrame(dist) {
        AssistedMovementOverrideLoadDistanceThisFrame(dist);
    }
    task_1.assistedMovementOverrideLoadDistanceThisFrame = assistedMovementOverrideLoadDistanceThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x3548536485DD792B | Since: 323
     */
    function assistedMovementRemoveRoute(route) {
        AssistedMovementRemoveRoute(route);
    }
    task_1.assistedMovementRemoveRoute = assistedMovementRemoveRoute;
    /**
     * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
     *
     * Hash: 0x817268968605947A | Since: 323
     */
    function assistedMovementRequestRoute(route) {
        AssistedMovementRequestRoute(route);
    }
    task_1.assistedMovementRequestRoute = assistedMovementRequestRoute;
    /**
     * No comment provided
     *
     * Hash: 0xD5002D78B7162E1B | Since: 323
     */
    function assistedMovementSetRouteProperties(route, props) {
        AssistedMovementSetRouteProperties(route, props);
    }
    task_1.assistedMovementSetRouteProperties = assistedMovementSetRouteProperties;
    /**
     * No comment provided
     *
     * Hash: 0x6100B3CEFD43452E | Since: 2189
     */
    function clearDefaultPrimary(ped) {
        Citizen.invokeNative('0x6100B3CEFD43452E', ped);
    }
    task_1.clearDefaultPrimary = clearDefaultPrimary;
    /**
     * No comment provided
     *
     * Hash: 0xC35B5CDB2824CF69 | Since: 323
     */
    function clearDrivebyUnderneathDrivingTask(ped) {
        ClearDrivebyTaskUnderneathDrivingTask(ped);
    }
    task_1.clearDrivebyUnderneathDrivingTask = clearDrivebyUnderneathDrivingTask;
    /**
     * No comment provided
     *
     * Hash: 0xF6DC48E56BE1243A | Since: 3407
     */
    function clearPedScriptIfRunningThreatResponseNonTempTask(ped) {
        Citizen.invokeNative('0xF6DC48E56BE1243A', ped);
    }
    task_1.clearPedScriptIfRunningThreatResponseNonTempTask = clearPedScriptIfRunningThreatResponseNonTempTask;
    /**
     * No comment provided
     *
     * Hash: 0x176CECF6F920D707 | Since: 323
     */
    function clearPedSecondary(ped) {
        ClearPedSecondaryTask(ped);
    }
    task_1.clearPedSecondary = clearPedSecondary;
    /**
     * No comment provided
     *
     * Hash: 0xE1EF3C1216AFF2CD | Since: 323
     */
    function clearPeds(ped) {
        ClearPedTasks(ped);
    }
    task_1.clearPeds = clearPeds;
    /**
     * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
     *
     * Hash: 0xAAA34F8A7CB32098 | Since: 323
     */
    function clearPedsImmediately(ped) {
        ClearPedTasksImmediately(ped);
    }
    task_1.clearPedsImmediately = clearPedsImmediately;
    /**
     * This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
     * It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
     *
     * Hash: 0xDBBC7A2432524127 | Since: 1290
     */
    function clearPrimaryVehicle(vehicle) {
        ClearVehicleTasks(vehicle);
    }
    task_1.clearPrimaryVehicle = clearPrimaryVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x3841422E9C488D8C | Since: 323
     */
    function clearSequence() {
        return ClearSequenceTask();
    }
    task_1.clearSequence = clearSequence;
    /**
     * No comment provided
     *
     * Hash: 0x53DDC75BC3AC0A90 | Since: 1290
     */
    function clearVehicleCrash(vehicle) {
        Citizen.invokeNative('0x53DDC75BC3AC0A90', vehicle);
    }
    task_1.clearVehicleCrash = clearVehicleCrash;
    /**
     * No comment provided
     *
     * Hash: 0xB043ECA801B8CBC1 | Since: 323
     */
    function closePatrolRoute() {
        ClosePatrolRoute();
    }
    task_1.closePatrolRoute = closePatrolRoute;
    /**
     * No comment provided
     *
     * Hash: 0x39E72BC99E6360CB | Since: 323
     */
    function closeSequence(taskSequenceId) {
        CloseSequenceTask(taskSequenceId);
    }
    task_1.closeSequence = closeSequence;
    /**
     * Forces the ped to use the mounted weapon.
     * Returns false if task is not possible.
     *
     * Hash: 0xDCFE42068FE0135A | Since: 323
     */
    function controlMountedWeapon(ped) {
        return ControlMountedWeapon(ped);
    }
    task_1.controlMountedWeapon = controlMountedWeapon;
    /**
     * No comment provided
     *
     * Hash: 0xAF8A443CCC8018DC | Since: 323
     */
    function createPatrolRoute() {
        CreatePatrolRoute();
    }
    task_1.createPatrolRoute = createPatrolRoute;
    /**
     * From the b617d scripts:
     *
     * `TASK::DELETE_PATROL_ROUTE("miss_merc0");`
     * `TASK::DELETE_PATROL_ROUTE("miss_merc1");`
     * `TASK::DELETE_PATROL_ROUTE("miss_merc2");`
     * `TASK::DELETE_PATROL_ROUTE("miss_dock");`
     *
     * Hash: 0x7767DD9D65E91319 | Since: 323
     */
    function deletePatrolRoute(patrolRoute) {
        DeletePatrolRoute(patrolRoute);
    }
    task_1.deletePatrolRoute = deletePatrolRoute;
    /**
     * No comment provided
     *
     * Hash: 0x5A59271FFADD33C1 | Since: 323
     */
    function doesScenarioExistInArea(pos, radius, mustBeFree) {
        return DoesScenarioExistInArea(pos.x, pos.y, pos.z, radius, mustBeFree);
    }
    task_1.doesScenarioExistInArea = doesScenarioExistInArea;
    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Occurrences in the b617d scripts:
     *
     * "ARMY_GUARD",
     * "ARMY_HELI",
     * "Cinema_Downtown",
     * "Cinema_Morningwood",
     * "Cinema_Textile",
     * "City_Banks",
     * "Countryside_Banks",
     * "DEALERSHIP",
     * "GRAPESEED_PLANES",
     * "KORTZ_SECURITY",
     * "LOST_BIKERS",
     * "LSA_Planes",
     * "LSA_Planes",
     * "MP_POLICE",
     * "Observatory_Bikers",
     * "POLICE_POUND1",
     * "POLICE_POUND2",
     * "POLICE_POUND3",
     * "POLICE_POUND4",
     * "POLICE_POUND5"
     * "QUARRY",
     * "SANDY_PLANES",
     * "SCRAP_SECURITY",
     * "SEW_MACHINE",
     * "SOLOMON_GATE",
     * "Triathlon_1_Start",
     * "Triathlon_2_Start",
     * "Triathlon_3_Start"
     *
     * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
     * `if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {`
     * `else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {`
     *
     *
     * Hash: 0xF9034C136C9E00D3 | Since: 323
     */
    function doesScenarioGroupExist(scenarioGroup) {
        return DoesScenarioGroupExist(scenarioGroup);
    }
    task_1.doesScenarioGroupExist = doesScenarioGroupExist;
    /**
     * No comment provided
     *
     * Hash: 0x0A9D0C2A3BBC86C1 | Since: 323
     */
    function doesScenarioOfTypeExistInArea(pos, scenarioName, radius, mustBeFree) {
        return DoesScenarioOfTypeExistInArea(pos.x, pos.y, pos.z, scenarioName, radius, mustBeFree);
    }
    task_1.doesScenarioOfTypeExistInArea = doesScenarioOfTypeExistInArea;
    /**
     * Checks if there is a cover point at position
     *
     * Hash: 0xA98B8E3C088E5A31 | Since: 323
     */
    function doesScriptedCoverPointExistAtCoords(pos) {
        return DoesScriptedCoverPointExistAtCoords(pos.x, pos.y, pos.z);
    }
    task_1.doesScriptedCoverPointExistAtCoords = doesScriptedCoverPointExistAtCoords;
    /**
     * https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
     *
     * Hash: 0x534AEBA6E5ED4CAB | Since: 323
     */
    function getActiveVehicleMissionType(vehicle) {
        return GetActiveVehicleMissionType(vehicle);
    }
    task_1.getActiveVehicleMissionType = getActiveVehicleMissionType;
    /**
     * No comment provided
     *
     * Hash: 0x3A8CADC7D37AACC5 | Since: 323
     */
    function getClipSetForScriptedGun(gunTaskType) {
        return GetClipSetForScriptedGunTask(gunTaskType);
    }
    task_1.getClipSetForScriptedGun = getClipSetForScriptedGun;
    /**
     * Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
     *
     * Hash: 0xB0760331C7AA4155 | Since: 323
     */
    function getIsActive(ped, taskIndex) {
        return GetIsTaskActive(ped, taskIndex);
    }
    task_1.getIsActive = getIsActive;
    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0xCB4E8BE8A0063C5D | Since: 323
     */
    function getIsWaypointRecordingLoaded(name) {
        return GetIsWaypointRecordingLoaded(name);
    }
    task_1.getIsWaypointRecordingLoaded = getIsWaypointRecordingLoaded;
    /**
     * Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
     * Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
     * Looks like the native returns an int for the path's state:
     * 1 - ???
     * 2 - ???
     * 3 - Finished Generating
     *
     * Hash: 0xC6F5C0BCDC74D62D | Since: 323
     */
    function getNavmeshRouteDistanceRemaining(ped) {
        return GetNavmeshRouteDistanceRemaining(ped);
    }
    task_1.getNavmeshRouteDistanceRemaining = getNavmeshRouteDistanceRemaining;
    /**
     * See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
     *
     * Hash: 0x632E831F382A0FA8 | Since: 323
     */
    function getNavmeshRouteResult(ped) {
        return GetNavmeshRouteResult(ped);
    }
    task_1.getNavmeshRouteResult = getNavmeshRouteResult;
    /**
     * No comment provided
     *
     * Hash: 0x52F734CEBE20DFBA | Since: 2545
     */
    function getPatrolInfo(ped) {
        return Citizen.invokeNative('0x52F734CEBE20DFBA', ped);
    }
    task_1.getPatrolInfo = getPatrolInfo;
    /**
     * No comment provided
     *
     * Hash: 0x8517D4A6CA8513ED | Since: 323
     */
    function getPedDesiredMoveBlendRatio(ped) {
        return GetPedDesiredMoveBlendRatio(ped);
    }
    task_1.getPedDesiredMoveBlendRatio = getPedDesiredMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0xE6A877C64CAF1BC5 | Since: 323
     */
    function getPedWaypointDistance() {
        return GetPedWaypointDistance(undefined);
    }
    task_1.getPedWaypointDistance = getPedWaypointDistance;
    /**
     * No comment provided
     *
     * Hash: 0x2720AAA75001E094 | Since: 323
     */
    function getPedWaypointProgress(ped) {
        return GetPedWaypointProgress(ped);
    }
    task_1.getPedWaypointProgress = getPedWaypointProgress;
    /**
     * No comment provided
     *
     * Hash: 0x47619ABE8B268C60 | Since: 323
     */
    function getPhoneGestureAnimCurrentTime(ped) {
        return GetPhoneGestureAnimCurrentTime(ped);
    }
    task_1.getPhoneGestureAnimCurrentTime = getPhoneGestureAnimCurrentTime;
    /**
     * No comment provided
     *
     * Hash: 0x1EE0F68A7C25DEC6 | Since: 323
     */
    function getPhoneGestureAnimTotalTime(ped) {
        return GetPhoneGestureAnimTotalTime(ped);
    }
    task_1.getPhoneGestureAnimTotalTime = getPhoneGestureAnimTotalTime;
    /**
     * No comment provided
     *
     * Hash: 0x594A1028FC2A3E85 | Since: 323
     */
    function getScriptedCoverPointCoords(coverpoint) {
        return new Vector3(GetScriptedCoverPointCoords(coverpoint));
    }
    task_1.getScriptedCoverPointCoords = getScriptedCoverPointCoords;
    /**
     * Gets the status of a script-assigned task.
     * taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
     *
     * Hash: 0x77F1BEB8863288D5 | Since: 323
     */
    function getScriptStatus(ped, taskHash) {
        if (typeof taskHash === 'string')
            taskHash = misc.getHashKey(taskHash);
        return GetScriptTaskStatus(ped, taskHash);
    }
    task_1.getScriptStatus = getScriptStatus;
    /**
     * returned values:
     * 0 to 7 = task that's currently in progress, 0 meaning the first one.
     * -1 no task sequence in progress.
     *
     * Hash: 0x00A9010CFE1E3533 | Since: 323
     */
    function getSequenceProgress(ped) {
        return GetSequenceProgress(ped);
    }
    task_1.getSequenceProgress = getSequenceProgress;
    /**
     * No comment provided
     *
     * Hash: 0xB4F47213DF45A64C | Since: 323
     */
    function getMoveNetworkEvent(ped, eventName) {
        return GetTaskMoveNetworkEvent(ped, eventName);
    }
    task_1.getMoveNetworkEvent = getMoveNetworkEvent;
    /**
     * No comment provided
     *
     * Hash: 0xA7FFBA498E4AAF67 | Since: 323
     */
    function getMoveNetworkSignalBool(ped, signalName) {
        return GetTaskMoveNetworkSignalBool(ped, signalName);
    }
    task_1.getMoveNetworkSignalBool = getMoveNetworkSignalBool;
    /**
     * No comment provided
     *
     * Hash: 0x44AB0B3AFECCE242 | Since: 1493
     */
    function getMoveNetworkSignalFloat(ped, signalName) {
        return GetTaskMoveNetworkSignalFloat(ped, signalName);
    }
    task_1.getMoveNetworkSignalFloat = getMoveNetworkSignalFloat;
    /**
     * No comment provided
     *
     * Hash: 0x717E4D1F2048376D | Since: 323
     */
    function getMoveNetworkState(ped) {
        return GetTaskMoveNetworkState(ped);
    }
    task_1.getMoveNetworkState = getMoveNetworkState;
    /**
     * No comment provided
     *
     * Hash: 0x9D252648778160DF | Since: 1868
     */
    function getRappelDownWallState(ped) {
        return Citizen.invokeNative('0x9D252648778160DF', ped);
    }
    task_1.getRappelDownWallState = getRappelDownWallState;
    /**
     * No comment provided
     *
     * Hash: 0x9824CFF8FC66E159 | Since: 323
     */
    function getVehicleWaypointProgress(vehicle) {
        return GetVehicleWaypointProgress(vehicle);
    }
    task_1.getVehicleWaypointProgress = getVehicleWaypointProgress;
    /**
     * No comment provided
     *
     * Hash: 0x416B62AC8B9E5BBD | Since: 323
     */
    function getVehicleWaypointTargetPoint(vehicle) {
        return GetVehicleWaypointTargetPoint(vehicle);
    }
    task_1.getVehicleWaypointTargetPoint = getVehicleWaypointTargetPoint;
    /**
     * No comment provided
     *
     * Hash: 0xA5B769058763E497 | Since: 323
     */
    function getWaypointDistanceAlongRoute(name, point) {
        return GetWaypointDistanceAlongRoute(name, point);
    }
    task_1.getWaypointDistanceAlongRoute = getWaypointDistanceAlongRoute;
    /**
     * No comment provided
     *
     * Hash: 0x3E38E28A1D80DDF6 | Since: 323
     */
    function isControlledVehicleUnableToGetToRoad(ped) {
        return Citizen.invokeNative('0x3E38E28A1D80DDF6', ped);
    }
    task_1.isControlledVehicleUnableToGetToRoad = isControlledVehicleUnableToGetToRoad;
    /**
     * No comment provided
     *
     * Hash: 0x8785E6E40C7A8818 | Since: 323
     */
    function isDrivebyUnderneathDrivingTask(ped) {
        return IsDrivebyTaskUnderneathDrivingTask(ped);
    }
    task_1.isDrivebyUnderneathDrivingTask = isDrivebyUnderneathDrivingTask;
    /**
     * No comment provided
     *
     * Hash: 0xA320EF046186FA3B | Since: 323
     */
    function isMountedWeaponUnderneathDrivingTask(ped) {
        return IsMountedWeaponTaskUnderneathDrivingTask(ped);
    }
    task_1.isMountedWeaponUnderneathDrivingTask = isMountedWeaponUnderneathDrivingTask;
    /**
     * No comment provided
     *
     * Hash: 0xD4D8636C0199A939 | Since: 323
     */
    function isMoveBlendRatioRunning(ped) {
        return IsMoveBlendRatioRunning(ped);
    }
    task_1.isMoveBlendRatioRunning = isMoveBlendRatioRunning;
    /**
     * No comment provided
     *
     * Hash: 0x24A2AD74FA9814E2 | Since: 323
     */
    function isMoveBlendRatioSprinting(ped) {
        return IsMoveBlendRatioSprinting(ped);
    }
    task_1.isMoveBlendRatioSprinting = isMoveBlendRatioSprinting;
    /**
     * No comment provided
     *
     * Hash: 0x349CE7B56DAFD95C | Since: 323
     */
    function isMoveBlendRatioStill(ped) {
        return IsMoveBlendRatioStill(ped);
    }
    task_1.isMoveBlendRatioStill = isMoveBlendRatioStill;
    /**
     * No comment provided
     *
     * Hash: 0xF133BBBE91E1691F | Since: 323
     */
    function isMoveBlendRatioWalking(ped) {
        return IsMoveBlendRatioWalking(ped);
    }
    task_1.isMoveBlendRatioWalking = isMoveBlendRatioWalking;
    /**
     * No comment provided
     *
     * Hash: 0xAA135F9482C82CC3 | Since: 323
     */
    function isPedActiveInScenario(ped) {
        return IsPedActiveInScenario(ped);
    }
    task_1.isPedActiveInScenario = isPedActiveInScenario;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x90A09F3A45FED688 | Since: 323
     */
    function isPedBeingArrested(ped) {
        return IsPedBeingArrested(ped);
    }
    task_1.isPedBeingArrested = isPedBeingArrested;
    /**
     * No comment provided
     *
     * Hash: 0x74E559B3BC910685 | Since: 323
     */
    function isPedCuffed(ped) {
        return IsPedCuffed(ped);
    }
    task_1.isPedCuffed = isPedCuffed;
    /**
     * No comment provided
     *
     * Hash: 0x2A74E1D5F2F00EEC | Since: 323
     */
    function isPedGettingUp(ped) {
        return IsPedGettingUp(ped);
    }
    task_1.isPedGettingUp = isPedGettingUp;
    /**
     * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
     * Returns `true` if the ped is in writhe, `false` otherwise.
     *
     * Hash: 0xDEB6D52126E7D640 | Since: 323
     */
    function isPedInWrithe(ped) {
        return IsPedInWrithe(ped);
    }
    task_1.isPedInWrithe = isPedInWrithe;
    /**
     * Used only once (am_mp_property_int)
     *
     * ped was PLAYER_PED_ID()
     *
     * Related to CTaskAmbientClips.
     *
     * Hash: 0x621C6E4729388E41 | Since: 323
     */
    function isPedPlayingBaseClipInScenario(ped) {
        return IsPedPlayingBaseClipInScenario(ped);
    }
    task_1.isPedPlayingBaseClipInScenario = isPedPlayingBaseClipInScenario;
    /**
     * No comment provided
     *
     * Hash: 0xC5286FFC176F28A2 | Since: 323
     */
    function isPedRunning(ped) {
        return IsPedRunning(ped);
    }
    task_1.isPedRunning = isPedRunning;
    /**
     * No comment provided
     *
     * Hash: 0x3DC52677769B4AE0 | Since: 323
     */
    function isPedRunningArrest(ped) {
        return IsPedRunningArrestTask(ped);
    }
    task_1.isPedRunningArrest = isPedRunningArrest;
    /**
     * No comment provided
     *
     * Hash: 0x57E457CD2C0FC168 | Since: 323
     */
    function isPedSprinting(ped) {
        return IsPedSprinting(ped);
    }
    task_1.isPedSprinting = isPedSprinting;
    /**
     * No comment provided
     *
     * Hash: 0xAC29253EEF8F0180 | Since: 323
     */
    function isPedStill(ped) {
        return IsPedStill(ped);
    }
    task_1.isPedStill = isPedStill;
    /**
     * No comment provided
     *
     * Hash: 0xE45B7F222DE47E09 | Since: 323
     */
    function isPedStrafing(ped) {
        return IsPedStrafing(ped);
    }
    task_1.isPedStrafing = isPedStrafing;
    /**
     * No comment provided
     *
     * Hash: 0xDE4C184B2B9B071A | Since: 323
     */
    function isPedWalking(ped) {
        return IsPedWalking(ped);
    }
    task_1.isPedWalking = isPedWalking;
    /**
     * No comment provided
     *
     * Hash: 0xB8EBB1E9D3588C10 | Since: 323
     */
    function isPlayingPhoneGestureAnim(ped) {
        return IsPlayingPhoneGestureAnim(ped);
    }
    task_1.isPlayingPhoneGestureAnim = isPlayingPhoneGestureAnim;
    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Occurrences in the b617d scripts:
     *
     * "ARMY_GUARD",
     * "ARMY_HELI",
     * "BLIMP",
     * "Cinema_Downtown",
     * "Cinema_Morningwood",
     * "Cinema_Textile",
     * "City_Banks",
     * "Countryside_Banks",
     * "DEALERSHIP",
     * "KORTZ_SECURITY",
     * "LSA_Planes",
     * "MP_POLICE",
     * "Observatory_Bikers",
     * "POLICE_POUND1",
     * "POLICE_POUND2",
     * "POLICE_POUND3",
     * "POLICE_POUND4",
     * "POLICE_POUND5",
     * "Rampage1",
     * "SANDY_PLANES",
     * "SCRAP_SECURITY",
     * "SEW_MACHINE",
     * "SOLOMON_GATE"
     *
     * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
     * `if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {`
     * `else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {`
     *
     * Hash: 0x367A09DED4E05B99 | Since: 323
     */
    function isScenarioGroupEnabled(scenarioGroup) {
        return IsScenarioGroupEnabled(scenarioGroup);
    }
    task_1.isScenarioGroupEnabled = isScenarioGroupEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x788756D73AC2E07C | Since: 323
     */
    function isScenarioOccupied(pos, maxRange, onlyUsersActuallyAtScenario) {
        return IsScenarioOccupied(pos.x, pos.y, pos.z, maxRange, onlyUsersActuallyAtScenario);
    }
    task_1.isScenarioOccupied = isScenarioOccupied;
    /**
     * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     * Occurrences in the b617d scripts:
     * "PROP_HUMAN_SEAT_CHAIR",
     * "WORLD_HUMAN_DRINKING",
     * "WORLD_HUMAN_HANG_OUT_STREET",
     * "WORLD_HUMAN_SMOKING",
     * "WORLD_MOUNTAIN_LION_WANDER",
     * "WORLD_HUMAN_DRINKING"
     *
     * `Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.`
     *
     * `scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.`
     *
     *
     * Hash: 0x3A815DB3EA088722 | Since: 323
     */
    function isScenarioTypeEnabled(scenarioType) {
        return IsScenarioTypeEnabled(scenarioType);
    }
    task_1.isScenarioTypeEnabled = isScenarioTypeEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x921CE12C489C4C41 | Since: 323
     */
    function isMoveNetworkActive(ped) {
        return IsTaskMoveNetworkActive(ped);
    }
    task_1.isMoveNetworkActive = isMoveNetworkActive;
    /**
     * No comment provided
     *
     * Hash: 0x30ED88D5E0C56A37 | Since: 323
     */
    function isMoveNetworkReadyForTransition(ped) {
        return IsTaskMoveNetworkReadyForTransition(ped);
    }
    task_1.isMoveNetworkReadyForTransition = isMoveNetworkReadyForTransition;
    /**
     * No comment provided
     *
     * Hash: 0xE03B3F2D3DC59B64 | Since: 323
     */
    function isWaypointPlaybackGoingOnForPed(ped) {
        return IsWaypointPlaybackGoingOnForPed(ped);
    }
    task_1.isWaypointPlaybackGoingOnForPed = isWaypointPlaybackGoingOnForPed;
    /**
     * No comment provided
     *
     * Hash: 0xF5134943EA29868C | Since: 323
     */
    function isWaypointPlaybackGoingOnForVehicle(vehicle) {
        return IsWaypointPlaybackGoingOnForVehicle(vehicle);
    }
    task_1.isWaypointPlaybackGoingOnForVehicle = isWaypointPlaybackGoingOnForVehicle;
    /**
     * patrolRoutes found in the b617d scripts:
     * "miss_Ass0",
     * "miss_Ass1",
     * "miss_Ass2",
     * "miss_Ass3",
     * "miss_Ass4",
     * "miss_Ass5",
     * "miss_Ass6",
     * "MISS_PATROL_6",
     * "MISS_PATROL_7",
     * "MISS_PATROL_8",
     * "MISS_PATROL_9",
     * "miss_Tower_01",
     * "miss_Tower_02",
     * "miss_Tower_03",
     * "miss_Tower_04",
     * "miss_Tower_05",
     * "miss_Tower_06",
     * "miss_Tower_07",
     * "miss_Tower_08",
     * "miss_Tower_10"
     *
     * Hash: 0xA36BFB5EE89F3D82 | Since: 323
     */
    function openPatrolRoute(patrolRoute) {
        OpenPatrolRoute(patrolRoute);
    }
    task_1.openPatrolRoute = openPatrolRoute;
    /**
     * No comment provided
     *
     * Hash: 0xE8854A4326B9E12B | Since: 323
     */
    function openSequence() {
        return OpenSequenceTask();
    }
    task_1.openSequence = openSequence;
    /**
     * No comment provided
     *
     * Hash: 0x295E3CCEC879CCD7 | Since: 323
     */
    function pedHasUseScenario(ped) {
        return PedHasUseScenarioTask(ped);
    }
    task_1.pedHasUseScenario = pedHasUseScenario;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x748040460F8DF5DC | Since: 323
     */
    function playAnimOnRunningScenario(ped, animDict, animName) {
        PlayAnimOnRunningScenario(ped, animDict, animName);
    }
    task_1.playAnimOnRunningScenario = playAnimOnRunningScenario;
    /**
     * No comment provided
     *
     * Hash: 0x77A1EEC547E7FCF1 | Since: 323
     */
    function playEntityScriptedAnim(entity, blendInDelta, blendOutDelta) {
        return PlayEntityScriptedAnim(entity, blendInDelta, blendOutDelta);
    }
    task_1.playEntityScriptedAnim = playEntityScriptedAnim;
    /**
     * No comment provided
     *
     * Hash: 0xDB6708C0B46F56D8 | Since: 323
     */
    function removeAllCoverBlockingAreas() {
        RemoveAllCoverBlockingAreas();
    }
    task_1.removeAllCoverBlockingAreas = removeAllCoverBlockingAreas;
    /**
     * No comment provided
     *
     * Hash: 0xFA83CA6776038F64 | Since: 1493
     */
    function removeCoverBlockingAreasAtPosition(pos) {
        Citizen.invokeNative('0xFA83CA6776038F64', pos.x, pos.y, pos.z);
    }
    task_1.removeCoverBlockingAreasAtPosition = removeCoverBlockingAreasAtPosition;
    /**
     * No comment provided
     *
     * Hash: 0xAE287C923D891715 | Since: 323
     */
    function removeCoverPoint(coverpoint) {
        RemoveCoverPoint(coverpoint);
    }
    task_1.removeCoverPoint = removeCoverPoint;
    /**
     * No comment provided
     *
     * Hash: 0x1F351CF1C6475734 | Since: 505
     */
    function removeSpecificCoverBlockingAreas(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer) {
        Citizen.invokeNative('0x1F351CF1C6475734', startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
    }
    task_1.removeSpecificCoverBlockingAreas = removeSpecificCoverBlockingAreas;
    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0xFF1B8B4AA1C25DC8 | Since: 323
     */
    function removeWaypointRecording(name) {
        RemoveWaypointRecording(name);
    }
    task_1.removeWaypointRecording = removeWaypointRecording;
    /**
     * No comment provided
     *
     * Hash: 0xD01015C7316AE176 | Since: 323
     */
    function requestMoveNetworkStateTransition(ped, name) {
        return RequestTaskMoveNetworkStateTransition(ped, name);
    }
    task_1.requestMoveNetworkStateTransition = requestMoveNetworkStateTransition;
    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Max number of loaded recordings is 32.
     *
     * Hash: 0x9EEFB62EB27B5792 | Since: 323
     */
    function requestWaypointRecording(name) {
        RequestWaypointRecording(name);
    }
    task_1.requestWaypointRecording = requestWaypointRecording;
    /**
     * No comment provided
     *
     * Hash: 0x4202BBCB8684563D | Since: 323
     */
    function resetExclusiveScenarioGroup() {
        ResetExclusiveScenarioGroup();
    }
    task_1.resetExclusiveScenarioGroup = resetExclusiveScenarioGroup;
    /**
     * No comment provided
     *
     * Hash: 0xDD902D0349AFAD3A | Since: 323
     */
    function resetScenarioGroupsEnabled() {
        ResetScenarioGroupsEnabled();
    }
    task_1.resetScenarioGroupsEnabled = resetScenarioGroupsEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x0D40EE2A7F2B2D6D | Since: 323
     */
    function resetScenarioTypesEnabled() {
        ResetScenarioTypesEnabled();
    }
    task_1.resetScenarioTypesEnabled = resetScenarioTypesEnabled;
    /**
     * No comment provided
     *
     * Hash: 0x70033C3CC29A1FF4 | Since: 323
     */
    function setAnimLooped(entity, looped, priority, secondary) {
        SetAnimLooped(entity, looped, priority, secondary);
    }
    task_1.setAnimLooped = setAnimLooped;
    /**
     * No comment provided
     *
     * Hash: 0xDDF3CB5A0A4C0B49 | Since: 2372
     */
    function setAnimPhase(entity, phase, priority, secondary) {
        SetAnimPhase(entity, phase, priority, secondary);
    }
    task_1.setAnimPhase = setAnimPhase;
    /**
     * No comment provided
     *
     * Hash: 0x032D49C5E359C847 | Since: 323
     */
    function setAnimRate(entity, rate, priority, secondary) {
        SetAnimRate(entity, rate, priority, secondary);
    }
    task_1.setAnimRate = setAnimRate;
    /**
     * No comment provided
     *
     * Hash: 0x207F1A47C0342F48 | Since: 323
     */
    function setAnimWeight(entity, weight, priority, index, secondary) {
        SetAnimWeight(entity, weight, priority, index, secondary);
    }
    task_1.setAnimWeight = setAnimWeight;
    /**
     * For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
     *
     * Hash: 0xE5B302114D8162EE | Since: 323
     */
    function setDrivebyTarget(shootingPed, targetPed, targetVehicle, pos) {
        SetDrivebyTaskTarget(shootingPed, targetPed, targetVehicle, pos.x, pos.y, pos.z);
    }
    task_1.setDrivebyTarget = setDrivebyTarget;
    /**
     * No comment provided
     *
     * Hash: 0x5C9B84BD7D31D908 | Since: 323
     */
    function setDriveCruiseSpeed(driver, cruiseSpeed) {
        SetDriveTaskCruiseSpeed(driver, cruiseSpeed);
    }
    task_1.setDriveCruiseSpeed = setDriveCruiseSpeed;
    /**
     * This native is used to set the driving style for specific ped.
     *
     * Driving styles id seems to be:
     * 786468
     * 262144
     * 786469
     *
     * http://gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0xDACE1BE37D88AF67 | Since: 323
     */
    function setDriveDrivingStyle(ped, drivingStyle) {
        SetDriveTaskDrivingStyle(ped, drivingStyle);
    }
    task_1.setDriveDrivingStyle = setDriveDrivingStyle;
    /**
     * No comment provided
     *
     * Hash: 0x404A5AA9B9F0B746 | Since: 323
     */
    function setDriveMaxCruiseSpeed(ped, speed, updateBaseTask) {
        SetDriveTaskMaxCruiseSpeed(ped, speed, updateBaseTask);
    }
    task_1.setDriveMaxCruiseSpeed = setDriveMaxCruiseSpeed;
    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Groups found in the scripts used with this native:
     *
     * "AMMUNATION",
     * "QUARRY",
     * "Triathlon_1",
     * "Triathlon_2",
     * "Triathlon_3"
     *
     * Hash: 0x535E97E1F7FC0C6A | Since: 323
     */
    function setExclusiveScenarioGroup(scenarioGroup) {
        SetExclusiveScenarioGroup(scenarioGroup);
    }
    task_1.setExclusiveScenarioGroup = setExclusiveScenarioGroup;
    /**
     * Used only once in the scripts (fm_mission_controller) like so:
     *
     * `TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting");`
     *
     * Hash: 0xAB13A5565480B6D9 | Since: 323
     */
    function setExpectedCloneNextMoveNetworkState(ped, state) {
        return Citizen.invokeNative('0xAB13A5565480B6D9', ped, state);
    }
    task_1.setExpectedCloneNextMoveNetworkState = setExpectedCloneNextMoveNetworkState;
    /**
     * Needs to be looped! And yes, it does work and is not a hash collision.
     * Birds will try to reach the given height.
     *
     * Hash: 0x6C6B148586F934F7 | Since: 323
     */
    function setGlobalMinBirdFlightHeight(height) {
        SetGlobalMinBirdFlightHeight(height);
    }
    task_1.setGlobalMinBirdFlightHeight = setGlobalMinBirdFlightHeight;
    /**
     * Makes the ped ragdoll like when falling from a great height
     *
     * Hash: 0x8C825BDC7741D37C | Since: 323
     */
    function setHighFall(ped, minTime, maxTime, entryType) {
        SetHighFallTask(ped, minTime, maxTime, entryType);
    }
    task_1.setHighFall = setHighFall;
    /**
     * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
     *
     * Hash: 0xCCD892192C6D2BB9 | Since: 323
     */
    function setMountedWeaponTarget(shootingPed, targetPed, targetVehicle, pos, taskMode, ignoreTargetVehDeadCheck) {
        SetMountedWeaponTarget(shootingPed, targetPed, targetVehicle, pos.x, pos.y, pos.z, taskMode, ignoreTargetVehDeadCheck);
    }
    task_1.setMountedWeaponTarget = setMountedWeaponTarget;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * R* Comment:
     * SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
     *
     * Hash: 0xF1B9F16E89E2C93A | Since: 323
     */
    function setNextDesiredMoveState(nextMoveState) {
        SetNextDesiredMoveState(nextMoveState);
    }
    task_1.setNextDesiredMoveState = setNextDesiredMoveState;
    /**
     * No comment provided
     *
     * Hash: 0xC313379AF0FCEDA7 | Since: 323
     */
    function setParachuteTarget(ped, pos) {
        SetParachuteTaskTarget(ped, pos.x, pos.y, pos.z);
    }
    task_1.setParachuteTarget = setParachuteTarget;
    /**
     * No comment provided
     *
     * Hash: 0x0729BAC1B8C64317 | Since: 323
     */
    function setParachuteThrust(ped, thrust) {
        SetParachuteTaskThrust(ped, thrust);
    }
    task_1.setParachuteThrust = setParachuteThrust;
    /**
     * Appears only in fm_mission_controller and used only 3 times.
     *
     * ped was always PLAYER_PED_ID()
     * p1 was always true
     * p2 was always true
     *
     * Hash: 0x8FD89A6240813FD0 | Since: 323
     */
    function setPedCanPlayAmbientIdles(ped, blockIdleClips, removeIdleClipIfPlaying) {
        SetPedCanPlayAmbientIdles(ped, blockIdleClips, removeIdleClipIfPlaying);
    }
    task_1.setPedCanPlayAmbientIdles = setPedCanPlayAmbientIdles;
    /**
     * No comment provided
     *
     * Hash: 0x1E982AC8716912C5 | Since: 323
     */
    function setPedDesiredMoveBlendRatio(ped, newMoveBlendRatio) {
        SetPedDesiredMoveBlendRatio(ped, newMoveBlendRatio);
    }
    task_1.setPedDesiredMoveBlendRatio = setPedDesiredMoveBlendRatio;
    /**
     * No comment provided
     *
     * Hash: 0x4455517B28441E60 | Since: 323
     */
    function setPedPathAvoidFire(ped, avoidFire) {
        SetPedPathAvoidFire(ped, avoidFire);
    }
    task_1.setPedPathAvoidFire = setPedPathAvoidFire;
    /**
     * No comment provided
     *
     * Hash: 0xE361C5C71C431A4F | Since: 323
     */
    function setPedPathCanDropFromHeight(ped, Toggle) {
        SetPedPathCanDropFromHeight(ped, Toggle);
    }
    task_1.setPedPathCanDropFromHeight = setPedPathCanDropFromHeight;
    /**
     * No comment provided
     *
     * Hash: 0x8E06A6FE76C9EFF4 | Since: 323
     */
    function setPedPathCanUseClimbovers(ped, Toggle) {
        SetPedPathCanUseClimbovers(ped, Toggle);
    }
    task_1.setPedPathCanUseClimbovers = setPedPathCanUseClimbovers;
    /**
     * No comment provided
     *
     * Hash: 0x77A5B103C87F476E | Since: 323
     */
    function setPedPathCanUseLadders(ped, Toggle) {
        SetPedPathCanUseLadders(ped, Toggle);
    }
    task_1.setPedPathCanUseLadders = setPedPathCanUseLadders;
    /**
     * Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
     *
     * Hash: 0x88E32DB8C1A4AA4B | Since: 323
     */
    function setPedPathClimbCostModifier(ped, modifier) {
        SetPedPathClimbCostModifier(ped, modifier);
    }
    task_1.setPedPathClimbCostModifier = setPedPathClimbCostModifier;
    /**
     * No comment provided
     *
     * Hash: 0xF35425A4204367EC | Since: 323
     */
    function setPedPathMayEnterWater(ped, mayEnterWater) {
        SetPedPathMayEnterWater(ped, mayEnterWater);
    }
    task_1.setPedPathMayEnterWater = setPedPathMayEnterWater;
    /**
     * No comment provided
     *
     * Hash: 0x38FE1EC73743793C | Since: 323
     */
    function setPedPathPreferToAvoidWater(ped, avoidWater) {
        SetPedPathPreferToAvoidWater(ped, avoidWater);
    }
    task_1.setPedPathPreferToAvoidWater = setPedPathPreferToAvoidWater;
    /**
     * No comment provided
     *
     * Hash: 0x686ECCD99D4E61BB | Since: 3570
     */
    function setPedWaypointProgress(ped, progress) {
        Citizen.invokeNative('0x686ECCD99D4E61BB', ped, progress);
    }
    task_1.setPedWaypointProgress = setPedWaypointProgress;
    /**
     * No comment provided
     *
     * Hash: 0xED98E10B0AFCE4B4 | Since: 323
     */
    function setPedWaypointRouteOffset(ped, pos) {
        return SetPedWaypointRouteOffset(ped, pos.x, pos.y, pos.z);
    }
    task_1.setPedWaypointRouteOffset = setPedWaypointRouteOffset;
    /**
     * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
     * Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU
     *
     * Hash: 0x02C8E5B49848664E | Since: 323
     */
    function setScenarioGroupEnabled(scenarioGroup, enabled) {
        SetScenarioGroupEnabled(scenarioGroup, enabled);
    }
    task_1.setScenarioGroupEnabled = setScenarioGroupEnabled;
    /**
     * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     * seems to enable/disable specific scenario-types from happening in the game world.
     *
     * Here are some scenario types from the scripts:
     * "WORLD_MOUNTAIN_LION_REST"
     * "WORLD_MOUNTAIN_LION_WANDER"
     * "DRIVE"
     * "WORLD_VEHICLE_POLICE_BIKE"
     * "WORLD_VEHICLE_POLICE_CAR"
     * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
     * "WORLD_VEHICLE_DRIVE_SOLO"
     * "WORLD_VEHICLE_BIKER"
     * "WORLD_VEHICLE_DRIVE_PASSENGERS"
     * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
     * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
     * "PROP_HUMAN_SEAT_CHAIR"
     * "WORLD_VEHICLE_ATTRACTOR"
     * "WORLD_HUMAN_LEANING"
     * "WORLD_HUMAN_HANG_OUT_STREET"
     * "WORLD_HUMAN_DRINKING"
     * "WORLD_HUMAN_SMOKING"
     * "WORLD_HUMAN_GUARD_STAND"
     * "WORLD_HUMAN_CLIPBOARD"
     * "WORLD_HUMAN_HIKER"
     * "WORLD_VEHICLE_EMPTY"
     * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
     * "WORLD_HUMAN_PAPARAZZI"
     * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
     * "WORLD_VEHICLE_PARK_PARALLEL"
     * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
     * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
     * "WORLD_VEHICLE_TRUCK_LOGS"
     *
     * `scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.`
     *
     * Hash: 0xEB47EC4E34FB7EE1 | Since: 323
     */
    function setScenarioTypeEnabled(scenarioType, toggle) {
        SetScenarioTypeEnabled(scenarioType, toggle);
    }
    task_1.setScenarioTypeEnabled = setScenarioTypeEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xF5D1F489147CB683 | Since: 3570
     */
    function setSequencePreventMigration(taskSequenceId) {
        Citizen.invokeNative('0xF5D1F489147CB683', taskSequenceId);
    }
    task_1.setSequencePreventMigration = setSequencePreventMigration;
    /**
     * No comment provided
     *
     * Hash: 0x58C70CF3A41E4AE7 | Since: 323
     */
    function setSequenceToRepeat(taskSequenceId, repeat) {
        SetSequenceToRepeat(taskSequenceId, repeat);
    }
    task_1.setSequenceToRepeat = setSequenceToRepeat;
    /**
     * No comment provided
     *
     * Hash: 0x8423541E8B3A1589 | Since: 1493
     */
    function setMoveNetworkAnimSet(ped, clipSet, variableClipSet) {
        if (typeof clipSet === 'string')
            clipSet = misc.getHashKey(clipSet);
        if (typeof variableClipSet === 'string')
            variableClipSet = misc.getHashKey(variableClipSet);
        Citizen.invokeNative('0x8423541E8B3A1589', ped, clipSet, variableClipSet);
    }
    task_1.setMoveNetworkAnimSet = setMoveNetworkAnimSet;
    /**
     * Doesn't actually return anything.
     *
     * Hash: 0x0FFB3C758E8C07B9 | Since: 2060
     */
    function setMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(ped, enable) {
        return Citizen.invokeNative('0x0FFB3C758E8C07B9', ped, enable);
    }
    task_1.setMoveNetworkEnableCollisionOnNetworkCloneWhenFixed = setMoveNetworkEnableCollisionOnNetworkCloneWhenFixed;
    /**
     * No comment provided
     *
     * Hash: 0xB0A6CFD2C69C1088 | Since: 323
     */
    function setMoveNetworkSignalBool(ped, signalName, value) {
        SetTaskMoveNetworkSignalBool(ped, signalName, value);
    }
    task_1.setMoveNetworkSignalBool = setMoveNetworkSignalBool;
    /**
     * signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
     * p2 - From what i can see it goes up to 1f (maybe).
     *
     * `Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);`
     *
     * Hash: 0xD5BB4025AE449A4E | Since: 323
     */
    function setMoveNetworkSignalFloat(ped, signalName, value) {
        SetTaskMoveNetworkSignalFloat(ped, signalName, value);
    }
    task_1.setMoveNetworkSignalFloat = setMoveNetworkSignalFloat;
    /**
     * No comment provided
     *
     * Hash: 0x8634CEF2522D987B | Since: 1493
     */
    function setMoveNetworkSignalFloatLerpRate(ped, signalName, value) {
        Citizen.invokeNative('0x8634CEF2522D987B', ped, signalName, value);
    }
    task_1.setMoveNetworkSignalFloatLerpRate = setMoveNetworkSignalFloatLerpRate;
    /**
     * No comment provided
     *
     * Hash: 0x373EF409B82697A3 | Since: 1493
     */
    function setMoveNetworkSignalLocalFloat(ped, signalName, value) {
        SetTaskMoveNetworkSignalFloat2(ped, signalName, value);
    }
    task_1.setMoveNetworkSignalLocalFloat = setMoveNetworkSignalLocalFloat;
    /**
     * Flag 8: Medium-aggressive boxing tactic with a bit of PIT
     * Flag 1: Aggressive ramming of suspect
     * Flag 2: Ram attempts
     * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
     * Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
     *
     * Hash: 0xCC665AAC360D31E7 | Since: 323
     */
    function setVehicleChaseBehaviorFlag(ped, flag, _set) {
        SetTaskVehicleChaseBehaviorFlag(ped, flag, _set);
    }
    task_1.setVehicleChaseBehaviorFlag = setVehicleChaseBehaviorFlag;
    /**
     * No comment provided
     *
     * Hash: 0x639B642FACBE4EDD | Since: 323
     */
    function setVehicleChaseIdealPursuitDistance(ped, distance) {
        SetTaskVehicleChaseIdealPursuitDistance(ped, distance);
    }
    task_1.setVehicleChaseIdealPursuitDistance = setVehicleChaseIdealPursuitDistance;
    /**
     * Looks like p1 may be a flag, still need to do some research, though.
     *
     * Hash: 0xEE08C992D238C5D1 | Since: 323
     */
    function stopAnimPlayback(entity, priority, secondary) {
        StopAnimPlayback(entity, priority, secondary);
    }
    task_1.stopAnimPlayback = stopAnimPlayback;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x97FF36A1D40EA00A | Since: 323
     */
    function stopAnim(entity, animDictionary, animationName, blendDelta) {
        StopAnimTask(entity, animDictionary, animationName, blendDelta);
    }
    task_1.stopAnim = stopAnim;
    /**
     * Makes the specified ped achieve the specified heading.
     *
     * pedHandle: The handle of the ped to assign the task to.
     * heading: The desired heading.
     * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
     *
     * Hash: 0x93B93A37987F1F3D | Since: 323
     */
    function achieveHeading(ped, heading, timeout) {
        TaskAchieveHeading(ped, heading, timeout);
    }
    task_1.achieveHeading = achieveHeading;
    /**
     * No comment provided
     *
     * Hash: 0x19D1B791CB3670FE | Since: 877
     */
    function agitatedActionConfrontResponse(ped, ped2) {
        TaskAgitatedAction(ped, ped2);
    }
    task_1.agitatedActionConfrontResponse = agitatedActionConfrontResponse;
    /**
     * No comment provided
     *
     * Hash: 0x6671F3EEC681BDA1 | Since: 323
     */
    function aimGunAtCoord(ped, pos, time, instantBlendToAim, playAnimIntro) {
        TaskAimGunAtCoord(ped, pos.x, pos.y, pos.z, time, instantBlendToAim, playAnimIntro);
    }
    task_1.aimGunAtCoord = aimGunAtCoord;
    /**
     * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
     *
     * Hash: 0x9B53BB6E8943AF53 | Since: 323
     */
    function aimGunAtEntity(ped, entity, duration, instantBlendToAim) {
        TaskAimGunAtEntity(ped, entity, duration, instantBlendToAim);
    }
    task_1.aimGunAtEntity = aimGunAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0x7A192BE16D373D00 | Since: 323
     */
    function aimGunScripted(ped, scriptTask, disableBlockingClip, instantBlendToAim) {
        if (typeof scriptTask === 'string')
            scriptTask = misc.getHashKey(scriptTask);
        TaskAimGunScripted(ped, scriptTask, disableBlockingClip, instantBlendToAim);
    }
    task_1.aimGunScripted = aimGunScripted;
    /**
     * No comment provided
     *
     * Hash: 0x8605AF0DE8B3A5AC | Since: 323
     */
    function aimGunScriptedWithTarget(ped, target, pos, gunTaskType, disableBlockingClip, forceAim) {
        TaskAimGunScriptedWithTarget(ped, target, pos.x, pos.y, pos.z, gunTaskType, disableBlockingClip, forceAim);
    }
    task_1.aimGunScriptedWithTarget = aimGunScriptedWithTarget;
    /**
     * Example from "me_amanda1.ysc.c4":
     * `TASK::TASK_ARREST_PED(l_19F \/\* This is a Ped \*\/ , PLAYER::PLAYER_PED_ID());`
     *
     * Example from "armenian1.ysc.c4":
     * `if (!PED::IS_PED_INJURED(l_B18[0\/\*1\*\/])) {`
     * `TASK::TASK_ARREST_PED(l_B18[0\/\*1\*\/], PLAYER::PLAYER_PED_ID());`
     * }
     *
     * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
     *
     *
     * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
     *
     * Hash: 0xF3B9A78A178572B1 | Since: 323
     */
    function arrestPed(ped, target) {
        TaskArrestPed(ped, target);
    }
    task_1.arrestPed = arrestPed;
    /**
     * `You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.`
     *
     * Working example
     * `float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));`
     * `TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);`
     * `PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);`
     *
     * P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
     *
     * Hash: 0x15C86013127CE63F | Since: 323
     */
    function boatMission(pedDriver, vehicle, targetVehicle, targetPed, pos, mission, maxSpeed, drivingStyle, targetReached, boatFlags) {
        TaskBoatMission(pedDriver, vehicle, targetVehicle, targetPed, pos.x, pos.y, pos.z, mission, maxSpeed, drivingStyle, targetReached, boatFlags);
    }
    task_1.boatMission = boatMission;
    /**
     * p2 tend to be 16, 17 or 1
     * p3 to p7 tend to be 0.0
     *
     * Hash: 0x8C338E0263E4FD19 | Since: 323
     */
    function chatToPed(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime) {
        TaskChatToPed(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime);
    }
    task_1.chatToPed = chatToPed;
    /**
     * No comment provided
     *
     * Hash: 0x95A6C46A31D1917D | Since: 323
     */
    function clearDefensiveArea(ped) {
        TaskClearDefensiveArea(ped);
    }
    task_1.clearDefensiveArea = clearDefensiveArea;
    /**
     * No comment provided
     *
     * Hash: 0x0F804F1DB19B9689 | Since: 323
     */
    function clearLookAt(ped) {
        TaskClearLookAt(ped);
    }
    task_1.clearLookAt = clearLookAt;
    /**
     * Climbs or vaults the nearest thing.
     * usePlayerLaunchForce is unused.
     *
     * Hash: 0x89D9FCC2435112F1 | Since: 323
     */
    function climb(ped, usePlayerLaunchForce) {
        TaskClimb(ped, usePlayerLaunchForce);
    }
    task_1.climb = climb;
    /**
     * No comment provided
     *
     * Hash: 0xB6C987F9285A3814 | Since: 323
     */
    function climbLadder(ped, fast) {
        TaskClimbLadder(ped, fast);
    }
    task_1.climbLadder = climbLadder;
    /**
     * Despite its name, it only attacks ONE hated target. The one closest hated target.
     *
     * p2 seems to be always 0
     *
     * Hash: 0x7BF835BB9E2698C8 | Since: 323
     */
    function combatHatedTargetsAroundPed(ped, radius, combatFlags) {
        TaskCombatHatedTargetsAroundPed(ped, radius, combatFlags);
    }
    task_1.combatHatedTargetsAroundPed = combatHatedTargetsAroundPed;
    /**
     * No comment provided
     *
     * Hash: 0x2BBA30B854534A0C | Since: 323
     */
    function combatHatedTargetsAroundPedTimed(ped, radius, time, combatFlags) {
        TaskCombatHatedTargetsAroundPedTimed(ped, radius, time, combatFlags);
    }
    task_1.combatHatedTargetsAroundPedTimed = combatHatedTargetsAroundPedTimed;
    /**
     * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
     *
     * Hash: 0x4CF5F55DAC3280A0 | Since: 323
     */
    function combatHatedTargetsInArea(ped, pos, radius, combatFlags) {
        TaskCombatHatedTargetsInArea(ped, pos.x, pos.y, pos.z, radius, combatFlags);
    }
    task_1.combatHatedTargetsInArea = combatHatedTargetsInArea;
    /**
     * Makes the specified ped attack the target ped.
     * p2 should be 0
     * p3 should be 16
     *
     * Hash: 0xF166E48407BAC484 | Since: 323
     */
    function combatPed(ped, targetPed, combatFlags, threatResponseFlags) {
        TaskCombatPed(ped, targetPed, combatFlags, threatResponseFlags);
    }
    task_1.combatPed = combatPed;
    /**
     * No comment provided
     *
     * Hash: 0x944F30DCB7096BDE | Since: 323
     */
    function combatPedTimed(ped, target, time, flags) {
        TaskCombatPedTimed(ped, target, time, flags);
    }
    task_1.combatPedTimed = combatPedTimed;
    /**
     * No comment provided
     *
     * Hash: 0x3EB1FE9E8E908E15 | Since: 323
     */
    function cower(ped, duration) {
        TaskCower(ped, duration);
    }
    task_1.cower = cower;
    /**
     * Example:
     *
     * `TASK::TASK_DRIVE_BY(l_467[1\/\*22\*\/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});`
     *
     *
     *
     *
     * Needs working example. Doesn't seem to do anything.
     *
     * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
     * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
     * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
     *
     * Hash: 0x2F8AF0E82773A171 | Since: 323
     */
    function driveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern);
    }
    task_1.driveBy = driveBy;
    /**
     * speed 1.0 = walk, 2.0 = run
     * p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
     * p6 is always 0
     *
     * Usage of seat
     * -1 = driver
     * 0 = passenger
     * 1 = left back seat
     * 2 = right back seat
     * 3 = outside left
     * 4 = outside right
     *
     * Hash: 0xC20E50AA46D09CA8 | Since: 323
     */
    function enterVehicle(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName) {
        TaskEnterVehicle(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName);
    }
    task_1.enterVehicle = enterVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x7F93691AB4B92272 | Since: 323
     */
    function everyoneLeaveVehicle(vehicle) {
        TaskEveryoneLeaveVehicle(vehicle);
    }
    task_1.everyoneLeaveVehicle = everyoneLeaveVehicle;
    /**
     * p1 is 1, 2, or 3 in scripts
     *
     * Hash: 0x79B258E397854D29 | Since: 323
     */
    function exitCover(ped, exitType, pos) {
        TaskExitCover(ped, exitType, pos.x, pos.y, pos.z);
    }
    task_1.exitCover = exitCover;
    /**
     * MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
     *
     * A maximum of 8 points can be added.
     *
     * Hash: 0x1E7889778264843A | Since: 323
     */
    function extendRoute(pos) {
        TaskExtendRoute(pos.x, pos.y, pos.z);
    }
    task_1.extendRoute = extendRoute;
    /**
     * MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
     *
     * Hash: 0x841142A1376E9006 | Since: 323
     */
    function flushRoute() {
        TaskFlushRoute();
    }
    task_1.flushRoute = flushRoute;
    /**
     * If no timeout, set timeout to -1.
     *
     * Hash: 0x15D3A79D4E44B913 | Since: 323
     */
    function followNavMeshToCoord(ped, pos, moveBlendRatio, time, targetRadius, flags, targetHeading) {
        TaskFollowNavMeshToCoord(ped, pos.x, pos.y, pos.z, moveBlendRatio, time, targetRadius, flags, targetHeading);
    }
    task_1.followNavMeshToCoord = followNavMeshToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x17F58B88D085DBAC | Since: 323
     */
    function followNavMeshToCoordAdvanced(ped, pos, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading) {
        TaskFollowNavMeshToCoordAdvanced(ped, pos.x, pos.y, pos.z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading);
    }
    task_1.followNavMeshToCoordAdvanced = followNavMeshToCoordAdvanced;
    /**
     * MulleKD19: Makes the ped go on the created point route.
     *
     * ped: The ped to give the task to.
     * speed: The speed to move at in m/s.
     * int: Unknown. Can be 0, 1, 2 or 3.
     *
     * Example:
     * TASK_FLUSH_ROUTE();
     * TASK_EXTEND_ROUTE(0f, 0f, 70f);
     * TASK_EXTEND_ROUTE(10f, 0f, 70f);
     * TASK_EXTEND_ROUTE(10f, 10f, 70f);
     * TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
     *
     * Hash: 0x595583281858626E | Since: 323
     */
    function followPointRoute(ped, speed, mode) {
        TaskFollowPointRoute(ped, speed, mode);
    }
    task_1.followPointRoute = followPointRoute;
    /**
     * p6 always -1
     * p7 always 10.0
     * p8 always 1
     *
     * Hash: 0x304AE42E357B8C7E | Since: 323
     */
    function followToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing) {
        TaskFollowToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
    }
    task_1.followToOffsetOfEntity = followToOffsetOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0x0759591819534F7B | Since: 323
     */
    function followWaypointRecording(ped, name) {
        TaskFollowWaypointRecording(ped, name, 0, 0, 0);
    }
    task_1.followWaypointRecording = followWaypointRecording;
    /**
     * p2 always false
     *
     * [30/03/2017] ins1de :
     *
     * See FORCE_PED_MOTION_STATE
     *
     * Hash: 0x4F056E1AFFEF17AB | Since: 323
     */
    function forceMotionState(ped, state, forceRestart) {
        if (typeof state === 'string')
            state = misc.getHashKey(state);
        TaskForceMotionState(ped, state, forceRestart);
    }
    task_1.forceMotionState = forceMotionState;
    /**
     * No comment provided
     *
     * Hash: 0x9C00E77AF14B2DFF | Since: 323
     */
    function getOffBoat(ped, boat) {
        TaskGetOffBoat(ped, boat);
    }
    task_1.getOffBoat = getOffBoat;
    /**
     * eg
     *
     * `TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);`
     *
     * ped = Ped you want to perform this task.
     * target = the Entity they should aim at.
     * distanceToStopAt = distance from the target, where the ped should stop to aim.
     * StartAimingDist = distance where the ped should start to aim.
     *
     * Hash: 0xA9DA48FAB8A76C12 | Since: 323
     */
    function gotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist) {
        TaskGotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist);
    }
    task_1.gotoEntityAiming = gotoEntityAiming;
    /**
     * enum ESEEK_ENTITY_OFFSET_FLAGS
     * {
     * ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
     * ESEEK_KEEP_TO_PAVEMENTS = 0x02
     * };
     *
     * Hash: 0xE39B4FF4FDEBDE27 | Since: 323
     */
    function gotoEntityOffset(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags) {
        TaskGotoEntityOffset(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags);
    }
    task_1.gotoEntityOffset = gotoEntityOffset;
    /**
     * No comment provided
     *
     * Hash: 0x338E7EF52B6095A9 | Since: 323
     */
    function gotoEntityOffsetXy(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags) {
        TaskGotoEntityOffsetXy(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags);
    }
    task_1.gotoEntityOffsetXy = gotoEntityOffsetXy;
    /**
     * No comment provided
     *
     * Hash: 0xD76B57B44F1E6F8B | Since: 323
     */
    function goStraightToCoord(ped, pos, speed, timeout, targetHeading, distanceToSlide) {
        TaskGoStraightToCoord(ped, pos.x, pos.y, pos.z, speed, timeout, targetHeading, distanceToSlide);
    }
    task_1.goStraightToCoord = goStraightToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x61E360B7E040D12E | Since: 323
     */
    function goStraightToCoordRelativeToEntity(ped, entity, pos, moveBlendRatio, time) {
        TaskGoStraightToCoordRelativeToEntity(ped, entity, pos.x, pos.y, pos.z, moveBlendRatio, time);
    }
    task_1.goStraightToCoordRelativeToEntity = goStraightToCoordRelativeToEntity;
    /**
     * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
     *
     * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
     *
     * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
     *
     * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
     *
     * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
     *
     * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
     *
     * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
     *
     * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
     *
     * Example:
     *
     * enum AimFlag
     * {
     * AimAtFocusLocation,
     * AimAtGoToLocation
     * };
     *
     * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
     *
     * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
     *
     * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
     *
     * // 1st example
     * `TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f \/\*run\*\/, true \/\*shoot\*\/, 3.0f \/\*stop at\*\/, 0.0f \/\*noRoadsDistance\*\/, true \/\*always true\*\/, 0 \/\*possible flag\*\/, AimFlag::AimAtGoToLocation, -957453492 \/\*FullAuto pattern\*\/);`
     *
     * // 2nd example
     * `TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f \/\*walk\*\/, false \/\*don't shoot\*\/, 3.0f \/\*stop at\*\/, 0.0f \/\*noRoadsDistance\*\/, true \/\*always true\*\/, 0 \/\*possible flag\*\/, AimFlag::AimAtFocusLocation, -957453492 \/\*FullAuto pattern\*\/);`
     *
     *
     * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
     *
     * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
     *
     * Hash: 0xA55547801EB331FC | Since: 323
     */
    function goToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern);
    }
    task_1.goToCoordAndAimAtHatedEntitiesNearCoord = goToCoordAndAimAtHatedEntitiesNearCoord;
    /**
     * example from fm_mission_controller
     *
     * `TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);`
     *
     *
     * Hash: 0x5BC448CB78FA3E88 | Since: 323
     */
    function goToCoordAnyMeans(ped, pos, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets) {
        TaskGoToCoordAnyMeans(ped, pos.x, pos.y, pos.z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets);
    }
    task_1.goToCoordAnyMeans = goToCoordAnyMeans;
    /**
     * No comment provided
     *
     * Hash: 0x1DD45F9ECFDB1BC9 | Since: 323
     */
    function goToCoordAnyMeansExtraParams(ped, pos, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS) {
        TaskGoToCoordAnyMeansExtraParams(ped, pos.x, pos.y, pos.z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS);
    }
    task_1.goToCoordAnyMeansExtraParams = goToCoordAnyMeansExtraParams;
    /**
     * No comment provided
     *
     * Hash: 0xB8ECD61F531A7B02 | Since: 323
     */
    function goToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, pos, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist) {
        TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, pos.x, pos.y, pos.z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist);
    }
    task_1.goToCoordAnyMeansExtraParamsWithCruiseSpeed = goToCoordAnyMeansExtraParamsWithCruiseSpeed;
    /**
     * movement_speed: mostly 2f, but also 1/1.2f, etc.
     * p8: always false
     * p9: 2f
     * p10: 0.5f
     * p11: true
     * p12: 0 / 512 / 513, etc.
     * p13: 0
     * firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
     *
     * Hash: 0x11315AB3385B8AC0 | Since: 323
     */
    function goToCoordWhileAimingAtCoord(ped, pos, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskGoToCoordWhileAimingAtCoord(ped, pos.x, pos.y, pos.z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern);
    }
    task_1.goToCoordWhileAimingAtCoord = goToCoordWhileAimingAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xB2A16444EAD9AE47 | Since: 323
     */
    function goToCoordWhileAimingAtEntity(ped, pos, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskGoToCoordWhileAimingAtEntity(ped, pos.x, pos.y, pos.z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time);
    }
    task_1.goToCoordWhileAimingAtEntity = goToCoordWhileAimingAtEntity;
    /**
     * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
     *
     * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
     *
     * `Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)`
     *
     * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
     *
     * enum EGOTO_ENTITY_SCRIPT_FLAGS
     * {
     * EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
     * };
     *
     * Hash: 0x6A071245EB0D1882 | Since: 323
     */
    function goToEntity(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags) {
        TaskGoToEntity(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags);
    }
    task_1.goToEntity = goToEntity;
    /**
     * No comment provided
     *
     * Hash: 0x04701832B739DCE5 | Since: 323
     */
    function goToEntityWhileAimingAtCoord(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskGoToEntityWhileAimingAtCoord(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
    }
    task_1.goToEntityWhileAimingAtCoord = goToEntityWhileAimingAtCoord;
    /**
     * shootatEntity:
     * If true, peds will shoot at Entity till it is dead.
     * If false, peds will just walk till they reach the entity and will cease shooting.
     *
     * Hash: 0x97465886D35210E9 | Since: 323
     */
    function goToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskGoToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
    }
    task_1.goToEntityWhileAimingAtEntity = goToEntityWhileAimingAtEntity;
    /**
     * No comment provided
     *
     * Hash: 0xD2A207EEBDF9889B | Since: 323
     */
    function guardAssignedDefensiveArea(ped, pos, heading, maxPatrolProximity, timer) {
        TaskGuardAssignedDefensiveArea(ped, pos.x, pos.y, pos.z, heading, maxPatrolProximity, timer);
    }
    task_1.guardAssignedDefensiveArea = guardAssignedDefensiveArea;
    /**
     * From re_prisonvanbreak:
     *
     * `TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);`
     *
     * Hash: 0x4A58A47A72E3FCB4 | Since: 323
     */
    function guardCurrentPosition(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea) {
        TaskGuardCurrentPosition(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea);
    }
    task_1.guardCurrentPosition = guardCurrentPosition;
    /**
     * No comment provided
     *
     * Hash: 0xC946FE14BE0EB5E2 | Since: 323
     */
    function guardSphereDefensiveArea(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, pos, defensiveAreaRadius) {
        TaskGuardSphereDefensiveArea(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, pos.x, pos.y, pos.z, defensiveAreaRadius);
    }
    task_1.guardSphereDefensiveArea = guardSphereDefensiveArea;
    /**
     * In the scripts, p3 was always -1.
     *
     * p3 seems to be duration or timeout of turn animation.
     * Also facingPed can be 0 or -1 so ped will just raise hands up.
     *
     * Hash: 0xF2EAB31979A7F910 | Since: 323
     */
    function handsUp(ped, duration, facingPed, timeToFacePed, flags) {
        TaskHandsUp(ped, duration, facingPed, timeToFacePed, flags);
    }
    task_1.handsUp = handsUp;
    /**
     * Ped pilot should be in a heli.
     * EntityToFollow can be a vehicle or Ped.
     *
     * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
     *
     *
     * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
     *
     * Hash: 0xAC83B1DB38D0ADA0 | Since: 323
     */
    function heliChase(pilot, entityToFollow, pos) {
        TaskHeliChase(pilot, entityToFollow, pos.x, pos.y, pos.z);
    }
    task_1.heliChase = heliChase;
    /**
     * No comment provided
     *
     * Hash: 0xB385523325077210 | Since: 1290
     */
    function heliEscortHeli(pilot, heli1, heli2, offsetX, offsetY, offsetZ) {
        TaskHeliEscortHeli(pilot, heli1, heli2, offsetX, offsetY, offsetZ);
    }
    task_1.heliEscortHeli = heliEscortHeli;
    /**
     * Must have targetVehicle, targetPed, OR destination X/Y/Z set
     * Will follow targeted vehicle/ped, or fly to destination
     * Set whichever is not being used to 0
     *
     *
     * Mission mode type:
     * - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
     * - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
     * - 8: Makes the heli flee from the ped/vehicle/coordinate
     * - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
     * - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
     * - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
     * - 20: Makes the heli land when near target ped. It won't resume chasing.
     * - 21: Emulates a helicopter crash
     * - 23: makes the heli circle erratically around ped
     *
     *
     * Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
     * You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.
     *
     * If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT.
     *
     * Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from
     *
     * Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.
     *
     * Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
     * 1: Forces heading to face E
     * 2: Unknown
     * 4: Tight circles around coordinate destination
     * 8: Unknown
     * 16: Circles around coordinate destination facing towards destination
     * 32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
     * 64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
     * 128: Unknown
     * 256: Unknown
     * 512: Unknown
     * 1024: Unknown
     * 2048: Reverses direction of circling (mission type 9) to clockwise
     * 4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
     * 8192: Unknown
     *
     * Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.
     *
     * Notes updated by PNWParksFan, May 2021
     *
     *
     * Hash: 0xDAD029E187A2BEB4 | Since: 323
     */
    function heliMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags) {
        TaskHeliMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags);
    }
    task_1.heliMission = heliMission;
    /**
     * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
     *
     * v350: Ped ped, bool unused
     * v678: Ped ped, bool unused, bool flag1, bool flag2
     *
     * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
     *
     * Hash: 0x0AE4086104E067B1 | Since: 323
     */
    function jump(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce) {
        TaskJump(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce);
    }
    task_1.jump = jump;
    /**
     * Flags are the same flags used in TASK_LEAVE_VEHICLE
     *
     * Hash: 0x504D54DF3F6F2247 | Since: 323
     */
    function leaveAnyVehicle(ped, delayTime, flags) {
        TaskLeaveAnyVehicle(ped, delayTime, flags);
    }
    task_1.leaveAnyVehicle = leaveAnyVehicle;
    /**
     * Flags from decompiled scripts:
     * 0 = normal exit and closes door.
     * 1 = normal exit and closes door.
     * 16 = teleports outside, door kept closed.
     * 64 = normal exit and closes door, maybe a bit slower animation than 0.
     * 256 = normal exit but does not close the door.
     * 4160 = ped is throwing himself out, even when the vehicle is still.
     * 262144 = ped moves to passenger seat first, then exits normally
     *
     * Others to be tried out: 320, 512, 131072.
     *
     * Hash: 0xD3DBCE61A490BE02 | Since: 323
     */
    function leaveVehicle(ped, vehicle, flags) {
        TaskLeaveVehicle(ped, vehicle, flags);
    }
    task_1.leaveVehicle = leaveVehicle;
    /**
     * enum eScriptLookatFlags
     * {
     * SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
     * SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
     * SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
     * SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
     * SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
     * SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
     * SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
     * SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
     * SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
     * SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
     * SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
     * SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
     * SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
     * SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes
     * SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
     * SLF_FROM_SCRIPT                = 32768, // internal use only
     * SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
     * };
     *
     * Hash: 0x6FA46612594F7973 | Since: 323
     */
    function lookAtCoord(entity, pos, duration, flags, priority) {
        TaskLookAtCoord(entity, pos.x, pos.y, pos.z, duration, flags, priority);
    }
    task_1.lookAtCoord = lookAtCoord;
    /**
     * For flags, please refer to TASK_LOOK_AT_COORD.
     *
     * Hash: 0x69F4BE8C8CC4796C | Since: 323
     */
    function lookAtEntity(ped, lookAt, duration, flags, priority) {
        TaskLookAtEntity(ped, lookAt, duration, flags, priority);
    }
    task_1.lookAtEntity = lookAtEntity;
    /**
     * Example:
     * `TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);`
     *
     * Hash: 0xD5B35BEA41919ACB | Since: 323
     */
    function moveNetworkAdvancedByName(ped, network, pos, rot, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags) {
        TaskMoveNetworkAdvancedByName(ped, network, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags);
    }
    task_1.moveNetworkAdvancedByName = moveNetworkAdvancedByName;
    /**
     * No comment provided
     *
     * Hash: 0x29682E2CCF21E9B5 | Since: 1868
     */
    function moveNetworkAdvancedByNameWithInitParams(ped, network, pos, rot, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags) {
        return Citizen.invokeNative('0x29682E2CCF21E9B5', ped, network, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags);
    }
    task_1.moveNetworkAdvancedByNameWithInitParams = moveNetworkAdvancedByNameWithInitParams;
    /**
     * Example:
     * `TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);`
     *
     * Hash: 0x2D537BA194896636 | Since: 323
     */
    function moveNetworkByName(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags) {
        TaskMoveNetworkByName(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags);
    }
    task_1.moveNetworkByName = moveNetworkByName;
    /**
     * Used only once in the scripts (am_mp_nightclub)
     *
     * Hash: 0x3D45B0B355C5E0C9 | Since: 1493
     */
    function moveNetworkByNameWithInitParams(ped, network, blendDuration, allowOverrideCloneUpdate, animDict, flags) {
        return TaskMoveNetworkByNameWithInitParams(ped, network, blendDuration, allowOverrideCloneUpdate, animDict, flags);
    }
    task_1.moveNetworkByNameWithInitParams = moveNetworkByNameWithInitParams;
    /**
     * The given ped will try to open the nearest door to 'seat'.
     * Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
     *
     * Hash: 0x965791A9A488A062 | Since: 323
     */
    function openVehicleDoor(ped, vehicle, timeOut, seat, speed) {
        TaskOpenVehicleDoor(ped, vehicle, timeOut, seat, speed);
    }
    task_1.openVehicleDoor = openVehicleDoor;
    /**
     * Second parameter is unused.
     *
     * second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
     *
     * Hash: 0xD2F1C53C97EE81AB | Since: 323
     */
    function parachute(ped, giveParachuteItem, instant) {
        TaskParachute(ped, giveParachuteItem, instant);
    }
    task_1.parachute = parachute;
    /**
     * `makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED`
     *
     * Hash: 0xB33E291AFA6BD03A | Since: 323
     */
    function parachuteToTarget(ped, pos) {
        TaskParachuteToTarget(ped, pos.x, pos.y, pos.z);
    }
    task_1.parachuteToTarget = parachuteToTarget;
    /**
     * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
     *
     * "miss_Tower_01" (this went from 01 - 10)
     * "miss_Ass0" (0, 4, 6, 3)
     * "MISS_PATROL_8"
     *
     * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
     *
     *
     * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
     * From the scripts
     *
     * `TASK::OPEN_PATROL_ROUTE("miss_Ass0");`
     * `TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0\/\*3\*\/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
     * `TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1\/\*3\*\/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
     * `TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2\/\*3\*\/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
     * `TASK::ADD_PATROL_ROUTE_LINK(0, 1);`
     * `TASK::ADD_PATROL_ROUTE_LINK(1, 2);`
     * `TASK::ADD_PATROL_ROUTE_LINK(2, 0);`
     * `TASK::CLOSE_PATROL_ROUTE();`
     * `TASK::CREATE_PATROL_ROUTE();`
     *
     *
     *
     * Hash: 0xBDA5DF49D080FE4E | Since: 323
     */
    function patrol(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt) {
        TaskPatrol(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt);
    }
    task_1.patrol = patrol;
    /**
     * Stand still (?)
     *
     * Hash: 0xE73A266DB0CA9042 | Since: 323
     */
    function pause(ped, ms) {
        TaskPause(ped, ms);
    }
    task_1.pause = pause;
    /**
     * No comment provided
     *
     * Hash: 0xD04FE6765D990A06 | Since: 323
     */
    function pedSlideToCoord(ped, pos, heading, speed) {
        TaskPedSlideToCoord(ped, pos.x, pos.y, pos.z, heading, speed);
    }
    task_1.pedSlideToCoord = pedSlideToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x5A4A6A6D3DC64F52 | Since: 323
     */
    function pedSlideToCoordHdgRate(ped, pos, heading, speed, headingChangeRate) {
        TaskPedSlideToCoordHdgRate(ped, pos.x, pos.y, pos.z, heading, speed, headingChangeRate);
    }
    task_1.pedSlideToCoordHdgRate = pedSlideToCoordHdgRate;
    /**
     * No comment provided
     *
     * Hash: 0x5ABA3986D90D8A3B | Since: 323
     */
    function performSequence(ped, taskSequenceId) {
        TaskPerformSequence(ped, taskSequenceId);
    }
    task_1.performSequence = performSequence;
    /**
     * No comment provided
     *
     * Hash: 0x89221B16730234F0 | Since: 323
     */
    function performSequenceFromProgress(ped, taskIndex, progress1, progress2) {
        TaskPerformSequenceFromProgress(ped, taskIndex, progress1, progress2);
    }
    task_1.performSequenceFromProgress = performSequenceFromProgress;
    /**
     * No comment provided
     *
     * Hash: 0x8C33220C8D78CA0D | Since: 944
     */
    function performSequenceLocally(ped, taskSequenceId) {
        TaskPerformSequenceLocally(ped, taskSequenceId);
    }
    task_1.performSequenceLocally = performSequenceLocally;
    /**
     * No comment provided
     *
     * Hash: 0x2D2386F273FF7A25 | Since: 323
     */
    function planeChase(pilot, entityToFollow, pos) {
        TaskPlaneChase(pilot, entityToFollow, pos.x, pos.y, pos.z);
    }
    task_1.planeChase = planeChase;
    /**
     * No comment provided
     *
     * Hash: 0xF7F9DCCA89E7505B | Since: 1290
     */
    function planeGotoPreciseVtol(ped, vehicle, pos, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot) {
        TaskPlaneGotoPreciseVtol(ped, vehicle, pos.x, pos.y, pos.z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot);
    }
    task_1.planeGotoPreciseVtol = planeGotoPreciseVtol;
    /**
     * No comment provided
     *
     * Hash: 0xBF19721FA34D32C0 | Since: 323
     */
    function planeLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) {
        TaskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
    }
    task_1.planeLand = planeLand;
    /**
     * EXAMPLE USAGE:
     *
     * Fly around target (Precautiously, keeps high altitude):
     * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
     *
     * Fly around target (Dangerously, keeps VERY low altitude):
     * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
     *
     * Fly directly into target:
     * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
     *
     * EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
     *
     * 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
     * Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
     *
     * VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
     *
     * 0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
     * 1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
     * 300+ =  Vehicle behaves entirely like a normal gameplay plane.
     *
     * 'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
     *
     * Scenario: Destination is an Entity on ground level, wide open field
     * -5000 = Pilot kamikazes directly into Entity
     * -1000 = Pilot flies extremely low -around- Entity, very prone to crashing
     * -200 = Pilot flies lower than average around Entity.
     * 0 = Pilot flies around Entity, normal altitude
     * 200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
     *
     * -- Valid mission types found in the exe: --
     *
     * 0 = None
     * 1 = Unk
     * 2 = CTaskVehicleRam
     * 3 = CTaskVehicleBlock
     * 4 = CTaskVehicleGoToPlane
     * 5 = CTaskVehicleStop
     * 6 = CTaskVehicleAttack
     * 7 = CTaskVehicleFollow
     * 8 = CTaskVehicleFleeAirborne
     * 9= CTaskVehicleCircle
     * 10 = CTaskVehicleEscort
     * 15 = CTaskVehicleFollowRecording
     * 16 = CTaskVehiclePoliceBehaviour
     * 17 = CTaskVehicleCrash
     *
     * Hash: 0x23703CD154E83B88 | Since: 323
     */
    function planeMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise) {
        TaskPlaneMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise);
    }
    task_1.planeMission = planeMission;
    /**
     * No comment provided
     *
     * Hash: 0x92C360B5F15D2302 | Since: 1103
     */
    function planeTaxi(pilot, aircraft, pos, cruiseSpeed, targetReached) {
        TaskPlaneTaxi(pilot, aircraft, pos.x, pos.y, pos.z, cruiseSpeed, targetReached);
    }
    task_1.planeTaxi = planeTaxi;
    /**
     * No comment provided
     *
     * Hash: 0x965FEC691D55E9BF | Since: 323
     */
    function plantBomb(ped, pos, heading) {
        TaskPlantBomb(ped, pos.x, pos.y, pos.z, heading);
    }
    task_1.plantBomb = plantBomb;
    /**
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * float speed > normal speed is 8.0f
     * ----------------------
     *
     * float speedMultiplier > multiply the playback speed
     * ----------------------
     *
     * int duration: time in millisecond
     * ----------------------
     * -1 _ _ _ _ _ _ _> Default (see flag)
     * 0 _ _ _ _ _ _ _ > Not play at all
     * Small value _ _ > Slow down animation speed
     * Other _ _ _ _ _ > freeze player control until specific time (ms) has
     * _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
     * _ _ _ _ _ _ _ _ _ controllable.)
     *
     * int flag:
     * ----------------------
     * enum eAnimationFlags
     * {
     * ANIM_FLAG_NORMAL = 0,
     * ANIM_FLAG_REPEAT = 1,
     * ANIM_FLAG_STOP_LAST_FRAME = 2,
     * ANIM_FLAG_UPPERBODY = 16,
     * ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
     * ANIM_FLAG_CANCELABLE = 120,
     * };
     * Odd number : loop infinitely
     * Even number : Freeze at last frame
     * Multiple of 4: Freeze at last frame but controllable
     *
     * 01 to 15 > Full body
     * 10 to 31 > Upper body
     * 32 to 47 > Full body > Controllable
     * 48 to 63 > Upper body > Controllable
     * ...
     * 001 to 255 > Normal
     * 256 to 511 > Garbled
     * ...
     *
     * playbackRate:
     *
     * values are between 0.0 and 1.0
     *
     *
     * lockX:
     *
     * 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
     * > 1 for mini@sprunk
     *
     *
     * lockY:
     *
     * 0 in most cases
     * 1 for missfam5_yoga, missfra1mcs_2_crew_react
     *
     *
     * lockZ:
     *
     * 0 for single player
     * Can be 1 but only for MP
     *
     * Hash: 0xEA47FE3719165B94 | Since: 323
     */
    function playAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
        TaskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
    }
    task_1.playAnim = playAnim;
    /**
     * It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x83CDB10EA29B370B | Since: 323
     */
    function playAnimAdvanced(ped, animDict, animName, pos, rot, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags) {
        TaskPlayAnimAdvanced(ped, animDict, animName, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags);
    }
    task_1.playAnimAdvanced = playAnimAdvanced;
    /**
     * Example from the scripts:
     * `TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);`
     *
     * =========================================================
     * ^^ No offense, but Idk how that would really help anyone.
     *
     * As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
     *
     * Known boneMaskTypes'
     * "BONEMASK_HEADONLY"
     * "BONEMASK_HEAD_NECK_AND_ARMS"
     * "BONEMASK_HEAD_NECK_AND_L_ARM"
     * "BONEMASK_HEAD_NECK_AND_R_ARM"
     *
     * p4 known args - 0.0f, 0.5f, 0.25f
     * p5 known args - 0.0f, 0.25f
     * p6 known args - 1 if a global if check is passed.
     * p7 known args - 1 if a global if check is passed.
     *
     * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
     * =========================================================
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0x8FBB6758B3B3E9EC | Since: 323
     */
    function playPhoneGestureAnimation(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame) {
        TaskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame);
    }
    task_1.playPhoneGestureAnimation = playPhoneGestureAnimation;
    /**
     * No comment provided
     *
     * Hash: 0x4172393E6BE1FECE | Since: 323
     */
    function putPedDirectlyIntoCover(ped, pos, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry) {
        TaskPutPedDirectlyIntoCover(ped, pos.x, pos.y, pos.z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry);
    }
    task_1.putPedDirectlyIntoCover = putPedDirectlyIntoCover;
    /**
     * from armenian3.c4
     *
     * `TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);`
     *
     *
     * Hash: 0x1C6CD14A876FFE39 | Since: 323
     */
    function putPedDirectlyIntoMelee(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags) {
        TaskPutPedDirectlyIntoMelee(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags);
    }
    task_1.putPedDirectlyIntoMelee = putPedDirectlyIntoMelee;
    /**
     * Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
     * p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
     *
     * Hash: 0xEAF66ACDDC794793 | Since: 1868
     */
    function rappelDownWallUsingClipsetOverride(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet) {
        TaskRappelDownWall(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, undefined, undefined);
    }
    task_1.rappelDownWallUsingClipsetOverride = rappelDownWallUsingClipsetOverride;
    /**
     * minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling
     *
     * Only appears twice in the scripts.
     *
     * `TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);`
     * `TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);`
     *
     * Hash: 0x09693B0312F91649 | Since: 323
     */
    function rappelFromHeli(ped, minHeightAboveGround) {
        TaskRappelFromHeli(ped, minHeightAboveGround);
    }
    task_1.rappelFromHeli = rappelFromHeli;
    /**
     * No comment provided
     *
     * Hash: 0x72C896464915D1B1 | Since: 323
     */
    function reactAndFleePed(ped, fleeTarget) {
        TaskReactAndFleePed(ped, fleeTarget);
    }
    task_1.reactAndFleePed = reactAndFleePed;
    /**
     * The 2nd param (drawWeapon) is not implemented.
     *
     * -----------------------------------------------------------------------
     *
     * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
     *
     * `if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {`
     * `TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);`
     * }
     *
     * Hash: 0x62D2916F56B9CD2D | Since: 323
     */
    function reloadWeapon(ped, drawWeapon) {
        TaskReloadWeapon(ped, drawWeapon);
    }
    task_1.reloadWeapon = reloadWeapon;
    /**
     * From fm_mission_controller.c:
     * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
     * vVar28 = {0.094f, 0.02f, -0.005f};
     * vVar29 = {-92.24f, 63.64f, 150.24f};
     * func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
     * set_entity_lod_dist(net_to_ent(uVar30), 500);
     * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
     * Var31.imm_4 = 1065353216;
     * Var31.imm_5 = 1065353216;
     * Var31.imm_9 = 1065353216;
     * Var31.imm_10 = 1065353216;
     * Var31.imm_14 = 1065353216;
     * Var31.imm_15 = 1065353216;
     * Var31.imm_17 = 1040187392;
     * Var31.imm_18 = 1040187392;
     * Var31.imm_19 = -1;
     * Var32.imm_4 = 1065353216;
     * Var32.imm_5 = 1065353216;
     * Var32.imm_9 = 1065353216;
     * Var32.imm_10 = 1065353216;
     * Var32.imm_14 = 1065353216;
     * Var32.imm_15 = 1065353216;
     * Var32.imm_17 = 1040187392;
     * Var32.imm_18 = 1040187392;
     * Var32.imm_19 = -1;
     * Var31 = 1;
     * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
     * Var31.imm_2 = "idle";
     * Var31.imm_20 = 1048633;
     * Var31.imm_4 = 0.5f;
     * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
     * task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
     * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
     * remove_anim_dict("anim@heists@biolab@");
     *
     * Hash: 0x126EF75F1E17ABE5 | Since: 323
     */
    function scriptedAnimation(ped, blendInDelta, blendOutDelta) {
        return TaskScriptedAnimation(ped, blendInDelta, blendOutDelta);
    }
    task_1.scriptedAnimation = scriptedAnimation;
    /**
     * No comment provided
     *
     * Hash: 0x84D32B3BEC531324 | Since: 323
     */
    function seekCoverFromPed(ped, target, duration, allowPeekingAndFiring) {
        TaskSeekCoverFromPed(ped, target, duration, allowPeekingAndFiring);
    }
    task_1.seekCoverFromPed = seekCoverFromPed;
    /**
     * No comment provided
     *
     * Hash: 0x75AC2B60386D89F2 | Since: 323
     */
    function seekCoverFromPos(ped, pos, duration, allowPeekingAndFiring) {
        TaskSeekCoverFromPos(ped, pos.x, pos.y, pos.z, duration, allowPeekingAndFiring);
    }
    task_1.seekCoverFromPos = seekCoverFromPos;
    /**
     * p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.
     *
     * from michael2:
     * `TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);`
     *
     *
     * appears to be shorter variation
     * from michael3:
     * `TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);`
     *
     * Hash: 0x39246A6958EF072C | Since: 323
     */
    function seekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute) {
        TaskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute);
    }
    task_1.seekCoverToCoords = seekCoverToCoords;
    /**
     * p5 is always -1
     *
     * Hash: 0xD43D95C7A869447F | Since: 323
     */
    function seekCoverToCoverPoint(ped, coverpoint, pos, time, allowPeekingAndFiring) {
        TaskSeekCoverToCoverPoint(ped, coverpoint, pos.x, pos.y, pos.z, time, allowPeekingAndFiring);
    }
    task_1.seekCoverToCoverPoint = seekCoverToCoverPoint;
    /**
     * I cant believe I have to define this, this is one of the best natives.
     *
     * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
     *
     * Since it is a task, every time the native is called the ped will stop for a moment.
     *
     * Hash: 0x90D2156198831D69 | Since: 323
     */
    function setBlockingOfNonTemporaryEvents(ped, toggle) {
        TaskSetBlockingOfNonTemporaryEvents(ped, toggle);
    }
    task_1.setBlockingOfNonTemporaryEvents = setBlockingOfNonTemporaryEvents;
    /**
     * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
     *
     * Hash: 0xEB8517DDA73720DA | Since: 323
     */
    function setDecisionMaker(ped, decisionMakerId) {
        if (typeof decisionMakerId === 'string')
            decisionMakerId = misc.getHashKey(decisionMakerId);
        TaskSetDecisionMaker(ped, decisionMakerId);
    }
    task_1.setDecisionMaker = setDecisionMaker;
    /**
     * No comment provided
     *
     * Hash: 0x933C06518B52A9A4 | Since: 323
     */
    function setSphereDefensiveArea(ped, pos, radius) {
        TaskSetSphereDefensiveArea(ped, pos.x, pos.y, pos.z, radius);
    }
    task_1.setSphereDefensiveArea = setSphereDefensiveArea;
    /**
     * No comment provided
     *
     * Hash: 0x60A19CF85FF4CEFA | Since: 3407
     */
    function sharkCircleCoord(ped, pos, moveBlendRatio, radius) {
        Citizen.invokeNative('0x60A19CF85FF4CEFA', ped, pos.x, pos.y, pos.z, moveBlendRatio, radius);
    }
    task_1.sharkCircleCoord = sharkCircleCoord;
    /**
     * No comment provided
     *
     * Hash: 0x452419CBD838065B | Since: 323
     */
    function shockingEventReact(ped, eventHandle) {
        TaskShockingEventReact(ped, eventHandle);
    }
    task_1.shockingEventReact = shockingEventReact;
    /**
     * Firing Pattern Hash Information: https://pastebin.com/Px036isB
     *
     * Hash: 0x46A6CC01E0826106 | Since: 323
     */
    function shootAtCoord(ped, pos, duration, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskShootAtCoord(ped, pos.x, pos.y, pos.z, duration, firingPattern);
    }
    task_1.shootAtCoord = shootAtCoord;
    /**
     * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
     * Entity aimedentity;
     * `Player player = PLAYER::PLAYER_ID();`
     * `PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);`
     *
     * //bg is an array of peds
     * `TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));`
     *
     * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
     *
     * Firing Pattern Hash Information: https://pastebin.com/Px036isB
     *
     * Hash: 0x08DA95E8298AE772 | Since: 323
     */
    function shootAtEntity(entity, target, duration, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        TaskShootAtEntity(entity, target, duration, firingPattern);
    }
    task_1.shootAtEntity = shootAtEntity;
    /**
     * Makes the specified ped shuffle to the next vehicle seat.
     * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
     *
     * Hash: 0x7AA80209BDA643EB | Since: 323
     */
    function shuffleToNextVehicleSeat(ped, vehicle, useAlternateShuffle) {
        TaskShuffleToNextVehicleSeat(ped, vehicle, useAlternateShuffle);
    }
    task_1.shuffleToNextVehicleSeat = shuffleToNextVehicleSeat;
    /**
     * No comment provided
     *
     * Hash: 0x601736CFE536B0A0 | Since: 323
     */
    function skyDive(ped, instant) {
        TaskSkyDive(ped, instant);
    }
    task_1.skyDive = skyDive;
    /**
     * Makes the specified ped flee the specified distance from the specified position.
     *
     * Hash: 0x94587F17E9C365D5 | Since: 323
     */
    function smartFleeCoord(ped, pos, distance, time, preferPavements, quitIfOutOfRange) {
        TaskSmartFleeCoord(ped, pos.x, pos.y, pos.z, distance, time, preferPavements, quitIfOutOfRange);
    }
    task_1.smartFleeCoord = smartFleeCoord;
    /**
     * Makes a ped run away from another ped (fleeTarget).
     *
     * distance = ped will flee this distance.
     * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
     *
     * Hash: 0x22B0D0E37CCB840D | Since: 323
     */
    function smartFleePed(ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed) {
        TaskSmartFleePed(ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed);
    }
    task_1.smartFleePed = smartFleePed;
    /**
     * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
     *
     * Hash: 0xAE032F8BBA959E90 | Since: 323
     */
    function standGuard(ped, pos, heading, scenarioName) {
        TaskStandGuard(ped, pos.x, pos.y, pos.z, heading, scenarioName);
    }
    task_1.standGuard = standGuard;
    /**
     * Makes the specified ped stand still for (time) milliseconds.
     *
     * Hash: 0x919BE13EED931959 | Since: 323
     */
    function standStill(ped, time) {
        TaskStandStill(ped, time);
    }
    task_1.standStill = standStill;
    /**
     * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     *
     * `Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.`
     * ---------------
     * The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
     *
     * The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
     *
     * I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
     *
     * I have no idea what the last 3 parameters are, but I'll try to find out.
     *
     * -going on the last 3 parameters, they appear to always be "0, 0, 1"
     *
     * p6 -1 also used in scrips
     *
     * p7 used for sitting scenarios
     *
     * p8 teleports ped to position
     *
     * Hash: 0xFA4EFC79F69D4F07 | Since: 323
     */
    function startScenarioAtPosition(ped, scenarioName, pos, heading, duration, sittingScenario, teleport) {
        TaskStartScenarioAtPosition(ped, scenarioName, pos.x, pos.y, pos.z, heading, duration, sittingScenario, teleport);
    }
    task_1.startScenarioAtPosition = startScenarioAtPosition;
    /**
     * Plays a scenario on a Ped at their current location.
     *
     * unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
     * playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
     *
     * ----
     *
     * From "am_hold_up.ysc.c4" at line 339:
     *
     * `TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);`
     *
     * I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
     * WORLD_HUMAN_SMOKING
     * WORLD_HUMAN_HANG_OUT_STREET
     * WORLD_HUMAN_STAND_MOBILE
     *
     * This makes sense, as these are what I commonly see when going by a liquor store.
     * -------------------------
     * List of scenarioNames: https://pastebin.com/6mrYTdQv
     * (^ Thank you so fucking much for this)
     *
     * Also these:
     * WORLD_FISH_FLEE
     * DRIVE
     * WORLD_HUMAN_HIKER
     * WORLD_VEHICLE_ATTRACTOR
     * WORLD_VEHICLE_BICYCLE_MOUNTAIN
     * WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
     * WORLD_VEHICLE_BIKER
     * WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
     * WORLD_VEHICLE_CONSTRUCTION_SOLO
     * WORLD_VEHICLE_DRIVE_PASSENGERS
     * WORLD_VEHICLE_DRIVE_SOLO
     * WORLD_VEHICLE_EMPTY
     * WORLD_VEHICLE_PARK_PARALLEL
     * WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
     * WORLD_VEHICLE_POLICE_BIKE
     * WORLD_VEHICLE_POLICE_CAR
     * WORLD_VEHICLE_POLICE_NEXT_TO_CAR
     * WORLD_VEHICLE_SALTON_DIRT_BIKE
     * WORLD_VEHICLE_TRUCK_LOGS
     *
     * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
     *
     * Hash: 0x142A02425FF02BD9 | Since: 323
     */
    function startScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim) {
        TaskStartScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim);
    }
    task_1.startScenarioInPlace = startScenarioInPlace;
    /**
     * Makes the ped run to take cover
     *
     * Hash: 0xE5DA8615A6180789 | Since: 323
     */
    function stayInCover(ped) {
        TaskStayInCover(ped);
    }
    task_1.stayInCover = stayInCover;
    /**
     * known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
     *
     * Hash: 0xAA5DC05579D60BD9 | Since: 323
     */
    function stealthKill(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags) {
        if (typeof stealthKillActionResultHash === 'string')
            stealthKillActionResultHash = misc.getHashKey(stealthKillActionResultHash);
        TaskStealthKill(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags);
    }
    task_1.stealthKill = stealthKill;
    /**
     * No comment provided
     *
     * Hash: 0x3FA00D4F4641BFAE | Since: 323
     */
    function stopPhoneGestureAnimation(ped, blendOutOverride) {
        TaskStopPhoneGestureAnimation(ped, blendOutOverride);
    }
    task_1.stopPhoneGestureAnimation = stopPhoneGestureAnimation;
    /**
     * Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
     *
     * p0 is always 0, p5 is always 1
     *
     * p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
     *
     * Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
     *
     * Hash: 0xC22B40579A498CA4 | Since: 2189
     */
    function submarineGotoAndStop(ped, submarine, pos, autopilot) {
        TaskSubmarineGotoAndStop(ped, submarine, pos.x, pos.y, pos.z, autopilot);
    }
    task_1.submarineGotoAndStop = submarineGotoAndStop;
    /**
     * No comment provided
     *
     * Hash: 0xA21C51255B205245 | Since: 323
     */
    function swapWeapon(ped, drawWeapon) {
        TaskSwapWeapon(ped, drawWeapon);
    }
    task_1.swapWeapon = swapWeapon;
    /**
     * This function is called on peds in vehicles.
     *
     * anim: animation name
     * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
     * p5: no idea what it does but is usually -1
     *
     * Hash: 0x2047C02158D6405A | Since: 323
     */
    function sweepAimEntity(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration) {
        TaskSweepAimEntity(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration);
    }
    task_1.sweepAimEntity = sweepAimEntity;
    /**
     * No comment provided
     *
     * Hash: 0x7AFE8FDC10BC07D2 | Since: 323
     */
    function sweepAimPosition(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, pos, turnRate, blendInDuration) {
        TaskSweepAimPosition(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, pos.x, pos.y, pos.z, turnRate, blendInDuration);
    }
    task_1.sweepAimPosition = sweepAimPosition;
    /**
     * `TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);`
     *
     * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
     *
     * Hash: 0xEEA929141F699854 | Since: 323
     */
    function synchronizedScene(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags) {
        TaskSynchronizedScene(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags);
    }
    task_1.synchronizedScene = synchronizedScene;
    /**
     * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
     *
     * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
     * ---
     * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
     * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
     * ----------------------------------------------------
     * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
     *
     * Hash: 0x7285951DBF6B5A51 | Since: 323
     */
    function throwProjectile(ped, pos, ignoreCollisionEntityIndex, createInvincibleProjectile) {
        TaskThrowProjectile(ped, pos.x, pos.y, pos.z, ignoreCollisionEntityIndex, createInvincibleProjectile);
    }
    task_1.throwProjectile = throwProjectile;
    /**
     * used in sequence task
     *
     * both parameters seems to be always 0
     *
     * Hash: 0xAC96609B9995EDF8 | Since: 323
     */
    function toggleDuck(ped, toggleType) {
        TaskToggleDuck(ped, toggleType);
    }
    task_1.toggleDuck = toggleDuck;
    /**
     * duration in milliseconds
     *
     * Hash: 0x1DDA930A0AC38571 | Since: 323
     */
    function turnPedToFaceCoord(ped, pos, duration) {
        TaskTurnPedToFaceCoord(ped, pos.x, pos.y, pos.z, duration);
    }
    task_1.turnPedToFaceCoord = turnPedToFaceCoord;
    /**
     * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
     *
     * Hash: 0x5AD23D40115353AC | Since: 323
     */
    function turnPedToFaceEntity(ped, entity, duration) {
        TaskTurnPedToFaceEntity(ped, entity, duration);
    }
    task_1.turnPedToFaceEntity = turnPedToFaceEntity;
    /**
     * Actually has 3 params, not 2.
     *
     * p0: Ped
     * p1: int (or bool?)
     * p2: int
     *
     * Hash: 0xBD2A8EC3AF4DE7DB | Since: 323
     */
    function useMobilePhone(ped, usePhone, desiredPhoneMode) {
        TaskUseMobilePhone(ped, usePhone, desiredPhoneMode);
    }
    task_1.useMobilePhone = useMobilePhone;
    /**
     * No comment provided
     *
     * Hash: 0x5EE02954A14C69DB | Since: 323
     */
    function useMobilePhoneTimed(ped, duration) {
        TaskUseMobilePhoneTimed(ped, duration);
    }
    task_1.useMobilePhoneTimed = useMobilePhoneTimed;
    /**
     * p5 is always 0 in scripts
     *
     * Hash: 0x9FDA1B3D7E7028B3 | Since: 323
     */
    function useNearestScenarioChainToCoord(ped, pos, maxRange, timeToLeave) {
        TaskUseNearestScenarioChainToCoord(ped, pos.x, pos.y, pos.z, maxRange, timeToLeave);
    }
    task_1.useNearestScenarioChainToCoord = useNearestScenarioChainToCoord;
    /**
     * p5 is always -1 or 0 in scripts
     *
     * Hash: 0x97A28E63F0BA5631 | Since: 323
     */
    function useNearestScenarioChainToCoordWarp(ped, pos, radius, timeToLeave) {
        TaskUseNearestScenarioChainToCoordWarp(ped, pos.x, pos.y, pos.z, radius, timeToLeave);
    }
    task_1.useNearestScenarioChainToCoordWarp = useNearestScenarioChainToCoordWarp;
    /**
     * Updated variables
     *
     * `An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.`
     *
     * Hash: 0x277F471BA9DB000B | Since: 323
     */
    function useNearestScenarioToCoord(ped, pos, distance, duration) {
        TaskUseNearestScenarioToCoord(ped, pos.x, pos.y, pos.z, distance, duration);
    }
    task_1.useNearestScenarioToCoord = useNearestScenarioToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x58E2E0F23F6B76C3 | Since: 323
     */
    function useNearestScenarioToCoordWarp(ped, pos, radius, timeToLeave) {
        TaskUseNearestScenarioToCoordWarp(ped, pos.x, pos.y, pos.z, radius, timeToLeave);
    }
    task_1.useNearestScenarioToCoordWarp = useNearestScenarioToCoordWarp;
    /**
     * No comment provided
     *
     * Hash: 0x447C1E9EF844BC0F | Since: 323
     */
    function vehicleAimAtCoord(ped, pos) {
        TaskVehicleAimAtCoord(ped, pos.x, pos.y, pos.z);
    }
    task_1.vehicleAimAtCoord = vehicleAimAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xE41885592B08B097 | Since: 323
     */
    function vehicleAimAtPed(ped, target) {
        TaskVehicleAimAtPed(ped, target);
    }
    task_1.vehicleAimAtPed = vehicleAimAtPed;
    /**
     * chases targetEnt fast and aggressively
     * --
     * Makes ped (needs to be in vehicle) chase targetEnt.
     *
     * Hash: 0x3C08A8E30363B353 | Since: 323
     */
    function vehicleChase(driver, targetEnt) {
        TaskVehicleChase(driver, targetEnt);
    }
    task_1.vehicleChase = vehicleChase;
    /**
     * info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0xE2A2AA2F659D77A7 | Since: 323
     */
    function vehicleDriveToCoord(ped, vehicle, pos, speed, vehicleModel, drivingMode, stopRange, straightLineDistance) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        TaskVehicleDriveToCoord(ped, vehicle, pos.x, pos.y, pos.z, speed, undefined, vehicleModel, drivingMode, stopRange, straightLineDistance);
    }
    task_1.vehicleDriveToCoord = vehicleDriveToCoord;
    /**
     * No comment provided
     *
     * Hash: 0x158BB33F920D360C | Since: 323
     */
    function vehicleDriveToCoordLongrange(ped, vehicle, pos, speed, driveMode, stopRange) {
        TaskVehicleDriveToCoordLongrange(ped, vehicle, pos.x, pos.y, pos.z, speed, driveMode, stopRange);
    }
    task_1.vehicleDriveToCoordLongrange = vehicleDriveToCoordLongrange;
    /**
     * No comment provided
     *
     * Hash: 0x480142959D337D00 | Since: 323
     */
    function vehicleDriveWander(ped, vehicle, speed, drivingStyle) {
        TaskVehicleDriveWander(ped, vehicle, speed, drivingStyle);
    }
    task_1.vehicleDriveWander = vehicleDriveWander;
    /**
     * Makes a ped follow the targetVehicle with <minDistance> in between.
     *
     * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
     *
     * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
     * -1 = behind
     * 0 = ahead
     * 1 = left
     * 2 = right
     * 3 = back left
     * 4 = back right
     *
     * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
     *
     * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0x0FA6E4B75F302400 | Since: 323
     */
    function vehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance) {
        TaskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance);
    }
    task_1.vehicleEscort = vehicleEscort;
    /**
     * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
     *
     * drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
     *
     * Hash: 0xFC545A9F0626E3B6 | Since: 323
     */
    function vehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance) {
        TaskVehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
    }
    task_1.vehicleFollow = vehicleFollow;
    /**
     *
     *
     * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
     * p3 = 786468
     * p4 = 0
     * p5 = 16
     * p6 = -1 (angle?)
     * p7/8/9 = usually v3.zero
     * p10 = bool (repeat?)
     * p11 = 1073741824
     *
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0x3123FAA6DB1CF7ED | Since: 323
     */
    function vehicleFollowWaypointRecording(ped, vehicle, WPRecording) {
        TaskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, 0, 0, 0, 0, 0, false, 0);
    }
    task_1.vehicleFollowWaypointRecording = vehicleFollowWaypointRecording;
    /**
     * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
     *
     * WARNING:
     * A behaviorFlag value of 0 will result in a clunky, stupid driver!
     *
     * Recommended settings:
     * speed = 30.0f,
     * behaviorFlag = 156,
     * stoppingRange = 5.0f;
     *
     * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
     *
     * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
     *
     * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
     *
     * Hash: 0x195AEEB13CEFE2EE | Since: 323
     */
    function vehicleGotoNavmesh(ped, vehicle, pos, speed, behaviorFlag, stoppingRange) {
        TaskVehicleGotoNavmesh(ped, vehicle, pos.x, pos.y, pos.z, speed, behaviorFlag, stoppingRange);
    }
    task_1.vehicleGotoNavmesh = vehicleGotoNavmesh;
    /**
     * pilot, vehicle and altitude are rather self-explanatory.
     *
     * p4: is unused variable in the function.
     *
     * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
     *
     * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
     *
     * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
     *
     * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
     *
     * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
     *
     * Hash: 0x1E09C32048FEFD1C | Since: 323
     */
    function vehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags) {
        TaskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags);
    }
    task_1.vehicleHeliProtect = vehicleHeliProtect;
    /**
     * missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
     *
     * Hash: 0x659427E0EF36BCDE | Since: 323
     */
    function vehicleMission(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic) {
        TaskVehicleMission(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
    }
    task_1.vehicleMission = vehicleMission;
    /**
     * See TASK_VEHICLE_MISSION
     *
     * Hash: 0xF0AF20AA7731F8C3 | Since: 323
     */
    function vehicleMissionCoorsTarget(ped, vehicle, pos, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic) {
        TaskVehicleMissionCoorsTarget(ped, vehicle, pos.x, pos.y, pos.z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
    }
    task_1.vehicleMissionCoorsTarget = vehicleMissionCoorsTarget;
    /**
     * See TASK_VEHICLE_MISSION
     *
     * Hash: 0x9454528DF15D657A | Since: 323
     */
    function vehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic) {
        TaskVehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic);
    }
    task_1.vehicleMissionPedTarget = vehicleMissionPedTarget;
    /**
     * Modes:
     * 0 - ignore heading
     * 1 - park forward
     * 2 - park backwards
     *
     * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
     *
     * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
     *
     * Hash: 0x0F3E34E968EA374E | Since: 323
     */
    function vehiclePark(ped, vehicle, pos, heading, mode, radius, keepEngineOn) {
        TaskVehiclePark(ped, vehicle, pos.x, pos.y, pos.z, heading, mode, radius, keepEngineOn);
    }
    task_1.vehiclePark = vehiclePark;
    /**
     * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
     *
     * Here's how its used -
     *
     * `TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");`
     *
     * `TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0\/\*1\*\/], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");`
     *
     * FYI : Speedo is the name of van in which chop was put in the mission.
     *
     * Hash: 0x69F5C3BD0F3EBD89 | Since: 323
     */
    function vehiclePlayAnim(vehicle, animationSet, animationName) {
        TaskVehiclePlayAnim(vehicle, animationSet, animationName);
    }
    task_1.vehiclePlayAnim = vehiclePlayAnim;
    /**
     * No comment provided
     *
     * Hash: 0x5190796ED39C9B6D | Since: 323
     */
    function vehicleShootAtCoord(ped, pos, fireTolerance) {
        TaskVehicleShootAtCoord(ped, pos.x, pos.y, pos.z, fireTolerance);
    }
    task_1.vehicleShootAtCoord = vehicleShootAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x10AB107B887214D8 | Since: 323
     */
    function vehicleShootAtPed(ped, target, fireTolerance) {
        TaskVehicleShootAtPed(ped, target, fireTolerance);
    }
    task_1.vehicleShootAtPed = vehicleShootAtPed;
    /**
     * '1 - brake
     * '3 - brake + reverse
     * '4 - turn left 90 + braking
     * '5 - turn right 90 + braking
     * '6 - brake strong (handbrake?) until time ends
     * '7 - turn left + accelerate
     * '8 - turn right + accelerate
     * '9 - weak acceleration
     * '10 - turn left + restore wheel pos to center in the end
     * '11 - turn right + restore wheel pos to center in the end
     * '13 - turn left + go reverse
     * '14 - turn left + go reverse
     * '16 - crash the game after like 2 seconds :)
     * '17 - keep actual state, game crashed after few tries
     * '18 - game crash
     * '19 - strong brake + turn left/right
     * '20 - weak brake + turn left then turn right
     * '21 - weak brake + turn right then turn left
     * '22 - brake + reverse
     * '23 - accelerate fast
     * '24 - brake
     * '25 - brake turning left then when almost stopping it turns left more
     * '26 - brake turning right then when almost stopping it turns right more
     * '27 - brake until car stop or until time ends
     * '28 - brake + strong reverse acceleration
     * '30 - performs a burnout (brake until stop + brake and accelerate)
     * '31 - accelerate + handbrake
     * '32 - accelerate very strong
     *
     * Seems to be this:
     * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
     *
     * Hash: 0xC429DCEEB339E129 | Since: 323
     */
    function vehicleTempAction(driver, vehicle, action, time) {
        TaskVehicleTempAction(driver, vehicle, action, time);
    }
    task_1.vehicleTempAction = vehicleTempAction;
    /**
     * No comment provided
     *
     * Hash: 0xE054346CA3A0F315 | Since: 323
     */
    function wanderInArea(ped, pos, radius, minimalLength, timeBetweenWalks) {
        TaskWanderInArea(ped, pos.x, pos.y, pos.z, radius, minimalLength, timeBetweenWalks);
    }
    task_1.wanderInArea = wanderInArea;
    /**
     * No comment provided
     *
     * Hash: 0x6919A2F136426098 | Since: 1868
     */
    function wanderSpecific(ped, conditionalAnimGroupStr, conditionalAnimStr, heading) {
        TaskWanderSpecific(ped, conditionalAnimGroupStr, conditionalAnimStr, heading);
    }
    task_1.wanderSpecific = wanderSpecific;
    /**
     * Makes ped walk around the area.
     *
     * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
     *
     * Hash: 0xBB9CE077274F6A1B | Since: 323
     */
    function wanderStandard(ped, heading, flags) {
        TaskWanderStandard(ped, heading, flags);
    }
    task_1.wanderStandard = wanderStandard;
    /**
     * No comment provided
     *
     * Hash: 0x6E01E9E8D89F8276 | Since: 2545
     */
    function warpPedDirectlyIntoCover(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier) {
        TaskWarpPedDirectlyIntoCover(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier);
    }
    task_1.warpPedDirectlyIntoCover = warpPedDirectlyIntoCover;
    /**
     * Seat Numbers
     * -------------------------------
     * Driver = -1
     * Any = -2
     * Left-Rear = 1
     * Right-Front = 0
     * Right-Rear = 2
     * Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
     *
     * Hash: 0x9A7D091411C5F684 | Since: 323
     */
    function warpPedIntoVehicle(ped, vehicle, seat) {
        TaskWarpPedIntoVehicle(ped, vehicle, seat);
    }
    task_1.warpPedIntoVehicle = warpPedIntoVehicle;
    /**
     * EX: Function.Call(Ped1, Ped2, Time, 0);
     *
     * The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
     *
     *
     *
     * Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
     *
     * Hash: 0xCDDC2B77CE54AC6E | Since: 323
     */
    function writhe(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer) {
        TaskWrithe(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer);
    }
    task_1.writhe = writhe;
    /**
     * No comment provided
     *
     * Hash: 0x67406F2C8F87FC4F | Since: 323
     */
    function uncuffPed(ped) {
        UncuffPed(ped);
    }
    task_1.uncuffPed = uncuffPed;
    /**
     * No comment provided
     *
     * Hash: 0x9724FB59A3E72AD0 | Since: 323
     */
    function updateAimGunScriptedTarget(ped, target, pos, disableBlockingClip) {
        UpdateTaskAimGunScriptedTarget(ped, target, pos.x, pos.y, pos.z, disableBlockingClip);
    }
    task_1.updateAimGunScriptedTarget = updateAimGunScriptedTarget;
    /**
     * No comment provided
     *
     * Hash: 0xA98FCAFD7893C834 | Since: 323
     */
    function updateHandsUpDuration(ped, duration) {
        UpdateTaskHandsUpDuration(ped, duration);
    }
    task_1.updateHandsUpDuration = updateHandsUpDuration;
    /**
     * No comment provided
     *
     * Hash: 0xE4973DBDBE6E44B3 | Since: 323
     */
    function updateSweepAimEntity(ped, entity) {
        UpdateTaskSweepAimEntity(ped, entity);
    }
    task_1.updateSweepAimEntity = updateSweepAimEntity;
    /**
     * No comment provided
     *
     * Hash: 0xBB106883F5201FC4 | Since: 323
     */
    function updateSweepAimPosition(ped, pos) {
        UpdateTaskSweepAimPosition(ped, pos.x, pos.y, pos.z);
    }
    task_1.updateSweepAimPosition = updateSweepAimPosition;
    /**
     * No comment provided
     *
     * Hash: 0x5A353B8E6B1095B5 | Since: 323
     */
    function useWaypointRecordingAsAssistedMovementRoute(name) {
        UseWaypointRecordingAsAssistedMovementRoute(name, false, 0, 0);
    }
    task_1.useWaypointRecordingAsAssistedMovementRoute = useWaypointRecordingAsAssistedMovementRoute;
    /**
     * No comment provided
     *
     * Hash: 0xE435D3539EFDCD1B | Since: 3570
     */
    function vehicleWaypointPlaybackGetIsPaused(vehicle) {
        return Citizen.invokeNative('0xE435D3539EFDCD1B', vehicle);
    }
    task_1.vehicleWaypointPlaybackGetIsPaused = vehicleWaypointPlaybackGetIsPaused;
    /**
     * No comment provided
     *
     * Hash: 0x121F0593E0A431D7 | Since: 323
     */
    function vehicleWaypointPlaybackOverrideSpeed(vehicle, speed) {
        VehicleWaypointPlaybackOverrideSpeed(vehicle, speed);
    }
    task_1.vehicleWaypointPlaybackOverrideSpeed = vehicleWaypointPlaybackOverrideSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x8A4E6AC373666BC5 | Since: 323
     */
    function vehicleWaypointPlaybackPause(vehicle) {
        VehicleWaypointPlaybackPause(vehicle);
    }
    task_1.vehicleWaypointPlaybackPause = vehicleWaypointPlaybackPause;
    /**
     * No comment provided
     *
     * Hash: 0xDC04FCAA7839D492 | Since: 323
     */
    function vehicleWaypointPlaybackResume(vehicle) {
        VehicleWaypointPlaybackResume(vehicle);
    }
    task_1.vehicleWaypointPlaybackResume = vehicleWaypointPlaybackResume;
    /**
     * No comment provided
     *
     * Hash: 0x5CEB25A7D2848963 | Since: 323
     */
    function vehicleWaypointPlaybackUseDefaultSpeed(vehicle) {
        VehicleWaypointPlaybackUseDefaultSpeed(vehicle);
    }
    task_1.vehicleWaypointPlaybackUseDefaultSpeed = vehicleWaypointPlaybackUseDefaultSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x701375A7D43F01CB | Since: 323
     */
    function waypointPlaybackGetIsPaused() {
        return WaypointPlaybackGetIsPaused(undefined);
    }
    task_1.waypointPlaybackGetIsPaused = waypointPlaybackGetIsPaused;
    /**
     * No comment provided
     *
     * Hash: 0x7D7D2B47FA788E85 | Since: 323
     */
    function waypointPlaybackOverrideSpeed() {
        WaypointPlaybackOverrideSpeed(undefined, 0, false);
    }
    task_1.waypointPlaybackOverrideSpeed = waypointPlaybackOverrideSpeed;
    /**
     * No comment provided
     *
     * Hash: 0x0F342546AA06FED5 | Since: 323
     */
    function waypointPlaybackPause() {
        WaypointPlaybackPause(undefined, false, false);
    }
    task_1.waypointPlaybackPause = waypointPlaybackPause;
    /**
     * No comment provided
     *
     * Hash: 0x244F70C84C547D2D | Since: 323
     */
    function waypointPlaybackResume() {
        WaypointPlaybackResume(undefined, false, undefined, undefined);
    }
    task_1.waypointPlaybackResume = waypointPlaybackResume;
    /**
     * No comment provided
     *
     * Hash: 0x8968400D900ED8B3 | Since: 323
     */
    function waypointPlaybackStartAimingAtCoord(ped, pos) {
        WaypointPlaybackStartAimingAtCoord(ped, pos.x, pos.y, pos.z, false);
    }
    task_1.waypointPlaybackStartAimingAtCoord = waypointPlaybackStartAimingAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0x20E330937C399D29 | Since: 323
     */
    function waypointPlaybackStartAimingAtPed(ped, target) {
        WaypointPlaybackStartAimingAtPed(ped, target, false);
    }
    task_1.waypointPlaybackStartAimingAtPed = waypointPlaybackStartAimingAtPed;
    /**
     * No comment provided
     *
     * Hash: 0x057A25CFCC9DB671 | Since: 323
     */
    function waypointPlaybackStartShootingAtCoord(ped, pos, firingPattern) {
        if (typeof firingPattern === 'string')
            firingPattern = misc.getHashKey(firingPattern);
        WaypointPlaybackStartShootingAtCoord(ped, pos.x, pos.y, pos.z, false, firingPattern);
    }
    task_1.waypointPlaybackStartShootingAtCoord = waypointPlaybackStartShootingAtCoord;
    /**
     * No comment provided
     *
     * Hash: 0xE70BA7B90F8390DC | Since: 323
     */
    function waypointPlaybackStartShootingAtPed(ped, ped2) {
        WaypointPlaybackStartShootingAtPed(ped, ped2, false, false);
    }
    task_1.waypointPlaybackStartShootingAtPed = waypointPlaybackStartShootingAtPed;
    /**
     * No comment provided
     *
     * Hash: 0x47EFA040EBB8E2EA | Since: 323
     */
    function waypointPlaybackStopAimingOrShooting(ped) {
        WaypointPlaybackStopAimingOrShooting(ped);
    }
    task_1.waypointPlaybackStopAimingOrShooting = waypointPlaybackStopAimingOrShooting;
    /**
     * No comment provided
     *
     * Hash: 0x6599D834B12D0800 | Since: 323
     */
    function waypointPlaybackUseDefaultSpeed() {
        WaypointPlaybackUseDefaultSpeed(undefined);
    }
    task_1.waypointPlaybackUseDefaultSpeed = waypointPlaybackUseDefaultSpeed;
    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Hash: 0xB629A298081F876F | Since: 323
     */
    function waypointRecordingGetClosestWaypoint(name, pos) {
        return WaypointRecordingGetClosestWaypoint(name, pos.x, pos.y, pos.z);
    }
    task_1.waypointRecordingGetClosestWaypoint = waypointRecordingGetClosestWaypoint;
    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Hash: 0x2FB897405C90B361 | Since: 323
     */
    function waypointRecordingGetCoord(name, point) {
        return WaypointRecordingGetCoord(name, point);
    }
    task_1.waypointRecordingGetCoord = waypointRecordingGetCoord;
    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     * For a full list of the points, see here: goo.gl/wIH0vn
     *
     * Hash: 0x5343532C01A07234 | Since: 323
     */
    function waypointRecordingGetNumPoints(name) {
        return WaypointRecordingGetNumPoints(name);
    }
    task_1.waypointRecordingGetNumPoints = waypointRecordingGetNumPoints;
    /**
     * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
     *
     * Hash: 0x005622AEBC33ACA9 | Since: 323
     */
    function waypointRecordingGetSpeedAtPoint(name, point) {
        return WaypointRecordingGetSpeedAtPoint(name, point);
    }
    task_1.waypointRecordingGetSpeedAtPoint = waypointRecordingGetSpeedAtPoint;
    /**
     * No comment provided
     *
     * Hash: 0x0EFE4834A2F40563 | Since: 3570
     */
    function setAmbientPedEnableCollisionOnNetworkCloneWhenFixed(ped, enable) {
        Citizen.invokeNative('0x0EFE4834A2F40563', ped, enable);
    }
    task_1.setAmbientPedEnableCollisionOnNetworkCloneWhenFixed = setAmbientPedEnableCollisionOnNetworkCloneWhenFixed;
    /**
     * No comment provided
     *
     * Hash: 0x32F6EEF031F943DC | Since: 3095
     */
    function setScriptEnableCollisionOnNetworkCloneWhenFixed(ped, enable) {
        Citizen.invokeNative('0x32F6EEF031F943DC', ped, enable);
    }
    task_1.setScriptEnableCollisionOnNetworkCloneWhenFixed = setScriptEnableCollisionOnNetworkCloneWhenFixed;
})(task || (task = {}));
export var profiler;
(function (profiler) {
    /**
     * Scope entry for profiler.
     *
     * Hash: 0xC795A4A9 | Since: unknown
     */
    function enterScope(scopeName) {
        Citizen.invokeNative('0xC795A4A9', scopeName);
    }
    profiler.enterScope = enterScope;
    /**
     * Scope exit for profiler.
     *
     * Hash: 0xB39CA35C | Since: unknown
     */
    function exitScope() {
        Citizen.invokeNative('0xB39CA35C');
    }
    profiler.exitScope = exitScope;
    /**
     * Returns true if the profiler is active.
     *
     * Hash: 0xF8B7D7BB | Since: unknown
     */
    function isRecording() {
        return Citizen.invokeNative('0xF8B7D7BB');
    }
    profiler.isRecording = isRecording;
})(profiler || (profiler = {}));
export var app;
(function (app) {
    /**
     * No comment provided
     *
     * Hash: 0x5FE1DF3342DB7DBA | Since: 323
     */
    function clearBlock() {
        AppClearBlock();
    }
    app.clearBlock = clearBlock;
    /**
     * No comment provided
     *
     * Hash: 0xE41C65E07A5F05FC | Since: 323
     */
    function closeApp() {
        AppCloseApp();
    }
    app.closeApp = closeApp;
    /**
     * No comment provided
     *
     * Hash: 0xE8E3FCF72EAC0EF8 | Since: 323
     */
    function closeBlock() {
        AppCloseBlock();
    }
    app.closeBlock = closeBlock;
    /**
     * No comment provided
     *
     * Hash: 0x846AA8E7D55EE5B6 | Since: 323
     */
    function dataValid() {
        return AppDataValid();
    }
    app.dataValid = dataValid;
    /**
     * No comment provided
     *
     * Hash: 0x44151AEA95C8A003 | Since: 323
     */
    function deleteAppData(appName) {
        return AppDeleteAppData(appName);
    }
    app.deleteAppData = deleteAppData;
    /**
     * No comment provided
     *
     * Hash: 0xC9853A2BE3DED1A6 | Since: 323
     */
    function getDeletedFileStatus() {
        return AppGetDeletedFileStatus();
    }
    app.getDeletedFileStatus = getDeletedFileStatus;
    /**
     * No comment provided
     *
     * Hash: 0x1514FB24C02C2322 | Since: 323
     */
    function getFloat(property) {
        return AppGetFloat(property);
    }
    app.getFloat = getFloat;
    /**
     * No comment provided
     *
     * Hash: 0xD3A58A12C77D9D4B | Since: 323
     */
    function getInt(property) {
        return AppGetInt(property);
    }
    app.getInt = getInt;
    /**
     * No comment provided
     *
     * Hash: 0x749B023950D2311C | Since: 323
     */
    function getString(property) {
        return AppGetString(property);
    }
    app.getString = getString;
    /**
     * No comment provided
     *
     * Hash: 0x71EEE69745088DA0 | Since: 323
     */
    function hasLinkedSocialClubAccount() {
        return AppHasLinkedSocialClubAccount();
    }
    app.hasLinkedSocialClubAccount = hasLinkedSocialClubAccount;
    /**
     * No comment provided
     *
     * Hash: 0xCA52279A7271517F | Since: 323
     */
    function hasSyncedData(appName) {
        return AppHasSyncedData(appName);
    }
    app.hasSyncedData = hasSyncedData;
    /**
     * No comment provided
     *
     * Hash: 0x95C5D356CDA6E85F | Since: 323
     */
    function saveData() {
        AppSaveData();
    }
    app.saveData = saveData;
    /**
     * Called in the gamescripts like:
     * `APP::APP_SET_APP("car");`
     * `APP::APP_SET_APP("dog");`
     *
     * Hash: 0xCFD0406ADAF90D2B | Since: 323
     */
    function setApp(appName) {
        AppSetApp(appName);
    }
    app.setApp = setApp;
    /**
     * No comment provided
     *
     * Hash: 0x262AB456A3D21F93 | Since: 323
     */
    function setBlock(blockName) {
        AppSetBlock(blockName);
    }
    app.setBlock = setBlock;
    /**
     * No comment provided
     *
     * Hash: 0x25D7687C68E0DAA4 | Since: 323
     */
    function setFloat(property, value) {
        AppSetFloat(property, value);
    }
    app.setFloat = setFloat;
    /**
     * No comment provided
     *
     * Hash: 0x607E8E3D3E4F9611 | Since: 323
     */
    function setInt(property, value) {
        AppSetInt(property, value);
    }
    app.setInt = setInt;
    /**
     * No comment provided
     *
     * Hash: 0x3FF2FCEC4B7721B4 | Since: 323
     */
    function setString(property, value) {
        AppSetString(property, value);
    }
    app.setString = setString;
})(app || (app = {}));
export var brain;
(function (brain) {
    /**
     * `BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);`
     *
     * - Nacorpio
     *
     * -----
     *
     * Hardcoded to not work in Multiplayer.
     *
     * Hash: 0x4EE5367468A65CCC | Since: 323
     */
    function addScriptToRandomPed(name, model) {
        if (typeof model === 'string')
            model = misc.getHashKey(model);
        AddScriptToRandomPed(name, model, 0, 0);
    }
    brain.addScriptToRandomPed = addScriptToRandomPed;
    /**
     * No comment provided
     *
     * Hash: 0x14D8518E9760F08F | Since: 323
     */
    function disableScriptSet(brainSet) {
        DisableScriptBrainSet(brainSet);
    }
    brain.disableScriptSet = disableScriptSet;
    /**
     * No comment provided
     *
     * Hash: 0x67AA4D73F0CFA86B | Since: 323
     */
    function enableScriptSet(brainSet) {
        EnableScriptBrainSet(brainSet);
    }
    brain.enableScriptSet = enableScriptSet;
    /**
     * No comment provided
     *
     * Hash: 0xCCBA154209823057 | Since: 323
     */
    function isObjectWithinActivationRange(_object) {
        return IsObjectWithinBrainActivationRange(_object);
    }
    brain.isObjectWithinActivationRange = isObjectWithinActivationRange;
    /**
     * Gets whether the world point the calling script is registered to is within desired range of the player.
     *
     * Hash: 0xC5042CC6F5E3D450 | Since: 323
     */
    function isWorldPointWithinActivationRange() {
        return IsWorldPointWithinBrainActivationRange();
    }
    brain.isWorldPointWithinActivationRange = isWorldPointWithinActivationRange;
    /**
     * No comment provided
     *
     * Hash: 0x4D953DF78EBF8158 | Since: 323
     */
    function reactivateAllObjectsThatAreWaitingTillOutOfRange() {
        Citizen.invokeNative('0x4D953DF78EBF8158');
    }
    brain.reactivateAllObjectsThatAreWaitingTillOutOfRange = reactivateAllObjectsThatAreWaitingTillOutOfRange;
    /**
     * No comment provided
     *
     * Hash: 0x0B40ED49D7D6FF84 | Since: 323
     */
    function reactivateAllWorldsThatAreWaitingTillOutOfRange() {
        Citizen.invokeNative('0x0B40ED49D7D6FF84');
    }
    brain.reactivateAllWorldsThatAreWaitingTillOutOfRange = reactivateAllWorldsThatAreWaitingTillOutOfRange;
    /**
     * Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
     *
     * Here are possible values of argument -
     *
     * "ob_tv"
     * "launcher_Darts"
     *
     * Hash: 0x6E91B04E08773030 | Since: 323
     */
    function reactivateNamedObjectsWaitingTillOutOfRange(scriptName) {
        Citizen.invokeNative('0x6E91B04E08773030', scriptName);
    }
    brain.reactivateNamedObjectsWaitingTillOutOfRange = reactivateNamedObjectsWaitingTillOutOfRange;
    /**
     * Possible values:
     *
     * act_cinema
     * am_mp_carwash_launch
     * am_mp_carwash_control
     * am_mp_property_ext
     * chop
     * fairgroundHub
     * launcher_BasejumpHeli
     * launcher_BasejumpPack
     * launcher_CarWash
     * launcher_golf
     * launcher_Hunting_Ambient
     * launcher_MrsPhilips
     * launcher_OffroadRacing
     * launcher_pilotschool
     * launcher_Racing
     * launcher_rampage
     * launcher_rampage
     * launcher_range
     * launcher_stunts
     * launcher_stunts
     * launcher_tennis
     * launcher_Tonya
     * launcher_Triathlon
     * launcher_Yoga
     * ob_mp_bed_low
     * ob_mp_bed_med
     *
     * Hash: 0x6D6840CEE8845831 | Since: 323
     */
    function reactivateNamedWorldsWaitingTillOutOfRange(scriptName) {
        Citizen.invokeNative('0x6D6840CEE8845831', scriptName);
    }
    brain.reactivateNamedWorldsWaitingTillOutOfRange = reactivateNamedWorldsWaitingTillOutOfRange;
    /**
     * Registers a script for any object with a specific model hash.
     *
     * `BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);`
     *
     * - Nacorpio
     *
     * Hash: 0x0BE84C318BA6EC22 | Since: 323
     */
    function registerObjectScript(scriptName, modelHash, activationRange) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        RegisterObjectScriptBrain(scriptName, modelHash, 0, activationRange, 0, 0);
    }
    brain.registerObjectScript = registerObjectScript;
    /**
     * No comment provided
     *
     * Hash: 0x3CDC7136613284BD | Since: 323
     */
    function registerWorldPointScript(scriptName, activationRange) {
        RegisterWorldPointScriptBrain(scriptName, activationRange, 0);
    }
    brain.registerWorldPointScript = registerWorldPointScript;
})(brain || (brain = {}));
export var builtin;
(function (builtin) {
    /**
     * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
     *
     * Hash: 0x11E019C8F43ACC8A | Since: 323
     */
    function ceil(value) {
        return Ceil(value);
    }
    builtin.ceil = ceil;
    /**
     * No comment provided
     *
     * Hash: 0xD0FFB162F40A139C | Since: 323
     */
    function cos(value) {
        return Cos(value);
    }
    builtin.cos = cos;
    /**
     * No comment provided
     *
     * Hash: 0xF34EE736CF047844 | Since: 323
     */
    function floor(value) {
        return Floor(value);
    }
    builtin.floor = floor;
    /**
     * No comment provided
     *
     * Hash: 0xE816E655DE37FE20 | Since: 1493
     */
    function log10(value) {
        return Log10(value);
    }
    builtin.log10 = log10;
    /**
     * No comment provided
     *
     * Hash: 0xE3621CC40F31FE2E | Since: 323
     */
    function pow(base, exponent) {
        return Pow(base, exponent);
    }
    builtin.pow = pow;
    /**
     * No comment provided
     *
     * Hash: 0xF2DB717A73826179 | Since: 323
     */
    function round(value) {
        return Round(value);
    }
    builtin.round = round;
    /**
     * No comment provided
     *
     * Hash: 0xC1B1E9A034A63A62 | Since: 323
     */
    function settimera(value) {
        Settimera(value);
    }
    builtin.settimera = settimera;
    /**
     * No comment provided
     *
     * Hash: 0x5AE11BC36633DE4E | Since: 323
     */
    function settimerb(value) {
        Settimerb(value);
    }
    builtin.settimerb = settimerb;
    /**
     * THREAD_PRIO_HIGHEST = 0
     * THREAD_PRIO_NORMAL = 1
     * THREAD_PRIO_LOWEST = 2
     * THREAD_PRIO_MANUAL_UPDATE = 100
     *
     * Hash: 0x42B65DEEF2EDF2A1 | Since: 877
     */
    function setThisThreadPriority(priority) {
        SetThreadPriority(priority);
    }
    builtin.setThisThreadPriority = setThisThreadPriority;
    /**
     * No comment provided
     *
     * Hash: 0xEDD95A39E5544DE8 | Since: 323
     */
    function shiftLeft(value, bitShift) {
        return ShiftLeft(value, bitShift);
    }
    builtin.shiftLeft = shiftLeft;
    /**
     * No comment provided
     *
     * Hash: 0x97EF1E5BCE9DC075 | Since: 323
     */
    function shiftRight(value, bitShift) {
        return ShiftRight(value, bitShift);
    }
    builtin.shiftRight = shiftRight;
    /**
     * No comment provided
     *
     * Hash: 0x0BADBFA3B172435F | Since: 323
     */
    function sin(value) {
        return Sin(value);
    }
    builtin.sin = sin;
    /**
     * No comment provided
     *
     * Hash: 0x71D93B57D07F9804 | Since: 323
     */
    function sqrt(value) {
        return Sqrt(value);
    }
    builtin.sqrt = sqrt;
    /**
     * Examples:
     * `g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);`
     * `l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);`
     * `SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);`
     * `SYSTEM::START_NEW_SCRIPT("emergencycall", 512);`
     * `SYSTEM::START_NEW_SCRIPT("emergencycall", 512);`
     * `SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);`
     * `SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);`
     * `SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);`
     * `SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);`
     *
     * Decompiled examples of usage when starting a script:
     *
     * `SCRIPT::REQUEST_SCRIPT(a_0);`
     * `if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {`
     * `SYSTEM::START_NEW_SCRIPT(a_0, v_3);`
     * `SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);`
     * return 1;
     * }
     *
     * or:
     *
     * v_2 = "MrsPhilips2";
     * `SCRIPT::REQUEST_SCRIPT(v_2);`
     * `while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {`
     * `SCRIPT::REQUEST_SCRIPT(v_2);`
     * `SYSTEM::WAIT(0);`
     * }
     * sub_8792(36);
     * `SYSTEM::START_NEW_SCRIPT(v_2, 17000);`
     * `SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);`
     *
     * Hash: 0xE81651AD79516E48 | Since: 323
     */
    function startNewScript(scriptName, stackSize) {
        return StartNewScript(scriptName, stackSize);
    }
    builtin.startNewScript = startNewScript;
    /**
     * return : script thread id, 0 if failed
     * Pass pointer to struct of args in p1, size of struct goes into p2
     *
     * Hash: 0xB8BA7F44DF1575E1 | Since: 323
     */
    function startNewScriptWithArgs(scriptName, argCount, stackSize) {
        return StartNewScriptWithArgs(scriptName, argCount, stackSize);
    }
    builtin.startNewScriptWithArgs = startNewScriptWithArgs;
    /**
     * No comment provided
     *
     * Hash: 0xEB1C67C3A5333A92 | Since: 323
     */
    function startNewScriptWithNameHash(scriptHash, stackSize) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return StartNewScriptWithNameHash(scriptHash, stackSize);
    }
    builtin.startNewScriptWithNameHash = startNewScriptWithNameHash;
    /**
     * No comment provided
     *
     * Hash: 0xC4BB298BD441BE78 | Since: 323
     */
    function startNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return StartNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize);
    }
    builtin.startNewScriptWithNameHashAndArgs = startNewScriptWithNameHashAndArgs;
    /**
     * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
     *
     * Hash: 0x83666F9FB8FEBD4B | Since: 323
     */
    function timera() {
        return Timera();
    }
    builtin.timera = timera;
    /**
     * No comment provided
     *
     * Hash: 0xC9D9444186B5A374 | Since: 323
     */
    function timerb() {
        return Timerb();
    }
    builtin.timerb = timerb;
    /**
     * Gets the current frame time.
     *
     * Hash: 0x0000000050597EE2 | Since: 323
     */
    function timestep() {
        return Timestep();
    }
    builtin.timestep = timestep;
    /**
     * No comment provided
     *
     * Hash: 0xBBDA792448DB5A89 | Since: 323
     */
    function toFloat(value) {
        return ToFloat(value);
    }
    builtin.toFloat = toFloat;
    /**
     * Calculates distance between vectors.
     *
     * Hash: 0x2A488C176D52CCA5 | Since: 323
     */
    function vdist(x1, y1, z1, x2, y2, z2) {
        return Vdist(x1, y1, z1, x2, y2, z2);
    }
    builtin.vdist = vdist;
    /**
     * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
     *
     * Hash: 0xB7A628320EFF8E47 | Since: 323
     */
    function vdist2(x1, y1, z1, x2, y2, z2) {
        return Vdist2(x1, y1, z1, x2, y2, z2);
    }
    builtin.vdist2 = vdist2;
    /**
     * Calculates the magnitude of a vector.
     *
     * Hash: 0x652D2EEEF1D3E62C | Since: 323
     */
    function vmag(pos) {
        return Vmag(pos.x, pos.y, pos.z);
    }
    builtin.vmag = vmag;
    /**
     * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
     *
     * Hash: 0xA8CEACB4F35AE058 | Since: 323
     */
    function vmag2(pos) {
        return Vmag2(pos.x, pos.y, pos.z);
    }
    builtin.vmag2 = vmag2;
    /**
     * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
     *
     * Hash: 0x4EDE34FBADD967A6 | Since: 323
     */
    function wait(ms) {
        Wait(ms);
    }
    builtin.wait = wait;
})(builtin || (builtin = {}));
export var clock;
(function (clock) {
    /**
     * No comment provided
     *
     * Hash: 0xD716F30D8C8980E2 | Since: 323
     */
    function addToTime(hours, minutes, seconds) {
        AddToClockTime(hours, minutes, seconds);
    }
    clock.addToTime = addToTime;
    /**
     * No comment provided
     *
     * Hash: 0xC8CA9670B9D83B3B | Since: 323
     */
    function advanceTimeTo(hour, minute, second) {
        AdvanceClockTimeTo(hour, minute, second);
    }
    clock.advanceTimeTo = advanceTimeTo;
    /**
     * No comment provided
     *
     * Hash: 0x3D10BC92A4DB1D35 | Since: 323
     */
    function getDayOfMonth() {
        return GetClockDayOfMonth();
    }
    clock.getDayOfMonth = getDayOfMonth;
    /**
     * Gets the current day of the week.
     *
     * 0: Sunday
     * 1: Monday
     * 2: Tuesday
     * 3: Wednesday
     * 4: Thursday
     * 5: Friday
     * 6: Saturday
     *
     * Hash: 0xD972E4BD7AEB235F | Since: 323
     */
    function getDayOfWeek() {
        return GetClockDayOfWeek();
    }
    clock.getDayOfWeek = getDayOfWeek;
    /**
     * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
     *
     * Hash: 0x25223CA6B4D20B7F | Since: 323
     */
    function getHours() {
        return GetClockHours();
    }
    clock.getHours = getHours;
    /**
     * Gets the current ingame clock minute.
     *
     * Hash: 0x13D2B8ADD79640F2 | Since: 323
     */
    function getMinutes() {
        return GetClockMinutes();
    }
    clock.getMinutes = getMinutes;
    /**
     * No comment provided
     *
     * Hash: 0xBBC72712E80257A1 | Since: 323
     */
    function getMonth() {
        return GetClockMonth();
    }
    clock.getMonth = getMonth;
    /**
     * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
     *
     * Hash: 0x494E97C2EF27C470 | Since: 323
     */
    function getSeconds() {
        return GetClockSeconds();
    }
    clock.getSeconds = getSeconds;
    /**
     * No comment provided
     *
     * Hash: 0x961777E64BDAF717 | Since: 323
     */
    function getYear() {
        return GetClockYear();
    }
    clock.getYear = getYear;
    /**
     * Gets local system time as year, month, day, hour, minute and second.
     *
     * Example usage:
     *
     * int year;
     * int month;
     * int day;
     * int hour;
     * int minute;
     * int second;
     * `or use std::tm struct`
     *
     * `TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);`
     *
     *
     * Hash: 0x50C7A99057A69748 | Since: 323
     */
    function getLocalTime() {
        return GetLocalTime();
    }
    clock.getLocalTime = getLocalTime;
    /**
     * No comment provided
     *
     * Hash: 0x2F8B4D1C595B11DB | Since: 323
     */
    function getMillisecondsPerGameMinute() {
        return GetMillisecondsPerGameMinute();
    }
    clock.getMillisecondsPerGameMinute = getMillisecondsPerGameMinute;
    /**
     * Gets system time as year, month, day, hour, minute and second.
     *
     * Example usage:
     *
     * int year;
     * int month;
     * int day;
     * int hour;
     * int minute;
     * int second;
     *
     * `TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);`
     *
     *
     * Hash: 0xDA488F299A5B164E | Since: 323
     */
    function getPosixTime() {
        return GetPosixTime();
    }
    clock.getPosixTime = getPosixTime;
    /**
     * Gets current UTC time
     *
     * Hash: 0x8117E09A19EEF4D3 | Since: 323
     */
    function getUtcTime() {
        return GetUtcTime();
    }
    clock.getUtcTime = getUtcTime;
    /**
     * No comment provided
     *
     * Hash: 0x4055E40BD2DBEC1D | Since: 323
     */
    function pause(toggle) {
        PauseClock(toggle);
    }
    clock.pause = pause;
    /**
     * No comment provided
     *
     * Hash: 0xB096419DF0D06CE7 | Since: 323
     */
    function setDate(day, month, year) {
        SetClockDate(day, month, year);
    }
    clock.setDate = setDate;
    /**
     * SET_CLOCK_TIME(12, 34, 56);
     *
     * Hash: 0x47C3B5848C3E45D8 | Since: 323
     */
    function setTime(hour, minute, second) {
        SetClockTime(hour, minute, second);
    }
    clock.setTime = setTime;
})(clock || (clock = {}));
export var cutscene;
(function (cutscene) {
    /**
     * No comment provided
     *
     * Hash: 0xB56BBBCC2955D9CB | Since: 323
     */
    function canRequestAssetsForEntity() {
        return CanRequestAssetsForCutsceneEntity();
    }
    cutscene.canRequestAssetsForEntity = canRequestAssetsForEntity;
    /**
     * modelHash (p1) was always 0 in R* scripts
     *
     * Hash: 0x645D0B458D8E17B5 | Since: 323
     */
    function canSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CanSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash);
    }
    cutscene.canSetEnterStateForRegisteredEntity = canSetEnterStateForRegisteredEntity;
    /**
     * No comment provided
     *
     * Hash: 0xB2CBCD0930DFB420 | Since: 323
     */
    function canSetExitStateForCamera() {
        return CanSetExitStateForCamera(false);
    }
    cutscene.canSetExitStateForCamera = canSetExitStateForCamera;
    /**
     * No comment provided
     *
     * Hash: 0x4C6A6451C79E4662 | Since: 323
     */
    function canSetExitStateForRegisteredEntity(cutsceneEntName, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return CanSetExitStateForRegisteredEntity(cutsceneEntName, modelHash);
    }
    cutscene.canSetExitStateForRegisteredEntity = canSetExitStateForRegisteredEntity;
    /**
     * No comment provided
     *
     * Hash: 0x5EDEF0CF8C1DAB3C | Since: 323
     */
    function canUseMobilePhoneDuring() {
        return Citizen.invokeNative('0x5EDEF0CF8C1DAB3C');
    }
    cutscene.canUseMobilePhoneDuring = canUseMobilePhoneDuring;
    /**
     * No comment provided
     *
     * Hash: 0x499EF20C5DB25C59 | Since: 323
     */
    function doesEntityExist(cutsceneEntName, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return DoesCutsceneEntityExist(cutsceneEntName, modelHash);
    }
    cutscene.doesEntityExist = doesEntityExist;
    /**
     * No comment provided
     *
     * Hash: 0x4FCD976DA686580C | Since: 1290
     */
    function doesHandleExist(cutsceneHandle) {
        return Citizen.invokeNative('0x4FCD976DA686580C', cutsceneHandle);
    }
    cutscene.doesHandleExist = doesHandleExist;
    /**
     * No comment provided
     *
     * Hash: 0x583DF8E3D4AFBD98 | Since: 323
     */
    function getConcatSectionPlaying() {
        return Citizen.invokeNative('0x583DF8E3D4AFBD98');
    }
    cutscene.getConcatSectionPlaying = getConcatSectionPlaying;
    /**
     * No comment provided
     *
     * Hash: 0x971D7B15BCDBEF99 | Since: 1734
     */
    function getEndTime() {
        return Citizen.invokeNative('0x971D7B15BCDBEF99');
    }
    cutscene.getEndTime = getEndTime;
    /**
     * No comment provided
     *
     * Hash: 0x5D583F71C901F2A3 | Since: 2802
     */
    function getPlayDuration() {
        return Citizen.invokeNative('0x5D583F71C901F2A3');
    }
    cutscene.getPlayDuration = getPlayDuration;
    /**
     * No comment provided
     *
     * Hash: 0x710286BC5EF4D6E1 | Since: 3258
     */
    function getPlayTime() {
        return GetCutscenePlayTime();
    }
    cutscene.getPlayTime = getPlayTime;
    /**
     * No comment provided
     *
     * Hash: 0x49010A6A396553D8 | Since: 323
     */
    function getSectionPlaying() {
        return GetCutsceneSectionPlaying();
    }
    cutscene.getSectionPlaying = getSectionPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xE625BEABBAFFDAB9 | Since: 323
     */
    function getTime() {
        return GetCutsceneTime();
    }
    cutscene.getTime = getTime;
    /**
     * No comment provided
     *
     * Hash: 0xEE53B14A19E480D4 | Since: 323
     */
    function getTotalDuration() {
        return GetCutsceneTotalDuration();
    }
    cutscene.getTotalDuration = getTotalDuration;
    /**
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x0ABC54DE641DC0FC | Since: 323
     */
    function getCutFileConcatCount(cutsceneName) {
        return GetCutFileNumSections(cutsceneName);
    }
    cutscene.getCutFileConcatCount = getCutFileConcatCount;
    /**
     * No comment provided
     *
     * Hash: 0x1FA904B60E492336 | Since: 3570
     */
    function getCutFileOffset(cutsceneName, index) {
        return new Vector3(Citizen.invokeNative('0x1FA904B60E492336', cutsceneName, index));
    }
    cutscene.getCutFileOffset = getCutFileOffset;
    /**
     * No comment provided
     *
     * Hash: 0x0A2E9FDB9A8C62F6 | Since: 323
     */
    function getEntityIndexOfEntity(cutsceneEntName, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash);
    }
    cutscene.getEntityIndexOfEntity = getEntityIndexOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0xC0741A26499654CD | Since: 323
     */
    function getEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        return GetEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash);
    }
    cutscene.getEntityIndexOfRegisteredEntity = getEntityIndexOfRegisteredEntity;
    /**
     * Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
     *
     * Hash: 0x708BDD8CD795B043 | Since: 323
     */
    function hasCutThisFrame() {
        return HasCutsceneCutThisFrame();
    }
    cutscene.hasCutThisFrame = hasCutThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x7C0A893088881D57 | Since: 323
     */
    function hasFinished() {
        return HasCutsceneFinished();
    }
    cutscene.hasFinished = hasFinished;
    /**
     * No comment provided
     *
     * Hash: 0xC59F528E9AB9F339 | Since: 323
     */
    function hasLoaded() {
        return HasCutsceneLoaded();
    }
    cutscene.hasLoaded = hasLoaded;
    /**
     * Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0xA1C996C2A744262E | Since: 323
     */
    function hasCutFileLoaded(cutsceneName) {
        return HasCutFileLoaded(cutsceneName);
    }
    cutscene.hasCutFileLoaded = hasCutFileLoaded;
    /**
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x228D3D94F8A11C3C | Since: 323
     */
    function hasThisLoaded(cutsceneName) {
        return HasThisCutsceneLoaded(cutsceneName);
    }
    cutscene.hasThisLoaded = hasThisLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x991251AFC3981F84 | Since: 323
     */
    function isActive() {
        return IsCutsceneActive();
    }
    cutscene.isActive = isActive;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x4CEBC1ED31E8925E | Since: 323
     */
    function isAuthorized(cutsceneName) {
        return Citizen.invokeNative('0x4CEBC1ED31E8925E', cutsceneName);
    }
    cutscene.isAuthorized = isAuthorized;
    /**
     * No comment provided
     *
     * Hash: 0x71B74D2AE19338D0 | Since: 323
     */
    function isPlaybackFlagSet(flag) {
        return IsCutscenePlaybackFlagSet(flag);
    }
    cutscene.isPlaybackFlagSet = isPlaybackFlagSet;
    /**
     * No comment provided
     *
     * Hash: 0xD3C2E180A40F031E | Since: 323
     */
    function isPlaying() {
        return IsCutscenePlaying();
    }
    cutscene.isPlaying = isPlaying;
    /**
     * No comment provided
     *
     * Hash: 0xA0FE76168A189DDB | Since: 323
     */
    function isMultiheadFadeUp() {
        return Citizen.invokeNative('0xA0FE76168A189DDB');
    }
    cutscene.isMultiheadFadeUp = isMultiheadFadeUp;
    /**
     * No comment provided
     *
     * Hash: 0x2F137B508DE238F2 | Since: 323
     */
    function networkSetMocapCanBeSkipped(toggle) {
        Citizen.invokeNative('0x2F137B508DE238F2', toggle);
    }
    cutscene.networkSetMocapCanBeSkipped = networkSetMocapCanBeSkipped;
    /**
     * No comment provided
     *
     * Hash: 0xE40C1C56DF95C2E8 | Since: 323
     */
    function registerEntityFor(cutscenePed, cutsceneEntName, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        RegisterEntityForCutscene(cutscenePed, cutsceneEntName, 0, modelHash, 0);
    }
    cutscene.registerEntityFor = registerEntityFor;
    /**
     * No comment provided
     *
     * Hash: 0x440AF51A3462B86F | Since: 323
     */
    function remove() {
        RemoveCutscene();
    }
    cutscene.remove = remove;
    /**
     * Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0xD00D76A7DFC9D852 | Since: 323
     */
    function removeCutFile(cutsceneName) {
        RemoveCutFile(cutsceneName);
    }
    cutscene.removeCutFile = removeCutFile;
    /**
     * flags: Usually 8
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x7A86743F475D9E09 | Since: 323
     */
    function request(cutsceneName, flags) {
        RequestCutscene(cutsceneName, flags);
    }
    cutscene.request = request;
    /**
     * flags: Usually 8
     *
     * playbackFlags: Which scenes should be played.
     * Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0xC23DE0E91C30B58C | Since: 323
     */
    function requestWithPlaybackList(cutsceneName, playbackFlags, flags) {
        RequestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags);
    }
    cutscene.requestWithPlaybackList = requestWithPlaybackList;
    /**
     * Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
     * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
     *
     * Hash: 0x06A3524161C502BA | Since: 323
     */
    function requestCutFile(cutsceneName) {
        RequestCutFile(cutsceneName);
    }
    cutscene.requestCutFile = requestCutFile;
    /**
     * No comment provided
     *
     * Hash: 0x2131046957F31B04 | Since: 323
     */
    function setCanDisplayMinimapDuringThisUpdate() {
        RegisterSynchronisedScriptSpeech();
    }
    cutscene.setCanDisplayMinimapDuringThisUpdate = setCanDisplayMinimapDuringThisUpdate;
    /**
     * No comment provided
     *
     * Hash: 0xE36A98D8AB3D3C66 | Since: 323
     */
    function setCarGeneratorsCanUpdateDuring() {
        Citizen.invokeNative('0xE36A98D8AB3D3C66', false);
    }
    cutscene.setCarGeneratorsCanUpdateDuring = setCarGeneratorsCanUpdateDuring;
    /**
     * No comment provided
     *
     * Hash: 0x41FAA8FB2ECE8720 | Since: 323
     */
    function setCanBeSkipped() {
        SetCutsceneCanBeSkipped(false);
    }
    cutscene.setCanBeSkipped = setCanBeSkipped;
    /**
     * No comment provided
     *
     * Hash: 0x4C61C75BEE8184C2 | Since: 323
     */
    function setEntityStreamingFlags(cutsceneEntName) {
        SetCutsceneEntityStreamingFlags(cutsceneEntName, 0, 0);
    }
    cutscene.setEntityStreamingFlags = setEntityStreamingFlags;
    /**
     * No comment provided
     *
     * Hash: 0x8093F23ABACCC7D4 | Since: 323
     */
    function setFadeValues() {
        SetCutsceneFadeValues(false, false, false, false);
    }
    cutscene.setFadeValues = setFadeValues;
    /**
     * No comment provided
     *
     * Hash: 0x20746F7B1032A3C7 | Since: 323
     */
    function setMultiheadFade() {
        Citizen.invokeNative('0x20746F7B1032A3C7', false, false, false, false);
    }
    cutscene.setMultiheadFade = setMultiheadFade;
    /**
     * No comment provided
     *
     * Hash: 0x06EE9048FD080382 | Since: 323
     */
    function setMultiheadFadeManual() {
        Citizen.invokeNative('0x06EE9048FD080382', false);
    }
    cutscene.setMultiheadFadeManual = setMultiheadFadeManual;
    /**
     * p3 could be heading. Needs more research.
     *
     * Hash: 0xB812B3FD1C01CF27 | Since: 323
     */
    function setOrigin(pos) {
        SetCutsceneOrigin(pos.x, pos.y, pos.z, 0, 0);
    }
    cutscene.setOrigin = setOrigin;
    /**
     * No comment provided
     *
     * Hash: 0x011883F41211432A | Since: 323
     */
    function setOriginAndOrientation(x1, y1, z1, x2, y2, z2) {
        Citizen.invokeNative('0x011883F41211432A', x1, y1, z1, x2, y2, z2, 0);
    }
    cutscene.setOriginAndOrientation = setOriginAndOrientation;
    /**
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0xBA01E7B6DEEFBBC9 | Since: 323
     */
    function setPedComponentVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetCutscenePedComponentVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash);
    }
    cutscene.setPedComponentVariation = setPedComponentVariation;
    /**
     * No comment provided
     *
     * Hash: 0x2A56C06EBEF2B0D9 | Since: 323
     */
    function setPedComponentVariationFromPed(cutsceneEntName, ped, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetCutscenePedComponentVariationFromPed(cutsceneEntName, ped, modelHash);
    }
    cutscene.setPedComponentVariationFromPed = setPedComponentVariationFromPed;
    /**
     * Thanks R*! ;)
     *
     * if ((l_161 == 0) || (l_161 == 2)) {
     * sub_2ea27("Trying to set Jimmy prop variation");
     * `CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);`
     * }
     *
     * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
     *
     * Hash: 0x0546524ADE2E9723 | Since: 323
     */
    function setPedPropVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        SetCutscenePedPropVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash);
    }
    cutscene.setPedPropVariation = setPedPropVariation;
    /**
     * Only used twice in R* scripts
     *
     * Hash: 0x9896CE4721BE84BA | Since: 323
     */
    function setTriggerArea(x1, y1, z1, x2, y2, z2) {
        SetCutsceneTriggerArea(x1, y1, z1, x2, y2, z2);
    }
    cutscene.setTriggerArea = setTriggerArea;
    /**
     * Toggles a value (bool) for cutscenes.
     *
     * Hash: 0xC61B86C9F61EB404 | Since: 323
     */
    function setPadCanShakeDuring(toggle) {
        Citizen.invokeNative('0xC61B86C9F61EB404', toggle);
    }
    cutscene.setPadCanShakeDuring = setPadCanShakeDuring;
    /**
     * Sets the cutscene's owning thread ID.
     *
     * Hash: 0x8D9DF6ECA8768583 | Since: 323
     */
    function setScriptCanStart(threadId) {
        Citizen.invokeNative('0x8D9DF6ECA8768583', threadId);
    }
    cutscene.setScriptCanStart = setScriptCanStart;
    /**
     * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
     *
     * Hash: 0x7F96F23FA9B73327 | Since: 323
     */
    function setVehicleModelPlayerWillExitScene(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        Citizen.invokeNative('0x7F96F23FA9B73327', modelHash);
    }
    cutscene.setVehicleModelPlayerWillExitScene = setVehicleModelPlayerWillExitScene;
    /**
     * flags: Usually 0.
     *
     * Hash: 0x186D5CB5E7B0FF7B | Since: 323
     */
    function start(flags) {
        StartCutscene(flags);
    }
    cutscene.start = start;
    /**
     * flags: Usually 0.
     *
     * Hash: 0x1C9ADDA3244A1FBF | Since: 323
     */
    function startAtCoords(pos, flags) {
        StartCutsceneAtCoords(pos.x, pos.y, pos.z, flags);
    }
    cutscene.startAtCoords = startAtCoords;
    /**
     * No comment provided
     *
     * Hash: 0xC7272775B4DC786E | Since: 323
     */
    function stop() {
        StopCutscene(false);
    }
    cutscene.stop = stop;
    /**
     * No comment provided
     *
     * Hash: 0xD220BDD222AC4A1E | Since: 323
     */
    function stopImmediately() {
        StopCutsceneImmediately();
    }
    cutscene.stopImmediately = stopImmediately;
    /**
     * No comment provided
     *
     * Hash: 0x40C8656EDAEDD569 | Since: 323
     */
    function wasSkipped() {
        return WasCutsceneSkipped();
    }
    cutscene.wasSkipped = wasSkipped;
})(cutscene || (cutscene = {}));
export var datafile;
(function (datafile) {
    /**
     * No comment provided
     *
     * Hash: 0xF8B0F5A43E928C76 | Since: 323
     */
    function dataarrayAddBool(value) {
        return DataarrayAddBool(value);
    }
    datafile.dataarrayAddBool = dataarrayAddBool;
    /**
     * No comment provided
     *
     * Hash: 0x6889498B3E19C797 | Since: 323
     */
    function dataarrayAddDict() {
        return DataarrayAddDict();
    }
    datafile.dataarrayAddDict = dataarrayAddDict;
    /**
     * No comment provided
     *
     * Hash: 0x57A995FD75D37F56 | Since: 323
     */
    function dataarrayAddFloat(value) {
        return DataarrayAddFloat(value);
    }
    datafile.dataarrayAddFloat = dataarrayAddFloat;
    /**
     * No comment provided
     *
     * Hash: 0xCABDB751D86FE93B | Since: 323
     */
    function dataarrayAddInt(value) {
        return DataarrayAddInt(value);
    }
    datafile.dataarrayAddInt = dataarrayAddInt;
    /**
     * No comment provided
     *
     * Hash: 0x2F0661C155AEEEAA | Since: 323
     */
    function dataarrayAddString(value) {
        return DataarrayAddString(value);
    }
    datafile.dataarrayAddString = dataarrayAddString;
    /**
     * No comment provided
     *
     * Hash: 0x407F8D034F70F0C2 | Since: 323
     */
    function dataarrayAddVector(valueX, valueY, valueZ) {
        return DataarrayAddVector(valueX, valueY, valueZ);
    }
    datafile.dataarrayAddVector = dataarrayAddVector;
    /**
     * No comment provided
     *
     * Hash: 0x50C1B2874E50C114 | Since: 323
     */
    function dataarrayGetBool(arrayIndex) {
        return DataarrayGetBool(arrayIndex);
    }
    datafile.dataarrayGetBool = dataarrayGetBool;
    /**
     * No comment provided
     *
     * Hash: 0x065DB281590CEA2D | Since: 323
     */
    function dataarrayGetCount() {
        return DataarrayGetCount();
    }
    datafile.dataarrayGetCount = dataarrayGetCount;
    /**
     * No comment provided
     *
     * Hash: 0x8B5FADCC4E3A145F | Since: 323
     */
    function dataarrayGetDict(arrayIndex) {
        return DataarrayGetDict(arrayIndex);
    }
    datafile.dataarrayGetDict = dataarrayGetDict;
    /**
     * No comment provided
     *
     * Hash: 0xC0C527B525D7CFB5 | Since: 323
     */
    function dataarrayGetFloat(arrayIndex) {
        return DataarrayGetFloat(arrayIndex);
    }
    datafile.dataarrayGetFloat = dataarrayGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x3E5AE19425CD74BE | Since: 323
     */
    function dataarrayGetInt(arrayIndex) {
        return DataarrayGetInt(arrayIndex);
    }
    datafile.dataarrayGetInt = dataarrayGetInt;
    /**
     * No comment provided
     *
     * Hash: 0xD3F2FFEB8D836F52 | Since: 323
     */
    function dataarrayGetString(arrayIndex) {
        return DataarrayGetString(arrayIndex);
    }
    datafile.dataarrayGetString = dataarrayGetString;
    /**
     * Types:
     * 1 = Boolean
     * 2 = Integer
     * 3 = Float
     * 4 = String
     * 5 = Vector3
     * 6 = Object
     * 7 = Array
     *
     * Hash: 0x3A0014ADB172A3C5 | Since: 323
     */
    function dataarrayGetType(arrayIndex) {
        return DataarrayGetType(arrayIndex);
    }
    datafile.dataarrayGetType = dataarrayGetType;
    /**
     * No comment provided
     *
     * Hash: 0x8D2064E5B64A628A | Since: 323
     */
    function dataarrayGetVector(arrayIndex) {
        return new Vector3(DataarrayGetVector(arrayIndex));
    }
    datafile.dataarrayGetVector = dataarrayGetVector;
    /**
     * No comment provided
     *
     * Hash: 0x5B11728527CA6E5F | Since: 323
     */
    function datadictCreateArray(key) {
        return DatadictCreateArray(key);
    }
    datafile.datadictCreateArray = datadictCreateArray;
    /**
     * No comment provided
     *
     * Hash: 0xA358F56F10732EE1 | Since: 323
     */
    function datadictCreateDict(key) {
        return DatadictCreateDict(key);
    }
    datafile.datadictCreateDict = datadictCreateDict;
    /**
     * No comment provided
     *
     * Hash: 0x7A983AA9DA2659ED | Since: 323
     */
    function datadictGetArray(key) {
        return DatadictGetArray(key);
    }
    datafile.datadictGetArray = datadictGetArray;
    /**
     * No comment provided
     *
     * Hash: 0x1186940ED72FFEEC | Since: 323
     */
    function datadictGetBool(key) {
        return DatadictGetBool(key);
    }
    datafile.datadictGetBool = datadictGetBool;
    /**
     * No comment provided
     *
     * Hash: 0xB6B9DDC412FCEEE2 | Since: 323
     */
    function datadictGetDict(key) {
        return DatadictGetDict(key);
    }
    datafile.datadictGetDict = datadictGetDict;
    /**
     * No comment provided
     *
     * Hash: 0x06610343E73B9727 | Since: 323
     */
    function datadictGetFloat(key) {
        return DatadictGetFloat(key);
    }
    datafile.datadictGetFloat = datadictGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x78F06F6B1FB5A80C | Since: 323
     */
    function datadictGetInt(key) {
        return DatadictGetInt(key);
    }
    datafile.datadictGetInt = datadictGetInt;
    /**
     * No comment provided
     *
     * Hash: 0x3D2FD9E763B24472 | Since: 323
     */
    function datadictGetString(key) {
        return DatadictGetString(key);
    }
    datafile.datadictGetString = datadictGetString;
    /**
     * Types:
     * 1 = Boolean
     * 2 = Integer
     * 3 = Float
     * 4 = String
     * 5 = Vector3
     * 6 = Object
     * 7 = Array
     *
     * Hash: 0x031C55ED33227371 | Since: 323
     */
    function datadictGetType(key) {
        return DatadictGetType(key);
    }
    datafile.datadictGetType = datadictGetType;
    /**
     * No comment provided
     *
     * Hash: 0x46CD3CB66E0825CC | Since: 323
     */
    function datadictGetVector(key) {
        return new Vector3(DatadictGetVector(key));
    }
    datafile.datadictGetVector = datadictGetVector;
    /**
     * No comment provided
     *
     * Hash: 0x35124302A556A325 | Since: 323
     */
    function datadictSetBool(key, value) {
        return DatadictSetBool(key, value);
    }
    datafile.datadictSetBool = datadictSetBool;
    /**
     * No comment provided
     *
     * Hash: 0xC27E1CC2D795105E | Since: 323
     */
    function datadictSetFloat(key, value) {
        return DatadictSetFloat(key, value);
    }
    datafile.datadictSetFloat = datadictSetFloat;
    /**
     * No comment provided
     *
     * Hash: 0xE7E035450A7948D5 | Since: 323
     */
    function datadictSetInt(key, value) {
        return DatadictSetInt(key, value);
    }
    datafile.datadictSetInt = datadictSetInt;
    /**
     * No comment provided
     *
     * Hash: 0x8FF3847DADD8E30C | Since: 323
     */
    function datadictSetString(key, value) {
        return DatadictSetString(key, value);
    }
    datafile.datadictSetString = datadictSetString;
    /**
     * No comment provided
     *
     * Hash: 0x4CD49B76338C7DEE | Since: 323
     */
    function datadictSetVector(key, valueX, valueY, valueZ) {
        return DatadictSetVector(key, valueX, valueY, valueZ);
    }
    datafile.datadictSetVector = datadictSetVector;
    /**
     * No comment provided
     *
     * Hash: 0x6CC86E78358D5119 | Since: 323
     */
    function clearWatchList() {
        DatafileClearWatchList();
    }
    datafile.clearWatchList = clearWatchList;
    /**
     * No comment provided
     *
     * Hash: 0xD27058A1CA2B13EE | Since: 323
     */
    function create() {
        DatafileCreate(0);
    }
    datafile.create = create;
    /**
     * No comment provided
     *
     * Hash: 0x9AB9C1CFC8862DFB | Since: 323
     */
    function datafileDelete() {
        DatafileDelete(0);
    }
    datafile.datafileDelete = datafileDelete;
    /**
     * No comment provided
     *
     * Hash: 0x6AD0BD5E087866CB | Since: 2189
     */
    function deleteForAdditionalDataFile() {
        Citizen.invokeNative('0x6AD0BD5E087866CB', undefined);
    }
    datafile.deleteForAdditionalDataFile = deleteForAdditionalDataFile;
    /**
     * No comment provided
     *
     * Hash: 0x8F5EA1C01D65A100 | Since: 323
     */
    function deleteRequestedFile(requestId) {
        return DatafileDeleteRequestedFile(requestId);
    }
    datafile.deleteRequestedFile = deleteRequestedFile;
    /**
     * No comment provided
     *
     * Hash: 0xC55854C7D7274882 | Since: 323
     */
    function flushMissionHeader() {
        DatafileFlushMissionHeader();
    }
    datafile.flushMissionHeader = flushMissionHeader;
    /**
     * No comment provided
     *
     * Hash: 0x906B778CA1DC72B6 | Since: 323
     */
    function getFileDict() {
        return DatafileGetFileDict(0);
    }
    datafile.getFileDict = getFileDict;
    /**
     * No comment provided
     *
     * Hash: 0xDBF860CF1DB8E599 | Since: 2189
     */
    function getFileDictForAdditionalDataFile() {
        return Citizen.invokeNative('0xDBF860CF1DB8E599', undefined);
    }
    datafile.getFileDictForAdditionalDataFile = getFileDictForAdditionalDataFile;
    /**
     * No comment provided
     *
     * Hash: 0x15FF52B809DB2353 | Since: 323
     */
    function hasLoadedFileData(requestId) {
        return DatafileHasLoadedFileData(requestId);
    }
    datafile.hasLoadedFileData = hasLoadedFileData;
    /**
     * No comment provided
     *
     * Hash: 0xF8CC1EBE0B62E29F | Since: 323
     */
    function hasValidFileData(requestId) {
        return DatafileHasValidFileData(requestId);
    }
    datafile.hasValidFileData = hasValidFileData;
    /**
     * No comment provided
     *
     * Hash: 0xBEDB96A7584AA8CF | Since: 323
     */
    function isSavePending() {
        return DatafileIsSavePending();
    }
    datafile.isSavePending = isSavePending;
    /**
     * No comment provided
     *
     * Hash: 0xFCCAE5B92A830878 | Since: 323
     */
    function isValidRequestId(index) {
        return DatafileIsValidRequestId(index);
    }
    datafile.isValidRequestId = isValidRequestId;
    /**
     * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
     *
     * Returns whether or not the file was successfully loaded.
     *
     * Example:
     * `DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"`
     *
     * Hash: 0xC5238C011AF405E4 | Since: 323
     */
    function loadOfflineUgc(filename) {
        return DatafileLoadOfflineUgc(filename, undefined);
    }
    datafile.loadOfflineUgc = loadOfflineUgc;
    /**
     * No comment provided
     *
     * Hash: 0xA6EEF01087181EDD | Since: 2189
     */
    function loadOfflineUgcForAdditionalDataFile() {
        return Citizen.invokeNative('0xA6EEF01087181EDD', undefined, undefined);
    }
    datafile.loadOfflineUgcForAdditionalDataFile = loadOfflineUgcForAdditionalDataFile;
    /**
     * No comment provided
     *
     * Hash: 0x22DA66936E0FFF37 | Since: 323
     */
    function selectActiveFile(requestId) {
        return DatafileSelectActiveFile(requestId, undefined);
    }
    datafile.selectActiveFile = selectActiveFile;
    /**
     * No comment provided
     *
     * Hash: 0x01095C95CD46B624 | Since: 323
     */
    function selectCreatorStats() {
        return DatafileSelectCreatorStats(0, undefined);
    }
    datafile.selectCreatorStats = selectCreatorStats;
    /**
     * No comment provided
     *
     * Hash: 0xA69AC4ADE82B57A4 | Since: 323
     */
    function selectUgcData() {
        return DatafileSelectUgcData(0, undefined);
    }
    datafile.selectUgcData = selectUgcData;
    /**
     * No comment provided
     *
     * Hash: 0x52818819057F2B40 | Since: 323
     */
    function selectUgcPlayerData() {
        return DatafileSelectUgcPlayerData(0, undefined);
    }
    datafile.selectUgcPlayerData = selectUgcPlayerData;
    /**
     * No comment provided
     *
     * Hash: 0x9CB0BFA7A9342C3D | Since: 323
     */
    function selectUgcStats() {
        return DatafileSelectUgcStats(0, false, undefined);
    }
    datafile.selectUgcStats = selectUgcStats;
    /**
     * No comment provided
     *
     * Hash: 0x83BCCE3224735F05 | Since: 323
     */
    function startSaveToCloud(filename) {
        return DatafileStartSaveToCloud(filename, undefined);
    }
    datafile.startSaveToCloud = startSaveToCloud;
    /**
     * No comment provided
     *
     * Hash: 0x2ED61456317B8178 | Since: 323
     */
    function storeMissionHeader() {
        DatafileStoreMissionHeader(0);
    }
    datafile.storeMissionHeader = storeMissionHeader;
    /**
     * No comment provided
     *
     * Hash: 0x4DFDD9EB705F8140 | Since: 323
     */
    function updateSaveToCloud() {
        return DatafileUpdateSaveToCloud();
    }
    datafile.updateSaveToCloud = updateSaveToCloud;
    /**
     * Adds the given requestID to the watch list.
     *
     * Hash: 0xAD6875BBC0FC899C | Since: 323
     */
    function watchRequestId(requestId) {
        DatafileWatchRequestId(requestId);
    }
    datafile.watchRequestId = watchRequestId;
    /**
     * No comment provided
     *
     * Hash: 0xC84527E235FCA219 | Since: 323
     */
    function ugcCreateContent(dataCount, contentName, description, tagsCsv, contentTypeName, publish) {
        return UgcCreateContent(dataCount, contentName, description, tagsCsv, contentTypeName, publish, undefined);
    }
    datafile.ugcCreateContent = ugcCreateContent;
    /**
     * No comment provided
     *
     * Hash: 0xA5EFC3E847D60507 | Since: 323
     */
    function ugcCreateMission(contentName, description, tagsCsv, contentTypeName, publish) {
        return UgcCreateMission(contentName, description, tagsCsv, contentTypeName, publish, undefined);
    }
    datafile.ugcCreateMission = ugcCreateMission;
    /**
     * No comment provided
     *
     * Hash: 0x692D808C34A82143 | Since: 323
     */
    function ugcSetPlayerData(contentId, rating, contentTypeName) {
        return UgcSetPlayerData(contentId, rating, contentTypeName, undefined);
    }
    datafile.ugcSetPlayerData = ugcSetPlayerData;
    /**
     * No comment provided
     *
     * Hash: 0x648E7A5434AF7969 | Since: 323
     */
    function ugcUpdateContent(contentId, dataCount, contentName, description, tagsCsv, contentTypeName) {
        return UgcUpdateContent(contentId, dataCount, contentName, description, tagsCsv, contentTypeName, undefined);
    }
    datafile.ugcUpdateContent = ugcUpdateContent;
    /**
     * No comment provided
     *
     * Hash: 0x4645DE9980999E93 | Since: 323
     */
    function ugcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName) {
        return UgcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName, undefined);
    }
    datafile.ugcUpdateMission = ugcUpdateMission;
})(datafile || (datafile = {}));
export var decorator;
(function (decorator) {
    /**
     * Returns whether or not the specified property is set for the entity.
     *
     * Hash: 0x05661B80A8C9165F | Since: 323
     */
    function decorExistOn(entity, propertyName) {
        return DecorExistOn(entity, propertyName);
    }
    decorator.decorExistOn = decorExistOn;
    /**
     * No comment provided
     *
     * Hash: 0xDACE671663F2F5DB | Since: 323
     */
    function decorGetBool(entity, propertyName) {
        return DecorGetBool(entity, propertyName);
    }
    decorator.decorGetBool = decorGetBool;
    /**
     * No comment provided
     *
     * Hash: 0x6524A2F114706F43 | Since: 323
     */
    function decorGetFloat(entity, propertyName) {
        return DecorGetFloat(entity, propertyName);
    }
    decorator.decorGetFloat = decorGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0xA06C969B02A97298 | Since: 323
     */
    function decorGetInt(entity, propertyName) {
        return DecorGetInt(entity, propertyName);
    }
    decorator.decorGetInt = decorGetInt;
    /**
     * type: see DECOR_REGISTER
     *
     * Hash: 0x4F14F9F870D6FBC8 | Since: 323
     */
    function decorIsRegisteredAsType(propertyName, _type) {
        return DecorIsRegisteredAsType(propertyName, _type);
    }
    decorator.decorIsRegisteredAsType = decorIsRegisteredAsType;
    /**
     * https://alloc8or.re/gta5/doc/enums/eDecorType.txt
     *
     * Hash: 0x9FD90732F56403CE | Since: 323
     */
    function decorRegister(propertyName, _type) {
        DecorRegister(propertyName, _type);
    }
    decorator.decorRegister = decorRegister;
    /**
     * Called after all decorator type initializations.
     *
     * Hash: 0xA9D14EEA259F9248 | Since: 323
     */
    function decorRegisterLock() {
        DecorRegisterLock();
    }
    decorator.decorRegisterLock = decorRegisterLock;
    /**
     * No comment provided
     *
     * Hash: 0x00EE9F297C738720 | Since: 323
     */
    function decorRemove(entity, propertyName) {
        return DecorRemove(entity, propertyName);
    }
    decorator.decorRemove = decorRemove;
    /**
     * This function sets metadata of type bool to specified entity.
     *
     *
     * Hash: 0x6B1E8E2ED1335B71 | Since: 323
     */
    function decorSetBool(entity, propertyName, value) {
        return DecorSetBool(entity, propertyName, value);
    }
    decorator.decorSetBool = decorSetBool;
    /**
     * No comment provided
     *
     * Hash: 0x211AB1DD8D0F363A | Since: 323
     */
    function decorSetFloat(entity, propertyName, value) {
        return DecorSetFloat(entity, propertyName, value);
    }
    decorator.decorSetFloat = decorSetFloat;
    /**
     * Sets property to int.
     *
     * Hash: 0x0CE3AA5E1CA19E10 | Since: 323
     */
    function decorSetInt(entity, propertyName, value) {
        return DecorSetInt(entity, propertyName, value);
    }
    decorator.decorSetInt = decorSetInt;
    /**
     * No comment provided
     *
     * Hash: 0x95AED7B8E39ECAA4 | Since: 323
     */
    function decorSetTime(entity, propertyName, timestamp) {
        return DecorSetTime(entity, propertyName, timestamp);
    }
    decorator.decorSetTime = decorSetTime;
})(decorator || (decorator = {}));
export var dlc;
(function (dlc) {
    /**
     * No comment provided
     *
     * Hash: 0x241FCA5B1AA14F75 | Since: 323
     */
    function areAnyCcsPending() {
        return Citizen.invokeNative('0x241FCA5B1AA14F75');
    }
    dlc.areAnyCcsPending = areAnyCcsPending;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xF2E07819EF1A5289 | Since: 323
     */
    function checkCloudDataCorrect() {
        return Citizen.invokeNative('0xF2E07819EF1A5289');
    }
    dlc.checkCloudDataCorrect = checkCloudDataCorrect;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xA213B11DFF526300 | Since: 323
     */
    function checkCompatPackConfiguration() {
        return Citizen.invokeNative('0xA213B11DFF526300');
    }
    dlc.checkCompatPackConfiguration = checkCompatPackConfiguration;
    /**
     * No comment provided
     *
     * Hash: 0x8D30F648014A92B5 | Since: 323
     */
    function getEverHadBadPackOrder() {
        return GetExtraContentPackHasBeenInstalled();
    }
    dlc.getEverHadBadPackOrder = getEverHadBadPackOrder;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0x9489659372A81585 | Since: 323
     */
    function getExtracontentCloudResult() {
        return Citizen.invokeNative('0x9489659372A81585');
    }
    dlc.getExtracontentCloudResult = getExtracontentCloudResult;
    /**
     * No comment provided
     *
     * Hash: 0xC4637A6D03C24CC3 | Since: 1734
     */
    function getIsInitialLoadingScreenActive() {
        return Citizen.invokeNative('0xC4637A6D03C24CC3');
    }
    dlc.getIsInitialLoadingScreenActive = getIsInitialLoadingScreenActive;
    /**
     * No comment provided
     *
     * Hash: 0x10D0A8F259E93EC9 | Since: 323
     */
    function getIsLoadingScreenActive() {
        return GetIsLoadingScreenActive();
    }
    dlc.getIsLoadingScreenActive = getIsLoadingScreenActive;
    /**
     * Sets the value of the specified variable to 0.
     * Always returns true.
     *
     * Hash: 0x46E2B844905BC5F0 | Since: 323
     */
    function hasCloudRequestsFinished(unused) {
        return HasCloudRequestsFinished(unused);
    }
    dlc.hasCloudRequestsFinished = hasCloudRequestsFinished;
    /**
     * Returns true if the given DLC pack is present.
     *
     * Hash: 0x812595A0644CE1DE | Since: 323
     */
    function isPresent(dlcHash) {
        if (typeof dlcHash === 'string')
            dlcHash = misc.getHashKey(dlcHash);
        return IsDlcPresent(dlcHash);
    }
    dlc.isPresent = isPresent;
    /**
     * This loads the GTA:O dlc map parts (high end garages, apartments).
     * Works in singleplayer.
     * In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
     *
     * Hash: 0x0888C3502DBBEEF5 | Since: 323
     */
    function onEnterMp() {
        OnEnterMp();
    }
    dlc.onEnterMp = onEnterMp;
    /**
     * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
     * Works in singleplayer.
     *
     * Hash: 0xD7C10C4A637992C9 | Since: 323
     */
    function onEnterSp() {
        OnEnterSp();
    }
    dlc.onEnterSp = onEnterSp;
})(dlc || (dlc = {}));
export var event;
(function (event_1) {
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0xD9F8455409B525E9 | Since: 323
     */
    function addShockingAtPosition(eventType, pos, duration) {
        return AddShockingEventAtPosition(eventType, pos.x, pos.y, pos.z, duration);
    }
    event_1.addShockingAtPosition = addShockingAtPosition;
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x7FD8F3BE76F89422 | Since: 323
     */
    function addShockingForEntity(eventType, entity, duration) {
        return AddShockingEventForEntity(eventType, entity, duration);
    }
    event_1.addShockingForEntity = addShockingForEntity;
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * This is limited to 4 blocked events at a time.
     *
     * Hash: 0xE42FCDFD0E4196F7 | Since: 323
     */
    function blockDecisionMaker(name, eventType) {
        if (typeof name === 'string')
            name = misc.getHashKey(name);
        BlockDecisionMakerEvent(name, eventType);
    }
    event_1.blockDecisionMaker = blockDecisionMaker;
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x4FC9381A7AEE8968 | Since: 323
     */
    function clearDecisionMakerResponse(name, eventType) {
        if (typeof name === 'string')
            name = misc.getHashKey(name);
        ClearDecisionMakerEventResponse(name, eventType);
    }
    event_1.clearDecisionMakerResponse = clearDecisionMakerResponse;
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x1374ABB7C15BAB92 | Since: 323
     */
    function isShockingInSphere(eventType, pos, radius) {
        return IsShockingEventInSphere(eventType, pos.x, pos.y, pos.z, radius);
    }
    event_1.isShockingInSphere = isShockingInSphere;
    /**
     * No comment provided
     *
     * Hash: 0xEAABE8FDFA21274C | Since: 323
     */
    function removeAllShockings() {
        RemoveAllShockingEvents(false);
    }
    event_1.removeAllShockings = removeAllShockings;
    /**
     * No comment provided
     *
     * Hash: 0x2CDA538C44C6CCE5 | Since: 323
     */
    function removeShocking(event) {
        return RemoveShockingEvent(event);
    }
    event_1.removeShocking = removeShocking;
    /**
     * No comment provided
     *
     * Hash: 0x340F1415B68AEADE | Since: 323
     */
    function removeShockingSpawnBlockingAreas() {
        RemoveShockingEventSpawnBlockingAreas();
    }
    event_1.removeShockingSpawnBlockingAreas = removeShockingSpawnBlockingAreas;
    /**
     * No comment provided
     *
     * Hash: 0xB604A2942ADED0EE | Since: 323
     */
    function setDecisionMaker(ped, name) {
        if (typeof name === 'string')
            name = misc.getHashKey(name);
        SetDecisionMaker(ped, name);
    }
    event_1.setDecisionMaker = setDecisionMaker;
    /**
     * No comment provided
     *
     * Hash: 0x5F3B7749C112D552 | Since: 323
     */
    function suppressAgitationsNextFrame() {
        SuppressAgitationEventsNextFrame();
    }
    event_1.suppressAgitationsNextFrame = suppressAgitationsNextFrame;
    /**
     * No comment provided
     *
     * Hash: 0x2F9A292AD0A3BD89 | Since: 323
     */
    function suppressShockingsNextFrame() {
        SuppressShockingEventsNextFrame();
    }
    event_1.suppressShockingsNextFrame = suppressShockingsNextFrame;
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0x3FD2EC8BF1F1CF30 | Since: 323
     */
    function suppressShockingTypeNextFrame(eventType) {
        SuppressShockingEventTypeNextFrame(eventType);
    }
    event_1.suppressShockingTypeNextFrame = suppressShockingTypeNextFrame;
    /**
     * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
     *
     * Hash: 0xD7CD9CF34F2C99E8 | Since: 323
     */
    function unblockDecisionMaker(name, eventType) {
        if (typeof name === 'string')
            name = misc.getHashKey(name);
        UnblockDecisionMakerEvent(name, eventType);
    }
    event_1.unblockDecisionMaker = unblockDecisionMaker;
})(event || (event = {}));
export var extrametadata;
(function (extrametadata) {
    /**
     * No comment provided
     *
     * Hash: 0x7796B21B76221BC5 | Since: 2612
     */
    function doesCurrentPedComponentHaveRestrictionTag(ped, componentId, restrictionTagHash) {
        if (typeof restrictionTagHash === 'string')
            restrictionTagHash = misc.getHashKey(restrictionTagHash);
        return Citizen.invokeNative('0x7796B21B76221BC5', ped, componentId, restrictionTagHash);
    }
    extrametadata.doesCurrentPedComponentHaveRestrictionTag = doesCurrentPedComponentHaveRestrictionTag;
    /**
     * No comment provided
     *
     * Hash: 0xD726BAB4554DA580 | Since: 2612
     */
    function doesCurrentPedPropHaveRestrictionTag(ped, componentId, restrictionTagHash) {
        if (typeof restrictionTagHash === 'string')
            restrictionTagHash = misc.getHashKey(restrictionTagHash);
        return Citizen.invokeNative('0xD726BAB4554DA580', ped, componentId, restrictionTagHash);
    }
    extrametadata.doesCurrentPedPropHaveRestrictionTag = doesCurrentPedPropHaveRestrictionTag;
    /**
     * Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json
     *
     * componentId/last parameter seems to be unused.
     *
     * Hash: 0x341DE7ED1D2A1BFD | Since: 323
     */
    function doesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        if (typeof restrictionTagHash === 'string')
            restrictionTagHash = misc.getHashKey(restrictionTagHash);
        return DoesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId);
    }
    extrametadata.doesShopPedApparelHaveRestrictionTag = doesShopPedApparelHaveRestrictionTag;
    /**
     * From fm_deathmatch_creator and fm_race_creator:
     *
     * `FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));`
     * `FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));`
     *
     * Hash: 0x6BEDF5769AC2DC07 | Since: 1604
     */
    function executeContentChangesetGroupForAll(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        LoadContentChangeSetGroup(hash);
    }
    extrametadata.executeContentChangesetGroupForAll = executeContentChangesetGroupForAll;
    /**
     * dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
     * outData is a struct of 3 8-byte items.
     * The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
     *
     * Hash: 0x33468EDC08E371F6 | Since: 323
     */
    function getDlcVehicleData(dlcVehicleIndex) {
        return GetDlcVehicleData(dlcVehicleIndex);
    }
    extrametadata.getDlcVehicleData = getDlcVehicleData;
    /**
     * No comment provided
     *
     * Hash: 0x5549EE11FA22FCF2 | Since: 323
     */
    function getDlcVehicleFlags(dlcVehicleIndex) {
        return GetDlcVehicleFlags(dlcVehicleIndex);
    }
    extrametadata.getDlcVehicleFlags = getDlcVehicleFlags;
    /**
     * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
     *
     * Hash: 0xECC01B7C5763333C | Since: 323
     */
    function getDlcVehicleModel(dlcVehicleIndex) {
        return GetDlcVehicleModel(dlcVehicleIndex);
    }
    extrametadata.getDlcVehicleModel = getDlcVehicleModel;
    /**
     * No comment provided
     *
     * Hash: 0xC098810437312FFF | Since: 323
     */
    function getDlcVehicleModLockHash(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return GetDlcVehicleModLockHash(hash);
    }
    extrametadata.getDlcVehicleModLockHash = getDlcVehicleModLockHash;
    /**
     * p0 seems to be the weapon index
     * p1 seems to be the weapon component index
     * struct DlcComponentData{
     * int attachBone;
     * int padding1;
     * int bActiveByDefault;
     * int padding2;
     * int unk;
     * int padding3;
     * int componentHash;
     * int padding4;
     * int unk2;
     * int padding5;
     * int componentCost;
     * int padding6;
     * char nameLabel[64];
     * char descLabel[64];
     * };
     *
     *
     * Hash: 0x6CF598A2957C2BF8 | Since: 323
     */
    function getDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex) {
        return GetDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex);
    }
    extrametadata.getDlcWeaponComponentData = getDlcWeaponComponentData;
    /**
     * Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
     *
     * Hash: 0x31D5E073B6F93CDC | Since: 2060
     */
    function getDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex) {
        return GetDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex);
    }
    extrametadata.getDlcWeaponComponentDataSp = getDlcWeaponComponentDataSp;
    /**
     *
     * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
     * struct DlcWeaponData
     * {
     * `int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this`
     * int padding1;
     * int weaponHash;
     * int padding2;
     * int unk;
     * int padding3;
     * int weaponCost;
     * int padding4;
     * int ammoCost;
     * int padding5;
     * int ammoType;
     * int padding6;
     * int defaultClipSize;
     * int padding7;
     * char nameLabel[64];
     * char descLabel[64];
     * char desc2Label[64]; // usually "the" + name
     * char upperCaseNameLabel[64];
     * };
     *
     * Hash: 0x79923CD21BECE14E | Since: 323
     */
    function getDlcWeaponData(dlcWeaponIndex) {
        return GetDlcWeaponData(dlcWeaponIndex);
    }
    extrametadata.getDlcWeaponData = getDlcWeaponData;
    /**
     * Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
     *
     * Hash: 0x310836EE7129BA33 | Since: 2060
     */
    function getDlcWeaponDataSp(dlcWeaponIndex) {
        return GetDlcWeaponDataSp(dlcWeaponIndex);
    }
    extrametadata.getDlcWeaponDataSp = getDlcWeaponDataSp;
    /**
     * No comment provided
     *
     * Hash: 0x6C93ED8C2F74859B | Since: 323
     */
    function getForcedComponent(componentHash, forcedComponentIndex) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetForcedComponent(componentHash, forcedComponentIndex);
    }
    extrametadata.getForcedComponent = getForcedComponent;
    /**
     * No comment provided
     *
     * Hash: 0xE1CA84EBF72E691D | Since: 323
     */
    function getForcedProp(componentHash, forcedPropIndex) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetForcedProp(componentHash, forcedPropIndex);
    }
    extrametadata.getForcedProp = getForcedProp;
    /**
     * No comment provided
     *
     * Hash: 0x0368B3A838070348 | Since: 323
     */
    function getHashNameForComponent(entity, componentId, drawableVariant, textureVariant) {
        return GetHashNameForComponent(entity, componentId, drawableVariant, textureVariant);
    }
    extrametadata.getHashNameForComponent = getHashNameForComponent;
    /**
     * No comment provided
     *
     * Hash: 0x5D6160275CAEC8DD | Since: 323
     */
    function getHashNameForProp(entity, componentId, propIndex, propTextureIndex) {
        return GetHashNameForProp(entity, componentId, propIndex, propTextureIndex);
    }
    extrametadata.getHashNameForProp = getHashNameForProp;
    /**
     * No comment provided
     *
     * Hash: 0xA7A866D21CD2329B | Since: 323
     */
    function getNumDlcVehicles() {
        return GetNumDlcVehicles();
    }
    extrametadata.getNumDlcVehicles = getNumDlcVehicles;
    /**
     * Returns the total number of DLC weapons.
     *
     * Hash: 0xEE47635F352DA367 | Since: 323
     */
    function getNumDlcWeapons() {
        return GetNumDlcWeapons();
    }
    extrametadata.getNumDlcWeapons = getNumDlcWeapons;
    /**
     * Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
     *
     * Hash: 0x4160B65AE085B5A9 | Since: 2060
     */
    function getNumDlcWeaponsSp() {
        return GetNumDlcWeaponsSp();
    }
    extrametadata.getNumDlcWeaponsSp = getNumDlcWeaponsSp;
    /**
     * Returns the total number of DLC weapon components.
     *
     * Hash: 0x405425358A7D61FE | Since: 323
     */
    function getNumDlcWeaponComponents(dlcWeaponIndex) {
        return GetNumDlcWeaponComponents(dlcWeaponIndex);
    }
    extrametadata.getNumDlcWeaponComponents = getNumDlcWeaponComponents;
    /**
     * Returns the total number of DLC weapon components that are available in SP.
     *
     * Hash: 0xAD2A7A6DFF55841B | Since: 2060
     */
    function getNumDlcWeaponComponentsSp(dlcWeaponIndex) {
        return GetNumDlcWeaponComponentsSp(dlcWeaponIndex);
    }
    extrametadata.getNumDlcWeaponComponentsSp = getNumDlcWeaponComponentsSp;
    /**
     * Character types:
     * 0 = Michael,
     * 1 = Franklin,
     * 2 = Trevor,
     * 3 = MPMale,
     * 4 = MPFemale
     *
     * Hash: 0x278F76C3B0A8F109 | Since: 323
     */
    function getNumTattooShopDlcItems(character) {
        return GetNumTattooShopDlcItems(character);
    }
    extrametadata.getNumTattooShopDlcItems = getNumTattooShopDlcItems;
    /**
     * Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
     *
     * Hash: 0xC6B9DB42C04DD8C3 | Since: 323
     */
    function getShopPedApparelForcedComponentCount(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopPedApparelForcedComponentCount(componentHash);
    }
    extrametadata.getShopPedApparelForcedComponentCount = getShopPedApparelForcedComponentCount;
    /**
     * Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
     *
     * Hash: 0x017568A8182D98A6 | Since: 323
     */
    function getShopPedApparelForcedPropCount(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopPedApparelForcedPropCount(componentHash);
    }
    extrametadata.getShopPedApparelForcedPropCount = getShopPedApparelForcedPropCount;
    /**
     * No comment provided
     *
     * Hash: 0xC17AD0E5752BECDA | Since: 323
     */
    function getShopPedApparelVariantComponentCount(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopPedApparelVariantComponentCount(componentHash);
    }
    extrametadata.getShopPedApparelVariantComponentCount = getShopPedApparelVariantComponentCount;
    /**
     * `propHash`: Ped helmet prop hash?
     * This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
     *
     * Hash: 0xD40AAC51E8E4C663 | Since: 791
     */
    function getShopPedApparelVariantPropCount(propHash) {
        if (typeof propHash === 'string')
            propHash = misc.getHashKey(propHash);
        return GetShopPedApparelVariantPropCount(propHash);
    }
    extrametadata.getShopPedApparelVariantPropCount = getShopPedApparelVariantPropCount;
    /**
     * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
     *
     * Hash: 0x74C0E2A57EC66760 | Since: 323
     */
    function getShopPedComponent(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopPedComponent(componentHash);
    }
    extrametadata.getShopPedComponent = getShopPedComponent;
    /**
     * No comment provided
     *
     * Hash: 0xB7952076E444979D | Since: 323
     */
    function getShopPedOutfit() {
        return GetShopPedOutfit(undefined);
    }
    extrametadata.getShopPedOutfit = getShopPedOutfit;
    /**
     * See https://git.io/JtcBH for example and structs.
     *
     * Hash: 0x19F2A026EDF0013F | Since: 323
     */
    function getShopPedOutfitComponentVariant(outfitHash, variantIndex) {
        if (typeof outfitHash === 'string')
            outfitHash = misc.getHashKey(outfitHash);
        return GetShopPedOutfitComponentVariant(outfitHash, variantIndex);
    }
    extrametadata.getShopPedOutfitComponentVariant = getShopPedOutfitComponentVariant;
    /**
     * No comment provided
     *
     * Hash: 0x073CA26B079F956E | Since: 323
     */
    function getShopPedOutfitLocate() {
        return GetShopPedOutfitLocate(undefined);
    }
    extrametadata.getShopPedOutfitLocate = getShopPedOutfitLocate;
    /**
     * See https://git.io/JtcBH for example and structs.
     *
     * Hash: 0xA9F9C2E0FDE11CBB | Since: 323
     */
    function getShopPedOutfitPropVariant(outfitHash, variantIndex) {
        if (typeof outfitHash === 'string')
            outfitHash = misc.getHashKey(outfitHash);
        return GetShopPedOutfitPropVariant(outfitHash, variantIndex);
    }
    extrametadata.getShopPedOutfitPropVariant = getShopPedOutfitPropVariant;
    /**
     * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
     *
     * Hash: 0x5D5CAFF661DDF6FC | Since: 323
     */
    function getShopPedProp(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetShopPedProp(componentHash);
    }
    extrametadata.getShopPedProp = getShopPedProp;
    /**
     * See https://git.io/JtcRf for example and structs.
     *
     * Hash: 0x249E310B2D920699 | Since: 323
     */
    function getShopPedQueryComponent(componentId) {
        return GetShopPedQueryComponent(componentId);
    }
    extrametadata.getShopPedQueryComponent = getShopPedQueryComponent;
    /**
     * Returns some sort of index/offset for components.
     * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
     *
     * Hash: 0x96E2929292A4DB77 | Since: 2189
     */
    function getShopPedQueryComponentIndex(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0x96E2929292A4DB77', componentHash);
    }
    extrametadata.getShopPedQueryComponentIndex = getShopPedQueryComponentIndex;
    /**
     * outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
     * See https://git.io/JtcB8 for example and outfit struct.
     *
     * Hash: 0x6D793F03A631FE56 | Since: 323
     */
    function getShopPedQueryOutfit(outfitIndex) {
        return GetShopPedQueryOutfit(outfitIndex);
    }
    extrametadata.getShopPedQueryOutfit = getShopPedQueryOutfit;
    /**
     * See https://git.io/JtcRf for example and structs.
     *
     * Hash: 0xDE44A00999B2837D | Since: 323
     */
    function getShopPedQueryProp(componentId) {
        return GetShopPedQueryProp(componentId);
    }
    extrametadata.getShopPedQueryProp = getShopPedQueryProp;
    /**
     * Returns some sort of index/offset for props.
     * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
     *
     * Hash: 0x6CEBE002E58DEE97 | Since: 2189
     */
    function getShopPedQueryPropIndex(componentHash) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return Citizen.invokeNative('0x6CEBE002E58DEE97', componentHash);
    }
    extrametadata.getShopPedQueryPropIndex = getShopPedQueryPropIndex;
    /**
     * Character types:
     * 0 = Michael,
     * 1 = Franklin,
     * 2 = Trevor,
     * 3 = MPMale,
     * 4 = MPFemale
     *
     *
     * enum TattooZoneData
     * {
     * ZONE_TORSO = 0,
     * ZONE_HEAD = 1,
     * ZONE_LEFT_ARM = 2,
     * ZONE_RIGHT_ARM = 3,
     * ZONE_LEFT_LEG = 4,
     * ZONE_RIGHT_LEG = 5,
     * ZONE_UNKNOWN = 6,
     * ZONE_NONE = 7,
     * };
     * struct outComponent
     * {
     * // these vars are suffixed with 4 bytes of padding each.
     * uint unk;
     * int unk2;
     * uint tattooCollectionHash;
     * uint tattooNameHash;
     * int unk3;
     * TattooZoneData zoneId;
     * uint unk4;
     * uint unk5;
     * // maybe more, not sure exactly, decompiled scripts are very vague around this part.
     * }
     *
     * Hash: 0xFF56381874F82086 | Since: 323
     */
    function getTattooShopDlcItemData(characterType, decorationIndex) {
        return GetTattooShopDlcItemData(characterType, decorationIndex);
    }
    extrametadata.getTattooShopDlcItemData = getTattooShopDlcItemData;
    /**
     * Returns some sort of index/offset for overlays/decorations.
     *
     * Character types:
     * 0 = Michael,
     * 1 = Franklin,
     * 2 = Trevor,
     * 3 = MPMale,
     * 4 = MPFemale
     *
     * Hash: 0x10144267DD22866C | Since: 2189
     */
    function getTattooShopDlcItemIndex(overlayHash, character) {
        if (typeof overlayHash === 'string')
            overlayHash = misc.getHashKey(overlayHash);
        return GetTattooShopDlcItemIndex(overlayHash, undefined, character);
    }
    extrametadata.getTattooShopDlcItemIndex = getTattooShopDlcItemIndex;
    /**
     * No comment provided
     *
     * Hash: 0x6E11F282F11863B6 | Since: 323
     */
    function getVariantComponent(componentHash, variantComponentIndex) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetVariantComponent(componentHash, variantComponentIndex);
    }
    extrametadata.getVariantComponent = getVariantComponent;
    /**
     * No comment provided
     *
     * Hash: 0xD81B7F27BC773E66 | Since: 791
     */
    function getVariantProp(componentHash, variantPropIndex) {
        if (typeof componentHash === 'string')
            componentHash = misc.getHashKey(componentHash);
        return GetVariantProp(componentHash, variantPropIndex);
    }
    extrametadata.getVariantProp = getVariantProp;
    /**
     * No comment provided
     *
     * Hash: 0x1E8C308FD312C036 | Since: 323
     */
    function initShopPedComponent() {
        return InitShopPedComponent();
    }
    extrametadata.initShopPedComponent = initShopPedComponent;
    /**
     * No comment provided
     *
     * Hash: 0xEB0A2B758F7B850F | Since: 323
     */
    function initShopPedProp() {
        return InitShopPedProp();
    }
    extrametadata.initShopPedProp = initShopPedProp;
    /**
     * No comment provided
     *
     * Hash: 0xD4D7B033C3AA243C | Since: 323
     */
    function isContentItemLocked(itemHash) {
        if (typeof itemHash === 'string')
            itemHash = misc.getHashKey(itemHash);
        return IsContentItemLocked(itemHash);
    }
    extrametadata.isContentItemLocked = isContentItemLocked;
    /**
     * No comment provided
     *
     * Hash: 0x0564B9FF9631B82C | Since: 323
     */
    function isDlcVehicleMod(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return IsDlcVehicleMod(hash);
    }
    extrametadata.isDlcVehicleMod = isDlcVehicleMod;
    /**
     * From fm_deathmatch_creator and fm_race_creator:
     *
     * `FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));`
     * `FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));`
     *
     * Hash: 0x3C1978285B036B25 | Since: 1604
     */
    function revertContentChangesetGroupForAll(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        UnloadContentChangeSetGroup(hash);
    }
    extrametadata.revertContentChangesetGroupForAll = revertContentChangesetGroupForAll;
    /**
     * No comment provided
     *
     * Hash: 0x50F457823CE6EB5F | Since: 323
     */
    function setupShopPedApparelQuery() {
        return SetupShopPedApparelQuery(0, 0, 0, 0);
    }
    extrametadata.setupShopPedApparelQuery = setupShopPedApparelQuery;
    /**
     * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
     *
     * componentId is between 0 and 11 and corresponds to the usual component slots.
     *
     * p1 could be the outfit number; unsure.
     *
     * p2 is usually -1; unknown function.
     *
     * p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
     *
     * p4 is usually -1; unknown function.
     *
     * componentId is -1 when p3 is true in decompiled scripts.
     *
     * Hash: 0x9BDF59818B1E38C1 | Since: 323
     */
    function setupShopPedApparelQueryTu(character, componentId) {
        return SetupShopPedApparelQueryTu(character, 0, 0, false, 0, componentId);
    }
    extrametadata.setupShopPedApparelQueryTu = setupShopPedApparelQueryTu;
    /**
     * characters
     *
     * 0: Michael
     * 1: Franklin
     * 2: Trevor
     * 3: MPMale
     * 4: MPFemale
     *
     * Hash: 0xF3FBE2D50A6A8C28 | Since: 323
     */
    function setupShopPedOutfitQuery(character) {
        return SetupShopPedOutfitQuery(character, false);
    }
    extrametadata.setupShopPedOutfitQuery = setupShopPedOutfitQuery;
})(extrametadata || (extrametadata = {}));
export var fire;
(function (fire) {
    /**
     * BOOL isAudible = If explosion makes a sound.
     * BOOL isInvisible = If the explosion is invisible or not.
     *
     * explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
     *
     * Hash: 0xE3AD2BDBAEE269AC | Since: 323
     */
    function addExplosion(pos, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage) {
        AddExplosion(pos.x, pos.y, pos.z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage);
    }
    fire.addExplosion = addExplosion;
    /**
     * isAudible: If explosion makes a sound.
     * isInvisible: If the explosion is invisible or not.
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x36DD3FE58B5E5212 | Since: 323
     */
    function addExplosionWithUserVfx(pos, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
        if (typeof explosionFx === 'string')
            explosionFx = misc.getHashKey(explosionFx);
        AddExplosionWithUserVfx(pos.x, pos.y, pos.z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
    }
    fire.addExplosionWithUserVfx = addExplosionWithUserVfx;
    /**
     * isAudible: If explosion makes a sound.
     * isInvisible: If the explosion is invisible or not.
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x172AA1B624FA1013 | Since: 323
     */
    function addOwnedExplosion(ped, pos, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
        AddOwnedExplosion(ped, pos.x, pos.y, pos.z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
    }
    fire.addOwnedExplosion = addOwnedExplosion;
    /**
     * Returns TRUE if it found something. FALSE if not.
     *
     * Hash: 0x352A9F6BCF90081F | Since: 323
     */
    function getClosestPos(pos) {
        return GetClosestFirePos(pos.x, pos.y, pos.z);
    }
    fire.getClosestPos = getClosestPos;
    /**
     * No comment provided
     *
     * Hash: 0x50CAD495A460B305 | Since: 323
     */
    function getNumberOfsInRange(pos, radius) {
        return GetNumberOfFiresInRange(pos.x, pos.y, pos.z, radius);
    }
    fire.getNumberOfsInRange = getNumberOfsInRange;
    /**
     * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
     *
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x14BA4BA137AF6CEC | Since: 323
     */
    function getOwnerOfExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, radius) {
        return GetEntityInsideExplosionArea(explosionType, x1, y1, z1, x2, y2, z2, radius);
    }
    fire.getOwnerOfExplosionInAngledArea = getOwnerOfExplosionInAngledArea;
    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0xB3CD51E3DB86F176 | Since: 1290
     */
    function getOwnerOfExplosionInSphere(explosionType, pos, radius) {
        return GetEntityInsideExplosionSphere(explosionType, pos.x, pos.y, pos.z, radius);
    }
    fire.getOwnerOfExplosionInSphere = getOwnerOfExplosionInSphere;
    /**
     * No comment provided
     *
     * Hash: 0x28D3FED7190D3A0B | Since: 323
     */
    function isEntityOn(entity) {
        return IsEntityOnFire(entity);
    }
    fire.isEntityOn = isEntityOn;
    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x6070104B699B2EF4 | Since: 323
     */
    function isExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2) {
        return IsExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2);
    }
    fire.isExplosionActiveInArea = isExplosionActiveInArea;
    /**
     * explosionType: See ADD_EXPLOSION, -1 for any explosion type
     *
     *
     * Hash: 0xA079A6C51525DC4B | Since: 323
     */
    function isExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width) {
        return IsExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width);
    }
    fire.isExplosionInAngledArea = isExplosionInAngledArea;
    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0x2E2EBA0EE7CED0E0 | Since: 323
     */
    function isExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2) {
        return IsExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2);
    }
    fire.isExplosionInArea = isExplosionInArea;
    /**
     * explosionType: See ADD_EXPLOSION.
     *
     * Hash: 0xAB0F816885B0E483 | Since: 323
     */
    function isExplosionInSphere(explosionType, pos, radius) {
        return IsExplosionInSphere(explosionType, pos.x, pos.y, pos.z, radius);
    }
    fire.isExplosionInSphere = isExplosionInSphere;
    /**
     * No comment provided
     *
     * Hash: 0x7FF548385680673F | Since: 323
     */
    function removeScript(fireHandle) {
        RemoveScriptFire(fireHandle);
    }
    fire.removeScript = removeScript;
    /**
     * No comment provided
     *
     * Hash: 0x8F390AC4155099BA | Since: 1734
     */
    function setFlammabilityMultiplier() {
        SetFireSpreadRate(0);
    }
    fire.setFlammabilityMultiplier = setFlammabilityMultiplier;
    /**
     * No comment provided
     *
     * Hash: 0xF6A9D9708F6F23DF | Since: 323
     */
    function startEntity(entity) {
        return StartEntityFire(entity);
    }
    fire.startEntity = startEntity;
    /**
     * Starts a fire:
     *
     * xyz: Location of fire
     * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
     * isGasFire: Whether or not the fire is powered by gasoline.
     *
     * Hash: 0x6B83617E04503888 | Since: 323
     */
    function startScript(pos, maxChildren, isGasFire) {
        return StartScriptFire(pos.x, pos.y, pos.z, maxChildren, isGasFire);
    }
    fire.startScript = startScript;
    /**
     * No comment provided
     *
     * Hash: 0x7F0DD2EBBB651AFF | Since: 323
     */
    function stopEntity(entity) {
        StopEntityFire(entity);
    }
    fire.stopEntity = stopEntity;
    /**
     * No comment provided
     *
     * Hash: 0x056A8A219B8E829F | Since: 323
     */
    function stopInRange(pos, radius) {
        StopFireInRange(pos.x, pos.y, pos.z, radius);
    }
    fire.stopInRange = stopInRange;
    /**
     * No comment provided
     *
     * Hash: 0x5241DB47A8B8AD54 | Since: 3570
     */
    function networkExpectExplosionEventsForPlayer(expect, player) {
        Citizen.invokeNative('0x5241DB47A8B8AD54', expect, player);
    }
    fire.networkExpectExplosionEventsForPlayer = networkExpectExplosionEventsForPlayer;
})(fire || (fire = {}));
export var interior;
(function (interior_1) {
    /**
     * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
     *
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x55E86AF2712B36A1 | Since: 323
     */
    function activateEntitySet(interior, entitySetName) {
        ActivateInteriorEntitySet(interior, entitySetName);
    }
    interior_1.activateEntitySet = activateEntitySet;
    /**
     * No comment provided
     *
     * Hash: 0x483ACA1176CA93F1 | Since: 1103
     */
    function activateGroupsUsingCamera() {
        Citizen.invokeNative('0x483ACA1176CA93F1');
    }
    interior_1.activateGroupsUsingCamera = activateGroupsUsingCamera;
    /**
     * No comment provided
     *
     * Hash: 0x3F6167F351168730 | Since: 323
     */
    function addPickupToRoomByName(pickup, roomName) {
        AddPickupToInteriorRoomByName(pickup, roomName);
    }
    interior_1.addPickupToRoomByName = addPickupToRoomByName;
    /**
     * `Does something similar to INTERIOR::DISABLE_INTERIOR`
     *
     * Hash: 0xD9175F941610DB54 | Since: 323
     */
    function cap(interior, toggle) {
        CapInterior(interior, toggle);
    }
    interior_1.cap = cap;
    /**
     * Immediately removes entity from an interior. Like sets entity to `limbo` room.
     *
     * Hash: 0x85D5422B2039A70D | Since: 2189
     */
    function clearStateOfEntity(entity) {
        ClearInteriorForEntity(entity);
    }
    interior_1.clearStateOfEntity = clearStateOfEntity;
    /**
     * No comment provided
     *
     * Hash: 0xB365FC0C4E27FFA7 | Since: 323
     */
    function clearRoomForEntity(entity) {
        ClearRoomForEntity(entity);
    }
    interior_1.clearRoomForEntity = clearRoomForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x23B59D8912F94246 | Since: 323
     */
    function clearRoomForGameViewport() {
        ClearRoomForGameViewport();
    }
    interior_1.clearRoomForGameViewport = clearRoomForGameViewport;
    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x420BD37289EEE162 | Since: 323
     */
    function deactivateEntitySet(interior, entitySetName) {
        DeactivateInteriorEntitySet(interior, entitySetName);
    }
    interior_1.deactivateEntitySet = deactivateEntitySet;
    /**
     * Example:
     * This removes the interior from the strip club and when trying to walk inside the player just falls:
     *
     * `INTERIOR::DISABLE_INTERIOR(118018, true);`
     *
     * Hash: 0x6170941419D7D8EC | Since: 323
     */
    function disable(interior, toggle) {
        DisableInterior(interior, toggle);
    }
    interior_1.disable = disable;
    /**
     * No comment provided
     *
     * Hash: 0x9E6542F0CE8E70A3 | Since: 323
     */
    function disableMetroSystem(toggle) {
        Citizen.invokeNative('0x9E6542F0CE8E70A3', toggle);
    }
    interior_1.disableMetroSystem = disableMetroSystem;
    /**
     * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
     *
     * More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
     *
     * Hash: 0xA97F257D0151A6AB | Since: 323
     */
    function enableExteriorCullModelThisFrame(mapObjectHash) {
        if (typeof mapObjectHash === 'string')
            mapObjectHash = misc.getHashKey(mapObjectHash);
        EnableExteriorCullModelThisFrame(mapObjectHash);
    }
    interior_1.enableExteriorCullModelThisFrame = enableExteriorCullModelThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x50C375537449F369 | Since: 757
     */
    function enableShadowCullModelThisFrame(mapObjectHash) {
        if (typeof mapObjectHash === 'string')
            mapObjectHash = misc.getHashKey(mapObjectHash);
        EnableScriptCullModelThisFrame(mapObjectHash);
    }
    interior_1.enableShadowCullModelThisFrame = enableShadowCullModelThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x7ECDF98587E92DEC | Since: 1604
     */
    function enableStadiumProbesThisFrame(toggle) {
        Citizen.invokeNative('0x7ECDF98587E92DEC', toggle);
    }
    interior_1.enableStadiumProbesThisFrame = enableStadiumProbesThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x38C1CB1CB119A016 | Since: 1493
     */
    function forceActivatingTrackingOnEntity() {
        Citizen.invokeNative('0x38C1CB1CB119A016', undefined, undefined);
    }
    interior_1.forceActivatingTrackingOnEntity = forceActivatingTrackingOnEntity;
    /**
     * No comment provided
     *
     * Hash: 0x52923C4710DD9907 | Since: 323
     */
    function forceRoomForEntity(entity, interior, roomHashKey) {
        if (typeof roomHashKey === 'string')
            roomHashKey = misc.getHashKey(roomHashKey);
        ForceRoomForEntity(entity, interior, roomHashKey);
    }
    interior_1.forceRoomForEntity = forceRoomForEntity;
    /**
     * No comment provided
     *
     * Hash: 0x920D853F3E17F1DA | Since: 323
     */
    function forceRoomForGameViewport(interiorID, roomHashKey) {
        if (typeof roomHashKey === 'string')
            roomHashKey = misc.getHashKey(roomHashKey);
        ForceRoomForGameViewport(interiorID, roomHashKey);
    }
    interior_1.forceRoomForGameViewport = forceRoomForGameViewport;
    /**
     * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
     *
     * Example for VB.NET
     * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
     *
     * Hash: 0xB0F7F8663821D9C3 | Since: 323
     */
    function getAtCoords(pos) {
        return GetInteriorAtCoords(pos.x, pos.y, pos.z);
    }
    interior_1.getAtCoords = getAtCoords;
    /**
     * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
     *
     * `Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))`
     *
     * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
     *
     * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
     *
     * Hash: 0x05B7A89BD78797FC | Since: 323
     */
    function getAtCoordsWithType(pos, interiorType) {
        return GetInteriorAtCoordsWithType(pos.x, pos.y, pos.z, interiorType);
    }
    interior_1.getAtCoordsWithType = getAtCoordsWithType;
    /**
     * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
     *
     * Hash: 0xF0F77ADB9F67E79D | Since: 323
     */
    function getAtCoordsWithTypehash(pos, typeHash) {
        if (typeof typeHash === 'string')
            typeHash = misc.getHashKey(typeHash);
        return GetInteriorAtCoordsWithTypehash(pos.x, pos.y, pos.z, typeHash);
    }
    interior_1.getAtCoordsWithTypehash = getAtCoordsWithTypehash;
    /**
     * No comment provided
     *
     * Hash: 0xEC4CF9FCB29A4424 | Since: 323
     */
    function getFromCollision(pos) {
        return GetInteriorFromCollision(pos.x, pos.y, pos.z);
    }
    interior_1.getFromCollision = getFromCollision;
    /**
     * Returns the handle of the interior that the entity is in. Returns 0 if outside.
     *
     * Hash: 0x2107BA504071A6BB | Since: 323
     */
    function getFromEntity(entity) {
        return GetInteriorFromEntity(entity);
    }
    interior_1.getFromEntity = getFromEntity;
    /**
     * Returns the current interior id from gameplay camera
     *
     * Hash: 0xE7D267EC6CA966C3 | Since: 1604
     */
    function getFromPrimaryView() {
        return GetInteriorFromPrimaryView();
    }
    interior_1.getFromPrimaryView = getFromPrimaryView;
    /**
     * Returns the group ID of the specified interior.
     * 0 = default
     * 1 = subway station, subway tracks, sewers
     * 3 = train tunnel under mirror park
     * 5 = tunnel near del perro
     * 6 = train tunnel near chilliad
     * 7 = train tunnel near josiah
     * 8 = train tunnel in sandy shores
     * 9 = braddock tunnel (near chilliad)
     * 12 = tunnel under fort zancudo
     * 14 = train tunnel under cypress flats
     * 18 = rockford plaza parking garage
     * 19 = arcadius parking garage
     * 20 = union depository parking garage
     * 21 = fib parking garage
     *
     * Hash: 0xE4A84ABF135EF91A | Since: 323
     */
    function getGroupId(interior) {
        return GetInteriorGroupId(interior);
    }
    interior_1.getGroupId = getGroupId;
    /**
     * No comment provided
     *
     * Hash: 0xF49B58631D9E22D9 | Since: 1493
     */
    function getHeading(interior) {
        return GetInteriorHeading(interior);
    }
    interior_1.getHeading = getHeading;
    /**
     * No comment provided
     *
     * Hash: 0x252BDC06B73FA6EA | Since: 1290
     */
    function getLocationAndNamehash(interior) {
        return GetInteriorLocationAndNamehash(interior);
    }
    interior_1.getLocationAndNamehash = getLocationAndNamehash;
    /**
     * `Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY`
     *
     * Hash: 0x399685DB942336BC | Since: 323
     */
    function getKeyForEntityInRoom(entity) {
        return GetKeyForEntityInRoom(entity);
    }
    interior_1.getKeyForEntityInRoom = getKeyForEntityInRoom;
    /**
     * No comment provided
     *
     * Hash: 0x9E3B3E6D66F6E22F | Since: 323
     */
    function getOffsetFromInWorldCoords(interior, pos) {
        return new Vector3(GetOffsetFromInteriorInWorldCoords(interior, pos.x, pos.y, pos.z));
    }
    interior_1.getOffsetFromInWorldCoords = getOffsetFromInWorldCoords;
    /**
     * No comment provided
     *
     * Hash: 0xA6575914D2A0B450 | Since: 323
     */
    function getRoomKeyForGameViewport() {
        return GetRoomKeyForGameViewport();
    }
    interior_1.getRoomKeyForGameViewport = getRoomKeyForGameViewport;
    /**
     * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
     *
     * Hash: 0x47C2A06D4F5F424B | Since: 323
     */
    function getRoomKeyFromEntity(entity) {
        return GetRoomKeyFromEntity(entity);
    }
    interior_1.getRoomKeyFromEntity = getRoomKeyFromEntity;
    /**
     * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
     *
     * Hash: 0xEEA5AC2EDA7C33E8 | Since: 323
     */
    function isCollisionMarkedOutside(pos) {
        return IsCollisionMarkedOutside(pos.x, pos.y, pos.z);
    }
    interior_1.isCollisionMarkedOutside = isCollisionMarkedOutside;
    /**
     * No comment provided
     *
     * Hash: 0x92BAC8ACF88CEC26 | Since: 323
     */
    function isCapped(interior) {
        return IsInteriorCapped(interior);
    }
    interior_1.isCapped = isCapped;
    /**
     * No comment provided
     *
     * Hash: 0xBC5115A5A939DD15 | Since: 323
     */
    function isDisabled(interior) {
        return IsInteriorDisabled(interior);
    }
    interior_1.isDisabled = isDisabled;
    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0x35F7DD45E8C0A16D | Since: 323
     */
    function isEntitySetActive(interior, entitySetName) {
        return IsInteriorEntitySetActive(interior, entitySetName);
    }
    interior_1.isEntitySetActive = isEntitySetActive;
    /**
     * No comment provided
     *
     * Hash: 0x6726BDCCC1932F0E | Since: 323
     */
    function isReady(interior) {
        return IsInteriorReady(interior);
    }
    interior_1.isReady = isReady;
    /**
     * No comment provided
     *
     * Hash: 0xBC72B5D7A1CBD54D | Since: 323
     */
    function isScene() {
        return IsInteriorScene();
    }
    interior_1.isScene = isScene;
    /**
     * No comment provided
     *
     * Hash: 0x26B0E73D7EAAF4D3 | Since: 323
     */
    function isValid(interior) {
        return IsValidInterior(interior);
    }
    interior_1.isValid = isValid;
    /**
     * No comment provided
     *
     * Hash: 0x2CA429C029CCF247 | Since: 323
     */
    function pinInMemory(interior) {
        PinInteriorInMemory(interior);
    }
    interior_1.pinInMemory = pinInMemory;
    /**
     * No comment provided
     *
     * Hash: 0x41F37C3427C75AE0 | Since: 323
     */
    function refresh(interior) {
        RefreshInterior(interior);
    }
    interior_1.refresh = refresh;
    /**
     * No comment provided
     *
     * Hash: 0x82EBB79E258FA2B7 | Since: 323
     */
    function retainEntityIn(entity, interior) {
        Citizen.invokeNative('0x82EBB79E258FA2B7', entity, interior);
    }
    interior_1.retainEntityIn = retainEntityIn;
    /**
     * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
     *
     * Hash: 0xC1F1920BAF281317 | Since: 877
     */
    function setEntitySetTintIndex(interior, entitySetName, color) {
        SetInteriorEntitySetColor(interior, entitySetName, color);
    }
    interior_1.setEntitySetTintIndex = setEntitySetTintIndex;
    /**
     * Only used once in the entire game scripts.
     * Does not actually return anything.
     *
     * Hash: 0x4C2330E61D3DEB56 | Since: 323
     */
    function setInUse(interior) {
        return Citizen.invokeNative('0x4C2330E61D3DEB56', interior);
    }
    interior_1.setInUse = setInUse;
    /**
     * Jenkins hash _might_ be 0xFC227584.
     *
     * Hash: 0x7241CCB7D020DB69 | Since: 791
     */
    function setIsExteriorOnly(entity, toggle) {
        Citizen.invokeNative('0x7241CCB7D020DB69', entity, toggle);
    }
    interior_1.setIsExteriorOnly = setIsExteriorOnly;
    /**
     * `Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));`
     *
     * Hash: 0x405DC2AEF6AF95B9 | Since: 323
     */
    function setRoomForGameViewportByKey(roomHashKey) {
        if (typeof roomHashKey === 'string')
            roomHashKey = misc.getHashKey(roomHashKey);
        Citizen.invokeNative('0x405DC2AEF6AF95B9', roomHashKey);
    }
    interior_1.setRoomForGameViewportByKey = setRoomForGameViewportByKey;
    /**
     * Example of use (carmod_shop)
     * `INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom");`
     *
     * Hash: 0xAF348AFCB575A441 | Since: 323
     */
    function setRoomForGameViewportByName(roomName) {
        Citizen.invokeNative('0xAF348AFCB575A441', roomName);
    }
    interior_1.setRoomForGameViewportByName = setRoomForGameViewportByName;
    /**
     * `Does something similar to INTERIOR::DISABLE_INTERIOR.`
     *
     * `You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.`
     *
     * Hash: 0x261CCE7EED010641 | Since: 323
     */
    function unpin(interior) {
        UnpinInterior(interior);
    }
    interior_1.unpin = unpin;
})(interior || (interior = {}));
export var itemset;
(function (itemset_1) {
    /**
     * No comment provided
     *
     * Hash: 0xE3945201F14637DD | Since: 323
     */
    function addTo(item, itemset) {
        return AddToItemset(item, itemset);
    }
    itemset_1.addTo = addTo;
    /**
     * No comment provided
     *
     * Hash: 0x41BC0D722FC04221 | Since: 323
     */
    function clean(itemset) {
        CleanItemset(itemset);
    }
    itemset_1.clean = clean;
    /**
     * No comment provided
     *
     * Hash: 0x35AD299F50D91B24 | Since: 323
     */
    function create() {
        return CreateItemset(false);
    }
    itemset_1.create = create;
    /**
     * No comment provided
     *
     * Hash: 0xDE18220B1C183EDA | Since: 323
     */
    function destroy(itemset) {
        DestroyItemset(itemset);
    }
    itemset_1.destroy = destroy;
    /**
     * No comment provided
     *
     * Hash: 0x7A197E2521EE2BAB | Since: 323
     */
    function getIndexedItemIn(index, itemset) {
        return GetIndexedItemInItemset(index, itemset);
    }
    itemset_1.getIndexedItemIn = getIndexedItemIn;
    /**
     * No comment provided
     *
     * Hash: 0xD9127E83ABF7C631 | Since: 323
     */
    function getSize(itemset) {
        return GetItemsetSize(itemset);
    }
    itemset_1.getSize = getSize;
    /**
     * No comment provided
     *
     * Hash: 0x2D0FC594D1E9C107 | Since: 323
     */
    function isIn(item, itemset) {
        return IsInItemset(item, itemset);
    }
    itemset_1.isIn = isIn;
    /**
     * No comment provided
     *
     * Hash: 0xB1B1EA596344DFAB | Since: 323
     */
    function isValid(itemset) {
        return IsItemsetValid(itemset);
    }
    itemset_1.isValid = isValid;
    /**
     * No comment provided
     *
     * Hash: 0x25E68244B0177686 | Since: 323
     */
    function removeFrom(item, itemset) {
        RemoveFromItemset(item, itemset);
    }
    itemset_1.removeFrom = removeFrom;
})(itemset || (itemset = {}));
export var lobby;
(function (lobby) {
    /**
     * No comment provided
     *
     * Hash: 0x8AA464D4E0F6ACCD | Since: 323
     */
    function autoMultiplayerEvent() {
        return LoadingscreenGetLoadFreemodeWithEventName();
    }
    lobby.autoMultiplayerEvent = autoMultiplayerEvent;
    /**
     * No comment provided
     *
     * Hash: 0xEF7D17BC6C85264C | Since: 323
     */
    function autoMultiplayerFreemode() {
        return LoadingscreenGetLoadFreemode();
    }
    lobby.autoMultiplayerFreemode = autoMultiplayerFreemode;
    /**
     * This function is hard-coded to always return 0.
     *
     * Hash: 0xF2CA003F167E21D2 | Since: 323
     */
    function autoMultiplayerMenu() {
        return Citizen.invokeNative('0xF2CA003F167E21D2');
    }
    lobby.autoMultiplayerMenu = autoMultiplayerMenu;
    /**
     * No comment provided
     *
     * Hash: 0xC6DC823253FBB366 | Since: 323
     */
    function autoMultiplayerRandomJob() {
        return LoadingscreenIsLoadingFreemode();
    }
    lobby.autoMultiplayerRandomJob = autoMultiplayerRandomJob;
    /**
     * No comment provided
     *
     * Hash: 0xC7E7181C09F33B69 | Since: 323
     */
    function setAutoMpRandomJob(toggle) {
        LoadingscreenSetIsLoadingFreemode(toggle);
    }
    lobby.setAutoMpRandomJob = setAutoMpRandomJob;
    /**
     * No comment provided
     *
     * Hash: 0xB0C56BD3D808D863 | Since: 323
     */
    function setAutoMultiplayer(toggle) {
        LoadingscreenSetLoadFreemode(toggle);
    }
    lobby.setAutoMultiplayer = setAutoMultiplayer;
    /**
     * No comment provided
     *
     * Hash: 0xFC309E94546FCDB5 | Since: 323
     */
    function setAutoMultiplayerEvent(toggle) {
        LoadingscreenSetLoadFreemodeWithEventName(toggle);
    }
    lobby.setAutoMultiplayerEvent = setAutoMultiplayerEvent;
    /**
     * No comment provided
     *
     * Hash: 0xFA1E0E893D915215 | Since: 323
     */
    function shutdownSessionClearsAutoMultiplayer(toggle) {
        Citizen.invokeNative('0xFA1E0E893D915215', toggle);
    }
    lobby.shutdownSessionClearsAutoMultiplayer = shutdownSessionClearsAutoMultiplayer;
})(lobby || (lobby = {}));
export var localization;
(function (localization) {
    /**
     * 0 = american (en-US)
     * 1 = french (fr-FR)
     * 2 = german (de-DE)
     * 3 = italian (it-IT)
     * 4 = spanish (es-ES)
     * 5 = brazilian (pt-BR)
     * 6 = polish (pl-PL)
     * 7 = russian (ru-RU)
     * 8 = korean (ko-KR)
     * 9 = chinesetrad (zh-TW)
     * 10 = japanese (ja-JP)
     * 11 = mexican (es-MX)
     * 12 = chinesesimp (zh-CN)
     *
     * Hash: 0x2BDD44CC428A7EAE | Since: 323
     */
    function getCurrentLanguage() {
        return GetCurrentLanguage();
    }
    localization.getCurrentLanguage = getCurrentLanguage;
    /**
     * Possible return values: 0, 1, 2
     *
     * Hash: 0xA8AE43AEC1A61314 | Since: 323
     */
    function getSystemDateType() {
        return LocalizationGetSystemDateFormat();
    }
    localization.getSystemDateType = getSystemDateType;
    /**
     * Same return values as GET_CURRENT_LANGUAGE
     *
     * Hash: 0x497420E022796B3F | Since: 877
     */
    function getSystemLanguage() {
        return LocalizationGetSystemLanguage();
    }
    localization.getSystemLanguage = getSystemLanguage;
})(localization || (localization = {}));
export var mobile;
(function (mobile) {
    /**
     * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
     *
     *
     * I can confirm the above. This function is hard-coded to always return 1.
     *
     * Hash: 0xC4E2813898C97A4B | Since: 323
     */
    function canPhoneBeSeenOnScreen() {
        return CanPhoneBeSeenOnScreen();
    }
    mobile.canPhoneBeSeenOnScreen = canPhoneBeSeenOnScreen;
    /**
     * No comment provided
     *
     * Hash: 0xFDE8F069C542D126 | Since: 323
     */
    function cellCamActivate() {
        CellCamActivate(false, false);
    }
    mobile.cellCamActivate = cellCamActivate;
    /**
     * No comment provided
     *
     * Hash: 0x015C49A93E3E086E | Since: 323
     */
    function cellCamActivateSelfieMode(toggle) {
        CellCamActivateSelfieMode(toggle);
    }
    mobile.cellCamActivateSelfieMode = cellCamActivateSelfieMode;
    /**
     * No comment provided
     *
     * Hash: 0xA2CCBE62CD4C91A4 | Since: 323
     */
    function cellCamActivateShallowDofMode(toggle) {
        Citizen.invokeNative('0xA2CCBE62CD4C91A4', toggle);
    }
    mobile.cellCamActivateShallowDofMode = cellCamActivateShallowDofMode;
    /**
     * No comment provided
     *
     * Hash: 0x439E9BC95B7E7FBE | Since: 323
     */
    function cellCamIsCharVisibleNoFaceCheck(entity) {
        return CellCamIsCharVisibleNoFaceCheck(entity);
    }
    mobile.cellCamIsCharVisibleNoFaceCheck = cellCamIsCharVisibleNoFaceCheck;
    /**
     * No comment provided
     *
     * Hash: 0xAC2890471901861C | Since: 323
     */
    function cellCamSetSelfieModeDistanceScaling(distanceScaling) {
        Citizen.invokeNative('0xAC2890471901861C', distanceScaling);
    }
    mobile.cellCamSetSelfieModeDistanceScaling = cellCamSetSelfieModeDistanceScaling;
    /**
     * No comment provided
     *
     * Hash: 0x466DA42C89865553 | Since: 323
     */
    function cellCamSetSelfieModeHeadPitchOffset(pitch) {
        CellCamSetHeadHeight(pitch);
    }
    mobile.cellCamSetSelfieModeHeadPitchOffset = cellCamSetSelfieModeHeadPitchOffset;
    /**
     * No comment provided
     *
     * Hash: 0xF1E22DC13F5EEBAD | Since: 323
     */
    function cellCamSetSelfieModeHeadRollOffset(roll) {
        CellCamSetHeadRoll(roll);
    }
    mobile.cellCamSetSelfieModeHeadRollOffset = cellCamSetSelfieModeHeadRollOffset;
    /**
     * No comment provided
     *
     * Hash: 0xD6ADE981781FCA09 | Since: 323
     */
    function cellCamSetSelfieModeHeadYawOffset(yaw) {
        CellCamSetHeadPitch(yaw);
    }
    mobile.cellCamSetSelfieModeHeadYawOffset = cellCamSetSelfieModeHeadYawOffset;
    /**
     * No comment provided
     *
     * Hash: 0x53F4892D18EC90A4 | Since: 323
     */
    function cellCamSetSelfieModeHorzPanOffset(horizontalPan) {
        CellCamSetDistance(horizontalPan);
    }
    mobile.cellCamSetSelfieModeHorzPanOffset = cellCamSetSelfieModeHorzPanOffset;
    /**
     * No comment provided
     *
     * Hash: 0x15E69E2802C24B8D | Since: 323
     */
    function cellCamSetSelfieModeRollOffset(roll) {
        CellCamSetRoll(roll);
    }
    mobile.cellCamSetSelfieModeRollOffset = cellCamSetSelfieModeRollOffset;
    /**
     * No comment provided
     *
     * Hash: 0x1B0B4AEED5B9B41C | Since: 323
     */
    function cellCamSetSelfieModeSideOffsetScaling() {
        CellCamSetHorizontalOffset(0);
    }
    mobile.cellCamSetSelfieModeSideOffsetScaling = cellCamSetSelfieModeSideOffsetScaling;
    /**
     * No comment provided
     *
     * Hash: 0x3117D84EFA60F77B | Since: 323
     */
    function cellCamSetSelfieModeVertPanOffset(vertPan) {
        CellCamSetVerticalOffset(vertPan);
    }
    mobile.cellCamSetSelfieModeVertPanOffset = cellCamSetSelfieModeVertPanOffset;
    /**
     * if the bool "Toggle" is "true" so the phone is lean.
     * if the bool "Toggle" is "false" so the phone is not lean.
     *
     * Hash: 0x44E44169EF70138E | Since: 323
     */
    function cellHorizontalModeToggle(toggle) {
        CellCamSetLean(toggle);
    }
    mobile.cellHorizontalModeToggle = cellHorizontalModeToggle;
    /**
     * For move the finger of player, the value of int goes 1 at 5.
     *
     * Hash: 0x95C9E72F3D7DEC9B | Since: 323
     */
    function cellSetInput(direction) {
        CellCamMoveFinger(direction);
    }
    mobile.cellSetInput = cellSetInput;
    /**
     * Creates a mobile phone of the specified type.
     *
     * Possible phone types:
     *
     * 0 - Default phone / Michael's phone
     * 1 - Trevor's phone
     * 2 - Franklin's phone
     * 3 - Unused police phone
     * 4 - Prologue phone
     *
     * Higher values may crash your game.
     *
     * Hash: 0xA4E8E696C532FBC7 | Since: 323
     */
    function createPhone(phoneType) {
        CreateMobilePhone(phoneType);
    }
    mobile.createPhone = createPhone;
    /**
     * Destroys the currently active mobile phone.
     *
     * Hash: 0x3BC861DF703E5097 | Since: 323
     */
    function destroyPhone() {
        DestroyMobilePhone();
    }
    mobile.destroyPhone = destroyPhone;
    /**
     * No comment provided
     *
     * Hash: 0x584FDFDA48805B86 | Since: 323
     */
    function getPhonePosition() {
        return GetMobilePhonePosition();
    }
    mobile.getPhonePosition = getPhonePosition;
    /**
     * No comment provided
     *
     * Hash: 0xB4A53E05F68B6FA1 | Since: 323
     */
    function getPhoneRenderId() {
        return GetMobilePhoneRenderId();
    }
    mobile.getPhoneRenderId = getPhoneRenderId;
    /**
     * No comment provided
     *
     * Hash: 0x1CEFB61F193070AE | Since: 323
     */
    function getPhoneRotation(p1) {
        return GetMobilePhoneRotation(p1);
    }
    mobile.getPhoneRotation = getPhoneRotation;
    /**
     * If bool Toggle = true so the mobile is hide to screen.
     * If bool Toggle = false so the mobile is show to screen.
     *
     * Hash: 0xF511F759238A5122 | Since: 323
     */
    function scriptIsMovingPhoneOffscreen(toggle) {
        ScriptIsMovingMobilePhoneOffscreen(toggle);
    }
    mobile.scriptIsMovingPhoneOffscreen = scriptIsMovingPhoneOffscreen;
    /**
     * No comment provided
     *
     * Hash: 0x375A706A5C2FD084 | Since: 372
     */
    function setPhoneDofState(toggle) {
        SetMobilePhoneDofState(toggle);
    }
    mobile.setPhoneDofState = setPhoneDofState;
    /**
     * No comment provided
     *
     * Hash: 0x693A5C6D6734085B | Since: 323
     */
    function setPhonePosition(pos) {
        SetMobilePhonePosition(pos.x, pos.y, pos.z);
    }
    mobile.setPhonePosition = setPhonePosition;
    /**
     * Last parameter is unknown and always zero.
     *
     * Hash: 0xBB779C0CA917E865 | Since: 323
     */
    function setPhoneRotation(rot) {
        SetMobilePhoneRotation(rot.x, rot.y, rot.z, undefined);
    }
    mobile.setPhoneRotation = setPhoneRotation;
    /**
     * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
     *
     * Hash: 0xCBDD322A73D6D932 | Since: 323
     */
    function setPhoneScale(scale) {
        SetMobilePhoneScale(scale);
    }
    mobile.setPhoneScale = setPhoneScale;
})(mobile || (mobile = {}));
export var money;
(function (money) {
    /**
     * No comment provided
     *
     * Hash: 0x9777734DAD16992F | Since: 573
     */
    function canPayAmountToBoss(amount) {
        return CanPayGoon(0, 0, amount);
    }
    money.canPayAmountToBoss = canPayAmountToBoss;
    /**
     * Does nothing and always returns false.
     *
     * Hash: 0xE260E0BB9CD995AC | Since: 323
     */
    function depositVc(amount) {
        return DepositVc(amount);
    }
    money.depositVc = depositVc;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xE154B48B68EF72BC | Since: 323
     */
    function hasVcWithdrawalCompleted() {
        return Citizen.invokeNative('0xE154B48B68EF72BC', undefined);
    }
    money.hasVcWithdrawalCompleted = hasVcWithdrawalCompleted;
    /**
     * p1 = 0 (always)
     * p2 = 1 (always)
     *
     * Hash: 0x763B4BD305338F19 | Since: 323
     */
    function networkBuyAirstrike(cost) {
        NetworkBuyAirstrike(cost, false, false, undefined);
    }
    money.networkBuyAirstrike = networkBuyAirstrike;
    /**
     * No comment provided
     *
     * Hash: 0xA3EDDAA42411D3B9 | Since: 323
     */
    function networkBuyBackupGang(npcProvider) {
        NetworkBuyBackupGang(0, 0, false, false, npcProvider);
    }
    money.networkBuyBackupGang = networkBuyBackupGang;
    /**
     * p1 is just an assumption. p2 was false and p3 was true.
     *
     * Hash: 0x7B718E197453F2D9 | Since: 323
     */
    function networkBuyBounty(amount, victim) {
        NetworkBuyBounty(amount, victim, false, false, undefined);
    }
    money.networkBuyBounty = networkBuyBounty;
    /**
     * No comment provided
     *
     * Hash: 0x30FD873ECE50E9F6 | Since: 757
     */
    function networkBuyContrabandMission(p2) {
        if (typeof p2 === 'string')
            p2 = misc.getHashKey(p2);
        NetworkBuyContraband(0, 0, p2, false, false);
    }
    money.networkBuyContrabandMission = networkBuyContrabandMission;
    /**
     * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
     *
     * The last 3 parameters are,
     * 2,0,1 in the am_ferriswheel.c
     * 1,0,1 in the am_rollercoaster.c
     *
     *
     * Hash: 0x8A7B3952DD64D2B5 | Since: 323
     */
    function networkBuyFairgroundRide(amount) {
        NetworkBuyFairgroundRide(amount, undefined, false, false, undefined);
    }
    money.networkBuyFairgroundRide = networkBuyFairgroundRide;
    /**
     * No comment provided
     *
     * Hash: 0xD9B067E55253E3DD | Since: 323
     */
    function networkBuyHealthcare(cost) {
        NetworkBuyHealthcare(cost, false, false);
    }
    money.networkBuyHealthcare = networkBuyHealthcare;
    /**
     * p1 = 0 (always)
     * p2 = 1 (always)
     *
     * Hash: 0x81AA4610E3FD3A69 | Since: 323
     */
    function networkBuyHeliStrike(cost) {
        NetworkBuyHeliStrike(cost, false, false, undefined);
    }
    money.networkBuyHeliStrike = networkBuyHeliStrike;
    /**
     * No comment provided
     *
     * Hash: 0xF0077C797F66A355 | Since: 323
     */
    function networkBuyItem(amount, item, item_name) {
        if (typeof item === 'string')
            item = misc.getHashKey(item);
        NetworkBuyItem(amount, item, undefined, undefined, false, item_name, undefined, undefined, undefined, false);
    }
    money.networkBuyItem = networkBuyItem;
    /**
     * No comment provided
     *
     * Hash: 0x650A08A280870AF6 | Since: 323
     */
    function networkBuyProperty(cost, propertyName) {
        if (typeof propertyName === 'string')
            propertyName = misc.getHashKey(propertyName);
        NetworkBuyProperty(cost, propertyName, false, false);
    }
    money.networkBuyProperty = networkBuyProperty;
    /**
     * No comment provided
     *
     * Hash: 0x75AF80E61248EEBD | Since: 323
     */
    function networkBuySmokes() {
        NetworkBuySmokes(0, false, false);
    }
    money.networkBuySmokes = networkBuySmokes;
    /**
     * No comment provided
     *
     * Hash: 0x3A54E33660DED67F | Since: 323
     */
    function networkCanBet(amount) {
        return NetworkCanBet(amount);
    }
    money.networkCanBet = networkCanBet;
    /**
     * No comment provided
     *
     * Hash: 0x5D17BE59D2123284 | Since: 323
     */
    function networkCanReceivePlayerCash() {
        return NetworkCanReceivePlayerCash(undefined, undefined, undefined, undefined);
    }
    money.networkCanReceivePlayerCash = networkCanReceivePlayerCash;
    /**
     * No comment provided
     *
     * Hash: 0x1C2473301B1C66BA | Since: 323
     */
    function networkCanShareJobCash() {
        return NetworkCanShareJobCash();
    }
    money.networkCanShareJobCash = networkCanShareJobCash;
    /**
     * No comment provided
     *
     * Hash: 0xAB3CAA6B422164DA | Since: 323
     */
    function networkCanSpend() {
        return NetworkCanSpendMoney(undefined, false, false, false, undefined, undefined);
    }
    money.networkCanSpend = networkCanSpend;
    /**
     * No comment provided
     *
     * Hash: 0x7303E27CC6532080 | Since: 323
     */
    function networkCanSpend2() {
        return NetworkCanSpendMoney2(undefined, false, false, false, undefined, undefined);
    }
    money.networkCanSpend2 = networkCanSpend2;
    /**
     * No comment provided
     *
     * Hash: 0x3BD101471C7F9EEC | Since: 1734
     */
    function networkCasinoBuyChips() {
        return NetworkCasinoPurchaseChips(0, 0);
    }
    money.networkCasinoBuyChips = networkCasinoBuyChips;
    /**
     * GTAO_CASINO_HOUSE
     * GTAO_CASINO_INSIDETRACK
     * GTAO_CASINO_LUCKYWHEEL
     * GTAO_CASINO_BLACKJACK
     * GTAO_CASINO_ROULETTE
     * GTAO_CASINO_SLOTS
     * GTAO_CASINO_PURCHASE_CHIPS
     *
     * NETWORK_C*
     *
     * Hash: 0x158C16F5E4CF41F8 | Since: 1734
     */
    function networkCasinoCanBet(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return NetworkCasinoCanUseGamblingType(hash);
    }
    money.networkCasinoCanBet = networkCasinoCanBet;
    /**
     * No comment provided
     *
     * Hash: 0xF62F6D9528358FE4 | Since: 1734
     */
    function networkCasinoCanBetAmount() {
        return NetworkCasinoCanGamble(undefined);
    }
    money.networkCasinoCanBetAmount = networkCasinoCanBetAmount;
    /**
     * No comment provided
     *
     * Hash: 0x394DCDB9E836B7A9 | Since: 1734
     */
    function networkCasinoCanBetPvc() {
        return NetworkCasinoCanPurchaseChipsWithPvc();
    }
    money.networkCasinoCanBetPvc = networkCasinoCanBetPvc;
    /**
     * No comment provided
     *
     * Hash: 0x8968D4D8C6C40C11 | Since: 1734
     */
    function networkCasinoCanBuyChipsPvc() {
        return NetworkCasinoCanPurchaseChipsWithPvc2();
    }
    money.networkCasinoCanBuyChipsPvc = networkCasinoCanBuyChipsPvc;
    /**
     * No comment provided
     *
     * Hash: 0xED44897CB336F480 | Since: 1734
     */
    function networkCasinoSellChips() {
        return NetworkCasinoSellChips(0, 0);
    }
    money.networkCasinoSellChips = networkCasinoSellChips;
    /**
     * No comment provided
     *
     * Hash: 0xA921DED15FDF28F5 | Since: 323
     */
    function networkClearCharacterWallet(characterSlot) {
        NetworkClearCharacterWallet(characterSlot);
    }
    money.networkClearCharacterWallet = networkClearCharacterWallet;
    /**
     * No comment provided
     *
     * Hash: 0x18B7AE224B087E26 | Since: 323
     */
    function networkDeductCash(amount) {
        NetworkDeductCash(amount, undefined, undefined, false, false, false);
    }
    money.networkDeductCash = networkDeductCash;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0xCD0F5B5D932AE473 | Since: 323
     */
    function networkDeferCashTransactionsUntilShopSave() {
        Citizen.invokeNative('0xCD0F5B5D932AE473');
    }
    money.networkDeferCashTransactionsUntilShopSave = networkDeferCashTransactionsUntilShopSave;
    /**
     * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
     *
     * Hash: 0x05A50AF38947EB8D | Since: 323
     */
    function networkDeleteCharacter(characterSlot) {
        NetworkDeleteCharacter(characterSlot, false, false);
    }
    money.networkDeleteCharacter = networkDeleteCharacter;
    /**
     * No comment provided
     *
     * Hash: 0x0CB1BE0633C024A8 | Since: 573
     */
    function networkEarnAgency() {
        NetworkEarnBossAgency(undefined, undefined, undefined, undefined);
    }
    money.networkEarnAgency = networkEarnAgency;
    /**
     * No comment provided
     *
     * Hash: 0x38482AD49CB905C7 | Since: 2545
     */
    function networkEarnAgencyContract() {
        Citizen.invokeNative('0x38482AD49CB905C7', undefined, undefined);
    }
    money.networkEarnAgencyContract = networkEarnAgencyContract;
    /**
     * No comment provided
     *
     * Hash: 0xE29F3D5FA63B1B82 | Since: 2545
     */
    function networkEarnAgencyPhone() {
        Citizen.invokeNative('0xE29F3D5FA63B1B82', undefined, undefined, undefined);
    }
    money.networkEarnAgencyPhone = networkEarnAgencyPhone;
    /**
     * No comment provided
     *
     * Hash: 0x663B4B9D11742A12 | Since: 2545
     */
    function networkEarnAgencySafe() {
        Citizen.invokeNative('0x663B4B9D11742A12', undefined, undefined);
    }
    money.networkEarnAgencySafe = networkEarnAgencySafe;
    /**
     * No comment provided
     *
     * Hash: 0xD29334ED1A256DBF | Since: 1868
     */
    function networkEarnArcade() {
        Citizen.invokeNative('0xD29334ED1A256DBF', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnArcade = networkEarnArcade;
    /**
     * No comment provided
     *
     * Hash: 0x0F99F70C61F14619 | Since: 1604
     */
    function networkEarnArenaCareerProgression(amount) {
        NetworkEarnFromArenaCareerProgression(amount, undefined);
    }
    money.networkEarnArenaCareerProgression = networkEarnArenaCareerProgression;
    /**
     * No comment provided
     *
     * Hash: 0xE08256F972C7BB2C | Since: 1604
     */
    function networkEarnArenaSkillLevelProgression(amount) {
        NetworkEarnFromArenaSkillLevelProgression(amount, undefined);
    }
    money.networkEarnArenaSkillLevelProgression = networkEarnArenaSkillLevelProgression;
    /**
     * No comment provided
     *
     * Hash: 0x631F1CB8FB4130AA | Since: 1604
     */
    function networkEarnArenaWar(amount) {
        NetworkEarnFromArenaWar(amount, undefined, undefined, undefined);
    }
    money.networkEarnArenaWar = networkEarnArenaWar;
    /**
     * No comment provided
     *
     * Hash: 0x5E7AE8AABE8B7C0D | Since: 1604
     */
    function networkEarnArenaWarAssassinateTarget(amount) {
        NetworkEarnFromAssassinateTargetKilled2(amount);
    }
    money.networkEarnArenaWarAssassinateTarget = networkEarnArenaWarAssassinateTarget;
    /**
     * No comment provided
     *
     * Hash: 0xA82959062361B259 | Since: 1604
     */
    function networkEarnArenaWarEventCargo(amount) {
        NetworkEarnFromBbEventCargo(amount);
    }
    money.networkEarnArenaWarEventCargo = networkEarnArenaWarEventCargo;
    /**
     * No comment provided
     *
     * Hash: 0xFA700D8A9905F78A | Since: 1604
     */
    function networkEarnAssassinateTargetKilled(amount) {
        NetworkEarnFromAssassinateTargetKilled(amount);
    }
    money.networkEarnAssassinateTargetKilled = networkEarnAssassinateTargetKilled;
    /**
     * No comment provided
     *
     * Hash: 0x36A7FD5A7194B03E | Since: 2372
     */
    function networkEarnAutoshopBusiness() {
        NetworkEarnFromAutoshopBusiness(undefined, undefined, undefined);
    }
    money.networkEarnAutoshopBusiness = networkEarnAutoshopBusiness;
    /**
     * No comment provided
     *
     * Hash: 0xC66D1CF99ED7FE25 | Since: 2372
     */
    function networkEarnAutoshopIncome() {
        NetworkEarnFromAutoshopIncome(undefined, 0);
    }
    money.networkEarnAutoshopIncome = networkEarnAutoshopIncome;
    /**
     * No comment provided
     *
     * Hash: 0x146D4EB6D22A403F | Since: 2545
     */
    function networkEarnAwardContract() {
        Citizen.invokeNative('0x146D4EB6D22A403F', undefined, undefined);
    }
    money.networkEarnAwardContract = networkEarnAwardContract;
    /**
     * No comment provided
     *
     * Hash: 0x88D6C327D6C57C45 | Since: 2545
     */
    function networkEarnAwardFixerMission() {
        Citizen.invokeNative('0x88D6C327D6C57C45', undefined, undefined);
    }
    money.networkEarnAwardFixerMission = networkEarnAwardFixerMission;
    /**
     * No comment provided
     *
     * Hash: 0x7397A115030F1BE3 | Since: 2545
     */
    function networkEarnAwardPhone() {
        Citizen.invokeNative('0x7397A115030F1BE3', undefined, undefined);
    }
    money.networkEarnAwardPhone = networkEarnAwardPhone;
    /**
     * No comment provided
     *
     * Hash: 0x5B4DBDED84D6A420 | Since: 2545
     */
    function networkEarnAwardShortTrip() {
        Citizen.invokeNative('0x5B4DBDED84D6A420', undefined, undefined);
    }
    money.networkEarnAwardShortTrip = networkEarnAwardShortTrip;
    /**
     * No comment provided
     *
     * Hash: 0xFDD8D2440DAF1590 | Since: 1604
     */
    function networkEarnBbEventBonus(amount) {
        NetworkEarnFromBbEventBonus(amount);
    }
    money.networkEarnBbEventBonus = networkEarnBbEventBonus;
    /**
     * No comment provided
     *
     * Hash: 0xA51338E0DCCD4065 | Since: 2189
     */
    function networkEarnBeachPartyLostFound() {
        Citizen.invokeNative('0xA51338E0DCCD4065', undefined, undefined, undefined);
    }
    money.networkEarnBeachPartyLostFound = networkEarnBeachPartyLostFound;
    /**
     * No comment provided
     *
     * Hash: 0x71BEC32FA466E105 | Since: 2699
     */
    function networkEarnBiker() {
        NetworkEarnFromBikerIncome(undefined);
    }
    money.networkEarnBiker = networkEarnBiker;
    /**
     * No comment provided
     *
     * Hash: 0x2C5809EB9DF57257 | Since: 2699
     */
    function networkEarnBikerShop() {
        NetworkEarnFromBikeShopBusiness(undefined, undefined);
    }
    money.networkEarnBikerShop = networkEarnBikerShop;
    /**
     * No comment provided
     *
     * Hash: 0x08B0CA7A6AB3AC32 | Since: 573
     */
    function networkEarnBoss() {
        NetworkEarnBoss(undefined, undefined, undefined);
    }
    money.networkEarnBoss = networkEarnBoss;
    /**
     * No comment provided
     *
     * Hash: 0xF6B170F9A02E9E87 | Since: 1493
     */
    function networkEarnBountyHunterReward() {
        NetworkEarnBountyHunterReward(undefined);
    }
    money.networkEarnBountyHunterReward = networkEarnBountyHunterReward;
    /**
     * No comment provided
     *
     * Hash: 0xBC6227792A188E2E | Since: 2372
     */
    function networkEarnCarclubMembership() {
        NetworkEarnFromCarclubMembership(undefined);
    }
    money.networkEarnCarclubMembership = networkEarnCarclubMembership;
    /**
     * No comment provided
     *
     * Hash: 0x973A9781A34F8DEB | Since: 1734
     */
    function networkEarnCasinoAward(amount, hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        NetworkEarnFromCasinoAward(amount, hash);
    }
    money.networkEarnCasinoAward = networkEarnCasinoAward;
    /**
     * No comment provided
     *
     * Hash: 0x83AD64F53F4E9483 | Since: 1734
     */
    function networkEarnCasinoCollectableCompletedCollection(amount) {
        NetworkEarnFromCompleteCollection(amount);
    }
    money.networkEarnCasinoCollectableCompletedCollection = networkEarnCasinoCollectableCompletedCollection;
    /**
     * No comment provided
     *
     * Hash: 0x72E7C7B9615FA3C3 | Since: 1868
     */
    function networkEarnCasinoHeist() {
        NetworkEarnCasinoHeist(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnCasinoHeist = networkEarnCasinoHeist;
    /**
     * No comment provided
     *
     * Hash: 0x3EC7471E6909798A | Since: 1868
     */
    function networkEarnCasinoHeistAwards() {
        NetworkEarnCasinoHeistBonus(undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnCasinoHeistAwards = networkEarnCasinoHeistAwards;
    /**
     * No comment provided
     *
     * Hash: 0x09E8F18641BE2575 | Since: 1734
     */
    function networkEarnCasinoMissionParticipation(amount) {
        NetworkEarnFromCasinoMissionParticipation(amount);
    }
    money.networkEarnCasinoMissionParticipation = networkEarnCasinoMissionParticipation;
    /**
     * No comment provided
     *
     * Hash: 0x566FD402B25787DE | Since: 1734
     */
    function networkEarnCasinoMissionReward(amount) {
        NetworkEarnFromCasinoMissionReward(amount);
    }
    money.networkEarnCasinoMissionReward = networkEarnCasinoMissionReward;
    /**
     * No comment provided
     *
     * Hash: 0xAC95ED552157E092 | Since: 1734
     */
    function networkEarnCasinoStoryMissionReward(amount) {
        NetworkEarnFromCasinoStoryMissionReward(amount);
    }
    money.networkEarnCasinoStoryMissionReward = networkEarnCasinoStoryMissionReward;
    /**
     * No comment provided
     *
     * Hash: 0x0819DB99FD2FBBD8 | Since: 1734
     */
    function networkEarnCasinoTimeTrialWin(amount) {
        NetworkEarnFromTimeTrialWin(amount);
    }
    money.networkEarnCasinoTimeTrialWin = networkEarnCasinoTimeTrialWin;
    /**
     * No comment provided
     *
     * Hash: 0x0DD362F14F18942A | Since: 1868
     */
    function networkEarnChallenge(amount) {
        Citizen.invokeNative('0x0DD362F14F18942A', amount, undefined, undefined);
    }
    money.networkEarnChallenge = networkEarnChallenge;
    /**
     * No comment provided
     *
     * Hash: 0xA95CFB4E02390842 | Since: 1868
     */
    function networkEarnCollectables() {
        Citizen.invokeNative('0xA95CFB4E02390842', undefined, undefined, undefined);
    }
    money.networkEarnCollectables = networkEarnCollectables;
    /**
     * No comment provided
     *
     * Hash: 0x5517F90043466049 | Since: 1734
     */
    function networkEarnCollectablesActionFigures(amount) {
        NetworkEarnFromCollectablesActionFigures(amount);
    }
    money.networkEarnCollectablesActionFigures = networkEarnCollectablesActionFigures;
    /**
     * No comment provided
     *
     * Hash: 0x5C9B198AF5A54FA6 | Since: 2060
     */
    function networkEarnCollectableCompletedCollection(amount) {
        NetworkEarnCollectableCompletedCollection(amount, undefined);
    }
    money.networkEarnCollectableCompletedCollection = networkEarnCollectableCompletedCollection;
    /**
     * No comment provided
     *
     * Hash: 0x84FF63BD4966F33D | Since: 1734
     */
    function networkEarnCollectableItem(amount) {
        NetworkEarnFromCollectionItem(amount, undefined);
    }
    money.networkEarnCollectableItem = networkEarnCollectableItem;
    /**
     * No comment provided
     *
     * Hash: 0x5128DF14A5BB86FC | Since: 1734
     */
    function networkEarnDailyObjectiveEvent(amount) {
        NetworkEarnFromDailyObjectiveEvent(amount);
    }
    money.networkEarnDailyObjectiveEvent = networkEarnDailyObjectiveEvent;
    /**
     * No comment provided
     *
     * Hash: 0x533073E8A596008C | Since: 2372
     */
    function networkEarnDailyVehicle() {
        NetworkEarnFromVehicleAutoshop(undefined, undefined);
    }
    money.networkEarnDailyVehicle = networkEarnDailyVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xFE65AFE7308E32B2 | Since: 2372
     */
    function networkEarnDailyVehicleBonus() {
        NetworkEarnFromVehicleAutoshopBonus(undefined);
    }
    money.networkEarnDailyVehicleBonus = networkEarnDailyVehicleBonus;
    /**
     * No comment provided
     *
     * Hash: 0xCAC672087B4A24AB | Since: 1290
     */
    function networkEarnDarChallenge(amount) {
        NetworkEarnFromDarChallenge(amount, undefined);
    }
    money.networkEarnDarChallenge = networkEarnDarChallenge;
    /**
     * No comment provided
     *
     * Hash: 0xE2E244AB823B4483 | Since: 2060
     */
    function networkEarnDispatchCall(amount) {
        Citizen.invokeNative('0xE2E244AB823B4483', amount, undefined);
    }
    money.networkEarnDispatchCall = networkEarnDispatchCall;
    /**
     * No comment provided
     *
     * Hash: 0x128A747F4A230952 | Since: 1290
     */
    function networkEarnDoomsdayFinaleBonus(amount, vehicleHash) {
        if (typeof vehicleHash === 'string')
            vehicleHash = misc.getHashKey(vehicleHash);
        NetworkEarnFromDoomsdayFinaleBonus(amount, vehicleHash);
    }
    money.networkEarnDoomsdayFinaleBonus = networkEarnDoomsdayFinaleBonus;
    /**
     * No comment provided
     *
     * Hash: 0x11B0A20C493F7E36 | Since: 1290
     */
    function networkEarnFirstTimeBonus() {
        NetworkEarnJobBonusFirstTimeBonus(undefined, undefined, undefined);
    }
    money.networkEarnFirstTimeBonus = networkEarnFirstTimeBonus;
    /**
     * No comment provided
     *
     * Hash: 0xF4A8E57460BF2037 | Since: 2545
     */
    function networkEarnFixerAgencyShortTrip() {
        Citizen.invokeNative('0xF4A8E57460BF2037', undefined, undefined);
    }
    money.networkEarnFixerAgencyShortTrip = networkEarnFixerAgencyShortTrip;
    /**
     * No comment provided
     *
     * Hash: 0xBA154373C5FE51E8 | Since: 2545
     */
    function networkEarnFixerFinale() {
        Citizen.invokeNative('0xBA154373C5FE51E8', undefined, undefined);
    }
    money.networkEarnFixerFinale = networkEarnFixerFinale;
    /**
     * No comment provided
     *
     * Hash: 0x6283E5DE4C4460C6 | Since: 2545
     */
    function networkEarnFixerPrep() {
        Citizen.invokeNative('0x6283E5DE4C4460C6', undefined, undefined);
    }
    money.networkEarnFixerPrep = networkEarnFixerPrep;
    /**
     * No comment provided
     *
     * Hash: 0x235D41210B3A1A5E | Since: 2545
     */
    function networkEarnFixerRivalDelivery() {
        Citizen.invokeNative('0x235D41210B3A1A5E', undefined, undefined);
    }
    money.networkEarnFixerRivalDelivery = networkEarnFixerRivalDelivery;
    /**
     * No comment provided
     *
     * Hash: 0xFFFBA1B1F7C0B6F4 | Since: 1493
     */
    function networkEarnFmbbWageBonus() {
        NetworkEarnFmbbWageBonus(undefined);
    }
    money.networkEarnFmbbWageBonus = networkEarnFmbbWageBonus;
    /**
     * DSPORT
     *
     * Hash: 0x515B4A22E4D3C6D7 | Since: 323
     */
    function networkEarnFromAiTargetKill() {
        NetworkEarnFromAiTargetKill(undefined, undefined);
    }
    money.networkEarnFromAiTargetKill = networkEarnFromAiTargetKill;
    /**
     * Example for p1: "AM_DISTRACT_COPS"
     *
     * Hash: 0xFB6DB092FBAE29E6 | Since: 323
     */
    function networkEarnFromAmbientJob() {
        return NetworkEarnFromAmbientJob(0, undefined);
    }
    money.networkEarnFromAmbientJob = networkEarnFromAmbientJob;
    /**
     * No comment provided
     *
     * Hash: 0x61326EE6DF15B0CA | Since: 323
     */
    function networkEarnFromBendJob(amount, heistHash) {
        NetworkEarnFromBendJob(amount, heistHash);
    }
    money.networkEarnFromBendJob = networkEarnFromBendJob;
    /**
     * No comment provided
     *
     * Hash: 0x827A5BA1A44ACA6D | Since: 323
     */
    function networkEarnFromBetting(amount) {
        NetworkEarnFromBetting(amount, undefined);
    }
    money.networkEarnFromBetting = networkEarnFromBetting;
    /**
     * No comment provided
     *
     * Hash: 0x131BB5DA15453ACF | Since: 323
     */
    function networkEarnFromBounty(amount) {
        return NetworkEarnFromBounty(amount, undefined);
    }
    money.networkEarnFromBounty = networkEarnFromBounty;
    /**
     * No comment provided
     *
     * Hash: 0x42FCE14F50F27291 | Since: 1493
     */
    function networkEarnFromBusinessBattle() {
        NetworkEarnFromBusinessBattle(undefined);
    }
    money.networkEarnFromBusinessBattle = networkEarnFromBusinessBattle;
    /**
     * No comment provided
     *
     * Hash: 0x0B39CF0D53F1C883 | Since: 1493
     */
    function networkEarnFromBusinessHubSell() {
        NetworkEarnFromBusinessHubSell(undefined, undefined, undefined);
    }
    money.networkEarnFromBusinessHubSell = networkEarnFromBusinessHubSell;
    /**
     * No comment provided
     *
     * Hash: 0x8586789730B10CAF | Since: 877
     */
    function networkEarnFromBusinessProduct(amount) {
        NetworkEarnFromBusinessProduct(amount, undefined, undefined, undefined);
    }
    money.networkEarnFromBusinessProduct = networkEarnFromBusinessProduct;
    /**
     * No comment provided
     *
     * Hash: 0x718FBBF67414FA36 | Since: 1290
     */
    function networkEarnFromCashingOut(amount) {
        Citizen.invokeNative('0x718FBBF67414FA36', amount);
    }
    money.networkEarnFromCashingOut = networkEarnFromCashingOut;
    /**
     * No comment provided
     *
     * Hash: 0x2B171E6B2F64D8DF | Since: 323
     */
    function networkEarnFromChallengeWin() {
        return NetworkEarnFromChallengeWin(undefined, false);
    }
    money.networkEarnFromChallengeWin = networkEarnFromChallengeWin;
    /**
     * No comment provided
     *
     * Hash: 0xA75EAC69F59E96E7 | Since: 1493
     */
    function networkEarnFromClubManagementParticipation() {
        NetworkEarnFromClubManagementParticipation(undefined, 0);
    }
    money.networkEarnFromClubManagementParticipation = networkEarnFromClubManagementParticipation;
    /**
     * No comment provided
     *
     * Hash: 0xECA658CE2A4E5A72 | Since: 757
     */
    function networkEarnFromContraband(amount) {
        NetworkEarnFromContraband(amount, undefined);
    }
    money.networkEarnFromContraband = networkEarnFromContraband;
    /**
     * No comment provided
     *
     * Hash: 0xB1CC1B9EC3007A2A | Since: 323
     */
    function networkEarnFromCrateDrop(amount) {
        NetworkEarnFromCrateDrop(amount);
    }
    money.networkEarnFromCrateDrop = networkEarnFromCrateDrop;
    /**
     * No comment provided
     *
     * Hash: 0xFA009A62990671D4 | Since: 1290
     */
    function networkEarnFromCriminalMastermind() {
        NetworkEarnFromCriminalMastermindBonus(undefined, undefined, undefined);
    }
    money.networkEarnFromCriminalMastermind = networkEarnFromCriminalMastermind;
    /**
     * type either Monthly,Weekly,Daily
     *
     * Hash: 0x6EA318C91C1A8786 | Since: 323
     */
    function networkEarnFromDailyObjectives(amount, _type, characterSlot) {
        NetworkEarnFromDailyObjectives(amount, _type, characterSlot);
    }
    money.networkEarnFromDailyObjectives = networkEarnFromDailyObjectives;
    /**
     * No comment provided
     *
     * Hash: 0x84C0116D012E8FC2 | Since: 757
     */
    function networkEarnFromDestroyingContraband() {
        NetworkEarnFromDestroyingContraband(undefined, undefined, undefined);
    }
    money.networkEarnFromDestroyingContraband = networkEarnFromDestroyingContraband;
    /**
     * No comment provided
     *
     * Hash: 0x1FDA0AA679C9919B | Since: 1493
     */
    function networkEarnFromFmbbBossWork() {
        NetworkEarnFromFmbbBossWork(undefined);
    }
    money.networkEarnFromFmbbBossWork = networkEarnFromFmbbBossWork;
    /**
     * No comment provided
     *
     * Hash: 0xC5156361F26E2212 | Since: 1493
     */
    function networkEarnFromFmbbPhonecallMission() {
        NetworkEarnFromFmbbPhonecallMission(undefined);
    }
    money.networkEarnFromFmbbPhonecallMission = networkEarnFromFmbbPhonecallMission;
    /**
     * No comment provided
     *
     * Hash: 0xA03D4ACE0A3284CE | Since: 323
     */
    function networkEarnFromGangattackPickup(amount) {
        NetworkEarnFromGangPickup(amount);
    }
    money.networkEarnFromGangattackPickup = networkEarnFromGangattackPickup;
    /**
     * No comment provided
     *
     * Hash: 0x31BA138F6304FB9F | Since: 1180
     */
    function networkEarnFromHangarTrade() {
        Citizen.invokeNative('0x31BA138F6304FB9F', undefined, undefined);
    }
    money.networkEarnFromHangarTrade = networkEarnFromHangarTrade;
    /**
     * No comment provided
     *
     * Hash: 0x45B8154E077D9E4D | Since: 323
     */
    function networkEarnFromHoldups(amount) {
        NetworkEarnFromHoldups(amount);
    }
    money.networkEarnFromHoldups = networkEarnFromHoldups;
    /**
     * No comment provided
     *
     * Hash: 0xF92A014A634442D6 | Since: 323
     */
    function networkEarnFromImportExport(amount, modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        NetworkEarnFromImportExport(amount, modelHash);
    }
    money.networkEarnFromImportExport = networkEarnFromImportExport;
    /**
     * No comment provided
     *
     * Hash: 0xE2BB399D90942091 | Since: 2189
     */
    function networkEarnFromIslandHeistDjMission() {
        Citizen.invokeNative('0xE2BB399D90942091', undefined, undefined);
    }
    money.networkEarnFromIslandHeistDjMission = networkEarnFromIslandHeistDjMission;
    /**
     * No comment provided
     *
     * Hash: 0xB2CC4836834E8A98 | Since: 323
     */
    function networkEarnFromJob(amount) {
        NetworkEarnFromJob(amount, undefined);
    }
    money.networkEarnFromJob = networkEarnFromJob;
    /**
     * No comment provided
     *
     * Hash: 0xDEBBF584665411D0 | Since: 1734
     */
    function networkEarnFromJobx2(amount) {
        NetworkEarnFromJobX2(amount, undefined);
    }
    money.networkEarnFromJobx2 = networkEarnFromJobx2;
    /**
     * No comment provided
     *
     * Hash: 0x6816FB4416760775 | Since: 323
     */
    function networkEarnFromJobBonus() {
        return NetworkEarnFromJobBonus(undefined);
    }
    money.networkEarnFromJobBonus = networkEarnFromJobBonus;
    /**
     * No comment provided
     *
     * Hash: 0x4337511FA8221D36 | Since: 323
     */
    function networkEarnFromNotBadsport(amount) {
        NetworkEarnFromNotBadsport(amount);
    }
    money.networkEarnFromNotBadsport = networkEarnFromNotBadsport;
    /**
     * No comment provided
     *
     * Hash: 0x3F4D00167E41E0AD | Since: 323
     */
    function networkEarnFromPersonalVehicle() {
        NetworkEarnFromPersonalVehicle(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnFromPersonalVehicle = networkEarnFromPersonalVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xED1517D3AF17C698 | Since: 323
     */
    function networkEarnFromPickup(amount) {
        NetworkEarnFromPickup(amount);
    }
    money.networkEarnFromPickup = networkEarnFromPickup;
    /**
     * No comment provided
     *
     * Hash: 0xC8407624CEF2354B | Since: 791
     */
    function networkEarnFromPremiumJob(amount) {
        NetworkEarnFromPremiumJob(amount, undefined);
    }
    money.networkEarnFromPremiumJob = networkEarnFromPremiumJob;
    /**
     * No comment provided
     *
     * Hash: 0x849648349D77F5C5 | Since: 323
     */
    function networkEarnFromProperty(amount, propertyName) {
        if (typeof propertyName === 'string')
            propertyName = misc.getHashKey(propertyName);
        NetworkEarnFromProperty(amount, propertyName);
    }
    money.networkEarnFromProperty = networkEarnFromProperty;
    /**
     * For the money bags that drop a max of $40,000. Often called 40k bags.
     *
     * Most likely NETWORK_EARN_FROM_ROB***
     *
     * Hash: 0xF514621E8EA463D0 | Since: 323
     */
    function networkEarnFromRobArmoredCars(amount) {
        NetworkEarnFromArmourTruck(amount);
    }
    money.networkEarnFromRobArmoredCars = networkEarnFromRobArmoredCars;
    /**
     * No comment provided
     *
     * Hash: 0x9251B6ABF2D0A5B4 | Since: 1103
     */
    function networkEarnFromSellBunker(amount, bunkerHash) {
        if (typeof bunkerHash === 'string')
            bunkerHash = misc.getHashKey(bunkerHash);
        NetworkEarnFromSellBunker(amount, bunkerHash);
    }
    money.networkEarnFromSellBunker = networkEarnFromSellBunker;
    /**
     * No comment provided
     *
     * Hash: 0x6B7E4FB50D5F3D65 | Since: 1180
     */
    function networkEarnFromSmugglerWork() {
        Citizen.invokeNative('0x6B7E4FB50D5F3D65', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnFromSmugglerWork = networkEarnFromSmugglerWork;
    /**
     * No comment provided
     *
     * Hash: 0xB539BD8A4C1EECF8 | Since: 323
     */
    function networkEarnFromVehicle() {
        NetworkEarnFromVehicle(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnFromVehicle = networkEarnFromVehicle;
    /**
     * No comment provided
     *
     * Hash: 0xEDEAD9A91EC768B3 | Since: 944
     */
    function networkEarnFromVehicleExport(amount) {
        NetworkEarnFromVehicleExport(amount, undefined, undefined);
    }
    money.networkEarnFromVehicleExport = networkEarnFromVehicleExport;
    /**
     * No comment provided
     *
     * Hash: 0x3E4ADAFF1830F146 | Since: 757
     */
    function networkEarnFromWarehouse(amount, id) {
        NetworkEarnFromWarehouse(amount, id);
    }
    money.networkEarnFromWarehouse = networkEarnFromWarehouse;
    /**
     * No comment provided
     *
     * Hash: 0xA9A31475F530DFDA | Since: 1290
     */
    function networkEarnGangopsAward(amount) {
        NetworkEarnFromGangopsAwards(amount, undefined, undefined);
    }
    money.networkEarnGangopsAward = networkEarnGangopsAward;
    /**
     * No comment provided
     *
     * Hash: 0x2597A0D4A4FC2C77 | Since: 1290
     */
    function networkEarnGangopsElite(amount, actIndex) {
        NetworkEarnFromGangopsElite(amount, undefined, actIndex);
    }
    money.networkEarnGangopsElite = networkEarnGangopsElite;
    /**
     * No comment provided
     *
     * Hash: 0x1C121FC9545E0D52 | Since: 1290
     */
    function networkEarnGangopsFinale(amount) {
        NetworkEarnFromGangopsJobsFinale(amount, undefined);
    }
    money.networkEarnGangopsFinale = networkEarnGangopsFinale;
    /**
     * No comment provided
     *
     * Hash: 0xED26584F6BDCBBFD | Since: 1290
     */
    function networkEarnGangopsPrepParticipation(amount) {
        NetworkEarnFromGangopsJobsPrepParticipation(amount);
    }
    money.networkEarnGangopsPrepParticipation = networkEarnGangopsPrepParticipation;
    /**
     * No comment provided
     *
     * Hash: 0xA9160796D47A2CF8 | Since: 1290
     */
    function networkEarnGangopsSetup(amount) {
        NetworkEarnFromGangopsJobsSetup(amount, undefined);
    }
    money.networkEarnGangopsSetup = networkEarnGangopsSetup;
    /**
     * No comment provided
     *
     * Hash: 0x2DCB19ABAB0380A8 | Since: 1290
     */
    function networkEarnGangopsWages(amount) {
        NetworkEarnFromGangopsWages(amount, 0);
    }
    money.networkEarnGangopsWages = networkEarnGangopsWages;
    /**
     * No comment provided
     *
     * Hash: 0x15BB2A5C757EB91F | Since: 1290
     */
    function networkEarnGangopsWagesBonus(amount) {
        NetworkEarnFromGangopsWagesBonus(amount, 0);
    }
    money.networkEarnGangopsWagesBonus = networkEarnGangopsWagesBonus;
    /**
     * No comment provided
     *
     * Hash: 0xCDA1C62BE2777802 | Since: 573
     */
    function networkEarnGoon() {
        NetworkEarnGoon(undefined, undefined, undefined);
    }
    money.networkEarnGoon = networkEarnGoon;
    /**
     * No comment provided
     *
     * Hash: 0xE8815FE993896AD3 | Since: 1493
     */
    function networkEarnHackerTruck(amount) {
        NetworkEarnFromHackerTruckMission(undefined, amount, undefined, undefined);
    }
    money.networkEarnHackerTruck = networkEarnHackerTruck;
    /**
     * No comment provided
     *
     * Hash: 0x9D4FDBB035229669 | Since: 1290
     */
    function networkEarnHeistAward() {
        NetworkEarnJobBonusHeistAward(undefined, undefined, undefined);
    }
    money.networkEarnHeistAward = networkEarnHeistAward;
    /**
     * No comment provided
     *
     * Hash: 0xD21D111C46BA9F15 | Since: 2189
     */
    function networkEarnIslandHeist(amount1, amount2) {
        NetworkEarnIslandHeist(amount1, undefined, undefined, undefined, amount2, 0);
    }
    money.networkEarnIslandHeist = networkEarnIslandHeist;
    /**
     * No comment provided
     *
     * Hash: 0xE0F82D68C7039158 | Since: 1493
     */
    function networkEarnNightclub() {
        Citizen.invokeNative('0xE0F82D68C7039158', undefined, undefined);
    }
    money.networkEarnNightclub = networkEarnNightclub;
    /**
     * No comment provided
     *
     * Hash: 0xC6E74CF8C884C880 | Since: 1493
     */
    function networkEarnNightclubAndWarehouse() {
        Citizen.invokeNative('0xC6E74CF8C884C880', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnNightclubAndWarehouse = networkEarnNightclubAndWarehouse;
    /**
     * No comment provided
     *
     * Hash: 0xB4DEAE67F35E2ACD | Since: 1493
     */
    function networkEarnNightclubDancing() {
        Citizen.invokeNative('0xB4DEAE67F35E2ACD', undefined);
    }
    money.networkEarnNightclubDancing = networkEarnNightclubDancing;
    /**
     * No comment provided
     *
     * Hash: 0x55A1E095DB052FA5 | Since: 877
     */
    function networkEarnPurchaseClubHouse() {
        Citizen.invokeNative('0x55A1E095DB052FA5', undefined, undefined);
    }
    money.networkEarnPurchaseClubHouse = networkEarnPurchaseClubHouse;
    /**
     * No comment provided
     *
     * Hash: 0xDFF49EE984E7AAE8 | Since: 1734
     */
    function networkEarnRcTimeTrial(amount) {
        NetworkEarnFromRcTimeTrial(amount);
    }
    money.networkEarnRcTimeTrial = networkEarnRcTimeTrial;
    /**
     * No comment provided
     *
     * Hash: 0x7A5349B773584675 | Since: 1290
     */
    function networkEarnRdrBonus(amount) {
        NetworkEarnFromRdrBonus(amount, undefined);
    }
    money.networkEarnRdrBonus = networkEarnRdrBonus;
    /**
     * No comment provided
     *
     * Hash: 0x0E1E2FF3F4EC11AA | Since: 1290
     */
    function networkEarnSellBase(amount, baseNameHash) {
        if (typeof baseNameHash === 'string')
            baseNameHash = misc.getHashKey(baseNameHash);
        NetworkEarnFromSellBase(amount, baseNameHash);
    }
    money.networkEarnSellBase = networkEarnSellBase;
    /**
     * No comment provided
     *
     * Hash: 0x8BCB27A057DF7B7F | Since: 1734
     */
    function networkEarnSellPrizeVehicle(amount) {
        NetworkEarnFromSellingVehicle(amount, undefined, undefined);
    }
    money.networkEarnSellPrizeVehicle = networkEarnSellPrizeVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x45087AE480B233AC | Since: 2699
     */
    function networkEarnSightseeingReward() {
        NetworkEarnFromSightseeing(undefined, undefined, undefined, undefined);
    }
    money.networkEarnSightseeingReward = networkEarnSightseeingReward;
    /**
     * No comment provided
     *
     * Hash: 0xDEE612F2D71B0308 | Since: 1180
     */
    function networkEarnSmugglerAgency(amount) {
        NetworkEarnFromSmuggling(amount, undefined, undefined, undefined);
    }
    money.networkEarnSmugglerAgency = networkEarnSmugglerAgency;
    /**
     * No comment provided
     *
     * Hash: 0x676C48776CACBB5A | Since: 1604
     */
    function networkEarnSpinTheWheelCash(amount) {
        NetworkEarnFromSpinTheWheelCash(amount);
    }
    money.networkEarnSpinTheWheelCash = networkEarnSpinTheWheelCash;
    /**
     * No comment provided
     *
     * Hash: 0x5B669CF2299A271F | Since: 1290
     */
    function networkEarnTargetRefund(amount) {
        NetworkEarnFromTargetRefund(amount, 0);
    }
    money.networkEarnTargetRefund = networkEarnTargetRefund;
    /**
     * No comment provided
     *
     * Hash: 0xB846F547D3792DF6 | Since: 2372
     */
    function networkEarnTunerAward() {
        NetworkEarnFromTunerAward(undefined, undefined, undefined);
    }
    money.networkEarnTunerAward = networkEarnTunerAward;
    /**
     * No comment provided
     *
     * Hash: 0xBCB266247193AC61 | Since: 2372
     */
    function networkEarnTunerRobbery() {
        NetworkEarnFromTunerFinale(undefined, undefined, undefined, undefined, undefined);
    }
    money.networkEarnTunerRobbery = networkEarnTunerRobbery;
    /**
     * No comment provided
     *
     * Hash: 0xD07C7C3F1995108C | Since: 2545
     */
    function networkEarnUpgradeAgency() {
        Citizen.invokeNative('0xD07C7C3F1995108C', undefined, undefined);
    }
    money.networkEarnUpgradeAgency = networkEarnUpgradeAgency;
    /**
     * No comment provided
     *
     * Hash: 0x4C3B75694F7E0D9C | Since: 1868
     */
    function networkEarnUpgradeArcade() {
        Citizen.invokeNative('0x4C3B75694F7E0D9C', undefined, undefined, undefined);
    }
    money.networkEarnUpgradeArcade = networkEarnUpgradeArcade;
    /**
     * No comment provided
     *
     * Hash: 0xC10322A8D3E061EE | Since: 2372
     */
    function networkEarnUpgradeAutoshop() {
        NetworkEarnFromUpgradeAutoshopLocation(undefined, undefined);
    }
    money.networkEarnUpgradeAutoshop = networkEarnUpgradeAutoshop;
    /**
     * No comment provided
     *
     * Hash: 0x35F8DA0E8A31EF1B | Since: 1180
     */
    function networkEarnWagePayment(amount) {
        NetworkEarnFromWagePayment(amount, undefined);
    }
    money.networkEarnWagePayment = networkEarnWagePayment;
    /**
     * No comment provided
     *
     * Hash: 0x005ACA7100BD101D | Since: 1180
     */
    function networkEarnWagePaymentBonus(amount) {
        NetworkEarnFromWagePaymentBonus(amount);
    }
    money.networkEarnWagePaymentBonus = networkEarnWagePaymentBonus;
    /**
     * No comment provided
     *
     * Hash: 0xDE68E30D89F97132 | Since: 2060
     */
    function networkEarnYatchMission(amount) {
        Citizen.invokeNative('0xDE68E30D89F97132', amount, undefined);
    }
    money.networkEarnYatchMission = networkEarnYatchMission;
    /**
     * No comment provided
     *
     * Hash: 0x7C4FCCD2E4DEB394 | Since: 323
     */
    function networkEconomyHasFixedCrazyNumbers() {
        return Citizen.invokeNative('0x7C4FCCD2E4DEB394');
    }
    money.networkEconomyHasFixedCrazyNumbers = networkEconomyHasFixedCrazyNumbers;
    /**
     * Returns true if bank balance >= amount.
     *
     * Hash: 0xA31FD6A0865B6D14 | Since: 323
     */
    function networkGetCanSpendFromBank(amount) {
        return NetworkGetVcBankBalanceIsNotLessThan(amount);
    }
    money.networkGetCanSpendFromBank = networkGetCanSpendFromBank;
    /**
     * Returns true if bank balance + wallet balance >= amount.
     *
     * Hash: 0xDC18531D7019A535 | Since: 323
     */
    function networkGetCanSpendFromBankAndWallet(amount, characterSlot) {
        return NetworkGetVcBankWalletBalanceIsNotLessThan(amount, characterSlot);
    }
    money.networkGetCanSpendFromBankAndWallet = networkGetCanSpendFromBankAndWallet;
    /**
     * Returns true if wallet balance >= amount.
     *
     * Hash: 0xED5AB8860415BABA | Since: 323
     */
    function networkGetCanSpendFromWallet(amount, characterSlot) {
        return NetworkGetVcWalletBalanceIsNotLessThan(amount, characterSlot);
    }
    money.networkGetCanSpendFromWallet = networkGetCanSpendFromWallet;
    /**
     * Returns false if amount > wallet balance or daily transfer limit has been hit.
     *
     * Hash: 0x08E8EEADFD0DC4A0 | Since: 323
     */
    function networkGetCanTransferCash(amount) {
        return Citizen.invokeNative('0x08E8EEADFD0DC4A0', amount);
    }
    money.networkGetCanTransferCash = networkGetCanTransferCash;
    /**
     * No comment provided
     *
     * Hash: 0x5D1E75F91C07DEE5 | Since: 323
     */
    function networkGetEvcBalance() {
        return NetworkGetEvcBalance();
    }
    money.networkGetEvcBalance = networkGetEvcBalance;
    /**
     * No comment provided
     *
     * Hash: 0xFB2456B2040A6A67 | Since: 323
     */
    function networkGetPlayerIsHighEarner() {
        return NetworkGetIsHighEarner();
    }
    money.networkGetPlayerIsHighEarner = networkGetPlayerIsHighEarner;
    /**
     * No comment provided
     *
     * Hash: 0x4F54F3B6C202FB4E | Since: 323
     */
    function networkGetPvcBalance() {
        return NetworkGetPvcBalance();
    }
    money.networkGetPvcBalance = networkGetPvcBalance;
    /**
     * Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
     *
     * Hash: 0x13A8DE2FD77D04F3 | Since: 323
     */
    function networkGetPvcTransferBalance() {
        return NetworkGetPvcTransferBalance();
    }
    money.networkGetPvcTransferBalance = networkGetPvcTransferBalance;
    /**
     * Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
     *
     * Hash: 0xEA560AC9EEB1E19B | Since: 323
     */
    function networkGetRemainingTransferBalance() {
        return NetworkGetRemainingTransferBalance();
    }
    money.networkGetRemainingTransferBalance = networkGetRemainingTransferBalance;
    /**
     * No comment provided
     *
     * Hash: 0xA6FA3979BED01B81 | Since: 323
     */
    function networkGetStringBankBalance() {
        return NetworkGetStringBankBalance();
    }
    money.networkGetStringBankBalance = networkGetStringBankBalance;
    /**
     * No comment provided
     *
     * Hash: 0x700AF71AE615E6DD | Since: 323
     */
    function networkGetStringBankWalletBalance(character) {
        return NetworkGetStringBankWalletBalance(character);
    }
    money.networkGetStringBankWalletBalance = networkGetStringBankWalletBalance;
    /**
     * No comment provided
     *
     * Hash: 0xF9B10B529DCFB33B | Since: 323
     */
    function networkGetStringWalletBalance(characterSlot) {
        return NetworkGetStringWalletBalance(characterSlot);
    }
    money.networkGetStringWalletBalance = networkGetStringWalletBalance;
    /**
     * No comment provided
     *
     * Hash: 0x5CBAD97E059E1B94 | Since: 323
     */
    function networkGetVcBalance() {
        return NetworkGetVcBalance();
    }
    money.networkGetVcBalance = networkGetVcBalance;
    /**
     * No comment provided
     *
     * Hash: 0x76EF28DA05EA395A | Since: 323
     */
    function networkGetVcBankBalance() {
        return NetworkGetVcBankBalance();
    }
    money.networkGetVcBankBalance = networkGetVcBankBalance;
    /**
     * No comment provided
     *
     * Hash: 0xA40F9C2623F6A8B5 | Since: 323
     */
    function networkGetVcWalletBalance(characterSlot) {
        return NetworkGetVcWalletBalance(characterSlot);
    }
    money.networkGetVcWalletBalance = networkGetVcWalletBalance;
    /**
     * No comment provided
     *
     * Hash: 0xFB18DF9CB95E0105 | Since: 323
     */
    function networkGivePlayerJobshareCash(amount) {
        return NetworkGivePlayerJobshareCash(amount);
    }
    money.networkGivePlayerJobshareCash = networkGivePlayerJobshareCash;
    /**
     * No comment provided
     *
     * Hash: 0x3DA5ECD1A56CBA6D | Since: 323
     */
    function networkInitializeCash(wallet, bank) {
        NetworkInitializeCash(wallet, bank);
    }
    money.networkInitializeCash = networkInitializeCash;
    /**
     * No comment provided
     *
     * Hash: 0x821418C727FCACD7 | Since: 791
     */
    function networkManualDeleteCharacter(characterSlot) {
        NetworkManualDeleteCharacter(characterSlot);
    }
    money.networkManualDeleteCharacter = networkManualDeleteCharacter;
    /**
     * No comment provided
     *
     * Hash: 0x81404F3DC124FE5B | Since: 323
     */
    function networkMoneyCanBet(amount) {
        return NetworkMoneyCanBet(amount, false, false);
    }
    money.networkMoneyCanBet = networkMoneyCanBet;
    /**
     * No comment provided
     *
     * Hash: 0x5FD5ED82CBBE9989 | Since: 323
     */
    function networkPayEmployeeWage() {
        NetworkPayEmployeeWage(undefined, false, false);
    }
    money.networkPayEmployeeWage = networkPayEmployeeWage;
    /**
     * No comment provided
     *
     * Hash: 0x9346E14F2AF74D46 | Since: 323
     */
    function networkPayMatchEntryFee(amount, matchId) {
        NetworkPayMatchEntryFee(amount, matchId, false, false);
    }
    money.networkPayMatchEntryFee = networkPayMatchEntryFee;
    /**
     * No comment provided
     *
     * Hash: 0x56A3B51944C50598 | Since: 323
     */
    function networkReceivePlayerJobshareCash(value) {
        return NetworkReceivePlayerJobshareCash(value);
    }
    money.networkReceivePlayerJobshareCash = networkReceivePlayerJobshareCash;
    /**
     * index
     * -------
     * See function sub_1005 in am_boat_taxi.ysc
     *
     * context
     * ----------
     * "BACKUP_VAGOS"
     * "BACKUP_LOST"
     * "BACKUP_FAMILIES"
     * "HIRE_MUGGER"
     * "HIRE_MERCENARY"
     * "BUY_CARDROPOFF"
     * "HELI_PICKUP"
     * "BOAT_PICKUP"
     * "CLEAR_WANTED"
     * "HEAD_2_HEAD"
     * "CHALLENGE"
     * "SHARE_LAST_JOB"
     * "DEFAULT"
     *
     * reason
     * ---------
     * "NOTREACHTARGET"
     * "TARGET_ESCAPE"
     * "DELIVERY_FAIL"
     * "NOT_USED"
     * "TEAM_QUIT"
     * "SERVER_ERROR"
     * "RECEIVE_LJ_L"
     * "CHALLENGE_PLAYER_LEFT"
     * "DEFAULT"
     *
     * unk
     * -----
     * Unknown bool value
     *
     *
     *
     * Hash: 0xF9C812CD7C46E817 | Since: 323
     */
    function networkRefundCash(index, context, reason) {
        NetworkRefundCash(index, context, reason, false);
    }
    money.networkRefundCash = networkRefundCash;
    /**
     * No comment provided
     *
     * Hash: 0x1B882107C23A9022 | Since: 1290
     */
    function networkServiceEarnGangopsRivalDelivery(earnedMoney) {
        NetworkRivalDeliveryCompleted(earnedMoney);
    }
    money.networkServiceEarnGangopsRivalDelivery = networkServiceEarnGangopsRivalDelivery;
    /**
     * No comment provided
     *
     * Hash: 0x1B2120405080125C | Since: 2545
     */
    function networkSpendAgency() {
        Citizen.invokeNative('0x1B2120405080125C', undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendAgency = networkSpendAgency;
    /**
     * No comment provided
     *
     * Hash: 0x1254B5B3925EFD3D | Since: 2545
     */
    function networkSpendApartmentUtilities(amount) {
        return Citizen.invokeNative('0x1254B5B3925EFD3D', amount, false, false);
    }
    money.networkSpendApartmentUtilities = networkSpendApartmentUtilities;
    /**
     * No comment provided
     *
     * Hash: 0x43AA7FAC4E6D6687 | Since: 1868
     */
    function networkSpendArcade() {
        NetworkSpentArcadeGeneric(undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendArcade = networkSpendArcade;
    /**
     * No comment provided
     *
     * Hash: 0xB5B58E24868CB09E | Since: 1868
     */
    function networkSpendArcadeMgmt() {
        Citizen.invokeNative('0xB5B58E24868CB09E', undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendArcadeMgmt = networkSpendArcadeMgmt;
    /**
     * No comment provided
     *
     * Hash: 0x619496D837EFD920 | Since: 1604
     */
    function networkSpendArenaPremium(amount) {
        NetworkSpentArenaPremium(amount, false, false);
    }
    money.networkSpendArenaPremium = networkSpendArenaPremium;
    /**
     * type either, 1 for cam spectate, 2 for drone
     *
     * Hash: 0x7049BF858601DC0F | Since: 1604
     */
    function networkSpendArenaSpectatorBox(amount, _type) {
        NetworkSpentArenaSpectatorBox(amount, _type, false, false);
    }
    money.networkSpendArenaSpectatorBox = networkSpendArenaSpectatorBox;
    /**
     * No comment provided
     *
     * Hash: 0x9BEA350D7C48061B | Since: 2372
     */
    function networkSpendAutoshopModify() {
        NetworkSpentAutoshopModifications(undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendAutoshopModify = networkSpendAutoshopModify;
    /**
     * No comment provided
     *
     * Hash: 0x54ABA22FA6371249 | Since: 2189
     */
    function networkSpendBeachParty() {
        NetworkSpentBeachPartyGeneric(undefined);
    }
    money.networkSpendBeachParty = networkSpendBeachParty;
    /**
     * No comment provided
     *
     * Hash: 0x923AEA8E78F8DF0B | Since: 2699
     */
    function networkSpendBikeShop() {
        NetworkSpentBikeShopModify(undefined, undefined, undefined, undefined);
    }
    money.networkSpendBikeShop = networkSpendBikeShop;
    /**
     * No comment provided
     *
     * Hash: 0xDBC966A01C02BCA7 | Since: 573
     */
    function networkSpendBoss() {
        NetworkSpentPayBoss(undefined, undefined, undefined);
    }
    money.networkSpendBoss = networkSpendBoss;
    /**
     * No comment provided
     *
     * Hash: 0x1BEA0CD93470BB1F | Since: 1493
     */
    function networkSpendBountyHunterMission(amount) {
        NetworkSpentBountyHunterMission(amount, false, false);
    }
    money.networkSpendBountyHunterMission = networkSpendBountyHunterMission;
    /**
     * No comment provided
     *
     * Hash: 0x92D1CFDA1227FF1C | Since: 2545
     */
    function networkSpendBusinessPropertyFees() {
        Citizen.invokeNative('0x92D1CFDA1227FF1C', undefined, undefined, undefined, undefined);
    }
    money.networkSpendBusinessPropertyFees = networkSpendBusinessPropertyFees;
    /**
     * No comment provided
     *
     * Hash: 0xEA8CD3C9B3C35884 | Since: 2545
     */
    function networkSpendBuyAgency() {
        Citizen.invokeNative('0xEA8CD3C9B3C35884', undefined, undefined, undefined, undefined);
    }
    money.networkSpendBuyAgency = networkSpendBuyAgency;
    /**
     * No comment provided
     *
     * Hash: 0x870289A558348378 | Since: 1868
     */
    function networkSpendBuyArcade() {
        Citizen.invokeNative('0x870289A558348378', undefined, undefined, undefined, undefined);
    }
    money.networkSpendBuyArcade = networkSpendBuyArcade;
    /**
     * No comment provided
     *
     * Hash: 0x40D5DA9550B7CB46 | Since: 1604
     */
    function networkSpendBuyArena(amount) {
        NetworkSpentBuyArena(amount, false, false, undefined);
    }
    money.networkSpendBuyArena = networkSpendBuyArena;
    /**
     * No comment provided
     *
     * Hash: 0xEEB7E5D1FEB20869 | Since: 2372
     */
    function networkSpendBuyAutoshop() {
        NetworkSpentBuyAutoshop(undefined, undefined, undefined, undefined);
    }
    money.networkSpendBuyAutoshop = networkSpendBuyAutoshop;
    /**
     * No comment provided
     *
     * Hash: 0x34A6FC4D06C4DA0F | Since: 1734
     */
    function networkSpendBuyCasino(amount) {
        return NetworkSpentBuyCasino(amount, false, false);
    }
    money.networkSpendBuyCasino = networkSpendBuyCasino;
    /**
     * No comment provided
     *
     * Hash: 0x90CD7C6871FBF1B4 | Since: 2189
     */
    function networkSpendBuySub() {
        Citizen.invokeNative('0x90CD7C6871FBF1B4', undefined, undefined, undefined, undefined);
    }
    money.networkSpendBuySub = networkSpendBuySub;
    /**
     * No comment provided
     *
     * Hash: 0x925227803A0EAA1B | Since: 2372
     */
    function networkSpendCarClubBar() {
        NetworkSpentCarclub(undefined, false, false, undefined);
    }
    money.networkSpendCarClubBar = networkSpendCarClubBar;
    /**
     * No comment provided
     *
     * Hash: 0x1464E17207CD36E2 | Since: 2372
     */
    function networkSpendCarClubMembership(amount1, amount2) {
        NetworkSpentCarclubMembership(amount1, undefined, undefined, amount2, undefined);
    }
    money.networkSpendCarClubMembership = networkSpendCarClubMembership;
    /**
     * No comment provided
     *
     * Hash: 0xD1E46824E6FB92B5 | Since: 2372
     */
    function networkSpendCarClubTakeover() {
        NetworkSpentCarclubTakeover(undefined, undefined, undefined, undefined);
    }
    money.networkSpendCarClubTakeover = networkSpendCarClubTakeover;
    /**
     * No comment provided
     *
     * Hash: 0xC991C255AA6D90B2 | Since: 2189
     */
    function networkSpendCasinoClub(amount1, amount2) {
        NetworkSpentCasinoClubGeneric(amount1, undefined, false, undefined, 0, 0, 0, amount2, undefined);
    }
    money.networkSpendCasinoClub = networkSpendCasinoClub;
    /**
     * No comment provided
     *
     * Hash: 0x88BF9B612B84D3C3 | Since: 1734
     */
    function networkSpendCasinoGeneric(amount) {
        NetworkSpentCasinoGeneric(amount, undefined, undefined, undefined, undefined);
    }
    money.networkSpendCasinoGeneric = networkSpendCasinoGeneric;
    /**
     * No comment provided
     *
     * Hash: 0xD30E8392F407C328 | Since: 1868
     */
    function networkSpendCasinoHeist() {
        NetworkSpentCasinoHeist(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendCasinoHeist = networkSpendCasinoHeist;
    /**
     * No comment provided
     *
     * Hash: 0x487009DD91D93429 | Since: 1868
     */
    function networkSpendCasinoHeistSkipMission() {
        NetworkSpentCasinoHeistSkipMission(undefined, undefined, undefined, undefined);
    }
    money.networkSpendCasinoHeistSkipMission = networkSpendCasinoHeistSkipMission;
    /**
     * No comment provided
     *
     * Hash: 0xFBBE0570EDF39D46 | Since: 1734
     */
    function networkSpendCasinoMembership(amount) {
        NetworkSpentCasinoMembership(amount, false, false, 0);
    }
    money.networkSpendCasinoMembership = networkSpendCasinoMembership;
    /**
     * No comment provided
     *
     * Hash: 0xD86581F9E7CDA383 | Since: 2545
     */
    function networkSpendCompSuv() {
        Citizen.invokeNative('0xD86581F9E7CDA383', undefined, undefined, undefined, undefined);
    }
    money.networkSpendCompSuv = networkSpendCompSuv;
    /**
     * Hardcoded to return 0.
     *
     * Hash: 0x9B5016A6433A68C5 | Since: 323
     */
    function networkSpendEarnedFromBankAndWallets(amount) {
        return Citizen.invokeNative('0x9B5016A6433A68C5', amount);
    }
    money.networkSpendEarnedFromBankAndWallets = networkSpendEarnedFromBankAndWallets;
    /**
     * No comment provided
     *
     * Hash: 0x771ADB0E7635B7BF | Since: 1290
     */
    function networkSpendGangopsCannon() {
        NetworkSpentGangopsCannon(undefined, undefined, undefined, undefined);
    }
    money.networkSpendGangopsCannon = networkSpendGangopsCannon;
    /**
     * No comment provided
     *
     * Hash: 0x2A7CEC72C3443BCC | Since: 1290
     */
    function networkSpendGangopsRepairCost() {
        Citizen.invokeNative('0x2A7CEC72C3443BCC', undefined, undefined, undefined);
    }
    money.networkSpendGangopsRepairCost = networkSpendGangopsRepairCost;
    /**
     * No comment provided
     *
     * Hash: 0xDA947AE8880D5C18 | Since: 1290
     */
    function networkSpendGangopsSkipMission() {
        NetworkSpentGangopsStartMission(undefined, undefined, undefined, undefined);
    }
    money.networkSpendGangopsSkipMission = networkSpendGangopsSkipMission;
    /**
     * No comment provided
     *
     * Hash: 0xA19EC0786E326E06 | Since: 1290
     */
    function networkSpendGangopsStartStrand(_type, amount) {
        NetworkSpentGangopsStartStrand(_type, amount, false, false);
    }
    money.networkSpendGangopsStartStrand = networkSpendGangopsStartStrand;
    /**
     * No comment provided
     *
     * Hash: 0x5ECE6FD7B4EC8D6A | Since: 1290
     */
    function networkSpendGangopsTripSkip(amount) {
        NetworkSpentGangopsTripSkip(amount, false, false);
    }
    money.networkSpendGangopsTripSkip = networkSpendGangopsTripSkip;
    /**
     * No comment provided
     *
     * Hash: 0x08A1B82B91900682 | Since: 573
     */
    function networkSpendGoon(amount) {
        NetworkSpentPayGoon(0, 0, amount);
    }
    money.networkSpendGoon = networkSpendGoon;
    /**
     * No comment provided
     *
     * Hash: 0x2CEB0E0BC2A77C05 | Since: 2699
     */
    function networkSpendGunrunning() {
        NetworkSpentGunrunningContactService(undefined, undefined, undefined, undefined);
    }
    money.networkSpendGunrunning = networkSpendGunrunning;
    /**
     * No comment provided
     *
     * Hash: 0xBF8793B91EA094A7 | Since: 2545
     */
    function networkSpendHidden() {
        Citizen.invokeNative('0xBF8793B91EA094A7', undefined, undefined, undefined, undefined);
    }
    money.networkSpendHidden = networkSpendHidden;
    /**
     * No comment provided
     *
     * Hash: 0x93AA4165CB67E925 | Since: 2372
     */
    function networkSpendInteractionMenuAbility() {
        NetworkSpentImAbility(undefined, undefined, undefined, undefined);
    }
    money.networkSpendInteractionMenuAbility = networkSpendInteractionMenuAbility;
    /**
     * No comment provided
     *
     * Hash: 0xE86689E5F82DE429 | Since: 2189
     */
    function networkSpendIslandHeist() {
        NetworkSpentIslandHeist(undefined, undefined, undefined, undefined);
    }
    money.networkSpendIslandHeist = networkSpendIslandHeist;
    /**
     * No comment provided
     *
     * Hash: 0xE5F5A060439C2F5D | Since: 1604
     */
    function networkSpendMakeItRain(amount) {
        NetworkSpentMakeItRain(amount, false, false);
    }
    money.networkSpendMakeItRain = networkSpendMakeItRain;
    /**
     * No comment provided
     *
     * Hash: 0x65482BFD0923C8A1 | Since: 1493
     */
    function networkSpendNightclubAndWarehouse() {
        Citizen.invokeNative('0x65482BFD0923C8A1', undefined, undefined, undefined, undefined);
    }
    money.networkSpendNightclubAndWarehouse = networkSpendNightclubAndWarehouse;
    /**
     * No comment provided
     *
     * Hash: 0xDD21B016E4289465 | Since: 1493
     */
    function networkSpendNightclubBarDrink(amount) {
        NetworkSpentNightclubBarDrink(amount, undefined, false, false);
    }
    money.networkSpendNightclubBarDrink = networkSpendNightclubBarDrink;
    /**
     * No comment provided
     *
     * Hash: 0xEAD3D81F2C3A1458 | Since: 1868
     */
    function networkSpendPlayArcade() {
        NetworkSpentArcadeGame(undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendPlayArcade = networkSpendPlayArcade;
    /**
     * No comment provided
     *
     * Hash: 0xB9F7A469460E7A4A | Since: 2372
     */
    function networkSpendSetCommonFields() {
        NetworkSpentFromBank(undefined, undefined, undefined, false);
    }
    money.networkSpendSetCommonFields = networkSpendSetCommonFields;
    /**
     * No comment provided
     *
     * Hash: 0x7E2F4E8F44CAF4E0 | Since: 2699
     */
    function networkSpendSetDiscount() {
        NetworkSpentSalesDisplay(false);
    }
    money.networkSpendSetDiscount = networkSpendSetDiscount;
    /**
     * No comment provided
     *
     * Hash: 0xD9DF467CBE4398C8 | Since: 2545
     */
    function networkSpendSourceBike() {
        Citizen.invokeNative('0xD9DF467CBE4398C8', undefined, undefined, undefined, undefined);
    }
    money.networkSpendSourceBike = networkSpendSourceBike;
    /**
     * No comment provided
     *
     * Hash: 0x9A5BD1D0000B339C | Since: 1604
     */
    function networkSpendSpinTheWheelPayment(amount) {
        NetworkSpentSpinTheWheelPayment(amount, undefined, false);
    }
    money.networkSpendSpinTheWheelPayment = networkSpendSpinTheWheelPayment;
    /**
     * No comment provided
     *
     * Hash: 0x6C8BC1488527AAAB | Since: 2189
     */
    function networkSpendSubmarine() {
        NetworkSpentSubmarine(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendSubmarine = networkSpendSubmarine;
    /**
     * No comment provided
     *
     * Hash: 0xEBD482B82ACB8BAD | Since: 2545
     */
    function networkSpendSupply() {
        Citizen.invokeNative('0xEBD482B82ACB8BAD', undefined, undefined, undefined, undefined);
    }
    money.networkSpendSupply = networkSpendSupply;
    /**
     * No comment provided
     *
     * Hash: 0x61A2DF64ED2D396E | Since: 2545
     */
    function networkSpendSuvFstTrvl() {
        Citizen.invokeNative('0x61A2DF64ED2D396E', 0, false, false, undefined);
    }
    money.networkSpendSuvFstTrvl = networkSpendSuvFstTrvl;
    /**
     * No comment provided
     *
     * Hash: 0x6CCA64840589A3B6 | Since: 2545
     */
    function networkSpendUpgradeAgency() {
        Citizen.invokeNative('0x6CCA64840589A3B6', undefined, undefined, undefined, undefined);
    }
    money.networkSpendUpgradeAgency = networkSpendUpgradeAgency;
    /**
     * No comment provided
     *
     * Hash: 0x5574637681911FDA | Since: 1868
     */
    function networkSpendUpgradeArcade() {
        Citizen.invokeNative('0x5574637681911FDA', undefined, undefined, undefined, undefined);
    }
    money.networkSpendUpgradeArcade = networkSpendUpgradeArcade;
    /**
     * No comment provided
     *
     * Hash: 0x037ABB06825D7AB1 | Since: 1604
     */
    function networkSpendUpgradeArena(amount) {
        NetworkSpentUpgradeArena(amount, false, false, undefined);
    }
    money.networkSpendUpgradeArena = networkSpendUpgradeArena;
    /**
     * No comment provided
     *
     * Hash: 0xDD829AA198FDC46C | Since: 2372
     */
    function networkSpendUpgradeAutoshop() {
        NetworkSpentUpgradeAutoshop(undefined, undefined, undefined, undefined);
    }
    money.networkSpendUpgradeAutoshop = networkSpendUpgradeAutoshop;
    /**
     * No comment provided
     *
     * Hash: 0x4740D62BC1B4EBEA | Since: 1734
     */
    function networkSpendUpgradeCasino(amount) {
        return NetworkSpentUpgradeCasino(amount, false, false);
    }
    money.networkSpendUpgradeCasino = networkSpendUpgradeCasino;
    /**
     * No comment provided
     *
     * Hash: 0x89049A84065CE68E | Since: 2189
     */
    function networkSpendUpgradeSub() {
        NetworkSpentUpgradeSub(undefined, undefined, undefined, undefined);
    }
    money.networkSpendUpgradeSub = networkSpendUpgradeSub;
    /**
     * No comment provided
     *
     * Hash: 0x02D24A35A9CC3503 | Since: 2699
     */
    function networkSpendVehicleRequested() {
        NetworkSpentVehicleRequested(undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpendVehicleRequested = networkSpendVehicleRequested;
    /**
     * No comment provided
     *
     * Hash: 0xB162DC95C0A3317B | Since: 323
     */
    function networkSpentAmmoDrop() {
        NetworkSpentAmmoDrop(undefined, false, false, undefined);
    }
    money.networkSpentAmmoDrop = networkSpentAmmoDrop;
    /**
     * No comment provided
     *
     * Hash: 0x14EAEA58F93B55AF | Since: 1604
     */
    function networkSpentArenaJoinSpectator(amount) {
        NetworkSpentArenaJoinSpectator(amount, undefined, false, false);
    }
    money.networkSpentArenaJoinSpectator = networkSpentArenaJoinSpectator;
    /**
     * No comment provided
     *
     * Hash: 0x812F5488B1B2A299 | Since: 323
     */
    function networkSpentArrestBail() {
        NetworkSpentArrestBail(undefined, false, false);
    }
    money.networkSpentArrestBail = networkSpentArrestBail;
    /**
     * No comment provided
     *
     * Hash: 0x5D97630A8A0EF123 | Since: 1103
     */
    function networkSpentBallisticEquipment(amount) {
        NetworkSpentBallisticEquipment(amount, false, false);
    }
    money.networkSpentBallisticEquipment = networkSpentBallisticEquipment;
    /**
     * No comment provided
     *
     * Hash: 0xCA230C9682556CF1 | Since: 323
     */
    function networkSpentBankInterest() {
        NetworkSpentBankInterest(0, false, false);
    }
    money.networkSpentBankInterest = networkSpentBankInterest;
    /**
     * No comment provided
     *
     * Hash: 0x1C436FD11FFA692F | Since: 323
     */
    function networkSpentBetting(amount, matchId) {
        NetworkSpentBetting(amount, 0, matchId, false, false);
    }
    money.networkSpentBetting = networkSpentBetting;
    /**
     * No comment provided
     *
     * Hash: 0x524EE43A37232C00 | Since: 323
     */
    function networkSpentBoatPickup() {
        NetworkSpentBoatPickup(undefined, false, false, undefined);
    }
    money.networkSpentBoatPickup = networkSpentBoatPickup;
    /**
     * No comment provided
     *
     * Hash: 0xFFBE02CD385356BD | Since: 573
     */
    function networkSpentBossGoon(amount) {
        return NetworkSpentBoss(amount, false, false);
    }
    money.networkSpentBossGoon = networkSpentBossGoon;
    /**
     * No comment provided
     *
     * Hash: 0x29B260B84947DFCC | Since: 323
     */
    function networkSpentBounty() {
        NetworkSpentBounty(undefined, false, false);
    }
    money.networkSpentBounty = networkSpentBounty;
    /**
     * No comment provided
     *
     * Hash: 0xA6DD8458CE24012C | Since: 323
     */
    function networkSpentBullShark() {
        NetworkSpentBullShark(undefined, false, false, undefined);
    }
    money.networkSpentBullShark = networkSpentBullShark;
    /**
     * No comment provided
     *
     * Hash: 0x4EA3F425C7744D21 | Since: 1290
     */
    function networkSpentBuyBase() {
        NetworkSpentBuyBase(undefined, undefined, undefined, undefined);
    }
    money.networkSpentBuyBase = networkSpentBuyBase;
    /**
     * No comment provided
     *
     * Hash: 0x12D148D26538D0F9 | Since: 1103
     */
    function networkSpentBuyBunker() {
        NetworkSpentBuyBunker(undefined, undefined, undefined, undefined);
    }
    money.networkSpentBuyBunker = networkSpentBuyBunker;
    /**
     * No comment provided
     *
     * Hash: 0xA628A745E2275C5D | Since: 323
     */
    function networkSpentBuyOfftheradar() {
        NetworkSpentBuyOfftheradar(undefined, false, false, undefined);
    }
    money.networkSpentBuyOfftheradar = networkSpentBuyOfftheradar;
    /**
     * No comment provided
     *
     * Hash: 0x6D3A430D1A809179 | Since: 323
     */
    function networkSpentBuyPassiveMode() {
        NetworkSpentBuyPassiveMode(undefined, false, false, undefined);
    }
    money.networkSpentBuyPassiveMode = networkSpentBuyPassiveMode;
    /**
     * No comment provided
     *
     * Hash: 0x6E176F1B18BC0637 | Since: 323
     */
    function networkSpentBuyRevealPlayers() {
        NetworkSpentBuyRevealPlayers(undefined, false, false, undefined);
    }
    money.networkSpentBuyRevealPlayers = networkSpentBuyRevealPlayers;
    /**
     * No comment provided
     *
     * Hash: 0x0CCE73BC7A11E885 | Since: 1290
     */
    function networkSpentBuyTiltrotor() {
        NetworkSpentBuyTiltrotor(undefined, undefined, undefined, undefined);
    }
    money.networkSpentBuyTiltrotor = networkSpentBuyTiltrotor;
    /**
     * No comment provided
     *
     * Hash: 0xAC272C0AE01B4BD8 | Since: 1103
     */
    function networkSpentBuyTruck() {
        NetworkSpentBuyTruck(undefined, undefined, undefined, undefined);
    }
    money.networkSpentBuyTruck = networkSpentBuyTruck;
    /**
     * No comment provided
     *
     * Hash: 0xE1B13771A843C4F6 | Since: 323
     */
    function networkSpentBuyWantedlevel() {
        return NetworkSpentBuyWantedlevel(undefined, false, false, undefined);
    }
    money.networkSpentBuyWantedlevel = networkSpentBuyWantedlevel;
    /**
     * No comment provided
     *
     * Hash: 0xACDE7185B374177C | Since: 323
     */
    function networkSpentCallPlayer() {
        return NetworkSpentCallPlayer(undefined, false, false);
    }
    money.networkSpentCallPlayer = networkSpentCallPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x948705F6F9C50824 | Since: 2699
     */
    function networkSpentCargoSourcing() {
        NetworkSpentCargoSourcing(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpentCargoSourcing = networkSpentCargoSourcing;
    /**
     * No comment provided
     *
     * Hash: 0xEC03C719DB2F4306 | Since: 323
     */
    function networkSpentCarwash() {
        NetworkSpentCarwash(undefined, undefined, undefined, false, false);
    }
    money.networkSpentCarwash = networkSpentCarwash;
    /**
     * No comment provided
     *
     * Hash: 0x289016EC778D60E0 | Since: 323
     */
    function networkSpentCashDrop(amount) {
        NetworkSpentCashDrop(amount, false, false);
    }
    money.networkSpentCashDrop = networkSpentCashDrop;
    /**
     * No comment provided
     *
     * Hash: 0x5F456788B05FAEAC | Since: 944
     */
    function networkSpentChangeAppearance() {
        Citizen.invokeNative('0x5F456788B05FAEAC', undefined, undefined, undefined);
    }
    money.networkSpentChangeAppearance = networkSpentChangeAppearance;
    /**
     * No comment provided
     *
     * Hash: 0x6B38ECB05A63A685 | Since: 323
     */
    function networkSpentCinema() {
        NetworkSpentCinema(undefined, undefined, false, false);
    }
    money.networkSpentCinema = networkSpentCinema;
    /**
     * No comment provided
     *
     * Hash: 0x5BBBD92186E1F1C5 | Since: 1290
     */
    function networkSpentEmployAssassins() {
        NetworkSpentEmployAssassins(undefined, undefined, undefined, undefined);
    }
    money.networkSpentEmployAssassins = networkSpentEmployAssassins;
    /**
     * No comment provided
     *
     * Hash: 0x6A445B64ED7ABEB5 | Since: 323
     */
    function networkSpentFromRockstar() {
        NetworkSpentFromRockstar(0, false, false);
    }
    money.networkSpentFromRockstar = networkSpentFromRockstar;
    /**
     * No comment provided
     *
     * Hash: 0xB1F1346FD57685D7 | Since: 1180
     */
    function networkSpentHangarStaffCharges(amount) {
        NetworkSpentHangarStaffCharges(amount, false, false);
    }
    money.networkSpentHangarStaffCharges = networkSpentHangarStaffCharges;
    /**
     * No comment provided
     *
     * Hash: 0xB18AC2ECBB15CB6A | Since: 1180
     */
    function networkSpentHangarUtilityCharges(amount) {
        NetworkSpentHangarUtilityCharges(amount, false, false);
    }
    money.networkSpentHangarUtilityCharges = networkSpentHangarUtilityCharges;
    /**
     * No comment provided
     *
     * Hash: 0x7BF1D73DB2ECA492 | Since: 323
     */
    function networkSpentHeliPickup() {
        NetworkSpentHeliPickup(undefined, false, false, undefined);
    }
    money.networkSpentHeliPickup = networkSpentHeliPickup;
    /**
     * No comment provided
     *
     * Hash: 0xE7B80E2BF9D80BD6 | Since: 323
     */
    function networkSpentHireMercenary() {
        NetworkSpentHireMercenary(undefined, false, false, undefined);
    }
    money.networkSpentHireMercenary = networkSpentHireMercenary;
    /**
     * Only used once in a script (am_contact_requests)
     * p1 = 0
     * p2 = 1
     *
     * Hash: 0xE404BFB981665BF0 | Since: 323
     */
    function networkSpentHireMugger() {
        NetworkSpentHireMugger(undefined, false, false, undefined);
    }
    money.networkSpentHireMugger = networkSpentHireMugger;
    /**
     * No comment provided
     *
     * Hash: 0xD9B86B9872039763 | Since: 323
     */
    function networkSpentHoldups() {
        NetworkSpentHoldups(undefined, false, false);
    }
    money.networkSpentHoldups = networkSpentHoldups;
    /**
     * No comment provided
     *
     * Hash: 0xC1952F3773BA18FE | Since: 944
     */
    function networkSpentImportExportRepair() {
        NetworkSpentImportExportRepair(undefined, undefined, undefined);
    }
    money.networkSpentImportExportRepair = networkSpentImportExportRepair;
    /**
     * No comment provided
     *
     * Hash: 0xEE99784E4467689C | Since: 323
     */
    function networkSpentInStripclub() {
        NetworkSpentInStripclub(undefined, false, undefined, false);
    }
    money.networkSpentInStripclub = networkSpentInStripclub;
    /**
     * No comment provided
     *
     * Hash: 0x28F174A67B8D0C2F | Since: 323
     */
    function networkSpentJobSkip(amount, matchId) {
        NetworkSpentJobSkip(amount, matchId, false, false);
    }
    money.networkSpentJobSkip = networkSpentJobSkip;
    /**
     * No comment provided
     *
     * Hash: 0x5BCDE0F640C773D2 | Since: 877
     */
    function networkSpentJukebox() {
        NetworkSpentJukebox(undefined, undefined, undefined, undefined);
    }
    money.networkSpentJukebox = networkSpentJukebox;
    /**
     * No comment provided
     *
     * Hash: 0xD7CCCBA28C4ECAF0 | Since: 877
     */
    function networkSpentMcAbility() {
        NetworkSpentBaService(undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpentMcAbility = networkSpentMcAbility;
    /**
     * No comment provided
     *
     * Hash: 0xCD4D66B43B1DD28D | Since: 2189
     */
    function networkSpentMoveSubmarine() {
        Citizen.invokeNative('0xCD4D66B43B1DD28D', undefined, undefined, undefined);
    }
    money.networkSpentMoveSubmarine = networkSpentMoveSubmarine;
    /**
     * No comment provided
     *
     * Hash: 0xE7DF4E0545DFB56E | Since: 573
     */
    function networkSpentMoveYacht(amount) {
        NetworkSpentMoveYacht(amount, false, false);
    }
    money.networkSpentMoveYacht = networkSpentMoveYacht;
    /**
     * No comment provided
     *
     * Hash: 0x876056684281655D | Since: 1493
     */
    function networkSpentNightclubEntryFee(player, amount) {
        NetworkSpentNightclubEntryFee(player, amount, undefined, false, false);
    }
    money.networkSpentNightclubEntryFee = networkSpentNightclubEntryFee;
    /**
     * No comment provided
     *
     * Hash: 0xD5BB406F4E04019F | Since: 323
     */
    function networkSpentNoCops() {
        NetworkSpentNoCops(undefined, false, false, undefined);
    }
    money.networkSpentNoCops = networkSpentNoCops;
    /**
     * No comment provided
     *
     * Hash: 0xE8B0B270B6E7C76E | Since: 757
     */
    function networkSpentOrderBodyguardVehicle() {
        NetworkSpentOrderBodyguardVehicle(undefined, undefined, undefined, undefined);
    }
    money.networkSpentOrderBodyguardVehicle = networkSpentOrderBodyguardVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x05F04155A226FBBF | Since: 757
     */
    function networkSpentOrderWarehouseVehicle() {
        NetworkSpentOrderWarehouseVehicle(undefined, undefined, undefined, undefined);
    }
    money.networkSpentOrderWarehouseVehicle = networkSpentOrderWarehouseVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x0035BB914316F1E3 | Since: 877
     */
    function networkSpentPayBusinessSupplies() {
        NetworkSpentBusiness(undefined, undefined, undefined, undefined);
    }
    money.networkSpentPayBusinessSupplies = networkSpentPayBusinessSupplies;
    /**
     * According to how I understood this in the freemode script alone,
     * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
     *
     * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
     *
     * The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
     *
     * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
     *
     * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
     * `bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.`
     *
     * Hash: 0x9FF28D88C766E3E8 | Since: 323
     */
    function networkSpentPayVehicleInsurancePremium(amount, vehicleModel, notBankrupt, hasTheMoney) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        return NetworkSpentPayVehicleInsurancePremium(amount, vehicleModel, notBankrupt, hasTheMoney);
    }
    money.networkSpentPayVehicleInsurancePremium = networkSpentPayVehicleInsurancePremium;
    /**
     * No comment provided
     *
     * Hash: 0x0FE8E1FCD2B86B33 | Since: 757
     */
    function networkSpentPaHeliPickup() {
        NetworkSpentPaServiceHeliPickup(undefined, undefined, undefined, undefined);
    }
    money.networkSpentPaHeliPickup = networkSpentPaHeliPickup;
    /**
     * No comment provided
     *
     * Hash: 0xB49ECA122467D05F | Since: 757
     */
    function networkSpentPaServiceDancer() {
        NetworkSpentPaServiceDancer(undefined, undefined, undefined, undefined);
    }
    money.networkSpentPaServiceDancer = networkSpentPaServiceDancer;
    /**
     * No comment provided
     *
     * Hash: 0x112209CE0290C03A | Since: 757
     */
    function networkSpentPaServiceHeli() {
        Citizen.invokeNative('0x112209CE0290C03A', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPaServiceHeli = networkSpentPaServiceHeli;
    /**
     * No comment provided
     *
     * Hash: 0xE23ADC6FCB1F29AE | Since: 757
     */
    function networkSpentPaServiceImpound() {
        Citizen.invokeNative('0xE23ADC6FCB1F29AE', undefined, undefined, undefined);
    }
    money.networkSpentPaServiceImpound = networkSpentPaServiceImpound;
    /**
     * No comment provided
     *
     * Hash: 0x0D30EB83668E63C5 | Since: 757
     */
    function networkSpentPaServiceSnack() {
        Citizen.invokeNative('0x0D30EB83668E63C5', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPaServiceSnack = networkSpentPaServiceSnack;
    /**
     * No comment provided
     *
     * Hash: 0xED5FD7AF10F5E262 | Since: 757
     */
    function networkSpentPaServiceVehicle() {
        Citizen.invokeNative('0xED5FD7AF10F5E262', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPaServiceVehicle = networkSpentPaServiceVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x7C99101F7FCE2EE5 | Since: 323
     */
    function networkSpentPlayerHealthcare() {
        NetworkSpentPlayerHealthcare(0, 0, false, false);
    }
    money.networkSpentPlayerHealthcare = networkSpentPlayerHealthcare;
    /**
     * No comment provided
     *
     * Hash: 0xB21B89501CFAC79E | Since: 323
     */
    function networkSpentProstitutes() {
        NetworkSpentProstitutes(undefined, false, false);
    }
    money.networkSpentProstitutes = networkSpentProstitutes;
    /**
     * No comment provided
     *
     * Hash: 0x6FD97159FE3C971A | Since: 877
     */
    function networkSpentPurchaseBusinessProperty() {
        Citizen.invokeNative('0x6FD97159FE3C971A', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseBusinessProperty = networkSpentPurchaseBusinessProperty;
    /**
     * No comment provided
     *
     * Hash: 0x998E18CEB44487FC | Since: 877
     */
    function networkSpentPurchaseClubHouse() {
        Citizen.invokeNative('0x998E18CEB44487FC', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseClubHouse = networkSpentPurchaseClubHouse;
    /**
     * No comment provided
     *
     * Hash: 0x2A93C46AAB1EACC9 | Since: 1493
     */
    function networkSpentPurchaseHackerTruck() {
        Citizen.invokeNative('0x2A93C46AAB1EACC9', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseHackerTruck = networkSpentPurchaseHackerTruck;
    /**
     * No comment provided
     *
     * Hash: 0xCCB339CC970452DA | Since: 1180
     */
    function networkSpentPurchaseHangar() {
        NetworkSpentPurchaseHangar(undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseHangar = networkSpentPurchaseHangar;
    /**
     * No comment provided
     *
     * Hash: 0x33981D6804E62F49 | Since: 944
     */
    function networkSpentPurchaseImpexpWarehouseProperty(amount) {
        return NetworkSpentPurchaseWarehouse(amount, false, false);
    }
    money.networkSpentPurchaseImpexpWarehouseProperty = networkSpentPurchaseImpexpWarehouseProperty;
    /**
     * No comment provided
     *
     * Hash: 0xED76D195E6E3BF7F | Since: 1493
     */
    function networkSpentPurchaseNightclubAndWarehouse() {
        Citizen.invokeNative('0xED76D195E6E3BF7F', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseNightclubAndWarehouse = networkSpentPurchaseNightclubAndWarehouse;
    /**
     * No comment provided
     *
     * Hash: 0xB4C2EC463672474E | Since: 944
     */
    function networkSpentPurchaseOfficeGarage() {
        Citizen.invokeNative('0xB4C2EC463672474E', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseOfficeGarage = networkSpentPurchaseOfficeGarage;
    /**
     * No comment provided
     *
     * Hash: 0x69EF772B192614C1 | Since: 757
     */
    function networkSpentPurchaseOfficeProperty() {
        Citizen.invokeNative('0x69EF772B192614C1', undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseOfficeProperty = networkSpentPurchaseOfficeProperty;
    /**
     * No comment provided
     *
     * Hash: 0xBD0EFB25CCA8F97A | Since: 757
     */
    function networkSpentPurchaseWarehouseProperty() {
        Citizen.invokeNative('0xBD0EFB25CCA8F97A', undefined, undefined, undefined, undefined);
    }
    money.networkSpentPurchaseWarehouseProperty = networkSpentPurchaseWarehouseProperty;
    /**
     * No comment provided
     *
     * Hash: 0xE284D46FFDB82E36 | Since: 1493
     */
    function networkSpentRdrHatchetBonus(amount) {
        NetworkSpentRdrhatchetBonus(amount, false, false);
    }
    money.networkSpentRdrHatchetBonus = networkSpentRdrHatchetBonus;
    /**
     * No comment provided
     *
     * Hash: 0xF6C8A544E4CF14FC | Since: 1493
     */
    function networkSpentRehireDj(amount) {
        NetworkSpentRehireDj(amount, undefined, false, false);
    }
    money.networkSpentRehireDj = networkSpentRehireDj;
    /**
     * No comment provided
     *
     * Hash: 0xFC4EE00A7B3BFB76 | Since: 573
     */
    function networkSpentRenameOrganization() {
        NetworkSpentRenameOrganization(undefined, undefined, undefined, undefined);
    }
    money.networkSpentRenameOrganization = networkSpentRenameOrganization;
    /**
     * No comment provided
     *
     * Hash: 0x9D26502BB97BFE62 | Since: 323
     */
    function networkSpentRequestHeist() {
        NetworkSpentRequestHeist(undefined, false, false, undefined);
    }
    money.networkSpentRequestHeist = networkSpentRequestHeist;
    /**
     * No comment provided
     *
     * Hash: 0x8204DA7934DF3155 | Since: 323
     */
    function networkSpentRequestJob() {
        NetworkSpentRequestJob(undefined, false, false, undefined);
    }
    money.networkSpentRequestJob = networkSpentRequestJob;
    /**
     * No comment provided
     *
     * Hash: 0x995A65F15F581359 | Since: 323
     */
    function networkSpentRobbedByMugger(amount) {
        NetworkSpentRobbedByMugger(amount, false, false, undefined);
    }
    money.networkSpentRobbedByMugger = networkSpentRobbedByMugger;
    /**
     * No comment provided
     *
     * Hash: 0x17C3A7D31EAE39F9 | Since: 323
     */
    function networkSpentTaxi(amount) {
        NetworkSpentTaxi(amount, false, false, undefined, undefined);
    }
    money.networkSpentTaxi = networkSpentTaxi;
    /**
     * No comment provided
     *
     * Hash: 0x7FE61782AD94CC09 | Since: 323
     */
    function networkSpentTelescope() {
        NetworkSpentTelescope(undefined, false, false);
    }
    money.networkSpentTelescope = networkSpentTelescope;
    /**
     * No comment provided
     *
     * Hash: 0xA51B086B0B2C0F7A | Since: 877
     */
    function networkSpentTradeBusinessProperty() {
        Citizen.invokeNative('0xA51B086B0B2C0F7A', undefined, undefined, undefined, undefined);
    }
    money.networkSpentTradeBusinessProperty = networkSpentTradeBusinessProperty;
    /**
     * No comment provided
     *
     * Hash: 0x2FAB6614CE22E196 | Since: 944
     */
    function networkSpentTradeImpexpWarehouseProperty() {
        Citizen.invokeNative('0x2FAB6614CE22E196', undefined, undefined, undefined, undefined);
    }
    money.networkSpentTradeImpexpWarehouseProperty = networkSpentTradeImpexpWarehouseProperty;
    /**
     * No comment provided
     *
     * Hash: 0x3DD3F33A5D55EA6F | Since: 1290
     */
    function networkSpentUpgradeBase() {
        NetworkSpentUpgradeBase(undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeBase = networkSpentUpgradeBase;
    /**
     * No comment provided
     *
     * Hash: 0x675D19C6067CAE08 | Since: 877
     */
    function networkSpentUpgradeBusinessProperty() {
        Citizen.invokeNative('0x675D19C6067CAE08', undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeBusinessProperty = networkSpentUpgradeBusinessProperty;
    /**
     * No comment provided
     *
     * Hash: 0xFA07759E6FDDD7CF | Since: 877
     */
    function networkSpentUpgradeClubHouse() {
        Citizen.invokeNative('0xFA07759E6FDDD7CF', undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeClubHouse = networkSpentUpgradeClubHouse;
    /**
     * No comment provided
     *
     * Hash: 0x226C284C830D0CA8 | Since: 1493
     */
    function networkSpentUpgradeHackerTruck() {
        Citizen.invokeNative('0x226C284C830D0CA8', undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeHackerTruck = networkSpentUpgradeHackerTruck;
    /**
     * No comment provided
     *
     * Hash: 0x615EB504B0788DAF | Since: 1180
     */
    function networkSpentUpgradeHangar() {
        NetworkSpentUpgradeHangar(undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeHangar = networkSpentUpgradeHangar;
    /**
     * No comment provided
     *
     * Hash: 0x4128464231E3CA0B | Since: 944
     */
    function networkSpentUpgradeImpexpWarehouseProperty() {
        Citizen.invokeNative('0x4128464231E3CA0B', undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeImpexpWarehouseProperty = networkSpentUpgradeImpexpWarehouseProperty;
    /**
     * No comment provided
     *
     * Hash: 0x1DC9B749E7AE282B | Since: 1493
     */
    function networkSpentUpgradeNightclubAndWarehouse() {
        Citizen.invokeNative('0x1DC9B749E7AE282B', undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeNightclubAndWarehouse = networkSpentUpgradeNightclubAndWarehouse;
    /**
     * No comment provided
     *
     * Hash: 0x2AFC2D19B50797F2 | Since: 944
     */
    function networkSpentUpgradeOfficeGarage() {
        Citizen.invokeNative('0x2AFC2D19B50797F2', undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeOfficeGarage = networkSpentUpgradeOfficeGarage;
    /**
     * No comment provided
     *
     * Hash: 0x8E243837643D9583 | Since: 757
     */
    function networkSpentUpgradeOfficeProperty() {
        Citizen.invokeNative('0x8E243837643D9583', undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeOfficeProperty = networkSpentUpgradeOfficeProperty;
    /**
     * No comment provided
     *
     * Hash: 0x165E135D6DFA2907 | Since: 1290
     */
    function networkSpentUpgradeTiltrotor() {
        NetworkSpentUpgradeTiltrotor(undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeTiltrotor = networkSpentUpgradeTiltrotor;
    /**
     * No comment provided
     *
     * Hash: 0x365E877C61D6988B | Since: 1103
     */
    function networkSpentUpgradeTruck() {
        NetworkSpentUpgradeTruck(undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeTruck = networkSpentUpgradeTruck;
    /**
     * No comment provided
     *
     * Hash: 0xA95F667A755725DA | Since: 757
     */
    function networkSpentUpgradeWarehouseProperty() {
        Citizen.invokeNative('0xA95F667A755725DA', undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpgradeWarehouseProperty = networkSpentUpgradeWarehouseProperty;
    /**
     * No comment provided
     *
     * Hash: 0x0C82D21A77C22D49 | Since: 1103
     */
    function networkSpentUpradeBunker() {
        NetworkSpentUpgradeBunker(undefined, undefined, undefined, undefined);
    }
    money.networkSpentUpradeBunker = networkSpentUpradeBunker;
    /**
     * No comment provided
     *
     * Hash: 0xA75CCF58A60A5FD1 | Since: 944
     */
    function networkSpentVehicleExportMods() {
        NetworkSpentVehicleExportMods(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    money.networkSpentVehicleExportMods = networkSpentVehicleExportMods;
    /**
     * No comment provided
     *
     * Hash: 0xD99DB210089617FE | Since: 573
     */
    function networkSpentWager(amount) {
        NetworkSpentWager(undefined, undefined, amount);
    }
    money.networkSpentWager = networkSpentWager;
    /**
     * No comment provided
     *
     * Hash: 0x59498BC8B1C8B15C | Since: 2699
     */
    function networkYohanSourceGoods() {
        NetworkEarnFromBusinessHubSource(undefined, undefined, undefined, undefined);
    }
    money.networkYohanSourceGoods = networkYohanSourceGoods;
    /**
     * This isn't a hash collision.
     *
     * Hash: 0x20194D48EAEC9A41 | Since: 323
     */
    function processCashGift() {
        return ProcessCashGift(undefined);
    }
    money.processCashGift = processCashGift;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0x6FCF8DDEA146C45B | Since: 323
     */
    function wasVcWithdrawalSuccessful() {
        return Citizen.invokeNative('0x6FCF8DDEA146C45B', undefined);
    }
    money.wasVcWithdrawalSuccessful = wasVcWithdrawalSuccessful;
    /**
     * Does nothing and always returns 0.
     *
     * Hash: 0xF70EFA14FE091429 | Since: 323
     */
    function withdrawVc(amount) {
        return WithdrawVc(amount);
    }
    money.withdrawVc = withdrawVc;
    /**
     * No comment provided
     *
     * Hash: 0xE03B9F95556E48E9 | Since: 3095
     */
    function networkClearTransactionTelemetryNonce() {
        Citizen.invokeNative('0xE03B9F95556E48E9');
    }
    money.networkClearTransactionTelemetryNonce = networkClearTransactionTelemetryNonce;
    /**
     * Used for SERVICE_EARN_AVENGER_OPERATIONS & SERVICE_EARN_AVENGER_OPS_BONUS
     *
     * Hash: 0x55F006B9D4A46C1D | Since: 2944
     */
    function networkEarnAvenger(amount) {
        Citizen.invokeNative('0x55F006B9D4A46C1D', amount, 0);
    }
    money.networkEarnAvenger = networkEarnAvenger;
    /**
     * No comment provided
     *
     * Hash: 0xD1A8165767AD2D23 | Since: 2802
     */
    function networkEarnAwardAcidLab() {
        Citizen.invokeNative('0xD1A8165767AD2D23', undefined, undefined);
    }
    money.networkEarnAwardAcidLab = networkEarnAwardAcidLab;
    /**
     * No comment provided
     *
     * Hash: 0xC30650FA74A19D02 | Since: 2802
     */
    function networkEarnAwardDailyStash() {
        Citizen.invokeNative('0xC30650FA74A19D02', undefined, undefined);
    }
    money.networkEarnAwardDailyStash = networkEarnAwardDailyStash;
    /**
     * No comment provided
     *
     * Hash: 0xD01EBAEA1F905EF6 | Since: 2802
     */
    function networkEarnAwardDeadDrop() {
        Citizen.invokeNative('0xD01EBAEA1F905EF6', undefined, undefined);
    }
    money.networkEarnAwardDeadDrop = networkEarnAwardDeadDrop;
    /**
     * No comment provided
     *
     * Hash: 0xDDF047577F1A02A7 | Since: 2802
     */
    function networkEarnAwardJuggaloMission() {
        Citizen.invokeNative('0xDDF047577F1A02A7', undefined, undefined);
    }
    money.networkEarnAwardJuggaloMission = networkEarnAwardJuggaloMission;
    /**
     * No comment provided
     *
     * Hash: 0xBEAFBB1B98B7EF55 | Since: 2802
     */
    function networkEarnAwardRandomEvent() {
        Citizen.invokeNative('0xBEAFBB1B98B7EF55', undefined, undefined);
    }
    money.networkEarnAwardRandomEvent = networkEarnAwardRandomEvent;
    /**
     * No comment provided
     *
     * Hash: 0xA914768AD35CD3A5 | Since: 2802
     */
    function networkEarnAwardTaxi() {
        Citizen.invokeNative('0xA914768AD35CD3A5', undefined, undefined);
    }
    money.networkEarnAwardTaxi = networkEarnAwardTaxi;
    /**
     * No comment provided
     *
     * Hash: 0xDCEF983C24191997 | Since: 2944
     */
    function networkEarnBonusObjective(amount) {
        Citizen.invokeNative('0xDCEF983C24191997', amount, undefined, undefined);
    }
    money.networkEarnBonusObjective = networkEarnBonusObjective;
    /**
     * No comment provided
     *
     * Hash: 0xCABC9874AFA70D6D | Since: 2802
     */
    function networkEarnDailyStashHouseCompleted() {
        Citizen.invokeNative('0xCABC9874AFA70D6D', undefined, undefined);
    }
    money.networkEarnDailyStashHouseCompleted = networkEarnDailyStashHouseCompleted;
    /**
     * No comment provided
     *
     * Hash: 0x9C0C6BD0F94CE391 | Since: 2802
     */
    function networkEarnDailyStashHouseParticipation() {
        Citizen.invokeNative('0x9C0C6BD0F94CE391', undefined, undefined);
    }
    money.networkEarnDailyStashHouseParticipation = networkEarnDailyStashHouseParticipation;
    /**
     * JUGGALO_PHONE_MISSION...
     *
     * Hash: 0xCE4452AE85F5E252 | Since: 2802
     */
    function networkEarnFooliganJob() {
        Citizen.invokeNative('0xCE4452AE85F5E252', undefined, undefined);
    }
    money.networkEarnFooliganJob = networkEarnFooliganJob;
    /**
     * JUGGALO_PHONE_MISSION_PARTICIPATION...
     *
     * Hash: 0xC376B92D0E060970 | Since: 2802
     */
    function networkEarnFooliganJobParticipation() {
        Citizen.invokeNative('0xC376B92D0E060970', undefined, undefined);
    }
    money.networkEarnFooliganJobParticipation = networkEarnFooliganJobParticipation;
    /**
     * _NETWORK_EARN_G*
     *
     * Hash: 0xBF7B5BB7ED890380 | Since: 3095
     */
    function networkEarnGeneric(amount, earn) {
        if (typeof earn === 'string')
            earn = misc.getHashKey(earn);
        return Citizen.invokeNative('0xBF7B5BB7ED890380', amount, earn, undefined, undefined);
    }
    money.networkEarnGeneric = networkEarnGeneric;
    /**
     * No comment provided
     *
     * Hash: 0xE01D10BA8CD53621 | Since: 2802
     */
    function networkEarnJuggaloStoryMission() {
        Citizen.invokeNative('0xE01D10BA8CD53621', undefined, undefined);
    }
    money.networkEarnJuggaloStoryMission = networkEarnJuggaloStoryMission;
    /**
     * No comment provided
     *
     * Hash: 0x40FF6CCCC476185C | Since: 2802
     */
    function networkEarnJuggaloStoryMissionParticipation() {
        Citizen.invokeNative('0x40FF6CCCC476185C', undefined, undefined);
    }
    money.networkEarnJuggaloStoryMissionParticipation = networkEarnJuggaloStoryMissionParticipation;
    /**
     * No comment provided
     *
     * Hash: 0xF8332B06F0EECC9C | Since: 2944
     */
    function networkEarnProgressHub() {
        Citizen.invokeNative('0xF8332B06F0EECC9C', undefined, undefined);
    }
    money.networkEarnProgressHub = networkEarnProgressHub;
    /**
     * No comment provided
     *
     * Hash: 0x79B656937DF6DF5D | Since: 2802
     */
    function networkEarnSellAcid() {
        Citizen.invokeNative('0x79B656937DF6DF5D', undefined, undefined);
    }
    money.networkEarnSellAcid = networkEarnSellAcid;
    /**
     * No comment provided
     *
     * Hash: 0xCA3EF9B09A8D76B4 | Since: 2802
     */
    function networkEarnSellParticipationAcidLab() {
        Citizen.invokeNative('0xCA3EF9B09A8D76B4', undefined, undefined);
    }
    money.networkEarnSellParticipationAcidLab = networkEarnSellParticipationAcidLab;
    /**
     * No comment provided
     *
     * Hash: 0xE3942D59E8A7F70D | Since: 2802
     */
    function networkEarnSetupParticipationAcidLab() {
        Citizen.invokeNative('0xE3942D59E8A7F70D', undefined, undefined);
    }
    money.networkEarnSetupParticipationAcidLab = networkEarnSetupParticipationAcidLab;
    /**
     * No comment provided
     *
     * Hash: 0xDEA273D5F8A9661A | Since: 2944
     */
    function networkEarnSmugglerOps() {
        Citizen.invokeNative('0xDEA273D5F8A9661A', undefined, undefined, undefined);
    }
    money.networkEarnSmugglerOps = networkEarnSmugglerOps;
    /**
     * No comment provided
     *
     * Hash: 0x136F11B5DF1B304D | Since: 2802
     */
    function networkEarnSourceParticipationAcidLab() {
        Citizen.invokeNative('0x136F11B5DF1B304D', undefined, undefined);
    }
    money.networkEarnSourceParticipationAcidLab = networkEarnSourceParticipationAcidLab;
    /**
     * No comment provided
     *
     * Hash: 0xA81017EE1324FDFE | Since: 2802
     */
    function networkEarnStreetDealer() {
        Citizen.invokeNative('0xA81017EE1324FDFE', undefined, undefined);
    }
    money.networkEarnStreetDealer = networkEarnStreetDealer;
    /**
     * No comment provided
     *
     * Hash: 0x991E1588FAD9019D | Since: 2802
     */
    function networkEarnTaxiJob() {
        Citizen.invokeNative('0x991E1588FAD9019D', undefined, undefined);
    }
    money.networkEarnTaxiJob = networkEarnTaxiJob;
    /**
     * No comment provided
     *
     * Hash: 0xF1E26A7924327152 | Since: 2802
     */
    function networkSpendBuyAcidLab() {
        Citizen.invokeNative('0xF1E26A7924327152', undefined, undefined, undefined, undefined);
    }
    money.networkSpendBuyAcidLab = networkSpendBuyAcidLab;
    /**
     * No comment provided
     *
     * Hash: 0xA2ED36DCF0FCA413 | Since: 2802
     */
    function networkSpendBuyMfgarage() {
        Citizen.invokeNative('0xA2ED36DCF0FCA413', undefined, undefined, undefined, undefined);
    }
    money.networkSpendBuyMfgarage = networkSpendBuyMfgarage;
    /**
     * No comment provided
     *
     * Hash: 0xB48185C0CA67B16B | Since: 2802
     */
    function networkSpendBuySupplies() {
        Citizen.invokeNative('0xB48185C0CA67B16B', 0, false, false, 0);
    }
    money.networkSpendBuySupplies = networkSpendBuySupplies;
    /**
     * No comment provided
     *
     * Hash: 0x842B1C5AF61ACDE9 | Since: 2802
     */
    function networkSpendRenameAcidLab() {
        Citizen.invokeNative('0x842B1C5AF61ACDE9', undefined, undefined, undefined, undefined);
    }
    money.networkSpendRenameAcidLab = networkSpendRenameAcidLab;
    /**
     * No comment provided
     *
     * Hash: 0x446798F7495DD7D8 | Since: 2802
     */
    function networkSpendRenameAcidProduct() {
        Citizen.invokeNative('0x446798F7495DD7D8', undefined, undefined, undefined, undefined);
    }
    money.networkSpendRenameAcidProduct = networkSpendRenameAcidProduct;
    /**
     * No comment provided
     *
     * Hash: 0xA7D541C9ACD63133 | Since: 2802
     */
    function networkSpendUpgradeAcidLabArmor() {
        Citizen.invokeNative('0xA7D541C9ACD63133', 0, false, false, 0);
    }
    money.networkSpendUpgradeAcidLabArmor = networkSpendUpgradeAcidLabArmor;
    /**
     * No comment provided
     *
     * Hash: 0x110EE9D486C23126 | Since: 2802
     */
    function networkSpendUpgradeAcidLabEquipment() {
        Citizen.invokeNative('0x110EE9D486C23126', undefined, undefined, undefined, undefined);
    }
    money.networkSpendUpgradeAcidLabEquipment = networkSpendUpgradeAcidLabEquipment;
    /**
     * No comment provided
     *
     * Hash: 0x4B99AB08C92C54E4 | Since: 2802
     */
    function networkSpendUpgradeAcidLabMines() {
        Citizen.invokeNative('0x4B99AB08C92C54E4', 0, false, false, 0);
    }
    money.networkSpendUpgradeAcidLabMines = networkSpendUpgradeAcidLabMines;
    /**
     * No comment provided
     *
     * Hash: 0x2940558E05BCC2EC | Since: 2802
     */
    function networkSpendUpgradeAcidLabScoop() {
        Citizen.invokeNative('0x2940558E05BCC2EC', 0, false, false, 0);
    }
    money.networkSpendUpgradeAcidLabScoop = networkSpendUpgradeAcidLabScoop;
    /**
     * No comment provided
     *
     * Hash: 0xCF8F346DDDC66643 | Since: 2802
     */
    function networkSpendUpgradeMfgarage() {
        Citizen.invokeNative('0xCF8F346DDDC66643', undefined, undefined, undefined, undefined);
    }
    money.networkSpendUpgradeMfgarage = networkSpendUpgradeMfgarage;
    /**
     * No comment provided
     *
     * Hash: 0x8C7E8D6F96C9E948 | Since: 2944
     */
    function networkSpentAirFreight(hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot) {
        Citizen.invokeNative('0x8C7E8D6F96C9E948', hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot);
    }
    money.networkSpentAirFreight = networkSpentAirFreight;
    /**
     * No comment provided
     *
     * Hash: 0x2803B027479FB640 | Since: 3095
     */
    function networkSpentGeneric(price, stat, spent) {
        if (typeof stat === 'string')
            stat = misc.getHashKey(stat);
        if (typeof spent === 'string')
            spent = misc.getHashKey(spent);
        return Citizen.invokeNative('0x2803B027479FB640', price, false, false, stat, spent, undefined, undefined);
    }
    money.networkSpentGeneric = networkSpentGeneric;
    /**
     * Hash p3 = MISSILE_JAMMER
     *
     * Hash: 0xD687100F616163F4 | Since: 2944
     */
    function networkSpentMissileJammer(amount, fromBank, fromBankAndWallet, p3) {
        if (typeof p3 === 'string')
            p3 = misc.getHashKey(p3);
        Citizen.invokeNative('0xD687100F616163F4', amount, fromBank, fromBankAndWallet, p3);
    }
    money.networkSpentMissileJammer = networkSpentMissileJammer;
    /**
     * No comment provided
     *
     * Hash: 0xED1B407BADA42CEC | Since: 2944
     */
    function networkSpentSkipCargoSourceSetup(amount, fromBank, fromBankAndWallet, cost) {
        Citizen.invokeNative('0xED1B407BADA42CEC', amount, fromBank, fromBankAndWallet, cost);
    }
    money.networkSpentSkipCargoSourceSetup = networkSpentSkipCargoSourceSetup;
    /**
     * Hash p3 = STEALTH_MODULE
     *
     * Hash: 0x95CE79A6939C537A | Since: 2944
     */
    function networkSpentStealthModule(amount, fromBank, fromBankAndWallet, p3) {
        if (typeof p3 === 'string')
            p3 = misc.getHashKey(p3);
        Citizen.invokeNative('0x95CE79A6939C537A', amount, fromBank, fromBankAndWallet, p3);
    }
    money.networkSpentStealthModule = networkSpentStealthModule;
})(money || (money = {}));
export var netshopping;
(function (netshopping) {
    /**
     * No comment provided
     *
     * Hash: 0xF30980718C8ED876 | Since: 323
     */
    function netGameserverBasketAddItem(quantity) {
        return NetGameserverBasketAddItem(quantity);
    }
    netshopping.netGameserverBasketAddItem = netGameserverBasketAddItem;
    /**
     * No comment provided
     *
     * Hash: 0xE1A0450ED46A7812 | Since: 323
     */
    function netGameserverBasketApplyServerData() {
        return NetGameserverBasketApplyServerData(undefined);
    }
    netshopping.netGameserverBasketApplyServerData = netGameserverBasketApplyServerData;
    /**
     * No comment provided
     *
     * Hash: 0xFA336E7F40C0A0D0 | Since: 372
     */
    function netGameserverBasketEnd() {
        return NetGameserverBasketDelete();
    }
    netshopping.netGameserverBasketEnd = netGameserverBasketEnd;
    /**
     * No comment provided
     *
     * Hash: 0xA65568121DF2EA26 | Since: 323
     */
    function netGameserverBasketIsActive() {
        return NetGameserverBasketEnd();
    }
    netshopping.netGameserverBasketIsActive = netGameserverBasketIsActive;
    /**
     * No comment provided
     *
     * Hash: 0x27F76CC6C55AD30E | Since: 323
     */
    function netGameserverBasketIsFull() {
        return NetGameserverBasketIsFull();
    }
    netshopping.netGameserverBasketIsFull = netGameserverBasketIsFull;
    /**
     * No comment provided
     *
     * Hash: 0x279F08B1A4B29B7E | Since: 323
     */
    function netGameserverBasketStart(categoryHash, actionHash, flags) {
        if (typeof categoryHash === 'string')
            categoryHash = misc.getHashKey(categoryHash);
        if (typeof actionHash === 'string')
            actionHash = misc.getHashKey(actionHash);
        return NetGameserverBasketStart(categoryHash, actionHash, flags);
    }
    netshopping.netGameserverBasketStart = netGameserverBasketStart;
    /**
     * No comment provided
     *
     * Hash: 0x3C5FD37B5499582E | Since: 323
     */
    function netGameserverBeginService(categoryHash, itemHash, actionTypeHash, value, flags) {
        if (typeof categoryHash === 'string')
            categoryHash = misc.getHashKey(categoryHash);
        if (typeof itemHash === 'string')
            itemHash = misc.getHashKey(itemHash);
        if (typeof actionTypeHash === 'string')
            actionTypeHash = misc.getHashKey(actionTypeHash);
        return NetGameserverBeginService(categoryHash, itemHash, actionTypeHash, value, flags);
    }
    netshopping.netGameserverBeginService = netGameserverBeginService;
    /**
     * No comment provided
     *
     * Hash: 0x3C4487461E9B0DCB | Since: 323
     */
    function netGameserverCatalogIsValid() {
        return NetGameserverCatalogIsReady();
    }
    netshopping.netGameserverCatalogIsValid = netGameserverCatalogIsValid;
    /**
     * No comment provided
     *
     * Hash: 0xBD4D7EAF8A30F637 | Since: 323
     */
    function netGameserverCatalogItemIsValid(name) {
        return NetGameserverCatalogItemExists(name);
    }
    netshopping.netGameserverCatalogItemIsValid = netGameserverCatalogItemIsValid;
    /**
     * No comment provided
     *
     * Hash: 0x247F0F73A182EA0B | Since: 323
     */
    function netGameserverCatalogItemKeyIsValid(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        return NetGameserverCatalogItemExistsHash(hash);
    }
    netshopping.netGameserverCatalogItemKeyIsValid = netGameserverCatalogItemKeyIsValid;
    /**
     * No comment provided
     *
     * Hash: 0x4B64CD6D18474126 | Since: 3570
     */
    function netGameserverCheckoutPending(transactionId) {
        return Citizen.invokeNative('0x4B64CD6D18474126', transactionId);
    }
    netshopping.netGameserverCheckoutPending = netGameserverCheckoutPending;
    /**
     * No comment provided
     *
     * Hash: 0x39BE7CEA8D9CC8E6 | Since: 323
     */
    function netGameserverCheckoutStart(transactionId) {
        return NetGameserverCheckoutStart(transactionId);
    }
    netshopping.netGameserverCheckoutStart = netGameserverCheckoutStart;
    /**
     * No comment provided
     *
     * Hash: 0x74A0FD0688F1EE45 | Since: 323
     */
    function netGameserverClearSession() {
        return Citizen.invokeNative('0x74A0FD0688F1EE45', 0);
    }
    netshopping.netGameserverClearSession = netGameserverClearSession;
    /**
     * No comment provided
     *
     * Hash: 0x51F1A8E48C3D2F6D | Since: 323
     */
    function netGameserverDeleteCharacter(slot, transfer, reason) {
        if (typeof reason === 'string')
            reason = misc.getHashKey(reason);
        return NetGameserverDeleteCharacterSlot(slot, transfer, reason);
    }
    netshopping.netGameserverDeleteCharacter = netGameserverDeleteCharacter;
    /**
     * No comment provided
     *
     * Hash: 0x0A6D923DFFC9BD89 | Since: 323
     */
    function netGameserverDeleteCharacterGetStatus() {
        return NetGameserverDeleteCharacterSlotGetStatus();
    }
    netshopping.netGameserverDeleteCharacterGetStatus = netGameserverDeleteCharacterGetStatus;
    /**
     * No comment provided
     *
     * Hash: 0x112CEF1615A1139F | Since: 323
     */
    function netGameserverDeleteSetTelemetryNonceSeed() {
        return NetGameserverDeleteSetTelemetryNonceSeed();
    }
    netshopping.netGameserverDeleteSetTelemetryNonceSeed = netGameserverDeleteSetTelemetryNonceSeed;
    /**
     * No comment provided
     *
     * Hash: 0xE2A99A9B524BEFFF | Since: 323
     */
    function netGameserverEndService(transactionId) {
        return NetGameserverEndService(transactionId);
    }
    netshopping.netGameserverEndService = netGameserverEndService;
    /**
     * No comment provided
     *
     * Hash: 0x85F6C9ABA1DE2BCF | Since: 323
     */
    function netGameserverGetCatalogCloudCrc() {
        return Citizen.invokeNative('0x85F6C9ABA1DE2BCF');
    }
    netshopping.netGameserverGetCatalogCloudCrc = netGameserverGetCatalogCloudCrc;
    /**
     * bool is always true in game scripts
     *
     * Hash: 0xC27009422FCCA88D | Since: 323
     */
    function netGameserverGetPrice(itemHash, categoryHash) {
        if (typeof itemHash === 'string')
            itemHash = misc.getHashKey(itemHash);
        if (typeof categoryHash === 'string')
            categoryHash = misc.getHashKey(categoryHash);
        return NetGameserverGetPrice(itemHash, categoryHash, false);
    }
    netshopping.netGameserverGetPrice = netGameserverGetPrice;
    /**
     * No comment provided
     *
     * Hash: 0x897433D292B44130 | Since: 323
     */
    function netGameserverGetSessionStateAndStatus() {
        return NetGameserverGetTransactionManagerData();
    }
    netshopping.netGameserverGetSessionStateAndStatus = netGameserverGetSessionStateAndStatus;
    /**
     * No comment provided
     *
     * Hash: 0xE3E5A7C64CA2C6ED | Since: 323
     */
    function netGameserverInitSession() {
        return Citizen.invokeNative('0xE3E5A7C64CA2C6ED');
    }
    netshopping.netGameserverInitSession = netGameserverInitSession;
    /**
     * No comment provided
     *
     * Hash: 0x2B949A1E6AEC8F6A | Since: 323
     */
    function netGameserverIsCatalogCurrent() {
        return NetGameserverIsCatalogValid();
    }
    netshopping.netGameserverIsCatalogCurrent = netGameserverIsCatalogCurrent;
    /**
     * No comment provided
     *
     * Hash: 0x810E8431C0614BF9 | Since: 323
     */
    function netGameserverIsSessionRefreshPending() {
        return NetGameserverIsSessionRefreshPending();
    }
    netshopping.netGameserverIsSessionRefreshPending = netGameserverIsSessionRefreshPending;
    /**
     * No comment provided
     *
     * Hash: 0xB24F0944DA203D9E | Since: 323
     */
    function netGameserverIsSessionValid(charSlot) {
        return NetGameserverIsSessionValid(charSlot);
    }
    netshopping.netGameserverIsSessionValid = netGameserverIsSessionValid;
    /**
     * No comment provided
     *
     * Hash: 0x357B152EF96C30B6 | Since: 323
     */
    function netGameserverRefreshServerCatalog() {
        return Citizen.invokeNative('0x357B152EF96C30B6');
    }
    netshopping.netGameserverRefreshServerCatalog = netGameserverRefreshServerCatalog;
    /**
     * No comment provided
     *
     * Hash: 0xCF38DAFBB49EDE5E | Since: 323
     */
    function netGameserverRetrieveCatalogRefreshStatus() {
        return NetGameserverGetCatalogState();
    }
    netshopping.netGameserverRetrieveCatalogRefreshStatus = netGameserverRetrieveCatalogRefreshStatus;
    /**
     * No comment provided
     *
     * Hash: 0x0395CB47B022E62C | Since: 323
     */
    function netGameserverRetrieveInitSessionStatus() {
        return Citizen.invokeNative('0x0395CB47B022E62C');
    }
    netshopping.netGameserverRetrieveInitSessionStatus = netGameserverRetrieveInitSessionStatus;
    /**
     * No comment provided
     *
     * Hash: 0xC13C38E47EA5DF31 | Since: 323
     */
    function netGameserverRetrieveSessionErrorCode() {
        return Citizen.invokeNative('0xC13C38E47EA5DF31');
    }
    netshopping.netGameserverRetrieveSessionErrorCode = netGameserverRetrieveSessionErrorCode;
    /**
     * No comment provided
     *
     * Hash: 0x170910093218C8B9 | Since: 323
     */
    function netGameserverRetrieveStartSessionStatus() {
        return Citizen.invokeNative('0x170910093218C8B9');
    }
    netshopping.netGameserverRetrieveStartSessionStatus = netGameserverRetrieveStartSessionStatus;
    /**
     * No comment provided
     *
     * Hash: 0x2F41D51BA3BCD1F1 | Since: 323
     */
    function netGameserverSessionApplyReceivedData(charSlot) {
        return NetGameserverSessionApplyReceivedData(charSlot);
    }
    netshopping.netGameserverSessionApplyReceivedData = netGameserverSessionApplyReceivedData;
    /**
     * No comment provided
     *
     * Hash: 0x9507D4271988E1AE | Since: 323
     */
    function netGameserverSetTelemetryNonceSeed() {
        return NetGameserverSetTelemetryNonceSeed(0);
    }
    netshopping.netGameserverSetTelemetryNonceSeed = netGameserverSetTelemetryNonceSeed;
    /**
     * No comment provided
     *
     * Hash: 0xA135AC892A58FC07 | Since: 323
     */
    function netGameserverStartSession(charSlot) {
        return NetGameserverStartSession(charSlot);
    }
    netshopping.netGameserverStartSession = netGameserverStartSession;
    /**
     * No comment provided
     *
     * Hash: 0x72EB7BA9B69BF6AB | Since: 323
     */
    function netGameserverStartSessionPending() {
        return Citizen.invokeNative('0x72EB7BA9B69BF6AB');
    }
    netshopping.netGameserverStartSessionPending = netGameserverStartSessionPending;
    /**
     * Note: only one of the arguments can be set to true at a time
     *
     * Hash: 0x35A1B3E1D1315CFA | Since: 323
     */
    function netGameserverStartSessionRestart(inventory, playerbalance) {
        return NetGameserverGetBalance(inventory, playerbalance);
    }
    netshopping.netGameserverStartSessionRestart = netGameserverStartSessionRestart;
    /**
     * No comment provided
     *
     * Hash: 0x613F125BA3BD2EB9 | Since: 372
     */
    function netGameserverTransactionInProgress() {
        return Citizen.invokeNative('0x613F125BA3BD2EB9');
    }
    netshopping.netGameserverTransactionInProgress = netGameserverTransactionInProgress;
    /**
     * No comment provided
     *
     * Hash: 0xD47A2C1BA117471D | Since: 323
     */
    function netGameserverTransferBankToWallet(charSlot, amount) {
        return NetGameserverTransferBankToWallet(charSlot, amount);
    }
    netshopping.netGameserverTransferBankToWallet = netGameserverTransferBankToWallet;
    /**
     * Same as 0x350AA5EBC03D3BD2
     *
     * Hash: 0x23789E777D14CE44 | Since: 323
     */
    function netGameserverTransferBankToWalletGetStatus() {
        return NetGameserverTransferCashGetStatus();
    }
    netshopping.netGameserverTransferBankToWalletGetStatus = netGameserverTransferBankToWalletGetStatus;
    /**
     * Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
     *
     * Hash: 0x498C1E05CE5F7877 | Since: 323
     */
    function netGameserverTransferCashSetTelemetryNonceSeed() {
        return NetGameserverTransferCashSetTelemetryNonceSeed();
    }
    netshopping.netGameserverTransferCashSetTelemetryNonceSeed = netGameserverTransferCashSetTelemetryNonceSeed;
    /**
     * No comment provided
     *
     * Hash: 0xC2F7FE5309181C7D | Since: 323
     */
    function netGameserverTransferWalletToBank(charSlot, amount) {
        return NetGameserverTransferWalletToBank(charSlot, amount);
    }
    netshopping.netGameserverTransferWalletToBank = netGameserverTransferWalletToBank;
    /**
     * Same as 0x23789E777D14CE44
     *
     * Hash: 0x350AA5EBC03D3BD2 | Since: 323
     */
    function netGameserverTransferWalletToBankGetStatus() {
        return NetGameserverTransferCashGetStatus2();
    }
    netshopping.netGameserverTransferWalletToBankGetStatus = netGameserverTransferWalletToBankGetStatus;
    /**
     * No comment provided
     *
     * Hash: 0x7D2708796355B20B | Since: 1290
     */
    function netGameserverUseServerTransactions() {
        return NetGameserverUseServerTransactions();
    }
    netshopping.netGameserverUseServerTransactions = netGameserverUseServerTransactions;
})(netshopping || (netshopping = {}));
export var pathfind;
(function (pathfind) {
    /**
     * No comment provided
     *
     * Hash: 0xFCD5C8E06E502F5A | Since: 323
     */
    function addNavmeshBlockingObject() {
        return AddNavmeshBlockingObject(0, 0, 0, 0, 0, 0, 0, false, undefined);
    }
    pathfind.addNavmeshBlockingObject = addNavmeshBlockingObject;
    /**
     * No comment provided
     *
     * Hash: 0x387EAD7EE42F6685 | Since: 323
     */
    function addNavmeshRequiredRegion(x, y, radius) {
        AddNavmeshRequiredRegion(x, y, radius);
    }
    pathfind.addNavmeshRequiredRegion = addNavmeshRequiredRegion;
    /**
     * No comment provided
     *
     * Hash: 0xAA76052DDA9BFC3E | Since: 323
     */
    function adjustAmbientPedSpawnDensitiesThisFrame() {
        Citizen.invokeNative('0xAA76052DDA9BFC3E', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    pathfind.adjustAmbientPedSpawnDensitiesThisFrame = adjustAmbientPedSpawnDensitiesThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x8415D95B194A3AEA | Since: 323
     */
    function areAllNavmeshRegionsLoaded() {
        return AreAllNavmeshRegionsLoaded();
    }
    pathfind.areAllNavmeshRegionsLoaded = areAllNavmeshRegionsLoaded;
    /**
     * No comment provided
     *
     * Hash: 0xF7B79A50B905A30D | Since: 323
     */
    function areNodesLoadedForArea(x1, y1, x2, y2) {
        return AreNodesLoadedForArea(x1, y1, x2, y2);
    }
    pathfind.areNodesLoadedForArea = areNodesLoadedForArea;
    /**
     * Calculates the travel distance between a set of points.
     *
     * Doesn't seem to correlate with distance on gps sometimes.
     * This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
     *
     * Hash: 0xADD95C7005C4A197 | Since: 323
     */
    function calculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2) {
        return CalculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
    }
    pathfind.calculateTravelDistanceBetweenPoints = calculateTravelDistanceBetweenPoints;
    /**
     * Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
     *
     * Hash: 0x2801D0012266DF07 | Since: 323
     */
    function clearGpsDisabledZoneAtIndex(index) {
        ClearGpsDisabledZoneAtIndex(index);
    }
    pathfind.clearGpsDisabledZoneAtIndex = clearGpsDisabledZoneAtIndex;
    /**
     * Set toggle true to disable navmesh.
     * Set toggle false to enable navmesh.
     *
     * Hash: 0x4C8872D8CDBE1B8B | Since: 323
     */
    function disableNavmeshInArea(x1, y1, z1, x2, y2, z2, toggle) {
        DisableNavmeshInArea(x1, y1, z1, x2, y2, z2, toggle);
    }
    pathfind.disableNavmeshInArea = disableNavmeshInArea;
    /**
     * No comment provided
     *
     * Hash: 0x0EAEB0DB4B132399 | Since: 323
     */
    function doesNavmeshBlockingObjectExist() {
        return DoesNavmeshBlockingObjectExist(undefined);
    }
    pathfind.doesNavmeshBlockingObjectExist = doesNavmeshBlockingObjectExist;
    /**
     * p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
     *
     * distToNxJunction seems to be the distance in metres * 10.0f
     *
     * direction:
     * 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
     * 1 = Route is being calculated or the player is going in the wrong direction
     * 2 = Please Proceed the Highlighted Route
     * 3 = In (distToNxJunction) Turn Left
     * 4 = In (distToNxJunction) Turn Right
     * 5 = In (distToNxJunction) Keep Straight
     * 6 = In (distToNxJunction) Turn Sharply To The Left
     * 7 = In (distToNxJunction) Turn Sharply To The Right
     * 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
     *
     * return value set to 0 always
     *
     * Hash: 0xF90125F1F79ECDF8 | Since: 323
     */
    function generateDirectionsToCoord(pos) {
        return GenerateDirectionsToCoord(pos.x, pos.y, pos.z, false);
    }
    pathfind.generateDirectionsToCoord = generateDirectionsToCoord;
    /**
     * Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
     *
     * Hash: 0x3599D741C9AC6310 | Since: 323
     */
    function getApproxFloorForArea(x1, y1, x2, y2) {
        return GetHeightmapBottomZForArea(x1, y1, x2, y2);
    }
    pathfind.getApproxFloorForArea = getApproxFloorForArea;
    /**
     * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
     *
     * Hash: 0x336511A34F2E5185 | Since: 323
     */
    function getApproxFloorForPoint(x, y) {
        return GetHeightmapBottomZForPosition(x, y);
    }
    pathfind.getApproxFloorForPoint = getApproxFloorForPoint;
    /**
     * Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
     *
     * Hash: 0x8ABE8608576D9CE3 | Since: 323
     */
    function getApproxHeightForArea(x1, y1, x2, y2) {
        return GetHeightmapTopZForArea(x1, y1, x2, y2);
    }
    pathfind.getApproxHeightForArea = getApproxHeightForArea;
    /**
     * Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
     *
     * Hash: 0x29C24BFBED8AB8FB | Since: 323
     */
    function getApproxHeightForPoint(x, y) {
        return GetHeightmapTopZForPosition(x, y);
    }
    pathfind.getApproxHeightForPoint = getApproxHeightForPoint;
    /**
     * Get the closest vehicle node to a given position.
     *
     * Hash: 0x2EABE3B06F58C1BE | Since: 323
     */
    function getClosestMajorVehicleNode(pos, unknown1, unknown2) {
        return GetClosestMajorVehicleNode(pos.x, pos.y, pos.z, unknown1, unknown2);
    }
    pathfind.getClosestMajorVehicleNode = getClosestMajorVehicleNode;
    /**
     * p1 seems to be always 1.0f in the scripts
     *
     * Hash: 0x132F52BBA570FE92 | Since: 323
     */
    function getClosestRoad(pos) {
        return GetClosestRoad(pos.x, pos.y, pos.z, 0, 0, false);
    }
    pathfind.getClosestRoad = getClosestRoad;
    /**
     * https://gtaforums.com/topic/843561-pathfind-node-types
     *
     * Hash: 0x240A18690AE96513 | Since: 323
     */
    function getClosestVehicleNode(pos, nodeFlags) {
        return GetClosestVehicleNode(pos.x, pos.y, pos.z, nodeFlags, 0, 0);
    }
    pathfind.getClosestVehicleNode = getClosestVehicleNode;
    /**
     * p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
     *
     * nodeType: 0 = main roads, 1 = any dry path, 3 = water
     * p6 is always 3.0
     * p7 is always 0
     *
     * gtaforums.com/topic/843561-pathfind-node-types
     *
     * Example of usage, moving vehicle to closest path/road:
     * `Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);`
     * Vector3 closestVehicleNodeCoords;
     * float roadHeading;
     * `PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);`
     * `ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);`
     * `ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);`
     * `VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);`
     *
     * ------------------------------------------------------------------
     * C# Example (ins1de) : https://pastebin.com/fxtMWAHD
     *
     * Hash: 0xFF071FB798B803B0 | Since: 323
     */
    function getClosestVehicleNodeWithHeading(pos, nodeType) {
        return GetClosestVehicleNodeWithHeading(pos.x, pos.y, pos.z, nodeType, 0, 0);
    }
    pathfind.getClosestVehicleNodeWithHeading = getClosestVehicleNodeWithHeading;
    /**
     * No comment provided
     *
     * Hash: 0x869DAACBBE9FA006 | Since: 323
     */
    function getGpsBlipRouteFound() {
        return GetGpsBlipRouteFound();
    }
    pathfind.getGpsBlipRouteFound = getGpsBlipRouteFound;
    /**
     * No comment provided
     *
     * Hash: 0xBBB45C3CF5C8AA85 | Since: 323
     */
    function getGpsBlipRouteLength() {
        return GetGpsBlipRouteLength();
    }
    pathfind.getGpsBlipRouteLength = getGpsBlipRouteLength;
    /**
     * Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
     *
     * Hash: 0xD3A6A0EF48823A8C | Since: 323
     */
    function getNextGpsDisabledZoneIndex() {
        return GetNextGpsDisabledZoneIndex();
    }
    pathfind.getNextGpsDisabledZoneIndex = getNextGpsDisabledZoneIndex;
    /**
     * No comment provided
     *
     * Hash: 0xE50E52416CCF948B | Since: 323
     */
    function getNthClosestVehicleNode(pos, nthClosest, nodeFlags, unknown1, unknown2) {
        return GetNthClosestVehicleNode(pos.x, pos.y, pos.z, nthClosest, nodeFlags, unknown1, unknown2);
    }
    pathfind.getNthClosestVehicleNode = getNthClosestVehicleNode;
    /**
     * See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
     *
     * p10 always equals 3.0
     * p11 always equals 0
     *
     * Hash: 0x45905BE8654AE067 | Since: 323
     */
    function getNthClosestVehicleNodeFavourDirection(pos, desiredX, desiredY, desiredZ, nthClosest, nodeFlags) {
        return GetNthClosestVehicleNodeFavourDirection(pos.x, pos.y, pos.z, desiredX, desiredY, desiredZ, nthClosest, nodeFlags, 0, 0);
    }
    pathfind.getNthClosestVehicleNodeFavourDirection = getNthClosestVehicleNodeFavourDirection;
    /**
     * Returns the id.
     *
     * Hash: 0x22D7275A79FE8215 | Since: 323
     */
    function getNthClosestVehicleNodeId(pos, nth, nodeFlags) {
        return GetNthClosestVehicleNodeId(pos.x, pos.y, pos.z, nth, nodeFlags, 0, 0);
    }
    pathfind.getNthClosestVehicleNodeId = getNthClosestVehicleNodeId;
    /**
     * No comment provided
     *
     * Hash: 0x6448050E9C2A7207 | Since: 323
     */
    function getNthClosestVehicleNodeIdWithHeading(pos, nthClosest, nodeFlags) {
        return GetNthClosestVehicleNodeIdWithHeading(pos.x, pos.y, pos.z, nthClosest, nodeFlags, 0, 0);
    }
    pathfind.getNthClosestVehicleNodeIdWithHeading = getNthClosestVehicleNodeIdWithHeading;
    /**
     * Get the nth closest vehicle node and its heading.
     *
     * Hash: 0x80CA6A8B6C094CC4 | Since: 323
     */
    function getNthClosestVehicleNodeWithHeading(pos, nthClosest, nodeFlags, unknown3, unknown4) {
        return GetNthClosestVehicleNodeWithHeading(pos.x, pos.y, pos.z, nthClosest, nodeFlags, unknown3, unknown4);
    }
    pathfind.getNthClosestVehicleNodeWithHeading = getNthClosestVehicleNodeWithHeading;
    /**
     * No comment provided
     *
     * Hash: 0x01708E8DD3FF8C65 | Since: 323
     */
    function getNumNavmeshesExistingInArea(x1, y1, z1, x2, y2, z2) {
        return GetNumNavmeshesExistingInArea(x1, y1, z1, x2, y2, z2);
    }
    pathfind.getNumNavmeshesExistingInArea = getNumNavmeshesExistingInArea;
    /**
     * No comment provided
     *
     * Hash: 0x16F46FB18C8009E4 | Since: 323
     */
    function getPositionBySideOfRoad(pos) {
        return GetPointOnRoadSide(pos.x, pos.y, pos.z, 0);
    }
    pathfind.getPositionBySideOfRoad = getPositionBySideOfRoad;
    /**
     * p3 can be 0, 1 or 2.
     *
     * Hash: 0xF3162836C28F9DA5 | Since: 505
     */
    function getPosAlongGpsTypeRoute() {
        return GetPosAlongGpsTypeRoute(false, 0, 0);
    }
    pathfind.getPosAlongGpsTypeRoute = getPosAlongGpsTypeRoute;
    /**
     * No comment provided
     *
     * Hash: 0x93E0DB8440B73A7D | Since: 323
     */
    function getRandomVehicleNode(pos, radius) {
        return GetRandomVehicleNode(pos.x, pos.y, pos.z, radius, false, false, false);
    }
    pathfind.getRandomVehicleNode = getRandomVehicleNode;
    /**
     * No comment provided
     *
     * Hash: 0xA0F8A7517A273C05 | Since: 463
     */
    function getRoadBoundaryUsingHeading(pos, heading) {
        return GetRoadBoundaryUsingHeading(pos.x, pos.y, pos.z, heading);
    }
    pathfind.getRoadBoundaryUsingHeading = getRoadBoundaryUsingHeading;
    /**
     * Flags are:
     * 1 = 1 = B02_IsFootpath
     * 2 = 4 = !B15_InteractionUnk
     * 4 = 0x20 = !B14_IsInterior
     * 8 = 0x40 = !B07_IsWater
     * 16 = 0x200 = B17_IsFlatGround
     * When onGround == true outPosition is a position located on the nearest pavement.
     *
     * When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
     *
     * In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
     *
     * 16 works for me, 0 crashed the script.
     *
     * Hash: 0xB61C8E878A4199CA | Since: 323
     */
    function getSafeCoordForPed(pos, onGround, flags) {
        return GetSafeCoordForPed(pos.x, pos.y, pos.z, onGround, flags);
    }
    pathfind.getSafeCoordForPed = getSafeCoordForPed;
    /**
     * No comment provided
     *
     * Hash: 0x809549AFC7AEC597 | Since: 2944
     */
    function getSpawnCoordsForVehicleNode(nodeAddress, towardsCoorsX, towardsCoorsY, towardsCoorsZ) {
        return Citizen.invokeNative('0x809549AFC7AEC597', nodeAddress, towardsCoorsX, towardsCoorsY, towardsCoorsZ);
    }
    pathfind.getSpawnCoordsForVehicleNode = getSpawnCoordsForVehicleNode;
    /**
     * Determines the name of the street which is the closest to the given coordinates.
     *
     * x,y,z - the coordinates of the street
     * streetName - returns a hash to the name of the street the coords are on
     * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
     *
     * `Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.`
     *
     * Hash: 0x2EB41072B4C1E4C0 | Since: 323
     */
    function getStreetNameAtCoord(pos) {
        return GetStreetNameAtCoord(pos.x, pos.y, pos.z);
    }
    pathfind.getStreetNameAtCoord = getStreetNameAtCoord;
    /**
     * Returns false for nodes that aren't used for GPS routes.
     * Example:
     * Nodes in Fort Zancudo and LSIA are false
     *
     * Hash: 0xA2AE5C478B96E3B6 | Since: 323
     */
    function getVehicleNodeIsGpsAllowed(nodeID) {
        return GetVehicleNodeIsGpsAllowed(nodeID);
    }
    pathfind.getVehicleNodeIsGpsAllowed = getVehicleNodeIsGpsAllowed;
    /**
     * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
     * Normal roads where plenty of Peds spawn will return false
     *
     * Hash: 0x4F5070AA58F69279 | Since: 323
     */
    function getVehicleNodeIsSwitchedOff(nodeID) {
        return GetVehicleNodeIsSwitchedOff(nodeID);
    }
    pathfind.getVehicleNodeIsSwitchedOff = getVehicleNodeIsSwitchedOff;
    /**
     * Calling this with an invalid node id, will crash the game.
     * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
     * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
     *
     * Hash: 0x703123E5E7D429C2 | Since: 323
     */
    function getVehicleNodePosition(nodeId) {
        return GetVehicleNodePosition(nodeId);
    }
    pathfind.getVehicleNodePosition = getVehicleNodePosition;
    /**
     * Gets the density and flags of the closest node to the specified position.
     * Density is a value between 0 and 15, indicating how busy the road is.
     * Flags is a bit field.
     *
     * Hash: 0x0568566ACBB5DEDC | Since: 323
     */
    function getVehicleNodeProperties(pos) {
        return GetVehicleNodeProperties(pos.x, pos.y, pos.z);
    }
    pathfind.getVehicleNodeProperties = getVehicleNodeProperties;
    /**
     * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
     *
     * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
     *
     * Hash: 0xF813C7E63F9062A5 | Since: 323
     */
    function isNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2) {
        return IsNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2);
    }
    pathfind.isNavmeshLoadedInArea = isNavmeshLoadedInArea;
    /**
     * No comment provided
     *
     * Hash: 0x705A844002B39DC0 | Since: 944
     */
    function isNavmeshRequiredRegionInUse() {
        return IsNavmeshRequiredRegionOwnedByAnyThread();
    }
    pathfind.isNavmeshRequiredRegionInUse = isNavmeshRequiredRegionInUse;
    /**
     * Gets a value indicating whether the specified position is on a road.
     * The vehicle parameter is not implemented (ignored).
     *
     * Hash: 0x125BF4ABFC536B09 | Since: 323
     */
    function isPointOnRoad(pos, vehicle) {
        return IsPointOnRoad(pos.x, pos.y, pos.z, vehicle);
    }
    pathfind.isPointOnRoad = isPointOnRoad;
    /**
     * Returns true if the id is non zero.
     *
     * Hash: 0x1EAF30FCFBF5AF74 | Since: 323
     */
    function isVehicleNodeIdValid(vehicleNodeId) {
        return IsVehicleNodeIdValid(vehicleNodeId);
    }
    pathfind.isVehicleNodeIdValid = isVehicleNodeIdValid;
    /**
     * No comment provided
     *
     * Hash: 0xC2AB6BFE34E92F8B | Since: 2802
     */
    function loadAllPathNodes(_set) {
        return Citizen.invokeNative('0xC2AB6BFE34E92F8B', _set);
    }
    pathfind.loadAllPathNodes = loadAllPathNodes;
    /**
     * No comment provided
     *
     * Hash: 0x46399A7895957C0E | Since: 323
     */
    function removeNavmeshBlockingObject() {
        RemoveNavmeshBlockingObject(undefined);
    }
    pathfind.removeNavmeshBlockingObject = removeNavmeshBlockingObject;
    /**
     * No comment provided
     *
     * Hash: 0x916F0A3CDEC3445E | Since: 323
     */
    function removeNavmeshRequiredRegions() {
        RemoveNavmeshRequiredRegions();
    }
    pathfind.removeNavmeshRequiredRegions = removeNavmeshRequiredRegions;
    /**
     * Used internally for long range tasks
     *
     * Hash: 0x07FB139B592FA687 | Since: 323
     */
    function requestPathNodesInAreaThisFrame(x1, y1, x2, y2) {
        return RequestPathsPreferAccurateBoundingstruct(x1, y1, x2, y2);
    }
    pathfind.requestPathNodesInAreaThisFrame = requestPathNodesInAreaThisFrame;
    /**
     * Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
     *
     * Hash: 0xF74B1FFA4A15FBEA | Since: 2189
     */
    function setAllowStreamHeistIslandNodes(_type) {
        SetAiGlobalPathNodesType(_type);
    }
    pathfind.setAllowStreamHeistIslandNodes = setAllowStreamHeistIslandNodes;
    /**
     * No comment provided
     *
     * Hash: 0x228E5C6AD4D74BFD | Since: 323
     */
    function setAllowStreamPrologueNodes(toggle) {
        SetAllPathsCacheBoundingstruct(toggle);
    }
    pathfind.setAllowStreamPrologueNodes = setAllowStreamPrologueNodes;
    /**
     * No comment provided
     *
     * Hash: 0x0B919E1FB47CC4E0 | Since: 323
     */
    function setAmbientPedRangeMultiplierThisFrame(multiplier) {
        SetAmbientPedRangeMultiplierThisFrame(multiplier);
    }
    pathfind.setAmbientPedRangeMultiplierThisFrame = setAmbientPedRangeMultiplierThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0xDC20483CD3DD5201 | Since: 323
     */
    function setGpsDisabledZone(x1, y1, z1, x2, y2, z3) {
        SetGpsDisabledZone(x1, y1, z1, x2, y2, z3);
    }
    pathfind.setGpsDisabledZone = setGpsDisabledZone;
    /**
     * Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
     * You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
     *
     * <strong>Setting a waypoint at the same coordinate:</strong>
     * Disabled Zone: https://i.imgur.com/P9VUuxM.png
     * Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
     *
     * Hash: 0xD0BC1C6FB18EE154 | Since: 323
     */
    function setGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index) {
        SetGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index);
    }
    pathfind.setGpsDisabledZoneAtIndex = setGpsDisabledZoneAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x72751156E7678833 | Since: 323
     */
    function setIgnoreNoGpsFlag(toggle) {
        SetIgnoreNoGpsFlag(toggle);
    }
    pathfind.setIgnoreNoGpsFlag = setIgnoreNoGpsFlag;
    /**
     * See: SET_BLIP_ROUTE
     *
     * Hash: 0x1FC289A0C3FF470F | Since: 323
     */
    function setIgnoreNoGpsFlagUntilFirstNormalNode(toggle) {
        SetIgnoreSecondaryRouteNodes(toggle);
    }
    pathfind.setIgnoreNoGpsFlagUntilFirstNormalNode = setIgnoreNoGpsFlagUntilFirstNormalNode;
    /**
     * p6 is always 0
     *
     * Hash: 0xE04B48F2CC926253 | Since: 323
     */
    function setPedPathsBackToOriginal(x1, y1, z1, x2, y2, z2) {
        SetPedPathsBackToOriginal(x1, y1, z1, x2, y2, z2, undefined);
    }
    pathfind.setPedPathsBackToOriginal = setPedPathsBackToOriginal;
    /**
     * No comment provided
     *
     * Hash: 0x34F060F4BF92E018 | Since: 323
     */
    function setPedPathsInArea(x1, y1, z1, x2, y2, z2) {
        SetPedPathsInArea(x1, y1, z1, x2, y2, z2, false, undefined);
    }
    pathfind.setPedPathsInArea = setPedPathsInArea;
    /**
     * No comment provided
     *
     * Hash: 0x1EE7063B80FFC77C | Since: 323
     */
    function setRoadsBackToOriginal() {
        SetRoadsBackToOriginal(0, 0, 0, 0, 0, 0, undefined);
    }
    pathfind.setRoadsBackToOriginal = setRoadsBackToOriginal;
    /**
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     * bool p7 - always 1
     *
     * Hash: 0x0027501B9F3B407E | Since: 323
     */
    function setRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width) {
        SetRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width, undefined);
    }
    pathfind.setRoadsBackToOriginalInAngledArea = setRoadsBackToOriginalInAngledArea;
    /**
     * unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
     * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
     *
     * Hash: 0x1A5AA1208AF5DB59 | Since: 323
     */
    function setRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3) {
        SetRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3);
    }
    pathfind.setRoadsInAngledArea = setRoadsInAngledArea;
    /**
     * When nodeEnabled is set to false, all nodes in the area get disabled.
     * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
     * If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
     *
     * Hash: 0xBF1A602B5BA52FEE | Since: 323
     */
    function setRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2) {
        SetRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2);
    }
    pathfind.setRoadsInArea = setRoadsInArea;
    /**
     * No comment provided
     *
     * Hash: 0x109E99373F290687 | Since: 323
     */
    function updateNavmeshBlockingObject() {
        UpdateNavmeshBlockingObject(undefined, 0, 0, 0, 0, 0, 0, 0, undefined);
    }
    pathfind.updateNavmeshBlockingObject = updateNavmeshBlockingObject;
})(pathfind || (pathfind = {}));
export var recording;
(function (recording) {
    /**
     * Stops recording and discards the recorded clip.
     *
     * Hash: 0x88BB3507ED41A240 | Since: 323
     */
    function cancelReplay() {
        StopRecordingAndDiscardClip();
    }
    recording.cancelReplay = cancelReplay;
    /**
     * No comment provided
     *
     * Hash: 0x4282E08174868BE3 | Since: 323
     */
    function isReplayAvailable() {
        return Citizen.invokeNative('0x4282E08174868BE3');
    }
    recording.isReplayAvailable = isReplayAvailable;
    /**
     * No comment provided
     *
     * Hash: 0xDF4B952F7D381B95 | Since: 323
     */
    function isReplayInitialized() {
        return Citizen.invokeNative('0xDF4B952F7D381B95');
    }
    recording.isReplayInitialized = isReplayInitialized;
    /**
     * Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
     *
     * mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
     * retn
     *
     * Hash: 0x1897CA71995A90B4 | Since: 323
     */
    function isReplay() {
        return IsRecording();
    }
    recording.isReplay = isReplay;
    /**
     * No comment provided
     *
     * Hash: 0x33D47E85B476ABCD | Since: 323
     */
    function isReplayRecordSpaceAvailable() {
        return Citizen.invokeNative('0x33D47E85B476ABCD', false);
    }
    recording.isReplayRecordSpaceAvailable = isReplayRecordSpaceAvailable;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x66972397E0757E7A | Since: 323
     */
    function recordGreatestMoment() {
        Citizen.invokeNative('0x66972397E0757E7A', 0, 0, 0);
    }
    recording.recordGreatestMoment = recordGreatestMoment;
    /**
     * No comment provided
     *
     * Hash: 0x13B350B8AD0EEE10 | Since: 323
     */
    function replayCancelEvent() {
        Citizen.invokeNative('0x13B350B8AD0EEE10');
    }
    recording.replayCancelEvent = replayCancelEvent;
    /**
     * -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
     *
     * first one seems to be a string of a mission name, second one seems to be a bool/toggle
     *
     * p1 was always 0.
     *
     *
     * Hash: 0x208784099002BC30 | Since: 323
     */
    function replayCheckForEventThisFrame(missionNameLabel) {
        Citizen.invokeNative('0x208784099002BC30', missionNameLabel, undefined);
    }
    recording.replayCheckForEventThisFrame = replayCheckForEventThisFrame;
    /**
     * This will disable the ability to make camera changes in R* Editor.
     *
     * Hash: 0xAF66DCEE6609B148 | Since: 323
     */
    function replayDisableCameraMovementThisFrame() {
        DisableRockstarEditorCameraChanges();
    }
    recording.replayDisableCameraMovementThisFrame = replayDisableCameraMovementThisFrame;
    /**
     * This disable the recording feature and has to be called every frame.
     *
     * Hash: 0xEB2D525B57F42B40 | Since: 323
     */
    function replayPreventThisFrame() {
        StopRecordingThisFrame();
    }
    recording.replayPreventThisFrame = replayPreventThisFrame;
    /**
     * No comment provided
     *
     * Hash: 0x293220DA1B46CEBC | Since: 323
     */
    function replayRecordBackForTime() {
        Citizen.invokeNative('0x293220DA1B46CEBC', 0, 0, 0);
    }
    recording.replayRecordBackForTime = replayRecordBackForTime;
    /**
     * No comment provided
     *
     * Hash: 0xF854439EFBB3B583 | Since: 323
     */
    function replayResetEventInfo() {
        Citizen.invokeNative('0xF854439EFBB3B583');
    }
    recording.replayResetEventInfo = replayResetEventInfo;
    /**
     * No comment provided
     *
     * Hash: 0x48621C9FCA3EBD28 | Since: 323
     */
    function replayStartEvent() {
        Citizen.invokeNative('0x48621C9FCA3EBD28', 0);
    }
    recording.replayStartEvent = replayStartEvent;
    /**
     * No comment provided
     *
     * Hash: 0x81CBAE94390F9F89 | Since: 323
     */
    function replayStopEvent() {
        Citizen.invokeNative('0x81CBAE94390F9F89');
    }
    recording.replayStopEvent = replayStopEvent;
    /**
     * No comment provided
     *
     * Hash: 0x644546EC5287471B | Since: 323
     */
    function saveReplay() {
        return SaveRecordingClip();
    }
    recording.saveReplay = saveReplay;
    /**
     * Starts recording a replay.
     * If mode is 0, turns on action replay.
     * If mode is 1, starts recording.
     * If already recording a replay, does nothing.
     *
     * Hash: 0xC3AC2FFF9612AC81 | Since: 323
     */
    function startReplay(mode) {
        StartRecording(mode);
    }
    recording.startReplay = startReplay;
    /**
     * Stops recording and saves the recorded clip.
     *
     * Hash: 0x071A5197D6AFC8B3 | Since: 323
     */
    function stopReplay() {
        StopRecordingAndSaveClip();
    }
    recording.stopReplay = stopReplay;
})(recording || (recording = {}));
export var replay;
(function (replay) {
    /**
     * Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
     *
     * Hash: 0x49DA8145672B2725 | Since: 323
     */
    function activateRockstarEditor() {
        ActivateRockstarEditor(0);
    }
    replay.activateRockstarEditor = activateRockstarEditor;
    /**
     * Does nothing (it's a nullsub).
     *
     * Hash: 0x7E2BD3EF6C205F09 | Since: 323
     */
    function registerEffectForEditor() {
        Citizen.invokeNative('0x7E2BD3EF6C205F09', undefined, false);
    }
    replay.registerEffectForEditor = registerEffectForEditor;
    /**
     * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
     *
     * Hash: 0x3353D13F09307691 | Since: 323
     */
    function controlShutdown() {
        ResetEditorValues();
    }
    replay.controlShutdown = controlShutdown;
    /**
     * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
     *
     * Hash: 0x95AB8B5C992C7B58 | Since: 323
     */
    function systemHasRequestedAScriptCleanup() {
        return IsInteriorRenderingDisabled();
    }
    replay.systemHasRequestedAScriptCleanup = systemHasRequestedAScriptCleanup;
    /**
     * No comment provided
     *
     * Hash: 0xE058175F8EAFE79A | Since: 323
     */
    function setSystemPausedForSave() {
        Citizen.invokeNative('0xE058175F8EAFE79A', false);
    }
    replay.setSystemPausedForSave = setSystemPausedForSave;
    /**
     * Disables some other rendering (internal)
     *
     * Hash: 0x5AD3932DAEB1E5D3 | Since: 323
     */
    function setScriptsHaveCleanedUpForSystem() {
        Citizen.invokeNative('0x5AD3932DAEB1E5D3');
    }
    replay.setScriptsHaveCleanedUpForSystem = setScriptsHaveCleanedUpForSystem;
})(replay || (replay = {}));
export var savemigration;
(function (savemigration) {
    /**
     * No comment provided
     *
     * Hash: 0x84B418E93894AC1C | Since: 2372
     */
    function isMpEnabled() {
        return Citizen.invokeNative('0x84B418E93894AC1C');
    }
    savemigration.isMpEnabled = isMpEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xFCE2747EEF1D05FC | Since: 2612
     */
    function mpGetAccount() {
        return Citizen.invokeNative('0xFCE2747EEF1D05FC', 0);
    }
    savemigration.mpGetAccount = mpGetAccount;
    /**
     * No comment provided
     *
     * Hash: 0xC8CB5999919EA2CA | Since: 2612
     */
    function mpGetAccountsStatus() {
        return Citizen.invokeNative('0xC8CB5999919EA2CA');
    }
    savemigration.mpGetAccountsStatus = mpGetAccountsStatus;
    /**
     * No comment provided
     *
     * Hash: 0x690B76BD2763E068 | Since: 2372
     */
    function mpGetStatus() {
        return Citizen.invokeNative('0x690B76BD2763E068');
    }
    savemigration.mpGetStatus = mpGetStatus;
    /**
     * No comment provided
     *
     * Hash: 0x77A16200E18E0C55 | Since: 2612
     */
    function mpNumAccounts() {
        return Citizen.invokeNative('0x77A16200E18E0C55');
    }
    savemigration.mpNumAccounts = mpNumAccounts;
    /**
     * No comment provided
     *
     * Hash: 0x85F41F9225D08C72 | Since: 2612
     */
    function mpRequestAccounts() {
        return Citizen.invokeNative('0x85F41F9225D08C72');
    }
    savemigration.mpRequestAccounts = mpRequestAccounts;
    /**
     * No comment provided
     *
     * Hash: 0xE5E9746A66359F9D | Since: 2372
     */
    function mpRequestStatus() {
        return Citizen.invokeNative('0xE5E9746A66359F9D');
    }
    savemigration.mpRequestStatus = mpRequestStatus;
})(savemigration || (savemigration = {}));
export var script;
(function (script) {
    /**
     * No comment provided
     *
     * Hash: 0x0F6F1EBBC4E1D5E6 | Since: 323
     */
    function bgDoesLaunchParamExist(scriptIndex) {
        return Citizen.invokeNative('0x0F6F1EBBC4E1D5E6', scriptIndex, undefined);
    }
    script.bgDoesLaunchParamExist = bgDoesLaunchParamExist;
    /**
     * Deletes the given context from the background scripts context map.
     *
     * Hash: 0xDC2BACD920D0A0DD | Since: 323
     */
    function bgEndContext(contextName) {
        BgEndContext(contextName);
    }
    script.bgEndContext = bgEndContext;
    /**
     * Hashed version of BG_END_CONTEXT.
     *
     * Hash: 0x107E5CC7CA942BC1 | Since: 323
     */
    function bgEndContextHash(contextHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        BgEndContextHash(contextHash);
    }
    script.bgEndContextHash = bgEndContextHash;
    /**
     * No comment provided
     *
     * Hash: 0x22E21FBCFC88C149 | Since: 323
     */
    function bgGetLaunchParamValue(scriptIndex) {
        return Citizen.invokeNative('0x22E21FBCFC88C149', scriptIndex, undefined);
    }
    script.bgGetLaunchParamValue = bgGetLaunchParamValue;
    /**
     * No comment provided
     *
     * Hash: 0x829CD22E043A2577 | Since: 323
     */
    function bgGetIdFromNameHash(p0) {
        if (typeof p0 === 'string')
            p0 = misc.getHashKey(p0);
        return Citizen.invokeNative('0x829CD22E043A2577', p0);
    }
    script.bgGetIdFromNameHash = bgGetIdFromNameHash;
    /**
     * Returns true if bit 0 in GtaThread+0x154 is set.
     *
     * Hash: 0x836B62713E0534CA | Since: 323
     */
    function bgIsExitflagSet() {
        return Citizen.invokeNative('0x836B62713E0534CA');
    }
    script.bgIsExitflagSet = bgIsExitflagSet;
    /**
     * Sets bit 1 in GtaThread+0x154
     *
     * Hash: 0x760910B49D2B98EA | Since: 323
     */
    function bgSetExitflagResponse() {
        Citizen.invokeNative('0x760910B49D2B98EA');
    }
    script.bgSetExitflagResponse = bgSetExitflagResponse;
    /**
     * Inserts the given context into the background scripts context map.
     *
     * Hash: 0x9D5A25BADB742ACD | Since: 323
     */
    function bgStartContext(contextName) {
        BgStartContext(contextName);
    }
    script.bgStartContext = bgStartContext;
    /**
     * Hashed version of BG_START_CONTEXT.
     *
     * Hash: 0x75B18E49607874C7 | Since: 323
     */
    function bgStartContextHash(contextHash) {
        if (typeof contextHash === 'string')
            contextHash = misc.getHashKey(contextHash);
        BgStartContextHash(contextHash);
    }
    script.bgStartContextHash = bgStartContextHash;
    /**
     * No comment provided
     *
     * Hash: 0xB1577667C3708F9B | Since: 323
     */
    function commitToLoadingscreenSelction() {
        LockLoadingScreenButtons();
    }
    script.commitToLoadingscreenSelction = commitToLoadingscreenSelction;
    /**
     * No comment provided
     *
     * Hash: 0xFC04745FBE67C19A | Since: 323
     */
    function doesExist(scriptName) {
        return DoesScriptExist(scriptName);
    }
    script.doesExist = doesExist;
    /**
     * No comment provided
     *
     * Hash: 0xF86AA3C56BA31381 | Since: 323
     */
    function doesWithNameHashExist(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return DoesScriptWithNameHashExist(scriptHash);
    }
    script.doesWithNameHashExist = doesWithNameHashExist;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Hash: 0xD8F66A3A60C62153 | Since: 323
     */
    function getEventAtIndex(eventGroup, eventIndex) {
        return GetEventAtIndex(eventGroup, eventIndex);
    }
    script.getEventAtIndex = getEventAtIndex;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
     *
     * Hash: 0x2902843FCD2B2D79 | Since: 323
     */
    function getEventData(eventGroup, eventIndex, eventDataSize) {
        return GetEventData(eventGroup, eventIndex, eventDataSize);
    }
    script.getEventData = getEventData;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Hash: 0x936E6168A9BCEDB5 | Since: 323
     */
    function getEventExists(eventGroup, eventIndex) {
        return GetEventExists(eventGroup, eventIndex);
    }
    script.getEventExists = getEventExists;
    /**
     * No comment provided
     *
     * Hash: 0x8A1C8B1738FFE87E | Since: 323
     */
    function getHashOfThisName() {
        return GetHashOfThisScriptName();
    }
    script.getHashOfThisName = getHashOfThisName;
    /**
     * No comment provided
     *
     * Hash: 0xC30338E8088E2E21 | Since: 323
     */
    function getIdOfThisThread() {
        return GetIdOfThisThread();
    }
    script.getIdOfThisThread = getIdOfThisThread;
    /**
     * No comment provided
     *
     * Hash: 0x05A42BA9FC8DA96B | Since: 323
     */
    function getNameOfWithThisId(threadId) {
        return GetNameOfThread(threadId);
    }
    script.getNameOfWithThisId = getNameOfWithThisId;
    /**
     * No comment provided
     *
     * Hash: 0x18C1270EA7F199BC | Since: 323
     */
    function getNoLoadingScreen() {
        return GetNoLoadingScreen();
    }
    script.getNoLoadingScreen = getNoLoadingScreen;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Hash: 0x5F92A689A06620AA | Since: 323
     */
    function getNumberOfEvents(eventGroup) {
        return GetNumberOfEvents(eventGroup);
    }
    script.getNumberOfEvents = getNumberOfEvents;
    /**
     * Gets the number of instances of the specified script is currently running.
     *
     * Actually returns numRefs - 1.
     * if (program)
     * `v3 = rage::scrProgram::GetNumRefs(program) - 1;`
     * return v3;
     *
     * Hash: 0x2C83A9DA6BFFC4F9 | Since: 323
     */
    function getNumberOfThreadsRunningTheWithThisHash(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return GetNumberOfReferencesOfScriptWithNameHash(scriptHash);
    }
    script.getNumberOfThreadsRunningTheWithThisHash = getNumberOfThreadsRunningTheWithThisHash;
    /**
     * No comment provided
     *
     * Hash: 0x442E0A7EDE4A738A | Since: 323
     */
    function getThisName() {
        return GetThisScriptName();
    }
    script.getThisName = getThisName;
    /**
     * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
     *
     * Hash: 0xE6CC9F3BA0FB9EF1 | Since: 323
     */
    function hasLoaded(scriptName) {
        return HasScriptLoaded(scriptName);
    }
    script.hasLoaded = hasLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x5F0F0C783EB16C04 | Since: 323
     */
    function hasWithNameHashLoaded(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        return HasScriptWithNameHashLoaded(scriptHash);
    }
    script.hasWithNameHashLoaded = hasWithNameHashLoaded;
    /**
     * No comment provided
     *
     * Hash: 0x46E9AE36D8FA6417 | Since: 323
     */
    function isThreadActive(threadId) {
        return IsThreadActive(threadId);
    }
    script.isThreadActive = isThreadActive;
    /**
     * No comment provided
     *
     * Hash: 0x6EB5F71AA68F2E8E | Since: 323
     */
    function request(scriptName) {
        RequestScript(scriptName);
    }
    script.request = request;
    /**
     * formerly _REQUEST_STREAMED_SCRIPT
     *
     * Hash: 0xD62A67D26D9653E6 | Since: 323
     */
    function requestWithNameHash(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        RequestScriptWithNameHash(scriptHash);
    }
    script.requestWithNameHash = requestWithNameHash;
    /**
     * If the function returns 0, the end of the iteration has been reached.
     *
     * Hash: 0x30B4FA1C82DD4B9F | Since: 323
     */
    function threadIteratorGetNextThreadId() {
        return ScriptThreadIteratorGetNextThreadId();
    }
    script.threadIteratorGetNextThreadId = threadIteratorGetNextThreadId;
    /**
     * Starts a new iteration of the current threads.
     * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
     *
     * Hash: 0xDADFADA5A20143A8 | Since: 323
     */
    function threadIteratorReset() {
        ScriptThreadIteratorReset();
    }
    script.threadIteratorReset = threadIteratorReset;
    /**
     * No comment provided
     *
     * Hash: 0x5262CC1995D07E09 | Since: 323
     */
    function setNoLoadingScreen(toggle) {
        SetNoLoadingScreen(toggle);
    }
    script.setNoLoadingScreen = setNoLoadingScreen;
    /**
     * No comment provided
     *
     * Hash: 0xC90D2DCACD56184C | Since: 323
     */
    function setAsNoLongerNeeded(scriptName) {
        SetScriptAsNoLongerNeeded(scriptName);
    }
    script.setAsNoLongerNeeded = setAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0xC5BC038960E9DB27 | Since: 323
     */
    function setWithNameHashAsNoLongerNeeded(scriptHash) {
        if (typeof scriptHash === 'string')
            scriptHash = misc.getHashKey(scriptHash);
        SetScriptWithNameHashAsNoLongerNeeded(scriptHash);
    }
    script.setWithNameHashAsNoLongerNeeded = setWithNameHashAsNoLongerNeeded;
    /**
     * No comment provided
     *
     * Hash: 0x078EBE9809CCD637 | Since: 323
     */
    function shutdownLoadingScreen() {
        ShutdownLoadingScreen();
    }
    script.shutdownLoadingScreen = shutdownLoadingScreen;
    /**
     * No comment provided
     *
     * Hash: 0x1090044AD1DA76FA | Since: 323
     */
    function terminateThisThread() {
        TerminateThisThread();
    }
    script.terminateThisThread = terminateThisThread;
    /**
     * No comment provided
     *
     * Hash: 0xC8B189ED9138BCD4 | Since: 323
     */
    function terminateThread(threadId) {
        TerminateThread(threadId);
    }
    script.terminateThread = terminateThread;
    /**
     * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
     *
     * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
     *
     * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
     *
     * Hash: 0x5AE99C571D5BBE5D | Since: 323
     */
    function triggerEvent(eventGroup, eventDataSize, playerBits) {
        return TriggerScriptEvent(eventGroup, eventDataSize, playerBits);
    }
    script.triggerEvent = triggerEvent;
    /**
     * New variant of SEND_TU_SCRIPT_EVENT that automatically initializes the event data header.
     * See TRIGGER_SCRIPT_EVENT for more info.
     *
     * Hash: 0x71A6F836422FDD2B | Since: 3095
     */
    function sendTuEventNew(eventGroup, eventDataSize, playerBits, eventType) {
        if (typeof eventType === 'string')
            eventType = misc.getHashKey(eventType);
        return Citizen.invokeNative('0x71A6F836422FDD2B', eventGroup, eventDataSize, playerBits, eventType);
    }
    script.sendTuEventNew = sendTuEventNew;
})(script || (script = {}));
export var security;
(function (security) {
    /**
     * No comment provided
     *
     * Hash: 0x8E580AB902917360 | Since: 2545
     */
    function forceCheckScriptVariables() {
        Citizen.invokeNative('0x8E580AB902917360');
    }
    security.forceCheckScriptVariables = forceCheckScriptVariables;
    /**
     * Registers a protected variable that will be checked for modifications by the anticheat
     *
     * Hash: 0x40EB1EFD921822BC | Since: 2545
     */
    function registerScriptVariable() {
        return Citizen.invokeNative('0x40EB1EFD921822BC');
    }
    security.registerScriptVariable = registerScriptVariable;
    /**
     * No comment provided
     *
     * Hash: 0x340A36A700E99699 | Since: 2545
     */
    function unregisterScriptVariable() {
        return Citizen.invokeNative('0x340A36A700E99699');
    }
    security.unregisterScriptVariable = unregisterScriptVariable;
})(security || (security = {}));
export var socialclub;
(function (socialclub) {
    /**
     * Returns the nickname of the logged-in Rockstar Social Club account.
     *
     * Hash: 0x198D161F458ECC7F | Since: 323
     */
    function scAccountInfoGetNickname() {
        return ScGetNickname();
    }
    socialclub.scAccountInfoGetNickname = scAccountInfoGetNickname;
    /**
     * No comment provided
     *
     * Hash: 0x225798743970412B | Since: 323
     */
    function scAchievementInfoStatus() {
        return Citizen.invokeNative('0x225798743970412B');
    }
    socialclub.scAchievementInfoStatus = scAchievementInfoStatus;
    /**
     * No comment provided
     *
     * Hash: 0xBFA0A56A817C6C7D | Since: 323
     */
    function scCacheNewRockstarMsgs(toggle) {
        SetHandleRockstarMessageViaScript(toggle);
    }
    socialclub.scCacheNewRockstarMsgs = scCacheNewRockstarMsgs;
    /**
     * No comment provided
     *
     * Hash: 0xC2C97EA97711D1AE | Since: 323
     */
    function scCommunityEventGetDisplayName() {
        return Citizen.invokeNative('0xC2C97EA97711D1AE');
    }
    socialclub.scCommunityEventGetDisplayName = scCommunityEventGetDisplayName;
    /**
     * No comment provided
     *
     * Hash: 0x19853B5B17D77BCA | Since: 323
     */
    function scCommunityEventGetDisplayNameById() {
        return Citizen.invokeNative('0x19853B5B17D77BCA', 0);
    }
    socialclub.scCommunityEventGetDisplayNameById = scCommunityEventGetDisplayNameById;
    /**
     * No comment provided
     *
     * Hash: 0x33DF47CC0642061B | Since: 323
     */
    function scCommunityEventGetDisplayNameForType() {
        return Citizen.invokeNative('0x33DF47CC0642061B', undefined);
    }
    socialclub.scCommunityEventGetDisplayNameForType = scCommunityEventGetDisplayNameForType;
    /**
     * No comment provided
     *
     * Hash: 0x4ED9C8D6DA297639 | Since: 323
     */
    function scCommunityEventGetEventId() {
        return Citizen.invokeNative('0x4ED9C8D6DA297639');
    }
    socialclub.scCommunityEventGetEventId = scCommunityEventGetEventId;
    /**
     * No comment provided
     *
     * Hash: 0x4A7D6E727F941747 | Since: 323
     */
    function scCommunityEventGetEventIdForType() {
        return Citizen.invokeNative('0x4A7D6E727F941747', undefined);
    }
    socialclub.scCommunityEventGetEventIdForType = scCommunityEventGetEventIdForType;
    /**
     * No comment provided
     *
     * Hash: 0x50A8A36201DBF83E | Since: 323
     */
    function scCommunityEventGetExtraDataFloat() {
        return Citizen.invokeNative('0x50A8A36201DBF83E', undefined);
    }
    socialclub.scCommunityEventGetExtraDataFloat = scCommunityEventGetExtraDataFloat;
    /**
     * No comment provided
     *
     * Hash: 0xC5A35C73B68F3C49 | Since: 323
     */
    function scCommunityEventGetExtraDataFloatById() {
        return Citizen.invokeNative('0xC5A35C73B68F3C49', 0, undefined);
    }
    socialclub.scCommunityEventGetExtraDataFloatById = scCommunityEventGetExtraDataFloatById;
    /**
     * No comment provided
     *
     * Hash: 0x2570E26BE63964E3 | Since: 323
     */
    function scCommunityEventGetExtraDataFloatForType() {
        return Citizen.invokeNative('0x2570E26BE63964E3', undefined, undefined);
    }
    socialclub.scCommunityEventGetExtraDataFloatForType = scCommunityEventGetExtraDataFloatForType;
    /**
     * No comment provided
     *
     * Hash: 0x710BCDA8071EDED1 | Since: 323
     */
    function scCommunityEventGetExtraDataInt() {
        return Citizen.invokeNative('0x710BCDA8071EDED1', undefined);
    }
    socialclub.scCommunityEventGetExtraDataInt = scCommunityEventGetExtraDataInt;
    /**
     * No comment provided
     *
     * Hash: 0x8CC469AB4D349B7C | Since: 323
     */
    function scCommunityEventGetExtraDataIntById() {
        return Citizen.invokeNative('0x8CC469AB4D349B7C', 0, undefined);
    }
    socialclub.scCommunityEventGetExtraDataIntById = scCommunityEventGetExtraDataIntById;
    /**
     * No comment provided
     *
     * Hash: 0xE75A4A2E5E316D86 | Since: 323
     */
    function scCommunityEventGetExtraDataIntForType() {
        return Citizen.invokeNative('0xE75A4A2E5E316D86', undefined, undefined);
    }
    socialclub.scCommunityEventGetExtraDataIntForType = scCommunityEventGetExtraDataIntForType;
    /**
     * No comment provided
     *
     * Hash: 0x9DE5D2F723575ED0 | Since: 323
     */
    function scCommunityEventGetExtraDataString() {
        return Citizen.invokeNative('0x9DE5D2F723575ED0', undefined);
    }
    socialclub.scCommunityEventGetExtraDataString = scCommunityEventGetExtraDataString;
    /**
     * No comment provided
     *
     * Hash: 0x699E4A5C8C893A18 | Since: 323
     */
    function scCommunityEventGetExtraDataStringById() {
        return Citizen.invokeNative('0x699E4A5C8C893A18', 0, undefined);
    }
    socialclub.scCommunityEventGetExtraDataStringById = scCommunityEventGetExtraDataStringById;
    /**
     * No comment provided
     *
     * Hash: 0x1D12A56FC95BE92E | Since: 323
     */
    function scCommunityEventGetExtraDataStringForType() {
        return Citizen.invokeNative('0x1D12A56FC95BE92E', undefined, undefined);
    }
    socialclub.scCommunityEventGetExtraDataStringForType = scCommunityEventGetExtraDataStringForType;
    /**
     * No comment provided
     *
     * Hash: 0xFF8F3A92B75ED67A | Since: 323
     */
    function scCommunityEventIsActive() {
        return Citizen.invokeNative('0xFF8F3A92B75ED67A');
    }
    socialclub.scCommunityEventIsActive = scCommunityEventIsActive;
    /**
     * No comment provided
     *
     * Hash: 0xA468E0BE12B12C70 | Since: 323
     */
    function scCommunityEventIsActiveById() {
        return Citizen.invokeNative('0xA468E0BE12B12C70', 0);
    }
    socialclub.scCommunityEventIsActiveById = scCommunityEventIsActiveById;
    /**
     * No comment provided
     *
     * Hash: 0x450819D8CF90C416 | Since: 323
     */
    function scCommunityEventIsActiveForType() {
        return Citizen.invokeNative('0x450819D8CF90C416', undefined);
    }
    socialclub.scCommunityEventIsActiveForType = scCommunityEventIsActiveForType;
    /**
     * No comment provided
     *
     * Hash: 0x44ACA259D67651DB | Since: 323
     */
    function scEmailDeleteEmails() {
        return Citizen.invokeNative('0x44ACA259D67651DB', undefined);
    }
    socialclub.scEmailDeleteEmails = scEmailDeleteEmails;
    /**
     * No comment provided
     *
     * Hash: 0x4737980E8A283806 | Since: 323
     */
    function scEmailGetEmailAtIndex() {
        return Citizen.invokeNative('0x4737980E8A283806', 0);
    }
    socialclub.scEmailGetEmailAtIndex = scEmailGetEmailAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x7DB18CA8CAD5B098 | Since: 505
     */
    function scEmailGetNumRetrievedEmails() {
        return Citizen.invokeNative('0x7DB18CA8CAD5B098');
    }
    socialclub.scEmailGetNumRetrievedEmails = scEmailGetNumRetrievedEmails;
    /**
     * No comment provided
     *
     * Hash: 0x16DA8172459434AA | Since: 323
     */
    function scEmailGetRetrievalStatus() {
        return Citizen.invokeNative('0x16DA8172459434AA');
    }
    socialclub.scEmailGetRetrievalStatus = scEmailGetRetrievalStatus;
    /**
     * No comment provided
     *
     * Hash: 0x55DF6DB45179236E | Since: 323
     */
    function scEmailMessageClearRecipList() {
        ScEmailMessageClearRecipList();
    }
    socialclub.scEmailMessageClearRecipList = scEmailMessageClearRecipList;
    /**
     * No comment provided
     *
     * Hash: 0x2330C12A7A605D16 | Since: 323
     */
    function scEmailMessagePushGamerToRecipList() {
        return ScEmailMessagePushGamerToRecipList();
    }
    socialclub.scEmailMessagePushGamerToRecipList = scEmailMessagePushGamerToRecipList;
    /**
     * No comment provided
     *
     * Hash: 0x040ADDCBAFA1018A | Since: 323
     */
    function scEmailRetrieveEmails(offset, limit) {
        ScInboxGetEmails(offset, limit);
    }
    socialclub.scEmailRetrieveEmails = scEmailRetrieveEmails;
    /**
     * No comment provided
     *
     * Hash: 0x116FB94DC4B79F17 | Since: 323
     */
    function scEmailSendEmail() {
        Citizen.invokeNative('0x116FB94DC4B79F17', undefined);
    }
    socialclub.scEmailSendEmail = scEmailSendEmail;
    /**
     * No comment provided
     *
     * Hash: 0x07DBD622D9533857 | Since: 505
     */
    function scEmailSetCurrentEmailTag() {
        return Citizen.invokeNative('0x07DBD622D9533857', undefined);
    }
    socialclub.scEmailSetCurrentEmailTag = scEmailSetCurrentEmailTag;
    /**
     * No comment provided
     *
     * Hash: 0x2D874D4AE612A65F | Since: 323
     */
    function scGamerdataGetActiveXpBonus() {
        return Citizen.invokeNative('0x2D874D4AE612A65F');
    }
    socialclub.scGamerdataGetActiveXpBonus = scGamerdataGetActiveXpBonus;
    /**
     * No comment provided
     *
     * Hash: 0x8416FE4E4629D7D7 | Since: 323
     */
    function scGamerdataGetBool(name) {
        return ScGamerdataGetBool(name);
    }
    socialclub.scGamerdataGetBool = scGamerdataGetBool;
    /**
     * No comment provided
     *
     * Hash: 0xA770C8EEC6FB2AC5 | Since: 323
     */
    function scGamerdataGetFloat(name) {
        return ScGamerdataGetFloat(name);
    }
    socialclub.scGamerdataGetFloat = scGamerdataGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0xC85A7127E7AD02AA | Since: 323
     */
    function scGamerdataGetInt(name) {
        return ScGamerdataGetInt(name);
    }
    socialclub.scGamerdataGetInt = scGamerdataGetInt;
    /**
     * No comment provided
     *
     * Hash: 0x7FFCBFEE44ECFABF | Since: 323
     */
    function scGamerdataGetString(name) {
        return Citizen.invokeNative('0x7FFCBFEE44ECFABF', name);
    }
    socialclub.scGamerdataGetString = scGamerdataGetString;
    /**
     * No comment provided
     *
     * Hash: 0xDF649C4E9AFDD788 | Since: 323
     */
    function scGetNewRockstarMsg() {
        return RockstarMessageGetString();
    }
    socialclub.scGetNewRockstarMsg = scGetNewRockstarMsg;
    /**
     * Same as HAS_ACHIEVEMENT_BEEN_PASSED
     *
     * Hash: 0x418DC16FAE452C1C | Since: 323
     */
    function scHasAchievementBeenPassed(achievementId) {
        return ScGetHasAchievementBeenPassed(achievementId);
    }
    socialclub.scHasAchievementBeenPassed = scHasAchievementBeenPassed;
    /**
     * No comment provided
     *
     * Hash: 0xBC1CC91205EC8D6E | Since: 323
     */
    function scHasNewRockstarMsg() {
        return IsRockstarMessageReadyForScript();
    }
    socialclub.scHasNewRockstarMsg = scHasNewRockstarMsg;
    /**
     * No comment provided
     *
     * Hash: 0x87E0052F08BD64E6 | Since: 323
     */
    function scInboxGetBountyDataAtIndex(index) {
        return ScInboxMessageGetBountyData(index);
    }
    socialclub.scInboxGetBountyDataAtIndex = scInboxGetBountyDataAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x93028F1DB42BFD08 | Since: 323
     */
    function scInboxGetMessageIsReadAtIndex(msgIndex) {
        return ScInboxGetMessageIsReadAtIndex(msgIndex);
    }
    socialclub.scInboxGetMessageIsReadAtIndex = scInboxGetMessageIsReadAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0xBB8EA16ECBC976C4 | Since: 323
     */
    function scInboxGetMessageTypeAtIndex(msgIndex) {
        return ScInboxGetMessageTypeAtIndex(msgIndex);
    }
    socialclub.scInboxGetMessageTypeAtIndex = scInboxGetMessageTypeAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x03A93FF1A2CA0864 | Since: 323
     */
    function scInboxGetTotalNumMessages() {
        return ScInboxGetTotalNumMessages();
    }
    socialclub.scInboxGetTotalNumMessages = scInboxGetTotalNumMessages;
    /**
     * No comment provided
     *
     * Hash: 0x9A2C8064B6C1E41A | Since: 323
     */
    function scInboxMessageDoApply() {
        return ScInboxMessageDoApply(0);
    }
    socialclub.scInboxMessageDoApply = scInboxMessageDoApply;
    /**
     * No comment provided
     *
     * Hash: 0xFFE5C16F402D851D | Since: 323
     */
    function scInboxMessageGetDataBool() {
        return ScInboxMessageGetDataBool(0, undefined);
    }
    socialclub.scInboxMessageGetDataBool = scInboxMessageGetDataBool;
    /**
     * No comment provided
     *
     * Hash: 0xA00EFE4082C4056E | Since: 323
     */
    function scInboxMessageGetDataInt(context) {
        return ScInboxMessageGetDataInt(0, context);
    }
    socialclub.scInboxMessageGetDataInt = scInboxMessageGetDataInt;
    /**
     * No comment provided
     *
     * Hash: 0x7572EF42FC6A9B6D | Since: 323
     */
    function scInboxMessageGetDataString(context) {
        return ScInboxMessageGetDataString(0, context);
    }
    socialclub.scInboxMessageGetDataString = scInboxMessageGetDataString;
    /**
     * No comment provided
     *
     * Hash: 0xF3E31D16CBDCB304 | Since: 323
     */
    function scInboxMessageGetRawTypeAtIndex() {
        return ScInboxMessageGetString(0);
    }
    socialclub.scInboxMessageGetRawTypeAtIndex = scInboxMessageGetRawTypeAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x69D82604A1A5A254 | Since: 323
     */
    function scInboxMessageGetUgcdata() {
        return ScInboxMessageGetUgcdata(0);
    }
    socialclub.scInboxMessageGetUgcdata = scInboxMessageGetUgcdata;
    /**
     * No comment provided
     *
     * Hash: 0xDA024BDBD600F44A | Since: 323
     */
    function scInboxMessagePushGamerT0RecipList() {
        return ScInboxMessagePushGamerToEventRecipList();
    }
    socialclub.scInboxMessagePushGamerT0RecipList = scInboxMessagePushGamerT0RecipList;
    /**
     * No comment provided
     *
     * Hash: 0xA68D3D229F4F3B06 | Since: 323
     */
    function scInboxSendUgcstatupdateToRecipList() {
        return ScInboxMessageSendUgcStatUpdateEvent();
    }
    socialclub.scInboxSendUgcstatupdateToRecipList = scInboxSendUgcstatupdateToRecipList;
    /**
     * No comment provided
     *
     * Hash: 0x2C015348CF19CA1D | Since: 323
     */
    function scInboxSetMessageAsReadAtIndex(msgIndex) {
        return ScInboxMessagePop(msgIndex);
    }
    socialclub.scInboxSetMessageAsReadAtIndex = scInboxSetMessageAsReadAtIndex;
    /**
     * No comment provided
     *
     * Hash: 0x1989C6E6F67E76A8 | Since: 323
     */
    function scLicenseplateAdd(plateText) {
        return ScLicenseplateAdd(plateText);
    }
    socialclub.scLicenseplateAdd = scLicenseplateAdd;
    /**
     * No comment provided
     *
     * Hash: 0xF6BAAAF762E1BF40 | Since: 323
     */
    function scLicenseplateCheckString() {
        return Citizen.invokeNative('0xF6BAAAF762E1BF40', undefined);
    }
    socialclub.scLicenseplateCheckString = scLicenseplateCheckString;
    /**
     * No comment provided
     *
     * Hash: 0x07C61676E5BB52CD | Since: 323
     */
    function scLicenseplateGetAddIsPending(token) {
        return ScLicenseplateGetAddIsPending(token);
    }
    socialclub.scLicenseplateGetAddIsPending = scLicenseplateGetAddIsPending;
    /**
     * No comment provided
     *
     * Hash: 0x8147FFF6A718E1AD | Since: 323
     */
    function scLicenseplateGetAddStatus(token) {
        return ScLicenseplateGetAddStatus(token);
    }
    socialclub.scLicenseplateGetAddStatus = scLicenseplateGetAddStatus;
    /**
     * No comment provided
     *
     * Hash: 0x9237E334F6E43156 | Since: 323
     */
    function scLicenseplateGetCheckIsPending() {
        return Citizen.invokeNative('0x9237E334F6E43156', undefined);
    }
    socialclub.scLicenseplateGetCheckIsPending = scLicenseplateGetCheckIsPending;
    /**
     * No comment provided
     *
     * Hash: 0xF22CA0FD74B80E7A | Since: 323
     */
    function scLicenseplateGetCheckIsValid() {
        return Citizen.invokeNative('0xF22CA0FD74B80E7A', undefined);
    }
    socialclub.scLicenseplateGetCheckIsValid = scLicenseplateGetCheckIsValid;
    /**
     * No comment provided
     *
     * Hash: 0x700569DBA175A77C | Since: 323
     */
    function scLicenseplateGetCount(token) {
        return ScLicenseplateGetCount(token);
    }
    socialclub.scLicenseplateGetCount = scLicenseplateGetCount;
    /**
     * No comment provided
     *
     * Hash: 0xD302E99EDF0449CF | Since: 323
     */
    function scLicenseplateGetIsvalidIsPending(token) {
        return ScLicenseplateGetIsvalidIsPending(token);
    }
    socialclub.scLicenseplateGetIsvalidIsPending = scLicenseplateGetIsvalidIsPending;
    /**
     * No comment provided
     *
     * Hash: 0x5C4EBFFA98BDB41C | Since: 323
     */
    function scLicenseplateGetIsvalidStatus(token) {
        return ScLicenseplateGetIsvalidStatus(token);
    }
    socialclub.scLicenseplateGetIsvalidStatus = scLicenseplateGetIsvalidStatus;
    /**
     * No comment provided
     *
     * Hash: 0x1D4446A62D35B0D0 | Since: 323
     */
    function scLicenseplateGetPlate(token, plateIndex) {
        return ScLicenseplateGetPlate(token, plateIndex);
    }
    socialclub.scLicenseplateGetPlate = scLicenseplateGetPlate;
    /**
     * No comment provided
     *
     * Hash: 0x2E89990DDFF670C3 | Since: 323
     */
    function scLicenseplateGetPlateData(token, plateIndex) {
        return ScLicenseplateGetPlateData(token, plateIndex);
    }
    socialclub.scLicenseplateGetPlateData = scLicenseplateGetPlateData;
    /**
     * No comment provided
     *
     * Hash: 0x0F73393BAC7E6730 | Since: 323
     */
    function scLicenseplateIsvalid(plateText) {
        return ScLicenseplateIsvalid(plateText);
    }
    socialclub.scLicenseplateIsvalid = scLicenseplateIsvalid;
    /**
     * No comment provided
     *
     * Hash: 0xD0EE05FE193646EA | Since: 323
     */
    function scLicenseplateSetPlateData(oldPlateText, newPlateText) {
        return ScLicenseplateSetPlateData(oldPlateText, newPlateText);
    }
    socialclub.scLicenseplateSetPlateData = scLicenseplateSetPlateData;
    /**
     * Fills some 0x30 sized struct
     *
     * Hash: 0x8A4416C0DB05FA66 | Since: 1290
     */
    function scPauseNewsGetPendingStory() {
        return Citizen.invokeNative('0x8A4416C0DB05FA66', undefined);
    }
    socialclub.scPauseNewsGetPendingStory = scPauseNewsGetPendingStory;
    /**
     * No comment provided
     *
     * Hash: 0xE4F6E8D07A2F0F51 | Since: 1290
     */
    function scPauseNewsInitStarterPack() {
        return Citizen.invokeNative('0xE4F6E8D07A2F0F51', undefined);
    }
    socialclub.scPauseNewsInitStarterPack = scPauseNewsInitStarterPack;
    /**
     * No comment provided
     *
     * Hash: 0xEA95C0853A27888E | Since: 1290
     */
    function scPauseNewsShutdown() {
        Citizen.invokeNative('0xEA95C0853A27888E');
    }
    socialclub.scPauseNewsShutdown = scPauseNewsShutdown;
    /**
     * No comment provided
     *
     * Hash: 0xC4C4575F62534A24 | Since: 323
     */
    function scPresenceAttrSetFloat(attrHash, value) {
        if (typeof attrHash === 'string')
            attrHash = misc.getHashKey(attrHash);
        return ScPresenceAttrSetFloat(attrHash, value);
    }
    socialclub.scPresenceAttrSetFloat = scPresenceAttrSetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x1F1E9682483697C7 | Since: 323
     */
    function scPresenceAttrSetInt(attrHash, value) {
        if (typeof attrHash === 'string')
            attrHash = misc.getHashKey(attrHash);
        return ScPresenceAttrSetInt(attrHash, value);
    }
    socialclub.scPresenceAttrSetInt = scPresenceAttrSetInt;
    /**
     * No comment provided
     *
     * Hash: 0x287F1F75D2803595 | Since: 323
     */
    function scPresenceAttrSetString(attrHash, value) {
        if (typeof attrHash === 'string')
            attrHash = misc.getHashKey(attrHash);
        return ScPresenceAttrSetString(attrHash, value);
    }
    socialclub.scPresenceAttrSetString = scPresenceAttrSetString;
    /**
     * No comment provided
     *
     * Hash: 0x487912FD248EFDDF | Since: 323
     */
    function scPresenceSetActivityRating() {
        return Citizen.invokeNative('0x487912FD248EFDDF', undefined, 0);
    }
    socialclub.scPresenceSetActivityRating = scPresenceSetActivityRating;
    /**
     * Starts a task to check an entered string for profanity on the ROS/Social Club services.
     *
     * See also: 1753344C770358AE, 82E4A58BABC15AE7.
     *
     * Hash: 0x75632C5ECD7ED843 | Since: 323
     */
    function scProfanityCheckString(_string) {
        return ScProfanityCheckString(_string);
    }
    socialclub.scProfanityCheckString = scProfanityCheckString;
    /**
     * No comment provided
     *
     * Hash: 0xEB2BF817463DFA28 | Since: 678
     */
    function scProfanityCheckStringUgc(_string) {
        return ScProfanityCheckUgcString(_string);
    }
    socialclub.scProfanityCheckStringUgc = scProfanityCheckStringUgc;
    /**
     * No comment provided
     *
     * Hash: 0x82E4A58BABC15AE7 | Since: 323
     */
    function scProfanityGetCheckIsPending(token) {
        return ScProfanityGetCheckIsPending(token);
    }
    socialclub.scProfanityGetCheckIsPending = scProfanityGetCheckIsPending;
    /**
     * No comment provided
     *
     * Hash: 0x1753344C770358AE | Since: 323
     */
    function scProfanityGetCheckIsValid(token) {
        return ScProfanityGetCheckIsValid(token);
    }
    socialclub.scProfanityGetCheckIsValid = scProfanityGetCheckIsValid;
    /**
     * Retrieves the profane part of the string with max size of 128.
     * Returns true if profane term was retrieved.
     *
     * Hash: 0x75CC8931A11128C9 | Since: 3258
     */
    function scProfanityGetProfaneWord(token) {
        return Citizen.invokeNative('0x75CC8931A11128C9', token);
    }
    socialclub.scProfanityGetProfaneWord = scProfanityGetProfaneWord;
    /**
     * No comment provided
     *
     * Hash: 0x85535ACF97FC0969 | Since: 323
     */
    function scProfanityGetStringPassed(token) {
        return ScProfanityGetStringPassed(token);
    }
    socialclub.scProfanityGetStringPassed = scProfanityGetStringPassed;
    /**
     * No comment provided
     *
     * Hash: 0x930DE22F07B1CCE3 | Since: 323
     */
    function scProfanityGetStringStatus(token) {
        return ScProfanityGetStringStatus(token);
    }
    socialclub.scProfanityGetStringStatus = scProfanityGetStringStatus;
    /**
     * No comment provided
     *
     * Hash: 0x675721C9F644D161 | Since: 323
     */
    function scTransitionNewsEnd() {
        Citizen.invokeNative('0x675721C9F644D161');
    }
    socialclub.scTransitionNewsEnd = scTransitionNewsEnd;
    /**
     * No comment provided
     *
     * Hash: 0x92DA6E70EF249BD1 | Since: 323
     */
    function scTransitionNewsGetExtraDataIntTu() {
        return Citizen.invokeNative('0x92DA6E70EF249BD1', undefined);
    }
    socialclub.scTransitionNewsGetExtraDataIntTu = scTransitionNewsGetExtraDataIntTu;
    /**
     * No comment provided
     *
     * Hash: 0x3001BEF2FECA3680 | Since: 323
     */
    function scTransitionNewsHasExtraDataTu() {
        return Citizen.invokeNative('0x3001BEF2FECA3680');
    }
    socialclub.scTransitionNewsHasExtraDataTu = scTransitionNewsHasExtraDataTu;
    /**
     * No comment provided
     *
     * Hash: 0x6BFB12CE158E3DD4 | Since: 323
     */
    function scTransitionNewsShow() {
        return Citizen.invokeNative('0x6BFB12CE158E3DD4', undefined);
    }
    socialclub.scTransitionNewsShow = scTransitionNewsShow;
    /**
     * No comment provided
     *
     * Hash: 0xD8122C407663B995 | Since: 323
     */
    function scTransitionNewsShowNextItem() {
        return Citizen.invokeNative('0xD8122C407663B995');
    }
    socialclub.scTransitionNewsShowNextItem = scTransitionNewsShowNextItem;
    /**
     * No comment provided
     *
     * Hash: 0xFE4C1D0D3B9CC17E | Since: 323
     */
    function scTransitionNewsShowTimed() {
        return Citizen.invokeNative('0xFE4C1D0D3B9CC17E', undefined, undefined);
    }
    socialclub.scTransitionNewsShowTimed = scTransitionNewsShowTimed;
    /**
     * No comment provided
     *
     * Hash: 0x69AA35F3F391CDBA | Since: 3258
     */
    function scEmailMarketingEmailOpened(index, _type) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        Citizen.invokeNative('0x69AA35F3F391CDBA', index, _type);
    }
    socialclub.scEmailMarketingEmailOpened = scEmailMarketingEmailOpened;
})(socialclub || (socialclub = {}));
export var stats;
(function (stats) {
    /**
     * No comment provided
     *
     * Hash: 0x44919CC079BB60BF | Since: 573
     */
    function changeGoonLookingForWork() {
        Citizen.invokeNative('0x44919CC079BB60BF', undefined);
    }
    stats.changeGoonLookingForWork = changeGoonLookingForWork;
    /**
     * No comment provided
     *
     * Hash: 0xD1C9B92BDD3F151D | Since: 573
     */
    function changeUniform() {
        Citizen.invokeNative('0xD1C9B92BDD3F151D', undefined, undefined, undefined);
    }
    stats.changeUniform = changeUniform;
    /**
     * No comment provided
     *
     * Hash: 0xA3C53804BDB68ED2 | Since: 573
     */
    function endBeingBoss() {
        Citizen.invokeNative('0xA3C53804BDB68ED2', undefined, undefined, undefined);
    }
    stats.endBeingBoss = endBeingBoss;
    /**
     * No comment provided
     *
     * Hash: 0x6BCCF9948492FD85 | Since: 573
     */
    function endBeingGoon() {
        Citizen.invokeNative('0x6BCCF9948492FD85', undefined, undefined, undefined, undefined, undefined);
    }
    stats.endBeingGoon = endBeingGoon;
    /**
     * No comment provided
     *
     * Hash: 0x6F361B8889A792A3 | Since: 323
     */
    function forceCloudMpDownloadAndOverwriteLocalSave() {
        Citizen.invokeNative('0x6F361B8889A792A3');
    }
    stats.forceCloudMpDownloadAndOverwriteLocalSave = forceCloudMpDownloadAndOverwriteLocalSave;
    /**
     * No comment provided
     *
     * Hash: 0x6BC0ACD0673ACEBE | Since: 573
     */
    function getBossGoonUuid(characterSlot) {
        Citizen.invokeNative('0x6BC0ACD0673ACEBE', characterSlot, undefined, undefined);
    }
    stats.getBossGoonUuid = getBossGoonUuid;
    /**
     * No comment provided
     *
     * Hash: 0x61E111E323419E07 | Since: 323
     */
    function getPackedIntStatKey(index, spStat, charStat, character) {
        return GetPackedIntStatKey(index, spStat, charStat, character);
    }
    stats.getPackedIntStatKey = getPackedIntStatKey;
    /**
     * Needs more research. Gets the stat name of a masked int?
     *
     * section - values used in the decompiled scripts:
     * "_NGPSTAT_INT"
     * "_MP_NGPSTAT_INT"
     * "_MP_LRPSTAT_INT"
     * "_MP_APAPSTAT_INT"
     * "_MP_LR2PSTAT_INT"
     * "_MP_BIKEPSTAT_INT"
     * "_MP_IMPEXPPSTAT_INT"
     * "_MP_GUNRPSTAT_INT"
     * "_NGDLCPSTAT_INT"
     * "_MP_NGDLCPSTAT_INT"
     * "_DLCSMUGCHARPSTAT_INT"
     * "_GANGOPSPSTAT_INT"
     * "_BUSINESSBATPSTAT_INT"
     * "_ARENAWARSPSTAT_INT"
     * "_CASINOPSTAT_INT"
     * "_CASINOHSTPSTAT_INT"
     *
     * Hash: 0x2B4CDCA6F07FF3DA | Since: 323
     */
    function getPackedNgIntStatKey(index, spStat, charStat, character, section) {
        return GetNgstatIntHash(index, spStat, charStat, character, section);
    }
    stats.getPackedNgIntStatKey = getPackedNgIntStatKey;
    /**
     * No comment provided
     *
     * Hash: 0xDA7EBFC49AE3F1B0 | Since: 2545
     */
    function getPackedStatBoolCode(index, characterSlot) {
        return Citizen.invokeNative('0xDA7EBFC49AE3F1B0', index, characterSlot);
    }
    stats.getPackedStatBoolCode = getPackedStatBoolCode;
    /**
     * No comment provided
     *
     * Hash: 0x0BC900A6FE73770C | Since: 2545
     */
    function getPackedStatIntCode(index, characterSlot) {
        return Citizen.invokeNative('0x0BC900A6FE73770C', index, characterSlot);
    }
    stats.getPackedStatIntCode = getPackedStatIntCode;
    /**
     * No comment provided
     *
     * Hash: 0xD16C2AD6B8E32854 | Since: 323
     */
    function getPackedTuIntStatKey(index, spStat, charStat, character) {
        return GetPackedTuIntStatKey(index, spStat, charStat, character);
    }
    stats.getPackedTuIntStatKey = getPackedTuIntStatKey;
    /**
     * No comment provided
     *
     * Hash: 0x5EAD2BF6484852E4 | Since: 323
     */
    function getPlayerHasDrivenAllVehicles() {
        return Citizen.invokeNative('0x5EAD2BF6484852E4');
    }
    stats.getPlayerHasDrivenAllVehicles = getPlayerHasDrivenAllVehicles;
    /**
     * No comment provided
     *
     * Hash: 0x792271AB35C356A4 | Since: 573
     */
    function hiredLimo() {
        HiredLimo(undefined, undefined);
    }
    stats.hiredLimo = hiredLimo;
    /**
     * No comment provided
     *
     * Hash: 0xC30713A383BFBF0E | Since: 323
     */
    function leaderboards2ReadByHandle() {
        return Leaderboards2ReadByHandle();
    }
    stats.leaderboards2ReadByHandle = leaderboards2ReadByHandle;
    /**
     * No comment provided
     *
     * Hash: 0xF1AE5DCDBFCA2721 | Since: 323
     */
    function leaderboards2ReadByPlaform(gamerHandleCsv, platformName) {
        return Leaderboards2ReadByPlatform(gamerHandleCsv, platformName);
    }
    stats.leaderboards2ReadByPlaform = leaderboards2ReadByPlaform;
    /**
     * No comment provided
     *
     * Hash: 0x5CE587FB5A42C8C4 | Since: 323
     */
    function leaderboards2ReadByRadius() {
        return Leaderboards2ReadByRadius(undefined);
    }
    stats.leaderboards2ReadByRadius = leaderboards2ReadByRadius;
    /**
     * No comment provided
     *
     * Hash: 0xBA2C7DB0C129449A | Since: 323
     */
    function leaderboards2ReadByRank() {
        return Leaderboards2ReadByRank(undefined, undefined);
    }
    stats.leaderboards2ReadByRank = leaderboards2ReadByRank;
    /**
     * No comment provided
     *
     * Hash: 0xE662C8B759D08F3C | Since: 323
     */
    function leaderboards2ReadByScoreFloat() {
        return Leaderboards2ReadByScoreFloat(0, undefined);
    }
    stats.leaderboards2ReadByScoreFloat = leaderboards2ReadByScoreFloat;
    /**
     * No comment provided
     *
     * Hash: 0x7EEC7E4F6984A16A | Since: 323
     */
    function leaderboards2ReadByScoreInt() {
        return Leaderboards2ReadByScoreInt(undefined, undefined);
    }
    stats.leaderboards2ReadByScoreInt = leaderboards2ReadByScoreInt;
    /**
     * No comment provided
     *
     * Hash: 0x918B101666F9CB83 | Since: 323
     */
    function leaderboards2ReadFriendsByRow() {
        return Leaderboards2ReadFriendsByRow(undefined, false, undefined, undefined);
    }
    stats.leaderboards2ReadFriendsByRow = leaderboards2ReadFriendsByRow;
    /**
     * No comment provided
     *
     * Hash: 0x71B008056E5692D6 | Since: 323
     */
    function leaderboards2ReadGetRowDataEnd() {
        Citizen.invokeNative('0x71B008056E5692D6');
    }
    stats.leaderboards2ReadGetRowDataEnd = leaderboards2ReadGetRowDataEnd;
    /**
     * No comment provided
     *
     * Hash: 0x38491439B6BA7F7D | Since: 323
     */
    function leaderboards2ReadGetRowDataFloat() {
        return Citizen.invokeNative('0x38491439B6BA7F7D', undefined, undefined);
    }
    stats.leaderboards2ReadGetRowDataFloat = leaderboards2ReadGetRowDataFloat;
    /**
     * No comment provided
     *
     * Hash: 0x34770B9CE0E03B91 | Since: 323
     */
    function leaderboards2ReadGetRowDataInfo() {
        return Citizen.invokeNative('0x34770B9CE0E03B91', undefined);
    }
    stats.leaderboards2ReadGetRowDataInfo = leaderboards2ReadGetRowDataInfo;
    /**
     * No comment provided
     *
     * Hash: 0x88578F6EC36B4A3A | Since: 323
     */
    function leaderboards2ReadGetRowDataInt() {
        return Citizen.invokeNative('0x88578F6EC36B4A3A', undefined, undefined);
    }
    stats.leaderboards2ReadGetRowDataInt = leaderboards2ReadGetRowDataInt;
    /**
     * No comment provided
     *
     * Hash: 0xA0F93D5465B3094D | Since: 323
     */
    function leaderboards2ReadGetRowDataStart() {
        return Citizen.invokeNative('0xA0F93D5465B3094D');
    }
    stats.leaderboards2ReadGetRowDataStart = leaderboards2ReadGetRowDataStart;
    /**
     * No comment provided
     *
     * Hash: 0xC38DC1E90D22547C | Since: 323
     */
    function leaderboards2ReadRankPrediction() {
        return Leaderboards2ReadRankPrediction();
    }
    stats.leaderboards2ReadRankPrediction = leaderboards2ReadRankPrediction;
    /**
     * No comment provided
     *
     * Hash: 0xAE2206545888AE49 | Since: 323
     */
    function leaderboards2WriteData() {
        return Leaderboards2WriteData();
    }
    stats.leaderboards2WriteData = leaderboards2WriteData;
    /**
     * No comment provided
     *
     * Hash: 0xC980E62E33DF1D5C | Since: 323
     */
    function leaderboards2WriteDataForEventType() {
        return Leaderboards2WriteDataForEventType();
    }
    stats.leaderboards2WriteDataForEventType = leaderboards2WriteDataForEventType;
    /**
     * No comment provided
     *
     * Hash: 0xB9BB18E2C40142ED | Since: 323
     */
    function leaderboardsCacheDataRow() {
        return LeaderboardsCacheDataRow();
    }
    stats.leaderboardsCacheDataRow = leaderboardsCacheDataRow;
    /**
     * No comment provided
     *
     * Hash: 0xD4B02A6B476E1FDC | Since: 323
     */
    function leaderboardsClearCacheData() {
        LeaderboardsClearCacheData();
    }
    stats.leaderboardsClearCacheData = leaderboardsClearCacheData;
    /**
     * No comment provided
     *
     * Hash: 0x8EC74CEB042E7CFF | Since: 323
     */
    function leaderboardsClearCacheDataId() {
        Citizen.invokeNative('0x8EC74CEB042E7CFF', undefined);
    }
    stats.leaderboardsClearCacheDataId = leaderboardsClearCacheDataId;
    /**
     * No comment provided
     *
     * Hash: 0x9120E8DBA3D69273 | Since: 323
     */
    function leaderboardsGetCacheDataRow() {
        return LeaderboardsGetCacheDataRow(undefined, undefined);
    }
    stats.leaderboardsGetCacheDataRow = leaderboardsGetCacheDataRow;
    /**
     * No comment provided
     *
     * Hash: 0x9C51349BE6CDFE2C | Since: 323
     */
    function leaderboardsGetCacheExists() {
        return LeaderboardsGetCacheExists(undefined);
    }
    stats.leaderboardsGetCacheExists = leaderboardsGetCacheExists;
    /**
     * No comment provided
     *
     * Hash: 0x58A651CD201D89AD | Since: 323
     */
    function leaderboardsGetCacheNumberOfRows() {
        return LeaderboardsGetCacheNumberOfRows(undefined);
    }
    stats.leaderboardsGetCacheNumberOfRows = leaderboardsGetCacheNumberOfRows;
    /**
     * No comment provided
     *
     * Hash: 0xF04C1C27DA35F6C8 | Since: 323
     */
    function leaderboardsGetCacheTime() {
        return LeaderboardsGetCacheTime(undefined);
    }
    stats.leaderboardsGetCacheTime = leaderboardsGetCacheTime;
    /**
     * No comment provided
     *
     * Hash: 0xC4B5467A1886EA7E | Since: 323
     */
    function leaderboardsGetColumnId() {
        return LeaderboardsGetColumnId(0, 0, 0);
    }
    stats.leaderboardsGetColumnId = leaderboardsGetColumnId;
    /**
     * No comment provided
     *
     * Hash: 0xBF4FEF46DB7894D3 | Since: 323
     */
    function leaderboardsGetColumnType() {
        return LeaderboardsGetColumnType(0, undefined, undefined);
    }
    stats.leaderboardsGetColumnType = leaderboardsGetColumnType;
    /**
     * No comment provided
     *
     * Hash: 0x117B45156D7EFF2E | Since: 323
     */
    function leaderboardsGetNumberOfColumns() {
        return LeaderboardsGetNumberOfColumns(0, undefined);
    }
    stats.leaderboardsGetNumberOfColumns = leaderboardsGetNumberOfColumns;
    /**
     * No comment provided
     *
     * Hash: 0xA31FD15197B192BD | Since: 323
     */
    function leaderboardsReadAnyPending() {
        return LeaderboardsReadAnyPending();
    }
    stats.leaderboardsReadAnyPending = leaderboardsReadAnyPending;
    /**
     * No comment provided
     *
     * Hash: 0x7CCE5C737A665701 | Since: 323
     */
    function leaderboardsReadClear() {
        return LeaderboardsReadClear(undefined, undefined, undefined);
    }
    stats.leaderboardsReadClear = leaderboardsReadClear;
    /**
     * No comment provided
     *
     * Hash: 0xA34CB6E6F0DF4A0B | Since: 323
     */
    function leaderboardsReadClearAll() {
        return LeaderboardsReadClearAll();
    }
    stats.leaderboardsReadClearAll = leaderboardsReadClearAll;
    /**
     * No comment provided
     *
     * Hash: 0xAC392C8483342AC2 | Since: 323
     */
    function leaderboardsReadPending() {
        return LeaderboardsReadPending(undefined, undefined, undefined);
    }
    stats.leaderboardsReadPending = leaderboardsReadPending;
    /**
     * No comment provided
     *
     * Hash: 0x2FB19228983E832C | Since: 323
     */
    function leaderboardsReadSuccessful() {
        return LeaderboardsReadSuccessful(undefined, undefined, undefined);
    }
    stats.leaderboardsReadSuccessful = leaderboardsReadSuccessful;
    /**
     * No comment provided
     *
     * Hash: 0x0BCA1D2C47B0D269 | Since: 323
     */
    function leaderboardsWriteAddColumn() {
        LeaderboardsWriteAddColumn(undefined, undefined, 0);
    }
    stats.leaderboardsWriteAddColumn = leaderboardsWriteAddColumn;
    /**
     * No comment provided
     *
     * Hash: 0x2E65248609523599 | Since: 323
     */
    function leaderboardsWriteAddColumnLong() {
        LeaderboardsWriteAddColumnLong(undefined, undefined, undefined);
    }
    stats.leaderboardsWriteAddColumnLong = leaderboardsWriteAddColumnLong;
    /**
     * No comment provided
     *
     * Hash: 0xCEA553E35C2246E1 | Since: 573
     */
    function orderBossVehicle(vehicleHash) {
        if (typeof vehicleHash === 'string')
            vehicleHash = misc.getHashKey(vehicleHash);
        OrderedBossVehicle(undefined, undefined, vehicleHash);
    }
    stats.orderBossVehicle = orderBossVehicle;
    /**
     * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
     *
     * Hash: 0x94F12ABF9C79E339 | Since: 323
     */
    function packedStatGetIntStatIndex() {
        return StatGetPackedIntMask(0);
    }
    stats.packedStatGetIntStatIndex = packedStatGetIntStatIndex;
    /**
     * No comment provided
     *
     * Hash: 0xD558BEC0BBA7E8D2 | Since: 877
     */
    function playAbandonedMc() {
        Citizen.invokeNative('0xD558BEC0BBA7E8D2', undefined, undefined, undefined, undefined, undefined);
    }
    stats.playAbandonedMc = playAbandonedMc;
    /**
     * No comment provided
     *
     * Hash: 0x79AB33F0FBFAC40C | Since: 323
     */
    function playAcquiredHiddenPackage() {
        PlaystatsAcquiredHiddenPackage(undefined);
    }
    stats.playAcquiredHiddenPackage = playAcquiredHiddenPackage;
    /**
     * No comment provided
     *
     * Hash: 0xA071E0ED98F91286 | Since: 323
     */
    function playActivityDone(activityId) {
        PlaystatsActivityDone(0, activityId, undefined);
    }
    stats.playActivityDone = playActivityDone;
    /**
     * No comment provided
     *
     * Hash: 0x46326E13DA4E0546 | Since: 323
     */
    function playAppendDirectorMetric() {
        return PlaystatsDirectorMode();
    }
    stats.playAppendDirectorMetric = playAppendDirectorMetric;
    /**
     * No comment provided
     *
     * Hash: 0xF9096193DF1F99D4 | Since: 1868
     */
    function playArcadeCabinet() {
        Citizen.invokeNative('0xF9096193DF1F99D4', undefined);
    }
    stats.playArcadeCabinet = playArcadeCabinet;
    /**
     * No comment provided
     *
     * Hash: 0x533A7D1EA58DF958 | Since: 1734
     */
    function playArcadeGame() {
        PlaystatsArcadegame(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playArcadeGame = playArcadeGame;
    /**
     * No comment provided
     *
     * Hash: 0x4FCDBD3F0A813C25 | Since: 1868
     */
    function playArcadeLoveMatch() {
        Citizen.invokeNative('0x4FCDBD3F0A813C25', undefined, undefined);
    }
    stats.playArcadeLoveMatch = playArcadeLoveMatch;
    /**
     * No comment provided
     *
     * Hash: 0xB479D9F0D48A1BC5 | Since: 1604
     */
    function playArenaWarsEnded() {
        return PlaystatsArenaWarsEnded();
    }
    stats.playArenaWarsEnded = playArenaWarsEnded;
    /**
     * No comment provided
     *
     * Hash: 0x6F4F599753F8200A | Since: 1604
     */
    function playArenaWarsSpectator() {
        PlaystatsArenaWarSpectator(0, 0, 0, 0, 0);
    }
    stats.playArenaWarsSpectator = playArenaWarsSpectator;
    /**
     * No comment provided
     *
     * Hash: 0x47B32F5611E6E483 | Since: 463
     */
    function playAwardBadSport(id) {
        PlaystatsAwardBadsport(id);
    }
    stats.playAwardBadSport = playAwardBadSport;
    /**
     * No comment provided
     *
     * Hash: 0x70F52471E758EBAE | Since: 2545
     */
    function playAwardNav() {
        Citizen.invokeNative('0x70F52471E758EBAE', undefined, undefined, undefined, undefined);
    }
    stats.playAwardNav = playAwardNav;
    /**
     * No comment provided
     *
     * Hash: 0x46F917F6B4128FE4 | Since: 323
     */
    function playAwardXp(amount, _type, category) {
        if (typeof _type === 'string')
            _type = misc.getHashKey(_type);
        if (typeof category === 'string')
            category = misc.getHashKey(category);
        PlaystatsAwardXp(amount, _type, category);
    }
    stats.playAwardXp = playAwardXp;
    /**
     * No comment provided
     *
     * Hash: 0x5009DFD741329729 | Since: 323
     */
    function playBackgroundScriptAction(action, value) {
        PlaystatsBackgroundScriptAction(action, value);
    }
    stats.playBackgroundScriptAction = playBackgroundScriptAction;
    /**
     * No comment provided
     *
     * Hash: 0x516FC96EB88EEFE5 | Since: 1011
     */
    function playBanAlert() {
        PlaystatsBanAlert(0);
    }
    stats.playBanAlert = playBanAlert;
    /**
     * No comment provided
     *
     * Hash: 0x7B18DA61F6BAE9D5 | Since: 573
     */
    function playBcCarJacking() {
        Citizen.invokeNative('0x7B18DA61F6BAE9D5', undefined);
    }
    stats.playBcCarJacking = playBcCarJacking;
    /**
     * No comment provided
     *
     * Hash: 0x53CAE13E9B426993 | Since: 757
     */
    function playBcCashing() {
        Citizen.invokeNative('0x53CAE13E9B426993', undefined);
    }
    stats.playBcCashing = playBcCashing;
    /**
     * No comment provided
     *
     * Hash: 0xE3261D791EB44ACB | Since: 573
     */
    function playBcFindersKeepers() {
        Citizen.invokeNative('0xE3261D791EB44ACB', undefined);
    }
    stats.playBcFindersKeepers = playBcFindersKeepers;
    /**
     * No comment provided
     *
     * Hash: 0x930F504203F561C9 | Since: 573
     */
    function playBcMostWanted() {
        Citizen.invokeNative('0x930F504203F561C9', undefined);
    }
    stats.playBcMostWanted = playBcMostWanted;
    /**
     * No comment provided
     *
     * Hash: 0x73001E34F85137F8 | Since: 573
     */
    function playBcPointToPoint() {
        Citizen.invokeNative('0x73001E34F85137F8', undefined);
    }
    stats.playBcPointToPoint = playBcPointToPoint;
    /**
     * No comment provided
     *
     * Hash: 0x14EDA9EE27BD1626 | Since: 573
     */
    function playBcProtectionRacket() {
        Citizen.invokeNative('0x14EDA9EE27BD1626', undefined);
    }
    stats.playBcProtectionRacket = playBcProtectionRacket;
    /**
     * No comment provided
     *
     * Hash: 0x7D36291161859389 | Since: 757
     */
    function playBcSalvage() {
        Citizen.invokeNative('0x7D36291161859389', undefined);
    }
    stats.playBcSalvage = playBcSalvage;
    /**
     * No comment provided
     *
     * Hash: 0x06EAF70AE066441E | Since: 573
     */
    function playBcSmashAndGrab() {
        Citizen.invokeNative('0x06EAF70AE066441E', undefined);
    }
    stats.playBcSmashAndGrab = playBcSmashAndGrab;
    /**
     * No comment provided
     *
     * Hash: 0x316DB59CD14C1774 | Since: 1493
     */
    function playBusinessBattleEnded() {
        Citizen.invokeNative('0x316DB59CD14C1774', undefined);
    }
    stats.playBusinessBattleEnded = playBusinessBattleEnded;
    /**
     * No comment provided
     *
     * Hash: 0xD6781E42755531F7 | Since: 757
     */
    function playBuyContrabandMission() {
        return PlaystatsBuyContraband();
    }
    stats.playBuyContrabandMission = playBuyContrabandMission;
    /**
     * No comment provided
     *
     * Hash: 0xF06A6F41CB445443 | Since: 757
     */
    function playBwAirFreight() {
        Citizen.invokeNative('0xF06A6F41CB445443', undefined);
    }
    stats.playBwAirFreight = playBwAirFreight;
    /**
     * No comment provided
     *
     * Hash: 0x678F86D8FC040BDB | Since: 573
     */
    function playBwAssault() {
        Citizen.invokeNative('0x678F86D8FC040BDB', undefined);
    }
    stats.playBwAssault = playBwAssault;
    /**
     * No comment provided
     *
     * Hash: 0xA6F54BB2FFCA35EA | Since: 573
     */
    function playBwBellyOfTheBeast() {
        Citizen.invokeNative('0xA6F54BB2FFCA35EA', undefined);
    }
    stats.playBwBellyOfTheBeast = playBwBellyOfTheBeast;
    /**
     * No comment provided
     *
     * Hash: 0x8D8ADB562F09A245 | Since: 573
     */
    function playBwBossonbossdeathmatch() {
        Citizen.invokeNative('0x8D8ADB562F09A245', undefined);
    }
    stats.playBwBossonbossdeathmatch = playBwBossonbossdeathmatch;
    /**
     * No comment provided
     *
     * Hash: 0x282B6739644F4347 | Since: 757
     */
    function playBwFragileGoods() {
        Citizen.invokeNative('0x282B6739644F4347', undefined);
    }
    stats.playBwFragileGoods = playBwFragileGoods;
    /**
     * No comment provided
     *
     * Hash: 0x5FF2C33B13A02A11 | Since: 757
     */
    function playBwHeadHunter() {
        Citizen.invokeNative('0x5FF2C33B13A02A11', undefined);
    }
    stats.playBwHeadHunter = playBwHeadHunter;
    /**
     * No comment provided
     *
     * Hash: 0x88087EE1F28024AE | Since: 573
     */
    function playBwHuntTheBoss() {
        Citizen.invokeNative('0x88087EE1F28024AE', undefined);
    }
    stats.playBwHuntTheBoss = playBwHuntTheBoss;
    /**
     * No comment provided
     *
     * Hash: 0xFCC228E07217FCAC | Since: 573
     */
    function playBwSightseer() {
        Citizen.invokeNative('0xFCC228E07217FCAC', undefined);
    }
    stats.playBwSightseer = playBwSightseer;
    /**
     * No comment provided
     *
     * Hash: 0xD1A1EE3B4FA8E760 | Since: 573
     */
    function playBwYatchattack() {
        Citizen.invokeNative('0xD1A1EE3B4FA8E760', undefined);
    }
    stats.playBwYatchattack = playBwYatchattack;
    /**
     * No comment provided
     *
     * Hash: 0x1187CB58D7F3BED7 | Since: 2372
     */
    function playCarclubChallenge() {
        PlaystatsCarclubChallenge(undefined, undefined, undefined, undefined);
    }
    stats.playCarclubChallenge = playCarclubChallenge;
    /**
     * No comment provided
     *
     * Hash: 0xFF14D6FEEC507BBE | Since: 2372
     */
    function playCarclubPoints() {
        PlaystatsCarclubPoints(undefined);
    }
    stats.playCarclubPoints = playCarclubPoints;
    /**
     * No comment provided
     *
     * Hash: 0x69C922B677621428 | Since: 2372
     */
    function playCarclubPrize(vehicleModel) {
        if (typeof vehicleModel === 'string')
            vehicleModel = misc.getHashKey(vehicleModel);
        PlaystatsCarclubPrize(0, vehicleModel);
    }
    stats.playCarclubPrize = playCarclubPrize;
    /**
     * No comment provided
     *
     * Hash: 0x3EAE97309727E7AD | Since: 1734
     */
    function playCasinoBlackjack() {
        PlaystatsCasinoBlackjack(undefined);
    }
    stats.playCasinoBlackjack = playCasinoBlackjack;
    /**
     * No comment provided
     *
     * Hash: 0xD5451C7BF151EB6F | Since: 1734
     */
    function playCasinoBlackjackLight() {
        PlaystatsCasinoBlackjackLight(undefined);
    }
    stats.playCasinoBlackjackLight = playCasinoBlackjackLight;
    /**
     * No comment provided
     *
     * Hash: 0x0999F3F090EC5012 | Since: 1734
     */
    function playCasinoChip() {
        PlaystatsCasinoChip(undefined);
    }
    stats.playCasinoChip = playCasinoChip;
    /**
     * No comment provided
     *
     * Hash: 0x049F059625058A86 | Since: 1734
     */
    function playCasinoInsideTrack() {
        PlaystatsCasinoInsidetrack(undefined);
    }
    stats.playCasinoInsideTrack = playCasinoInsideTrack;
    /**
     * No comment provided
     *
     * Hash: 0x23A3CBCD50D54E47 | Since: 1734
     */
    function playCasinoInsideTrackLight() {
        PlaystatsCasinoInsidetrackLight(undefined);
    }
    stats.playCasinoInsideTrackLight = playCasinoInsideTrackLight;
    /**
     * No comment provided
     *
     * Hash: 0x0C432C1435F5E4FA | Since: 1734
     */
    function playCasinoLuckySeven() {
        PlaystatsCasinoLuckyseven(undefined);
    }
    stats.playCasinoLuckySeven = playCasinoLuckySeven;
    /**
     * No comment provided
     *
     * Hash: 0x95101C443A84E7F1 | Since: 1734
     */
    function playCasinoRoulette() {
        PlaystatsCasinoRoulette(undefined);
    }
    stats.playCasinoRoulette = playCasinoRoulette;
    /**
     * No comment provided
     *
     * Hash: 0x6572ABA3DE1197FC | Since: 1734
     */
    function playCasinoRouletteLight() {
        PlaystatsCasinoRouletteLight(undefined);
    }
    stats.playCasinoRouletteLight = playCasinoRouletteLight;
    /**
     * No comment provided
     *
     * Hash: 0xEF5EC67D392B830A | Since: 1734
     */
    function playCasinoSlotMachine() {
        PlaystatsCasinoSlotmachine(undefined);
    }
    stats.playCasinoSlotMachine = playCasinoSlotMachine;
    /**
     * No comment provided
     *
     * Hash: 0xE60054A0FAE8227F | Since: 1734
     */
    function playCasinoSlotMachineLight() {
        PlaystatsCasinoSlotmachineLight(undefined);
    }
    stats.playCasinoSlotMachineLight = playCasinoSlotMachineLight;
    /**
     * No comment provided
     *
     * Hash: 0xFCCCAC2BD3C1F180 | Since: 1734
     */
    function playCasinoStoryMissionEnded() {
        PlaystatsCasinoStoryMissionEnded(undefined, undefined);
    }
    stats.playCasinoStoryMissionEnded = playCasinoStoryMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0xF740FB339D471C35 | Since: 1734
     */
    function playCasinoThreeCardPoker() {
        PlaystatsCasinoThreecardpoker(undefined);
    }
    stats.playCasinoThreeCardPoker = playCasinoThreeCardPoker;
    /**
     * No comment provided
     *
     * Hash: 0xC9001364B4388F22 | Since: 1734
     */
    function playCasinoThreeCardPokerLight() {
        PlaystatsCasinoThreecardpokerLight(undefined);
    }
    stats.playCasinoThreeCardPokerLight = playCasinoThreeCardPokerLight;
    /**
     * No comment provided
     *
     * Hash: 0x28ECB8AC2F607DB2 | Since: 877
     */
    function playChangeMcOutfit() {
        Citizen.invokeNative('0x28ECB8AC2F607DB2', undefined, undefined, undefined, undefined, undefined);
    }
    stats.playChangeMcOutfit = playChangeMcOutfit;
    /**
     * No comment provided
     *
     * Hash: 0x0B565B0AAE56A0E8 | Since: 877
     */
    function playChangeMcRole(role) {
        Citizen.invokeNative('0x0B565B0AAE56A0E8', undefined, undefined, undefined, undefined, role, 0, undefined);
    }
    stats.playChangeMcRole = playChangeMcRole;
    /**
     * No comment provided
     *
     * Hash: 0x6058665D72302D3F | Since: 323
     */
    function playCheatApplied(cheat) {
        PlaystatsCheatApplied(cheat);
    }
    stats.playCheatApplied = playCheatApplied;
    /**
     * No comment provided
     *
     * Hash: 0x34B973047A2268B9 | Since: 323
     */
    function playClothChange(p0) {
        PlaystatsClothChange(p0, undefined, undefined, undefined, undefined);
    }
    stats.playClothChange = playClothChange;
    /**
     * No comment provided
     *
     * Hash: 0xCD0A8A9338681CF2 | Since: 1734
     */
    function playCollectiblePickedUp(objectHash, moneyAmount, rpAmount, chipsAmount) {
        if (typeof objectHash === 'string')
            objectHash = misc.getHashKey(objectHash);
        PlaystatsCollectible(0, objectHash, undefined, undefined, moneyAmount, rpAmount, chipsAmount, undefined, 0, undefined, undefined);
    }
    stats.playCollectiblePickedUp = playCollectiblePickedUp;
    /**
     * No comment provided
     *
     * Hash: 0xB7257BA2550EA10A | Since: 877
     */
    function playCopyRankIntoNewSlot() {
        PlaystatsCopyRankIntoNewSlot(undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playCopyRankIntoNewSlot = playCopyRankIntoNewSlot;
    /**
     * No comment provided
     *
     * Hash: 0xAFC7E5E075A96F46 | Since: 323
     */
    function playCrateCreated() {
        PlaystatsCrateCreated(0, 0, 0);
    }
    stats.playCrateCreated = playCrateCreated;
    /**
     * No comment provided
     *
     * Hash: 0x1CAE5D2E3F9A07F0 | Since: 323
     */
    function playCrateDropMissionDone() {
        PlaystatsCrateDropMissionDone(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playCrateDropMissionDone = playCrateDropMissionDone;
    /**
     * No comment provided
     *
     * Hash: 0x6DEE77AFF8C21BD1 | Since: 323
     */
    function playCreateMatchHistoryId2() {
        return Citizen.invokeNative('0x6DEE77AFF8C21BD1');
    }
    stats.playCreateMatchHistoryId2 = playCreateMatchHistoryId2;
    /**
     * No comment provided
     *
     * Hash: 0x0BC254FF3A911501 | Since: 1290
     */
    function playDarCheckpoint() {
        return PlaystatsDarMissionEnd();
    }
    stats.playDarCheckpoint = playDarCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0x2605663BD4F23B5D | Since: 757
     */
    function playDefendContrabandMission() {
        return PlaystatsDefendContraband();
    }
    stats.playDefendContrabandMission = playDefendContrabandMission;
    /**
     * No comment provided
     *
     * Hash: 0xD6CA58B3B53A0F22 | Since: 2189
     */
    function playDjMissionEnded() {
        Citizen.invokeNative('0xD6CA58B3B53A0F22', undefined);
    }
    stats.playDjMissionEnded = playDjMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0xB26F670685631727 | Since: 1493
     */
    function playDjUsage() {
        Citizen.invokeNative('0xB26F670685631727', undefined, undefined);
    }
    stats.playDjUsage = playDjUsage;
    /**
     * No comment provided
     *
     * Hash: 0x66C7BB2416ED3FCE | Since: 1493
     */
    function playDroneUsage() {
        PlaystatsDroneUsage(0, 0, 0);
    }
    stats.playDroneUsage = playDroneUsage;
    /**
     * No comment provided
     *
     * Hash: 0x848B66100EE33B05 | Since: 1011
     */
    function playDupeDetected() {
        return PlaystatsDupeDetection();
    }
    stats.playDupeDetected = playDupeDetected;
    /**
     * No comment provided
     *
     * Hash: 0x501478855A6074CE | Since: 877
     */
    function playEarnedMcPoints() {
        PlaystatsEarnedMcPoints(undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playEarnedMcPoints = playEarnedMcPoints;
    /**
     * No comment provided
     *
     * Hash: 0x878FF156D36E9956 | Since: 1290
     */
    function playEnterSessionPack() {
        return PlaystatsEnterSessionPack();
    }
    stats.playEnterSessionPack = playEnterSessionPack;
    /**
     * No comment provided
     *
     * Hash: 0xFA5B74BAB8A7EF99 | Since: 2372
     */
    function playExtraEvent() {
        PlaystatsExtraEvent(undefined);
    }
    stats.playExtraEvent = playExtraEvent;
    /**
     * No comment provided
     *
     * Hash: 0x4DC416F246A41FC8 | Since: 2189
     */
    function playFastTrvl() {
        Citizen.invokeNative('0x4DC416F246A41FC8', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playFastTrvl = playFastTrvl;
    /**
     * No comment provided
     *
     * Hash: 0xBAA2F0490E146BE8 | Since: 463
     */
    function playFmEventAtob() {
        Citizen.invokeNative('0xBAA2F0490E146BE8', undefined);
    }
    stats.playFmEventAtob = playFmEventAtob;
    /**
     * No comment provided
     *
     * Hash: 0x6A60E43998228229 | Since: 463
     */
    function playFmEventChallenges() {
        Citizen.invokeNative('0x6A60E43998228229', undefined);
    }
    stats.playFmEventChallenges = playFmEventChallenges;
    /**
     * No comment provided
     *
     * Hash: 0x3DE3AA516FB126A4 | Since: 463
     */
    function playFmEventCheckpointcollection() {
        Citizen.invokeNative('0x3DE3AA516FB126A4', undefined);
    }
    stats.playFmEventCheckpointcollection = playFmEventCheckpointcollection;
    /**
     * No comment provided
     *
     * Hash: 0x6551B1F7F6CD46EA | Since: 463
     */
    function playFmEventCompetitiveurbanwarfare() {
        Citizen.invokeNative('0x6551B1F7F6CD46EA', undefined);
    }
    stats.playFmEventCompetitiveurbanwarfare = playFmEventCompetitiveurbanwarfare;
    /**
     * No comment provided
     *
     * Hash: 0xEDBF6C9B0D2C65C8 | Since: 463
     */
    function playFmEventCriminaldamage() {
        Citizen.invokeNative('0xEDBF6C9B0D2C65C8', undefined);
    }
    stats.playFmEventCriminaldamage = playFmEventCriminaldamage;
    /**
     * No comment provided
     *
     * Hash: 0x0A9C7F36E5D7B683 | Since: 463
     */
    function playFmEventDeaddrop() {
        Citizen.invokeNative('0x0A9C7F36E5D7B683', undefined);
    }
    stats.playFmEventDeaddrop = playFmEventDeaddrop;
    /**
     * No comment provided
     *
     * Hash: 0x84DFC579C2FC214C | Since: 463
     */
    function playFmEventHotproperty() {
        Citizen.invokeNative('0x84DFC579C2FC214C', undefined);
    }
    stats.playFmEventHotproperty = playFmEventHotproperty;
    /**
     * No comment provided
     *
     * Hash: 0x2CD90358F67D0AA8 | Since: 463
     */
    function playFmEventHuntbeast() {
        Citizen.invokeNative('0x2CD90358F67D0AA8', undefined);
    }
    stats.playFmEventHuntbeast = playFmEventHuntbeast;
    /**
     * No comment provided
     *
     * Hash: 0x164C5FF663790845 | Since: 463
     */
    function playFmEventKingofthecastle() {
        Citizen.invokeNative('0x164C5FF663790845', undefined);
    }
    stats.playFmEventKingofthecastle = playFmEventKingofthecastle;
    /**
     * No comment provided
     *
     * Hash: 0x419615486BBF1956 | Since: 463
     */
    function playFmEventPasstheparcel() {
        Citizen.invokeNative('0x419615486BBF1956', undefined);
    }
    stats.playFmEventPasstheparcel = playFmEventPasstheparcel;
    /**
     * No comment provided
     *
     * Hash: 0x1A7CE7CD3E653485 | Since: 463
     */
    function playFmEventPennedin() {
        Citizen.invokeNative('0x1A7CE7CD3E653485', undefined);
    }
    stats.playFmEventPennedin = playFmEventPennedin;
    /**
     * No comment provided
     *
     * Hash: 0x8C9D11605E59D955 | Since: 463
     */
    function playFmEventUrbanwarfare() {
        Citizen.invokeNative('0x8C9D11605E59D955', undefined);
    }
    stats.playFmEventUrbanwarfare = playFmEventUrbanwarfare;
    /**
     * No comment provided
     *
     * Hash: 0xBFAFDB5FAAA5C5AB | Since: 463
     */
    function playFmEventVehicletarget() {
        Citizen.invokeNative('0xBFAFDB5FAAA5C5AB', undefined);
    }
    stats.playFmEventVehicletarget = playFmEventVehicletarget;
    /**
     * No comment provided
     *
     * Hash: 0xD8AFB345A9C5CCBB | Since: 1290
     */
    function playFmHeistPrepEnded() {
        return PlaystatsH2FmprepEnd();
    }
    stats.playFmHeistPrepEnded = playFmHeistPrepEnded;
    /**
     * No comment provided
     *
     * Hash: 0x46A70777BE6CEAB9 | Since: 2545
     */
    function playFmMissionEnd() {
        Citizen.invokeNative('0x46A70777BE6CEAB9', undefined, undefined, undefined, undefined);
    }
    stats.playFmMissionEnd = playFmMissionEnd;
    /**
     * No comment provided
     *
     * Hash: 0x1A0D4A6C336B7BC5 | Since: 1734
     */
    function playFreemodeCasinoMissionEnded() {
        return PlaystatsCasinoMissionEnded();
    }
    stats.playFreemodeCasinoMissionEnded = playFreemodeCasinoMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0x0F71DE29AB2258F1 | Since: 323
     */
    function playFriendActivity() {
        PlaystatsFriendActivity(0, false);
    }
    stats.playFriendActivity = playFriendActivity;
    /**
     * No comment provided
     *
     * Hash: 0x0EACDF8487D5155A | Since: 1103
     */
    function playGunrunningMissionEnded() {
        return PlaystatsGunrunMissionEnded();
    }
    stats.playGunrunningMissionEnded = playGunrunningMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0xDAF80797FC534BEC | Since: 1103
     */
    function playGunrunningRnd() {
        Citizen.invokeNative('0xDAF80797FC534BEC', undefined);
    }
    stats.playGunrunningRnd = playGunrunningRnd;
    /**
     * No comment provided
     *
     * Hash: 0xDFBD93BF2943E29B | Since: 1868
     */
    function playHeist3Drone() {
        Citizen.invokeNative('0xDFBD93BF2943E29B', undefined);
    }
    stats.playHeist3Drone = playHeist3Drone;
    /**
     * No comment provided
     *
     * Hash: 0x2E0259BABC27A327 | Since: 1868
     */
    function playHeist3Finale() {
        Citizen.invokeNative('0x2E0259BABC27A327', undefined);
    }
    stats.playHeist3Finale = playHeist3Finale;
    /**
     * No comment provided
     *
     * Hash: 0x92FC0EEDFAC04A14 | Since: 1868
     */
    function playHeist3Hack() {
        Citizen.invokeNative('0x92FC0EEDFAC04A14', undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playHeist3Hack = playHeist3Hack;
    /**
     * No comment provided
     *
     * Hash: 0x53C31853EC9531FF | Since: 1868
     */
    function playHeist3Prep() {
        Citizen.invokeNative('0x53C31853EC9531FF', undefined);
    }
    stats.playHeist3Prep = playHeist3Prep;
    /**
     * No comment provided
     *
     * Hash: 0xC1E963C58664B556 | Since: 2189
     */
    function playHeist4Finale() {
        Citizen.invokeNative('0xC1E963C58664B556', undefined);
    }
    stats.playHeist4Finale = playHeist4Finale;
    /**
     * No comment provided
     *
     * Hash: 0x2FA3173480008493 | Since: 2189
     */
    function playHeist4Hack() {
        Citizen.invokeNative('0x2FA3173480008493', undefined, undefined, undefined, undefined, undefined);
    }
    stats.playHeist4Hack = playHeist4Hack;
    /**
     * No comment provided
     *
     * Hash: 0xDFCDB14317A9B361 | Since: 2189
     */
    function playHeist4Prep() {
        Citizen.invokeNative('0xDFCDB14317A9B361', undefined);
    }
    stats.playHeist4Prep = playHeist4Prep;
    /**
     * No comment provided
     *
     * Hash: 0xF4FF020A08BC8863 | Since: 323
     */
    function playHeistSaveCheat(hash) {
        if (typeof hash === 'string')
            hash = misc.getHashKey(hash);
        PlaystatsHeistSaveCheat(hash, 0);
    }
    stats.playHeistSaveCheat = playHeistSaveCheat;
    /**
     * No comment provided
     *
     * Hash: 0x60EEDC12AF66E846 | Since: 757
     */
    function playHitContrabandDestroyLimit() {
        Citizen.invokeNative('0x60EEDC12AF66E846', undefined);
    }
    stats.playHitContrabandDestroyLimit = playHitContrabandDestroyLimit;
    /**
     * No comment provided
     *
     * Hash: 0xCB00196B31C39EB1 | Since: 323
     */
    function playHoldUpMissionDone() {
        PlaystatsHoldUpMissionDone(undefined, undefined, undefined, undefined);
    }
    stats.playHoldUpMissionDone = playHoldUpMissionDone;
    /**
     * No comment provided
     *
     * Hash: 0x2818FF6638CB09DE | Since: 2189
     */
    function playHubEntry() {
        Citizen.invokeNative('0x2818FF6638CB09DE', undefined);
    }
    stats.playHubEntry = playHubEntry;
    /**
     * No comment provided
     *
     * Hash: 0x5A46ACE5C4661132 | Since: 2545
     */
    function playHubExit() {
        Citizen.invokeNative('0x5A46ACE5C4661132', undefined);
    }
    stats.playHubExit = playHubExit;
    /**
     * No comment provided
     *
     * Hash: 0x5DA3A8DE8CB6226F | Since: 323
     */
    function playIdleKick(msStoodIdle) {
        PlaystatsIdleKick(msStoodIdle);
    }
    stats.playIdleKick = playIdleKick;
    /**
     * No comment provided
     *
     * Hash: 0x7D8BA05688AD64C7 | Since: 944
     */
    function playImpexpMissionEnded() {
        Citizen.invokeNative('0x7D8BA05688AD64C7', undefined);
    }
    stats.playImpexpMissionEnded = playImpexpMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0x2B69F5074C894811 | Since: 323
     */
    function playImportExportMissionDone() {
        PlaystatsImportExportMissionDone(undefined, undefined, undefined, undefined);
    }
    stats.playImportExportMissionDone = playImportExportMissionDone;
    /**
     * No comment provided
     *
     * Hash: 0x1E1497D0D2108115 | Since: 1290
     */
    function playInstancedHeistEnded() {
        return PlaystatsH2InstanceEnd(undefined, undefined, undefined);
    }
    stats.playInstancedHeistEnded = playInstancedHeistEnded;
    /**
     * No comment provided
     *
     * Hash: 0xFEA3F7E83C0610FA | Since: 2545
     */
    function playInstMissionEnd() {
        Citizen.invokeNative('0xFEA3F7E83C0610FA', undefined);
    }
    stats.playInstMissionEnd = playInstMissionEnd;
    /**
     * No comment provided
     *
     * Hash: 0x887DAD63CF5B7908 | Since: 2699
     */
    function playInventory() {
        PlaystatsInventory(undefined);
    }
    stats.playInventory = playInventory;
    /**
     * No comment provided
     *
     * Hash: 0xF8C54A461C3E11DC | Since: 323
     */
    function playJobActivityEnd() {
        return Citizen.invokeNative('0xF8C54A461C3E11DC');
    }
    stats.playJobActivityEnd = playJobActivityEnd;
    /**
     * No comment provided
     *
     * Hash: 0xF5BB8DAC426A52C0 | Since: 323
     */
    function playJobBend() {
        return PlaystatsJobBend();
    }
    stats.playJobBend = playJobBend;
    /**
     * No comment provided
     *
     * Hash: 0xA736CF7FB7C5BFF4 | Since: 323
     */
    function playJobLtsEnd() {
        return Citizen.invokeNative('0xA736CF7FB7C5BFF4');
    }
    stats.playJobLtsEnd = playJobLtsEnd;
    /**
     * No comment provided
     *
     * Hash: 0x14E0B2D1AD1044E0 | Since: 323
     */
    function playJobLtsRoundEnd() {
        return Citizen.invokeNative('0x14E0B2D1AD1044E0');
    }
    stats.playJobLtsRoundEnd = playJobLtsRoundEnd;
    /**
     * No comment provided
     *
     * Hash: 0xC5BE134EC7BA96A0 | Since: 323
     */
    function playLeaveJobChain() {
        PlaystatsLeaveJobChain(undefined, undefined, undefined, undefined, undefined);
    }
    stats.playLeaveJobChain = playLeaveJobChain;
    /**
     * No comment provided
     *
     * Hash: 0x810B5FCC52EC7FF0 | Since: 1868
     */
    function playMasterControl() {
        Citizen.invokeNative('0x810B5FCC52EC7FF0', undefined, undefined, undefined, undefined, undefined);
    }
    stats.playMasterControl = playMasterControl;
    /**
     * No comment provided
     *
     * Hash: 0xBC80E22DED931E3D | Since: 323
     */
    function playMatchStarted() {
        PlaystatsMatchStarted(undefined, undefined, undefined);
    }
    stats.playMatchStarted = playMatchStarted;
    /**
     * No comment provided
     *
     * Hash: 0x8989CBD7B4E82534 | Since: 877
     */
    function playMcClubhouseActivity() {
        Citizen.invokeNative('0x8989CBD7B4E82534', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playMcClubhouseActivity = playMcClubhouseActivity;
    /**
     * No comment provided
     *
     * Hash: 0x03C2EEBB04B3FB72 | Since: 877
     */
    function playMcFormationEnds() {
        Citizen.invokeNative('0x03C2EEBB04B3FB72', undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playMcFormationEnds = playMcFormationEnds;
    /**
     * No comment provided
     *
     * Hash: 0xF534D94DFA2EAD26 | Since: 877
     */
    function playMcKilledRivalMcMember() {
        Citizen.invokeNative('0xF534D94DFA2EAD26', undefined, undefined, undefined, undefined, undefined);
    }
    stats.playMcKilledRivalMcMember = playMcKilledRivalMcMember;
    /**
     * No comment provided
     *
     * Hash: 0xCC25A4553DFBF9EA | Since: 877
     */
    function playMcRequestBike() {
        Citizen.invokeNative('0xCC25A4553DFBF9EA', undefined, undefined, undefined, undefined, undefined);
    }
    stats.playMcRequestBike = playMcRequestBike;
    /**
     * No comment provided
     *
     * Hash: 0xC14BD9F5337219B2 | Since: 1493
     */
    function playMinigameUsage() {
        Citizen.invokeNative('0xC14BD9F5337219B2', undefined, undefined, undefined);
    }
    stats.playMinigameUsage = playMinigameUsage;
    /**
     * No comment provided
     *
     * Hash: 0xC900596A63978C1D | Since: 323
     */
    function playMissionCheckpoint() {
        PlaystatsMissionCheckpoint(undefined, undefined, undefined, undefined);
    }
    stats.playMissionCheckpoint = playMissionCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0xBF371CD2B64212FD | Since: 877
     */
    function playMissionEnded() {
        Citizen.invokeNative('0xBF371CD2B64212FD', undefined);
    }
    stats.playMissionEnded = playMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0x7C4BB33A8CED7324 | Since: 323
     */
    function playMissionOver() {
        PlaystatsMissionOver(undefined, undefined, undefined, false, false, false);
    }
    stats.playMissionOver = playMissionOver;
    /**
     * No comment provided
     *
     * Hash: 0xC19A2925C34D2231 | Since: 323
     */
    function playMissionStarted() {
        PlaystatsMissionStarted(undefined, undefined, undefined, false);
    }
    stats.playMissionStarted = playMissionStarted;
    /**
     * No comment provided
     *
     * Hash: 0xC03FAB2C2F92289B | Since: 1868
     */
    function playMissionVote() {
        Citizen.invokeNative('0xC03FAB2C2F92289B', undefined);
    }
    stats.playMissionVote = playMissionVote;
    /**
     * No comment provided
     *
     * Hash: 0x830C3A44EB3F2CF9 | Since: 1493
     */
    function playNightclubMissionEnded() {
        Citizen.invokeNative('0x830C3A44EB3F2CF9', undefined);
    }
    stats.playNightclubMissionEnded = playNightclubMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0x5CDAED54B34B0ED0 | Since: 1868
     */
    function playNjvsVote() {
        Citizen.invokeNative('0x5CDAED54B34B0ED0', undefined);
    }
    stats.playNjvsVote = playNjvsVote;
    /**
     * No comment provided
     *
     * Hash: 0x93054C88E6AA7C44 | Since: 323
     */
    function playNpcInvite() {
        PlaystatsNpcInvite(undefined);
    }
    stats.playNpcInvite = playNpcInvite;
    /**
     * No comment provided
     *
     * Hash: 0x0077F15613D36993 | Since: 1868
     */
    function playNpcPhone() {
        return Citizen.invokeNative('0x0077F15613D36993');
    }
    stats.playNpcPhone = playNpcPhone;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0x69DEA3E9DB727B4C | Since: 323
     */
    function playOddjobDone(totalTimeMs) {
        PlaystatsOddjobDone(totalTimeMs, 0, false);
    }
    stats.playOddjobDone = playOddjobDone;
    /**
     * No comment provided
     *
     * Hash: 0x9572BD4DD6B72122 | Since: 1180
     */
    function playPegasusAsPersonalAircraft(modelHash) {
        if (typeof modelHash === 'string')
            modelHash = misc.getHashKey(modelHash);
        PlaystatsPegasaircraft(modelHash);
    }
    stats.playPegasusAsPersonalAircraft = playPegasusAsPersonalAircraft;
    /**
     * No comment provided
     *
     * Hash: 0x203B381133817079 | Since: 393
     */
    function playPimenuHideOptions() {
        return PlaystatsPiMenuHideSettings();
    }
    stats.playPimenuHideOptions = playPimenuHideOptions;
    /**
     * No comment provided
     *
     * Hash: 0xBA739D6D5A05D6E7 | Since: 323
     */
    function playPropChange(p0) {
        PlaystatsPropChange(p0, 0, 0, 0);
    }
    stats.playPropChange = playPropChange;
    /**
     * No comment provided
     *
     * Hash: 0x90D0622866E80445 | Since: 323
     */
    function playQuickfixTool(element, item) {
        PlaystatsQuickfixTool(element, item);
    }
    stats.playQuickfixTool = playQuickfixTool;
    /**
     * No comment provided
     *
     * Hash: 0x5BF29846C6527C54 | Since: 1868
     */
    function playQuitMode() {
        Citizen.invokeNative('0x5BF29846C6527C54', undefined, undefined, undefined, undefined, undefined);
    }
    stats.playQuitMode = playQuitMode;
    /**
     * No comment provided
     *
     * Hash: 0x9C375C315099DDE4 | Since: 323
     */
    function playRaceCheckpoint(p0) {
        PlaystatsRaceCheckpoint(p0, undefined, 0, 0, undefined);
    }
    stats.playRaceCheckpoint = playRaceCheckpoint;
    /**
     * No comment provided
     *
     * Hash: 0xADDD1C754E2E2914 | Since: 323
     */
    function playRaceToPointMissionDone() {
        PlaystatsRaceToPointMissionDone(0, undefined, undefined, undefined);
    }
    stats.playRaceToPointMissionDone = playRaceToPointMissionDone;
    /**
     * No comment provided
     *
     * Hash: 0x71862B1D855F32E1 | Since: 323
     */
    function playRandomMissionDone(name) {
        PlaystatsRandomMissionDone(name, undefined, undefined, undefined);
    }
    stats.playRandomMissionDone = playRandomMissionDone;
    /**
     * No comment provided
     *
     * Hash: 0xC7F2DE41D102BFB4 | Since: 323
     */
    function playRankUp(rank) {
        PlaystatsRankUp(rank);
    }
    stats.playRankUp = playRankUp;
    /**
     * No comment provided
     *
     * Hash: 0x04D90BA8207ADA2D | Since: 757
     */
    function playRecoverContrabandMission() {
        return PlaystatsRecoverContraband();
    }
    stats.playRecoverContrabandMission = playRecoverContrabandMission;
    /**
     * No comment provided
     *
     * Hash: 0x27AA1C973CACFE63 | Since: 944
     */
    function playRivalBehavior() {
        Citizen.invokeNative('0x27AA1C973CACFE63', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    }
    stats.playRivalBehavior = playRivalBehavior;
    /**
     * No comment provided
     *
     * Hash: 0xBBA55BE9AAAABF44 | Since: 2372
     */
    function playRobberyFinale() {
        PlaystatsRobberyFinale(undefined);
    }
    stats.playRobberyFinale = playRobberyFinale;
    /**
     * No comment provided
     *
     * Hash: 0x1A67DFBF1F5C3835 | Since: 2372
     */
    function playRobberyPrep() {
        PlaystatsRobberyPrep(undefined);
    }
    stats.playRobberyPrep = playRobberyPrep;
    /**
     * No comment provided
     *
     * Hash: 0x121FB4DDDC2D5291 | Since: 323
     */
    function playRosBet(amount, act, player, cm) {
        PlaystatsRosBet(amount, act, player, cm);
    }
    stats.playRosBet = playRosBet;
    /**
     * No comment provided
     *
     * Hash: 0xC729991A9065376E | Since: 757
     */
    function playSellContrabandMission() {
        return PlaystatsSellContraband();
    }
    stats.playSellContrabandMission = playSellContrabandMission;
    /**
     * No comment provided
     *
     * Hash: 0xD1032E482629049E | Since: 323
     */
    function playSetJoinType(joinType) {
        PlaystatsSetJoinType(joinType);
    }
    stats.playSetJoinType = playSetJoinType;
    /**
     * No comment provided
     *
     * Hash: 0x176852ACAAC173D1 | Since: 323
     */
    function playShopItem() {
        PlaystatsShopItem(undefined, undefined, undefined, undefined, undefined);
    }
    stats.playShopItem = playShopItem;
    /**
     * No comment provided
     *
     * Hash: 0x320C35147D5B5DDD | Since: 1180
     */
    function playSmugglerMissionEnded() {
        return PlaystatsSmugMissionEnded();
    }
    stats.playSmugglerMissionEnded = playSmugglerMissionEnded;
    /**
     * No comment provided
     *
     * Hash: 0xBE509B0A3693DE8B | Since: 757
     */
    function playSpentPiCustomLoadout(amount) {
        PlaystatsSpentPiCustomLoadout(amount);
    }
    stats.playSpentPiCustomLoadout = playSpentPiCustomLoadout;
    /**
     * No comment provided
     *
     * Hash: 0x6731DE84A38BFAD0 | Since: 1604
     */
    function playSpinWheel() {
        PlaystatsSpectatorWheelSpin(0, 0, 0, 0);
    }
    stats.playSpinWheel = playSpinWheel;
    /**
     * No comment provided
     *
     * Hash: 0x098760C7461724CD | Since: 323
     */
    function playStartedSessionInOfflinemode() {
        PlaystatsStartOfflineMode();
    }
    stats.playStartedSessionInOfflinemode = playStartedSessionInOfflinemode;
    /**
     * Allows CEventNetworkStuntPerformed to be triggered.
     *
     * Hash: 0x928DBFB892638EF3 | Since: 791
     */
    function playStartTrackingStunts() {
        PlaystatsStartTrackingStunts();
    }
    stats.playStartTrackingStunts = playStartTrackingStunts;
    /**
     * No comment provided
     *
     * Hash: 0x35E39E5570358630 | Since: 1493
     */
    function playStoneHatchetEnded() {
        return PlaystatsStoneHatchetEnd();
    }
    stats.playStoneHatchetEnded = playStoneHatchetEnded;
    /**
     * Disallows CEventNetworkStuntPerformed to be triggered.
     *
     * Hash: 0x8A800DACCC0DA55D | Since: 791
     */
    function playStopTrackingStunts() {
        PlaystatsStopTrackingStunts();
    }
    stats.playStopTrackingStunts = playStopTrackingStunts;
    /**
     * No comment provided
     *
     * Hash: 0xD4367D310F079DB0 | Since: 2189
     */
    function playSubWeap() {
        Citizen.invokeNative('0xD4367D310F079DB0', undefined, undefined, undefined, undefined);
    }
    stats.playSubWeap = playSubWeap;
    /**
     * No comment provided
     *
     * Hash: 0x0A50D2604E05CB94 | Since: 877
     */
    function playSwitchMcEmblem() {
        PlaystatsChangeMcEmblem(undefined, undefined, undefined, undefined, undefined);
    }
    stats.playSwitchMcEmblem = playSwitchMcEmblem;
    /**
     * No comment provided
     *
     * Hash: 0x35EEC6C2BC821A71 | Since: 1734
     */
    function playSwitchPassiveMode() {
        PlaystatsPassiveMode(false, 0, 0, 0);
    }
    stats.playSwitchPassiveMode = playSwitchPassiveMode;
    /**
     * No comment provided
     *
     * Hash: 0x10A691F5756416D0 | Since: 2944
     */
    function playVehDel(bossId1, bossId2, bossType, vehicleID, reason) {
        Citizen.invokeNative('0x10A691F5756416D0', bossId1, bossId2, bossType, vehicleID, reason);
    }
    stats.playVehDel = playVehDel;
    /**
     * No comment provided
     *
     * Hash: 0x2D7A9B577E72385E | Since: 1493
     */
    function playWarehouseMissionEnded() {
        Citizen.invokeNative('0x2D7A9B577E72385E', undefined);
    }
    stats.playWarehouseMissionEnded = playWarehouseMissionEnded;
    /**
     * This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
     *
     * Hash: 0xE95C8A1875A02CA4 | Since: 323
     */
    function playWeaponModeChange(weaponHash, componentHashTo, componentHashFrom) {
        if (typeof weaponHash === 'string')
            weaponHash = misc.getHashKey(weaponHash);
        if (typeof componentHashTo === 'string')
            componentHashTo = misc.getHashKey(componentHashTo);
        if (typeof componentHashFrom === 'string')
            componentHashFrom = misc.getHashKey(componentHashFrom);
        PlaystatsWeaponModeChange(weaponHash, componentHashTo, componentHashFrom);
    }
    stats.playWeaponModeChange = playWeaponModeChange;
    /**
     * No comment provided
     *
     * Hash: 0xDDF24D535060F811 | Since: 323
     */
    function playWebsiteVisited(scaleformHash) {
        if (typeof scaleformHash === 'string')
            scaleformHash = misc.getHashKey(scaleformHash);
        PlaystatsWebsiteVisited(scaleformHash, 0);
    }
    stats.playWebsiteVisited = playWebsiteVisited;
    /**
     * No comment provided
     *
     * Hash: 0x30A6614C1F7799B8 | Since: 323
     */
    function presenceEventUpdatestatFloat(statHash, value) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        PresenceEventUpdatestatFloat(statHash, value, 0);
    }
    stats.presenceEventUpdatestatFloat = presenceEventUpdatestatFloat;
    /**
     * No comment provided
     *
     * Hash: 0x11FF1C80276097ED | Since: 323
     */
    function presenceEventUpdatestatInt(statHash, value) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        PresenceEventUpdatestatInt(statHash, value, 0);
    }
    stats.presenceEventUpdatestatInt = presenceEventUpdatestatInt;
    /**
     * No comment provided
     *
     * Hash: 0x6483C25849031C4F | Since: 323
     */
    function presenceEventUpdatestatIntWithString(statHash, value, _string) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        Citizen.invokeNative('0x6483C25849031C4F', statHash, value, 0, _string);
    }
    stats.presenceEventUpdatestatIntWithString = presenceEventUpdatestatIntWithString;
    /**
     * No comment provided
     *
     * Hash: 0x7033EEFD9B28088E | Since: 678
     */
    function sendMetricGhostingToPlayer() {
        Citizen.invokeNative('0x7033EEFD9B28088E', undefined);
    }
    stats.sendMetricGhostingToPlayer = sendMetricGhostingToPlayer;
    /**
     * No comment provided
     *
     * Hash: 0x015B03EE1C43E6EC | Since: 757
     */
    function sendMetricPunishBodyguard() {
        Citizen.invokeNative('0x015B03EE1C43E6EC', undefined);
    }
    stats.sendMetricPunishBodyguard = sendMetricPunishBodyguard;
    /**
     * No comment provided
     *
     * Hash: 0xAA525DFF66BB82F5 | Since: 757
     */
    function sendMetricVipPoach() {
        Citizen.invokeNative('0xAA525DFF66BB82F5', undefined, undefined, undefined);
    }
    stats.sendMetricVipPoach = sendMetricVipPoach;
    /**
     * No comment provided
     *
     * Hash: 0x0D01D20616FC73FB | Since: 323
     */
    function setFreemodePrologueDone(characterSlot) {
        Citizen.invokeNative('0x0D01D20616FC73FB', undefined, characterSlot);
    }
    stats.setFreemodePrologueDone = setFreemodePrologueDone;
    /**
     * Sets profile setting 940 and 941
     *
     * Hash: 0x79D310A861697CC9 | Since: 2699
     */
    function setFreemodeStrandProgressionStatus(profileSetting, settingValue) {
        Citizen.invokeNative('0x79D310A861697CC9', profileSetting, settingValue);
    }
    stats.setFreemodeStrandProgressionStatus = setFreemodeStrandProgressionStatus;
    /**
     * No comment provided
     *
     * Hash: 0xC141B8917E0017EC | Since: 323
     */
    function setHasPostedAllVehiclesDriven() {
        Citizen.invokeNative('0xC141B8917E0017EC');
    }
    stats.setHasPostedAllVehiclesDriven = setHasPostedAllVehiclesDriven;
    /**
     * Sets profile setting 866
     *
     * Hash: 0xDAC073C7901F9E15 | Since: 323
     */
    function setHasSpecialeditionContent(value) {
        SetHasContentUnlocksFlags(value);
    }
    stats.setHasSpecialeditionContent = setHasSpecialeditionContent;
    /**
     * No comment provided
     *
     * Hash: 0x723C1CE13FBFDB67 | Since: 323
     */
    function setJobActivityIdStarted(characterSlot) {
        Citizen.invokeNative('0x723C1CE13FBFDB67', undefined, characterSlot);
    }
    stats.setJobActivityIdStarted = setJobActivityIdStarted;
    /**
     * No comment provided
     *
     * Hash: 0xDB8A58AEAA67CD07 | Since: 2545
     */
    function setPackedStatBoolCode(index, value, characterSlot) {
        Citizen.invokeNative('0xDB8A58AEAA67CD07', index, value, characterSlot);
    }
    stats.setPackedStatBoolCode = setPackedStatBoolCode;
    /**
     * No comment provided
     *
     * Hash: 0x1581503AE529CD2E | Since: 2545
     */
    function setPackedStatIntCode(index, value, characterSlot) {
        Citizen.invokeNative('0x1581503AE529CD2E', index, value, characterSlot);
    }
    stats.setPackedStatIntCode = setPackedStatIntCode;
    /**
     * Sets profile setting 935
     *
     * Hash: 0x55384438FC55AD8E | Since: 323
     */
    function setProfileSettingCreatorCtfDone(value) {
        Citizen.invokeNative('0x55384438FC55AD8E', value);
    }
    stats.setProfileSettingCreatorCtfDone = setProfileSettingCreatorCtfDone;
    /**
     * Sets profile setting 934
     *
     * Hash: 0x38BAAA5DD4C9D19F | Since: 323
     */
    function setProfileSettingCreatorDmDone(value) {
        Citizen.invokeNative('0x38BAAA5DD4C9D19F', value);
    }
    stats.setProfileSettingCreatorDmDone = setProfileSettingCreatorDmDone;
    /**
     * Sets profile setting 933
     *
     * Hash: 0xF1A1803D3476F215 | Since: 323
     */
    function setProfileSettingCreatorRacesDone(value) {
        Citizen.invokeNative('0xF1A1803D3476F215', value);
    }
    stats.setProfileSettingCreatorRacesDone = setProfileSettingCreatorRacesDone;
    /**
     * No comment provided
     *
     * Hash: 0xB475F27C6A994D65 | Since: 323
     */
    function setProfileSettingPrologueComplete() {
        SetProfileSettingPrologueComplete();
    }
    stats.setProfileSettingPrologueComplete = setProfileSettingPrologueComplete;
    /**
     * Sets profile setting 939
     *
     * Hash: 0xC67E2DA1CBE759E2 | Since: 1734
     */
    function setProfileSettingSpChopMissionComplete() {
        Citizen.invokeNative('0xC67E2DA1CBE759E2');
    }
    stats.setProfileSettingSpChopMissionComplete = setProfileSettingSpChopMissionComplete;
    /**
     * Sets profile setting 501
     *
     * Hash: 0xF6792800AC95350D | Since: 323
     */
    function setSaveMigrationTransactionIdWarning(transactionId) {
        SetSaveMigrationTransactionId(transactionId);
    }
    stats.setSaveMigrationTransactionIdWarning = setSaveMigrationTransactionIdWarning;
    /**
     * No comment provided
     *
     * Hash: 0x3EBEAC6C3F81F6BD | Since: 573
     */
    function startBeingBoss() {
        Citizen.invokeNative('0x3EBEAC6C3F81F6BD', undefined, undefined, undefined);
    }
    stats.startBeingBoss = startBeingBoss;
    /**
     * No comment provided
     *
     * Hash: 0x96E6D5150DBF1C09 | Since: 573
     */
    function startBeingGoon() {
        Citizen.invokeNative('0x96E6D5150DBF1C09', undefined, undefined, undefined);
    }
    stats.startBeingGoon = startBeingGoon;
    /**
     * This native does absolutely nothing, just a nullsub
     *
     * Hash: 0xC01D2470F22CDE5A | Since: 2372
     */
    function completedCharacterCreation() {
        Citizen.invokeNative('0xC01D2470F22CDE5A', undefined);
    }
    stats.completedCharacterCreation = completedCharacterCreation;
    /**
     * No comment provided
     *
     * Hash: 0x9B4BD21D69B1E609 | Since: 323
     */
    function statClearDirtyReadDetected() {
        Citizen.invokeNative('0x9B4BD21D69B1E609');
    }
    stats.statClearDirtyReadDetected = statClearDirtyReadDetected;
    /**
     * No comment provided
     *
     * Hash: 0xA8733668D1047B51 | Since: 323
     */
    function statClearPendingSaves() {
        Citizen.invokeNative('0xA8733668D1047B51', undefined);
    }
    stats.statClearPendingSaves = statClearPendingSaves;
    /**
     * Example:
     *
     * for (v_2 = 0; v_2 <= 4; v_2 += 1) {
     * `STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);`
     * }
     *
     * Hash: 0xEB0A72181D4AA4AD | Since: 323
     */
    function statClearSlotForReload(statSlot) {
        return StatClearSlotForReload(statSlot);
    }
    stats.statClearSlotForReload = statClearSlotForReload;
    /**
     * No comment provided
     *
     * Hash: 0x7F2C4CDF2E82DF4C | Since: 323
     */
    function statCloudSlotLoadFailed() {
        return Citizen.invokeNative('0x7F2C4CDF2E82DF4C', 0);
    }
    stats.statCloudSlotLoadFailed = statCloudSlotLoadFailed;
    /**
     * No comment provided
     *
     * Hash: 0xE496A53BA5F50A56 | Since: 323
     */
    function statCloudSlotLoadFailedCode() {
        return Citizen.invokeNative('0xE496A53BA5F50A56', undefined);
    }
    stats.statCloudSlotLoadFailedCode = statCloudSlotLoadFailedCode;
    /**
     * No comment provided
     *
     * Hash: 0x7E6946F68A38B74F | Since: 323
     */
    function statCloudSlotSaveFailed() {
        return Citizen.invokeNative('0x7E6946F68A38B74F', undefined);
    }
    stats.statCloudSlotSaveFailed = statCloudSlotSaveFailed;
    /**
     * No comment provided
     *
     * Hash: 0xBED9F5693F34ED17 | Since: 323
     */
    function statCommunityGetHistory(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return Citizen.invokeNative('0xBED9F5693F34ED17', statName, 0);
    }
    stats.statCommunityGetHistory = statCommunityGetHistory;
    /**
     * No comment provided
     *
     * Hash: 0x5A556B229A169402 | Since: 323
     */
    function statCommunityStartSynch() {
        return Citizen.invokeNative('0x5A556B229A169402');
    }
    stats.statCommunityStartSynch = statCommunityStartSynch;
    /**
     * No comment provided
     *
     * Hash: 0xB1D2BB1E1631F5B1 | Since: 323
     */
    function statCommunitySynchIsPending() {
        return Citizen.invokeNative('0xB1D2BB1E1631F5B1');
    }
    stats.statCommunitySynchIsPending = statCommunitySynchIsPending;
    /**
     * p0 is characterSlot? seems range from 0 to 2
     *
     * Hash: 0x49A49BED12794D70 | Since: 323
     */
    function statDeleteSlot() {
        return StatDeleteSlot(0);
    }
    stats.statDeleteSlot = statDeleteSlot;
    /**
     * Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
     *
     * Hash: 0x629526ABA383BCAA | Since: 323
     */
    function statDisableTracking() {
        Citizen.invokeNative('0x629526ABA383BCAA');
    }
    stats.statDisableTracking = statDisableTracking;
    /**
     * No comment provided
     *
     * Hash: 0x98E2BC1CA26287C3 | Since: 323
     */
    function statEnableTracking() {
        Citizen.invokeNative('0x98E2BC1CA26287C3');
    }
    stats.statEnableTracking = statEnableTracking;
    /**
     * No comment provided
     *
     * Hash: 0x6A7F19756F1A9016 | Since: 2060
     */
    function statGetBlockSaves() {
        return Citizen.invokeNative('0x6A7F19756F1A9016');
    }
    stats.statGetBlockSaves = statGetBlockSaves;
    /**
     * No comment provided
     *
     * Hash: 0x11B5E6D2AE73F48E | Since: 323
     */
    function statGetBool(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return StatGetBool(statHash, undefined);
    }
    stats.statGetBool = statGetBool;
    /**
     * No comment provided
     *
     * Hash: 0x567384DFA67029E6 | Since: 323
     */
    function statGetCancelSaveMigrationStatus() {
        return StatGetCancelSaveMigrationStatus();
    }
    stats.statGetCancelSaveMigrationStatus = statGetCancelSaveMigrationStatus;
    /**
     * Fly low to the ground for the longest distance
     *
     * Hash: 0x6E0A5253375C4584 | Since: 463
     */
    function statGetChallengeFlyingDist() {
        return Citizen.invokeNative('0x6E0A5253375C4584');
    }
    stats.statGetChallengeFlyingDist = statGetChallengeFlyingDist;
    /**
     * Drive the furthest distance in a land vehicle without crashing
     *
     * Hash: 0xBA9749CC94C1FD85 | Since: 463
     */
    function statGetCurrentDriveNocrashDistance() {
        return Citizen.invokeNative('0xBA9749CC94C1FD85');
    }
    stats.statGetCurrentDriveNocrashDistance = statGetCurrentDriveNocrashDistance;
    /**
     * Reverse the longest distance without crashing
     *
     * Hash: 0x32CAC93C9DE73D32 | Since: 463
     */
    function statGetCurrentDrivingReverseDistance() {
        return Citizen.invokeNative('0x32CAC93C9DE73D32');
    }
    stats.statGetCurrentDrivingReverseDistance = statGetCurrentDrivingReverseDistance;
    /**
     * Perform the longest stoppie on a motorcycle
     *
     * Hash: 0x84A810B375E69C0E | Since: 463
     */
    function statGetCurrentFrontWheelDistance() {
        return Citizen.invokeNative('0x84A810B375E69C0E');
    }
    stats.statGetCurrentFrontWheelDistance = statGetCurrentFrontWheelDistance;
    /**
     * Perform the longest jump in a land vehicle
     *
     * Hash: 0x9EC8858184CD253A | Since: 463
     */
    function statGetCurrentJumpDistance() {
        return Citizen.invokeNative('0x9EC8858184CD253A');
    }
    stats.statGetCurrentJumpDistance = statGetCurrentJumpDistance;
    /**
     * Perform the most near misses with other vehicles in a land vehicle without crashing
     *
     * Hash: 0xE8853FBCE7D8D0D6 | Since: 463
     */
    function statGetCurrentNearMissNocrashPrecise() {
        return Citizen.invokeNative('0xE8853FBCE7D8D0D6');
    }
    stats.statGetCurrentNearMissNocrashPrecise = statGetCurrentNearMissNocrashPrecise;
    /**
     * Perform the longest wheelie on a motorcycle
     *
     * Hash: 0xA943FD1722E11EFD | Since: 463
     */
    function statGetCurrentRearWheelDistance() {
        return Citizen.invokeNative('0xA943FD1722E11EFD');
    }
    stats.statGetCurrentRearWheelDistance = statGetCurrentRearWheelDistance;
    /**
     * Fall the longest distance with a parachute before opening it
     *
     * Hash: 0xAFF47709F1D5DCCE | Since: 463
     */
    function statGetCurrentSkydivingDistance() {
        return Citizen.invokeNative('0xAFF47709F1D5DCCE');
    }
    stats.statGetCurrentSkydivingDistance = statGetCurrentSkydivingDistance;
    /**
     * Achieve the highest speed in a land vehicle
     *
     * Hash: 0x55A8BECAF28A4EB7 | Since: 463
     */
    function statGetCurrentSpeed() {
        return Citizen.invokeNative('0x55A8BECAF28A4EB7');
    }
    stats.statGetCurrentSpeed = statGetCurrentSpeed;
    /**
     * p3 is probably characterSlot or BOOL save, always -1
     *
     * Hash: 0x8B0FACEFC36C824B | Since: 323
     */
    function statGetDate(statHash, numFields) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return StatGetDate(statHash, numFields, undefined);
    }
    stats.statGetDate = statGetDate;
    /**
     * No comment provided
     *
     * Hash: 0xD7AE6C9C9C6AC54C | Since: 323
     */
    function statGetFloat(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return StatGetFloat(statHash, undefined);
    }
    stats.statGetFloat = statGetFloat;
    /**
     * No comment provided
     *
     * Hash: 0x1A8EA222F9C67DBB | Since: 463
     */
    function statGetFlyingAltitude() {
        return Citizen.invokeNative('0x1A8EA222F9C67DBB');
    }
    stats.statGetFlyingAltitude = statGetFlyingAltitude;
    /**
     * p2 appears to always be -1
     *
     *
     * Hash: 0x767FBC2AC802EF3D | Since: 323
     */
    function statGetInt(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return StatGetInt(statHash, 0);
    }
    stats.statGetInt = statGetInt;
    /**
     * No comment provided
     *
     * Hash: 0x5473D4195058B2E4 | Since: 323
     */
    function statGetLicensePlate(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatGetLicensePlate(statName);
    }
    stats.statGetLicensePlate = statGetLicensePlate;
    /**
     * No comment provided
     *
     * Hash: 0xC0E0D686DDFC6EAE | Since: 323
     */
    function statGetLoadSafeToProgressToMpFromSp() {
        return Citizen.invokeNative('0xC0E0D686DDFC6EAE');
    }
    stats.statGetLoadSafeToProgressToMpFromSp = statGetLoadSafeToProgressToMpFromSp;
    /**
     * p4 is probably characterSlot or BOOL save
     *
     * Hash: 0x655185A06D9EEAAB | Since: 323
     */
    function statGetMaskedInt(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return StatGetMaskedInt(statHash, 0, 0, undefined);
    }
    stats.statGetMaskedInt = statGetMaskedInt;
    /**
     * No comment provided
     *
     * Hash: 0xE0E854F5280FB769 | Since: 323
     */
    function statGetNumberOfDays(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatGetNumberOfDays(statName);
    }
    stats.statGetNumberOfDays = statGetNumberOfDays;
    /**
     * No comment provided
     *
     * Hash: 0xF2D4B2FE415AAFC3 | Since: 323
     */
    function statGetNumberOfHours(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatGetNumberOfHours(statName);
    }
    stats.statGetNumberOfHours = statGetNumberOfHours;
    /**
     * No comment provided
     *
     * Hash: 0x7583B4BE4C5A41B5 | Since: 323
     */
    function statGetNumberOfMinutes(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatGetNumberOfMinutes(statName);
    }
    stats.statGetNumberOfMinutes = statGetNumberOfMinutes;
    /**
     * No comment provided
     *
     * Hash: 0x2CE056FF3723F00B | Since: 323
     */
    function statGetNumberOfSeconds(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatGetNumberOfSeconds(statName);
    }
    stats.statGetNumberOfSeconds = statGetNumberOfSeconds;
    /**
     * p3 is probably characterSlot or BOOL save, always -1
     *
     * Hash: 0x350F82CCB186AA1B | Since: 323
     */
    function statGetPos(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatGetPos(statName, undefined);
    }
    stats.statGetPos = statGetPos;
    /**
     * No comment provided
     *
     * Hash: 0xF11F01D98113536A | Since: 463
     */
    function statGetRecordedValue() {
        return Citizen.invokeNative('0xF11F01D98113536A');
    }
    stats.statGetRecordedValue = statGetRecordedValue;
    /**
     * No comment provided
     *
     * Hash: 0xCE5AA445ABA8DEE0 | Since: 323
     */
    function statGetSaveMigrationConsumeContentStatus() {
        return StatGetSaveMigrationConsumeContentUnlockStatus();
    }
    stats.statGetSaveMigrationConsumeContentStatus = statGetSaveMigrationConsumeContentStatus;
    /**
     * No comment provided
     *
     * Hash: 0x886913BBEACA68C1 | Since: 323
     */
    function statGetSaveMigrationStatus() {
        return StatGetSaveMigrationStatus();
    }
    stats.statGetSaveMigrationStatus = statGetSaveMigrationStatus;
    /**
     * p1 is always -1 in the script files
     *
     * Hash: 0xE50384ACC2C3DB74 | Since: 323
     */
    function statGetString(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return StatGetString(statHash, 0);
    }
    stats.statGetString = statGetString;
    /**
     * Returns the rockstar ID (user id) value of a given stat. Returns "STAT_UNKNOWN" if the statHash is invalid or the stat has no userId
     *
     * Hash: 0x2365C388E393BBE2 | Since: 323
     */
    function statGetUserId(statHash) {
        if (typeof statHash === 'string')
            statHash = misc.getHashKey(statHash);
        return StatGetUserId(statHash);
    }
    stats.statGetUserId = statGetUserId;
    /**
     * Travel the furthest distance when bailing from a vehicle
     *
     * Hash: 0x0B8B7F74BF061C6D | Since: 463
     */
    function statGetVehicleBailDistance() {
        return Citizen.invokeNative('0x0B8B7F74BF061C6D');
    }
    stats.statGetVehicleBailDistance = statGetVehicleBailDistance;
    /**
     * No comment provided
     *
     * Hash: 0x9B5A68C6489E9909 | Since: 323
     */
    function statIncrement(statName, value) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        StatIncrement(statName, value);
    }
    stats.statIncrement = statIncrement;
    /**
     * Or non-flyable area
     *
     * Hash: 0xF9F2922717B819EC | Since: 505
     */
    function statIsPlayerVehicleAboveOcean() {
        return Citizen.invokeNative('0xF9F2922717B819EC');
    }
    stats.statIsPlayerVehicleAboveOcean = statIsPlayerVehicleAboveOcean;
    /**
     * No comment provided
     *
     * Hash: 0x8B9CDBD6C566C38C | Since: 944
     */
    function statIsRecordingStat() {
        return Citizen.invokeNative('0x8B9CDBD6C566C38C');
    }
    stats.statIsRecordingStat = statIsRecordingStat;
    /**
     * No comment provided
     *
     * Hash: 0xBE3DB208333D9844 | Since: 463
     */
    function statIsTrackingEnabled() {
        return Citizen.invokeNative('0xBE3DB208333D9844');
    }
    stats.statIsTrackingEnabled = statIsTrackingEnabled;
    /**
     * No comment provided
     *
     * Hash: 0xA651443F437B1CE6 | Since: 323
     */
    function statLoad(statSlot) {
        return StatLoad(statSlot);
    }
    stats.statLoad = statLoad;
    /**
     * No comment provided
     *
     * Hash: 0xECB41AC6AB754401 | Since: 323
     */
    function statLoadDirtyReadDetected() {
        return Citizen.invokeNative('0xECB41AC6AB754401');
    }
    stats.statLoadDirtyReadDetected = statLoadDirtyReadDetected;
    /**
     * No comment provided
     *
     * Hash: 0xA1750FFAFA181661 | Since: 323
     */
    function statLoadPending(statSlot) {
        return StatLoadPending(statSlot);
    }
    stats.statLoadPending = statLoadPending;
    /**
     * p0 seems to range from 0 to 7
     *
     * Hash: 0xA78B8FA58200DA56 | Since: 323
     */
    function statLocalResetAllOnlineCharacter() {
        Citizen.invokeNative('0xA78B8FA58200DA56', 0);
    }
    stats.statLocalResetAllOnlineCharacter = statLocalResetAllOnlineCharacter;
    /**
     * No comment provided
     *
     * Hash: 0x4C89FE2BDEB3F169 | Since: 323
     */
    function statMigrateCheckAlreadyDone() {
        return Citizen.invokeNative('0x4C89FE2BDEB3F169');
    }
    stats.statMigrateCheckAlreadyDone = statMigrateCheckAlreadyDone;
    /**
     * No comment provided
     *
     * Hash: 0x5BD5F255321C4AAF | Since: 323
     */
    function statMigrateCheckGetIsPlatformAvailable() {
        return Citizen.invokeNative('0x5BD5F255321C4AAF', 0);
    }
    stats.statMigrateCheckGetIsPlatformAvailable = statMigrateCheckGetIsPlatformAvailable;
    /**
     * No comment provided
     *
     * Hash: 0xDEAAF77EB3687E97 | Since: 323
     */
    function statMigrateCheckGetPlatformStatus() {
        return Citizen.invokeNative('0xDEAAF77EB3687E97', 0);
    }
    stats.statMigrateCheckGetPlatformStatus = statMigrateCheckGetPlatformStatus;
    /**
     * No comment provided
     *
     * Hash: 0xC6E0E2616A7576BB | Since: 323
     */
    function statMigrateCheckStart() {
        return Citizen.invokeNative('0xC6E0E2616A7576BB');
    }
    stats.statMigrateCheckStart = statMigrateCheckStart;
    /**
     * No comment provided
     *
     * Hash: 0xC847B43F369AC0B5 | Since: 323
     */
    function statMigrateClearForRestart() {
        Citizen.invokeNative('0xC847B43F369AC0B5');
    }
    stats.statMigrateClearForRestart = statMigrateClearForRestart;
    /**
     * No comment provided
     *
     * Hash: 0x9A62EC95AE10E011 | Since: 323
     */
    function statMigrateSavegameGetStatus() {
        return Citizen.invokeNative('0x9A62EC95AE10E011');
    }
    stats.statMigrateSavegameGetStatus = statMigrateSavegameGetStatus;
    /**
     * platformName must be one of the following: ps3, xbox360, ps4, xboxone
     *
     * Hash: 0xA5C80D8E768A9E66 | Since: 323
     */
    function statMigrateSavegameStart(platformName) {
        return StatMigrateSave(platformName);
    }
    stats.statMigrateSavegameStart = statMigrateSavegameStart;
    /**
     * No comment provided
     *
     * Hash: 0x428EAF89E24F6C36 | Since: 323
     */
    function statNetworkIncrementOnSuicide() {
        LeaderboardsDeaths(undefined, 0);
    }
    stats.statNetworkIncrementOnSuicide = statNetworkIncrementOnSuicide;
    /**
     * p0 seems to range from 0 to 7
     *
     * Hash: 0x26D7399B9587FE89 | Since: 323
     */
    function statResetAllOnlineCharacter() {
        Citizen.invokeNative('0x26D7399B9587FE89', 0);
    }
    stats.statResetAllOnlineCharacter = statResetAllOnlineCharacter;
    /**
     * This function is hard-coded to always return 1.
     *
     * Hash: 0xB3DA2606774A8E2D | Since: 323
     */
    function statRollbackSaveMigration() {
        return Citizen.invokeNative('0xB3DA2606774A8E2D');
    }
    stats.statRollbackSaveMigration = statRollbackSaveMigration;
    /**
     * No comment provided
     *
     * Hash: 0xE07BCA305B82D2FD | Since: 323
     */
    function ave() {
        return StatSave(0, false, 0, false);
    }
    stats.ave = ave;
    /**
     * No comment provided
     *
     * Hash: 0x4FEF53183C3C6414 | Since: 323
     */
    function aveMigrationCancelPendingOperation() {
        return StatSaveMigrationCancel();
    }
    stats.aveMigrationCancelPendingOperation = aveMigrationCancelPendingOperation;
    /**
     * No comment provided
     *
     * Hash: 0x3270F67EED31FBC1 | Since: 323
     */
    function aveMigrationConsumeContent(contentId, srcPlatform, srcGamerHandle) {
        if (typeof contentId === 'string')
            contentId = misc.getHashKey(contentId);
        return StatSaveMigrationConsumeContentUnlock(contentId, srcPlatform, srcGamerHandle);
    }
    stats.aveMigrationConsumeContent = aveMigrationConsumeContent;
    /**
     * No comment provided
     *
     * Hash: 0x7D3A583856F2C5AC | Since: 323
     */
    function avePending() {
        return StatSavePending();
    }
    stats.avePending = avePending;
    /**
     * No comment provided
     *
     * Hash: 0xBBB6AD006F1BBEA3 | Since: 323
     */
    function avePendingOrRequested() {
        return StatSavePendingOrRequested();
    }
    stats.avePendingOrRequested = avePendingOrRequested;
    /**
     * No comment provided
     *
     * Hash: 0xF434A10BA01C37D0 | Since: 323
     */
    function etBlockSaves(toggle) {
        StatSetBlockSaves(toggle);
    }
    stats.etBlockSaves = etBlockSaves;
    /**
     * Example:
     * `STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);`
     *
     * Hash: 0x4B33C4243DE0C432 | Since: 323
     */
    function etBool(statName, value, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetBool(statName, value, save);
    }
    stats.etBool = etBool;
    /**
     * No comment provided
     *
     * Hash: 0x047CBED6F6F8B63C | Since: 323
     */
    function etCheatIsActive() {
        StatSetCheatIsActive();
    }
    stats.etCheatIsActive = etCheatIsActive;
    /**
     * p1 always true.
     *
     * Hash: 0xC2F84B7F9C4D0C61 | Since: 323
     */
    function etCurrentPosixTime(statName) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetCurrentPosixTime(statName, false);
    }
    stats.etCurrentPosixTime = etCurrentPosixTime;
    /**
     * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
     *
     * The structure looks like this:
     *
     * int year
     * int month
     * int day
     * int hour
     * int minute
     * int second
     * int millisecond
     *
     * `The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.`
     *
     * Hash: 0x2C29BFB64F4FCBE4 | Since: 323
     */
    function etDate(statName, numFields, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetDate(statName, numFields, save);
    }
    stats.etDate = etDate;
    /**
     * Example:
     * `STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);`
     *
     * Hash: 0x4851997F37FE9B3C | Since: 323
     */
    function etFloat(statName, value, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetFloat(statName, value, save);
    }
    stats.etFloat = etFloat;
    /**
     * The following values have been found in the decompiled scripts:
     * "RC_ABI1"
     * "RC_ABI2"
     * "RC_BA1"
     * "RC_BA2"
     * "RC_BA3"
     * "RC_BA3A"
     * "RC_BA3C"
     * "RC_BA4"
     * "RC_DRE1"
     * "RC_EPS1"
     * "RC_EPS2"
     * "RC_EPS3"
     * "RC_EPS4"
     * "RC_EPS5"
     * "RC_EPS6"
     * "RC_EPS7"
     * "RC_EPS8"
     * "RC_EXT1"
     * "RC_EXT2"
     * "RC_EXT3"
     * "RC_EXT4"
     * "RC_FAN1"
     * "RC_FAN2"
     * "RC_FAN3"
     * "RC_HAO1"
     * "RC_HUN1"
     * "RC_HUN2"
     * "RC_JOS1"
     * "RC_JOS2"
     * "RC_JOS3"
     * "RC_JOS4"
     * "RC_MAU1"
     * "RC_MIN1"
     * "RC_MIN2"
     * "RC_MIN3"
     * "RC_MRS1"
     * "RC_MRS2"
     * "RC_NI1"
     * "RC_NI1A"
     * "RC_NI1B"
     * "RC_NI1C"
     * "RC_NI1D"
     * "RC_NI2"
     * "RC_NI3"
     * "RC_OME1"
     * "RC_OME2"
     * "RC_PA1"
     * "RC_PA2"
     * "RC_PA3"
     * "RC_PA3A"
     * "RC_PA3B"
     * "RC_PA4"
     * "RC_RAM1"
     * "RC_RAM2"
     * "RC_RAM3"
     * "RC_RAM4"
     * "RC_RAM5"
     * "RC_SAS1"
     * "RC_TON1"
     * "RC_TON2"
     * "RC_TON3"
     * "RC_TON4"
     * "RC_TON5"
     *
     * Hash: 0x17695002FD8B2AE0 | Since: 323
     */
    function etGxtLabel(statName, value, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetGxtLabel(statName, value, save);
    }
    stats.etGxtLabel = etGxtLabel;
    /**
     * Example:
     * `STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);`
     *
     * Hash: 0xB3271D7AB655B441 | Since: 323
     */
    function etInt(statName, value, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetInt(statName, value, save);
    }
    stats.etInt = etInt;
    /**
     * No comment provided
     *
     * Hash: 0x69FF13266D7296DA | Since: 323
     */
    function etLicensePlate(statName, str) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetLicensePlate(statName, str);
    }
    stats.etLicensePlate = etLicensePlate;
    /**
     * No comment provided
     *
     * Hash: 0x7BBB1B54583ED410 | Since: 323
     */
    function etMaskedInt(statName, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetMaskedInt(statName, 0, 0, 0, save);
    }
    stats.etMaskedInt = etMaskedInt;
    /**
     * No comment provided
     *
     * Hash: 0x5688585E6D563CD8 | Since: 323
     */
    function etOpenSavetypeInJob() {
        Citizen.invokeNative('0x5688585E6D563CD8', 0);
    }
    stats.etOpenSavetypeInJob = etOpenSavetypeInJob;
    /**
     * No comment provided
     *
     * Hash: 0xDB283FDE680FE72E | Since: 323
     */
    function etPos(statName, pos, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetPos(statName, pos.x, pos.y, pos.z, save);
    }
    stats.etPos = etPos;
    /**
     * Does not take effect immediately, unfortunately.
     *
     * profileSetting seems to only be 936, 937 and 938 in scripts
     *
     * Hash: 0x68F01422BE1D838F | Since: 323
     */
    function etProfileSettingValue(profileSetting, value) {
        StatSetProfileSettingValue(profileSetting, value);
    }
    stats.etProfileSettingValue = etProfileSettingValue;
    /**
     * No comment provided
     *
     * Hash: 0xA87B2335D12531D7 | Since: 323
     */
    function etString(statName, value, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetString(statName, value, save);
    }
    stats.etString = etString;
    /**
     * No comment provided
     *
     * Hash: 0x8CDDF1E452BABE11 | Since: 323
     */
    function etUserId(statName, value, save) {
        if (typeof statName === 'string')
            statName = misc.getHashKey(statName);
        return StatSetUserId(statName, value, save);
    }
    stats.etUserId = etUserId;
    /**
     * No comment provided
     *
     * Hash: 0x0D0A9F0E7BD91E3C | Since: 323
     */
    function lotIsLoaded(statSlot) {
        return StatSlotIsLoaded(statSlot);
    }
    stats.lotIsLoaded = lotIsLoaded;
    /**
     * enum StatTrackingType
     * {
     * LongestWheelie = 1,
     * LongestStoppie = 2,
     * NoCrashes = 3,
     * HighestSpeed = 4,
     * _MostFlips = 5,
     * _LongestSpin = 6,
     * _HighestJumpReached = 7,
     * LongestJump = 8,
     * _NearMissesNoCrash = 9,
     * LongestFallSurvived = 10,
     * LowestParachute = 11,
     * ReverseDriving = 12,
     * LongestFreefall = 13,
     * VehiclesStolen = 14,
     * _SomeCFireEventCount = 15,
     * _Unk16 = 16,
     * _LowFlyingTime = 17,
     * LowFlying = 18,
     * _InvertedFlyingTime = 19,
     * InvertedFlying = 20,
     * _PlaneSpinCount = 21,
     * MeleeKills = 22, // Players
     * _LongestSniperKill = 23,
     * SniperSkills = 24, // Players
     * DrivebyKills = 25, // Players
     * HeadshotKills = 26, // Players
     * LongestBail = 27,
     * _TotalRammedByCar = 28,
     * NearMissesPrecise = 29,
     * _FreefallTime = 30,
     * Unk31 = 31,
     * }
     *
     * enum StatTrackingValueType
     * {
     * Total,
     * Max,
     * Min
     * }
     *
     * Hash: 0x33D72899E24C3365 | Since: 463
     */
    function tartRecordStat(statType, valueType) {
        return Citizen.invokeNative('0x33D72899E24C3365', statType, valueType);
    }
    stats.tartRecordStat = tartRecordStat;
    /**
     * No comment provided
     *
     * Hash: 0xA761D4AC6115623D | Since: 463
     */
    function topRecordStat() {
        return Citizen.invokeNative('0xA761D4AC6115623D');
    }
    stats.topRecordStat = topRecordStat;
    /**
     * Returns stat hash based on dataType, statIndex/statId and characterSlot. Related to CStatsMpCharacterMappingData
     *
     * Hash: 0xD69CE161FE614531 | Since: 2944
     */
    function getStatHashForCharacterStat(dataType, statIndex, charSlot) {
        return Citizen.invokeNative('0xD69CE161FE614531', dataType, statIndex, charSlot);
    }
    stats.getStatHashForCharacterStat = getStatHashForCharacterStat;
    /**
     * No comment provided
     *
     * Hash: 0x8A23D1324F6B2BAC | Since: 2802
     */
    function playAcidMissionEnd() {
        Citizen.invokeNative('0x8A23D1324F6B2BAC', undefined);
    }
    stats.playAcidMissionEnd = playAcidMissionEnd;
    /**
     * No comment provided
     *
     * Hash: 0xCEACCF0550FDC5BA | Since: 2802
     */
    function playAcidRnd() {
        Citizen.invokeNative('0xCEACCF0550FDC5BA', undefined);
    }
    stats.playAcidRnd = playAcidRnd;
    /**
     * No comment provided
     *
     * Hash: 0x5649CA22AF74E019 | Since: 3095
     */
    function playAlert() {
        return Citizen.invokeNative('0x5649CA22AF74E019');
    }
    stats.playAlert = playAlert;
    /**
     * No comment provided
     *
     * Hash: 0xBD642335A732F1A8 | Since: 2944
     */
    function playAttritionStageEnd() {
        Citizen.invokeNative('0xBD642335A732F1A8', undefined);
    }
    stats.playAttritionStageEnd = playAttritionStageEnd;
    /**
     * No comment provided
     *
     * Hash: 0x01D8B04D02F1217F | Since: 3570
     */
    function playDeathInfo(victimPed, killerPed, mentalState, revengeKill, victimKvK, killerKvK) {
        Citizen.invokeNative('0x01D8B04D02F1217F', victimPed, killerPed, mentalState, revengeKill, victimKvK, killerKvK);
    }
    stats.playDeathInfo = playDeathInfo;
    /**
     * No comment provided
     *
     * Hash: 0xCFB0E9C3456319EA | Since: 3258
     */
    function playFlowHigh(pos, action) {
        Citizen.invokeNative('0xCFB0E9C3456319EA', pos.x, pos.y, pos.z, action, false, 0);
    }
    stats.playFlowHigh = playFlowHigh;
    /**
     * No comment provided
     *
     * Hash: 0xE6A27CDA42887F93 | Since: 2944
     */
    function playFlowLow(pos, action) {
        Citizen.invokeNative('0xE6A27CDA42887F93', pos.x, pos.y, pos.z, action, false, 0);
    }
    stats.playFlowLow = playFlowLow;
    /**
     * No comment provided
     *
     * Hash: 0xC4493521BAA12CCE | Since: 3095
     */
    function playFlowMedium(pos, action) {
        Citizen.invokeNative('0xC4493521BAA12CCE', pos.x, pos.y, pos.z, action, false, 0);
    }
    stats.playFlowMedium = playFlowMedium;
    /**
     * No comment provided
     *
     * Hash: 0xEC9553A178E8F1D1 | Since: 2802
     */
    function playIdle() {
        Citizen.invokeNative('0xEC9553A178E8F1D1', undefined, undefined, undefined);
    }
    stats.playIdle = playIdle;
    /**
     * No comment provided
     *
     * Hash: 0x7E5EED10B11CEDBA | Since: 3407
     */
    function playInitMultiplayer() {
        Citizen.invokeNative('0x7E5EED10B11CEDBA', undefined, undefined, undefined);
    }
    stats.playInitMultiplayer = playInitMultiplayer;
    /**
     * Known text types: NAME_YACHT, NAME_ORG_OFFICE
     *
     * Hash: 0xAA434D7D0A89A95C | Since: 3258
     */
    function playNamedUserContent(isBoss, bossType, bossId1, bossId2, textType, textString, textSource) {
        Citizen.invokeNative('0xAA434D7D0A89A95C', isBoss, bossType, bossId1, bossId2, textType, textString, textSource);
    }
    stats.playNamedUserContent = playNamedUserContent;
    /**
     * No comment provided
     *
     * Hash: 0xE6D323A5E9EFFB76 | Since: 3258
     */
    function playPimenuNav() {
        return Citizen.invokeNative('0xE6D323A5E9EFFB76');
    }
    stats.playPimenuNav = playPimenuNav;
    /**
     * No comment provided
     *
     * Hash: 0x48FAC5DC7AC6EA99 | Since: 2802
     */
    function playPlayerStyle() {
        Citizen.invokeNative('0x48FAC5DC7AC6EA99', undefined);
    }
    stats.playPlayerStyle = playPlayerStyle;
    /**
     * No comment provided
     *
     * Hash: 0x7EA06F970F999394 | Since: 2944
     */
    function playRandomEvent() {
        Citizen.invokeNative('0x7EA06F970F999394', undefined);
    }
    stats.playRandomEvent = playRandomEvent;
    /**
     * No comment provided
     *
     * Hash: 0xBEB0D930B3CCE4D5 | Since: 3258
     */
    function playRecoverVehicle() {
        return Citizen.invokeNative('0xBEB0D930B3CCE4D5');
    }
    stats.playRecoverVehicle = playRecoverVehicle;
    /**
     * No comment provided
     *
     * Hash: 0x574A7808450E141C | Since: 3570
     */
    function playScriptEventFpom() {
        return Citizen.invokeNative('0x574A7808450E141C');
    }
    stats.playScriptEventFpom = playScriptEventFpom;
    /**
     * No comment provided
     *
     * Hash: 0xF96E9EA876D9DC92 | Since: 2802
     */
    function playShopmenuNav() {
        Citizen.invokeNative('0xF96E9EA876D9DC92', undefined, undefined, undefined, undefined);
    }
    stats.playShopmenuNav = playShopmenuNav;
    /**
     * No comment provided
     *
     * Hash: 0x961D4157B9B428DB | Since: 2944
     */
    function playShowroomNav(entity) {
        if (typeof entity === 'string')
            entity = misc.getHashKey(entity);
        Citizen.invokeNative('0x961D4157B9B428DB', undefined, undefined, entity);
    }
    stats.playShowroomNav = playShowroomNav;
    /**
     * Data struct contains various tunables related to test drives at Simeons Showroom or Luxury Showcase.
     *
     * Hash: 0x151D6C04C9E2742F | Since: 2944
     */
    function playShowroomOverview() {
        return Citizen.invokeNative('0x151D6C04C9E2742F');
    }
    stats.playShowroomOverview = playShowroomOverview;
})(stats || (stats = {}));
export var zone;
(function (zone) {
    /**
     * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
     *
     * Modified example from "am_imp_exp.c4", line 6418:
     * `\/\* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));`
     * etc.
     * \*\/
     * `STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);`
     * `ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);`
     *
     * Hash: 0x5C0DE367AA0D911C | Since: 323
     */
    function clearPopscheduleOverrideVehicleModel(scheduleId) {
        ClearPopscheduleOverrideVehicleModel(scheduleId);
    }
    zone.clearPopscheduleOverrideVehicleModel = clearPopscheduleOverrideVehicleModel;
    /**
     * Returns a hash representing which part of the map the given coords are located.
     *
     * Possible return values:
     * (Hash of) city -> -289320599
     * (Hash of) countryside -> 2072609373
     *
     * C# Example :
     *
     * Ped player = Game.Player.Character;
     * Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
     *
     * Hash: 0x7EE64D51E8498728 | Since: 323
     */
    function getHashOfMapAreaAtCoords(pos) {
        return GetHashOfMapAreaAtCoords(pos.x, pos.y, pos.z);
    }
    zone.getHashOfMapAreaAtCoords = getHashOfMapAreaAtCoords;
    /**
     * AIRP = Los Santos International Airport
     * ALAMO = Alamo Sea
     * ALTA = Alta
     * ARMYB = Fort Zancudo
     * BANHAMC = Banham Canyon Dr
     * BANNING = Banning
     * BEACH = Vespucci Beach
     * BHAMCA = Banham Canyon
     * BRADP = Braddock Pass
     * BRADT = Braddock Tunnel
     * BURTON = Burton
     * CALAFB = Calafia Bridge
     * CANNY = Raton Canyon
     * CCREAK = Cassidy Creek
     * CHAMH = Chamberlain Hills
     * CHIL = Vinewood Hills
     * CHU = Chumash
     * CMSW = Chiliad Mountain State Wilderness
     * CYPRE = Cypress Flats
     * DAVIS = Davis
     * DELBE = Del Perro Beach
     * DELPE = Del Perro
     * DELSOL = La Puerta
     * DESRT = Grand Senora Desert
     * DOWNT = Downtown
     * DTVINE = Downtown Vinewood
     * EAST_V = East Vinewood
     * EBURO = El Burro Heights
     * ELGORL = El Gordo Lighthouse
     * ELYSIAN = Elysian Island
     * GALFISH = Galilee
     * GOLF = GWC and Golfing Society
     * GRAPES = Grapeseed
     * GREATC = Great Chaparral
     * HARMO = Harmony
     * HAWICK = Hawick
     * HORS = Vinewood Racetrack
     * HUMLAB = Humane Labs and Research
     * JAIL = Bolingbroke Penitentiary
     * KOREAT = Little Seoul
     * LACT = Land Act Reservoir
     * LAGO = Lago Zancudo
     * LDAM = Land Act Dam
     * LEGSQU = Legion Square
     * LMESA = La Mesa
     * LOSPUER = La Puerta
     * MIRR = Mirror Park
     * MORN = Morningwood
     * MOVIE = Richards Majestic
     * MTCHIL = Mount Chiliad
     * MTGORDO = Mount Gordo
     * MTJOSE = Mount Josiah
     * MURRI = Murrieta Heights
     * NCHU = North Chumash
     * NOOSE = N.O.O.S.E
     * OCEANA = Pacific Ocean
     * PALCOV = Paleto Cove
     * PALETO = Paleto Bay
     * PALFOR = Paleto Forest
     * PALHIGH = Palomino Highlands
     * PALMPOW = Palmer-Taylor Power Station
     * PBLUFF = Pacific Bluffs
     * PBOX = Pillbox Hill
     * PROCOB = Procopio Beach
     * RANCHO = Rancho
     * RGLEN = Richman Glen
     * RICHM = Richman
     * ROCKF = Rockford Hills
     * RTRAK = Redwood Lights Track
     * SANAND = San Andreas
     * SANCHIA = San Chianski Mountain Range
     * SANDY = Sandy Shores
     * SKID = Mission Row
     * SLAB = Stab City
     * STAD = Maze Bank Arena
     * STRAW = Strawberry
     * TATAMO = Tataviam Mountains
     * TERMINA = Terminal
     * TEXTI = Textile City
     * TONGVAH = Tongva Hills
     * TONGVAV = Tongva Valley
     * VCANA = Vespucci Canals
     * VESP = Vespucci
     * VINE = Vinewood
     * WINDF = Ron Alternates Wind Farm
     * WVINE = West Vinewood
     * ZANCUDO = Zancudo River
     * ZP_ORT = Port of South Los Santos
     * ZQ_UAR = Davis Quartz
     *
     * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
     *
     * Hash: 0xCD90657D4C30E1CA | Since: 323
     */
    function getNameOf(pos) {
        return GetNameOfZone(pos.x, pos.y, pos.z);
    }
    zone.getNameOf = getNameOf;
    /**
     * No comment provided
     *
     * Hash: 0x27040C25DE6CB2F4 | Since: 323
     */
    function getAtCoords(pos) {
        return GetZoneAtCoords(pos.x, pos.y, pos.z);
    }
    zone.getAtCoords = getAtCoords;
    /**
     * 'zoneName' corresponds to an entry in 'popzone.ipl'.
     *
     * AIRP = Los Santos International Airport
     * ALAMO = Alamo Sea
     * ALTA = Alta
     * ARMYB = Fort Zancudo
     * BANHAMC = Banham Canyon Dr
     * BANNING = Banning
     * BEACH = Vespucci Beach
     * BHAMCA = Banham Canyon
     * BRADP = Braddock Pass
     * BRADT = Braddock Tunnel
     * BURTON = Burton
     * CALAFB = Calafia Bridge
     * CANNY = Raton Canyon
     * CCREAK = Cassidy Creek
     * CHAMH = Chamberlain Hills
     * CHIL = Vinewood Hills
     * CHU = Chumash
     * CMSW = Chiliad Mountain State Wilderness
     * CYPRE = Cypress Flats
     * DAVIS = Davis
     * DELBE = Del Perro Beach
     * DELPE = Del Perro
     * DELSOL = La Puerta
     * DESRT = Grand Senora Desert
     * DOWNT = Downtown
     * DTVINE = Downtown Vinewood
     * EAST_V = East Vinewood
     * EBURO = El Burro Heights
     * ELGORL = El Gordo Lighthouse
     * ELYSIAN = Elysian Island
     * GALFISH = Galilee
     * GOLF = GWC and Golfing Society
     * GRAPES = Grapeseed
     * GREATC = Great Chaparral
     * HARMO = Harmony
     * HAWICK = Hawick
     * HORS = Vinewood Racetrack
     * HUMLAB = Humane Labs and Research
     * JAIL = Bolingbroke Penitentiary
     * KOREAT = Little Seoul
     * LACT = Land Act Reservoir
     * LAGO = Lago Zancudo
     * LDAM = Land Act Dam
     * LEGSQU = Legion Square
     * LMESA = La Mesa
     * LOSPUER = La Puerta
     * MIRR = Mirror Park
     * MORN = Morningwood
     * MOVIE = Richards Majestic
     * MTCHIL = Mount Chiliad
     * MTGORDO = Mount Gordo
     * MTJOSE = Mount Josiah
     * MURRI = Murrieta Heights
     * NCHU = North Chumash
     * NOOSE = N.O.O.S.E
     * OCEANA = Pacific Ocean
     * PALCOV = Paleto Cove
     * PALETO = Paleto Bay
     * PALFOR = Paleto Forest
     * PALHIGH = Palomino Highlands
     * PALMPOW = Palmer-Taylor Power Station
     * PBLUFF = Pacific Bluffs
     * PBOX = Pillbox Hill
     * PROCOB = Procopio Beach
     * RANCHO = Rancho
     * RGLEN = Richman Glen
     * RICHM = Richman
     * ROCKF = Rockford Hills
     * RTRAK = Redwood Lights Track
     * SANAND = San Andreas
     * SANCHIA = San Chianski Mountain Range
     * SANDY = Sandy Shores
     * SKID = Mission Row
     * SLAB = Stab City
     * STAD = Maze Bank Arena
     * STRAW = Strawberry
     * TATAMO = Tataviam Mountains
     * TERMINA = Terminal
     * TEXTI = Textile City
     * TONGVAH = Tongva Hills
     * TONGVAV = Tongva Valley
     * VCANA = Vespucci Canals
     * VESP = Vespucci
     * VINE = Vinewood
     * WINDF = Ron Alternates Wind Farm
     * WVINE = West Vinewood
     * ZANCUDO = Zancudo River
     * ZP_ORT = Port of South Los Santos
     * ZQ_UAR = Davis Quartz
     *
     * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
     *
     * Hash: 0x98CD1D2934B76CC1 | Since: 323
     */
    function getFromNameId(zoneName) {
        return GetZoneFromNameId(zoneName);
    }
    zone.getFromNameId = getFromNameId;
    /**
     * No comment provided
     *
     * Hash: 0x4334BC40AA0CB4BB | Since: 323
     */
    function getPopschedule(zoneId) {
        return GetZonePopschedule(zoneId);
    }
    zone.getPopschedule = getPopschedule;
    /**
     * cellphone range 1- 5 used for signal bar in iFruit phone
     *
     * Hash: 0x5F7B268D15BA0739 | Since: 323
     */
    function getScumminess(zoneId) {
        return GetZoneScumminess(zoneId);
    }
    zone.getScumminess = getScumminess;
    /**
     * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
     *
     * Modified example from "am_imp_exp.c4", line 6406:
     * `\/\* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));`
     * etc.
     * \*\/
     * `ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);`
     * `STREAMING::REQUEST_MODEL(vehicleHash);`
     *
     * Hash: 0x5F7D596BAC2E7777 | Since: 323
     */
    function overridePopscheduleVehicleModel(scheduleId, vehicleHash) {
        if (typeof vehicleHash === 'string')
            vehicleHash = misc.getHashKey(vehicleHash);
        OverridePopscheduleVehicleModel(scheduleId, vehicleHash);
    }
    zone.overridePopscheduleVehicleModel = overridePopscheduleVehicleModel;
    /**
     * No comment provided
     *
     * Hash: 0xBA5ECEEA120E5611 | Since: 323
     */
    function setEnabled(zoneId, toggle) {
        SetZoneEnabled(zoneId, toggle);
    }
    zone.setEnabled = setEnabled;
})(zone || (zone = {}));
export * from "@risinglife/fivem-shared";
