import { Vector3, Entity, Ped, Player, Vehicle } from '@risinglife/fivem-shared';
/**
 * Hash: 0xE8E3FCF72EAC0EF8 | ApiSet: undefined
 */
export function appCloseBlock() {
    AppCloseBlock();
}
/**
 * Hash: 0xE41C65E07A5F05FC | ApiSet: undefined
 */
export function appCloseApp() {
    AppCloseApp();
}
/**
 * Hash: 0x5FE1DF3342DB7DBA | ApiSet: undefined
 */
export function appClearBlock() {
    AppClearBlock();
}
/**
 * Hash: 0x846AA8E7D55EE5B6 | ApiSet: undefined
 */
export function appDataValid() {
    return AppDataValid();
}
/**
 * Hash: 0xC9853A2BE3DED1A6 | ApiSet: undefined
 */
export function appGetDeletedFileStatus() {
    return AppGetDeletedFileStatus();
}
/**
 * Hash: 0x1514FB24C02C2322 | ApiSet: undefined
 */
export function appGetFloat(property) {
    return AppGetFloat(property);
}
/**
 * Hash: 0x44151AEA95C8A003 | ApiSet: undefined
 */
export function appDeleteAppData(appName) {
    return AppDeleteAppData(appName);
}
/**
 * Hash: 0xD3A58A12C77D9D4B | ApiSet: undefined
 */
export function appGetInt(property) {
    return AppGetInt(property);
}
/**
 * Hash: 0x71EEE69745088DA0 | ApiSet: undefined
 */
export function appHasLinkedSocialClubAccount() {
    return AppHasLinkedSocialClubAccount();
}
/**
 * Hash: 0x95C5D356CDA6E85F | ApiSet: undefined
 */
export function appSaveData() {
    AppSaveData();
}
/**
 * Hash: 0x749B023950D2311C | ApiSet: undefined
 */
export function appGetString(property) {
    return AppGetString(property);
}
/**
 * Hash: 0xCA52279A7271517F | ApiSet: undefined
 */
export function appHasSyncedData(appName) {
    return AppHasSyncedData(appName);
}
/**
 * Hash: 0x262AB456A3D21F93 | ApiSet: undefined
 */
export function appSetBlock(blockName) {
    AppSetBlock(blockName);
}
/**
 * Hash: 0x25D7687C68E0DAA4 | ApiSet: undefined
 */
export function appSetFloat(property, value) {
    AppSetFloat(property, value);
}
/**
 * ```
 * Called in the gamescripts like:
 * `APP::APP_SET_APP("car");`
 * `APP::APP_SET_APP("dog");`
 * ```
 * Hash: 0xCFD0406ADAF90D2B | ApiSet: undefined
 */
export function appSetApp(appName) {
    AppSetApp(appName);
}
/**
 * Hash: 0x607E8E3D3E4F9611 | ApiSet: undefined
 */
export function appSetInt(property, value) {
    AppSetInt(property, value);
}
/**
 * Hash: 0x3FF2FCEC4B7721B4 | ApiSet: undefined
 */
export function appSetString(property, value) {
    AppSetString(property, value);
}
/**
 * Hash: 0x14D8518E9760F08F | ApiSet: undefined
 */
export function disableScriptBrainSet(brainSet) {
    DisableScriptBrainSet(brainSet);
}
/**
 * ```
 * `BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);`
 * - Nacorpio
 * -----
 * Hardcoded to not work in Multiplayer.
 * ```
 * Hash: 0x4EE5367468A65CCC | ApiSet: undefined
 */
export function addScriptToRandomPed(name, model, p2, p3) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    AddScriptToRandomPed(name, model, p2, p3);
}
/**
 * Hash: 0x67AA4D73F0CFA86B | ApiSet: undefined
 */
export function enableScriptBrainSet(brainSet) {
    EnableScriptBrainSet(brainSet);
}
/**
 * Hash: 0x0B40ED49D7D6FF84 | ApiSet: undefined
 */
export function _0x0B40ED49D7D6FF84() {
    Citizen.invokeNative('0x0B40ED49D7D6FF84');
}
/**
 * ```
 * Gets whether the world point the calling script is registered to is within desired range of the player.
 * ```
 * Hash: 0xC5042CC6F5E3D450 | ApiSet: undefined
 */
export function isWorldPointWithinBrainActivationRange() {
    return IsWorldPointWithinBrainActivationRange();
}
/**
 * Hash: 0xCCBA154209823057 | ApiSet: undefined
 */
export function isObjectWithinBrainActivationRange(object) {
    return IsObjectWithinBrainActivationRange(object);
}
/**
 * ```
 * Something like flush_all_scripts
 * Most of time comes after NETWORK_END_TUTORIAL_SESSION() or before TERMINATE_THIS_THREAD()
 * ```
 * Hash: 0x4D953DF78EBF8158 | ApiSet: undefined
 */
export function _0x4D953DF78EBF8158() {
    Citizen.invokeNative('0x4D953DF78EBF8158');
}
/**
 * ```
 * Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
 * Here are possible values of argument -
 * "ob_tv"
 * "launcher_Darts"
 * ```
 * Hash: 0x6E91B04E08773030 | ApiSet: undefined
 */
export function _0x6E91B04E08773030(action) {
    Citizen.invokeNative('0x6E91B04E08773030', action);
}
/**
 * ```
 * Registers a script for any object with a specific model hash.
 * `BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);`
 * ```
 * Hash: 0x0BE84C318BA6EC22 | ApiSet: undefined
 */
export function registerObjectScriptBrain(scriptName, modelHash, p2, activationRange, p4, p5) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    RegisterObjectScriptBrain(scriptName, modelHash, p2, activationRange, p4, p5);
}
/**
 * ```
 * Possible values:
 * act_cinema
 * am_mp_carwash_launch
 * am_mp_carwash_control
 * am_mp_property_ext
 * chop
 * fairgroundHub
 * launcher_BasejumpHeli
 * launcher_BasejumpPack
 * launcher_CarWash
 * launcher_golf
 * launcher_Hunting_Ambient
 * launcher_MrsPhilips
 * launcher_OffroadRacing
 * launcher_pilotschool
 * launcher_Racing
 * launcher_rampage
 * launcher_rampage
 * launcher_range
 * launcher_stunts
 * launcher_stunts
 * launcher_tennis
 * launcher_Tonya
 * launcher_Triathlon
 * launcher_Yoga
 * ob_mp_bed_low
 * ob_mp_bed_med
 * ```
 * Hash: 0x6D6840CEE8845831 | ApiSet: undefined
 */
export function _0x6D6840CEE8845831(action) {
    Citizen.invokeNative('0x6D6840CEE8845831', action);
}
/**
 * Hash: 0x3CDC7136613284BD | ApiSet: undefined
 */
export function registerWorldPointScriptBrain(activationRange, p2) {
    return RegisterWorldPointScriptBrain(activationRange, p2);
}
/**
 * Below is a list of modes and their respective hashes.
 * | Mode (string)               | Hash               |
 * |-----------------------------|--------------------|
 * | SLOWMO_BIG_SCORE_JUMP       | 0x2B981B0C         |
 * | JSH_EXIT_TUNNEL_SLOWMO      | 0x2562AA6          |
 * | SLOW_MO_METH_HOUSE_RAYFIRE  | 0xDB9E1909         |
 * | SLOWMO_FIB4\_TRUCK_SMASH     | 0x9E144347         |
 * | SLOWMO_PROLOGUE_VAULT       | 0xEA2E68E1         |
 * | SLOWMO_T1\_RAYFIRE_EXPLOSION | 0xD6D358F3         |
 * | SLOWMO_T1\_TRAILER_SMASH     | 0xBE607345         |
 * | BARRY\_01\_SLOWMO             | 0xD59540D4         |
 * | BARRY\_02\_SLOWMO             | 0x12F140B3         |
 * | SLOWMO_EXTREME\_04           | 0xF562EA50         |
 * | NIGEL\_02\_SLOWMO_SETTING     | 0x384689B0         |
 * Hash: 0xD01005D2BA2EB778 | ApiSet: undefined
 */
export function activateAudioSlowmoMode(mode) {
    ActivateAudioSlowmoMode(mode);
}
/**
 * ```
 * All found occurrences in b678d:
 * pastebin.com/ceu67jz8
 * ```
 * Hash: 0x153973AB99FE8980 | ApiSet: undefined
 */
export function addEntityToAudioMixGroup(entity, groupName, fadeIn) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    AddEntityToAudioMixGroup(_entity, groupName, fadeIn);
}
/**
 * Hash: 0x95D9F4BC443956E7 | ApiSet: undefined
 */
export function addPedToConversation(speakerConversationIndex, ped, voiceName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    AddPedToConversation(speakerConversationIndex, _ped, voiceName);
}
/**
 * ```cpp
 * enum eAudibility {
 * AUD_AUDIBILITY_NORMAL = 0,
 * AUD_AUDIBILITY_CLEAR = 1,
 * AUD_AUDIBILITY_CRITICAL = 2,
 * AUD_AUDIBILITY_LEAD_IN = 3
 * }
 * ```
 * Hash: 0xC5EF963405593646 | ApiSet: undefined
 */
export function addLineToConversation(speakerConversationIndex, context, subtitle, listenerNumber, volumeType, isRandom, interruptible, ducksRadio, ducksScore, audibility, headset, dontInterruptForSpecialAbility, isPadSpeakerRoute) {
    AddLineToConversation(speakerConversationIndex, context, subtitle, listenerNumber, volumeType, isRandom, interruptible, ducksRadio, ducksScore, audibility, headset, dontInterruptForSpecialAbility, isPadSpeakerRoute);
}
/**
 * Plays a siren blip from the vehicle when you double press the horn key.
 * This only works on vehicles with sirens.
 * Hash: 0x1B9025BDA76822B6 | ApiSet: undefined
 */
export function blipSiren(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    BlipSiren(_vehicle);
}
/**
 * Blocks *all* speech playing on the given ped, including speech triggered by natives such as [PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE](#\_0x3523634255FC3318)
 * The flag itself is not synced, it must be called on each machine that wishes to suppress the speech.
 * The `SuppressOutgoingNetworkSpeech` flag can be set to `false` if you want speech triggered locally through `PLAY_PED_AMBIENT_SPEECH_*` related native calls to still be audible on remote machines, even though it was blocked on the local one.
 * Hash: 0xF8AD2EED7C47E8FE | ApiSet: undefined
 */
export function blockAllSpeechFromPed(ped, shouldBlock, suppressOutgoingNetworkSpeech) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    BlockAllSpeechFromPed(_ped, shouldBlock, suppressOutgoingNetworkSpeech);
}
/**
 * Hash: 0x845FFC3A4FEEFA3E | ApiSet: undefined
 */
export function audioIsScriptedMusicPlaying() {
    return AudioIsScriptedMusicPlaying();
}
/**
 * Hash: 0xF154B8D1775B2DEC | ApiSet: undefined
 */
export function blockDeathJingle(blocked) {
    BlockDeathJingle(blocked);
}
/**
 * Hash: 0x032A116663A4D5AC | ApiSet: undefined
 */
export function canVehicleReceiveCbRadio(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return CanVehicleReceiveCbRadio(_vehicle);
}
/**
 * ```cpp
 * enum eAudContextBlockTarget {
 * AUD_CONTEXT_BLOCK_PLAYER = 0,
 * AUD_CONTEXT_BLOCK_NPCS = 1,
 * AUD_CONTEXT_BLOCK_BUDDYS = 2,
 * AUD_CONTEXT_BLOCK_EVERYONE = 3,
 * AUD_CONTEXT_BLOCK_TARGETS_TOTAL
 * }
 * ```
 * Stop a certain group of peds from using a certain group of speech contexts.
 * Note that the block will be automatically removed when the calling script finishes
 * Hash: 0xA8A7D434AFB4B97B | ApiSet: undefined
 */
export function blockSpeechContextGroup(groupName, contextBlockTarget) {
    BlockSpeechContextGroup(groupName, contextBlockTarget);
}
/**
 * Hash: 0xB4F90FAF7670B16F | ApiSet: undefined
 */
export function cancelAllPoliceReports() {
    CancelAllPoliceReports();
}
/**
 * ```
 * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
 * ```
 * Hash: 0x5B17A90291133DA5 | ApiSet: undefined
 */
export function cancelMusicEvent(eventName) {
    return CancelMusicEvent(eventName);
}
/**
 * Hash: 0xB32209EFFDC04913 | ApiSet: undefined
 */
export function clearAllBrokenGlass() {
    ClearAllBrokenGlass();
}
/**
 * Deactivates the named slowmo mode.
 * Hash: 0xDDC635D5B3262C56 | ApiSet: undefined
 */
export function deactivateAudioSlowmoMode(mode) {
    DeactivateAudioSlowmoMode(mode);
}
/**
 * Resets the list of ambients zones enabled/disabled status to its value before it was modified by this script.
 * Default behaviour is that any state change only gets applied once the player leaves the zone.
 * Hash: 0x120C48C614909FA4 | ApiSet: undefined
 */
export function clearAmbientZoneListState(forceUpdate) {
    return ClearAmbientZoneListState(forceUpdate);
}
/**
 * Clears the previously queued custom track lost for the given radio station.
 * Hash: 0x1654F24A88A8E3FE | ApiSet: undefined
 */
export function clearCustomRadioTrackList(radioStation) {
    ClearCustomRadioTrackList(radioStation);
}
/**
 * Hash: 0xD2C91A0B572AAE56 | ApiSet: undefined
 */
export function createNewScriptedConversation() {
    CreateNewScriptedConversation();
}
/**
 * Resets the ambient zone enabled/disabled status to its value before it was modified by this script
 * Default behaviour is that any state change only gets applied once the player leaves the zone.
 * Hash: 0x218DD44AAAC964FF | ApiSet: undefined
 */
export function clearAmbientZoneState(zoneName, forceUpdate) {
    ClearAmbientZoneState(zoneName, forceUpdate);
}
/**
 * Hash: 0x109697E2FFBAC8A1 | ApiSet: undefined
 */
export function doesPlayerVehHaveRadio() {
    return DoesPlayerVehHaveRadio();
}
/**
 * Toggles fake distant siren sounds
 * Hash: 0x552369F549563AD5 | ApiSet: undefined
 */
export function distantCopCarSirens(shouldPlay) {
    DistantCopCarSirens(shouldPlay);
}
/**
 * Hash: 0xA9A41C1E940FB0E8 | ApiSet: undefined
 */
export function disablePedPainAudio(ped, shouldDisable) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    DisablePedPainAudio(_ped, shouldDisable);
}
/**
 * Hash: 0x1C073274E065C6D2 | ApiSet: undefined
 */
export function enableVehicleFanbeltDamage(vehicle, enableFanbeltDamage) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    EnableVehicleFanbeltDamage(_vehicle, enableFanbeltDamage);
}
/**
 * Checks if the context exists for the ped, searching through the voices in its PedVoiceGroup.
 * The final argument can be set to true to allow searching in backup PVGs
 * Hash: 0x49B99BF3FDA89A7A | ApiSet: undefined
 */
export function doesContextExistForThisPed(ped, speechName, allowBackupPVGs) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return DoesContextExistForThisPed(_ped, speechName, allowBackupPVGs);
}
/**
 * Enable the stunt jump audio detection code
 * This native is meant to be called per-frame for as long as detection is wanted.
 * Hash: 0xB81CF134AEB56FFB | ApiSet: undefined
 */
export function enableStuntJumpAudio() {
    EnableStuntJumpAudio();
}
/**
 * Forces the chosen station to paly the given music track list. All other music track lists will be locked.
 * Hash: 0x4E0AF9114608257C | ApiSet: undefined
 */
export function forceMusicTrackList(radioStation, trackListName, timeOffsetMilliseconds) {
    ForceMusicTrackList(radioStation, trackListName, timeOffsetMilliseconds);
}
/**
 * Enable or disable exhaust pops on the given vehicle.
 * Hash: 0x2BE4BC731D039D5A | ApiSet: undefined
 */
export function enableVehicleExhaustPops(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    EnableVehicleExhaustPops(_vehicle, toggle);
}
/**
 * Forces the ambient peds into their panic walla state
 * Hash: 0x062D5EAD4DA2FA6A | ApiSet: undefined
 */
export function forcePedPanicWalla() {
    ForcePedPanicWalla();
}
/**
 * Enable or disable the plane stall warning sounds
 * Hash: 0xC15907D667F7CFB2 | ApiSet: undefined
 */
export function enableStallWarningSounds(vehicle, enable) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    EnableStallWarningSounds(_vehicle, enable);
}
/**
 * Hash: 0x8D67489793FF428B | ApiSet: undefined
 */
export function findRadioStationIndex(stationNameHash) {
    return FindRadioStationIndex(stationNameHash);
}
/**
 * This native sets the audio to the specific vehicle hash's audioNameHash.
 * Hash: 0x4F0C413926060B38 | ApiSet: undefined
 */
export function forceUseAudioGameObject(vehicle, gameObjectName) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ForceUseAudioGameObject(_vehicle, gameObjectName);
}
/**
 * Allows script to freeze the microphone for a single frame, mantaining its current transform/settings.
 * This native should be called every frame you want to keep the microphone frozen, when you stop calling it it will automatically unfreeze
 * Hash: 0xD57AAAE0E2214D11 | ApiSet: undefined
 */
export function freezeMicrophone() {
    FreezeMicrophone();
}
/**
 * Hash: 0x344F393B027E38C3 | ApiSet: undefined
 */
export function freezeRadioStation(radioStation) {
    FreezeRadioStation(radioStation);
}
/**
 * This native is used alongside with [`SET_VEHICLE_TYRE_BURST`](#\_0xEC6A202EE4960385).
 * ```
 * NativeDB Introduced: v3258
 * ```
 * Hash: 0xEB7D0E1FCC8FE17A | ApiSet: undefined
 */
export function forceVehicleEngineSynth(vehicle, force) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ForceVehicleEngineSynth(_vehicle, force);
}
/**
 * Hash: 0x5E203DA2BA15D436 | ApiSet: undefined
 */
export function getAmbientVoiceNameHash(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetAmbientVoiceNameHash(_ped);
}
/**
 * Hash: 0x50B196FC9ED6545B | ApiSet: undefined
 */
export function getAudibleMusicTrackTextId() {
    return GetAudibleMusicTrackTextId();
}
/**
 * Hash: 0x480357EE890C295A | ApiSet: undefined
 */
export function getCurrentScriptedConversationLine() {
    return GetCurrentScriptedConversationLine();
}
/**
 * Hash: 0xE7A0D23DC414507B | ApiSet: undefined
 */
export function getMusicPlaytime() {
    return GetMusicPlaytime();
}
/**
 * Hash: 0xF1620ECB50E01DE7 | ApiSet: undefined
 */
export function getNumUnlockedRadioStations() {
    return GetNumUnlockedRadioStations();
}
/**
 * ```
 * Return the playback time (in milliseconds) of the radio stations current track.
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x3E65CDE5215832C1 | ApiSet: undefined
 */
export function getCurrentRadioTrackPlaybackTime(radioStationName) {
    return GetCurrentRadioTrackPlaybackTime(radioStationName);
}
/**
 * Hash: 0x34D66BC058019CE0 | ApiSet: undefined
 */
export function getCurrentTrackSoundName(radioStationName) {
    return GetCurrentTrackSoundName(radioStationName);
}
/**
 * Hash: 0xE73364DB90778FFA | ApiSet: undefined
 */
export function getIsPreloadedConversationReady() {
    return GetIsPreloadedConversationReady();
}
/**
 * Hash: 0xE8AF77C4C06ADC93 | ApiSet: undefined
 */
export function getPlayerRadioStationIndex() {
    return GetPlayerRadioStationIndex();
}
/**
 * Hash: 0x2DE3F0A134FFBC0D | ApiSet: undefined
 */
export function getNetworkIdFromSoundId(soundId) {
    return GetNetworkIdFromSoundId(soundId);
}
/**
 * Hash: 0xC64A06D939F826F5 | ApiSet: undefined
 */
export function getNextAudibleBeat() {
    return GetNextAudibleBeat();
}
/**
 * Hash: 0xA571991A7FE6CCEB | ApiSet: undefined
 */
export function getPlayerRadioStationGenre() {
    return GetPlayerRadioStationGenre();
}
/**
 * Hash: 0x4E72BBDBCA58A3DB | ApiSet: undefined
 */
export function getStreamPlayTime() {
    return GetStreamPlayTime();
}
/**
 * Hash: 0x3A48AB4445D499BE | ApiSet: undefined
 */
export function getMusicVolSlider() {
    return GetMusicVolSlider();
}
/**
 * Hash: 0xB28ECA15046CA8B9 | ApiSet: undefined
 */
export function getRadioStationName(stationIndex) {
    return GetRadioStationName(stationIndex);
}
/**
 * If a playback function has a soundId field but the sound doesn't need to be altered after triggering then pass a value of -1 for fire-and-forget playback, rather than getting a soundId.
 * SoundId's can be reused, without needing to release them and grab a new one.
 * If a sound's finished playing, you can reuse its SoundId to kick off another one.
 * If the sound's not finished playing, it'll be stopped first (fading out or whatever is set up in RAVE by the sound designer), and the new one kicked off; usually it is safer to just get a new SoundId.
 * SoundId's are not automatically cleaned up, you must use [RELEASE_SOUND_ID](#\_0x353FC880830B88FA) after you've finished using them to allow the engine to recycle the sound id.
 * Hash: 0x430386FE9BF80B45 | ApiSet: undefined
 */
export function getSoundId() {
    return GetSoundId();
}
/**
 * Hash: 0xF6D733C32076AD03 | ApiSet: undefined
 */
export function getPlayerRadioStationName() {
    return GetPlayerRadioStationName();
}
/**
 * Hash: 0xAA19F5572C38B564 | ApiSet: undefined
 */
export function getVariationChosenForScriptedLine() {
    return GetVariationChosenForScriptedLine();
}
/**
 * Hash: 0x02165D55000219AC | ApiSet: undefined
 */
export function getVehicleDefaultHorn(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleDefaultHorn(_vehicle);
}
/**
 * Hash: 0xACB5DCCA1EC76840 | ApiSet: undefined
 */
export function getVehicleDefaultHornIgnoreMods(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleDefaultHornIgnoreMods(_vehicle);
}
/**
 * Hash: 0x544810ED9DB6BBE6 | ApiSet: undefined
 */
export function hasLoadedMpDataSet() {
    return HasLoadedMpDataSet();
}
/**
 * Counterpart: [`GET_NETWORK_ID_FROM_SOUND_ID`](#\_0x2DE3F0A134FFBC0D).
 * Hash: 0x75262FD12D0A1C84 | ApiSet: undefined
 */
export function getSoundIdFromNetworkId(netId) {
    return GetSoundIdFromNetworkId(netId);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0xD53F3A29BCE2580E | ApiSet: undefined
 */
export function getVehicleHornSoundIndex(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleHornSoundIndex(_vehicle);
}
/**
 * This native is marked as a deprecated native internally, use [HINT_SCRIPT_AUDIO_BANK](#\_0xFB380A29641EC31A) instead
 * Hash: 0x8F8C0E370AE62F5C | ApiSet: undefined
 */
export function hintAmbientAudioBank(bankName, bOverNetwork) {
    return HintAmbientAudioBank(bankName, bOverNetwork);
}
/**
 * Hash: 0xFCBDCE714A7C88E5 | ApiSet: undefined
 */
export function hasSoundFinished(soundId) {
    return HasSoundFinished(soundId);
}
/**
 * This is marked as a deprecated function internally, please use [HINT_SCRIPT_AUDIO_BANK](#\_0xFB380A29641EC31A) instead.
 * Hash: 0x40763EA7B9B783E7 | ApiSet: undefined
 */
export function hintMissionAudioBank(bankName, bOverNetwork, playerBits) {
    return HintMissionAudioBank(bankName, bOverNetwork, playerBits);
}
/**
 * Hash: 0x5B50ABB1FE3746F4 | ApiSet: undefined
 */
export function hasLoadedSpDataSet() {
    return HasLoadedSpDataSet();
}
/**
 * Hash: 0xC8EDE9BDBCCBA6D4 | ApiSet: undefined
 */
export function initSynchSceneAudioWithPosition(position) {
    return InitSynchSceneAudioWithPosition(position.x, position.y, position.z);
}
/**
 * Hints that this bank would be good to load if there are free slots.
 * Does not guarentee loading of the bank, [REQUEST_SCRIPT_AUDIO_BANK](#\_0xFE02FFBED8CA9D99) MUST be used as normal before triggering sounds"
 * This native has a new argument on newer game builds:
 * *   **playerBits**: likely used to specifiy players to sync to as a bit mask (1 << (0-128))
 * Hash: 0xFB380A29641EC31A | ApiSet: undefined
 */
export function hintScriptAudioBank(bankName, bOverNetwork) {
    return HintScriptAudioBank(bankName, bOverNetwork);
}
/**
 * Handles conversation interrupts, using the code-side system for improved timing and to minimize unfriendly logic interactions.
 * Hash: 0xA018A12E5C5C2FA6 | ApiSet: undefined
 */
export function interruptConversation(interrupterPed) {
    const _interrupterPed = interrupterPed instanceof Ped ? interrupterPed.handle() : interrupterPed;
    return InterruptConversation(_interrupterPed);
}
/**
 * Hash: 0x950A154B8DAB6185 | ApiSet: undefined
 */
export function initSynchSceneAudioWithEntity(audioName, entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    InitSynchSceneAudioWithEntity(audioName, _entity);
}
/**
 * Handles conversation interrupts and pauses, using the code-side system for improved timing and to minimize unfriendly logic interactions.
 * Hash: 0x8A694D7A68F8DC38 | ApiSet: undefined
 */
export function interruptConversationAndPause(interrupterPed, context, voiceName) {
    const _interrupterPed = interrupterPed instanceof Ped ? interrupterPed.handle() : interrupterPed;
    InterruptConversationAndPause(_interrupterPed, context, voiceName);
}
/**
 * Hash: 0x9072C8B49907BFAD | ApiSet: undefined
 */
export function isAmbientSpeechPlaying(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsAmbientSpeechPlaying(_ped);
}
/**
 * Hash: 0x932C2D096A2C3FFF | ApiSet: undefined
 */
export function isAmbientSpeechDisabled(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsAmbientSpeechDisabled(_ped);
}
/**
 * Hash: 0x226435CB96CCFC8C | ApiSet: undefined
 */
export function isAlarmPlaying(alarmName) {
    return IsAlarmPlaying(alarmName);
}
/**
 * Determines if any ped-independent, positionally-based scripted speech is currently active. This typically includes speech events triggered using [`PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE`](#\_0xED640017ED337E45).
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x30CA2EF91D15ADF8 | ApiSet: undefined
 */
export function isAnyPositionalSpeechPlaying() {
    return IsAnyPositionalSpeechPlaying();
}
/**
 * Hash: 0xC265DF9FB44A9FBD | ApiSet: undefined
 */
export function isAnimalVocalizationPlaying(pedHandle) {
    const _pedHandle = pedHandle instanceof Ped ? pedHandle.handle() : pedHandle;
    return IsAnimalVocalizationPlaying(_pedHandle);
}
/**
 * Hash: 0x729072355FA39EC9 | ApiSet: undefined
 */
export function isAnySpeechPlaying(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsAnySpeechPlaying(_ped);
}
/**
 * Hash: 0x9D6BFC12B05C6121 | ApiSet: undefined
 */
export function isHornActive(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsHornActive(_vehicle);
}
/**
 * Hash: 0x01E2817A479A7F9B | ApiSet: undefined
 */
export function isAmbientZoneEnabled(ambientZone) {
    return IsAmbientZoneEnabled(ambientZone);
}
/**
 * ```
 * Hardcoded to return 1
 * ```
 * Hash: 0x6D28DC1671E334FD | ApiSet: undefined
 */
export function isGameInControlOfMusic() {
    return IsGameInControlOfMusic();
}
/**
 * Hash: 0x6F259F82D873B8B8 | ApiSet: undefined
 */
export function isMissionCompleteReadyForUi() {
    return IsMissionCompleteReadyForUi();
}
/**
 * Hash: 0x19A30C23F5827F8A | ApiSet: undefined
 */
export function isMissionCompletePlaying() {
    return IsMissionCompletePlaying();
}
/**
 * Hash: 0x7497D2CE2C30D24C | ApiSet: undefined
 */
export function isMobilePhoneCallOngoing() {
    return IsMobilePhoneCallOngoing();
}
/**
 * Hash: 0x5F43D83FD6738741 | ApiSet: undefined
 */
export function isPlayerVehRadioEnable() {
    return IsPlayerVehRadioEnable();
}
/**
 * Hash: 0xB65B60556E2A9225 | ApiSet: undefined
 */
export function isAudioSceneActive(scene) {
    return IsAudioSceneActive(scene);
}
/**
 * Hash: 0x66E49BF55B4B1874 | ApiSet: undefined
 */
export function isMissionNewsStoryUnlocked(newsStory) {
    return IsMissionNewsStoryUnlocked(newsStory);
}
/**
 * Hash: 0x049E937F18F4020C | ApiSet: undefined
 */
export function isPedInCurrentConversation(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInCurrentConversation(_ped);
}
/**
 * Hash: 0xC8B1B2425604CDD0 | ApiSet: undefined
 */
export function isMobileInterferenceActive() {
    return IsMobileInterferenceActive();
}
/**
 * Hash: 0x2B1784DB08AFEA79 | ApiSet: undefined
 */
export function isRadioStationFavourited(radioStation) {
    return IsRadioStationFavourited(radioStation);
}
/**
 * Hash: 0xA097AB275061FB21 | ApiSet: undefined
 */
export function isMusicOneshotPlaying() {
    return IsMusicOneshotPlaying();
}
/**
 * Hash: 0x1E8E5E20937E3137 | ApiSet: undefined
 */
export function isPedRingtonePlaying(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRingtonePlaying(_ped);
}
/**
 * Hash: 0xCC9AA18DCC7084F4 | ApiSet: undefined
 */
export function isScriptedSpeechPlaying(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsScriptedSpeechPlaying(_ped);
}
/**
 * Hash: 0xB35CE999E8EF317E | ApiSet: undefined
 */
export function isMobilePhoneRadioActive() {
    return IsMobilePhoneRadioActive();
}
/**
 * Hash: 0x0626A247D2405330 | ApiSet: undefined
 */
export function isRadioFadedOut() {
    return IsRadioFadedOut();
}
/**
 * Hash: 0xDF0D54BE7A776737 | ApiSet: undefined
 */
export function isScriptedConversationLoaded() {
    return IsScriptedConversationLoaded();
}
/**
 * Hash: 0xA151A7394A214E65 | ApiSet: undefined
 */
export function isRadioRetuning() {
    return IsRadioRetuning();
}
/**
 * Hash: 0xD11FA52EB849D978 | ApiSet: undefined
 */
export function isStreamPlaying() {
    return IsStreamPlaying();
}
/**
 * Hash: 0x16754C556D2EDE3D | ApiSet: undefined
 */
export function isScriptedConversationOngoing() {
    return IsScriptedConversationOngoing();
}
/**
 * Hash: 0x0BE4BE946463F917 | ApiSet: undefined
 */
export function isVehicleRadioOn(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleRadioOn(_vehicle);
}
/**
 * Links a static emitter to the given entity
 * Hash: 0x651D3228960D08AF | ApiSet: undefined
 */
export function linkStaticEmitterToEntity(emitterName, entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    LinkStaticEmitterToEntity(emitterName, _entity);
}
/**
 * Hash: 0xFF5E5EA2DCEEACF3 | ApiSet: undefined
 */
export function lockRadioStationTrackList(radioStation, trackListName) {
    LockRadioStationTrackList(radioStation, trackListName);
}
/**
 * Load in named stream. Optionally can specify a sound set which contains the sound specified by name.
 * Names for the streams can be found [here](https://gist.github.com/4mmonium/2bd2c9c54d6ca5cbdb7b156a82a3a85a), the list will be updated as more are found.
 * Hash: 0x1F1F957154EC51DF | ApiSet: undefined
 */
export function loadStream(streamName, soundSet) {
    return LoadStream(streamName, soundSet);
}
/**
 * Hash: 0x5DB8010EE71FDEF2 | ApiSet: undefined
 */
export function isVehicleAudiblyDamaged(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleAudiblyDamaged(_vehicle);
}
/**
 * This disables the radio station completely - it won't be selectable on the radio wheel or ever be heard coming from a vehicle/ambient emitter
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x477D9DB48F889591 | ApiSet: undefined
 */
export function lockRadioStation(radioStationName, toggle) {
    LockRadioStation(radioStationName, toggle);
}
/**
 * Load in named stream. Optionally can specify a sound set which contains the sound specified by name.
 * Hash: 0x59C16B79F53B3712 | ApiSet: undefined
 */
export function loadStreamWithStartOffset(streamName, startOffset, soundSet) {
    return LoadStreamWithStartOffset(streamName, startOffset, soundSet);
}
/**
 * Hash: 0x11579D940949C49E | ApiSet: undefined
 */
export function _0x11579D940949C49E(p0) {
    Citizen.invokeNative('0x11579D940949C49E', p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x02E93C796ABD3A97 | ApiSet: undefined
 */
export function _0x02E93C796ABD3A97(p0) {
    Citizen.invokeNative('0x02E93C796ABD3A97', p0);
}
/**
 * ```
 * NativeDB Introduced: v463
 * ```
 * Hash: 0x2DD39BF3E2F9C47F | ApiSet: undefined
 */
export function _0x2DD39BF3E2F9C47F() {
    return Citizen.invokeNative('0x2DD39BF3E2F9C47F');
}
/**
 * Hash: 0x19AF7ED9B9D23058 | ApiSet: undefined
 */
export function _0x19AF7ED9B9D23058() {
    Citizen.invokeNative('0x19AF7ED9B9D23058');
}
/**
 * Hash: 0x58BB377BEC7CD5F4 | ApiSet: undefined
 */
export function _0x58BB377BEC7CD5F4(p0, p1) {
    Citizen.invokeNative('0x58BB377BEC7CD5F4', p0, p1);
}
/**
 * Hash: 0x43FA0DFC5DF87815 | ApiSet: undefined
 */
export function _0x43FA0DFC5DF87815(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x43FA0DFC5DF87815', _vehicle, p1);
}
/**
 * Hash: 0x8BF907833BE275DE | ApiSet: undefined
 */
export function _0x8BF907833BE275DE(p0, p1) {
    Citizen.invokeNative('0x8BF907833BE275DE', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x55ECF4D13D9903B0 | ApiSet: undefined
 */
export function _0x55ECF4D13D9903B0(p0, p1, p2, p3) {
    Citizen.invokeNative('0x55ECF4D13D9903B0', p0, p1, p2, p3);
}
/**
 * Hash: 0x9AC92EED5E4793AB | ApiSet: undefined
 */
export function _0x9AC92EED5E4793AB() {
    Citizen.invokeNative('0x9AC92EED5E4793AB');
}
/**
 * Hash: 0x5B9853296731E88D | ApiSet: undefined
 */
export function _0x5B9853296731E88D(p0, p1, p2, p3, p4, p5) {
    Citizen.invokeNative('0x5B9853296731E88D', p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x97FFB4ADEED08066 | ApiSet: undefined
 */
export function _0x97FFB4ADEED08066(p0, p1) {
    Citizen.invokeNative('0x97FFB4ADEED08066', p0, p1);
}
/**
 * ```
 * SET_H*
 * ```
 * Hash: 0x9D3AF56E94C9AE98 | ApiSet: undefined
 */
export function _0x9D3AF56E94C9AE98(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x9D3AF56E94C9AE98', _vehicle, p1);
}
/**
 * Hash: 0xBEF34B1D9624D5DD | ApiSet: undefined
 */
export function _0xBEF34B1D9624D5DD(p0) {
    Citizen.invokeNative('0xBEF34B1D9624D5DD', p0);
}
/**
 * Hash: 0xB542DE8C3D1CB210 | ApiSet: undefined
 */
export function _0xB542DE8C3D1CB210(p0) {
    Citizen.invokeNative('0xB542DE8C3D1CB210', p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x9BD7BD55E4533183 | ApiSet: undefined
 */
export function _0x9BD7BD55E4533183(p0, p1, p2) {
    Citizen.invokeNative('0x9BD7BD55E4533183', p0, p1, p2);
}
/**
 * ```
 * SET_VEH*
 * ```
 * Hash: 0xC1805D05E6D4FE10 | ApiSet: undefined
 */
export function _0xC1805D05E6D4FE10(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xC1805D05E6D4FE10', _vehicle);
}
/**
 * This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
 * To clear the override use [RESET_TREVOR_RAGE](#\_0xE78503B10C4314E0)
 * Hash: 0x13AD665062541A7E | ApiSet: undefined
 */
export function overrideTrevorRage(voiceEffect) {
    OverrideTrevorRage(voiceEffect);
}
/**
 * Overrides the vehicle's horn hash.
 * When changing this hash on a vehicle, [`_GET_VEHICLE_HORN_HASH`](#\_0xACB5DCCA1EC76840) will **not** return the 'overwritten' hash. It will still always return the default horn hash (same as [`GET_VEHICLE_DEFAULT_HORN`](#\_0x02165D55000219AC)).
 * List of possible hashes (found in decompiled scripts):
 * |        signed |     unsigned |      hex     |
 * |--------------:|-------------:|:------------:|
 * |  `1604822495` | `1604822495` | `0x5FA7A5DF` |
 * | `-1262465009` | `3032502287` | `0xB4C0500F` |
 * |  `-889553789` | `3405413507` | `0xCAFA7C83` |
 * | `-1557943086` | `2737024210` | `0xA323ACD2` |
 * | `-1318696617` | `2976270679` | `0xB1664957` |
 * |    `-7740003` | `4287227293` | `0xFF89E59D` |
 * | `-1815146967` | `2479820329` | `0x93CF0E29` |
 * |  `-339919356` | `3955047940` | `0xEBBD3E04` |
 * Hash: 0x3CDC1E622CCE0356 | ApiSet: undefined
 */
export function overrideVehHorn(vehicle, override, hornHash) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    OverrideVehHorn(_vehicle, override, hornHash);
}
/**
 * Sets audio flag "OverrideMicrophoneSettings"
 * Allows the script to ovverride the current microphone settings
 * Hash: 0x75773E11BA459E90 | ApiSet: undefined
 */
export function overrideMicrophoneSettings(hash, toggle) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    OverrideMicrophoneSettings(hash, toggle);
}
/**
 * To resume the conversation use [RESTART_SCRIPTED_CONVERSATION](#\_0x9AEB285D1818C9AC)
 * Hash: 0x8530AD776CD72B12 | ApiSet: undefined
 */
export function pauseScriptedConversation(finishCurrentLine) {
    PauseScriptedConversation(finishCurrentLine);
}
/**
 * Sets the footstep tuning modes
 * Hash: 0xD2CC78CD3D0B50F9 | ApiSet: undefined
 */
export function overridePlayerGroundMaterial(overriddenMaterialHash, scriptOverrides) {
    if (typeof overriddenMaterialHash === 'string')
        overriddenMaterialHash = this.getHashKey(overriddenMaterialHash);
    OverridePlayerGroundMaterial(overriddenMaterialHash, scriptOverrides);
}
/**
 * This native allows a scripter to override the current underwater stream.
 * It needs to be called before going into the water
 * It needs to also be called with OVERRIDE_UNDERWATER_STREAM("", false) in order to stop overriding.
 * Hash: 0xF2A9CDABCEA04BD6 | ApiSet: undefined
 */
export function overrideUnderwaterStream(override) {
    return OverrideUnderwaterStream(override);
}
/**
 * Hash: 0xED640017ED337E45 | ApiSet: undefined
 */
export function playAmbientSpeechFromPositionNative(speechName, voiceName, position, speechParam) {
    PlayAmbientSpeechFromPositionNative(speechName, voiceName, position.x, position.y, position.z, speechParam);
}
/**
 * Hash: 0xCADA5A0D0702381E | ApiSet: undefined
 */
export function playDeferredSoundFrontend(soundName, soundsetName) {
    PlayDeferredSoundFrontend(soundName, soundsetName);
}
/**
 * ```cpp
 * enum eAudAnimalType {
 * AUD_ANIMAL_NONE = -1,
 * AUD_ANIMAL_BOAR = 0,
 * AUD_ANIMAL_CHICKEN = 1,
 * AUD_ANIMAL_DOG = 2,
 * AUD_ANIMAL_DOG_ROTTWEILER = 3,
 * AUD_ANIMAL_HORSE = 4,
 * AUD_NUM_ANIMALS = 5
 * }
 * ```
 * Hash: 0xEE066C7006C49C0A | ApiSet: undefined
 */
export function playAnimalVocalization(pedHandle, animalType, speechName) {
    const _pedHandle = pedHandle instanceof Ped ? pedHandle.handle() : pedHandle;
    PlayAnimalVocalization(_pedHandle, animalType, speechName);
}
/**
 * Hash: 0xCD536C4D33DCC900 | ApiSet: undefined
 */
export function playEndCreditsMusic(bActive) {
    PlayEndCreditsMusic(bActive);
}
/**
 * See [`PLAY_PED_AMBIENT_SPEECH_NATIVE`](#\_0x8E04FEDD28D42462) for parameter specifications.
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0xC6941B4A3A8FBBB9 | ApiSet: undefined
 */
export function playPedAmbientSpeechAndCloneNative(ped, speechName, speechParam) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayPedAmbientSpeechAndCloneNative(_ped, speechName, speechParam);
}
/**
 * This native had a 4th parameter added in newer game builds
 * `syncOverNetwork` creates a `CPedPlayPainEvent` when set to true, by default this variable is false.
 * You won't be able to use this for clones (remote pedestrians that are not owned by you) or migrating peds if `syncOverNetwork` is set to true; it simply won't execute.
 * The `ped` should also have speech for this to work.
 * ```cpp
 * enum eAudDamageReason {
 * AUD_DAMAGE_REASON_DEFAULT = 0,
 * AUD_DAMAGE_REASON_FALLING = 1,
 * AUD_DAMAGE_REASON_SUPER_FALLING = 2,
 * AUD_DAMAGE_REASON_SCREAM_PANIC = 3,
 * AUD_DAMAGE_REASON_SCREAM_PANIC_SHORT = 4,
 * AUD_DAMAGE_REASON_SCREAM_SCARED = 5,
 * AUD_DAMAGE_REASON_SCREAM_SHOCKED = 6,
 * AUD_DAMAGE_REASON_SCREAM_TERROR = 7,
 * AUD_DAMAGE_REASON_ON_FIRE = 8,
 * AUD_DAMAGE_REASON_DROWNING = 9,
 * // drowning on the surface of water, after we time out
 * AUD_DAMAGE_REASON_SURFACE_DROWNING = 10,
 * AUD_DAMAGE_REASON_INHALE = 11,
 * AUD_DAMAGE_REASON_EXHALE = 12,
 * AUD_DAMAGE_REASON_POST_FALL_GRUNT = 13,
 * AUD_DAMAGE_REASON_ENTERING_RAGDOLL_DEATH = 14,
 * AUD_DAMAGE_REASON_EXPLOSION = 15,
 * AUD_DAMAGE_REASON_MELEE = 16,
 * AUD_DAMAGE_REASON_SHOVE = 17,
 * AUD_DAMAGE_REASON_WHEEZE = 18,
 * AUD_DAMAGE_REASON_COUGH = 19,
 * AUD_DAMAGE_REASON_TAZER = 20,
 * AUD_DAMAGE_REASON_EXHAUSTION = 21,
 * AUD_DAMAGE_REASON_CLIMB_LARGE = 22,
 * AUD_DAMAGE_REASON_CLIMB_SMALL = 23,
 * AUD_DAMAGE_REASON_JUMP = 24,
 * AUD_DAMAGE_REASON_COWER = 25,
 * AUD_DAMAGE_REASON_WHIMPER = 26,
 * AUD_DAMAGE_REASON_DYING_MOAN = 27,
 * AUD_DAMAGE_REASON_CYCLING_EXHALE = 28,
 * AUD_DAMAGE_REASON_PAIN_RAPIDS = 29,
 * AUD_DAMAGE_REASON_SNEEZE = 30,
 * AUD_DAMAGE_REASON_MELEE_SMALL_GRUNT = 31,
 * AUD_DAMAGE_REASON_MELEE_LARGE_GRUNT = 32,
 * AUD_DAMAGE_REASON_POST_FALL_GRUNT_LOW = 33
 * }
 * ```
 * Hash: 0xBC9AE166038A5CEC | ApiSet: undefined
 */
export function playPain(ped, damageReason, rawDamage) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayPain(_ped, damageReason, rawDamage);
}
/**
 * ```
 * Called 38 times in the scripts. There are 5 different audioNames used.
 * One unknown removed below.
 * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");`
 * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");`
 * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");`
 * `AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");`
 * ```
 * Hash: 0xB138AAB8A70D3C69 | ApiSet: undefined
 */
export function playMissionCompleteAudio(audioName) {
    PlayMissionCompleteAudio(audioName);
}
/**
 * Plays ambient speech; see also [`PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE`](#\_0xC6941B4A3A8FBBB9).
 * ```
 * speechParam: Can be one of the following:
 * SPEECH_PARAMS_STANDARD
 * SPEECH_PARAMS_ALLOW_REPEAT
 * SPEECH_PARAMS_BEAT
 * SPEECH_PARAMS_FORCE
 * SPEECH_PARAMS_FORCE_FRONTEND
 * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
 * SPEECH_PARAMS_FORCE_NORMAL
 * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
 * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
 * SPEECH_PARAMS_FORCE_SHOUTED
 * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
 * SPEECH_PARAMS_MEGAPHONE
 * SPEECH_PARAMS_HELI
 * SPEECH_PARAMS_FORCE_MEGAPHONE
 * SPEECH_PARAMS_FORCE_HELI
 * SPEECH_PARAMS_INTERRUPT
 * SPEECH_PARAMS_INTERRUPT_SHOUTED
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE
 * SPEECH_PARAMS_INTERRUPT_FRONTEND
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
 * SPEECH_PARAMS_ADD_BLIP
 * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
 * SPEECH_PARAMS_ADD_BLIP_FORCE
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
 * SPEECH_PARAMS_SHOUTED
 * SPEECH_PARAMS_SHOUTED_CLEAR
 * SPEECH_PARAMS_SHOUTED_CRITICAL
 * Note: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0x8E04FEDD28D42462 | ApiSet: undefined
 */
export function playPedAmbientSpeechNative(ped, speechName, speechParam) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayPedAmbientSpeechNative(_ped, speechName, speechParam);
}
/**
 * ```
 * This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
 * EX (C#):
 * GTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
 * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
 * ```
 * Hash: 0x3523634255FC3318 | ApiSet: undefined
 */
export function playPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayPedAmbientSpeechWithVoiceNative(_ped, speechName, voiceName, speechParam, p4);
}
/**
 * ```
 * Plays the given police radio message.
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr
 * ```
 * Hash: 0xDFEBD56D9BD1EB16 | ApiSet: undefined
 */
export function playPoliceReport(name, p1) {
    return PlayPoliceReport(name, p1);
}
/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny
 * `AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);`
 * `AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);`
 * ```
 * Hash: 0xF9E56683CA8E11A5 | ApiSet: undefined
 */
export function playPedRingtone(ringtoneName, ped, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayPedRingtone(ringtoneName, _ped, p2);
}
/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW
 * gtaforums.com/topic/795622-audio-for-mods
 * ```
 * Hash: 0x8D8686B622B88120 | ApiSet: undefined
 */
export function playSoundFromCoord(soundId, audioName, position, audioRef, isNetwork, range, p8) {
    PlaySoundFromCoord(soundId, audioName, position.x, position.y, position.z, audioRef, isNetwork, range, p8);
}
/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ
 * ```
 * Hash: 0x7FF4944CC209192D | ApiSet: undefined
 */
export function playSound(soundId, audioName, audioRef, p3, p4, p5) {
    PlaySound(soundId, audioName, audioRef, p3, p4, p5);
}
/**
 * ```
 * List: https://pastebin.com/DCeRiaLJ
 * All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
 * ```
 * Hash: 0x67C540AA08E4A6F5 | ApiSet: undefined
 */
export function playSoundFrontend(soundId, audioName, audioRef, p3) {
    PlaySoundFrontend(soundId, audioName, audioRef, p3);
}
/**
 * Plays a preloaded stream back from the specified object.
 * Hash: 0xEBAA9B64D76356FD | ApiSet: undefined
 */
export function playStreamFromObject(object) {
    PlayStreamFromObject(object);
}
/**
 * ```
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0
 * No changes made in b678d.
 * gtaforums.com/topic/795622-audio-for-mods
 * ```
 * Hash: 0xE65F427EB70AB1ED | ApiSet: undefined
 */
export function playSoundFromEntity(soundId, audioName, entity, audioRef, isNetwork, p5) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    PlaySoundFromEntity(soundId, audioName, _entity, audioRef, isNetwork, p5);
}
/**
 * Plays a preloaded stream back from the specified ped.
 * Hash: 0x89049DD63C08B5D1 | ApiSet: undefined
 */
export function playStreamFromPed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayStreamFromPed(_ped);
}
/**
 * Plays a preloaded stream back from the specified Vector3.
 * Hash: 0x21442F412E8DE56B | ApiSet: undefined
 */
export function playStreamFromPosition(position) {
    PlayStreamFromPosition(position.x, position.y, position.z);
}
/**
 * Plays a preloaded stream back from the specified ped vehicle
 * Hash: 0xB70374A758007DFA | ApiSet: undefined
 */
export function playStreamFromVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    PlayStreamFromVehicle(_vehicle);
}
/**
 * Hash: 0x8B2FD4560E55DD2D | ApiSet: undefined
 */
export function playSynchronizedAudioEvent(sceneId) {
    return PlaySynchronizedAudioEvent(sceneId);
}
/**
 * Hash: 0x58FCE43488F9F5F4 | ApiSet: undefined
 */
export function playStreamFrontend() {
    PlayStreamFrontend();
}
/**
 * Hash: 0x62A456AA4769EF34 | ApiSet: undefined
 */
export function playVehicleDoorCloseSound(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    PlayVehicleDoorCloseSound(_vehicle, doorIndex);
}
/**
 * Similar to [START_SCRIPT_CONVERSATION](#\_0x6B17C62C9635D2DC), except that is starts the conversation off paused.
 * A scripter can then kick off the conversation by calling [START_PRELOADED_CONVERSATION](#\_0x23641AFE870AF385).
 * If they want to check that the conversation is done preloading, they can use [GET_IS_PRELOADED_CONVERSATION_READY](#\_0xE73364DB90778FFA)
 * Hash: 0x3B3CAD6166916D87 | ApiSet: undefined
 */
export function preloadScriptConversation(displaySubtitles, addToBriefScreen, cloneConversation, interruptible) {
    PreloadScriptConversation(displaySubtitles, addToBriefScreen, cloneConversation, interruptible);
}
/**
 * Request that we preload the required audio bank for a given vehicle model.
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xCA4CEA6AE0000A7E | ApiSet: undefined
 */
export function preloadVehicleAudioBank(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    PreloadVehicleAudioBank(model);
}
/**
 * Hash: 0x6004BCB0E226AAEA | ApiSet: undefined
 */
export function preloadScriptPhoneConversation(displaySubtitles, addToBriefScreen) {
    PreloadScriptPhoneConversation(displaySubtitles, addToBriefScreen);
}
/**
 * Prepares any banks required to play the given alarm
 * Hash: 0x9D74AE343DB65533 | ApiSet: undefined
 */
export function prepareAlarm(alarmName) {
    return PrepareAlarm(alarmName);
}
/**
 * Hash: 0x3A539D52857EA82D | ApiSet: undefined
 */
export function playVehicleDoorOpenSound(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    PlayVehicleDoorOpenSound(_vehicle, doorIndex);
}
/**
 * Hash: 0xC7ABCACA4985A766 | ApiSet: undefined
 */
export function prepareSynchronizedAudioEvent(audioEvent, startOffsetMs) {
    return PrepareSynchronizedAudioEvent(audioEvent, startOffsetMs);
}
/**
 * Prepares the specified music event. Preparing it in advance will preload any required data so that it's ready to play immediately.
 * Hash: 0x1E5185B72EF5158A | ApiSet: undefined
 */
export function prepareMusicEvent(eventName) {
    return PrepareMusicEvent(eventName);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xC6ED9D5092438D91 | ApiSet: undefined
 */
export function registerScriptWithAudio(inChargeOfAudio) {
    RegisterScriptWithAudio(inChargeOfAudio);
}
/**
 * Refreshes the closest shoreline using the nearest road position.
 * Hash: 0x5D2BFAAB8D956E0E | ApiSet: undefined
 */
export function refreshClosestOceanShoreline() {
    RefreshClosestOceanShoreline();
}
/**
 * Unloads the specified audioBank
 * Hash: 0x77ED170667F50170 | ApiSet: undefined
 */
export function releaseNamedScriptAudioBank(audioBank) {
    ReleaseNamedScriptAudioBank(audioBank);
}
/**
 * Hash: 0x029FE7CD1B7E2E75 | ApiSet: undefined
 */
export function prepareSynchronizedAudioEventForScene(sceneId) {
    return PrepareSynchronizedAudioEventForScene(sceneId);
}
/**
 * This should be called once a sound has finished being manipulated by the script so that its SoundId can be released and re-used.
 * Hash: 0x353FC880830B88FA | ApiSet: undefined
 */
export function releaseSoundId(soundId) {
    ReleaseSoundId(soundId);
}
/**
 * Creates a broken glass area
 * Hash: 0xFBE20329593DEC9D | ApiSet: undefined
 */
export function recordBrokenGlass(position, radius) {
    RecordBrokenGlass(position.x, position.y, position.z, radius);
}
/**
 * This native has been marked as deprecated internally, please use [RELEASE_SCRIPT_AUDIO_BANK](#\_0x7A2D8AD0A9EB9C3F) instead.
 * Hash: 0x0EC92A1BF0857187 | ApiSet: undefined
 */
export function releaseMissionAudioBank() {
    ReleaseMissionAudioBank();
}
/**
 * Removes an entity from its current mix group.
 * Hash: 0x18EB48CFC41F2EA0 | ApiSet: undefined
 */
export function removeEntityFromAudioMixGroup(entity, fadeOut) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    RemoveEntityFromAudioMixGroup(_entity, fadeOut);
}
/**
 * This native has been marked as deprecated internally, please use [RELEASE_SCRIPT_AUDIO_BANK](#\_0x7A2D8AD0A9EB9C3F) instead.
 * Hash: 0x65475A218FFAA93D | ApiSet: undefined
 */
export function releaseAmbientAudioBank() {
    ReleaseAmbientAudioBank();
}
/**
 * ```
 * Found in the b617d scripts, duplicates removed:
 * `AUDIO::_B4BBFD9CD8B3922B("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");`
 * `AUDIO::_B4BBFD9CD8B3922B("V_CIA_PS_WINDOW_UNBROKEN");`
 * `AUDIO::_B4BBFD9CD8B3922B("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");`
 * `AUDIO::_B4BBFD9CD8B3922B("V_FINALEBANK_PS_VAULT_INTACT");`
 * `AUDIO::_B4BBFD9CD8B3922B("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");`
 * ```
 * For events like cars driving through windows, allows script to unocclude that window
 * Hash: 0xB4BBFD9CD8B3922B | ApiSet: undefined
 */
export function removePortalSettingsOverride(portalSettingsName) {
    RemovePortalSettingsOverride(portalSettingsName);
}
/**
 * Unloads all audio banks requested by this script.
 * Hash: 0x7A2D8AD0A9EB9C3F | ApiSet: undefined
 */
export function releaseScriptAudioBank() {
    ReleaseScriptAudioBank();
}
/**
 * Hash: 0xF54BB7B61036F335 | ApiSet: undefined
 */
export function resetPedAudioFlags(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedAudioFlags(_ped);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xCE4AC0439F607045 | ApiSet: undefined
 */
export function releaseWeaponAudio() {
    ReleaseWeaponAudio();
}
/**
 * This native is marked as deprecated internally, please use [REQUEST_SCRIPT_AUDIO_BANK](#\_0x2F844A8B08D76685)
 * This native has a new argument on newer game builds:
 * *   **playerBits**:
 * Hash: 0x7345BDD95E62E0F2 | ApiSet: undefined
 */
export function requestMissionAudioBank(bankName, bOverNetwork) {
    return RequestMissionAudioBank(bankName, bOverNetwork);
}
/**
 * Restarts a conversation that was previously paused with [PAUSE_SCRIPTED_CONVERSATION](#\_0x8530AD776CD72B12)
 * Hash: 0x9AEB285D1818C9AC | ApiSet: undefined
 */
export function restartScriptedConversation() {
    RestartScriptedConversation();
}
/**
 * This native has a new argument on newer game builds:
 * *   **playerBits**:
 * Hash: 0x2F844A8B08D76685 | ApiSet: undefined
 */
export function requestScriptAudioBank(bankName, bOverNetwork) {
    return RequestScriptAudioBank(bankName, bOverNetwork);
}
/**
 * This native is marked as deprecated internally, please use [REQUEST_SCRIPT_AUDIO_BANK](#\_0x2F844A8B08D76685)
 * This native has a new argument on newer game builds:
 * *   **playerBits**:
 * Hash: 0xFE02FFBED8CA9D99 | ApiSet: undefined
 */
export function requestAmbientAudioBank(bankName, bOverNetwork) {
    return RequestAmbientAudioBank(bankName, bOverNetwork);
}
/**
 * Loads the tennis vocalization banks into a couple animal slots.
 * Hash: 0x4ADA3F19BE4A6047 | ApiSet: undefined
 */
export function requestTennisBanks(opponentPed) {
    const _opponentPed = opponentPed instanceof Ped ? opponentPed.handle() : opponentPed;
    RequestTennisBanks(_opponentPed);
}
/**
 * Clears the override set by [OVERRIDE_TREVOR_RAGE](#\_0x13AD665062541A7E)
 * Hash: 0xE78503B10C4314E0 | ApiSet: undefined
 */
export function resetTrevorRage() {
    ResetTrevorRage();
}
/**
 * Resets the override for [SET_VEHICLE_STARTUP_REV_SOUND](#\_0xF1F8157B8C3F171C)
 * Hash: 0xD2DCCD8E16E20997 | ApiSet: undefined
 */
export function resetVehicleStartupRevSound(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ResetVehicleStartupRevSound(_vehicle);
}
/**
 * Overrides wind elevation sounds
 * Hash: 0x70B8EC8FC108A634 | ApiSet: undefined
 */
export function scriptOverridesWindElevation(override, windElevationHashName) {
    if (typeof windElevationHashName === 'string')
        windElevationHashName = this.getHashKey(windElevationHashName);
    ScriptOverridesWindElevation(override, windElevationHashName);
}
/**
 * Sets the specified ped to use a specific voice different to the one associated with their model.
 * Hash: 0x6C8065A3B780185B | ApiSet: undefined
 */
export function setAmbientVoiceName(ped, voiceName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetAmbientVoiceName(_ped, voiceName);
}
/**
 * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
 * Hash: 0x395BF71085D1B1D9 | ApiSet: undefined
 */
export function setAggressiveHorns(toggle) {
    SetAggressiveHorns(toggle);
}
/**
 * Set a delay in milliseconds for the audio to be cleaned up when the script finishes.
 * Hash: 0xA5F377B175A699C5 | ApiSet: undefined
 */
export function setAudioScriptCleanupTime(timeMs) {
    SetAudioScriptCleanupTime(timeMs);
}
/**
 * Sets the specified ped to use a specific voice different to the one associated with their model.
 * Hash: 0x9A53DED9921DE990 | ApiSet: undefined
 */
export function setAmbientVoiceNameHash(ped, hash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    SetAmbientVoiceNameHash(_ped, hash);
}
/**
 * Hash: 0x9748FA4DE50CCE3E | ApiSet: undefined
 */
export function setAmbientZoneListState(zoneListName, enabled, forceUpdate) {
    SetAmbientZoneListState(zoneListName, enabled, forceUpdate);
}
/**
 * Hash: 0xF3638DAE8C4045E1 | ApiSet: undefined
 */
export function setAmbientZoneListStatePersistent(ambientZone, enabled, forceUpdate) {
    SetAmbientZoneListStatePersistent(ambientZone, enabled, forceUpdate);
}
/**
 * Hash: 0xBDA07E5950085E46 | ApiSet: undefined
 */
export function setAmbientZoneState(enabled, forceUpdate) {
    return SetAmbientZoneState(enabled, forceUpdate);
}
/**
 * Hash: 0x1D6650420CEC9D3B | ApiSet: undefined
 */
export function setAmbientZoneStatePersistent(zoneName, enabled, forceUpdate) {
    SetAmbientZoneStatePersistent(zoneName, enabled, forceUpdate);
}
/**
 * ```cpp
 * enum eAudAnimalMood {
 * AUD_ANIMAL_MOOD_ANGRY = 0,
 * AUD_ANIMAL_MOOD_PLAYFUL = 1,
 * AUD_ANIMAL_MOOD_NUM_MOODS = 2
 * }
 * ```
 * Hash: 0xCC97B29285B1DC3B | ApiSet: undefined
 */
export function setAnimalMood(animal, mood) {
    const _animal = animal instanceof Ped ? animal.handle() : animal;
    SetAnimalMood(_animal, mood);
}
/**
 * Needs to be called every frame.
 * ```cpp
 * enum eAudSpecialEffectMode
 * {
 * kSpecialEffectModeNormal = 0,
 * kSpecialEffectModeUnderwater = 1,
 * kSpecialEffectModeStoned = 2,
 * kSpecialEffectModePauseMenu = 3,
 * kSpecialEffectModeSlowMotion = 4,
 * kSpecialEffectModeDrunkStage01 = 5,
 * kSpecialEffectModeDrunkStage02 = 6,
 * kSpecialEffectModeDrunkStage03 = 7,
 * NUM_AUDSPECIALEFFECTMODE
 * };
 * ```
 * Hash: 0x12561FCBB62D5B9C | ApiSet: undefined
 */
export function setAudioSpecialEffectMode(mode) {
    SetAudioSpecialEffectMode(mode);
}
/**
 * Generic interface to toggle audio functionality, with auto-reset on script termination and support for multiple script threads
 * Flags used in game scripts:
 * | Flag Name | Description of Usage |
 * | ----- | -------- |
 * | ActivateSwitchWheelAudio | |
 * | AllowAmbientSpeechInSlowMo | |
 * | AllowCutsceneOverScreenFade | |
 * | AllowForceRadioAfterRetune | |
 * | AllowPainAndAmbientSpeechToPlayDuringCutscene | |
 * | AllowPlayerAIOnMission | |
 * | AllowPoliceScannerWhenPlayerHasNoControl | |
 * | AllowRadioDuringSwitch | |
 * | AllowRadioOverScreenFade | |
 * | AllowScoreAndRadio | |
 * | AllowScriptedSpeechInSlowMo | |
 * | AvoidMissionCompleteDelay | |
 * | DisableAbortConversationForDeathAndInjury | |
 * | DisableAbortConversationForRagdoll | |
 * | DisableBarks | |
 * | DisableFlightMusic | |
 * | DisableNPCHeadsetSpeechAttenuation | |
 * | DisableReplayScriptStreamRecording | |
 * | EnableHeadsetBeep | |
 * | EnableMissileLockWarningForAllVehicles | |
 * | ForceConversationInterrupt | |
 * | ForceSeamlessRadioSwitch | |
 * | ForceSniperAudio | |
 * | FrontendRadioDisabled | |
 * | HoldMissionCompleteWhenPrepared | |
 * | IsDirectorModeActive |  Allows you to play speech infinitely without any pauses like in Director Mode. |
 * | IsPlayerOnMissionForSpeech | |
 * | ListenerReverbDisabled | |
 * | LoadMPData | |
 * | MobileRadioInGame | |
 * | OnlyAllowScriptTriggerPoliceScanner | |
 * | PlayerOnDLCHeist4Island | |
 * | PlayMenuMusic | |
 * | PoliceScannerDisabled | |
 * | ScriptedConvListenerMaySpeak | |
 * | SpeechDucksScore | |
 * | SuppressPlayerScubaBreathing | |
 * | UseQuietSceneSoftVersion | |
 * | WantedMusicDisabled | |
 * | WantedMusicOnMission | |
 * ```
 * All flag IDs and hashes:
 * ID: 01 | Hash: 0x20A7858F
 * ID: 02 | Hash: 0xA11C2259
 * ID: 03 | Hash: 0x08DE4700
 * ID: 04 | Hash: 0x989F652F
 * ID: 05 | Hash: 0x3C9E76BA
 * ID: 06 | Hash: 0xA805FEB0
 * ID: 07 | Hash: 0x4B94EA26
 * ID: 08 | Hash: 0x803ACD34
 * ID: 09 | Hash: 0x7C741226
 * ID: 10 | Hash: 0x31DB9EBD
 * ID: 11 | Hash: 0xDF386F18
 * ID: 12 | Hash: 0x669CED42
 * ID: 13 | Hash: 0x51F22743
 * ID: 14 | Hash: 0x2052B35C
 * ID: 15 | Hash: 0x071472DC
 * ID: 16 | Hash: 0xF9928BCC
 * ID: 17 | Hash: 0x7ADBDD48
 * ID: 18 | Hash: 0xA959BA1A
 * ID: 19 | Hash: 0xBBE89B60
 * ID: 20 | Hash: 0x87A08871
 * ID: 21 | Hash: 0xED1057CE
 * ID: 22 | Hash: 0x1584AD7A
 * ID: 23 | Hash: 0x8582CFCB
 * ID: 24 | Hash: 0x7E5E2FB0
 * ID: 25 | Hash: 0xAE4F72DB
 * ID: 26 | Hash: 0x5D16D1FA
 * ID: 27 | Hash: 0x06B2F4B8
 * ID: 28 | Hash: 0x5D4CDC96
 * ID: 29 | Hash: 0x8B5A48BA
 * ID: 30 | Hash: 0x98FBD539
 * ID: 31 | Hash: 0xD8CB0473
 * ID: 32 | Hash: 0x5CBB4874
 * ID: 33 | Hash: 0x2E9F93A9
 * ID: 34 | Hash: 0xD93BEA86
 * ID: 35 | Hash: 0x92109B7D
 * ID: 36 | Hash: 0xB7EC9E4D
 * ID: 37 | Hash: 0xCABDBB1D
 * ID: 38 | Hash: 0xB3FD4A52
 * ID: 39 | Hash: 0x370D94E5
 * ID: 40 | Hash: 0xA0F7938F
 * ID: 41 | Hash: 0xCBE1CE81
 * ID: 42 | Hash: 0xC27F1271
 * ID: 43 | Hash: 0x9E3258EB
 * ID: 44 | Hash: 0x551CDA5B
 * ID: 45 | Hash: 0xCB6D663C
 * ID: 46 | Hash: 0x7DACE87F
 * ID: 47 | Hash: 0xF9DE416F
 * ID: 48 | Hash: 0x882E6E9E
 * ID: 49 | Hash: 0x16B447E7
 * ID: 50 | Hash: 0xBD867739
 * ID: 51 | Hash: 0xA3A58604
 * ID: 52 | Hash: 0x7E046BBC
 * ID: 53 | Hash: 0xD95FDB98
 * ID: 54 | Hash: 0x5842C0ED
 * ID: 55 | Hash: 0x285FECC6
 * ID: 56 | Hash: 0x9351AC43
 * ID: 57 | Hash: 0x50032E75
 * ID: 58 | Hash: 0xAE6D0D59
 * ID: 59 | Hash: 0xD6351785
 * ID: 60 | Hash: 0xD25D71BC
 * ID: 61 | Hash: 0x1F7F6423
 * ID: 62 | Hash: 0xE24C3AA6
 * ID: 63 | Hash: 0xBFFDD2B7
 * ```
 * Hash: 0xB9EFD5C25018725A | ApiSet: undefined
 */
export function setAudioFlag(flagName, toggle) {
    SetAudioFlag(flagName, toggle);
}
/**
 * Hash: 0xEF21A9EF089A2668 | ApiSet: undefined
 */
export function setAudioSceneVariable(scene, variableName, value) {
    SetAudioSceneVariable(scene, variableName, value);
}
/**
 * Sets whether or not scripted conversation flow should be controlled by anim triggers
 * Hash: 0x0B568201DD99F0EB | ApiSet: undefined
 */
export function setConversationAudioControlledByAnim(enable) {
    SetConversationAudioControlledByAnim(enable);
}
/**
 * Sets the priority for the given vehicle. This is a hint for the audio system as to what LOD the
 * vehicle should use.
 * 'High' priority will bump up the activation range significantly and prevent it
 * from dropping when the vehicle is not within the view frustrum.
 * 'Max' will attempt to keep the vehicle at maximum LOD regardless of how far it is from the listener or what it is currently doing. Be careful with this!
 * There is a hard limit of 5 simulataneous granular cars (including the player) so we are quite limited on the number
 * we can play at once, so setting vehicles to max priority will reduce the number of engines availble for regular NPC vehicles
 * ```cpp
 * enum eAudVehiclePriority {
 * AUDIO_VEHICLE_PRIORITY_NORMAL = 0,
 * AUDIO_VEHICLE_PRIORITY_MEDIUM = 1,
 * AUDIO_VEHICLE_PRIORITY_MAX = 2,
 * AUDIO_VEHICLE_PRIORITY_HIGH = 3,
 * }
 * ```
 * Hash: 0xE5564483E407F914 | ApiSet: undefined
 */
export function setAudioVehiclePriority(vehicle, priority) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetAudioVehiclePriority(_vehicle, priority);
}
/**
 * Used to determine whether conversation should use robot speech or not
 * Hash: 0x61631F5DF50D1C34 | ApiSet: undefined
 */
export function setConversationAudioPlaceholder(isPlaceHolder) {
    SetConversationAudioPlaceholder(isPlaceHolder);
}
/**
 * ```
 * All occurrences found in b617d, sorted alphabetically and identical lines removed:
 * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");`
 * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");`
 * `AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");`
 * ```
 * Add a suffix to the cutscene audio name. Call before loading the cutscene.
 * Hash: 0x3B4BF5F0859204D9 | ApiSet: undefined
 */
export function setCutsceneAudioOverride(name) {
    SetCutsceneAudioOverride(name);
}
/**
 * Queues up a custom track list on the specified radio station. The content in the track list will be played as soon as possible.
 * The station does not have to be frozen.
 * Hash: 0x4E404A9361F75BB2 | ApiSet: undefined
 */
export function setCustomRadioTrackList(radioStation, trackListName, forceNow) {
    SetCustomRadioTrackList(radioStation, trackListName, forceNow);
}
/**
 * Allows the radio to be played in the frontend.
 * Hash: 0xF7F26C6E9CC9EBB8 | ApiSet: undefined
 */
export function setFrontendRadioActive(active) {
    SetFrontendRadioActive(active);
}
/**
 * Retunes a named static emitter to the specified station
 * Hash: 0xACF57305B12AF907 | ApiSet: undefined
 */
export function setEmitterRadioStation(emitterName, radioStation) {
    SetEmitterRadioStation(emitterName, radioStation);
}
/**
 * Sets the global radio signal level, lower value will cause radio static.
 * Used only a handful of times in scripts.
 * Hash: 0x159B7318403A1CD8 | ApiSet: undefined
 */
export function setGlobalRadioSignalLevel(signalLevel) {
    SetGlobalRadioSignalLevel(signalLevel);
}
/**
 * Hash: 0x892B6AB8F33606F5 | ApiSet: undefined
 */
export function setEntityForNullConvPed(speakerConversationIndex, entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityForNullConvPed(speakerConversationIndex, _entity);
}
/**
 * Hash: 0x88795F13FACDA88D | ApiSet: undefined
 */
export function setInitialPlayerStation(radioStation) {
    SetInitialPlayerStation(radioStation);
}
/**
 * Hash: 0x3BD3F52BA9B1E4E8 | ApiSet: undefined
 */
export function setGpsActive(active) {
    SetGpsActive(active);
}
/**
 * Hash: 0xA5342D390CDA41D6 | ApiSet: undefined
 */
export function setPedAudioGender(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAudioGender(_ped, p1);
}
/**
 * Hash: 0xBF286C554784F3DF | ApiSet: undefined
 */
export function setMobilePhoneRadioState(state) {
    SetMobilePhoneRadioState(state);
}
/**
 * ```
 * If this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..
 * ```
 * Hash: 0xB6AE90EDDE95C762 | ApiSet: undefined
 */
export function setMicrophonePosition(p0, x1, y1, z1, x2, y2, z2, x3, y3, z3) {
    SetMicrophonePosition(p0, x1, y1, z1, x2, y2, z2, x3, y3, z3);
}
/**
 * Hash: 0x76D683C108594D0E | ApiSet: undefined
 */
export function setHornEnabled(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHornEnabled(_vehicle, toggle);
}
/**
 * Sets the ped so they sound drunk
 * Hash: 0x95D2D383D5396B8A | ApiSet: undefined
 */
export function setPedIsDrunk(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedIsDrunk(_ped, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x29DA3CA8D8B2692D | ApiSet: undefined
 */
export function setPedClothEventsEnabled(ped, enabled) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedClothEventsEnabled(_ped, enabled);
}
/**
 * Hash: 0x1098355A16064BB3 | ApiSet: undefined
 */
export function setMobileRadioEnabledDuringGameplay(toggle) {
    SetMobileRadioEnabledDuringGameplay(toggle);
}
/**
 * ```
 * Enables/disables ped's "loud" footstep sound.
 * ```
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x0653B735BFBDFE87 | ApiSet: undefined
 */
export function setPedAudioFootstepLoud(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAudioFootstepLoud(_ped, toggle);
}
/**
 * ```
 * From the scripts:
 * `AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));`
 * `AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));`
 * `AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));`
 * `AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));`
 * ```
 * Hash: 0x7CDC8C3B89F661B3 | ApiSet: undefined
 */
export function setPedVoiceGroup(ped, voiceGroupHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof voiceGroupHash === 'string')
        voiceGroupHash = this.getHashKey(voiceGroupHash);
    SetPedVoiceGroup(_ped, voiceGroupHash);
}
/**
 * Calls the same internal function [`_SET_PED_VOICE_GROUP`](#\_0x7CDC8C3B89F661B3) calls, but passes `voiceGroupHash` (defined as a parameter in the referenced native) as `0`.
 * Hash: 0x40CF0D12D142A9E8 | ApiSet: undefined
 */
export function setPedVoiceFull(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedVoiceFull(_ped);
}
/**
 * ```
 * Dat151RelType == 29
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x0BABC1345ABBFB16 | ApiSet: undefined
 */
export function setPedVoiceGroupRace(ped, voiceGroupHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof voiceGroupHash === 'string')
        voiceGroupHash = this.getHashKey(voiceGroupHash);
    SetPedVoiceGroupRace(_ped, voiceGroupHash);
}
/**
 * Hash: 0x1B7ABE26CBCBF8C7 | ApiSet: undefined
 */
export function setPedRaceAndVoiceGroup(ped, pedRace, pvgHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedRaceAndVoiceGroup(_ped, pedRace, pvgHash);
}
/**
 * Hash: 0x33E3C6C6F2F0B506 | ApiSet: undefined
 */
export function setPositionForNullConvPed(speakerConversationIndex, position) {
    SetPositionForNullConvPed(speakerConversationIndex, position.x, position.y, position.z);
}
/**
 * Enable player vehicle specific alarm disarm/arm sound triggering
 * Hash: 0x6FDDAD856E36988A | ApiSet: undefined
 */
export function setPlayerVehicleAlarmAudioActive(vehicle, active) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlayerVehicleAlarmAudioActive(_vehicle, active);
}
/**
 * Hash: 0x044DBAD7A7FA2BE5 | ApiSet: undefined
 */
export function setPortalSettingsOverride(oldPortalSettingsName, newPortalSettingsName) {
    SetPortalSettingsOverride(oldPortalSettingsName, newPortalSettingsName);
}
/**
 * Overrides the calculated ped density that is used to modulate the ambient ped walla sounds (in exteriors only)
 * If you want to use this for interiors, use [SET_PED_INTERIOR_WALLA_DENSITY](#\_0x8BF907833BE275DE)
 * Hash: 0x149AEE66F0CB3A99 | ApiSet: undefined
 */
export function setPedWallaDensity(density, applyValue) {
    SetPedWallaDensity(density, applyValue);
}
/**
 * Hash: 0xDA07819E452FFE8F | ApiSet: undefined
 */
export function setPositionedPlayerVehicleRadioEmitterEnabled(enabled) {
    SetPositionedPlayerVehicleRadioEmitterEnabled(enabled);
}
/**
 * Sets a player ped to use his ANGRY speech contexts
 * Hash: 0xEA241BB04110F091 | ApiSet: undefined
 */
export function setPlayerAngry(ped, isAngry) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPlayerAngry(_ped, isAngry);
}
/**
 * Hash: 0xC1AA9F53CE982990 | ApiSet: undefined
 */
export function setRadioAutoUnfreeze(toggle) {
    SetRadioAutoUnfreeze(toggle);
}
/**
 * Sets the radio to tune up. (changes radio station)
 * Hash: 0xFF266D1D0EB1195D | ApiSet: undefined
 */
export function setRadioRetuneUp() {
    SetRadioRetuneUp();
}
/**
 * Doesn't have an effect in Story Mode.
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x4CAFEBFA21EC188D | ApiSet: undefined
 */
export function setRadioStationIsVisible(radioStation, toggle) {
    SetRadioStationIsVisible(radioStation, toggle);
}
/**
 * Hash: 0x2C96CDB04FCA358E | ApiSet: undefined
 */
export function setRadioFrontendFadeTime(fadeTime) {
    SetRadioFrontendFadeTime(fadeTime);
}
/**
 * ```
 * Sets radio station by index.
 * ```
 * Hash: 0xA619B168B8A8570F | ApiSet: undefined
 */
export function setRadioToStationIndex(radioStation) {
    SetRadioToStationIndex(radioStation);
}
/**
 * Find the radio station list [here](https://gist.github.com/4mmonium/b47d6512a2d992cbf4eea15d9038b581)
 * Hash: 0xC69EDA28699D5107 | ApiSet: undefined
 */
export function setRadioToStationName(stationName) {
    SetRadioToStationName(stationName);
}
/**
 * Sets radio to tune down. (Changes radio station)
 * Hash: 0xDD6BCF9E94425DF9 | ApiSet: undefined
 */
export function setRadioRetuneDown() {
    SetRadioRetuneDown();
}
/**
 * ```
 * Only found this one in the decompiled scripts:
 * `AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");`
 * ```
 * Hash: 0xB39786F201FEE30B | ApiSet: undefined
 */
export function setRadioTrack(radioStation, radioTrack) {
    SetRadioTrack(radioStation, radioTrack);
}
/**
 * Hash: 0x06C0023BED16DD6B | ApiSet: undefined
 */
export function setScriptUpdateDoorAudio(doorHash, toggle) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    SetScriptUpdateDoorAudio(doorHash, toggle);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xF584CF8529B51434 | ApiSet: undefined
 */
export function setSirenKeepOn(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetSirenKeepOn(_vehicle, toggle);
}
/**
 * ```
 * 6 calls in the b617d scripts, removed identical lines:
 * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);`
 * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);`
 * `AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);`
 * ```
 * Hash: 0x774BD811F656A122 | ApiSet: undefined
 */
export function setRadioStationMusicOnly(radioStation, toggle) {
    SetRadioStationMusicOnly(radioStation, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x2CB0075110BE1E56 | ApiSet: undefined
 */
export function setRadioTrackMix(radioStationName, mixName, p2) {
    SetRadioTrackMix(radioStationName, mixName, p2);
}
/**
 * ```
 * Example:
 * `AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);`
 * This turns off surrounding sounds not connected directly to peds.
 * ```
 * Hash: 0x399D2D3B33F1B8EB | ApiSet: undefined
 */
export function setStaticEmitterEnabled(emitterName, toggle) {
    SetStaticEmitterEnabled(emitterName, toggle);
}
/**
 * Hash: 0x1FEF0683B96EBCF2 | ApiSet: undefined
 */
export function setSirenWithNoDriver(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetSirenWithNoDriver(_vehicle, toggle);
}
/**
 * ```
 * SET_VARIABLE_ON_*
 * ```
 * Hash: 0xBCC29F935ED07688 | ApiSet: undefined
 */
export function setVariableOnCutsceneAudio(variableName, value) {
    SetVariableOnCutsceneAudio(variableName, value);
}
/**
 * Hash: 0xAD6B3148A78AE9B6 | ApiSet: undefined
 */
export function setVariableOnSound(soundId, variableName, value) {
    SetVariableOnSound(soundId, variableName, value);
}
/**
 * ```
 * From the scripts, p0:
 * "ArmWrestlingIntensity",
 * "INOUT",
 * "Monkey_Stream",
 * "ZoomLevel"
 * ```
 * Hash: 0x2F9D3834AEB9EF79 | ApiSet: undefined
 */
export function setVariableOnStream(p0, p1) {
    SetVariableOnStream(p0, p1);
}
/**
 * Hash: 0x19F21E63AE6EAE4E | ApiSet: undefined
 */
export function setUserRadioControlEnabled(toggle) {
    SetUserRadioControlEnabled(toggle);
}
/**
 * ```
 * `AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);`
 * `AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);`
 * ```
 * Hash: 0x733ADF241531E5C2 | ApiSet: undefined
 */
export function setVariableOnUnderWaterStream(variableName, value) {
    SetVariableOnUnderWaterStream(variableName, value);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x3E45765F3FBB582F | ApiSet: undefined
 */
export function setVehHasRadioOverride(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehHasRadioOverride(_vehicle);
}
/**
 * Vehicle will make a 'rattling' noise when decelerating
 * Hash: 0x01BB4D577D38BD9E | ApiSet: undefined
 */
export function setVehicleAudioBodyDamageFactor(vehicle, intensity) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleAudioBodyDamageFactor(_vehicle, intensity);
}
/**
 * Find the radio station list [here](https://gist.github.com/4mmonium/b47d6512a2d992cbf4eea15d9038b581)
 * Hash: 0x1B9C0099CB942AC6 | ApiSet: undefined
 */
export function setVehRadioStation(vehicle, radioStation) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehRadioStation(_vehicle, radioStation);
}
/**
 * Hash: 0x59E7B488451F4D3A | ApiSet: undefined
 */
export function setVehicleAudioEngineDamageFactor(vehicle, damageFactor) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleAudioEngineDamageFactor(_vehicle, damageFactor);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x0350E7E17BA767D0 | ApiSet: undefined
 */
export function setVehicleHornVariation(vehicle, value) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHornVariation(_vehicle, value);
}
/**
 * ```
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
 * Will give a boost-soundeffect.
 * ```
 * Hash: 0x4A04DE7CAB2739A1 | ApiSet: undefined
 */
export function setVehicleBoostActive(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleBoostActive(_vehicle, toggle);
}
/**
 * ```
 * can't seem to enable radio on cop cars etc
 * ```
 * Hash: 0x3B988190C0AA6C0B | ApiSet: undefined
 */
export function setVehicleRadioEnabled(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRadioEnabled(_vehicle, toggle);
}
/**
 * Toggles the incoming missile warning system for specified vehicle.
 * Hash: 0xF3365489E0DD50F9 | ApiSet: undefined
 */
export function setVehicleMissileWarningEnabled(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleMissileWarningEnabled(_vehicle, toggle);
}
/**
 * Overrides the vehicle's startup engine rev sound.
 * You can reset this with [RESET_VEHICLE_STARTUP_REV_SOUND](#\_0xD2DCCD8E16E20997)
 * Hash: 0xF1F8157B8C3F171C | ApiSet: undefined
 */
export function setVehicleStartupRevSound(vehicle, soundName, setName) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleStartupRevSound(_vehicle, soundName, setName);
}
/**
 * Hash: 0xBB6F1CAEC68B0BCE | ApiSet: undefined
 */
export function setVehicleRadioLoud(vehicle, loud) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRadioLoud(_vehicle, loud);
}
/**
 * Hash: 0x9663FE6B7A61EB00 | ApiSet: undefined
 */
export function skipToNextScriptedConversationLine() {
    SkipToNextScriptedConversationLine();
}
/**
 * Hash: 0x6DDBBDD98E2E9C25 | ApiSet: undefined
 */
export function skipRadioForward() {
    SkipRadioForward();
}
/**
 * ```
 * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
 * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC
 * ```
 * Hash: 0x013A80FC08F6E4F2 | ApiSet: undefined
 */
export function startAudioScene(scene) {
    return StartAudioScene(scene);
}
/**
 * For use with [PRELOAD_SCRIPT_CONVERSATION](#\_0x3B3CAD6166916D87) and [GET_IS_PRELOADED_CONVERSATION_READY](#\_0xE73364DB90778FFA)
 * Hash: 0x23641AFE870AF385 | ApiSet: undefined
 */
export function startPreloadedConversation() {
    StartPreloadedConversation();
}
/**
 * ```
 * SET_*
 * ```
 * Hash: 0x9C11908013EA4715 | ApiSet: undefined
 */
export function soundVehicleHornThisFrame(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SoundVehicleHornThisFrame(_vehicle);
}
/**
 * You should call [PREPARE_ALARM](#\_0x9D74AE343DB65533) and wait for its value to be true before using this
 * Hash: 0x0355EF116C4C97B2 | ApiSet: undefined
 */
export function startAlarm(alarmName, skipStartup) {
    StartAlarm(alarmName, skipStartup);
}
/**
 * Hash: 0x6B17C62C9635D2DC | ApiSet: undefined
 */
export function startScriptConversation(displaySubtitles, addToBriefScreen, cloneConversation, interruptible) {
    StartScriptConversation(displaySubtitles, addToBriefScreen, cloneConversation, interruptible);
}
/**
 * Hash: 0x2F794A877ADD4C92 | ApiSet: undefined
 */
export function stopAllAlarms(instantStop) {
    StopAllAlarms(instantStop);
}
/**
 * Hash: 0x252E5F915EABB675 | ApiSet: undefined
 */
export function startScriptPhoneConversation(displaySubtitles, addToBriefScreen) {
    StartScriptPhoneConversation(displaySubtitles, addToBriefScreen);
}
/**
 * Hash: 0xA1CADDCD98415A41 | ApiSet: undefined
 */
export function stopAlarm(alarmName, instantStop) {
    StopAlarm(alarmName, instantStop);
}
/**
 * Stops the named mixing scene (which was previously started by this script)
 * Hash: 0xDFE8422B3B94E688 | ApiSet: undefined
 */
export function stopAudioScene(sceneName) {
    StopAudioScene(sceneName);
}
/**
 * Stops audio for the current cutscene.
 * Hash: 0x806058BBDC136E06 | ApiSet: undefined
 */
export function stopCutsceneAudio() {
    StopCutsceneAudio();
}
/**
 * Stops all mixed scenes which were previously started by this script
 * Hash: 0xBAC7FC81A75EC1A1 | ApiSet: undefined
 */
export function stopAudioScenes() {
    StopAudioScenes();
}
/**
 * Stops currently playing ambient speech.
 * Hash: 0xB8BEC0CA6F0EDB0F | ApiSet: undefined
 */
export function stopCurrentPlayingAmbientSpeech(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopCurrentPlayingAmbientSpeech(_ped);
}
/**
 * Stops currently playing speech (Pain, ambient, scripted, breathing).
 * Hash: 0x7A73D05A607734C7 | ApiSet: undefined
 */
export function stopCurrentPlayingSpeech(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopCurrentPlayingSpeech(_ped);
}
/**
 * This doesn't stop a piece of dialogue that has been triggered.
 * This stops the ability to force ambient dialogue if set to true - however setting it to false, then triggering a context, then setting it to true again will allow this.
 * The ped will also be prevented from speaking on remote machines. Use [STOP_PED_SPEAKING](#\_0x9D64D7405520E3D3) if you just want to affect the local machine.
 * Hash: 0xAB6781A5F3101470 | ApiSet: undefined
 */
export function stopPedSpeakingSynced(ped, shouldDisable) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopPedSpeakingSynced(_ped, shouldDisable);
}
/**
 * Stops a ped's ringtone from playing
 * Hash: 0x6C5AE23EFA885092 | ApiSet: undefined
 */
export function stopPedRingtone(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopPedRingtone(_ped);
}
/**
 * Hash: 0xD79DEEFB53455EBA | ApiSet: undefined
 */
export function stopScriptedConversation(finishCurrentLine) {
    return StopScriptedConversation(finishCurrentLine);
}
/**
 * This doesn't stop a piece of dialogue that has been triggered.
 * This stops the ability to force ambient dialogue if set to true - however setting it to false, then triggering a context, then setting it to true again will allow this.
 * Nb. This does not sync over the network, it will only affect peds locally. Use [STOP_PED_SPEAKING_SYNCED](#\_0xAB6781A5F3101470) if you need to affect peds on other machines too.
 * Hash: 0x9D64D7405520E3D3 | ApiSet: undefined
 */
export function stopPedSpeaking(ped, shouldDisable) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopPedSpeaking(_ped, shouldDisable);
}
/**
 * Stops all smoke grenade sounds
 * Hash: 0xE4E6DD5566D28C82 | ApiSet: undefined
 */
export function stopSmokeGrenadeExplosionSounds() {
    StopSmokeGrenadeExplosionSounds();
}
/**
 * Stops the sound from currently playing, there isn't a way to resume a sound
 * after stopping it.
 * Hash: 0xA3B0C41BA5CC0BB5 | ApiSet: undefined
 */
export function stopSound(soundId) {
    StopSound(soundId);
}
/**
 * Hash: 0xA4718A1419D18151 | ApiSet: undefined
 */
export function stopStream() {
    StopStream();
}
/**
 * ... When not in a vehicle
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x66C3FB05206041BA | ApiSet: undefined
 */
export function triggerSiren(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TriggerSiren(_vehicle);
}
/**
 * Hash: 0x92D6A88E64A94430 | ApiSet: undefined
 */
export function stopSynchronizedAudioEvent(p0) {
    return StopSynchronizedAudioEvent(p0);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Removes all instances of a given context block.
 * Hash: 0x2ACABED337622DF2 | ApiSet: undefined
 */
export function unblockSpeechContextGroup(groupName) {
    UnblockSpeechContextGroup(groupName);
}
/**
 * ```
 * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W
 * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
 * ```
 * Hash: 0x706D57B0F50DA710 | ApiSet: undefined
 */
export function triggerMusicEvent(eventName) {
    return TriggerMusicEvent(eventName);
}
/**
 * Hash: 0xFC00454CF60B91DD | ApiSet: undefined
 */
export function unfreezeRadioStation(radioStation) {
    UnfreezeRadioStation(radioStation);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * ```
 * On last-gen this just runs blr and this func is called by several other functions other then the native's table.
 * ```
 * Hash: 0xA8638BE228D4751A | ApiSet: undefined
 */
export function unregisterScriptWithAudio() {
    UnregisterScriptWithAudio();
}
/**
 * Hash: 0xB165AB7C248B2DC1 | ApiSet: undefined
 */
export function unlockMissionNewsStory(newsStory) {
    UnlockMissionNewsStory(newsStory);
}
/**
 * ```
 * `AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");`
 * ```
 * Hash: 0x031ACB6ABA18C729 | ApiSet: undefined
 */
export function unlockRadioStationTrackList(radioStation, trackListName) {
    UnlockRadioStationTrackList(radioStation, trackListName);
}
/**
 * Updates a playing sounds absolute position.
 * Hash: 0x7EC3C679D0E7E46B | ApiSet: undefined
 */
export function updateSoundCoord(soundId, position) {
    UpdateSoundCoord(soundId, position.x, position.y, position.z);
}
/**
 * Allows script to trigger a sweetener footstep sound
 * Hash: 0xBF4DC1784BE94DFA | ApiSet: undefined
 */
export function useFootstepScriptSweeteners(ped, useSweetner, soundSetHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof soundSetHash === 'string')
        soundSetHash = this.getHashKey(soundSetHash);
    UseFootstepScriptSweeteners(_ped, useSweetner, soundSetHash);
}
/**
 * Unlocks any available DJ radio tracks based on the tuneable status
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x47AED84213A47510 | ApiSet: undefined
 */
export function updateUnlockableDjRadioTracks(allowTrackReprioritization) {
    UpdateUnlockableDjRadioTracks(allowTrackReprioritization);
}
/**
 * Unloads tennis vocalization banks loaded with [`REQUEST_TENNIS_BANKS`](#\_0x4ADA3F19BE4A6047).
 * Hash: 0x0150B6FF25A9E2E5 | ApiSet: undefined
 */
export function unrequestTennisBanks() {
    UnrequestTennisBanks();
}
/**
 * Hash: 0xFA932DE350266EF8 | ApiSet: undefined
 */
export function useSirenAsHorn(vehicle, sirenAsHorn) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    UseSirenAsHorn(_vehicle, sirenAsHorn);
}
/**
 * Hash: 0xC8CA9670B9D83B3B | ApiSet: undefined
 */
export function advanceClockTimeTo(hour, minute, second) {
    AdvanceClockTimeTo(hour, minute, second);
}
/**
 * Hash: 0x3D10BC92A4DB1D35 | ApiSet: undefined
 */
export function getClockDayOfMonth() {
    return GetClockDayOfMonth();
}
/**
 * Hash: 0xD716F30D8C8980E2 | ApiSet: undefined
 */
export function addToClockTime(hours, minutes, seconds) {
    AddToClockTime(hours, minutes, seconds);
}
/**
 * ```
 * Gets the current day of the week.
 * 0: Sunday
 * 1: Monday
 * 2: Tuesday
 * 3: Wednesday
 * 4: Thursday
 * 5: Friday
 * 6: Saturday
 * ```
 * Hash: 0xD972E4BD7AEB235F | ApiSet: undefined
 */
export function getClockDayOfWeek() {
    return GetClockDayOfWeek();
}
/**
 * ```
 * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
 * ```
 * Hash: 0x25223CA6B4D20B7F | ApiSet: undefined
 */
export function getClockHours() {
    return GetClockHours();
}
/**
 * ```
 * Gets the current ingame clock minute.
 * ```
 * Hash: 0x13D2B8ADD79640F2 | ApiSet: undefined
 */
export function getClockMinutes() {
    return GetClockMinutes();
}
/**
 * Hash: 0x961777E64BDAF717 | ApiSet: undefined
 */
export function getClockYear() {
    return GetClockYear();
}
/**
 * Hash: 0xBBC72712E80257A1 | ApiSet: undefined
 */
export function getClockMonth() {
    return GetClockMonth();
}
/**
 * ```
 * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
 * ```
 * Hash: 0x494E97C2EF27C470 | ApiSet: undefined
 */
export function getClockSeconds() {
    return GetClockSeconds();
}
/**
 * Returns how many real ms are equal to one game minute.
 * A getter for [`SetMillisecondsPerGameMinute`](#\_0x36CA2554).
 * Hash: 0x2F8B4D1C595B11DB | ApiSet: undefined
 */
export function getMillisecondsPerGameMinute() {
    return GetMillisecondsPerGameMinute();
}
/**
 * ```
 * Gets local system time as year, month, day, hour, minute and second.
 * Example usage:
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * `or use std::tm struct`
 * `TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);`
 * ```
 * Hash: 0x50C7A99057A69748 | ApiSet: undefined
 */
export function getLocalTime() {
    return GetLocalTime();
}
/**
 * ```
 * Gets system time as year, month, day, hour, minute and second.
 * Example usage:
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * `TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);`
 * ```
 * Hash: 0xDA488F299A5B164E | ApiSet: undefined
 */
export function getPosixTime() {
    return GetPosixTime();
}
/**
 * Hash: 0x4055E40BD2DBEC1D | ApiSet: undefined
 */
export function pauseClock(toggle) {
    PauseClock(toggle);
}
/**
 * ```
 * Gets current UTC time
 * ```
 * Hash: 0x8117E09A19EEF4D3 | ApiSet: undefined
 */
export function getUtcTime() {
    return GetUtcTime();
}
/**
 * Hash: 0xB096419DF0D06CE7 | ApiSet: undefined
 */
export function setClockDate(day, month, year) {
    SetClockDate(day, month, year);
}
/**
 * ```
 * SET_CLOCK_TIME(12, 34, 56);
 * ```
 * Hash: 0x47C3B5848C3E45D8 | ApiSet: undefined
 */
export function setClockTime(hour, minute, second) {
    SetClockTime(hour, minute, second);
}
/**
 * Returns when it is safe to start applying changes to cutscene entities.
 * Should always be used for applying components.
 * See [`SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED`](#\_0x2A56C06EBEF2B0D9) and [`REGISTER_ENTITY_FOR_CUTSCENE`](#\_0xE40C1C56DF95C2E8) for an example.
 * This will be true before the cutscene is considered loaded
 * Hash: 0xB56BBBCC2955D9CB | ApiSet: undefined
 */
export function canRequestAssetsForCutsceneEntity() {
    return CanRequestAssetsForCutsceneEntity();
}
/**
 * Whether or not it is safe to run functions on the camera,
 * as the camera is now no longer being used by the cutscene.
 * Hash: 0xB2CBCD0930DFB420 | ApiSet: undefined
 */
export function canSetExitStateForCamera(p0) {
    return CanSetExitStateForCamera(p0);
}
/**
 * ```
 * modelHash (p1) was always 0 in R* scripts
 * ```
 * Hash: 0x645D0B458D8E17B5 | ApiSet: undefined
 */
export function canSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CanSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash);
}
/**
 * Returns if the script can begin interacting with the registered entity. Primarly used for lead-outs of cutscenes.
 * Returns on frame after cutscene ends, so you cannot get is while using IsCutsceneActive()
 * Whether it is safe to start doing scripted actions on the entity, like simulating walking out of a cutscene.
 * Hash: 0x4C6A6451C79E4662 | ApiSet: undefined
 */
export function canSetExitStateForRegisteredEntity(cutsceneEntName, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CanSetExitStateForRegisteredEntity(cutsceneEntName, modelHash);
}
/**
 * Hash: 0x0ABC54DE641DC0FC | ApiSet: undefined
 */
export function getCutFileNumSections(cutsceneName) {
    return GetCutFileNumSections(cutsceneName);
}
/**
 * Returns the time of the cutscene's end accounting for [`REQUEST_CUTSCENE_WITH_PLAYBACK_LIST`](#\_0xC23DE0E91C30B58C)
 * If a cutscene is laid out with 10 second sections, and section 0 and 1 are enabled then it would be 20000ms.
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x971D7B15BCDBEF99 | ApiSet: undefined
 */
export function getCutsceneEndTime() {
    return GetCutsceneEndTime();
}
/**
 * Hash: 0x499EF20C5DB25C59 | ApiSet: undefined
 */
export function doesCutsceneEntityExist(cutsceneEntName, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return DoesCutsceneEntityExist(cutsceneEntName, modelHash);
}
/**
 * Hash: 0x49010A6A396553D8 | ApiSet: undefined
 */
export function getCutsceneSectionPlaying() {
    return GetCutsceneSectionPlaying();
}
/**
 * Gets the current time of the cutscene.
 * ```
 * NativeDB Introduced: v3258
 * ```
 * Hash: 0x710286BC5EF4D6E1 | ApiSet: undefined
 */
export function getCutscenePlayTime() {
    return GetCutscenePlayTime();
}
/**
 * Gets the elapsed time of the current cutscene in
 * Hash: 0xE625BEABBAFFDAB9 | ApiSet: undefined
 */
export function getCutsceneTime() {
    return GetCutsceneTime();
}
/**
 * Gets the total length of the cutscene irrespective of playback list in milliseconds
 * To account for sections, see [`_GET_CUTSCENE_END_TIME`](#\_0x971D7B15BCDBEF99)
 * Hash: 0xEE53B14A19E480D4 | ApiSet: undefined
 */
export function getCutsceneTotalDuration() {
    return GetCutsceneTotalDuration();
}
/**
 * Hash: 0x708BDD8CD795B043 | ApiSet: undefined
 */
export function hasCutsceneCutThisFrame() {
    return HasCutsceneCutThisFrame();
}
/**
 * Hash: 0xC0741A26499654CD | ApiSet: undefined
 */
export function getEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash);
}
/**
 * Returns the handle of a cutscene entity, can be ped
 * Hash: 0x0A2E9FDB9A8C62F6 | ApiSet: undefined
 */
export function getEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash);
}
/**
 * ```
 * Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
 * ```
 * Hash: 0xA1C996C2A744262E | ApiSet: undefined
 */
export function hasCutFileLoaded(cutsceneName) {
    return HasCutFileLoaded(cutsceneName);
}
/**
 * Hash: 0x228D3D94F8A11C3C | ApiSet: undefined
 */
export function hasThisCutsceneLoaded(cutsceneName) {
    return HasThisCutsceneLoaded(cutsceneName);
}
/**
 * Hash: 0x7C0A893088881D57 | ApiSet: undefined
 */
export function hasCutsceneFinished() {
    return HasCutsceneFinished();
}
/**
 * Hash: 0xC59F528E9AB9F339 | ApiSet: undefined
 */
export function hasCutsceneLoaded() {
    return HasCutsceneLoaded();
}
/**
 * Hash: 0x991251AFC3981F84 | ApiSet: undefined
 */
export function isCutsceneActive() {
    return IsCutsceneActive();
}
/**
 * Hash: 0x011883F41211432A | ApiSet: undefined
 */
export function _0x011883F41211432A(x1, y1, z1, x2, y2, z2, p6) {
    Citizen.invokeNative('0x011883F41211432A', x1, y1, z1, x2, y2, z2, p6);
}
/**
 * Hash: 0x06EE9048FD080382 | ApiSet: undefined
 */
export function _0x06EE9048FD080382(p0) {
    Citizen.invokeNative('0x06EE9048FD080382', p0);
}
/**
 * Hash: 0xD3C2E180A40F031E | ApiSet: undefined
 */
export function isCutscenePlaying() {
    return IsCutscenePlaying();
}
/**
 * Hash: 0x71B74D2AE19338D0 | ApiSet: undefined
 */
export function isCutscenePlaybackFlagSet(flag) {
    return IsCutscenePlaybackFlagSet(flag);
}
/**
 * Hash: 0x2F137B508DE238F2 | ApiSet: undefined
 */
export function _0x2F137B508DE238F2(p0) {
    Citizen.invokeNative('0x2F137B508DE238F2', p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x4FCD976DA686580C | ApiSet: undefined
 */
export function _0x4FCD976DA686580C(p0) {
    return Citizen.invokeNative('0x4FCD976DA686580C', p0);
}
/**
 * Hash: 0x20746F7B1032A3C7 | ApiSet: undefined
 */
export function _0x20746F7B1032A3C7(p0, p1, p2, p3) {
    Citizen.invokeNative('0x20746F7B1032A3C7', p0, p1, p2, p3);
}
/**
 * ```
 * This function is hard-coded to always return 1.
 * ```
 * Hash: 0x4CEBC1ED31E8925E | ApiSet: undefined
 */
export function _0x4CEBC1ED31E8925E(cutsceneName) {
    return Citizen.invokeNative('0x4CEBC1ED31E8925E', cutsceneName);
}
/**
 * ```
 * SET_VEHICLE_*
 * ```
 * Hash: 0x7F96F23FA9B73327 | ApiSet: undefined
 */
export function _0x7F96F23FA9B73327(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    Citizen.invokeNative('0x7F96F23FA9B73327', modelHash);
}
/**
 * Hash: 0x583DF8E3D4AFBD98 | ApiSet: undefined
 */
export function _0x583DF8E3D4AFBD98() {
    return Citizen.invokeNative('0x583DF8E3D4AFBD98');
}
/**
 * Hash: 0x5EDEF0CF8C1DAB3C | ApiSet: undefined
 */
export function _0x5EDEF0CF8C1DAB3C() {
    return Citizen.invokeNative('0x5EDEF0CF8C1DAB3C');
}
/**
 * ```
 * Toggles a value (bool) for cutscenes.
 * SET_*
 * ```
 * Hash: 0xC61B86C9F61EB404 | ApiSet: undefined
 */
export function _0xC61B86C9F61EB404(toggle) {
    Citizen.invokeNative('0xC61B86C9F61EB404', toggle);
}
/**
 * ```
 * SET_SCRIPT_*
 * Sets the cutscene's owning thread ID.
 * ```
 * Hash: 0x8D9DF6ECA8768583 | ApiSet: undefined
 */
export function _0x8D9DF6ECA8768583(threadId) {
    Citizen.invokeNative('0x8D9DF6ECA8768583', threadId);
}
/**
 * Hash: 0xA0FE76168A189DDB | ApiSet: undefined
 */
export function _0xA0FE76168A189DDB() {
    return Citizen.invokeNative('0xA0FE76168A189DDB');
}
/**
 * Hash: 0xE36A98D8AB3D3C66 | ApiSet: undefined
 */
export function _0xE36A98D8AB3D3C66(p0) {
    Citizen.invokeNative('0xE36A98D8AB3D3C66', p0);
}
/**
 * This can only be run once [`CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY`](#\_0xB56BBBCC2955D9CB) is true, but can be run before [`HAS_CUTSCENE_LOADED`](#\_0xC59F528E9AB9F339)
 * Hash: 0xE40C1C56DF95C2E8 | ApiSet: undefined
 */
export function registerEntityForCutscene(cutsceneEntity, cutsceneEntName, p2, modelHash, p4) {
    const _cutsceneEntity = cutsceneEntity instanceof Entity ? cutsceneEntity.handle() : cutsceneEntity;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    RegisterEntityForCutscene(_cutsceneEntity, cutsceneEntName, p2, modelHash, p4);
}
/**
 * Hash: 0x440AF51A3462B86F | ApiSet: undefined
 */
export function removeCutscene() {
    RemoveCutscene();
}
/**
 * Only used twice in armenian1.c
 * Hash: 0x2131046957F31B04 | ApiSet: undefined
 */
export function registerSynchronisedScriptSpeech() {
    RegisterSynchronisedScriptSpeech();
}
/**
 * ```
 * Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
 * ```
 * Hash: 0x06A3524161C502BA | ApiSet: undefined
 */
export function requestCutFile(cutsceneName) {
    RequestCutFile(cutsceneName);
}
/**
 * Hash: 0x7A86743F475D9E09 | ApiSet: undefined
 */
export function requestCutscene(cutsceneName, flags) {
    RequestCutscene(cutsceneName, flags);
}
/**
 * ```
 * Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
 * ```
 * Hash: 0xD00D76A7DFC9D852 | ApiSet: undefined
 */
export function removeCutFile(cutsceneName) {
    RemoveCutFile(cutsceneName);
}
/**
 * Hash: 0x41FAA8FB2ECE8720 | ApiSet: undefined
 */
export function setCutsceneCanBeSkipped(p0) {
    SetCutsceneCanBeSkipped(p0);
}
/**
 * Only used in networked environment with MP cutscenes
 * Hash: 0x4C61C75BEE8184C2 | ApiSet: undefined
 */
export function setCutsceneEntityStreamingFlags(cutsceneEntName, p1, p2) {
    SetCutsceneEntityStreamingFlags(cutsceneEntName, p1, p2);
}
/**
 * ```
 * playbackFlags: Which scenes should be played.
 * Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
 * ```
 * Hash: 0xC23DE0E91C30B58C | ApiSet: undefined
 */
export function requestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags) {
    RequestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags);
}
/**
 * Sets cutscene location, used for multiplayer apartments/businesses.
 * Hash: 0xB812B3FD1C01CF27 | ApiSet: undefined
 */
export function setCutsceneOrigin(position, heading, p4) {
    SetCutsceneOrigin(position.x, position.y, position.z, heading, p4);
}
/**
 * Hash: 0x8093F23ABACCC7D4 | ApiSet: undefined
 */
export function setCutsceneFadeValues(p0, p1, p2, p3) {
    SetCutsceneFadeValues(p0, p1, p2, p3);
}
/**
 * See [`SET_PED_COMPONENT_VARIATION`](#\_0x262B14F48D29DE80)
 * Hash: 0xBA01E7B6DEEFBBC9 | ApiSet: undefined
 */
export function setCutscenePedComponentVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    SetCutscenePedComponentVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash);
}
/**
 * Sets the components for a cutscene ped, this will take precendence over the cutscene's component overrides. This does not require the entity be registered.
 * See
 * Hash: 0x2A56C06EBEF2B0D9 | ApiSet: undefined
 */
export function setCutscenePedComponentVariationFromPed(cutsceneEntName, ped, modelHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    SetCutscenePedComponentVariationFromPed(cutsceneEntName, _ped, modelHash);
}
/**
 * See [`SET_PED_PROP_INDEX`](#\_0x93376B65A266EB5F)
 * Hash: 0x0546524ADE2E9723 | ApiSet: undefined
 */
export function setCutscenePedPropVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    SetCutscenePedPropVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash);
}
/**
 * ```
 * Only used twice in R* scripts
 * ```
 * Hash: 0x9896CE4721BE84BA | ApiSet: undefined
 */
export function setCutsceneTriggerArea(p0, p1, p2, p3, p4, p5) {
    SetCutsceneTriggerArea(p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * flags: Usually 0.
 * ```
 * Hash: 0x186D5CB5E7B0FF7B | ApiSet: undefined
 */
export function startCutscene(flags) {
    StartCutscene(flags);
}
/**
 * Similar to [`SET_CUTSCENE_ORIGIN`](#\_0xB812B3FD1C01CF27) but without heading and doesn't need [`START_CUTSCENE`](#\_0x186D5CB5E7B0FF7B)
 * Hash: 0x1C9ADDA3244A1FBF | ApiSet: undefined
 */
export function startCutsceneAtCoords(position, flags) {
    StartCutsceneAtCoords(position.x, position.y, position.z, flags);
}
/**
 * Hash: 0xC7272775B4DC786E | ApiSet: undefined
 */
export function stopCutscene(p0) {
    StopCutscene(p0);
}
/**
 * Hash: 0x40C8656EDAEDD569 | ApiSet: undefined
 */
export function wasCutsceneSkipped() {
    return WasCutsceneSkipped();
}
/**
 * Stop cutscene instantly, will dump registered entities right where they were when ran.
 * Hash: 0xD220BDD222AC4A1E | ApiSet: undefined
 */
export function stopCutsceneImmediately() {
    StopCutsceneImmediately();
}
/**
 * ```
 * NativeDB Introduced: v3258
 * ```
 * Hash: 0x34CFC4C2A38E83E3 | ApiSet: undefined
 */
export function activateCamWithInterpAndFovCurve(camTo, camFrom, duration, easeLocation, easeRotation, easeFove) {
    ActivateCamWithInterpAndFovCurve(camTo, camFrom, duration, easeLocation, easeRotation, easeFove);
}
/**
 * Hash: 0x0A9F2A468B328E74 | ApiSet: undefined
 */
export function addCamSplineNodeUsingCameraFrame(cam, cam2, p2, p3) {
    AddCamSplineNodeUsingCameraFrame(cam, cam2, p2, p3);
}
/**
 * Takes a camera and uses the information from it as a camera spline node.
 * Hash: 0x0FB82563989CF4FB | ApiSet: undefined
 */
export function addCamSplineNodeUsingCamera(cam, cam2, length, p3) {
    AddCamSplineNodeUsingCamera(cam, cam2, length, p3);
}
/**
 * ```
 * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
 * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
 * p8 big values ~100 will slow down the camera movement before reaching this node
 * p9 != 0 seems to override the rotation/pitch (bool?)
 * ```
 * Hash: 0x8609C75EC438FB3B | ApiSet: undefined
 */
export function addCamSplineNode(camera, position, xRot, yRot, zRot, length, p8, transitionType) {
    AddCamSplineNode(camera, position.x, position.y, position.z, xRot, yRot, zRot, length, p8, transitionType);
}
/**
 * Hash: 0x609278246A29CA34 | ApiSet: undefined
 */
export function addCamSplineNodeUsingGameplayFrame(cam, p1, p2) {
    AddCamSplineNodeUsingGameplayFrame(cam, p1, p2);
}
/**
 * ```
 * Seems to animate the gameplay camera zoom.
 * Eg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);
 * will animate the camera zooming in from 1000 meters away.
 * Game scripts use it like this:
 * // Setting this to 1 prevents V key from changing zoom
 * `PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);`
 * // These restrict how far you can move cam up/down left/right
 * `CAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);`
 * `CAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);`
 * `CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);`
 * ```
 * Hash: 0xDF2E1F7742402E81 | ApiSet: undefined
 */
export function animateGameplayCamZoom(p0, distance) {
    AnimateGameplayCamZoom(p0, distance);
}
/**
 * ```
 * `CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);`
 * ```
 * Hash: 0xC2EAE3FB8CDBED31 | ApiSet: undefined
 */
export function animatedShakeScriptGlobal(p0, p1, p2, p3) {
    AnimatedShakeScriptGlobal(p0, p1, p2, p3);
}
/**
 * ```
 * Example from michael2 script.
 * `CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);`
 * ```
 * Hash: 0xA2746EEAE3E577CD | ApiSet: undefined
 */
export function animatedShakeCam(cam, p1, p2, p3, amplitude) {
    AnimatedShakeCam(cam, p1, p2, p3, amplitude);
}
/**
 * ```
 * Last param determines if its relative to the Entity
 * ```
 * Hash: 0xFEDB7D269E8C60E3 | ApiSet: undefined
 */
export function attachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    AttachCamToEntity(cam, _entity, xOffset, yOffset, zOffset, isRelative);
}
/**
 * This native works with peds only.
 * Hash: 0x61A3DBA14AB7F411 | ApiSet: undefined
 */
export function attachCamToPedBone(cam, ped, boneIndex, xOffset, yOffset, zOffset, isRelative) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    AttachCamToPedBone(cam, _ped, boneIndex, xOffset, yOffset, zOffset, isRelative);
}
/**
 * This native works with vehicles only.
 * Bone indexes are usually given by this native [GET_ENTITY_BONE_INDEX_BY_NAME](#\_0xFB71170B7E76ACBA).
 * Hash: 0x8DB3F12A02CAEF72 | ApiSet: undefined
 */
export function attachCamToVehicleBone(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offX, offY, offZ, fixedDirection) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    AttachCamToVehicleBone(cam, _vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offX, offY, offZ, fixedDirection);
}
/**
 * ```
 * minimum: Degrees between -90f and 90f.
 * maximum: Degrees between -90f and 90f.
 * Clamps the gameplay camera's current pitch.
 * Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
 * ```
 * Hash: 0xA516C198B7DCA1E1 | ApiSet: undefined
 */
export function clampGameplayCamPitch(minimum, maximum) {
    ClampGameplayCamPitch(minimum, maximum);
}
/**
 * Creates a camera with the specified cam name, You can use `SET_CAM_` natives to manipulate the camera.\
 * Make sure to call [RENDER_SCRIPT_CAMS](#\_0x07E5B515DB0636FC) once the camera is created, or this won't have any visible effect.
 * ### Camera names:
 * *   DEFAULT_SCRIPTED_CAMERA
 * *   DEFAULT_ANIMATED_CAMERA
 * *   DEFAULT_SPLINE_CAMERA
 * *   DEFAULT_SCRIPTED_FLY_CAMERA
 * *   TIMED_SPLINE_CAMERA
 * *   CUSTOM_TIMED_SPLINE_CAMERA
 * *   ROUNDED_SPLINE_CAMERA
 * *   SMOOTHED_SPLINE_CAMERA
 * Hash: 0xC3981DCE61D9E13F | ApiSet: undefined
 */
export function createCam(camName, active) {
    return CreateCam(camName, active);
}
/**
 * ```
 * minimum: Degrees between -180f and 180f.
 * maximum: Degrees between -180f and 180f.
 * Clamps the gameplay camera's current yaw.
 * Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
 * ```
 * Hash: 0x8F993D26E0CA5E8E | ApiSet: undefined
 */
export function clampGameplayCamYaw(minimum, maximum) {
    ClampGameplayCamYaw(minimum, maximum);
}
/**
 * Creates a camera with the specified camera hash, You can use `SET_CAM_` natives to manipulate the camera.
 * Make sure to call [RENDER_SCRIPT_CAMS](#\_0x07E5B515DB0636FC) once the camera is created, or this won't have any visible effect.
 * Take a look at [CREATE_CAM](#\_0xC3981DCE61D9E13F) if you would like to see the available camera names.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x5E3CF89C6BCCA67D | ApiSet: undefined
 */
export function createCamera(camHash, active) {
    if (typeof camHash === 'string')
        camHash = this.getHashKey(camHash);
    return CreateCamera(camHash, active);
}
/**
 * Create a camera with the specified cam name/type, You can use `SET_CAM_` natives to manipulate the camera.
 * Take a look at [CREATE_CAM](#\_0xC3981DCE61D9E13F) if you would like to see the available camera names.
 * Hash: 0xB51194800B257161 | ApiSet: undefined
 */
export function createCamWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, active, rotationOrder) {
    return CreateCamWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, active, rotationOrder);
}
/**
 * Create a camera with the specified camera hash, You can use `SET_CAM_` natives to manipulate the camera.
 * Make sure to call [RENDER_SCRIPT_CAMS](#\_0x07E5B515DB0636FC) once the camera is created, or this won't have any visible effect.
 * Take a look at [CREATE_CAM](#\_0xC3981DCE61D9E13F) if you would like to see the available camera names.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x6ABFA3E16460F22D | ApiSet: undefined
 */
export function createCameraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, active, rotationOrder) {
    if (typeof camHash === 'string')
        camHash = this.getHashKey(camHash);
    return CreateCameraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, active, rotationOrder);
}
/**
 * Hash: 0x741B0129D4560F31 | ApiSet: undefined
 */
export function createCinematicShot(p0, p1, p2, entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    CreateCinematicShot(p0, p1, p2, _entity);
}
/**
 * ```
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * ```
 * Hash: 0x8E5FB15663F79120 | ApiSet: undefined
 */
export function destroyAllCams(bScriptHostCam) {
    DestroyAllCams(bScriptHostCam);
}
/**
 * ```
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * ```
 * Hash: 0x865908C81A2C22E9 | ApiSet: undefined
 */
export function destroyCam(cam, bScriptHostCam) {
    DestroyCam(cam, bScriptHostCam);
}
/**
 * ```
 * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * ```
 * Hash: 0x487A82C650EB7799 | ApiSet: undefined
 */
export function customMenuCoordinates(p0) {
    CustomMenuCoordinates(p0);
}
/**
 * Hash: 0xA2FABBE87F4BAD82 | ApiSet: undefined
 */
export function detachCam(cam) {
    DetachCam(cam);
}
/**
 * Hash: 0x1A31FE0049E542F6 | ApiSet: undefined
 */
export function disableAimCamThisUpdate() {
    DisableAimCamThisUpdate();
}
/**
 * Hash: 0x49482F9FCD825AAA | ApiSet: undefined
 */
export function disableCamCollisionForObject(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    DisableCamCollisionForObject(_entity);
}
/**
 * Disables first person camera while in a vehicle for the current tick.
 * Hash: 0xADFF1B2A555F5FBA | ApiSet: undefined
 */
export function disableCinematicBonnetCameraThisUpdate() {
    DisableCinematicBonnetCameraThisUpdate();
}
/**
 * Hash: 0x2AED6301F67007D5 | ApiSet: undefined
 */
export function disableCamCollisionForEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    DisableCamCollisionForEntity(_entity);
}
/**
 * Disables first person camera while on foot for the current tick.
 * Hash: 0xDE2EF5DA284CC8DF | ApiSet: undefined
 */
export function disableOnFootFirstPersonViewThisUpdate() {
    DisableOnFootFirstPersonViewThisUpdate();
}
/**
 * ```
 * Fades the screen in.
 * duration: The time the fade should take, in milliseconds.
 * ```
 * Hash: 0xD4E8E24955024033 | ApiSet: undefined
 */
export function doScreenFadeIn(duration) {
    DoScreenFadeIn(duration);
}
/**
 * ```
 * Fades the screen out.
 * duration: The time the fade should take, in milliseconds.
 * ```
 * Hash: 0x891B5B39AC6302AF | ApiSet: undefined
 */
export function doScreenFadeOut(duration) {
    DoScreenFadeOut(duration);
}
/**
 * Looks up a camera handle in the current camera pool and returns `true` if the handle is found, otherwise it returns `false`.
 * Hash: 0xA7A932170592B50E | ApiSet: undefined
 */
export function doesCamExist(cam) {
    return DoesCamExist(cam);
}
/**
 * Hash: 0xA41BCD7213805AAC | ApiSet: undefined
 */
export function forceCinematicRenderingThisUpdate(p0) {
    ForceCinematicRenderingThisUpdate(p0);
}
/**
 * ```
 * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
 * ```
 * Hash: 0xEA7F0AD7E9BA676F | ApiSet: undefined
 */
export function enableCrosshairThisFrame() {
    EnableCrosshairThisFrame();
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x06D153C0B99B6128 | ApiSet: undefined
 */
export function getCamDofStrength(cam) {
    return GetCamDofStrength(cam);
}
/**
 * Hash: 0xA10B2DB49E92A6B0 | ApiSet: undefined
 */
export function getCamAnimCurrentPhase(cam) {
    return GetCamAnimCurrentPhase(cam);
}
/**
 * Enumerated type defined in camControlHelperMetadataViewModes:
 * ```cpp
 * enum eContext {
 * ON_FOOT = 0, // [G|S]ET_FOLLOW_PED_CAM_*
 * IN_VEHICLE = 1, // [G|S]ET_FOLLOW_VEHICLE_CAM_*
 * ON_BIKE = 2,
 * IN_BOAT = 3,
 * IN_AIRCRAFT = 4,
 * IN_SUBMARINE = 5,
 * IN_HELI = 6,
 * IN_TURRET = 7,
 * }
 * ```
 * Hash: 0x19CAFA3C87F7C2FF | ApiSet: undefined
 */
export function getCamActiveViewModeContext() {
    return GetCamActiveViewModeContext();
}
/**
 * Hash: 0xB60A9CFEB21CA6AA | ApiSet: undefined
 */
export function getCamFarClip(cam) {
    return GetCamFarClip(cam);
}
/**
 * Hash: 0xBAC038F7459AE5AE | ApiSet: undefined
 */
export function getCamCoord(cam) {
    return new Vector3(GetCamCoord(cam));
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0xC2612D223D915A1C | ApiSet: undefined
 */
export function getCamNearDof(cam) {
    return GetCamNearDof(cam);
}
/**
 * Hash: 0x255F8DAFD540D397 | ApiSet: undefined
 */
export function getCamFarDof(cam) {
    return GetCamFarDof(cam);
}
/**
 * Hash: 0xC3330A45CCCDB26A | ApiSet: undefined
 */
export function getCamFov(cam) {
    return GetCamFov(cam);
}
/**
 * Hash: 0xC520A34DAFBF24B1 | ApiSet: undefined
 */
export function getCamNearClip(cam) {
    return GetCamNearClip(cam);
}
/**
 * Gets a camera's rotation by handle (`cam`) lookup, outputs a `Vector3` in degrees.
 * Hash: 0x7D304C1C955E3E12 | ApiSet: undefined
 */
export function getCamRot(cam, rotationOrder) {
    return new Vector3(GetCamRot(cam, rotationOrder));
}
/**
 * Hash: 0xB22B17DF858716A6 | ApiSet: undefined
 */
export function getCamSplineNodeIndex(cam) {
    return GetCamSplineNodeIndex(cam);
}
/**
 * ```
 * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
 * ```
 * Hash: 0xD9D0E694C8282C96 | ApiSet: undefined
 */
export function getCamSplineNodePhase(cam) {
    return GetCamSplineNodePhase(cam);
}
/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the view mode enum.
 * Hash: 0xEE778F8C7E1142E2 | ApiSet: undefined
 */
export function getCamViewModeForContext(context) {
    return GetCamViewModeForContext(context);
}
/**
 * ```
 * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
 * (returns 1.0f when no nodes has been added, reached end of non existing spline)
 * ```
 * Hash: 0xB5349E36C546509A | ApiSet: undefined
 */
export function getCamSplinePhase(cam) {
    return GetCamSplinePhase(cam);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x77C3CEC46BE286F6 | ApiSet: undefined
 */
export function getDebugCamera() {
    return GetDebugCamera();
}
/**
 * Hash: 0xDFC8CBC606FDB0FC | ApiSet: undefined
 */
export function getFinalRenderedCamFarClip() {
    return GetFinalRenderedCamFarClip();
}
/**
 * Hash: 0x80EC114669DAEFF4 | ApiSet: undefined
 */
export function getFinalRenderedCamFov() {
    return GetFinalRenderedCamFov();
}
/**
 * Hash: 0xA200EB1EE790F448 | ApiSet: undefined
 */
export function getFinalRenderedCamCoord() {
    return new Vector3(GetFinalRenderedCamCoord());
}
/**
 * Hash: 0x9780F32BCAF72431 | ApiSet: undefined
 */
export function getFinalRenderedCamFarDof() {
    return GetFinalRenderedCamFarDof();
}
/**
 * Hash: 0x162F9D995753DC19 | ApiSet: undefined
 */
export function getFinalRenderedCamMotionBlurStrength() {
    return GetFinalRenderedCamMotionBlurStrength();
}
/**
 * Hash: 0xD0082607100D7193 | ApiSet: undefined
 */
export function getFinalRenderedCamNearClip() {
    return GetFinalRenderedCamNearClip();
}
/**
 * Hash: 0x5B4E4C817FCC2DFB | ApiSet: undefined
 */
export function getFinalRenderedCamRot(rotationOrder) {
    return new Vector3(GetFinalRenderedCamRot(rotationOrder));
}
/**
 * Hash: 0x5F35F6732C3FBBA0 | ApiSet: undefined
 */
export function getFinalRenderedInWhenFriendlyFov(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetFinalRenderedInWhenFriendlyFov(_player);
}
/**
 * Hash: 0xA03502FC581F7D9B | ApiSet: undefined
 */
export function getFinalRenderedCamNearDof() {
    return GetFinalRenderedCamNearDof();
}
/**
 * Hash: 0x7EC52CC40597D170 | ApiSet: undefined
 */
export function getFirstPersonAimCamZoomFactor() {
    return GetFirstPersonAimCamZoomFactor();
}
/**
 * ```cpp
 * // view mode enumeration
 * enum eCamViewMode
 * {
 * THIRD_PERSON_NEAR = 0,
 * THIRD_PERSON_MEDIUM = 1,
 * THIRD_PERSON_FAR = 2,
 * CINEMATIC = 3,
 * FIRST_PERSON = 4,
 * };
 * ```
 * Hash: 0x8D4D46230B2C353A | ApiSet: undefined
 */
export function getFollowPedCamViewMode() {
    return GetFollowPedCamViewMode();
}
/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * Hash: 0x33E6C8EFD0CD93E9 | ApiSet: undefined
 */
export function getFollowPedCamZoomLevel() {
    return GetFollowPedCamZoomLevel();
}
/**
 * Hash: 0x26903D9CD1175F2C | ApiSet: undefined
 */
export function getFinalRenderedInWhenFriendlyRot(player, rotationOrder) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return new Vector3(GetFinalRenderedInWhenFriendlyRot(_player, rotationOrder));
}
/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * Hash: 0xA4FF579AC0E3AAAE | ApiSet: undefined
 */
export function getFollowVehicleCamViewMode() {
    return GetFollowVehicleCamViewMode();
}
/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * Hash: 0xEE82280AB767B690 | ApiSet: undefined
 */
export function getFollowVehicleCamZoomLevel() {
    return GetFollowVehicleCamZoomLevel();
}
/**
 * Hash: 0x89215EC747DF244A | ApiSet: undefined
 */
export function getFocusPedOnScreen(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return GetFocusPedOnScreen(p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
/**
 * Hash: 0x65019750A0324133 | ApiSet: undefined
 */
export function getGameplayCamFov() {
    return GetGameplayCamFov();
}
/**
 * Hash: 0x14D6F5678D8F1B37 | ApiSet: undefined
 */
export function getGameplayCamCoord() {
    return new Vector3(GetGameplayCamCoord());
}
/**
 * Hash: 0x3A6867B4845BEDA2 | ApiSet: undefined
 */
export function getGameplayCamRelativePitch() {
    return GetGameplayCamRelativePitch();
}
/**
 * This function takes a rotation order and outputs a `Vector3` in degrees.
 * It first calls a game function to calculate these values given the rotation order and effectively multiplies those values by `180/PI`, hence degrees since the function it calls outputs radians which are then converted to degrees.
 * Hash: 0x837765A25378F0BB | ApiSet: undefined
 */
export function getGameplayCamRot(rotationOrder) {
    return new Vector3(GetGameplayCamRot(rotationOrder));
}
/**
 * Hash: 0x5234F9F10919EABA | ApiSet: undefined
 */
export function getRenderingCam() {
    return GetRenderingCam();
}
/**
 * Attaches a camera to a specific bone of a Ped, including full matrix transformations for both rotation and position offsets.
 * This native works with peds only.
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x149916F50C34A40D | ApiSet: undefined
 */
export function hardAttachCamToPedBone(cam, ped, boneIndex, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    HardAttachCamToPedBone(cam, _ped, boneIndex, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative);
}
/**
 * Attaches a camera to an entity, including full matrix transformations for both rotation and position offsets.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x202A5ED9CE01D6E7 | ApiSet: undefined
 */
export function hardAttachCamToEntity(cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    HardAttachCamToEntity(cam, _entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative);
}
/**
 * Hash: 0x7B8A361C1813FBEF | ApiSet: undefined
 */
export function ignoreMenuPreferenceForBonnetCameraThisUpdate() {
    IgnoreMenuPreferenceForBonnetCameraThisUpdate();
}
/**
 * Hash: 0x743607648ADD4587 | ApiSet: undefined
 */
export function getGameplayCamRelativeHeading() {
    return GetGameplayCamRelativeHeading();
}
/**
 * Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
 * Hash: 0xF4F2C0D4EE209E20 | ApiSet: undefined
 */
export function invalidateIdleCam() {
    InvalidateIdleCam();
}
/**
 * ```
 * IS_A*
 * ```
 * Hash: 0x74BD83EA840F6BC9 | ApiSet: undefined
 */
export function isAimCamThirdPersonActive() {
    return IsAimCamThirdPersonActive();
}
/**
 * Interpolates the camera to specified parameters over a set duration using various curve types for position, rotation, and fov.
 * ```
 * NativeDB Introduced: v3258
 * ```
 * Hash: 0xDDA77EE33C005AAF | ApiSet: undefined
 */
export function interpolateCamWithParams(camera, camPosX, camPosY, camPosZ, camRotX, camRotY, camRotZ, fov, duration, posCurveType, rotCurveType, rotOrder, fovCurveType) {
    InterpolateCamWithParams(camera, camPosX, camPosY, camPosZ, camRotX, camRotY, camRotZ, fov, duration, posCurveType, rotCurveType, rotOrder, fovCurveType);
}
/**
 * Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
 * Hash: 0x9E4CFFF989258472 | ApiSet: undefined
 */
export function invalidateVehicleIdleCam() {
    InvalidateVehicleIdleCam();
}
/**
 * Hash: 0x036F97C908C2B52C | ApiSet: undefined
 */
export function isCamInterpolating(cam) {
    return IsCamInterpolating(cam);
}
/**
 * Hash: 0xD7360051C885628B | ApiSet: undefined
 */
export function isBonnetCinematicCamRendering() {
    return IsBonnetCinematicCamRendering();
}
/**
 * ```
 * Returns whether or not the passed camera handle is active.
 * ```
 * Hash: 0xDFB2B516207D3534 | ApiSet: undefined
 */
export function isCamActive(cam) {
    return IsCamActive(cam);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0xC90621D8A0CEECF2 | ApiSet: undefined
 */
export function isCamPlayingAnim(cam, animName, animDictionary) {
    return IsCamPlayingAnim(cam, animName, animDictionary);
}
/**
 * Hash: 0x68EDDA28A5976D07 | ApiSet: undefined
 */
export function isAimCamActive() {
    return IsAimCamActive();
}
/**
 * Hash: 0x02EC0AF5C5A49B7A | ApiSet: undefined
 */
export function isCamRendering(cam) {
    return IsCamRendering(cam);
}
/**
 * Hash: 0x6B24BFE83A2BE47B | ApiSet: undefined
 */
export function isCamShaking(cam) {
    return IsCamShaking(cam);
}
/**
 * Hash: 0xEAF0FA793D05C592 | ApiSet: undefined
 */
export function isAllowedIndependentCameraModes() {
    return IsAllowedIndependentCameraModes();
}
/**
 * Hash: 0xBBC08F6B4CB8FF0A | ApiSet: undefined
 */
export function isCinematicCamShaking() {
    return IsCinematicCamShaking();
}
/**
 * Hash: 0x0290F35C0AD97864 | ApiSet: undefined
 */
export function isCamSplinePaused(p0) {
    return IsCamSplinePaused(p0);
}
/**
 * Hash: 0xB15162CB5826E9E8 | ApiSet: undefined
 */
export function isCinematicCamRendering() {
    return IsCinematicCamRendering();
}
/**
 * Hash: 0xCA9D2AA3E326D720 | ApiSet: undefined
 */
export function isCinematicIdleCamRendering() {
    return IsCinematicIdleCamRendering();
}
/**
 * Hash: 0x5E346D934122613F | ApiSet: undefined
 */
export function isFirstPersonAimCamActive() {
    return IsFirstPersonAimCamActive();
}
/**
 * Hash: 0xC6D3D26810C8E0F9 | ApiSet: undefined
 */
export function isFollowPedCamActive() {
    return IsFollowPedCamActive();
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xF5F1E89A970B7796 | ApiSet: undefined
 */
export function isCinematicCamInputActive() {
    return IsCinematicCamInputActive();
}
/**
 * Hash: 0xCBBDE6D335D6D496 | ApiSet: undefined
 */
export function isFollowVehicleCamActive() {
    return IsFollowVehicleCamActive();
}
/**
 * ```
 * Examples when this function will return 0 are:
 * - During busted screen.
 * - When player is coming out from a hospital.
 * - When player is coming out from a police station.
 * - When player is buying gun from AmmuNation.
 * ```
 * Hash: 0x39B5D1B10383F0C8 | ApiSet: undefined
 */
export function isGameplayCamRendering() {
    return IsGameplayCamRendering();
}
/**
 * Hash: 0xCC9F3371A7C28BC9 | ApiSet: undefined
 */
export function isCinematicShotActive(p0) {
    return IsCinematicShotActive(p0);
}
/**
 * Hash: 0x70FDA869F3317EA9 | ApiSet: undefined
 */
export function isGameplayCamLookingBehind() {
    return IsGameplayCamLookingBehind();
}
/**
 * Hash: 0xB16FCE9DDC7BA182 | ApiSet: undefined
 */
export function isScreenFadedOut() {
    return IsScreenFadedOut();
}
/**
 * Hash: 0xE520FF1AD2785B40 | ApiSet: undefined
 */
export function isGameplayHintActive() {
    return IsGameplayHintActive();
}
/**
 * Hash: 0x016C090630DF1F89 | ApiSet: undefined
 */
export function isGameplayCamShaking() {
    return IsGameplayCamShaking();
}
/**
 * Hash: 0x4F32C0D5A90A9B40 | ApiSet: undefined
 */
export function isInVehicleCamDisabled() {
    return IsInVehicleCamDisabled();
}
/**
 * Hash: 0x5C544BC6C57AC575 | ApiSet: undefined
 */
export function isScreenFadingIn() {
    return IsScreenFadingIn();
}
/**
 * Hash: 0x797AC7CB535BA28F | ApiSet: undefined
 */
export function isScreenFadingOut() {
    return IsScreenFadingOut();
}
/**
 * Hash: 0x5A859503B0C08678 | ApiSet: undefined
 */
export function isScreenFadedIn() {
    return IsScreenFadedIn();
}
/**
 * Determines if a global camera shake is currently active. You can stop the currently active global camera shake using [STOP_SCRIPT_GLOBAL_SHAKING](#\_0x1C9D7949FA533490).
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xC912AF078AF19212 | ApiSet: undefined
 */
export function isScriptGlobalShaking() {
    return IsScriptGlobalShaking();
}
/**
 * Hash: 0xE33D59DA70B58FDF | ApiSet: undefined
 */
export function isSphereVisible(position, radius) {
    return IsSphereVisible(position.x, position.y, position.z, radius);
}
/**
 * ```
 * Hardcoded to only work in multiplayer.
 * ```
 * Hash: 0x12DED8CA53D47EA5 | ApiSet: undefined
 */
export function _0x12DED8CA53D47EA5(p0) {
    Citizen.invokeNative('0x12DED8CA53D47EA5', p0);
}
/**
 * Hash: 0x17FCA7199A530203 | ApiSet: undefined
 */
export function _0x17FCA7199A530203() {
    Citizen.invokeNative('0x17FCA7199A530203');
}
/**
 * Hash: 0x0AA27680A0BD43FA | ApiSet: undefined
 */
export function _0x0AA27680A0BD43FA() {
    Citizen.invokeNative('0x0AA27680A0BD43FA');
}
/**
 * ```
 * some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. Possibly a cinematic or script-cam version of _0x487A82C650EB7799
 * ```
 * Hash: 0x0225778816FDC28C | ApiSet: undefined
 */
export function _0x0225778816FDC28C(p0) {
    Citizen.invokeNative('0x0225778816FDC28C', p0);
}
/**
 * Hash: 0x1F2300CB7FA7B7F6 | ApiSet: undefined
 */
export function _0x1F2300CB7FA7B7F6() {
    return Citizen.invokeNative('0x1F2300CB7FA7B7F6');
}
/**
 * Hash: 0x271017B9BA825366 | ApiSet: undefined
 */
export function _0x271017B9BA825366(p0, p1) {
    Citizen.invokeNative('0x271017B9BA825366', p0, p1);
}
/**
 * Hash: 0x247ACBC4ABBC9D1C | ApiSet: undefined
 */
export function _0x247ACBC4ABBC9D1C(p0) {
    Citizen.invokeNative('0x247ACBC4ABBC9D1C', p0);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x324C5AA411DA7737 | ApiSet: undefined
 */
export function _0x324C5AA411DA7737(p0) {
    Citizen.invokeNative('0x324C5AA411DA7737', p0);
}
/**
 * Hash: 0x2F7F2B26DD3F18EE | ApiSet: undefined
 */
export function _0x2F7F2B26DD3F18EE(p0, p1) {
    Citizen.invokeNative('0x2F7F2B26DD3F18EE', p0, p1);
}
/**
 * ```
 * A*
 * ```
 * Hash: 0x4879E4FE39074CDF | ApiSet: undefined
 */
export function _0x4879E4FE39074CDF() {
    return Citizen.invokeNative('0x4879E4FE39074CDF');
}
/**
 * F\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x28B022A17B068A3A | ApiSet: undefined
 */
export function _0x28B022A17B068A3A(p0, p1) {
    Citizen.invokeNative('0x28B022A17B068A3A', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x380B4968D1E09E55 | ApiSet: undefined
 */
export function _0x380B4968D1E09E55() {
    Citizen.invokeNative('0x380B4968D1E09E55');
}
/**
 * Hash: 0x3044240D2E0FA842 | ApiSet: undefined
 */
export function _0x3044240D2E0FA842() {
    return Citizen.invokeNative('0x3044240D2E0FA842');
}
/**
 * Hash: 0x5A43C76F7FC7BA5F | ApiSet: undefined
 */
export function _0x5A43C76F7FC7BA5F() {
    Citizen.invokeNative('0x5A43C76F7FC7BA5F');
}
/**
 * Hash: 0x469F2ECDEC046337 | ApiSet: undefined
 */
export function _0x469F2ECDEC046337(p0) {
    Citizen.invokeNative('0x469F2ECDEC046337', p0);
}
/**
 * Hash: 0x4008EDF7D6E48175 | ApiSet: undefined
 */
export function _0x4008EDF7D6E48175(p0) {
    Citizen.invokeNative('0x4008EDF7D6E48175', p0);
}
/**
 * ```
 * W*
 * ```
 * Hash: 0x5C48A1D6E3B33179 | ApiSet: undefined
 */
export function _0x5C48A1D6E3B33179(cam) {
    return Citizen.invokeNative('0x5C48A1D6E3B33179', cam);
}
/**
 * Hash: 0x5C41E6BABC9E2112 | ApiSet: undefined
 */
export function _0x5C41E6BABC9E2112(p0) {
    Citizen.invokeNative('0x5C41E6BABC9E2112', p0);
}
/**
 * Hash: 0x705A276EBFF3133D | ApiSet: undefined
 */
export function _0x705A276EBFF3133D() {
    return Citizen.invokeNative('0x705A276EBFF3133D');
}
/**
 * Hash: 0x59424BD75174C9B1 | ApiSet: undefined
 */
export function _0x59424BD75174C9B1() {
    Citizen.invokeNative('0x59424BD75174C9B1');
}
/**
 * Hash: 0x91EF6EE6419E5B97 | ApiSet: undefined
 */
export function _0x91EF6EE6419E5B97(p0) {
    Citizen.invokeNative('0x91EF6EE6419E5B97', p0);
}
/**
 * Hash: 0x62ECFCFDEE7885D6 | ApiSet: undefined
 */
export function _0x62ECFCFDEE7885D6() {
    Citizen.invokeNative('0x62ECFCFDEE7885D6');
}
/**
 * p1: 0..16
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x5D96CFB59DA076A0 | ApiSet: undefined
 */
export function _0x5D96CFB59DA076A0(vehicle, p1, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x5D96CFB59DA076A0', _vehicle, p1, p2);
}
/**
 * Hash: 0x62374889A4D59F72 | ApiSet: undefined
 */
export function _0x62374889A4D59F72() {
    Citizen.invokeNative('0x62374889A4D59F72');
}
/**
 * Hash: 0xA2767257A320FC82 | ApiSet: undefined
 */
export function _0xA2767257A320FC82(p0, p1) {
    Citizen.invokeNative('0xA2767257A320FC82', p0, p1);
}
/**
 * ```
 * _RESET_*
 * _RESET_GAMEPLAY_CAM_RELATIVE_ORBIT_HOLD_TIME?
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x7295C203DD659DFE | ApiSet: undefined
 */
export function _0x7295C203DD659DFE() {
    Citizen.invokeNative('0x7295C203DD659DFE');
}
/**
 * B\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x9F97DA93681F87EA | ApiSet: undefined
 */
export function _0x9F97DA93681F87EA() {
    Citizen.invokeNative('0x9F97DA93681F87EA');
}
/**
 * ```
 * SET_FOLLOW_*
 * ```
 * Hash: 0x9DFE13ECDC1EC196 | ApiSet: undefined
 */
export function _0x9DFE13ECDC1EC196(p0, p1) {
    Citizen.invokeNative('0x9DFE13ECDC1EC196', p0, p1);
}
/**
 * Hash: 0xC8391C309684595A | ApiSet: undefined
 */
export function _0xC8391C309684595A() {
    Citizen.invokeNative('0xC8391C309684595A');
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xA7092AFE81944852 | ApiSet: undefined
 */
export function _0xA7092AFE81944852() {
    Citizen.invokeNative('0xA7092AFE81944852');
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xAABD62873FFB1A33 | ApiSet: undefined
 */
export function _0xAABD62873FFB1A33(p0, p1) {
    Citizen.invokeNative('0xAABD62873FFB1A33', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xB1381B97F70C7B30 | ApiSet: undefined
 */
export function _0xB1381B97F70C7B30() {
    Citizen.invokeNative('0xB1381B97F70C7B30');
}
/**
 * Hash: 0xCED08CBE8EBB97C7 | ApiSet: undefined
 */
export function _0xCED08CBE8EBB97C7(p0, p1) {
    Citizen.invokeNative('0xCED08CBE8EBB97C7', p0, p1);
}
/**
 * Hash: 0xC8B5C4A79CC18B94 | ApiSet: undefined
 */
export function _0xC8B5C4A79CC18B94(cam) {
    Citizen.invokeNative('0xC8B5C4A79CC18B94', cam);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xCCD078C2665D2973 | ApiSet: undefined
 */
export function _0xCCD078C2665D2973(p0) {
    Citizen.invokeNative('0xCCD078C2665D2973', p0);
}
/**
 * Hash: 0xBF72910D0F26F025 | ApiSet: undefined
 */
export function _0xBF72910D0F26F025() {
    return Citizen.invokeNative('0xBF72910D0F26F025');
}
/**
 * Hash: 0xDD79DF9F4D26E1C9 | ApiSet: undefined
 */
export function _0xDD79DF9F4D26E1C9() {
    Citizen.invokeNative('0xDD79DF9F4D26E1C9');
}
/**
 * Hash: 0xDB90C6CCA48940F1 | ApiSet: undefined
 */
export function _0xDB90C6CCA48940F1(p0) {
    Citizen.invokeNative('0xDB90C6CCA48940F1', p0);
}
/**
 * Hash: 0xFD3151CD37EA2245 | ApiSet: undefined
 */
export function _0xFD3151CD37EA2245(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0xFD3151CD37EA2245', _entity);
}
/**
 * Hash: 0xE111A7C0D200CBC5 | ApiSet: undefined
 */
export function _0xE111A7C0D200CBC5(p0, p1) {
    Citizen.invokeNative('0xE111A7C0D200CBC5', p0, p1);
}
/**
 * Hash: 0xF55E4046F6F831DC | ApiSet: undefined
 */
export function _0xF55E4046F6F831DC(p0, p1) {
    Citizen.invokeNative('0xF55E4046F6F831DC', p0, p1);
}
/**
 * ```
 * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
 * p9 is unknown at this time.
 * p10 throughout all the X360 Scripts is always 2.
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x9A2D0FB2E7852392 | ApiSet: undefined
 */
export function playCamAnim(cam, animName, animDictionary, position, xRot, yRot, zRot, p9, p10) {
    return PlayCamAnim(cam, animName, animDictionary, position.x, position.y, position.z, xRot, yRot, zRot, p9, p10);
}
/**
 * ```
 * Max value for p1 is 15.
 * ```
 * Hash: 0x7DCF7C708D292D55 | ApiSet: undefined
 */
export function overrideCamSplineMotionBlur(cam, p1, p2, p3) {
    OverrideCamSplineMotionBlur(cam, p1, p2, p3);
}
/**
 * ```
 * Examples:
 * `CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");`
 * `CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7\/\*1\*\/], l_F4D[15\/\*1\*\/], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");`
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0xE32EFE9AB4A9AA0C | ApiSet: undefined
 */
export function playSynchronizedCamAnim(camera, scene, animName, animDictionary) {
    return PlaySynchronizedCamAnim(camera, scene, animName, animDictionary);
}
/**
 * Hash: 0x40B62FA033EB0346 | ApiSet: undefined
 */
export function overrideCamSplineVelocity(cam, p1, p2, p3) {
    OverrideCamSplineVelocity(cam, p1, p2, p3);
}
/**
 * Points the camera at the specified entity.
 * Offset works like [GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS](#\_0x1899F328B0E12848).
 * Hash: 0x5640BFF86B16E8DC | ApiSet: undefined
 */
export function pointCamAtEntity(cam, entity, offsetX, offsetY, offsetZ, p5) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    PointCamAtEntity(cam, _entity, offsetX, offsetY, offsetZ, p5);
}
/**
 * ```
 * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
 * ```
 * Hash: 0x68B2B5F33BA63C41 | ApiSet: undefined
 */
export function pointCamAtPedBone(cam, ped, boneIndex, position, p6) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PointCamAtPedBone(cam, _ped, boneIndex, position.x, position.y, position.z, p6);
}
/**
 * Hash: 0xF75497BB865F0803 | ApiSet: undefined
 */
export function pointCamAtCoord(cam, position) {
    PointCamAtCoord(cam, position.x, position.y, position.z);
}
/**
 * Renders the camera previously created with [CREATE_CAM](#\_0xC3981DCE61D9E13F) or [CREATE_CAMERA](#\_0x5E3CF89C6BCCA67D)
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0x07E5B515DB0636FC | ApiSet: undefined
 */
export function renderScriptCams(render, ease, easeTime, easeCoordsAnim, p4) {
    RenderScriptCams(render, ease, easeTime, easeCoordsAnim, p4);
}
/**
 * ```
 * Set camera as active/inactive.
 * ```
 * Hash: 0x026FB97D0A425F84 | ApiSet: undefined
 */
export function setCamActive(cam, active) {
    SetCamActive(cam, active);
}
/**
 * ```
 * Allows you to aim and shoot at the direction the camera is facing.
 * ```
 * Hash: 0x8C1DC7770C51DC8D | ApiSet: undefined
 */
export function setCamAffectsAiming(cam, toggle) {
    SetCamAffectsAiming(cam, toggle);
}
/**
 * Hash: 0x8BFCEB5EA1B161B6 | ApiSet: undefined
 */
export function replayFreeCamGetMaxRange() {
    return ReplayFreeCamGetMaxRange();
}
/**
 * Makes the minimap follow a scripted camera's rotation instead of the gameplay cam.
 * Hash: 0x661B5C8654ADD825 | ApiSet: undefined
 */
export function setCamControlsMiniMapHeading(cam, toggle) {
    SetCamControlsMiniMapHeading(cam, toggle);
}
/**
 * ```
 * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
 * ```
 * Hash: 0x9FBDA379383A52A4 | ApiSet: undefined
 */
export function setCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation) {
    SetCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0x1B93E0107865DD40 | ApiSet: undefined
 */
export function setCamDebugName(camera, name) {
    SetCamDebugName(camera, name);
}
/**
 * ```
 * Sets the position of the cam.
 * ```
 * Hash: 0x4D41783FB745E42E | ApiSet: undefined
 */
export function setCamCoord(cam, posX, posY, posZ) {
    SetCamCoord(cam, posX, posY, posZ);
}
/**
 * ```
 * Native name labeled within its code
 * ```
 * Hash: 0x47B595D60664CFFA | ApiSet: undefined
 */
export function setCamDofFocalLengthMultiplier(camera, multiplier) {
    SetCamDofFocalLengthMultiplier(camera, multiplier);
}
/**
 * ```
 * This native has a name defined inside its code
 * ```
 * Hash: 0xC669EEA5D031B7DE | ApiSet: undefined
 */
export function setCamDofFocusDistanceBias(camera, p1) {
    SetCamDofFocusDistanceBias(camera, p1);
}
/**
 * Hash: 0x4145A4C44FF3B5A6 | ApiSet: undefined
 */
export function setCamAnimCurrentPhase(cam, phase) {
    SetCamAnimCurrentPhase(cam, phase);
}
/**
 * ```
 * This native has its name defined inside its codE
 * ```
 * Hash: 0x7DD234D6F3914C5B | ApiSet: undefined
 */
export function setCamDofFnumberOfLens(camera, p1) {
    SetCamDofFnumberOfLens(camera, p1);
}
/**
 * ```
 * This native has a name defined inside its code
 * ```
 * Hash: 0xC3654A441402562D | ApiSet: undefined
 */
export function setCamDofMaxNearInFocusDistance(camera, p1) {
    SetCamDofMaxNearInFocusDistance(camera, p1);
}
/**
 * Hash: 0x3CF48F6F96E749DC | ApiSet: undefined
 */
export function setCamDofPlanes(cam, p1, p2, p3, p4) {
    SetCamDofPlanes(cam, p1, p2, p3, p4);
}
/**
 * Specifies how much the DoF effect should be applied (Set using [`SET_CAM_NEAR_DOF`](#\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_FAR_DOF`](#\_0xEDD91296CD01AEE0), etc.)
 * Hash: 0x5EE29B4D7D5DF897 | ApiSet: undefined
 */
export function setCamDofStrength(cam, dofStrength) {
    SetCamDofStrength(cam, dofStrength);
}
/**
 * ```
 * This native has a name defined inside its code
 * ```
 * Hash: 0x2C654B4943BDDF7C | ApiSet: undefined
 */
export function setCamDofMaxNearInFocusDistanceBlendLevel(camera, p1) {
    SetCamDofMaxNearInFocusDistanceBlendLevel(camera, p1);
}
/**
 * ```
 * if p0 is 0, effect is cancelled
 * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
 * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
 * ```
 * Hash: 0x80C8B1846639BB19 | ApiSet: undefined
 */
export function setCamEffect(p0) {
    SetCamEffect(p0);
}
/**
 * Adjusts the field of view (FOV) for a specified camera, allowing for a wider or narrower perspective of the game world. The field of view is measured in degrees and affects how much of the game world is visible at any given moment through the camera.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xB13C14F66A00D047 | ApiSet: undefined
 */
export function setCamFov(cam, fieldOfView) {
    SetCamFov(cam, fieldOfView);
}
/**
 * Specifies when the camera should stop being in focus. Can be used together with [`SET_USE_HI_DOF`](#\_0xA13B0222F3D94A94), [`SET_CAM_NEAR_DOF`](#\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_USE_SHALLOW_DOF_MODE`](#\_0x16A96863A17552BB), [`SET_CAM_DOF_STRENGTH`](#\_0x5EE29B4D7D5DF897) and other DoF related natives.
 * ### Usage Example
 * A usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\_0x5EE29B4D7D5DF897).
 * Hash: 0xEDD91296CD01AEE0 | ApiSet: undefined
 */
export function setCamFarDof(cam, farDOF) {
    SetCamFarDof(cam, farDOF);
}
/**
 * Hash: 0xAE306F2A904BF86E | ApiSet: undefined
 */
export function setCamFarClip(cam, farClip) {
    SetCamFarClip(cam, farClip);
}
/**
 * Hash: 0x6F0F77FBA9A8F2E6 | ApiSet: undefined
 */
export function setCamMotionBlurStrength(cam, strength) {
    SetCamMotionBlurStrength(cam, strength);
}
/**
 * ```
 * The native seems to only be called once.
 * The native is used as so,
 * `CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));`
 * In the exile1 script.
 * ```
 * Hash: 0x45F1DE9C34B93AE6 | ApiSet: undefined
 */
export function setCamInheritRollVehicle(cam, p1) {
    SetCamInheritRollVehicle(cam, p1);
}
/**
 * Hash: 0xC7848EFCCC545182 | ApiSet: undefined
 */
export function setCamNearClip(cam, nearClip) {
    SetCamNearClip(cam, nearClip);
}
/**
 * Specifies when the camera should start being in focus. Can be used together with [`SET_USE_HI_DOF`](#\_0xA13B0222F3D94A94), [`SET_CAM_FAR_DOF`](#\_0xEDD91296CD01AEE0), [`SET_CAM_USE_SHALLOW_DOF_MODE`](#\_0x16A96863A17552BB), [`SET_CAM_DOF_STRENGTH`](#\_0x5EE29B4D7D5DF897) and other DoF related natives.
 * ### Usage Example
 * A usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\_0x5EE29B4D7D5DF897).
 * Hash: 0x3FA4BF0A7AB7DE2C | ApiSet: undefined
 */
export function setCamNearDof(cam, nearDOF) {
    SetCamNearDof(cam, nearDOF);
}
/**
 * ```
 * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
 * ```
 * Hash: 0x1381539FEE034CDA | ApiSet: undefined
 */
export function setCamSplineDuration(cam, timeDuration) {
    SetCamSplineDuration(cam, timeDuration);
}
/**
 * Hash: 0xBFD8727AEA3CCEBA | ApiSet: undefined
 */
export function setCamParams(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, transitionSpeed, p9, p10, rotationOrder) {
    SetCamParams(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, transitionSpeed, p9, p10, rotationOrder);
}
/**
 * Sets the rotation of the camera.
 * Hash: 0x85973643155D0B07 | ApiSet: undefined
 */
export function setCamRot(cam, rotX, rotY, rotZ, rotationOrder) {
    SetCamRot(cam, rotX, rotY, rotZ, rotationOrder);
}
/**
 * Hash: 0xD93DB43B82BC0D00 | ApiSet: undefined
 */
export function setCamShakeAmplitude(cam, amplitude) {
    SetCamShakeAmplitude(cam, amplitude);
}
/**
 * Hash: 0x7BF1A54AE67AC070 | ApiSet: undefined
 */
export function setCamSplineNodeExtraFlags(cam, p1, flags) {
    SetCamSplineNodeExtraFlags(cam, p1, flags);
}
/**
 * Hash: 0x83B8201ED82A9A2D | ApiSet: undefined
 */
export function setCamSplineNodeEase(cam, p1, p2, p3) {
    SetCamSplineNodeEase(cam, p1, p2, p3);
}
/**
 * Hash: 0x242B5874F0A4E052 | ApiSet: undefined
 */
export function setCamSplinePhase(cam, p1) {
    SetCamSplinePhase(cam, p1);
}
/**
 * Hash: 0xA6385DEB180F319F | ApiSet: undefined
 */
export function setCamSplineNodeVelocityScale(cam, p1, scale) {
    SetCamSplineNodeVelocityScale(cam, p1, scale);
}
/**
 * Hash: 0x51669F7D1FB53D9F | ApiSet: undefined
 */
export function setCinematicButtonActive(p0) {
    SetCinematicButtonActive(p0);
}
/**
 * Enables or disables the usage of a shallow DOF. Needs to be set to true to use [`SET_CAM_NEAR_DOF`](#\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_FAR_DOF`](#\_0xEDD91296CD01AEE0), etc. Doesn't need to be called every tick.
 * ### Usage Example
 * A usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\_0x5EE29B4D7D5DF897).
 * Hash: 0x16A96863A17552BB | ApiSet: undefined
 */
export function setCamUseShallowDofMode(cam, toggle) {
    SetCamUseShallowDofMode(cam, toggle);
}
/**
 * Sets the smoothing style for a DEFAULT_SPLINE_CAMERA
 * Ranges from 0 to 3 in rockstar scripts although there are actually 26
 * ```
 * 0: No lead-in or lead-out smoothing
 * 1: Smooth lead-in
 * 2: Smooth lead-out
 * 3: Both lead-in and lead-out are smoothed
 * 4-6: Longer speed up, lead-in, lead-out, and both in order as above.
 * 6: see above, but missed a node in testing(?)
 * 7: Smoothed lead-in, longer smoothed lead-out
 * 8: Longer lead-in and lead-out than 6, didn't drop node
 * 9: Constant acceleration
 * 10: Constant deceleration. Dropped 2 nodes in testing.
 * 11: Same as 0
 * 12: 10 but slower lead-in, reaches end node less early
 * 13: Extremely close to 3, slightly longer lead-in/lead-out
 * 14: Constant acceleration, dropped last 2 nodes in testing and halted (?)
 * 15: Very similar to 10, did not drop any nodes.
 * 16: Long lead-in, dropped 2 nodes in testing, very long leadout.
 * 17: Constant acceleration, slower speed-up than 9
 * 18: Same as 17 is to 9, slightly longer lead-out, lingers at end node
 * 19: Very long lead in and out
 * 20: Very long, gradual lead-in acceleration at start, gets extremely fast
 * 21: Same as 20 but for constant deceleration
 * 22: 20 and 21 combined, long linger at end node. Dropped 2 nodes in testing
 * 23: Constant acceleration, doesn't complete path before it stops
 * 24: Same as 23 but with constant deceleration, but completes path
 * 25: 23 and 24 combined, insanely fast at middle.
 * 26: No noticable lead-in, misses last 2 nodes in testing
 * 27+: Alternates between 0 and 26
 * ```
 * The above is documented and graphed at [Spline Cam Interp Graphs](https://docs.google.com/spreadsheets/d/1ejyiMcEYrhhQOL0mLe8664UN-vU4Oh-SBqQnVcKlFIk/edit?usp=sharing)
 * ```
 * Using 1-3 will result in misalignment from the passed durations for the spline nodes, the overall duration will remain but other nodes will be shortened if smoothing anything.
 * Graph below demonstrates interpolation between 0-1000 and back 10 times.
 * ![](https://i.imgur.com/cixWh7m.png)
 * ## Parameters
 * * **cam**: The DEFAULT_SPLINE_CAMERA to apply the smoothing to
 * * **smoothingStyle**: 0 to 3, 0 no additional smoothing, 1 smooth lead-in, 2 smooth lead-out, 3 smooth lead-in & lead-out
 * ```
 * Hash: 0xD1B0F412F109EA5D | ApiSet: undefined
 */
export function setCamSplineSmoothingStyle(cam, smoothingStyle) {
    SetCamSplineSmoothingStyle(cam, smoothingStyle);
}
/**
 * Hash: 0x2A2173E46DAECD12 | ApiSet: undefined
 */
export function setCamViewModeForContext(context, viewMode) {
    SetCamViewModeForContext(context, viewMode);
}
/**
 * Hash: 0xDC9DA9E8789F5246 | ApiSet: undefined
 */
export function setCinematicNewsChannelActiveThisUpdate() {
    SetCinematicNewsChannelActiveThisUpdate();
}
/**
 * Hash: 0xC724C701C30B2FE7 | ApiSet: undefined
 */
export function setCinematicCamShakeAmplitude(p0) {
    SetCinematicCamShakeAmplitude(p0);
}
/**
 * Hash: 0x0AF7B437918103B3 | ApiSet: undefined
 */
export function setFirstPersonAimCamNearClipThisUpdate(distance) {
    SetFirstPersonAimCamNearClipThisUpdate(distance);
}
/**
 * ```
 * Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
 * ```
 * Hash: 0xDCF0754AC3D6FD4E | ApiSet: undefined
 */
export function setCinematicModeActive(toggle) {
    SetCinematicModeActive(toggle);
}
/**
 * Hash: 0x70894BD0915C5BCA | ApiSet: undefined
 */
export function setFirstPersonAimCamZoomFactor(zoomFactor) {
    SetFirstPersonAimCamZoomFactor(zoomFactor);
}
/**
 * Hash: 0xBCFC632DB7673BF0 | ApiSet: undefined
 */
export function setFirstPersonCamPitchRange(minAngle, maxAngle) {
    SetFirstPersonCamPitchRange(minAngle, maxAngle);
}
/**
 * Hash: 0x503F5920162365B2 | ApiSet: undefined
 */
export function setFlyCamHorizontalResponse(cam, p1, p2, p3) {
    SetFlyCamHorizontalResponse(cam, p1, p2, p3);
}
/**
 * Hash: 0xE827B9382CFB41BA | ApiSet: undefined
 */
export function setFlyCamVerticalSpeedMultiplier(cam, p1, p2, p3) {
    SetFlyCamVerticalSpeedMultiplier(cam, p1, p2, p3);
}
/**
 * Hash: 0xC91C6C55199308CA | ApiSet: undefined
 */
export function setFlyCamCoordAndConstrain(cam, position) {
    SetFlyCamCoordAndConstrain(cam, position.x, position.y, position.z);
}
/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * Hash: 0x19464CB6E4078C8A | ApiSet: undefined
 */
export function setFollowVehicleCamZoomLevel(zoomLevel) {
    SetFollowVehicleCamZoomLevel(zoomLevel);
}
/**
 * Overrides the ped follow camera (not first person camera) with the specified camera. The game loads all camera metadata from `update/update.rpf/x64/data/metadata/cameras.ymt` and `x64a.rpf/data/metadata/cameras.ymt` with the ped follow cameras being of type `camFollowPedCameraMetadata`.
 * | Follow Camera Names                          |
 * |----------------------------------------------|
 * | DEFAULT_FOLLOW_PED_CAMERA                    |
 * | FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA           |
 * | FOLLOW_PED_ON_EXILE1\_LADDER_CAMERA           |
 * | FOLLOW_PED_SKY_DIVING_CAMERA                 |
 * | FOLLOW_PED_SKY_DIVING_FAMILY5\_CAMERA         |
 * | NIGHTCLUB_FOLLOW_PED_CAMERA                  |
 * | FOLLOW_PED_INTIMIDATION_CAMERA               |
 * | FOLLOW_PED_IN_WATER_CAMERA                   |
 * | FOLLOW_PED_PRONE_CAMERA                      |
 * | FOLLOW_PED_ON_SEAT_CAMERA                    |
 * | FOLLOW_PED_HANGING_UPSIDE_DOWN_CAMERA        |
 * | FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA           |
 * | CUSTOM_TRANSITION_AFTER_WARP_SKY_DIVE_CAMERA |
 * | FOLLOW_PED_ON_HORSE_CAMERA                   |
 * | FOLLOW_PED_ON_LOUNGER_CAMERA                 |
 * Other camera hashes (names not found yet)
 * ```cpp
 * // 0x5DBBFB6E
 * // 0xA38DB056
 * // 0x16B702A3
 * // 0x41D72A2E
 * ```
 * Hash: 0x44A113DD6FFC48D1 | ApiSet: undefined
 */
export function setFollowPedCamThisUpdate(camName, easeTime) {
    return SetFollowPedCamThisUpdate(camName, easeTime);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x5C90CAB09951A12F | ApiSet: undefined
 */
export function setFollowTurretSeatCam(seatIndex) {
    SetFollowTurretSeatCam(seatIndex);
}
/**
 * Hash: 0xF9D02130ECDD1D77 | ApiSet: undefined
 */
export function setFlyCamMaxHeight(cam, height) {
    SetFlyCamMaxHeight(cam, height);
}
/**
 * Hash: 0x8BBACBF51DA047A8 | ApiSet: undefined
 */
export function setGameplayCamFollowPedThisUpdate(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetGameplayCamFollowPedThisUpdate(_ped);
}
/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * Hash: 0x5A4F9EDF1673F704 | ApiSet: undefined
 */
export function setFollowPedCamViewMode(viewMode) {
    SetFollowPedCamViewMode(viewMode);
}
/**
 * ```
 * Sets gameplay camera to hash
 * ```
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x425A920FDB9A0DDA | ApiSet: undefined
 */
export function setGameplayCamHash(camName) {
    SetGameplayCamHash(camName);
}
/**
 * See [`GET_FOLLOW_PED_CAM_VIEW_MODE`](#\_0x8D4D46230B2C353A) for the follow mode enum.
 * Hash: 0xAC253D7842768F48 | ApiSet: undefined
 */
export function setFollowVehicleCamViewMode(viewMode) {
    SetFollowVehicleCamViewMode(viewMode);
}
/**
 * Hash: 0x759E13EBC1C15C5A | ApiSet: undefined
 */
export function setGameplayCamRawPitch(pitch) {
    SetGameplayCamRawPitch(pitch);
}
/**
 * ```
 * Does nothing
 * ```
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x103991D4A307D472 | ApiSet: undefined
 */
export function setGameplayCamRawYaw(yaw) {
    SetGameplayCamRawYaw(yaw);
}
/**
 * This native sets the camera's pitch (rotation on the x-axis).
 * Hash: 0x6D0858B8EDFD2B7D | ApiSet: undefined
 */
export function setGameplayCamRelativePitch(angle, scalingFactor) {
    SetGameplayCamRelativePitch(angle, scalingFactor);
}
/**
 * ```
 * Sets the camera position relative to heading in float from -360 to +360.
 * Heading is alwyas 0 in aiming camera.
 * ```
 * Hash: 0xB4EC2312F4E5B1F1 | ApiSet: undefined
 */
export function setGameplayCamRelativeHeading(heading) {
    SetGameplayCamRelativeHeading(heading);
}
/**
 * Hash: 0x48608C3464F58AB4 | ApiSet: undefined
 */
export function setGameplayCamRelativeRotation(roll, pitch, yaw) {
    SetGameplayCamRelativeRotation(roll, pitch, yaw);
}
/**
 * ```
 * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
 * ```
 * Hash: 0xA87E00932DB4D85D | ApiSet: undefined
 */
export function setGameplayCamShakeAmplitude(amplitude) {
    SetGameplayCamShakeAmplitude(amplitude);
}
/**
 * ```
 * From b617 scripts:
 * `CAM::_21E253A7F8DA5DFB("DINGHY");`
 * `CAM::_21E253A7F8DA5DFB("ISSI2");`
 * `CAM::_21E253A7F8DA5DFB("SPEEDO");`
 * ```
 * Hash: 0x21E253A7F8DA5DFB | ApiSet: undefined
 */
export function setGameplayCamVehicleCamera(vehicleName) {
    SetGameplayCamVehicleCamera(vehicleName);
}
/**
 * Hash: 0x11FA5D3479C7DD47 | ApiSet: undefined
 */
export function setGameplayCamVehicleCameraName(vehicleModel) {
    if (typeof vehicleModel === 'string')
        vehicleModel = this.getHashKey(vehicleModel);
    SetGameplayCamVehicleCameraName(vehicleModel);
}
/**
 * Hash: 0xD51ADCD2D8BC0FB3 | ApiSet: undefined
 */
export function setGameplayCoordHint(position, duration, blendOutDuration, blendInDuration, unk) {
    SetGameplayCoordHint(position.x, position.y, position.z, duration, blendOutDuration, blendInDuration, unk);
}
/**
 * ```
 * p6 & p7 - possibly length or time
 * ```
 * Hash: 0x189E955A8313E298 | ApiSet: undefined
 */
export function setGameplayEntityHint(entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetGameplayEntityHint(_entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8);
}
/**
 * Hash: 0xC92717EF615B6704 | ApiSet: undefined
 */
export function setGameplayHintAnimOffsety(yOffset) {
    SetGameplayHintAnimOffsety(yOffset);
}
/**
 * Hash: 0xE3433EADAAF7EE40 | ApiSet: undefined
 */
export function setGameplayHintAnimCloseup(toggle) {
    SetGameplayHintAnimCloseup(toggle);
}
/**
 * Hash: 0xF8BDBF3D573049A1 | ApiSet: undefined
 */
export function setGameplayHintFollowDistanceScalar(value) {
    SetGameplayHintFollowDistanceScalar(value);
}
/**
 * Hash: 0x5D7B620DAE436138 | ApiSet: undefined
 */
export function setGameplayHintAnimOffsetx(xOffset) {
    SetGameplayHintAnimOffsetx(xOffset);
}
/**
 * Hash: 0xD1F8363DFAD03848 | ApiSet: undefined
 */
export function setGameplayHintBaseOrbitPitchOffset(value) {
    SetGameplayHintBaseOrbitPitchOffset(value);
}
/**
 * Hash: 0x513403FB9C56211F | ApiSet: undefined
 */
export function setGameplayHintFov(FOV) {
    SetGameplayHintFov(FOV);
}
/**
 * Hash: 0x83E87508A2CA2AC6 | ApiSet: undefined
 */
export function setGameplayObjectHint(p0, p1, p2, p3, p4, p5, p6, p7) {
    SetGameplayObjectHint(p0, p1, p2, p3, p4, p5, p6, p7);
}
/**
 * Focuses the camera on the specified vehicle.
 * Hash: 0xA2297E18F3E71C2E | ApiSet: undefined
 */
export function setGameplayVehicleHint(vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetGameplayVehicleHint(_vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime);
}
/**
 * Override the camera work of the third-person camera to table game for current frame only.
 * |                  HashKey                    |       Hash        |    Game         |
 * | :---------------------------------: | :-----------:| :-------------:  |
 * | `CASINO_LUCKY_WHEEL_CAMERA` |   `5891389`   |  Lucky Wheel    |
 * | `CASINO_SLOT_MACHINE_CAMERA` |  `518572876`  |     Slots       |
 * | `CASINO_ROULETTE_CAMERA` |   `71681063`  |    Roulette     |
 * | `CASINO_BLACKJACK_CAMERA` | `-2124244681` |    Blackjack    |
 * | `CASINO_POKER_CAMERA` | `-1938411241` |   Three Cards   |
 * | `CASINO_INSIDE_TRACK_CAMERA` | `1929822423` |   Inside Track    |
 * | `ARCADE_LOVE_PROFESSOR_P1_CAMERA` | `545868034` |   LoveProfessorP1   |
 * | `ARCADE_LOVE_PROFESSOR_P2_CAMERA` | `935304251` |   LoveProfessorP2   |
 * Hash: 0x79C0E43EB9B944E2 | ApiSet: undefined
 */
export function setTableGamesCameraThisUpdate(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return SetTableGamesCameraThisUpdate(hash);
}
/**
 * Hash: 0x2B486269ACD548D3 | ApiSet: undefined
 */
export function setGameplayPedHint(p0, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration) {
    const _p0 = p0 instanceof Ped ? p0.handle() : p0;
    SetGameplayPedHint(_p0, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration);
}
/**
 * Needs to be called every tick to make the active camera use a high depth of field.\
 * The DoF can be customized using [`SET_CAM_NEAR_DOF`](#\_0x3FA4BF0A7AB7DE2C), [`SET_CAM_FAR_DOF`](#\_0xEDD91296CD01AEE0), [`SET_CAM_USE_SHALLOW_DOF_MODE`](#\_0x16A96863A17552BB), [`SET_CAM_DOF_STRENGTH`](#\_0x5EE29B4D7D5DF897) and other DoF related natives.
 * ### Usage Example
 * A usage example for this native can be found in the following native documentation: [`SET_CAM_DOF_STRENGTH`](#\_0x5EE29B4D7D5DF897).
 * Hash: 0xA13B0222F3D94A94 | ApiSet: undefined
 */
export function setUseHiDof() {
    SetUseHiDof();
}
/**
 * Hash: 0x42156508606DE65E | ApiSet: undefined
 */
export function setThirdPersonAimCamNearClipThisUpdate(distance) {
    SetThirdPersonAimCamNearClipThisUpdate(distance);
}
/**
 * Hash: 0xE9EA16D6E54CDCA4 | ApiSet: undefined
 */
export function setInVehicleCamStateThisUpdate(p0, p1) {
    const _p0 = p0 instanceof Entity ? p0.handle() : p0;
    SetInVehicleCamStateThisUpdate(_p0, p1);
}
/**
 * ```
 * Possible shake types (updated b617d):
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 * ```
 * Hash: 0x6A25241C340D3822 | ApiSet: undefined
 */
export function shakeCam(cam, type, amplitude) {
    ShakeCam(cam, type, amplitude);
}
/**
 * Hash: 0xDCD4EA924F42D01A | ApiSet: undefined
 */
export function setWidescreenBorders(p0, p1) {
    SetWidescreenBorders(p0, p1);
}
/**
 * ```
 * Only used in R* Script fm_mission_controller_2020
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x731A880555DA3647 | ApiSet: undefined
 */
export function setUseHiDofInCutscene() {
    SetUseHiDofInCutscene();
}
/**
 * ```
 * Possible shake types (updated b617d):
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 * ```
 * Hash: 0xFD55E49555E017CF | ApiSet: undefined
 */
export function shakeGameplayCam(shakeName, intensity) {
    ShakeGameplayCam(shakeName, intensity);
}
/**
 * ```
 * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
 * ```
 * Hash: 0xDCE214D9ED58F3CF | ApiSet: undefined
 */
export function shakeCinematicCam(p0, p1) {
    ShakeCinematicCam(p0, p1);
}
/**
 * ```
 * `CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);`
 * ```
 * Hash: 0xF4C8CF9E353AFECA | ApiSet: undefined
 */
export function shakeScriptGlobal(p0, p1) {
    ShakeScriptGlobal(p0, p1);
}
/**
 * Hash: 0xF33AB75780BA57DE | ApiSet: undefined
 */
export function stopCamPointing(cam) {
    StopCamPointing(cam);
}
/**
 * Hash: 0x0EF93E9F3D08C178 | ApiSet: undefined
 */
export function stopGameplayCamShaking(bStopImmediately) {
    StopGameplayCamShaking(bStopImmediately);
}
/**
 * Hash: 0x7660C6E75D3A078E | ApiSet: undefined
 */
export function stopCinematicShot(p0) {
    if (typeof p0 === 'string')
        p0 = this.getHashKey(p0);
    StopCinematicShot(p0);
}
/**
 * Hash: 0xBDECF64367884AC3 | ApiSet: undefined
 */
export function stopCamShaking(cam, p1) {
    StopCamShaking(cam, p1);
}
/**
 * Hash: 0x2238E588E588A6D7 | ApiSet: undefined
 */
export function stopCinematicCamShaking(p0) {
    StopCinematicCamShaking(p0);
}
/**
 * Instructs the game engine to stop rendering scripted cameras and transition back to the gameplay camera, optionally applying custom blending and rendering options.
 * ```cpp
 * enum eRenderingOptionFlags {
 * RO_NO_OPTIONS = 0,
 * RO_STOP_RENDERING_OPTION_WHEN_PLAYER_EXITS_INTO_COVER = 1
 * };
 * ```
 * ```cpp
 * enum eCamSplineSmoothingFlags {
 * // No smoothing just moves at a constant rate
 * CAM_SPLINE_NO_SMOOTH = 0,
 * // Decelerates when approaching a node
 * CAM_SPLINE_SLOW_IN_SMOOTH = 1,
 * // Accelerates slowly when leaving a node
 * CAM_SPLINE_SLOW_OUT_SMOOTH = 2,
 * // Decelerates when approaching a node and accelerates slowly when leaving a node
 * CAM_SPLINE_SLOW_IN_OUT_SMOOTH = 3,
 * CAM_SPLINE_VERY_SLOW_IN = 4,
 * CAM_SPLINE_VERY_SLOW_OUT = 5,
 * CAM_SPLINE_VERY_SLOW_IN_SLOW_OUT = 6,
 * CAM_SPLINE_SLOW_IN_VERY_SLOW_OUT = 7,
 * CAM_SPLINE_VERY_SLOW_IN_VERY_SLOW_OUT = 8,
 * CAM_SPLINE_EASE_IN = 9,
 * CAM_SPLINE_EASE_OUT = 10,
 * CAM_SPLINE_QUADRATIC_EASE_IN = 11,
 * CAM_SPLINE_QUADRATIC_EASE_OUT = 12,
 * CAM_SPLINE_QUADRATIC_EASE_IN_OUT = 13,
 * CAM_SPLINE_CUBIC_EASE_IN = 14,
 * CAM_SPLINE_CUBIC_EASE_OUT = 15,
 * CAM_SPLINE_CUBIC_EASE_IN_OUT = 16,
 * CAM_SPLINE_QUARTIC_EASE_IN = 17,
 * CAM_SPLINE_QUARTIC_EASE_OUT = 18,
 * CAM_SPLINE_QUARTIC_EASE_IN_OUT = 19,
 * CAM_SPLINE_QUINTIC_EASE_IN = 20,
 * CAM_SPLINE_QUINTIC_EASE_OUT = 21,
 * CAM_SPLINE_QUINTIC_EASE_IN_OUT = 22,
 * CAM_SPLINE_CIRCULAR_EASE_IN = 23,
 * CAM_SPLINE_CIRCULAR_EASE_OUT = 24,
 * CAM_SPLINE_CIRCULAR_EASE_IN_OUT = 25
 * };
 * ```
 * ```
 * NativeDB Added Parameter 4: int renderingOptions : An integer bitmask of eRenderingOptionFlags to apply specific rendering behaviors during the transition. RO_NO_OPTIONS signifies no special options are applied.
 * ```
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xC819F3CBB62BF692 | ApiSet: undefined
 */
export function stopRenderingScriptCamsUsingCatchUp(bShouldApplyAcrossAllThreads, distanceToBlend, blendType) {
    StopRenderingScriptCamsUsingCatchUp(bShouldApplyAcrossAllThreads, distanceToBlend, blendType);
}
/**
 * Terminates the current gameplay hint camera, with an option for immediate cessation or a gradual fade out.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xF46C581C61718916 | ApiSet: undefined
 */
export function stopGameplayHint(bStopImmediately) {
    StopGameplayHint(bStopImmediately);
}
/**
 * Stops the currently active global camera shake that was initiated by a script. You can check if a global camera shake is active using [IS_SCRIPT_GLOBAL_SHAKING](#\_0xC912AF078AF19212).
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x1C9D7949FA533490 | ApiSet: undefined
 */
export function stopScriptGlobalShaking(bStopImmediately) {
    StopScriptGlobalShaking(bStopImmediately);
}
/**
 * Hash: 0xDB629FFD9285FA06 | ApiSet: undefined
 */
export function stopCutsceneCamShaking() {
    StopCutsceneCamShaking();
}
/**
 * Applies a predefined set of vehicle camera settings optimized for capturing stunts, effective for the current game update/frame.
 * ```
 * NativeDB Introduced: v791
 * ```
 * Hash: 0x6493CF69859B116A | ApiSet: undefined
 */
export function useVehicleCamStuntSettingsThisUpdate() {
    UseVehicleCamStuntSettingsThisUpdate();
}
/**
 * Sets the ambient ped & vehicle population spawning origin to be based around the active scripted camera for this frame
 * This will prevent vehicles from being created close to the camera and/or on-screen
 * Hash: 0x271401846BD26E92 | ApiSet: undefined
 */
export function useScriptCamForAmbientPopulationOriginThisFrame(vehicles, peds) {
    UseScriptCamForAmbientPopulationOriginThisFrame(vehicles, peds);
}
/**
 * Hash: 0x6889498B3E19C797 | ApiSet: undefined
 */
export function dataarrayAddDict() {
    return DataarrayAddDict();
}
/**
 * Hash: 0x2F0661C155AEEEAA | ApiSet: undefined
 */
export function dataarrayAddString(value) {
    return DataarrayAddString(value);
}
/**
 * Hash: 0xF8B0F5A43E928C76 | ApiSet: undefined
 */
export function dataarrayAddBool(value) {
    return DataarrayAddBool(value);
}
/**
 * Hash: 0xCABDB751D86FE93B | ApiSet: undefined
 */
export function dataarrayAddInt(value) {
    return DataarrayAddInt(value);
}
/**
 * Hash: 0x57A995FD75D37F56 | ApiSet: undefined
 */
export function dataarrayAddFloat(value) {
    return DataarrayAddFloat(value);
}
/**
 * Hash: 0x8B5FADCC4E3A145F | ApiSet: undefined
 */
export function dataarrayGetDict(arrayIndex) {
    return DataarrayGetDict(arrayIndex);
}
/**
 * Hash: 0x407F8D034F70F0C2 | ApiSet: undefined
 */
export function dataarrayAddVector(valueX, valueY, valueZ) {
    return DataarrayAddVector(valueX, valueY, valueZ);
}
/**
 * Hash: 0x50C1B2874E50C114 | ApiSet: undefined
 */
export function dataarrayGetBool(arrayIndex) {
    return DataarrayGetBool(arrayIndex);
}
/**
 * Hash: 0x065DB281590CEA2D | ApiSet: undefined
 */
export function dataarrayGetCount() {
    return DataarrayGetCount();
}
/**
 * Hash: 0x8D2064E5B64A628A | ApiSet: undefined
 */
export function dataarrayGetVector(arrayIndex) {
    return new Vector3(DataarrayGetVector(arrayIndex));
}
/**
 * Hash: 0x3E5AE19425CD74BE | ApiSet: undefined
 */
export function dataarrayGetInt(arrayIndex) {
    return DataarrayGetInt(arrayIndex);
}
/**
 * Hash: 0xA358F56F10732EE1 | ApiSet: undefined
 */
export function datadictCreateDict(key) {
    return DatadictCreateDict(key);
}
/**
 * Hash: 0xD3F2FFEB8D836F52 | ApiSet: undefined
 */
export function dataarrayGetString(arrayIndex) {
    return DataarrayGetString(arrayIndex);
}
/**
 * Hash: 0xC0C527B525D7CFB5 | ApiSet: undefined
 */
export function dataarrayGetFloat(arrayIndex) {
    return DataarrayGetFloat(arrayIndex);
}
/**
 * Hash: 0x5B11728527CA6E5F | ApiSet: undefined
 */
export function datadictCreateArray(key) {
    return DatadictCreateArray(key);
}
/**
 * ```
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * ```
 * Hash: 0x3A0014ADB172A3C5 | ApiSet: undefined
 */
export function dataarrayGetType(arrayIndex) {
    return DataarrayGetType(arrayIndex);
}
/**
 * Hash: 0x7A983AA9DA2659ED | ApiSet: undefined
 */
export function datadictGetArray(key) {
    return DatadictGetArray(key);
}
/**
 * Hash: 0x06610343E73B9727 | ApiSet: undefined
 */
export function datadictGetFloat(key) {
    return DatadictGetFloat(key);
}
/**
 * Hash: 0x1186940ED72FFEEC | ApiSet: undefined
 */
export function datadictGetBool(key) {
    return DatadictGetBool(key);
}
/**
 * Hash: 0x78F06F6B1FB5A80C | ApiSet: undefined
 */
export function datadictGetInt(key) {
    return DatadictGetInt(key);
}
/**
 * Hash: 0x3D2FD9E763B24472 | ApiSet: undefined
 */
export function datadictGetString(key) {
    return DatadictGetString(key);
}
/**
 * ```
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * ```
 * Hash: 0x031C55ED33227371 | ApiSet: undefined
 */
export function datadictGetType(key) {
    return DatadictGetType(key);
}
/**
 * Hash: 0xB6B9DDC412FCEEE2 | ApiSet: undefined
 */
export function datadictGetDict(key) {
    return DatadictGetDict(key);
}
/**
 * Hash: 0x35124302A556A325 | ApiSet: undefined
 */
export function datadictSetBool(key, value) {
    return DatadictSetBool(key, value);
}
/**
 * Hash: 0xC27E1CC2D795105E | ApiSet: undefined
 */
export function datadictSetFloat(key, value) {
    return DatadictSetFloat(key, value);
}
/**
 * Hash: 0x46CD3CB66E0825CC | ApiSet: undefined
 */
export function datadictGetVector(key) {
    return new Vector3(DatadictGetVector(key));
}
/**
 * Hash: 0xE7E035450A7948D5 | ApiSet: undefined
 */
export function datadictSetInt(key, value) {
    return DatadictSetInt(key, value);
}
/**
 * Hash: 0x8FF3847DADD8E30C | ApiSet: undefined
 */
export function datadictSetString(key, value) {
    return DatadictSetString(key, value);
}
/**
 * Hash: 0x6CC86E78358D5119 | ApiSet: undefined
 */
export function datafileClearWatchList() {
    DatafileClearWatchList();
}
/**
 * Hash: 0x4CD49B76338C7DEE | ApiSet: undefined
 */
export function datadictSetVector(key, valueX, valueY, valueZ) {
    return DatadictSetVector(key, valueX, valueY, valueZ);
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 * Hash: 0xD27058A1CA2B13EE | ApiSet: undefined
 */
export function datafileCreate() {
    DatafileCreate();
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 * Hash: 0x9AB9C1CFC8862DFB | ApiSet: undefined
 */
export function datafileDelete() {
    DatafileDelete();
}
/**
 * Hash: 0x8F5EA1C01D65A100 | ApiSet: undefined
 */
export function datafileDeleteRequestedFile(p0) {
    return DatafileDeleteRequestedFile(p0);
}
/**
 * Hash: 0xC55854C7D7274882 | ApiSet: undefined
 */
export function datafileFlushMissionHeader() {
    DatafileFlushMissionHeader();
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 * Hash: 0x906B778CA1DC72B6 | ApiSet: undefined
 */
export function datafileGetFileDict() {
    return DatafileGetFileDict();
}
/**
 * ```
 * Example:
 * `if (!DATAFILE::_BEDB96A7584AA8CF())`
 * {
 * if (!g_109E3)
 * {
 * `if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))`
 * {
 * `if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())`
 * {
 * g_17A8B = 0;
 * }
 * if (!g_D52C)
 * {
 * sub_730();
 * }
 * }
 * }
 * }
 * ```
 * Hash: 0xBEDB96A7584AA8CF | ApiSet: undefined
 */
export function datafileIsSavePending() {
    return DatafileIsSavePending();
}
/**
 * Hash: 0xF8CC1EBE0B62E29F | ApiSet: undefined
 */
export function datafileHasValidFileData(p0) {
    return DatafileHasValidFileData(p0);
}
/**
 * Hash: 0x15FF52B809DB2353 | ApiSet: undefined
 */
export function datafileHasLoadedFileData(p0) {
    return DatafileHasLoadedFileData(p0);
}
/**
 * Hash: 0xFCCAE5B92A830878 | ApiSet: undefined
 */
export function datafileIsValidRequestId(index) {
    return DatafileIsValidRequestId(index);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x22DA66936E0FFF37 | ApiSet: undefined
 */
export function datafileSelectActiveFile(p0) {
    return DatafileSelectActiveFile(p0);
}
/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0x9CB0BFA7A9342C3D | ApiSet: undefined
 */
export function datafileSelectUgcStats(p0, p1) {
    return DatafileSelectUgcStats(p0, p1);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x01095C95CD46B624 | ApiSet: undefined
 */
export function datafileSelectCreatorStats(p0) {
    return DatafileSelectCreatorStats(p0);
}
/**
 * ```
 * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
 * Returns whether or not the file was successfully loaded.
 * Example:
 * `DATAFILE::_LOAD_UGC_FILE("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"`
 * ```
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xC5238C011AF405E4 | ApiSet: undefined
 */
export function datafileLoadOfflineUgc(filename) {
    return DatafileLoadOfflineUgc(filename);
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 * Hash: 0x2ED61456317B8178 | ApiSet: undefined
 */
export function datafileStoreMissionHeader() {
    DatafileStoreMissionHeader();
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x52818819057F2B40 | ApiSet: undefined
 */
export function datafileSelectUgcPlayerData(p0) {
    return DatafileSelectUgcPlayerData(p0);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xA69AC4ADE82B57A4 | ApiSet: undefined
 */
export function datafileSelectUgcData(p0) {
    return DatafileSelectUgcData(p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x6AD0BD5E087866CB | ApiSet: undefined
 */
export function _0x6AD0BD5E087866CB(p0) {
    Citizen.invokeNative('0x6AD0BD5E087866CB', p0);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x83BCCE3224735F05 | ApiSet: undefined
 */
export function datafileStartSaveToCloud(filename) {
    return DatafileStartSaveToCloud(filename);
}
/**
 * Hash: 0x4DFDD9EB705F8140 | ApiSet: undefined
 */
export function datafileUpdateSaveToCloud() {
    return DatafileUpdateSaveToCloud();
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xA6EEF01087181EDD | ApiSet: undefined
 */
export function _0xA6EEF01087181EDD(p0, p1) {
    return Citizen.invokeNative('0xA6EEF01087181EDD', p0, p1);
}
/**
 * ```
 * Adds the given request ID to the watch list.
 * ```
 * Hash: 0xAD6875BBC0FC899C | ApiSet: undefined
 */
export function datafileWatchRequestId(id) {
    DatafileWatchRequestId(id);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xDBF860CF1DB8E599 | ApiSet: undefined
 */
export function _0xDBF860CF1DB8E599(p0) {
    return Citizen.invokeNative('0xDBF860CF1DB8E599', p0);
}
/**
 * ```
 * NativeDB Added Parameter 8: Any p7
 * ```
 * Hash: 0xC84527E235FCA219 | ApiSet: undefined
 */
export function ugcCreateContent(data, dataCount, contentName, description, tagsCsv, contentTypeName, publish) {
    return UgcCreateContent(data, dataCount, contentName, description, tagsCsv, contentTypeName, publish);
}
/**
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0xA5EFC3E847D60507 | ApiSet: undefined
 */
export function ugcCreateMission(contentName, description, tagsCsv, contentTypeName, publish) {
    return UgcCreateMission(contentName, description, tagsCsv, contentTypeName, publish);
}
/**
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0x692D808C34A82143 | ApiSet: undefined
 */
export function ugcSetPlayerData(contentId, rating, contentTypeName) {
    return UgcSetPlayerData(contentId, rating, contentTypeName);
}
/**
 * ```
 * NativeDB Added Parameter 8: Any p7
 * ```
 * Hash: 0x648E7A5434AF7969 | ApiSet: undefined
 */
export function ugcUpdateContent(contentId, dataCount, contentName, description, tagsCsv, contentTypeName) {
    return UgcUpdateContent(contentId, dataCount, contentName, description, tagsCsv, contentTypeName);
}
/**
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0x4645DE9980999E93 | ApiSet: undefined
 */
export function ugcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName) {
    return UgcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName);
}
/**
 * ```
 * Returns whether or not the specified property is set for the entity.
 * ```
 * Hash: 0x05661B80A8C9165F | ApiSet: undefined
 */
export function decorExistOn(entity, propertyName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorExistOn(_entity, propertyName);
}
/**
 * Hash: 0x6524A2F114706F43 | ApiSet: undefined
 */
export function decorGetFloat(entity, propertyName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorGetFloat(_entity, propertyName);
}
/**
 * Hash: 0x4F14F9F870D6FBC8 | ApiSet: undefined
 */
export function decorIsRegisteredAsType(propertyName, type) {
    return DecorIsRegisteredAsType(propertyName, type);
}
/**
 * Hash: 0xDACE671663F2F5DB | ApiSet: undefined
 */
export function decorGetBool(entity, propertyName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorGetBool(_entity, propertyName);
}
/**
 * ```
 * Called after all decorator type initializations.
 * ```
 * Hash: 0xA9D14EEA259F9248 | ApiSet: undefined
 */
export function decorRegisterLock() {
    DecorRegisterLock();
}
/**
 * ```cpp
 * enum eDecorType
 * {
 * DECOR_TYPE_FLOAT = 1,
 * DECOR_TYPE_BOOL = 2,
 * DECOR_TYPE_INT = 3,
 * DECOR_TYPE_STRING = 4,
 * DECOR_TYPE_TIME = 5
 * };
 * ```
 * Hash: 0x9FD90732F56403CE | ApiSet: undefined
 */
export function decorRegister(propertyName, type) {
    DecorRegister(propertyName, type);
}
/**
 * Hash: 0xA06C969B02A97298 | ApiSet: undefined
 */
export function decorGetInt(entity, propertyName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorGetInt(_entity, propertyName);
}
/**
 * Hash: 0x00EE9F297C738720 | ApiSet: undefined
 */
export function decorRemove(entity, propertyName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorRemove(_entity, propertyName);
}
/**
 * Hash: 0x211AB1DD8D0F363A | ApiSet: undefined
 */
export function decorSetFloat(entity, propertyName, value) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorSetFloat(_entity, propertyName, value);
}
/**
 * ```
 * This function sets metadata of type bool to specified entity.
 * ```
 * Hash: 0x6B1E8E2ED1335B71 | ApiSet: undefined
 */
export function decorSetBool(entity, propertyName, value) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorSetBool(_entity, propertyName, value);
}
/**
 * Hash: 0x95AED7B8E39ECAA4 | ApiSet: undefined
 */
export function decorSetTime(entity, propertyName, timestamp) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorSetTime(_entity, propertyName, timestamp);
}
/**
 * ```
 * Sets property to int.
 * ```
 * Hash: 0x0CE3AA5E1CA19E10 | ApiSet: undefined
 */
export function decorSetInt(entity, propertyName, value) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DecorSetInt(_entity, propertyName, value);
}
/**
 * Hash: 0x10D0A8F259E93EC9 | ApiSet: undefined
 */
export function getIsLoadingScreenActive() {
    return GetIsLoadingScreenActive();
}
/**
 * ```
 * Sets the value of the specified variable to 0.
 * Always returns true.
 * ```
 * Hash: 0x46E2B844905BC5F0 | ApiSet: undefined
 */
export function hasCloudRequestsFinished(unused) {
    return HasCloudRequestsFinished(unused);
}
/**
 * Hash: 0x9489659372A81585 | ApiSet: undefined
 */
export function _0x9489659372A81585() {
    return Citizen.invokeNative('0x9489659372A81585');
}
/**
 * Hash: 0x8D30F648014A92B5 | ApiSet: undefined
 */
export function getExtraContentPackHasBeenInstalled() {
    return GetExtraContentPackHasBeenInstalled();
}
/**
 * ```
 * Only used once in scripts, in maintransition.
 * maintransition.c4, line ~82432:
 * `if (PED::_7350823473013C02(PLAYER::PLAYER_PED_ID()) && (DECORATOR::_241FCA5B1AA14F75() == 0)) {`
 * g_2542A5 = a_1; // 'g_2542A5' used in 'building_controller.ysc' for IPL stuff?
 * return 1;
 * }
 * Likely used solely for the players ped. The function it's in seems to only be used for initialization/quitting. Called among natives to discard scaleforms, disable frontend, fading in/out, etc. Neighboring strings to some calls include "HUD_JOINING", "HUD_QUITTING".
 * Most likely ARE_*
 * ```
 * Hash: 0x241FCA5B1AA14F75 | ApiSet: undefined
 */
export function _0x241FCA5B1AA14F75() {
    return Citizen.invokeNative('0x241FCA5B1AA14F75');
}
/**
 * GET_IS_LOADING_\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xC4637A6D03C24CC3 | ApiSet: undefined
 */
export function _0xC4637A6D03C24CC3() {
    return Citizen.invokeNative('0xC4637A6D03C24CC3');
}
/**
 * Hash: 0xF2E07819EF1A5289 | ApiSet: undefined
 */
export function _0xF2E07819EF1A5289() {
    return Citizen.invokeNative('0xF2E07819EF1A5289');
}
/**
 * ```
 * This loads the GTA:O dlc map parts (high end garages, apartments).
 * Works in singleplayer.
 * In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
 * ```
 * Hash: 0x0888C3502DBBEEF5 | ApiSet: undefined
 */
export function onEnterMp() {
    OnEnterMp();
}
/**
 * ```
 * Example:
 * `DLC::IS_DLC_PRESENT($\mpbusiness2\);`
 * ($ = gethashkey)
 * bruteforce these:
 * 0xB119F6D
 * 0x96F02EE6
 * ```
 * Hash: 0x812595A0644CE1DE | ApiSet: undefined
 */
export function isDlcPresent(dlcHash) {
    if (typeof dlcHash === 'string')
        dlcHash = this.getHashKey(dlcHash);
    return IsDlcPresent(dlcHash);
}
/**
 * ```
 * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
 * The original (and wrong) definition is below:
 * This unload the GTA:O DLC map parts (like high end garages/apartments).
 * Works in singleplayer.
 * ```
 * Hash: 0xD7C10C4A637992C9 | ApiSet: undefined
 */
export function onEnterSp() {
    OnEnterSp();
}
/**
 * Hash: 0xA213B11DFF526300 | ApiSet: undefined
 */
export function _0xA213B11DFF526300() {
    return Citizen.invokeNative('0xA213B11DFF526300');
}
/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * This is limited to 4 blocked events at a time.
 * ```
 * Hash: 0xE42FCDFD0E4196F7 | ApiSet: undefined
 */
export function blockDecisionMakerEvent(name, eventType) {
    if (typeof name === 'string')
        name = this.getHashKey(name);
    BlockDecisionMakerEvent(name, eventType);
}
/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * Hash: 0x7FD8F3BE76F89422 | ApiSet: undefined
 */
export function addShockingEventForEntity(eventType, entity, duration) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return AddShockingEventForEntity(eventType, _entity, duration);
}
/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * Hash: 0xD9F8455409B525E9 | ApiSet: undefined
 */
export function addShockingEventAtPosition(eventType, position, duration) {
    return AddShockingEventAtPosition(eventType, position.x, position.y, position.z, duration);
}
/**
 * Hash: 0xEAABE8FDFA21274C | ApiSet: undefined
 */
export function removeAllShockingEvents(p0) {
    RemoveAllShockingEvents(p0);
}
/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * Hash: 0x1374ABB7C15BAB92 | ApiSet: undefined
 */
export function isShockingEventInSphere(eventType, position, radius) {
    return IsShockingEventInSphere(eventType, position.x, position.y, position.z, radius);
}
/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * Hash: 0x4FC9381A7AEE8968 | ApiSet: undefined
 */
export function clearDecisionMakerEventResponse(name, eventType) {
    if (typeof name === 'string')
        name = this.getHashKey(name);
    ClearDecisionMakerEventResponse(name, eventType);
}
/**
 * Hash: 0x340F1415B68AEADE | ApiSet: undefined
 */
export function removeShockingEventSpawnBlockingAreas() {
    RemoveShockingEventSpawnBlockingAreas();
}
/**
 * Hash: 0x2CDA538C44C6CCE5 | ApiSet: undefined
 */
export function removeShockingEvent(event) {
    return RemoveShockingEvent(event);
}
/**
 * Hash: 0xB604A2942ADED0EE | ApiSet: undefined
 */
export function setDecisionMaker(ped, name) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof name === 'string')
        name = this.getHashKey(name);
    SetDecisionMaker(_ped, name);
}
/**
 * Hash: 0x5F3B7749C112D552 | ApiSet: undefined
 */
export function suppressAgitationEventsNextFrame() {
    SuppressAgitationEventsNextFrame();
}
/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * Hash: 0x3FD2EC8BF1F1CF30 | ApiSet: undefined
 */
export function suppressShockingEventTypeNextFrame(eventType) {
    SuppressShockingEventTypeNextFrame(eventType);
}
/**
 * ```
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * ```
 * Hash: 0xD7CD9CF34F2C99E8 | ApiSet: undefined
 */
export function unblockDecisionMakerEvent(name, eventType) {
    if (typeof name === 'string')
        name = this.getHashKey(name);
    UnblockDecisionMakerEvent(name, eventType);
}
/**
 * Hash: 0x2F9A292AD0A3BD89 | ApiSet: undefined
 */
export function suppressShockingEventsNextFrame() {
    SuppressShockingEventsNextFrame();
}
/**
 * ```cpp
 * enum eApplyForceTypes {
 * APPLY_TYPE_FORCE = 0,
 * APPLY_TYPE_IMPULSE = 1,
 * APPLY_TYPE_EXTERNAL_FORCE = 2,
 * APPLY_TYPE_EXTERNAL_IMPULSE = 3,
 * APPLY_TYPE_TORQUE = 4,
 * APPLY_TYPE_ANGULAR_IMPULSE = 5
 * }
 * ```
 * Hash: 0xC5F68BE9613E2D18 | ApiSet: undefined
 */
export function applyForceToEntity(entity, forceType, position, offX, offY, offZ, nComponent, bLocalForce, bLocalOffset, bScaleByMass, bPlayAudio, bScaleByTimeWarp) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ApplyForceToEntity(_entity, forceType, position.x, position.y, position.z, offX, offY, offZ, nComponent, bLocalForce, bLocalOffset, bScaleByMass, bPlayAudio, bScaleByTimeWarp);
}
/**
 * Apply a force to an entities center of mass.
 * Hash: 0x18FF00FC7EFF559E | ApiSet: undefined
 */
export function applyForceToEntityCenterOfMass(entity, forceType, position, nComponent, bLocalForce, bScaleByMass, bApplyToChildren) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ApplyForceToEntityCenterOfMass(_entity, forceType, position.x, position.y, position.z, nComponent, bLocalForce, bScaleByMass, bApplyToChildren);
}
/**
 * Hash: 0x5C48B75732C8456C | ApiSet: undefined
 */
export function attachEntityBoneToEntityBone(entity1, entity2, entityBone, entityBone2, p4, p5) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    AttachEntityBoneToEntityBone(_entity1, _entity2, entityBone, entityBone2, p4, p5);
}
/**
 * Attach an entity to the specified entity.
 * Hash: 0x6B9BBD38AB0796DF | ApiSet: undefined
 */
export function attachEntityToEntity(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, rotationOrder, syncRot) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    AttachEntityToEntity(_entity1, _entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, rotationOrder, syncRot);
}
/**
 * Hash: 0xFD1695C5D3B05439 | ApiSet: undefined
 */
export function attachEntityBoneToEntityBonePhysically(entity1, entity2, entityBone, entityBone2, p4, p5) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    AttachEntityBoneToEntityBonePhysically(_entity1, _entity2, entityBone, entityBone2, p4, p5);
}
/**
 * ```
 * breakForce is the amount of force required to break the bond.
 * p14 - is always 1 in scripts
 * p15 - is 1 or 0 in scripts - unknown what it does
 * p16 - controls collision between the two entities (FALSE disables collision).
 * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
 * p18 - is always 2 in scripts.
 * ```
 * Hash: 0xC3675780C92F90F9 | ApiSet: undefined
 */
export function attachEntityToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, teleport, p18) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    AttachEntityToEntityPhysically(_entity1, _entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, teleport, p18);
}
/**
 * ```
 * Only works with objects!
 * Network players do not see changes done with this.
 * ```
 * Hash: 0x92C47782FDA8B2A3 | ApiSet: undefined
 */
export function createModelSwap(position, radius, originalModel, newModel, bSurviveMapReload) {
    if (typeof originalModel === 'string')
        originalModel = this.getHashKey(originalModel);
    if (typeof newModel === 'string')
        newModel = this.getHashKey(newModel);
    CreateModelSwap(position.x, position.y, position.z, radius, originalModel, newModel, bSurviveMapReload);
}
/**
 * This native **could affect** the arguments of the `CEventNetworkEntityDamage` game event, by clearing the damaging entity before the event is fired.
 * Hash: 0xA72CD9CA74A5ECBA | ApiSet: undefined
 */
export function clearEntityLastDamageEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ClearEntityLastDamageEntity(_entity);
}
/**
 * Hash: 0x150E808B375A385A | ApiSet: undefined
 */
export function createForcedObject(position, p3, modelHash, p5) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    CreateForcedObject(position.x, position.y, position.z, p3, modelHash, p5);
}
/**
 * ```
 * p5 = sets as true in scripts
 * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
 * Network players do not see changes done with this.
 * ```
 * Hash: 0x8A97BCA30A0CE478 | ApiSet: undefined
 */
export function createModelHide(position, radius, model, p5) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    CreateModelHide(position.x, position.y, position.z, radius, model, p5);
}
/**
 * Hash: 0xDDE6DF5AE89981D2 | ApiSet: undefined
 */
export function doesEntityBelongToThisScript(entity, p2) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DoesEntityBelongToThisScript(_entity, p2);
}
/**
 * Delete the specified entity, and invalidate the passed handle (i.e., the in/out argument).
 * You might want to check if the entity exists before with [DOES_ENTITY_EXIST](#\_0x7239B21A38F536BA).
 * Hash: 0xAE3CBE5BF394C9C9 | ApiSet: undefined
 */
export function deleteEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    DeleteEntity(_entity);
}
/**
 * Hash: 0x3A52AE588830BF7F | ApiSet: undefined
 */
export function createModelHideExcludingScriptObjects(position, radius, model, p5) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    CreateModelHideExcludingScriptObjects(position.x, position.y, position.z, radius, model, p5);
}
/**
 * Hash: 0x961AC54BF0613F5D | ApiSet: undefined
 */
export function detachEntity(entity, dynamic, collision) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    DetachEntity(_entity, dynamic, collision);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x2158E81A6AF65EA9 | ApiSet: undefined
 */
export function doesEntityHaveAnimDirector(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DoesEntityHaveAnimDirector(_entity);
}
/**
 * Checks whether an entity exists in the game world.
 * Hash: 0x7239B21A38F536BA | ApiSet: undefined
 */
export function doesEntityExist(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DoesEntityExist(_entity);
}
/**
 * Hash: 0xDA95EA3317CC5064 | ApiSet: undefined
 */
export function doesEntityHavePhysics(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DoesEntityHavePhysics(_entity);
}
/**
 * ```
 * In the script "player_scene_t_bbfight.c4":
 * `"if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4\/\*16\*\/], v_9, &v_A, &v_B))"`
 * -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
 * -- &l_19F[v_4\/\*16\*\/] (p1) is used in other natives in the script as the "animation" param.
 * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
 * --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
 * `"if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"`
 * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
 * -alphazolam
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x07F1BE2BCCAA27A7 | ApiSet: undefined
 */
export function findAnimEventPhase(animDictionary, animName, p2) {
    return FindAnimEventPhase(animDictionary, animName, p2);
}
/**
 * Hash: 0x060D6E96F8B8E48D | ApiSet: undefined
 */
export function doesEntityHaveDrawable(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DoesEntityHaveDrawable(_entity);
}
/**
 * ```
 * ENABLE_*
 * ```
 * Hash: 0x6CE177D014502E8A | ApiSet: undefined
 */
export function enableEntityUnk(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    EnableEntityUnk(_entity);
}
/**
 * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using [`SET_ENTITY_COORDS`](#\_0x06843DA7060A026B).
 * Hash: 0x428CA6DBD1094446 | ApiSet: undefined
 */
export function freezeEntityPosition(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    FreezeEntityPosition(_entity, toggle);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x764EB96874EFFDC1 | ApiSet: undefined
 */
export function doesEntityHaveSkeletonData(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DoesEntityHaveSkeletonData(_entity);
}
/**
 * ```
 * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
 * ```
 * Hash: 0x40FDEDB72F8293B2 | ApiSet: undefined
 */
export function forceEntityAiAndAnimationUpdate(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ForceEntityAiAndAnimationUpdate(_entity);
}
/**
 * Hash: 0xE465D4AB7CA6AE72 | ApiSet: undefined
 */
export function getCollisionNormalOfLastHitForEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetCollisionNormalOfLastHitForEntity(_entity));
}
/**
 * ```
 * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
 * Example:
 * 0.000000 - mark the starting of animation.
 * 0.500000 - mark the midpoint of the animation.
 * 1.000000 - mark the end of animation.
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x346D81500D088F42 | ApiSet: undefined
 */
export function getEntityAnimCurrentTime(entity, animDict, animName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityAnimCurrentTime(_entity, animDict, animName);
}
/**
 * ```
 * Returns a float value representing animation's total playtime in milliseconds.
 * Example:
 * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
 * return 20800.000000
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x50BD2730B191E360 | ApiSet: undefined
 */
export function getEntityAnimTotalTime(entity, animDict, animName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityAnimTotalTime(_entity, animDict, animName);
}
/**
 * Hash: 0x5A47B3B5E63E94C6 | ApiSet: undefined
 */
export function getEntityAlpha(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityAlpha(_entity);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0xFEDDF04D62B8D790 | ApiSet: undefined
 */
export function getAnimDuration(animDict, animName) {
    return GetAnimDuration(animDict, animName);
}
/**
 * ```
 * Gets the world rotation of the specified bone of the specified entity.
 * This native is used in casinoroulette.c but I don't know yet what is the difference with _GET_ENTITY_BONE_ROTATION
 * ```
 * Hash: 0x46F8696933A63C9B | ApiSet: undefined
 */
export function getEntityBonePosition2(entity, boneIndex) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityBonePosition2(_entity, boneIndex));
}
/**
 * Hash: 0xB328DCC3A3AA401B | ApiSet: undefined
 */
export function getEntityBoneCount(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityBoneCount(_entity);
}
/**
 * Hash: 0x48C2BED9180FE123 | ApiSet: undefined
 */
export function getEntityAttachedTo(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityAttachedTo(_entity);
}
/**
 * ```
 * Gets the world rotation of the specified bone of the specified entity.
 * ```
 * Hash: 0xCE6294A232D03786 | ApiSet: undefined
 */
export function getEntityBoneRotation(entity, boneIndex) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityBoneRotation(_entity, boneIndex));
}
/**
 * Gets the local rotation of the specified bone of the specified entity.
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xBD8D32550E5CEBFE | ApiSet: undefined
 */
export function getEntityBoneRotationLocal(entity, boneIndex) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityBoneRotationLocal(_entity, boneIndex));
}
/**
 * Hash: 0xD95CC5D2AB15A09F | ApiSet: undefined
 */
export function getEntityCanBeDamaged(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityCanBeDamaged(_entity);
}
/**
 * ```
 * Returns the index of the bone. If the bone was not found, -1 will be returned.
 * list:
 * pastebin.com/D7JMnX1g
 * BoneNames:
 * chassis,
 * windscreen,
 * seat_pside_r,
 * seat_dside_r,
 * bodyshell,
 * suspension_lm,
 * suspension_lr,
 * platelight,
 * attach_female,
 * attach_male,
 * bonnet,
 * boot,
 * chassis_dummy,	//Center of the dummy
 * chassis_Control,	//Not found yet
 * door_dside_f,	//Door left, front
 * door_dside_r,	//Door left, back
 * door_pside_f,	//Door right, front
 * door_pside_r,	//Door right, back
 * Gun_GripR,
 * windscreen_f,
 * platelight,	//Position where the light above the numberplate is located
 * VFX_Emitter,
 * window_lf,	//Window left, front
 * window_lr,	//Window left, back
 * window_rf,	//Window right, front
 * window_rr,	//Window right, back
 * engine,	//Position of the engine
 * gun_ammo,
 * ROPE_ATTATCH,	//Not misspelled. In script "finale_heist2b.c4".
 * wheel_lf,	//Wheel left, front
 * wheel_lr,	//Wheel left, back
 * wheel_rf,	//Wheel right, front
 * wheel_rr,	//Wheel right, back
 * exhaust,	//Exhaust. shows only the position of the stock-exhaust
 * overheat,	//A position on the engine(not exactly sure, how to name it)
 * misc_e,	//Not a car-bone.
 * seat_dside_f,	//Driver-seat
 * seat_pside_f,	//Seat next to driver
 * Gun_Nuzzle,
 * seat_r
 * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
 * ```
 * Hash: 0xFB71170B7E76ACBA | ApiSet: undefined
 */
export function getEntityBoneIndexByName(entity, boneName) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityBoneIndexByName(_entity, boneName);
}
/**
 * ```
 * Gets the X-component of the entity's forward vector.
 * ```
 * Hash: 0x8BB4EF4214E0E6D5 | ApiSet: undefined
 */
export function getEntityForwardX(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityForwardX(_entity);
}
/**
 * ```
 * Gets the entity's forward vector.
 * ```
 * Hash: 0x0A794A5A57F8DF91 | ApiSet: undefined
 */
export function getEntityForwardVector(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityForwardVector(_entity));
}
/**
 * Hash: 0xCCF1E97BEFDAE480 | ApiSet: undefined
 */
export function getEntityCollisionDisabled(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityCollisionDisabled(_entity);
}
/**
 * Gets the heading of the entity physics in degrees, which tends to be more accurate than just [`GET_ENTITY_HEADING`](#\_0xE83D4F9BA2A38914). This can be clearly seen while, for example, ragdolling a ped/player.
 * Hash: 0x846BF6291198A71E | ApiSet: undefined
 */
export function getEntityHeadingFromEulers(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityHeadingFromEulers(_entity);
}
/**
 * ```
 * Gets the Y-component of the entity's forward vector.
 * ```
 * Hash: 0x866A4A5FAE349510 | ApiSet: undefined
 */
export function getEntityForwardY(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityForwardY(_entity);
}
/**
 * Gets the current coordinates (world position) for a specified entity.
 * Hash: 0x3FEF770D40960D5A | ApiSet: client
 */
export function getEntityCoords(entity, alive) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityCoords(_entity, alive));
}
/**
 * ```
 * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
 * ```
 * Hash: 0xE83D4F9BA2A38914 | ApiSet: undefined
 */
export function getEntityHeading(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityHeading(_entity);
}
/**
 * ```
 * Returns an integer value of entity's current health.
 * Example of range for ped:
 * - Player [0 to 200]
 * - Ped [100 to 200]
 * - Vehicle [0 to 1000]
 * - Object [0 to 1000]
 * Health is actually a float value but this native casts it to int.
 * In order to get the actual value, do:
 * float health = *(float *)(entityAddress + 0x280);
 * ```
 * Hash: 0xEEF059FAD016D209 | ApiSet: undefined
 */
export function getEntityHealth(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityHealth(_entity);
}
/**
 * Hash: 0x5A504562485944DD | ApiSet: undefined
 */
export function getEntityHeight(entity, position, atTop, inWorldCoords) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityHeight(_entity, position.x, position.y, position.z, atTop, inWorldCoords);
}
/**
 * ```
 * Return height (z-dimension) above ground.
 * Example: The pilot in a titan plane is 1.844176 above ground.
 * How can i convert it to meters?
 * Everything seems to be in meters, probably this too.
 * ```
 * Hash: 0x1DD55701034110E5 | ApiSet: undefined
 */
export function getEntityHeightAboveGround(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityHeightAboveGround(_entity);
}
/**
 * Hash: 0xECB2FC7235A7D137 | ApiSet: undefined
 */
export function getEntityMatrix(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    const result = GetEntityMatrix(_entity);
    return [result[0], new Vector3(result[1], result[2], result[3]), new Vector3(result[2], result[3], result[4]), new Vector3(result[3], result[4], result[5]), new Vector3(result[4], result[5], result[6])];
}
/**
 * ```
 * Returns the LOD distance of an entity.
 * ```
 * Hash: 0x4159C2762B5791D6 | ApiSet: undefined
 */
export function getEntityLodDist(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityLodDist(_entity);
}
/**
 * ```
 * Return an integer value of entity's maximum health.
 * Example:
 * - Player = 200
 * ```
 * Hash: 0x15D757606D170C3C | ApiSet: undefined
 */
export function getEntityMaxHealth(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityMaxHealth(_entity);
}
/**
 * Hash: 0xD45DC2893621E1FE | ApiSet: undefined
 */
export function getEntityPitch(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityPitch(_entity);
}
/**
 * Returns the model hash from an entity.
 * Hash: 0x9F47B058362C84B5 | ApiSet: undefined
 */
export function getEntityModel(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityModel(_entity);
}
/**
 * ```
 * GET_ENTITY_*
 * Seems to return the handle of the entity's portable pickup.
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x1F922734E259BD26 | ApiSet: undefined
 */
export function getEntityPickup(entity, modelHash) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetEntityPickup(_entity, modelHash);
}
/**
 * ```
 * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
 * (Sideways Roll) such as a vehicle tipped on its side
 * ```
 * Hash: 0x831E0242595560DF | ApiSet: undefined
 */
export function getEntityRoll(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityRoll(_entity);
}
/**
 * A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
 * Hash: 0xF6F5161F4534EDFF | ApiSet: undefined
 */
export function getEntityPopulationType(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityPopulationType(_entity);
}
/**
 * ```
 * w is the correct parameter name!
 * ```
 * Hash: 0x7B3703D2D32DFA18 | ApiSet: undefined
 */
export function getEntityQuaternion(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityQuaternion(_entity);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xBE8CD9BE829BBEBF | ApiSet: undefined
 */
export function getEntityProofs(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityProofs(_entity);
}
/**
 * **NOTE**: What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
 * ```cpp
 * enum eRotationOrder {
 * // Rotate around the z-axis, then the y-axis and finally the x-axis.
 * ROT_ZYX = 0,
 * // Rotate around the y-axis, then the z-axis and finally the x-axis.
 * ROT_YZX = 1,
 * // Rotate around the z-axis, then the x-axis and finally the y-axis.
 * ROT_ZXY = 2,
 * // Rotate around the x-axis, then the z-axis and finally the y-axis.
 * ROT_XZY = 3,
 * // Rotate around the y-axis, then the x-axis and finally the z-axis.
 * ROT_YXZ = 4,
 * // Rotate around the x-axis, then the y-axis and finally the z-axis.
 * ROT_XYZ = 5,
 * }
 * ```
 * Hash: 0xAFBD61CC738D9EB9 | ApiSet: undefined
 */
export function getEntityRotation(entity, rotationOrder) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityRotation(_entity, rotationOrder));
}
/**
 * ```
 * All ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.
 * ```
 * Hash: 0xA6E9C38DB51D7748 | ApiSet: undefined
 */
export function getEntityScript(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityScript(_entity);
}
/**
 * Get the speed of a entity.
 * Hash: 0xD5037BA82E12416F | ApiSet: undefined
 */
export function getEntitySpeed(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntitySpeed(_entity);
}
/**
 * ```
 * Get how much of the entity is submerged.  1.0f is whole entity.
 * ```
 * Hash: 0xE81AFC1BC4CC41CE | ApiSet: undefined
 */
export function getEntitySubmergedLevel(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntitySubmergedLevel(_entity);
}
/**
 * Hash: 0x213B91045D09B983 | ApiSet: undefined
 */
export function getEntityRotationVelocity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityRotationVelocity(_entity));
}
/**
 * ```
 * Returns:
 * 0 = no entity
 * 1 = ped
 * 2 = vehicle
 * 3 = object
 * ```
 * Hash: 0x8ACD366038D14505 | ApiSet: undefined
 */
export function getEntityType(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityType(_entity);
}
/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * Hash: 0xD7E3B9735C0F89D6 | ApiSet: undefined
 */
export function getObjectIndexFromEntityIndex(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetObjectIndexFromEntityIndex(_entity);
}
/**
 * Hash: 0x95EED5A694951F9F | ApiSet: undefined
 */
export function getEntityUprightValue(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetEntityUprightValue(_entity);
}
/**
 * ```
 * Converts world coords (posX - Z) to coords relative to the entity
 * Example:
 * posX = 50
 * posY = 1000
 * posZ = 60
 * Entity's coords are: x=30, y=1000, z=60.
 * All three returned coords will then be in range of [-20,20] depending on rotation of the entity.
 * ```
 * Hash: 0x2274BC1C4885E333 | ApiSet: undefined
 */
export function getOffsetFromEntityGivenWorldCoords(entity, posX, posY, posZ) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetOffsetFromEntityGivenWorldCoords(_entity, posX, posY, posZ));
}
/**
 * Hash: 0x4DC9A62F844D9337 | ApiSet: undefined
 */
export function getNearestPlayerToEntityOnTeam(entity, team) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetNearestPlayerToEntityOnTeam(_entity, team);
}
/**
 * Hash: 0x5C3D0A935F535C4C | ApiSet: undefined
 */
export function getLastMaterialHitByEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetLastMaterialHitByEntity(_entity);
}
/**
 * ```
 * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
 * ```
 * Hash: 0x9A8D700A51CB7B0D | ApiSet: undefined
 */
export function getEntitySpeedVector(entity, relative) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntitySpeedVector(_entity, relative));
}
/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * Hash: 0x4B53F92932ADFAC0 | ApiSet: undefined
 */
export function getVehicleIndexFromEntityIndex(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetVehicleIndexFromEntityIndex(_entity);
}
/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * Hash: 0x04A2A40C73395041 | ApiSet: undefined
 */
export function getPedIndexFromEntityIndex(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetPedIndexFromEntityIndex(_entity);
}
/**
 * Hash: 0x4805D2B1D8CF94A9 | ApiSet: undefined
 */
export function getEntityVelocity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetEntityVelocity(_entity));
}
/**
 * ```
 * Returns the coordinates of an entity-bone.
 * ```
 * Hash: 0x44A8FCB8ED227738 | ApiSet: undefined
 */
export function getWorldPositionOfEntityBone(entity, boneIndex) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetWorldPositionOfEntityBone(_entity, boneIndex));
}
/**
 * Hash: 0x95EB9964FF5C5C65 | ApiSet: undefined
 */
export function hasEntityBeenDamagedByAnyObject(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return HasEntityBeenDamagedByAnyObject(_entity);
}
/**
 * ```
 * Offset values are relative to the entity.
 * x = left/right
 * y = forward/backward
 * z = up/down
 * ```
 * Hash: 0x1899F328B0E12848 | ApiSet: undefined
 */
export function getOffsetFromEntityInWorldCoords(entity, offsetX, offsetY, offsetZ) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetOffsetFromEntityInWorldCoords(_entity, offsetX, offsetY, offsetZ));
}
/**
 * Hash: 0xDFD5033FDBA0A9C8 | ApiSet: undefined
 */
export function hasEntityBeenDamagedByAnyVehicle(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return HasEntityBeenDamagedByAnyVehicle(_entity);
}
/**
 * ```
 * `if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))`
 * ```
 * Hash: 0xEAF4CD9EA3E7E922 | ApiSet: undefined
 */
export function hasAnimEventFired(entity, actionHash) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof actionHash === 'string')
        actionHash = this.getHashKey(actionHash);
    return HasAnimEventFired(_entity, actionHash);
}
/**
 * Hash: 0x7196842CB375CDB3 | ApiSet: undefined
 */
export function getNearestPlayerToEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetNearestPlayerToEntity(_entity);
}
/**
 * ```
 * P3 is always 3 as far as i cant tell
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x20B711662962B472 | ApiSet: undefined
 */
export function hasEntityAnimFinished(entity, animDict, animName, p3) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return HasEntityAnimFinished(_entity, animDict, animName, p3);
}
/**
 * Hash: 0xE9676F61BC0B3321 | ApiSet: undefined
 */
export function hasCollisionLoadedAroundEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return HasCollisionLoadedAroundEntity(_entity);
}
/**
 * Hash: 0xC86D67D52A707CF8 | ApiSet: undefined
 */
export function hasEntityBeenDamagedByEntity(entity, damager, bCheckDamagerVehicle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    const _damager = damager instanceof Entity ? damager.handle() : damager;
    return HasEntityBeenDamagedByEntity(_entity, _damager, bCheckDamagerVehicle);
}
/**
 * Hash: 0x605F5A140F202491 | ApiSet: undefined
 */
export function hasEntityBeenDamagedByAnyPed(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return HasEntityBeenDamagedByAnyPed(_entity);
}
/**
 * Checks if entity1 has a clear line of sight to entity2. So a simple raycast which if it collides with any of the given colliderTypes returns false.
 * The direction of the check matters with for example bushes, so checking from inside to outside a bush with traceType 256 returns true, but the other way around returns false.
 * Hash: 0xFCDFF7B72D23A1AC | ApiSet: undefined
 */
export function hasEntityClearLosToEntity(entity1, entity2, flags) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    return HasEntityClearLosToEntity(_entity1, _entity2, flags);
}
/**
 * Hash: 0x0A7B270912999B3C | ApiSet: undefined
 */
export function isEntityAMissionEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAMissionEntity(_entity);
}
/**
 * ```
 * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
 * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
 * ```
 * Hash: 0x0267D00AF114F17A | ApiSet: undefined
 */
export function hasEntityClearLosToEntityInFront(entity1, entity2) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    return HasEntityClearLosToEntityInFront(_entity1, _entity2);
}
/**
 * Hash: 0x8D68C8FD0FACA94E | ApiSet: undefined
 */
export function isEntityAnObject(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAnObject(_entity);
}
/**
 * ```
 * Called on tick.
 * Tested with vehicles, returns true whenever the vehicle is touching any entity.
 * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
 * ```
 * Hash: 0x8BAD02F0368D9E14 | ApiSet: undefined
 */
export function hasEntityCollidedWithAnything(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return HasEntityCollidedWithAnything(_entity);
}
/**
 * Hash: 0x524AC5ECEA15343E | ApiSet: undefined
 */
export function isEntityAPed(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAPed(_entity);
}
/**
 * Hash: 0xB346476EF1A64897 | ApiSet: undefined
 */
export function isEntityAttached(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAttached(_entity);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x394BDE2A7BBA031E | ApiSet: undefined
 */
export function hasEntityClearLosToEntity2(entity1, entity2, traceType) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    return HasEntityClearLosToEntity2(_entity1, _entity2, traceType);
}
/**
 * Hash: 0x6AC7003FA6E5575E | ApiSet: undefined
 */
export function isEntityAVehicle(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAVehicle(_entity);
}
/**
 * Checks if entity is within the specified axis aligned box around the target entity.
 * ```cpp
 * enum eTransportMode {
 * SCRIPT_TM_ANY = 0,
 * SCRIPT_TM_ON_FOOT = 1,
 * SCRIPT_TM_IN_VEHICLE = 2
 * };
 * ```
 * Hash: 0x751B70C3D034E187 | ApiSet: undefined
 */
export function isEntityAtEntity(entity, target, xSize, ySize, zSize, highlightArea, do3dCheck, transportMode) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    const _target = target instanceof Entity ? target.handle() : target;
    return IsEntityAtEntity(_entity, _target, xSize, ySize, zSize, highlightArea, do3dCheck, transportMode);
}
/**
 * Hash: 0x731EC8A916BD11A1 | ApiSet: undefined
 */
export function isAnEntity(handle) {
    return IsAnEntity(handle);
}
/**
 * Hash: 0xB1632E9A5F988D11 | ApiSet: undefined
 */
export function isEntityAttachedToAnyPed(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAttachedToAnyPed(_entity);
}
/**
 * ```
 * NativeDB Added Parameter 2: BOOL p1
 * ```
 * Hash: 0x5F9532F3B5CC2551 | ApiSet: undefined
 */
export function isEntityDead(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityDead(_entity);
}
/**
 * Hash: 0xCF511840CEEDE0CC | ApiSet: undefined
 */
export function isEntityAttachedToAnyObject(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAttachedToAnyObject(_entity);
}
/**
 * Checks if the entity is within the given square of size xSize, ySize, zSize centered around the given coordinates.
 * The sizes given are the apothem (half of side) of the square, so a size of 5 would result in a square of 10x10, not 5x5.
 * For the highlightArea, if do3dCheck is true, the marker will be drawn at the bottom of the target area. So if the square is centered on the ground with a zSize larger than 0, the marker will appear under the ground.
 * The marker also doesn't scale, so it is always the same size (around half a meter).
 * So unfortunately the marker isn't that useful as it doesn't convey the correct information about the area (the marker doesn't reflect when the player is actually in the marker or not)
 * Hash: 0x20B60995556D004F | ApiSet: undefined
 */
export function isEntityAtCoord(entity, xPos, yPos, zPos, xSize, ySize, zSize, highlightArea, do3dCheck, transportMode) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAtCoord(_entity, xPos, yPos, zPos, xSize, ySize, zSize, highlightArea, do3dCheck, transportMode);
}
/**
 * Hash: 0xEFBE71898A993728 | ApiSet: undefined
 */
export function isEntityAttachedToEntity(from, to) {
    const _from = from instanceof Entity ? from.handle() : from;
    const _to = to instanceof Entity ? to.handle() : to;
    return IsEntityAttachedToEntity(_from, _to);
}
/**
 * p10 is some entity flag check, also used in [`IS_ENTITY_AT_ENTITY`](#\_0x751B70C3D034E187), [`IS_ENTITY_IN_AREA`](#\_0x54736AA40E271165) and [`IS_ENTITY_AT_COORD`](#\_0x20B60995556D004F).
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * Hash: 0x51210CED3DA1C78A | ApiSet: undefined
 */
export function isEntityInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug, includez, p10) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityInAngledArea(_entity, x1, y1, z1, x2, y2, z2, width, debug, includez, p10);
}
/**
 * Hash: 0x26AA915AD89BFB4B | ApiSet: undefined
 */
export function isEntityAttachedToAnyVehicle(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAttachedToAnyVehicle(_entity);
}
/**
 * Hash: 0x886E37EC497200B6 | ApiSet: undefined
 */
export function isEntityInAir(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityInAir(_entity);
}
/**
 * Hash: 0xB6463CF6AF527071 | ApiSet: undefined
 */
export function isEntityInZone(entity, zone) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityInZone(_entity, zone);
}
/**
 * Hash: 0xCFB0A0D8EDD145A3 | ApiSet: undefined
 */
export function isEntityInWater(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityInWater(_entity);
}
/**
 * Hash: 0x54736AA40E271165 | ApiSet: undefined
 */
export function isEntityInArea(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityInArea(_entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);
}
/**
 * Determines whether the screen position of the specified entity is within the 2D bounds of the screen.
 * This native will not check if the entity is not visible due to being occluded (for example, behind a wall). To check if a entity is on screen and is not occluded, use [IS_ENTITY_OCCLUDED](#\_0xE31C2C72B8692B64).
 * Hash: 0xE659E47AF827484B | ApiSet: undefined
 */
export function isEntityOnScreen(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityOnScreen(_entity);
}
/**
 * Hash: 0xE31C2C72B8692B64 | ApiSet: undefined
 */
export function isEntityOccluded(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityOccluded(_entity);
}
/**
 * Hash: 0x17FFC1B2BA35A494 | ApiSet: undefined
 */
export function isEntityTouchingEntity(entity, targetEntity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
    return IsEntityTouchingEntity(_entity, _targetEntity);
}
/**
 * ```
 * `A static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "AI::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.`
 * ^ Attach a phCollider to the ped.
 * ```
 * Hash: 0x1218E6886D3D8327 | ApiSet: undefined
 */
export function isEntityStatic(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityStatic(_entity);
}
/**
 * Hash: 0x0F42323798A58C8C | ApiSet: undefined
 */
export function isEntityTouchingModel(entity, modelHash) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return IsEntityTouchingModel(_entity, modelHash);
}
/**
 * See also [`IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM`](#\_0x6EC47A344923E1ED)
 * ```
 * `Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)`
 * p4 is always 3 in the scripts.
 * taskFlag:
 * 2 - Check synchronized scene
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x1F0B79228E461EC9 | ApiSet: undefined
 */
export function isEntityPlayingAnim(entity, animDict, animName, taskFlag) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityPlayingAnim(_entity, animDict, animName, taskFlag);
}
/**
 * Hash: 0x5333F526F6AB19AA | ApiSet: undefined
 */
export function isEntityUpright(entity, angle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityUpright(_entity, angle);
}
/**
 * Hash: 0x1DBD58820FA61D71 | ApiSet: undefined
 */
export function isEntityUpsidedown(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityUpsidedown(_entity);
}
/**
 * Hash: 0xD796CB5BA8F20E32 | ApiSet: undefined
 */
export function isEntityVisibleToScript(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityVisibleToScript(_entity);
}
/**
 * Hash: 0xD05BFF0C0A12C68F | ApiSet: undefined
 */
export function isEntityWaitingForWorldCollision(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityWaitingForWorldCollision(_entity);
}
/**
 * Hash: 0x47D6F43D77935C75 | ApiSet: undefined
 */
export function isEntityVisible(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityVisible(_entity);
}
/**
 * Hash: 0x36F32DE87082343E | ApiSet: undefined
 */
export function _0x36F32DE87082343E(p0, p1) {
    Citizen.invokeNative('0x36F32DE87082343E', p0, p1);
}
/**
 * ```
 * SET_ENTITY_*
 * ```
 * Hash: 0x1A092BB0C3808B96 | ApiSet: undefined
 */
export function _0x1A092BB0C3808B96(entity, p1) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x1A092BB0C3808B96', _entity, p1);
}
/**
 * Hash: 0x352E2B5CF420BF3B | ApiSet: undefined
 */
export function _0x352E2B5CF420BF3B(p0, p1) {
    Citizen.invokeNative('0x352E2B5CF420BF3B', p0, p1);
}
/**
 * ```
 * Does nothing (essentially a nullsub).
 * ```
 * Hash: 0x490861B88F4FD846 | ApiSet: undefined
 */
export function _0x490861B88F4FD846(p0) {
    Citizen.invokeNative('0x490861B88F4FD846', p0);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x68B562E124CC0AEF | ApiSet: undefined
 */
export function _0x68B562E124CC0AEF(p0, p1) {
    Citizen.invokeNative('0x68B562E124CC0AEF', p0, p1);
}
/**
 * ```
 * Only called once in the scripts.
 * Related to weapon objects.
 * ```
 * Hash: 0x5C3B791D580E0BC2 | ApiSet: undefined
 */
export function _0x5C3B791D580E0BC2(entity, p1) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x5C3B791D580E0BC2', _entity, p1);
}
/**
 * Hash: 0xB17BC6453F6CF5AC | ApiSet: undefined
 */
export function _0xB17BC6453F6CF5AC(p0, p1) {
    Citizen.invokeNative('0xB17BC6453F6CF5AC', p0, p1);
}
/**
 * ```
 * Related to cutscene entities. Unsure about the use.
 * SET_ENTITY_*
 * ```
 * Hash: 0x78E8E3A640178255 | ApiSet: undefined
 */
export function _0x78E8E3A640178255(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x78E8E3A640178255', _entity);
}
/**
 * ```
 * SET_ENTITY_*
 * ```
 * Hash: 0xC34BC448DA29F5E9 | ApiSet: undefined
 */
export function _0xC34BC448DA29F5E9(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0xC34BC448DA29F5E9', _entity, toggle);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x7FB218262B810701 | ApiSet: undefined
 */
export function playEntityAnim(entity, animName, animDict, fBlendDelta, bLoop, bHoldLastFrame, bDriveToPose, fStartPhase, iFlags) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return PlayEntityAnim(_entity, animName, animDict, fBlendDelta, bLoop, bHoldLastFrame, bDriveToPose, fStartPhase, iFlags);
}
/**
 * SET_ENTITY_M\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xE66377CDDADA4810 | ApiSet: undefined
 */
export function _0xE66377CDDADA4810(entity, p1) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0xE66377CDDADA4810', _entity, p1);
}
/**
 * Hash: 0xCEA7C8E1B48FF68C | ApiSet: undefined
 */
export function _0xCEA7C8E1B48FF68C(p0, p1) {
    Citizen.invokeNative('0xCEA7C8E1B48FF68C', p0, p1);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0xC77720A12FE14A86 | ApiSet: undefined
 */
export function playSynchronizedEntityAnim(entity, syncedScene, animName, animDictName, fBlendInDelta, fBlendOutDelta, iFlags, fMoverBlendInDelta) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return PlaySynchronizedEntityAnim(_entity, syncedScene, animName, animDictName, fBlendInDelta, fBlendOutDelta, iFlags, fMoverBlendInDelta);
}
/**
 * ```
 * Called to update entity attachments.
 * ```
 * Hash: 0xF4080490ADC51C6F | ApiSet: undefined
 */
export function processEntityAttachments(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ProcessEntityAttachments(_entity);
}
/**
 * Hash: 0x61B6775E83C0DB6F | ApiSet: undefined
 */
export function removeForcedObject(p0, p1, p2, p3, p4) {
    RemoveForcedObject(p0, p1, p2, p3, p4);
}
/**
 * p5 requires more research. See also [`CREATE_MODEL_HIDE`](#\_0x8A97BCA30A0CE478) and [`CREATE_MODEL_SWAP`](#\_0x92C47782FDA8B2A3).
 * Network players do not see changes done with this.
 * Hash: 0xD9E3006FB3CBD765 | ApiSet: undefined
 */
export function removeModelHide(position, radius, model, p5) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    RemoveModelHide(position.x, position.y, position.z, radius, model, p5);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0xB9C54555ED30FBC4 | ApiSet: undefined
 */
export function playSynchronizedMapEntityAnim(position, radius, objectModelHash, sceneId, fBlendDelta, fBlendOutDelta, flags, fMoverBlendInDelta) {
    if (typeof objectModelHash === 'string')
        objectModelHash = this.getHashKey(objectModelHash);
    return PlaySynchronizedMapEntityAnim(position.x, position.y, position.z, radius, objectModelHash, sceneId, fBlendDelta, fBlendOutDelta, flags, fMoverBlendInDelta);
}
/**
 * Hash: 0xA80AE305E0A3044F | ApiSet: undefined
 */
export function setCanClimbOnEntity(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetCanClimbOnEntity(_entity, toggle);
}
/**
 * Hash: 0x033C0F9A64E229AE | ApiSet: undefined
 */
export function removeModelSwap(position, radius, oldModelHash, newModelHash, bLazy) {
    if (typeof oldModelHash === 'string')
        oldModelHash = this.getHashKey(oldModelHash);
    if (typeof newModelHash === 'string')
        newModelHash = this.getHashKey(newModelHash);
    RemoveModelSwap(position.x, position.y, position.z, radius, oldModelHash, newModelHash, bLazy);
}
/**
 * Hash: 0xE12ABE5E3A389A6C | ApiSet: undefined
 */
export function setCanAutoVaultOnEntity(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetCanAutoVaultOnEntity(_entity, toggle);
}
/**
 * Hash: 0x9B1E824FFBB7027A | ApiSet: undefined
 */
export function resetEntityAlpha(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ResetEntityAlpha(_entity);
}
/**
 * Hash: 0xACAD101E1FB66689 | ApiSet: undefined
 */
export function setEntityAlwaysPrerender(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityAlwaysPrerender(_entity, toggle);
}
/**
 * This native sets the entity's alpha level.
 * Hash: 0x44A0870B7E92D7C0 | ApiSet: undefined
 */
export function setEntityAlpha(entity, alphaLevel, skin) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityAlpha(_entity, alphaLevel, skin);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x8339643499D1222E | ApiSet: undefined
 */
export function setEntityAngularVelocity(entity, position) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityAngularVelocity(_entity, position.x, position.y, position.z);
}
/**
 * Hash: 0x28D1A16553C51776 | ApiSet: undefined
 */
export function setEntityAnimSpeed(entity, animDictionary, animName, speedMultiplier) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityAnimSpeed(_entity, animDictionary, animName, speedMultiplier);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x4487C259F0F70977 | ApiSet: undefined
 */
export function setEntityAnimCurrentTime(entity, animDictionary, animName, time) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityAnimCurrentTime(_entity, animDictionary, animName, time);
}
/**
 * ```
 * Marks the specified entity (ped, vehicle or object) as no longer needed.
 * Entities marked as no longer needed, will be deleted as the engine sees fit.
 * ```
 * Hash: 0xB736A491E64A32CF | ApiSet: undefined
 */
export function setEntityAsNoLongerNeeded(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityAsNoLongerNeeded(_entity);
}
/**
 * Hash: 0x1760FFA8AB074D66 | ApiSet: undefined
 */
export function setEntityCanBeDamaged(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCanBeDamaged(_entity, toggle);
}
/**
 * Assigns an existing entity to be owned by the current script. If the entity was not owned by a script yet, this also means the entity will remain persistent until released.
 * Note that this is not needed right after creating an entity as a script-created entity will automatically be assigned.
 * Hash: 0xAD738C3085FE7E11 | ApiSet: undefined
 */
export function setEntityAsMissionEntity(entity, scriptHostObject, bGrabFromOtherScript) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityAsMissionEntity(_entity, scriptHostObject, bGrabFromOtherScript);
}
/**
 * ```
 * Sets whether the entity can be targeted without being in line-of-sight.
 * ```
 * Hash: 0xD3997889736FD899 | ApiSet: undefined
 */
export function setEntityCanBeTargetedWithoutLos(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCanBeTargetedWithoutLos(_entity, toggle);
}
/**
 * Hash: 0xE22D8FDE858B8119 | ApiSet: undefined
 */
export function setEntityCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCanBeDamagedByRelationshipGroup(_entity, bCanBeDamaged, relGroup);
}
/**
 * Hash: 0x1A9205C1B9EE827F | ApiSet: undefined
 */
export function setEntityCollision(entity, toggle, keepPhysics) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCollision(_entity, toggle, keepPhysics);
}
/**
 * Teleports an entity to specified coordinates directly, with options to maintain certain behaviors post-teleportation.
 * **Note**:
 * *   This native allows precise placement of entities without the usual adjustments for collision or interaction with the environment that may occur with other teleportation natives.
 * *   The `keepTasks` and `keepIK` parameters are specifically useful for maintaining the current state of a ped, ensuring actions or animations are not abruptly stopped due to the teleportation.
 * *   Setting `doWarp` to `false` is useful when simulating continuous movement or when the entity should interact with its immediate surroundings upon arrival.
 * Hash: 0x239A3351AC1DA385 | ApiSet: undefined
 */
export function setEntityCoordsNoOffset(entity, position, keepTasks, keepIK, doWarp) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCoordsNoOffset(_entity, position.x, position.y, position.z, keepTasks, keepIK, doWarp);
}
/**
 * Hash: 0x9EBC85ED0FFFE51C | ApiSet: undefined
 */
export function setEntityCompletelyDisableCollision(entity, toggle, keepPhysics) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCompletelyDisableCollision(_entity, toggle, keepPhysics);
}
/**
 * Hash: 0x1718DE8E3F2823CA | ApiSet: undefined
 */
export function setEntityDynamic(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityDynamic(_entity, toggle);
}
/**
 * Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.
 * Hash: 0x06843DA7060A026B | ApiSet: undefined
 */
export function setEntityCoords(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCoords(_entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea);
}
/**
 * ```
 * True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
 * ```
 * Hash: 0x3910051CCECDB00C | ApiSet: undefined
 */
export function setEntityCleanupByEngine(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCleanupByEngine(_entity, toggle);
}
/**
 * Hash: 0x4A4722448F18EEF5 | ApiSet: undefined
 */
export function setEntityHasGravity(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityHasGravity(_entity, toggle);
}
/**
 * Hash: 0xEA02E132F5C68722 | ApiSet: undefined
 */
export function setEntityIsTargetPriority(entity, p1, p2) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityIsTargetPriority(_entity, p1, p2);
}
/**
 * ```
 * SET_ENTITY_*
 * ```
 * Hash: 0x2C2E3DC128F44309 | ApiSet: undefined
 */
export function setEntityDecalsDisabled(entity, p1) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityDecalsDisabled(_entity, p1);
}
/**
 * Hash: 0x621873ECE1178967 | ApiSet: undefined
 */
export function setEntityCoordsWithoutPlantsReset(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityCoordsWithoutPlantsReset(_entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea);
}
/**
 * When setting health for a player ped, the game will clamp the health value to ensure it does not exceed the maximum health. This maximum health can be retrieved by calling [`GET_PED_MAX_HEALTH`](#\_0x4700A416E8324EF3). It can also be modified by calling [`SET_PED_MAX_HEALTH`](#\_0xF5F6378C4F3419D3).
 * When setting the health for non-player peds or entities, the maximum health will be increased if the new health value exceeds the current maximum.
 * Default health for male peds is `200`, for female peds it is `175`.
 * ### Added parameters
 * *   **inflictor**: The handle for the entity that caused the damage.
 * Hash: 0x6B76DC1F3AE6E6A3 | ApiSet: undefined
 */
export function setEntityHealth(entity, health) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityHealth(_entity, health);
}
/**
 * Set the heading of an entity in degrees also known as "Yaw".
 * Hash: 0x8E2530AA8ADA980E | ApiSet: undefined
 */
export function setEntityHeading(entity, heading) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityHeading(_entity, heading);
}
/**
 * ```
 * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
 * If you use this for a ped and you want Ragdoll to stay enabled, then do:
 * *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
 * Use this if you want to get the invincibility status:
 * bool IsPedInvincible(Ped ped)
 * {
 * auto addr = getScriptHandleBaseAddress(ped);
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 * return false;
 * }
 * ```
 * Hash: 0x3882114BDE571AD4 | ApiSet: undefined
 */
export function setEntityInvincible(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityInvincible(_entity, toggle);
}
/**
 * Hash: 0x7CFBA6A80BDF3874 | ApiSet: undefined
 */
export function setEntityLights(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityLights(_entity, toggle);
}
/**
 * ```
 * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
 * ```
 * Hash: 0x5927F96A78577363 | ApiSet: undefined
 */
export function setEntityLodDist(entity, value) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityLodDist(_entity, value);
}
/**
 * Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
 * Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0x0DC7CABAB1E9B67E | ApiSet: undefined
 */
export function setEntityLoadCollisionFlag(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityLoadCollisionFlag(_entity, toggle);
}
/**
 * ```
 * `For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849`
 * ```
 * Hash: 0x166E7CF68597D8B5 | ApiSet: undefined
 */
export function setEntityMaxHealth(entity, value) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityMaxHealth(_entity, value);
}
/**
 * Hash: 0x295D82A8559F9150 | ApiSet: undefined
 */
export function setEntityMotionBlur(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityMotionBlur(_entity, toggle);
}
/**
 * Hash: 0x0E46A3FCBDE2A1B1 | ApiSet: undefined
 */
export function setEntityMaxSpeed(entity, speed) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityMaxSpeed(_entity, speed);
}
/**
 * ```
 * Enable / disable each type of damage.
 * --------------
 * `p7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);`
 * ```
 * Hash: 0xFAEE099C6F890BB8 | ApiSet: undefined
 */
export function setEntityProofs(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityProofs(_entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x0A27A7827347B3B1 | ApiSet: undefined
 */
export function setEntityNoCollisionWithNetworkedEntity(entity1, entity2) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    SetEntityNoCollisionWithNetworkedEntity(_entity1, _entity2);
}
/**
 * ```
 * Calling this function disables collision between two entities.
 * The importance of the order for entity1 and entity2 is unclear.
 * The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
 * ```
 * Hash: 0xA53ED5520C07654A | ApiSet: undefined
 */
export function setEntityNoCollisionEntity(entity1, entity2, thisFrameOnly) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    SetEntityNoCollisionEntity(_entity1, _entity2, thisFrameOnly);
}
/**
 * Hash: 0x79F020FF9EDC0748 | ApiSet: undefined
 */
export function setEntityOnlyDamagedByPlayer(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityOnlyDamagedByPlayer(_entity, toggle);
}
/**
 * Hash: 0x7022BD828FA0B082 | ApiSet: undefined
 */
export function setEntityOnlyDamagedByRelationshipGroup(entity, p1, relationshipHash) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof relationshipHash === 'string')
        relationshipHash = this.getHashKey(relationshipHash);
    SetEntityOnlyDamagedByRelationshipGroup(_entity, p1, relationshipHash);
}
/**
 * Hash: 0x0A50A1EEDAD01E65 | ApiSet: undefined
 */
export function setEntityRecordsCollisions(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityRecordsCollisions(_entity, toggle);
}
/**
 * ```
 * w is the correct parameter name!
 * ```
 * Hash: 0x77B21BE7AC540F07 | ApiSet: undefined
 */
export function setEntityQuaternion(entity, position, w) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityQuaternion(_entity, position.x, position.y, position.z, w);
}
/**
 * Hash: 0x694E00132F2823ED | ApiSet: undefined
 */
export function setEntityRequiresMoreExpensiveRiverCheck(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityRequiresMoreExpensiveRiverCheck(_entity, toggle);
}
/**
 * Changing traffic-lights will not change the behavior of NPCs.
 * Example: [here](https://www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340)
 * ```cpp
 * enum eTrafficlightOverrideMode
 * {
 * TLO_RED = 0,
 * TLO_AMBER = 1,
 * TLO_GREEN = 2,
 * TLO_NONE = 3
 * }
 * ```
 * Hash: 0x57C5DB656185EAC4 | ApiSet: undefined
 */
export function setEntityTrafficlightOverride(entity, state) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityTrafficlightOverride(_entity, state);
}
/**
 * Hash: 0x730F5F8D3F0F2050 | ApiSet: undefined
 */
export function setEntityRenderScorched(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityRenderScorched(_entity, toggle);
}
/**
 * Toggle the visibility of a given entity.
 * Hash: 0xEA1C610A04DB6BBB | ApiSet: undefined
 */
export function setEntityVisible(entity, toggle, unk) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityVisible(_entity, toggle, unk);
}
/**
 * ```
 * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
 * ```
 * Hash: 0x1C99BB7B6E96D16F | ApiSet: undefined
 */
export function setEntityVelocity(entity, position) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityVelocity(_entity, position.x, position.y, position.z);
}
/**
 * Sets the rotation of a specified entity in the game world.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x8524A8B0171D5E07 | ApiSet: undefined
 */
export function setEntityRotation(entity, pitch, roll, yaw, rotationOrder, bDeadCheck) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityRotation(_entity, pitch, roll, yaw, rotationOrder, bDeadCheck);
}
/**
 * Configures an entity to either allow or prevent it from being picked up by Cargobobs.
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xD7B80E7C3BEFC396 | ApiSet: undefined
 */
export function setPickUpByCargobobDisabled(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetPickUpByCargobobDisabled(_entity, toggle);
}
/**
 * ```
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * ```
 * Hash: 0x3AE22DEB5BA5A3E6 | ApiSet: undefined
 */
export function setObjectAsNoLongerNeeded(object) {
    const _object = object instanceof Entity ? object.handle() : object;
    SetObjectAsNoLongerNeeded(_object);
}
/**
 * ```
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * ```
 * Hash: 0x2595DD4236549CE3 | ApiSet: undefined
 */
export function setPedAsNoLongerNeeded(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAsNoLongerNeeded(_ped);
}
/**
 * ```
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * ```
 * Hash: 0x629BFA74418D6239 | ApiSet: undefined
 */
export function setVehicleAsNoLongerNeeded(vehicle) {
    const _vehicle = vehicle instanceof Vehicle ? vehicle.handle() : vehicle;
    SetVehicleAsNoLongerNeeded(_vehicle);
}
/**
 * ```
 * SET_*
 * Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
 * Ran after these 2 natives,
 * set_object_targettable(uParam0, 0);
 * set_entity_invincible(uParam0, 1);
 * ```
 * Hash: 0xDC6F8601FAF2E893 | ApiSet: undefined
 */
export function setWaitForCollisionsBeforeProbe(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetWaitForCollisionsBeforeProbe(_entity, toggle);
}
/**
 * ```
 * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
 * ```
 * Hash: 0x28004F88151E03E0 | ApiSet: undefined
 */
export function stopEntityAnim(entity, animation, animGroup, p3) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StopEntityAnim(_entity, animation, animGroup, p3);
}
/**
 * ```
 * p1 sync task id?
 * ```
 * Hash: 0x43D3807C077261E3 | ApiSet: undefined
 */
export function stopSynchronizedEntityAnim(entity, p1, p2) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StopSynchronizedEntityAnim(_entity, p1, p2);
}
/**
 * Hash: 0x11E79CAB7183B6F5 | ApiSet: undefined
 */
export function stopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5) {
    return StopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0xEE5D2A122E09EC42 | ApiSet: undefined
 */
export function wouldEntityBeOccluded(entityModelHash, position, p4) {
    if (typeof entityModelHash === 'string')
        entityModelHash = this.getHashKey(entityModelHash);
    return WouldEntityBeOccluded(entityModelHash, position.x, position.y, position.z, p4);
}
/**
 * ```
 * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS()
 * ```
 * Hash: 0xECC01B7C5763333C | ApiSet: undefined
 */
export function getDlcVehicleModel(dlcVehicleIndex) {
    return GetDlcVehicleModel(dlcVehicleIndex);
}
/**
 * Hash: 0x341DE7ED1D2A1BFD | ApiSet: undefined
 */
export function doesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    if (typeof restrictionTagHash === 'string')
        restrictionTagHash = this.getHashKey(restrictionTagHash);
    return DoesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId);
}
/**
 * Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x310836EE7129BA33 | ApiSet: undefined
 */
export function getDlcWeaponDataSp(dlcWeaponIndex) {
    return GetDlcWeaponDataSp(dlcWeaponIndex);
}
/**
 * Hash: 0xC098810437312FFF | ApiSet: undefined
 */
export function getDlcVehicleModLockHash(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return GetDlcVehicleModLockHash(hash);
}
/**
 * The Second item in the struct `*(Hash *)(outData + 1)` is the vehicle hash.
 * Hash: 0x33468EDC08E371F6 | ApiSet: undefined
 */
export function getDlcVehicleData(dlcVehicleIndex) {
    return GetDlcVehicleData(dlcVehicleIndex);
}
/**
 * Hash: 0x5549EE11FA22FCF2 | ApiSet: undefined
 */
export function getDlcVehicleFlags(dlcVehicleIndex) {
    return GetDlcVehicleFlags(dlcVehicleIndex);
}
/**
 * Hash: 0xE1CA84EBF72E691D | ApiSet: undefined
 */
export function getForcedProp(componentHash, forcedPropIndex) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetForcedProp(componentHash, forcedPropIndex);
}
/**
 * ```
 * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
 * struct DlcWeaponData
 * {
 * `int emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this`
 * int padding1;
 * int weaponHash;
 * int padding2;
 * int unk;
 * int padding3;
 * int weaponCost;
 * int padding4;
 * int ammoCost;
 * int padding5;
 * int ammoType;
 * int padding6;
 * int defaultClipSize;
 * int padding7;
 * char nameLabel[64];
 * char descLabel[64];
 * char desc2Label[64]; // usually "the" + name
 * char upperCaseNameLabel[64];
 * };
 * ```
 * Hash: 0x79923CD21BECE14E | ApiSet: undefined
 */
export function getDlcWeaponData(dlcWeaponIndex) {
    return GetDlcWeaponData(dlcWeaponIndex);
}
/**
 * ```
 * p0 seems to be the weapon index
 * p1 seems to be the weapon component index
 * struct DlcComponentData{
 * int attachBone;
 * int padding1;
 * int bActiveByDefault;
 * int padding2;
 * int unk;
 * int padding3;
 * int componentHash;
 * int padding4;
 * int unk2;
 * int padding5;
 * int componentCost;
 * int padding6;
 * char nameLabel[64];
 * char descLabel[64];
 * };
 * ```
 * Hash: 0x6CF598A2957C2BF8 | ApiSet: undefined
 */
export function getDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex) {
    return GetDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex);
}
/**
 * Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x31D5E073B6F93CDC | ApiSet: undefined
 */
export function getDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex) {
    return GetDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex);
}
/**
 * Hash: 0x6C93ED8C2F74859B | ApiSet: undefined
 */
export function getForcedComponent(componentHash, forcedComponentIndex) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetForcedComponent(componentHash, forcedComponentIndex);
}
/**
 * Hash: 0x0368B3A838070348 | ApiSet: undefined
 */
export function getHashNameForComponent(entity, componentId, drawableVariant, textureVariant) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetHashNameForComponent(_entity, componentId, drawableVariant, textureVariant);
}
/**
 * Returns the total number of DLC vehicles.
 * Hash: 0xA7A866D21CD2329B | ApiSet: undefined
 */
export function getNumDlcVehicles() {
    return GetNumDlcVehicles();
}
/**
 * Hash: 0x5D6160275CAEC8DD | ApiSet: undefined
 */
export function getHashNameForProp(entity, componentId, propIndex, propTextureIndex) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetHashNameForProp(_entity, componentId, propIndex, propTextureIndex);
}
/**
 * Returns the total number of DLC weapon components that are available in SP.
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xAD2A7A6DFF55841B | ApiSet: undefined
 */
export function getNumDlcWeaponComponentsSp(dlcWeaponIndex) {
    return GetNumDlcWeaponComponentsSp(dlcWeaponIndex);
}
/**
 * Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x4160B65AE085B5A9 | ApiSet: undefined
 */
export function getNumDlcWeaponsSp() {
    return GetNumDlcWeaponsSp();
}
/**
 * ```
 * Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
 * ```
 * Hash: 0xC6B9DB42C04DD8C3 | ApiSet: undefined
 */
export function getShopPedApparelForcedComponentCount(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetShopPedApparelForcedComponentCount(componentHash);
}
/**
 * ```
 * Returns the total number of DLC weapon components.
 * ```
 * Hash: 0x405425358A7D61FE | ApiSet: undefined
 */
export function getNumDlcWeaponComponents(dlcWeaponIndex) {
    return GetNumDlcWeaponComponents(dlcWeaponIndex);
}
/**
 * ```
 * Returns the total number of DLC weapons.
 * ```
 * Hash: 0xEE47635F352DA367 | ApiSet: undefined
 */
export function getNumDlcWeapons() {
    return GetNumDlcWeapons();
}
/**
 * ```
 * Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
 * ```
 * Hash: 0x017568A8182D98A6 | ApiSet: undefined
 */
export function getShopPedApparelForcedPropCount(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetShopPedApparelForcedPropCount(componentHash);
}
/**
 * Hash: 0xD40AAC51E8E4C663 | ApiSet: undefined
 */
export function getShopPedApparelVariantPropCount(propHash) {
    if (typeof propHash === 'string')
        propHash = this.getHashKey(propHash);
    return GetShopPedApparelVariantPropCount(propHash);
}
/**
 * Hash: 0x19F2A026EDF0013F | ApiSet: undefined
 */
export function getShopPedOutfitComponentVariant(outfit, slot) {
    if (typeof outfit === 'string')
        outfit = this.getHashKey(outfit);
    return GetShopPedOutfitComponentVariant(outfit, slot);
}
/**
 * ```
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * ```
 * Hash: 0x74C0E2A57EC66760 | ApiSet: undefined
 */
export function getShopPedComponent(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetShopPedComponent(componentHash);
}
/**
 * Hash: 0xC17AD0E5752BECDA | ApiSet: undefined
 */
export function getShopPedApparelVariantComponentCount(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetShopPedApparelVariantComponentCount(componentHash);
}
/**
 * ```
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * ```
 * Hash: 0x278F76C3B0A8F109 | ApiSet: undefined
 */
export function getNumTattooShopDlcItems(character) {
    return GetNumTattooShopDlcItems(character);
}
/**
 * Hash: 0xB7952076E444979D | ApiSet: undefined
 */
export function getShopPedOutfit(p0) {
    return GetShopPedOutfit(p0);
}
/**
 * Hash: 0x5D5CAFF661DDF6FC | ApiSet: undefined
 */
export function getShopPedProp(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetShopPedProp(componentHash);
}
/**
 * ```
 * struct Outfit_s
 * {
 * int mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece;
 * int maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture,
 * armourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture;
 * };
 * ```
 * Hash: 0x6D793F03A631FE56 | ApiSet: undefined
 */
export function getShopPedQueryOutfit(outfitIndex) {
    return GetShopPedQueryOutfit(outfitIndex);
}
/**
 * Hash: 0xA9F9C2E0FDE11CBB | ApiSet: undefined
 */
export function getShopPedOutfitPropVariant(outfitHash, variantIndex) {
    if (typeof outfitHash === 'string')
        outfitHash = this.getHashKey(outfitHash);
    return GetShopPedOutfitPropVariant(outfitHash, variantIndex);
}
/**
 * Hash: 0x073CA26B079F956E | ApiSet: undefined
 */
export function getShopPedOutfitLocate(p0) {
    return GetShopPedOutfitLocate(p0);
}
/**
 * Hash: 0xDE44A00999B2837D | ApiSet: undefined
 */
export function getShopPedQueryProp(componentId) {
    return GetShopPedQueryProp(componentId);
}
/**
 * Returns data that adheres to the tattoo shop item data that is used in shop_tattoo.meta
 * Character types:
 * ```cpp
 * enum eTattooFaction
 * {
 * TATTOO_SP_MICHAEL = 0,
 * TATTOO_SP_FRANKLIN = 1,
 * TATTOO_SP_TREVOR = 2,
 * TATTOO_MP_FM = 3,
 * TATTOO_MP_FM_F = 4
 * }
 * ```
 * Returned struct properties:
 * ```cpp
 * struct sTattooShopItemValues
 * {
 * // Lock hash, used with IS_CONTENT_ITEM_LOCKED
 * int LockHash;
 * // Unique ID of this slot. It can also be 0.
 * int Index;
 * // Collection hash of this tattoo
 * int CollectionHash;
 * // Preset hash of this tattoo
 * int PresetHash;
 * // Cost of this tattoo in shops.
 * int Cost;
 * // Secondary placement of this tattoo.
 * int eFacing;
 * // Location of this tattoo on the body (for example, for torso there would be chest upper, stomach, etc)
 * int UpdateGroup;
 * // This tattoo's name in the form of a text label.
 * const char* NameTextLabel;
 * };
 * ```
 * Hash: 0xFF56381874F82086 | ApiSet: undefined
 */
export function getTattooShopDlcItemData(characterType, decorationIndex) {
    return GetTattooShopDlcItemData(characterType, decorationIndex);
}
/**
 * Hash: 0x249E310B2D920699 | ApiSet: undefined
 */
export function getShopPedQueryComponent(componentId) {
    return GetShopPedQueryComponent(componentId);
}
/**
 * Hash: 0x6E11F282F11863B6 | ApiSet: undefined
 */
export function getVariantComponent(componentHash, variantComponentIndex) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetVariantComponent(componentHash, variantComponentIndex);
}
/**
 * Hash: 0x1E8C308FD312C036 | ApiSet: undefined
 */
export function initShopPedComponent() {
    return InitShopPedComponent();
}
/**
 * Hash: 0xD81B7F27BC773E66 | ApiSet: undefined
 */
export function getVariantProp(componentHash, variantPropIndex) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetVariantProp(componentHash, variantPropIndex);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x10144267DD22866C | ApiSet: undefined
 */
export function getTattooShopDlcItemIndex(character, collection, preset) {
    return GetTattooShopDlcItemIndex(character, collection, preset);
}
/**
 * Hash: 0x0564B9FF9631B82C | ApiSet: undefined
 */
export function isDlcVehicleMod(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return IsDlcVehicleMod(hash);
}
/**
 * Hash: 0x50F457823CE6EB5F | ApiSet: undefined
 */
export function setupShopPedApparelQuery(p0, p1, p2, p3) {
    return SetupShopPedApparelQuery(p0, p1, p2, p3);
}
/**
 * Returns some sort of index/offset for props.
 * Needs \_GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x6CEBE002E58DEE97 | ApiSet: undefined
 */
export function _0x6CEBE002E58DEE97(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return Citizen.invokeNative('0x6CEBE002E58DEE97', componentHash);
}
/**
 * Hash: 0xEB0A2B758F7B850F | ApiSet: undefined
 */
export function initShopPedProp() {
    return InitShopPedProp();
}
/**
 * Hash: 0xD4D7B033C3AA243C | ApiSet: undefined
 */
export function isContentItemLocked() {
    return IsContentItemLocked();
}
/**
 * ```
 * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
 * componentId is between 0 and 11 and corresponds to the usual component slots.
 * p1 could be the outfit number; unsure.
 * p2 is usually -1; unknown function.
 * p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
 * p4 is usually -1; unknown function.
 * componentId is -1 when p3 is true in decompiled scripts.
 * ```
 * Hash: 0x9BDF59818B1E38C1 | ApiSet: undefined
 */
export function setupShopPedApparelQueryTu(character, p1, p2, p3, p4, componentId) {
    return SetupShopPedApparelQueryTu(character, p1, p2, p3, p4, componentId);
}
/**
 * ```
 * From fm_deathmatch_creator and fm_race_creator:
 * `FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));`
 * `FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));`
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x6BEDF5769AC2DC07 | ApiSet: undefined
 */
export function loadContentChangeSetGroup(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    LoadContentChangeSetGroup(hash);
}
/**
 * Returns some sort of index/offset for components.
 * Needs \_GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x96E2929292A4DB77 | ApiSet: undefined
 */
export function _0x96E2929292A4DB77(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return Citizen.invokeNative('0x96E2929292A4DB77', componentHash);
}
/**
 * ```
 * characters
 * 0: Michael
 * 1: Franklin
 * 2: Trevor
 * 3: MPMale
 * 4: MPFemale
 * ```
 * Hash: 0xF3FBE2D50A6A8C28 | ApiSet: undefined
 */
export function setupShopPedOutfitQuery(character, p1) {
    return SetupShopPedOutfitQuery(character, p1);
}
/**
 * ```
 * From fm_deathmatch_creator and fm_race_creator:
 * `FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP"));`
 * `FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP"));`
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x3C1978285B036B25 | ApiSet: undefined
 */
export function unloadContentChangeSetGroup(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    UnloadContentChangeSetGroup(hash);
}
/**
 * ```
 * NativeDB Added Parameter 9: BOOL noDamage
 * ```
 * ```
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 * BOOL noDamage = false: damage || nodamage = true: no damage
 * ```
 * ```cpp
 * enum eExplosionTag
 * {
 * DONTCARE = -1,
 * GRENADE = 0,
 * GRENADELAUNCHER = 1,
 * STICKYBOMB = 2,
 * MOLOTOV = 3,
 * ROCKET = 4,
 * TANKSHELL = 5,
 * HI_OCTANE = 6,
 * CAR = 7,
 * PLANE = 8,
 * PETROL_PUMP = 9,
 * BIKE = 10,
 * DIR_STEAM = 11,
 * DIR_FLAME = 12,
 * DIR_WATER_HYDRANT = 13,
 * DIR_GAS_CANISTER = 14,
 * BOAT = 15,
 * SHIP_DESTROY = 16,
 * TRUCK = 17,
 * BULLET = 18,
 * SMOKE_GRENADE_LAUNCHER = 19,
 * SMOKE_GRENADE = 20,
 * BZGAS = 21,
 * FLARE = 22,
 * GAS_CANISTER = 23,
 * EXTINGUISHER = 24,
 * PROGRAMMABLEAR = 25,
 * TRAIN = 26,
 * BARREL = 27,
 * PROPANE = 28,
 * BLIMP = 29,
 * DIR_FLAME_EXPLODE = 30,
 * TANKER = 31,
 * PLANE_ROCKET = 32,
 * VEHICLE_BULLET = 33,
 * GAS_TANK = 34,
 * BIRD_CRAP = 35,
 * RAILGUN = 36,
 * BLIMP2 = 37,
 * FIREWORK = 38,
 * SNOWBALL = 39,
 * PROXMINE = 40,
 * VALKYRIE_CANNON = 41,
 * AIR_DEFENCE = 42,
 * PIPEBOMB = 43,
 * VEHICLEMINE = 44,
 * EXPLOSIVEAMMO = 45,
 * APCSHELL = 46,
 * BOMB_CLUSTER = 47,
 * BOMB_GAS = 48,
 * BOMB_INCENDIARY = 49,
 * BOMB_STANDARD = 50,
 * TORPEDO = 51,
 * TORPEDO_UNDERWATER = 52,
 * BOMBUSHKA_CANNON = 53,
 * BOMB_CLUSTER_SECONDARY = 54,
 * HUNTER_BARRAGE = 55,
 * HUNTER_CANNON = 56,
 * ROGUE_CANNON = 57,
 * MINE_UNDERWATER = 58,
 * ORBITAL_CANNON = 59,
 * BOMB_STANDARD_WIDE = 60,
 * EXPLOSIVEAMMO_SHOTGUN = 61,
 * OPPRESSOR2_CANNON = 62,
 * MORTAR_KINETIC = 63,
 * VEHICLEMINE_KINETIC = 64,
 * VEHICLEMINE_EMP = 65,
 * VEHICLEMINE_SPIKE = 66,
 * VEHICLEMINE_SLICK = 67,
 * VEHICLEMINE_TAR = 68,
 * SCRIPT_DRONE = 69,
 * RAYGUN = 70,
 * BURIEDMINE = 71,
 * SCRIPT_MISSILE = 72,
 * RCTANK_ROCKET = 73,
 * BOMB_WATER = 74,
 * BOMB_WATER_SECONDARY = 75,
 * MINE_CNCSPIKE = 76,
 * BZGAS_MK2 = 77,
 * FLASHGRENADE = 78,
 * STUNGRENADE = 79,
 * CNC_KINETICRAM = 80,
 * SCRIPT_MISSILE_LARGE = 81,
 * SUBMARINE_BIG = 82,
 * EMPLAUNCHER_EMP = 83
 * };
 * ```
 * Hash: 0xE3AD2BDBAEE269AC | ApiSet: undefined
 */
export function addExplosion(position, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
    AddExplosion(position.x, position.y, position.z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
}
/**
 * Hash: 0x36DD3FE58B5E5212 | ApiSet: undefined
 */
export function addExplosionWithUserVfx(position, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) {
    if (typeof explosionFx === 'string')
        explosionFx = this.getHashKey(explosionFx);
    AddExplosionWithUserVfx(position.x, position.y, position.z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
}
/**
 * ```
 * Returns TRUE if it found something. FALSE if not.
 * ```
 * Hash: 0x352A9F6BCF90081F | ApiSet: undefined
 */
export function getClosestFirePos(position) {
    const result = GetClosestFirePos(position.x, position.y, position.z);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * ```
 * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
 * ```
 * Hash: 0x14BA4BA137AF6CEC | ApiSet: undefined
 */
export function getEntityInsideExplosionArea(explosionType, x1, y1, z1, x2, y2, z2, radius) {
    return GetEntityInsideExplosionArea(explosionType, x1, y1, z1, x2, y2, z2, radius);
}
/**
 * Hash: 0x172AA1B624FA1013 | ApiSet: undefined
 */
export function addOwnedExplosion(ped, position, explosionType, damageScale, isAudible, isInvisible, cameraShake) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    AddOwnedExplosion(_ped, position.x, position.y, position.z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xB3CD51E3DB86F176 | ApiSet: undefined
 */
export function getEntityInsideExplosionSphere(explosionType, position, radius) {
    return GetEntityInsideExplosionSphere(explosionType, position.x, position.y, position.z, radius);
}
/**
 * Hash: 0x50CAD495A460B305 | ApiSet: undefined
 */
export function getNumberOfFiresInRange(position, radius) {
    return GetNumberOfFiresInRange(position.x, position.y, position.z, radius);
}
/**
 * Hash: 0x28D3FED7190D3A0B | ApiSet: undefined
 */
export function isEntityOnFire(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityOnFire(_entity);
}
/**
 * Hash: 0x6070104B699B2EF4 | ApiSet: undefined
 */
export function isExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2) {
    return IsExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2);
}
/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * Hash: 0xA079A6C51525DC4B | ApiSet: undefined
 */
export function isExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width) {
    return IsExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width);
}
/**
 * Hash: 0x2E2EBA0EE7CED0E0 | ApiSet: undefined
 */
export function isExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2) {
    return IsExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2);
}
/**
 * Hash: 0x7F0DD2EBBB651AFF | ApiSet: undefined
 */
export function stopEntityFire(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    StopEntityFire(_entity);
}
/**
 * Hash: 0x7FF548385680673F | ApiSet: undefined
 */
export function removeScriptFire(fireHandle) {
    RemoveScriptFire(fireHandle);
}
/**
 * SET_FIRE_\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x8F390AC4155099BA | ApiSet: undefined
 */
export function setFireSpreadRate(p0) {
    SetFireSpreadRate(p0);
}
/**
 * Hash: 0xAB0F816885B0E483 | ApiSet: undefined
 */
export function isExplosionInSphere(explosionType, position, radius) {
    return IsExplosionInSphere(explosionType, position.x, position.y, position.z, radius);
}
/**
 * ```
 * Starts a fire:
 * xyz: Location of fire
 * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
 * isGasFire: Whether or not the fire is powered by gasoline.
 * ```
 * Hash: 0x6B83617E04503888 | ApiSet: undefined
 */
export function startScriptFire(position, maxChildren, isGasFire) {
    return StartScriptFire(position.x, position.y, position.z, maxChildren, isGasFire);
}
/**
 * Hash: 0xF6A9D9708F6F23DF | ApiSet: undefined
 */
export function startEntityFire(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartEntityFire(_entity);
}
/**
 * Hash: 0x056A8A219B8E829F | ApiSet: undefined
 */
export function stopFireInRange(position, radius) {
    StopFireInRange(position.x, position.y, position.z, radius);
}
/**
 * ```
 * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
 * ```
 * Hash: 0x55E86AF2712B36A1 | ApiSet: undefined
 */
export function activateInteriorEntitySet(interior, entitySetName) {
    ActivateInteriorEntitySet(interior, entitySetName);
}
/**
 * Hash: 0xB365FC0C4E27FFA7 | ApiSet: undefined
 */
export function clearRoomForEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ClearRoomForEntity(_entity);
}
/**
 * ```
 * `Does something similar to INTERIOR::DISABLE_INTERIOR`
 * ```
 * Hash: 0xD9175F941610DB54 | ApiSet: undefined
 */
export function capInterior(interiorID, toggle) {
    CapInterior(interiorID, toggle);
}
/**
 * Hash: 0x23B59D8912F94246 | ApiSet: undefined
 */
export function clearRoomForGameViewport() {
    ClearRoomForGameViewport();
}
/**
 * Hash: 0x3F6167F351168730 | ApiSet: undefined
 */
export function addPickupToInteriorRoomByName(pickup, roomName) {
    AddPickupToInteriorRoomByName(pickup, roomName);
}
/**
 * ```
 * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
 * ```
 * Hash: 0xA97F257D0151A6AB | ApiSet: undefined
 */
export function enableExteriorCullModelThisFrame(mapObjectHash) {
    if (typeof mapObjectHash === 'string')
        mapObjectHash = this.getHashKey(mapObjectHash);
    EnableExteriorCullModelThisFrame(mapObjectHash);
}
/**
 * Immediately removes entity from an interior. Like sets entity to `limbo` room.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x85D5422B2039A70D | ApiSet: undefined
 */
export function clearInteriorForEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ClearInteriorForEntity(_entity);
}
/**
 * ```
 * Forces the particular room in an interior to load incase not teleporting into the portal.
 * ```
 * Hash: 0x52923C4710DD9907 | ApiSet: undefined
 */
export function forceRoomForEntity(entity, interior, roomHashKey) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof roomHashKey === 'string')
        roomHashKey = this.getHashKey(roomHashKey);
    ForceRoomForEntity(_entity, interior, roomHashKey);
}
/**
 * Hash: 0x420BD37289EEE162 | ApiSet: undefined
 */
export function deactivateInteriorEntitySet(interior, entitySetName) {
    DeactivateInteriorEntitySet(interior, entitySetName);
}
/**
 * ```
 * Example:
 * This removes the interior from the strip club and when trying to walk inside the player just falls:
 * `INTERIOR::DISABLE_INTERIOR(118018, true);`
 * ```
 * Hash: 0x6170941419D7D8EC | ApiSet: undefined
 */
export function disableInterior(interiorID, toggle) {
    DisableInterior(interiorID, toggle);
}
/**
 * ```
 * Returns the handle of the interior that the entity is in. Returns 0 if outside.
 * ```
 * Hash: 0x2107BA504071A6BB | ApiSet: undefined
 */
export function getInteriorFromEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetInteriorFromEntity(_entity);
}
/**
 * ```
 * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
 * ```
 * Hash: 0xF0F77ADB9F67E79D | ApiSet: undefined
 */
export function getInteriorAtCoordsWithTypehash(position, typeHash) {
    if (typeof typeHash === 'string')
        typeHash = this.getHashKey(typeHash);
    return GetInteriorAtCoordsWithTypehash(position.x, position.y, position.z, typeHash);
}
/**
 * Hash: 0x50C375537449F369 | ApiSet: undefined
 */
export function enableScriptCullModelThisFrame(mapObjectHash) {
    if (typeof mapObjectHash === 'string')
        mapObjectHash = this.getHashKey(mapObjectHash);
    EnableScriptCullModelThisFrame(mapObjectHash);
}
/**
 * ```
 * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
 * Example for VB.NET
 * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
 * ```
 * Hash: 0xB0F7F8663821D9C3 | ApiSet: undefined
 */
export function getInteriorAtCoords(position) {
    return GetInteriorAtCoords(position.x, position.y, position.z);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x252BDC06B73FA6EA | ApiSet: undefined
 */
export function getInteriorLocationAndNamehash(interior) {
    const result = GetInteriorLocationAndNamehash(interior);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xE7D267EC6CA966C3 | ApiSet: undefined
 */
export function getInteriorFromPrimaryView() {
    return GetInteriorFromPrimaryView();
}
/**
 * Hash: 0x920D853F3E17F1DA | ApiSet: undefined
 */
export function forceRoomForGameViewport(interiorID, roomHashKey) {
    if (typeof roomHashKey === 'string')
        roomHashKey = this.getHashKey(roomHashKey);
    ForceRoomForGameViewport(interiorID, roomHashKey);
}
/**
 * Hash: 0xEC4CF9FCB29A4424 | ApiSet: undefined
 */
export function getInteriorFromCollision(position) {
    return GetInteriorFromCollision(position.x, position.y, position.z);
}
/**
 * Hash: 0xA6575914D2A0B450 | ApiSet: undefined
 */
export function getRoomKeyForGameViewport() {
    return GetRoomKeyForGameViewport();
}
/**
 * Hash: 0x9E3B3E6D66F6E22F | ApiSet: undefined
 */
export function getOffsetFromInteriorInWorldCoords(interior, position) {
    return new Vector3(GetOffsetFromInteriorInWorldCoords(interior, position.x, position.y, position.z));
}
/**
 * ```
 * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
 * `Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))`
 * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
 * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
 * ```
 * Hash: 0x05B7A89BD78797FC | ApiSet: undefined
 */
export function getInteriorAtCoordsWithType(position, interiorType) {
    return GetInteriorAtCoordsWithType(position.x, position.y, position.z, interiorType);
}
/**
 * ```
 * Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.
 * ```
 * Hash: 0xE4A84ABF135EF91A | ApiSet: undefined
 */
export function getInteriorGroupId(interior) {
    return GetInteriorGroupId(interior);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xF49B58631D9E22D9 | ApiSet: undefined
 */
export function getInteriorHeading(interior) {
    return GetInteriorHeading(interior);
}
/**
 * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
 * Hash: 0xEEA5AC2EDA7C33E8 | ApiSet: undefined
 */
export function isCollisionMarkedOutside(position) {
    return IsCollisionMarkedOutside(position.x, position.y, position.z);
}
/**
 * ```
 * `Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY`
 * ```
 * Hash: 0x399685DB942336BC | ApiSet: undefined
 */
export function getKeyForEntityInRoom(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetKeyForEntityInRoom(_entity);
}
/**
 * Hash: 0xBC5115A5A939DD15 | ApiSet: undefined
 */
export function isInteriorDisabled(interior) {
    return IsInteriorDisabled(interior);
}
/**
 * ```
 * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
 * ```
 * Hash: 0x47C2A06D4F5F424B | ApiSet: undefined
 */
export function getRoomKeyFromEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetRoomKeyFromEntity(_entity);
}
/**
 * Hash: 0x35F7DD45E8C0A16D | ApiSet: undefined
 */
export function isInteriorEntitySetActive(interior, entitySetName) {
    return IsInteriorEntitySetActive(interior, entitySetName);
}
/**
 * Hash: 0x92BAC8ACF88CEC26 | ApiSet: undefined
 */
export function isInteriorCapped(interiorID) {
    return IsInteriorCapped(interiorID);
}
/**
 * Hash: 0x6726BDCCC1932F0E | ApiSet: undefined
 */
export function isInteriorReady(interiorID) {
    return IsInteriorReady(interiorID);
}
/**
 * Hash: 0x26B0E73D7EAAF4D3 | ApiSet: undefined
 */
export function isValidInterior(interior) {
    return IsValidInterior(interior);
}
/**
 * ```
 * Only used once in the entire game scripts.
 * Does not actually return anything.
 * ```
 * Hash: 0x4C2330E61D3DEB56 | ApiSet: undefined
 */
export function _0x4C2330E61D3DEB56(interior) {
    return Citizen.invokeNative('0x4C2330E61D3DEB56', interior);
}
/**
 * ```
 * `Usage: INTERIOR::_0x405DC2AEF6AF95B9(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));`
 * ```
 * Hash: 0x405DC2AEF6AF95B9 | ApiSet: undefined
 */
export function _0x405DC2AEF6AF95B9(roomHashKey) {
    if (typeof roomHashKey === 'string')
        roomHashKey = this.getHashKey(roomHashKey);
    Citizen.invokeNative('0x405DC2AEF6AF95B9', roomHashKey);
}
/**
 * Hash: 0xBC72B5D7A1CBD54D | ApiSet: undefined
 */
export function isInteriorScene() {
    return IsInteriorScene();
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x38C1CB1CB119A016 | ApiSet: undefined
 */
export function _0x38C1CB1CB119A016(p0, p1) {
    Citizen.invokeNative('0x38C1CB1CB119A016', p0, p1);
}
/**
 * ```
 * DISABLE_*
 * ```
 * Hash: 0x9E6542F0CE8E70A3 | ApiSet: undefined
 */
export function _0x9E6542F0CE8E70A3(toggle) {
    Citizen.invokeNative('0x9E6542F0CE8E70A3', toggle);
}
/**
 * ```
 * Jenkins hash _might_ be 0xFC227584.
 * ```
 * Hash: 0x7241CCB7D020DB69 | ApiSet: undefined
 */
export function _0x7241CCB7D020DB69(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x7241CCB7D020DB69', _entity, toggle);
}
/**
 * Hash: 0x483ACA1176CA93F1 | ApiSet: undefined
 */
export function _0x483ACA1176CA93F1() {
    Citizen.invokeNative('0x483ACA1176CA93F1');
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x7ECDF98587E92DEC | ApiSet: undefined
 */
export function _0x7ECDF98587E92DEC(p0) {
    Citizen.invokeNative('0x7ECDF98587E92DEC', p0);
}
/**
 * ```
 * Exemple of use(carmod_shop.c4)
 * `INTERIOR::_AF348AFCB575A441("V_CarModRoom");`
 * ```
 * Hash: 0xAF348AFCB575A441 | ApiSet: undefined
 */
export function _0xAF348AFCB575A441(roomName) {
    Citizen.invokeNative('0xAF348AFCB575A441', roomName);
}
/**
 * Hash: 0x2CA429C029CCF247 | ApiSet: undefined
 */
export function pinInteriorInMemory(interior) {
    PinInteriorInMemory(interior);
}
/**
 * Hash: 0xC1F1920BAF281317 | ApiSet: undefined
 */
export function setInteriorEntitySetColor(interior, entitySetName, color) {
    SetInteriorEntitySetColor(interior, entitySetName, color);
}
/**
 * Hash: 0x82EBB79E258FA2B7 | ApiSet: undefined
 */
export function _0x82EBB79E258FA2B7(entity, interiorID) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x82EBB79E258FA2B7', _entity, interiorID);
}
/**
 * Hash: 0x41F37C3427C75AE0 | ApiSet: undefined
 */
export function refreshInterior(interiorID) {
    RefreshInterior(interiorID);
}
/**
 * ```
 * `Does something similar to INTERIOR::DISABLE_INTERIOR.`
 * `You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.`
 * ```
 * Hash: 0x261CCE7EED010641 | ApiSet: undefined
 */
export function unpinInterior(interior) {
    UnpinInterior(interior);
}
/**
 * Hash: 0x41BC0D722FC04221 | ApiSet: undefined
 */
export function cleanItemset(p0) {
    CleanItemset(p0);
}
/**
 * Hash: 0xE3945201F14637DD | ApiSet: undefined
 */
export function addToItemset(p0, p1) {
    return AddToItemset(p0, p1);
}
/**
 * Hash: 0xDE18220B1C183EDA | ApiSet: undefined
 */
export function destroyItemset(p0) {
    DestroyItemset(p0);
}
/**
 * Hash: 0x7A197E2521EE2BAB | ApiSet: undefined
 */
export function getIndexedItemInItemset(p0, p1) {
    return GetIndexedItemInItemset(p0, p1);
}
/**
 * Hash: 0x35AD299F50D91B24 | ApiSet: undefined
 */
export function createItemset(distri) {
    return CreateItemset(distri);
}
/**
 * Hash: 0x2D0FC594D1E9C107 | ApiSet: undefined
 */
export function isInItemset(p0, p1) {
    return IsInItemset(p0, p1);
}
/**
 * Hash: 0xB1B1EA596344DFAB | ApiSet: undefined
 */
export function isItemsetValid(p0) {
    return IsItemsetValid(p0);
}
/**
 * Hash: 0xD9127E83ABF7C631 | ApiSet: undefined
 */
export function getItemsetSize(x) {
    return GetItemsetSize(x);
}
/**
 * Hash: 0x25E68244B0177686 | ApiSet: undefined
 */
export function removeFromItemset(p0, p1) {
    RemoveFromItemset(p0, p1);
}
/**
 * Hash: 0x8AA464D4E0F6ACCD | ApiSet: undefined
 */
export function loadingscreenGetLoadFreemodeWithEventName() {
    return LoadingscreenGetLoadFreemodeWithEventName();
}
/**
 * Hash: 0xB0C56BD3D808D863 | ApiSet: undefined
 */
export function loadingscreenSetLoadFreemode(toggle) {
    LoadingscreenSetLoadFreemode(toggle);
}
/**
 * Hash: 0xC6DC823253FBB366 | ApiSet: undefined
 */
export function loadingscreenIsLoadingFreemode() {
    return LoadingscreenIsLoadingFreemode();
}
/**
 * Hash: 0xEF7D17BC6C85264C | ApiSet: undefined
 */
export function loadingscreenGetLoadFreemode() {
    return LoadingscreenGetLoadFreemode();
}
/**
 * ```
 * Only occurrence was false, in maintransition.
 * ```
 * Hash: 0xFC309E94546FCDB5 | ApiSet: undefined
 */
export function loadingscreenSetLoadFreemodeWithEventName(toggle) {
    LoadingscreenSetLoadFreemodeWithEventName(toggle);
}
/**
 * Hash: 0xFA1E0E893D915215 | ApiSet: undefined
 */
export function _0xFA1E0E893D915215(toggle) {
    Citizen.invokeNative('0xFA1E0E893D915215', toggle);
}
/**
 * Hash: 0xF2CA003F167E21D2 | ApiSet: undefined
 */
export function _0xF2CA003F167E21D2() {
    return Citizen.invokeNative('0xF2CA003F167E21D2');
}
/**
 * Hash: 0xC7E7181C09F33B69 | ApiSet: undefined
 */
export function loadingscreenSetIsLoadingFreemode(toggle) {
    LoadingscreenSetIsLoadingFreemode(toggle);
}
/**
 * ```
 * Same return values as GET_CURRENT_LANGUAGE
 * ```
 * Hash: 0x497420E022796B3F | ApiSet: undefined
 */
export function localizationGetSystemLanguage() {
    return LocalizationGetSystemLanguage();
}
/**
 * ```
 * Possible return values: 0, 1, 2
 * ```
 * Hash: 0xA8AE43AEC1A61314 | ApiSet: undefined
 */
export function localizationGetSystemDateFormat() {
    return LocalizationGetSystemDateFormat();
}
/**
 * ```
 * 0 = american (en-US)
 * 1 = french (fr-FR)
 * 2 = german (de-DE)
 * 3 = italian (it-IT)
 * 4 = spanish (es-ES)
 * 5 = brazilian (pt-BR)
 * 6 = polish (pl-PL)
 * 7 = russian (ru-RU)
 * 8 = korean (ko-KR)
 * 9 = chinesetrad (zh-TW)
 * 10 = japanese (ja-JP)
 * 11 = mexican (es-MX)
 * 12 = chinesesimp (zh-CN)
 * ```
 * Hash: 0x2BDD44CC428A7EAE | ApiSet: undefined
 */
export function getCurrentLanguage() {
    return GetCurrentLanguage();
}
/**
 * Hash: 0x4F5212C7AD880DF8 | ApiSet: undefined
 */
export function addPetrolDecal(position, groundLvl, width, transparency) {
    return AddPetrolDecal(position.x, position.y, position.z, groundLvl, width, transparency);
}
/**
 * Places a decal into the world
 * ```cs
 * public enum DecalTypes
 * {
 * splatters_blood = 1010,
 * splatters_blood_dir = 1015,
 * splatters_blood_mist = 1017,
 * splatters_mud = 1020,
 * splatters_paint = 1030,
 * splatters_water = 1040,
 * splatters_water_hydrant = 1050,
 * splatters_blood2 = 1110,
 * weapImpact_metal = 4010,
 * weapImpact_concrete = 4020,
 * weapImpact_mattress = 4030,
 * weapImpact_mud = 4032,
 * weapImpact_wood = 4050,
 * weapImpact_sand = 4053,
 * weapImpact_cardboard = 4040,
 * weapImpact_melee_glass = 4100,
 * weapImpact_glass_blood = 4102,
 * weapImpact_glass_blood2 = 4104,
 * weapImpact_shotgun_paper = 4200,
 * weapImpact_shotgun_mattress,
 * weapImpact_shotgun_metal,
 * weapImpact_shotgun_wood,
 * weapImpact_shotgun_dirt,
 * weapImpact_shotgun_tvscreen,
 * weapImpact_shotgun_tvscreen2,
 * weapImpact_shotgun_tvscreen3,
 * weapImpact_melee_concrete = 4310,
 * weapImpact_melee_wood = 4312,
 * weapImpact_melee_metal = 4314,
 * burn1 = 4421,
 * burn2,
 * burn3,
 * burn4,
 * burn5,
 * bang_concrete_bang = 5000,
 * bang_concrete_bang2,
 * bang_bullet_bang,
 * bang_bullet_bang2 = 5004,
 * bang_glass = 5031,
 * bang_glass2,
 * solidPool_water = 9000,
 * solidPool_blood,
 * solidPool_oil,
 * solidPool_petrol,
 * solidPool_mud,
 * porousPool_water,
 * porousPool_blood,
 * porousPool_oil,
 * porousPool_petrol,
 * porousPool_mud,
 * porousPool_water_ped_drip,
 * liquidTrail_water = 9050
 * }
 * ```
 * Hash: 0xB302244A1839BDAD | ApiSet: undefined
 */
export function addDecal(decalType, posX, posY, posZ, dirX, dirY, dirZ, sideX, sideY, sideZ, width, height, rCoef, gCoef, bCoef, opacity, timeout, isLongRange, isDynamic, useComplexColn) {
    return AddDecal(decalType, posX, posY, posZ, dirX, dirY, dirZ, sideX, sideY, sideZ, width, height, rCoef, gCoef, bCoef, opacity, timeout, isLongRange, isDynamic, useComplexColn);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x126D7F89FE859A5E | ApiSet: undefined
 */
export function addOilDecal(position, groundLvl, width, transparency) {
    return AddOilDecal(position.x, position.y, position.z, groundLvl, width, transparency);
}
/**
 * ```
 * Example:
 * `GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");`
 * I tried this and nothing happened...
 * ```
 * Hash: 0x9CD43EEE12BF4DD0 | ApiSet: undefined
 */
export function addEntityIcon(entity, icon) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return AddEntityIcon(_entity, icon);
}
/**
 * Hash: 0x967278682CB6967A | ApiSet: undefined
 */
export function addPetrolTrailDecalInfo(position, p3) {
    AddPetrolTrailDecalInfo(position.x, position.y, position.z, p3);
}
/**
 * ```
 * duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
 * if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
 * ```
 * Hash: 0x2206BF9A37B7F724 | ApiSet: undefined
 */
export function animpostfxPlay(effectName, duration, looped) {
    AnimpostfxPlay(effectName, duration, looped);
}
/**
 * Hash: 0x1A8E2C8B9CF4549C | ApiSet: undefined
 */
export function addTcmodifierOverride(modifierName1, modifierName2) {
    AddTcmodifierOverride(modifierName1, modifierName2);
}
/**
 * Hash: 0xB4EDDC19532BFB85 | ApiSet: undefined
 */
export function animpostfxStopAll() {
    AnimpostfxStopAll();
}
/**
 * See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724).
 * Hash: 0x36AD3E690DA5ACEB | ApiSet: undefined
 */
export function animpostfxIsRunning(effectName) {
    return AnimpostfxIsRunning(effectName);
}
/**
 * See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724)
 * Hash: 0xE35B38A27E8E7179 | ApiSet: undefined
 */
export function animpostfxGetUnk(effectName) {
    return AnimpostfxGetUnk(effectName);
}
/**
 * ```
 * Push a function from the Scaleform onto the stack
 * ```
 * Hash: 0xF6E48914C7A8694E | ApiSet: undefined
 */
export function beginScaleformMovieMethod(scaleform, methodName) {
    return BeginScaleformMovieMethod(scaleform, methodName);
}
/**
 * ```
 * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
 * ```
 * Hash: 0x428BDCB9DA58DA53 | ApiSet: undefined
 */
export function addVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return AddVehicleCrewEmblem(_vehicle, _ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);
}
/**
 * See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724).
 * Hash: 0x068E835A1D0DC0E3 | ApiSet: undefined
 */
export function animpostfxStop(effectName) {
    AnimpostfxStop(effectName);
}
/**
 * ```
 * Might be more appropriate in AUDIO?
 * ```
 * Hash: 0x845BAD77CC770633 | ApiSet: undefined
 */
export function attachTvAudioToEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    AttachTvAudioToEntity(_entity);
}
/**
 * Stops the effect and sets a value (bool) in its data (+0x199) to false; See [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724).
 * Hash: 0xD2209BE128B5418C | ApiSet: undefined
 */
export function animpostfxStopAndDoUnk(effectName) {
    AnimpostfxStopAndDoUnk(effectName);
}
/**
 * Starts frontend (pause menu) scaleform movie methods.
 * This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
 * Use [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER`](#\_0xB9449845F73F5E9C) for header scaleform functions.
 * Hash: 0xAB58C27C2E6123C6 | ApiSet: undefined
 */
export function beginScaleformMovieMethodOnFrontend(functionName) {
    return BeginScaleformMovieMethodOnFrontend(functionName);
}
/**
 * Starts frontend (pause menu) scaleform movie methods for header options.
 * Use [`BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND`](#\_0xAB58C27C2E6123C6) to customize the content inside the frontend menus.
 * Hash: 0xB9449845F73F5E9C | ApiSet: undefined
 */
export function beginScaleformMovieMethodOnFrontendHeader(functionName) {
    return BeginScaleformMovieMethodOnFrontendHeader(functionName);
}
/**
 * ```
 * `Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.`
 * Known components:
 * 19 - MP_RANK_BAR
 * 20 - HUD_DIRECTOR_MODE
 * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
 * ```
 * Hash: 0x98C494FD5BDFBFD5 | ApiSet: undefined
 */
export function beginScaleformScriptHudMovieMethod(hudComponent, methodName) {
    return BeginScaleformScriptHudMovieMethod(hudComponent, methodName);
}
/**
 * Hash: 0xA67C35C56EB1BD9D | ApiSet: undefined
 */
export function beginTakeHighQualityPhoto() {
    return BeginTakeHighQualityPhoto();
}
/**
 * ```
 * `Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.`
 * Examples:
 * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");`
 * `HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));`
 * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
 * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");`
 * `HUD::_ADD_TEXT_COMPONENT_STRING(a_2);`
 * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
 * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");`
 * `HUD::_0x17299B63C7683A2B(v_3);`
 * `HUD::_0x17299B63C7683A2B(v_4);`
 * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
 * `GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");`
 * `HUD::_0x17299B63C7683A2B(v_3);`
 * `GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();`
 * ```
 * Hash: 0x80338406F3475E55 | ApiSet: undefined
 */
export function beginTextCommandScaleformString(textLabel) {
    BeginTextCommandScaleformString(textLabel);
}
/**
 * Hash: 0x1DD2139A9A20DCE8 | ApiSet: undefined
 */
export function beginTakeMissionCreatorPhoto() {
    return BeginTakeMissionCreatorPhoto();
}
/**
 * ```
 * Calls the Scaleform function and passes both float and string parameters (in their respective order).
 * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
 * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
 * Examples:
 * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
 * `GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);`
 * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
 * `GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);`
 * ```
 * Hash: 0xEF662D8D57E290B1 | ApiSet: undefined
 */
export function callScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5) {
    CallScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
}
/**
 * ```
 * Calls the Scaleform function and passes the parameters as floats.
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
 * ```
 * Hash: 0xD0837058AE2E4BEE | ApiSet: undefined
 */
export function callScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5) {
    CallScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5);
}
/**
 * Hash: 0x03FC694AE06C5A20 | ApiSet: undefined
 */
export function cascadeShadowsInitSession() {
    CascadeShadowsInitSession();
}
/**
 * ```
 * Calls the Scaleform function.
 * ```
 * Hash: 0xFBD96D87AC96D533 | ApiSet: undefined
 */
export function callScaleformMovieMethod(scaleform, method) {
    CallScaleformMovieMethod(scaleform, method);
}
/**
 * Hash: 0xD39D13C9FEBF0511 | ApiSet: undefined
 */
export function cascadeShadowsSetDynamicDepthMode(p0) {
    CascadeShadowsSetDynamicDepthMode(p0);
}
/**
 * ```
 * Calls the Scaleform function and passes the parameters as strings.
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
 * ```
 * Hash: 0x51BC1ED3CC44E8F7 | ApiSet: undefined
 */
export function callScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5) {
    CallScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5);
}
/**
 * Hash: 0x6DDBF9DFFC4AC080 | ApiSet: undefined
 */
export function cascadeShadowsSetAircraftMode(p0) {
    CascadeShadowsSetAircraftMode(p0);
}
/**
 * Hash: 0x27CB772218215325 | ApiSet: undefined
 */
export function cascadeShadowsClearShadowSampleType() {
    CascadeShadowsClearShadowSampleType();
}
/**
 * Clears the secondary timecycle modifier usually set with [`SetExtraTimecycleModifier`](#\_0x5096FD9CCB49056D)
 * Hash: 0x92CCC17A7A2285DA | ApiSet: undefined
 */
export function clearExtraTimecycleModifier() {
    ClearExtraTimecycleModifier();
}
/**
 * Hash: 0x5F0F3F56635809EF | ApiSet: undefined
 */
export function cascadeShadowsSetCascadeBoundsScale(p0) {
    CascadeShadowsSetCascadeBoundsScale(p0);
}
/**
 * ```
 * When this is set to ON, shadows only draw as you get nearer.
 * When OFF, they draw from a further distance.
 * ```
 * Hash: 0x80ECBC0C856D3B0B | ApiSet: undefined
 */
export function cascadeShadowsEnableEntityTracker(toggle) {
    CascadeShadowsEnableEntityTracker(toggle);
}
/**
 * Hash: 0xF5ED37F54CD4D52E | ApiSet: undefined
 */
export function deleteCheckpoint(checkpoint) {
    DeleteCheckpoint(checkpoint);
}
/**
 * Hash: 0xD2936CAB8B58FCBD | ApiSet: undefined
 */
export function cascadeShadowsSetCascadeBounds(p0, p1, p2, p3, p4, p5, p6, p7) {
    CascadeShadowsSetCascadeBounds(p0, p1, p2, p3, p4, p5, p6, p7);
}
/**
 * ```
 * Possible values:
 * "CSM_ST_POINT"
 * "CSM_ST_LINEAR"
 * "CSM_ST_TWOTAP"
 * "CSM_ST_BOX3x3"
 * "CSM_ST_BOX4x4"
 * "CSM_ST_DITHER2_LINEAR"
 * "CSM_ST_CUBIC"
 * "CSM_ST_DITHER4"
 * "CSM_ST_DITHER16"
 * "CSM_ST_SOFT16"
 * "CSM_ST_DITHER16_RPDB"
 * "CSM_ST_POISSON16_RPDB_GNORM"
 * "CSM_ST_HIGHRES_BOX4x4"
 * "CSM_ST_CLOUDS_SIMPLE"
 * "CSM_ST_CLOUDS_LINEAR"
 * "CSM_ST_CLOUDS_TWOTAP"
 * "CSM_ST_CLOUDS_BOX3x3"
 * "CSM_ST_CLOUDS_BOX4x4"
 * "CSM_ST_CLOUDS_DITHER2_LINEAR"
 * "CSM_ST_CLOUDS_SOFT16"
 * "CSM_ST_CLOUDS_DITHER16_RPDB"
 * "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
 * ```
 * Hash: 0xB11D94BC55F41932 | ApiSet: undefined
 */
export function cascadeShadowsSetShadowSampleType(type) {
    CascadeShadowsSetShadowSampleType(type);
}
/**
 * Hash: 0x5E9DAF5A20F15908 | ApiSet: undefined
 */
export function cascadeShadowsSetEntityTrackerScale(p0) {
    CascadeShadowsSetEntityTrackerScale(p0);
}
/**
 * Hash: 0x02AC28F3A01FA04A | ApiSet: undefined
 */
export function cascadeShadowsSetDynamicDepthValue(p0) {
    CascadeShadowsSetDynamicDepthValue(p0);
}
/**
 * Resets the screen's draw-origin which was changed by the function [`SET_DRAW_ORIGIN`](#\_0xAA0008F3BBB8F416) back to `x=0, y=0`. See [`SET_DRAW_ORIGIN`](#\_0xAA0008F3BBB8F416) for further information.
 * Hash: 0xFF0B610F6BE0D7AF | ApiSet: undefined
 */
export function clearDrawOrigin() {
    ClearDrawOrigin();
}
/**
 * Hash: 0x0F07E7745A236711 | ApiSet: undefined
 */
export function clearTimecycleModifier() {
    ClearTimecycleModifier();
}
/**
 * Hash: 0x3669F1B198DCAA4F | ApiSet: undefined
 */
export function disableOcclusionThisFrame() {
    DisableOcclusionThisFrame();
}
/**
 * Creates a tracked point: useful for checking the visibility of a 3D point on screen.
 * Tracked points must be manually managed and will not be destroyed on resource stop (they are not an instance of CScriptResource). See [`DESTROY_TRACKED_POINT`](#\_0xB25DC90BAD56CA42) and [onResourceStop](https://docs.fivem.net/docs/scripting-reference/events/list/onResourceStop/).
 * Only 64 points may be tracked at a given time.
 * Hash: 0xE2C9439ED45DEA60 | ApiSet: undefined
 */
export function createTrackedPoint() {
    return CreateTrackedPoint();
}
/**
 * Hash: 0xBEB3D46BB7F043C0 | ApiSet: undefined
 */
export function clearTvChannelPlaylist(tvChannel) {
    ClearTvChannelPlaylist(tvChannel);
}
/**
 * ```
 * Creates a checkpoint. Returns the handle of the checkpoint.
 * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
 * Parameters:
 * * type - The type of checkpoint to create. See below for a list of checkpoint types.
 * * pos1 - The position of the checkpoint.
 * * pos2 - The position of the next checkpoint to point to.
 * * diameter - The diameter of the checkpoint.
 * * color - The color of the checkpoint.
 * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
 * Checkpoint types (prior to game build 2189):
 * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
 * 39----------?
 * 40----------Ring: just a ring
 * 41----------?
 * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
 * 45-47-------Cylinder no arrow or number
 * If using type 42-44, reserved sets number / number and shape to display
 * 0-99------------Just numbers (0-99)
 * 100-109-----------------Arrow (0-9)
 * 110-119------------Two arrows (0-9)
 * 120-129----------Three arrows (0-9)
 * 130-139----------------Circle (0-9)
 * 140-149------------CycleArrow (0-9)
 * 150-159----------------Circle (0-9)
 * 160-169----Circle  w/ pointer (0-9)
 * 170-179-------Perforated ring (0-9)
 * 180-189----------------Sphere (0-9)
 * ```
 * [Checkpoint Types](https://docs.fivem.net/docs/game-references/checkpoints/) as of game build 2189
 * Hash: 0x0134F0835AB6BFCB | ApiSet: undefined
 */
export function createCheckpoint(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved) {
    return CreateCheckpoint(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);
}
/**
 * Hash: 0xB25DC90BAD56CA42 | ApiSet: undefined
 */
export function destroyTrackedPoint(point) {
    DestroyTrackedPoint(point);
}
/**
 * Removes any custom moon cycle overrides that have been configured with [ENABLE_MOON_CYCLE_OVERRIDE](#\_0x2C328AF17210F009)
 * Hash: 0x2BF72AD5B41AA739 | ApiSet: undefined
 */
export function disableMoonCycleOverride() {
    DisableMoonCycleOverride();
}
/**
 * Hash: 0xEFD97FF47B745B8D | ApiSet: undefined
 */
export function disableScriptAmbientEffects(p0) {
    DisableScriptAmbientEffects(p0);
}
/**
 * Hash: 0x74AFEF0D2E1E409B | ApiSet: undefined
 */
export function doesParticleFxLoopedExist(ptfxHandle) {
    return DoesParticleFxLoopedExist(ptfxHandle);
}
/**
 * Hash: 0xDE81239437E8C5A8 | ApiSet: undefined
 */
export function disableScreenblurFade() {
    DisableScreenblurFade();
}
/**
 * Must be called each frame, will play at specified position on screen when called with [`_PLAY_BINK_MOVIE`](#\_0x70D2CC8A542A973C)
 * Hash: 0x7118E83EEB9F7238 | ApiSet: undefined
 */
export function drawBinkMovie(binkMovie, posX, posY, scaleX, scaleY, rotation, r, g, b, a) {
    DrawBinkMovie(binkMovie, posX, posY, scaleX, scaleY, rotation, r, g, b, a);
}
/**
 * Hash: 0xC9F98AC1884E73A2 | ApiSet: undefined
 */
export function disableVehicleDistantlights(toggle) {
    DisableVehicleDistantlights(toggle);
}
/**
 * Used in pi_menu.c. Checks if there is a brief entry for specified value.
 * Values:
 * 0 - Dialogue brief
 * 1 - Help text brief
 * 2 - Mission Objective brief
 * Hash: 0x5E657EF1099EDD65 | ApiSet: undefined
 */
export function doesLatestBriefStringExist(briefValue) {
    return DoesLatestBriefStringExist(briefValue);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0x7FDFADE676AA3CB0 | ApiSet: undefined
 */
export function drawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, a) {
    DrawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, a);
}
/**
 * Hash: 0x060D935D3981A275 | ApiSet: undefined
 */
export function doesVehicleHaveCrewEmblem(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleHaveCrewEmblem(_vehicle, p1);
}
/**
 * Hash: 0x22A249A53034450A | ApiSet: undefined
 */
export function dontRenderInGameUi(p0) {
    DontRenderInGameUi(p0);
}
/**
 * This native draws a box between two vectors in the game world. It is typically used for visualizing boundaries or areas of interest. The color of the box is specified by the red, green, and blue parameters, with alpha determining its opacity. This native should be called every frame for continuous rendering.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xD3A9971CADAC7252 | ApiSet: undefined
 */
export function drawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
    DrawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0x3903E216620488E8 | ApiSet: undefined
 */
export function drawDebugText(text, position, red, green, blue, alpha) {
    DrawDebugText(text, position.x, position.y, position.z, red, green, blue, alpha);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0x73B1189623049839 | ApiSet: undefined
 */
export function drawDebugCross(position, size, red, green, blue, alpha) {
    DrawDebugCross(position.x, position.y, position.z, size, red, green, blue, alpha);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0x083A2CA4F2E573BD | ApiSet: undefined
 */
export function drawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, a) {
    DrawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, a);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0xAAD68E1AB39DA632 | ApiSet: undefined
 */
export function drawDebugSphere(position, radius, red, green, blue, alpha) {
    DrawDebugSphere(position.x, position.y, position.z, radius, red, green, blue, alpha);
}
/**
 * Similar to [\_DRAW_SPRITE](#\_0xE7FFAE5EBF23D890), but seems to be some kind of "interactive" sprite, at least used by render targets.
 * These seem to be the only dicts ever requested by this native:
 * ```
 * prop_screen_biker_laptop
 * Prop_Screen_GR_Disruption
 * Prop_Screen_TaleOfUs
 * prop_screen_nightclub
 * Prop_Screen_IE_Adhawk
 * prop_screen_sm_free_trade_shipping
 * prop_screen_hacker_truck
 * MPDesktop
 * Prop_Screen_Nightclub
 * And a few others
 * ```
 * Hash: 0x2BC54A8188768488 | ApiSet: undefined
 */
export function drawInteractiveSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha) {
    DrawInteractiveSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0xD8B9A8AC5608FF94 | ApiSet: undefined
 */
export function drawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2) {
    DrawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0xA3BB2E9555C05A8F | ApiSet: undefined
 */
export function drawDebugText2d(text, position, red, green, blue, alpha) {
    DrawDebugText2d(text, position.x, position.y, position.z, red, green, blue, alpha);
}
/**
 * This native draws a line between two vectors in the game world. It is typically used for visualizing paths or connections between points. The color of the line is specified by the red, green, and blue parameters, with alpha determining its opacity. This native should be called every frame for continuous rendering.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x6B7256074AE34680 | ApiSet: undefined
 */
export function drawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) {
    DrawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
}
/**
 * ```
 * NativeDB Added Parameter 26: BOOL p25
 * ```
 * Hash: 0xE82728F0DE75D13A | ApiSet: undefined
 */
export function drawMarker2(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, rotationOrder, rotate, textureDict, textureName, drawOnEnts, p24) {
    DrawMarker2(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, rotationOrder, rotate, textureDict, textureName, drawOnEnts, p24);
}
/**
 * Hash: 0xF2A1B2771A01DBD4 | ApiSet: undefined
 */
export function drawLightWithRange(posX, posY, posZ, colorR, colorG, colorB, range, intensity) {
    DrawLightWithRange(posX, posY, posZ, colorR, colorG, colorB, range, intensity);
}
/**
 * Hash: 0xF49E9A9716A04595 | ApiSet: undefined
 */
export function drawLightWithRangeAndShadow(position, r, g, b, range, intensity, shadow) {
    DrawLightWithRangeAndShadow(position.x, position.y, position.z, r, g, b, range, intensity, shadow);
}
/**
 * Hash: 0x54972ADAF0294A93 | ApiSet: undefined
 */
export function drawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, unk) {
    DrawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, unk);
}
/**
 * ```
 * x/y/z - Location of a vertex (in world coords), presumably.
 * ----------------
 * x1, y1, z1     : Coordinates for the first point
 * x2, y2, z2     : Coordinates for the second point
 * x3, y3, z3     : Coordinates for the third point
 * r, g, b, alpha : Color with RGBA-Values
 * Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
 * But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
 * End Sub
 * [C#]
 * public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
 * {
 * Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
 * }
 * BTW: Intersecting triangles are not supported: They overlap in the order they were called.
 * ```
 * Hash: 0xAC26716048436851 | ApiSet: undefined
 */
export function drawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha) {
    DrawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
}
/**
 * Hash: 0x1072F115DAB0717E | ApiSet: undefined
 */
export function drawLowQualityPhotoToPhone(p0, p1) {
    DrawLowQualityPhotoToPhone(p0, p1);
}
/**
 * Draws a marker with the specified appearance at the target location. This has to be called every frame, e.g. in a `Wait(0)` loop.
 * There's a [list of markers](https://docs.fivem.net/game-references/markers/) on the FiveM documentation site.
 * Hash: 0x28477EC23D892089 | ApiSet: undefined
 */
export function drawMarker(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, rotationOrder, rotate, textureDict, textureName, drawOnEnts) {
    DrawMarker(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, rotationOrder, rotate, textureDict, textureName, drawOnEnts);
}
/**
 * Hash: 0x1CE592FDC749D6F5 | ApiSet: undefined
 */
export function drawScaleformMovie3dSolid(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13) {
    DrawScaleformMovie3dSolid(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13);
}
/**
 * Hash: 0x87D51D72255D4E78 | ApiSet: undefined
 */
export function drawScaleformMovie3d(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, sharpness, p9, scaleX, scaleY, scaleZ, p13) {
    DrawScaleformMovie3d(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, sharpness, p9, scaleX, scaleY, scaleZ, p13);
}
/**
 * ```
 * Draws a rectangle on the screen.
 * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
 * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
 * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
 * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
 * -R: Red part of the color. (0-255)
 * -G: Green part of the color. (0-255)
 * -B: Blue part of the color. (0-255)
 * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
 * The total number of rectangles to be drawn in one frame is apparently limited to 399.
 * ```
 * ```
 * NativeDB Added Parameter 9: BOOL p8
 * ```
 * Hash: 0x3A618A217E5154F0 | ApiSet: undefined
 */
export function drawRect(x, y, width, height, r, g, b, a) {
    DrawRect(x, y, width, height, r, g, b, a);
}
/**
 * ```
 * unk is not used so no need
 * ```
 * Hash: 0x0DF606929C105BE1 | ApiSet: undefined
 */
export function drawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, unk) {
    DrawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, unk);
}
/**
 * Hash: 0x5BCA583A583194DB | ApiSet: undefined
 */
export function drawSpotLightWithShadow(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId) {
    DrawSpotLightWithShadow(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
}
/**
 * ```
 * It's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A
 * p0 was always "CELEBRATION_WINNER"
 * ```
 * Hash: 0x98C4FE6EC34154CA | ApiSet: undefined
 */
export function drawShowroom(p0, ped, p2, posX, posY, posZ) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return DrawShowroom(p0, _ped, p2, posX, posY, posZ);
}
/**
 * Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
 * Example [image](https://imgur.com/nCbtS4H):
 * ```lua
 * DrawSphere(35.45, 172.66, 126.22, 1.0, 0, 0, 255, 0.2)
 * ```
 * Hash: 0x799017F9E3B10112 | ApiSet: undefined
 */
export function drawSphere(position, radius, r, g, b, opacity) {
    DrawSphere(position.x, position.y, position.z, radius, r, g, b, opacity);
}
/**
 * Hash: 0xCF537FDE4FBD4CE5 | ApiSet: undefined
 */
export function drawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha) {
    DrawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha);
}
/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 * Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * Hash: 0x736D7AA1B750856B | ApiSet: undefined
 */
export function drawSpritePoly2(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
    DrawSpritePoly2(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
}
/**
 * Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
 * u1, v1 - texture coordinates for the top-left corner
 * u2, v2 - texture coordinates for the bottom-right corner
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x95812F9B26074726 | ApiSet: undefined
 */
export function drawSpriteUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha) {
    DrawSpriteUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha);
}
/**
 * ```
 * Parameters:
 * * pos - coordinate where the spotlight is located
 * * dir - the direction vector the spotlight should aim at from its current position
 * * r,g,b - color of the spotlight
 * * distance - the maximum distance the light can reach
 * * brightness - the brightness of the light
 * * roundness - "smoothness" of the circle edge
 * * radius - the radius size of the spotlight
 * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
 * Example in C# (spotlight aims at the closest vehicle):
 * Vector3 myPos = Game.Player.Character.Position;
 * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
 * Vector3 destinationCoords = nearest.Position;
 * Vector3 dirVector = destinationCoords - myPos;
 * dirVector.Normalize();
 * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
 * ```
 * Hash: 0xD0F64B265C8C8B33 | ApiSet: undefined
 */
export function drawSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff) {
    DrawSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
}
/**
 * ```
 * Draws a 2D sprite on the screen.
 * Parameters:
 * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
 * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
 * screenX/Y - Screen offset (0.5 = center)
 * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
 * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
 * red,green,blue - Sprite color (default = 255/255/255)
 * alpha - opacity level
 * ```
 * ```
 * NativeDB Added Parameter 12: BOOL p11
 * ```
 * Hash: 0xE7FFAE5EBF23D890 | ApiSet: undefined
 */
export function drawSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha) {
    DrawSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha);
}
/**
 * ```
 * `All calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.`
 * "act_cinema.ysc", line 1483:
 * `HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);`
 * `HUD::SET_TEXT_RENDER_ID(l_AE);`
 * `GRAPHICS::_0x61BB1D9B3A95D802(4);`
 * `GRAPHICS::_0xC6372ECD45D73BCD(1);`
 * `if (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {`
 * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);`
 * } else {
 * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);`
 * }
 * "am_mp_property_int.ysc", line 102545:
 * `if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {`
 * `if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {`
 * `HUD::SET_TEXT_RENDER_ID(a_2._f1);`
 * `GRAPHICS::_0x61BB1D9B3A95D802(4);`
 * `GRAPHICS::_0xC6372ECD45D73BCD(1);`
 * `GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);`
 * `if (GRAPHICS::GET_TV_CHANNEL() == -1) {`
 * sub_a8fa5(a_2, 1);
 * } else {
 * sub_a8fa5(a_2, 1);
 * `GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);`
 * }
 * `HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());`
 * }
 * }
 * ```
 * Hash: 0xFDDC2B4ED3C69DF0 | ApiSet: undefined
 */
export function drawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha) {
    DrawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
}
/**
 * This native draws a textured polygon between three vectors in the game world. It's commonly utilized for rendering deadline trailing lights, with additional details available in the `deadline.ytd` file. UVW mapping details (u,v,w parameters) can be found on various internet resources. This native is specifically used for drawing textured polygons on the screen, where UV coordinates define the texture mapping and color/alpha parameters define the appearance of the polygon. This native should be called every frame for continuous rendering.
 * ```
 * NativeDB Introduced: v877
 * ```
 * Hash: 0x29280002282F1928 | ApiSet: undefined
 */
export function drawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) {
    DrawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
}
/**
 * If true, this native will create purple explosions upon projectile impact, add comic-like PTFX when firing a weapon, create a sound on bullet impact and have its own "blood effect".
 * If the PTFX asset "scr_rcbarry2" is not requested using ([`RequestNamedPtfxAsset`](#\_0xD821490579791273)) then this native **will not work as intended**.
 * Excerpt from fm_content_drug_lab_work.c:
 * ```
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry2");`
 * `if (STREAMING::HAS_NAMED_PTFX_ASSET_LOADED("scr_rcbarry2"))`
 * {
 * `GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(true);`
 * `AUDIO::START_AUDIO_SCENE("DLC_CM2022_DRUG_TRIP_SPRINKLERS_SCENE");`
 * func_720(26);
 * }
 * ```
 * Hash: 0xD821490579791273 | ApiSet: undefined
 */
export function enableClownBloodVfx(toggle) {
    EnableClownBloodVfx(toggle);
}
/**
 * Hash: 0x74C180030FDE4B69 | ApiSet: undefined
 */
export function enableMovieKeyframeWait(toggle) {
    EnableMovieKeyframeWait(toggle);
}
/**
 * Creates a motion-blur sort of effect, this native does not seem to work, however by using the [`ANIMPOSTFX_PLAY`](#\_0x2206BF9A37B7F724) native with `"DrugsMichaelAliensFight"` as the effect parameter, you should be able to get the effect.
 * This native does not seem to work, however by using the [ANIMPOSTFX_PLAY](#\_0x2206BF9A37B7F724) native with "DrugsMichaelAliensFight" as the effect parameter, you should be able to get the effect.
 * Hash: 0x9DCE1F0F78260875 | ApiSet: undefined
 */
export function enableAlienBloodVfx(toggle) {
    EnableAlienBloodVfx(toggle);
}
/**
 * Enable a custom moon cycle, allowing control of which lunar phase the moon is in.
 * Valid values are from `0.0` to `1.0`, with `0.5` representing a full moon.
 * | Value |   Lunar Phase   |
 * | :---: | :-------------: |
 * | `0.1` | Waxing Crescent |
 * | `0.2` |  First Quarter  |
 * | `0.3` | Waxing Gibbous  |
 * | `0.5` |    Full Moon    |
 * | `0.7` | Waning Gibbous  |
 * | `0.8` |  Third Quarter  |
 * | `0.9` | Waning Crescent |
 * The moon phase can be disabled with [DISABLE_MOON_CYCLE_OVERRIDE](#\_0x2BF72AD5B41AA739)
 * Hash: 0x2C328AF17210F009 | ApiSet: undefined
 */
export function enableMoonCycleOverride(phase) {
    EnableMoonCycleOverride(phase);
}
/**
 * Hash: 0x0A123435A26C36CD | ApiSet: undefined
 */
export function endPetrolTrailDecals() {
    EndPetrolTrailDecals();
}
/**
 * ```
 * Pops and calls the Scaleform function on the stack
 * ```
 * Hash: 0xC6796A8FFA375E53 | ApiSet: undefined
 */
export function endScaleformMovieMethod() {
    EndScaleformMovieMethod();
}
/**
 * Hash: 0x873FA65C778AD970 | ApiSet: undefined
 */
export function enableMovieSubtitles(toggle) {
    EnableMovieSubtitles(toggle);
}
/**
 * Hash: 0xD77EDADB0420E6E0 | ApiSet: undefined
 */
export function fadeDecalsInRange(position, radius, duration) {
    FadeDecalsInRange(position.x, position.y, position.z, radius, duration);
}
/**
 * Hash: 0x362E2D3FE93A9959 | ApiSet: undefined
 */
export function endTextCommandScaleformString() {
    EndTextCommandScaleformString();
}
/**
 * Hash: 0xC50AA39A577AF886 | ApiSet: undefined
 */
export function endScaleformMovieMethodReturnValue() {
    return EndScaleformMovieMethodReturnValue();
}
/**
 * Hash: 0xDC459CFA0CCE245B | ApiSet: undefined
 */
export function forceRenderInGameUi(toggle) {
    ForceRenderInGameUi(toggle);
}
/**
 * Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
 * Also useful for when you are trying to add blips and inputs in your scaleform (If the scaleform supports it).
 * Hash: 0xAE4E8157D9ECF087 | ApiSet: undefined
 */
export function endTextCommandUnparsedScaleformString() {
    EndTextCommandUnparsedScaleformString();
}
/**
 * Hash: 0x6A12D88881435DCA | ApiSet: undefined
 */
export function freeMemoryForLowQualityPhoto() {
    FreeMemoryForLowQualityPhoto();
}
/**
 * Hash: 0xC9B18B4619F48F7B | ApiSet: undefined
 */
export function fadeUpPedLight(p0) {
    FadeUpPedLight(p0);
}
/**
 * Hash: 0xD801CC02177FA3F1 | ApiSet: undefined
 */
export function freeMemoryForHighQualityPhoto() {
    FreeMemoryForHighQualityPhoto();
}
/**
 * Returns current screen resolution.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x873C9F3104101DD3 | ApiSet: undefined
 */
export function getActualScreenResolution() {
    return GetActualScreenResolution();
}
/**
 * This native retrieves the aspect ratio of the game window. If `physicalAspect` is `true`, it returns the physical aspect ratio of the game window, which is useful for 3x1 modes. Otherwise, it returns the aspect ratio of the main game window, considering any custom overrides from the settings menu.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xF1307EF624A80D87 | ApiSet: undefined
 */
export function getAspectRatio(physicalAspect) {
    return GetAspectRatio(physicalAspect);
}
/**
 * Hash: 0x0A46AF8A78DC5E0A | ApiSet: undefined
 */
export function freeMemoryForMissionCreatorPhoto() {
    FreeMemoryForMissionCreatorPhoto();
}
/**
 * This native indicates whether the game is running in high-definition (HD) resolution. It returns `false` if the resolution is less than `1280x720` and `true` if it's equal to or greater than `1280x720`.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x84ED31191CC5D2C9 | ApiSet: undefined
 */
export function getIsHidef() {
    return GetIsHidef();
}
/**
 * In percentage: 0.0 - 100.0
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x8E17DDD6B9D5BF29 | ApiSet: undefined
 */
export function getBinkMovieTime(binkMovie) {
    return GetBinkMovieTime(binkMovie);
}
/**
 * Hash: 0x473151EBC762C6DA | ApiSet: undefined
 */
export function getCurrentNumberOfCloudPhotos() {
    return GetCurrentNumberOfCloudPhotos();
}
/**
 * This native retrieves whether the game is running in widescreen mode or not.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x30CF4BDA4FCB1905 | ApiSet: undefined
 */
export function getIsWidescreen() {
    return GetIsWidescreen();
}
/**
 * Hash: 0x323F647679A09103 | ApiSet: undefined
 */
export function getDecalWashLevel(decal) {
    return GetDecalWashLevel(decal);
}
/**
 * ```
 * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
 * ```
 * Hash: 0xBAF107B6BB2C97F0 | ApiSet: undefined
 */
export function getSafeZoneSize() {
    return GetSafeZoneSize();
}
/**
 * Hash: 0x2F09F7976C512404 | ApiSet: undefined
 */
export function getIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius) {
    return GetIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius);
}
/**
 * ```
 * This function is hard-coded to always return 96.
 * ```
 * Hash: 0xDC54A7AF8B3A14EF | ApiSet: undefined
 */
export function getMaximumNumberOfCloudPhotos() {
    return GetMaximumNumberOfCloudPhotos();
}
/**
 * See [`GET_TIMECYCLE_MODIFIER_INDEX`](#\_0xFDF3D97C674AFB66) for use, works the same just for the secondary timecycle modifier.
 * Hash: 0xBB0527EC6341496D | ApiSet: undefined
 */
export function getExtraTimecycleModifierIndex() {
    return GetExtraTimecycleModifierIndex();
}
/**
 * Hash: 0x35FB78DC42B7BD21 | ApiSet: undefined
 */
export function getRequestingnightvision() {
    return GetRequestingnightvision();
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0x34D23450F028B0BF | ApiSet: undefined
 */
export function getMaximumNumberOfPhotos() {
    return GetMaximumNumberOfPhotos();
}
/**
 * Hash: 0xD80A80346A45D761 | ApiSet: undefined
 */
export function getScaleformMovieMethodReturnValueBool(methodReturn) {
    return GetScaleformMovieMethodReturnValueBool(methodReturn);
}
/**
 * Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
 * Hash: 0x2DE7EFA66B906036 | ApiSet: undefined
 */
export function getScaleformMovieMethodReturnValueInt(method_return) {
    return GetScaleformMovieMethodReturnValueInt(method_return);
}
/**
 * ```
 * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
 * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
 * For .NET users...
 * VB:
 * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
 * Dim x2dp, y2dp As New Native.OutputArgument
 * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
 * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
 * End Function
 * C#:
 * Vector2 World3DToScreen2d(Vector3 pos)
 * {
 * var x2dp = new OutputArgument();
 * var y2dp = new OutputArgument();
 * Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
 * return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
 * }
 * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
 * Used to be called _WORLD3D_TO_SCREEN2D
 * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
 * ```
 * Hash: 0x34E82F05DF2974F5 | ApiSet: undefined
 */
export function getScreenCoordFromWorldCoord(worldX, worldY, worldZ) {
    return GetScreenCoordFromWorldCoord(worldX, worldY, worldZ);
}
/**
 * Hash: 0x5CCABFFCA31DDE33 | ApiSet: undefined
 */
export function getScreenblurFadeCurrentTime() {
    return GetScreenblurFadeCurrentTime();
}
/**
 * Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
 * Hash: 0xE1E258829A885245 | ApiSet: undefined
 */
export function getScaleformMovieMethodReturnValueString(method_return) {
    return GetScaleformMovieMethodReturnValueString(method_return);
}
/**
 * Hash: 0x1670F8D05056F257 | ApiSet: undefined
 */
export function getStatusOfLoadMissionCreatorPhoto(p0) {
    return GetStatusOfLoadMissionCreatorPhoto(p0);
}
/**
 * Hardcoded to always return 1280x720. Use [`_GET_ACTIVE_SCREEN_RESOLUTION`](#\_0x873C9F3104101DD3) to retrieve the correct screen resolution.
 * Hash: 0x888D57E407E63624 | ApiSet: undefined
 */
export function getScreenResolution() {
    return GetScreenResolution();
}
/**
 * Hash: 0x0C0C4E81E1AC60A0 | ApiSet: undefined
 */
export function getStatusOfSaveHighQualityPhoto() {
    return GetStatusOfSaveHighQualityPhoto();
}
/**
 * Calculates the effective X/Y fractions when applying the values set by `SET_SCRIPT_GFX_ALIGN` and
 * `SET_SCRIPT_GFX_ALIGN_PARAMS`.
 * Hash: 0x6DD8F5AA635EB4B2 | ApiSet: undefined
 */
export function getScriptGfxPosition(x, y) {
    return GetScriptGfxPosition(x, y);
}
/**
 * Returns status of gallery photo fetch, which was requested by [`QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS`](#\_0x2A893980E96B659A).
 * Hash: 0xF5BED327CEA362B1 | ApiSet: undefined
 */
export function getStatusOfSortedListOperation(scanForSaving) {
    return GetStatusOfSortedListOperation(scanForSaving);
}
/**
 * Hash: 0x0D6CA79EEEBD8CA3 | ApiSet: undefined
 */
export function getStatusOfTakeHighQualityPhoto() {
    return GetStatusOfTakeHighQualityPhoto();
}
/**
 * Hash: 0x90A78ECAA4E78453 | ApiSet: undefined
 */
export function getStatusOfTakeMissionCreatorPhoto() {
    return GetStatusOfTakeMissionCreatorPhoto();
}
/**
 * ```
 * Only use for this in the PC scripts is:
 * `if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)`
 * For a full list, see here: pastebin.com/cnk7FTF2
 * ```
 * Hash: 0xFDF3D97C674AFB66 | ApiSet: undefined
 */
export function getTimecycleModifierIndex() {
    return GetTimecycleModifierIndex();
}
/**
 * Hash: 0x459FD2C8D0AB78BC | ApiSet: undefined
 */
export function getTimecycleTransitionModifierIndex() {
    return GetTimecycleTransitionModifierIndex();
}
/**
 * ```
 * Returns the texture resolution of the passed texture dict+name.
 * Note: Most texture resolutions are doubled compared to the console version of the game.
 * ```
 * Hash: 0x35736EE65BD00C11 | ApiSet: undefined
 */
export function getTextureResolution(textureDict, textureName) {
    return new Vector3(GetTextureResolution(textureDict, textureName));
}
/**
 * Hash: 0x2170813D3DD8661B | ApiSet: undefined
 */
export function getTvVolume() {
    return GetTvVolume();
}
/**
 * Hash: 0xFC1E275A90D39995 | ApiSet: undefined
 */
export function getTvChannel() {
    return GetTvChannel();
}
/**
 * Hash: 0xEB3DAC2C86001E5E | ApiSet: undefined
 */
export function getTogglePausedRenderphasesStatus() {
    return GetTogglePausedRenderphasesStatus();
}
/**
 * Hash: 0xFE26117A5841B2FF | ApiSet: undefined
 */
export function getVehicleCrewEmblemRequestState(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleCrewEmblemRequestState(_vehicle, p1);
}
/**
 * Hash: 0x2202A3F42C8E5F79 | ApiSet: undefined
 */
export function getUsingnightvision() {
    return GetUsingnightvision();
}
/**
 * Hash: 0x44B80ABAB9D80BD3 | ApiSet: undefined
 */
export function getUsingseethrough() {
    return GetUsingseethrough();
}
/**
 * Hash: 0xA51C4B86B71652AE | ApiSet: undefined
 */
export function golfTrailSetEnabled(toggle) {
    GolfTrailSetEnabled(toggle);
}
/**
 * Hash: 0xA4664972A9B8F8BA | ApiSet: undefined
 */
export function golfTrailGetVisualControlPoint(p0) {
    return new Vector3(GolfTrailGetVisualControlPoint(p0));
}
/**
 * Hash: 0xA4819F5E23E2FFAD | ApiSet: undefined
 */
export function golfTrailGetMaxHeight() {
    return GolfTrailGetMaxHeight();
}
/**
 * Hash: 0x12995F2E53FFA601 | ApiSet: undefined
 */
export function golfTrailSetColour(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    GolfTrailSetColour(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
}
/**
 * ```
 * p8 seems to always be false.
 * ```
 * Hash: 0x312342E1A4874F3F | ApiSet: undefined
 */
export function golfTrailSetPath(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    GolfTrailSetPath(p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
/**
 * Hash: 0x06F761EA47C1D3ED | ApiSet: undefined
 */
export function golfTrailSetFacing(p0) {
    GolfTrailSetFacing(p0);
}
/**
 * Hash: 0x2485D34E50A22E84 | ApiSet: undefined
 */
export function golfTrailSetRadius(p0, p1, p2) {
    GolfTrailSetRadius(p0, p1, p2);
}
/**
 * Hash: 0xDBAA5EC848BA2D46 | ApiSet: undefined
 */
export function golfTrailSetTessellation(p0, p1) {
    GolfTrailSetTessellation(p0, p1);
}
/**
 * ```
 * Only appeared in Golf & Golf_mp. Parameters were all ptrs
 * ```
 * Hash: 0x9CFDD90B2B844BF7 | ApiSet: undefined
 */
export function golfTrailSetShaderParams(p0, p1, p2, p3, p4) {
    GolfTrailSetShaderParams(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x302C91AB2D477F7E | ApiSet: undefined
 */
export function grassLodResetScriptAreas() {
    GrassLodResetScriptAreas();
}
/**
 * ```
 * 12 matches across 4 scripts. All 4 scripts were job creators.
 * type ranged from 0 - 2.
 * p4 was always 0.2f. Likely scale.
 * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
 * Tested but noticed nothing.
 * ```
 * Hash: 0xB1BB03742917A5D6 | ApiSet: undefined
 */
export function golfTrailSetFixedControlPoint(type, xPos, yPos, zPos, p4, red, green, blue, alpha) {
    GolfTrailSetFixedControlPoint(type, xPos, yPos, zPos, p4, red, green, blue, alpha);
}
/**
 * Hash: 0x85F01B8D5B90570E | ApiSet: undefined
 */
export function hasScaleformMovieLoaded(scaleformHandle) {
    return HasScaleformMovieLoaded(scaleformHandle);
}
/**
 * Hash: 0x8217150E1217EBFD | ApiSet: undefined
 */
export function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle) {
    return HasScaleformContainerMovieLoadedIntoParent(scaleformHandle);
}
/**
 * Hash: 0xDF6E5987D2B4D140 | ApiSet: undefined
 */
export function hasScaleformScriptHudMovieLoaded(hudComponent) {
    return HasScaleformScriptHudMovieLoaded(hudComponent);
}
/**
 * ```
 * Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
 * ```
 * Hash: 0x6D955F6A9E0295B1 | ApiSet: undefined
 */
export function grassLodShrinkScriptAreas(position, radius, p4, p5, p6) {
    GrassLodShrinkScriptAreas(position.x, position.y, position.z, radius, p4, p5, p6);
}
/**
 * Hash: 0x0145F696AAAAD2E4 | ApiSet: undefined
 */
export function hasStreamedTextureDictLoaded(textureDict) {
    return HasStreamedTextureDictLoaded(textureDict);
}
/**
 * ```
 * Only values used in the scripts are:
 * "heist_mp"
 * "heistmap_mp"
 * "instructional_buttons"
 * "heist_pre"
 * ```
 * Hash: 0x0C1C5D756FB5F337 | ApiSet: undefined
 */
export function hasScaleformMovieFilenameLoaded(scaleformName) {
    return HasScaleformMovieFilenameLoaded(scaleformName);
}
/**
 * Hash: 0xC694D74949CAFD0C | ApiSet: undefined
 */
export function isDecalAlive(decal) {
    return IsDecalAlive(decal);
}
/**
 * Check if a Scaleform movie with the given name has been loaded.
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x9743BCCF7CD6E1F6 | ApiSet: undefined
 */
export function hasScaleformMovieNamedLoaded(scaleformName) {
    return HasScaleformMovieNamedLoaded(scaleformName);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x86255B1FC929E33E | ApiSet: undefined
 */
export function isScaleformMovieDeleting(scaleformIndex) {
    return IsScaleformMovieDeleting(scaleformIndex);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x1F710BFF7DAE6261 | ApiSet: undefined
 */
export function isPlaylistUnk(tvChannel, p1) {
    return IsPlaylistUnk(tvChannel, p1);
}
/**
 * ```
 * Returns whether screen transition to blur/from blur is running.
 * ```
 * Hash: 0x7B226C785A52A0A9 | ApiSet: undefined
 */
export function isScreenblurFadeRunning() {
    return IsScreenblurFadeRunning();
}
/**
 * Hash: 0xC45CCDAAC9221CA8 | ApiSet: undefined
 */
export function isTrackedPointVisible(point) {
    return IsTrackedPointVisible(point);
}
/**
 * Hash: 0x0218BA067D249DEA | ApiSet: undefined
 */
export function _0x0218BA067D249DEA() {
    Citizen.invokeNative('0x0218BA067D249DEA');
}
/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
 * Hash: 0x768FF8961BA904D6 | ApiSet: undefined
 */
export function isScaleformMovieMethodReturnValueReady(method_return) {
    return IsScaleformMovieMethodReturnValueReady(method_return);
}
/**
 * Hash: 0xB66064452270E8F1 | ApiSet: undefined
 */
export function loadMovieMeshSet(movieMeshSetName) {
    return LoadMovieMeshSet(movieMeshSetName);
}
/**
 * Hash: 0x4862437A486F91B0 | ApiSet: undefined
 */
export function loadMissionCreatorPhoto(p0, p3) {
    return LoadMissionCreatorPhoto(p0, p3);
}
/**
 * Hash: 0x84C8D7C2D30D3280 | ApiSet: undefined
 */
export function moveVehicleDecals(p0, p1) {
    MoveVehicleDecals(p0, p1);
}
/**
 * ```
 * IS_*
 * ```
 * Hash: 0x0AD973CA1E077B60 | ApiSet: undefined
 */
export function isTvPlaylistItemPlaying(videoCliphash) {
    if (typeof videoCliphash === 'string')
        videoCliphash = this.getHashKey(videoCliphash);
    return IsTvPlaylistItemPlaying(videoCliphash);
}
/**
 * ```
 * DISABLE_S*
 * ```
 * Hash: 0x02369D5C8A51FDCF | ApiSet: undefined
 */
export function _0x02369D5C8A51FDCF(toggle) {
    Citizen.invokeNative('0x02369D5C8A51FDCF', toggle);
}
/**
 * Hash: 0x03300B57FCAC6DDB | ApiSet: undefined
 */
export function _0x03300B57FCAC6DDB(p0) {
    Citizen.invokeNative('0x03300B57FCAC6DDB', p0);
}
/**
 * Hash: 0x0E4299C549F0D1F1 | ApiSet: undefined
 */
export function _0x0E4299C549F0D1F1(toggle) {
    Citizen.invokeNative('0x0E4299C549F0D1F1', toggle);
}
/**
 * Hash: 0x1612C45F9E3E0D44 | ApiSet: undefined
 */
export function _0x1612C45F9E3E0D44() {
    Citizen.invokeNative('0x1612C45F9E3E0D44');
}
/**
 * Hash: 0x0AE73D8DF3A762B2 | ApiSet: undefined
 */
export function _0x0AE73D8DF3A762B2(p0) {
    Citizen.invokeNative('0x0AE73D8DF3A762B2', p0);
}
/**
 * ```
 * UI3DSCENE_*
 * ```
 * Hash: 0x108BE26959A9D9BB | ApiSet: undefined
 */
export function _0x108BE26959A9D9BB(toggle) {
    Citizen.invokeNative('0x108BE26959A9D9BB', toggle);
}
/**
 * Hash: 0x259BA6D4E6F808F1 | ApiSet: undefined
 */
export function _0x259BA6D4E6F808F1(p0) {
    Citizen.invokeNative('0x259BA6D4E6F808F1', p0);
}
/**
 * Hash: 0x14FC5833464340A8 | ApiSet: undefined
 */
export function _0x14FC5833464340A8() {
    Citizen.invokeNative('0x14FC5833464340A8');
}
/**
 * Hash: 0x1BBC135A4D25EDDE | ApiSet: undefined
 */
export function _0x1BBC135A4D25EDDE(p0) {
    Citizen.invokeNative('0x1BBC135A4D25EDDE', p0);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x2A251AA48B2B46DB | ApiSet: undefined
 */
export function _0x2A251AA48B2B46DB() {
    Citizen.invokeNative('0x2A251AA48B2B46DB');
}
/**
 * ```
 * SET_TRA*
 * ```
 * Hash: 0x1CBA05AE7BD7EE05 | ApiSet: undefined
 */
export function _0x1CBA05AE7BD7EE05(p0) {
    Citizen.invokeNative('0x1CBA05AE7BD7EE05', p0);
}
/**
 * Hash: 0x25FC3E33A31AD0C9 | ApiSet: undefined
 */
export function _0x25FC3E33A31AD0C9(p0) {
    Citizen.invokeNative('0x25FC3E33A31AD0C9', p0);
}
/**
 * Hash: 0x2C42340F916C5930 | ApiSet: undefined
 */
export function _0x2C42340F916C5930(p0) {
    return Citizen.invokeNative('0x2C42340F916C5930', p0);
}
/**
 * Hash: 0x27CFB1B1E078CB2D | ApiSet: undefined
 */
export function _0x27CFB1B1E078CB2D() {
    Citizen.invokeNative('0x27CFB1B1E078CB2D');
}
/**
 * Hash: 0x27FEB5254759CDE3 | ApiSet: undefined
 */
export function _0x27FEB5254759CDE3(textureDict, p1) {
    return Citizen.invokeNative('0x27FEB5254759CDE3', textureDict, p1);
}
/**
 * ```
 * Used in arcade games and Beam hack minigame in Doomsday Heist. For example, [Penetrator Arcade Game](https://streamable.com/8igrzw)
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x2D3B147AFAD49DE0 | ApiSet: undefined
 */
export function _0x2D3B147AFAD49DE0(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11) {
    Citizen.invokeNative('0x2D3B147AFAD49DE0', textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11);
}
/**
 * Hash: 0x2B40A97646381508 | ApiSet: undefined
 */
export function _0x2B40A97646381508(p0) {
    Citizen.invokeNative('0x2B40A97646381508', p0);
}
/**
 * Hash: 0x393BD2275CEB7793 | ApiSet: undefined
 */
export function _0x393BD2275CEB7793() {
    return Citizen.invokeNative('0x393BD2275CEB7793');
}
/**
 * Hash: 0x346EF3ECAAAB149E | ApiSet: undefined
 */
export function _0x346EF3ECAAAB149E() {
    Citizen.invokeNative('0x346EF3ECAAAB149E');
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x2FCB133CA50A49EB | ApiSet: undefined
 */
export function _0x2FCB133CA50A49EB(p0) {
    return Citizen.invokeNative('0x2FCB133CA50A49EB', p0);
}
/**
 * ```
 * GET_CURRENT_*
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x30432A0118736E00 | ApiSet: undefined
 */
export function _0x30432A0118736E00() {
    return Citizen.invokeNative('0x30432A0118736E00');
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x43FA7CBE20DAB219 | ApiSet: undefined
 */
export function _0x43FA7CBE20DAB219(p0) {
    Citizen.invokeNative('0x43FA7CBE20DAB219', p0);
}
/**
 * Hash: 0x5B0316762AFD4A64 | ApiSet: undefined
 */
export function _0x5B0316762AFD4A64() {
    return Citizen.invokeNative('0x5B0316762AFD4A64');
}
/**
 * Hash: 0x36F6626459D91457 | ApiSet: undefined
 */
export function _0x36F6626459D91457(p0) {
    Citizen.invokeNative('0x36F6626459D91457', p0);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Sets the given checkpoint target to the new coords
 * Hash: 0x3C788E7F6438754D | ApiSet: undefined
 */
export function _0x3C788E7F6438754D(checkpointHandle, position) {
    Citizen.invokeNative('0x3C788E7F6438754D', checkpointHandle, position.x, position.y, position.z);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x61F95E5BB3E0A8C6 | ApiSet: undefined
 */
export function _0x61F95E5BB3E0A8C6(p0) {
    Citizen.invokeNative('0x61F95E5BB3E0A8C6', p0);
}
/**
 * Hash: 0x4AF92ACD3141D96C | ApiSet: undefined
 */
export function _0x4AF92ACD3141D96C() {
    Citizen.invokeNative('0x4AF92ACD3141D96C');
}
/**
 * Hash: 0x54E22EA2C1956A8D | ApiSet: undefined
 */
export function _0x54E22EA2C1956A8D(p0) {
    Citizen.invokeNative('0x54E22EA2C1956A8D', p0);
}
/**
 * Hash: 0x46D1A61A21F566FC | ApiSet: undefined
 */
export function _0x46D1A61A21F566FC(p0) {
    Citizen.invokeNative('0x46D1A61A21F566FC', p0);
}
/**
 * Hash: 0x5DBF05DB5926D089 | ApiSet: undefined
 */
export function _0x5DBF05DB5926D089(p0) {
    Citizen.invokeNative('0x5DBF05DB5926D089', p0);
}
/**
 * Hash: 0x5DEBD9C4DC995692 | ApiSet: undefined
 */
export function _0x5DEBD9C4DC995692() {
    Citizen.invokeNative('0x5DEBD9C4DC995692');
}
/**
 * ```
 * DISABLE_*
 * ```
 * Hash: 0x5F6DF3D92271E8A1 | ApiSet: undefined
 */
export function _0x5F6DF3D92271E8A1(toggle) {
    Citizen.invokeNative('0x5F6DF3D92271E8A1', toggle);
}
/**
 * Hash: 0x649C97D52332341A | ApiSet: undefined
 */
export function _0x649C97D52332341A(p0) {
    Citizen.invokeNative('0x649C97D52332341A', p0);
}
/**
 * ```
 * Unknown. Called after creating a checkpoint (type: 51) in the creators.
 * ```
 * Hash: 0x615D3925E87A3B26 | ApiSet: undefined
 */
export function _0x615D3925E87A3B26(checkpoint) {
    Citizen.invokeNative('0x615D3925E87A3B26', checkpoint);
}
/**
 * ```
 * SET_F*
 * ```
 * Hash: 0x6A51F78772175A51 | ApiSet: undefined
 */
export function _0x6A51F78772175A51(toggle) {
    Citizen.invokeNative('0x6A51F78772175A51', toggle);
}
/**
 * ```
 * UI3DSCENE_*
 * ```
 * Hash: 0x7A42B2E236E71415 | ApiSet: undefined
 */
export function _0x7A42B2E236E71415() {
    Citizen.invokeNative('0x7A42B2E236E71415');
}
/**
 * Hash: 0x7AC24EAB6D74118D | ApiSet: undefined
 */
export function _0x7AC24EAB6D74118D(p0) {
    return Citizen.invokeNative('0x7AC24EAB6D74118D', p0);
}
/**
 * Hash: 0x759650634F07B6B4 | ApiSet: undefined
 */
export function _0x759650634F07B6B4(p0) {
    return Citizen.invokeNative('0x759650634F07B6B4', p0);
}
/**
 * Hash: 0x814AF7DCAACC597B | ApiSet: undefined
 */
export function _0x814AF7DCAACC597B(p0) {
    Citizen.invokeNative('0x814AF7DCAACC597B', p0);
}
/**
 * Hash: 0x82ACC484FFA3B05F | ApiSet: undefined
 */
export function _0x82ACC484FFA3B05F(p0) {
    return Citizen.invokeNative('0x82ACC484FFA3B05F', p0);
}
/**
 * Hash: 0x7FA5D82B8F58EC06 | ApiSet: undefined
 */
export function _0x7FA5D82B8F58EC06() {
    return Citizen.invokeNative('0x7FA5D82B8F58EC06');
}
/**
 * ```
 * Used only once in the scripts (taxi_clowncar)
 * SET_PARTICLE_FX_*
 * ```
 * Hash: 0x8CDE909A0370BB3A | ApiSet: undefined
 */
export function _0x8CDE909A0370BB3A(toggle) {
    Citizen.invokeNative('0x8CDE909A0370BB3A', toggle);
}
/**
 * Hash: 0x851CD923176EBA7C | ApiSet: undefined
 */
export function _0x851CD923176EBA7C() {
    Citizen.invokeNative('0x851CD923176EBA7C');
}
/**
 * ```
 * REQUEST_*
 * ```
 * Hash: 0x98EDF76A7271E4F2 | ApiSet: undefined
 */
export function _0x98EDF76A7271E4F2() {
    Citizen.invokeNative('0x98EDF76A7271E4F2');
}
/**
 * Hash: 0x9641588DAB93B4B5 | ApiSet: undefined
 */
export function _0x9641588DAB93B4B5(p0) {
    Citizen.invokeNative('0x9641588DAB93B4B5', p0);
}
/**
 * Hash: 0x949F397A288B28B3 | ApiSet: undefined
 */
export function _0x949F397A288B28B3(p0) {
    Citizen.invokeNative('0x949F397A288B28B3', p0);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x908311265D42A820 | ApiSet: undefined
 */
export function _0x908311265D42A820(p0) {
    Citizen.invokeNative('0x908311265D42A820', p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xAAE9BE70EC7C69AB | ApiSet: undefined
 */
export function _0xAAE9BE70EC7C69AB(p0, p1, p2, p3, p4, p5, p6, p7) {
    Citizen.invokeNative('0xAAE9BE70EC7C69AB', p0, p1, p2, p3, p4, p5, p6, p7);
}
/**
 * ```
 * FORCE_*
 * ```
 * Hash: 0x9B079E5221D984D3 | ApiSet: undefined
 */
export function _0x9B079E5221D984D3(p0) {
    Citizen.invokeNative('0x9B079E5221D984D3', p0);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x98D18905BF723B99 | ApiSet: undefined
 */
export function _0x98D18905BF723B99() {
    return Citizen.invokeNative('0x98D18905BF723B99');
}
/**
 * Hash: 0xB2EBE8CBC58B90E9 | ApiSet: undefined
 */
export function _0xB2EBE8CBC58B90E9() {
    return Citizen.invokeNative('0xB2EBE8CBC58B90E9');
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xADD6627C4D325458 | ApiSet: undefined
 */
export function _0xADD6627C4D325458(p0) {
    Citizen.invokeNative('0xADD6627C4D325458', p0);
}
/**
 * Hash: 0xA46B73FAA3460AE1 | ApiSet: undefined
 */
export function _0xA46B73FAA3460AE1(p0) {
    Citizen.invokeNative('0xA46B73FAA3460AE1', p0);
}
/**
 * ```
 * Setter for 0xE59343E9E96529E7
 * SET_M*
 * ```
 * Hash: 0xB3C641F3630BF6DA | ApiSet: undefined
 */
export function _0xB3C641F3630BF6DA(p0) {
    Citizen.invokeNative('0xB3C641F3630BF6DA', p0);
}
/**
 * Hash: 0xBA0127DA25FD54C9 | ApiSet: undefined
 */
export function _0xBA0127DA25FD54C9(p0, p1) {
    Citizen.invokeNative('0xBA0127DA25FD54C9', p0, p1);
}
/**
 * Hash: 0xAE51BC858F32BA66 | ApiSet: undefined
 */
export function _0xAE51BC858F32BA66(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0xAE51BC858F32BA66', p0, p1, p2, p3, p4);
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0xBE197EAA669238F4 | ApiSet: undefined
 */
export function _0xBE197EAA669238F4(p0, p1, p2, p3) {
    return Citizen.invokeNative('0xBE197EAA669238F4', p0, p1, p2, p3);
}
/**
 * Hash: 0xB569F41F3E7E83A4 | ApiSet: undefined
 */
export function _0xB569F41F3E7E83A4(p0) {
    Citizen.invokeNative('0xB569F41F3E7E83A4', p0);
}
/**
 * Hash: 0xBCEDB009461DA156 | ApiSet: undefined
 */
export function _0xBCEDB009461DA156() {
    return Citizen.invokeNative('0xBCEDB009461DA156');
}
/**
 * Hash: 0xBB90E12CAC1DAB25 | ApiSet: undefined
 */
export function _0xBB90E12CAC1DAB25(p0) {
    Citizen.invokeNative('0xBB90E12CAC1DAB25', p0);
}
/**
 * Hash: 0xC5C8F970D4EDFF71 | ApiSet: undefined
 */
export function _0xC5C8F970D4EDFF71(p0) {
    Citizen.invokeNative('0xC5C8F970D4EDFF71', p0);
}
/**
 * ```
 * SET_PARTICLE_FX_*
 * ```
 * Hash: 0xBA3D194057C79A7B | ApiSet: undefined
 */
export function _0xBA3D194057C79A7B(p0) {
    Citizen.invokeNative('0xBA3D194057C79A7B', p0);
}
/**
 * Hash: 0xCA465D9CC0D231BA | ApiSet: undefined
 */
export function _0xCA465D9CC0D231BA(p0) {
    Citizen.invokeNative('0xCA465D9CC0D231BA', p0);
}
/**
 * ```
 * GOLF_TRAIL_SET_*
 * ```
 * Hash: 0xC0416B061F2B7E5E | ApiSet: undefined
 */
export function _0xC0416B061F2B7E5E(p0) {
    Citizen.invokeNative('0xC0416B061F2B7E5E', p0);
}
/**
 * Hash: 0xC35A6D07C93802B2 | ApiSet: undefined
 */
export function _0xC35A6D07C93802B2() {
    Citizen.invokeNative('0xC35A6D07C93802B2');
}
/**
 * ```
 * SET_TV_???
 * ```
 * Hash: 0xD1C55B110E4DF534 | ApiSet: undefined
 */
export function _0xD1C55B110E4DF534(p0) {
    Citizen.invokeNative('0xD1C55B110E4DF534', p0);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xCFD16F0DB5A3535C | ApiSet: undefined
 */
export function _0xCFD16F0DB5A3535C(toggle) {
    Citizen.invokeNative('0xCFD16F0DB5A3535C', toggle);
}
/**
 * Hash: 0xCB82A0BF0E3E3265 | ApiSet: undefined
 */
export function _0xCB82A0BF0E3E3265(p0) {
    return Citizen.invokeNative('0xCB82A0BF0E3E3265', p0);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * This native is used for the "larger" circular checkpoints, and sets the circle/ring around the checkpoint to point in the same direction as the inner arrow
 * Hash: 0xDB1EA9411C8911EC | ApiSet: undefined
 */
export function _0xDB1EA9411C8911EC(checkpointHandle) {
    Citizen.invokeNative('0xDB1EA9411C8911EC', checkpointHandle);
}
/**
 * Hash: 0xCA4AE345A153D573 | ApiSet: undefined
 */
export function _0xCA4AE345A153D573(p0) {
    Citizen.invokeNative('0xCA4AE345A153D573', p0);
}
/**
 * Hash: 0xE2892E7E55D7073A | ApiSet: undefined
 */
export function _0xE2892E7E55D7073A(p0) {
    Citizen.invokeNative('0xE2892E7E55D7073A', p0);
}
/**
 * ```
 * Getter for 0xB3C641F3630BF6DA
 * GET_M*
 * ```
 * Hash: 0xE59343E9E96529E7 | ApiSet: undefined
 */
export function _0xE59343E9E96529E7() {
    return Citizen.invokeNative('0xE59343E9E96529E7');
}
/**
 * ```
 * TOGGLE_*
 * ```
 * Hash: 0xE63D7C6EECECB66B | ApiSet: undefined
 */
export function _0xE63D7C6EECECB66B(toggle) {
    Citizen.invokeNative('0xE63D7C6EECECB66B', toggle);
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0xE791DF1F73ED2C8B | ApiSet: undefined
 */
export function _0xE791DF1F73ED2C8B(p0) {
    return Citizen.invokeNative('0xE791DF1F73ED2C8B', p0);
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0xEC72C258667BE5EA | ApiSet: undefined
 */
export function _0xEC72C258667BE5EA(p0) {
    return Citizen.invokeNative('0xEC72C258667BE5EA', p0);
}
/**
 * Hash: 0xEF398BEEE4EF45F9 | ApiSet: undefined
 */
export function _0xEF398BEEE4EF45F9(p0) {
    Citizen.invokeNative('0xEF398BEEE4EF45F9', p0);
}
/**
 * Hash: 0xF78B803082D4386F | ApiSet: undefined
 */
export function _0xF78B803082D4386F(p0) {
    Citizen.invokeNative('0xF78B803082D4386F', p0);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xF3F776ADA161E47D | ApiSet: undefined
 */
export function _0xF3F776ADA161E47D(p0, p1) {
    Citizen.invokeNative('0xF3F776ADA161E47D', p0, p1);
}
/**
 * ```
 * AD*
 * ```
 * Hash: 0xEFABC7722293DA7C | ApiSet: undefined
 */
export function _0xEFABC7722293DA7C() {
    Citizen.invokeNative('0xEFABC7722293DA7C');
}
/**
 * Hash: 0xF51D36185993515D | ApiSet: undefined
 */
export function _0xF51D36185993515D(checkpoint, posX, posY, posZ, unkX, unkY, unkZ) {
    Citizen.invokeNative('0xF51D36185993515D', checkpoint, posX, posY, posZ, unkX, unkY, unkZ);
}
/**
 * Hash: 0xEFB55E7C25D3B3BE | ApiSet: undefined
 */
export function overrideInteriorSmokeEnd() {
    OverrideInteriorSmokeEnd();
}
/**
 * SET_CHECKPOINT_\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xFCF6788FC4860CD4 | ApiSet: undefined
 */
export function _0xFCF6788FC4860CD4(checkpoint) {
    Citizen.invokeNative('0xFCF6788FC4860CD4', checkpoint);
}
/**
 * Hash: 0x2A2A52824DB96700 | ApiSet: undefined
 */
export function overrideInteriorSmokeName(name) {
    OverrideInteriorSmokeName(name);
}
/**
 * Hash: 0x1600FD8CF72EBC12 | ApiSet: undefined
 */
export function overrideInteriorSmokeLevel(level) {
    OverrideInteriorSmokeLevel(level);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x70D2CC8A542A973C | ApiSet: undefined
 */
export function playBinkMovie(binkMovie) {
    PlayBinkMovie(binkMovie);
}
/**
 * Passes keyboard input to scaleform. You must call this native every frame. Once an input occurs, this native will return true and call `SET_PC_KEY` scaleform movie method with the key that has been inputted.
 * The key parameter which is passed to the scaleform can also be: "BACKSPACE", "ENTER" or "\x1b" (Which is ESC).
 * This native is only used in `web_browser.c` as of game build 2944.
 * Hash: 0xD1C7CB175E012964 | ApiSet: undefined
 */
export function passKeyboardInputToScaleform(scaleformHandle) {
    return PassKeyboardInputToScaleform(scaleformHandle);
}
/**
 * ```
 * REQUEST_STREAMED_TEXTURE_DICT("MPOnMissMarkers", false);
 * *uParam0.f_809 = add_decal(9120, vParam1, vVar4, vVar7, 2f, 2f, to_float(iVar0) / 255f, to_float(iVar1) / 255f, to_float(iVar2) / 255f, 1f, -1f, 1, 0, 0);
 * PATCH_DECAL_DIFFUSE_MAP(9120, "MPOnMissMarkers", "Capture_The_Flag_Base_Icon");
 * ```
 * Hash: 0x8A35C742130C6080 | ApiSet: undefined
 */
export function patchDecalDiffuseMap(decalType, textureDict, textureName) {
    PatchDecalDiffuseMap(decalType, textureDict, textureName);
}
/**
 * ```
 * Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
 * ```
 * Hash: 0x95EB5E34F821BABE | ApiSet: undefined
 */
export function overridePedBadgeTexture(ped, txd, txn) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return OverridePedBadgeTexture(_ped, txd, txn);
}
/**
 * Hash: 0x58F735290861E6B4 | ApiSet: undefined
 */
export function pushTimecycleModifier() {
    PushTimecycleModifier();
}
/**
 * ```
 * Only one match in the scripts:
 * `GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");`
 * ```
 * Hash: 0xD7021272EB0A451E | ApiSet: undefined
 */
export function presetInteriorAmbientCache(timecycleModifierName) {
    PresetInteriorAmbientCache(timecycleModifierName);
}
/**
 * Hash: 0x3C8938D7D872211E | ApiSet: undefined
 */
export function popTimecycleModifier() {
    PopTimecycleModifier();
}
/**
 * Queues a scan of all gallery photos.
 * Also see [`GET_STATUS_OF_SORTED_LIST_OPERATION`](#\_0xF5BED327CEA362B1)
 * Hash: 0x2A893980E96B659A | ApiSet: undefined
 */
export function queueOperationToCreateSortedListOfPhotos(scanForSaving) {
    return QueueOperationToCreateSortedListOfPhotos(scanForSaving);
}
/**
 * Hash: 0x9B6E70C5CEEF4EEB | ApiSet: undefined
 */
export function queryMovieMeshSetState(p0) {
    return QueryMovieMeshSetState(p0);
}
/**
 * Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
 * Hash: 0xA44FF770DFBC5DAE | ApiSet: undefined
 */
export function registerNoirScreenEffectThisFrame() {
    RegisterNoirScreenEffectThisFrame();
}
/**
 * Hash: 0xED3F346429CCD659 | ApiSet: undefined
 */
export function removeDecal(decal) {
    RemoveDecal(decal);
}
/**
 * Hash: 0xA6F6F70FDC6D144C | ApiSet: undefined
 */
export function removeDecalsFromObjectFacing(obj, position) {
    RemoveDecalsFromObjectFacing(obj, position.x, position.y, position.z);
}
/**
 * Hash: 0xEB119AA014E89183 | ApiSet: undefined
 */
export function releaseMovieMeshSet(movieMeshSet) {
    ReleaseMovieMeshSet(movieMeshSet);
}
/**
 * Hash: 0xC401503DFE8D53CF | ApiSet: undefined
 */
export function removeParticleFx(ptfxHandle, p1) {
    RemoveParticleFx(ptfxHandle, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x04D950EEFA4EED8C | ApiSet: undefined
 */
export function releaseBinkMovie(binkMovie) {
    ReleaseBinkMovie(binkMovie);
}
/**
 * Hash: 0xDD19FA1C6D657305 | ApiSet: undefined
 */
export function removeParticleFxInRange(position, radius) {
    RemoveParticleFxInRange(position.x, position.y, position.z, radius);
}
/**
 * Hash: 0xCCF71CBDDF5B6CB9 | ApiSet: undefined
 */
export function removeDecalsFromObject(obj) {
    RemoveDecalsFromObject(obj);
}
/**
 * Hash: 0xE91F1B65F2B48D57 | ApiSet: undefined
 */
export function removeDecalsFromVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveDecalsFromVehicle(_vehicle);
}
/**
 * Hash: 0xF44A5456AC3F4F97 | ApiSet: undefined
 */
export function removeScaleformScriptHudMovie(hudComponent) {
    RemoveScaleformScriptHudMovie(hudComponent);
}
/**
 * Hash: 0xD2300034310557E4 | ApiSet: undefined
 */
export function removeVehicleCrewEmblem(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveVehicleCrewEmblem(_vehicle, p1);
}
/**
 * Hash: 0xB8FEAEEBCC127425 | ApiSet: undefined
 */
export function removeParticleFxFromEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    RemoveParticleFxFromEntity(_entity);
}
/**
 * ```
 * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
 * ```
 * Hash: 0x5D6B2D4830A67C62 | ApiSet: undefined
 */
export function removeDecalsInRange(position, range) {
    RemoveDecalsInRange(position.x, position.y, position.z, range);
}
/**
 * Requests a scaleform movie, which has no widescreen adjustments while rendering (Useful for when your scaleform doesn't fully draw on the screen and borders are visible).
 * Hash: 0x65E7E78842E74CDB | ApiSet: undefined
 */
export function requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName) {
    return RequestScaleformMovieWithIgnoreSuperWidescreen(scaleformName);
}
/**
 * Hash: 0x11FE353CF9733E6F | ApiSet: undefined
 */
export function requestScaleformMovie(scaleformName) {
    return RequestScaleformMovie(scaleformName);
}
/**
 * Hash: 0x15E33297C3E8DC60 | ApiSet: undefined
 */
export function removeTcmodifierOverride(p0) {
    RemoveTcmodifierOverride(p0);
}
/**
 * Same as [REQUEST_SCALEFORM_MOVIE](#\_0x11FE353CF9733E6F), except it seems to fix stretched scaleforms on ultrawide.
 * Hash: 0xC514489CFB8AF806 | ApiSet: undefined
 */
export function requestScaleformMovieInstance(scaleformName) {
    return RequestScaleformMovieInstance(scaleformName);
}
/**
 * Hash: 0x9304881D6F6537EA | ApiSet: undefined
 */
export function requestScaleformScriptHudMovie(hudComponent) {
    RequestScaleformScriptHudMovie(hudComponent);
}
/**
 * Requests a scaleform movie that doesn't render when the game is paused (With [`SET_GAME_PAUSED`](#\_0x577D1284D6873711)).
 * Hash: 0xBD06C611BB9048C2 | ApiSet: undefined
 */
export function requestScaleformMovieSkipRenderWhilePaused(scaleformName) {
    return RequestScaleformMovieSkipRenderWhilePaused(scaleformName);
}
/**
 * Resets AnimPostFX adaptation.
 * Hash: 0xE3E2C1B4C59DBC77 | ApiSet: undefined
 */
export function resetAdaptation(numFrames) {
    ResetAdaptation(numFrames);
}
/**
 * Hash: 0xE1C8709406F2C41C | ApiSet: undefined
 */
export function resetPausedRenderphases() {
    ResetPausedRenderphases();
}
/**
 * Hash: 0x3DEC726C25A11BAC | ApiSet: undefined
 */
export function saveHighQualityPhoto(unused) {
    return SaveHighQualityPhoto(unused);
}
/**
 * ```
 * Resets the effect of SET_PARTICLE_FX_OVERRIDE
 * ```
 * Hash: 0x89C8553DD3274AAE | ApiSet: undefined
 */
export function resetParticleFxOverride(name) {
    ResetParticleFxOverride(name);
}
/**
 * ```
 * This function can requests texture dictonaries from following RPFs:
 * scaleform_generic.rpf
 * scaleform_minigames.rpf
 * scaleform_minimap.rpf
 * scaleform_web.rpf
 * last param isnt a toggle
 * ```
 * Hash: 0xDFA2EF8E04127DD5 | ApiSet: undefined
 */
export function requestStreamedTextureDict(textureDict, p1) {
    RequestStreamedTextureDict(textureDict, p1);
}
/**
 * This function resets the alignment set using `SET_SCRIPT_GFX_ALIGN` and `SET_SCRIPT_GFX_ALIGN_PARAMS` to the default
 * values ('I', 'I'; 0, 0, 0, 0). This should be used after having used the aforementioned functions in order to not affect
 * any other scripts attempting to draw.
 * Hash: 0xE3A3DB414A373DAB | ApiSet: undefined
 */
export function resetScriptGfxAlign() {
    ResetScriptGfxAlign();
}
/**
 * ```
 * Pushes an integer for the Scaleform function onto the stack.
 * ```
 * Hash: 0xC3D0841A0CC546A6 | ApiSet: undefined
 */
export function scaleformMovieMethodAddParamInt(value) {
    ScaleformMovieMethodAddParamInt(value);
}
/**
 * ```
 * Pushes a float for the Scaleform function onto the stack.
 * ```
 * Hash: 0xD69736AAE04DB51A | ApiSet: undefined
 */
export function scaleformMovieMethodAddParamFloat(value) {
    ScaleformMovieMethodAddParamFloat(value);
}
/**
 * Hash: 0x40AFB081F8ADD4EE | ApiSet: undefined
 */
export function returnTwo(p0) {
    return ReturnTwo(p0);
}
/**
 * ```
 * Pushes a boolean for the Scaleform function onto the stack.
 * ```
 * Hash: 0xC58424BA936EB458 | ApiSet: undefined
 */
export function scaleformMovieMethodAddParamBool(value) {
    ScaleformMovieMethodAddParamBool(value);
}
/**
 * Adds a literal string to a scaleform movie method.
 * There doesn't seem to be any difference between this and other `SCALEFORM_MOVIE_METHOD_ADD_PARAM_*_STRING` natives in game code.
 * Hash: 0x77FE3402004CD1B0 | ApiSet: undefined
 */
export function scaleformMovieMethodAddParamLiteralString(string) {
    ScaleformMovieMethodAddParamLiteralString(string);
}
/**
 * Values:
 * 0 - Dialogue Brief
 * 1 - Help Text Brief
 * 2 - Mission Objective Brief
 * Hash: 0xEC52C631A1831C03 | ApiSet: undefined
 */
export function scaleformMovieMethodAddParamLatestBriefString(value) {
    ScaleformMovieMethodAddParamLatestBriefString(value);
}
/**
 * Hash: 0xBA7148484BD90365 | ApiSet: undefined
 */
export function scaleformMovieMethodAddParamTextureNameString(string) {
    ScaleformMovieMethodAddParamTextureNameString(string);
}
/**
 * ```
 * This method is the equivalent to PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING when using it to add a new button (like "INSTRUCTIONAL_BUTTONS").
 * When switching with a controller, the icons update and become the controller's icons.
 * ```
 * Hash: 0xE83A3E3557A56640 | ApiSet: undefined
 */
export function scaleformMovieMethodAddParamPlayerNameString(string) {
    ScaleformMovieMethodAddParamPlayerNameString(string);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x43DBAE39626CE83F | ApiSet: undefined
 */
export function seethroughGetMaxThickness() {
    return SeethroughGetMaxThickness();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x70A64C0234EF522C | ApiSet: undefined
 */
export function seethroughReset() {
    SeethroughReset();
}
/**
 * Hash: 0x9D75795B9DC6EBBF | ApiSet: undefined
 */
export function seethroughSetFadeEndDistance(distance) {
    SeethroughSetFadeEndDistance(distance);
}
/**
 * Hash: 0x1086127B3A63505E | ApiSet: undefined
 */
export function seethroughSetColorNear(red, green, blue) {
    SeethroughSetColorNear(red, green, blue);
}
/**
 * Hash: 0xA78DE25577300BA1 | ApiSet: undefined
 */
export function seethroughSetFadeStartDistance(distance) {
    SeethroughSetFadeStartDistance(distance);
}
/**
 * Hash: 0x1636D7FC127B10D2 | ApiSet: undefined
 */
export function seethroughSetHiLightNoise(noise) {
    SeethroughSetHiLightNoise(noise);
}
/**
 * Hash: 0xD7D0B00177485411 | ApiSet: undefined
 */
export function seethroughSetHeatscale(index, heatScale) {
    SeethroughSetHeatscale(index, heatScale);
}
/**
 * Hash: 0x19E50EB6E33E1D28 | ApiSet: undefined
 */
export function seethroughSetHiLightIntensity(intensity) {
    SeethroughSetHiLightIntensity(intensity);
}
/**
 * Hash: 0xFEBFBFDFB66039DE | ApiSet: undefined
 */
export function seethroughSetNoiseAmountMax(amount) {
    SeethroughSetNoiseAmountMax(amount);
}
/**
 * Hash: 0x0C8FAC83902A62DF | ApiSet: undefined
 */
export function seethroughSetMaxThickness(thickness) {
    SeethroughSetMaxThickness(thickness);
}
/**
 * If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xE2B187C0939B3D32 | ApiSet: undefined
 */
export function setArtificialLightsStateAffectsVehicles(toggle) {
    SetArtificialLightsStateAffectsVehicles(toggle);
}
/**
 * Hash: 0xFF5992E1C9E65D05 | ApiSet: undefined
 */
export function seethroughSetNoiseAmountMin(amount) {
    SeethroughSetNoiseAmountMin(amount);
}
/**
 * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
 * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
 * Used in Humane Labs Heist for EMP.
 * Hash: 0x1268615ACE24D504 | ApiSet: undefined
 */
export function setArtificialLightsState(state) {
    SetArtificialLightsState(state);
}
/**
 * Creates an integer (usually 1) for a BINK movie to be called with other natives.
 * [List of all BINK movies (alphabetically ordered) as of b2802](https://gist.github.com/ItsJunction/8046f28c29ea8ff2821e9e4f933f595f)
 * Hash: 0x338D9F609FD632DB | ApiSet: undefined
 */
export function setBinkMovie(name) {
    return SetBinkMovie(name);
}
/**
 * Seeks a BINK movie to a specified position.
 * Hash: 0x0CB6B3446855B57A | ApiSet: undefined
 */
export function setBinkMovieTime(binkMovie, progress) {
    SetBinkMovieTime(binkMovie, progress);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x6805D58CAA427B72 | ApiSet: undefined
 */
export function setBinkShouldSkip(binkMovie, shouldSkip) {
    SetBinkShouldSkip(binkMovie, shouldSkip);
}
/**
 * ```
 * `binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)`
 * ```
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xAFF33B1178172223 | ApiSet: undefined
 */
export function setBinkMovieVolume(binkMovie, value) {
    SetBinkMovieVolume(binkMovie, value);
}
/**
 * ```
 * Sets the cylinder height of the checkpoint.
 * Parameters:
 * * nearHeight - The height of the checkpoint when inside of the radius.
 * * farHeight - The height of the checkpoint when outside of the radius.
 * * radius - The radius of the checkpoint.
 * ```
 * Hash: 0x2707AAE9D9297D89 | ApiSet: undefined
 */
export function setCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius) {
    SetCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius);
}
/**
 * Hash: 0x23BA6B0C2AD7B0D3 | ApiSet: undefined
 */
export function setBackfaceculling(toggle) {
    SetBackfaceculling(toggle);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xF816F2933752322D | ApiSet: undefined
 */
export function setBinkMovieUnk2(binkMovie, p1) {
    SetBinkMovieUnk2(binkMovie, p1);
}
/**
 * This multiplies the height of the icon inside a checkpoint with the default height of about 2 units above the checkpoint's coordinates.
 * Hash: 0x4B5B4DA5D79F1943 | ApiSet: undefined
 */
export function setCheckpointIconHeight(checkpoint, height_multiplier) {
    SetCheckpointIconHeight(checkpoint, height_multiplier);
}
/**
 * Hash: 0x44621483FF966526 | ApiSet: undefined
 */
export function setCheckpointIconScale(checkpoint, scale) {
    SetCheckpointIconScale(checkpoint, scale);
}
/**
 * ```
 * Sets the checkpoint color.
 * ```
 * Hash: 0x7167371E8AD747F7 | ApiSet: undefined
 */
export function setCheckpointRgba(checkpoint, red, green, blue, alpha) {
    SetCheckpointRgba(checkpoint, red, green, blue, alpha);
}
/**
 * Prevents gas / petrol decals (aka gas / petrol trails and puddles) to be ignited on fire during the frame in which the native is called.
 * **Note**: This native needs to be called every frame to prevent ignition.
 * Hash: 0xD9454B5752C857DC | ApiSet: undefined
 */
export function setDisablePetrolDecalsIgnitingThisFrame() {
    SetDisablePetrolDecalsIgnitingThisFrame();
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * ```
 * Hash: 0x175B6BFC15CDD0C5 | ApiSet: undefined
 */
export function setDebugLinesAndSpheresDrawingActive(enabled) {
    SetDebugLinesAndSpheresDrawingActive(enabled);
}
/**
 * ```
 * Sets the checkpoint icon color.
 * ```
 * Hash: 0xB9EA40907C680580 | ApiSet: undefined
 */
export function setCheckpointRgba2(checkpoint, red, green, blue, alpha) {
    SetCheckpointRgba2(checkpoint, red, green, blue, alpha);
}
/**
 * Hash: 0xBBF327DED94E4DEB | ApiSet: undefined
 */
export function setCurrentPlayerTcmodifier(modifierName) {
    SetCurrentPlayerTcmodifier(modifierName);
}
/**
 * Sets the on-screen drawing origin for draw-functions in world coordinates.
 * The effect can be reset by calling [`CLEAR_DRAW_ORIGIN`](#\_0xFF0B610F6BE0D7AF) and is limited to 32 different origins each frame.
 * Hash: 0xAA0008F3BBB8F416 | ApiSet: undefined
 */
export function setDrawOrigin(position, p3) {
    SetDrawOrigin(position.x, position.y, position.z, p3);
}
/**
 * Hash: 0x4B5CFC83122DF602 | ApiSet: undefined
 */
export function setDisableDecalRenderingThisFrame() {
    SetDisableDecalRenderingThisFrame();
}
/**
 * Hash: 0xE0E8BEECCA96BA31 | ApiSet: undefined
 */
export function setEntityIconVisibility(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityIconVisibility(_entity, toggle);
}
/**
 * Hash: 0x1D5F595CCAE2E238 | ApiSet: undefined
 */
export function setEntityIconColor(entity, red, green, blue, alpha) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityIconColor(_entity, red, green, blue, alpha);
}
/**
 * ```
 * Purpose of p0 and p1 unknown.
 * ```
 * Hash: 0x0AB84296FED9CFC6 | ApiSet: undefined
 */
export function setFlash(p0, p1, fadeIn, duration, fadeOut) {
    SetFlash(p0, p1, fadeIn, duration, fadeOut);
}
/**
 * Hash: 0x5096FD9CCB49056D | ApiSet: undefined
 */
export function setExtraTimecycleModifier(modifierName) {
    SetExtraTimecycleModifier(modifierName);
}
/**
 * ```
 * Forces footstep tracks on all surfaces.
 * USE_/USING_*
 * ```
 * Hash: 0xAEEDAD1420C65CC0 | ApiSet: undefined
 */
export function setForcePedFootstepsTracks(toggle) {
    SetForcePedFootstepsTracks(toggle);
}
/**
 * ```
 * Forces vehicle trails on all surfaces.
 * USE_/USING_*
 * ```
 * Hash: 0x4CC7F0FEA5283FE0 | ApiSet: undefined
 */
export function setForceVehicleTrails(toggle) {
    SetForceVehicleTrails(toggle);
}
/**
 * Hash: 0xBF59707B3E5ED531 | ApiSet: undefined
 */
export function setNextPlayerTcmodifier(modifierName) {
    SetNextPlayerTcmodifier(modifierName);
}
/**
 * Hash: 0xBA3D65906822BED5 | ApiSet: undefined
 */
export function setHidofOverride(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn) {
    SetHidofOverride(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
}
/**
 * Hash: 0xE787BF1C5CF823C9 | ApiSet: undefined
 */
export function setNoiseoveride(toggle) {
    SetNoiseoveride(toggle);
}
/**
 * ```
 * Enables Night Vision.
 * Example:
 * C#: Function.Call(Hash.SET_NIGHTVISION, true);
 * `C++: GRAPHICS::SET_NIGHTVISION(true);`
 * BOOL toggle:
 * true = turns night vision on for your player.
 * false = turns night vision off for your player.
 * ```
 * Hash: 0x18F621F7A5B1F85D | ApiSet: undefined
 */
export function setNightvision(toggle) {
    SetNightvision(toggle);
}
/**
 * Hash: 0x27E32866E9A5C416 | ApiSet: undefined
 */
export function setParticleFxBulletImpactScale(scale) {
    SetParticleFxBulletImpactScale(scale);
}
/**
 * Hash: 0xACEE6F360FC1F6B6 | ApiSet: undefined
 */
export function setParticleFxCamInsideNonplayerVehicle(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetParticleFxCamInsideNonplayerVehicle(_vehicle, p1);
}
/**
 * Hash: 0xCB6A7C3BB17A0C67 | ApiSet: undefined
 */
export function setNoisinessoveride(value) {
    SetNoisinessoveride(value);
}
/**
 * Hash: 0xEEC4047028426510 | ApiSet: undefined
 */
export function setParticleFxCamInsideVehicle(p0) {
    SetParticleFxCamInsideVehicle(p0);
}
/**
 * Hash: 0x726845132380142E | ApiSet: undefined
 */
export function setParticleFxLoopedAlpha(ptfxHandle, alpha) {
    SetParticleFxLoopedAlpha(ptfxHandle, alpha);
}
/**
 * Hash: 0x5F0C4B5B1C393BE2 | ApiSet: undefined
 */
export function setParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork) {
    SetParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork);
}
/**
 * Sets the colour tint of a previously started looped particle effect
 * You can use the [inverse lerp](https://www.gamedev.net/articles/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/) method to normalize in a range from 0.0 to 1.0 an rgb
 * Hash: 0x7F8F65877F88783B | ApiSet: undefined
 */
export function setParticleFxLoopedColour(ptfxHandle, r, g, b, bLocalOnly) {
    SetParticleFxLoopedColour(ptfxHandle, r, g, b, bLocalOnly);
}
/**
 * Hash: 0xDCB194B85EF7B541 | ApiSet: undefined
 */
export function setParticleFxLoopedFarClipDist(ptfxHandle, range) {
    SetParticleFxLoopedFarClipDist(ptfxHandle, range);
}
/**
 * ```
 * Usage example for C#:
 * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
 * Note: the argument alpha ranges from 0.0f-1.0f !
 * ```
 * Hash: 0x77168D722C58B2FC | ApiSet: undefined
 */
export function setParticleFxNonLoopedAlpha(alpha) {
    SetParticleFxNonLoopedAlpha(alpha);
}
/**
 * Hash: 0xB44250AAA456492D | ApiSet: undefined
 */
export function setParticleFxLoopedScale(ptfxHandle, scale) {
    SetParticleFxLoopedScale(ptfxHandle, scale);
}
/**
 * Hash: 0xEA1E2D93F6F75ED9 | ApiSet: undefined
 */
export function setParticleFxOverride(oldAsset, newAsset) {
    SetParticleFxOverride(oldAsset, newAsset);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x1E2E01C00837D26E | ApiSet: undefined
 */
export function setParticleFxNonLoopedEmitterScale(p0, p1, scale) {
    SetParticleFxNonLoopedEmitterScale(p0, p1, scale);
}
/**
 * Hash: 0x6D8EB211944DCE08 | ApiSet: undefined
 */
export function setScaleformMovieToUseSystemTime(scaleform, toggle) {
    SetScaleformMovieToUseSystemTime(scaleform, toggle);
}
/**
 * Hash: 0xF7DDEBEC43483C43 | ApiSet: undefined
 */
export function setParticleFxLoopedOffsets(ptfxHandle, position, rotX, rotY, rotZ) {
    SetParticleFxLoopedOffsets(ptfxHandle, position.x, position.y, position.z, rotX, rotY, rotZ);
}
/**
 * Only works on some fx's, while on others it might SEEM to work "properly", but the colors can be "strange" or even completly different from what you've expected. Reason for this is that those fx's might already have colors "baked into them" which then start to act as a "mixing palette", resulting in a different color than expected. A hypothetical example of this would be if the fx itself is already full (bright) red (RGB: 1.0, 0.0, 0.0) and you then set the color to (bright) green (RGB: 0.0, 1.0, 0.0), that it MIGHT result in Yellow (RGB: 1.0, 1.0, 0.0).
 * This doc previously stated that the set color is **NOT** networked, however it does actually turns out to be networked. Tested with all fireworks effects and several other FX effects resulted in colored fx effects on all clients when used in combination with [START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD](#\_0xF56B8137DF10135D).
 * This might however not be the case for all types of particle fx's, so it's recommended to test this thoroughly with multiple clients before releasing your script for example.
 * Hash: 0x26143A59EF48B262 | ApiSet: undefined
 */
export function setParticleFxNonLoopedColour(r, g, b) {
    SetParticleFxNonLoopedColour(r, g, b);
}
/**
 * Hash: 0x96EF97DAEB89BEF5 | ApiSet: undefined
 */
export function setParticleFxShootoutBoat(p0) {
    SetParticleFxShootoutBoat(p0);
}
/**
 * This function anchors script draws to a side of the safe zone. This needs to be called to make the interface
 * independent of the player's safe zone configuration.
 * These values are equivalent to `alignX` and `alignY` in `common:/data/ui/frontend.xml`, which can be used as a baseline
 * for default alignment.
 * Valid values for `horizontalAlign`, from original documentation:
 * *   **C (67)** - Center: DRAW_TEXT starts in the middle of the screen, while DRAW_RECT starts on the right; both move with
 * the right side of the screen.
 * *   **L (76)** - Left: Anchors to the left side, DRAW_RECT starts on the left side of the screen, same as DRAW_TEXT when
 * centered.
 * *   **R (82)** - Right: DRAW_TEXT starts on the left side (normal 0,0), while DRAW_RECT starts some short distance away
 * from the right side of the screen, both move with the right side of the screen.
 * Valid values for `verticalAlign`, from original documentation:
 * *   **B (66)** - Bottom: DRAW_RECT starts about as far as the middle of the map from the bottom, while DRAW_TEXT is about
 * rather centered.
 * *   **C (67)** - Center: It starts at a certain distance from the bottom, but the distance is fixed, the distance is
 * different from 66.
 * *   **T (84)** - Top: Anchors to the top, DRAW_RECT starts on the top of the screen, DRAW_TEXT just below it.
 * Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The
 * canonical value for this is 'I' (73).
 * For example, you can use `SET_SCRIPT_GFX_ALIGN(0, 84)` to only scale on the Y axis (to the top), but not change the X
 * axis.
 * To reset the value, use `RESET_SCRIPT_GFX_ALIGN`.
 * Hash: 0xB8A850F20A067EB6 | ApiSet: undefined
 */
export function setScriptGfxAlign(horizontalAlign, verticalAlign) {
    SetScriptGfxAlign(horizontalAlign, verticalAlign);
}
/**
 * Hash: 0x1D132D614DD86811 | ApiSet: undefined
 */
export function setScaleformMovieAsNoLongerNeeded(scaleformHandle) {
    SetScaleformMovieAsNoLongerNeeded(scaleformHandle);
}
/**
 * Hash: 0xBDEB86F4D5809204 | ApiSet: undefined
 */
export function setPlayerTcmodifierTransition(value) {
    SetPlayerTcmodifierTransition(value);
}
/**
 * ```
 * NativeDB Introduced: v573
 * ```
 * Configures a Scaleform movie to render to a large render target (1280x720), which is useful for ensuring higher quality and clarity in certain display scenarios. Such as displaying the name of an organization (CEO Office) in a visually impactful way for example.
 * Hash: 0x32F34FF7F617643B | ApiSet: undefined
 */
export function setScaleformMovieToUseLargeRt(scaleformMovieId, useLargeRT) {
    SetScaleformMovieToUseLargeRt(scaleformMovieId, useLargeRT);
}
/**
 * Sets the draw offset/calculated size for `SET_SCRIPT_GFX_ALIGN`. If using any alignment other than left/top, the game
 * expects the width/height to be configured using this native in order to get a proper starting position for the draw
 * command.
 * Hash: 0xF5A2C681787E579D | ApiSet: undefined
 */
export function setScriptGfxAlignParams(x, y, w, h) {
    SetScriptGfxAlignParams(x, y, w, h);
}
/**
 * Adjusts a scaleform movie's dimensions to fit a large rendertarget. Mostly used in casino scripts.
 * Hash: 0xE6A9F00D4240B519 | ApiSet: undefined
 */
export function setScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle) {
    SetScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle);
}
/**
 * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
 * Hash: 0xC6372ECD45D73BCD | ApiSet: undefined
 */
export function setScriptGfxDrawBehindPausemenu(flag) {
    SetScriptGfxDrawBehindPausemenu(flag);
}
/**
 * ```
 * Toggles Heatvision on/off.
 * ```
 * Hash: 0x7E08924259E08CE0 | ApiSet: undefined
 */
export function setSeethrough(toggle) {
    SetSeethrough(toggle);
}
/**
 * ```
 * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
 * Parameters:
 * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
 * ```
 * Hash: 0x2C933ABF17A1DF41 | ApiSet: undefined
 */
export function setTimecycleModifier(modifierName) {
    SetTimecycleModifier(modifierName);
}
/**
 * Hash: 0x164ECBB3CF750CB0 | ApiSet: undefined
 */
export function setTrackedPointInfo(point, position, radius) {
    SetTrackedPointInfo(point, position.x, position.y, position.z, radius);
}
/**
 * Sets the draw order for script draw commands.
 * Examples from decompiled scripts:
 * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);`
 * `GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v\_4, v\_5, v\_6, a\_0.\_f172, 0);`
 * `GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);`
 * `GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);`
 * ```cpp
 * enum eGfxDrawOrder
 * {
 * GFX_ORDER_BEFORE_HUD_PRIORITY_LOW = 0,
 * GFX_ORDER_BEFORE_HUD = 1,
 * GFX_ORDER_BEFORE_HUD_PRIORITY_HIGH = 2,
 * GFX_ORDER_AFTER_HUD_PRIORITY_LOW = 3,
 * GFX_ORDER_AFTER_HUD = 4,
 * GFX_ORDER_AFTER_HUD_PRIORITY_HIGH = 5,
 * GFX_ORDER_AFTER_FADE_PRIORITY_LOW = 6,
 * GFX_ORDER_AFTER_FADE = 7,
 * GFX_ORDER_AFTER_FADE_PRIORITY_HIGH = 8,
 * }
 * ```
 * Hash: 0x61BB1D9B3A95D802 | ApiSet: undefined
 */
export function setScriptGfxDrawOrder(order) {
    SetScriptGfxDrawOrder(order);
}
/**
 * This native doesn't work like [`SetWeatherTypeTransition`](#\_0x578C752848ECFA0C).
 * Hash: 0x3BCF567485E1971C | ApiSet: undefined
 */
export function setTransitionTimecycleModifier(modifierName, transition) {
    SetTransitionTimecycleModifier(modifierName, transition);
}
/**
 * Hash: 0x82E7FFCD5B2326B3 | ApiSet: undefined
 */
export function setTimecycleModifierStrength(strength) {
    SetTimecycleModifierStrength(strength);
}
/**
 * Hash: 0xBE2CACCF5A8AA805 | ApiSet: undefined
 */
export function setStreamedTextureDictAsNoLongerNeeded(textureDict) {
    SetStreamedTextureDictAsNoLongerNeeded(textureDict);
}
/**
 * Hash: 0xBAABBB23EB6E484E | ApiSet: undefined
 */
export function setTvChannel(channel) {
    SetTvChannel(channel);
}
/**
 * Loads specified video sequence into the TV Channel
 * TV_Channel ranges from 0-2
 * VideoSequence can be any of the following:
 * "PL_STD_CNT" CNT Standard Channel
 * "PL_STD_WZL" Weazel Standard Channel
 * "PL_LO_CNT"
 * "PL_LO_WZL"
 * "PL_SP_WORKOUT"
 * "PL_SP_INV" - Jay Norris Assassination Mission Fail
 * "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
 * "PL_LO_RS" - Righteous Slaughter Ad
 * "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
 * "PL_SP_PLSH1\_INTRO"
 * "PL_LES1\_FAME_OR_SHAME"
 * "PL_STD_WZL_FOS_EP2"
 * "PL_MP_WEAZEL" - Weazel Logo on loop
 * "PL_MP_CCTV" - Generic CCTV loop
 * Restart:
 * 0=video sequence continues as normal
 * 1=sequence restarts from beginning every time that channel is selected
 * The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
 * https://pastebin.com/zUzGB6h7
 * Hash: 0xF7B38B8305F1FE8B | ApiSet: undefined
 */
export function setTvChannelPlaylist(tvChannel, playlistName, restart) {
    SetTvChannelPlaylist(tvChannel, playlistName, restart);
}
/**
 * Hash: 0x2982BF73F66E9DDC | ApiSet: undefined
 */
export function setTvVolume(volume) {
    SetTvVolume(volume);
}
/**
 * ```
 * Probably changes tvs from being a 3d audio to being "global" audio
 * ```
 * Hash: 0x113D2C5DC57E1774 | ApiSet: undefined
 */
export function setTvAudioFrontend(toggle) {
    SetTvAudioFrontend(toggle);
}
/**
 * ```
 * network fx
 * ```
 * ```
 * NativeDB Added Parameter 13: Any p12
 * NativeDB Added Parameter 14: Any p13
 * NativeDB Added Parameter 15: Any p14
 * NativeDB Added Parameter 16: Any p15
 * ```
 * Hash: 0x6F60E89A7B64EE1D | ApiSet: undefined
 */
export function startNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartNetworkedParticleFxLoopedOnEntity(effectName, _entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
}
/**
 * NOTE: the [USE_PARTICLE_FX_ASSET](#\_0x6C38AF3693A69A91) needs to be called before EVERY StartNetworkedParticleFxNonLoopedAtCoord(....) call!
 * List with lots of particle effects: https://vespura.com/fivem/particle-list/
 * Note: Not all particles on this list are for non looped and vice versa, neither are all of them suited/meant to have SetParticleFxNonLoopedColour(....) called on them.
 * ```
 * NativeDB Added Parameter 12: BOOL p11
 * ```
 * Hash: 0xF56B8137DF10135D | ApiSet: undefined
 */
export function startNetworkedParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    return StartNetworkedParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
}
/**
 * ```
 * network fx
 * ```
 * ```
 * NativeDB Added Parameter 14: Any p13
 * NativeDB Added Parameter 15: Any p14
 * NativeDB Added Parameter 16: Any p15
 * NativeDB Added Parameter 17: Any p16
 * ```
 * Hash: 0xDDE23F30CC5A0F03 | ApiSet: undefined
 */
export function startNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartNetworkedParticleFxLoopedOnEntityBone(effectName, _entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
}
/**
 * Hash: 0x2201C576FACAEBE8 | ApiSet: undefined
 */
export function setTvChannelPlaylistAtHour(tvChannel, playlistName, hour) {
    SetTvChannelPlaylistAtHour(tvChannel, playlistName, hour);
}
/**
 * Hash: 0xC95EB1DB6E92113D | ApiSet: undefined
 */
export function startNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartNetworkedParticleFxNonLoopedOnEntity(effectName, _entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x02B1F2A72E0F5325 | ApiSet: undefined
 */
export function startNetworkedParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartNetworkedParticleFxNonLoopedOnEntityBone(effectName, _entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
}
/**
 * Hash: 0x1AE42C1660FD6517 | ApiSet: undefined
 */
export function startParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartParticleFxLoopedOnEntity(effectName, _entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
}
/**
 * Hash: 0xA41B6A43642AC2CF | ApiSet: undefined
 */
export function startNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return StartNetworkedParticleFxNonLoopedOnPedBone(effectName, _ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
}
/**
 * Hash: 0xF28DA9F38CD1787C | ApiSet: undefined
 */
export function startParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return StartParticleFxLoopedOnPedBone(effectName, _ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
}
/**
 * Hash: 0xC6EB449E33977F0B | ApiSet: undefined
 */
export function startParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartParticleFxLoopedOnEntityBone(effectName, _entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
}
/**
 * ```
 * `GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)`
 * p11 seems to be always 0
 * ```
 * Hash: 0xE184F4F0DC5910E7 | ApiSet: undefined
 */
export function startParticleFxLoopedAtCoord(effectName, position, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) {
    return StartParticleFxLoopedAtCoord(effectName, position.x, position.y, position.z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
}
/**
 * ```
 * `GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);`
 * Axis - Invert Axis Flags
 * list: pastebin.com/N9unUFWY
 * -------------------------------------------------------------------
 * C#
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
 * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
 * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
 * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
 * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
 * bool xaxis, yaxis, zaxis = To bool the axis values.
 * example:
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
 * ```
 * Hash: 0x25129531F77B9ED3 | ApiSet: undefined
 */
export function startParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) {
    return StartParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
}
/**
 * ```
 * `GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);`
 * Axis - Invert Axis Flags
 * list: pastebin.com/N9unUFWY
 * ```
 * Hash: 0x0E7E72961BA18619 | ApiSet: undefined
 */
export function startParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return StartParticleFxNonLoopedOnPedBone(effectName, _ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
}
/**
 * ```
 * Starts a particle effect on an entity for example your player.
 * List: pastebin.com/N9unUFWY
 * Example:
 * C#:
 * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
 * `Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE`
 * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
 * ```
 * Hash: 0x0D53A3B8DA0809D2 | ApiSet: undefined
 */
export function startParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartParticleFxNonLoopedOnEntity(effectName, _entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
}
/**
 * Hash: 0x99AC7F0D8B9C893D | ApiSet: undefined
 */
export function startPetrolTrailDecals(p0) {
    StartPetrolTrailDecals(p0);
}
/**
 * Switches the rendering display to exclude everything except PostFX, resulting in a frozen screen before the UI pass.
 * Hash: 0xDFC252D8A3E15AB7 | ApiSet: undefined
 */
export function togglePausedRenderphases(toggle) {
    TogglePausedRenderphases(toggle);
}
/**
 * This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
 * This requires these two natives to be called as well to configure the grid: [`TERRAINGRID_SET_PARAMS`](#\_0x1C4FC5752BCD8E48) and [`TERRAINGRID_SET_COLOURS`](#\_0x5CE62918F8D703C7).
 * Hash: 0xA356990E161C9E65 | ApiSet: undefined
 */
export function terraingridActivate(toggle) {
    TerraingridActivate(toggle);
}
/**
 * Hash: 0xA328A24AAA6B7FDC | ApiSet: undefined
 */
export function triggerScreenblurFadeIn(transitionTime) {
    return TriggerScreenblurFadeIn(transitionTime);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x63606A61DE68898A | ApiSet: undefined
 */
export function stopBinkMovie(binkMovie) {
    StopBinkMovie(binkMovie);
}
/**
 * ```
 * p1 is always 0 in the native scripts
 * ```
 * Hash: 0x8F75998877616996 | ApiSet: undefined
 */
export function stopParticleFxLooped(ptfxHandle, p1) {
    StopParticleFxLooped(ptfxHandle, p1);
}
/**
 * Hash: 0xD3A10FC7FD8D98CD | ApiSet: undefined
 */
export function ui3dsceneIsAvailable() {
    return Ui3dsceneIsAvailable();
}
/**
 * This native is used along with these two natives: [`TERRAINGRID_ACTIVATE`](#\_0xA356990E161C9E65) and [`TERRAINGRID_SET_PARAMS`](#\_0x1C4FC5752BCD8E48).
 * This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * Old description:
 * Only called in golf and golf_mp\
 * parameters used are\
 * `GRAPHICS::\_0x5CE62918F8D703C7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);`
 * Hash: 0x5CE62918F8D703C7 | ApiSet: undefined
 */
export function terraingridSetColours(lowR, lowG, lowB, lowAlpha, R, G, B, Alpha, highR, highG, highB, highAlpha) {
    TerraingridSetColours(lowR, lowG, lowB, lowAlpha, R, G, B, Alpha, highR, highG, highB, highAlpha);
}
/**
 * This native is used along with these two natives: [`TERRAINGRID_ACTIVATE`](#\_0xA356990E161C9E65) and [`TERRAINGRID_SET_COLOURS`](#\_0x5CE62918F8D703C7).
 * This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * Hash: 0x1C4FC5752BCD8E48 | ApiSet: undefined
 */
export function terraingridSetParams(position, p3, rotation, p5, width, height, p8, scale, glowIntensity, normalHeight, heightDiff) {
    TerraingridSetParams(position.x, position.y, position.z, p3, rotation, p5, width, height, p8, scale, glowIntensity, normalHeight, heightDiff);
}
/**
 * Hash: 0xDEADC0DEDEADC0DE | ApiSet: undefined
 */
export function updateLightsOnEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    UpdateLightsOnEntity(_entity);
}
/**
 * ```
 * `GRAPHICS::UNPATCH_DECAL_DIFFUSE_MAP(9123);`
 * `GRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED("MPMissMarkers256");`
 * ```
 * Hash: 0xB7ED70C49521A61D | ApiSet: undefined
 */
export function unpatchDecalDiffuseMap(decalType) {
    UnpatchDecalDiffuseMap(decalType);
}
/**
 * ```
 * All presets can be found in common\data\ui\uiscenes.meta
 * ```
 * Hash: 0xF1CEA8A4198D8E9A | ApiSet: undefined
 */
export function ui3dscenePushPreset(presetName) {
    return Ui3dscenePushPreset(presetName);
}
/**
 * Hash: 0x5B712761429DBC14 | ApiSet: undefined
 */
export function washDecalsFromVehicle(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    WashDecalsFromVehicle(_vehicle, p1);
}
/**
 * Hash: 0xEFACC8AEF94430D5 | ApiSet: undefined
 */
export function triggerScreenblurFadeOut(transitionTime) {
    return TriggerScreenblurFadeOut(transitionTime);
}
/**
 * ```
 * From the b678d decompiled scripts:
 * `GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler");`
 * `GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp");`
 * `GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks");`
 * `GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane");`
 * `GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator");`
 * `GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist");`
 * `GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");`
 * ```
 * Hash: 0x6C38AF3693A69A91 | ApiSet: undefined
 */
export function useParticleFxAsset(name) {
    UseParticleFxAsset(name);
}
/**
 * Hash: 0x9C30613D50A6ADEF | ApiSet: undefined
 */
export function washDecalsInRange(p0, p1, p2, p3, p4) {
    WashDecalsInRange(p0, p1, p2, p3, p4);
}
/**
 * ```
 * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
 * I can confirm the above. This function is hard-coded to always return 1.
 * ```
 * Hash: 0xC4E2813898C97A4B | ApiSet: undefined
 */
export function canPhoneBeSeenOnScreen() {
    return CanPhoneBeSeenOnScreen();
}
/**
 * Activates the cellphone camera. Make sure you have a mobile phone created with [`CREATE_MOBILE_PHONE`](#\_0xA4E8E696C532FBC7) or else the camera will not work.
 * Hash: 0xFDE8F069C542D126 | ApiSet: undefined
 */
export function cellCamActivate(active, bGoFirstPerson) {
    CellCamActivate(active, bGoFirstPerson);
}
/**
 * Toggles the selfie mode on the cellphone camera. Only visible when the cell phone camera is active.
 * Hash: 0x015C49A93E3E086E | ApiSet: undefined
 */
export function cellCamActivateSelfieMode(toggle) {
    CellCamActivateSelfieMode(toggle);
}
/**
 * Hash: 0x466DA42C89865553 | ApiSet: undefined
 */
export function cellCamSetHeadHeight(p0) {
    CellCamSetHeadHeight(p0);
}
/**
 * Hash: 0x439E9BC95B7E7FBE | ApiSet: undefined
 */
export function cellCamIsCharVisibleNoFaceCheck(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return CellCamIsCharVisibleNoFaceCheck(_entity);
}
/**
 * Hash: 0x53F4892D18EC90A4 | ApiSet: undefined
 */
export function cellCamSetDistance(p0) {
    CellCamSetDistance(p0);
}
/**
 * Moves the character's finger in a swiping motion when holding a cellphone in their hand through the use of the [CREATE_MOBILE_PHONE](#\_0xA4E8E696C532FBC7) native.
 * ```cpp
 * enum eCellInput {
 * CELL_INPUT_NONE = 0,
 * CELL_INPUT_UP = 1,
 * CELL_INPUT_DOWN = 2,
 * CELL_INPUT_LEFT = 3,
 * CELL_INPUT_RIGHT = 4,
 * CELL_INPUT_SELECT = 5
 * }
 * ```
 * Hash: 0x95C9E72F3D7DEC9B | ApiSet: undefined
 */
export function cellCamMoveFinger(direction) {
    CellCamMoveFinger(direction);
}
/**
 * Hash: 0xF1E22DC13F5EEBAD | ApiSet: undefined
 */
export function cellCamSetHeadRoll(p0) {
    CellCamSetHeadRoll(p0);
}
/**
 * ```
 * if the bool "Toggle" is "true" so the phone is lean.
 * if the bool "Toggle" is "false" so the phone is not lean.
 * ```
 * Hash: 0x44E44169EF70138E | ApiSet: undefined
 */
export function cellCamSetLean(toggle) {
    CellCamSetLean(toggle);
}
/**
 * Hash: 0xD6ADE981781FCA09 | ApiSet: undefined
 */
export function cellCamSetHeadPitch(p0) {
    CellCamSetHeadPitch(p0);
}
/**
 * Hash: 0x1B0B4AEED5B9B41C | ApiSet: undefined
 */
export function cellCamSetHorizontalOffset(p0) {
    CellCamSetHorizontalOffset(p0);
}
/**
 * Hash: 0x15E69E2802C24B8D | ApiSet: undefined
 */
export function cellCamSetRoll(p0) {
    CellCamSetRoll(p0);
}
/**
 * Hash: 0x3117D84EFA60F77B | ApiSet: undefined
 */
export function cellCamSetVerticalOffset(p0) {
    CellCamSetVerticalOffset(p0);
}
/**
 * ```
 * Creates a mobile phone of the specified type.
 * Possible phone types:
 * 0 - Default phone / Michael's phone
 * 1 - Trevor's phone
 * 2 - Franklin's phone
 * 4 - Prologue phone
 * These values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.
 * ```
 * Hash: 0xA4E8E696C532FBC7 | ApiSet: undefined
 */
export function createMobilePhone(phoneType) {
    CreateMobilePhone(phoneType);
}
/**
 * Hash: 0x1CEFB61F193070AE | ApiSet: undefined
 */
export function getMobilePhoneRotation(p1) {
    const _p1 = p1 instanceof Entity ? p1.handle() : p1;
    const result = GetMobilePhoneRotation(_p1);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * ```
 * Destroys the currently active mobile phone.
 * ```
 * Hash: 0x3BC861DF703E5097 | ApiSet: undefined
 */
export function destroyMobilePhone() {
    DestroyMobilePhone();
}
/**
 * Hash: 0x584FDFDA48805B86 | ApiSet: undefined
 */
export function getMobilePhonePosition() {
    const result = GetMobilePhonePosition();
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0xAC2890471901861C | ApiSet: undefined
 */
export function _0xAC2890471901861C(p0) {
    Citizen.invokeNative('0xAC2890471901861C', p0);
}
/**
 * Hash: 0xB4A53E05F68B6FA1 | ApiSet: undefined
 */
export function getMobilePhoneRenderId() {
    return GetMobilePhoneRenderId();
}
/**
 * ```
 * If bool Toggle = true so the mobile is hide to screen.
 * If bool Toggle = false so the mobile is show to screen.
 * ```
 * Hash: 0xF511F759238A5122 | ApiSet: undefined
 */
export function scriptIsMovingMobilePhoneOffscreen(toggle) {
    ScriptIsMovingMobilePhoneOffscreen(toggle);
}
/**
 * Toggles depth of field on the cellphone camera.
 * Hash: 0x375A706A5C2FD084 | ApiSet: undefined
 */
export function setMobilePhoneDofState(toggle) {
    SetMobilePhoneDofState(toggle);
}
/**
 * ```
 * Needs more research. If the "phone_cam12" filter is applied, this function is called with "TRUE"; otherwise, "FALSE".
 * Example (XBOX 360):
 * // check current filter selection
 * `if (MISC::ARE_STRINGS_EQUAL(getElem(g_2471024, &l_17, 4), "phone_cam12") != 0)`
 * {
 * `MOBILE::_0xC273BB4D(0); // FALSE`
 * }
 * else
 * {
 * `MOBILE::_0xC273BB4D(1); // TRUE`
 * }
 * ```
 * Hash: 0xA2CCBE62CD4C91A4 | ApiSet: undefined
 */
export function _0xA2CCBE62CD4C91A4() {
    return Citizen.invokeNative('0xA2CCBE62CD4C91A4');
}
/**
 * ```
 * Last parameter is unknown and always zero.
 * ```
 * Hash: 0xBB779C0CA917E865 | ApiSet: undefined
 */
export function setMobilePhoneRotation(rotX, rotY, rotZ, p3) {
    SetMobilePhoneRotation(rotX, rotY, rotZ, p3);
}
/**
 * Hash: 0x693A5C6D6734085B | ApiSet: undefined
 */
export function setMobilePhonePosition(posX, posY, posZ) {
    SetMobilePhonePosition(posX, posY, posZ);
}
/**
 * ```
 * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
 * ```
 * Hash: 0xCBDD322A73D6D932 | ApiSet: undefined
 */
export function setMobilePhoneScale(scale) {
    SetMobilePhoneScale(scale);
}
/**
 * Create a blip that by default is red (enemy), you can use [SET_BLIP_AS_FRIENDLY](#\_0xC6F43D0E) to make it blue (friend).\
 * Can be used for objects, vehicles and peds.
 * Example of enemy:
 * ![enemy](https://i.imgur.com/fl78svv.png)
 * Example of friend:
 * ![friend](https://i.imgur.com/Q16ho5d.png)
 * Hash: 0x5CDE92C702A8FCE7 | ApiSet: undefined
 */
export function addBlipForEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return AddBlipForEntity(_entity);
}
/**
 * Hash: 0xBE339365C863BD36 | ApiSet: undefined
 */
export function addBlipForPickup(pickup) {
    return AddBlipForPickup(pickup);
}
/**
 * Adds a rectangular blip for the specified coordinates/area.
 * It is recommended to use [SET_BLIP_ROTATION](#\_0xF87683CDF73C3F6E) and [SET_BLIP_COLOUR](#\_0x03D7FB09E75D6B7E) to make the blip not rotate along with the camera.
 * By default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view.
 * Example image:
 * ![minimap](https://i.imgur.com/qLbXWcQ.png)
 * ![big map](https://i.imgur.com/0j7O7Rh.png)
 * (Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
 * Hash: 0xCE5D0E5E315DB238 | ApiSet: undefined
 */
export function addBlipForArea(position, width, height) {
    return AddBlipForArea(position.x, position.y, position.z, width, height);
}
/**
 * Does stuff like this:\
 * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617\
 * Example:\
 * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");\
 * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);\
 * BOOL p1 is a toggle to define the game in pause.\
 * int p2 is unknown but -1 always works, not sure why though.\
 * \[30/03/2017] ins1de :\
 * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.\
 * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);\
 * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.
 * Below is a list of all known Frontend Menu Hashes.
 * *   FE_MENU_VERSION_SP_PAUSE
 * *   FE_MENU_VERSION_MP_PAUSE
 * *   FE_MENU_VERSION_CREATOR_PAUSE
 * *   FE_MENU_VERSION_CUTSCENE_PAUSE
 * *   FE_MENU_VERSION_SAVEGAME
 * *   FE_MENU_VERSION_PRE_LOBBY
 * *   FE_MENU_VERSION_LOBBY
 * *   FE_MENU_VERSION_MP_CHARACTER_SELECT
 * *   FE_MENU_VERSION_MP_CHARACTER_CREATION
 * *   FE_MENU_VERSION_EMPTY
 * *   FE_MENU_VERSION_EMPTY_NO_BACKGROUND
 * *   FE_MENU_VERSION_TEXT_SELECTION
 * *   FE_MENU_VERSION_CORONA
 * *   FE_MENU_VERSION_CORONA_LOBBY
 * *   FE_MENU_VERSION_CORONA_JOINED_PLAYERS
 * *   FE_MENU_VERSION_CORONA_INVITE_PLAYERS
 * *   FE_MENU_VERSION_CORONA_INVITE_FRIENDS
 * *   FE_MENU_VERSION_CORONA_INVITE_CREWS
 * *   FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
 * *   FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
 * *   FE_MENU_VERSION_CORONA_RACE
 * *   FE_MENU_VERSION_CORONA_BETTING
 * *   FE_MENU_VERSION_JOINING_SCREEN
 * *   FE_MENU_VERSION_LANDING_MENU
 * *   FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
 * Hash: 0xEF01D36B9C9D0C7B | ApiSet: undefined
 */
export function activateFrontendMenu(menuhash, togglePause, component) {
    if (typeof menuhash === 'string')
        menuhash = this.getHashKey(menuhash);
    ActivateFrontendMenu(menuhash, togglePause, component);
}
/**
 * Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.
 * Hash: 0x5A039BB0BCA604B6 | ApiSet: undefined
 */
export function addBlipForCoord(position) {
    return AddBlipForCoord(position.x, position.y, position.z);
}
/**
 * Hash: 0x60296AF4BA14ABC5 | ApiSet: undefined
 */
export function addNextMessageToPreviousBriefs(addToBrief) {
    AddNextMessageToPreviousBriefs(addToBrief);
}
/**
 * Hash: 0x80EAD8E2E1D5D52E | ApiSet: undefined
 */
export function addTextComponentSubstringBlipName(blip) {
    AddTextComponentSubstringBlipName(blip);
}
/**
 * Hash: 0x311438A071DD9B1A | ApiSet: undefined
 */
export function addPointToGpsCustomRoute(position) {
    AddPointToGpsCustomRoute(position.x, position.y, position.z);
}
/**
 * Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use [AddBlipCoords](#\_0xC6F43D0E))
 * Example image:
 * ![example](https://i.imgur.com/9hQl3DB.png)
 * Hash: 0x46818D79B1F7499A | ApiSet: undefined
 */
export function addBlipForRadius(posX, posY, posZ, radius) {
    return AddBlipForRadius(posX, posY, posZ, radius);
}
/**
 * Hash: 0xA905192A6781C41B | ApiSet: undefined
 */
export function addPointToGpsMultiRoute(position) {
    AddPointToGpsMultiRoute(position.x, position.y, position.z);
}
/**
 * Hash: 0x0E4C749FF9DE9CC4 | ApiSet: undefined
 */
export function addTextComponentFormattedInteger(value, commaSeparated) {
    AddTextComponentFormattedInteger(value, commaSeparated);
}
/**
 * Hash: 0x03B504CF259931BC | ApiSet: undefined
 */
export function addTextComponentInteger(value) {
    AddTextComponentInteger(value);
}
/**
 * Adds a float to a text component placeholder, replacing `~1~` in the current text command's text label.
 * ![Example output](https://i.imgur.com/jvuQ0II.png)
 * Hash: 0xE7DCB5B874BCD96E | ApiSet: undefined
 */
export function addTextComponentFloat(value, decimalPlaces) {
    AddTextComponentFloat(value, decimalPlaces);
}
/**
 * Certain characters like `<` will have to be escaped using html entities (e.g. `&lt;`), otherwise the text wont display properly.
 * Hash: 0x5F68520888E69014 | ApiSet: undefined
 */
export function addTextComponentSubstringKeyboardDisplay(string) {
    AddTextComponentSubstringKeyboardDisplay(string);
}
/**
 * ```
 * p1 was always -1
 * ```
 * Hash: 0x761B77454205A61D | ApiSet: undefined
 */
export function addTextComponentSubstringPhoneNumber(p0, p1) {
    AddTextComponentSubstringPhoneNumber(p0, p1);
}
/**
 * Hash: 0xC63CD5D2920ACBE7 | ApiSet: undefined
 */
export function addTextComponentSubstringTextLabel(labelName) {
    AddTextComponentSubstringTextLabel(labelName);
}
/**
 * Adds an arbitrary string as a text component placeholder, replacing `~a~` in the current text command's text label.
 * See the documentation on text formatting for more information.
 * Hash: 0x6C188BE134E074AA | ApiSet: undefined
 */
export function addTextComponentSubstringPlayerName(text) {
    AddTextComponentSubstringPlayerName(text);
}
/**
 * ```
 * This native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)
 * ```
 * Hash: 0x94CF4AC034C9C986 | ApiSet: undefined
 */
export function addTextComponentSubstringWebsite(website) {
    AddTextComponentSubstringWebsite(website);
}
/**
 * ```
 * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
 * ```
 * Hash: 0x17299B63C7683A2B | ApiSet: undefined
 */
export function addTextComponentSubstringTextLabelHashKey(gxtEntryHash) {
    if (typeof gxtEntryHash === 'string')
        gxtEntryHash = this.getHashKey(gxtEntryHash);
    AddTextComponentSubstringTextLabelHashKey(gxtEntryHash);
}
/**
 * ```
 * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
 * ```
 * Hash: 0x1115F16B8AB9E8BF | ApiSet: undefined
 */
export function addTextComponentSubstringTime(timestamp, flags) {
    AddTextComponentSubstringTime(timestamp, flags);
}
/**
 * Allows opening the pause menu this frame, when the player is dead.
 * Hash: 0xCC3FDDED67BCFC63 | ApiSet: undefined
 */
export function allowPauseMenuWhenDeadThisFrame() {
    AllowPauseMenuWhenDeadThisFrame();
}
/**
 * Hash: 0x60734CC207C9833C | ApiSet: undefined
 */
export function allowSonarBlips(toggle) {
    AllowSonarBlips(toggle);
}
/**
 * ```
 * Initializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here
 * BEGIN_TEXT_COMMAND_PRINT
 * e.g
 * void StartLoadingMessage(char *text, int spinnerType = 3)
 * {
 * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SHOW_LOADING_PROMPT(spinnerType);
 * }
 * \/\*OR\*\/
 * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
 * {
 * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SHOW_LOADING_PROMPT(spinnerType);
 * WAIT(timeMs);
 * _REMOVE_LOADING_PROMPT();
 * }
 * These are some localized strings used in the loading spinner.
 * "PM_WAIT"                   = Please Wait
 * "CELEB_WPLYRS"              = Waiting For Players.
 * "CELL_SPINNER2"             = Scanning storage.
 * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
 * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
 * "FM_COR_AUTOD"                        = Just spinner no text
 * "FM_IHELP_WAT2"                        = Waiting for other players
 * "FM_JIP_WAITO"                            = Game options are being set
 * "FMMC_DOWNLOAD"                    = Downloading
 * "FMMC_PLYLOAD"                         = Loading
 * "FMMC_STARTTRAN"                    = Launching session
 * "HUD_QUITTING"                           =  Quiting session
 * "KILL_STRIP_IDM"                         = Waiting for to accept
 * "MP_SPINLOADING"                      = Loading
 * ```
 * Hash: 0xABA17D7CE615ADBF | ApiSet: undefined
 */
export function beginTextCommandBusyspinnerOn(string) {
    BeginTextCommandBusyspinnerOn(string);
}
/**
 * ```
 * clears a print text command with this text
 * ```
 * Hash: 0xE124FA80A759019C | ApiSet: undefined
 */
export function beginTextCommandClearPrint(text) {
    BeginTextCommandClearPrint(text);
}
/**
 * ```
 * Used to be known as _SET_TEXT_COMPONENT_FORMAT
 * ```
 * Hash: 0x8509B634FBE7DA11 | ApiSet: undefined
 */
export function beginTextCommandDisplayHelp(inputType) {
    BeginTextCommandDisplayHelp(inputType);
}
/**
 * ```
 * BEGIN_TEXT_COMMAND_*
 * Example:
 * _BEGIN_TEXT_COMMAND_GET_WIDTH("NUMBER");
 * ADD_TEXT_COMPONENT_FLOAT(69.420f, 2);
 * float width = _END_TEXT_COMMAND_GET_WIDTH(1);
 * ```
 * Hash: 0x54CE8AC98E120CAB | ApiSet: undefined
 */
export function beginTextCommandGetWidth(text) {
    BeginTextCommandGetWidth(text);
}
/**
 * ```
 * The following were found in the decompiled script files:
 * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
 * ESDOLLA
 * ESMINDOLLA - cash (negative)
 * Used to be known as _SET_TEXT_ENTRY
 * ```
 * Hash: 0x25FBB336DF1804CB | ApiSet: undefined
 */
export function beginTextCommandDisplayText(text) {
    BeginTextCommandDisplayText(text);
}
/**
 * ```
 * nothin doin.
 * BOOL Message(char* text)
 * {
 * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
 * }
 * ```
 * Hash: 0x853648FD1063A213 | ApiSet: undefined
 */
export function beginTextCommandIsMessageDisplayed(text) {
    BeginTextCommandIsMessageDisplayed(text);
}
/**
 * Hash: 0x23D69E0465570028 | ApiSet: undefined
 */
export function beginTextCommandObjective(p0) {
    BeginTextCommandObjective(p0);
}
/**
 * Hash: 0x0A24DA3A41B718F5 | ApiSet: undefined
 */
export function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName) {
    BeginTextCommandIsThisHelpMessageBeingDisplayed(labelName);
}
/**
 * Hash: 0x8F9EE5687F8EECCD | ApiSet: undefined
 */
export function beginTextCommandOverrideButtonText(gxtEntry) {
    BeginTextCommandOverrideButtonText(gxtEntry);
}
/**
 * Starts a text command to change the name of a blip displayed in the pause menu.
 * This should be paired with [`END_TEXT_COMMAND_SET_BLIP_NAME`](#\_0xBC38B49BCB83BC9B), once adding all required text components.
 * Hash: 0xF9113A30DE5C6670 | ApiSet: undefined
 */
export function beginTextCommandSetBlipName(textLabel) {
    BeginTextCommandSetBlipName(textLabel);
}
/**
 * Hash: 0xD422FCC5F239A915 | ApiSet: undefined
 */
export function busyspinnerIsOn() {
    return BusyspinnerIsOn();
}
/**
 * ```
 * get's line count
 * int GetLineCount(char *text, float x, float y)
 * {
 * _BEGIN_TEXT_COMMAND_LINE_COUNT("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);
 * }
 * ```
 * Hash: 0x521FB041D93DD0E4 | ApiSet: undefined
 */
export function beginTextCommandLineCount(entry) {
    BeginTextCommandLineCount(entry);
}
/**
 * ```
 * Used to be known as _SET_TEXT_ENTRY_2
 * void ShowSubtitle(char *text)
 * {
 * BEGIN_TEXT_COMMAND_PRINT("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_PRINT(2000, 1);
 * }
 * ```
 * Hash: 0xB87A37EEB7FAA67D | ApiSet: undefined
 */
export function beginTextCommandPrint(GxtEntry) {
    BeginTextCommandPrint(GxtEntry);
}
/**
 * ```
 * Displays cash change notifications on HUD.
 * ```
 * Hash: 0x0772DF77852C2E30 | ApiSet: undefined
 */
export function changeFakeMpCash(cash, bank) {
    ChangeFakeMpCash(cash, bank);
}
/**
 * Hash: 0xB2A592B04648A9CB | ApiSet: undefined
 */
export function busyspinnerIsDisplaying() {
    return BusyspinnerIsDisplaying();
}
/**
 * Declares the entry type of a notification, for example "STRING".
 * int ShowNotification(char \*text)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return \_DRAW_NOTIFICATION(1, 1);
 * }
 * Hash: 0x202709F4C58A0424 | ApiSet: undefined
 */
export function beginTextCommandThefeedPost(text) {
    BeginTextCommandThefeedPost(text);
}
/**
 * Clears all active blip routes that have been set with [`SetBlipRoute`](#\_0x4F7D8A9BFB0B43E9).
 * Hash: 0xD12882D3FF82BF11 | ApiSet: undefined
 */
export function clearAllBlipRoutes() {
    ClearAllBlipRoutes();
}
/**
 * ```
 * Removes the loading prompt at the bottom right of the screen.
 * ```
 * Hash: 0x10D373323E5B9C0D | ApiSet: undefined
 */
export function busyspinnerOff() {
    BusyspinnerOff();
}
/**
 * Hash: 0x6178F68A87A4D3A0 | ApiSet: undefined
 */
export function clearAllHelpMessages() {
    ClearAllHelpMessages();
}
/**
 * Hash: 0x7792424AA0EAC32E | ApiSet: undefined
 */
export function clearDynamicPauseMenuErrorMessage() {
    ClearDynamicPauseMenuErrorMessage();
}
/**
 * Hash: 0x9D292F73ADBD9313 | ApiSet: undefined
 */
export function clearBrief() {
    ClearBrief();
}
/**
 * Hash: 0x2A179DF17CCF04CD | ApiSet: undefined
 */
export function clearAdditionalText(p0, p1) {
    ClearAdditionalText(p0, p1);
}
/**
 * Hash: 0xE6DE0561D9232A64 | ApiSet: undefined
 */
export function clearGpsCustomRoute() {
    ClearGpsCustomRoute();
}
/**
 * Hash: 0xFF4FB7C8CDFA3DA7 | ApiSet: undefined
 */
export function clearGpsPlayerWaypoint() {
    ClearGpsPlayerWaypoint();
}
/**
 * Hash: 0x50085246ABD3FEFA | ApiSet: undefined
 */
export function clearFloatingHelp(hudIndex, p1) {
    ClearFloatingHelp(hudIndex, p1);
}
/**
 * ```
 * Does the same as SET_RACE_TRACK_RENDER(false);
 * ```
 * Hash: 0x7AA5B4CE533C858B | ApiSet: undefined
 */
export function clearGpsRaceTrack() {
    ClearGpsRaceTrack();
}
/**
 * ```
 * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
 * Doesn't seem like the flags are actually read by the game at all.
 * ```
 * Hash: 0x21986729D6A3A830 | ApiSet: undefined
 */
export function clearGpsFlags() {
    ClearGpsFlags();
}
/**
 * Hash: 0x8DFCED7A656F8802 | ApiSet: undefined
 */
export function clearHelp(toggle) {
    ClearHelp(toggle);
}
/**
 * Does the same as [`SET_GPS_MULTI_ROUTE_RENDER(false)`](#\_0x3DDA37128DD1ACA8)
 * Hash: 0x67EEDEA1B9BAFD94 | ApiSet: undefined
 */
export function clearGpsMultiRoute() {
    ClearGpsMultiRoute();
}
/**
 * Hash: 0x5E62BE5DC58E9E06 | ApiSet: undefined
 */
export function clearPedInPauseMenu() {
    ClearPedInPauseMenu();
}
/**
 * ```
 * p0: found arguments in the b617d scripts: pastebin.com/X5akCN7z
 * ```
 * Hash: 0xCF708001E1E536DD | ApiSet: undefined
 */
export function clearThisPrint(p0) {
    ClearThisPrint(p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xB57D8DD645CFA2CF | ApiSet: undefined
 */
export function clearReminderMessage() {
    ClearReminderMessage();
}
/**
 * Hash: 0xCC33FA791322B9D9 | ApiSet: undefined
 */
export function clearPrints() {
    ClearPrints();
}
/**
 * Hash: 0x2708FC083123F9FF | ApiSet: undefined
 */
export function clearRaceGalleryBlips() {
    ClearRaceGalleryBlips();
}
/**
 * Hash: 0x2CEA2839313C09AC | ApiSet: undefined
 */
export function clearSmallPrints() {
    ClearSmallPrints();
}
/**
 * Hash: 0xD2B32BE3FC1626C6 | ApiSet: undefined
 */
export function closeSocialClubMenu() {
    CloseSocialClubMenu();
}
/**
 * Creates a gamer tag for the specified local player ID, automatically attached to the player's current ped.
 * The created gamer tag will have the same ID as the player. You can use [IS_MP_GAMER_TAG_ACTIVE](#\_0x4E929E7A5796FD26) to check if a gamer tag already exists for a player.
 * After the gamer tag is created, all components will be set as invisible. Use [SET_MP_GAMER_TAG_VISIBILITY](#\_0x63BB75ABEDC1F6A0) to change the visibility of individual components or [\_SET_MP_GAMER_TAG_VISIBILITY_ALL](#\_0xEE76FF7E6A0166B0) to set all of them at once.
 * To create a gamer tag for a ped that is not a player, see [CREATE_FAKE_MP_GAMER_TAG](#\_0xBFEFE3321A3F5015).
 * Hash: 0x6DD05E9D83EFA4C9 | ApiSet: undefined
 */
export function createMpGamerTagWithCrewColor(player, username, crewIsPrivate, crewIsRockstar, crewName, crewRank, crewR, crewG, crewB) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    CreateMpGamerTagWithCrewColor(_player, username, crewIsPrivate, crewIsRockstar, crewName, crewRank, crewR, crewG, crewB);
}
/**
 * Hash: 0x6D3465A73092F0E6 | ApiSet: undefined
 */
export function disableFrontendThisFrame() {
    DisableFrontendThisFrame();
}
/**
 * As per the name, this native creates a "fake" gamer tag that is attached to a specific ped.
 * Unlike "real" gamer tags, you cannot set the crew colour of these gamer tags.
 * To create gamer tags for actual players and for more gamer tag information, see [CREATE_MP_GAMER_TAG_WITH_CREW_COLOR](#\_0x6DD05E9D83EFA4C9).
 * Hash: 0xBFEFE3321A3F5015 | ApiSet: undefined
 */
export function createFakeMpGamerTag(ped, username, crewIsPrivate, crewIsRockstar, crewName, crewRank) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return CreateFakeMpGamerTag(_ped, username, crewIsPrivate, crewIsRockstar, crewName, crewRank);
}
/**
 * Hash: 0xA5E78BA2B1331C55 | ApiSet: undefined
 */
export function displayAmmoThisFrame(display) {
    DisplayAmmoThisFrame(display);
}
/**
 * Hash: 0x1AC8F4AD40E22127 | ApiSet: undefined
 */
export function closeMultiplayerChat() {
    CloseMultiplayerChat();
}
/**
 * If true is passed, the player won't be able to open the multiplayer chat
 * Hash: 0x1DB21A44B09E8BA3 | ApiSet: undefined
 */
export function disableMultiplayerChat(disable) {
    DisableMultiplayerChat(disable);
}
/**
 * Hash: 0x276B6CE369C33678 | ApiSet: undefined
 */
export function displayAreaName(toggle) {
    DisplayAreaName(toggle);
}
/**
 * Same as [`SET_WAYPOINT_OFF`](#\_0xA7E4E2D361C2627F), except it checks if the local player is the owner of the waypoint.
 * Hash: 0xD8E694757BCEA8E9 | ApiSet: undefined
 */
export function deleteWaypointsFromThisPlayer() {
    DeleteWaypointsFromThisPlayer();
}
/**
 * Shows a help message for one frame.
 * Do note that this message doesn't get added to the Pause Menu info section.
 * Hash: 0x960C9FF8F616E41C | ApiSet: undefined
 */
export function displayHelpTextThisFrame(pTextLabel, bCurvedWindow) {
    DisplayHelpTextThisFrame(pTextLabel, bCurvedWindow);
}
/**
 * ```
 * If Hud should be displayed
 * ```
 * Hash: 0xA6294919E56FF02A | ApiSet: undefined
 */
export function displayHud(toggle) {
    DisplayHud(toggle);
}
/**
 * Hash: 0x402F9ED62087E898 | ApiSet: undefined
 */
export function displayHudWhenPausedThisFrame() {
    DisplayHudWhenPausedThisFrame();
}
/**
 * ```
 * "DISPLAY_CASH(true);" makes the cash amount render on the screen when appropriate
 * "DISPLAY_CASH(false);" disables cash amount rendering
 * ```
 * Hash: 0x96DEC8D5430208B7 | ApiSet: undefined
 */
export function displayCash(display) {
    DisplayCash(display);
}
/**
 * Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
 * Doesn't need to be called every frame.
 * Preview: https://i.imgur.com/DfqKWfJ.png
 * Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
 * Hash: 0x82CEDC33687E1F50 | ApiSet: undefined
 */
export function displayPlayerNameTagsOnBlips(toggle) {
    DisplayPlayerNameTagsOnBlips(toggle);
}
/**
 * ```
 * Displays the crosshair for this frame.
 * ```
 * Hash: 0x73115226F4814E62 | ApiSet: undefined
 */
export function displaySniperScopeThisFrame() {
    DisplaySniperScopeThisFrame();
}
/**
 * Enables drawing some hud components, such as help labels, this frame, when the player is dead.
 * Hash: 0x7669F9E39DC17063 | ApiSet: undefined
 */
export function displayHudWhenDeadThisFrame() {
    DisplayHudWhenDeadThisFrame();
}
/**
 * ```
 * If Minimap / Radar should be displayed.
 * ```
 * Hash: 0xA0EBB943C300E693 | ApiSet: undefined
 */
export function displayRadar(toggle) {
    DisplayRadar(toggle);
}
/**
 * Hash: 0xA6DB27D19ECBB7DA | ApiSet: undefined
 */
export function doesBlipExist(blip) {
    return DoesBlipExist(blip);
}
/**
 * ```
 * Returns whether the ped's blip is controlled by the game.
 * It's the default blip you can see on enemies during freeroam in singleplayer (the one that fades out quickly).
 * ```
 * Hash: 0x15B8ECF844EE67ED | ApiSet: undefined
 */
export function doesPedHaveAiBlip(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return DoesPedHaveAiBlip(_ped);
}
/**
 * Hash: 0xDD2238F57B977751 | ApiSet: undefined
 */
export function doesBlipHaveGpsRoute(blip) {
    return DoesBlipHaveGpsRoute(blip);
}
/**
 * Hash: 0x1C7302E725259789 | ApiSet: undefined
 */
export function doesTextBlockExist(gxt) {
    return DoesTextBlockExist(gxt);
}
/**
 * Hash: 0xFCC75460ABA29378 | ApiSet: undefined
 */
export function endTextCommandClearPrint() {
    EndTextCommandClearPrint();
}
/**
 * ```
 * Checks if the passed gxt name exists in the game files.
 * ```
 * Hash: 0xAC09CA973C564252 | ApiSet: undefined
 */
export function doesTextLabelExist(gxt) {
    return DoesTextLabelExist(gxt);
}
/**
 * ```
 * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
 * ```
 * Hash: 0x6D14BFDC33B34F55 | ApiSet: undefined
 */
export function dontTiltMinimapThisFrame() {
    DontTiltMinimapThisFrame();
}
/**
 * ```
 * `After applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.`
 * ```
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * Hash: 0xCD015E5BB0D96A57 | ApiSet: undefined
 */
export function endTextCommandDisplayText(x, y) {
    EndTextCommandDisplayText(x, y);
}
/**
 * Allows HUD to be drawn over screen fade every frame this function is called.
 * Hash: 0xBF4F34A85CA2970C | ApiSet: undefined
 */
export function drawHudOverFadeThisFrame() {
    DrawHudOverFadeThisFrame();
}
/**
 * ```cpp
 * enum eBusySpinnerType
 * {
 * BUSY_SPINNER_LEFT = 0,
 * BUSY_SPINNER_LEFT_2 = 1,
 * BUSY_SPINNER_LEFT_3 = 2,
 * BUSY_SPINNER_SAVE = 3,
 * BUSY_SPINNER_RIGHT = 4,
 * };
 * ```
 * Hash: 0xBD12F8228410D9B4 | ApiSet: undefined
 */
export function endTextCommandBusyspinnerOn(busySpinnerType) {
    EndTextCommandBusyspinnerOn(busySpinnerType);
}
/**
 * Hash: 0x238FFE5C7B0498A6 | ApiSet: undefined
 */
export function endTextCommandDisplayHelp(shape, loop, beep, duration) {
    EndTextCommandDisplayHelp(shape, loop, beep, duration);
}
/**
 * ```
 * END_TEXT_COMMAND_*
 * Determines how many lines the text string will use when drawn on screen.
 * Must use 0x521FB041D93DD0E4 for setting up
 * ```
 * Hash: 0x9040DFB09BE75706 | ApiSet: undefined
 */
export function endTextCommandLineCount(x, y) {
    return EndTextCommandLineCount(x, y);
}
/**
 * Hash: 0x8A9BA1AB3E237613 | ApiSet: undefined
 */
export function endTextCommandIsMessageDisplayed() {
    return EndTextCommandIsMessageDisplayed();
}
/**
 * Returns whether a specific help message is being displayed or not.
 * ```cpp
 * enum HudIndexes {
 * HELP_TEXT = 0,
 * FLOATING_HELP_TEXT_1 = 1,
 * FLOATING_HELP_TEXT_2 = 2,
 * }
 * ```
 * Hash: 0x10BDDBFC529428DD | ApiSet: undefined
 */
export function endTextCommandIsThisHelpMessageBeingDisplayed(hudIndex) {
    return EndTextCommandIsThisHelpMessageBeingDisplayed(hudIndex);
}
/**
 * ```
 * END_TEXT_COMMAND_*
 * In scripts font most of the time is passed as 1.
 * Use _BEGIN_TEXT_GET_COMMAND_GET_WIDTH
 * param is not font from what i've tested
 * ```
 * Hash: 0x85F061DA64ED2F67 | ApiSet: undefined
 */
export function endTextCommandGetWidth(p0) {
    return EndTextCommandGetWidth(p0);
}
/**
 * Hash: 0xA86911979638106F | ApiSet: undefined
 */
export function endTextCommandOverrideButtonText(buttonIndex) {
    EndTextCommandOverrideButtonText(buttonIndex);
}
/**
 * Hash: 0x8EFCCF6EC66D85E4 | ApiSet: undefined
 */
export function endTextCommandThefeedPostCrewRankup(chTitle, clanTxd, clanTxn, isImportant, showSubtitle) {
    return EndTextCommandThefeedPostCrewRankup(chTitle, clanTxd, clanTxn, isImportant, showSubtitle);
}
/**
 * Hash: 0xCFDBDF5AE59BA0F4 | ApiSet: undefined
 */
export function endTextCommandObjective(p0) {
    EndTextCommandObjective(p0);
}
/**
 * Shows an "award" notification above the minimap, lua example result:
 * ![](https://i.imgur.com/e2DNaKX.png)
 * Old description:
 * ```
 * Example:
 * `UI::_SET_NOTIFICATION_TEXT_ENTRY("HUNT");`
 * `UI::_0xAA295B6F28BD587D("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");`
 * ```
 * Hash: 0xAA295B6F28BD587D | ApiSet: undefined
 */
export function endTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel) {
    return EndTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel);
}
/**
 * ```
 * Draws the subtitle at middle center of the screen.
 * int duration = time in milliseconds to show text on screen before disappearing
 * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
 * Used to be known as _DRAW_SUBTITLE_TIMED
 * ```
 * Hash: 0x9D77056A530643F6 | ApiSet: undefined
 */
export function endTextCommandPrint(duration, drawImmediately) {
    EndTextCommandPrint(duration, drawImmediately);
}
/**
 * ```
 * p0 = 1 or 0
 * crashes my game...
 * this is for sending invites to network players - jobs/apartment/ect...
 * return notification handle
 * int invite(Player player)
 * {
 * networkHandleMgr netHandle;
 * networkClanMgr clan;
 * char *playerName = GET_PLAYER_NAME(player);
 * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
 * _SET_NOTIFACTION_COLOR_NEXT(1);
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
 * NETWORK_HANDLE_FROM_PLAYER(player, &netHandle.netHandle, 13);
 * if (NETWORK_CLAN_PLAYER_IS_ACTIVE(&netHandle.netHandle))
 * {
 * NETWORK_CLAN_PLAYER_GET_DESC(&clan.clanHandle, 35, &netHandle.netHandle);
 * _DRAW_NOTIFICATION_CLAN_INVITE(0, _0x54E79E9C(&clan.clanHandle, 35), &clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0);
 * }
 * }
 * ```
 * Hash: 0x137BC35589E34E1E | ApiSet: undefined
 */
export function endTextCommandThefeedPostCrewtagWithGameName(crewTypeIsPrivate, crewTagContainsRockstar, rank, isLeader, isImportant, clanHandle, gamerStr, r, g, b) {
    return EndTextCommandThefeedPostCrewtagWithGameName(crewTypeIsPrivate, crewTagContainsRockstar, rank, isLeader, isImportant, clanHandle, gamerStr, r, g, b);
}
/**
 * Finalizes a text command started with [`BEGIN_TEXT_COMMAND_SET_BLIP_NAME`](#\_0xF9113A30DE5C6670), setting the name
 * of the specified blip.
 * Hash: 0xBC38B49BCB83BC9B | ApiSet: undefined
 */
export function endTextCommandSetBlipName(blip) {
    EndTextCommandSetBlipName(blip);
}
/**
 * Sets some extra options for a notification. It adds an image (or icon type) and sets a notification title (sender) and subtitle (subject).
 * Texture dictionary and texture name parameters are usually the same exact value.
 * Example result:
 * ![](https://i.imgur.com/LviutDl.png)
 * Old description with list of possible icons and texture names:
 * ```
 * List of picNames: pastebin.com/XdpJVbHz
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * ```
 * Hash: 0x1CCD9A37359072CF | ApiSet: undefined
 */
export function endTextCommandThefeedPostMessagetext(textureDict, textureName, flash, iconType, sender, subject) {
    return EndTextCommandThefeedPostMessagetext(textureDict, textureName, flash, iconType, sender, subject);
}
/**
 * ```
 * This function and the one below it are for after you receive an invite, not sending it.
 * p0 = 1 or 0
 * nothin doin.
 * int invite(Player player)
 * {
 * int iVar2, iVar3;
 * networkHandleMgr handle;
 * NETWORK_HANDLE_FROM_PLAYER(player, &handle.netHandle, 13);
 * networkClanMgr clan;
 * char *playerName = GET_PLAYER_NAME(player);
 * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
 * _SET_NOTIFACTION_COLOR_NEXT(0);
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
 * if (NETWORK_CLAN_PLAYER_GET_DESC(&clan, 35, &handle.netHandle))
 * {
 * iVar2 = 0;
 * if (ARE_STRINGS_EQUAL(clan.unk22, "Leader") && clan.unk30 == 0)
 * {
 * iVar2 = 1;
 * }
 * if (clan.unk21 > 0)
 * {
 * iVar3 = 0;
 * }
 * else
 * {
 * iVar3 = 1;
 * }
 * BOOL unused = _0x54E79E9C(&clan.clanHandle, 35);
 * return _DRAW_NOTIFICATION_APARTMENT_INVITE(iVar3, 0 \/\*unused\*\/, &clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0);
 * }
 * }
 * ```
 * Hash: 0x97C9E4E7024A8F2C | ApiSet: undefined
 */
export function endTextCommandThefeedPostCrewtag(crewTypeIsPrivate, crewTagContainsRockstar, rank, hasFounderStatus, isImportant, clanHandle, r, g, b) {
    return EndTextCommandThefeedPostCrewtag(crewTypeIsPrivate, crewTagContainsRockstar, rank, hasFounderStatus, isImportant, clanHandle, r, g, b);
}
/**
 * Example, only occurrence in the scripts:
 * ```
 * `v_8 = UI::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);`
 * ```
 * Example result:
 * ![](https://i.imgur.com/YrN4Bcm.png)
 * Hash: 0x1E6611149DB3DB6B | ApiSet: undefined
 */
export function endTextCommandThefeedPostMessagetextTu(picTxd, picTxn, flash, iconType, nameStr, subtitleStr, durationMultiplier) {
    return EndTextCommandThefeedPostMessagetextTu(picTxd, picTxn, flash, iconType, nameStr, subtitleStr, durationMultiplier);
}
/**
 * ```
 * List of picNames pastebin.com/XdpJVbHz
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * ```
 * Hash: 0x5CBF7BADE20DB93E | ApiSet: undefined
 */
export function endTextCommandThefeedPostMessagetextWithCrewTag(picTxd, picTxn, flash, iconType, nameStr, subtitleStr, duration, crewPackedStr) {
    return EndTextCommandThefeedPostMessagetextWithCrewTag(picTxd, picTxn, flash, iconType, nameStr, subtitleStr, duration, crewPackedStr);
}
/**
 * Hash: 0xF020C96915705B3A | ApiSet: undefined
 */
export function endTextCommandThefeedPostMpticker(blink, bHasTokens) {
    return EndTextCommandThefeedPostMpticker(blink, bHasTokens);
}
/**
 * ```
 * List of picNames: pastebin.com/XdpJVbHz
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
 * int IconNotification(char *text, char *text2, char *Subject)
 * {
 * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
 * return _DRAW_NOTIFICATION(1, 1);
 * }
 * ```
 * Hash: 0x531B84E7DA981FB6 | ApiSet: undefined
 */
export function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(picTxd, picTxn, flash, iconType1, nameStr, subtitleStr, duration, crewPackedStr, iconType2, textColor) {
    return EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(picTxd, picTxn, flash, iconType1, nameStr, subtitleStr, duration, crewPackedStr, iconType2, textColor);
}
/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * Needs more research.
 * Only one type of usage in the scripts:
 * `HUD::\_C6F580E4C94926AC("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a\_0);`
 * Hash: 0xC6F580E4C94926AC | ApiSet: undefined
 */
export function endTextCommandThefeedPostMessagetextGxtEntry(txdName, textureName, flash, iconType, sender, subject) {
    return EndTextCommandThefeedPostMessagetextGxtEntry(txdName, textureName, flash, iconType, sender, subject);
}
/**
 * ```
 * returns a notification handle, prints out a notification like below:
 * type range: 0
 * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
 * example:
 * `UI::_0xD202B92CBF1D816F(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");`
 * ```
 * Hash: 0xD202B92CBF1D816F | ApiSet: undefined
 */
export function endTextCommandThefeedPostReplayIcon(eType, iIcon, sTitle) {
    return EndTextCommandThefeedPostReplayIcon(eType, iIcon, sTitle);
}
/**
 * [List of picture names](https://pastebin.com/XdpJVbHz)
 * Example result:
 * ![](https://i.imgur.com/SdEZ22m.png)
 * Hash: 0x2B7E9A4EAAA93C89 | ApiSet: undefined
 */
export function endTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, picTxd, picTxn) {
    return EndTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, picTxd, picTxn);
}
/**
 * Example output preview:
 * ![](https://i.imgur.com/TJvqkYq.png)
 * Hash: 0x2ED7843F8F801023 | ApiSet: undefined
 */
export function endTextCommandThefeedPostTicker(isImportant, bHasTokens) {
    return EndTextCommandThefeedPostTicker(isImportant, bHasTokens);
}
/**
 * ```
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, button accepts "~INPUT_SOMETHING~"
 * example:
 * `HUD::_0xDD6CB2CCE7C2735C(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");`
 * - imgur.com/UPy0Ial
 * Examples from the scripts:
 * `l_D1[1\/\*1\*\/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");`
 * `l_D1[2\/\*1\*\/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_SAVE_REPLAY_CLIP~","");`
 * `l_D1[1\/\*1\*\/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");`
 * `l_D1[2\/\*1\*\/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");`
 * ```
 * Hash: 0xDD6CB2CCE7C2735C | ApiSet: undefined
 */
export function endTextCommandThefeedPostReplayInput(type, button, text) {
    return EndTextCommandThefeedPostReplayInput(type, button, text);
}
/**
 * Hash: 0x378E809BF61EC840 | ApiSet: undefined
 */
export function endTextCommandThefeedPostTickerWithTokens(isImportant, bHasTokens) {
    return EndTextCommandThefeedPostTickerWithTokens(isImportant, bHasTokens);
}
/**
 * Hash: 0x33EE12743CCD6343 | ApiSet: undefined
 */
export function endTextCommandThefeedPostUnlock(chTitle, iconType, chSubtitle) {
    return EndTextCommandThefeedPostUnlock(chTitle, iconType, chSubtitle);
}
/**
 * Hash: 0x44FA03975424A0EE | ApiSet: undefined
 */
export function endTextCommandThefeedPostTickerForced(blink, bHasTokens) {
    return EndTextCommandThefeedPostTickerForced(blink, bHasTokens);
}
/**
 * ```
 * NativeDB Added Parameter 7: int hudColorIndex1
 * NativeDB Added Parameter 8: int hudColorIndex2
 * ```
 * Hash: 0xB6871B0555B02996 | ApiSet: undefined
 */
export function endTextCommandThefeedPostVersusTu(ch1TXD, ch1TXN, val1, ch2TXD, ch2TXN, val2) {
    return EndTextCommandThefeedPostVersusTu(ch1TXD, ch1TXN, val1, ch2TXD, ch2TXN, val2);
}
/**
 * Hash: 0x7AE0589093A2E088 | ApiSet: undefined
 */
export function endTextCommandThefeedPostUnlockTuWithColor(chTitle, iconType, chSubtitle, isImportant, titleColor, p5) {
    return EndTextCommandThefeedPostUnlockTuWithColor(chTitle, iconType, chSubtitle, isImportant, titleColor, p5);
}
/**
 * Hash: 0xC8F3AAF93D0600BF | ApiSet: undefined
 */
export function endTextCommandThefeedPostUnlockTu(chTitle, iconType, chSubtitle, isImportant) {
    return EndTextCommandThefeedPostUnlockTu(chTitle, iconType, chSubtitle, isImportant);
}
/**
 * Hash: 0x02CFBA0C9E9275CE | ApiSet: undefined
 */
export function flashAbilityBar(millisecondsToFlash) {
    FlashAbilityBar(millisecondsToFlash);
}
/**
 * Hash: 0x6B1DE27EE78E6A19 | ApiSet: undefined
 */
export function flashMinimapDisplayWithColor(hudColorIndex) {
    FlashMinimapDisplayWithColor(hudColorIndex);
}
/**
 * Hash: 0xCEF214315D276FD1 | ApiSet: undefined
 */
export function flagPlayerContextInTournament(toggle) {
    FlagPlayerContextInTournament(toggle);
}
/**
 * ```
 * adds a short flash to the Radar/Minimap
 * Usage: UI.FLASH_MINIMAP_DISPLAY
 * ```
 * Hash: 0xF2DD778C22B15BDA | ApiSet: undefined
 */
export function flashMinimapDisplay() {
    FlashMinimapDisplay();
}
/**
 * Hash: 0x8817605C2BA76200 | ApiSet: undefined
 */
export function forceCloseTextInputBox() {
    ForceCloseTextInputBox();
}
/**
 * Hash: 0x7CD934010E115C2C | ApiSet: undefined
 */
export function getAiBlip2(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetAiBlip2(_ped);
}
/**
 * Hash: 0xA18AFB39081B6A1F | ApiSet: undefined
 */
export function flashWantedDisplay(p0) {
    FlashWantedDisplay(p0);
}
/**
 * Hash: 0xDF729E8D20CF7327 | ApiSet: undefined
 */
export function getBlipColour(blip) {
    return GetBlipColour(blip);
}
/**
 * ```
 * Doesn't actually return anything.
 * ```
 * Hash: 0x1121BFA1A1A522A8 | ApiSet: undefined
 */
export function forceSonarBlipsThisFrame() {
    return ForceSonarBlipsThisFrame();
}
/**
 * Hash: 0xFA7C7F0AADF25D09 | ApiSet: undefined
 */
export function getBlipInfoIdCoord(blip) {
    return new Vector3(GetBlipInfoIdCoord(blip));
}
/**
 * ```
 * Returns the Blip handle of given Entity.
 * ```
 * Hash: 0xBC8DBDCA2436F7E8 | ApiSet: undefined
 */
export function getBlipFromEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return GetBlipFromEntity(_entity);
}
/**
 * Hash: 0x970F608F0EE6C885 | ApiSet: undefined
 */
export function getBlipAlpha(blip) {
    return GetBlipAlpha(blip);
}
/**
 * ```
 * Returns a value based on what the blip is attached to
 * 1 - Vehicle
 * 2 - Ped
 * 3 - Object
 * 4 - Coord
 * 5 - unk
 * 6 - Pickup
 * 7 - Radius
 * ```
 * Hash: 0xBE9B0959FFD0779B | ApiSet: undefined
 */
export function getBlipInfoIdType(blip) {
    return GetBlipInfoIdType(blip);
}
/**
 * Hash: 0xEE4C0E6DBC6F2C6F | ApiSet: undefined
 */
export function forceCloseReportugcMenu() {
    ForceCloseReportugcMenu();
}
/**
 * Hash: 0x729B5F1EFBC0AAEE | ApiSet: undefined
 */
export function getBlipHudColour(blip) {
    return GetBlipHudColour(blip);
}
/**
 * ```
 * Returns the current AI BLIP for the specified ped
 * ```
 * Hash: 0x56176892826A4FE8 | ApiSet: undefined
 */
export function getAiBlip(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetAiBlip(_ped);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xD484BF71050CA1EE | ApiSet: undefined
 */
export function getClosestBlipOfType(blipSprite) {
    return GetClosestBlipOfType(blipSprite);
}
/**
 * Hash: 0x1E314167F701DC3B | ApiSet: undefined
 */
export function getBlipInfoIdDisplay(blip) {
    return GetBlipInfoIdDisplay(blip);
}
/**
 * Hash: 0x4BA4E2553AFEDC2C | ApiSet: undefined
 */
export function getBlipInfoIdEntityIndex(blip) {
    return GetBlipInfoIdEntityIndex(blip);
}
/**
 * Hash: 0x586AFE3FF72D996E | ApiSet: undefined
 */
export function getBlipCoords(blip) {
    return new Vector3(GetBlipCoords(blip));
}
/**
 * Hash: 0x97D47996FC48CBAD | ApiSet: undefined
 */
export function getCurrentWebsiteId() {
    return GetCurrentWebsiteId();
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x003E92BA477F9D7F | ApiSet: undefined
 */
export function getBlipRotation(blip) {
    return GetBlipRotation(blip);
}
/**
 * Gets the sprite id of the specified blip. Blip sprite ids and images can be found [here](https://docs.fivem.net/docs/game-references/blips/).
 * Hash: 0x1FC877464A04FC4F | ApiSet: undefined
 */
export function getBlipSprite(blip) {
    return GetBlipSprite(blip);
}
/**
 * Also see [`GET_NEXT_BLIP_INFO_ID`](#\_0x14F96AA50D6FBEA7) for an example.
 * Hash: 0x1BEDE233E6CD2A1F | ApiSet: undefined
 */
export function getFirstBlipInfoId(blipSprite) {
    return GetFirstBlipInfoId(blipSprite);
}
/**
 * Hash: 0x01A358D9128B7A86 | ApiSet: undefined
 */
export function getCurrentWebpageId() {
    return GetCurrentWebpageId();
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0x9B6786E4C03DD382 | ApiSet: undefined
 */
export function getBlipInfoIdPickupIndex(blip) {
    return GetBlipInfoIdPickupIndex(blip);
}
/**
 * ```
 * This function is hard-coded to always return 1.
 * ```
 * Hash: 0x52F0982D7FD156B6 | ApiSet: undefined
 */
export function getDefaultScriptRendertargetRenderId() {
    return GetDefaultScriptRendertargetRenderId();
}
/**
 * ```
 * World to relative screen coords
 * this world to screen will keep the text on screen. it will keep it in the screen pos
 * ```
 * Hash: 0xF9904D11F1ACBEC3 | ApiSet: undefined
 */
export function getHudScreenPositionFromWorldPosition(worldX, worldY, worldZ) {
    return GetHudScreenPositionFromWorldPosition(worldX, worldY, worldZ);
}
/**
 * Gets a localized string literal from a label name. This is used to get the filename of the audio conversation associated with the provided label name.
 * Hash: 0x7B5280EBA9840C72 | ApiSet: undefined
 */
export function getFilenameForAudioConversation(labelName) {
    return GetFilenameForAudioConversation(labelName);
}
/**
 * ```
 * `if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))`
 * ```
 * Hash: 0x2309595AD6145265 | ApiSet: undefined
 */
export function getCurrentFrontendMenuVersion() {
    return GetCurrentFrontendMenuVersion();
}
/**
 * Gets hud color RGBA parameter values by passing a hud color index (hudColorIndex).
 * HUD colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)
 * Hash: 0x7C9C91AB74A0360F | ApiSet: undefined
 */
export function getHudColour(hudColorIndex) {
    return GetHudColour(hudColorIndex);
}
/**
 * Hash: 0x43E4111189E54F0E | ApiSet: undefined
 */
export function getLengthOfLiteralStringInBytes(string) {
    return GetLengthOfLiteralStringInBytes(string);
}
/**
 * Hash: 0x223CA69A8C4417FD | ApiSet: undefined
 */
export function getHudComponentPosition(id) {
    return new Vector3(GetHudComponentPosition(id));
}
/**
 * ```
 * Returns the ActionScript flagValue.
 * ActionScript flags are global flags that scaleforms use
 * Flags found during testing
 * 0: Returns 1 if the web_browser keyboard is open, otherwise 0
 * 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
 * 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
 * 9: Returns the current selection on the mobile phone scaleform
 * There are 20 flags in total.
 * ```
 * Hash: 0xE3B05614DCE1D014 | ApiSet: undefined
 */
export function getGlobalActionscriptFlag(flagIndex) {
    return GetGlobalActionscriptFlag(flagIndex);
}
/**
 * ```
 * Returns the string length of the string from the gxt string .
 * ```
 * Hash: 0x801BD273D3A23F74 | ApiSet: undefined
 */
export function getLengthOfStringWithThisTextLabel(gxt) {
    return GetLengthOfStringWithThisTextLabel(gxt);
}
/**
 * ```
 * Returns the length of the string passed (much like strlen).
 * ```
 * Hash: 0xF030907CCBB8A9FD | ApiSet: undefined
 */
export function getLengthOfLiteralString(string) {
    return GetLengthOfLiteralString(string);
}
/**
 * Hash: 0xDCD4EC3F419D02FA | ApiSet: undefined
 */
export function getMainPlayerBlipId() {
    return GetMainPlayerBlipId();
}
/**
 * ```
 * p0 was always 0xAE2602A3.
 * ```
 * Hash: 0x052991E59076E4E4 | ApiSet: undefined
 */
export function getMenuPedBoolStat(p0) {
    if (typeof p0 === 'string')
        p0 = this.getHashKey(p0);
    return GetMenuPedBoolStat(p0);
}
/**
 * Hash: 0x6E31B91145873922 | ApiSet: undefined
 */
export function getMinimapFowCoordinateIsRevealed(position) {
    return GetMinimapFowCoordinateIsRevealed(position.x, position.y, position.z);
}
/**
 * Hash: 0x5FBD7095FE7AE57F | ApiSet: undefined
 */
export function getMenuPedFloatStat(p0) {
    return GetMenuPedFloatStat(p0);
}
/**
 * Hash: 0x1A6478B61C6BDC3B | ApiSet: undefined
 */
export function getNamedRendertargetRenderId(name) {
    return GetNamedRendertargetRenderId(name);
}
/**
 * Hash: 0x90A6526CF0381030 | ApiSet: undefined
 */
export function getMenuPedMaskedIntStat(p0, p2, p3) {
    return GetMenuPedMaskedIntStat(p0, p2, p3);
}
/**
 * Hash: 0xEF4CED81CEBEDC6D | ApiSet: undefined
 */
export function getMenuPedIntStat(p0) {
    return GetMenuPedIntStat(p0);
}
/**
 * Hash: 0x5C90988E7C8E1AF4 | ApiSet: undefined
 */
export function getNewSelectedMissionCreatorBlip() {
    return GetNewSelectedMissionCreatorBlip();
}
/**
 * Hash: 0xE0130B41D3CF4574 | ApiSet: undefined
 */
export function getMinimapFowDiscoveryRatio() {
    return GetMinimapFowDiscoveryRatio();
}
/**
 * Gets mouse event data from scaleforms with mouse support. Must be checked every frame.
 * Returns item index if using the COLOUR_SWITCHER\_02 scaleform.
 * Selection types, found in MOUSE_EVENTS.as:
 * MOUSE_DRAG_OUT = 0;
 * MOUSE_DRAG_OVER = 1;
 * MOUSE_DOWN = 2;
 * MOUSE_MOVE = 3;
 * MOUSE_UP = 4;
 * MOUSE_PRESS = 5;
 * MOUSE_RELEASE = 6;
 * MOUSE_RELEASE_OUTSIDE = 7;
 * MOUSE_ROLL_OUT = 8;
 * MOUSE_ROLL_OVER = 9;
 * MOUSE_WHEEL_UP = 10;
 * MOUSE_WHEEL_DOWN = 11;
 * Scaleforms that this works with:
 * *   COLOUR_SWITCHER\_02
 * *   MP_RESULTS_PANEL
 * *   MP_NEXT_JOB_SELECTION
 * *   SC_LEADERBOARD
 * Probably works with other scaleforms, needs more research.
 * In order to use this Native you MUST have controls 239, 240, 237, 238 enabled!
 * This native, due to its erroneous redundancy of the returned boolean value, works differently in C#: shifting the parameters (where `received` becomes `selectionType` and so on making the fourth parameter unused and always 0).
 * Hash: 0x632B2940C67F4EA9 | ApiSet: undefined
 */
export function getMouseEvent(scaleformHandle) {
    return GetMouseEvent(scaleformHandle);
}
/**
 * Hash: 0x14F96AA50D6FBEA7 | ApiSet: undefined
 */
export function getNextBlipInfoId(blipSprite) {
    return GetNextBlipInfoId(blipSprite);
}
/**
 * Hash: 0x9A3FF3DE163034E8 | ApiSet: undefined
 */
export function getNumberOfActiveBlips() {
    return GetNumberOfActiveBlips();
}
/**
 * Name between `GET_ONSCREEN_KEYBOARD_RESULT` and `GET_PAUSE_MENU_STATE`. Likely, `GET_PAUSE_MENU_*`.
 * Hash: 0x5BFF36D6ED83E0AE | ApiSet: undefined
 */
export function getPauseMenuCursorPosition() {
    return new Vector3(GetPauseMenuCursorPosition());
}
/**
 * Hash: 0x3F0CF9CB7E589B88 | ApiSet: undefined
 */
export function getNorthRadarBlip() {
    return GetNorthRadarBlip();
}
/**
 * ```
 * This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
 * Old name: _GET_TEXT_SCALE_HEIGHT
 * ```
 * Hash: 0xDB88A37483346780 | ApiSet: undefined
 */
export function getRenderedCharacterHeight(size, font) {
    return GetRenderedCharacterHeight(size, font);
}
/**
 * ```
 * lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
 * selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
 * selectedItemUniqueId: this is uniqueID of the currently selected menu item
 * when the pausemenu is closed:
 * lastItemMenuId = -1
 * selectedItemMenuId = -1
 * selectedItemUniqueId = 0
 * when the header gains focus:
 * lastItemMenuId updates as normal or 0 if the pausemenu was just opened
 * selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
 * selectedItemUniqueId = -1
 * when focus is moved from the header to a pausemenu page:
 * lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
 * selectedItemMenuId = -1
 * selectedItemUniqueId updates as normal
 * ```
 * Hash: 0x7E17BE53E1AAABAF | ApiSet: undefined
 */
export function getPauseMenuSelectionData() {
    return GetPauseMenuSelectionData();
}
/**
 * ```cpp
 * enum ePauseMenuState
 * {
 * PM_INACTIVE 	 =  0,
 * PM_STARTING_UP 	 =  5,
 * PM_RESTARTING 	 = 10,
 * PM_READY 		 = 15,
 * PM_IN_STORE 	 = 20,
 * PM_IN_SC_MENU 	 = 25,
 * PM_SHUTTING_DOWN = 30,
 * PM_IN_VIDEOEDITOR = 35,
 * }
 * ```
 * Hash: 0x272ACD84970869C5 | ApiSet: undefined
 */
export function getPauseMenuState() {
    return GetPauseMenuState();
}
/**
 * Hash: 0x36C1451A88A09630 | ApiSet: undefined
 */
export function getPauseMenuSelection() {
    return GetPauseMenuSelection();
}
/**
 * Converts the hash of a street name into a readable string. To retrieve a hash for a given (street) coordinate, see [`GET_STREET_NAME_AT_COORD`](#\_0x2EB41072B4C1E4C0).
 * Hash: 0xD0EF8A959B8A4CB9 | ApiSet: undefined
 */
export function getStreetNameFromHashKey(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return GetStreetNameFromHashKey(hash);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x81DF9ABA6C83DFF9 | ApiSet: undefined
 */
export function getWarningMessageTitleHash() {
    return GetWarningMessageTitleHash();
}
/**
 * Hash: 0x4A9923385BDB9DAD | ApiSet: undefined
 */
export function getStandardBlipEnumId() {
    return GetStandardBlipEnumId();
}
/**
 * ```
 * Returns a substring of a specified length starting at a specified position.
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * `subStr = HUD::_GET_TEXT_SUBSTRING("MY_STRING", 3, 6);`
 * ```
 * Hash: 0x169BD9382084C8C0 | ApiSet: undefined
 */
export function getTextSubstring(text, position, length) {
    return GetTextSubstring(text, position, length);
}
/**
 * ```
 * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
 * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
 * Example:
 * // Condensed example of how Rockstar uses this function
 * `strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());`
 * `subStr = HUD::_GET_TEXT_SUBSTRING_SAFE(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);`
 * --
 * "fm_race_creator.ysc", line 85115:
 * // parameters modified for clarity
 * BOOL sub_8e5aa(char *text, int length) {
 * for (i = 0; i <= (length - 2); i += 1) {
 * `if (!MISC::ARE_STRINGS_EQUAL(HUD::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), " ")) {`
 * return FALSE;
 * }
 * }
 * return TRUE;
 * }
 * ```
 * Hash: 0xB2798643312205C5 | ApiSet: undefined
 */
export function getTextSubstringSafe(text, position, length, maxLength) {
    return GetTextSubstringSafe(text, position, length, maxLength);
}
/**
 * Hash: 0x186E5D252FA50E7D | ApiSet: undefined
 */
export function getWaypointBlipEnumId() {
    return GetWaypointBlipEnumId();
}
/**
 * ```
 * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * `subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 9);`
 * // Overflows are possibly replaced with underscores (needs verification)
 * `subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 10); // "STRING_"?`
 * ```
 * Hash: 0xCE94AEBA5D82908A | ApiSet: undefined
 */
export function getTextSubstringSlice(text, startPosition, endPosition) {
    return GetTextSubstringSlice(text, startPosition, endPosition);
}
/**
 * ```
 * p1 is either 1 or 2 in the PC scripts.
 * ```
 * This native is used to "give"/duplicate a player ped to a frontend menu as configured via the `ACTIVATE_FRONTEND_MENU` native, you first must utilize the [CLONE_PED](#\_0xEF29A16337FACADB) to clone said ped.
 * Hash: 0xAC0BFBDC3BE00E14 | ApiSet: undefined
 */
export function givePedToPauseMenu(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    GivePedToPauseMenu(_ped, p1);
}
/**
 * ```
 * HIDE_*_THIS_FRAME
 * Hides area and vehicle name HUD components for one frame.
 * ```
 * Hash: 0xA4DEDE28B1814289 | ApiSet: undefined
 */
export function hideAreaAndVehicleNameThisFrame() {
    HideAreaAndVehicleNameThisFrame();
}
/**
 * ```
 * HAS_*
 * ```
 * Hash: 0xA277800A9EAE340E | ApiSet: undefined
 */
export function hasDirectorModeBeenTriggered() {
    return HasDirectorModeBeenTriggered();
}
/**
 * Hash: 0x02245FE4BED318B8 | ApiSet: undefined
 */
export function hasAdditionalTextLoaded(slot) {
    return HasAdditionalTextLoaded(slot);
}
/**
 * Hash: 0x4B0311D3CDC4648F | ApiSet: undefined
 */
export function hideLoadingOnFadeThisFrame() {
    HideLoadingOnFadeThisFrame();
}
/**
 * ```
 * Checks if the specified gxt has loaded into the passed slot.
 * ```
 * Hash: 0xADBF060E2B30C5BC | ApiSet: undefined
 */
export function hasThisAdditionalTextLoaded(gxt, slot) {
    return HasThisAdditionalTextLoaded(gxt, slot);
}
/**
 * Hash: 0xD46923FC481CA285 | ApiSet: undefined
 */
export function hideHelpTextThisFrame() {
    HideHelpTextThisFrame();
}
/**
 * ```
 * I think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)
 * ```
 * Hash: 0x719FF505F097FD20 | ApiSet: undefined
 */
export function hideHudAndRadarThisFrame() {
    HideHudAndRadarThisFrame();
}
/**
 * Hash: 0x20FE7FDFEEAD38C0 | ApiSet: undefined
 */
export function hideMinimapInteriorMapThisFrame() {
    HideMinimapInteriorMapThisFrame();
}
/**
 * Hash: 0xE374C498D8BADC14 | ApiSet: undefined
 */
export function hideScriptedHudComponentThisFrame(id) {
    HideScriptedHudComponentThisFrame(id);
}
/**
 * This function hides various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * *   1 : WANTED_STARS
 * *   2 : WEAPON_ICON
 * *   3 : CASH
 * *   4 : MP_CASH
 * *   5 : MP_MESSAGE
 * *   6 : VEHICLE_NAME
 * *   7 : AREA_NAME
 * *   8 : VEHICLE_CLASS
 * *   9 : STREET_NAME
 * *   10 : HELP_TEXT
 * *   11 : FLOATING_HELP_TEXT\_1
 * *   12 : FLOATING_HELP_TEXT\_2
 * *   13 : CASH_CHANGE
 * *   14 : RETICLE
 * *   15 : SUBTITLE_TEXT
 * *   16 : RADIO_STATIONS
 * *   17 : SAVING_GAME
 * *   18 : GAME_STREAM
 * *   19 : WEAPON_WHEEL
 * *   20 : WEAPON_WHEEL_STATS
 * *   21 : HUD_COMPONENTS
 * *   22 : HUD_WEAPONS
 * These integers also work for the [`SHOW_HUD_COMPONENT_THIS_FRAME`](#\_0x0B4DF1FA60C0E664) native, but instead shows the HUD Component.
 * Hash: 0x6806C51AD12B83B8 | ApiSet: undefined
 */
export function hideHudComponentThisFrame(id) {
    HideHudComponentThisFrame(id);
}
/**
 * Hash: 0x5FBAE526203990C9 | ApiSet: undefined
 */
export function hideMinimapExteriorMapThisFrame() {
    HideMinimapExteriorMapThisFrame();
}
/**
 * Hash: 0x532CFF637EF80148 | ApiSet: undefined
 */
export function hideNumberOnBlip(blip) {
    HideNumberOnBlip(blip);
}
/**
 * ```
 * Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
 * ```
 * Hash: 0x72C1056D678BB7D8 | ApiSet: undefined
 */
export function hudSetWeaponWheelTopSlot(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    HudSetWeaponWheelTopSlot(weaponHash);
}
/**
 * ```
 * Forces the weapon wheel to show/hide.
 * ```
 * Hash: 0xEB354E5376BC81A7 | ApiSet: undefined
 */
export function hudForceWeaponWheel(show) {
    HudForceWeaponWheel(show);
}
/**
 * Displays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand.
 * Hash: 0x488043841BBE156F | ApiSet: undefined
 */
export function hudDisplayLoadingScreenTips() {
    HudDisplayLoadingScreenTips();
}
/**
 * ```
 * Returns the weapon hash active in a specific weapon wheel slotList
 * ```
 * Hash: 0xA13E93403F26C812 | ApiSet: undefined
 */
export function hudWeaponWheelGetSlotHash(weaponTypeIndex) {
    return HudWeaponWheelGetSlotHash(weaponTypeIndex);
}
/**
 * ```
 * Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
 * ```
 * Hash: 0x14C9FDCC41F81F63 | ApiSet: undefined
 */
export function hudWeaponWheelIgnoreControlInput(toggle) {
    HudWeaponWheelIgnoreControlInput(toggle);
}
/**
 * ```
 * Returns the weapon hash to the selected/highlighted weapon in the wheel
 * ```
 * Hash: 0xA48931185F0536FE | ApiSet: undefined
 */
export function hudWeaponWheelGetSelectedHash() {
    return HudWeaponWheelGetSelectedHash();
}
/**
 * Hash: 0xE41CA53051197A27 | ApiSet: undefined
 */
export function isBlipOnMinimap(blip) {
    return IsBlipOnMinimap(blip);
}
/**
 * Hash: 0xA5E41FD83AD6CEF0 | ApiSet: undefined
 */
export function isBlipFlashing(blip) {
    return IsBlipFlashing(blip);
}
/**
 * Hash: 0x3BAB9A4E4F2FF5C7 | ApiSet: undefined
 */
export function isFrontendReadyForControl() {
    return IsFrontendReadyForControl();
}
/**
 * ```
 * Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
 * ```
 * Hash: 0x0AFC4AF510774B47 | ApiSet: undefined
 */
export function hudWeaponWheelIgnoreSelection() {
    HudWeaponWheelIgnoreSelection();
}
/**
 * Hash: 0x2432784ACA090DA4 | ApiSet: undefined
 */
export function isFloatingHelpTextOnScreen(hudIndex) {
    return IsFloatingHelpTextOnScreen(hudIndex);
}
/**
 * Hash: 0xDA5F8727EB75B926 | ApiSet: undefined
 */
export function isBlipShortRange(blip) {
    return IsBlipShortRange(blip);
}
/**
 * Hash: 0x4167EFE0527D706E | ApiSet: undefined
 */
export function isHoveringOverMissionCreatorBlip() {
    return IsHoveringOverMissionCreatorBlip();
}
/**
 * Hash: 0x4D79439A6B55AC67 | ApiSet: undefined
 */
export function isHelpMessageBeingDisplayed() {
    return IsHelpMessageBeingDisplayed();
}
/**
 * Hash: 0x7984C03AA5CC2F41 | ApiSet: undefined
 */
export function isMessageBeingDisplayed() {
    return IsMessageBeingDisplayed();
}
/**
 * Hash: 0xDAD37F45428801AE | ApiSet: undefined
 */
export function isHelpMessageOnScreen() {
    return IsHelpMessageOnScreen();
}
/**
 * **Note:** The buttons need to support mouse (with the `TOGGLE_MOUSE_SUPPORT` scaleform movie method) for it to return `true`.
 * Hash: 0x3D9ACB1EB139E702 | ApiSet: undefined
 */
export function isMouseRolledOverInstructionalButtons() {
    return IsMouseRolledOverInstructionalButtons();
}
/**
 * Hash: 0x327EDEEEAC55C369 | ApiSet: undefined
 */
export function isHelpMessageFadingOut() {
    return IsHelpMessageFadingOut();
}
/**
 * Hash: 0x1930DFA731813EC4 | ApiSet: undefined
 */
export function isHudPreferenceSwitchedOn() {
    return IsHudPreferenceSwitchedOn();
}
/**
 * ```
 * Full list of components below
 * HUD = 0;
 * HUD_WANTED_STARS = 1;
 * HUD_WEAPON_ICON = 2;
 * HUD_CASH = 3;
 * HUD_MP_CASH = 4;
 * HUD_MP_MESSAGE = 5;
 * HUD_VEHICLE_NAME = 6;
 * HUD_AREA_NAME = 7;
 * HUD_VEHICLE_CLASS = 8;
 * HUD_STREET_NAME = 9;
 * HUD_HELP_TEXT = 10;
 * HUD_FLOATING_HELP_TEXT_1 = 11;
 * HUD_FLOATING_HELP_TEXT_2 = 12;
 * HUD_CASH_CHANGE = 13;
 * HUD_RETICLE = 14;
 * HUD_SUBTITLE_TEXT = 15;
 * HUD_RADIO_STATIONS = 16;
 * HUD_SAVING_GAME = 17;
 * HUD_GAME_STREAM = 18;
 * HUD_WEAPON_WHEEL = 19;
 * HUD_WEAPON_WHEEL_STATS = 20;
 * MAX_HUD_COMPONENTS = 21;
 * MAX_HUD_WEAPONS = 22;
 * MAX_SCRIPTED_HUD_COMPONENTS = 141;
 * ```
 * Hash: 0xBC4C9EA5391ECC0D | ApiSet: undefined
 */
export function isHudComponentActive(id) {
    return IsHudComponentActive(id);
}
/**
 * ```
 * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
 * ```
 * Hash: 0xB118AF58B5F332A1 | ApiSet: undefined
 */
export function isMultiplayerChatActive() {
    return IsMultiplayerChatActive();
}
/**
 * Hash: 0x4E929E7A5796FD26 | ApiSet: undefined
 */
export function isMpGamerTagActive(gamerTagId) {
    return IsMpGamerTagActive(gamerTagId);
}
/**
 * Hash: 0xA86478C6958735C5 | ApiSet: undefined
 */
export function isHudHidden() {
    return IsHudHidden();
}
/**
 * Returns the same as `IS_SOCIAL_CLUB_ACTIVE`.
 * Hash: 0x6F72CD94F7B5B68C | ApiSet: undefined
 */
export function isOnlinePoliciesMenuActive() {
    return IsOnlinePoliciesMenuActive();
}
/**
 * Hash: 0x9049FE339D5F6F6F | ApiSet: undefined
 */
export function isPausemapInInteriorMode() {
    return IsPausemapInInteriorMode();
}
/**
 * Hash: 0xAF754F20EB5CD51A | ApiSet: undefined
 */
export function isMinimapRendering() {
    return IsMinimapRendering();
}
/**
 * Hash: 0x595B5178E412E199 | ApiSet: undefined
 */
export function isMpGamerTagFree(gamerTagId) {
    return IsMpGamerTagFree(gamerTagId);
}
/**
 * Hash: 0x6E0EB3EB47C8D7AA | ApiSet: undefined
 */
export function isMpGamerTagMovieActive() {
    return IsMpGamerTagMovieActive();
}
/**
 * Hash: 0x09C0403ED9A751C2 | ApiSet: undefined
 */
export function isScriptedHudComponentHiddenThisFrame(id) {
    return IsScriptedHudComponentHiddenThisFrame(id);
}
/**
 * Hash: 0x4E3CD0EF8A489541 | ApiSet: undefined
 */
export function isNavigatingMenuContent() {
    return IsNavigatingMenuContent();
}
/**
 * Hash: 0x113750538FA31298 | ApiSet: undefined
 */
export function isNamedRendertargetLinked(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return IsNamedRendertargetLinked(modelHash);
}
/**
 * Hash: 0x26F49BF3381D933D | ApiSet: undefined
 */
export function isMissionCreatorBlip(blip) {
    return IsMissionCreatorBlip(blip);
}
/**
 * Hash: 0x157F93B036700462 | ApiSet: undefined
 */
export function isRadarHidden() {
    return IsRadarHidden();
}
/**
 * Hash: 0x1C491717107431C7 | ApiSet: undefined
 */
export function isPauseMenuRestarting() {
    return IsPauseMenuRestarting();
}
/**
 * ```
 * IS_WARNING_MESSAGE_*
 * ```
 * Hash: 0xAF42195A42C63BBA | ApiSet: undefined
 */
export function isWarningMessageActive2() {
    return IsWarningMessageActive2();
}
/**
 * Hash: 0x78DCDC15C9F116B4 | ApiSet: undefined
 */
export function isNamedRendertargetRegistered(name) {
    return IsNamedRendertargetRegistered(name);
}
/**
 * Hash: 0x9EB6522EA68F22FE | ApiSet: undefined
 */
export function isRadarPreferenceSwitchedOn() {
    return IsRadarPreferenceSwitchedOn();
}
/**
 * Hash: 0x9135584D09A3437E | ApiSet: undefined
 */
export function isReportugcMenuOpen() {
    return IsReportugcMenuOpen();
}
/**
 * ```
 * Locks the minimap to the specified angle in integer degrees.
 * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
 * ```
 * Hash: 0x299FAEBB108AE05B | ApiSet: undefined
 */
export function lockMinimapAngle(angle) {
    LockMinimapAngle(angle);
}
/**
 * Hash: 0xC406BE343FC4B9AF | ApiSet: undefined
 */
export function isSocialClubActive() {
    return IsSocialClubActive();
}
/**
 * ```
 * Locks the minimap to the specified world position.
 * ```
 * Hash: 0x1279E861A329E73F | ApiSet: undefined
 */
export function lockMinimapPosition(x, y) {
    LockMinimapPosition(x, y);
}
/**
 * Hash: 0xB0034A223497FFCB | ApiSet: undefined
 */
export function isPauseMenuActive() {
    return IsPauseMenuActive();
}
/**
 * Hash: 0xAD6DACA4BA53E0A4 | ApiSet: undefined
 */
export function isSubtitlePreferenceSwitchedOn() {
    return IsSubtitlePreferenceSwitchedOn();
}
/**
 * Hash: 0xDD100EB17A94FF65 | ApiSet: undefined
 */
export function isScriptedHudComponentActive(id) {
    return IsScriptedHudComponentActive(id);
}
/**
 * Hash: 0x0CF54F20DE43879C | ApiSet: undefined
 */
export function _0x0CF54F20DE43879C(p0) {
    Citizen.invokeNative('0x0CF54F20DE43879C', p0);
}
/**
 * ```
 * HAS_S*
 * ```
 * Hash: 0x214CD562A939246A | ApiSet: undefined
 */
export function _0x214CD562A939246A() {
    return Citizen.invokeNative('0x214CD562A939246A');
}
/**
 * Hash: 0x1DD1F58F493F1DA5 | ApiSet: undefined
 */
export function isWaypointActive() {
    return IsWaypointActive();
}
/**
 * ```
 * SET_F*
 * ```
 * Hash: 0x2790F4B17D098E26 | ApiSet: undefined
 */
export function _0x2790F4B17D098E26(toggle) {
    Citizen.invokeNative('0x2790F4B17D098E26', toggle);
}
/**
 * Returns true if a Warning Message or ReportUGC menu is active.
 * Hash: 0xE18B138FABC53103 | ApiSet: undefined
 */
export function isWarningMessageActive() {
    return IsWarningMessageActive();
}
/**
 * Hash: 0x2E22FEFA0100275E | ApiSet: undefined
 */
export function _0x2E22FEFA0100275E() {
    return Citizen.invokeNative('0x2E22FEFA0100275E');
}
/**
 * Hash: 0x41350B4FC28E3941 | ApiSet: undefined
 */
export function _0x41350B4FC28E3941(p0) {
    Citizen.invokeNative('0x41350B4FC28E3941', p0);
}
/**
 * Hash: 0x8B6817B71B85EBF0 | ApiSet: undefined
 */
export function isStreamingAdditionalText(p0) {
    return IsStreamingAdditionalText(p0);
}
/**
 * ```
 * Not present in retail version of the game, actual definiton seems to be
 * _LOG_DEBUG_INFO(const char* category, const char* debugText);
 * ```
 * Hash: 0x2162C446DFDF38FD | ApiSet: undefined
 */
export function logDebugInfo(p0) {
    LogDebugInfo(p0);
}
/**
 * When this native returns true, do not call [`SET_MP_GAMER_TAG_NAME`](#\_0xDEA2B8283BAA3944).
 * Hash: 0xEB709A36958ABE0D | ApiSet: undefined
 */
export function isUpdatingMpGamerTagNameAndCrewDetails(playerId) {
    return IsUpdatingMpGamerTagNameAndCrewDetails(playerId);
}
/**
 * Hash: 0x4B5B620C9B59ED34 | ApiSet: undefined
 */
export function _0x4B5B620C9B59ED34(p0, p1) {
    Citizen.invokeNative('0x4B5B620C9B59ED34', p0, p1);
}
/**
 * Hash: 0xF6C09E276AEB3F2D | ApiSet: undefined
 */
export function linkNamedRendertarget(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    LinkNamedRendertarget(modelHash);
}
/**
 * Hash: 0x593FEAE1F73392D4 | ApiSet: undefined
 */
export function _0x593FEAE1F73392D4() {
    return Citizen.invokeNative('0x593FEAE1F73392D4');
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x0C698D8F099174C7 | ApiSet: undefined
 */
export function _0x0C698D8F099174C7(p0) {
    Citizen.invokeNative('0x0C698D8F099174C7', p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x211C4EF450086857 | ApiSet: undefined
 */
export function _0x211C4EF450086857() {
    Citizen.invokeNative('0x211C4EF450086857');
}
/**
 * ```
 * SET_*
 * ```
 * Hash: 0x04655F9D075D0AE5 | ApiSet: undefined
 */
export function _0x04655F9D075D0AE5(toggle) {
    Citizen.invokeNative('0x04655F9D075D0AE5', toggle);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x243296A510B562B6 | ApiSet: undefined
 */
export function _0x243296A510B562B6() {
    Citizen.invokeNative('0x243296A510B562B6');
}
/**
 * Hash: 0x24A49BEAF468DC90 | ApiSet: undefined
 */
export function _0x24A49BEAF468DC90(p0, p2, p3, p4) {
    return Citizen.invokeNative('0x24A49BEAF468DC90', p0, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x35A3CD97B2C0A6D2 | ApiSet: undefined
 */
export function _0x35A3CD97B2C0A6D2(blip) {
    Citizen.invokeNative('0x35A3CD97B2C0A6D2', blip);
}
/**
 * Hash: 0x8F08017F9D7C47BD | ApiSet: undefined
 */
export function _0x8F08017F9D7C47BD(p0, p2) {
    return Citizen.invokeNative('0x8F08017F9D7C47BD', p0, p2);
}
/**
 * ```
 * FORCE_*
 * ```
 * Hash: 0x57D760D55F54E071 | ApiSet: undefined
 */
export function _0x57D760D55F54E071(p0) {
    Citizen.invokeNative('0x57D760D55F54E071', p0);
}
/**
 * Correct native name lies between SET_BLIP_SPRITE and SET_RADIUS_BLIP_EDGE alphabetically.
 * Hash: 0x2C9F302398E13141 | ApiSet: undefined
 */
export function _0x2C9F302398E13141(blip, p1) {
    Citizen.invokeNative('0x2C9F302398E13141', blip, p1);
}
/**
 * Hash: 0x66E7CB63C97B7D20 | ApiSet: undefined
 */
export function _0x66E7CB63C97B7D20() {
    return Citizen.invokeNative('0x66E7CB63C97B7D20');
}
/**
 * GET_BLIP_\*
 * Seems to always return 0 from what I can tell. I've tried a lot of different blip related natives and it always seems to return 0. Decompiled scripts always pass a blip handle as p0.
 * Hash: 0x2C173AE2BDB9385E | ApiSet: undefined
 */
export function _0x2C173AE2BDB9385E(blip) {
    return Citizen.invokeNative('0x2C173AE2BDB9385E', blip);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x55F5A5F07134DE60 | ApiSet: undefined
 */
export function _0x55F5A5F07134DE60() {
    Citizen.invokeNative('0x55F5A5F07134DE60');
}
/**
 * Hash: 0xA238192F33110615 | ApiSet: undefined
 */
export function _0xA238192F33110615() {
    return Citizen.invokeNative('0xA238192F33110615');
}
/**
 * ```
 * Displays "normal" notifications again after calling `_0x56C8B608CFD49854` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
 * ```
 * Hash: 0xADED7F5748ACAFE6 | ApiSet: undefined
 */
export function thefeedCommentTeleportPoolOff() {
    ThefeedCommentTeleportPoolOff();
}
/**
 * Hash: 0x7C226D5346D4D10A | ApiSet: undefined
 */
export function _0x7C226D5346D4D10A(p0) {
    Citizen.invokeNative('0x7C226D5346D4D10A', p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x8410C5E0CD847B9D | ApiSet: undefined
 */
export function _0x8410C5E0CD847B9D() {
    Citizen.invokeNative('0x8410C5E0CD847B9D');
}
/**
 * ```
 * Appears to return whether the player is using the pause menu store. Can't be sure though.
 * ```
 * Hash: 0x2F057596F2BD0061 | ApiSet: undefined
 */
export function _0x2F057596F2BD0061() {
    return Citizen.invokeNative('0x2F057596F2BD0061');
}
/**
 * ```
 * Getter for 0xCD74233600C4EA6B
 * GET_*
 * ```
 * Hash: 0xC2D2AD9EAAE265B8 | ApiSet: undefined
 */
export function _0xC2D2AD9EAAE265B8() {
    return Citizen.invokeNative('0xC2D2AD9EAAE265B8');
}
/**
 * ```
 * `UI::_817B86108EB94E51(1, &g_189F36._f10CD1[0\/\*16\*\/], &g_189F36._f10CD1[1\/\*16\*\/], &g_189F36._f10CD1[2\/\*16\*\/], &g_189F36._f10CD1[3\/\*16\*\/], &g_189F36._f10CD1[4\/\*16\*\/], &g_189F36._f10CD1[5\/\*16\*\/], &g_189F36._f10CD1[6\/\*16\*\/], &g_189F36._f10CD1[7\/\*16\*\/]);`
 * ```
 * Hash: 0x817B86108EB94E51 | ApiSet: undefined
 */
export function _0x817B86108EB94E51(p0) {
    return Citizen.invokeNative('0x817B86108EB94E51', p0);
}
/**
 * Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
 * Hash: 0x583049884A2EEE3C | ApiSet: undefined
 */
export function thefeedForceRenderOff() {
    ThefeedForceRenderOff();
}
/**
 * SET_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x9FCB3CBFB3EAD69A | ApiSet: undefined
 */
export function _0x9FCB3CBFB3EAD69A(p0, p1) {
    Citizen.invokeNative('0x9FCB3CBFB3EAD69A', p0, p1);
}
/**
 * Hash: 0xC594B315EDF2D4AF | ApiSet: undefined
 */
export function _0xC594B315EDF2D4AF(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xC594B315EDF2D4AF', _ped);
}
/**
 * Hash: 0xA17784FCA9548D15 | ApiSet: undefined
 */
export function _0xA17784FCA9548D15(p0, p1, p2) {
    Citizen.invokeNative('0xA17784FCA9548D15', p0, p1, p2);
}
/**
 * Hash: 0xB552929B85FC27EC | ApiSet: undefined
 */
export function _0xB552929B85FC27EC(p0, p1) {
    Citizen.invokeNative('0xB552929B85FC27EC', p0, p1);
}
/**
 * Hash: 0xCA6B2F7CE32AB653 | ApiSet: undefined
 */
export function _0xCA6B2F7CE32AB653(p0, p2) {
    return Citizen.invokeNative('0xCA6B2F7CE32AB653', p0, p2);
}
/**
 * Hash: 0x62E849B7EB28E770 | ApiSet: undefined
 */
export function _0x62E849B7EB28E770(p0) {
    Citizen.invokeNative('0x62E849B7EB28E770', p0);
}
/**
 * SET_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xB7B873520C84C118 | ApiSet: undefined
 */
export function _0xB7B873520C84C118() {
    Citizen.invokeNative('0xB7B873520C84C118');
}
/**
 * ```
 * FORCE_*
 * ```
 * Hash: 0xBA8D65C1C65702E5 | ApiSet: undefined
 */
export function _0xBA8D65C1C65702E5(toggle) {
    Citizen.invokeNative('0xBA8D65C1C65702E5', toggle);
}
/**
 * ```
 * IS_*
 * ```
 * Hash: 0x801879A9B4F4B2FB | ApiSet: undefined
 */
export function _0x801879A9B4F4B2FB() {
    return Citizen.invokeNative('0x801879A9B4F4B2FB');
}
/**
 * Hash: 0xD1942374085C8469 | ApiSet: undefined
 */
export function _0xD1942374085C8469(p0) {
    Citizen.invokeNative('0xD1942374085C8469', p0);
}
/**
 * Hash: 0xC8E1071177A23BE5 | ApiSet: undefined
 */
export function _0xC8E1071177A23BE5() {
    return Citizen.invokeNative('0xC8E1071177A23BE5');
}
/**
 * Hash: 0xDAF87174BE7454FF | ApiSet: undefined
 */
export function _0xDAF87174BE7454FF(p0) {
    return Citizen.invokeNative('0xDAF87174BE7454FF', p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xD2049635DEB9C375 | ApiSet: undefined
 */
export function _0xD2049635DEB9C375() {
    Citizen.invokeNative('0xD2049635DEB9C375');
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xE4C3B169876D33D7 | ApiSet: undefined
 */
export function _0xE4C3B169876D33D7(p0) {
    Citizen.invokeNative('0xE4C3B169876D33D7', p0);
}
/**
 * Hash: 0xE67C6DFD386EA5E7 | ApiSet: undefined
 */
export function _0xE67C6DFD386EA5E7(p0) {
    Citizen.invokeNative('0xE67C6DFD386EA5E7', p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xEB81A3DADD503187 | ApiSet: undefined
 */
export function _0xEB81A3DADD503187() {
    Citizen.invokeNative('0xEB81A3DADD503187');
}
/**
 * Hash: 0x805D7CBB36FD6C4C | ApiSet: undefined
 */
export function openOnlinePoliciesMenu() {
    OpenOnlinePoliciesMenu();
}
/**
 * ```
 * GET_F*
 * ```
 * Hash: 0x98C3CF913D895111 | ApiSet: undefined
 */
export function _0x98C3CF913D895111(string, length) {
    return Citizen.invokeNative('0x98C3CF913D895111', string, length);
}
/**
 * Hash: 0xF13FE2A80C05C561 | ApiSet: undefined
 */
export function _0xF13FE2A80C05C561() {
    return Citizen.invokeNative('0xF13FE2A80C05C561');
}
/**
 * ```
 * NativeDB Added Parameter 9: int hudColour
 * NativeDB Introduced: v1290
 * ```
 * Sets the 'data' for a cone for a blip
 * See [here](https://docs.fivem.net/docs/game-references/hud-colors/) for the hud colours for the cone
 * Name in scripts: `SETUP_FAKE_CONE_DATA()`
 * For people who don't know how to convert degrees to radians and the other way around:
 * ```
 * degrees = radians * 180 / pi
 * radians = degrees * pi / 180
 * ```
 * Hash: 0xF83D0FEBE75E62C9 | ApiSet: undefined
 */
export function _0xF83D0FEBE75E62C9(blip, p1, p2, width, p4, length, heading, p7) {
    Citizen.invokeNative('0xF83D0FEBE75E62C9', blip, p1, p2, width, p4, length, heading, p7);
}
/**
 * ```
 * Setter for 0xC2D2AD9EAAE265B8
 * SET_*
 * ```
 * Hash: 0xCD74233600C4EA6B | ApiSet: undefined
 */
export function _0xCD74233600C4EA6B(toggle) {
    Citizen.invokeNative('0xCD74233600C4EA6B', toggle);
}
/**
 * Uses the `SOCIAL_CLUB2` scaleform.
 * Hash: 0x75D3691713C3B05A | ApiSet: undefined
 */
export function openSocialClubMenu() {
    OpenSocialClubMenu();
}
/**
 * Hash: 0xDE03620F8703A9DF | ApiSet: undefined
 */
export function _0xDE03620F8703A9DF() {
    return Citizen.invokeNative('0xDE03620F8703A9DF');
}
/**
 * Hash: 0xF47E567B3630DD12 | ApiSet: undefined
 */
export function overrideMultiplayerChatColour(p0, hudColor) {
    OverrideMultiplayerChatColour(p0, hudColor);
}
/**
 * Hash: 0x6A1738B4323FE2D9 | ApiSet: undefined
 */
export function overrideMultiplayerChatPrefix(gxtEntryHash) {
    if (typeof gxtEntryHash === 'string')
        gxtEntryHash = this.getHashKey(gxtEntryHash);
    OverrideMultiplayerChatPrefix(gxtEntryHash);
}
/**
 * Hash: 0x444D8CF241EC25C5 | ApiSet: undefined
 */
export function pauseMenuDeactivateContext(contextHash) {
    if (typeof contextHash === 'string')
        contextHash = this.getHashKey(contextHash);
    PauseMenuDeactivateContext(contextHash);
}
/**
 * Hash: 0x84698AB38D0C6636 | ApiSet: undefined
 */
export function pauseMenuIsContextActive(contextHash) {
    if (typeof contextHash === 'string')
        contextHash = this.getHashKey(contextHash);
    return PauseMenuIsContextActive(contextHash);
}
/**
 * Hash: 0xF284AC67940C6812 | ApiSet: undefined
 */
export function _0xF284AC67940C6812() {
    return Citizen.invokeNative('0xF284AC67940C6812');
}
/**
 * Activates the specified frontend menu context.
 * pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.
 * The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
 * The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
 * This basically allows you to hide certain menu sections, or things like instructional buttons.
 * See the old description below for more info.
 * <strong></strong>
 * > Seems to add/set the current menu context (to show/hide buttons?)
 * > Pausemenu.xml:
 * > `<Contexts>*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION</Contexts>`
 * > Code:
 * >
 * > ```
 * > if (...) {
 * >     sub_bbd34(a_0, 0, "FM_BET_HELP");
 * `>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_available}); // This native`
 * `>     UI::OBJECT_DECAL_TOGGLE(${bet_locked});`
 * > } else {
 * >     sub_bbd34(a_0, 0, "");
 * `>     UI::OBJECT_DECAL_TOGGLE(${bet_available});`
 * `>     UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_locked}); // This native`
 * > }
 * > ```
 * >
 * > OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision
 * > // Old
 * > Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, "OBJECT_DECAL_TOGGLE" is called prior.
 * Hash: 0xDD564BDD0472C936 | ApiSet: undefined
 */
export function pauseMenuActivateContext(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    PauseMenuActivateContext(hash);
}
/**
 * Hash: 0x2A25ADC48F87841F | ApiSet: undefined
 */
export function pauseMenuIsContextMenuActive() {
    return PauseMenuIsContextMenuActive();
}
/**
 * If mouse is hovering on a slot, it returns uniqueid of that slot, else it returns -1.
 * Hash: 0x13C4B962653A5280 | ApiSet: undefined
 */
export function pauseMenuGetUniqueIdOfMouseHoveredSlot() {
    return PauseMenuGetUniqueIdOfMouseHoveredSlot();
}
/**
 * ```
 * Shows a menu for reporting UGC content.
 * ```
 * Hash: 0x523A590C1A3CC0D3 | ApiSet: undefined
 */
export function openReportugcMenu() {
    OpenReportugcMenu();
}
/**
 * Disables the loading spinner in Pause Menu when switching from one header tab to another.
 * Hash: 0x9245E81072704B8A | ApiSet: undefined
 */
export function pauseMenuDisableBusyspinner(toggle) {
    PauseMenuDisableBusyspinner(toggle);
}
/**
 * Updates instructional buttons in Pause Menu after menu contexts have been toggled. p0 purpose is currently unknown, only 0 is used in scripts.
 * Hash: 0x4895BDEA16E7C080 | ApiSet: undefined
 */
export function pauseMenuRedrawInstructionalButtons(p0) {
    PauseMenuRedrawInstructionalButtons(p0);
}
/**
 * If mouse is hovering on a slot, it returns the slot's index, else it returns -1.
 * Hash: 0x359AF31A4B52F5ED | ApiSet: undefined
 */
export function pauseMenuGetIndexOfMouseHoveredSlot() {
    return PauseMenuGetIndexOfMouseHoveredSlot();
}
/**
 * Forces the Pause Menu to back out of unique pages such as Awards, Unlocks, Key Bindings etc
 * Hash: 0xCDCA26E80FAECB8F | ApiSet: undefined
 */
export function pauseMenuceptionTheKick() {
    PauseMenuceptionTheKick();
}
/**
 * Sets a loading icon in the pause menu.
 * Hash: 0xC78E239AC5B2DDB9 | ApiSet: undefined
 */
export function pauseMenuSetBusySpinner(bVisible, iColumnID, iSpinnerIndex) {
    PauseMenuSetBusySpinner(bVisible, iColumnID, iSpinnerIndex);
}
/**
 * Shows this warning message when trying to switch pause menu header tabs: https://i.imgur.com/8qmfztu.png
 * Hash: 0xF06EBB91A81E09E3 | ApiSet: undefined
 */
export function pauseMenuSetWarnOnTabChange(setWarn) {
    PauseMenuSetWarnOnTabChange(setWarn);
}
/**
 * Sets current pause menu page/component to the specified value.
 * Available page IDs: https://pastebin.com/qxuhwjPT
 * Hash: 0x77F16B447824DA6C | ApiSet: undefined
 */
export function pauseMenuceptionGoDeeper(pageId) {
    PauseMenuceptionGoDeeper(pageId);
}
/**
 * Toggles pause menu map rendering.
 * Hash: 0x2DE6C5E2E996F178 | ApiSet: undefined
 */
export function pauseToggleFullscreenMap(enabled) {
    PauseToggleFullscreenMap(enabled);
}
/**
 * ```
 * If toggle is true, the map is shown in full screen
 * If toggle is false, the map is shown in normal mode
 * ```
 * Hash: 0x5354C5BA2EA868A4 | ApiSet: undefined
 */
export function raceGalleryFullscreen(toggle) {
    RaceGalleryFullscreen(toggle);
}
/**
 * Hash: 0x742D6FD43115AF73 | ApiSet: undefined
 */
export function pulseBlip(blip) {
    PulseBlip(blip);
}
/**
 * Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
 * To disable the keys, use [`0xEC9264727EEC0F28`](#\_0xEC9264727EEC0F28).
 * Hash: 0x14621BB1DF14E2B2 | ApiSet: undefined
 */
export function releaseControlOfFrontend() {
    ReleaseControlOfFrontend();
}
/**
 * ```
 * Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
 * ```
 * Hash: 0x551DF99658DB6EE8 | ApiSet: undefined
 */
export function raceGalleryAddBlip(position) {
    return RaceGalleryAddBlip(position.x, position.y, position.z);
}
/**
 * Hash: 0xC65AB383CD91DF98 | ApiSet: undefined
 */
export function preloadBusyspinner() {
    PreloadBusyspinner();
}
/**
 * Hash: 0x81FA173F170560D1 | ApiSet: undefined
 */
export function refreshWaypoint() {
    RefreshWaypoint();
}
/**
 * ```
 * Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
 * ```
 * Hash: 0x1EAE6DD17B7A5EFA | ApiSet: undefined
 */
export function raceGalleryNextBlipSprite(spriteId) {
    RaceGalleryNextBlipSprite(spriteId);
}
/**
 * Removes the gamer tag associated with the provided ID. This does not happen instantly. Use [IS_MP_GAMER_TAG_FREE](#\_0x595B5178E412E199) to determine when the ID is free for reuse.
 * Hash: 0x31698AA80E0223F8 | ApiSet: undefined
 */
export function removeMpGamerTag(gamerTagId) {
    RemoveMpGamerTag(gamerTagId);
}
/**
 * Hash: 0x57D9C12635E25CE3 | ApiSet: undefined
 */
export function registerNamedRendertarget(name, p1) {
    return RegisterNamedRendertarget(name, p1);
}
/**
 * Hash: 0xE9F6FFE837354DD4 | ApiSet: undefined
 */
export function releaseNamedRendertarget(name) {
    return ReleaseNamedRendertarget(name);
}
/**
 * ```
 * Removes multiplayer cash hud each frame
 * ```
 * Hash: 0x968F270E39141ECA | ApiSet: undefined
 */
export function removeMultiplayerHudCash() {
    RemoveMultiplayerHudCash();
}
/**
 * Forces the map menu to reload.
 * Hash: 0x2916A928514C9827 | ApiSet: undefined
 */
export function reloadMapMenu() {
    ReloadMapMenu();
}
/**
 * Removes the blip from your map.
 * **Note:** This function only works on the script that created the blip, if you wish to remove blips created by other scripts, see [`SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT`](#\_0x86A652570E5F25DD).
 * Hash: 0x86A652570E5F25DD | ApiSet: undefined
 */
export function removeBlip(blip) {
    const _blip = blip instanceof Entity ? blip.remoteId() : blip;
    RemoveBlip(_blip);
}
/**
 * Hash: 0x6EF54AB721DC6242 | ApiSet: undefined
 */
export function removeWarningMessageListItems() {
    RemoveWarningMessageListItems();
}
/**
 * Hash: 0xC7C6789AA1CFEDD0 | ApiSet: undefined
 */
export function removeMultiplayerBankCash() {
    RemoveMultiplayerBankCash();
}
/**
 * Hash: 0x95CF81BD06EE1887 | ApiSet: undefined
 */
export function removeMultiplayerWalletCash() {
    RemoveMultiplayerWalletCash();
}
/**
 * Hud colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)
 * Hash: 0xF314CF4F0211894E | ApiSet: undefined
 */
export function replaceHudColourWithRgba(hudColorIndex, r, g, b, a) {
    ReplaceHudColourWithRgba(hudColorIndex, r, g, b, a);
}
/**
 * Changes the hud color at a given index (hudColorIndex) by another one (hudColorIndex2).
 * HUD colors can be found [here](https://docs.fivem.net/docs/game-references/hud-colors/)
 * Hash: 0x1CCC708F0F850613 | ApiSet: undefined
 */
export function replaceHudColour(hudColorIndex, hudColorIndex2) {
    ReplaceHudColour(hudColorIndex, hudColorIndex2);
}
/**
 * Hash: 0x6009F9F1AE90D8A6 | ApiSet: undefined
 */
export function requestAdditionalTextForDlc(gxt, slot) {
    RequestAdditionalTextForDlc(gxt, slot);
}
/**
 * ```
 * Request a gxt into the passed slot.
 * ```
 * Hash: 0x71A78003C8E71424 | ApiSet: undefined
 */
export function requestAdditionalText(gxt, slot) {
    RequestAdditionalText(gxt, slot);
}
/**
 * Hash: 0xB99C4E4D9499DF29 | ApiSet: undefined
 */
export function resetGlobalActionscriptFlag(flagIndex) {
    ResetGlobalActionscriptFlag(flagIndex);
}
/**
 * Hash: 0x450930E616475D0D | ApiSet: undefined
 */
export function resetHudComponentValues(id) {
    ResetHudComponentValues(id);
}
/**
 * Hash: 0x12782CE0A636E9F0 | ApiSet: undefined
 */
export function resetReticuleValues() {
    ResetReticuleValues();
}
/**
 * Changes the current frontend menu to the desired frontend menu version.
 * Hash: 0x10706DC6AD2D49C0 | ApiSet: undefined
 */
export function restartFrontendMenu(menuHash, highlightedTab) {
    if (typeof menuHash === 'string')
        menuHash = this.getHashKey(menuHash);
    RestartFrontendMenu(menuHash, highlightedTab);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x1DFEDD15019315A9 | ApiSet: undefined
 */
export function setAbilityBarVisibilityInMultiplayer(visible) {
    SetAbilityBarVisibilityInMultiplayer(visible);
}
/**
 * Hash: 0x9969599CCFF5D85E | ApiSet: undefined
 */
export function setAbilityBarValue(value, maxValue) {
    SetAbilityBarValue(value, maxValue);
}
/**
 * **NOTE:** This must be called before you open the text input box.
 * Hash: 0x577599CCED639CA2 | ApiSet: undefined
 */
export function setAllowCommaOnTextInput(allow) {
    SetAllowCommaOnTextInput(allow);
}
/**
 * Allows the user to set a blip as friendly or enemy based on the toggle.
 * Hash: 0x6F6F290102C02AB4 | ApiSet: undefined
 */
export function setBlipAsFriendly(blip, toggle) {
    SetBlipAsFriendly(blip, toggle);
}
/**
 * Hash: 0xB203913733F27884 | ApiSet: undefined
 */
export function setBlipBright(blip, toggle) {
    SetBlipBright(blip, toggle);
}
/**
 * Toggles the big minimap state like in GTA:Online.
 * To get the current state of the minimap, use [`IS_BIGMAP_ACTIVE`](#\_0xFFF65C63).
 * Hash: 0x231C8F89D0539D8F | ApiSet: undefined
 */
export function setBigmapActive(toggleBigMap, showFullMap) {
    SetBigmapActive(toggleBigMap, showFullMap);
}
/**
 * Hash: 0x24AC0137444F9FD5 | ApiSet: undefined
 */
export function setBlipAsMissionCreatorBlip(blip, toggle) {
    SetBlipAsMissionCreatorBlip(blip, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x889329C80FE5963C | ApiSet: undefined
 */
export function setAllowAbilityBarInMultiplayer(toggle) {
    SetAllowAbilityBarInMultiplayer(toggle);
}
/**
 * Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
 * Hash: 0xBE8BE4FE60E27B72 | ApiSet: undefined
 */
export function setBlipAsShortRange(blip, toggle) {
    SetBlipAsShortRange(blip, toggle);
}
/**
 * ```
 * Sets alpha-channel for blip color.
 * Example:
 * `Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);`
 * `HUD::SET_BLIP_COLOUR(blip , 3);`
 * `HUD::SET_BLIP_ALPHA(blip , 64);`
 * ```
 * Hash: 0x45FF974EEE1C8734 | ApiSet: undefined
 */
export function setBlipAlpha(blip, alpha) {
    SetBlipAlpha(blip, alpha);
}
/**
 * Examples result:
 * ![](https://i.imgur.com/skY6vAJ.png)
 * <strong>index:</strong>
 * ```
 * 1 = No distance shown in legend
 * 2 = Distance shown in legend
 * 7 = "Other Players" category, also shows distance in legend
 * 10 = "Property" category
 * 11 = "Owned Property" category
 * 12 - 133 = Custom named categories
 * 134 - 254 = Custom unnamed categories
 * ```
 * `index` wraps around after 255.
 * Blips with categories `7`, `10`, `11` or `12 - 254` (custom categories) will all show under the specific categories listing in the map legend, regardless of sprite or name.
 * <strong>Legend entries</strong>
 * | index | Legend entry | Label |
 * | --- | --- | --- |
 * | 7 | Other Players | `BLIP_OTHPLYR` |
 * | 10 | Property | `BLIP_PROPCAT` |
 * | 11 | Owned Property | `BLIP_APARTCAT` |
 * | 12 - 133 | Custom categories (Named) | `BLIP_CAT_` + `index` |
 * | 134 - 254 | Custom categories (Unnamed) | `-` |
 * Hash: 0x234CDD44D996FD9A | ApiSet: undefined
 */
export function setBlipCategory(blip, index) {
    SetBlipCategory(blip, index);
}
/**
 * <strong>displayId Behaviour</strong>
 * | display ID 	| Behaviour                                                   	|
 * |------------	|-------------------------------------------------------------	|
 * | 0          	| Doesn't show up, ever, anywhere.                            	|
 * | 1          	| Doesn't show up, ever, anywhere.                            	|
 * | 2          	| Shows on both main map and minimap. (Selectable on map)     	|
 * | 3          	| Shows on main map only. (Selectable on map)                 	|
 * | 4          	| Shows on main map only. (Selectable on map)                 	|
 * | 5          	| Shows on minimap only.                                      	|
 * | 6          	| Shows on both main map and minimap. (Selectable on map)     	|
 * | 7          	| Doesn't show up, ever, anywhere.                            	|
 * | 8          	| Shows on both main map and minimap. (Not selectable on map) 	|
 * | 9          	| Shows on minimap only.                                      	|
 * | 10         	| Shows on both main map and minimap. (Not selectable on map) 	|
 * Anything higher than 10 seems to be exactly the same as 10.
 * Rockstar seem to only use 0, 2, 3, 4, 5 and 8 in the decompiled scripts.
 * Hash: 0x9029B2F3DA924928 | ApiSet: undefined
 */
export function setBlipDisplay(blip, displayId) {
    SetBlipDisplay(blip, displayId);
}
/**
 * Hash: 0x03D7FB09E75D6B7E | ApiSet: undefined
 */
export function setBlipColour(blip, color) {
    SetBlipColour(blip, color);
}
/**
 * Hash: 0xAE2AF67E9D9AF65D | ApiSet: undefined
 */
export function setBlipCoords(blip, posX, posY, posZ) {
    SetBlipCoords(blip, posX, posY, posZ);
}
/**
 * ```
 * Must be toggled before being queued for animation
 * ```
 * Hash: 0xC4278F70131BAA6D | ApiSet: undefined
 */
export function setBlipDisplayIndicatorOnBlip(blip, toggle) {
    SetBlipDisplayIndicatorOnBlip(blip, toggle);
}
/**
 * Hash: 0x54318C915D27E4CE | ApiSet: undefined
 */
export function setBlipHiddenOnLegend(blip, toggle) {
    SetBlipHiddenOnLegend(blip, toggle);
}
/**
 * Hash: 0x2AEE8F8390D2298C | ApiSet: undefined
 */
export function setBlipFade(blip, opacity, duration) {
    SetBlipFade(blip, opacity, duration);
}
/**
 * Sets the interval in milliseconds before flashing the blip.
 * Hash: 0xAA51DB313C010A7E | ApiSet: undefined
 */
export function setBlipFlashInterval(blip, interval) {
    SetBlipFlashInterval(blip, interval);
}
/**
 * Flashes blip for time in milliseconds before stopping.
 * Hash: 0xD3CD6FD297AE87CC | ApiSet: undefined
 */
export function setBlipFlashTimer(blip, duration) {
    SetBlipFlashTimer(blip, duration);
}
/**
 * Hash: 0x2E8D9498C56DD0D1 | ApiSet: undefined
 */
export function setBlipFlashesAlternate(blip, toggle) {
    SetBlipFlashesAlternate(blip, toggle);
}
/**
 * ```
 * Doesn't work if the label text of gxtEntry is >= 80.
 * ```
 * Hash: 0xEAA0FFE120D92784 | ApiSet: undefined
 */
export function setBlipNameFromTextFile(blip, gxtEntry) {
    SetBlipNameFromTextFile(blip, gxtEntry);
}
/**
 * Hash: 0xE2590BC29220CEBB | ApiSet: undefined
 */
export function setBlipHighDetail(blip, toggle) {
    SetBlipHighDetail(blip, toggle);
}
/**
 * Hash: 0xB14552383D39CE3E | ApiSet: undefined
 */
export function setBlipFlashes(blip, toggle) {
    SetBlipFlashes(blip, toggle);
}
/**
 * ```
 * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
 * ```
 * Hash: 0xAE9FC9EF6A9FAC79 | ApiSet: undefined
 */
export function setBlipPriority(blip, priority) {
    SetBlipPriority(blip, priority);
}
/**
 * Hash: 0x837155CD2F63DA09 | ApiSet: undefined
 */
export function setBlipRouteColour(blip, colour) {
    SetBlipRouteColour(blip, colour);
}
/**
 * ```
 * After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
 * ```
 * Hash: 0xF87683CDF73C3F6E | ApiSet: undefined
 */
export function setBlipRotation(blip, rotation) {
    SetBlipRotation(blip, rotation);
}
/**
 * Hash: 0x127DE7B20C60A6A3 | ApiSet: undefined
 */
export function setBlipNameToPlayerName(blip, player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetBlipNameToPlayerName(blip, _player);
}
/**
 * Hash: 0xD38744167B2FA257 | ApiSet: undefined
 */
export function setBlipScale(blip, scale) {
    SetBlipScale(blip, scale);
}
/**
 * ```
 * Enable / disable showing route for the Blip-object.
 * ```
 * Hash: 0x4F7D8A9BFB0B43E9 | ApiSet: undefined
 */
export function setBlipRoute(blip, enabled) {
    SetBlipRoute(blip, enabled);
}
/**
 * Hash: 0x14892474891E09EB | ApiSet: undefined
 */
export function setBlipSecondaryColour(blip, r, g, b) {
    SetBlipSecondaryColour(blip, r, g, b);
}
/**
 * See https://imgur.com/a/lLkEsMN
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xCD6524439909C979 | ApiSet: undefined
 */
export function setBlipScaleTransformation(blip, xScale, yScale) {
    SetBlipScaleTransformation(blip, xScale, yScale);
}
/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0x13127EC3665E8EE1 | ApiSet: undefined
 */
export function setBlipShowCone(blip, toggle) {
    SetBlipShowCone(blip, toggle);
}
/**
 * ```
 * Does not require whole number/integer rotations.
 * ```
 * Hash: 0xA8B6AFDAC320AC87 | ApiSet: undefined
 */
export function setBlipSquaredRotation(blip, heading) {
    SetBlipSquaredRotation(blip, heading);
}
/**
 * ```
 * Makes a blip go small when off the minimap.
 * SET_BLIP_AS_*
 * ```
 * Hash: 0x2B6D467DAB714E8D | ApiSet: undefined
 */
export function setBlipShrink(blip, toggle) {
    SetBlipShrink(blip, toggle);
}
/**
 * Hash: 0x39BBF623FC803EAC | ApiSet: undefined
 */
export function setColourOfNextTextComponent(hudColor) {
    SetColourOfNextTextComponent(hudColor);
}
/**
 * Set a custom color for the MP HUD, providing a way to customize the HUD's appearance similar to character color changes in MP.
 * ```cpp
 * enum eHudColours {
 * HUD_COLOUR_PURE_WHITE = 0,
 * HUD_COLOUR_WHITE = 1,
 * HUD_COLOUR_BLACK = 2,
 * HUD_COLOUR_GREY = 3,
 * HUD_COLOUR_GREYLIGHT = 4,
 * HUD_COLOUR_GREYDARK = 5,
 * HUD_COLOUR_RED = 6,
 * HUD_COLOUR_REDLIGHT = 7,
 * HUD_COLOUR_REDDARK = 8,
 * HUD_COLOUR_BLUE = 9,
 * HUD_COLOUR_BLUELIGHT = 10,
 * HUD_COLOUR_BLUEDARK = 11,
 * HUD_COLOUR_YELLOW = 12,
 * HUD_COLOUR_YELLOWLIGHT = 13,
 * HUD_COLOUR_YELLOWDARK = 14,
 * HUD_COLOUR_ORANGE = 15,
 * HUD_COLOUR_ORANGELIGHT = 16,
 * HUD_COLOUR_ORANGEDARK = 17,
 * HUD_COLOUR_GREEN = 18,
 * HUD_COLOUR_GREENLIGHT = 19,
 * HUD_COLOUR_GREENDARK = 20,
 * HUD_COLOUR_PURPLE = 21,
 * HUD_COLOUR_PURPLELIGHT = 22,
 * HUD_COLOUR_PURPLEDARK = 23,
 * HUD_COLOUR_PINK = 24,
 * HUD_COLOUR_STAR = 25,
 * HUD_COLOUR_STARLIGHT = 26,
 * HUD_COLOUR_STARDARK = 27,
 * HUD_COLOUR_NET_PLAYER1 = 28,
 * HUD_COLOUR_NET_PLAYER2 = 29,
 * HUD_COLOUR_NET_PLAYER3 = 30,
 * HUD_COLOUR_NET_PLAYER4 = 31,
 * HUD_COLOUR_NET_PLAYER5 = 32,
 * HUD_COLOUR_NET_PLAYER6 = 33,
 * HUD_COLOUR_NET_PLAYER7 = 34,
 * HUD_COLOUR_NET_PLAYER8 = 35,
 * HUD_COLOUR_NET_PLAYER9 = 36,
 * HUD_COLOUR_NET_PLAYER10 = 37,
 * HUD_COLOUR_NET_PLAYER11 = 38,
 * HUD_COLOUR_NET_PLAYER12 = 39,
 * HUD_COLOUR_NET_PLAYER13 = 40,
 * HUD_COLOUR_NET_PLAYER14 = 41,
 * HUD_COLOUR_NET_PLAYER15 = 42,
 * HUD_COLOUR_NET_PLAYER16 = 43,
 * HUD_COLOUR_NET_PLAYER17 = 44,
 * HUD_COLOUR_NET_PLAYER18 = 45,
 * HUD_COLOUR_NET_PLAYER19 = 46,
 * HUD_COLOUR_NET_PLAYER20 = 47,
 * HUD_COLOUR_NET_PLAYER21 = 48,
 * HUD_COLOUR_NET_PLAYER22 = 49,
 * HUD_COLOUR_NET_PLAYER23 = 50,
 * HUD_COLOUR_NET_PLAYER24 = 51,
 * HUD_COLOUR_NET_PLAYER25 = 52,
 * HUD_COLOUR_NET_PLAYER26 = 53,
 * HUD_COLOUR_NET_PLAYER27 = 54,
 * HUD_COLOUR_NET_PLAYER28 = 55,
 * HUD_COLOUR_NET_PLAYER29 = 56,
 * HUD_COLOUR_NET_PLAYER30 = 57,
 * HUD_COLOUR_NET_PLAYER31 = 58,
 * HUD_COLOUR_NET_PLAYER32 = 59,
 * HUD_COLOUR_SIMPLEBLIP_DEFAULT = 60,
 * HUD_COLOUR_MENU_BLUE = 61,
 * HUD_COLOUR_MENU_GREY_LIGHT = 62,
 * HUD_COLOUR_MENU_BLUE_EXTRA_DARK = 63,
 * HUD_COLOUR_MENU_YELLOW = 64,
 * HUD_COLOUR_MENU_YELLOW_DARK = 65,
 * HUD_COLOUR_MENU_GREEN = 66,
 * HUD_COLOUR_MENU_GREY = 67,
 * HUD_COLOUR_MENU_GREY_DARK = 68,
 * HUD_COLOUR_MENU_HIGHLIGHT = 69,
 * HUD_COLOUR_MENU_STANDARD = 70,
 * HUD_COLOUR_MENU_DIMMED = 71,
 * HUD_COLOUR_MENU_EXTRA_DIMMED = 72,
 * HUD_COLOUR_BRIEF_TITLE = 73,
 * HUD_COLOUR_MID_GREY_MP = 74,
 * HUD_COLOUR_NET_PLAYER1_DARK = 75,
 * HUD_COLOUR_NET_PLAYER2_DARK = 76,
 * HUD_COLOUR_NET_PLAYER3_DARK = 77,
 * HUD_COLOUR_NET_PLAYER4_DARK = 78,
 * HUD_COLOUR_NET_PLAYER5_DARK = 79,
 * HUD_COLOUR_NET_PLAYER6_DARK = 80,
 * HUD_COLOUR_NET_PLAYER7_DARK = 81,
 * HUD_COLOUR_NET_PLAYER8_DARK = 82,
 * HUD_COLOUR_NET_PLAYER9_DARK = 83,
 * HUD_COLOUR_NET_PLAYER10_DARK = 84,
 * HUD_COLOUR_NET_PLAYER11_DARK = 85,
 * HUD_COLOUR_NET_PLAYER12_DARK = 86,
 * HUD_COLOUR_NET_PLAYER13_DARK = 87,
 * HUD_COLOUR_NET_PLAYER14_DARK = 88,
 * HUD_COLOUR_NET_PLAYER15_DARK = 89,
 * HUD_COLOUR_NET_PLAYER16_DARK = 90,
 * HUD_COLOUR_NET_PLAYER17_DARK = 91,
 * HUD_COLOUR_NET_PLAYER18_DARK = 92,
 * HUD_COLOUR_NET_PLAYER19_DARK = 93,
 * HUD_COLOUR_NET_PLAYER20_DARK = 94,
 * HUD_COLOUR_NET_PLAYER21_DARK = 95,
 * HUD_COLOUR_NET_PLAYER22_DARK = 96,
 * HUD_COLOUR_NET_PLAYER23_DARK = 97,
 * HUD_COLOUR_NET_PLAYER24_DARK = 98,
 * HUD_COLOUR_NET_PLAYER25_DARK = 99,
 * HUD_COLOUR_NET_PLAYER26_DARK = 100,
 * HUD_COLOUR_NET_PLAYER27_DARK = 101,
 * HUD_COLOUR_NET_PLAYER28_DARK = 102,
 * HUD_COLOUR_NET_PLAYER29_DARK = 103,
 * HUD_COLOUR_NET_PLAYER30_DARK = 104,
 * HUD_COLOUR_NET_PLAYER31_DARK = 105,
 * HUD_COLOUR_NET_PLAYER32_DARK = 106,
 * HUD_COLOUR_BRONZE = 107,
 * HUD_COLOUR_SILVER = 108,
 * HUD_COLOUR_GOLD = 109,
 * HUD_COLOUR_PLATINUM = 110,
 * HUD_COLOUR_GANG1 = 111,
 * HUD_COLOUR_GANG2 = 112,
 * HUD_COLOUR_GANG3 = 113,
 * HUD_COLOUR_GANG4 = 114,
 * HUD_COLOUR_SAME_CREW = 115,
 * HUD_COLOUR_FREEMODE = 116,
 * HUD_COLOUR_PAUSE_BG = 117,
 * HUD_COLOUR_FRIENDLY = 118,
 * HUD_COLOUR_ENEMY = 119,
 * HUD_COLOUR_LOCATION = 120,
 * HUD_COLOUR_PICKUP = 121,
 * HUD_COLOUR_PAUSE_SINGLEPLAYER = 122,
 * HUD_COLOUR_FREEMODE_DARK = 123,
 * HUD_COLOUR_INACTIVE_MISSION = 124,
 * HUD_COLOUR_DAMAGE = 125,
 * HUD_COLOUR_PINKLIGHT = 126,
 * HUD_COLOUR_PM_MITEM_HIGHLIGHT = 127,
 * HUD_COLOUR_SCRIPT_VARIABLE = 128,
 * HUD_COLOUR_YOGA = 129,
 * HUD_COLOUR_TENNIS = 130,
 * HUD_COLOUR_GOLF = 131,
 * HUD_COLOUR_SHOOTING_RANGE = 132,
 * HUD_COLOUR_FLIGHT_SCHOOL = 133,
 * HUD_COLOUR_NORTH_BLUE = 134,
 * HUD_COLOUR_SOCIAL_CLUB = 135,
 * HUD_COLOUR_PLATFORM_BLUE = 136,
 * HUD_COLOUR_PLATFORM_GREEN = 137,
 * HUD_COLOUR_PLATFORM_GREY = 138,
 * HUD_COLOUR_FACEBOOK_BLUE = 139,
 * HUD_COLOUR_INGAME_BG = 140,
 * HUD_COLOUR_DARTS = 141,
 * HUD_COLOUR_WAYPOINT = 142,
 * HUD_COLOUR_MICHAEL = 143,
 * HUD_COLOUR_FRANKLIN = 144,
 * HUD_COLOUR_TREVOR = 145,
 * HUD_COLOUR_GOLF_P1 = 146,
 * HUD_COLOUR_GOLF_P2 = 147,
 * HUD_COLOUR_GOLF_P3 = 148,
 * HUD_COLOUR_GOLF_P4 = 149,
 * HUD_COLOUR_WAYPOINTLIGHT = 150,
 * HUD_COLOUR_WAYPOINTDARK = 151,
 * HUD_COLOUR_PANEL_LIGHT = 152,
 * HUD_COLOUR_MICHAEL_DARK = 153,
 * HUD_COLOUR_FRANKLIN_DARK = 154,
 * HUD_COLOUR_TREVOR_DARK = 155,
 * HUD_COLOUR_OBJECTIVE_ROUTE = 156,
 * HUD_COLOUR_PAUSEMAP_TINT = 157,
 * HUD_COLOUR_PAUSE_DESELECT = 158,
 * HUD_COLOUR_PM_WEAPONS_PURCHASABLE = 159,
 * HUD_COLOUR_PM_WEAPONS_LOCKED = 160,
 * HUD_COLOUR_END_SCREEN_BG = 161,
 * HUD_COLOUR_CHOP = 162,
 * HUD_COLOUR_PAUSEMAP_TINT_HALF = 163,
 * HUD_COLOUR_NORTH_BLUE_OFFICIAL = 164,
 * HUD_COLOUR_SCRIPT_VARIABLE_2 = 165,
 * HUD_COLOUR_H = 166,
 * HUD_COLOUR_HDARK = 167,
 * HUD_COLOUR_T = 168,
 * HUD_COLOUR_TDARK = 169,
 * HUD_COLOUR_HSHARD = 170,
 * HUD_COLOUR_CONTROLLER_MICHAEL = 171
 * HUD_COLOUR_CONTROLLER_FRANKLIN = 172
 * HUD_COLOUR_CONTROLLER_TREVOR = 173
 * HUD_COLOUR_CONTROLLER_CHOP = 174,
 * HUD_COLOUR_VIDEO_EDITOR_VIDEO = 175,
 * HUD_COLOUR_VIDEO_EDITOR_AUDIO = 176,
 * HUD_COLOUR_VIDEO_EDITOR_TEXT = 177,
 * HUD_COLOUR_HB_BLUE = 178,
 * HUD_COLOUR_HB_YELLOW = 179,
 * HUD_COLOUR_VIDEO_EDITOR_SCORE = 180,
 * HUD_COLOUR_VIDEO_EDITOR_AUDIO_FADEOUT = 181,
 * HUD_COLOUR_VIDEO_EDITOR_TEXT_FADEOUT = 182,
 * HUD_COLOUR_VIDEO_EDITOR_SCORE_FADEOUT = 183,
 * HUD_COLOUR_HEIST_BACKGROUND = 184,
 * HUD_COLOUR_VIDEO_EDITOR_AMBIENT = 185,
 * HUD_COLOUR_VIDEO_EDITOR_AMBIENT_FADEOUT = 186,
 * HUD_COLOUR_GANG_BOSS = 187,
 * HUD_COLOUR_GOON = 188,
 * HUD_COLOUR_BOSS = 189,
 * HUD_COLOUR_LOW_FLOW = 190,
 * HUD_COLOUR_LOW_FLOW_DARK = 191,
 * HUD_COLOUR_G1 = 192,
 * HUD_COLOUR_G2 = 193,
 * HUD_COLOUR_G3 = 194,
 * HUD_COLOUR_G4 = 195,
 * HUD_COLOUR_G5 = 196,
 * HUD_COLOUR_G6 = 197,
 * HUD_COLOUR_G7 = 198,
 * HUD_COLOUR_G8 = 199,
 * HUD_COLOUR_G9 = 200,
 * HUD_COLOUR_G10 = 201,
 * HUD_COLOUR_G11 = 202,
 * HUD_COLOUR_G12 = 203,
 * HUD_COLOUR_G13 = 204,
 * HUD_COLOUR_G14 = 205,
 * HUD_COLOUR_G15 = 206,
 * HUD_COLOUR_ADVERSARY = 207,
 * HUD_COLOUR_DEGEN_RED = 208,
 * HUD_COLOUR_DEGEN_YELLOW = 209,
 * HUD_COLOUR_DEGEN_GREEN = 210,
 * HUD_COLOUR_DEGEN_CYAN = 211,
 * HUD_COLOUR_DEGEN_BLUE = 212,
 * HUD_COLOUR_DEGEN_MAGENTA = 213,
 * HUD_COLOUR_STUNT_1 = 214,
 * HUD_COLOUR_STUNT_2 = 215,
 * HUD_COLOUR_SPECIAL_RACE_SERIES = 216
 * HUD_COLOUR_SPECIAL_RACE_SERIES_DARK = 217,
 * HUD_COLOUR_CS = 218
 * HUD_COLOUR_CS_DARK = 219,
 * HUD_COLOUR_TECH_GREEN = 220,
 * HUD_COLOUR_TECH_GREEN_DARK = 221,
 * HUD_COLOUR_TECH_RED = 222,
 * HUD_COLOUR_TECH_GREEN_VERY_DARK = 223,
 * HUD_COLOUR_PLACEHOLDER_01 = 224,
 * HUD_COLOUR_PLACEHOLDER_02 = 225,
 * HUD_COLOUR_PLACEHOLDER_03 = 226,
 * HUD_COLOUR_PLACEHOLDER_04 = 227,
 * HUD_COLOUR_PLACEHOLDER_05 = 228,
 * HUD_COLOUR_PLACEHOLDER_06 = 229,
 * HUD_COLOUR_PLACEHOLDER_07 = 230,
 * HUD_COLOUR_PLACEHOLDER_08 = 231,
 * HUD_COLOUR_PLACEHOLDER_09 = 232,
 * HUD_COLOUR_PLACEHOLDER_10 = 233,
 * HUD_COLOUR_JUNK_ENERGY = 234
 * };
 * ```
 * ```
 * NativeDB Introduced: 2545
 * ```
 * Hash: 0x2ACCB195F3CCD9DE | ApiSet: undefined
 */
export function setCustomMpHudColor(hudColorId) {
    SetCustomMpHudColor(hudColorId);
}
/**
 * Sets the displayed sprite for a specific blip.
 * There's a [list of sprites](https://docs.fivem.net/game-references/blips/) on the FiveM documentation site.
 * Hash: 0xDF735600A4696DAF | ApiSet: undefined
 */
export function setBlipSprite(blip, spriteId) {
    SetBlipSprite(blip, spriteId);
}
/**
 * ```
 * SET_*
 * ```
 * Hash: 0x2632482FD6B9AB87 | ApiSet: undefined
 */
export function setDirectorModeClearTriggeredFlag() {
    SetDirectorModeClearTriggeredFlag();
}
/**
 * Overrides the position of the main player blip for the current frame.
 * Hash: 0x77E2DD177910E1CF | ApiSet: undefined
 */
export function setFakePausemapPlayerPositionThisFrame(x, y) {
    SetFakePausemapPlayerPositionThisFrame(x, y);
}
/**
 * ### Arrow Positions
 * *   0 = Off / No arrow
 * *   1 = Top
 * *   2 = Left
 * *   3 = Bottom
 * *   4 = Right
 * ### Note
 * Any numeric value greater than 4 will result in a right arrow (Index 4)
 * ### Important
 * Needs to be called every frame
 * ![Preview of the provided example code](https://forum.cfx.re/uploads/default/original/4X/7/f/3/7f319bc93c3a00b8829bd4ac8dddc235fbf3a9ef.png)
 * Hash: 0x788E7FD431BD67F1 | ApiSet: undefined
 */
export function setFloatingHelpTextStyle(hudIndex, style, hudColor, alpha, arrowPosition, boxOffset) {
    SetFloatingHelpTextStyle(hudIndex, style, hudColor, alpha, arrowPosition, boxOffset);
}
/**
 * Hash: 0x7679CC1BCEBE3D4C | ApiSet: undefined
 */
export function setFloatingHelpTextScreenPosition(hudIndex, x, y) {
    SetFloatingHelpTextScreenPosition(hudIndex, x, y);
}
/**
 * Hash: 0xB094BC1DB4018240 | ApiSet: undefined
 */
export function setFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetFloatingHelpTextToEntity(hudIndex, _entity, offsetX, offsetY);
}
/**
 * Hash: 0x784BA7E0ECEB4178 | ApiSet: undefined
 */
export function setFloatingHelpTextWorldPosition(hudIndex, position) {
    SetFloatingHelpTextWorldPosition(hudIndex, position.x, position.y, position.z);
}
/**
 * Hash: 0x745711A75AB09277 | ApiSet: undefined
 */
export function setFrontendActive(active) {
    SetFrontendActive(active);
}
/**
 * Hash: 0x3DDA37128DD1ACA8 | ApiSet: undefined
 */
export function setGpsMultiRouteRender(toggle) {
    SetGpsMultiRouteRender(toggle);
}
/**
 * ```
 * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
 * Doesn't seem like the flags are actually read by the game at all.
 * ```
 * Hash: 0x5B440763A4C8D15B | ApiSet: undefined
 */
export function setGpsFlags(p0, p1) {
    SetGpsFlags(p0, p1);
}
/**
 * Hash: 0x320D0E0D936A0E9B | ApiSet: undefined
 */
export function setGpsFlashes(toggle) {
    SetGpsFlashes(toggle);
}
/**
 * Hash: 0x900086F371220B6F | ApiSet: undefined
 */
export function setGpsCustomRouteRender(toggle, radarThickness, mapThickness) {
    SetGpsCustomRouteRender(toggle, radarThickness, mapThickness);
}
/**
 * Hash: 0xB9C362BABECDDC7A | ApiSet: undefined
 */
export function setHelpMessageTextStyle(style, hudColor, alpha, p3, p4) {
    SetHelpMessageTextStyle(style, hudColor, alpha, p3, p4);
}
/**
 * Hash: 0x3F5CC444DCAAA8F2 | ApiSet: undefined
 */
export function setHealthHudDisplayValues(health, capacity, wasAdded) {
    SetHealthHudDisplayValues(health, capacity, wasAdded);
}
/**
 * Hash: 0xAABB1F56E2A17CED | ApiSet: undefined
 */
export function setHudComponentPosition(id, x, y) {
    SetHudComponentPosition(id, x, y);
}
/**
 * Hash: 0x7B21E0BB01E8224A | ApiSet: undefined
 */
export function setMainPlayerBlipColour(color) {
    SetMainPlayerBlipColour(color);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x504DFE62A1692296 | ApiSet: undefined
 */
export function setInteriorZoomLevelIncreased(toggle) {
    SetInteriorZoomLevelIncreased(toggle);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x7EC8ABA5E74B3D7A | ApiSet: undefined
 */
export function setInteriorZoomLevelDecreased(toggle) {
    SetInteriorZoomLevelDecreased(toggle);
}
/**
 * This native is used to colorize/toggle certain map components like the army base.
 * Component IDs 6 through 14 are used by the freemode event King of the Castle in GTA Online.
 * ### An incomplete list of component IDs:
 * *   **0**: Los Santos International Airport yellow runway markers
 * *   **1**: Sandy Shores Airfield yellow runway markers
 * *   **2**: McKenzie Field yellow runway markers
 * *   **6**: Vespucci Beach lifeguard building
 * *   **7**: Top level zone of Alien Camp (Hippy Camp)
 * *   **8**: Paleto Bay fire station drill tower
 * *   **9** Land Act Dam tower
 * *   **10** Pala Springs Aerial Tramway
 * *   **11** Galileo Observatory power unit
 * *   **12** Small zone (empty "interior") near Central Los Santos Medical Center
 * *   **13** Richman Mansion grotto
 * *   **14** 2 Alien Camp (Hippy Camp) circles
 * *   **15** Fort Zancudo
 * Hash: 0x75A9A10948D1DEA6 | ApiSet: undefined
 */
export function setMinimapComponent(componentID, toggle, hudColor) {
    return SetMinimapComponent(componentID, toggle, hudColor);
}
/**
 * Hash: 0x06A320535F5F0248 | ApiSet: undefined
 */
export function setMaxArmourHudDisplay(maximumValue) {
    SetMaxArmourHudDisplay(maximumValue);
}
/**
 * Hash: 0x975D66A0BC17064C | ApiSet: undefined
 */
export function setMaxHealthHudDisplay(maximumValue) {
    SetMaxHealthHudDisplay(maximumValue);
}
/**
 * ```
 * Argument must be 0.0f or above 38.0f, or it will be ignored.
 * ```
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0xD201F3FF917A506D | ApiSet: undefined
 */
export function setMinimapAltitudeIndicatorLevel(altitude, p1) {
    SetMinimapAltitudeIndicatorLevel(altitude, p1);
}
/**
 * Hash: 0x58FADDED207897DC | ApiSet: undefined
 */
export function setMinimapBlockWaypoint(toggle) {
    SetMinimapBlockWaypoint(toggle);
}
/**
 * ```
 * If true, the entire map will be revealed.
 * ```
 * Hash: 0xF8DEE0A5600CBB93 | ApiSet: undefined
 */
export function setMinimapHideFow(toggle) {
    SetMinimapHideFow(toggle);
}
/**
 * Hash: 0x0923DBF87DFF735E | ApiSet: undefined
 */
export function setMinimapFowRevealCoordinate(position) {
    SetMinimapFowRevealCoordinate(position.x, position.y, position.z);
}
/**
 * Not much is known so far on what it does *exactly*.
 * All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
 * You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
 * You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
 * Use [`SET_MINIMAP_GOLF_COURSE_OFF()`](#\_0x35EDD5B2E3FF01C0) to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
 * Hash: 0x71BDB63DBAF8DA59 | ApiSet: undefined
 */
export function setMinimapGolfCourse(hole) {
    SetMinimapGolfCourse(hole);
}
/**
 * Hash: 0xE45087D85F468BC2 | ApiSet: undefined
 */
export function setMissionName2(p0, name) {
    SetMissionName2(p0, name);
}
/**
 * Hash: 0x5F28ECF5FC84772F | ApiSet: undefined
 */
export function setMissionName(p0, name) {
    SetMissionName(p0, name);
}
/**
 * Hash: 0x35EDD5B2E3FF01C0 | ApiSet: undefined
 */
export function setMinimapGolfCourseOff() {
    SetMinimapGolfCourseOff();
}
/**
 * Changes the mouse style.
 * ```cpp
 * enum eMousePointerStyle {
 * ARROW = 1,
 * ARROW_DIMMED = 2,
 * HAND_OPEN = 3,
 * HAND_GRAB = 4,
 * HAND_MIDDLE_FINGER = 5,
 * ARROW_LEFT = 6,
 * ARROW_RIGHT = 7,
 * ARROW_UP = 8,
 * ARROW_DOWN = 9,
 * ARROW_TRIMMING = 10,
 * ARROW_PLUS = 11,
 * ARROW_MINUS = 12
 * };
 * ```
 * Hash: 0x8DB8CFFD58B62552 | ApiSet: undefined
 */
export function setMouseCursorStyle(style) {
    SetMouseCursorStyle(style);
}
/**
 * ```
 * Toggles the North Yankton map
 * ```
 * Hash: 0x9133955F1A2DA957 | ApiSet: undefined
 */
export function setMinimapInPrologue(toggle) {
    SetMinimapInPrologue(toggle);
}
/**
 * Hash: 0x1A5CD7752DD28CD3 | ApiSet: undefined
 */
export function setMinimapInSpectatorMode(toggle, ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetMinimapInSpectatorMode(toggle, _ped);
}
/**
 * Enables or disables the sonar sweep animation on the minimap.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x6B50FC8749632EC1 | ApiSet: undefined
 */
export function setMinimapSonarSweep(toggle) {
    SetMinimapSonarSweep(toggle);
}
/**
 * Toggles the visibility of the cursor. Do note that if the game loses focus and then regains it, the cursor will become visible again.
 * Hash: 0x98215325A695E78A | ApiSet: undefined
 */
export function setMouseCursorVisible(isVisible) {
    SetMouseCursorVisible(isVisible);
}
/**
 * Sets the mouse pointer to be active on current frame.
 * Hash: 0xAAE7CE1D63167423 | ApiSet: undefined
 */
export function setMouseCursorThisFrame() {
    SetMouseCursorThisFrame();
}
/**
 * Hash: 0x7B7723747CCB55B6 | ApiSet: undefined
 */
export function setMpGamerTagBigText(gamerTagId, string) {
    SetMpGamerTagBigText(gamerTagId, string);
}
/**
 * Sets a gamer tag's component colour
 * Hash: 0x613ED644950626AE | ApiSet: undefined
 */
export function setMpGamerTagColour(gamerTagId, component, hudColorIndex) {
    SetMpGamerTagColour(gamerTagId, component, hudColorIndex);
}
/**
 * Should be enabled as component (2). Has 0 alpha by default.
 * Hash: 0x3158C77A7E888AB4 | ApiSet: undefined
 */
export function setMpGamerTagHealthBarColour(gamerTagId, hudColorIndex) {
    SetMpGamerTagHealthBarColour(gamerTagId, hudColorIndex);
}
/**
 * ```
 * Sets flag's sprite transparency. 0-255.
 * ```
 * Hash: 0xD48FE545CD46F857 | ApiSet: undefined
 */
export function setMpGamerTagAlpha(gamerTagId, component, alpha) {
    SetMpGamerTagAlpha(gamerTagId, component, alpha);
}
/**
 * ```
 * displays wanted star above head
 * ```
 * Hash: 0x9C16459B2324B2CF | ApiSet: undefined
 */
export function setMpGamerTagMpBagLargeCount(gamerTagId, count) {
    SetMpGamerTagMpBagLargeCount(gamerTagId, count);
}
/**
 * Manually sets the player health value for a gamer tag, using the maximum health to calculate what percentage of the bar should be filled.
 * Has no effect unless [\_SET_MP_GAMER_TAG_DISABLE_PLAYER_HEALTH_SYNC](#\_0xD29EC58C2F6B5014) has been called prior to disable synchronisation with the attached ped.
 * Hash: 0x1563FE35E9928E67 | ApiSet: undefined
 */
export function setMpGamerTagOverridePlayerHealth(gamerTagId, health, maximumHealth) {
    SetMpGamerTagOverridePlayerHealth(gamerTagId, health, maximumHealth);
}
/**
 * By default, the player health value shown by a gamer tag's health bar is synchronised with the health of the ped it is attached to.
 * This native disables that behaviour, allowing [`_SET_MP_GAMER_TAG_OVERRIDE_PLAYER_HEALTH`](#\_0x1563FE35E9928E67) to have an effect.
 * Hash: 0xD29EC58C2F6B5014 | ApiSet: undefined
 */
export function setMpGamerTagDisablePlayerHealthSync(gamerTagId, toggle) {
    SetMpGamerTagDisablePlayerHealthSync(gamerTagId, toggle);
}
/**
 * Sets the health bar of a gamer tag to show the health of the last (or current) vehicle of the ped the gamer tag is attached to.
 * The vehicle health value is stored separate from the player health and using it won't clear any player health overrides.
 * Hash: 0xA67F9C46D612B6F1 | ApiSet: undefined
 */
export function setMpGamerTagUseVehicleHealth(gamerTagId, toggle) {
    SetMpGamerTagUseVehicleHealth(gamerTagId, toggle);
}
/**
 * Hash: 0xDEA2B8283BAA3944 | ApiSet: undefined
 */
export function setMpGamerTagName(gamerTagId, string) {
    SetMpGamerTagName(gamerTagId, string);
}
/**
 * Preview image:
 * ![](https://i.imgur.com/1BTmdyv.png)
 * To change the bank balance use [`STAT_SET_INT`](#\_0xB3271D7AB655B441) with "BANK_BALANCE" to whatever value you need to.
 * Hash: 0xDD21B55DF695CD0A | ApiSet: undefined
 */
export function setMultiplayerBankCash() {
    SetMultiplayerBankCash();
}
/**
 * ```cpp
 * enum eMpGamerTagComponent
 * {
 * MP_TAG_GAMER_NAME = 0,
 * MP_TAG_CREW_TAG = 1,
 * MP_TAG_HEALTH_ARMOUR = 2,
 * MP_TAG_BIG_TEXT = 3,
 * MP_TAG_AUDIO_ICON = 4,
 * MP_TAG_USING_MENU = 5,
 * MP_TAG_PASSIVE_MODE = 6,
 * MP_TAG_WANTED_STARS = 7,
 * MP_TAG_DRIVER = 8,
 * MP_TAG_CO_DRIVER = 9,
 * MP_TAG_TAGGED = 10,
 * MP_TAG_GAMER_NAME_NEARBY = 11,
 * MP_TAG_ARROW = 12,
 * MP_TAG_PACKAGES = 13,
 * MP_TAG_INV_IF_PED_FOLLOWING = 14,
 * MP_TAG_RANK_TEXT = 15,
 * MP_TAG_TYPING = 16,
 * MP_TAG_BAG_LARGE = 17,
 * MP_TAG_ARROW = 18,
 * MP_TAG_GANG_CEO = 19,
 * MP_TAG_GANG_BIKER = 20,
 * MP_TAG_BIKER_ARROW = 21,
 * MP_TAG_MC_ROLE_PRESIDENT = 22,
 * MP_TAG_MC_ROLE_VICE_PRESIDENT = 23,
 * MP_TAG_MC_ROLE_ROAD_CAPTAIN = 24,
 * MP_TAG_MC_ROLE_SARGEANT = 25,
 * MP_TAG_MC_ROLE_ENFORCER = 26,
 * MP_TAG_MC_ROLE_PROSPECT = 27,
 * MP_TAG_TRANSMITTER = 28,
 * MP_TAG_BOMB = 29
 * };
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0x63BB75ABEDC1F6A0 | ApiSet: undefined
 */
export function setMpGamerTagVisibility(gamerTagId, component, toggle) {
    SetMpGamerTagVisibility(gamerTagId, component, toggle);
}
/**
 * This native is deprecated.
 * If you're looking to:
 * *   Toggle the pause menu on, use [`ACTIVATE_FRONTEND_MENU`](#\_0xEF01D36B9C9D0C7B)
 * *   Toggle the pause menu off, use [`SET_FRONTEND_ACTIVE`](#\_0x745711A75AB09277)
 * *   Disable toggling the pause menu, use [`DISABLE_FRONTEND_THIS_FRAME`](#\_0x6D3465A73092F0E6)
 * Hash: 0xDF47FC56C71569CF | ApiSet: undefined
 */
export function setPauseMenuActive(toggle) {
    SetPauseMenuActive(toggle);
}
/**
 * ```
 * displays wanted star above head
 * ```
 * Hash: 0xCF228E2AA03099C3 | ApiSet: undefined
 */
export function setMpGamerTagWantedLevel(gamerTagId, wantedlvl) {
    SetMpGamerTagWantedLevel(gamerTagId, wantedlvl);
}
/**
 * Sets the visibility of all components of the gamer tag to the specified value.
 * Hash: 0xEE76FF7E6A0166B0 | ApiSet: undefined
 */
export function setMpGamerTagVisibilityAll(gamerTagId, toggle) {
    SetMpGamerTagVisibilityAll(gamerTagId, toggle);
}
/**
 * Hash: 0xFE43368D2AA4F2FC | ApiSet: undefined
 */
export function setNewWaypoint(x, y) {
    SetNewWaypoint(x, y);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xFD1D220394BCB824 | ApiSet: undefined
 */
export function setMultiplayerHudCash(p0, p1) {
    SetMultiplayerHudCash(p0, p1);
}
/**
 * Hash: 0xE52B8E7F85D39A08 | ApiSet: undefined
 */
export function setPedAiBlipGangId(ped, gangId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAiBlipGangId(_ped, gangId);
}
/**
 * Preview image:
 * ![](https://i.imgur.com/1BTmdyv.png)
 * To change money value use [`STAT_SET_INT`](#\_0xB3271D7AB655B441) with "MP0\_WALLET_BALANCE" to whatever value you need to.
 * Hash: 0xC2D15BEF167E27BC | ApiSet: undefined
 */
export function setMultiplayerWalletCash() {
    SetMultiplayerWalletCash();
}
/**
 * ```
 * if "flag" is true, the AI blip will always be displayed for the specified ped, if it has an AI blip
 * If "flag" is false, the AI blip will only be displayed when the player is in combat with the specified ped, if it has an AI blip
 * ```
 * Hash: 0x0C4BBF625CA98C4E | ApiSet: undefined
 */
export function setPedAiBlipForcedOn(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAiBlipForcedOn(_ped, toggle);
}
/**
 * Toggles the pause menu ped sleep state for frontend menus.
 * [Example GIF](https://vespura.com/hi/i/2019-04-01\_15-51\_8ed38\_1014.gif)
 * Hash: 0xECF128344E9FF9F1 | ApiSet: undefined
 */
export function setPauseMenuPedSleepState(state) {
    SetPauseMenuPedSleepState(state);
}
/**
 * Hash: 0xFCFACD0DB9D7A57D | ApiSet: undefined
 */
export function setPedAiBlipSprite(ped, spriteId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAiBlipSprite(_ped, spriteId);
}
/**
 * Toggles the light state for the pause menu ped in frontend menus.
 * This is used by R\* in combination with [`SET_PAUSE_MENU_PED_SLEEP_STATE`](#\_0xECF128344E9FF9F1) to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
 * Example:
 * On: ![lights on](https://vespura.com/hi/i/2019-04-01\_16-09\_540ee\_1015.png)
 * Off: ![lights off](https://vespura.com/hi/i/2019-04-01\_16-10\_8b5e7\_1016.png)
 * Hash: 0x3CA6050692BC61B0 | ApiSet: undefined
 */
export function setPauseMenuPedLighting(state) {
    SetPauseMenuPedLighting(state);
}
/**
 * Hash: 0x97C65887D4B37FA9 | ApiSet: undefined
 */
export function setPedAiBlipNoticeRange(ped, range) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAiBlipNoticeRange(_ped, range);
}
/**
 * Hash: 0x3EED80DFF7325CAA | ApiSet: undefined
 */
export function setPedAiBlipHasCone(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAiBlipHasCone(_ped, toggle);
}
/**
 * ```
 * This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
 * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
 * ```
 * Hash: 0xD30C50DF888D58B5 | ApiSet: undefined
 */
export function setPedHasAiBlip(ped, hasCone) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHasAiBlip(_ped, hasCone);
}
/**
 * ```
 * List of interior hashes: pastebin.com/1FUyXNqY
 * Not for every interior zoom > 0 available.
 * ```
 * Hash: 0x59E727A1C9D3E31A | ApiSet: undefined
 */
export function setRadarAsInteriorThisFrame(interior, x, y, heading, zoom) {
    if (typeof interior === 'string')
        interior = this.getHashKey(interior);
    SetRadarAsInteriorThisFrame(interior, x, y, heading, zoom);
}
/**
 * Hash: 0x1EAC5F91BCBC5073 | ApiSet: undefined
 */
export function setRaceTrackRender(toggle) {
    SetRaceTrackRender(toggle);
}
/**
 * ```
 * If toggle is true, hides special ability bar / character name in the pause menu
 * If toggle is false, shows special ability bar / character name in the pause menu
 * SET_PLAYER_*
 * ```
 * Hash: 0x808519373FD336A3 | ApiSet: undefined
 */
export function setPlayerIsInDirectorMode(toggle) {
    SetPlayerIsInDirectorMode(toggle);
}
/**
 * Hash: 0xBD12C5EEE184C337 | ApiSet: undefined
 */
export function setRadarZoomPrecise(zoom) {
    SetRadarZoomPrecise(zoom);
}
/**
 * Hash: 0xB13DCB4C6FAAD238 | ApiSet: undefined
 */
export function setPedHasAiBlipWithColor(ped, hasCone, color) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHasAiBlipWithColor(_ped, hasCone, color);
}
/**
 * Hash: 0xCB7CC0D58405AD41 | ApiSet: undefined
 */
export function setRadarZoomToDistance(zoom) {
    SetRadarZoomToDistance(zoom);
}
/**
 * Hash: 0xE81B7D2A3DAB2D81 | ApiSet: undefined
 */
export function setRadarAsExteriorThisFrame() {
    SetRadarAsExteriorThisFrame();
}
/**
 * Enabling this on a radius blip will make it outline only.\
 * Please note that this only works on a **radius** blip (i.e. one generated using [`ADD_BLIP_FOR_RADIUS`](#\_0x46818D79B1F7499A)), not a normal blip.
 * **Example result:**\
 * ![example-image](https://i.imgur.com/hS6ki7p.png)
 * Hash: 0x25615540D894B814 | ApiSet: undefined
 */
export function setRadiusBlipEdge(blip, toggle) {
    SetRadiusBlipEdge(blip, toggle);
}
/**
 * ```
 * zoomLevel ranges from 0 to 200
 * ```
 * Hash: 0x096EF57A0C999BBA | ApiSet: undefined
 */
export function setRadarZoom(zoomLevel) {
    SetRadarZoom(zoomLevel);
}
/**
 * ```
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
 * ```
 * Hash: 0x16A304E6CB2BFAB9 | ApiSet: undefined
 */
export function setScriptVariable2HudColour(r, g, b, a) {
    SetScriptVariable2HudColour(r, g, b, a);
}
/**
 * ```
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
 * ```
 * Hash: 0xD68A5FF8A3A89874 | ApiSet: undefined
 */
export function setScriptVariableHudColour(r, g, b, a) {
    SetScriptVariableHudColour(r, g, b, a);
}
/**
 * ```
 * colors you input not same as you think?
 * A: for some reason its R B G A
 * ```
 * Hash: 0xBE6B23FFA53FB442 | ApiSet: undefined
 */
export function setTextColour(red, green, blue, alpha) {
    SetTextColour(red, green, blue, alpha);
}
/**
 * Hash: 0xF98E4B3E56AFC7B1 | ApiSet: undefined
 */
export function setRadarZoomToBlip(blip, zoom) {
    SetRadarZoomToBlip(blip, zoom);
}
/**
 * Hash: 0xC02F4DBFB51D988B | ApiSet: undefined
 */
export function setTextCentre(align) {
    SetTextCentre(align);
}
/**
 * Hash: 0x1CA3E9EAC9D93E5E | ApiSet: undefined
 */
export function setTextDropShadow() {
    SetTextDropShadow();
}
/**
 * ```
 * `HUD::SET_SOCIAL_CLUB_TOUR("Gallery");`
 * `HUD::SET_SOCIAL_CLUB_TOUR("Missions");`
 * `HUD::SET_SOCIAL_CLUB_TOUR("General");`
 * `HUD::SET_SOCIAL_CLUB_TOUR("Playlists");`
 * ```
 * Hash: 0x9E778248D6685FE0 | ApiSet: undefined
 */
export function setSocialClubTour(name) {
    SetSocialClubTour(name);
}
/**
 * ```cpp
 * enum eTextFonts
 * {
 * FONT_STANDARD = 0,
 * FONT_CURSIVE = 1,
 * FONT_ROCKSTAR_TAG = 2,
 * FONT_LEADERBOAR0D = 3,
 * FONT_CONDENSED = 4,
 * FONT_STYLE_FIXED_WIDTH_NUMBERS = 5,
 * FONT_CONDENSED_NOT_GAMERNAME = 6,
 * FONT_STYLE_PRICEDOWN = 7,
 * FONT_STYLE_TAXI = 8,
 * }
 * ```
 * Hash: 0x66E0276CC5F6B9DA | ApiSet: undefined
 */
export function setTextFont(fontType) {
    SetTextFont(fontType);
}
/**
 * Hash: 0xA50ABC31E3CDFAFF | ApiSet: undefined
 */
export function setTextLeading(p0) {
    SetTextLeading(p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x441603240D202FA6 | ApiSet: undefined
 */
export function setTextEdge(p0, r, g, b, a) {
    SetTextEdge(p0, r, g, b, a);
}
/**
 * Hash: 0x2513DFB0FB8400FE | ApiSet: undefined
 */
export function setTextOutline() {
    SetTextOutline();
}
/**
 * distance - shadow distance in pixels, both horizontal and vertical
 * r, g, b, a - color
 * Hash: 0x465C84BC39F1C351 | ApiSet: undefined
 */
export function setTextDropshadow(distance, r, g, b, a) {
    SetTextDropshadow(distance, r, g, b, a);
}
/**
 * Hash: 0x5F15302936E07111 | ApiSet: undefined
 */
export function setTextRenderId(renderId) {
    SetTextRenderId(renderId);
}
/**
 * Toggles if the text input box can be opened with [`DISPLAY_ONSCREEN_KEYBOARD`](#\_0x00DC833F2568DBF6).
 * Hash: 0x1185A8087587322C | ApiSet: undefined
 */
export function setTextInputBoxEnabled(state) {
    SetTextInputBoxEnabled(state);
}
/**
 * ```
 * Types -
 * 0: Center-Justify
 * 1: Left-Justify
 * 2: Right-Justify
 * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
 * ```
 * Hash: 0x4E096588B13FFECA | ApiSet: undefined
 */
export function setTextJustification(justifyType) {
    SetTextJustification(justifyType);
}
/**
 * Switches the display of the in-game minimap to the Cayo Perico map. This native needs to be called every frame to maintain the toggled state effectively.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x5E1460624D194A38 | ApiSet: undefined
 */
export function setUseIslandMap(toggle) {
    SetUseIslandMap(toggle);
}
/**
 * ```
 * Size range : 0F to 1.0F
 * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
 * ```
 * Hash: 0x07C837F9A01C34C9 | ApiSet: undefined
 */
export function setTextScale(scale, size) {
    SetTextScale(scale, size);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x038C1F517D7FDCF8 | ApiSet: undefined
 */
export function setTextProportional(p0) {
    SetTextProportional(p0);
}
/**
 * instructionalKey enum list:
 * ```
 * Buttons = {
 * Empty = 0,
 * Select = 1, -- (RETURN)
 * Ok = 2, -- (RETURN)
 * Yes = 4, -- (RETURN)
 * Back = 8, -- (ESC)
 * Cancel = 16, -- (ESC)
 * No = 32, -- (ESC)
 * RetrySpace = 64, -- (SPACE)
 * Restart = 128, -- (SPACE)
 * Skip = 256, -- (SPACE)
 * Quit = 512, -- (ESC)
 * Adjust = 1024, -- (ARROWS)
 * SpaceKey = 2048, -- (SPACE)
 * Share = 4096, -- (SPACE)
 * SignIn = 8192, -- (SPACE)
 * Continue = 16384, -- (RETURN)
 * AdjustLeftRight = 32768, -- (SCROLL L/R)
 * AdjustUpDown = 65536, -- (SCROLL U/D)
 * Overwrite = 131072, -- (SPACE)
 * SocialClubSignup = 262144, -- (RETURN)
 * Confirm = 524288, -- (RETURN)
 * Queue = 1048576, -- (RETURN)
 * RetryReturn = 2097152, -- (RETURN)
 * BackEsc = 4194304, -- (ESC)
 * SocialClub = 8388608, -- (RETURN)
 * Spectate = 16777216, -- (SPACE)
 * OkEsc = 33554432, -- (ESC)
 * CancelTransfer = 67108864, -- (ESC)
 * LoadingSpinner = 134217728,
 * NoReturnToGTA = 268435456, -- (ESC)
 * CancelEsc = 536870912, -- (ESC)
 * }
 * Alt = {
 * Empty = 0,
 * No = 1, -- (SPACE)
 * Host = 2, -- (ESC)
 * SearchForJob = 4, -- (RETURN)
 * ReturnKey = 8, -- (TURN)
 * Freemode = 16, -- (ESC)
 * }
 * ```
 * **Result of the example code:** <https://i.imgur.com/TvmNF4k.png>
 * Hash: 0x15803FEC3B9A872B | ApiSet: undefined
 */
export function setWarningMessageWithAlert(labelTitle, labelMsg, p2, p3, labelMsg2, p5, p6, p7, p8, p9, background, errorCode) {
    SetWarningMessageWithAlert(labelTitle, labelMsg, p2, p3, labelMsg2, p5, p6, p7, p8, p9, background, errorCode);
}
/**
 * ```
 * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
 * start - left boundry on screen position (0.0 - 1.0)
 * end - right boundry on screen position (0.0 - 1.0)
 * ```
 * Hash: 0x63145D9C883A1A70 | ApiSet: undefined
 */
export function setTextWrap(start, end) {
    SetTextWrap(start, end);
}
/**
 * Hash: 0x6B3C4650BC8BEE47 | ApiSet: undefined
 */
export function setTextRightJustify(toggle) {
    SetTextRightJustify(toggle);
}
/**
 * ```
 * This native removes the current waypoint from the map.
 * Example:
 * C#:
 * Function.Call(Hash.SET_WAYPOINT_OFF);
 * C++:
 * `HUD::SET_WAYPOINT_OFF();`
 * ```
 * Hash: 0xA7E4E2D361C2627F | ApiSet: undefined
 */
export function setWaypointOff() {
    SetWaypointOff();
}
/**
 * Hash: 0x0C5A80A9E096D529 | ApiSet: undefined
 */
export function setWarningMessageOptionItems(index, name, cash, rp, lvl, colour) {
    return SetWarningMessageOptionItems(index, name, cash, rp, lvl, colour);
}
/**
 * Sets a global mode which makes the pause menu map show 'Destination' instead of 'Waypoint' in the key legend on the
 * bottom of the screen.
 * <!--
 * Name guess:
 * - alphabetical function order, below [SET_USER_RADIO_CONTROL_ENABLED, SET_USE_HI_DOF], above SET_VARIABLE_ON_SOUND.
 * -->
 * Hash: 0x6CDD58146A436083 | ApiSet: undefined
 */
export function setUseWaypointAsDestination(toggle) {
    SetUseWaypointAsDestination(toggle);
}
/**
 * Sets a warning message for one frame with header and upper buttons bit field that don't fit the standard 32 bit set.
 * Hash: 0x38B55259C2E078ED | ApiSet: undefined
 */
export function setWarningMessageWithHeaderExtended(headerTextLabel, line1TextLabel, buttonsBitField, buttonsBitFieldUpper, line2TextLabel, addNumber, numberToAdd, firstSubstring, secondSubstring, showBackground, errorCode) {
    SetWarningMessageWithHeaderExtended(headerTextLabel, line1TextLabel, buttonsBitField, buttonsBitFieldUpper, line2TextLabel, addNumber, numberToAdd, firstSubstring, secondSubstring, showBackground, errorCode);
}
/**
 * ```cpp
 * enum eInstructionalButtonTypes
 * {
 * NONE = 0,
 * SELECT = 1,
 * OK = 2,
 * YES = 4,
 * BACK = 8,
 * BACK_SELECT = 9,
 * BACK_OK = 10,
 * BACK_YES = 12,
 * CANCEL = 16,
 * CANCEL_SELECT = 17,
 * CANCEL_OK = 18,
 * CANCEL_YES = 20,
 * NO = 32,
 * NO_SELECT = 33,
 * NO_OK = 34,
 * YES_NO = 36,
 * RETRY = 64,
 * RETRY_SELECT = 65,
 * RETRY_OK = 66,
 * RETRY_YES = 68,
 * RETRY_BACK = 72,
 * RETRY_BACK_SELECT = 73,
 * RETRY_BACK_OK = 74,
 * RETRY_BACK_YES = 76,
 * RETRY_CANCEL = 80,
 * RETRY_CANCEL_SELECT = 81,
 * RETRY_CANCEL_OK = 82,
 * RETRY_CANCEL_YES = 84,
 * SKIP = 256,
 * SKIP_SELECT = 257,
 * SKIP_OK = 258,
 * SKIP_YES = 260,
 * SKIP_BACK = 264,
 * SKIP_BACK_SELECT = 265,
 * SKIP_BACK_OK = 266,
 * SKIP_BACK_YES = 268,
 * SKIP_CANCEL = 272,
 * SKIP_CANCEL_SELECT = 273,
 * SKIP_CANCEL_OK = 274,
 * SKIP_CANCEL_YES = 276,
 * CONTINUE = 16384,
 * BACK_CONTINUE = 16392,
 * CANCEL_CONTINUE = 16400,
 * LOADING_SPINNER = 134217728,
 * SELECT_LOADING_SPINNER = 134217729,
 * OK_LOADING_SPINNER = 134217730,
 * YES_LOADING_SPINNER = 134217732,
 * BACK_LOADING_SPINNER = 134217736,
 * BACK_SELECT_LOADING_SPINNER = 134217737,
 * BACK_OK_LOADING_SPINNER = 134217738,
 * BACK_YES_LOADING_SPINNER = 134217740,
 * CANCEL_LOADING_SPINNER = 134217744,
 * CANCEL_SELECT_LOADING_SPINNER = 134217745,
 * CANCEL_OK_LOADING_SPINNER = 134217746,
 * CANCEL_YES_LOADING_SPINNER = 134217748
 * }
 * ```
 * Note: this list is definitely NOT complete, but these are the ones I've been able to find before giving up because it's such a boring thing to look for 'good' combinations.
 * <strong>Result of the example code:</strong>
 * <https://i.imgur.com/imwoimm.png>
 * Hash: 0x7B1776B3B53F8D74 | ApiSet: undefined
 */
export function setWarningMessage(entryLine1, instructionalKey, entryLine2, p3, p4, showBg, errorCode) {
    return SetWarningMessage(entryLine1, instructionalKey, entryLine2, p3, p4, showBg, errorCode);
}
/**
 * ```
 * You can only use text entries. No custom text.
 * ```
 * ```
 * NativeDB Added Parameter 11: Any p10
 * ```
 * Hash: 0x701919482C74B5AB | ApiSet: undefined
 */
export function setWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p9) {
    return SetWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p9);
}
/**
 * Enables or disables the blue half circle ![](https://i.imgur.com/iZes9Ec.png) around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using [`SET_BLIP_SECONDARY_COLOUR`](#\_0x14892474891E09EB).
 * To toggle the right side of the circle use: [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\_0x23C3EB807312F01A).
 * Example code result:
 * ![](https://i.imgur.com/iZ9tNWl.png)
 * Hash: 0xDCFB5D4DB8BF367E | ApiSet: undefined
 */
export function showCrewIndicatorOnBlip(blip, toggle) {
    ShowCrewIndicatorOnBlip(blip, toggle);
}
/**
 * Highlights a blip by a half cyan circle on the right side of the blip. ![](https://i.imgur.com/FrV9M4e.png) Indicating that that player is a friend (in GTA:O). This color can not be changed.
 * To toggle the left side (crew member indicator) of the half circle around the blip, use: [`SHOW_CREW_INDICATOR_ON_BLIP`](#\_0xDCFB5D4DB8BF367E).
 * Hash: 0x23C3EB807312F01A | ApiSet: undefined
 */
export function showFriendIndicatorOnBlip(blip, toggle) {
    ShowFriendIndicatorOnBlip(blip, toggle);
}
/**
 * Hash: 0xC3B07BA00A83B0F1 | ApiSet: undefined
 */
export function setWidescreenFormat(p0) {
    SetWidescreenFormat(p0);
}
/**
 * ```
 * You can only use text entries. No custom text.
 * C# Example :
 * Function.Call(Hash._SET_WARNING_MESSAGE_2, "HUD_QUIT", "HUD_CGIGNORE", 2, "HUD_CGINVITE", 0, -1, 0, 0, 1);
 * you can recreate this easily with scaleforms
 * ---------------
 * Fixed native name, from before nativedb restoration.
 * ```
 * ```
 * NativeDB Added Parameter 10: Any p9
 * ```
 * Hash: 0xDC38CC1E35B6A5D7 | ApiSet: undefined
 */
export function setWarningMessageWithHeader(titleMsg, entryLine1, flags, promptMsg, p4, p5, background, showBg) {
    return SetWarningMessageWithHeader(titleMsg, entryLine1, flags, promptMsg, p4, p5, background, showBg);
}
/**
 * ```
 * Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
 * _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0xCAC2031EBF79B1A8 | ApiSet: undefined
 */
export function showHasCompletedIndicatorOnBlip(blip, toggle) {
    ShowHasCompletedIndicatorOnBlip(blip, toggle);
}
/**
 * This function shows various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * *   1 : WANTED_STARS
 * *   2 : WEAPON_ICON
 * *   3 : CASH
 * *   4 : MP_CASH
 * *   5 : MP_MESSAGE
 * *   6 : VEHICLE_NAME
 * *   7 : AREA_NAME
 * *   8 : VEHICLE_CLASS
 * *   9 : STREET_NAME
 * *   10 : HELP_TEXT
 * *   11 : FLOATING_HELP_TEXT\_1
 * *   12 : FLOATING_HELP_TEXT\_2
 * *   13 : CASH_CHANGE
 * *   14 : RETICLE
 * *   15 : SUBTITLE_TEXT
 * *   16 : RADIO_STATIONS
 * *   17 : SAVING_GAME
 * *   18 : GAME_STREAM
 * *   19 : WEAPON_WHEEL
 * *   20 : WEAPON_WHEEL_STATS
 * *   21 : HUD_COMPONENTS
 * *   22 : HUD_WEAPONS
 * These integers also work for the [`HIDE_HUD_COMPONENT_THIS_FRAME`](#\_0x6806C51AD12B83B8) native, but instead hides the HUD component.
 * Hash: 0x0B4DF1FA60C0E664 | ApiSet: undefined
 */
export function showHudComponentThisFrame(id) {
    ShowHudComponentThisFrame(id);
}
/**
 * Controls the visibility of the "Contact" instructional buttons on the map screen.
 * ```
 * NativeDB Introduced: 2545
 * ```
 * Hash: 0xC772A904CDE1186F | ApiSet: undefined
 */
export function showContactInstructionalButton(toggle) {
    ShowContactInstructionalButton(toggle);
}
/**
 * SHOW_\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x4F38DCA127DAAEA2 | ApiSet: undefined
 */
export function showScriptedHudComponentThisFrame(id) {
    ShowScriptedHudComponentThisFrame(id);
}
/**
 * Hash: 0x75A16C3DA34F1245 | ApiSet: undefined
 */
export function showHeightOnBlip(blip, toggle) {
    ShowHeightOnBlip(blip, toggle);
}
/**
 * Hash: 0xA3C0B359DCB848B6 | ApiSet: undefined
 */
export function showNumberOnBlip(blip, number) {
    ShowNumberOnBlip(blip, number);
}
/**
 * ```
 * Adds the GTA: Online player heading indicator to a blip.
 * ```
 * Hash: 0x5FBCA48327B914DF | ApiSet: undefined
 */
export function showHeadingIndicatorOnBlip(blip, toggle) {
    ShowHeadingIndicatorOnBlip(blip, toggle);
}
/**
 * Toggles a cyan outline around the blip.
 * Color can be changed with [`SET_BLIP_SECONDARY_COLOUR`](#\_0x14892474891E09EB). Enabling this circle will override the "crew" and "friend" half-circles (see [`SHOW_CREW_INDICATOR_ON_BLIP`](#\_0xDCFB5D4DB8BF367E) and [`SHOW_FRIEND_INDICATOR_ON_BLIP`](#\_0x23C3EB807312F01A)).
 * Hash: 0xB81656BC81FE24D1 | ApiSet: undefined
 */
export function showOutlineIndicatorOnBlip(blip, toggle) {
    ShowOutlineIndicatorOnBlip(blip, toggle);
}
/**
 * Starts a new GPS custom-route, allowing you to plot lines on the map.
 * Lines are drawn directly between points.
 * The GPS custom route works like the GPS multi route, except it does not follow roads.
 * <strong>Example result:</strong>
 * ![](https://i.imgur.com/BDm5pzt.png)
 * Hash: 0xDB34E8D56FC13B08 | ApiSet: undefined
 */
export function startGpsCustomRoute(hudColor, displayOnFoot, followPlayer) {
    StartGpsCustomRoute(hudColor, displayOnFoot, followPlayer);
}
/**
 * Hash: 0x60E892BA4F5BDCA4 | ApiSet: undefined
 */
export function showSigninUi() {
    ShowSigninUi();
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0xF6865E26067B708C | ApiSet: undefined
 */
export function showPurchaseInstructionalButton(toggle) {
    ShowPurchaseInstructionalButton(toggle);
}
/**
 * ```
 * Adds a green checkmark on top of a blip.
 * ```
 * Hash: 0x74513EA3E505181E | ApiSet: undefined
 */
export function showTickOnBlip(blip, toggle) {
    ShowTickOnBlip(blip, toggle);
}
/**
 * Starts a new GPS multi-route, allowing you to create custom GPS paths.
 * GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
 * Once the player has passed a point, the GPS will no longer force its path through it.
 * Works independently from the player-placed waypoint and blip routes.
 * <strong>Example result:</strong>
 * ![](https://i.imgur.com/ZZHQatX.png)
 * Hash: 0x3D3D15AF7BCAAF83 | ApiSet: undefined
 */
export function startGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot) {
    StartGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot);
}
/**
 * Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
 * To enable the keys again, use [`0x14621BB1DF14E2B2`](#\_0x14621BB1DF14E2B2).
 * Hash: 0xEC9264727EEC0F28 | ApiSet: undefined
 */
export function takeControlOfFrontend() {
    TakeControlOfFrontend();
}
/**
 * Hash: 0xF1A6C18B35BCADE6 | ApiSet: undefined
 */
export function showStartMissionInstructionalButton(p0) {
    ShowStartMissionInstructionalButton(p0);
}
/**
 * ```
 * Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
 * ```
 * Hash: 0x56C8B608CFD49854 | ApiSet: undefined
 */
export function thefeedCommentTeleportPoolOn() {
    ThefeedCommentTeleportPoolOn();
}
/**
 * Hash: 0x80FE4F3AB4E1B62A | ApiSet: undefined
 */
export function thefeedClearFrozenPost() {
    ThefeedClearFrozenPost();
}
/**
 * Hash: 0xBA751764F0821256 | ApiSet: undefined
 */
export function suppressFrontendRenderingThisFrame() {
    SuppressFrontendRenderingThisFrame();
}
/**
 * Displays loading screen tips, requires `0x56C8B608CFD49854` to be called beforehand.
 * Hash: 0x15CFA549788D35EF | ApiSet: undefined
 */
export function thefeedDisplayLoadingScreenTips() {
    ThefeedDisplayLoadingScreenTips();
}
/**
 * Hash: 0xA13C11E1B5C06BFC | ApiSet: undefined
 */
export function thefeedForceRenderOn() {
    ThefeedForceRenderOn();
}
/**
 * Stops loading screen tips shown by invoking either `0x488043841BBE156F` or `0x15CFA549788D35EF`
 * Hash: 0x32888337579A5970 | ApiSet: undefined
 */
export function thefeedDisableLoadingScreenTips() {
    ThefeedDisableLoadingScreenTips();
}
/**
 * Hash: 0x6F1554B0CC2089FA | ApiSet: undefined
 */
export function thefeedOnlyShowTooltips(toggle) {
    ThefeedOnlyShowTooltips(toggle);
}
/**
 * Hash: 0xA8FDB297A8D25FBA | ApiSet: undefined
 */
export function thefeedFlushQueue() {
    ThefeedFlushQueue();
}
/**
 * ```
 * Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
 * ```
 * Hash: 0x82352748437638CA | ApiSet: undefined
 */
export function thefeedGetFirstVisibleDeleteRemaining() {
    return ThefeedGetFirstVisibleDeleteRemaining();
}
/**
 * Once called each frame hides all above radar notifications.
 * Hash: 0x25F87B30C382FCA7 | ApiSet: undefined
 */
export function thefeedHideThisFrame() {
    ThefeedHideThisFrame();
}
/**
 * ```
 * Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
 * ```
 * Hash: 0xFDEC055AB549E328 | ApiSet: undefined
 */
export function thefeedFreezeNextPost() {
    ThefeedFreezeNextPost();
}
/**
 * ```
 * Removes a notification instantly instead of waiting for it to disappear
 * ```
 * Hash: 0xBE4390CB40B3E627 | ApiSet: undefined
 */
export function thefeedRemoveItem(notificationId) {
    ThefeedRemoveItem(notificationId);
}
/**
 * Hash: 0xFDB423997FA30340 | ApiSet: undefined
 */
export function thefeedPause() {
    ThefeedPause();
}
/**
 * Hash: 0xE1CD1E48E025E661 | ApiSet: undefined
 */
export function thefeedResume() {
    ThefeedResume();
}
/**
 * Hash: 0xA9CBFD40B3FA3010 | ApiSet: undefined
 */
export function thefeedIsPaused() {
    return ThefeedIsPaused();
}
/**
 * Related to notification color flashing, setting p0 to 0 invalidates a `_SET_NOTIFICATION_FLASH_COLOR` call for the target notification.
 * Hash: 0x17AD8C9706BDD88A | ApiSet: undefined
 */
export function thefeedSetAnimpostfxCount(count) {
    ThefeedSetAnimpostfxCount(count);
}
/**
 * Hash: 0xFDD85225B2DEA55E | ApiSet: undefined
 */
export function thefeedResetAllParameters() {
    ThefeedResetAllParameters();
}
/**
 * ```
 * Requires GAME_STREAM_ENUMS.MSGTEXT. Default sounds: "DPAD_WEAPON_SCROLL" and "HUD_FRONTEND_DEFAULT_SOUNDSET"
 * ```
 * Hash: 0x4A0C7C9BB10ABB36 | ApiSet: undefined
 */
export function thefeedSetAnimpostfxSound(toggle) {
    ThefeedSetAnimpostfxSound(toggle);
}
/**
 * Hash: 0x55598D21339CB998 | ApiSet: undefined
 */
export function thefeedSetScriptedMenuHeight(pos) {
    ThefeedSetScriptedMenuHeight(pos);
}
/**
 * Hash: 0x17430B918701C342 | ApiSet: undefined
 */
export function thefeedSetAnimpostfxColor(red, green, blue, alpha) {
    ThefeedSetAnimpostfxColor(red, green, blue, alpha);
}
/**
 * ```
 * If true, remove all feed components instantly. Otherwise tween/animate close each component
 * ```
 * Hash: 0xBAE4F9B97CD43B30 | ApiSet: undefined
 */
export function thefeedSetFlushAnimpostfx(toggle) {
    ThefeedSetFlushAnimpostfx(toggle);
}
/**
 * ```
 * Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x317EBA71D7543F52 | ApiSet: undefined
 */
export function thefeedUpdateItemTexture(txdString1, txnString1, txdString2, txnString2) {
    ThefeedUpdateItemTexture(txdString1, txnString1, txdString2, txnString2);
}
/**
 * Hash: 0xD4438C0564490E63 | ApiSet: undefined
 */
export function thefeedSpsExtendWidescreenOn() {
    ThefeedSpsExtendWidescreenOn();
}
/**
 * Hash: 0xB695E2CD0A2DA9EE | ApiSet: undefined
 */
export function thefeedSpsExtendWidescreenOff() {
    ThefeedSpsExtendWidescreenOff();
}
/**
 * Hash: 0x3E93E06DB8EF1F30 | ApiSet: undefined
 */
export function unlockMinimapPosition() {
    UnlockMinimapPosition();
}
/**
 * ```
 * From the decompiled scripts:
 * `HUD::_92F0DA1E27DB96DC(6);`
 * `HUD::_92F0DA1E27DB96DC(184);`
 * `HUD::_92F0DA1E27DB96DC(190);`
 * sets background color for the next notification
 * 6 = red
 * 184 = green
 * 190 = yellow
 * Here is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15
 * ```
 * Hash: 0x92F0DA1E27DB96DC | ApiSet: undefined
 */
export function thefeedSetNextPostBackgroundColor(hudColorIndex) {
    ThefeedSetNextPostBackgroundColor(hudColorIndex);
}
/**
 * Hash: 0x8183455E16C42E3A | ApiSet: undefined
 */
export function unlockMinimapAngle() {
    UnlockMinimapAngle();
}
/**
 * Hash: 0x6AFDFB93754950C7 | ApiSet: undefined
 */
export function toggleStealthRadar(toggle) {
    ToggleStealthRadar(toggle);
}
/**
 * Hash: 0x72DD432F3CDFC0EE | ApiSet: undefined
 */
export function triggerSonarBlip(posX, posY, posZ, radius, p4) {
    TriggerSonarBlip(posX, posY, posZ, radius, p4);
}
/**
 * ```
 * Related to displaying cash on the HUD
 * `Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts`
 * ```
 * Hash: 0x170F541E1CADD1DE | ApiSet: undefined
 */
export function useFakeMpCash(p0) {
    UseFakeMpCash(p0);
}
/**
 * Hash: 0x1D08B970013C34B6 | ApiSet: undefined
 */
export function acos(p0) {
    return Acos(p0);
}
/**
 * Hash: 0xF0D31AD191A74F87 | ApiSet: undefined
 */
export function absi(value) {
    return Absi(value);
}
/**
 * Hash: 0x2D4259F1FEB81DA9 | ApiSet: undefined
 */
export function addDispatchSpawnBlockingArea(x1, y1, x2, y2) {
    return AddDispatchSpawnBlockingArea(x1, y1, x2, y2);
}
/**
 * Hash: 0x73D57CFFDD12C355 | ApiSet: undefined
 */
export function absf(value) {
    return Absf(value);
}
/**
 * Creates and opens a new activity feed post to start filling in.
 * **Note**: This is a PS4 related native, resulting in a nullsub on the PC platform. This native won't do anything when invoked.
 * Hash: 0x4DCDF92BF64236CD | ApiSet: undefined
 */
export function activityFeedCreate(captionString, condensedCaptionString) {
    ActivityFeedCreate(captionString, condensedCaptionString);
}
/**
 * Hash: 0x452736765B31FC4B | ApiSet: undefined
 */
export function addPoliceRestart(p0, p1, p2, p3, p4) {
    return AddPoliceRestart(p0, p1, p2, p3, p4);
}
/**
 * To remove, see: [`REMOVE_DISPATCH_SPAWN_BLOCKING_AREA`](#\_0x264AC28B01B353A5).
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * Hash: 0x918C7B2D2FF3928B | ApiSet: undefined
 */
export function addDispatchSpawnBlockingAngledArea(x1, y1, z1, x2, y2, z2, width) {
    return AddDispatchSpawnBlockingAngledArea(x1, y1, z1, x2, y2, z2, width);
}
/**
 * Hash: 0x69FE6DC87BD2A5E9 | ApiSet: undefined
 */
export function addReplayStatValue(value) {
    AddReplayStatValue(value);
}
/**
 * ```
 * This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
 * ```
 * Hash: 0x32C7A7E8C43A1F80 | ApiSet: undefined
 */
export function addPopMultiplierSphere(position, radius, pedMultiplier, vehicleMultiplier, p6, p7) {
    return AddPopMultiplierSphere(position.x, position.y, position.z, radius, pedMultiplier, vehicleMultiplier, p6, p7);
}
/**
 * ```
 * Returns the index of the newly created hospital spawn point.
 * p3 might be radius?
 * ```
 * Hash: 0x1F464EF988465A81 | ApiSet: undefined
 */
export function addHospitalRestart(position, p3, p4) {
    return AddHospitalRestart(position.x, position.y, position.z, p3, p4);
}
/**
 * ```
 * NativeDB Added Parameter 10: BOOL p9
 * ```
 * Hash: 0x67F6413D3220E18D | ApiSet: undefined
 */
export function addPopMultiplierArea(x1, y1, z1, x2, y2, z2, p6, p7, p8) {
    return AddPopMultiplierArea(x1, y1, z1, x2, y2, z2, p6, p7, p8);
}
/**
 * Creates a new stunt jump.
 * The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP\_**ANGLED**.
 * Info about the specific 'parameter sections':
 * <strong>x1, y1, z1, x2, y2, z2 and radius1:</strong>
 * First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
 * <strong>x3, y3, z3, x4, y4, z4 and radius2:</strong>
 * Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
 * <strong>camX, camY and camZ:</strong>
 * The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
 * <strong>unk1, unk2 and unk3:</strong>
 * Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
 * Visualized example in-game:
 * ![](https://d.fivem.dev/2019-03-15\_18-24\_c7802\_846.png)
 * Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
 * Hash: 0xBBE5D803A5360CBF | ApiSet: undefined
 */
export function addStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, unk1, unk2, unk3) {
    return AddStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, unk1, unk2, unk3);
}
/**
 * See description of [`ADD_STUNT_JUMP_ANGLED`](#\_0xBBE5D803A5360CBF) for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
 * Hash: 0x1A992DA297A4630C | ApiSet: undefined
 */
export function addStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, unk1, unk2, unk3) {
    return AddStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, unk1, unk2, unk3);
}
/**
 * ```
 * Adds a point related to CTacticalAnalysis
 * ```
 * Hash: 0xB8721407EE9C3FF6 | ApiSet: undefined
 */
export function addTacticalAnalysisPoint(position) {
    AddTacticalAnalysisPoint(position.x, position.y, position.z);
}
/**
 * Hash: 0xE0E500246FF73D66 | ApiSet: undefined
 */
export function beginReplayStats(p0, p1) {
    BeginReplayStats(p0, p1);
}
/**
 * Hash: 0xC843060B5765DCE7 | ApiSet: undefined
 */
export function asin(value) {
    return Asin(value);
}
/**
 * Hash: 0x5AA3BEFA29F03AD4 | ApiSet: undefined
 */
export function areProfileSettingsValid() {
    return AreProfileSettingsValid();
}
/**
 * Hash: 0xDEA36202FC3382DF | ApiSet: undefined
 */
export function allowMissionCreatorWarp(toggle) {
    AllowMissionCreatorWarp(toggle);
}
/**
 * Hash: 0xC79AE21974B01FB2 | ApiSet: undefined
 */
export function cleanupAsyncInstall() {
    CleanupAsyncInstall();
}
/**
 * Hash: 0x8927CBF9D22261A4 | ApiSet: undefined
 */
export function atan2(p0, p1) {
    return Atan2(p0, p1);
}
/**
 * Hash: 0xE6B7B0ACD4E4B75E | ApiSet: undefined
 */
export function cancelStuntJump() {
    CancelStuntJump();
}
/**
 * Hash: 0x0C515FAB3FF9EA92 | ApiSet: undefined
 */
export function areStringsEqual(string1, string2) {
    return AreStringsEqual(string1, string2);
}
/**
 * ```
 * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
 * ```
 * Hash: 0xA56F01F3765B93A0 | ApiSet: undefined
 */
export function clearArea(position, radius, p4, ignoreCopCars, ignoreObjects, p7) {
    ClearArea(position.x, position.y, position.z, radius, p4, ignoreCopCars, ignoreObjects, p7);
}
/**
 * Closes the onscreen keyboard on console versions of the game.
 * **NOTE:** Do not use this native in FiveM/PC, because [`UPDATE_ONSCREEN_KEYBOARD`](#\_0x0CF2B696BBF945AE) value doesn't get cleaned up and stays as `0`.
 * You should use [`FORCE_CLOSE_TEXT_INPUT_BOX`](#\_0x8817605C2BA76200) instead.
 * Hash: 0x58A39BE597CE99CD | ApiSet: undefined
 */
export function cancelOnscreenKeyboard() {
    CancelOnscreenKeyboard();
}
/**
 * Hash: 0xA9D1795CD5043663 | ApiSet: undefined
 */
export function atan(p0) {
    return Atan(p0);
}
/**
 * ```
 * `MISC::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.`
 * ```
 * Hash: 0x957838AAF91BD12D | ApiSet: undefined
 */
export function clearAreaLeaveVehicleHealth(position, radius, p4, p5, p6, p7) {
    ClearAreaLeaveVehicleHealth(position.x, position.y, position.z, radius, p4, p5, p6, p7);
}
/**
 * ```
 * NativeDB Added Parameter 13: Any p12
 * ```
 * Hash: 0x11DB3500F042A8AA | ApiSet: undefined
 */
export function clearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11) {
    ClearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11);
}
/**
 * Clears an area of cops at the given coordinates and radius.
 * Hash: 0x04F8FC8FCF58F88D | ApiSet: undefined
 */
export function clearAreaOfCops(position, radius, createNetEvent) {
    ClearAreaOfCops(position.x, position.y, position.z, radius, createNetEvent);
}
/**
 * Hash: 0x9B2BD3773123EA2F | ApiSet: undefined
 */
export function blockDispatchServiceResourceCreation(dispatchService, toggle) {
    BlockDispatchServiceResourceCreation(dispatchService, toggle);
}
/**
 * ```
 * This sets bit [offset] of [address] to off.
 * Example:
 * `MISC::CLEAR_BIT(&bitAddress, 1);`
 * To check if this bit has been enabled:
 * `MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards`
 * ```
 * Hash: 0xE80492A9AC099A93 | ApiSet: undefined
 */
export function clearBit(offset) {
    return ClearBit(offset);
}
/**
 * Clears an area of peds at the given coordinates and radius.
 * Hash: 0xBE31FD6CE464AC59 | ApiSet: undefined
 */
export function clearAreaOfPeds(position, radius, createNetEvent) {
    ClearAreaOfPeds(position.x, position.y, position.z, radius, createNetEvent);
}
/**
 * Clears an area of projectiles at the given coordinates and radius.
 * Hash: 0x0A1CB9094635D1A6 | ApiSet: undefined
 */
export function clearAreaOfProjectiles(position, radius, createNetEvent) {
    ClearAreaOfProjectiles(position.x, position.y, position.z, radius, createNetEvent);
}
/**
 * Hash: 0xA2716D40842EAF79 | ApiSet: undefined
 */
export function clearRestartCustomPosition() {
    ClearRestartCustomPosition();
}
/**
 * ```
 * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
 * ```
 * Hash: 0xDD9B9B385AAC7F5B | ApiSet: undefined
 */
export function clearAreaOfObjects(position, radius, flags) {
    ClearAreaOfObjects(position.x, position.y, position.z, radius, flags);
}
/**
 * ```
 * Example: 		CLEAR_AREA_OF_VEHICLES(0, 0, 0, 10000, false, false, false, false, false);
 * ```
 * ```
 * NativeDB Added Parameter 10: BOOL p9
 * ```
 * Hash: 0x01C7B9B38428AEB6 | ApiSet: undefined
 */
export function clearAreaOfVehicles(position, radius, p4, p5, p6, p7, p8) {
    ClearAreaOfVehicles(position.x, position.y, position.z, radius, p4, p5, p6, p7, p8);
}
/**
 * Hash: 0x1B1AB132A16FDA55 | ApiSet: undefined
 */
export function clearReplayStats() {
    ClearReplayStats();
}
/**
 * Hash: 0x338D2E3477711050 | ApiSet: undefined
 */
export function clearOverrideWeather() {
    ClearOverrideWeather();
}
/**
 * ```
 * Compares two strings up to a specified number of characters.
 * Parameters:
 * str1 - String to be compared.
 * str2 - String to be compared.
 * matchCase - Comparison will be case-sensitive.
 * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
 * Returns:
 * A value indicating the relationship between the strings:
 * <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
 * 0 - The contents of both strings are equal.
 * >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
 * Examples:
 * `MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal`
 * `MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal`
 * `MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal`
 * `MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'`
 * `MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal`
 * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
 * `MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'`
 * `MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'`
 * ```
 * Hash: 0x1E34710ECD4AB0EB | ApiSet: undefined
 */
export function compareStrings(str1, str2, matchCase, maxLength) {
    return CompareStrings(str1, str2, matchCase, maxLength);
}
/**
 * Hash: 0x957E790EA1727B64 | ApiSet: undefined
 */
export function clearCloudHat() {
    ClearCloudHat();
}
/**
 * Clears the active weather type after a specific amount of time determined by `transitionTimeInMs`.
 * Hash: 0x0CF97F497FE7D048 | ApiSet: undefined
 */
export function clearWeatherTypeNowPersistNetwork(transitionTimeInMs) {
    ClearWeatherTypeNowPersistNetwork(transitionTimeInMs);
}
/**
 * ```
 * NativeDB Added Parameter 6: Any p5
 * NativeDB Added Parameter 7: Any p6
 * ```
 * Hash: 0x05983472F0494E60 | ApiSet: undefined
 */
export function createIncidentWithEntity(dispatchService, ped, numUnits, radius) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return CreateIncidentWithEntity(dispatchService, _ped, numUnits, radius);
}
/**
 * Hash: 0xCCC39339BEF76CF5 | ApiSet: undefined
 */
export function clearWeatherTypePersist() {
    ClearWeatherTypePersist();
}
/**
 * Hash: 0xB3CD58CCA6CDA852 | ApiSet: undefined
 */
export function clearTacticalAnalysisPoints() {
    ClearTacticalAnalysisPoints();
}
/**
 * ```
 * NativeDB Added Parameter 8: Any p7
 * NativeDB Added Parameter 9: Any p8
 * ```
 * Hash: 0x3F892CAF67444AE7 | ApiSet: undefined
 */
export function createIncident(dispatchService, position, numUnits, radius) {
    return CreateIncident(dispatchService, position.x, position.y, position.z, numUnits, radius);
}
/**
 * Hash: 0x213AEB2B90CBA7AC | ApiSet: undefined
 */
export function copyMemory(src, size) {
    return CopyMemory(src, size);
}
/**
 * ```
 * Delete an incident with a given id.
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * ```
 * Hash: 0x556C1AA270D5A207 | ApiSet: undefined
 */
export function deleteIncident(incidentId) {
    DeleteIncident(incidentId);
}
/**
 * ```
 * Disables the spawn point at the police house on the specified index.
 * policeIndex: The police house index.
 * toggle: true to enable the spawn point, false to disable.
 * - Nacorpio
 * ```
 * Hash: 0x23285DED6EBD7EA3 | ApiSet: undefined
 */
export function disablePoliceRestart(policeIndex, toggle) {
    DisablePoliceRestart(policeIndex, toggle);
}
/**
 * Hash: 0xDC518000E39DAE1F | ApiSet: undefined
 */
export function deleteStuntJump(p0) {
    DeleteStuntJump(p0);
}
/**
 * ```
 * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
 * ```
 * Hash: 0xC8535819C450EBA8 | ApiSet: undefined
 */
export function disableHospitalRestart(hospitalIndex, toggle) {
    DisableHospitalRestart(hospitalIndex, toggle);
}
/**
 * Displays a text input box.
 * ```cpp
 * enum eKeyboardType
 * {
 * ONSCREEN_KEYBOARD_ENGLISH = 0,
 * ONSCREEN_KEYBOARD_LOCALISED = 1,
 * ONSCREEN_KEYBOARD_PASSWORD = 2,
 * ONSCREEN_KEYBOARD_GAMERTAG = 3,
 * ONSCREEN_KEYBOARD_EMAIL = 4,
 * ONSCREEN_KEYBOARD_BASIC_ENGLISH = 5,
 * ONSCREEN_KEYBOARD_FILENAME = 6
 * };
 * ```
 * Hash: 0x00DC833F2568DBF6 | ApiSet: undefined
 */
export function displayOnscreenKeyboard(keyboardType, windowTitle, description, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength) {
    DisplayOnscreenKeyboard(keyboardType, windowTitle, description, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
}
/**
 * Hash: 0xA5272EBEDD4747F6 | ApiSet: undefined
 */
export function disableStuntJumpSet(p0) {
    DisableStuntJumpSet(p0);
}
/**
 * Hash: 0x50EEAAD86232EE55 | ApiSet: undefined
 */
export function doAutoSave() {
    DoAutoSave();
}
/**
 * Displays the text input box with support for input with 500 characters.
 * Hash: 0xCA78CFA0366592FE | ApiSet: undefined
 */
export function displayOnscreenKeyboardWithLongerInitialString(keyboardType, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength) {
    return DisplayOnscreenKeyboardWithLongerInitialString(keyboardType, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
}
/**
 * Hash: 0x1327E2FE9746BAEE | ApiSet: undefined
 */
export function doesPopMultiplierAreaExist(id) {
    return DoesPopMultiplierAreaExist(id);
}
/**
 * Enables or disables the specified 'dispatch service' type. 'Dispatch services' are used for spawning AI response peds/vehicles for events such as a fire in the street (type 3 - DT_FireDepartment), or gunfire in a gang area (type 11 - DT_Gangs).
 * List of dispatch services:
 * ```cpp
 * enum eDispatchType
 * {
 * DT_Invalid = 0,
 * DT_PoliceAutomobile = 1,
 * DT_PoliceHelicopter = 2,
 * DT_FireDepartment = 3,
 * DT_SwatAutomobile = 4,
 * DT_AmbulanceDepartment = 5,
 * DT_PoliceRiders = 6,
 * DT_PoliceVehicleRequest = 7,
 * DT_PoliceRoadBlock = 8,
 * DT_PoliceAutomobileWaitPulledOver = 9,
 * DT_PoliceAutomobileWaitCruising = 10,
 * DT_Gangs = 11,
 * DT_SwatHelicopter = 13,
 * DT_PoliceBoat = 14,
 * DT_ArmyVehicle = 15,
 * DT_BikerBackup = 15
 * };
 * ```
 * Note that 'dispatch service' has nothing to do with the police scanner (audio), to toggle that, use [SET_AUDIO_FLAG](#\_0xB9EFD5C25018725A) with `'PoliceScannerDisabled'`.
 * Hash: 0xDC0F817884CDD856 | ApiSet: undefined
 */
export function enableDispatchService(dispatchService, toggle) {
    EnableDispatchService(dispatchService, toggle);
}
/**
 * ```
 * Makes the ped jump around like they're in a tennis match
 * ```
 * Hash: 0x28A04B411933F8A6 | ApiSet: undefined
 */
export function enableTennisMode(ped, toggle, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    EnableTennisMode(_ped, toggle, p2);
}
/**
 * ```
 * Sets the localplayer playerinfo state back to playing (State 0)
 * States are:
 * -1: "Invalid"
 * 0: "Playing"
 * 1: "Died"
 * 2: "Arrested"
 * 3: "Failed Mission"
 * 4: "Left Game"
 * 5: "Respawn"
 * 6: "In MP Cutscene"
 * ```
 * Hash: 0xC0AA53F866B3134D | ApiSet: undefined
 */
export function forceGameStatePlaying() {
    ForceGameStatePlaying();
}
/**
 * ```
 * creates single lightning+thunder at random position
 * ```
 * Hash: 0xF6062E089251C898 | ApiSet: undefined
 */
export function forceLightningFlash() {
    ForceLightningFlash();
}
/**
 * Hash: 0xE369A5783B866016 | ApiSet: undefined
 */
export function enableStuntJumpSet(p0) {
    EnableStuntJumpSet(p0);
}
/**
 * Hash: 0x8B3CA62B1EF19B62 | ApiSet: undefined
 */
export function getAllocatedStackSize() {
    return GetAllocatedStackSize();
}
/**
 * ```
 * Finds a position ahead of the player by predicting the players next actions.
 * The positions match path finding node positions.
 * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
 * ```
 * Hash: 0x6874E2190B0C1972 | ApiSet: undefined
 */
export function findSpawnPointInDirection(posX, posY, posZ, dirX, dirY, dirZ, distance) {
    const result = FindSpawnPointInDirection(posX, posY, posZ, dirX, dirY, dirZ, distance);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0xB335F761606DB47C | ApiSet: undefined
 */
export function getBaseElementMetadata(p3, p4) {
    return GetBaseElementMetadata(p3, p4);
}
/**
 * Hash: 0x171BAFB3C60389F4 | ApiSet: undefined
 */
export function doesPopMultiplierSphereExist(id) {
    return DoesPopMultiplierSphereExist(id);
}
/**
 * ```
 * Returns value of the '-benchmarkIterations' command line option.
 * ```
 * Hash: 0x4750FC27570311EC | ApiSet: undefined
 */
export function getBenchmarkIterationsFromCommandLine() {
    return GetBenchmarkIterationsFromCommandLine();
}
/**
 * Hash: 0xA23E821FBDF8A5F2 | ApiSet: undefined
 */
export function endReplayStats() {
    EndReplayStats();
}
/**
 * ```
 * Returns value of the '-benchmarkPass' command line option.
 * ```
 * Hash: 0x1B2366C3F2A5C8DF | ApiSet: undefined
 */
export function getBenchmarkPassFromCommandLine() {
    return GetBenchmarkPassFromCommandLine();
}
/**
 * Hash: 0x186FC4BE848E1C92 | ApiSet: undefined
 */
export function getAngleBetween2dVectors(x1, y1, x2, y2) {
    return GetAngleBetween2dVectors(x1, y1, x2, y2);
}
/**
 * Hash: 0x53158863FCC0893A | ApiSet: undefined
 */
export function getBitsInRange(_var, rangeStart, rangeEnd) {
    return GetBitsInRange(_var, rangeStart, rangeEnd);
}
/**
 * Hash: 0xE599A503B3837E1B | ApiSet: undefined
 */
export function getBenchmarkTime() {
    return GetBenchmarkTime();
}
/**
 * Hash: 0x20AC25E781AE4A84 | ApiSet: undefined
 */
export function getCloudHatOpacity() {
    return GetCloudHatOpacity();
}
/**
 * Hash: 0x4C9296CBCD1B971E | ApiSet: undefined
 */
export function getFakeWantedLevel() {
    return GetFakeWantedLevel();
}
/**
 * Hash: 0xDFB4138EEFED7B81 | ApiSet: undefined
 */
export function getCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance, ownedByPlayer) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    const result = GetCoordsOfProjectileTypeWithinDistance(_ped, weaponHash, distance, ownedByPlayer);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0x8D7A43EC6A5FEA45 | ApiSet: undefined
 */
export function getCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer) {
    if (typeof projectileHash === 'string')
        projectileHash = this.getHashKey(projectileHash);
    const result = GetCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Returns the distance between two three-dimensional points, optionally ignoring the Z values.
 * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
 * `Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.`
 * Hash: 0xF1B760881820C952 | ApiSet: undefined
 */
export function getDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ) {
    return GetDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ);
}
/**
 * Hash: 0x9CD27B0045628463 | ApiSet: undefined
 */
export function getGameTimer() {
    return GetGameTimer();
}
/**
 * Gets the number of the current frame being displayed.
 * Hash: 0xFC8202EFC642E6F2 | ApiSet: undefined
 */
export function getFrameCount() {
    return GetFrameCount();
}
/**
 * Gets the high precision frame time of the last frame in seconds.
 * *note: the example above is way less precise.*
 * Hash: 0x15C40837039FFAF7 | ApiSet: undefined
 */
export function getFrameTime() {
    return GetFrameTime();
}
/**
 * This native converts its past string to hash. It is hashed using jenkins one at a time method.
 * Hash: 0xD24D37CC275948CC | ApiSet: undefined
 */
export function getHashKey(string) {
    return GetHashKey(string);
}
/**
 * ```
 * Returns pointer to an empty string.
 * GET_C*
 * ```
 * Hash: 0x24DA7D7667FD7B09 | ApiSet: undefined
 */
export function getGlobalCharBuffer() {
    return GetGlobalCharBuffer();
}
/**
 * Determines the highest ground Z-coordinate directly below a specified 3D coordinate, excluding any objects at that point. Optionally, water can be considered as ground when determining the highest point.
 * ```
 * NativeDB Added Parameter 6: BOOL ignoreDistToWaterLevelCheck - If set to true, the distance to the water level will be ignored when checking for water as ground.
 * ```
 * ```
 * NativeDB Introduced: v505
 * ```
 * Hash: 0x9E82F0F362881B29 | ApiSet: undefined
 */
export function getGroundZExcludingObjectsFor3dCoord(position, waterAsGround) {
    return GetGroundZExcludingObjectsFor3dCoord(position.x, position.y, position.z, waterAsGround);
}
/**
 * Hash: 0xCBAD6729F7B1F4FC | ApiSet: undefined
 */
export function getIndexOfCurrentLevel() {
    return GetIndexOfCurrentLevel();
}
/**
 * This native gets the ground level (ground elevation) and returns the Z coordinate that represents it.
 * Note: This native can only calculate the elevation when the coordinates are within the render distance of the client.
 * ```
 * NativeDB Added Parameter 6: BOOL p5
 * ```
 * Hash: 0xC906A7DAB05C8D2B | ApiSet: undefined
 */
export function getGroundZFor3dCoord(position, includeWater) {
    return GetGroundZFor3dCoord(position.x, position.y, position.z, includeWater);
}
/**
 * Attempts to identify the highest ground Z-coordinate and determine the corresponding surface normal directly beneath a specified 3D coordinate.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x8BDC7BFC57A81E76 | ApiSet: undefined
 */
export function getGroundZAndNormalFor3dCoord(position) {
    const result = GetGroundZAndNormalFor3dCoord(position.x, position.y, position.z);
    return [result[0], result[1], new Vector3(result[2], result[3], result[4])];
}
/**
 * ```
 * Although we don't have a jenkins hash for this one, the name is 100% confirmed.
 * ```
 * Hash: 0x9689123E3F213AA5 | ApiSet: undefined
 */
export function getIsPlayerInAnimalForm() {
    return GetIsPlayerInAnimalForm();
}
/**
 * Hash: 0xA33CDCCDA663159E | ApiSet: undefined
 */
export function getMissionFlag() {
    return GetMissionFlag();
}
/**
 * ```
 * dx = x1 - x2
 * dy = y1 - y2
 * ```
 * Hash: 0x2FFB6B224F4B2926 | ApiSet: undefined
 */
export function getHeadingFromVector2d(dx, dy) {
    return GetHeadingFromVector2d(dx, dy);
}
/**
 * Hash: 0xEB4A0C2D56441717 | ApiSet: undefined
 */
export function getNumDispatchedUnitsForPlayer(dispatchService) {
    return GetNumDispatchedUnitsForPlayer(dispatchService);
}
/**
 * ```
 * Returns true if profile setting 208 is equal to 0.
 * ```
 * Hash: 0x6E04F06094C87047 | ApiSet: undefined
 */
export function getIsAutoSaveOff() {
    return GetIsAutoSaveOff();
}
/**
 * Determines whether a line segment intersects a plane and, if so, returns the parameter value at which this intersection occurs.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xF56DFB7B61BE7276 | ApiSet: undefined
 */
export function getLinePlaneIntersection(x1, y1, z1, x2, y2, z2, planeX, planeY, planeZ, planeNormalX, planeNormalY, planeNormalZ) {
    return GetLinePlaneIntersection(x1, y1, z1, x2, y2, z2, planeX, planeY, planeZ, planeNormalX, planeNormalY, planeNormalZ);
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0x711327CD09C8F162 | ApiSet: undefined
 */
export function getNextWeatherTypeHashName() {
    return GetNextWeatherTypeHashName();
}
/**
 * ```
 * Gets the dimensions of a model.
 * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
 * `Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);`
 * ```
 * Hash: 0x03E8D3D5F549087A | ApiSet: undefined
 */
export function getModelDimensions(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    const result = GetModelDimensions(modelHash);
    return [result[0], new Vector3(result[1], result[2], result[3]), new Vector3(result[2], result[3], result[4])];
}
/**
 * Hash: 0xFEAD16FC8F9DFC0F | ApiSet: undefined
 */
export function getNumberOfFreeStacksOfThisSize(stackSize) {
    return GetNumberOfFreeStacksOfThisSize(stackSize);
}
/**
 * Hash: 0x996DD1E1E02F1008 | ApiSet: undefined
 */
export function getNumSuccessfulStuntJumps() {
    return GetNumSuccessfulStuntJumps();
}
/**
 * ```
 * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
 * ```
 * Hash: 0x8362B09B91893647 | ApiSet: undefined
 */
export function getOnscreenKeyboardResult() {
    return GetOnscreenKeyboardResult();
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0x564B884A05EC45A3 | ApiSet: undefined
 */
export function getPrevWeatherTypeHashName() {
    return GetPrevWeatherTypeHashName();
}
/**
 * Hash: 0x96695E368AD855F3 | ApiSet: undefined
 */
export function getRainLevel() {
    return GetRainLevel();
}
/**
 * ```
 * Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
 * ```
 * Hash: 0xABB2FA71C83A1B72 | ApiSet: undefined
 */
export function getPowerSavingModeDuration() {
    return GetPowerSavingModeDuration();
}
/**
 * Hash: 0x82FDE6A57EE4EE44 | ApiSet: undefined
 */
export function getProjectileNearPed(ped, weaponHash, distance, ownedByPlayer) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    const result = GetProjectileNearPed(_ped, weaponHash, distance, ownedByPlayer);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * Hash: 0xD2D57F1D764117B1 | ApiSet: undefined
 */
export function getRandomEventFlag() {
    return GetRandomEventFlag();
}
/**
 * Hash: 0xC488FF2356EA7791 | ApiSet: undefined
 */
export function getProfileSetting(profileSetting) {
    return GetProfileSetting(profileSetting);
}
/**
 * Hash: 0xD53343AA4FB7DD28 | ApiSet: undefined
 */
export function getRandomIntInRange(startRange, endRange) {
    return GetRandomIntInRange(startRange, endRange);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xF2D49816A804D134 | ApiSet: undefined
 */
export function getRandomIntInRange2(startRange, endRange) {
    return GetRandomIntInRange2(startRange, endRange);
}
/**
 * Hash: 0x8098C8D6597AAE18 | ApiSet: undefined
 */
export function getReplayStatAtIndex(index) {
    return GetReplayStatAtIndex(index);
}
/**
 * Hash: 0x313CE5879CEB6FCD | ApiSet: undefined
 */
export function getRandomFloatInRange(startRange, endRange) {
    return GetRandomFloatInRange(startRange, endRange);
}
/**
 * Hash: 0xDC9274A7EF6B2867 | ApiSet: undefined
 */
export function getReplayStatCount() {
    return GetReplayStatCount();
}
/**
 * Hash: 0xC5868A966E5BE3AE | ApiSet: undefined
 */
export function getSnowLevel() {
    return GetSnowLevel();
}
/**
 * Hash: 0x2B5E102E4A42F2BF | ApiSet: undefined
 */
export function getStatusOfMissionRepeatSave() {
    return GetStatusOfMissionRepeatSave();
}
/**
 * Hash: 0x2B626A0150E4D449 | ApiSet: undefined
 */
export function getReplayStatMissionType() {
    return GetReplayStatMissionType();
}
/**
 * Hash: 0xA09F896CE912481F | ApiSet: undefined
 */
export function getSizeOfSaveData(p0) {
    return GetSizeOfSaveData(p0);
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0xF3BBE884A14BB413 | ApiSet: undefined
 */
export function getWeatherTypeTransition() {
    return GetWeatherTypeTransition();
}
/**
 * Hash: 0x6856EC3D35C81EA4 | ApiSet: undefined
 */
export function getTotalSuccessfulStuntJumps() {
    return GetTotalSuccessfulStuntJumps();
}
/**
 * Hash: 0x17DF68D720AA77F8 | ApiSet: undefined
 */
export function getTennisSwingAnimComplete(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetTennisSwingAnimComplete(_ped);
}
/**
 * ```
 * Hardcoded to always return true.
 * ```
 * Hash: 0x14832BF2ABA53FC5 | ApiSet: undefined
 */
export function hasAsyncInstallFinished() {
    return HasAsyncInstallFinished();
}
/**
 * ```
 * p3 - possibly radius?
 * ```
 * Hash: 0x9870ACFB89A90995 | ApiSet: undefined
 */
export function hasBulletImpactedInArea(position, p3, p4, p5) {
    return HasBulletImpactedInArea(position.x, position.y, position.z, p3, p4, p5);
}
/**
 * Hash: 0xA8CF1CC0AFCD3F12 | ApiSet: undefined
 */
export function getWindSpeed() {
    return GetWindSpeed();
}
/**
 * ```
 * Hardcoded to return false.
 * ```
 * Hash: 0xE8B9C0EC9E183F35 | ApiSet: undefined
 */
export function hasResumedFromSuspend() {
    return HasResumedFromSuspend();
}
/**
 * ```
 * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
 * INT_SCORES_SCORTED was a hash collision
 * ```
 * Hash: 0x071E2A839DE82D90 | ApiSet: undefined
 */
export function hasButtonCombinationJustBeenEntered(hash, amount) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return HasButtonCombinationJustBeenEntered(hash, amount);
}
/**
 * Used for hunting in singleplayer and for golfing in both sp and online. The [`GET_HEADING_FROM_VECTOR_2D`](#\_0x2FFB6B224F4B2926) native can be used to get the wind heading from the direction.
 * Hash: 0x1F400FEF721170DA | ApiSet: undefined
 */
export function getWindDirection() {
    return new Vector3(GetWindDirection());
}
/**
 * Hash: 0x075F1D57402C93BA | ApiSet: undefined
 */
export function haveCreditsReachedEnd() {
    return HaveCreditsReachedEnd();
}
/**
 * ```
 * Get inputted "Cheat code", for example:
 * while (TRUE)
 * {
 * `if (MISC::_557E43C447E700A8(${fugitive}))`
 * {
 * // Do something.
 * }
 * `SYSTEM::WAIT(0);`
 * }
 * Calling this will also set the last saved string hash to zero.
 * ```
 * Hash: 0x557E43C447E700A8 | ApiSet: undefined
 */
export function hasCheatStringJustBeenEntered(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return HasCheatStringJustBeenEntered(hash);
}
/**
 * Hash: 0xDC8C5D7CFEAB8394 | ApiSet: undefined
 */
export function hasBulletImpactedInBox(p0, p1, p2, p3, p4, p5, p6, p7) {
    return HasBulletImpactedInBox(p0, p1, p2, p3, p4, p5, p6, p7);
}
/**
 * Hash: 0x21FFB63D8C615361 | ApiSet: undefined
 */
export function ignoreNextRestart(toggle) {
    IgnoreNextRestart(toggle);
}
/**
 * Hash: 0x69240733738C19A0 | ApiSet: undefined
 */
export function isAutoSaveInProgress() {
    return IsAutoSaveInProgress();
}
/**
 * Hash: 0xDE0F6D7450D37351 | ApiSet: undefined
 */
export function isBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer) {
    return IsBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer);
}
/**
 * ```
 * `if (MISC::IS_AUSSIE_VERSION()) {`
 * sub_127a9(&l_31, 1024); // l_31 |= 1024
 * l_129 = 3;
 * sub_129d2("AUSSIE VERSION IS TRUE!?!?!"); // DEBUG
 * }
 * Used to block some of the prostitute stuff due to laws in Australia.
 * ```
 * Hash: 0x9F1935CA1F724008 | ApiSet: undefined
 */
export function isAussieVersion() {
    return IsAussieVersion();
}
/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * For projectiles, see: [`IS_PROJECTILE_TYPE_IN_ANGLED_AREA`](#\_0xF0BC12401061DEA0)
 * Hash: 0x1A8B5F3C01E2B477 | ApiSet: undefined
 */
export function isBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer) {
    return IsBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer);
}
/**
 * Hash: 0xA61B4DF533DCB56E | ApiSet: undefined
 */
export function isAreaOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    return IsAreaOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}
/**
 * Hash: 0x4D982ADB1978442D | ApiSet: undefined
 */
export function isDurangoVersion() {
    return IsDurangoVersion();
}
/**
 * ```
 * Returns true if command line option '-benchmark' is set.
 * ```
 * Hash: 0xA049A5BE0F04F2F8 | ApiSet: undefined
 */
export function isCommandLineBenchmarkValueSet() {
    return IsCommandLineBenchmarkValueSet();
}
/**
 * ```
 * Returns bit's boolean state from [offset] of [address].
 * Example:
 * `MISC::IS_BIT_SET(bitAddress, 1);`
 * To enable and disable bits, see:
 * `MISC::SET_BIT(&bitAddress, 1);   // enable`
 * `MISC::CLEAR_BIT(&bitAddress, 1); // disable`
 * ```
 * Hash: 0xA921AA820C25702F | ApiSet: undefined
 */
export function isBitSet(address, offset) {
    return IsBitSet(address, offset);
}
/**
 * ```
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * ```
 * Hash: 0xC8BC6461E629BEAA | ApiSet: undefined
 */
export function isIncidentValid(incidentId) {
    return IsIncidentValid(incidentId);
}
/**
 * Hash: 0x3F2023999AD51C1F | ApiSet: undefined
 */
export function isBulletInArea(position, radius, ownedByPlayer) {
    return IsBulletInArea(position.x, position.y, position.z, radius, ownedByPlayer);
}
/**
 * ```
 * NativeDB Introduced: 2545
 * ```
 * Hash: 0xB8C0BB75D8A77DB3 | ApiSet: undefined
 */
export function isJapaneseVersion() {
    return IsJapaneseVersion();
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0x7EA2B6AF97ECA6ED | ApiSet: undefined
 */
export function isFrontendFading() {
    return IsFrontendFading();
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0x2FAA3A30BEC0F25D | ApiSet: undefined
 */
export function isNextWeatherType(weatherType) {
    return IsNextWeatherType(weatherType);
}
/**
 * Hash: 0x8A75CE2956274ADD | ApiSet: undefined
 */
export function isMemoryCardInUse() {
    return IsMemoryCardInUse();
}
/**
 * Hash: 0x2B4A15E44DE0F478 | ApiSet: undefined
 */
export function isMinigameInProgress() {
    return IsMinigameInProgress();
}
/**
 * ```
 * aka "constrained"
 * ```
 * Hash: 0x684A41975F077262 | ApiSet: undefined
 */
export function isInPowerSavingMode() {
    return IsInPowerSavingMode();
}
/**
 * Hash: 0xE54E209C35FFA18D | ApiSet: undefined
 */
export function isPointObscuredByAMissionEntity(p0, p1, p2, p3, p4, p5, p6) {
    return IsPointObscuredByAMissionEntity(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x48AF36444B965238 | ApiSet: undefined
 */
export function isPcVersion() {
    return IsPcVersion();
}
/**
 * Hash: 0xA72BC0B675B1519E | ApiSet: undefined
 */
export function isOrbisVersion() {
    return IsOrbisVersion();
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0x44F28F86433B10A9 | ApiSet: undefined
 */
export function isPrevWeatherType(weatherType) {
    return IsPrevWeatherType(weatherType);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x1312F4B242609CE3 | ApiSet: undefined
 */
export function isPopMultiplierAreaUnk(id) {
    return IsPopMultiplierAreaUnk(id);
}
/**
 * Hash: 0xCCA1072C29D096C2 | ApiSet: undefined
 */
export function isPs3Version() {
    return IsPs3Version();
}
/**
 * ```
 * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
 * ```
 * Hash: 0x2E0DC353342C4A6D | ApiSet: undefined
 */
export function isProjectileTypeInArea(x1, y1, z1, x2, y2, z2, type, ownedByPlayer) {
    return IsProjectileTypeInArea(x1, y1, z1, x2, y2, z2, type, ownedByPlayer);
}
/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * ```
 * NativeDB Removed Parameter 7: float p7
 * ```
 * Hash: 0xF0BC12401061DEA0 | ApiSet: undefined
 */
export function isProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, p7, weaponHash, ownedByPlayer) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return IsProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, p7, weaponHash, ownedByPlayer);
}
/**
 * ```
 * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
 * ```
 * Hash: 0xFEFCF11B01287125 | ApiSet: undefined
 */
export function isSniperBulletInArea(x1, y1, z1, x2, y2, z2) {
    return IsSniperBulletInArea(x1, y1, z1, x2, y2, z2);
}
/**
 * The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
 * Hash: 0xADCDE75E1C60F32D | ApiSet: undefined
 */
export function isPositionOccupied(position, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10) {
    const _ignoreEntity = ignoreEntity instanceof Entity ? ignoreEntity.handle() : ignoreEntity;
    return IsPositionOccupied(position.x, position.y, position.z, range, p4, checkVehicles, checkPeds, p7, p8, _ignoreEntity, p10);
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0x61A23B7EDA9BDA24 | ApiSet: undefined
 */
export function isSniperInverted() {
    return IsSniperInverted();
}
/**
 * ```
 * NativeDB Introduced: 2545
 * ```
 * Hash: 0x0A27B2B6282F7169 | ApiSet: undefined
 */
export function isSteamVersion() {
    return IsSteamVersion();
}
/**
 * ```
 * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
 * ownedByPlayer = only projectiles fired by the player will be detected.
 * ```
 * Hash: 0x5270A8FBC098C3F8 | ApiSet: undefined
 */
export function isProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer) {
    return IsProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer);
}
/**
 * Hash: 0xCA042B6957743895 | ApiSet: undefined
 */
export function isStringNullOrEmpty(string) {
    return IsStringNullOrEmpty(string);
}
/**
 * Hash: 0x2272B0A1343129F4 | ApiSet: undefined
 */
export function isStuntJumpMessageShowing() {
    return IsStuntJumpMessageShowing();
}
/**
 * Hash: 0x7A3F19700A4D0525 | ApiSet: undefined
 */
export function isStuntJumpInProgress() {
    return IsStuntJumpInProgress();
}
/**
 * Hash: 0xF22B6C47C6EAB066 | ApiSet: undefined
 */
export function isStringNull(string) {
    return IsStringNull(string);
}
/**
 * Hash: 0x34318593248C8FB2 | ApiSet: undefined
 */
export function isProjectileTypeWithinDistance(position, projHash, radius, ownedByPlayer) {
    if (typeof projHash === 'string')
        projHash = this.getHashKey(projHash);
    return IsProjectileTypeWithinDistance(position.x, position.y, position.z, projHash, radius, ownedByPlayer);
}
/**
 * ```
 * Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
 * ```
 * Hash: 0x3BBBD13E5041A79E | ApiSet: undefined
 */
export function landingMenuIsActive() {
    return LandingMenuIsActive();
}
/**
 * Hash: 0x7B30F65D7B710098 | ApiSet: undefined
 */
export function isThisAMinigameScript() {
    return IsThisAMinigameScript();
}
/**
 * Hash: 0x5D5479D115290C3F | ApiSet: undefined
 */
export function isTennisMode(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsTennisMode(_ped);
}
/**
 * ```
 * The following cloudhats are useable:
 * altostratus
 * Cirrus
 * cirrocumulus
 * Clear 01
 * Cloudy 01
 * Contrails
 * Horizon
 * horizonband1
 * horizonband2
 * horizonband3
 * horsey
 * Nimbus
 * Puffs
 * RAIN
 * Snowy 01
 * Stormy 01
 * stratoscumulus
 * Stripey
 * shower
 * Wispy
 * ```
 * Hash: 0xFC4842A34657BFCB | ApiSet: undefined
 */
export function loadCloudHat(name, transitionTime) {
    LoadCloudHat(name, transitionTime);
}
/**
 * ```
 * CLEAR_*
 * ```
 * Hash: 0x06462A961E94B67C | ApiSet: undefined
 */
export function _0x06462A961E94B67C() {
    Citizen.invokeNative('0x06462A961E94B67C');
}
/**
 * Hash: 0xF6201B4DAF662A9D | ApiSet: undefined
 */
export function isXbox360Version() {
    return IsXbox360Version();
}
/**
 * ```
 * HAS_*
 * ```
 * Hash: 0x2107A3773771186D | ApiSet: undefined
 */
export function _0x2107A3773771186D() {
    return Citizen.invokeNative('0x2107A3773771186D');
}
/**
 * ```
 * GET_TENNIS_*; references 0xFBFEC0E9 = interruptswing
 * ```
 * Hash: 0x19BFED045C647C49 | ApiSet: undefined
 */
export function _0x19BFED045C647C49(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x19BFED045C647C49', _ped);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x31125FD509D9043F | ApiSet: undefined
 */
export function _0x31125FD509D9043F() {
    return Citizen.invokeNative('0x31125FD509D9043F');
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x1178E104409FE58C | ApiSet: undefined
 */
export function _0x1178E104409FE58C(p0, p1) {
    Citizen.invokeNative('0x1178E104409FE58C', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x39455BF4F4F55186 | ApiSet: undefined
 */
export function _0x39455BF4F4F55186(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) {
    return Citizen.invokeNative('0x39455BF4F4F55186', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}
/**
 * Hash: 0x397BAA01068BAA96 | ApiSet: undefined
 */
export function _0x397BAA01068BAA96() {
    return Citizen.invokeNative('0x397BAA01068BAA96');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x23227DF0B2115469 | ApiSet: undefined
 */
export function _0x23227DF0B2115469() {
    Citizen.invokeNative('0x23227DF0B2115469');
}
/**
 * ```
 * GET_C*
 * ```
 * Hash: 0x21C235BC64831E5A | ApiSet: undefined
 */
export function _0x21C235BC64831E5A(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return new Vector3(Citizen.invokeNative('0x21C235BC64831E5A', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9));
}
/**
 * ```
 * Only found 3 times in decompiled scripts. Not a whole lot to go off of.
 * `MISC::_48F069265A0E4BEC(a_0, "Movie_Name_For_This_Player");`
 * `MISC::_48F069265A0E4BEC(&a_0._fB, "Ringtone_For_This_Player");`
 * `MISC::_48F069265A0E4BEC(&a_0._f1EC4._f12[v_A\/\*6\*\/], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"`
 * ```
 * Hash: 0x48F069265A0E4BEC | ApiSet: undefined
 */
export function _0x48F069265A0E4BEC(name) {
    return Citizen.invokeNative('0x48F069265A0E4BEC', name);
}
/**
 * ```
 * From the scripts:
 * `MISC::_54F157E0336A3822(sub_aa49(a_0), "ForcedStopDirection", v_E);`
 * Related to tennis mode.
 * SET_*
 * ```
 * Hash: 0x54F157E0336A3822 | ApiSet: undefined
 */
export function _0x54F157E0336A3822(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x54F157E0336A3822', _ped, p1, p2);
}
/**
 * ```
 * Sets GtaThread+0x14A
 * SET_S*
 * ```
 * Hash: 0x65D2EBB47E1CEC21 | ApiSet: undefined
 */
export function _0x65D2EBB47E1CEC21(toggle) {
    Citizen.invokeNative('0x65D2EBB47E1CEC21', toggle);
}
/**
 * Hash: 0x693478ACBD7F18E7 | ApiSet: undefined
 */
export function _0x693478ACBD7F18E7() {
    Citizen.invokeNative('0x693478ACBD7F18E7');
}
/**
 * ```
 * HAS_*
 * Probably something like "has game been started for the first time".
 * ```
 * Hash: 0x6FDDF453C0C756EC | ApiSet: undefined
 */
export function _0x6FDDF453C0C756EC() {
    return Citizen.invokeNative('0x6FDDF453C0C756EC');
}
/**
 * ```
 * Only found 2 times in decompiled scripts. Not a whole lot to go off of.
 * `MISC::_8269816F6CFD40F8(&a_0._f1F5A._f6[0\/\*8\*\/], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"`
 * `MISC::_8269816F6CFD40F8(&a_0._f4B4[v_1A\/\*8\*\/], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"`
 * ```
 * Hash: 0x8269816F6CFD40F8 | ApiSet: undefined
 */
export function _0x8269816F6CFD40F8(name) {
    return Citizen.invokeNative('0x8269816F6CFD40F8', name);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x703CC7F60CBB2B57 | ApiSet: undefined
 */
export function _0x703CC7F60CBB2B57(p0) {
    Citizen.invokeNative('0x703CC7F60CBB2B57', p0);
}
/**
 * Hash: 0x5B1F2E327B6B6FE1 | ApiSet: undefined
 */
export function _0x5B1F2E327B6B6FE1() {
    return Citizen.invokeNative('0x5B1F2E327B6B6FE1');
}
/**
 * Hash: 0x7F8F6405F4777AF6 | ApiSet: undefined
 */
export function _0x7F8F6405F4777AF6(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return Citizen.invokeNative('0x7F8F6405F4777AF6', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * ```
 * I*
 * ```
 * Hash: 0x8D74E26F54B4E5C3 | ApiSet: undefined
 */
export function _0x8D74E26F54B4E5C3(p0) {
    Citizen.invokeNative('0x8D74E26F54B4E5C3', p0);
}
/**
 * ```
 * Sets bit 3 in GtaThread+0x150
 * SET_T*
 * ```
 * Hash: 0x6F2135B6129620C1 | ApiSet: undefined
 */
export function _0x6F2135B6129620C1(toggle) {
    Citizen.invokeNative('0x6F2135B6129620C1', toggle);
}
/**
 * ```
 * Possibly used to clear scenario points.
 * CLEAR_*
 * ```
 * Hash: 0x7EC6F9A478A6A512 | ApiSet: undefined
 */
export function _0x7EC6F9A478A6A512() {
    Citizen.invokeNative('0x7EC6F9A478A6A512');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x8951EB9C6906D3C8 | ApiSet: undefined
 */
export function _0x8951EB9C6906D3C8() {
    Citizen.invokeNative('0x8951EB9C6906D3C8');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x97E7E2C04245115B | ApiSet: undefined
 */
export function _0x97E7E2C04245115B(p0) {
    Citizen.invokeNative('0x97E7E2C04245115B', p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xBA4B8D83BDC75551 | ApiSet: undefined
 */
export function _0xBA4B8D83BDC75551(p0) {
    Citizen.invokeNative('0xBA4B8D83BDC75551', p0);
}
/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x916CA67D26FD1E37 | ApiSet: undefined
 */
export function _0x916CA67D26FD1E37(p0) {
    Citizen.invokeNative('0x916CA67D26FD1E37', p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xA0AD167E4B39D9A2 | ApiSet: undefined
 */
export function _0xA0AD167E4B39D9A2(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    return Citizen.invokeNative('0xA0AD167E4B39D9A2', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
}
/**
 * ```
 * GET_SAVE_*
 * GET_SAVE_UNLESS_CUSTOM_DOT ?
 * ```
 * Hash: 0xA4A0065E39C9F25C | ApiSet: undefined
 */
export function _0xA4A0065E39C9F25C() {
    const result = Citizen.invokeNative('0xA4A0065E39C9F25C');
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2], result[3], result[4]];
}
/**
 * Hash: 0xD642319C54AADEB6 | ApiSet: undefined
 */
export function _0xD642319C54AADEB6() {
    return Citizen.invokeNative('0xD642319C54AADEB6');
}
/**
 * Hash: 0xD10282B6E3751BA0 | ApiSet: undefined
 */
export function _0xD10282B6E3751BA0() {
    return Citizen.invokeNative('0xD10282B6E3751BA0');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xEB078CA2B5E82ADD | ApiSet: undefined
 */
export function _0xEB078CA2B5E82ADD(p0, p1) {
    Citizen.invokeNative('0xEB078CA2B5E82ADD', p0, p1);
}
/**
 * Hash: 0xB51B9AB9EF81868C | ApiSet: undefined
 */
export function _0xB51B9AB9EF81868C(toggle) {
    Citizen.invokeNative('0xB51B9AB9EF81868C', toggle);
}
/**
 * ```
 * RESET_*
 * ```
 * Hash: 0xD9F692D349249528 | ApiSet: undefined
 */
export function _0xD9F692D349249528() {
    Citizen.invokeNative('0xD9F692D349249528');
}
/**
 * ```
 * SET_*
 * ```
 * Hash: 0xE532EC1A63231B4F | ApiSet: undefined
 */
export function _0xE532EC1A63231B4F(p0, p1) {
    Citizen.invokeNative('0xE532EC1A63231B4F', p0, p1);
}
/**
 * ```
 * sets something to 1
 * ```
 * Hash: 0xE3D969D2785FFB5E | ApiSet: undefined
 */
export function _0xE3D969D2785FFB5E() {
    Citizen.invokeNative('0xE3D969D2785FFB5E');
}
/**
 * Related to tennis mode. Checks for `0x0FCED5ADF = swung`
 * Hash: 0xE95B0C7D5BA3B96B | ApiSet: undefined
 */
export function _0xE95B0C7D5BA3B96B(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0xE95B0C7D5BA3B96B', _ped);
}
/**
 * Hash: 0xEB2104E905C6F2E9 | ApiSet: undefined
 */
export function _0xEB2104E905C6F2E9() {
    return Citizen.invokeNative('0xEB2104E905C6F2E9');
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xFA3FFB0EEBC288A3 | ApiSet: undefined
 */
export function _0xFA3FFB0EEBC288A3(p0) {
    Citizen.invokeNative('0xFA3FFB0EEBC288A3', p0);
}
/**
 * ```
 * Another unknown label type...
 * `MISC::_FAA457EF263E8763(a_0, "Thumb_label");`
 * `MISC::_FAA457EF263E8763(&a_0._f10, "Photo_label");`
 * `MISC::_FAA457EF263E8763(a_0, "GXTlabel");`
 * `MISC::_FAA457EF263E8763(&a_0._f21, "StringComp");`
 * `MISC::_FAA457EF263E8763(&a_0._f43, "SecondStringComp");`
 * `MISC::_FAA457EF263E8763(&a_0._f53, "ThirdStringComp");`
 * `MISC::_FAA457EF263E8763(&a_0._f32, "SenderStringComp");`
 * `MISC::_FAA457EF263E8763(&a_0._f726[v_1A\/\*16\*\/], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"`
 * `MISC::_FAA457EF263E8763(&a_0._f4B, "PAID_PLAYER");`
 * `MISC::_FAA457EF263E8763(&a_0._f5B, "RADIO_STATION");`
 * ```
 * Hash: 0xFAA457EF263E8763 | ApiSet: undefined
 */
export function _0xFAA457EF263E8763(name) {
    return Citizen.invokeNative('0xFAA457EF263E8763', name);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xEBD3205A207939ED | ApiSet: undefined
 */
export function _0xEBD3205A207939ED() {
    return Citizen.invokeNative('0xEBD3205A207939ED');
}
/**
 * Hash: 0x9243BAC96D64C050 | ApiSet: undefined
 */
export function networkSetScriptIsSafeForNetworkGame() {
    NetworkSetScriptIsSafeForNetworkGame();
}
/**
 * Hash: 0xFB00CA71DA386228 | ApiSet: undefined
 */
export function _0xFB00CA71DA386228() {
    Citizen.invokeNative('0xFB00CA71DA386228');
}
/**
 * ```cpp
 * enum eFontBitField
 * {
 * FONT_BIT_STANDARD = 1,
 * FONT_BIT_CURSIVE = 2,
 * FONT_BIT_ROCKSTAR_TAG = 4
 * FONT_BIT_LEADERBOARD = 8
 * FONT_BIT_CONDENSED = 16
 * FONT_BIT_FIXED_WIDTH_NUMBERS = 32
 * FONT_BIT_CONDENSED_NOT_GAMERNAME = 64
 * FONT_BIT_PRICEDOWN = 128
 * };
 * ```
 * Hash: 0x3ED1438C1F5C6612 | ApiSet: undefined
 */
export function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(fontBitField) {
    NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(fontBitField);
}
/**
 * Hash: 0x1162EA8AE9D24EEA | ApiSet: undefined
 */
export function overrideSaveHouse(p0, p1, p2, p3, p4, p5) {
    const result = OverrideSaveHouse(p0, p1, p2, p3, p4, p5);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * ```
 * Found in the scripts:
 * `MISC::_11B56FBBF7224868("CONTRAILS");`
 * ```
 * Hash: 0x11B56FBBF7224868 | ApiSet: undefined
 */
export function preloadCloudHat(name) {
    PreloadCloudHat(name);
}
/**
 * Hash: 0x2C2B3493FBF51C71 | ApiSet: undefined
 */
export function pauseDeathArrestRestart(toggle) {
    PauseDeathArrestRestart(toggle);
}
/**
 * Hash: 0xE266ED23311F24D4 | ApiSet: undefined
 */
export function playTennisSwingAnim(ped, animDict, animName, p3, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayTennisSwingAnim(_ped, animDict, animName, p3, p4, p5);
}
/**
 * Hash: 0x8FA9C42FC5D7C64B | ApiSet: undefined
 */
export function playTennisDiveAnim(ped, p1, p2, p3, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayTennisDiveAnim(_ped, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x72DE52178C291CB5 | ApiSet: undefined
 */
export function queueMissionRepeatLoad() {
    return QueueMissionRepeatLoad();
}
/**
 * ```
 * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
 * ```
 * Hash: 0x7472BB270D7B4F3E | ApiSet: undefined
 */
export function populateNow() {
    PopulateNow();
}
/**
 * Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
 * Hash: 0x44A0BDC559B35F6E | ApiSet: undefined
 */
export function queueMissionRepeatSave() {
    return QueueMissionRepeatSave();
}
/**
 * Quits the game.
 * Hash: 0xEB6891F03362FB12 | ApiSet: undefined
 */
export function quitGame() {
    QuitGame();
}
/**
 * Hash: 0x7CAEC29ECB5DFEBB | ApiSet: undefined
 */
export function registerFloatToSave(name) {
    return RegisterFloatToSave(name);
}
/**
 * Hash: 0xC8F4131414C835A1 | ApiSet: undefined
 */
export function registerBoolToSave(name) {
    return RegisterBoolToSave(name);
}
/**
 * Hash: 0xEDB1232C5BEAE62F | ApiSet: undefined
 */
export function registerTextLabelToSave(name) {
    return RegisterTextLabelToSave(name);
}
/**
 * Hash: 0x34C9EE5986258415 | ApiSet: undefined
 */
export function registerIntToSave(name) {
    return RegisterIntToSave(name);
}
/**
 * Hash: 0x10C2FA78D0E128A1 | ApiSet: undefined
 */
export function registerEnumToSave(name) {
    return RegisterEnumToSave(name);
}
/**
 * Hash: 0xC0714D0A7EEECA54 | ApiSet: undefined
 */
export function registerSaveHouse(p0, p1, p2, p3, p5, p6) {
    return RegisterSaveHouse(p0, p1, p2, p3, p5, p6);
}
/**
 * Hash: 0xE6869BECDD8F2403 | ApiSet: undefined
 */
export function removePopMultiplierSphere(id, p1) {
    RemovePopMultiplierSphere(id, p1);
}
/**
 * Hash: 0xA735353C77334EA0 | ApiSet: undefined
 */
export function registerInt64ToSave(name) {
    return RegisterInt64ToSave(name);
}
/**
 * Hash: 0x264AC28B01B353A5 | ApiSet: undefined
 */
export function removeDispatchSpawnBlockingArea(p0) {
    RemoveDispatchSpawnBlockingArea(p0);
}
/**
 * Hash: 0xB129E447A2EDA4BF | ApiSet: undefined
 */
export function removePopMultiplierArea(id, p1) {
    RemovePopMultiplierArea(id, p1);
}
/**
 * ```
 * Seems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?
 * `MISC::_6F7794F28C6B2535(&a_0._f1, "tlPlateText");`
 * `MISC::_6F7794F28C6B2535(&a_0._f1C, "tlPlateText_pending");`
 * `MISC::_6F7794F28C6B2535(&a_0._f10B, "tlCarAppPlateText");`
 * "tl" prefix sounds like "Text Label"
 * ```
 * Hash: 0x6F7794F28C6B2535 | ApiSet: undefined
 */
export function registerTextLabelToSave2(name) {
    return RegisterTextLabelToSave2(name);
}
/**
 * Hash: 0x77A84429DD9F0A15 | ApiSet: undefined
 */
export function resetDispatchIdealSpawnDistance() {
    ResetDispatchIdealSpawnDistance();
}
/**
 * ```
 * Begins with RESET_*. Next character in the name is either D or E.
 * ```
 * Hash: 0x437138B6A830166A | ApiSet: undefined
 */
export function resetBenchmarkRecording() {
    ResetBenchmarkRecording();
}
/**
 * ```
 * Appears to remove stealth kill action from memory
 * ```
 * Hash: 0xA6A12939F16D85BE | ApiSet: undefined
 */
export function removeStealthKill(hash, p1) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    RemoveStealthKill(hash, p1);
}
/**
 * In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows the `Disconnecting from GTA Online` warning screen message and quits the game.
 * After quitting, the game process is started again (as the name implies).
 * Hash: 0xE574A662ACAEFBB1 | ApiSet: undefined
 */
export function restartGame() {
    RestartGame();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xEB2DB0CAD13154B3 | ApiSet: undefined
 */
export function resetDispatchTimeBetweenSpawnAttempts(p0) {
    ResetDispatchTimeBetweenSpawnAttempts(p0);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x5896F2BD5683A4E1 | ApiSet: undefined
 */
export function resetDispatchSpawnLocation() {
    ResetDispatchSpawnLocation();
}
/**
 * Hash: 0xAC7BFD5C1D83EA75 | ApiSet: undefined
 */
export function resetDispatchSpawnBlockingAreas() {
    ResetDispatchSpawnBlockingAreas();
}
/**
 * ```
 * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
 * ```
 * Hash: 0x37DEB0AA183FB6D8 | ApiSet: undefined
 */
export function saveBenchmarkRecording() {
    SaveBenchmarkRecording();
}
/**
 * Hash: 0x8EF5573A1F801A5C | ApiSet: undefined
 */
export function scriptRaceGetPlayerSplitTime(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return ScriptRaceGetPlayerSplitTime(_player);
}
/**
 * Records that a player has successfully passed a checkpoint during a scripted race in GTA:Online. This native should be used after initializing the race with [`SCRIPT_RACE_INIT`](#\_0x0A60017F841A54F2).
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x1BB299305C3E8C13 | ApiSet: undefined
 */
export function scriptRacePlayerHitCheckpoint(ped, checkpoint, lap, time) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ScriptRacePlayerHitCheckpoint(_ped, checkpoint, lap, time);
}
/**
 * Initializes a script race in GTA:Online and sets up the helper split time system.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x0A60017F841A54F2 | ApiSet: undefined
 */
export function scriptRaceInit(numCheckpoints, numLaps, numPlayers, localPlayer) {
    const _localPlayer = localPlayer instanceof Entity ? localPlayer.remoteId() : localPlayer;
    ScriptRaceInit(numCheckpoints, numLaps, numPlayers, _localPlayer);
}
/**
 * Allows modification of the cloud opacity. It can also be used in other contexts, such as when the player is in a switch state [`IS_PLAYER_SWITCH_IN_PROGRESS`](#\_0xD9D2CFFF49FAB35F).
 * Hash: 0xF36199225D6D8C86 | ApiSet: undefined
 */
export function setCloudsAlpha(opacity) {
    SetCloudsAlpha(opacity);
}
/**
 * Hash: 0x1FF6BF9A63E5757F | ApiSet: undefined
 */
export function scriptRaceShutdown() {
    ScriptRaceShutdown();
}
/**
 * ```
 * This sets bit [offset] of [address] to on.
 * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
 * Example:
 * `MISC::SET_BIT(&bitAddress, 1);`
 * To check if this bit has been enabled:
 * `MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards`
 * Please note, this method may assign a value to [address] when used.
 * ```
 * Hash: 0x933D6A9EEC1BACD0 | ApiSet: undefined
 */
export function setBit(offset) {
    return SetBit(offset);
}
/**
 * Hash: 0x438822C279B73B93 | ApiSet: undefined
 */
export function setBeastModeActive(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetBeastModeActive(_player);
}
/**
 * Hash: 0x6FE601A64180D423 | ApiSet: undefined
 */
export function setDispatchIdealSpawnDistance(p0) {
    SetDispatchIdealSpawnDistance(p0);
}
/**
 * Overrides the cloud settings, which are normally controlled by the weather, with the specified named version. This native allows for custom cloud formations and behaviors that deviate from the default settings associated with the game's current weather conditions.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x02DEAAC8F8EA7FE7 | ApiSet: undefined
 */
export function setCloudSettingsOverride(overrideSettingsName) {
    SetCloudSettingsOverride(overrideSettingsName);
}
/**
 * Hash: 0x8EF07E15701D61ED | ApiSet: undefined
 */
export function setBitsInRange(rangeStart, rangeEnd, p3) {
    return SetBitsInRange(rangeStart, rangeEnd, p3);
}
/**
 * Hash: 0xA66C71C98D5F2CFB | ApiSet: undefined
 */
export function setExplosiveAmmoThisFrame(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetExplosiveAmmoThisFrame(_player);
}
/**
 * Hash: 0xD10F442036302D50 | ApiSet: undefined
 */
export function setDispatchSpawnLocation(position) {
    SetDispatchSpawnLocation(position.x, position.y, position.z);
}
/**
 * Hash: 0xB938B7E6D3C0620C | ApiSet: undefined
 */
export function setCreditsActive(toggle) {
    SetCreditsActive(toggle);
}
/**
 * ```
 * Sets whether the game should fade out after the player is arrested.
 * ```
 * Hash: 0x1E0B4DC0D990A4E7 | ApiSet: undefined
 */
export function setFadeOutAfterArrest(toggle) {
    SetFadeOutAfterArrest(toggle);
}
/**
 * Hash: 0xFF1BED81BFDC0FE0 | ApiSet: undefined
 */
export function setExplosiveMeleeThisFrame(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetExplosiveMeleeThisFrame(_player);
}
/**
 * Hash: 0x44F7CBC1BEB3327D | ApiSet: undefined
 */
export function setDispatchTimeBetweenSpawnAttempts(p0, p1) {
    SetDispatchTimeBetweenSpawnAttempts(p0, p1);
}
/**
 * ```
 * Sets whether the game should fade in after the player dies or is arrested.
 * ```
 * Hash: 0xDA66D2796BA33F12 | ApiSet: undefined
 */
export function setFadeInAfterDeathArrest(toggle) {
    SetFadeInAfterDeathArrest(toggle);
}
/**
 * ```
 * Sets whether the game should fade out after the player dies.
 * ```
 * Hash: 0x4A18E01DF2C87B86 | ApiSet: undefined
 */
export function setFadeOutAfterDeath(toggle) {
    SetFadeOutAfterDeath(toggle);
}
/**
 * Hash: 0x48838ED9937A15D1 | ApiSet: undefined
 */
export function setDispatchTimeBetweenSpawnAttemptsMultiplier(p0, p1) {
    SetDispatchTimeBetweenSpawnAttemptsMultiplier(p0, p1);
}
/**
 * Hash: 0xF3D78F59DFE18D79 | ApiSet: undefined
 */
export function setFadeInAfterLoad(toggle) {
    SetFadeInAfterLoad(toggle);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xA1183BCFEE0F93D1 | ApiSet: undefined
 */
export function setForcePlayerToJump(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetForcePlayerToJump(_player);
}
/**
 * ```
 * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
 * Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
 * ```
 * Hash: 0x1454F2448DE30163 | ApiSet: undefined
 */
export function setFakeWantedLevel(fakeWantedLevel) {
    SetFakeWantedLevel(fakeWantedLevel);
}
/**
 * Hash: 0x11879CDD803D30F4 | ApiSet: undefined
 */
export function setFireAmmoThisFrame(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetFireAmmoThisFrame(_player);
}
/**
 * Hash: 0xB08B85D860E7BA3C | ApiSet: undefined
 */
export function setIncidentRequestedUnits(incidentId, dispatchService, numUnits) {
    SetIncidentRequestedUnits(incidentId, dispatchService, numUnits);
}
/**
 * ```cpp
 * enum eGravityLevel
 * {
 * GRAV_EARTH = 0, // earth gravity 9.8m/s2
 * GRAV_MOON = 1, // moon gravity 2.4m/s2
 * GRAV_LOW = 2, // very low gravity
 * GRAV_ZERO = 3 // zero gravity
 * }
 * ```
 * Hash: 0x740E14FAD5842351 | ApiSet: undefined
 */
export function setGravityLevel(level) {
    SetGravityLevel(level);
}
/**
 * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. It causes a loading screen to show as it reloads map data.
 * Hash: 0x9BAE5AD2508DF078 | ApiSet: undefined
 */
export function setInstancePriorityMode(toggle) {
    SetInstancePriorityMode(toggle);
}
/**
 * ```
 * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
 * ```
 * Hash: 0x577D1284D6873711 | ApiSet: undefined
 */
export function setGamePaused(toggle) {
    SetGamePaused(toggle);
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0xA43D5C6FE51ADBEF | ApiSet: undefined
 */
export function setOverrideWeather(weatherType) {
    SetOverrideWeather(weatherType);
}
/**
 * ```
 * SET_INCIDENT_*
 * ```
 * Hash: 0xD261BA3E7E998072 | ApiSet: undefined
 */
export function setIncidentUnk(incidentId, p1) {
    SetIncidentUnk(incidentId, p1);
}
/**
 * ```
 * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
 * ```
 * Hash: 0xC5F0A8EBD3F361CE | ApiSet: undefined
 */
export function setInstancePriorityHint(flag) {
    SetInstancePriorityHint(flag);
}
/**
 * Hash: 0x19E00D7322C6F85B | ApiSet: undefined
 */
export function setMinigameInProgress(toggle) {
    SetMinigameInProgress(toggle);
}
/**
 * Controls rain, rain sounds and the creation of puddles.
 * With an `level` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
 * With an `level` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
 * To use the rain level of the current weather, call this native with `-1f` as `level`.
 * Hash: 0x643E26EA6E024D92 | ApiSet: undefined
 */
export function setRainLevel(level) {
    SetRainLevel(level);
}
/**
 * ```
 * SET_PLAYER_*
 * ```
 * Hash: 0x9D8D44ADBBA61EF2 | ApiSet: undefined
 */
export function setPlayerRockstarEditorDisabled(toggle) {
    SetPlayerRockstarEditorDisabled(toggle);
}
/**
 * ```
 * If toggle is true, the ped's head is shown in the pause menu
 * If toggle is false, the ped's head is not shown in the pause menu
 * ```
 * Hash: 0x4EBB7E87AA0DBED4 | ApiSet: undefined
 */
export function setPlayerIsInAnimalForm(toggle) {
    SetPlayerIsInAnimalForm(toggle);
}
/**
 * ```
 * If true, the player can't save the game.
 * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
 * ^ also, if the mission flag is already set, the function does nothing at all
 * ```
 * Hash: 0xC4301E5121A0ED73 | ApiSet: undefined
 */
export function setMissionFlag(toggle) {
    SetMissionFlag(toggle);
}
/**
 * Hash: 0x444D98F98C11F3EC | ApiSet: undefined
 */
export function setRandomSeed(seed) {
    SetRandomSeed(seed);
}
/**
 * Hash: 0x8B05F884CF7E8020 | ApiSet: undefined
 */
export function setRandomWeatherType() {
    SetRandomWeatherType();
}
/**
 * ```
 * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
 * Does nothing if the mission flag is set.
 * ```
 * Hash: 0x971927086CFD2158 | ApiSet: undefined
 */
export function setRandomEventFlag(toggle) {
    SetRandomEventFlag(toggle);
}
/**
 * Hash: 0x4F548CABEAE553BC | ApiSet: undefined
 */
export function setSaveHouse(p0, p1, p2) {
    SetSaveHouse(p0, p1, p2);
}
/**
 * ```
 * ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
 * ```
 * Hash: 0xC9BF75D28165FF77 | ApiSet: undefined
 */
export function setSaveMenuActive(ignoreVehicle) {
    SetSaveMenuActive(ignoreVehicle);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x7F06937B0CDCBC1A | ApiSet: undefined
 */
export function setSnowLevel(level) {
    SetSnowLevel(level);
}
/**
 * Hash: 0x706B5EDCAA7FA663 | ApiSet: undefined
 */
export function setRestartCustomPosition(position, heading) {
    SetRestartCustomPosition(position.x, position.y, position.z, heading);
}
/**
 * Activates riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
 * Hash: 0x2587A48BC88DFADF | ApiSet: undefined
 */
export function setRiotModeEnabled(toggle) {
    SetRiotModeEnabled(toggle);
}
/**
 * Allows the player to perform super jumps. This function must be called every frame for it to work.
 * It basically OR's a flag for a single frame, allowing the ped to perform a super jump only when the flag is set.
 * Hash: 0x57FFF03E423A4C0B | ApiSet: undefined
 */
export function setSuperJumpThisFrame(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetSuperJumpThisFrame(_player);
}
/**
 * Hash: 0xAA391C728106F7AF | ApiSet: undefined
 */
export function setThisScriptCanBePaused(toggle) {
    SetThisScriptCanBePaused(toggle);
}
/**
 * Normally, blips can only be removed by the script or resource that created them. However, this native function allows a script to bypass this logic and remove blips from any script.
 * Hash: 0xB98236CAAECEF897 | ApiSet: undefined
 */
export function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle) {
    SetThisScriptCanRemoveBlipsCreatedByAnyScript(toggle);
}
/**
 * Hash: 0xD79185689F8FD5DF | ApiSet: undefined
 */
export function setStuntJumpsCanTrigger(toggle) {
    SetStuntJumpsCanTrigger(toggle);
}
/**
 * Immediately changes the game's weather to the specified type, which will then persist for one cycle before the game resumes its natural weather progression.
 * **Note:** This native is not supported in networked sessions. Please refer to [`SET_OVERRIDE_WEATHER`](#\_0xA43D5C6FE51ADBEF) or [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) if you want to override weather in networked sessions.
 * ```
 * NativeDB Introduced: v323
 * ```
 * <strong>Weather Types:</strong>
 * *   CLEAR
 * *   EXTRASUNNY
 * *   CLOUDS
 * *   OVERCAST
 * *   RAIN
 * *   CLEARING
 * *   THUNDER
 * *   SMOG
 * *   FOGGY
 * *   XMAS
 * *   SNOW
 * *   SNOWLIGHT
 * *   BLIZZARD
 * *   HALLOWEEN
 * *   NEUTRAL
 * *   RAIN_HALLOWEEN
 * *   SNOW_HALLOWEEN
 * Hash: 0x29B487C359E19889 | ApiSet: undefined
 */
export function setWeatherTypeNow(weatherType) {
    SetWeatherTypeNow(weatherType);
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0xED712CA327900C8A | ApiSet: undefined
 */
export function setWeatherTypeNowPersist(weatherType) {
    SetWeatherTypeNowPersist(weatherType);
}
/**
 * ```
 * Maximum value is 1.
 * At a value of 0 the game will still run at a minimum time scale.
 * Slow Motion 1: 0.6
 * Slow Motion 2: 0.4
 * Slow Motion 3: 0.2
 * ```
 * Hash: 0x1D408577D440E81E | ApiSet: undefined
 */
export function setTimeScale(timeScale) {
    SetTimeScale(timeScale);
}
/**
 * Using this native will clamp the wind speed value to a range of 0.0 - 12.0. The wind speed will stay persistent until it is reset (see examples).
 * Hash: 0xEE09ECEDBABE47FC | ApiSet: undefined
 */
export function setWindSpeed(speed) {
    SetWindSpeed(speed);
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * ```
 * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
 * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
 * ```
 * Hash: 0x578C752848ECFA0C | ApiSet: undefined
 */
export function setWeatherTypeTransition(weatherType1, weatherType2, percentWeather2) {
    if (typeof weatherType1 === 'string')
        weatherType1 = this.getHashKey(weatherType1);
    if (typeof weatherType2 === 'string')
        weatherType2 = this.getHashKey(weatherType2);
    SetWeatherTypeTransition(weatherType1, weatherType2, percentWeather2);
}
/**
 * Sets the current weather type to persist indefinitely until changed.
 * **Note:** This native is not supported in networked sessions. Please refer to [`SET_OVERRIDE_WEATHER`](#\_0xA43D5C6FE51ADBEF) or [`SET_WEATHER_TYPE_NOW_PERSIST`](#\_0xED712CA327900C8A) if you want to override weather in networked sessions.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x704983DF373B198F | ApiSet: undefined
 */
export function setWeatherTypePersist(weatherType) {
    SetWeatherTypePersist(weatherType);
}
/**
 * Refer to [`SET_WEATHER_TYPE_NOW`](#\_0x29B487C359E19889) for weather types.
 * Hash: 0xFB5045B7C42B75BF | ApiSet: undefined
 */
export function setWeatherTypeOvertimePersist(weatherType, time) {
    SetWeatherTypeOvertimePersist(weatherType, time);
}
/**
 * ```
 * NativeDB Added Parameter 19: Any p18
 * NativeDB Added Parameter 20: Any p19
 * NativeDB Added Parameter 21: Any p20
 * ```
 * Hash: 0xBFE5756E7407064A | ApiSet: undefined
 */
export function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, p16, p17) {
    const _ownerPed = ownerPed instanceof Ped ? ownerPed.handle() : ownerPed;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    ShootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, _ownerPed, isAudible, isInvisible, speed, _entity, p14, p15, p16, p17);
}
/**
 * Sets the the raw wind speed value. The wind speed will stay persistent until it is reset (see examples).
 * Hash: 0xAC3A74E8384A9919 | ApiSet: undefined
 */
export function setWind(speed) {
    SetWind(speed);
}
/**
 * Sets the wind direction. The wind direction will stay persistent until it is reset (see examples).
 * Hash: 0xEB0F4468467B4528 | ApiSet: undefined
 */
export function setWindDirection(direction) {
    SetWindDirection(direction);
}
/**
 * ```
 * Begins with START_*. Next character in the name is either D or E.
 * ```
 * Hash: 0x92790862E36C2ADA | ApiSet: undefined
 */
export function startBenchmarkRecording() {
    StartBenchmarkRecording();
}
/**
 * Shoots a bullet from the first vector to the second vector. The weapon used as weaponHash should already be loaded via REQUEST_WEAPON_ASSET, otherwise the bullet may fail to materialise.
 * Hash: 0x867654CBC7606F2C | ApiSet: undefined
 */
export function shootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, pureAccuracy, weaponHash, ownerPed, isAudible, isInvisible, speed) {
    const _ownerPed = ownerPed instanceof Ped ? ownerPed.handle() : ownerPed;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    ShootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, pureAccuracy, weaponHash, _ownerPed, isAudible, isInvisible, speed);
}
/**
 * ```
 * entity - entity to ignore
 * ```
 * ```
 * NativeDB Added Parameter 15: Any p14
 * ```
 * Hash: 0xE3A7742E0B7A2F8B | ApiSet: undefined
 */
export function shootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity) {
    const _ownerPed = ownerPed instanceof Ped ? ownerPed.handle() : ownerPed;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    ShootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, _ownerPed, isAudible, isInvisible, speed, _entity);
}
/**
 * This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
 * Hash: 0xF2F6A2FA49278625 | ApiSet: undefined
 */
export function slerpNearQuaternion(t, position, w, x1, y1, z1, w1) {
    return SlerpNearQuaternion(t, position.x, position.y, position.z, w, x1, y1, z1, w1);
}
/**
 * Hash: 0x60FE567DF1B1AF9D | ApiSet: undefined
 */
export function startSaveArrayWithSize(size, arrayName) {
    return StartSaveArrayWithSize(size, arrayName);
}
/**
 * Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
 * Hash: 0xD3D15555431AB793 | ApiSet: undefined
 */
export function shouldUseMetricMeasurements() {
    return ShouldUseMetricMeasurements();
}
/**
 * Hash: 0x04456F95153C6BE4 | ApiSet: undefined
 */
export function stopSaveArray() {
    StopSaveArray();
}
/**
 * Hash: 0xA9575F812C6A7997 | ApiSet: undefined
 */
export function startSaveData(p1, p2) {
    return StartSaveData(p1, p2);
}
/**
 * Hash: 0xBF737600CDDBEADD | ApiSet: undefined
 */
export function startSaveStructWithSize(size, structName) {
    return StartSaveStructWithSize(size, structName);
}
/**
 * ```
 * Begins with STOP_*. Next character in the name is either D or E.
 * ```
 * Hash: 0xC7DB36C24634F52B | ApiSet: undefined
 */
export function stopBenchmarkRecording() {
    StopBenchmarkRecording();
}
/**
 * ```
 * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
 * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
 * ```
 * Hash: 0x5A5F40FE637EB584 | ApiSet: undefined
 */
export function stringToInt(string) {
    return StringToInt(string);
}
/**
 * Hash: 0xEB1774DF12BB9F12 | ApiSet: undefined
 */
export function stopSaveStruct() {
    StopSaveStruct();
}
/**
 * Hash: 0x74E20C9145FB66FD | ApiSet: undefined
 */
export function stopSaveData() {
    StopSaveData();
}
/**
 * Suppresses or enables a specific type of random event for the current frame.
 * ```cpp
 * enum eEventType {
 * RC_PED_STEAL_VEHICLE = 0,
 * RC_PED_JAY_WALK_LIGHT = 1,
 * RC_COP_PURSUE = 2,
 * RC_COP_PURSUE_VEHICLE_FLEE_SPAWNED = 3,
 * RC_COP_VEHICLE_DRIVING_FAST = 4,
 * RC_COP_VEHICLE_DRIVING_SLOW = 5,
 * RC_DRIVER_RECKLESS = 6,
 * RC_DRIVER_PRO = 7,
 * RC_PED_PURSUE_WHEN_HIT_BY_CAR = 8
 * }
 * ```
 * Hash: 0x1EAE0A6E978894A2 | ApiSet: undefined
 */
export function supressRandomEventThisFrame(eventType, enable) {
    SupressRandomEventThisFrame(eventType, enable);
}
/**
 * Hash: 0x632106CC96E82E91 | ApiSet: undefined
 */
export function tan(p0) {
    return Tan(p0);
}
/**
 * Returns whether the In-Game Pause Menu Launched the Benchmark Tests.
 * Hash: 0xEA2F2061875EED90 | ApiSet: undefined
 */
export function uiStartedEndUserBenchmark() {
    return UiStartedEndUserBenchmark();
}
/**
 * For a full list, see [here](https://gist.github.com/4mmonium/f76f3ecef649ed275b260b433ea84494).
 * Hash: 0x9DC711BC69C548DF | ApiSet: undefined
 */
export function terminateAllScriptsWithThisName(scriptName) {
    TerminateAllScriptsWithThisName(scriptName);
}
/**
 * Enable/disable optional stunt camera.
 * ```
 * NativeDB Introduced: v757
 * ```
 * Hash: 0xFB80AB299D2EE1BD | ApiSet: undefined
 */
export function toggleShowOptionalStuntJumpCamera(toggle) {
    ToggleShowOptionalStuntJumpCamera(toggle);
}
/**
 * Returns the current state of the text input box.
 * ```cpp
 * enum eOSKStatus
 * {
 * OSK_INVALID = -1,
 * OSK_PENDING = 0,
 * OSK_SUCCESS = 1,
 * OSK_CANCELLED = 2,
 * OSK_FAILED = 3
 * };
 * ```
 * Hash: 0x0CF2B696BBF945AE | ApiSet: undefined
 */
export function updateOnscreenKeyboard() {
    return UpdateOnscreenKeyboard();
}
/**
 * ```
 * Called 4 times in the b617d scripts:
 * `MISC::_A74802FB8D0B7814("CONTRAILS", 0);`
 * ```
 * Hash: 0xA74802FB8D0B7814 | ApiSet: undefined
 */
export function unloadCloudHat(name, p1) {
    UnloadCloudHat(name, p1);
}
/**
 * Hash: 0xF14878FC50BEC6EE | ApiSet: undefined
 */
export function usingMissionCreator(toggle) {
    UsingMissionCreator(toggle);
}
/**
 * Hash: 0xA8434F1DFF41D6E7 | ApiSet: undefined
 */
export function waterOverrideFadeIn(p0) {
    WaterOverrideFadeIn(p0);
}
/**
 * Hash: 0x405591EC8FD9096D | ApiSet: undefined
 */
export function waterOverrideSetOceanwaveamplitude(amplitude) {
    WaterOverrideSetOceanwaveamplitude(amplitude);
}
/**
 * Hash: 0x31727907B2C43C55 | ApiSet: undefined
 */
export function waterOverrideSetOceannoiseminamplitude(minAmplitude) {
    WaterOverrideSetOceannoiseminamplitude(minAmplitude);
}
/**
 * Hash: 0xB3E6360DDE733E82 | ApiSet: undefined
 */
export function waterOverrideSetOceanwavemaxamplitude(maxAmplitude) {
    WaterOverrideSetOceanwavemaxamplitude(maxAmplitude);
}
/**
 * Hash: 0xF751B16FB32ABC1D | ApiSet: undefined
 */
export function waterOverrideSetOceanwaveminamplitude(minAmplitude) {
    WaterOverrideSetOceanwaveminamplitude(minAmplitude);
}
/**
 * Hash: 0xC3C221ADDDE31A11 | ApiSet: undefined
 */
export function waterOverrideFadeOut(p0) {
    WaterOverrideFadeOut(p0);
}
/**
 * Hash: 0x9F5E6BB6B34540DA | ApiSet: undefined
 */
export function waterOverrideSetRipplemaxbumpiness(maxBumpiness) {
    WaterOverrideSetRipplemaxbumpiness(maxBumpiness);
}
/**
 * Hash: 0x7C9C0B1EEB1F9072 | ApiSet: undefined
 */
export function waterOverrideSetRipplebumpiness(bumpiness) {
    WaterOverrideSetRipplebumpiness(bumpiness);
}
/**
 * Hash: 0xB9854DFDE0D833D6 | ApiSet: undefined
 */
export function waterOverrideSetRippledisturb(disturb) {
    WaterOverrideSetRippledisturb(disturb);
}
/**
 * Hash: 0xA7A1127490312C36 | ApiSet: undefined
 */
export function waterOverrideSetShorewavemaxamplitude(maxAmplitude) {
    WaterOverrideSetShorewavemaxamplitude(maxAmplitude);
}
/**
 * Hash: 0x6216B116083A7CB4 | ApiSet: undefined
 */
export function waterOverrideSetRippleminbumpiness(minBumpiness) {
    WaterOverrideSetRippleminbumpiness(minBumpiness);
}
/**
 * Hash: 0xB8F87EAD7533B176 | ApiSet: undefined
 */
export function waterOverrideSetShorewaveamplitude(amplitude) {
    WaterOverrideSetShorewaveamplitude(amplitude);
}
/**
 * ```
 * This seems to edit the water wave, intensity around your current location.
 * 0.0f = Normal
 * 1.0f = So Calm and Smooth, a boat will stay still.
 * 3.0f = Really Intense.
 * ```
 * Hash: 0xC54A08C85AE4D410 | ApiSet: undefined
 */
export function waterOverrideSetStrength(strength) {
    WaterOverrideSetStrength(strength);
}
/**
 * Hash: 0xC3EAD29AB273ECE8 | ApiSet: undefined
 */
export function waterOverrideSetShorewaveminamplitude(minAmplitude) {
    WaterOverrideSetShorewaveminamplitude(minAmplitude);
}
/**
 * Hash: 0x170910093218C8B9 | ApiSet: undefined
 */
export function _0x170910093218C8B9() {
    return Citizen.invokeNative('0x170910093218C8B9');
}
/**
 * Hash: 0x0395CB47B022E62C | ApiSet: undefined
 */
export function _0x0395CB47B022E62C() {
    return Citizen.invokeNative('0x0395CB47B022E62C');
}
/**
 * Hash: 0x613F125BA3BD2EB9 | ApiSet: undefined
 */
export function _0x613F125BA3BD2EB9() {
    return Citizen.invokeNative('0x613F125BA3BD2EB9');
}
/**
 * Hash: 0x72EB7BA9B69BF6AB | ApiSet: undefined
 */
export function _0x72EB7BA9B69BF6AB() {
    return Citizen.invokeNative('0x72EB7BA9B69BF6AB');
}
/**
 * Hash: 0x85F6C9ABA1DE2BCF | ApiSet: undefined
 */
export function _0x85F6C9ABA1DE2BCF() {
    return Citizen.invokeNative('0x85F6C9ABA1DE2BCF');
}
/**
 * ```
 * NET_GAMESERVER_*
 * Checks if the transaction status is equal to 3.
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x79EDAC677CA62F81 | ApiSet: undefined
 */
export function _0x79EDAC677CA62F81(transactionId) {
    return Citizen.invokeNative('0x79EDAC677CA62F81', transactionId);
}
/**
 * Hash: 0x357B152EF96C30B6 | ApiSet: undefined
 */
export function _0x357B152EF96C30B6() {
    return Citizen.invokeNative('0x357B152EF96C30B6');
}
/**
 * Hash: 0xC13C38E47EA5DF31 | ApiSet: undefined
 */
export function _0xC13C38E47EA5DF31() {
    return Citizen.invokeNative('0xC13C38E47EA5DF31');
}
/**
 * Hash: 0xE3E5A7C64CA2C6ED | ApiSet: undefined
 */
export function _0xE3E5A7C64CA2C6ED() {
    return Citizen.invokeNative('0xE3E5A7C64CA2C6ED');
}
/**
 * ```
 * NET_GAMESERVER_*
 * ```
 * Hash: 0x74A0FD0688F1EE45 | ApiSet: undefined
 */
export function _0x74A0FD0688F1EE45(p0) {
    return Citizen.invokeNative('0x74A0FD0688F1EE45', p0);
}
/**
 * ```
 * NET_GAMESERVER_*
 * Checks if the transaction status is equal to 1.
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0xC830417D630A50F9 | ApiSet: undefined
 */
export function _0xC830417D630A50F9(transactionId) {
    return Citizen.invokeNative('0xC830417D630A50F9', transactionId);
}
/**
 * ```
 * NativeDB Introduced: v372
 * ```
 * Hash: 0xFA336E7F40C0A0D0 | ApiSet: undefined
 */
export function netGameserverBasketDelete() {
    return NetGameserverBasketDelete();
}
/**
 * Hash: 0xE1A0450ED46A7812 | ApiSet: undefined
 */
export function netGameserverBasketApplyServerData(p0) {
    return NetGameserverBasketApplyServerData(p0);
}
/**
 * Hash: 0xF30980718C8ED876 | ApiSet: undefined
 */
export function netGameserverBasketAddItem(quantity) {
    return NetGameserverBasketAddItem(quantity);
}
/**
 * Hash: 0xA65568121DF2EA26 | ApiSet: undefined
 */
export function netGameserverBasketEnd() {
    return NetGameserverBasketEnd();
}
/**
 * Hash: 0x279F08B1A4B29B7E | ApiSet: undefined
 */
export function netGameserverBasketStart(categoryHash, actionHash, flags) {
    if (typeof categoryHash === 'string')
        categoryHash = this.getHashKey(categoryHash);
    if (typeof actionHash === 'string')
        actionHash = this.getHashKey(actionHash);
    return NetGameserverBasketStart(categoryHash, actionHash, flags);
}
/**
 * Hash: 0x27F76CC6C55AD30E | ApiSet: undefined
 */
export function netGameserverBasketIsFull() {
    return NetGameserverBasketIsFull();
}
/**
 * Hash: 0x39BE7CEA8D9CC8E6 | ApiSet: undefined
 */
export function netGameserverCheckoutStart(transactionId) {
    return NetGameserverCheckoutStart(transactionId);
}
/**
 * Hash: 0x3C5FD37B5499582E | ApiSet: undefined
 */
export function netGameserverBeginService(categoryHash, itemHash, actionTypeHash, value, flags) {
    if (typeof categoryHash === 'string')
        categoryHash = this.getHashKey(categoryHash);
    if (typeof itemHash === 'string')
        itemHash = this.getHashKey(itemHash);
    if (typeof actionTypeHash === 'string')
        actionTypeHash = this.getHashKey(actionTypeHash);
    return NetGameserverBeginService(categoryHash, itemHash, actionTypeHash, value, flags);
}
/**
 * Hash: 0x3C4487461E9B0DCB | ApiSet: undefined
 */
export function netGameserverCatalogIsReady() {
    return NetGameserverCatalogIsReady();
}
/**
 * Hash: 0xBD4D7EAF8A30F637 | ApiSet: undefined
 */
export function netGameserverCatalogItemExists(name) {
    return NetGameserverCatalogItemExists(name);
}
/**
 * Hash: 0x112CEF1615A1139F | ApiSet: undefined
 */
export function netGameserverDeleteSetTelemetryNonceSeed() {
    return NetGameserverDeleteSetTelemetryNonceSeed();
}
/**
 * Hash: 0x0A6D923DFFC9BD89 | ApiSet: undefined
 */
export function netGameserverDeleteCharacterSlotGetStatus() {
    return NetGameserverDeleteCharacterSlotGetStatus();
}
/**
 * Hash: 0x247F0F73A182EA0B | ApiSet: undefined
 */
export function netGameserverCatalogItemExistsHash(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return NetGameserverCatalogItemExistsHash(hash);
}
/**
 * Hash: 0x51F1A8E48C3D2F6D | ApiSet: undefined
 */
export function netGameserverDeleteCharacterSlot(slot, transfer, reason) {
    if (typeof reason === 'string')
        reason = this.getHashKey(reason);
    return NetGameserverDeleteCharacterSlot(slot, transfer, reason);
}
/**
 * Hash: 0xE2A99A9B524BEFFF | ApiSet: undefined
 */
export function netGameserverEndService(transactionId) {
    return NetGameserverEndService(transactionId);
}
/**
 * ```
 * Note: only one of the arguments can be set to true at a time
 * ```
 * Hash: 0x35A1B3E1D1315CFA | ApiSet: undefined
 */
export function netGameserverGetBalance(inventory, playerbalance) {
    return NetGameserverGetBalance(inventory, playerbalance);
}
/**
 * Hash: 0x810E8431C0614BF9 | ApiSet: undefined
 */
export function netGameserverIsSessionRefreshPending() {
    return NetGameserverIsSessionRefreshPending();
}
/**
 * Hash: 0xCF38DAFBB49EDE5E | ApiSet: undefined
 */
export function netGameserverGetCatalogState() {
    return NetGameserverGetCatalogState();
}
/**
 * ```
 * bool is always true in game scripts
 * ```
 * Hash: 0xC27009422FCCA88D | ApiSet: undefined
 */
export function netGameserverGetPrice(itemHash, categoryHash, p2) {
    if (typeof itemHash === 'string')
        itemHash = this.getHashKey(itemHash);
    if (typeof categoryHash === 'string')
        categoryHash = this.getHashKey(categoryHash);
    return NetGameserverGetPrice(itemHash, categoryHash, p2);
}
/**
 * Hash: 0x2B949A1E6AEC8F6A | ApiSet: undefined
 */
export function netGameserverIsCatalogValid() {
    return NetGameserverIsCatalogValid();
}
/**
 * Hash: 0x897433D292B44130 | ApiSet: undefined
 */
export function netGameserverGetTransactionManagerData() {
    return NetGameserverGetTransactionManagerData();
}
/**
 * Hash: 0xB24F0944DA203D9E | ApiSet: undefined
 */
export function netGameserverIsSessionValid(charSlot) {
    return NetGameserverIsSessionValid(charSlot);
}
/**
 * Hash: 0x2F41D51BA3BCD1F1 | ApiSet: undefined
 */
export function netGameserverSessionApplyReceivedData(charSlot) {
    return NetGameserverSessionApplyReceivedData(charSlot);
}
/**
 * Hash: 0x9507D4271988E1AE | ApiSet: undefined
 */
export function netGameserverSetTelemetryNonceSeed(p0) {
    return NetGameserverSetTelemetryNonceSeed(p0);
}
/**
 * Hash: 0xA135AC892A58FC07 | ApiSet: undefined
 */
export function netGameserverStartSession(charSlot) {
    return NetGameserverStartSession(charSlot);
}
/**
 * Hash: 0xD47A2C1BA117471D | ApiSet: undefined
 */
export function netGameserverTransferBankToWallet(charSlot, amount) {
    return NetGameserverTransferBankToWallet(charSlot, amount);
}
/**
 * ```
 * Same as 0x350AA5EBC03D3BD2
 * ```
 * Hash: 0x23789E777D14CE44 | ApiSet: undefined
 */
export function netGameserverTransferCashGetStatus() {
    return NetGameserverTransferCashGetStatus();
}
/**
 * ```
 * Same as 0x23789E777D14CE44
 * ```
 * Hash: 0x350AA5EBC03D3BD2 | ApiSet: undefined
 */
export function netGameserverTransferCashGetStatus2() {
    return NetGameserverTransferCashGetStatus2();
}
/**
 * ```
 * Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
 * ```
 * Hash: 0x498C1E05CE5F7877 | ApiSet: undefined
 */
export function netGameserverTransferCashSetTelemetryNonceSeed() {
    return NetGameserverTransferCashSetTelemetryNonceSeed();
}
/**
 * Hash: 0xC2F7FE5309181C7D | ApiSet: undefined
 */
export function netGameserverTransferWalletToBank(charSlot, amount) {
    return NetGameserverTransferWalletToBank(charSlot, amount);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x7D2708796355B20B | ApiSet: undefined
 */
export function netGameserverUseServerTransactions() {
    return NetGameserverUseServerTransactions();
}
/**
 * ```
 * Does nothing and always returns false.
 * ```
 * Hash: 0xE260E0BB9CD995AC | ApiSet: undefined
 */
export function depositVc(amount) {
    return DepositVc(amount);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x0DD362F14F18942A | ApiSet: undefined
 */
export function _0x0DD362F14F18942A(amount, p1, p2) {
    Citizen.invokeNative('0x0DD362F14F18942A', amount, p1, p2);
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Added Parameter 2: int p1
 * NativeDB Added Parameter 3: int amount
 * NativeDB Added Parameter 4: int* p3
 * ```
 * Hash: 0x9777734DAD16992F | ApiSet: undefined
 */
export function canPayGoon() {
    return CanPayGoon();
}
/**
 * ```
 * Returns false if amount > wallet balance or daily transfer limit has been hit.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x08E8EEADFD0DC4A0 | ApiSet: undefined
 */
export function _0x08E8EEADFD0DC4A0(amount) {
    return Citizen.invokeNative('0x08E8EEADFD0DC4A0', amount);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x226C284C830D0CA8 | ApiSet: undefined
 */
export function _0x226C284C830D0CA8(p0, p1, p2, p3) {
    Citizen.invokeNative('0x226C284C830D0CA8', p0, p1, p2, p3);
}
/**
 * Hash: 0x0D30EB83668E63C5 | ApiSet: undefined
 */
export function _0x0D30EB83668E63C5(p0, p1, p2, p3) {
    Citizen.invokeNative('0x0D30EB83668E63C5', p0, p1, p2, p3);
}
/**
 * Hash: 0x112209CE0290C03A | ApiSet: undefined
 */
export function _0x112209CE0290C03A(p0, p1, p2, p3) {
    Citizen.invokeNative('0x112209CE0290C03A', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x1DC9B749E7AE282B | ApiSet: undefined
 */
export function _0x1DC9B749E7AE282B(p0, p1, p2, p3) {
    Citizen.invokeNative('0x1DC9B749E7AE282B', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x2A93C46AAB1EACC9 | ApiSet: undefined
 */
export function _0x2A93C46AAB1EACC9(p0, p1, p2, p3) {
    Citizen.invokeNative('0x2A93C46AAB1EACC9', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x2A7CEC72C3443BCC | ApiSet: undefined
 */
export function _0x2A7CEC72C3443BCC(p0, p1, p2) {
    Citizen.invokeNative('0x2A7CEC72C3443BCC', p0, p1, p2);
}
/**
 * Hash: 0x2AFC2D19B50797F2 | ApiSet: undefined
 */
export function _0x2AFC2D19B50797F2(p0, p1, p2, p3) {
    Citizen.invokeNative('0x2AFC2D19B50797F2', p0, p1, p2, p3);
}
/**
 * Hash: 0x2FAB6614CE22E196 | ApiSet: undefined
 */
export function _0x2FAB6614CE22E196(p0, p1, p2, p3) {
    Citizen.invokeNative('0x2FAB6614CE22E196', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x4C3B75694F7E0D9C | ApiSet: undefined
 */
export function _0x4C3B75694F7E0D9C(p0, p1, p2) {
    Citizen.invokeNative('0x4C3B75694F7E0D9C', p0, p1, p2);
}
/**
 * Hash: 0x4128464231E3CA0B | ApiSet: undefined
 */
export function _0x4128464231E3CA0B(p0, p1, p2, p3) {
    Citizen.invokeNative('0x4128464231E3CA0B', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x31BA138F6304FB9F | ApiSet: undefined
 */
export function _0x31BA138F6304FB9F(p0, p1) {
    Citizen.invokeNative('0x31BA138F6304FB9F', p0, p1);
}
/**
 * Hash: 0x5F456788B05FAEAC | ApiSet: undefined
 */
export function _0x5F456788B05FAEAC(p0, p1, p2) {
    Citizen.invokeNative('0x5F456788B05FAEAC', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x5574637681911FDA | ApiSet: undefined
 */
export function _0x5574637681911FDA(p0, p1, p2, p3) {
    Citizen.invokeNative('0x5574637681911FDA', p0, p1, p2, p3);
}
/**
 * Hash: 0x55A1E095DB052FA5 | ApiSet: undefined
 */
export function _0x55A1E095DB052FA5(p0, p1) {
    Citizen.invokeNative('0x55A1E095DB052FA5', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x6B7E4FB50D5F3D65 | ApiSet: undefined
 */
export function _0x6B7E4FB50D5F3D65(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0x6B7E4FB50D5F3D65', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x675D19C6067CAE08 | ApiSet: undefined
 */
export function _0x675D19C6067CAE08(p0, p1, p2, p3) {
    Citizen.invokeNative('0x675D19C6067CAE08', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x65482BFD0923C8A1 | ApiSet: undefined
 */
export function _0x65482BFD0923C8A1(p0, p1, p2, p3, p4, p5) {
    Citizen.invokeNative('0x65482BFD0923C8A1', p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x69EF772B192614C1 | ApiSet: undefined
 */
export function _0x69EF772B192614C1(p0, p1, p2, p3) {
    Citizen.invokeNative('0x69EF772B192614C1', p0, p1, p2, p3);
}
/**
 * Hash: 0x7C4FCCD2E4DEB394 | ApiSet: undefined
 */
export function _0x7C4FCCD2E4DEB394() {
    return Citizen.invokeNative('0x7C4FCCD2E4DEB394');
}
/**
 * ```
 * This function is hard-coded to always return 1.
 * ```
 * Hash: 0x6FCF8DDEA146C45B | ApiSet: undefined
 */
export function _0x6FCF8DDEA146C45B(p0) {
    return Citizen.invokeNative('0x6FCF8DDEA146C45B', p0);
}
/**
 * Hash: 0x6FD97159FE3C971A | ApiSet: undefined
 */
export function _0x6FD97159FE3C971A(p0, p1, p2, p3) {
    Citizen.invokeNative('0x6FD97159FE3C971A', p0, p1, p2, p3);
}
/**
 * Hash: 0x8E243837643D9583 | ApiSet: undefined
 */
export function _0x8E243837643D9583(p0, p1, p2, p3) {
    Citizen.invokeNative('0x8E243837643D9583', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xA51338E0DCCD4065 | ApiSet: undefined
 */
export function _0xA51338E0DCCD4065(p0, p1, p2) {
    Citizen.invokeNative('0xA51338E0DCCD4065', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x90CD7C6871FBF1B4 | ApiSet: undefined
 */
export function _0x90CD7C6871FBF1B4(p0, p1, p2, p3) {
    Citizen.invokeNative('0x90CD7C6871FBF1B4', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x870289A558348378 | ApiSet: undefined
 */
export function _0x870289A558348378(p0, p1, p2, p3) {
    Citizen.invokeNative('0x870289A558348378', p0, p1, p2, p3);
}
/**
 * ```
 * Hardcoded to return 0.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x9B5016A6433A68C5 | ApiSet: undefined
 */
export function _0x9B5016A6433A68C5() {
    return Citizen.invokeNative('0x9B5016A6433A68C5');
}
/**
 * Hash: 0xA95F667A755725DA | ApiSet: undefined
 */
export function _0xA95F667A755725DA(p0, p1, p2, p3) {
    Citizen.invokeNative('0xA95F667A755725DA', p0, p1, p2, p3);
}
/**
 * Hash: 0x998E18CEB44487FC | ApiSet: undefined
 */
export function _0x998E18CEB44487FC(p0, p1, p2, p3) {
    Citizen.invokeNative('0x998E18CEB44487FC', p0, p1, p2, p3);
}
/**
 * Hash: 0xA51B086B0B2C0F7A | ApiSet: undefined
 */
export function _0xA51B086B0B2C0F7A(p0, p1, p2, p3) {
    Citizen.invokeNative('0xA51B086B0B2C0F7A', p0, p1, p2, p3);
}
/**
 * Hash: 0xBD0EFB25CCA8F97A | ApiSet: undefined
 */
export function _0xBD0EFB25CCA8F97A(p0, p1, p2, p3) {
    Citizen.invokeNative('0xBD0EFB25CCA8F97A', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xA95CFB4E02390842 | ApiSet: undefined
 */
export function _0xA95CFB4E02390842(p0, p1, p2) {
    Citizen.invokeNative('0xA95CFB4E02390842', p0, p1, p2);
}
/**
 * Hash: 0xB4C2EC463672474E | ApiSet: undefined
 */
export function _0xB4C2EC463672474E(p0, p1, p2, p3) {
    Citizen.invokeNative('0xB4C2EC463672474E', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xB4DEAE67F35E2ACD | ApiSet: undefined
 */
export function _0xB4DEAE67F35E2ACD(p0) {
    Citizen.invokeNative('0xB4DEAE67F35E2ACD', p0);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xD29334ED1A256DBF | ApiSet: undefined
 */
export function _0xD29334ED1A256DBF(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0xD29334ED1A256DBF', p0, p1, p2, p3, p4);
}
/**
 * ```
 * Does nothing (it's a nullsub).
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xCD0F5B5D932AE473 | ApiSet: undefined
 */
export function _0xCD0F5B5D932AE473() {
    Citizen.invokeNative('0xCD0F5B5D932AE473');
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xC6E74CF8C884C880 | ApiSet: undefined
 */
export function _0xC6E74CF8C884C880(p0, p1, p2, p3, p4, p5, p6) {
    Citizen.invokeNative('0xC6E74CF8C884C880', p0, p1, p2, p3, p4, p5, p6);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xDE68E30D89F97132 | ApiSet: undefined
 */
export function _0xDE68E30D89F97132(amount, p1) {
    Citizen.invokeNative('0xDE68E30D89F97132', amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xE0F82D68C7039158 | ApiSet: undefined
 */
export function _0xE0F82D68C7039158(p0) {
    Citizen.invokeNative('0xE0F82D68C7039158', p0);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xB5B58E24868CB09E | ApiSet: undefined
 */
export function _0xB5B58E24868CB09E(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0xB5B58E24868CB09E', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xE23ADC6FCB1F29AE | ApiSet: undefined
 */
export function _0xE23ADC6FCB1F29AE(p0, p1, p2) {
    Citizen.invokeNative('0xE23ADC6FCB1F29AE', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xCD4D66B43B1DD28D | ApiSet: undefined
 */
export function _0xCD4D66B43B1DD28D(p0, p1, p2) {
    Citizen.invokeNative('0xCD4D66B43B1DD28D', p0, p1, p2);
}
/**
 * Hash: 0xED5FD7AF10F5E262 | ApiSet: undefined
 */
export function _0xED5FD7AF10F5E262(p0, p1, p2, p3) {
    Citizen.invokeNative('0xED5FD7AF10F5E262', p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xE2BB399D90942091 | ApiSet: undefined
 */
export function _0xE2BB399D90942091(p0, p1) {
    Citizen.invokeNative('0xE2BB399D90942091', p0, p1);
}
/**
 * ```
 * This function is hard-coded to always return 1.
 * ```
 * Hash: 0xE154B48B68EF72BC | ApiSet: undefined
 */
export function _0xE154B48B68EF72BC(p0) {
    return Citizen.invokeNative('0xE154B48B68EF72BC', p0);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xED76D195E6E3BF7F | ApiSet: undefined
 */
export function _0xED76D195E6E3BF7F(p0, p1, p2, p3) {
    Citizen.invokeNative('0xED76D195E6E3BF7F', p0, p1, p2, p3);
}
/**
 * Hash: 0xFA07759E6FDDD7CF | ApiSet: undefined
 */
export function _0xFA07759E6FDDD7CF(p0, p1, p2, p3) {
    Citizen.invokeNative('0xFA07759E6FDDD7CF', p0, p1, p2, p3);
}
/**
 * ```
 * p1 = 0 (always)
 * p2 = 1 (always)
 * ```
 * Hash: 0x763B4BD305338F19 | ApiSet: undefined
 */
export function networkBuyAirstrike(cost, p1, p2) {
    NetworkBuyAirstrike(cost, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xA3EDDAA42411D3B9 | ApiSet: undefined
 */
export function networkBuyBackupGang(p0, p1, p2, p3) {
    NetworkBuyBackupGang(p0, p1, p2, p3);
}
/**
 * Hash: 0x30FD873ECE50E9F6 | ApiSet: undefined
 */
export function networkBuyContraband(p0, p1, p2, p3, p4) {
    if (typeof p2 === 'string')
        p2 = this.getHashKey(p2);
    NetworkBuyContraband(p0, p1, p2, p3, p4);
}
/**
 * ```
 * p1 is just an assumption. p2 was false and p3 was true.
 * ```
 * Hash: 0x7B718E197453F2D9 | ApiSet: undefined
 */
export function networkBuyBounty(amount, victim, p2, p3) {
    const _victim = victim instanceof Entity ? victim.remoteId() : victim;
    NetworkBuyBounty(amount, _victim, p2, p3);
}
/**
 * ```
 * p1 = 0 (always)
 * p2 = 1 (always)
 * ```
 * Hash: 0x81AA4610E3FD3A69 | ApiSet: undefined
 */
export function networkBuyHeliStrike(cost, p1, p2) {
    NetworkBuyHeliStrike(cost, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xE2E244AB823B4483 | ApiSet: undefined
 */
export function _0xE2E244AB823B4483(amount, p1) {
    Citizen.invokeNative('0xE2E244AB823B4483', amount, p1);
}
/**
 * Hash: 0xF0077C797F66A355 | ApiSet: undefined
 */
export function networkBuyItem(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9) {
    if (typeof item === 'string')
        item = this.getHashKey(item);
    NetworkBuyItem(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9);
}
/**
 * Hash: 0x650A08A280870AF6 | ApiSet: undefined
 */
export function networkBuyProperty(propertyCost, propertyName, p2, p3) {
    if (typeof propertyName === 'string')
        propertyName = this.getHashKey(propertyName);
    NetworkBuyProperty(propertyCost, propertyName, p2, p3);
}
/**
 * ```
 * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
 * The last 3 parameters are,
 * 2,0,1 in the am_ferriswheel.c
 * 1,0,1 in the am_rollercoaster.c
 * ```
 * Hash: 0x8A7B3952DD64D2B5 | ApiSet: undefined
 */
export function networkBuyFairgroundRide(amountSpent, p1, p2, p3) {
    NetworkBuyFairgroundRide(amountSpent, p1, p2, p3);
}
/**
 * Hash: 0xD9B067E55253E3DD | ApiSet: undefined
 */
export function networkBuyHealthcare(cost, p1, p2) {
    NetworkBuyHealthcare(cost, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x75AF80E61248EEBD | ApiSet: undefined
 */
export function networkBuySmokes(p0, p1, p2) {
    NetworkBuySmokes(p0, p1, p2);
}
/**
 * Hash: 0x1C2473301B1C66BA | ApiSet: undefined
 */
export function networkCanShareJobCash() {
    return NetworkCanShareJobCash();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xC62DD18375C99130 | ApiSet: undefined
 */
export function networkCanBuyLotteryTicket(cost) {
    return NetworkCanBuyLotteryTicket(cost);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xD987F2489969668C | ApiSet: undefined
 */
export function networkBuyLotteryTicket(p0, p1, p2, p3) {
    NetworkBuyLotteryTicket(p0, p1, p2, p3);
}
/**
 * Hash: 0x5D17BE59D2123284 | ApiSet: undefined
 */
export function networkCanReceivePlayerCash(p0, p1, p2, p3) {
    return NetworkCanReceivePlayerCash(p0, p1, p2, p3);
}
/**
 * Hash: 0x3A54E33660DED67F | ApiSet: undefined
 */
export function networkCanBet(amount) {
    return NetworkCanBet(amount);
}
/**
 * NETWORK_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xF62F6D9528358FE4 | ApiSet: undefined
 */
export function networkCasinoCanGamble(p0) {
    return NetworkCasinoCanGamble(p0);
}
/**
 * ```
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0xAB3CAA6B422164DA | ApiSet: undefined
 */
export function networkCanSpendMoney(p0, p1, p2, p3, p4) {
    return NetworkCanSpendMoney(p0, p1, p2, p3, p4);
}
/**
 * NETWORK_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xED44897CB336F480 | ApiSet: undefined
 */
export function networkCasinoSellChips(p0, p1) {
    return NetworkCasinoSellChips(p0, p1);
}
/**
 * NETWORK_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x3BD101471C7F9EEC | ApiSet: undefined
 */
export function networkCasinoPurchaseChips(p0, p1) {
    return NetworkCasinoPurchaseChips(p0, p1);
}
/**
 * Same as 0x8968D4D8C6C40C11.
 * NETWORK_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x394DCDB9E836B7A9 | ApiSet: undefined
 */
export function networkCasinoCanPurchaseChipsWithPvc() {
    return NetworkCasinoCanPurchaseChipsWithPvc();
}
/**
 * ```
 * NETWORK_CAN_R??? or NETWORK_CAN_S???
 * ```
 * ```
 * NativeDB Added Parameter 7: Any p6
 * ```
 * Hash: 0x7303E27CC6532080 | ApiSet: undefined
 */
export function networkCanSpendMoney2(p0, p1, p2, p3, p5) {
    return NetworkCanSpendMoney2(p0, p1, p2, p3, p5);
}
/**
 * ```
 * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
 * ```
 * Hash: 0x05A50AF38947EB8D | ApiSet: undefined
 */
export function networkDeleteCharacter(characterSlot, p1, p2) {
    NetworkDeleteCharacter(characterSlot, p1, p2);
}
/**
 * GTAO_CASINO_HOUSE
 * GTAO_CASINO_INSIDETRACK
 * GTAO_CASINO_LUCKYWHEEL
 * GTAO_CASINO_BLACKJACK
 * GTAO_CASINO_ROULETTE
 * GTAO_CASINO_SLOTS
 * GTAO_CASINO_PURCHASE_CHIPS
 * NETWORK_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x158C16F5E4CF41F8 | ApiSet: undefined
 */
export function networkCasinoCanUseGamblingType(hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return NetworkCasinoCanUseGamblingType(hash);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x18B7AE224B087E26 | ApiSet: undefined
 */
export function networkDeductCash(amount, p1, p2, p3, p4, p5) {
    NetworkDeductCash(amount, p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xF6B170F9A02E9E87 | ApiSet: undefined
 */
export function networkEarnBountyHunterReward(p0) {
    NetworkEarnBountyHunterReward(p0);
}
/**
 * Same as 0x394DCDB9E836B7A9.
 * NETWORK_C\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x8968D4D8C6C40C11 | ApiSet: undefined
 */
export function networkCasinoCanPurchaseChipsWithPvc2() {
    return NetworkCasinoCanPurchaseChipsWithPvc2();
}
/**
 * Hash: 0xA921DED15FDF28F5 | ApiSet: undefined
 */
export function networkClearCharacterWallet(characterSlot) {
    NetworkClearCharacterWallet(characterSlot);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xFFFBA1B1F7C0B6F4 | ApiSet: undefined
 */
export function networkEarnFmbbWageBonus(p0) {
    NetworkEarnFmbbWageBonus(p0);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x72E7C7B9615FA3C3 | ApiSet: undefined
 */
export function networkEarnCasinoHeist(p0, p1, p2, p3, p4, p5, p6) {
    NetworkEarnCasinoHeist(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * ```
 * Example for p1: "AM_DISTRACT_COPS"
 * ```
 * Hash: 0xFB6DB092FBAE29E6 | ApiSet: undefined
 */
export function networkEarnFromAmbientJob(p0, p1) {
    return NetworkEarnFromAmbientJob(p0, p1);
}
/**
 * Hash: 0x0CB1BE0633C024A8 | ApiSet: undefined
 */
export function networkEarnBossAgency(p0, p1, p2, p3) {
    NetworkEarnBossAgency(p0, p1, p2, p3);
}
/**
 * Hash: 0x08B0CA7A6AB3AC32 | ApiSet: undefined
 */
export function networkEarnBoss(p0, p1, p2) {
    NetworkEarnBoss(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x631F1CB8FB4130AA | ApiSet: undefined
 */
export function networkEarnFromArenaWar(amount, p1, p2, p3) {
    NetworkEarnFromArenaWar(amount, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x5C9B198AF5A54FA6 | ApiSet: undefined
 */
export function networkEarnCollectableCompletedCollection(amount, p1) {
    NetworkEarnCollectableCompletedCollection(amount, p1);
}
/**
 * ```
 * DSPORT
 * ```
 * Hash: 0x515B4A22E4D3C6D7 | ApiSet: undefined
 */
export function networkEarnFromAiTargetKill(p0, p1) {
    NetworkEarnFromAiTargetKill(p0, p1);
}
/**
 * ```
 * For the money bags that drop a max of $40,000. Often called 40k bags.
 * Most likely NETWORK_EARN_FROM_ROB***
 * ```
 * Hash: 0xF514621E8EA463D0 | ApiSet: undefined
 */
export function networkEarnFromArmourTruck(amount) {
    NetworkEarnFromArmourTruck(amount);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x0F99F70C61F14619 | ApiSet: undefined
 */
export function networkEarnFromArenaCareerProgression(amount, p1) {
    NetworkEarnFromArenaCareerProgression(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xE08256F972C7BB2C | ApiSet: undefined
 */
export function networkEarnFromArenaSkillLevelProgression(amount, p1) {
    NetworkEarnFromArenaSkillLevelProgression(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x5E7AE8AABE8B7C0D | ApiSet: undefined
 */
export function networkEarnFromAssassinateTargetKilled2(amount) {
    NetworkEarnFromAssassinateTargetKilled2(amount);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xFA700D8A9905F78A | ApiSet: undefined
 */
export function networkEarnFromAssassinateTargetKilled(amount) {
    NetworkEarnFromAssassinateTargetKilled(amount);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x3EC7471E6909798A | ApiSet: undefined
 */
export function networkEarnCasinoHeistBonus(p0, p1, p2, p3, p4) {
    NetworkEarnCasinoHeistBonus(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xC66D1CF99ED7FE25 | ApiSet: undefined
 */
export function networkEarnFromAutoshopIncome(p0) {
    NetworkEarnFromAutoshopIncome(p0);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x36A7FD5A7194B03E | ApiSet: undefined
 */
export function networkEarnFromAutoshopBusiness(p0, p1) {
    NetworkEarnFromAutoshopBusiness(p0, p1);
}
/**
 * Hash: 0x61326EE6DF15B0CA | ApiSet: undefined
 */
export function networkEarnFromBendJob(amount, heistHash) {
    NetworkEarnFromBendJob(amount, heistHash);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xA82959062361B259 | ApiSet: undefined
 */
export function networkEarnFromBbEventCargo(amount) {
    NetworkEarnFromBbEventCargo(amount);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x71BEC32FA466E105 | ApiSet: undefined
 */
export function networkEarnFromBikerIncome(p0) {
    NetworkEarnFromBikerIncome(p0);
}
/**
 * Hash: 0x131BB5DA15453ACF | ApiSet: undefined
 */
export function networkEarnFromBounty(amount, p3) {
    return NetworkEarnFromBounty(amount, p3);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x2C5809EB9DF57257 | ApiSet: undefined
 */
export function networkEarnFromBikeShopBusiness(p0, p1) {
    NetworkEarnFromBikeShopBusiness(p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xFDD8D2440DAF1590 | ApiSet: undefined
 */
export function networkEarnFromBbEventBonus(amount) {
    NetworkEarnFromBbEventBonus(amount);
}
/**
 * Hash: 0x8586789730B10CAF | ApiSet: undefined
 */
export function networkEarnFromBusinessProduct(amount, p1, p2, p3) {
    NetworkEarnFromBusinessProduct(amount, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x42FCE14F50F27291 | ApiSet: undefined
 */
export function networkEarnFromBusinessBattle(p0) {
    NetworkEarnFromBusinessBattle(p0);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x59498BC8B1C8B15C | ApiSet: undefined
 */
export function networkEarnFromBusinessHubSource(p0, p1, p2, p3) {
    NetworkEarnFromBusinessHubSource(p0, p1, p2, p3);
}
/**
 * Hash: 0x827A5BA1A44ACA6D | ApiSet: undefined
 */
export function networkEarnFromBetting(amount, p1) {
    NetworkEarnFromBetting(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x0B39CF0D53F1C883 | ApiSet: undefined
 */
export function networkEarnFromBusinessHubSell(p0, p1, p2) {
    NetworkEarnFromBusinessHubSell(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xEFE9C9A1651B81E6 | ApiSet: undefined
 */
export function networkEarnFromCashingOut(amount) {
    NetworkEarnFromCashingOut(amount);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xBC6227792A188E2E | ApiSet: undefined
 */
export function networkEarnFromCarclubMembership(p0) {
    NetworkEarnFromCarclubMembership(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x09E8F18641BE2575 | ApiSet: undefined
 */
export function networkEarnFromCasinoMissionParticipation(amount) {
    NetworkEarnFromCasinoMissionParticipation(amount);
}
/**
 * Hash: 0x2B171E6B2F64D8DF | ApiSet: undefined
 */
export function networkEarnFromChallengeWin(p0, p2) {
    return NetworkEarnFromChallengeWin(p0, p2);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x566FD402B25787DE | ApiSet: undefined
 */
export function networkEarnFromCasinoMissionReward(amount) {
    NetworkEarnFromCasinoMissionReward(amount);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x973A9781A34F8DEB | ApiSet: undefined
 */
export function networkEarnFromCasinoAward(amount, hash) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    NetworkEarnFromCasinoAward(amount, hash);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xA75EAC69F59E96E7 | ApiSet: undefined
 */
export function networkEarnFromClubManagementParticipation(p0) {
    NetworkEarnFromClubManagementParticipation(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x5517F90043466049 | ApiSet: undefined
 */
export function networkEarnFromCollectablesActionFigures(amount) {
    NetworkEarnFromCollectablesActionFigures(amount);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xAC95ED552157E092 | ApiSet: undefined
 */
export function networkEarnFromCasinoStoryMissionReward(amount) {
    NetworkEarnFromCasinoStoryMissionReward(amount);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x83AD64F53F4E9483 | ApiSet: undefined
 */
export function networkEarnFromCompleteCollection(amount) {
    NetworkEarnFromCompleteCollection(amount);
}
/**
 * Hash: 0xB1CC1B9EC3007A2A | ApiSet: undefined
 */
export function networkEarnFromCrateDrop(amount) {
    NetworkEarnFromCrateDrop(amount);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x84FF63BD4966F33D | ApiSet: undefined
 */
export function networkEarnFromCollectionItem(amount, p1) {
    NetworkEarnFromCollectionItem(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x5128DF14A5BB86FC | ApiSet: undefined
 */
export function networkEarnFromDailyObjectiveEvent(amount) {
    NetworkEarnFromDailyObjectiveEvent(amount);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xCAC672087B4A24AB | ApiSet: undefined
 */
export function networkEarnFromDarChallenge(amount, p1) {
    NetworkEarnFromDarChallenge(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xFA009A62990671D4 | ApiSet: undefined
 */
export function networkEarnFromCriminalMastermindBonus(p0, p1, p2) {
    NetworkEarnFromCriminalMastermindBonus(p0, p1, p2);
}
/**
 * Hash: 0xECA658CE2A4E5A72 | ApiSet: undefined
 */
export function networkEarnFromContraband(amount, p1) {
    NetworkEarnFromContraband(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x1FDA0AA679C9919B | ApiSet: undefined
 */
export function networkEarnFromFmbbBossWork(p0) {
    NetworkEarnFromFmbbBossWork(p0);
}
/**
 * Hash: 0x6EA318C91C1A8786 | ApiSet: undefined
 */
export function networkEarnFromDailyObjectives(p0, p1, p2) {
    NetworkEarnFromDailyObjectives(p0, p1, p2);
}
/**
 * Hash: 0x84C0116D012E8FC2 | ApiSet: undefined
 */
export function networkEarnFromDestroyingContraband(p0) {
    NetworkEarnFromDestroyingContraband(p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x128A747F4A230952 | ApiSet: undefined
 */
export function networkEarnFromDoomsdayFinaleBonus(amount, vehicleHash) {
    if (typeof vehicleHash === 'string')
        vehicleHash = this.getHashKey(vehicleHash);
    NetworkEarnFromDoomsdayFinaleBonus(amount, vehicleHash);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xA9A31475F530DFDA | ApiSet: undefined
 */
export function networkEarnFromGangopsAwards(amount, unk, p2) {
    NetworkEarnFromGangopsAwards(amount, unk, p2);
}
/**
 * Hash: 0xA03D4ACE0A3284CE | ApiSet: undefined
 */
export function networkEarnFromGangPickup(amount) {
    NetworkEarnFromGangPickup(amount);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xC5156361F26E2212 | ApiSet: undefined
 */
export function networkEarnFromFmbbPhonecallMission(p0) {
    NetworkEarnFromFmbbPhonecallMission(p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xA9160796D47A2CF8 | ApiSet: undefined
 */
export function networkEarnFromGangopsJobsSetup(amount, unk) {
    NetworkEarnFromGangopsJobsSetup(amount, unk);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xED26584F6BDCBBFD | ApiSet: undefined
 */
export function networkEarnFromGangopsJobsPrepParticipation(amount) {
    NetworkEarnFromGangopsJobsPrepParticipation(amount);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x2597A0D4A4FC2C77 | ApiSet: undefined
 */
export function networkEarnFromGangopsElite(amount, unk, actIndex) {
    NetworkEarnFromGangopsElite(amount, unk, actIndex);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x1C121FC9545E0D52 | ApiSet: undefined
 */
export function networkEarnFromGangopsJobsFinale(amount, unk) {
    NetworkEarnFromGangopsJobsFinale(amount, unk);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x15BB2A5C757EB91F | ApiSet: undefined
 */
export function networkEarnFromGangopsWagesBonus(amount, p1) {
    NetworkEarnFromGangopsWagesBonus(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x2DCB19ABAB0380A8 | ApiSet: undefined
 */
export function networkEarnFromGangopsWages(amount, p1) {
    NetworkEarnFromGangopsWages(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xE8815FE993896AD3 | ApiSet: undefined
 */
export function networkEarnFromHackerTruckMission(p0, amount, p2, p3) {
    NetworkEarnFromHackerTruckMission(p0, amount, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xDEBBF584665411D0 | ApiSet: undefined
 */
export function networkEarnFromJobX2(amount, p1) {
    NetworkEarnFromJobX2(amount, p1);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x6816FB4416760775 | ApiSet: undefined
 */
export function networkEarnFromJobBonus(p0) {
    return NetworkEarnFromJobBonus(p0);
}
/**
 * Hash: 0xB2CC4836834E8A98 | ApiSet: undefined
 */
export function networkEarnFromJob(amount, p1) {
    NetworkEarnFromJob(amount, p1);
}
/**
 * Hash: 0x4337511FA8221D36 | ApiSet: undefined
 */
export function networkEarnFromNotBadsport(amount) {
    NetworkEarnFromNotBadsport(amount);
}
/**
 * Hash: 0x3F4D00167E41E0AD | ApiSet: undefined
 */
export function networkEarnFromPersonalVehicle(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    NetworkEarnFromPersonalVehicle(p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
/**
 * Hash: 0x45B8154E077D9E4D | ApiSet: undefined
 */
export function networkEarnFromHoldups(amount) {
    NetworkEarnFromHoldups(amount);
}
/**
 * Hash: 0xC8407624CEF2354B | ApiSet: undefined
 */
export function networkEarnFromPremiumJob(amount, p1) {
    NetworkEarnFromPremiumJob(amount, p1);
}
/**
 * Hash: 0xF92A014A634442D6 | ApiSet: undefined
 */
export function networkEarnFromImportExport(amount, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    NetworkEarnFromImportExport(amount, modelHash);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x7A5349B773584675 | ApiSet: undefined
 */
export function networkEarnFromRdrBonus(amount, p1) {
    NetworkEarnFromRdrBonus(amount, p1);
}
/**
 * Hash: 0x849648349D77F5C5 | ApiSet: undefined
 */
export function networkEarnFromProperty(amount, propertyName) {
    if (typeof propertyName === 'string')
        propertyName = this.getHashKey(propertyName);
    NetworkEarnFromProperty(amount, propertyName);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xDFF49EE984E7AAE8 | ApiSet: undefined
 */
export function networkEarnFromRcTimeTrial(amount) {
    NetworkEarnFromRcTimeTrial(amount);
}
/**
 * Hash: 0xED1517D3AF17C698 | ApiSet: undefined
 */
export function networkEarnFromPickup(amount) {
    NetworkEarnFromPickup(amount);
}
/**
 * Hash: 0x9251B6ABF2D0A5B4 | ApiSet: undefined
 */
export function networkEarnFromSellBunker(amount, bunkerHash) {
    if (typeof bunkerHash === 'string')
        bunkerHash = this.getHashKey(bunkerHash);
    NetworkEarnFromSellBunker(amount, bunkerHash);
}
/**
 * Hash: 0x02CE1D6AC0FC73EA | ApiSet: undefined
 */
export function networkEarnFromRockstar(amount) {
    NetworkEarnFromRockstar(amount);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * NativeDB Added Parameter 3: Any p2
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x8BCB27A057DF7B7F | ApiSet: undefined
 */
export function networkEarnFromSellingVehicle(amount) {
    NetworkEarnFromSellingVehicle(amount);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x45087AE480B233AC | ApiSet: undefined
 */
export function networkEarnFromSightseeing(p0, p1, p2, p3) {
    NetworkEarnFromSightseeing(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x0E1E2FF3F4EC11AA | ApiSet: undefined
 */
export function networkEarnFromSellBase(amount, baseNameHash) {
    if (typeof baseNameHash === 'string')
        baseNameHash = this.getHashKey(baseNameHash);
    NetworkEarnFromSellBase(amount, baseNameHash);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x676C48776CACBB5A | ApiSet: undefined
 */
export function networkEarnFromSpinTheWheelCash(amount) {
    NetworkEarnFromSpinTheWheelCash(amount);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xDEE612F2D71B0308 | ApiSet: undefined
 */
export function networkEarnFromSmuggling(amount, p1, p2, p3) {
    NetworkEarnFromSmuggling(amount, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xB846F547D3792DF6 | ApiSet: undefined
 */
export function networkEarnFromTunerAward(p0, p1, p2) {
    NetworkEarnFromTunerAward(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x5B669CF2299A271F | ApiSet: undefined
 */
export function networkEarnFromTargetRefund(amount, p1) {
    NetworkEarnFromTargetRefund(amount, p1);
}
/**
 * Hash: 0xB539BD8A4C1EECF8 | ApiSet: undefined
 */
export function networkEarnFromVehicle(p0, p1, p2, p3, p4, p5, p6, p7) {
    NetworkEarnFromVehicle(p0, p1, p2, p3, p4, p5, p6, p7);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xBCB266247193AC61 | ApiSet: undefined
 */
export function networkEarnFromTunerFinale(p0, p1, p2, p3, p4) {
    NetworkEarnFromTunerFinale(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xEDEAD9A91EC768B3 | ApiSet: undefined
 */
export function networkEarnFromVehicleExport(amount, p1, p2) {
    NetworkEarnFromVehicleExport(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x533073E8A596008C | ApiSet: undefined
 */
export function networkEarnFromVehicleAutoshop(p0, p1) {
    NetworkEarnFromVehicleAutoshop(p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x005ACA7100BD101D | ApiSet: undefined
 */
export function networkEarnFromWagePaymentBonus(amount) {
    NetworkEarnFromWagePaymentBonus(amount);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x0819DB99FD2FBBD8 | ApiSet: undefined
 */
export function networkEarnFromTimeTrialWin(amount) {
    NetworkEarnFromTimeTrialWin(amount);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x35F8DA0E8A31EF1B | ApiSet: undefined
 */
export function networkEarnFromWagePayment(amount) {
    NetworkEarnFromWagePayment(amount);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xC10322A8D3E061EE | ApiSet: undefined
 */
export function networkEarnFromUpgradeAutoshopLocation(p0, p1) {
    NetworkEarnFromUpgradeAutoshopLocation(p0, p1);
}
/**
 * Hash: 0xCDA1C62BE2777802 | ApiSet: undefined
 */
export function networkEarnGoon(p0, p1, p2) {
    NetworkEarnGoon(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xFE65AFE7308E32B2 | ApiSet: undefined
 */
export function networkEarnFromVehicleAutoshopBonus(p0) {
    NetworkEarnFromVehicleAutoshopBonus(p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xD21D111C46BA9F15 | ApiSet: undefined
 */
export function networkEarnIslandHeist(p0, p1, p2, p3, p4, p5) {
    NetworkEarnIslandHeist(p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xFB2456B2040A6A67 | ApiSet: undefined
 */
export function networkGetIsHighEarner() {
    return NetworkGetIsHighEarner();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x5D1E75F91C07DEE5 | ApiSet: undefined
 */
export function networkGetEvcBalance() {
    return NetworkGetEvcBalance();
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x9D4FDBB035229669 | ApiSet: undefined
 */
export function networkEarnJobBonusHeistAward(p0, p1, p2) {
    NetworkEarnJobBonusHeistAward(p0, p1, p2);
}
/**
 * ```
 * Same as 0xEA560AC9EEB1E19B.
 * ```
 * ```
 * Same as 0xEA560AC9EEB1E19B.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x13A8DE2FD77D04F3 | ApiSet: undefined
 */
export function networkGetPvcTransferBalance() {
    return NetworkGetPvcTransferBalance();
}
/**
 * ```
 * NativeDB Added Parameter 1: int amount
 * NativeDB Added Parameter 2: int id
 * ```
 * Hash: 0x3E4ADAFF1830F146 | ApiSet: undefined
 */
export function networkEarnFromWarehouse() {
    NetworkEarnFromWarehouse();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x4F54F3B6C202FB4E | ApiSet: undefined
 */
export function networkGetPvcBalance() {
    return NetworkGetPvcBalance();
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x11B0A20C493F7E36 | ApiSet: undefined
 */
export function networkEarnJobBonusFirstTimeBonus(p0, p1, p2) {
    NetworkEarnJobBonusFirstTimeBonus(p0, p1, p2);
}
/**
 * ```
 * Same as 0x13A8DE2FD77D04F3.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xEA560AC9EEB1E19B | ApiSet: undefined
 */
export function networkGetRemainingTransferBalance() {
    return NetworkGetRemainingTransferBalance();
}
/**
 * ```
 * Returns true if bank balance >= amount.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xA31FD6A0865B6D14 | ApiSet: undefined
 */
export function networkGetVcBankBalanceIsNotLessThan(amount) {
    return NetworkGetVcBankBalanceIsNotLessThan(amount);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x700AF71AE615E6DD | ApiSet: undefined
 */
export function networkGetStringBankWalletBalance() {
    return NetworkGetStringBankWalletBalance();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xF9B10B529DCFB33B | ApiSet: undefined
 */
export function networkGetStringWalletBalance(characterSlot) {
    return NetworkGetStringWalletBalance(characterSlot);
}
/**
 * Hash: 0x76EF28DA05EA395A | ApiSet: undefined
 */
export function networkGetVcBankBalance() {
    return NetworkGetVcBankBalance();
}
/**
 * Hash: 0xA40F9C2623F6A8B5 | ApiSet: undefined
 */
export function networkGetVcWalletBalance(characterSlot) {
    return NetworkGetVcWalletBalance(characterSlot);
}
/**
 * Hash: 0x5CBAD97E059E1B94 | ApiSet: undefined
 */
export function networkGetVcBalance() {
    return NetworkGetVcBalance();
}
/**
 * Hash: 0xA6FA3979BED01B81 | ApiSet: undefined
 */
export function networkGetStringBankBalance() {
    return NetworkGetStringBankBalance();
}
/**
 * Hash: 0x821418C727FCACD7 | ApiSet: undefined
 */
export function networkManualDeleteCharacter(characterSlot) {
    NetworkManualDeleteCharacter(characterSlot);
}
/**
 * ```
 * Returns true if wallet balance >= amount.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xED5AB8860415BABA | ApiSet: undefined
 */
export function networkGetVcWalletBalanceIsNotLessThan(amount, characterSlot) {
    return NetworkGetVcWalletBalanceIsNotLessThan(amount, characterSlot);
}
/**
 * Hash: 0x3DA5ECD1A56CBA6D | ApiSet: undefined
 */
export function networkInitializeCash(wallet, bank) {
    NetworkInitializeCash(wallet, bank);
}
/**
 * ```
 * Returns true if bank balance + wallet balance >= amount.
 * ```
 * Hash: 0xDC18531D7019A535 | ApiSet: undefined
 */
export function networkGetVcBankWalletBalanceIsNotLessThan(amount, characterSlot) {
    return NetworkGetVcBankWalletBalanceIsNotLessThan(amount, characterSlot);
}
/**
 * Hash: 0x5FD5ED82CBBE9989 | ApiSet: undefined
 */
export function networkPayEmployeeWage(p0, p1, p2) {
    NetworkPayEmployeeWage(p0, p1, p2);
}
/**
 * Hash: 0x81404F3DC124FE5B | ApiSet: undefined
 */
export function networkMoneyCanBet(amount, p1, p2) {
    return NetworkMoneyCanBet(amount, p1, p2);
}
/**
 * Hash: 0xFB18DF9CB95E0105 | ApiSet: undefined
 */
export function networkGivePlayerJobshareCash(amount) {
    return NetworkGivePlayerJobshareCash(amount);
}
/**
 * Hash: 0xAFE08B35EC0C9EAE | ApiSet: undefined
 */
export function networkPayUtilityBill(amount, p1, p2) {
    NetworkPayUtilityBill(amount, p1, p2);
}
/**
 * Hash: 0x56A3B51944C50598 | ApiSet: undefined
 */
export function networkReceivePlayerJobshareCash(value) {
    return NetworkReceivePlayerJobshareCash(value);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xEAD3D81F2C3A1458 | ApiSet: undefined
 */
export function networkSpentArcadeGame(p0, p1, p2, p3, p4) {
    NetworkSpentArcadeGame(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x9346E14F2AF74D46 | ApiSet: undefined
 */
export function networkPayMatchEntryFee(amount, matchId, p2, p3) {
    NetworkPayMatchEntryFee(amount, matchId, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x1B882107C23A9022 | ApiSet: undefined
 */
export function networkRivalDeliveryCompleted(earnedMoney) {
    NetworkRivalDeliveryCompleted(earnedMoney);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x14EAEA58F93B55AF | ApiSet: undefined
 */
export function networkSpentArenaJoinSpectator(amount, p1, p2, p3) {
    NetworkSpentArenaJoinSpectator(amount, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x9BEA350D7C48061B | ApiSet: undefined
 */
export function networkSpentAutoshopModifications(p0, p1, p2, p3, p4) {
    NetworkSpentAutoshopModifications(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x43AA7FAC4E6D6687 | ApiSet: undefined
 */
export function networkSpentArcadeGeneric(p0, p1, p2, p3, p4) {
    NetworkSpentArcadeGeneric(p0, p1, p2, p3, p4);
}
/**
 * ```
 * index
 * -------
 * See function sub_1005 in am_boat_taxi.ysc
 * context
 * ----------
 * "BACKUP_VAGOS"
 * "BACKUP_LOST"
 * "BACKUP_FAMILIES"
 * "HIRE_MUGGER"
 * "HIRE_MERCENARY"
 * "BUY_CARDROPOFF"
 * "HELI_PICKUP"
 * "BOAT_PICKUP"
 * "CLEAR_WANTED"
 * "HEAD_2_HEAD"
 * "CHALLENGE"
 * "SHARE_LAST_JOB"
 * "DEFAULT"
 * reason
 * ---------
 * "NOTREACHTARGET"
 * "TARGET_ESCAPE"
 * "DELIVERY_FAIL"
 * "NOT_USED"
 * "TEAM_QUIT"
 * "SERVER_ERROR"
 * "RECEIVE_LJ_L"
 * "CHALLENGE_PLAYER_LEFT"
 * "DEFAULT"
 * unk
 * -----
 * Unknown bool value
 * ```
 * Hash: 0xF9C812CD7C46E817 | ApiSet: undefined
 */
export function networkRefundCash(index, context, reason, unk) {
    NetworkRefundCash(index, context, reason, unk);
}
/**
 * Hash: 0xD7CCCBA28C4ECAF0 | ApiSet: undefined
 */
export function networkSpentBaService(p0, p1, p2, p3, p4) {
    NetworkSpentBaService(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x619496D837EFD920 | ApiSet: undefined
 */
export function networkSpentArenaPremium(amount, p1, p2) {
    NetworkSpentArenaPremium(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xCA230C9682556CF1 | ApiSet: undefined
 */
export function networkSpentBankInterest(p0, p1, p2) {
    NetworkSpentBankInterest(p0, p1, p2);
}
/**
 * Hash: 0x812F5488B1B2A299 | ApiSet: undefined
 */
export function networkSpentArrestBail(p0, p1, p2) {
    NetworkSpentArrestBail(p0, p1, p2);
}
/**
 * Hash: 0xB162DC95C0A3317B | ApiSet: undefined
 */
export function networkSpentAmmoDrop(p0, p1, p2) {
    NetworkSpentAmmoDrop(p0, p1, p2);
}
/**
 * Hash: 0x29B260B84947DFCC | ApiSet: undefined
 */
export function networkSpentBounty(p0, p1, p2) {
    NetworkSpentBounty(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x7049BF858601DC0F | ApiSet: undefined
 */
export function networkSpentArenaSpectatorBox(amount, p1, p2, p3) {
    NetworkSpentArenaSpectatorBox(amount, p1, p2, p3);
}
/**
 * Hash: 0x524EE43A37232C00 | ApiSet: undefined
 */
export function networkSpentBoatPickup(p0, p1, p2) {
    NetworkSpentBoatPickup(p0, p1, p2);
}
/**
 * Hash: 0x5D97630A8A0EF123 | ApiSet: undefined
 */
export function networkSpentBallisticEquipment(amount, p1, p2) {
    NetworkSpentBallisticEquipment(amount, p1, p2);
}
/**
 * Hash: 0xA6DD8458CE24012C | ApiSet: undefined
 */
export function networkSpentBullShark(p0, p1, p2) {
    NetworkSpentBullShark(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xB40F96D6D252839B | ApiSet: undefined
 */
export function networkSpentAutoshopPropertyUtilityFee(p0, p1, p2, p3) {
    NetworkSpentAutoshopPropertyUtilityFee(p0, p1, p2, p3);
}
/**
 * Hash: 0x1C436FD11FFA692F | ApiSet: undefined
 */
export function networkSpentBetting(amount, p1, p3, p4) {
    return NetworkSpentBetting(amount, p1, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x1BEA0CD93470BB1F | ApiSet: undefined
 */
export function networkSpentBountyHunterMission(amount, p1, p2) {
    NetworkSpentBountyHunterMission(amount, p1, p2);
}
/**
 * ```
 * NativeDB Added Parameter 1: int amount
 * NativeDB Added Parameter 2: BOOL p1
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 * Hash: 0xFFBE02CD385356BD | ApiSet: undefined
 */
export function networkSpentBoss() {
    return NetworkSpentBoss();
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x54ABA22FA6371249 | ApiSet: undefined
 */
export function networkSpentBeachPartyGeneric(p0) {
    NetworkSpentBeachPartyGeneric(p0);
}
/**
 * Hash: 0x0035BB914316F1E3 | ApiSet: undefined
 */
export function networkSpentBusiness(p0, p1, p2, p3) {
    NetworkSpentBusiness(p0, p1, p2, p3);
}
/**
 * Hash: 0x6D3A430D1A809179 | ApiSet: undefined
 */
export function networkSpentBuyPassiveMode(p0, p1, p2) {
    NetworkSpentBuyPassiveMode(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xEEB7E5D1FEB20869 | ApiSet: undefined
 */
export function networkSpentBuyAutoshop(p0, p1, p2, p3) {
    NetworkSpentBuyAutoshop(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x923AEA8E78F8DF0B | ApiSet: undefined
 */
export function networkSpentBikeShopModify(p0, p1, p2, p3) {
    NetworkSpentBikeShopModify(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x4EA3F425C7744D21 | ApiSet: undefined
 */
export function networkSpentBuyBase(p0, p1, p2, p3) {
    NetworkSpentBuyBase(p0, p1, p2, p3);
}
/**
 * Hash: 0xE1B13771A843C4F6 | ApiSet: undefined
 */
export function networkSpentBuyWantedlevel(p0, p2, p3) {
    return NetworkSpentBuyWantedlevel(p0, p2, p3);
}
/**
 * Hash: 0x12D148D26538D0F9 | ApiSet: undefined
 */
export function networkSpentBuyBunker(p0, p1, p2, p3) {
    NetworkSpentBuyBunker(p0, p1, p2, p3);
}
/**
 * Hash: 0xA628A745E2275C5D | ApiSet: undefined
 */
export function networkSpentBuyOfftheradar(p0, p1, p2) {
    NetworkSpentBuyOfftheradar(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x1464E17207CD36E2 | ApiSet: undefined
 */
export function networkSpentCarclubMembership(p0, p1, p2, p3, p4) {
    NetworkSpentCarclubMembership(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x0CCE73BC7A11E885 | ApiSet: undefined
 */
export function networkSpentBuyTiltrotor(p0, p1, p2, p3) {
    NetworkSpentBuyTiltrotor(p0, p1, p2, p3);
}
/**
 * Hash: 0xAC272C0AE01B4BD8 | ApiSet: undefined
 */
export function networkSpentBuyTruck(p0, p1, p2, p3) {
    NetworkSpentBuyTruck(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x925227803A0EAA1B | ApiSet: undefined
 */
export function networkSpentCarclub(p0, p1, p2, p3) {
    NetworkSpentCarclub(p0, p1, p2, p3);
}
/**
 * Hash: 0xACDE7185B374177C | ApiSet: undefined
 */
export function networkSpentCallPlayer(p0, p2, p3) {
    return NetworkSpentCallPlayer(p0, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x40D5DA9550B7CB46 | ApiSet: undefined
 */
export function networkSpentBuyArena(amount, p1, p2, p3) {
    NetworkSpentBuyArena(amount, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xD1E46824E6FB92B5 | ApiSet: undefined
 */
export function networkSpentCarclubTakeover(p0, p1, p2, p3) {
    NetworkSpentCarclubTakeover(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x948705F6F9C50824 | ApiSet: undefined
 */
export function networkSpentCargoSourcing(p0, p1, p2, p3, p4, p5) {
    NetworkSpentCargoSourcing(p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x34A6FC4D06C4DA0F | ApiSet: undefined
 */
export function networkSpentBuyCasino(amount, p1, p2) {
    return NetworkSpentBuyCasino(amount, p1, p2);
}
/**
 * Hash: 0xEC03C719DB2F4306 | ApiSet: undefined
 */
export function networkSpentCarwash(p0, p1, p2, p3, p4) {
    NetworkSpentCarwash(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xC991C255AA6D90B2 | ApiSet: undefined
 */
export function networkSpentCasinoClubGeneric(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    NetworkSpentCasinoClubGeneric(p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
/**
 * Hash: 0x6E176F1B18BC0637 | ApiSet: undefined
 */
export function networkSpentBuyRevealPlayers(p0, p1, p2) {
    NetworkSpentBuyRevealPlayers(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x487009DD91D93429 | ApiSet: undefined
 */
export function networkSpentCasinoHeistSkipMission(p0, p1, p2, p3) {
    NetworkSpentCasinoHeistSkipMission(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x88BF9B612B84D3C3 | ApiSet: undefined
 */
export function networkSpentCasinoGeneric(amount, p1, p2, p3, p4) {
    NetworkSpentCasinoGeneric(amount, p1, p2, p3, p4);
}
/**
 * Hash: 0x289016EC778D60E0 | ApiSet: undefined
 */
export function networkSpentCashDrop(amount, p1, p2) {
    NetworkSpentCashDrop(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x5BBBD92186E1F1C5 | ApiSet: undefined
 */
export function networkSpentEmployAssassins(p0, p1, p2, p3) {
    NetworkSpentEmployAssassins(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xD30E8392F407C328 | ApiSet: undefined
 */
export function networkSpentCasinoHeist(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    NetworkSpentCasinoHeist(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xFBBE0570EDF39D46 | ApiSet: undefined
 */
export function networkSpentCasinoMembership(amount, p1, p2, p3) {
    NetworkSpentCasinoMembership(amount, p1, p2, p3);
}
/**
 * Hash: 0x6A445B64ED7ABEB5 | ApiSet: undefined
 */
export function networkSpentFromRockstar(bank, p1, p2) {
    NetworkSpentFromRockstar(bank, p1, p2);
}
/**
 * Hash: 0x6B38ECB05A63A685 | ApiSet: undefined
 */
export function networkSpentCinema(p0, p1, p2, p3) {
    NetworkSpentCinema(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x2CEB0E0BC2A77C05 | ApiSet: undefined
 */
export function networkSpentGunrunningContactService(p0, p1, p2, p3) {
    NetworkSpentGunrunningContactService(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x771ADB0E7635B7BF | ApiSet: undefined
 */
export function networkSpentGangopsCannon(p0, p1, p2, p3) {
    NetworkSpentGangopsCannon(p0, p1, p2, p3);
}
/**
 * Hash: 0x7BF1D73DB2ECA492 | ApiSet: undefined
 */
export function networkSpentHeliPickup(p0, p1, p2) {
    NetworkSpentHeliPickup(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xB9F7A469460E7A4A | ApiSet: undefined
 */
export function networkSpentFromBank(p0, p1, p2, p3) {
    NetworkSpentFromBank(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xA19EC0786E326E06 | ApiSet: undefined
 */
export function networkSpentGangopsStartStrand(type, amount, p2, p3) {
    NetworkSpentGangopsStartStrand(type, amount, p2, p3);
}
/**
 * ```
 * Only used once in a script (am_contact_requests)
 * p1 = 0
 * p2 = 1
 * ```
 * Hash: 0xE404BFB981665BF0 | ApiSet: undefined
 */
export function networkSpentHireMugger(p0, p1, p2) {
    NetworkSpentHireMugger(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x5ECE6FD7B4EC8D6A | ApiSet: undefined
 */
export function networkSpentGangopsTripSkip(amount, p1, p2) {
    NetworkSpentGangopsTripSkip(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xDA947AE8880D5C18 | ApiSet: undefined
 */
export function networkSpentGangopsStartMission(p0, p1, p2, p3) {
    NetworkSpentGangopsStartMission(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xB18AC2ECBB15CB6A | ApiSet: undefined
 */
export function networkSpentHangarUtilityCharges(amount, p1, p2) {
    NetworkSpentHangarUtilityCharges(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xB1F1346FD57685D7 | ApiSet: undefined
 */
export function networkSpentHangarStaffCharges(amount, p1, p2) {
    NetworkSpentHangarStaffCharges(amount, p1, p2);
}
/**
 * Hash: 0xE7B80E2BF9D80BD6 | ApiSet: undefined
 */
export function networkSpentHireMercenary(p0, p1, p2) {
    NetworkSpentHireMercenary(p0, p1, p2);
}
/**
 * Hash: 0xD9B86B9872039763 | ApiSet: undefined
 */
export function networkSpentHoldups(p0, p1, p2) {
    NetworkSpentHoldups(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x93AA4165CB67E925 | ApiSet: undefined
 */
export function networkSpentImAbility(p0, p1, p2, p3) {
    NetworkSpentImAbility(p0, p1, p2, p3);
}
/**
 * Hash: 0xEE99784E4467689C | ApiSet: undefined
 */
export function networkSpentInStripclub(p0, p1, p2, p3) {
    NetworkSpentInStripclub(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xE86689E5F82DE429 | ApiSet: undefined
 */
export function networkSpentIslandHeist(p0, p1, p2, p3) {
    NetworkSpentIslandHeist(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x28F174A67B8D0C2F | ApiSet: undefined
 */
export function networkSpentJobSkip(amount, matchId, p2, p3) {
    NetworkSpentJobSkip(amount, matchId, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xE5F5A060439C2F5D | ApiSet: undefined
 */
export function networkSpentMakeItRain(amount, p1, p2) {
    NetworkSpentMakeItRain(amount, p1, p2);
}
/**
 * Hash: 0xC1952F3773BA18FE | ApiSet: undefined
 */
export function networkSpentImportExportRepair(p0, p1, p2) {
    NetworkSpentImportExportRepair(p0, p1, p2);
}
/**
 * Hash: 0xE7DF4E0545DFB56E | ApiSet: undefined
 */
export function networkSpentMoveYacht(amount, p1, p2) {
    NetworkSpentMoveYacht(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x876056684281655D | ApiSet: undefined
 */
export function networkSpentNightclubEntryFee(player, amount, p1, p2, p3) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkSpentNightclubEntryFee(_player, amount, p1, p2, p3);
}
/**
 * Hash: 0x5BCDE0F640C773D2 | ApiSet: undefined
 */
export function networkSpentJukebox(p0, p1, p2, p3) {
    NetworkSpentJukebox(p0, p1, p2, p3);
}
/**
 * Hash: 0xB49ECA122467D05F | ApiSet: undefined
 */
export function networkSpentPaServiceDancer(p0, p1, p2, p3) {
    NetworkSpentPaServiceDancer(p0, p1, p2, p3);
}
/**
 * Hash: 0x05F04155A226FBBF | ApiSet: undefined
 */
export function networkSpentOrderWarehouseVehicle(p0, p1, p2, p3) {
    NetworkSpentOrderWarehouseVehicle(p0, p1, p2, p3);
}
/**
 * Hash: 0xD5BB406F4E04019F | ApiSet: undefined
 */
export function networkSpentNoCops(p0, p1, p2) {
    NetworkSpentNoCops(p0, p1, p2);
}
/**
 * Hash: 0x08A1B82B91900682 | ApiSet: undefined
 */
export function networkSpentPayGoon(p0, p1, amount) {
    NetworkSpentPayGoon(p0, p1, amount);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xDD21B016E4289465 | ApiSet: undefined
 */
export function networkSpentNightclubBarDrink(amount, p1, p2, p3) {
    NetworkSpentNightclubBarDrink(amount, p1, p2, p3);
}
/**
 * Hash: 0xE8B0B270B6E7C76E | ApiSet: undefined
 */
export function networkSpentOrderBodyguardVehicle(p0, p1, p2, p3) {
    NetworkSpentOrderBodyguardVehicle(p0, p1, p2, p3);
}
/**
 * Hash: 0x0FE8E1FCD2B86B33 | ApiSet: undefined
 */
export function networkSpentPaServiceHeliPickup(p0, p1, p2, p3) {
    NetworkSpentPaServiceHeliPickup(p0, p1, p2, p3);
}
/**
 * Hash: 0xDBC966A01C02BCA7 | ApiSet: undefined
 */
export function networkSpentPayBoss(p0, p1, p2) {
    NetworkSpentPayBoss(p0, p1, p2);
}
/**
 * Hash: 0xB21B89501CFAC79E | ApiSet: undefined
 */
export function networkSpentProstitutes(p0, p1, p2) {
    NetworkSpentProstitutes(p0, p1, p2);
}
/**
 * ```
 * According to how I understood this in the freemode script alone,
 * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
 * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
 * The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
 * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
 * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
 * `bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.`
 * ```
 * Hash: 0x9FF28D88C766E3E8 | ApiSet: undefined
 */
export function networkSpentPayVehicleInsurancePremium(amount, vehicleModel, notBankrupt, hasTheMoney) {
    if (typeof vehicleModel === 'string')
        vehicleModel = this.getHashKey(vehicleModel);
    return NetworkSpentPayVehicleInsurancePremium(amount, vehicleModel, notBankrupt, hasTheMoney);
}
/**
 * Hash: 0x7C99101F7FCE2EE5 | ApiSet: undefined
 */
export function networkSpentPlayerHealthcare(p0, p1, p2, p3) {
    NetworkSpentPlayerHealthcare(p0, p1, p2, p3);
}
/**
 * Hash: 0x33981D6804E62F49 | ApiSet: undefined
 */
export function networkSpentPurchaseWarehouse(amount, data, p2, p3) {
    NetworkSpentPurchaseWarehouse(amount, data, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xCCB339CC970452DA | ApiSet: undefined
 */
export function networkSpentPurchaseHangar(p0, p1, p2, p3) {
    NetworkSpentPurchaseHangar(p0, p1, p2, p3);
}
/**
 * Hash: 0xFC4EE00A7B3BFB76 | ApiSet: undefined
 */
export function networkSpentRenameOrganization(p0, p1, p2) {
    NetworkSpentRenameOrganization(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xE284D46FFDB82E36 | ApiSet: undefined
 */
export function networkSpentRdrhatchetBonus(amount, p1, p2) {
    NetworkSpentRdrhatchetBonus(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xF6C8A544E4CF14FC | ApiSet: undefined
 */
export function networkSpentRehireDj(amount, p1, p2, p3) {
    NetworkSpentRehireDj(amount, p1, p2, p3);
}
/**
 * Hash: 0x995A65F15F581359 | ApiSet: undefined
 */
export function networkSpentRobbedByMugger(amount, p1, p2) {
    NetworkSpentRobbedByMugger(amount, p1, p2);
}
/**
 * Hash: 0x9D26502BB97BFE62 | ApiSet: undefined
 */
export function networkSpentRequestHeist(p0, p1, p2) {
    NetworkSpentRequestHeist(p0, p1, p2);
}
/**
 * Hash: 0x8204DA7934DF3155 | ApiSet: undefined
 */
export function networkSpentRequestJob(p0, p1, p2) {
    NetworkSpentRequestJob(p0, p1, p2);
}
/**
 * Hash: 0x17C3A7D31EAE39F9 | ApiSet: undefined
 */
export function networkSpentTaxi(amount, p1, p2) {
    NetworkSpentTaxi(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * NativeDB Removed Parameter 4: BOOL p3
 * ```
 * Hash: 0x9A5BD1D0000B339C | ApiSet: undefined
 */
export function networkSpentSpinTheWheelPayment(amount, p1, p2, p3) {
    NetworkSpentSpinTheWheelPayment(amount, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x7E2F4E8F44CAF4E0 | ApiSet: undefined
 */
export function networkSpentSalesDisplay(p0) {
    NetworkSpentSalesDisplay(p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x3DD3F33A5D55EA6F | ApiSet: undefined
 */
export function networkSpentUpgradeBase(p0, p1, p2, p3) {
    NetworkSpentUpgradeBase(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xDD829AA198FDC46C | ApiSet: undefined
 */
export function networkSpentUpgradeAutoshop(p0, p1, p2, p3) {
    NetworkSpentUpgradeAutoshop(p0, p1, p2, p3);
}
/**
 * Hash: 0x7FE61782AD94CC09 | ApiSet: undefined
 */
export function networkSpentTelescope(p0, p1, p2) {
    NetworkSpentTelescope(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x6C8BC1488527AAAB | ApiSet: undefined
 */
export function networkSpentSubmarine(p0, p1, p2, p3, p4, p5) {
    NetworkSpentSubmarine(p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x4740D62BC1B4EBEA | ApiSet: undefined
 */
export function networkSpentUpgradeCasino(amount, p1, p2) {
    return NetworkSpentUpgradeCasino(amount, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x615EB504B0788DAF | ApiSet: undefined
 */
export function networkSpentUpgradeHangar(p0, p1, p2, p3) {
    NetworkSpentUpgradeHangar(p0, p1, p2, p3);
}
/**
 * Hash: 0x0C82D21A77C22D49 | ApiSet: undefined
 */
export function networkSpentUpgradeBunker(p0, p1, p2, p3) {
    NetworkSpentUpgradeBunker(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x037ABB06825D7AB1 | ApiSet: undefined
 */
export function networkSpentUpgradeArena(amount, p1, p2, p3) {
    NetworkSpentUpgradeArena(amount, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x165E135D6DFA2907 | ApiSet: undefined
 */
export function networkSpentUpgradeTiltrotor(p0, p1, p2, p3) {
    NetworkSpentUpgradeTiltrotor(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x89049A84065CE68E | ApiSet: undefined
 */
export function networkSpentUpgradeSub(p0, p1, p2, p3) {
    NetworkSpentUpgradeSub(p0, p1, p2, p3);
}
/**
 * Hash: 0x365E877C61D6988B | ApiSet: undefined
 */
export function networkSpentUpgradeTruck(p0, p1, p2, p3) {
    NetworkSpentUpgradeTruck(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x02D24A35A9CC3503 | ApiSet: undefined
 */
export function networkSpentVehicleRequested(p0, p1, p2, p3, p4) {
    NetworkSpentVehicleRequested(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xD99DB210089617FE | ApiSet: undefined
 */
export function networkSpentWager(p0, p1, amount) {
    NetworkSpentWager(p0, p1, amount);
}
/**
 * Hash: 0x5182A339A3474510 | ApiSet: undefined
 */
export function networkSpentVipUtilityCharges(p0, p1, p2) {
    NetworkSpentVipUtilityCharges(p0, p1, p2);
}
/**
 * Hash: 0xA75CCF58A60A5FD1 | ApiSet: undefined
 */
export function networkSpentVehicleExportMods(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    NetworkSpentVehicleExportMods(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * Hash: 0x20194D48EAEC9A41 | ApiSet: undefined
 */
export function processCashGift(p2) {
    return ProcessCashGift(p2);
}
/**
 * ```
 * Does nothing and always returns 0.
 * ```
 * Hash: 0xF70EFA14FE091429 | ApiSet: undefined
 */
export function withdrawVc(amount) {
    return WithdrawVc(amount);
}
/**
 * Hash: 0x5F4B6931816E599B | ApiSet: undefined
 */
export function disableAllControlActions(padIndex) {
    DisableAllControlActions(padIndex);
}
/**
 * ```cpp
 * enum ePadType {
 * PLAYER_CONTROL = 0,
 * CAMERA_CONTROL = 1,
 * FRONTEND_CONTRO = 2
 * };
 * ```
 * Hash: 0xA5FFE9B05F199DE7 | ApiSet: undefined
 */
export function enableAllControlActions(padIndex) {
    EnableAllControlActions(padIndex);
}
/**
 * ```
 * Returns profile setting 17.
 * ```
 * Hash: 0xFC859E2374407556 | ApiSet: undefined
 */
export function getAllowMovementWhileZoomed() {
    return GetAllowMovementWhileZoomed();
}
/**
 * Hash: 0x7F4724035FDCA1DD | ApiSet: undefined
 */
export function disableInputGroup(padIndex) {
    DisableInputGroup(padIndex);
}
/**
 * Hash: 0x80C2FD58D720C801 | ApiSet: undefined
 */
export function getControlGroupInstructionalButton(padIndex, controlGroup, p2) {
    return GetControlGroupInstructionalButton(padIndex, controlGroup, p2);
}
/**
 * ```
 * formerly called _GET_CONTROL_ACTION_NAME incorrectly
 * p2 appears to always be true.
 * p2 is unused variable in function.
 * EG:
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) \/\*INPUT_FRONTEND_ACCEPT (e.g. Enter button)\*\/
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) \/\*INPUT_FRONTEND_CANCEL (e.g. ESC button)\*\/
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) \/\*INPUT_CONTEXT (e.g. E button)\*\/
 * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
 * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
 * ```
 * Hash: 0x0499D7B09FC9B407 | ApiSet: undefined
 */
export function getControlInstructionalButton(padIndex, control, p2) {
    return GetControlInstructionalButton(padIndex, control, p2);
}
/**
 * [Control values and meaning](https://docs.fivem.net/docs/game-references/controls/#controls)
 * `Example: `CONTROLS::DISABLE_CONTROL_ACTION(2, 19, true)` disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame.`
 * Control group 1 and 0 gives the same results as 2. Same results for all players.
 * Hash: 0xFE99B66D079CF6BC | ApiSet: undefined
 */
export function disableControlAction(padIndex, control, disable) {
    DisableControlAction(padIndex, control, disable);
}
/**
 * Hash: 0xD95E79E8686D2C27 | ApiSet: undefined
 */
export function getControlValue(padIndex, control) {
    return GetControlValue(padIndex, control);
}
/**
 * Hash: 0xEC3C9B8D5327B563 | ApiSet: undefined
 */
export function getControlNormal(padIndex, control) {
    return GetControlNormal(padIndex, control);
}
/**
 * ```
 * control values and meaning: https://github.com/scripthookvdotnet/scripthookvdotnet/blob/47f8bb02a50e27d4bb982f43a78091feac59b21c/source/scripting_v3/GTA/Control.cs
 * and
 * https://docs.fivem.net/game-references/controls/
 * 0, 1 and 2 used in the scripts.
 * Control values from the decompiled scripts:
 * 0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,
 * 37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100
 * ,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19
 * 0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2
 * 20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,
 * 261,262,263,264,286,287,288,289,337,338,339,340,341,342,343
 * INPUTGROUP_MOVE
 * INPUTGROUP_LOOK
 * INPUTGROUP_WHEEL
 * INPUTGROUP_CELLPHONE_NAVIGATE
 * INPUTGROUP_CELLPHONE_NAVIGATE_UD
 * INPUTGROUP_CELLPHONE_NAVIGATE_LR
 * INPUTGROUP_FRONTEND_DPAD_ALL
 * INPUTGROUP_FRONTEND_DPAD_UD
 * INPUTGROUP_FRONTEND_DPAD_LR
 * INPUTGROUP_FRONTEND_LSTICK_ALL
 * INPUTGROUP_FRONTEND_RSTICK_ALL
 * INPUTGROUP_FRONTEND_GENERIC_UD
 * INPUTGROUP_FRONTEND_GENERIC_LR
 * INPUTGROUP_FRONTEND_GENERIC_ALL
 * INPUTGROUP_FRONTEND_BUMPERS
 * INPUTGROUP_FRONTEND_TRIGGERS
 * INPUTGROUP_FRONTEND_STICKS
 * INPUTGROUP_SCRIPT_DPAD_ALL
 * INPUTGROUP_SCRIPT_DPAD_UD
 * INPUTGROUP_SCRIPT_DPAD_LR
 * INPUTGROUP_SCRIPT_LSTICK_ALL
 * INPUTGROUP_SCRIPT_RSTICK_ALL
 * INPUTGROUP_SCRIPT_BUMPERS
 * INPUTGROUP_SCRIPT_TRIGGERS
 * INPUTGROUP_WEAPON_WHEEL_CYCLE
 * INPUTGROUP_FLY
 * INPUTGROUP_SUB
 * INPUTGROUP_VEH_MOVE_ALL
 * INPUTGROUP_CURSOR
 * INPUTGROUP_CURSOR_SCROLL
 * INPUTGROUP_SNIPER_ZOOM_SECONDARY
 * INPUTGROUP_VEH_HYDRAULICS_CONTROL
 * Took those in IDA Pro.Not sure in which order they go
 * ```
 * Hash: 0x351220255D64C155 | ApiSet: undefined
 */
export function enableControlAction(padIndex, control, enable) {
    EnableControlAction(padIndex, control, enable);
}
/**
 * ```
 * Returns profile setting 225.
 * ```
 * Hash: 0x0F70731BACCFBB96 | ApiSet: undefined
 */
export function getIsUsingAlternateDriveby() {
    return GetIsUsingAlternateDriveby();
}
/**
 * Hash: 0x4F8A26A890FD62FB | ApiSet: undefined
 */
export function getDisabledControlUnboundNormal(padIndex, control) {
    return GetDisabledControlUnboundNormal(padIndex, control);
}
/**
 * Hash: 0x11E65974A982637C | ApiSet: undefined
 */
export function getDisabledControlNormal(padIndex, control) {
    return GetDisabledControlNormal(padIndex, control);
}
/**
 * ```
 * The number of milliseconds since last padIndex registered pressed
 * ```
 * Hash: 0xD7D22F5592AED8BA | ApiSet: undefined
 */
export function getTimeSinceLastInput(padIndex) {
    return GetTimeSinceLastInput(padIndex);
}
/**
 * ```
 * Seems to return values between -1 and 1 for controls like gas and steering.
 * ```
 * Hash: 0x5B84D09CEC5209C5 | ApiSet: undefined
 */
export function getControlUnboundNormal(padIndex, control) {
    return GetControlUnboundNormal(padIndex, control);
}
/**
 * Returns whether a control was newly released since the last check.
 * Hash: 0x50F940259D3841E6 | ApiSet: undefined
 */
export function isControlJustReleased(padIndex, control) {
    return IsControlJustReleased(padIndex, control);
}
/**
 * Returns the local player's targeting mode. See [`SET_PLAYER_TARGETING_MODE`](#\_0xB1906895227793F3).
 * Hash: 0xBB41AFBBBC0A0287 | ApiSet: undefined
 */
export function getLocalPlayerAimState() {
    return GetLocalPlayerAimState();
}
/**
 * Same behavior as [`GET_LOCAL_PLAYER_AIM_STATE`](#\_0xBB41AFBBBC0A0287) but will also return if player using a keyboard.
 * Hash: 0x59B9A7AF4C95133C | ApiSet: undefined
 */
export function getLocalPlayerGamepadAimState() {
    return GetLocalPlayerGamepadAimState();
}
/**
 * Hash: 0x91AEF906BCA88877 | ApiSet: undefined
 */
export function isDisabledControlJustPressed(padIndex, control) {
    return IsDisabledControlJustPressed(padIndex, control);
}
/**
 * Hash: 0x1CEA6BFDF248E5D9 | ApiSet: undefined
 */
export function isControlEnabled(padIndex, control) {
    return IsControlEnabled(padIndex, control);
}
/**
 * Returns whether a control was newly pressed since the last check.
 * Hash: 0x580417101DDB492F | ApiSet: undefined
 */
export function isControlJustPressed(padIndex, control) {
    return IsControlJustPressed(padIndex, control);
}
/**
 * Hash: 0x77B612531280010D | ApiSet: undefined
 */
export function isLookInverted() {
    return IsLookInverted();
}
/**
 * Returns whether a control is currently pressed.
 * Hash: 0xF3A21BCD95725A4A | ApiSet: undefined
 */
export function isControlPressed(padIndex, control) {
    return IsControlPressed(padIndex, control);
}
/**
 * Hash: 0xE2587F8CBBD87B1D | ApiSet: undefined
 */
export function isDisabledControlPressed(padIndex, control) {
    return IsDisabledControlPressed(padIndex, control);
}
/**
 * Hardcoded to return false.
 * Hash: 0x23F09EADC01449D6 | ApiSet: undefined
 */
export function _0x23F09EADC01449D6(padIndex) {
    return Citizen.invokeNative('0x23F09EADC01449D6', padIndex);
}
/**
 * Returns whether a control is currently *not* pressed.
 * Hash: 0x648EE3E7F38877DD | ApiSet: undefined
 */
export function isControlReleased(padIndex, control) {
    return IsControlReleased(padIndex, control);
}
/**
 * Hash: 0x13337B38DB572509 | ApiSet: undefined
 */
export function isUsingKeyboard2(padIndex) {
    return IsUsingKeyboard2(padIndex);
}
/**
 * Hash: 0x305C8DCD79DA8B0F | ApiSet: undefined
 */
export function isDisabledControlJustReleased(padIndex, control) {
    return IsDisabledControlJustReleased(padIndex, control);
}
/**
 * Hash: 0xFB6C4072E9A32E92 | ApiSet: undefined
 */
export function isDisabledControlReleased(padIndex, control) {
    return IsDisabledControlReleased(padIndex, control);
}
/**
 * Hash: 0xA571D46727E2B718 | ApiSet: undefined
 */
export function isUsingKeyboard(padIndex) {
    return IsUsingKeyboard(padIndex);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x25AAA32BDC98F2A3 | ApiSet: undefined
 */
export function _0x25AAA32BDC98F2A3() {
    return Citizen.invokeNative('0x25AAA32BDC98F2A3');
}
/**
 * Hash: 0x6CD79468A1E595C6 | ApiSet: undefined
 */
export function _0x6CD79468A1E595C6(padIndex) {
    return Citizen.invokeNative('0x6CD79468A1E595C6', padIndex);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x14D29BB12D47F68C | ApiSet: undefined
 */
export function _0x14D29BB12D47F68C(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0x14D29BB12D47F68C', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xA0CEFCEA390AAB9B | ApiSet: undefined
 */
export function _0xA0CEFCEA390AAB9B(p0) {
    Citizen.invokeNative('0xA0CEFCEA390AAB9B', p0);
}
/**
 * Hash: 0x5B73C77D9EB66E24 | ApiSet: undefined
 */
export function _0x5B73C77D9EB66E24(p0) {
    Citizen.invokeNative('0x5B73C77D9EB66E24', p0);
}
/**
 * ```
 * Used with IS_LOOK_INVERTED() and negates its affect.
 * --
 * Not sure how the person above got that description, but here's an actual example:
 * `if (PAD::_GET_LAST_INPUT_METHOD(2)) {`
 * if (a_5) {
 * `if (PAD::IS_LOOK_INVERTED()) {`
 * a_3 *= -1;
 * }
 * `if (PAD::_E1615EC03B3BB4FD()) {`
 * a_3 *= -1;
 * }
 * }
 * }
 * ```
 * Hash: 0xE1615EC03B3BB4FD | ApiSet: undefined
 */
export function _0xE1615EC03B3BB4FD() {
    return Citizen.invokeNative('0xE1615EC03B3BB4FD');
}
/**
 * ```
 * S*
 * ```
 * Hash: 0x643ED62D5EA3BEBD | ApiSet: undefined
 */
export function resetInputMappingScheme() {
    ResetInputMappingScheme();
}
/**
 * Hash: 0xF239400E16C23E08 | ApiSet: undefined
 */
export function _0xF239400E16C23E08(padIndex, p1) {
    Citizen.invokeNative('0xF239400E16C23E08', padIndex, p1);
}
/**
 * Hash: 0xCB0360EFEFB2580D | ApiSet: undefined
 */
export function _0xCB0360EFEFB2580D(padIndex) {
    Citizen.invokeNative('0xCB0360EFEFB2580D', padIndex);
}
/**
 * Hash: 0xFC695459D4D0E219 | ApiSet: undefined
 */
export function setCursorLocation(x, y) {
    return SetCursorLocation(x, y);
}
/**
 * This is for simulating player input.
 * Hash: 0xE8A25867FBA3B05E | ApiSet: undefined
 */
export function setControlNormal(padIndex, control, amount) {
    return SetControlNormal(padIndex, control, amount);
}
/**
 * Hash: 0x798FDEB5B1575088 | ApiSet: undefined
 */
export function setPlayerpadShakesWhenControllerDisabled(toggle) {
    SetPlayerpadShakesWhenControllerDisabled(toggle);
}
/**
 * Hash: 0x8290252FFF36ACB5 | ApiSet: undefined
 */
export function setControlLightEffectColor(padIndex, red, green, blue) {
    SetControlLightEffectColor(padIndex, red, green, blue);
}
/**
 * ```
 * p0 always seems to be 0
 * duration in milliseconds
 * frequency should range from about 10 (slow vibration) to 255 (very fast)
 * example:
 * SET_PAD_SHAKE(0, 100, 200);
 * ```
 * Hash: 0x48B3886C1358D0D5 | ApiSet: undefined
 */
export function setPadShake(padIndex, duration, frequency) {
    SetPadShake(padIndex, duration, frequency);
}
/**
 * Hash: 0xEDE476E5EE29EDB1 | ApiSet: undefined
 */
export function setInputExclusive(padIndex, control) {
    SetInputExclusive(padIndex, control);
}
/**
 * Hash: 0x38C16A305E8CDC8D | ApiSet: undefined
 */
export function stopPadShake(padIndex) {
    StopPadShake(padIndex);
}
/**
 * ```
 * Used in carsteal3 script with p0 = "Carsteal4_spycar".
 * S*
 * ```
 * Hash: 0x3D42B92563939375 | ApiSet: undefined
 */
export function switchToInputMappingScheme(name) {
    return SwitchToInputMappingScheme(name);
}
/**
 * ```
 * Same as 0x3D42B92563939375
 * S*
 * ```
 * Hash: 0x4683149ED1DDE7A1 | ApiSet: undefined
 */
export function switchToInputMappingScheme2(name) {
    return SwitchToInputMappingScheme2(name);
}
/**
 * p5 only set to true in single player native scripts. Door hashes normally look like `PROP_[int]_DOOR_[int]` for interior doors and `PROP_BUILDING_[int]_DOOR_[int]` exterior doors but you can just make up your own hash if you want.
 * If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
 * A simple "localized" door-system (with hundreds/thousands of doors) can be created by setting p5, p6, and p7 to false and using EventHandlers to synchronize the states to: [DOOR_SYSTEM_SET_DOOR_STATE](#\_0x6BAB9442830C7F53), [DOOR_SYSTEM_SET_OPEN_RATIO](#\_0xB6E6FBA95C7324AC), [DOOR_SYSTEM_SET_HOLD_OPEN](#\_0xD9B71952F78A2640), etc.
 * Hash: 0x6F8838D03D1DC226 | ApiSet: undefined
 */
export function addDoorToSystem(doorHash, modelHash, position, p5, scriptDoor, isLocal) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    AddDoorToSystem(doorHash, modelHash, position.x, position.y, position.z, p5, scriptDoor, isLocal);
}
/**
 * Hash: 0x85B6C850546FDDE2 | ApiSet: undefined
 */
export function areEntitiesEntirelyInsideGarage(garageHash, p1, p2, p3, p4) {
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    return AreEntitiesEntirelyInsideGarage(garageHash, p1, p2, p3, p4);
}
/**
 * Hash: 0x8DC39368BDD57755 | ApiSet: undefined
 */
export function attachPortablePickupToPed(pickupObject, ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    AttachPortablePickupToPed(pickupObject, _ped);
}
/**
 * Hash: 0xDA05194260CDCDF9 | ApiSet: undefined
 */
export function clearGarageArea(garageHash, isNetwork) {
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    ClearGarageArea(garageHash, isNetwork);
}
/**
 * Creates an ambient pickup given the hash. Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * Hash: 0x673966A0C0FD7171 | ApiSet: undefined
 */
export function createAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, returnHandle, p8) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreateAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, returnHandle, p8);
}
/**
 * Hash: 0xE7E4C198B0185900 | ApiSet: undefined
 */
export function breakObjectFragmentChild(p0, p1, p2) {
    BreakObjectFragmentChild(p0, p1, p2);
}
/**
 * Hash: 0x190428512B240692 | ApiSet: undefined
 */
export function clearObjectsInsideGarage(garageHash, vehicles, peds, objects, isNetwork) {
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    ClearObjectsInsideGarage(garageHash, vehicles, peds, objects, isNetwork);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x9C93764223E29C50 | ApiSet: undefined
 */
export function createNonNetworkedAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8) {
    return CreateNonNetworkedAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
}
/**
 * ```
 * Spawns one or more money pickups.
 * x: The X-component of the world position to spawn the money pickups at.
 * y: The Y-component of the world position to spawn the money pickups at.
 * z: The Z-component of the world position to spawn the money pickups at.
 * value: The combined value of the pickups (in dollars).
 * amount: The number of pickups to spawn.
 * model: The model to use, or 0 for default money model.
 * Example:
 * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
 * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
 * ==============================================
 * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
 * ```
 * Hash: 0x0589B5E791CE9B2B | ApiSet: undefined
 */
export function createMoneyPickups(position, value, amount, model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    CreateMoneyPickups(position.x, position.y, position.z, value, amount, model);
}
/**
 * Creates an object (prop) with the specified model centered at the specified position.
 * This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
 * Hash: 0x9A294B2138ABB884 | ApiSet: undefined
 */
export function createObjectNoOffset(modelHash, position, isNetwork, netMissionEntity, doorFlag) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreateObjectNoOffset(modelHash, position.x, position.y, position.z, isNetwork, netMissionEntity, doorFlag);
}
/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * Hash: 0x2EAF1FDB2FB55698 | ApiSet: undefined
 */
export function createPortablePickup(pickupHash, position, placeOnGround, modelHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreatePortablePickup(pickupHash, position.x, position.y, position.z, placeOnGround, modelHash);
}
/**
 * Hash: 0x125494B98A21AAF7 | ApiSet: undefined
 */
export function createNonNetworkedPortablePickup(pickupHash, position, placeOnGround, modelHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreateNonNetworkedPortablePickup(pickupHash, position.x, position.y, position.z, placeOnGround, modelHash);
}
/**
 * Deletes the specified object.
 * **Note**: If for some reason the entity won't delete, you might want to check if the object is a mission entity.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x539E0AE3E6634B9F | ApiSet: undefined
 */
export function deleteObject(object) {
    const _object = object instanceof Entity ? object.handle() : object;
    DeleteObject(_object);
}
/**
 * Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model.
 * This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
 * Hash: 0x509D5878EB39E842 | ApiSet: undefined
 */
export function createObject(modelHash, position, isNetwork, netMissionEntity, doorFlag) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreateObject(modelHash, position.x, position.y, position.z, isNetwork, netMissionEntity, doorFlag);
}
/**
 * Hash: 0xD9EFB6DBF7DAAEA3 | ApiSet: undefined
 */
export function doesPickupObjectExist(pickupObject) {
    return DoesPickupObjectExist(pickupObject);
}
/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * Hash: 0xFBA08C503DD5FA58 | ApiSet: undefined
 */
export function createPickup(pickupHash, posX, posY, posZ, p4, value, p6, modelHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreatePickup(pickupHash, posX, posY, posZ, p4, value, p6, modelHash);
}
/**
 * Hash: 0xAFC1CA75AD4074D1 | ApiSet: undefined
 */
export function doesPickupExist(pickup) {
    return DoesPickupExist(pickup);
}
/**
 * ```
 * Returns true if a destructible object with this handle exists, false otherwise.
 * ```
 * Hash: 0x52AF537A0C5B8AAD | ApiSet: undefined
 */
export function doesRayfireMapObjectExist(object) {
    return DoesRayfireMapObjectExist(object);
}
/**
 * ```
 * Pickup hashes: pastebin.com/8EuSv2r1
 * flags:
 * 8 (1 << 3): place on ground
 * 512 (1 << 9): spin around
 * ```
 * Hash: 0x891804727E0A98B7 | ApiSet: undefined
 */
export function createPickupRotate(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreatePickupRotate(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash);
}
/**
 * ```
 * p5 is usually 0.
 * ```
 * Hash: 0xBFA48E2FF417213F | ApiSet: undefined
 */
export function doesObjectOfTypeExistAtCoords(position, radius, hash, p5) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    return DoesObjectOfTypeExistAtCoords(position.x, position.y, position.z, radius, hash, p5);
}
/**
 * Hardcoded not to work in multiplayer environments.
 * Native name between `SET_LOCAL_PLAYER_VISIBLE_LOCALLY` & `SET_MAX_WANTED_LEVEL`.
 * ```
 * `OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door unlocked`
 * `OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door locked`
 * ```
 * Hash: 0x9B12F9A24FABEDB0 | ApiSet: undefined
 */
export function doorControl(modelHash, position, locked, xRotMult, yRotMult, zRotMult) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    DoorControl(modelHash, position.x, position.y, position.z, locked, xRotMult, yRotMult, zRotMult);
}
/**
 * Hash: 0xCF463D1E9A0AECB1 | ApiSet: undefined
 */
export function detachPortablePickupFromPed(pickupObject) {
    DetachPortablePickupFromPed(pickupObject);
}
/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * Hash: 0xF9C36251F6E48E33 | ApiSet: undefined
 */
export function doesPickupOfTypeExistInArea(pickupHash, position, radius) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    return DoesPickupOfTypeExistInArea(pickupHash, position.x, position.y, position.z, radius);
}
/**
 * Hash: 0x4BC2854478F3A749 | ApiSet: undefined
 */
export function doorSystemGetDoorPendingState(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return DoorSystemGetDoorPendingState(doorHash);
}
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * Hash: 0x03C27E13B42A0E82 | ApiSet: undefined
 */
export function doorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    DoorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate);
}
/**
 * Hash: 0x65499865FCA6E5EC | ApiSet: undefined
 */
export function doorSystemGetOpenRatio(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return DoorSystemGetOpenRatio(doorHash);
}
/**
 * Search radius: 0.5
 * Hash: 0x589F80B325CC82C5 | ApiSet: undefined
 */
export function doorSystemFindExistingDoor(position, modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return DoorSystemFindExistingDoor(position.x, position.y, position.z, modelHash);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xE851471AEFC3374F | ApiSet: undefined
 */
export function doorSystemGetAutomaticDistance(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return DoorSystemGetAutomaticDistance(doorHash);
}
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * Hash: 0xC485E07E4F0B7958 | ApiSet: undefined
 */
export function doorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    DoorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate);
}
/**
 * Hash: 0xDF97CDD4FC08FD34 | ApiSet: undefined
 */
export function doorSystemGetIsPhysicsLoaded(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return DoorSystemGetIsPhysicsLoaded(doorHash);
}
/**
 * Hash: 0x160AA1B32F6139B8 | ApiSet: undefined
 */
export function doorSystemGetDoorState(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return DoorSystemGetDoorState(doorHash);
}
/**
 * Lockstates not applied and CNetObjDoor's not created until [DOOR_SYSTEM_GET_IS_PHYSICS_LOADED](#\_0xDF97CDD4FC08FD34) returns true.
 * ### Door lock states: (v323)
 * *   **0**: UNLOCKED
 * *   **1**: LOCKED
 * *   **2**: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
 * *   **3**: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
 * *   **4**: DOORSTATE_FORCE_LOCKED_THIS_FRAME
 * *   **5**: DOORSTATE_FORCE_OPEN_THIS_FRAME
 * *   **6**: DOORSTATE_FORCE_CLOSED_THIS_FRAME
 * Hash: 0x6BAB9442830C7F53 | ApiSet: undefined
 */
export function doorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    DoorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate);
}
/**
 * Resets and brings back all the children of a fragment based object.
 * This should be used when attaching or detaching an object from another entity, especially when the object being detached consists of multiple fragments.
 * Attempting to teleport a fragment-based object using [`SET_ENTITY_COORDS`](#\_0x06843DA7060A026B) such as a flag object, will result in it remaining in place and failing to teleport, given the condition mentioned in the preceding statement.
 * The native should be executed after detaching the object from its parent entity and before calling [`SET_ENTITY_COORDS`](#\_0x06843DA7060A026B).
 * Example given down below.
 * Hash: 0xF9C1681347C8BD15 | ApiSet: undefined
 */
export function fixObjectFragment(object) {
    FixObjectFragment(object);
}
/**
 * Hash: 0x9BA001CB45CBF627 | ApiSet: undefined
 */
export function doorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    DoorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate);
}
/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * Hash: 0xD9B71952F78A2640 | ApiSet: undefined
 */
export function doorSystemSetHoldOpen(doorHash, toggle) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    DoorSystemSetHoldOpen(doorHash, toggle);
}
/**
 * ```
 * Sets the ajar angle of a door.
 * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
 * ```
 * Hash: 0xB6E6FBA95C7324AC | ApiSet: undefined
 */
export function doorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    DoorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate);
}
/**
 * Hash: 0xF2E1A7133DD356A6 | ApiSet: undefined
 */
export function enableSavingInGarage(garageHash, toggle) {
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    EnableSavingInGarage(garageHash, toggle);
}
/**
 * Hash: 0x163F8B586BC95F2A | ApiSet: undefined
 */
export function getCoordsAndRotationOfClosestObjectOfType(position, radius, modelHash, rotationOrder) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    const result = GetCoordsAndRotationOfClosestObjectOfType(position.x, position.y, position.z, radius, modelHash, rotationOrder);
    return [result[0], new Vector3(result[1], result[2], result[3]), new Vector3(result[2], result[3], result[4])];
}
/**
 * Hash: 0x758A5C1B3B1E1990 | ApiSet: undefined
 */
export function forcePickupRegenerate(p0) {
    ForcePickupRegenerate(p0);
}
/**
 * Calculates the world coordinates after applying the specified offsets to the given position, relative to a certain heading.
 * This native is similar to [`GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS`](#\_0x1899F328B0E12848), but uses a world position and heading as the reference point.
 * Hash: 0x163E252DE035A133 | ApiSet: undefined
 */
export function getOffsetFromCoordAndHeadingInWorldCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset) {
    return new Vector3(GetOffsetFromCoordAndHeadingInWorldCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset));
}
/**
 * Hash: 0xE84EB93729C5F36A | ApiSet: undefined
 */
export function getObjectTextureVariation(object) {
    return GetObjectTextureVariation(object);
}
/**
 * Hash: 0xB6FBFD079B8D0596 | ApiSet: undefined
 */
export function getObjectFragmentDamageHealth(p0, p1) {
    return GetObjectFragmentDamageHealth(p0, p1);
}
/**
 * ```
 * returns pickup hash.
 * ```
 * Hash: 0x5EAAD83F8CFB4575 | ApiSet: undefined
 */
export function getPickupHash(pickupHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    return GetPickupHash(pickupHash);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xD6429A016084F1A5 | ApiSet: undefined
 */
export function getPickupHashFromWeapon(weapon) {
    if (typeof weapon === 'string')
        weapon = this.getHashKey(weapon);
    return GetPickupHashFromWeapon(weapon);
}
/**
 * Hash: 0xB3ECA65C7317F174 | ApiSet: undefined
 */
export function getPickupGenerationRangeMultiplier() {
    return GetPickupGenerationRangeMultiplier();
}
/**
 * ```
 * Has 8 params in the latest patches.
 * isMission - if true doesn't return mission objects
 * ```
 * Hash: 0xE143FA2249364369 | ApiSet: undefined
 */
export function getClosestObjectOfType(position, radius, modelHash, isMission, p6, p7) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetClosestObjectOfType(position.x, position.y, position.z, radius, modelHash, isMission, p6, p7);
}
/**
 * Hash: 0x5099BC55630B25AE | ApiSet: undefined
 */
export function getPickupObject(pickup) {
    return GetPickupObject(pickup);
}
/**
 * ```
 * Example:
 * `OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");`
 * ```
 * Hash: 0xB48FCED898292E52 | ApiSet: undefined
 */
export function getRayfireMapObject(position, radius, name) {
    return GetRayfireMapObject(position.x, position.y, position.z, radius, name);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x43C677F1E1158005 | ApiSet: undefined
 */
export function getIsArenaPropPhysicsDisabled(entity, p1) {
    return GetIsArenaPropPhysicsDisabled(entity, p1);
}
/**
 * Hash: 0x225B8B35C88029B3 | ApiSet: undefined
 */
export function getPickupCoords(pickup) {
    return new Vector3(GetPickupCoords(pickup));
}
/**
 * ```
 * `object`: The des-object handle to get the animation progress from.
 * Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
 * ```
 * Hash: 0x260EE4FDBDF4DB01 | ApiSet: undefined
 */
export function getRayfireMapObjectAnimPhase(object) {
    return GetRayfireMapObjectAnimPhase(object);
}
/**
 * See [`SET_STATE_OF_RAYFIRE_MAP_OBJECT`](#\_0x5C29F698D404C5E1) to see the different states
 * Get a destructible object's state. Substract 1 to get the real state. For example, if the object just spawned (state 2), the native will return 3.
 * Hash: 0x899BA936634A322E | ApiSet: undefined
 */
export function getStateOfRayfireMapObject(object) {
    return GetStateOfRayfireMapObject(object);
}
/**
 * Hash: 0x6E16BC2503FF1FF0 | ApiSet: undefined
 */
export function getSafePickupCoords(position, p3, p4) {
    return new Vector3(GetSafePickupCoords(position.x, position.y, position.z, p3, p4));
}
/**
 * Hash: 0x08F96CA6C551AD51 | ApiSet: undefined
 */
export function getWeaponTypeFromPickupType(pickupHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    return GetWeaponTypeFromPickupType(pickupHash);
}
/**
 * Hash: 0x80EC48E6679313F9 | ApiSet: undefined
 */
export function hasPickupBeenCollected(pickup) {
    return HasPickupBeenCollected(pickup);
}
/**
 * ```
 * locked is 0 if no door is found
 * locked is 0 if door is unlocked
 * locked is 1 if door is found and unlocked.
 * -------------
 * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
 * ```
 * Hash: 0xEDC1A5B84AEF33FF | ApiSet: undefined
 */
export function getStateOfClosestDoorOfType(type, position) {
    if (typeof type === 'string')
        type = this.getHashKey(type);
    return GetStateOfClosestDoorOfType(type, position.x, position.y, position.z);
}
/**
 * Hash: 0x761B0E69AC4D007E | ApiSet: undefined
 */
export function hasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return HasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5);
}
/**
 * Hash: 0x397DC58FF00298D1 | ApiSet: undefined
 */
export function isAnyObjectNearPoint(position, range, p4) {
    return IsAnyObjectNearPoint(position.x, position.y, position.z, range, p4);
}
/**
 * Hash: 0x46494A2475701343 | ApiSet: undefined
 */
export function hasClosestObjectOfTypeBeenCompletelyDestroyed(position, radius, modelHash, p5) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return HasClosestObjectOfTypeBeenCompletelyDestroyed(position.x, position.y, position.z, radius, modelHash, p5);
}
/**
 * Hash: 0x867458251D47CCB2 | ApiSet: undefined
 */
export function hidePortablePickupWhenDetached(pickup, toggle) {
    HidePortablePickupWhenDetached(pickup, toggle);
}
/**
 * Hash: 0x673ED815D6E323B7 | ApiSet: undefined
 */
export function isAnyEntityEntirelyInsideGarage(garageHash, p1, p2, p3, p4) {
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    return IsAnyEntityEntirelyInsideGarage(garageHash, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x8ABFB70C49CC43E2 | ApiSet: undefined
 */
export function hasObjectBeenBroken(object) {
    return HasObjectBeenBroken(object);
}
/**
 * Hash: 0xC531EE8A1145A149 | ApiSet: undefined
 */
export function isDoorClosed(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return IsDoorClosed(doorHash);
}
/**
 * ```
 * `if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))`
 * {
 * `OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);`
 * }
 * ```
 * Hash: 0xC153C43EA202C8C1 | ApiSet: undefined
 */
export function isDoorRegisteredWithSystem(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return IsDoorRegisteredWithSystem(doorHash);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x0378C08504160D0D | ApiSet: undefined
 */
export function isObjectAPortablePickup(object) {
    return IsObjectAPortablePickup(object);
}
/**
 * Hash: 0xFC481C641EBBD27D | ApiSet: undefined
 */
export function isObjectAPickup(object) {
    return IsObjectAPickup(object);
}
/**
 * Hash: 0x90E47239EA1980B8 | ApiSet: undefined
 */
export function isGarageEmpty(garageHash, p1, p2) {
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    return IsGarageEmpty(garageHash, p1, p2);
}
/**
 * Hash: 0x372EF6699146A1E4 | ApiSet: undefined
 */
export function isObjectEntirelyInsideGarage(garageHash, entity, p2, p3) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    return IsObjectEntirelyInsideGarage(garageHash, _entity, p2, p3);
}
/**
 * Hash: 0xF0EED5A6BC7B237A | ApiSet: undefined
 */
export function isObjectPartiallyInsideGarage(garageHash, entity, p2) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    return IsObjectPartiallyInsideGarage(garageHash, _entity, p2);
}
/**
 * Hash: 0x8C90FE4B381BA60A | ApiSet: undefined
 */
export function isObjectNearPoint(objectHash, position, range) {
    if (typeof objectHash === 'string')
        objectHash = this.getHashKey(objectHash);
    return IsObjectNearPoint(objectHash, position.x, position.y, position.z, range);
}
/**
 * Hash: 0x8B32ACE6326A7546 | ApiSet: undefined
 */
export function isObjectVisible(object) {
    return IsObjectVisible(object);
}
/**
 * Hash: 0x11D1E53A726891FE | ApiSet: undefined
 */
export function isPickupWeaponObjectValid(object) {
    return IsPickupWeaponObjectValid(object);
}
/**
 * An **angled area** is an X-Z oriented rectangle with three parameters:
 * 1.  **origin**: the mid-point along a base edge of the rectangle;
 * 2.  **extent**: the mid-point of opposite base edge on the other Z;
 * 3.  **width**: the length of the base edge; (named derived from logging strings `CNetworkRoadNodeWorldStateData`).
 * The oriented rectangle can then be derived from the direction of the two points (`norm(origin - extent)`), its orthonormal, and the width, e.g:
 * 1.  [golf_mp](https://i.imgur.com/JhsQAK9.png)
 * 2.  [am_taxi](https://i.imgur.com/TJWCZaT.jpg)
 * Hash: 0x2A70BAE8883E4C81 | ApiSet: undefined
 */
export function isPointInAngledArea(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, p10, includez) {
    return IsPointInAngledArea(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, p10, includez);
}
/**
 * Hash: 0x1761DC5D8471CBAA | ApiSet: undefined
 */
export function isPlayerPartiallyInsideGarage(garageHash, player, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    return IsPlayerPartiallyInsideGarage(garageHash, _player, p2);
}
/**
 * ```
 * is this like setting is as no longer needed?
 * ```
 * Hash: 0xADBE4809F19F927A | ApiSet: undefined
 */
export function markObjectForDeletion(object) {
    MarkObjectForDeletion(object);
}
/**
 * Hash: 0x024A60DEB0EA69F0 | ApiSet: undefined
 */
export function isPlayerEntirelyInsideGarage(garageHash, player, p2, p3) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof garageHash === 'string')
        garageHash = this.getHashKey(garageHash);
    return IsPlayerEntirelyInsideGarage(garageHash, _player, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x006E4B040ED37EC3 | ApiSet: undefined
 */
export function _0x006E4B040ED37EC3(p0) {
    Citizen.invokeNative('0x006E4B040ED37EC3', p0);
}
/**
 * Hash: 0x0596843B34B95CE5 | ApiSet: undefined
 */
export function _0x0596843B34B95CE5(p0, p1) {
    Citizen.invokeNative('0x0596843B34B95CE5', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x1A6CBB06E2D0D79D | ApiSet: undefined
 */
export function _0x1A6CBB06E2D0D79D(p0, p1) {
    Citizen.invokeNative('0x1A6CBB06E2D0D79D', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x1C57C94A6446492A | ApiSet: undefined
 */
export function _0x1C57C94A6446492A(p0, p1) {
    Citizen.invokeNative('0x1C57C94A6446492A', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x2542269291C6AC84 | ApiSet: undefined
 */
export function _0x2542269291C6AC84(p0) {
    return Citizen.invokeNative('0x2542269291C6AC84', p0);
}
/**
 * Hash: 0x394CD08E31313C28 | ApiSet: undefined
 */
export function _0x394CD08E31313C28() {
    Citizen.invokeNative('0x394CD08E31313C28');
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x31574B1B41268673 | ApiSet: undefined
 */
export function _0x31574B1B41268673(p0, p1) {
    Citizen.invokeNative('0x31574B1B41268673', p0, p1);
}
/**
 * Hash: 0x1E3F1B1B891A2AAA | ApiSet: undefined
 */
export function _0x1E3F1B1B891A2AAA(p0, p1) {
    Citizen.invokeNative('0x1E3F1B1B891A2AAA', p0, p1);
}
/**
 * Hash: 0x31F924B53EADDF65 | ApiSet: undefined
 */
export function _0x31F924B53EADDF65(p0) {
    Citizen.invokeNative('0x31F924B53EADDF65', p0);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x3BD770D281982DB5 | ApiSet: undefined
 */
export function _0x3BD770D281982DB5(p0, p1) {
    return Citizen.invokeNative('0x3BD770D281982DB5', p0, p1);
}
/**
 * ```
 * NativeDB Removed Parameter 3: int R
 * NativeDB Removed Parameter 4: int G
 * NativeDB Removed Parameter 5: int B
 * NativeDB Introduced: v757
 * ```
 * Hash: 0x3B2FD68DB5F8331C | ApiSet: undefined
 */
export function _0x3B2FD68DB5F8331C(object, toggle, R, G, B) {
    Citizen.invokeNative('0x3B2FD68DB5F8331C', object, toggle, R, G, B);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x27F248C3FEBFAAD3 | ApiSet: undefined
 */
export function _0x27F248C3FEBFAAD3(p0, p1) {
    Citizen.invokeNative('0x27F248C3FEBFAAD3', p0, p1);
}
/**
 * Hash: 0x46F3ADD1E2D5BAF2 | ApiSet: undefined
 */
export function _0x46F3ADD1E2D5BAF2(p0, p1) {
    Citizen.invokeNative('0x46F3ADD1E2D5BAF2', p0, p1);
}
/**
 * Hash: 0x39A5FB7EAF150840 | ApiSet: undefined
 */
export function _0x39A5FB7EAF150840(p0, p1) {
    Citizen.invokeNative('0x39A5FB7EAF150840', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x4C134B4DF76025D0 | ApiSet: undefined
 */
export function _0x4C134B4DF76025D0(p0, p1) {
    Citizen.invokeNative('0x4C134B4DF76025D0', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x63ECF581BC70E363 | ApiSet: undefined
 */
export function _0x63ECF581BC70E363(p0, p1) {
    Citizen.invokeNative('0x63ECF581BC70E363', p0, p1);
}
/**
 * Hash: 0x641F272B52E2F0F8 | ApiSet: undefined
 */
export function _0x641F272B52E2F0F8(p0, p1) {
    Citizen.invokeNative('0x641F272B52E2F0F8', p0, p1);
}
/**
 * Hash: 0x66A49D021870FE88 | ApiSet: undefined
 */
export function _0x66A49D021870FE88() {
    Citizen.invokeNative('0x66A49D021870FE88');
}
/**
 * Hash: 0x762DB2D380B48D04 | ApiSet: undefined
 */
export function _0x762DB2D380B48D04(p0) {
    Citizen.invokeNative('0x762DB2D380B48D04', p0);
}
/**
 * Hash: 0x62454A641B41F3C5 | ApiSet: undefined
 */
export function _0x62454A641B41F3C5(p0) {
    Citizen.invokeNative('0x62454A641B41F3C5', p0);
}
/**
 * Hash: 0x826D1EE4D1CAFC78 | ApiSet: undefined
 */
export function _0x826D1EE4D1CAFC78(p0, p1) {
    Citizen.invokeNative('0x826D1EE4D1CAFC78', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x659F9D71F52843F8 | ApiSet: undefined
 */
export function _0x659F9D71F52843F8(p0, p1) {
    Citizen.invokeNative('0x659F9D71F52843F8', p0, p1);
}
/**
 * Clears the fields sets by [N\_0xc7f29ca00f46350e](#\_0xC7F29CA00F46350E) (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
 * Related to its "Pre-networked state"?
 * Hash: 0x701FDA1E82076BA4 | ApiSet: undefined
 */
export function _0x701FDA1E82076BA4() {
    Citizen.invokeNative('0x701FDA1E82076BA4');
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x834344A414C7C85D | ApiSet: undefined
 */
export function _0x834344A414C7C85D(p0, p1) {
    Citizen.invokeNative('0x834344A414C7C85D', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x734E1714D077DA9A | ApiSet: undefined
 */
export function _0x734E1714D077DA9A(p0, p1) {
    Citizen.invokeNative('0x734E1714D077DA9A', p0, p1);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x8881C98A31117998 | ApiSet: undefined
 */
export function _0x8881C98A31117998(p0) {
    Citizen.invokeNative('0x8881C98A31117998', p0);
}
/**
 * SET_PICKUP_\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x7813E8B8C4AE4799 | ApiSet: undefined
 */
export function _0x7813E8B8C4AE4799(pickup) {
    Citizen.invokeNative('0x7813E8B8C4AE4799', pickup);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x8DCA505A5C196F05 | ApiSet: undefined
 */
export function _0x8DCA505A5C196F05(p0, p1) {
    Citizen.invokeNative('0x8DCA505A5C196F05', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v757
 * ```
 * Hash: 0x8CFF648FBD7330F1 | ApiSet: undefined
 */
export function _0x8CFF648FBD7330F1(p0) {
    Citizen.invokeNative('0x8CFF648FBD7330F1', p0);
}
/**
 * Hash: 0x8CAAB2BD3EA58BD4 | ApiSet: undefined
 */
export function _0x8CAAB2BD3EA58BD4(p0) {
    Citizen.invokeNative('0x8CAAB2BD3EA58BD4', p0);
}
/**
 * Hash: 0x858EC9FD25DE04AA | ApiSet: undefined
 */
export function _0x858EC9FD25DE04AA(p0, p1) {
    Citizen.invokeNative('0x858EC9FD25DE04AA', p0, p1);
}
/**
 * Some property related to gates. Native name between `DOOR_SYSTEM_SET_AUTOMATIC_RATE` and `DOOR_SYSTEM_SET_DOOR_STATE`.
 * Hash: 0xA85A21582451E951 | ApiSet: undefined
 */
export function _0xA85A21582451E951(doorHash, p1) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    Citizen.invokeNative('0xA85A21582451E951', doorHash, p1);
}
/**
 * ```
 * CLEAR_*
 * ```
 * Hash: 0xA2C1F5E92AFE49ED | ApiSet: undefined
 */
export function _0xA2C1F5E92AFE49ED() {
    Citizen.invokeNative('0xA2C1F5E92AFE49ED');
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xADF084FB8F075D06 | ApiSet: undefined
 */
export function _0xADF084FB8F075D06(p0) {
    return Citizen.invokeNative('0xADF084FB8F075D06', p0);
}
/**
 * Hash: 0xA08FE5E49BDC39DD | ApiSet: undefined
 */
export function _0xA08FE5E49BDC39DD(p0, p1, p2) {
    Citizen.invokeNative('0xA08FE5E49BDC39DD', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xB5B7742424BD4445 | ApiSet: undefined
 */
export function _0xB5B7742424BD4445(p0, p1) {
    Citizen.invokeNative('0xB5B7742424BD4445', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xAA059C615DE9DD03 | ApiSet: undefined
 */
export function _0xAA059C615DE9DD03(p0, p1) {
    Citizen.invokeNative('0xAA059C615DE9DD03', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xAFE24E4D29249E4A | ApiSet: undefined
 */
export function _0xAFE24E4D29249E4A(object, p1, p2, p3) {
    return Citizen.invokeNative('0xAFE24E4D29249E4A', object, p1, p2, p3);
}
/**
 * ```
 * Clears all areas created by 0xD4A7A435B3710D05
 * CLEAR_*
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xB7C6D80FB371659A | ApiSet: undefined
 */
export function _0xB7C6D80FB371659A() {
    Citizen.invokeNative('0xB7C6D80FB371659A');
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xBFFE53AE7E67FCDC | ApiSet: undefined
 */
export function _0xBFFE53AE7E67FCDC(p0, p1) {
    Citizen.invokeNative('0xBFFE53AE7E67FCDC', p0, p1);
}
/**
 * Hash: 0xB2D0BDE54F0E8E5A | ApiSet: undefined
 */
export function _0xB2D0BDE54F0E8E5A(object, toggle) {
    Citizen.invokeNative('0xB2D0BDE54F0E8E5A', object, toggle);
}
/**
 * Hash: 0xEB6F1A9B5510A5D2 | ApiSet: undefined
 */
export function _0xEB6F1A9B5510A5D2(p0, p1) {
    Citizen.invokeNative('0xEB6F1A9B5510A5D2', p0, p1);
}
/**
 * Hash: 0xC6033D32241F6FB5 | ApiSet: undefined
 */
export function _0xC6033D32241F6FB5(object, toggle) {
    Citizen.invokeNative('0xC6033D32241F6FB5', object, toggle);
}
/**
 * See [`N_0x701fda1e82076ba4`](#\_0x701FDA1E82076BA4).
 * Hash: 0xC7F29CA00F46350E | ApiSet: undefined
 */
export function _0xC7F29CA00F46350E(p0) {
    Citizen.invokeNative('0xC7F29CA00F46350E', p0);
}
/**
 * Hash: 0x58A850EAEE20FAA3 | ApiSet: undefined
 */
export function placeObjectOnGroundProperly(object) {
    return PlaceObjectOnGroundProperly(object);
}
/**
 * ```
 * Adds an area that seems to be related to pickup physics behavior.
 * Max amount of areas is 10. Only works in multiplayer.
 * ADD_*
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xD4A7A435B3710D05 | ApiSet: undefined
 */
export function _0xD4A7A435B3710D05(position, radius) {
    Citizen.invokeNative('0xD4A7A435B3710D05', position.x, position.y, position.z, radius);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xD05A3241B9A86F19 | ApiSet: undefined
 */
export function _0xD05A3241B9A86F19(p0, p1) {
    Citizen.invokeNative('0xD05A3241B9A86F19', p0, p1);
}
/**
 * Pickup hashes can be found [here](https://gist.github.com/4mmonium/1eabfb6b3996e3aa6b9525a3eccf8a0b).
 * Hash: 0x27F9D613092159CF | ApiSet: undefined
 */
export function removeAllPickupsOfType(pickupHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    RemoveAllPickupsOfType(pickupHash);
}
/**
 * Hash: 0xF92099527DB8E2A7 | ApiSet: undefined
 */
export function _0xF92099527DB8E2A7(p0, p1) {
    Citizen.invokeNative('0xF92099527DB8E2A7', p0, p1);
}
/**
 * Hash: 0xDB41D07A45A6D4B7 | ApiSet: undefined
 */
export function _0xDB41D07A45A6D4B7(p0) {
    return Citizen.invokeNative('0xDB41D07A45A6D4B7', p0);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xE05F6AEEFEB0BB02 | ApiSet: undefined
 */
export function _0xE05F6AEEFEB0BB02(p0, p1, p2) {
    Citizen.invokeNative('0xE05F6AEEFEB0BB02', p0, p1, p2);
}
/**
 * Casts a ray downward from the object's position and places the object on the surface it hits (including world surface and objects). Use [`PLACE_OBJECT_ON_GROUND_PROPERLY`](#\_0x58A850EAEE20FAA3) to not include objects when determining the surface.
 * Hash: 0xD76EEEF746057FD6 | ApiSet: undefined
 */
export function placeObjectOnGroundOrObjectProperly(object) {
    return PlaceObjectOnGroundOrObjectProperly(object);
}
/**
 * A\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xFDC07C58E8AAB715 | ApiSet: undefined
 */
export function _0xFDC07C58E8AAB715(pickupHash) {
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    Citizen.invokeNative('0xFDC07C58E8AAB715', pickupHash);
}
/**
 * ```
 * draws circular marker at pos
 * -1 = none
 * 0 = red
 * 1 = green
 * 2 = blue
 * 3 = green larger
 * 4 = nothing
 * 5 = green small
 * ```
 * Hash: 0x3430676B11CDF21D | ApiSet: undefined
 */
export function renderFakePickupGlow(position, colorIndex) {
    RenderFakePickupGlow(position.x, position.y, position.z, colorIndex);
}
/**
 * ```
 * Requires a component_at_*_flsh to be attached to the weapon object
 * ```
 * Hash: 0xBCE595371A5FBAAF | ApiSet: undefined
 */
export function setCreateWeaponObjectLightSource(object, toggle) {
    SetCreateWeaponObjectLightSource(object, toggle);
}
/**
 * CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
 * Only its NetObj removed and flag `*(v2 + 192) |= 8u` (1604 retail) toggled.
 * Hash: 0x464D8E1427156FE4 | ApiSet: undefined
 */
export function removeDoorFromSystem(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    RemoveDoorFromSystem(doorHash);
}
/**
 * Hash: 0x92AEFB5F6E294023 | ApiSet: undefined
 */
export function preventCollectionOfPortablePickup(object, p1, p2) {
    PreventCollectionOfPortablePickup(object, p1, p2);
}
/**
 * Hash: 0x406137F8EF90EAF5 | ApiSet: undefined
 */
export function setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object, toggle) {
    SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(object, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xB20834A7DD3D8896 | ApiSet: undefined
 */
export function setEnableArenaPropPhysicsOnPed(entity, toggle, p2, ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetEnableArenaPropPhysicsOnPed(entity, toggle, p2, _ped);
}
/**
 * Hash: 0x3288D8ACAECD2AB2 | ApiSet: undefined
 */
export function removePickup(pickup) {
    RemovePickup(pickup);
}
/**
 * ```
 * Maximum amount of pickup models that can be disallowed is 30.
 * SET_LOCAL_PLAYER_*
 * ```
 * Hash: 0x88EAEC617CD26926 | ApiSet: undefined
 */
export function setLocalPlayerCanUsePickupsWithThisModel(modelHash, toggle) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    SetLocalPlayerCanUsePickupsWithThisModel(modelHash, toggle);
}
/**
 * Hash: 0x4A39DB43E47CF3AA | ApiSet: undefined
 */
export function removeObjectHighDetailModel(object) {
    RemoveObjectHighDetailModel(object);
}
/**
 * ```
 * Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
 * ```
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x911024442F4898F0 | ApiSet: undefined
 */
export function setEnableArenaPropPhysics(entity, toggle, p2) {
    SetEnableArenaPropPhysics(entity, toggle, p2);
}
/**
 * Hash: 0xF538081986E49E9D | ApiSet: undefined
 */
export function setForceObjectThisFrame(position, p3) {
    SetForceObjectThisFrame(position.x, position.y, position.z, p3);
}
/**
 * Hash: 0x0BF3B3BD47D79C08 | ApiSet: undefined
 */
export function setMaxNumPortablePickupsCarriedByPlayer(modelHash, p1) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    SetMaxNumPortablePickupsCarriedByPlayer(modelHash, p1);
}
/**
 * ```
 * Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
 * ```
 * Hash: 0x4D89D607CB3DD1D2 | ApiSet: undefined
 */
export function setObjectAllowLowLodBuoyancy(object, toggle) {
    SetObjectAllowLowLodBuoyancy(object, toggle);
}
/**
 * Hash: 0x78857FC65CADB909 | ApiSet: undefined
 */
export function setLocalPlayerCanCollectPortablePickups(p0) {
    SetLocalPlayerCanCollectPortablePickups(p0);
}
/**
 * Sets color of embedded light source.
 * Only appears in am_mp_nightclub.c for the nightclub dancefloor.
 * Not sure what p1 does, seems to only ever be '1' in scripts.
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x5F048334B4A4E774 | ApiSet: undefined
 */
export function setObjectLightColor(object, p1, r, g, b) {
    return SetObjectLightColor(object, p1, r, g, b);
}
/**
 * ```
 * `rage::phArchetypeDamp`
 * p9: Some phBoundGeometry margin value, limited to (0.0, 0.1) exclusive.
 * ```
 * Hash: 0xF6DF6E90DE7DF90F | ApiSet: undefined
 */
export function setObjectPhysicsParams(object, mass, gravityFactor, linearC, linearV, linearV2, angularC, angularV, angularV2, p9, maxAngSpeed, buoyancyFactor) {
    SetObjectPhysicsParams(object, mass, gravityFactor, linearC, linearV, linearV2, angularC, angularV, angularV2, p9, maxAngSpeed, buoyancyFactor);
}
/**
 * Hash: 0xDF6CA0330F2E737B | ApiSet: undefined
 */
export function setObjectStuntPropDuration(object, duration) {
    SetObjectStuntPropDuration(object, duration);
}
/**
 * Overrides a flag on the object which determines if the object should be avoided by a vehicle in task: CTaskVehicleGoToPointWithAvoidanceAutomobile.
 * Tested on vehicles that were created by the vehicle generators.
 * Hash: 0x77F33F2CCF64B3AA | ApiSet: undefined
 */
export function setObjectForceVehiclesToAvoid(object, toggle) {
    SetObjectForceVehiclesToAvoid(object, toggle);
}
/**
 * Hash: 0x8A7391690F5AFD81 | ApiSet: undefined
 */
export function setObjectTargettable(object, targettable) {
    SetObjectTargettable(object, targettable);
}
/**
 * Hash: 0xB39F03368DB0CAA2 | ApiSet: undefined
 */
export function setObjectTargettableByPlayer(object, setFlag34, setFlag35) {
    SetObjectTargettableByPlayer(object, setFlag34, setFlag35);
}
/**
 * Sets the intensity of Speed Boost and Slow Down props.
 * The corresponding values for Speed Boosts in the Creator are:\
 * Weak: `15`\
 * Normal: `25`\
 * Strong: `35`\
 * Extra Strong: `45`\
 * Ultra Strong: `100`
 * For Slow Downs:\
 * Weak: `44`\
 * Normal: `30`\
 * Strong: `16`
 * Hash: 0x96EE0EBA0163DF80 | ApiSet: undefined
 */
export function setObjectStuntPropSpeedup(object, intensity) {
    SetObjectStuntPropSpeedup(object, intensity);
}
/**
 * ```cpp
 * enum eObjectPaintVariants
 * {
 * Pacific = 0,
 * Azure = 1,
 * Nautical = 2,
 * Continental = 3,
 * Battleship = 4,
 * Intrepid = 5,
 * Uniform = 6,
 * Classico = 7,
 * Mediterranean = 8,
 * Command = 9,
 * Mariner = 10,
 * Ruby = 11,
 * Vintage = 12,
 * Pristine = 13,
 * Merchant = 14,
 * Voyager = 15
 * };
 * ```
 * Hash: 0x971DA0055324D033 | ApiSet: undefined
 */
export function setObjectTextureVariation(object, textureVariation) {
    SetObjectTextureVariation(object, textureVariation);
}
/**
 * Hash: 0x78015C9B4B3ECC9D | ApiSet: undefined
 */
export function setPickupRegenerationTime(pickup, duration) {
    SetPickupRegenerationTime(pickup, duration);
}
/**
 * Hash: 0x318516E02DE3ECE2 | ApiSet: undefined
 */
export function setPickupGenerationRangeMultiplier(multiplier) {
    SetPickupGenerationRangeMultiplier(multiplier);
}
/**
 * ```
 * Hardcoded to not work in multiplayer.
 * Used to lock/unlock doors to interior areas of the game.
 * (Possible) Door Types:
 * pastebin.com/9S2m3qA4
 * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
 * Locked means that the heading is locked.
 * p6 is always 0.
 * 225 door types, model names and coords found in stripclub.c4:
 * pastebin.com/gywnbzsH
 * get door info: pastebin.com/i14rbekD
 * ```
 * Hash: 0xF82D8F1926A02C3D | ApiSet: undefined
 */
export function setStateOfClosestDoorOfType(type, position, locked, heading, p6) {
    if (typeof type === 'string')
        type = this.getHashKey(type);
    SetStateOfClosestDoorOfType(type, position.x, position.y, position.z, locked, heading, p6);
}
/**
 * Hash: 0x3ED2B83AB2E82799 | ApiSet: undefined
 */
export function setPickupHiddenWhenUncollectable(p0, p1) {
    SetPickupHiddenWhenUncollectable(p0, p1);
}
/**
 * Hash: 0x1C1B69FAE509BA97 | ApiSet: undefined
 */
export function setPickupUncollectable(p0, p1) {
    SetPickupUncollectable(p0, p1);
}
/**
 * ```
 * Defines the state of a destructible object.
 * Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
 * State 2 == object just spawned
 * State 4 == Beginning of the animation
 * State 6 == Start animation
 * State 9 == End of the animation
 * ```
 * Hash: 0x5C29F698D404C5E1 | ApiSet: undefined
 */
export function setStateOfRayfireMapObject(object, state) {
    SetStateOfRayfireMapObject(object, state);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0xABDABF4E1EDECBFA | ApiSet: undefined
 */
export function setUnkGlobalBoolRelatedToDamage(value) {
    SetUnkGlobalBoolRelatedToDamage(value);
}
/**
 * Hash: 0xF12E33034D887F66 | ApiSet: undefined
 */
export function setTextureVariationOfClosestObjectOfType(position, radius, modelHash, textureVariation) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return SetTextureVariationOfClosestObjectOfType(position.x, position.y, position.z, radius, modelHash, textureVariation);
}
/**
 * Hash: 0xB252BC036B525623 | ApiSet: undefined
 */
export function trackObjectVisibility(object) {
    TrackObjectVisibility(object);
}
/**
 * ```
 * Disabling/enabling a player from getting pickups. From the scripts:
 * `OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
 * `OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
 * `OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);`
 * `OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);`
 * `OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);`
 * `OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);`
 * SET_PLAYER_*
 * ```
 * Hash: 0x616093EC6B139DD9 | ApiSet: undefined
 */
export function toggleUsePickupsForPlayer(player, pickupHash, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof pickupHash === 'string')
        pickupHash = this.getHashKey(pickupHash);
    ToggleUsePickupsForPlayer(_player, pickupHash, toggle);
}
/**
 * Hash: 0x53E0DF1A2A3CF0CA | ApiSet: undefined
 */
export function setTeamPickupObject(object, p1, p2) {
    SetTeamPickupObject(object, p1, p2);
}
/**
 * ```
 * Returns true if the object has finished moving.
 * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
 * See also: https://gtagmodding.com/opcode-database/opcode/034E/
 * Has to be looped until it returns true.
 * ```
 * Hash: 0x2FDFF4107B8C1147 | ApiSet: undefined
 */
export function slideObject(object, toX, toY, toZ, speedX, speedY, speedZ, collision) {
    return SlideObject(object, toX, toY, toZ, speedX, speedY, speedZ, collision);
}
/**
 * Hash: 0x387EAD7EE42F6685 | ApiSet: undefined
 */
export function addNavmeshRequiredRegion(x, y, radius) {
    AddNavmeshRequiredRegion(x, y, radius);
}
/**
 * Hash: 0x8415D95B194A3AEA | ApiSet: undefined
 */
export function areAllNavmeshRegionsLoaded() {
    return AreAllNavmeshRegionsLoaded();
}
/**
 * Hash: 0xF7B79A50B905A30D | ApiSet: undefined
 */
export function areNodesLoadedForArea(x1, y1, x2, y2) {
    return AreNodesLoadedForArea(x1, y1, x2, y2);
}
/**
 * Creates a navmesh blocking object, vehicles will avoid driving through this area.
 * Only 32 blocking objects may exist at a given time and must be manually managed. See [`REMOVE_NAVMESH_BLOCKING_OBJECT`](#\_0x46399A7895957C0E) and [`onResourceStop`](https://docs.fivem.net/docs/scripting-reference/events/list/onResourceStop/)
 * ```cpp
 * enum eBlockingObjectFlags {
 * // Default Flag
 * BLOCKING_OBJECT_DEFAULT = 0,
 * // Blocking object will block wander paths
 * BLOCKING_OBJECT_WANDERPATH = 1,
 * // Blocking object will block (regular) shortest-paths
 * BLOCKING_OBJECT_SHORTESTPATH = 2,
 * // Blocking object will block flee paths
 * BLOCKING_OBJECT_FLEEPATH = 4,
 * // Blocking object will block all paths
 * BLOCKING_OBJECT_ALLPATHS = 7,
 * }
 * ```
 * Hash: 0xFCD5C8E06E502F5A | ApiSet: undefined
 */
export function addNavmeshBlockingObject(position, width, length, height, heading, bPermanent, flags) {
    return AddNavmeshBlockingObject(position.x, position.y, position.z, width, length, height, heading, bPermanent, flags);
}
/**
 * Calculates the travel distance between a set of points.
 * Doesn't seem to correlate with distance on gps sometimes.
 * This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
 * Hash: 0xADD95C7005C4A197 | ApiSet: undefined
 */
export function calculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2) {
    return CalculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);
}
/**
 * Clears a disabled GPS route area from a certain index previously set using [`SET_GPS_DISABLED_ZONE_AT_INDEX`](#\_0xD0BC1C6FB18EE154).
 * Hash: 0x2801D0012266DF07 | ApiSet: undefined
 */
export function clearGpsDisabledZoneAtIndex(index) {
    ClearGpsDisabledZoneAtIndex(index);
}
/**
 * Same as [`GET_CLOSEST_VEHICLE_NODE`](#\_0x240A18690AE96513), but with the node flag `GCNF_INCLUDE_SWITCHED_OFF_NODES` set.
 * Hash: 0x2EABE3B06F58C1BE | ApiSet: undefined
 */
export function getClosestMajorVehicleNode(position, zMeasureMult, zTolerance) {
    const result = GetClosestMajorVehicleNode(position.x, position.y, position.z, zMeasureMult, zTolerance);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Use this if you want to completely disable a large area of navmesh.
 * For smaller areas, use [`ADD_NAVMESH_BLOCKING_OBJECT`](#\_0xFCD5C8E06E502F5A) instead.
 * Hash: 0x4C8872D8CDBE1B8B | ApiSet: undefined
 */
export function disableNavmeshInArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ, bDisable) {
    DisableNavmeshInArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ, bDisable);
}
/**
 * ```
 * p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
 * distToNxJunction seems to be the distance in metres * 10.0f
 * direction:
 * 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
 * 1 = Route is being calculated or the player is going in the wrong direction
 * 2 = Please Proceed the Highlighted Route
 * 3 = In (distToNxJunction) Turn Left
 * 4 = In (distToNxJunction) Turn Right
 * 5 = In (distToNxJunction) Keep Straight
 * 6 = In (distToNxJunction) Turn Sharply To The Left
 * 7 = In (distToNxJunction) Turn Sharply To The Right
 * 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
 * return value set to 0 always
 * ```
 * Hash: 0xF90125F1F79ECDF8 | ApiSet: undefined
 */
export function generateDirectionsToCoord(position, p3) {
    return GenerateDirectionsToCoord(position.x, position.y, position.z, p3);
}
/**
 * Finds an edge (node connection to another node) that satisfies the specified criteria.
 * Hash: 0x132F52BBA570FE92 | ApiSet: undefined
 */
export function getClosestRoad(position, minimumEdgeLength, minimumLaneCount, onlyMajorRoads) {
    const result = GetClosestRoad(position.x, position.y, position.z, minimumEdgeLength, minimumLaneCount, onlyMajorRoads);
    return [result[0], new Vector3(result[1], result[2], result[3]), new Vector3(result[2], result[3], result[4]), result[3], result[4], result[5]];
}
/**
 * Same as [`GET_CLOSEST_VEHICLE_NODE`](#\_0x240A18690AE96513), but with the node flag `GCNF_GET_HEADING` set, causing the native to also return the heading.
 * Hash: 0xFF071FB798B803B0 | ApiSet: undefined
 */
export function getClosestVehicleNodeWithHeading(position, nodeFlags, zMeasureMult, zTolerance) {
    const result = GetClosestVehicleNodeWithHeading(position.x, position.y, position.z, nodeFlags, zMeasureMult, zTolerance);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * Hash: 0x0EAEB0DB4B132399 | ApiSet: undefined
 */
export function doesNavmeshBlockingObjectExist(p0) {
    return DoesNavmeshBlockingObjectExist(p0);
}
/**
 * ```
 * Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
 * ```
 * Hash: 0x3599D741C9AC6310 | ApiSet: undefined
 */
export function getHeightmapBottomZForArea(x1, y1, x2, y2) {
    return GetHeightmapBottomZForArea(x1, y1, x2, y2);
}
/**
 * ```cpp
 * enum eGetClosestNodeFlags {
 * GCNF_INCLUDE_SWITCHED_OFF_NODES = 1,
 * GCNF_INCLUDE_BOAT_NODES = 2,
 * GCNF_IGNORE_SLIPLANES = 4,
 * GCNF_IGNORE_SWITCHED_OFF_DEADENDS = 8,
 * GCNF_GET_HEADING = 256,
 * GCNF_FAVOUR_FACING = 512
 * }
 * ```
 * Hash: 0x240A18690AE96513 | ApiSet: undefined
 */
export function getClosestVehicleNode(position, nodeFlags, zMeasureMult, zTolerance) {
    const result = GetClosestVehicleNode(position.x, position.y, position.z, nodeFlags, zMeasureMult, zTolerance);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * ```
 * Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
 * ```
 * Hash: 0x8ABE8608576D9CE3 | ApiSet: undefined
 */
export function getHeightmapTopZForArea(x1, y1, x2, y2) {
    return GetHeightmapTopZForArea(x1, y1, x2, y2);
}
/**
 * Hash: 0xBBB45C3CF5C8AA85 | ApiSet: undefined
 */
export function getGpsBlipRouteLength() {
    return GetGpsBlipRouteLength();
}
/**
 * Hash: 0x869DAACBBE9FA006 | ApiSet: undefined
 */
export function getGpsBlipRouteFound() {
    return GetGpsBlipRouteFound();
}
/**
 * ```
 * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
 * ```
 * Hash: 0x336511A34F2E5185 | ApiSet: undefined
 */
export function getHeightmapBottomZForPosition(x, y) {
    return GetHeightmapBottomZForPosition(x, y);
}
/**
 * Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
 * ```
 * NativeDB Removed Parameter 1: int index
 * ```
 * Hash: 0xD3A6A0EF48823A8C | ApiSet: undefined
 */
export function getNextGpsDisabledZoneIndex(index) {
    return GetNextGpsDisabledZoneIndex(index);
}
/**
 * Same as [`GET_CLOSEST_VEHICLE_NODE`](#\_0x240A18690AE96513), but returns the nth closest node instead of the first.
 * Hash: 0xE50E52416CCF948B | ApiSet: undefined
 */
export function getNthClosestVehicleNode(position, nthClosest, nodeFlags, zMeasureMult, zTolerance) {
    const result = GetNthClosestVehicleNode(position.x, position.y, position.z, nthClosest, nodeFlags, zMeasureMult, zTolerance);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0x6448050E9C2A7207 | ApiSet: undefined
 */
export function getNthClosestVehicleNodeIdWithHeading(position, nthClosest, nodeFlags, zMeasureMult, zTolerance) {
    const result = GetNthClosestVehicleNodeIdWithHeading(position.x, position.y, position.z, nthClosest, nodeFlags, zMeasureMult, zTolerance);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * Like [`GET_CLOSEST_VEHICLE_NODE_WITH_HEADING`](#\_0xFF071FB798B803B0), but returns the nth closest node instead of the first.
 * Hash: 0x45905BE8654AE067 | ApiSet: undefined
 */
export function getNthClosestVehicleNodeFavourDirection(position, desiredX, desiredY, desiredZ, nthClosest, nodeFlags, zMeasureMult, zTolerance) {
    const result = GetNthClosestVehicleNodeFavourDirection(position.x, position.y, position.z, desiredX, desiredY, desiredZ, nthClosest, nodeFlags, zMeasureMult, zTolerance);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * ```
 * Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
 * ```
 * Hash: 0x29C24BFBED8AB8FB | ApiSet: undefined
 */
export function getHeightmapTopZForPosition(x, y) {
    return GetHeightmapTopZForPosition(x, y);
}
/**
 * Hash: 0x01708E8DD3FF8C65 | ApiSet: undefined
 */
export function getNumNavmeshesExistingInArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ) {
    return GetNumNavmeshesExistingInArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ);
}
/**
 * Hash: 0x16F46FB18C8009E4 | ApiSet: undefined
 */
export function getPointOnRoadSide(position, p3) {
    const result = GetPointOnRoadSide(position.x, position.y, position.z, p3);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0x22D7275A79FE8215 | ApiSet: undefined
 */
export function getNthClosestVehicleNodeId(position, nthClosest, nodeFlags, zMeasureMult, zTolerance) {
    return GetNthClosestVehicleNodeId(position.x, position.y, position.z, nthClosest, nodeFlags, zMeasureMult, zTolerance);
}
/**
 * Get the nth closest vehicle node with its heading and total lane count. If you need specific forward and backward lane counts use [`GET_CLOSEST_ROAD`](#\_0x132F52BBA570FE92).
 * Hash: 0x80CA6A8B6C094CC4 | ApiSet: undefined
 */
export function getNthClosestVehicleNodeWithHeading(position, nthClosest, nodeFlags, zMeasureMult, zTolerance) {
    const result = GetNthClosestVehicleNodeWithHeading(position.x, position.y, position.z, nthClosest, nodeFlags, zMeasureMult, zTolerance);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2], result[3]];
}
/**
 * Hash: 0xA0F8A7517A273C05 | ApiSet: undefined
 */
export function getRoadBoundaryUsingHeading(position, heading) {
    const result = GetRoadBoundaryUsingHeading(position.x, position.y, position.z, heading);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Native to get a position along current player GPS route using supplied slot.
 * This native was previously named `GET_GPS_WAYPOINT_ROUTE_END`, but its named changed.
 * ```cpp
 * enum eGpsSlotType {
 * GPS_SLOT_WAYPOINT = 0,
 * GPS_SLOT_RADAR_BLIP = 1,
 * GPS_SLOT_DISCRETE = 2
 * }
 * ```
 * Hash: 0xF3162836C28F9DA5 | ApiSet: undefined
 */
export function getPosAlongGpsTypeRoute(bStartAtPlayerPos, fDistanceAlongRoute, slotType) {
    const result = GetPosAlongGpsTypeRoute(bStartAtPlayerPos, fDistanceAlongRoute, slotType);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0x93E0DB8440B73A7D | ApiSet: undefined
 */
export function getRandomVehicleNode(position, radius, p4, p5, p6) {
    const result = GetRandomVehicleNode(position.x, position.y, position.z, radius, p4, p5, p6);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * ```cpp
 * enum eSafePositionFlags {
 * // Only navmesh polygons marked as pavement
 * GSC_FLAG_ONLY_PAVEMENT = 1,
 * // Only navmesh polygons not marked as "isolated"
 * GSC_FLAG_NOT_ISOLATED = 2,
 * // No navmesh polygons created from interiors
 * GSC_FLAG_NOT_INTERIOR = 4,
 * // No navmesh polygons marked as water
 * GSC_FLAG_NOT_WATER = 8,
 * // Only navmesh polygons marked as "network spawn candidate"
 * GSC_FLAG_ONLY_NETWORK_SPAWN = 16,
 * // Specify whether to use a flood-fill from the starting position, as opposed to scanning all polygons within the search volume
 * GSC_FLAG_USE_FLOOD_FILL = 32
 * }
 * ```
 * Hash: 0xB61C8E878A4199CA | ApiSet: undefined
 */
export function getSafeCoordForPed(position, onlyOnPavement, flags) {
    const result = GetSafeCoordForPed(position.x, position.y, position.z, onlyOnPavement, flags);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * ```
 * Returns false for nodes that aren't used for GPS routes.
 * Example:
 * Nodes in Fort Zancudo and LSIA are false
 * ```
 * Hash: 0xA2AE5C478B96E3B6 | ApiSet: undefined
 */
export function getVehicleNodeIsGpsAllowed(nodeID) {
    return GetVehicleNodeIsGpsAllowed(nodeID);
}
/**
 * ```
 * Determines the name of the street which is the closest to the given coordinates.
 * x,y,z - the coordinates of the street
 * streetName - returns a hash to the name of the street the coords are on
 * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
 * `Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.`
 * ```
 * Hash: 0x2EB41072B4C1E4C0 | ApiSet: undefined
 */
export function getStreetNameAtCoord(position) {
    return GetStreetNameAtCoord(position.x, position.y, position.z);
}
/**
 * Gets the density and flags of the closest node to the specified position.\
 * Density is a value between 0 and 15, indicating how busy the road is.
 * ```cpp
 * enum eVehicleNodeProperties {
 * OFF_ROAD = 1 << 0,
 * ON_PLAYERS_ROAD =  1 << 1,
 * NO_BIG_VEHICLES = 1 << 2,
 * SWITCHED_OFF = 1 << 3,
 * TUNNEL_OR_INTERIOR = 1 << 4,
 * LEADS_TO_DEAD_END = 1 << 5,
 * HIGHWAY = 1 << 6,
 * JUNCTION = 1 << 7,
 * TRAFFIC_LIGHT = 1 << 8,
 * GIVE_WAY = 1 << 9,
 * WATER = 1 << 10,
 * }
 * ```
 * Hash: 0x0568566ACBB5DEDC | ApiSet: undefined
 */
export function getVehicleNodeProperties(position) {
    return GetVehicleNodeProperties(position.x, position.y, position.z);
}
/**
 * ```
 * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
 * Normal roads where plenty of Peds spawn will return false
 * ```
 * Hash: 0x4F5070AA58F69279 | ApiSet: undefined
 */
export function getVehicleNodeIsSwitchedOff(nodeID) {
    return GetVehicleNodeIsSwitchedOff(nodeID);
}
/**
 * ```
 * Calling this with an invalid node id, will crash the game.
 * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
 * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
 * ```
 * Hash: 0x703123E5E7D429C2 | ApiSet: undefined
 */
export function getVehicleNodePosition(nodeId) {
    const result = GetVehicleNodePosition(nodeId);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * ```
 * Gets a value indicating whether the specified position is on a road.
 * The vehicle parameter is not implemented (ignored).
 * ```
 * Hash: 0x125BF4ABFC536B09 | ApiSet: undefined
 */
export function isPointOnRoad(position, vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsPointOnRoad(position.x, position.y, position.z, _vehicle);
}
/**
 * ```
 * IS_*
 * ```
 * Hash: 0x705A844002B39DC0 | ApiSet: undefined
 */
export function isNavmeshRequiredRegionOwnedByAnyThread() {
    return IsNavmeshRequiredRegionOwnedByAnyThread();
}
/**
 * ```
 * This native has been removed in v1180.
 * ```
 * Hash: 0x80E4A6EDDB0BE8D9 | ApiSet: undefined
 */
export function loadAllPathNodes(keepInMemory) {
    return LoadAllPathNodes(keepInMemory);
}
/**
 * ```
 * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
 * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
 * ```
 * Hash: 0xF813C7E63F9062A5 | ApiSet: undefined
 */
export function isNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2) {
    return IsNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2);
}
/**
 * ```
 * Returns true if the id is non zero.
 * ```
 * Hash: 0x1EAF30FCFBF5AF74 | ApiSet: undefined
 */
export function isVehicleNodeIdValid(vehicleNodeId) {
    return IsVehicleNodeIdValid(vehicleNodeId);
}
/**
 * Hash: 0x916F0A3CDEC3445E | ApiSet: undefined
 */
export function removeNavmeshRequiredRegions() {
    RemoveNavmeshRequiredRegions();
}
/**
 * Hash: 0x46399A7895957C0E | ApiSet: undefined
 */
export function removeNavmeshBlockingObject(p0) {
    RemoveNavmeshBlockingObject(p0);
}
/**
 * ```
 * Used internally for long range tasks
 * ```
 * Hash: 0x07FB139B592FA687 | ApiSet: undefined
 */
export function requestPathsPreferAccurateBoundingstruct(x1, y1, x2, y2) {
    return RequestPathsPreferAccurateBoundingstruct(x1, y1, x2, y2);
}
/**
 * Hash: 0xAA76052DDA9BFC3E | ApiSet: undefined
 */
export function _0xAA76052DDA9BFC3E(p0, p1, p2, p3, p4, p5, p6) {
    Citizen.invokeNative('0xAA76052DDA9BFC3E', p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x0B919E1FB47CC4E0 | ApiSet: undefined
 */
export function setAmbientPedRangeMultiplierThisFrame(multiplier) {
    SetAmbientPedRangeMultiplierThisFrame(multiplier);
}
/**
 * Hash: 0xDC20483CD3DD5201 | ApiSet: undefined
 */
export function setGpsDisabledZone(x1, y1, z1, x2, y2, z2) {
    SetGpsDisabledZone(x1, y1, z1, x2, y2, z2);
}
/**
 * Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xF74B1FFA4A15FBEA | ApiSet: undefined
 */
export function setAiGlobalPathNodesType(type) {
    SetAiGlobalPathNodesType(type);
}
/**
 * Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
 * You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
 * <strong>Setting a waypoint at the same coordinate:</strong>
 * Disabled Zone: <https://i.imgur.com/P9VUuxM.png>
 * Enabled Zone (normal): <https://i.imgur.com/BPi24aw.png>
 * Hash: 0xD0BC1C6FB18EE154 | ApiSet: undefined
 */
export function setGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index) {
    SetGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index);
}
/**
 * Hash: 0x72751156E7678833 | ApiSet: undefined
 */
export function setIgnoreNoGpsFlag(toggle) {
    SetIgnoreNoGpsFlag(toggle);
}
/**
 * ```
 * See: SET_BLIP_ROUTE
 * ```
 * Hash: 0x1FC289A0C3FF470F | ApiSet: undefined
 */
export function setIgnoreSecondaryRouteNodes(toggle) {
    SetIgnoreSecondaryRouteNodes(toggle);
}
/**
 * ```
 * Toggles a global boolean, name is probably a hash collision but describes its functionality.
 * ```
 * Hash: 0x228E5C6AD4D74BFD | ApiSet: undefined
 */
export function setAllPathsCacheBoundingstruct(toggle) {
    SetAllPathsCacheBoundingstruct(toggle);
}
/**
 * ```
 * NativeDB Added Parameter 8: Any p7
 * ```
 * Hash: 0x34F060F4BF92E018 | ApiSet: undefined
 */
export function setPedPathsInArea(x1, y1, z1, x2, y2, z2, unknown) {
    SetPedPathsInArea(x1, y1, z1, x2, y2, z2, unknown);
}
/**
 * ```
 * NativeDB Added Parameter 7: Any p6
 * ```
 * Hash: 0xE04B48F2CC926253 | ApiSet: undefined
 */
export function setPedPathsBackToOriginal(p0, p1, p2, p3, p4, p5) {
    SetPedPathsBackToOriginal(p0, p1, p2, p3, p4, p5);
}
/**
 * unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * Hash: 0x1A5AA1208AF5DB59 | ApiSet: undefined
 */
export function setRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3) {
    SetRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3);
}
/**
 * ```
 * missing a last parameter int p6
 * ```
 * ```
 * NativeDB Added Parameter 7: Any p6
 * ```
 * Hash: 0x1EE7063B80FFC77C | ApiSet: undefined
 */
export function setRoadsBackToOriginal(p0, p1, p2, p3, p4, p5) {
    SetRoadsBackToOriginal(p0, p1, p2, p3, p4, p5);
}
/**
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * ```
 * NativeDB Added Parameter 8: Any p7
 * bool p7 - always 1
 * ```
 * Hash: 0x0027501B9F3B407E | ApiSet: undefined
 */
export function setRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width) {
    SetRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width);
}
/**
 * When this is set to false, all nodes in the area get disabled.
 * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
 * If it's true,
 * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
 * Hash: 0xBF1A602B5BA52FEE | ApiSet: undefined
 */
export function setRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2) {
    SetRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2);
}
/**
 * Hash: 0x109E99373F290687 | ApiSet: undefined
 */
export function updateNavmeshBlockingObject(object, posX, posY, posZ, scaleX, scaleY, scaleZ, heading, flags) {
    UpdateNavmeshBlockingObject(object, posX, posY, posZ, scaleX, scaleY, scaleZ, heading, flags);
}
/**
 * Hash: 0x710311ADF0E20730 | ApiSet: undefined
 */
export function activatePhysics(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ActivatePhysics(_entity);
}
/**
 * Hash: 0xE37F721824571784 | ApiSet: undefined
 */
export function applyImpulseToCloth(posX, posY, posZ, vecX, vecY, vecZ, impulse) {
    ApplyImpulseToCloth(posX, posY, posZ, vecX, vecY, vecZ, impulse);
}
/**
 * ```
 * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
 * ```
 * Hash: 0x4B490A6832559A65 | ApiSet: undefined
 */
export function attachRopeToEntity(ropeId, entity, position, p5) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    AttachRopeToEntity(ropeId, _entity, position.x, position.y, position.z, p5);
}
/**
 * Deletes the rope with the specified handle.
 * You should check if the rope exists before trying to delete it, see [DOES_ROPE_EXIST](#\_0xFD5448BE3111ED96).
 * For an example on how to use this native please refer to [ADD_ROPE](#\_0xE832D760399EB220)
 * Hash: 0x52B4829281364649 | ApiSet: undefined
 */
export function deleteRope(ropeId) {
    DeleteRope(ropeId);
}
/**
 * Hash: 0xBCF3026912A8647D | ApiSet: undefined
 */
export function detachRopeFromEntity(ropeId, entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    DetachRopeFromEntity(ropeId, _entity);
}
/**
 * ```
 * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
 * __
 * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
 * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
 * ```
 * There are 8 different rope types in the base game. Full rope data can be found in `ropedata.xml`.
 * ```cpp
 * enum ePhysicsRopeType {
 * RopeThin = 0, // Verticies: 1, Radius: 0.03, Textures: rope & rope_n
 * RopeWire6 = 1, // Verticies: 4, Radius: 0.015, Textures: steel_cable & steel_cable_n
 * RopeWire32 = 2, // Verticies: 32, Radius: 0.025, Textures: steel_cable & steel_cable_n
 * RopeMesh = 3, // Verticies: 6, Radius: 0.03, Textures: rope & rope_n
 * RopeThinWire32 = 4, // Verticies: 32, Radius: 0.01, Textures: rope & rope_n
 * RopeReins = 5, // Verticies: 32, Radius: 0.005, Textures: rope & rope_n
 * RopeThin4 = 6, // Verticies: 4, Radius: 0.03, Textures: rope & rope_n
 * RopeWire64 = 7 // Verticies: 64, Radius: 0.025, Textures: steel_cable & steel_cable_n
 * }
 * ```
 * Hash: 0xE832D760399EB220 | ApiSet: undefined
 */
export function addRope(position, rotX, rotY, rotZ, maxLength, ropeType, initLength, minLength, lengthChangeRate, onlyPPU, collisionOn, lockFromFront, timeMultiplier, breakable) {
    return AddRope(position.x, position.y, position.z, rotX, rotY, rotZ, maxLength, ropeType, initLength, minLength, lengthChangeRate, onlyPPU, collisionOn, lockFromFront, timeMultiplier, breakable);
}
/**
 * ```
 * Attaches entity 1 to entity 2.
 * ```
 * Hash: 0x3D95EC8B6D940AC3 | ApiSet: undefined
 */
export function attachEntitiesToRope(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, boneName1, boneName2) {
    const _ent1 = ent1 instanceof Entity ? ent1.handle() : ent1;
    const _ent2 = ent2 instanceof Entity ? ent2.handle() : ent2;
    AttachEntitiesToRope(ropeId, _ent1, _ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, boneName1, boneName2);
}
/**
 * Hash: 0xAA5D6B1888E4DB20 | ApiSet: undefined
 */
export function deleteChildRope(ropeId) {
    DeleteChildRope(ropeId);
}
/**
 * For an example on how to use this native please refer to [ADD_ROPE](#\_0xE832D760399EB220)
 * Hash: 0xFD5448BE3111ED96 | ApiSet: undefined
 */
export function doesRopeExist() {
    return DoesRopeExist();
}
/**
 * Hash: 0x2E648D16F6E308F3 | ApiSet: undefined
 */
export function breakEntityGlass(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    BreakEntityGlass(_entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}
/**
 * Hash: 0x8214A4B5A7A33612 | ApiSet: undefined
 */
export function getCgoffset(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetCgoffset(_entity));
}
/**
 * Return if the rope was generated or not by the script where the native is called.
 * Hash: 0x271C9D3ACA5D6409 | ApiSet: undefined
 */
export function doesRopeBelongToThisScript(ropeId) {
    return DoesRopeBelongToThisScript(ropeId);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x8C520A929415BCD2 | ApiSet: undefined
 */
export function getDamping(entity, type) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(GetDamping(_entity, type));
}
/**
 * Hash: 0x3655F544CD30F0B5 | ApiSet: undefined
 */
export function getRopeVertexCount(ropeId) {
    return GetRopeVertexCount(ropeId);
}
/**
 * ```
 * GET_*
 * ```
 * Hash: 0x0C112765300C7E1E | ApiSet: undefined
 */
export function getHasObjectFragInst(object) {
    return GetHasObjectFragInst(object);
}
/**
 * ```
 * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
 * ```
 * Hash: 0xCBB203C04D1ABD27 | ApiSet: undefined
 */
export function loadRopeData(ropeId, rope_preset) {
    LoadRopeData(ropeId, rope_preset);
}
/**
 * Hash: 0x21BB0FBD3E217C2D | ApiSet: undefined
 */
export function getRopeLastVertexCoord(ropeId) {
    return new Vector3(GetRopeLastVertexCoord(ropeId));
}
/**
 * Hash: 0xEA61CA8E80F09E4D | ApiSet: undefined
 */
export function getRopeVertexCoord(ropeId, vertex) {
    return new Vector3(GetRopeVertexCoord(ropeId, vertex));
}
/**
 * ```
 * ROPE_*
 * ```
 * Hash: 0x36CCB9BE67B970FD | ApiSet: undefined
 */
export function _0x36CCB9BE67B970FD(ropeId, p1) {
    Citizen.invokeNative('0x36CCB9BE67B970FD', ropeId, p1);
}
/**
 * ```
 * SET_*
 * ```
 * Hash: 0x9EBD751E5787BAF2 | ApiSet: undefined
 */
export function _0x9EBD751E5787BAF2(p0) {
    Citizen.invokeNative('0x9EBD751E5787BAF2', p0);
}
/**
 * Hash: 0x84DE3B5FB3E666F0 | ApiSet: undefined
 */
export function _0x84DE3B5FB3E666F0() {
    return Citizen.invokeNative('0x84DE3B5FB3E666F0');
}
/**
 * ROPE_\*
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xA1AE736541B0FCA3 | ApiSet: undefined
 */
export function _0xA1AE736541B0FCA3(p1) {
    return Citizen.invokeNative('0xA1AE736541B0FCA3', p1);
}
/**
 * Hash: 0xB1B6216CA2E7B55E | ApiSet: undefined
 */
export function _0xB1B6216CA2E7B55E(p0, p1, p2) {
    Citizen.invokeNative('0xB1B6216CA2E7B55E', p0, p1, p2);
}
/**
 * ```
 * ROPE_*
 * ```
 * Hash: 0xB743F735C03D7810 | ApiSet: undefined
 */
export function _0xB743F735C03D7810(ropeId, p1) {
    Citizen.invokeNative('0xB743F735C03D7810', ropeId, p1);
}
/**
 * Hash: 0x2B320CF14146B69A | ApiSet: undefined
 */
export function pinRopeVertex(ropeId, vertex, position) {
    PinRopeVertex(ropeId, vertex, position.x, position.y, position.z);
}
/**
 * ```
 * RESET_*
 * ```
 * Hash: 0xCC6E963682533882 | ApiSet: undefined
 */
export function _0xCC6E963682533882(object) {
    Citizen.invokeNative('0xCC6E963682533882', object);
}
/**
 * ```
 * Most likely ROPE_ATTACH_*
 * ```
 * Hash: 0xBC0CE682D4D05650 | ApiSet: undefined
 */
export function _0xBC0CE682D4D05650(ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    Citizen.invokeNative('0xBC0CE682D4D05650', ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
}
/**
 * Hash: 0xF159A63806BB5BA8 | ApiSet: undefined
 */
export function ropeDrawShadowEnabled(toggle) {
    return RopeDrawShadowEnabled(toggle);
}
/**
 * Hash: 0x5389D48EFA2F079A | ApiSet: undefined
 */
export function ropeConvertToSimple(ropeId) {
    RopeConvertToSimple(ropeId);
}
/**
 * ```
 * Loads rope textures for all ropes in the current scene.
 * ```
 * Hash: 0x9B9039DBF2D258C1 | ApiSet: undefined
 */
export function ropeLoadTextures() {
    RopeLoadTextures();
}
/**
 * Hash: 0x73040398DFF9A4A6 | ApiSet: undefined
 */
export function ropeGetDistanceBetweenEnds(ropeId) {
    return RopeGetDistanceBetweenEnds(ropeId);
}
/**
 * Hash: 0xF2D0E6A75CC05597 | ApiSet: undefined
 */
export function ropeAreTexturesLoaded() {
    return RopeAreTexturesLoaded();
}
/**
 * Hash: 0xDC57A637A20006ED | ApiSet: undefined
 */
export function ropeSetUpdateOrder(ropeId, p1) {
    RopeSetUpdateOrder(ropeId, p1);
}
/**
 * ```
 * Reset a rope to a certain length.
 * ```
 * Hash: 0xC16DE94D9BEA14A0 | ApiSet: undefined
 */
export function ropeResetLength(ropeId, length) {
    RopeResetLength(ropeId, length);
}
/**
 * ```
 * Unloads rope textures for all ropes in the current scene.
 * ```
 * Hash: 0x6CE36C35C1AC8163 | ApiSet: undefined
 */
export function ropeUnloadTextures() {
    RopeUnloadTextures();
}
/**
 * ```
 * Forces a rope to a certain length.
 * ```
 * Hash: 0xD009F759A723DB1B | ApiSet: undefined
 */
export function ropeForceLength(ropeId, length) {
    RopeForceLength(ropeId, length);
}
/**
 * Hash: 0xC8D667EE52114ABA | ApiSet: undefined
 */
export function ropeSetUpdatePinverts(ropeId) {
    RopeSetUpdatePinverts(ropeId);
}
/**
 * Hash: 0xD8FA3908D7B86904 | ApiSet: undefined
 */
export function setCgoffset(entity, position) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetCgoffset(_entity, position.x, position.y, position.z);
}
/**
 * Hash: 0x01BA3AED21C16CFB | ApiSet: undefined
 */
export function setDisableFragDamage(object, toggle) {
    SetDisableFragDamage(object, toggle);
}
/**
 * Hash: 0xBE520D9761FF811F | ApiSet: undefined
 */
export function setCgAtBoundcenter(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetCgAtBoundcenter(_entity);
}
/**
 * Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xAA6A6098851C396F | ApiSet: undefined
 */
export function setLaunchControlEnabled(toggle) {
    SetLaunchControlEnabled(toggle);
}
/**
 * Hash: 0x15F944730C832252 | ApiSet: undefined
 */
export function setEntityProofUnk(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityProofUnk(_entity, toggle);
}
/**
 * Hash: 0xEEA3B200A6FEB65B | ApiSet: undefined
 */
export function setDamping(entity, vertex, value) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetDamping(_entity, vertex, value);
}
/**
 * Hash: 0x5CEC1A84620E7D5B | ApiSet: undefined
 */
export function setDisableBreaking(object, toggle) {
    SetDisableBreaking(object, toggle);
}
/**
 * Hash: 0x538D1179EC1AA9A9 | ApiSet: undefined
 */
export function startRopeUnwindingFront(ropeId) {
    StartRopeUnwindingFront(ropeId);
}
/**
 * Hash: 0x4B5AE2EEE4A8F180 | ApiSet: undefined
 */
export function unpinRopeVertex(ropeId, vertex) {
    UnpinRopeVertex(ropeId, vertex);
}
/**
 * Hash: 0x1461C72C889E343E | ApiSet: undefined
 */
export function startRopeWinding(ropeId) {
    StartRopeWinding(ropeId);
}
/**
 * Hash: 0xFFF3A50779EFBBB3 | ApiSet: undefined
 */
export function stopRopeUnwindingFront(ropeId) {
    StopRopeUnwindingFront(ropeId);
}
/**
 * Hash: 0xCB2D4AB84A19AA7C | ApiSet: undefined
 */
export function stopRopeWinding(ropeId) {
    StopRopeWinding(ropeId);
}
/**
 * Checks if you're recording.
 * Hash: 0x1897CA71995A90B4 | ApiSet: undefined
 */
export function isRecording() {
    return IsRecording();
}
/**
 * This will disable the ability to make camera changes in R\* Editor.
 * Hash: 0xAF66DCEE6609B148 | ApiSet: undefined
 */
export function disableRockstarEditorCameraChanges() {
    DisableRockstarEditorCameraChanges();
}
/**
 * Hash: 0x293220DA1B46CEBC | ApiSet: undefined
 */
export function _0x293220DA1B46CEBC(p0, p1, p2) {
    Citizen.invokeNative('0x293220DA1B46CEBC', p0, p1, p2);
}
/**
 * Hash: 0x13B350B8AD0EEE10 | ApiSet: undefined
 */
export function _0x13B350B8AD0EEE10() {
    Citizen.invokeNative('0x13B350B8AD0EEE10');
}
/**
 * Hash: 0x4282E08174868BE3 | ApiSet: undefined
 */
export function _0x4282E08174868BE3() {
    return Citizen.invokeNative('0x4282E08174868BE3');
}
/**
 * Hash: 0x81CBAE94390F9F89 | ApiSet: undefined
 */
export function _0x81CBAE94390F9F89() {
    Citizen.invokeNative('0x81CBAE94390F9F89');
}
/**
 * Hash: 0xF854439EFBB3B583 | ApiSet: undefined
 */
export function _0xF854439EFBB3B583() {
    Citizen.invokeNative('0xF854439EFBB3B583');
}
/**
 * Hash: 0x33D47E85B476ABCD | ApiSet: undefined
 */
export function _0x33D47E85B476ABCD(p0) {
    return Citizen.invokeNative('0x33D47E85B476ABCD', p0);
}
/**
 * Hash: 0x644546EC5287471B | ApiSet: undefined
 */
export function saveRecordingClip() {
    return SaveRecordingClip();
}
/**
 * Starts recording a replay.\
 * If already recording a replay, does nothing.
 * Hash: 0xC3AC2FFF9612AC81 | ApiSet: undefined
 */
export function startRecording(mode) {
    StartRecording(mode);
}
/**
 * Hash: 0x48621C9FCA3EBD28 | ApiSet: undefined
 */
export function _0x48621C9FCA3EBD28(p0) {
    Citizen.invokeNative('0x48621C9FCA3EBD28', p0);
}
/**
 * ```
 * -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
 * first one seems to be a string of a mission name, second one seems to be a bool/toggle
 * p1 was always 0.
 * ```
 * Hash: 0x208784099002BC30 | ApiSet: undefined
 */
export function _0x208784099002BC30(missionNameLabel, p1) {
    Citizen.invokeNative('0x208784099002BC30', missionNameLabel, p1);
}
/**
 * Stops recording and saves the recorded clip.
 * Hash: 0x071A5197D6AFC8B3 | ApiSet: undefined
 */
export function stopRecordingAndSaveClip() {
    StopRecordingAndSaveClip();
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x66972397E0757E7A | ApiSet: undefined
 */
export function _0x66972397E0757E7A(p0, p1, p2) {
    Citizen.invokeNative('0x66972397E0757E7A', p0, p1, p2);
}
/**
 * Hash: 0xDF4B952F7D381B95 | ApiSet: undefined
 */
export function _0xDF4B952F7D381B95() {
    return Citizen.invokeNative('0xDF4B952F7D381B95');
}
/**
 * Stops recording and discards the recorded clip.
 * Hash: 0x88BB3507ED41A240 | ApiSet: undefined
 */
export function stopRecordingAndDiscardClip() {
    StopRecordingAndDiscardClip();
}
/**
 * Disable recording for this frame only.
 * Hash: 0xEB2D525B57F42B40 | ApiSet: undefined
 */
export function stopRecordingThisFrame() {
    StopRecordingThisFrame();
}
/**
 * Hash: 0xE058175F8EAFE79A | ApiSet: undefined
 */
export function _0xE058175F8EAFE79A(p0) {
    Citizen.invokeNative('0xE058175F8EAFE79A', p0);
}
/**
 * ```
 * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
 * ```
 * Hash: 0x95AB8B5C992C7B58 | ApiSet: undefined
 */
export function isInteriorRenderingDisabled() {
    return IsInteriorRenderingDisabled();
}
/**
 * Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
 * ```
 * NativeDB Added Parameter 1: int p0
 * ```
 * Hash: 0x49DA8145672B2725 | ApiSet: undefined
 */
export function activateRockstarEditor() {
    ActivateRockstarEditor();
}
/**
 * ```
 * Disables some other rendering (internal)
 * ```
 * Hash: 0x5AD3932DAEB1E5D3 | ApiSet: undefined
 */
export function _0x5AD3932DAEB1E5D3() {
    Citizen.invokeNative('0x5AD3932DAEB1E5D3');
}
/**
 * ```
 * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
 * ```
 * Hash: 0x3353D13F09307691 | ApiSet: undefined
 */
export function resetEditorValues() {
    ResetEditorValues();
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * ```
 * Something to do with phone cameras.
 * startup.c4:
 * void sub_2a3d() {
 * `UNK2::_7E2BD3EF6C205F09("No_Filter", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam1", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam2", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam3", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam4", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam5", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam6", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam7", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam9", 1);`
 * `UNK2::_7E2BD3EF6C205F09("phone_cam12", 0);`
 * }
 * ```
 * Hash: 0x7E2BD3EF6C205F09 | ApiSet: undefined
 */
export function _0x7E2BD3EF6C205F09(p0, p1) {
    Citizen.invokeNative('0x7E2BD3EF6C205F09', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x84B418E93894AC1C | ApiSet: undefined
 */
export function _0x84B418E93894AC1C() {
    return Citizen.invokeNative('0x84B418E93894AC1C');
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x690B76BD2763E068 | ApiSet: undefined
 */
export function _0x690B76BD2763E068() {
    return Citizen.invokeNative('0x690B76BD2763E068');
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xE5E9746A66359F9D | ApiSet: undefined
 */
export function _0xE5E9746A66359F9D() {
    return Citizen.invokeNative('0xE5E9746A66359F9D');
}
/**
 * ```
 * Deletes the given context from the background scripts context map.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xDC2BACD920D0A0DD | ApiSet: undefined
 */
export function bgEndContext(contextName) {
    BgEndContext(contextName);
}
/**
 * ```
 * Hashed version of 0x9D5A25BADB742ACD.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x75B18E49607874C7 | ApiSet: undefined
 */
export function bgStartContextHash(contextHash) {
    if (typeof contextHash === 'string')
        contextHash = this.getHashKey(contextHash);
    BgStartContextHash(contextHash);
}
/**
 * ```
 * Hashed version of 0xDC2BACD920D0A0DD.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x107E5CC7CA942BC1 | ApiSet: undefined
 */
export function bgEndContextHash(contextHash) {
    if (typeof contextHash === 'string')
        contextHash = this.getHashKey(contextHash);
    BgEndContextHash(contextHash);
}
/**
 * ```
 * Inserts the given context into the background scripts context map.
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x9D5A25BADB742ACD | ApiSet: undefined
 */
export function bgStartContext(contextName) {
    BgStartContext(contextName);
}
/**
 * Hash: 0xFC04745FBE67C19A | ApiSet: undefined
 */
export function doesScriptExist(scriptName) {
    return DoesScriptExist(scriptName);
}
/**
 * Hash: 0xF86AA3C56BA31381 | ApiSet: undefined
 */
export function doesScriptWithNameHashExist(scriptHash) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    return DoesScriptWithNameHashExist(scriptHash);
}
/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * ```
 * Hash: 0x2902843FCD2B2D79 | ApiSet: undefined
 */
export function getEventData(eventGroup, eventIndex, eventDataSize) {
    return GetEventData(eventGroup, eventIndex, eventDataSize);
}
/**
 * Hash: 0xC30338E8088E2E21 | ApiSet: undefined
 */
export function getIdOfThisThread() {
    return GetIdOfThisThread();
}
/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * ```
 * Hash: 0xD8F66A3A60C62153 | ApiSet: undefined
 */
export function getEventAtIndex(eventGroup, eventIndex) {
    return GetEventAtIndex(eventGroup, eventIndex);
}
/**
 * Hash: 0x18C1270EA7F199BC | ApiSet: undefined
 */
export function getNoLoadingScreen() {
    return GetNoLoadingScreen();
}
/**
 * Hash: 0x8A1C8B1738FFE87E | ApiSet: undefined
 */
export function getHashOfThisScriptName() {
    return GetHashOfThisScriptName();
}
/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * ```
 * Hash: 0x5F92A689A06620AA | ApiSet: undefined
 */
export function getNumberOfEvents(eventGroup) {
    return GetNumberOfEvents(eventGroup);
}
/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * ```
 * Hash: 0x936E6168A9BCEDB5 | ApiSet: undefined
 */
export function getEventExists(eventGroup, eventIndex) {
    return GetEventExists(eventGroup, eventIndex);
}
/**
 * ```
 * Gets the number of instances of the specified script is currently running.
 * Actually returns numRefs - 1.
 * if (program)
 * `v3 = rage::scrProgram::GetNumRefs(program) - 1;`
 * return v3;
 * ```
 * Hash: 0x2C83A9DA6BFFC4F9 | ApiSet: undefined
 */
export function getNumberOfReferencesOfScriptWithNameHash(scriptHash) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    return GetNumberOfReferencesOfScriptWithNameHash(scriptHash);
}
/**
 * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
 * Hash: 0xE6CC9F3BA0FB9EF1 | ApiSet: undefined
 */
export function hasScriptLoaded(scriptName) {
    return HasScriptLoaded(scriptName);
}
/**
 * Hash: 0x5F0F0C783EB16C04 | ApiSet: undefined
 */
export function hasScriptWithNameHashLoaded(scriptHash) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    return HasScriptWithNameHashLoaded(scriptHash);
}
/**
 * Hash: 0x05A42BA9FC8DA96B | ApiSet: undefined
 */
export function getNameOfThread(threadId) {
    return GetNameOfThread(threadId);
}
/**
 * ```
 * Sets bit 1 in GtaThread+0x154
 * BG_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x760910B49D2B98EA | ApiSet: undefined
 */
export function _0x760910B49D2B98EA() {
    Citizen.invokeNative('0x760910B49D2B98EA');
}
/**
 * Updates the display of the MP/SP loading buttons, and locks the state so that other options are not displayed or changed. This can only be done once.
 * Hash: 0xB1577667C3708F9B | ApiSet: undefined
 */
export function lockLoadingScreenButtons() {
    LockLoadingScreenButtons();
}
/**
 * Hash: 0x442E0A7EDE4A738A | ApiSet: undefined
 */
export function getThisScriptName() {
    return GetThisScriptName();
}
/**
 * Hash: 0x46E9AE36D8FA6417 | ApiSet: undefined
 */
export function isThreadActive(threadId) {
    return IsThreadActive(threadId);
}
/**
 * ```
 * BG_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x22E21FBCFC88C149 | ApiSet: undefined
 */
export function _0x22E21FBCFC88C149(scriptIndex, p1) {
    return Citizen.invokeNative('0x22E21FBCFC88C149', scriptIndex, p1);
}
/**
 * ```
 * Returns true if bit 0 in GtaThread+0x154 is set.
 * BG_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x836B62713E0534CA | ApiSet: undefined
 */
export function _0x836B62713E0534CA() {
    return Citizen.invokeNative('0x836B62713E0534CA');
}
/**
 * Hash: 0x6EB5F71AA68F2E8E | ApiSet: undefined
 */
export function requestScript(scriptName) {
    RequestScript(scriptName);
}
/**
 * ```
 * If the function returns 0, the end of the iteration has been reached.
 * ```
 * Hash: 0x30B4FA1C82DD4B9F | ApiSet: undefined
 */
export function scriptThreadIteratorGetNextThreadId() {
    return ScriptThreadIteratorGetNextThreadId();
}
/**
 * ```
 * BG_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x0F6F1EBBC4E1D5E6 | ApiSet: undefined
 */
export function _0x0F6F1EBBC4E1D5E6(scriptIndex, p1) {
    return Citizen.invokeNative('0x0F6F1EBBC4E1D5E6', scriptIndex, p1);
}
/**
 * Hash: 0x5262CC1995D07E09 | ApiSet: undefined
 */
export function setNoLoadingScreen(toggle) {
    SetNoLoadingScreen(toggle);
}
/**
 * ```
 * BG_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x829CD22E043A2577 | ApiSet: undefined
 */
export function _0x829CD22E043A2577(p0) {
    if (typeof p0 === 'string')
        p0 = this.getHashKey(p0);
    return Citizen.invokeNative('0x829CD22E043A2577', p0);
}
/**
 * ```
 * formerly _REQUEST_STREAMED_SCRIPT
 * ```
 * Hash: 0xD62A67D26D9653E6 | ApiSet: undefined
 */
export function requestScriptWithNameHash(scriptHash) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    RequestScriptWithNameHash(scriptHash);
}
/**
 * Hash: 0xC5BC038960E9DB27 | ApiSet: undefined
 */
export function setScriptWithNameHashAsNoLongerNeeded(scriptHash) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    SetScriptWithNameHashAsNoLongerNeeded(scriptHash);
}
/**
 * Hash: 0x078EBE9809CCD637 | ApiSet: undefined
 */
export function shutdownLoadingScreen() {
    ShutdownLoadingScreen();
}
/**
 * Starts a new iteration of the current threads.
 * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
 * Hash: 0xDADFADA5A20143A8 | ApiSet: undefined
 */
export function scriptThreadIteratorReset() {
    ScriptThreadIteratorReset();
}
/**
 * ```
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
 * ```
 * Hash: 0x5AE99C571D5BBE5D | ApiSet: undefined
 */
export function triggerScriptEvent(eventGroup, eventDataSize, playerBits) {
    return TriggerScriptEvent(eventGroup, eventDataSize, playerBits);
}
/**
 * ```
 * See TRIGGER_SCRIPT_EVENT
 * ```
 * Hash: 0xA40CC53DF8E50837 | ApiSet: undefined
 */
export function triggerScriptEvent2(eventGroup, eventDataSize, playerBits) {
    return TriggerScriptEvent2(eventGroup, eventDataSize, playerBits);
}
/**
 * Hash: 0xC8B189ED9138BCD4 | ApiSet: undefined
 */
export function terminateThread(threadId) {
    TerminateThread(threadId);
}
/**
 * Hash: 0xC90D2DCACD56184C | ApiSet: undefined
 */
export function setScriptAsNoLongerNeeded(scriptName) {
    SetScriptAsNoLongerNeeded(scriptName);
}
/**
 * Hash: 0x1090044AD1DA76FA | ApiSet: undefined
 */
export function terminateThisThread() {
    TerminateThisThread();
}
/**
 * Returns the result of a shape test.
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * Unless the return value is 2, the other return values are undefined.
 * Hash: 0x3D87450E15D98694 | ApiSet: undefined
 */
export function getShapeTestResult(shapeTestHandle) {
    const result = GetShapeTestResult(shapeTestHandle);
    return [result[0], result[1], new Vector3(result[2], result[3], result[4]), new Vector3(result[3], result[4], result[5]), result[4]];
}
/**
 * Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an
 * ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
 * Hash: 0x2B3334BCA57CD799 | ApiSet: undefined
 */
export function releaseScriptGuidFromEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ReleaseScriptGuidFromEntity(_entity);
}
/**
 * Returns the result of a shape test, also returning the material of any touched surface.
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * Unless the return value is 2, the other return values are undefined.
 * Hash: 0x65287525D951F6BE | ApiSet: undefined
 */
export function getShapeTestResultIncludingMaterial(shapeTestHandle) {
    const result = GetShapeTestResultIncludingMaterial(shapeTestHandle);
    return [result[0], result[1], new Vector3(result[2], result[3], result[4]), new Vector3(result[3], result[4], result[5]), result[4], result[5]];
}
/**
 * Does the same as [START_SHAPE_TEST_LOS_PROBE](#\_0x7EE9F5D83DD4F90E), except blocking until the shape test completes.
 * Use [START_SHAPE_TEST_LOS_PROBE](#\_0x7EE9F5D83DD4F90E) instead. Literally. Rockstar named this correctly: it's expensive, and it's synchronous.
 * Hash: 0x377906D8A31E5586 | ApiSet: undefined
 */
export function startExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, p8) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, _entity, p8);
}
/**
 * See [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E) for flags.
 * Hash: 0x052837721A854EC7 | ApiSet: undefined
 */
export function startShapeTestBoundingBox(entity, flags1, flags2) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartShapeTestBoundingBox(_entity, flags1, flags2);
}
/**
 * See [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E) for flags.
 * Hash: 0x37181417CE7C8900 | ApiSet: undefined
 */
export function startShapeTestBound(entity, flags1, flags2) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartShapeTestBound(_entity, flags1, flags2);
}
/**
 * For more information, see [`START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE`](#\_0x377906D8A31E5586) and [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E).
 * Hash: 0xFE466162C4401D18 | ApiSet: undefined
 */
export function startShapeTestBox(position, x1, y1, z1, rotX, rotY, rotZ, p9, flags, entity, p12) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartShapeTestBox(position.x, position.y, position.z, x1, y1, z1, rotX, rotY, rotZ, p9, flags, _entity, p12);
}
/**
 * Raycast from point to point, where the ray has a radius.
 * Hash: 0x28579D1B8F8AAC80 | ApiSet: undefined
 */
export function startShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, _entity, p9);
}
/**
 * Asynchronously starts a line-of-sight (raycast) world probe shape test.
 * ```cpp
 * enum eTraceFlags
 * {
 * None = 0,
 * IntersectWorld = 1,
 * IntersectVehicles = 2,
 * IntersectPeds = 4,
 * IntersectRagdolls = 8,
 * IntersectObjects = 16,
 * IntersectPickup = 32,
 * IntersectGlass = 64,
 * IntersectRiver = 128,
 * IntersectFoliage = 256,
 * IntersectEverything = 511
 * }
 * ```
 * ```cpp
 * enum eTraceOptionFlags
 * {
 * None = 0,
 * OptionIgnoreGlass = 1,
 * OptionIgnoreSeeThrough = 2,
 * OptionIgnoreNoCollision = 4,
 * OptionDefault = 7
 * }
 * ```
 * NOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres.
 * Use the handle with [GET_SHAPE_TEST_RESULT](#\_0x3D87450E15D98694) or [GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL](#\_0x65287525D951F6BE) until it returns 0 or 2.
 * Hash: 0x7EE9F5D83DD4F90E | ApiSet: undefined
 */
export function startShapeTestLosProbe(x1, y1, z1, x2, y2, z2, traceFlags, entity, optionFlags) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartShapeTestLosProbe(x1, y1, z1, x2, y2, z2, traceFlags, _entity, optionFlags);
}
/**
 * Since it is only used in the PC version, likely some mouse-friendly shape test. Uses **in** vector arguments.
 * Asynchronous.
 * ```
 * it returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
 * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
 * ```
 * See [`START_SHAPE_TEST_LOS_PROBE`](#\_0x7EE9F5D83DD4F90E) for flags.
 * Hash: 0xFF6BE494C7987F34 | ApiSet: undefined
 */
export function startShapeTestSurroundingCoords(flag, entity, flag2) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    const result = StartShapeTestSurroundingCoords(flag, _entity, flag2);
    return [result[0], new Vector3(result[1], result[2], result[3]), new Vector3(result[2], result[3], result[4])];
}
/**
 * Performs the same type of trace as START_SHAPE_TEST_CAPSULE, but with some different hardcoded parameters.
 * Hash: 0xE6AC6C45FBE83004 | ApiSet: undefined
 */
export function startShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return StartShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, _entity, p9);
}
/**
 * Hash: 0xBC1CC91205EC8D6E | ApiSet: undefined
 */
export function isRockstarMessageReadyForScript() {
    return IsRockstarMessageReadyForScript();
}
/**
 * Hash: 0x19853B5B17D77BCA | ApiSet: undefined
 */
export function _0x19853B5B17D77BCA(p0) {
    return Citizen.invokeNative('0x19853B5B17D77BCA', p0);
}
/**
 * Hash: 0x116FB94DC4B79F17 | ApiSet: undefined
 */
export function _0x116FB94DC4B79F17(p0) {
    Citizen.invokeNative('0x116FB94DC4B79F17', p0);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x2D874D4AE612A65F | ApiSet: undefined
 */
export function _0x2D874D4AE612A65F() {
    return Citizen.invokeNative('0x2D874D4AE612A65F');
}
/**
 * Hash: 0x16DA8172459434AA | ApiSet: undefined
 */
export function _0x16DA8172459434AA() {
    return Citizen.invokeNative('0x16DA8172459434AA');
}
/**
 * Hash: 0x225798743970412B | ApiSet: undefined
 */
export function _0x225798743970412B() {
    return Citizen.invokeNative('0x225798743970412B');
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x450819D8CF90C416 | ApiSet: undefined
 */
export function _0x450819D8CF90C416() {
    return Citizen.invokeNative('0x450819D8CF90C416');
}
/**
 * Hash: 0x07DBD622D9533857 | ApiSet: undefined
 */
export function _0x07DBD622D9533857(p0) {
    return Citizen.invokeNative('0x07DBD622D9533857', p0);
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Added Parameter 2: char* p1
 * NativeDB Added Parameter 3: char* p2
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x1D12A56FC95BE92E | ApiSet: undefined
 */
export function _0x1D12A56FC95BE92E() {
    return Citizen.invokeNative('0x1D12A56FC95BE92E');
}
/**
 * Hash: 0x44ACA259D67651DB | ApiSet: undefined
 */
export function _0x44ACA259D67651DB(p1) {
    return Citizen.invokeNative('0x44ACA259D67651DB', p1);
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Added Parameter 2: char* p1
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x33DF47CC0642061B | ApiSet: undefined
 */
export function _0x33DF47CC0642061B() {
    return Citizen.invokeNative('0x33DF47CC0642061B');
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Added Parameter 2: float* p1
 * NativeDB Added Parameter 3: char* p2
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x2570E26BE63964E3 | ApiSet: undefined
 */
export function _0x2570E26BE63964E3() {
    return Citizen.invokeNative('0x2570E26BE63964E3');
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Added Parameter 2: float* p1
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x50A8A36201DBF83E | ApiSet: undefined
 */
export function _0x50A8A36201DBF83E() {
    return Citizen.invokeNative('0x50A8A36201DBF83E');
}
/**
 * Hash: 0x4737980E8A283806 | ApiSet: undefined
 */
export function _0x4737980E8A283806(p0) {
    return Citizen.invokeNative('0x4737980E8A283806', p0);
}
/**
 * Hash: 0x3001BEF2FECA3680 | ApiSet: undefined
 */
export function _0x3001BEF2FECA3680() {
    return Citizen.invokeNative('0x3001BEF2FECA3680');
}
/**
 * Hash: 0x4A7D6E727F941747 | ApiSet: undefined
 */
export function _0x4A7D6E727F941747() {
    return Citizen.invokeNative('0x4A7D6E727F941747');
}
/**
 * Hash: 0x699E4A5C8C893A18 | ApiSet: undefined
 */
export function _0x699E4A5C8C893A18(p0, p1) {
    return Citizen.invokeNative('0x699E4A5C8C893A18', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x4ED9C8D6DA297639 | ApiSet: undefined
 */
export function _0x4ED9C8D6DA297639() {
    return Citizen.invokeNative('0x4ED9C8D6DA297639');
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x7FFCBFEE44ECFABF | ApiSet: undefined
 */
export function _0x7FFCBFEE44ECFABF() {
    return Citizen.invokeNative('0x7FFCBFEE44ECFABF');
}
/**
 * Hash: 0x675721C9F644D161 | ApiSet: undefined
 */
export function _0x675721C9F644D161() {
    Citizen.invokeNative('0x675721C9F644D161');
}
/**
 * Hash: 0x487912FD248EFDDF | ApiSet: undefined
 */
export function _0x487912FD248EFDDF(p0, p1) {
    return Citizen.invokeNative('0x487912FD248EFDDF', p0, p1);
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Added Parameter 2: char* p1
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x9DE5D2F723575ED0 | ApiSet: undefined
 */
export function _0x9DE5D2F723575ED0() {
    return Citizen.invokeNative('0x9DE5D2F723575ED0');
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Added Parameter 2: int* p1
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x710BCDA8071EDED1 | ApiSet: undefined
 */
export function _0x710BCDA8071EDED1() {
    return Citizen.invokeNative('0x710BCDA8071EDED1');
}
/**
 * Hash: 0x6BFB12CE158E3DD4 | ApiSet: undefined
 */
export function _0x6BFB12CE158E3DD4(p0) {
    return Citizen.invokeNative('0x6BFB12CE158E3DD4', p0);
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Added Parameter 2: char* p1
 * NativeDB Added Parameter 3: float* p2
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xC5A35C73B68F3C49 | ApiSet: undefined
 */
export function _0xC5A35C73B68F3C49() {
    return Citizen.invokeNative('0xC5A35C73B68F3C49');
}
/**
 * Hash: 0x7DB18CA8CAD5B098 | ApiSet: undefined
 */
export function _0x7DB18CA8CAD5B098() {
    return Citizen.invokeNative('0x7DB18CA8CAD5B098');
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x8A4416C0DB05FA66 | ApiSet: undefined
 */
export function _0x8A4416C0DB05FA66() {
    return Citizen.invokeNative('0x8A4416C0DB05FA66');
}
/**
 * Hash: 0x9237E334F6E43156 | ApiSet: undefined
 */
export function _0x9237E334F6E43156(p0) {
    return Citizen.invokeNative('0x9237E334F6E43156', p0);
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Added Parameter 2: int* p1
 * NativeDB Added Parameter 3: char* p2
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xE75A4A2E5E316D86 | ApiSet: undefined
 */
export function _0xE75A4A2E5E316D86() {
    return Citizen.invokeNative('0xE75A4A2E5E316D86');
}
/**
 * Hash: 0x8CC469AB4D349B7C | ApiSet: undefined
 */
export function _0x8CC469AB4D349B7C(p0, p1) {
    return Citizen.invokeNative('0x8CC469AB4D349B7C', p0, p1);
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xA468E0BE12B12C70 | ApiSet: undefined
 */
export function _0xA468E0BE12B12C70() {
    return Citizen.invokeNative('0xA468E0BE12B12C70');
}
/**
 * Hash: 0x92DA6E70EF249BD1 | ApiSet: undefined
 */
export function _0x92DA6E70EF249BD1(p0) {
    return Citizen.invokeNative('0x92DA6E70EF249BD1', p0);
}
/**
 * ```
 * NativeDB Added Parameter 1: char* p0
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xC2C97EA97711D1AE | ApiSet: undefined
 */
export function _0xC2C97EA97711D1AE() {
    return Citizen.invokeNative('0xC2C97EA97711D1AE');
}
/**
 * Hash: 0xD8122C407663B995 | ApiSet: undefined
 */
export function _0xD8122C407663B995() {
    return Citizen.invokeNative('0xD8122C407663B995');
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xEA95C0853A27888E | ApiSet: undefined
 */
export function _0xEA95C0853A27888E() {
    Citizen.invokeNative('0xEA95C0853A27888E');
}
/**
 * Hash: 0xF6BAAAF762E1BF40 | ApiSet: undefined
 */
export function _0xF6BAAAF762E1BF40(p0) {
    return Citizen.invokeNative('0xF6BAAAF762E1BF40', p0);
}
/**
 * Hash: 0xF22CA0FD74B80E7A | ApiSet: undefined
 */
export function _0xF22CA0FD74B80E7A(p0) {
    return Citizen.invokeNative('0xF22CA0FD74B80E7A', p0);
}
/**
 * Hash: 0xFF8F3A92B75ED67A | ApiSet: undefined
 */
export function _0xFF8F3A92B75ED67A() {
    return Citizen.invokeNative('0xFF8F3A92B75ED67A');
}
/**
 * Hash: 0xFE4C1D0D3B9CC17E | ApiSet: undefined
 */
export function _0xFE4C1D0D3B9CC17E(p0, p1) {
    return Citizen.invokeNative('0xFE4C1D0D3B9CC17E', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xE4F6E8D07A2F0F51 | ApiSet: undefined
 */
export function _0xE4F6E8D07A2F0F51(p0) {
    return Citizen.invokeNative('0xE4F6E8D07A2F0F51', p0);
}
/**
 * Hash: 0x55DF6DB45179236E | ApiSet: undefined
 */
export function scEmailMessageClearRecipList() {
    ScEmailMessageClearRecipList();
}
/**
 * Hash: 0x040ADDCBAFA1018A | ApiSet: undefined
 */
export function scInboxGetEmails(offset, limit) {
    ScInboxGetEmails(offset, limit);
}
/**
 * Hash: 0xDF649C4E9AFDD788 | ApiSet: undefined
 */
export function rockstarMessageGetString() {
    return RockstarMessageGetString();
}
/**
 * Hash: 0x2330C12A7A605D16 | ApiSet: undefined
 */
export function scEmailMessagePushGamerToRecipList() {
    return ScEmailMessagePushGamerToRecipList();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xA770C8EEC6FB2AC5 | ApiSet: undefined
 */
export function scGamerdataGetFloat(name) {
    return ScGamerdataGetFloat(name);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xC85A7127E7AD02AA | ApiSet: undefined
 */
export function scGamerdataGetInt(name) {
    return ScGamerdataGetInt(name);
}
/**
 * ```
 * sfink: from scripts:
 * `func_720(socialclub::_0x8416FE4E4629D7D7("bIgnoreCheaterOverride"));`
 * `func_719(socialclub::_0x8416FE4E4629D7D7("bIgnoreBadSportOverride"));`
 * ```
 * Hash: 0x8416FE4E4629D7D7 | ApiSet: undefined
 */
export function scGamerdataGetBool(name) {
    return ScGamerdataGetBool(name);
}
/**
 * ```
 * Returns the nickname of the logged-in Rockstar Social Club account.
 * ```
 * Hash: 0x198D161F458ECC7F | ApiSet: undefined
 */
export function scGetNickname() {
    return ScGetNickname();
}
/**
 * ```
 * Same as HAS_ACHIEVEMENT_BEEN_PASSED
 * ```
 * Hash: 0x418DC16FAE452C1C | ApiSet: undefined
 */
export function scGetHasAchievementBeenPassed(achievement) {
    return ScGetHasAchievementBeenPassed(achievement);
}
/**
 * Hash: 0xBB8EA16ECBC976C4 | ApiSet: undefined
 */
export function scInboxGetMessageTypeAtIndex(msgIndex) {
    return ScInboxGetMessageTypeAtIndex(msgIndex);
}
/**
 * Hash: 0x03A93FF1A2CA0864 | ApiSet: undefined
 */
export function scInboxGetTotalNumMessages() {
    return ScInboxGetTotalNumMessages();
}
/**
 * Hash: 0x93028F1DB42BFD08 | ApiSet: undefined
 */
export function scInboxGetMessageIsReadAtIndex(msgIndex) {
    return ScInboxGetMessageIsReadAtIndex(msgIndex);
}
/**
 * Hash: 0x87E0052F08BD64E6 | ApiSet: undefined
 */
export function scInboxMessageGetBountyData(index) {
    return ScInboxMessageGetBountyData(index);
}
/**
 * Hash: 0xA00EFE4082C4056E | ApiSet: undefined
 */
export function scInboxMessageGetDataInt(p0, context) {
    return ScInboxMessageGetDataInt(p0, context);
}
/**
 * Hash: 0xFFE5C16F402D851D | ApiSet: undefined
 */
export function scInboxMessageGetDataBool(p0, p1) {
    return ScInboxMessageGetDataBool(p0, p1);
}
/**
 * Hash: 0xF3E31D16CBDCB304 | ApiSet: undefined
 */
export function scInboxMessageGetString(p0) {
    return ScInboxMessageGetString(p0);
}
/**
 * Hash: 0x9A2C8064B6C1E41A | ApiSet: undefined
 */
export function scInboxMessageDoApply(p0) {
    return ScInboxMessageDoApply(p0);
}
/**
 * Hash: 0x2C015348CF19CA1D | ApiSet: undefined
 */
export function scInboxMessagePop(p0) {
    return ScInboxMessagePop(p0);
}
/**
 * Hash: 0x7572EF42FC6A9B6D | ApiSet: undefined
 */
export function scInboxMessageGetDataString(p0, context, out) {
    return ScInboxMessageGetDataString(p0, context, out);
}
/**
 * Hash: 0xA68D3D229F4F3B06 | ApiSet: undefined
 */
export function scInboxMessageSendUgcStatUpdateEvent(data) {
    ScInboxMessageSendUgcStatUpdateEvent(data);
}
/**
 * Social Club native to add license plate for the user
 * Hash: 0x1989C6E6F67E76A8 | ApiSet: undefined
 */
export function scLicenseplateAdd(plateText, plateData) {
    return ScLicenseplateAdd(plateText, plateData);
}
/**
 * Hash: 0xDA024BDBD600F44A | ApiSet: undefined
 */
export function scInboxMessagePushGamerToEventRecipList() {
    return ScInboxMessagePushGamerToEventRecipList();
}
/**
 * Hash: 0x69D82604A1A5A254 | ApiSet: undefined
 */
export function scInboxMessageGetUgcdata(p0) {
    return ScInboxMessageGetUgcdata(p0);
}
/**
 * Gets number of plates in the response of the get license plates request.
 * Range: \[0, count) can be used as second argument to \_0x1D4446A62D35B0D0 and \_0x2E89990DDFF670C3
 * Hash: 0x700569DBA175A77C | ApiSet: undefined
 */
export function scLicenseplateGetCount(token) {
    return ScLicenseplateGetCount(token);
}
/**
 * Checks if the "is valid license plate" request is still pending.
 * Hash: 0xD302E99EDF0449CF | ApiSet: undefined
 */
export function scLicenseplateGetIsvalidIsPending(token) {
    return ScLicenseplateGetIsvalidIsPending(token);
}
/**
 * Returns true if the add license plate text request is still pending.
 * Hash: 0x07C61676E5BB52CD | ApiSet: undefined
 */
export function scLicenseplateGetAddIsPending(token) {
    return ScLicenseplateGetAddIsPending(token);
}
/**
 * Changes the license plate for the user (no insert).
 * Hash: 0xD0EE05FE193646EA | ApiSet: undefined
 */
export function scLicenseplateSetPlateData(oldPlateText, newPlateText, plateData) {
    return ScLicenseplateSetPlateData(oldPlateText, newPlateText, plateData);
}
/**
 * SC native to start a request for if license plate text is valid
 * Hash: 0x0F73393BAC7E6730 | ApiSet: undefined
 */
export function scLicenseplateIsvalid(plateText) {
    return ScLicenseplateIsvalid(plateText);
}
/**
 * Hash: 0x6AFD2CD753FEEF83 | ApiSet: undefined
 */
export function scInboxMessageSendBountyPresenceEvent(data) {
    return ScInboxMessageSendBountyPresenceEvent(data);
}
/**
 * Gets license plate text related to the get license plate info request
 * Hash: 0x1D4446A62D35B0D0 | ApiSet: undefined
 */
export function scLicenseplateGetPlate(token, plateIndex) {
    return ScLicenseplateGetPlate(token, plateIndex);
}
/**
 * ```
 * NativeDB Introduced: v323
 * NativeDB Added Parameter 1: Hash attrHash
 * NativeDB Added Parameter 2: float value
 * ```
 * Hash: 0xC4C4575F62534A24 | ApiSet: undefined
 */
export function scPresenceAttrSetFloat() {
    return ScPresenceAttrSetFloat();
}
/**
 * Returns a status for adding the license plate
 * Hash: 0x8147FFF6A718E1AD | ApiSet: undefined
 */
export function scLicenseplateGetAddStatus(token) {
    return ScLicenseplateGetAddStatus(token);
}
/**
 * Hash: 0x1F1E9682483697C7 | ApiSet: undefined
 */
export function scPresenceAttrSetInt(attrHash, value) {
    if (typeof attrHash === 'string')
        attrHash = this.getHashKey(attrHash);
    return ScPresenceAttrSetInt(attrHash, value);
}
/**
 * Gets the status of the is valid license plate request
 * Hash: 0x5C4EBFFA98BDB41C | ApiSet: undefined
 */
export function scLicenseplateGetIsvalidStatus(token) {
    return ScLicenseplateGetIsvalidStatus(token);
}
/**
 * Hash: 0x1753344C770358AE | ApiSet: undefined
 */
export function scProfanityGetCheckIsValid(token) {
    return ScProfanityGetCheckIsValid(token);
}
/**
 * Gets license plate data related to the get license plate info request
 * Hash: 0x2E89990DDFF670C3 | ApiSet: undefined
 */
export function scLicenseplateGetPlateData(token, plateIndex) {
    return ScLicenseplateGetPlateData(token, plateIndex);
}
/**
 * Hash: 0x82E4A58BABC15AE7 | ApiSet: undefined
 */
export function scProfanityGetCheckIsPending(token) {
    return ScProfanityGetCheckIsPending(token);
}
/**
 * Starts a task to check an entered string for profanity on the ROS/Social Club services.
 * See also: [`SC_PROFANITY_GET_CHECK_IS_VALID`](#\_0x1753344C770358AE) and [`SC_PROFANITY_GET_CHECK_IS_PENDING`](#\_0x82E4A58BABC15AE7).
 * Hash: 0x75632C5ECD7ED843 | ApiSet: undefined
 */
export function scProfanityCheckString(string) {
    return ScProfanityCheckString(string);
}
/**
 * Hash: 0xBFA0A56A817C6C7D | ApiSet: undefined
 */
export function setHandleRockstarMessageViaScript(toggle) {
    SetHandleRockstarMessageViaScript(toggle);
}
/**
 * Hash: 0x287F1F75D2803595 | ApiSet: undefined
 */
export function scPresenceAttrSetString(attrHash, value) {
    if (typeof attrHash === 'string')
        attrHash = this.getHashKey(attrHash);
    return ScPresenceAttrSetString(attrHash, value);
}
/**
 * Hash: 0x85535ACF97FC0969 | ApiSet: undefined
 */
export function scProfanityGetStringPassed(token) {
    return ScProfanityGetStringPassed(token);
}
/**
 * Hash: 0xEB2BF817463DFA28 | ApiSet: undefined
 */
export function scProfanityCheckUgcString(string) {
    return ScProfanityCheckUgcString(string);
}
/**
 * Hash: 0x930DE22F07B1CCE3 | ApiSet: undefined
 */
export function scProfanityGetStringStatus(token) {
    return ScProfanityGetStringStatus(token);
}
/**
 * Hash: 0xAFAF86043E5874E9 | ApiSet: undefined
 */
export function arePlayerFlashingStarsAboutToDrop(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return ArePlayerFlashingStarsAboutToDrop(_player);
}
/**
 * Hash: 0x8621390F0CDCFE1F | ApiSet: undefined
 */
export function assistedMovementFlushRoute() {
    AssistedMovementFlushRoute();
}
/**
 * Hash: 0xDE7465A27D403C06 | ApiSet: undefined
 */
export function canPlayerStartMission(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return CanPlayerStartMission(_player);
}
/**
 * Hash: 0x0A6EB355EE14A2DB | ApiSet: undefined
 */
export function arePlayerStarsGreyedOut(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return ArePlayerStarsGreyedOut(_player);
}
/**
 * Hash: 0xAEBF081FFC0A0E5E | ApiSet: undefined
 */
export function assistedMovementCloseRoute() {
    AssistedMovementCloseRoute();
}
/**
 * Hash: 0xF0B67A4DE6AB5F98 | ApiSet: undefined
 */
export function clearPlayerHasDamagedAtLeastOnePed(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ClearPlayerHasDamagedAtLeastOnePed(_player);
}
/**
 * Hash: 0xF297383AA91DCA29 | ApiSet: undefined
 */
export function canPedHearPlayer(player, ped) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return CanPedHearPlayer(_player, _ped);
}
/**
 * Hash: 0x10C54E4389C12B42 | ApiSet: undefined
 */
export function clearPlayerParachutePackModelOverride(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ClearPlayerParachutePackModelOverride(_player);
}
/**
 * Hash: 0x048189FAC643DEEE | ApiSet: undefined
 */
export function changePlayerPed(player, ped, b2, resetDamage) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ChangePlayerPed(_player, _ped, b2, resetDamage);
}
/**
 * ```
 * `This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);`
 * `PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.`
 * ```
 * Hash: 0xB302540597885499 | ApiSet: undefined
 */
export function clearPlayerWantedLevel(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ClearPlayerWantedLevel(_player);
}
/**
 * Hash: 0x4AACB96203D11A31 | ApiSet: undefined
 */
export function clearPlayerHasDamagedAtLeastOneNonAnimalPed(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ClearPlayerHasDamagedAtLeastOneNonAnimalPed(_player);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x290D248E25815AE8 | ApiSet: undefined
 */
export function clearPlayerReserveParachuteModelOverride(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ClearPlayerReserveParachuteModelOverride(_player);
}
/**
 * Disables vehicle rewards for the current frame.
 * Hash: 0xC142BE3BB9CE125F | ApiSet: undefined
 */
export function disablePlayerVehicleRewards(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    DisablePlayerVehicleRewards(_player);
}
/**
 * Hash: 0x8753997EB5F6EE3F | ApiSet: undefined
 */
export function clearPlayerParachuteModelOverride(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ClearPlayerParachuteModelOverride(_player);
}
/**
 * Hash: 0x0F4CC924CF8C7B21 | ApiSet: undefined
 */
export function clearPlayerParachuteVariationOverride(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ClearPlayerParachuteVariationOverride(_player);
}
/**
 * Inhibits the player from using any method of combat including melee and firearms.\
 * NOTE: Only disables the firing for one frame
 * Hash: 0x5E6CC07646BBEAB8 | ApiSet: undefined
 */
export function disablePlayerFiring(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    DisablePlayerFiring(_player, toggle);
}
/**
 * ```
 * Purpose of the BOOL currently unknown.
 * Both, true and false, work
 * ```
 * Hash: 0x94DD7888C10A979E | ApiSet: undefined
 */
export function displaySystemSigninUi(unk) {
    DisplaySystemSigninUi(unk);
}
/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0x181EC197DAEFE121 | ApiSet: undefined
 */
export function enableSpecialAbility(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    EnableSpecialAbility(_player, toggle);
}
/**
 * ```
 * used with 1,2,8,64,128 in the scripts
 * ```
 * Hash: 0xBC8983F38F78ED51 | ApiSet: undefined
 */
export function forceCleanup(cleanupFlags) {
    ForceCleanup(cleanupFlags);
}
/**
 * Hash: 0xF745B37630DF176B | ApiSet: undefined
 */
export function forceCleanupForThreadWithThisId(id, cleanupFlags) {
    ForceCleanupForThreadWithThisId(id, cleanupFlags);
}
/**
 * ```
 * `PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation`
 * ```
 * Hash: 0x4C68DDDDF0097317 | ApiSet: undefined
 */
export function forceCleanupForAllThreadsWithThisName(name, cleanupFlags) {
    ForceCleanupForAllThreadsWithThisName(name, cleanupFlags);
}
/**
 * ```
 * Appears only 3 times in the scripts, more specifically in michael1.ysc
 * -
 * This can be used to prevent dying if you are "out of the world"
 * ```
 * Hash: 0x5006D96C995A5827 | ApiSet: undefined
 */
export function extendWorldBoundaryForPlayer(position) {
    ExtendWorldBoundaryForPlayer(position.x, position.y, position.z);
}
/**
 * Hash: 0x5FC472C501CCADB3 | ApiSet: undefined
 */
export function getIsPlayerDrivingOnHighway(playerId) {
    const _playerId = playerId instanceof Entity ? playerId.remoteId() : playerId;
    return GetIsPlayerDrivingOnHighway(_playerId);
}
/**
 * Hash: 0x9A41CF4674A12272 | ApiSet: undefined
 */
export function getCauseOfMostRecentForceCleanup() {
    return GetCauseOfMostRecentForceCleanup();
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x1FC200409F10E6F1 | ApiSet: undefined
 */
export function getNumberOfPlayersInTeam(team) {
    return GetNumberOfPlayersInTeam(team);
}
/**
 * ```
 * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
 * Returns false if no entity found.
 * ```
 * Hash: 0x2975C866E6713290 | ApiSet: undefined
 */
export function getEntityPlayerIsFreeAimingAt(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetEntityPlayerIsFreeAimingAt(_player);
}
/**
 * ```
 * For Steam.
 * Always returns 0 in retail version of the game.
 * ```
 * Hash: 0x1C186837D0619335 | ApiSet: undefined
 */
export function getAchievementProgress(achievement) {
    return GetAchievementProgress(achievement);
}
/**
 * ```
 * Gets the number of players in the current session.
 * If not multiplayer, always returns 1.
 * ```
 * Hash: 0x407C7F91DDB46C16 | ApiSet: undefined
 */
export function getNumberOfPlayers() {
    return GetNumberOfPlayers();
}
/**
 * ```
 * Gets the maximum wanted level the player can get.
 * Ranges from 0 to 5.
 * ```
 * Hash: 0x462E0DB9B137DC5F | ApiSet: undefined
 */
export function getMaxWantedLevel() {
    return GetMaxWantedLevel();
}
/**
 * Hash: 0x2F395D61F3A1F877 | ApiSet: undefined
 */
export function getPlayerCurrentStealthNoise(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerCurrentStealthNoise(_player);
}
/**
 * Hash: 0x56105E599CAB0EFA | ApiSet: undefined
 */
export function getPlayerFakeWantedLevel(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerFakeWantedLevel(_player);
}
/**
 * ```
 * Returns the group ID the player is member of.
 * ```
 * Hash: 0x0D127585F77030AF | ApiSet: undefined
 */
export function getPlayerGroup(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerGroup(_player);
}
/**
 * ```
 * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
 * ```
 * Hash: 0xA5EDC40EF369B48D | ApiSet: undefined
 */
export function getPlayerIndex() {
    return GetPlayerIndex();
}
/**
 * Hash: 0x5DDFE2FF727F3CA3 | ApiSet: undefined
 */
export function getPlayerHasReserveParachute(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerHasReserveParachute(_player);
}
/**
 * Hash: 0x8BC515BAE4AAF8FF | ApiSet: undefined
 */
export function getPlayerHealthRechargeLimit(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerHealthRechargeLimit(_player);
}
/**
 * ```
 * Returns the Player's Invincible status.
 * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
 * bool IsPlayerInvincible(Player player)
 * {
 * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 * return false;
 * }
 * ============================================================
 * This has bothered me for too long, whoever may come across this, where did anyone ever come up with this made up hash? 0x733A643B5B0C53C1 I've looked all over old hash list, and this nativedb I can not find that PC hash anywhere. What native name is it now or was it?
 * ```
 * Hash: 0xB721981B2B939E07 | ApiSet: undefined
 */
export function getPlayerInvincible(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerInvincible(_player);
}
/**
 * Hash: 0x92659B4CE1863CB3 | ApiSet: undefined
 */
export function getPlayerMaxArmour(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerMaxArmour(_player);
}
/**
 * Returns the players name from a specified player index
 * Hash: 0x6D0DE6A7B5DA71F8 | ApiSet: undefined
 */
export function getPlayerName(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerName(_player);
}
/**
 * Hash: 0x6E9C742F340CE5A2 | ApiSet: undefined
 */
export function getPlayerParachutePackTintIndex(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerParachutePackTintIndex(_player);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xC219887CA3E65C41 | ApiSet: undefined
 */
export function getPlayerParachuteModelOverride(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerParachuteModelOverride(_player);
}
/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * Hash: 0x75D3F7A1B0D9B145 | ApiSet: undefined
 */
export function getPlayerParachuteTintIndex(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerParachuteTintIndex(_player);
}
/**
 * Gets the ped for a specified player index.
 * Hash: 0x43A66C31C68491C0 | ApiSet: undefined
 */
export function getPlayerPed(playerId) {
    const _playerId = playerId instanceof Entity ? playerId.remoteId() : playerId;
    return GetPlayerPed(_playerId);
}
/**
 * Hash: 0xEF56DBABD3CD4887 | ApiSet: undefined
 */
export function getPlayerParachuteSmokeTrailColor(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerParachuteSmokeTrailColor(_player);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x37FAAA68DCA9D08D | ApiSet: undefined
 */
export function getPlayerReserveParachuteModelOverride(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerReserveParachuteModelOverride(_player);
}
/**
 * ```
 * `Does the same like PLAYER::GET_PLAYER_PED`
 * ```
 * Hash: 0x50FAC3A3E030A6E1 | ApiSet: undefined
 */
export function getPlayerPedScriptIndex(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerPedScriptIndex(_player);
}
/**
 * Hash: 0x3F9F16F8E65A7ED7 | ApiSet: undefined
 */
export function getPlayerSprintStaminaRemaining(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerSprintStaminaRemaining(_player);
}
/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * Hash: 0xD5A016BC3C09CF40 | ApiSet: undefined
 */
export function getPlayerReserveParachuteTintIndex(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerReserveParachuteTintIndex(_player);
}
/**
 * Hash: 0xE902EF951DCE178F | ApiSet: undefined
 */
export function getPlayerRgbColour(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerRgbColour(_player);
}
/**
 * Hash: 0xA1FCF8E6AF40B731 | ApiSet: undefined
 */
export function getPlayerUnderwaterTimeRemaining(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerUnderwaterTimeRemaining(_player);
}
/**
 * Hash: 0x1885BC9B108B4C99 | ApiSet: undefined
 */
export function getPlayerSprintTimeRemaining(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerSprintTimeRemaining(_player);
}
/**
 * Hash: 0xE28E54788CE8F12D | ApiSet: undefined
 */
export function getPlayerWantedLevel(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerWantedLevel(_player);
}
/**
 * ```
 * Returns the time since the character was arrested in (ms) milliseconds.
 * example
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
 * UI.DrawSubtitle(time.ToString());
 * if player has not been arrested, the int returned will be -1.
 * ```
 * Hash: 0x5063F92F07C2A316 | ApiSet: undefined
 */
export function getTimeSinceLastArrest() {
    return GetTimeSinceLastArrest();
}
/**
 * ```
 * Gets the player's team.
 * Does nothing in singleplayer.
 * ```
 * Hash: 0x37039302F4E0A008 | ApiSet: undefined
 */
export function getPlayerTeam(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerTeam(_player);
}
/**
 * ```
 * Assigns the handle of locked-on melee target to *entity that you pass it.
 * Returns false if no entity found.
 * ```
 * Hash: 0x13EDE1A5DBF797C9 | ApiSet: undefined
 */
export function getPlayerTargetEntity(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetPlayerTargetEntity(_player);
}
/**
 * ```
 * Returns the time since the character died in (ms) milliseconds.
 * example
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
 * UI.DrawSubtitle(time.ToString());
 * if player has not died, the int returned will be -1.
 * ```
 * Hash: 0xC7034807558DDFCA | ApiSet: undefined
 */
export function getTimeSinceLastDeath() {
    return GetTimeSinceLastDeath();
}
/**
 * ### Warning
 * This native will return `0` if the last vehicle the player was in was destroyed.
 * ### Alternative
 * You can use [GET_VEHICLE_PED_IS_IN](#\_0x9A9112A0FE9A4713), which will actually get the last vehicle, even if it was destroyed.
 * Hash: 0xB6997A7EB3F5C8C0 | ApiSet: undefined
 */
export function getPlayersLastVehicle() {
    return GetPlayersLastVehicle();
}
/**
 * Hash: 0x0C92BA89F1AF26F8 | ApiSet: undefined
 */
export function getPlayerWantedCentrePosition(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return new Vector3(GetPlayerWantedCentrePosition(_player));
}
/**
 * Hash: 0x5D35ECF3A81A0EE0 | ApiSet: undefined
 */
export function getTimeSincePlayerHitVehicle(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetTimeSincePlayerHitVehicle(_player);
}
/**
 * Hash: 0xDB89591E290D9182 | ApiSet: undefined
 */
export function getTimeSincePlayerDroveAgainstTraffic(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetTimeSincePlayerDroveAgainstTraffic(_player);
}
/**
 * Hash: 0xD559D2BE9E37853B | ApiSet: undefined
 */
export function getTimeSincePlayerDroveOnPavement(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetTimeSincePlayerDroveOnPavement(_player);
}
/**
 * ```
 * Drft
 * ```
 * Hash: 0xFDD179EAF45B556C | ApiSet: undefined
 */
export function getWantedLevelThreshold(wantedLevel) {
    return GetWantedLevelThreshold(wantedLevel);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xA72200F51875FEA4 | ApiSet: undefined
 */
export function getWantedLevelParoleDuration() {
    return GetWantedLevelParoleDuration();
}
/**
 * Hash: 0xE36A25322DC35F42 | ApiSet: undefined
 */
export function getTimeSincePlayerHitPed(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetTimeSincePlayerHitPed(_player);
}
/**
 * Hash: 0x867365E111A3B6EB | ApiSet: undefined
 */
export function hasAchievementBeenPassed(achievement) {
    return HasAchievementBeenPassed(achievement);
}
/**
 * ```
 * Remnant from GTA IV. Does nothing in GTA V.
 * ```
 * Hash: 0x085DEB493BE80812 | ApiSet: undefined
 */
export function getWantedLevelRadius(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetWantedLevelRadius(_player);
}
/**
 * Hash: 0x3C49C870E66F0A28 | ApiSet: undefined
 */
export function givePlayerRagdollControl(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    GivePlayerRagdollControl(_player, toggle);
}
/**
 * ```
 * Achievements from 0-57
 * more achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.
 * ```
 * Hash: 0xBEC7076D64130195 | ApiSet: undefined
 */
export function giveAchievementToPlayer(achievement) {
    return GiveAchievementToPlayer(achievement);
}
/**
 * Hash: 0xBC0753C9CA14B506 | ApiSet: undefined
 */
export function hasPlayerBeenShotByCop(player, ms, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return HasPlayerBeenShotByCop(_player, ms, p2);
}
/**
 * Hash: 0x20CE80B0C2BF4ACC | ApiSet: undefined
 */
export function hasPlayerDamagedAtLeastOnePed(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return HasPlayerDamagedAtLeastOnePed(_player);
}
/**
 * Hash: 0xE4B90F367BD81752 | ApiSet: undefined
 */
export function hasPlayerDamagedAtLeastOneNonAnimalPed(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return HasPlayerDamagedAtLeastOneNonAnimalPed(_player);
}
/**
 * Hash: 0xC968670BFACE42D9 | ApiSet: undefined
 */
export function hasForceCleanupOccurred(cleanupFlags) {
    return HasForceCleanupOccurred(cleanupFlags);
}
/**
 * ```
 * Returns true if an unk value is greater than 0.0f
 * ```
 * Hash: 0x38D28DA81E4E9BF9 | ApiSet: undefined
 */
export function isPlayerBattleAware(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerBattleAware(_player);
}
/**
 * Hash: 0xD55DDFB47991A294 | ApiSet: undefined
 */
export function hasPlayerLeftTheWorld(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return HasPlayerLeftTheWorld(_player);
}
/**
 * ```
 * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
 * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
 * ```
 * Hash: 0x7C814D2FB49F40C0 | ApiSet: undefined
 */
export function isPlayerCamControlDisabled() {
    return IsPlayerCamControlDisabled();
}
/**
 * Hash: 0xD705740BB0A1CF4C | ApiSet: undefined
 */
export function hasPlayerBeenSpottedInStolenVehicle(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return HasPlayerBeenSpottedInStolenVehicle(_player);
}
/**
 * ```
 * Returns TRUE if the player ('s ped) is climbing at the moment.
 * ```
 * Hash: 0x95E8F73DC65EFB9C | ApiSet: undefined
 */
export function isPlayerClimbing(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerClimbing(_player);
}
/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * --------------------------------------------------------
 * `if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))`
 * ```
 * Hash: 0x9EC6603812C24710 | ApiSet: undefined
 */
export function intToParticipantindex(value) {
    return IntToParticipantindex(value);
}
/**
 * ```
 * Return true while player is being arrested / busted.
 * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
 * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
 * ```
 * Hash: 0x388A47C51ABDAC8E | ApiSet: undefined
 */
export function isPlayerBeingArrested(player, atArresting) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerBeingArrested(_player, atArresting);
}
/**
 * ```
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * ```
 * Hash: 0x41BD2A6B006AF756 | ApiSet: undefined
 */
export function intToPlayerindex(value) {
    return IntToPlayerindex(value);
}
/**
 * Hash: 0x424D4687FA1E5652 | ApiSet: undefined
 */
export function isPlayerDead(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerDead(_player);
}
/**
 * Hash: 0x65FAEE425DE637B0 | ApiSet: undefined
 */
export function isPlayerBluetoothEnable(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerBluetoothEnable(_player);
}
/**
 * ```cpp
 * enum eViolationType {
 * // Checks if the player is driving on pedestrians walk ways
 * VT_PAVED_PEDESTRIAN_AREAS = 0,
 * // Checks if the player is running through red lights
 * // This takes some time to return true.
 * VT_RUNNING_REDS = 1,
 * // checks if the player is driving on the wrong side of the road
 * VT_AGAINST_TRAFFIC = 2
 * };
 * ```
 * Used solely in "Al Di Napoli" with type 2 for a voiceline.
 * Hash: 0xF10B44FD479D69F3 | ApiSet: undefined
 */
export function isPlayerDrivingDangerously(player, type) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerDrivingDangerously(_player, type);
}
/**
 * ```
 * Can the player control himself, used to disable controls for player for things like a cutscene.
 * ---
 * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
 * ```
 * Hash: 0x49C32D60007AFA47 | ApiSet: undefined
 */
export function isPlayerControlOn(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerControlOn(_player);
}
/**
 * ```
 * Gets a value indicating whether the specified player is currently aiming freely.
 * ```
 * Hash: 0x2E397FD2ECD37C87 | ApiSet: undefined
 */
export function isPlayerFreeAiming(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerFreeAiming(_player);
}
/**
 * Hash: 0xDCCFD3F106C36AB4 | ApiSet: undefined
 */
export function isPlayerFreeForAmbientTask(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerFreeForAmbientTask(_player);
}
/**
 * Hash: 0xFA1E2BF8B10598F9 | ApiSet: undefined
 */
export function isPlayerPressingHorn(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerPressingHorn(_player);
}
/**
 * ```
 * this function is hard-coded to always return 0.
 * ```
 * Hash: 0x74556E1420867ECA | ApiSet: undefined
 */
export function isPlayerLoggingInNp() {
    return IsPlayerLoggingInNp();
}
/**
 * ```
 * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
 * ```
 * Hash: 0x3C06B5C839B38F7B | ApiSet: undefined
 */
export function isPlayerFreeAimingAtEntity(player, entity) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsPlayerFreeAimingAtEntity(_player, _entity);
}
/**
 * ```
 * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
 * ```
 * Hash: 0x5E9564D8246B909A | ApiSet: undefined
 */
export function isPlayerPlaying(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerPlaying(_player);
}
/**
 * Hash: 0x908CBECC2CAA3690 | ApiSet: undefined
 */
export function isPlayerReadyForCutscene(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerReadyForCutscene(_player);
}
/**
 * Hash: 0x78CFE51896B6B8A4 | ApiSet: undefined
 */
export function isPlayerTargettingAnything(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerTargettingAnything(_player);
}
/**
 * It returns true if the player is online, suggesting they are also logged in locally. Note that this is an alias for `NETWORK_IS_SIGNED_ONLINE`.
 * Hash: 0xF25D331DC2627BBC | ApiSet: undefined
 */
export function isPlayerOnline() {
    return IsPlayerOnline();
}
/**
 * ```
 * Returns true if the player is riding a train.
 * ```
 * Hash: 0x4EC12697209F2196 | ApiSet: undefined
 */
export function isPlayerRidingTrain(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerRidingTrain(_player);
}
/**
 * Hash: 0x238DB2A2C23EE9EF | ApiSet: undefined
 */
export function isPlayerWantedLevelGreater(player, wantedLevel) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerWantedLevelGreater(_player, wantedLevel);
}
/**
 * Hash: 0x7912F7FC4F6264B6 | ApiSet: undefined
 */
export function isPlayerTargettingEntity(player, entity) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsPlayerTargettingEntity(_player, _entity);
}
/**
 * Hash: 0x8A876A65283DD7D7 | ApiSet: undefined
 */
export function isPlayerScriptControlOn(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerScriptControlOn(_player);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x05A1FE504B7F2587 | ApiSet: undefined
 */
export function isSpecialAbilityMeterFull(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsSpecialAbilityMeterFull(_player);
}
/**
 * Hash: 0x02B15662D7F8886F | ApiSet: undefined
 */
export function isPlayerTeleportActive() {
    return IsPlayerTeleportActive();
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x3E5F7FC85D854E15 | ApiSet: undefined
 */
export function isSpecialAbilityActive(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsSpecialAbilityActive(_player);
}
/**
 * Hash: 0x2382AB11450AE7BA | ApiSet: undefined
 */
export function _0x2382AB11450AE7BA(p0, p1) {
    Citizen.invokeNative('0x2382AB11450AE7BA', p0, p1);
}
/**
 * Hash: 0xC6017F6A6CDFA694 | ApiSet: undefined
 */
export function isSpecialAbilityUnlocked(playerModel) {
    if (typeof playerModel === 'string')
        playerModel = this.getHashKey(playerModel);
    return IsSpecialAbilityUnlocked(playerModel);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xB1D200FE26AEF3CB | ApiSet: undefined
 */
export function isSpecialAbilityEnabled(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsSpecialAbilityEnabled(_player);
}
/**
 * ```
 * Used with radios:
 * void sub_cf383(auto _a0) {
 * if ((a_0)==1) {
 * `if (MISC::IS_BIT_SET((g_240005._f1), 3)) {`
 * `PLAYER::_2F7CEB6520288061(0);`
 * `AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 0);`
 * `AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);`
 * `AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 0);`
 * }
 * sub_cf3f6(1);
 * } else {
 * `if (MISC::IS_BIT_SET((g_240005._f1), 3)) {`
 * `PLAYER::_2F7CEB6520288061(1);`
 * `AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 1);`
 * `AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);`
 * `AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 1);`
 * }
 * sub_cf3f6(0);
 * }
 * }
 * SET_PLAYER_S*
 * ```
 * Hash: 0x2F7CEB6520288061 | ApiSet: undefined
 */
export function _0x2F7CEB6520288061(p0) {
    Citizen.invokeNative('0x2F7CEB6520288061', p0);
}
/**
 * ```
 * 2 matches in 1 script - am_hold_up
 * Used in multiplayer scripts?
 * ```
 * Hash: 0x0032A6DBA562C518 | ApiSet: undefined
 */
export function _0x0032A6DBA562C518() {
    Citizen.invokeNative('0x0032A6DBA562C518');
}
/**
 * Hash: 0x5D511E3867C87139 | ApiSet: undefined
 */
export function isSystemUiBeingDisplayed() {
    return IsSystemUiBeingDisplayed();
}
/**
 * Hash: 0x2F41A3BAE005E5FA | ApiSet: undefined
 */
export function _0x2F41A3BAE005E5FA(p0, p1) {
    Citizen.invokeNative('0x2F41A3BAE005E5FA', p0, p1);
}
/**
 * Hash: 0x36F1B38855F2A8DF | ApiSet: undefined
 */
export function _0x36F1B38855F2A8DF(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0x36F1B38855F2A8DF', _player);
}
/**
 * ```
 * This has been found in use in the decompiled files.
 * ```
 * Hash: 0x4669B3ED80F24B4E | ApiSet: undefined
 */
export function _0x4669B3ED80F24B4E(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0x4669B3ED80F24B4E', _player);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x237440E46D918649 | ApiSet: undefined
 */
export function _0x237440E46D918649(p0) {
    Citizen.invokeNative('0x237440E46D918649', p0);
}
/**
 * ```
 * Name between DISABLE_ALL_CONTROL_ACTIONS and DISABLE_CONTROL_ACTION
 * ```
 * Hash: 0x5501B7A5CDB79D37 | ApiSet: undefined
 */
export function _0x5501B7A5CDB79D37(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0x5501B7A5CDB79D37', _player);
}
/**
 * ```
 * IS_*
 * ```
 * Hash: 0x690A61A6D13583F6 | ApiSet: undefined
 */
export function _0x690A61A6D13583F6(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return Citizen.invokeNative('0x690A61A6D13583F6', _player);
}
/**
 * Hash: 0x31E90B8873A4CD3B | ApiSet: undefined
 */
export function _0x31E90B8873A4CD3B(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0x31E90B8873A4CD3B', _player, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x70A382ADEC069DD3 | ApiSet: undefined
 */
export function _0x70A382ADEC069DD3(coordX, coordY, coordZ) {
    Citizen.invokeNative('0x70A382ADEC069DD3', coordX, coordY, coordZ);
}
/**
 * Hash: 0x55FCC0C390620314 | ApiSet: undefined
 */
export function _0x55FCC0C390620314(player1, player2, toggle) {
    const _player1 = player1 instanceof Entity ? player1.remoteId() : player1;
    const _player2 = player2 instanceof Entity ? player2.remoteId() : player2;
    Citizen.invokeNative('0x55FCC0C390620314', _player1, _player2, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x7148E0F43D11F0D9 | ApiSet: undefined
 */
export function _0x7148E0F43D11F0D9() {
    Citizen.invokeNative('0x7148E0F43D11F0D9');
}
/**
 * Hash: 0x6E4361FF3E8CD7CA | ApiSet: undefined
 */
export function _0x6E4361FF3E8CD7CA(p0) {
    return Citizen.invokeNative('0x6E4361FF3E8CD7CA', p0);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x823EC8E82BA45986 | ApiSet: undefined
 */
export function _0x823EC8E82BA45986(p0) {
    Citizen.invokeNative('0x823EC8E82BA45986', p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x7BAE68775557AE0B | ApiSet: undefined
 */
export function _0x7BAE68775557AE0B(p0, p1, p2, p3, p4, p5) {
    Citizen.invokeNative('0x7BAE68775557AE0B', p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * SET_PLAYER_MAX_*
 * ```
 * Hash: 0x8D768602ADEF2245 | ApiSet: undefined
 */
export function _0x8D768602ADEF2245(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0x8D768602ADEF2245', _player, p1);
}
/**
 * ADD_\*
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x9097EB6D4BB9A12A | ApiSet: undefined
 */
export function _0x9097EB6D4BB9A12A(player, entity) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x9097EB6D4BB9A12A', _player, _entity);
}
/**
 * Hash: 0x7E07C78925D5FD96 | ApiSet: undefined
 */
export function _0x7E07C78925D5FD96(p0) {
    return Citizen.invokeNative('0x7E07C78925D5FD96', p0);
}
/**
 * Hash: 0x9EDD76E87D5D51BA | ApiSet: undefined
 */
export function _0x9EDD76E87D5D51BA(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0x9EDD76E87D5D51BA', _player);
}
/**
 * ```
 * This has been found in use in the decompiled files.
 * ```
 * Hash: 0xAD73CE5A09E42D12 | ApiSet: undefined
 */
export function _0xAD73CE5A09E42D12(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xAD73CE5A09E42D12', _player);
}
/**
 * REMOVE_\*
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x9F260BFB59ADBCA3 | ApiSet: undefined
 */
export function _0x9F260BFB59ADBCA3(player, entity) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x9F260BFB59ADBCA3', _player, _entity);
}
/**
 * ```
 * `PLAYER::0xBF6993C7(rPtr((&l_122) + 71)); // Found in decompilation`
 * <strong></strong>
 * In "am_hold_up.ysc" used once:
 * `l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);`
 * `PLAYER::_B45EFF719D8427A6((l_8d._f47));`
 * ```
 * Hash: 0xB45EFF719D8427A6 | ApiSet: undefined
 */
export function _0xB45EFF719D8427A6(p0) {
    Citizen.invokeNative('0xB45EFF719D8427A6', p0);
}
/**
 * ```
 * Disables something. Used only once in R* scripts (freemode.ysc).
 * DISABLE_PLAYER_*
 * ```
 * Hash: 0xB885852C39CC265D | ApiSet: undefined
 */
export function _0xB885852C39CC265D() {
    Citizen.invokeNative('0xB885852C39CC265D');
}
/**
 * ```
 * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
 * ```
 * Hash: 0xC3376F42B1FACCC6 | ApiSet: undefined
 */
export function _0xC3376F42B1FACCC6(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xC3376F42B1FACCC6', _player);
}
/**
 * ```
 * Seems to only appear in scripts used in Singleplayer.
 * Always used like this in scripts
 * `PLAYER::_BC9490CA15AEA8FB(PLAYER::PLAYER_ID());`
 * ```
 * Hash: 0xBC9490CA15AEA8FB | ApiSet: undefined
 */
export function _0xBC9490CA15AEA8FB(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xBC9490CA15AEA8FB', _player);
}
/**
 * ```
 * Found in "director_mode", "fm_bj_race_controler", "fm_deathmatch_controler", "fm_impromptu_dm_controler", "fm_race_controler", "gb_deathmatch".
 * ```
 * Hash: 0xCAC57395B151135F | ApiSet: undefined
 */
export function _0xCAC57395B151135F(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xCAC57395B151135F', _player, p1);
}
/**
 * ```
 * Returns profile setting 237.
 * GET_*
 * ```
 * Hash: 0xB9CF1F793A9F1BF1 | ApiSet: undefined
 */
export function _0xB9CF1F793A9F1BF1() {
    return Citizen.invokeNative('0xB9CF1F793A9F1BF1');
}
/**
 * Always returns false.
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xDCC07526B8EC45AF | ApiSet: undefined
 */
export function _0xDCC07526B8EC45AF(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return Citizen.invokeNative('0xDCC07526B8EC45AF', _player);
}
/**
 * Hash: 0xD821056B9ACF8052 | ApiSet: undefined
 */
export function _0xD821056B9ACF8052(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xD821056B9ACF8052', _player, p1);
}
/**
 * ```
 * Returns profile setting 243.
 * GET_*
 * ```
 * Hash: 0xCB645E85E97EA48B | ApiSet: undefined
 */
export function _0xCB645E85E97EA48B() {
    return Citizen.invokeNative('0xCB645E85E97EA48B');
}
/**
 * Hash: 0xDE45D1A1EF45EE61 | ApiSet: undefined
 */
export function _0xDE45D1A1EF45EE61(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xDE45D1A1EF45EE61', _player, toggle);
}
/**
 * Hash: 0xFAC75988A7D078D3 | ApiSet: undefined
 */
export function _0xFAC75988A7D078D3(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xFAC75988A7D078D3', _player);
}
/**
 * ```
 * 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
 * ```
 * Hash: 0xDD2620B7B9D16FF1 | ApiSet: undefined
 */
export function _0xDD2620B7B9D16FF1(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return Citizen.invokeNative('0xDD2620B7B9D16FF1', _player, p1);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xFFEE8FA29AB9A18E | ApiSet: undefined
 */
export function _0xFFEE8FA29AB9A18E(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xFFEE8FA29AB9A18E', _player);
}
/**
 * ```
 * Does exactly the same thing as PLAYER_ID()
 * ```
 * Hash: 0xEE68096F9F37341E | ApiSet: undefined
 */
export function networkPlayerIdToInt() {
    return NetworkPlayerIdToInt();
}
/**
 * ```
 * Only 1 match. ob_sofa_michael.
 * `PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;`
 * ```
 * Hash: 0xED51733DC73AED51 | ApiSet: undefined
 */
export function playerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7) {
    PlayerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7);
}
/**
 * ```
 * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 * ```
 * Hash: 0x1DD5897E2FA6E7C9 | ApiSet: undefined
 */
export function playerDetachVirtualBound() {
    PlayerDetachVirtualBound();
}
/**
 * Returns the entity handle for the local player ped. Note that this entity handle will change after using commands such as SET_PLAYER_MODEL.
 * Hash: 0xD80958FC74E988A6 | ApiSet: undefined
 */
export function playerPedId() {
    return PlayerPedId();
}
/**
 * Returns the player index for the local player.
 * Hash: 0x4F8644AF03D0E0D6 | ApiSet: undefined
 */
export function playerId() {
    return PlayerId();
}
/**
 * ```
 * `PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));`
 * From am_armybase.ysc.c4:
 * `PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));`
 * -----
 * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7
 * -----
 * crimeType:
 * 1: Firearms possession
 * 2: Person running a red light ("5-0-5")
 * 3: Reckless driver
 * 4: Speeding vehicle (a "5-10")
 * 5: Traffic violation (a "5-0-5")
 * 6: Motorcycle rider without a helmet
 * 7: Vehicle theft (a "5-0-3")
 * 8: Grand Theft Auto
 * 9: ???
 * 10: ???
 * 11: Assault on a civilian (a "2-40")
 * 12: Assault on an officer
 * 13: Assault with a deadly weapon (a "2-45")
 * 14: Officer shot (a "2-45")
 * 15: Pedestrian struck by a vehicle
 * 16: Officer struck by a vehicle
 * 17: Helicopter down (an "AC"?)
 * 18: Civilian on fire (a "2-40")
 * 19: Officer set on fire (a "10-99")
 * 20: Car on fire
 * 21: Air unit down (an "AC"?)
 * 22: An explosion (a "9-96")
 * 23: A stabbing (a "2-45") (also something else I couldn't understand)
 * 24: Officer stabbed (also something else I couldn't understand)
 * 25: Attack on a vehicle ("MDV"?)
 * 26: Damage to property
 * 27: Suspect threatening officer with a firearm
 * 28: Shots fired
 * 29: ???
 * 30: ???
 * 31: ???
 * 32: ???
 * 33: ???
 * 34: A "2-45"
 * 35: ???
 * 36: A "9-25"
 * 37: ???
 * 38: ???
 * 39: ???
 * 40: ???
 * 41: ???
 * 42: ???
 * 43: Possible disturbance
 * 44: Civilian in need of assistance
 * 45: ???
 * 46: ???
 * ```
 * Hash: 0xE9B09589827545E7 | ApiSet: undefined
 */
export function reportCrime(player, crimeType, wantedLvlThresh) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ReportCrime(_player, crimeType, wantedLvlThresh);
}
/**
 * Hash: 0xF3AC26D3CC576528 | ApiSet: undefined
 */
export function removePlayerHelmet(player, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    RemovePlayerHelmet(_player, p2);
}
/**
 * Hash: 0x2D03E13C460760D6 | ApiSet: undefined
 */
export function resetPlayerArrestState(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ResetPlayerArrestState(_player);
}
/**
 * Hash: 0xA6F312FCCE9C1DFE | ApiSet: undefined
 */
export function resetPlayerStamina(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ResetPlayerStamina(_player);
}
/**
 * Hash: 0xDC64D2C53493ED12 | ApiSet: undefined
 */
export function reportPoliceSpottedPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ReportPoliceSpottedPlayer(_player);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xDA1DF03D5A315F4E | ApiSet: undefined
 */
export function resetWorldBoundaryForPlayer() {
    ResetWorldBoundaryForPlayer();
}
/**
 * Adds a percentage to a players stamina
 * Hash: 0xA352C1B864CAFD33 | ApiSet: undefined
 */
export function restorePlayerStamina(player, percentage) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    RestorePlayerStamina(_player, percentage);
}
/**
 * Hash: 0x19531C47A2ABD691 | ApiSet: undefined
 */
export function resetPlayerInputGait(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ResetPlayerInputGait(_player);
}
/**
 * Hash: 0xB9D0DD990DC141DD | ApiSet: undefined
 */
export function resetWantedLevelDifficulty(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ResetWantedLevelDifficulty(_player);
}
/**
 * Hash: 0x471D2FF42A94B4F2 | ApiSet: undefined
 */
export function setAllRandomPedsFleeThisFrame(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetAllRandomPedsFleeThisFrame(_player);
}
/**
 * ```
 * This can be between 1.0f - 14.9f
 * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
 * On PC the multiplier can be between 0.0f and 50.0f (inclusive).
 * ```
 * Hash: 0xCA7DC8329F0A1E9E | ApiSet: undefined
 */
export function setAirDragMultiplierForPlayersVehicle(player, multiplier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetAirDragMultiplierForPlayersVehicle(_player, multiplier);
}
/**
 * Sets whether all random peds will run away from the player if they are agitated (threatened) (bool=true), or if they will stand their ground (bool=false).
 * Hash: 0x056E0FE8534C2949 | ApiSet: undefined
 */
export function setAllRandomPedsFlee(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetAllRandomPedsFlee(_player, toggle);
}
/**
 * For Steam.
 * Does nothing and always returns false in the retail version of the game.
 * Hash: 0xC2AFFFDABBDC2C5C | ApiSet: undefined
 */
export function setAchievementProgress(achievement, progress) {
    return SetAchievementProgress(achievement, progress);
}
/**
 * Hash: 0x9F343285A00B4BB6 | ApiSet: undefined
 */
export function setAutoGiveParachuteWhenEnterPlane(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetAutoGiveParachuteWhenEnterPlane(_player, toggle);
}
/**
 * Hash: 0xD2B315B6689D537D | ApiSet: undefined
 */
export function setAutoGiveScubaGearWhenExitVehicle(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetAutoGiveScubaGearWhenExitVehicle(_player, toggle);
}
/**
 * Hash: 0xDB172424876553F4 | ApiSet: undefined
 */
export function setDispatchCopsForPlayer(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetDispatchCopsForPlayer(_player, toggle);
}
/**
 * Hash: 0x8EEDA153AD141BA4 | ApiSet: undefined
 */
export function setEveryoneIgnorePlayer(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetEveryoneIgnorePlayer(_player, toggle);
}
/**
 * Hash: 0x5DC40A8869C22141 | ApiSet: undefined
 */
export function setPlayerBluetoothState(player, state) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerBluetoothState(_player, state);
}
/**
 * Hash: 0x2E8AABFA40A84F8C | ApiSet: undefined
 */
export function setDisableAmbientMeleeMove(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetDisableAmbientMeleeMove(_player, toggle);
}
/**
 * Hash: 0x596976B02B6B5700 | ApiSet: undefined
 */
export function setIgnoreLowPriorityShockingEvents(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetIgnoreLowPriorityShockingEvents(_player, toggle);
}
/**
 * Hash: 0xF401B182DBA8AF53 | ApiSet: undefined
 */
export function setPlayerCanLeaveParachuteSmokeTrail(player, enabled) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerCanLeaveParachuteSmokeTrail(_player, enabled);
}
/**
 * Hash: 0xAA5F02DB48D704B9 | ApiSet: undefined
 */
export function setMaxWantedLevel(maxWantedLevel) {
    SetMaxWantedLevel(maxWantedLevel);
}
/**
 * ```
 * Every occurrence was either 0 or 2.
 * ```
 * Hash: 0x9F7BBA2EA6372500 | ApiSet: undefined
 */
export function setPlayerClothPackageIndex(index) {
    SetPlayerClothPackageIndex(index);
}
/**
 * ```
 * Sets whether this player can be hassled by gangs.
 * ```
 * Hash: 0xD5E460AD7020A246 | ApiSet: undefined
 */
export function setPlayerCanBeHassledByGangs(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerCanBeHassledByGangs(_player, toggle);
}
/**
 * Sets whether the player is able to do drive-bys in vehicle (shooting & aiming in vehicles), this also includes middle finger taunts.
 * This is a toggle, it does not have to be ran every frame.
 * Hash: 0x6E8834B52EC20C77 | ApiSet: undefined
 */
export function setPlayerCanDoDriveBy(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerCanDoDriveBy(_player, toggle);
}
/**
 * Hash: 0x749FADDF97DFE930 | ApiSet: undefined
 */
export function setPlayerClothPinFrames(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerClothPinFrames(_player, p1);
}
/**
 * ```
 * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
 * ```
 * Hash: 0x14D913B777DFF5DA | ApiSet: undefined
 */
export function setPlayerClothLockCounter(value) {
    SetPlayerClothLockCounter(value);
}
/**
 * Hash: 0x7651BC64AE59E128 | ApiSet: undefined
 */
export function setPlayerForceSkipAimIntro(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerForceSkipAimIntro(_player, toggle);
}
/**
 * ```
 * Sets whether this player can take cover.
 * ```
 * Hash: 0xD465A8599DFF6814 | ApiSet: undefined
 */
export function setPlayerCanUseCover(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerCanUseCover(_player, toggle);
}
/**
 * Hash: 0xEFD79FA81DFBA9CB | ApiSet: undefined
 */
export function setPlayerFallDistance(player, distance) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerFallDistance(_player, distance);
}
/**
 * Hash: 0x7DDAB28D31FAC363 | ApiSet: undefined
 */
export function setPlayerHasReserveParachute(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerHasReserveParachute(_player);
}
/**
 * Hash: 0xC388A0F065F5BC34 | ApiSet: undefined
 */
export function setPlayerHealthRechargeLimit(player, limit) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerHealthRechargeLimit(_player, limit);
}
/**
 * ```
 * Flags:
 * SPC_AMBIENT_SCRIPT = (1 << 1),
 * SPC_CLEAR_TASKS = (1 << 2),
 * SPC_REMOVE_FIRES = (1 << 3),
 * SPC_REMOVE_EXPLOSIONS = (1 << 4),
 * SPC_REMOVE_PROJECTILES = (1 << 5),
 * SPC_DEACTIVATE_GADGETS = (1 << 6),
 * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
 * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
 * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
 * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
 * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
 * SPC_ALLOW_PAD_SHAKE = (1 << 12)
 * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
 * ```
 * Hash: 0x8D32347D6D4C40A2 | ApiSet: undefined
 */
export function setPlayerControl(player, bHasControl, flags) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerControl(_player, bHasControl, flags);
}
/**
 * Make the player impervious to all forms of damage.
 * Hash: 0x239528EACDC3E7DE | ApiSet: undefined
 */
export function setPlayerInvincible(player, bInvincible) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerInvincible(_player, bInvincible);
}
/**
 * Hash: 0x75E7D505F2B15902 | ApiSet: undefined
 */
export function setPlayerForcedZoom(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerForcedZoom(_player, toggle);
}
/**
 * Hash: 0x0FEE4F80AC44A726 | ApiSet: undefined
 */
export function setPlayerForcedAim(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerForcedAim(_player, toggle);
}
/**
 * This multiplier is reset to `1.0` every time the player ped is changed, often times via [`SET_PLAYER_MODEL`](#\_0x00A1CADD00108836) or [`CHANGE_PLAYER_PED`](#\_0x048189FAC643DEEE).
 * Hash: 0x5DB660B38DD98A31 | ApiSet: undefined
 */
export function setPlayerHealthRechargeMultiplier(player, regenRate) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerHealthRechargeMultiplier(_player, regenRate);
}
/**
 * ```
 * Affects the range of auto aim target.
 * ```
 * Hash: 0x29961D490E5814FD | ApiSet: undefined
 */
export function setPlayerLockonRangeOverride(player, range) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerLockonRangeOverride(_player, range);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xEE4EBDD2593BA844 | ApiSet: undefined
 */
export function setPlayerHomingRocketDisabled(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerHomingRocketDisabled(_player, p1);
}
/**
 * Hash: 0x6BC97F4F4BB3C04B | ApiSet: undefined
 */
export function setPlayerInvincibleKeepRagdollEnabled(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerInvincibleKeepRagdollEnabled(_player, toggle);
}
/**
 * Hash: 0xFF300C7649724A0B | ApiSet: undefined
 */
export function setPlayerLeavePedBehind(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerLeavePedBehind(_player, toggle);
}
/**
 * ```
 * Used to toggle the square up aim.
 * ```
 * Hash: 0x5C8B2F450EE4328E | ApiSet: undefined
 */
export function setPlayerLockon(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerLockon(_player, toggle);
}
/**
 * Establishes a reset flag to prevent the player from entering any vehicle. Not that this native must be called every frame.
 * Hash: 0x1DE37BBF9E9CC14A | ApiSet: undefined
 */
export function setPlayerMayNotEnterAnyVehicle(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerMayNotEnterAnyVehicle(_player);
}
/**
 * ```
 * `Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4`
 * ```
 * Hash: 0x77DFCCF5948B8C71 | ApiSet: undefined
 */
export function setPlayerMaxArmour(player, value) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerMaxArmour(_player, value);
}
/**
 * ```
 * modifier's min value is 0.1
 * ```
 * Hash: 0xAE540335B4ABC4E2 | ApiSet: undefined
 */
export function setPlayerMeleeWeaponDefenseModifier(player, modifier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerMeleeWeaponDefenseModifier(_player, modifier);
}
/**
 * Limit the player to only enter this vehicle. Note set vehicle to false if you want them to access any vehicle.
 * Hash: 0x8026FF78F208978A | ApiSet: undefined
 */
export function setPlayerMayOnlyEnterThisVehicle(player, vehicle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlayerMayOnlyEnterThisVehicle(_player, _vehicle);
}
/**
 * ```
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 * Hash: 0x4A3DC7ECCC321032 | ApiSet: undefined
 */
export function setPlayerMeleeWeaponDamageModifier(player, modifier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerMeleeWeaponDamageModifier(_player, modifier);
}
/**
 * Hash: 0xDB89EF50FF25FCE9 | ApiSet: undefined
 */
export function setPlayerNoiseMultiplier(player, multiplier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerNoiseMultiplier(_player, multiplier);
}
/**
 * ```
 * example:
 * `PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);`
 * ```
 * Hash: 0x977DB4641F6FC3DB | ApiSet: undefined
 */
export function setPlayerParachuteModelOverride(player, model) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof model === 'string')
        model = this.getHashKey(model);
    SetPlayerParachuteModelOverride(_player, model);
}
/**
 * Hash: 0xDC80A4C2F18A2B64 | ApiSet: undefined
 */
export function setPlayerParachutePackModelOverride(player, model) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof model === 'string')
        model = this.getHashKey(model);
    SetPlayerParachutePackModelOverride(_player, model);
}
/**
 * Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this.
 * As per usual, make sure to request the model first and wait until it has loaded.
 * Hash: 0x00A1CADD00108836 | ApiSet: undefined
 */
export function setPlayerModel(player, model) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof model === 'string')
        model = this.getHashKey(model);
    SetPlayerModel(_player, model);
}
/**
 * Hash: 0x8217FD371A4625CF | ApiSet: undefined
 */
export function setPlayerParachuteSmokeTrailColor(player, r, g, b) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerParachuteSmokeTrailColor(_player, r, g, b);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x0764486AEDE748DB | ApiSet: undefined
 */
export function setPlayerReserveParachuteModelOverride(player, model) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof model === 'string')
        model = this.getHashKey(model);
    SetPlayerReserveParachuteModelOverride(_player, model);
}
/**
 * ```
 * p1 was always 5.
 * p4 was always false.
 * ```
 * Hash: 0xD9284A8C0D48352C | ApiSet: undefined
 */
export function setPlayerParachuteVariationOverride(player, p1, p2, p3, p4) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerParachuteVariationOverride(_player, p1, p2, p3, p4);
}
/**
 * ```
 * example:
 * flags: 0-6
 * `PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);`
 * wouldnt the flag be the seatIndex?
 * ```
 * Hash: 0x11D5F725F0E780E0 | ApiSet: undefined
 */
export function setPlayerResetFlagPreferRearSeats(player, flags) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerResetFlagPreferRearSeats(_player, flags);
}
/**
 * ```
 * tints 0- 13
 * 0 - unkown
 * 1 - unkown
 * 2 - unkown
 * 3 - unkown
 * 4 - unkown
 * ```
 * Hash: 0x93B0FB27C9A04060 | ApiSet: undefined
 */
export function setPlayerParachutePackTintIndex(player, tintIndex) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerParachutePackTintIndex(_player, tintIndex);
}
/**
 * Hash: 0xC54C95DA968EC5B5 | ApiSet: undefined
 */
export function setPlayerSimulateAiming(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerSimulateAiming(_player, toggle);
}
/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * Hash: 0xAF04C87F5DC1DF38 | ApiSet: undefined
 */
export function setPlayerReserveParachuteTintIndex(player, index) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerReserveParachuteTintIndex(_player, index);
}
/**
 * ```
 * Values around 1.0f to 2.0f used in game scripts.
 * ```
 * Hash: 0xB2C1A29588A9F47C | ApiSet: undefined
 */
export function setPlayerSneakingNoiseMultiplier(player, multiplier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerSneakingNoiseMultiplier(_player, multiplier);
}
/**
 * ```
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * ```
 * Hash: 0xA3D0E54541D9A5E5 | ApiSet: undefined
 */
export function setPlayerParachuteTintIndex(player, tintIndex) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerParachuteTintIndex(_player, tintIndex);
}
/**
 * Hash: 0xA01B8075D8B92DF4 | ApiSet: undefined
 */
export function setPlayerSprint(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerSprint(_player, toggle);
}
/**
 * ```
 * Sets your targeting mode.
 * 0 = Assisted Aim - Full
 * 1 = Assisted Aim - Partial
 * 2 = Free Aim - Assisted
 * 3 = Free Aim
 * ```
 * Hash: 0xB1906895227793F3 | ApiSet: undefined
 */
export function setPlayerTargetingMode(targetMode) {
    SetPlayerTargetingMode(targetMode);
}
/**
 * Hash: 0x5702B917B99DB1CD | ApiSet: undefined
 */
export function setPlayerTargetLevel(targetLevel) {
    SetPlayerTargetLevel(targetLevel);
}
/**
 * Hash: 0x4E9021C1FCDD507A | ApiSet: undefined
 */
export function setPlayerStealthPerceptionModifier(player, value) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerStealthPerceptionModifier(_player, value);
}
/**
 * Set the player's current team.
 * Hash: 0x0299FA38396A4940 | ApiSet: undefined
 */
export function setPlayerTeam(player, team) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerTeam(_player, team);
}
/**
 * ```
 * modifier's min value is 0.1
 * ```
 * Hash: 0xA50E117CDDF82F0C | ApiSet: undefined
 */
export function setPlayerVehicleDamageModifier(player, modifier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerVehicleDamageModifier(_player, modifier);
}
/**
 * Seems to lock the underwater timer of the specified player. Set `percentage` to `50.0` will reduce the value of [GET_PLAYER_UNDERWATER_TIME_REMAINING](#\_0xA1FCF8E6AF40B731) to 5.0.
 * If you want to increase the underwater time for ped, use [SET_PED_MAX_TIME_UNDERWATER](#\_0x6BA428C528D9E522) instead.
 * Using this native after [SET_PED_MAX_TIME_UNDERWATER](#\_0x6BA428C528D9E522) **WILL NOT** get what you want. For example, if you set the max time underwater to `100.0` seconds using [SET_PED_MAX_TIME_UNDERWATER](#\_0x6BA428C528D9E522) and then call this native and set the `percentage` to 50.0, you will not get `50.0`, instead `2.0`.
 * Hash: 0xA0D3E4F7AAFB7E78 | ApiSet: undefined
 */
export function setPlayerUnderwaterTimeRemaining(player, percentage) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return SetPlayerUnderwaterTimeRemaining(_player, percentage);
}
/**
 * ```
 * # Predominant call signatures
 * `PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));`
 * # Parameter value ranges
 * `P0: PLAYER::PLAYER_ID()`
 * `P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)`
 * P2: Not set by any call
 * ```
 * Hash: 0x520E541A97A13354 | ApiSet: undefined
 */
export function setPlayerWantedCentrePosition(player, p2, p3) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const result = SetPlayerWantedCentrePosition(_player, p2, p3);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0x39FF19C64EF7DA5B | ApiSet: undefined
 */
export function setPlayerWantedLevel(player, wantedLevel, delayedResponse) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerWantedLevel(_player, wantedLevel, delayedResponse);
}
/**
 * ```
 * modifier's min value is 0.1
 * ```
 * Hash: 0x4C60E6EFDAFF2462 | ApiSet: undefined
 */
export function setPlayerVehicleDefenseModifier(player, modifier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerVehicleDefenseModifier(_player, modifier);
}
/**
 * The native ensures the 'modifier' parameter is 0.1 or greater.
 * Hash: 0xCE07B9F7817AADA3 | ApiSet: undefined
 */
export function setPlayerWeaponDamageModifier(player, modifier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerWeaponDamageModifier(_player, modifier);
}
/**
 * Hash: 0x2D83BC011CA14A3C | ApiSet: undefined
 */
export function setPlayerWeaponDefenseModifier(player, modifier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerWeaponDefenseModifier(_player, modifier);
}
/**
 * ```
 * The player will be ignored by the police if toggle is set to true
 * ```
 * Hash: 0x32C62AA929C2DA6A | ApiSet: undefined
 */
export function setPoliceIgnorePlayer(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPoliceIgnorePlayer(_player, toggle);
}
/**
 * ```
 * Forces any pending wanted level to be applied to the specified player immediately.
 * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
 * Second parameter is unknown (always false).
 * ```
 * Hash: 0xE0A7D1E497FFCD6F | ApiSet: undefined
 */
export function setPlayerWantedLevelNow(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerWantedLevelNow(_player, p1);
}
/**
 * ```
 * If toggle is set to false:
 * The police won't be shown on the (mini)map
 * If toggle is set to true:
 * The police will be shown on the (mini)map
 * ```
 * Hash: 0x43286D561B72B8BF | ApiSet: undefined
 */
export function setPoliceRadarBlips(toggle) {
    SetPoliceRadarBlips(toggle);
}
/**
 * ```
 * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
 * Just call it one time, it is not required to be called once every tick.
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * It is not possible to "decrease" speed. Anything below 1 will be ignored.
 * ```
 * Hash: 0x6DB47AA77FD94E09 | ApiSet: undefined
 */
export function setRunSprintMultiplierForPlayer(player, multiplier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetRunSprintMultiplierForPlayer(_player, multiplier);
}
/**
 * Hash: 0xBCFDE9EDE4CF27DC | ApiSet: undefined
 */
export function setPlayerWeaponDefenseModifier2(player, modifier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerWeaponDefenseModifier2(_player, modifier);
}
/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0xB214D570EAD7F81A | ApiSet: undefined
 */
export function setSpecialAbility(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetSpecialAbility(_player, p1);
}
/**
 * ```
 * Swim speed multiplier.
 * Multiplier goes up to 1.49
 * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * ```
 * Hash: 0xA91C6F0FF7D16A13 | ApiSet: undefined
 */
export function setSwimMultiplierForPlayer(player, multiplier) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetSwimMultiplierForPlayer(_player, multiplier);
}
/**
 * Hash: 0xA49C426ED0CA4AB7 | ApiSet: undefined
 */
export function setSpecialAbilityMultiplier(multiplier) {
    SetSpecialAbilityMultiplier(multiplier);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x49B856B1360C47C7 | ApiSet: undefined
 */
export function setWantedLevelHiddenEvasionTime(player, wantedLevel, lossTime) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetWantedLevelHiddenEvasionTime(_player, wantedLevel, lossTime);
}
/**
 * ```
 * Max value is 1.0
 * ```
 * Hash: 0x9B0BB33B04405E7A | ApiSet: undefined
 */
export function setWantedLevelDifficulty(player, difficulty) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetWantedLevelDifficulty(_player, difficulty);
}
/**
 * Hash: 0x020E5F00CDA207BA | ApiSet: undefined
 */
export function setWantedLevelMultiplier(multiplier) {
    SetWantedLevelMultiplier(multiplier);
}
/**
 * ```
 * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0xB7B0870EB531D08D | ApiSet: undefined
 */
export function specialAbilityChargeAbsolute(player, p1, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityChargeAbsolute(_player, p1, p2);
}
/**
 * This is to make the player walk without accepting input.
 * Call this native every frame so you can control the direction of your ped.
 * Hash: 0x477D5D63E63ECA5D | ApiSet: undefined
 */
export function simulatePlayerInputGait(player, amount, gaitType, rotationSpeed, p4, p5) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SimulatePlayerInputGait(_player, amount, gaitType, rotationSpeed, p4, p5);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x821FDC827D6F4090 | ApiSet: undefined
 */
export function specialAbilityActivate(player) {
    SpecialAbilityActivate(player);
}
/**
 * ```
 * 2 matches. p1 was always true.
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0xF733F45FA4497D93 | ApiSet: undefined
 */
export function specialAbilityChargeLarge(player, p1, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityChargeLarge(_player, p1, p2);
}
/**
 * ```
 * p1 appears to always be 1 (only comes up twice)
 * ```
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0xED481732DFF7E997 | ApiSet: undefined
 */
export function specialAbilityChargeContinuous(player, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    const _p2 = p2 instanceof Ped ? p2.handle() : p2;
    SpecialAbilityChargeContinuous(_player, _p2);
}
/**
 * ```
 * Only 1 match. Both p1 & p2 were true.
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0xF113E3AA9BC54613 | ApiSet: undefined
 */
export function specialAbilityChargeMedium(player, p1, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityChargeMedium(_player, p1, p2);
}
/**
 * ```
 * Every occurrence of p1 & p2 were both true.
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0x2E7B9B683481687D | ApiSet: undefined
 */
export function specialAbilityChargeSmall(player, p1, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityChargeSmall(_player, p1, p2);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xC9A763D8FE87436A | ApiSet: undefined
 */
export function specialAbilityChargeOnMissionFailed(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityChargeOnMissionFailed(_player);
}
/**
 * ```
 * normalizedValue is from 0.0 - 1.0
 * p2 is always 1
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0xA0696A65F009EE18 | ApiSet: undefined
 */
export function specialAbilityChargeNormalized(player, normalizedValue, p2) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityChargeNormalized(_player, normalizedValue, p2);
}
/**
 * ```
 * Also known as _RECHARGE_SPECIAL_ABILITY
 * ```
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0x3DACA8DDC6FD4980 | ApiSet: undefined
 */
export function specialAbilityFillMeter(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityFillMeter(_player, p1);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xD6A953C6D1492057 | ApiSet: undefined
 */
export function specialAbilityDeactivate(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityDeactivate(_player);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xF145F3BE2EFA9A3B | ApiSet: undefined
 */
export function specialAbilityUnlock(playerModel) {
    if (typeof playerModel === 'string')
        playerModel = this.getHashKey(playerModel);
    SpecialAbilityUnlock(playerModel);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x9CB5CE07A3968D5A | ApiSet: undefined
 */
export function specialAbilityDeactivateFast(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityDeactivateFast(_player);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x17F7471EACA78290 | ApiSet: undefined
 */
export function specialAbilityDeplete(p0) {
    SpecialAbilityDeplete(p0);
}
/**
 * ```
 * p1 was always true.
 * ```
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0x1D506DBBBC51E64B | ApiSet: undefined
 */
export function specialAbilityDepleteMeter(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityDepleteMeter(_player, p1);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x6A09D0D590A47D13 | ApiSet: undefined
 */
export function specialAbilityLock(playerModel) {
    if (typeof playerModel === 'string')
        playerModel = this.getHashKey(playerModel);
    SpecialAbilityLock(playerModel);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x375F0E738F861A94 | ApiSet: undefined
 */
export function specialAbilityReset(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SpecialAbilityReset(_player);
}
/**
 * Hash: 0xBF9BD71691857E48 | ApiSet: undefined
 */
export function startFiringAmnesty(duration) {
    StartFiringAmnesty(duration);
}
/**
 * ```
 * Disables the player's teleportation
 * ```
 * Hash: 0xC449EDED9D73009C | ApiSet: undefined
 */
export function stopPlayerTeleport() {
    StopPlayerTeleport();
}
/**
 * Teleports the player to the given coordinates.
 * If findCollisionLand is true it will try to find the Z value for you, this however has a timeout of 100 frames.
 * When trying to find the Z value the native will take longer the higher the difference from the given Z to the ground, this combined with the timeout can cause the teleport to just teleport to the given Z value, so try to estimate the z value, so don't just pass in 1000.0.
 * Also if you're in a vehicle and teleportWithVehicle is true it will not find the Z value for you.
 * Hash: 0xAD15F075A4DA0FDE | ApiSet: undefined
 */
export function startPlayerTeleport(player, position, heading, teleportWithVehicle, findCollisionLand, p7) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    StartPlayerTeleport(_player, position.x, position.y, position.z, heading, teleportWithVehicle, findCollisionLand, p7);
}
/**
 * Suppresses a crime for a given player for this frame only.
 * **Note:** This native needs to be executed inside a thread if a crime is meant to be suppressed for a given amount of time.
 * Hash: 0x9A987297ED8BD838 | ApiSet: undefined
 */
export function suppressCrimeThisFrame(player, crimeType) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SuppressCrimeThisFrame(_player, crimeType);
}
/**
 * Hash: 0x340E61DE7F471565 | ApiSet: undefined
 */
export function setPlayerWantedLevelNoDrop(player, wantedLevel, delayedResponse) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerWantedLevelNoDrop(_player, wantedLevel, delayedResponse);
}
/**
 * Hash: 0xE23D5873C2394C61 | ApiSet: undefined
 */
export function updatePlayerTeleport(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return UpdatePlayerTeleport(_player);
}
/**
 * Hash: 0xD45B1FFCCD52FF19 | ApiSet: undefined
 */
export function activateDamageTrackerOnNetworkId(netID, toggle) {
    ActivateDamageTrackerOnNetworkId(netID, toggle);
}
/**
 * Hash: 0x800DD4721A8B008B | ApiSet: undefined
 */
export function canRegisterMissionObjects(amount) {
    return CanRegisterMissionObjects(amount);
}
/**
 * Hash: 0x69778E7564BADE6D | ApiSet: undefined
 */
export function canRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt) {
    return CanRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt);
}
/**
 * Hash: 0xEC5E3AF5289DCA81 | ApiSet: undefined
 */
export function badSportPlayerLeftDetected(event, amountReceived) {
    return BadSportPlayerLeftDetected(event, amountReceived);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x966DD84FB6A46017 | ApiSet: undefined
 */
export function clearLaunchParams() {
    ClearLaunchParams();
}
/**
 * Hash: 0xBEC0816FF5ACBCDA | ApiSet: undefined
 */
export function activateDamageTrackerOnPlayer(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    ActivateDamageTrackerOnPlayer(_player, toggle);
}
/**
 * Hash: 0x3A3D5568AF297CD5 | ApiSet: undefined
 */
export function cloudDidRequestSucceed(handle) {
    return CloudDidRequestSucceed(handle);
}
/**
 * Hash: 0x7277F1F2E085EE74 | ApiSet: undefined
 */
export function canRegisterMissionVehicles(amount) {
    return CanRegisterMissionVehicles(amount);
}
/**
 * Hash: 0x0A49D1CB6E34AF72 | ApiSet: undefined
 */
export function canRegisterMissionPickups(amount) {
    return CanRegisterMissionPickups(amount);
}
/**
 * Hash: 0xC7ABAC5DE675EE3B | ApiSet: undefined
 */
export function cloudIsCheckingAvailability() {
    return CloudIsCheckingAvailability();
}
/**
 * Hash: 0xBCBF4FEF9FA5D781 | ApiSet: undefined
 */
export function canRegisterMissionPeds(amount) {
    return CanRegisterMissionPeds(amount);
}
/**
 * ```
 * Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
 * ```
 * Hash: 0x4F18196C8D38768D | ApiSet: undefined
 */
export function cloudCheckAvailability() {
    CloudCheckAvailability();
}
/**
 * Hash: 0x0B0CC10720653F3B | ApiSet: undefined
 */
export function cloudGetAvailabilityCheckResult() {
    return CloudGetAvailabilityCheckResult();
}
/**
 * Hash: 0xC64DED7EF0D2FE37 | ApiSet: undefined
 */
export function cloudDeleteMemberFile(p0) {
    return CloudDeleteMemberFile(p0);
}
/**
 * Hash: 0x4C61B39930D045DA | ApiSet: undefined
 */
export function cloudHasRequestCompleted(handle) {
    return CloudHasRequestCompleted(handle);
}
/**
 * ```
 * Takes the specified time and writes it to the structure specified in the second argument.
 * struct date_time
 * {
 * alignas(8) int year;
 * alignas(8) int month;
 * alignas(8) int day;
 * alignas(8) int hour;
 * alignas(8) int minute;
 * alignas(8) int second;
 * };
 * ```
 * Hash: 0xAC97AF97FA68E5D5 | ApiSet: undefined
 */
export function convertPosixTime(posixTime) {
    return ConvertPosixTime(posixTime);
}
/**
 * Hash: 0xA75E2B6733DA5142 | ApiSet: undefined
 */
export function facebookDoUnkCheck() {
    return FacebookDoUnkCheck();
}
/**
 * Hash: 0x62B9FEC9A11F10EF | ApiSet: undefined
 */
export function facebookIsSendingData() {
    return FacebookIsSendingData();
}
/**
 * Hash: 0x43865688AE10F0D7 | ApiSet: undefined
 */
export function facebookIsAvailable() {
    return FacebookIsAvailable();
}
/**
 * Hash: 0xDC48473142545431 | ApiSet: undefined
 */
export function facebookSetCreateCharacterComplete() {
    return FacebookSetCreateCharacterComplete();
}
/**
 * ```
 * milestoneId:
 * 0 = "percentcomplete"
 * 1 = "storycomplete"
 * 2 = "vehicles"
 * 3 = "properties"
 * 4 = "psych"
 * 5 = "mapreveal"
 * 6 = "prologue"
 * ```
 * Hash: 0x0AE1F1653B554AB9 | ApiSet: undefined
 */
export function facebookSetMilestoneComplete(milestoneId) {
    return FacebookSetMilestoneComplete(milestoneId);
}
/**
 * Hash: 0x098AB65B9ED9A9EC | ApiSet: undefined
 */
export function facebookSetHeistComplete(heistName, cashEarned, xpEarned) {
    return FacebookSetHeistComplete(heistName, cashEarned, xpEarned);
}
/**
 * Returns POSIX timestamp.
 * Renamed from `_GET_POSIX_TIME` to `GET_CLOUD_TIME_AS_INT` because of conflicting native names ([`0xDA488F299A5B164E`](#\_0xDA488F299A5B164E))
 * Hash: 0x9A73240B49945C76 | ApiSet: undefined
 */
export function getCloudTimeAsInt() {
    return GetCloudTimeAsInt();
}
/**
 * ```
 * Hardcoded to not work in SP.
 * ```
 * Hash: 0x416DBD4CD6ED8DD2 | ApiSet: undefined
 */
export function fadeOutLocalPlayer(p0) {
    FadeOutLocalPlayer(p0);
}
/**
 * Hash: 0xCBBD7C4991B64809 | ApiSet: undefined
 */
export function filloutPmPlayerList(p1, p2) {
    return FilloutPmPlayerList(p1, p2);
}
/**
 * Hash: 0xB4271092CA7EDF48 | ApiSet: undefined
 */
export function getCommerceItemName(index) {
    return GetCommerceItemName(index);
}
/**
 * ```
 * index2 is unused
 * ```
 * Hash: 0x6F44CBF56D79FAC0 | ApiSet: undefined
 */
export function getCommerceItemCat(index, index2) {
    return GetCommerceItemCat(index, index2);
}
/**
 * Hash: 0x716B6DB9D1886106 | ApiSet: undefined
 */
export function filloutPmPlayerListWithNames(p2, p3) {
    return FilloutPmPlayerListWithNames(p2, p3);
}
/**
 * Hash: 0x2A7776C709904AB0 | ApiSet: undefined
 */
export function getCommerceItemNumCats(index) {
    return GetCommerceItemNumCats(index);
}
/**
 * Hash: 0xCA94551B50B4932C | ApiSet: undefined
 */
export function getCommerceProductPrice(index) {
    return GetCommerceProductPrice(index);
}
/**
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * Hash: 0x722F5D28B61C5EA8 | ApiSet: undefined
 */
export function getCommerceItemTexturename(index) {
    return GetCommerceItemTexturename(index);
}
/**
 * ```
 * Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
 * ```
 * Hash: 0xF12E6CD06C73D69E | ApiSet: undefined
 */
export function getCloudTimeAsString() {
    return GetCloudTimeAsString();
}
/**
 * Hash: 0xA72835064DD63E4C | ApiSet: undefined
 */
export function getMaxNumNetworkPickups() {
    return GetMaxNumNetworkPickups();
}
/**
 * Hash: 0xC7BE335216B5EC7C | ApiSet: undefined
 */
export function getMaxNumNetworkObjects() {
    return GetMaxNumNetworkObjects();
}
/**
 * Hash: 0x662635855957C411 | ApiSet: undefined
 */
export function getCommerceItemId(index) {
    return GetCommerceItemId(index);
}
/**
 * Hash: 0x0C1F7D49C39D2289 | ApiSet: undefined
 */
export function getMaxNumNetworkPeds() {
    return GetMaxNumNetworkPeds();
}
/**
 * Returns the same value as [`GetNetworkTime`](#\_0x7A5487FE9FAA6B48) in freemode, but as opposed to `GetNetworkTime` it always gets the most recent time, instead of once per tick.
 * Could be used for benchmarking since it can return times in ticks.
 * Hash: 0x89023FBBF9200E9F | ApiSet: undefined
 */
export function getNetworkTimeAccurate() {
    return GetNetworkTimeAccurate();
}
/**
 * Hash: 0x0AFCE529F69B21FF | ApiSet: undefined
 */
export function getMaxNumNetworkVehicles() {
    return GetMaxNumNetworkVehicles();
}
/**
 * Hash: 0x7A5487FE9FAA6B48 | ApiSet: undefined
 */
export function getNetworkTime() {
    return GetNetworkTime();
}
/**
 * Hash: 0x12B6281B6C6706C0 | ApiSet: undefined
 */
export function getNumCreatedMissionObjects(p0) {
    return GetNumCreatedMissionObjects(p0);
}
/**
 * Hash: 0xF2EAC213D5EA0623 | ApiSet: undefined
 */
export function getNumCommerceItems() {
    return GetNumCommerceItems();
}
/**
 * Hash: 0xCB215C4B56A7FAE7 | ApiSet: undefined
 */
export function getNumCreatedMissionPeds(p0) {
    return GetNumCreatedMissionPeds(p0);
}
/**
 * ```
 * p0 appears to be for MP
 * ```
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xCF3A965906452031 | ApiSet: undefined
 */
export function getNumReservedMissionVehicles(p0) {
    return GetNumReservedMissionVehicles(p0);
}
/**
 * ```
 * p0 appears to be for MP
 * ```
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xAA81B5F10BC43AC2 | ApiSet: undefined
 */
export function getNumReservedMissionObjects(p0) {
    return GetNumReservedMissionObjects(p0);
}
/**
 * ```
 * p0 appears to be for MP
 * ```
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x1F13D5AE5CB17E17 | ApiSet: undefined
 */
export function getNumReservedMissionPeds(p0) {
    return GetNumReservedMissionPeds(p0);
}
/**
 * Hash: 0x0CD9AB83489430EA | ApiSet: undefined
 */
export function getNumCreatedMissionVehicles(p0) {
    return GetNumCreatedMissionVehicles(p0);
}
/**
 * ```
 * 0 = succeeded
 * 1 = pending
 * 2 = failed
 * ```
 * Hash: 0x8BD6C6DEA20E82C6 | ApiSet: undefined
 */
export function getStatusOfTextureDownload(p0) {
    return GetStatusOfTextureDownload(p0);
}
/**
 * Hash: 0x9E23B1777A927DAD | ApiSet: undefined
 */
export function getTimeAsString(time) {
    return GetTimeAsString(time);
}
/**
 * Hash: 0xEA14EEF5B7CD2C30 | ApiSet: undefined
 */
export function isCommerceDataValid() {
    return IsCommerceDataValid();
}
/**
 * Hash: 0x46718ACEEDEAFC84 | ApiSet: undefined
 */
export function hasNetworkTimeStarted() {
    return HasNetworkTimeStarted();
}
/**
 * ```
 * Online version is defined here: update\update.rpf\common\data\version.txt
 * Example:
 * [ONLINE_VERSION_NUMBER]
 * 1.33
 * _GET_ONLINE_VERSION() will return "1.33"
 * ```
 * Hash: 0xFCA9373EF340AC0A | ApiSet: undefined
 */
export function getOnlineVersion() {
    return GetOnlineVersion();
}
/**
 * ```
 * Subtracts the second argument from the first.
 * ```
 * Hash: 0xA2C6FC031D46FFF0 | ApiSet: undefined
 */
export function getTimeDifference(timeA, timeB) {
    return GetTimeDifference(timeA, timeB);
}
/**
 * Hash: 0x2EAC52B4019E2782 | ApiSet: undefined
 */
export function isCommerceStoreOpen() {
    return IsCommerceStoreOpen();
}
/**
 * Hash: 0xA1607996431332DF | ApiSet: undefined
 */
export function isNetworkIdOwnedByParticipant(netId) {
    return IsNetworkIdOwnedByParticipant(netId);
}
/**
 * Hash: 0x6E192E33AD436366 | ApiSet: undefined
 */
export function isDamageTrackerActiveOnNetworkId(netID) {
    return IsDamageTrackerActiveOnNetworkId(netID);
}
/**
 * ```
 * Adds the first argument to the second.
 * ```
 * Hash: 0x017008CCDAD48503 | ApiSet: undefined
 */
export function getTimeOffset(timeA, timeB) {
    return GetTimeOffset(timeA, timeB);
}
/**
 * Hash: 0xB2092A1EAA7FD45F | ApiSet: undefined
 */
export function isDamageTrackerActiveOnPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsDamageTrackerActiveOnPlayer(_player);
}
/**
 * Hash: 0xDC3A310219E5DA62 | ApiSet: undefined
 */
export function isSphereVisibleToPlayer(p0, p1, p2, p3, p4) {
    return IsSphereVisibleToPlayer(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xE73092F4157CD126 | ApiSet: undefined
 */
export function isPlayerInCutscene(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return IsPlayerInCutscene(_player);
}
/**
 * Hash: 0x21D04D7BC538C146 | ApiSet: undefined
 */
export function isEntityGhostedToLocalPlayer(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityGhostedToLocalPlayer(_entity);
}
/**
 * ```
 * Returns true if the two times are equal; otherwise returns false.
 * ```
 * Hash: 0xF5BC95857BD6D512 | ApiSet: undefined
 */
export function isTimeEqualTo(timeA, timeB) {
    return IsTimeEqualTo(timeA, timeB);
}
/**
 * Hash: 0x883D79C4071E18B3 | ApiSet: undefined
 */
export function isStoreAvailableToUser() {
    return IsStoreAvailableToUser();
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x023ACAB2DC9DC4A4 | ApiSet: undefined
 */
export function _0x023ACAB2DC9DC4A4() {
    return Citizen.invokeNative('0x023ACAB2DC9DC4A4');
}
/**
 * Hash: 0xD82CF8E64C8729D8 | ApiSet: undefined
 */
export function isSphereVisibleToAnotherMachine(p0, p1, p2, p3) {
    return IsSphereVisibleToAnotherMachine(p0, p1, p2, p3);
}
/**
 * ```
 * Subtracts the first argument from the second, then returns whether the result is negative.
 * ```
 * Hash: 0xDE350F8651E4346C | ApiSet: undefined
 */
export function isTimeMoreThan(timeA, timeB) {
    return IsTimeMoreThan(timeA, timeB);
}
/**
 * Hash: 0x04918A41BC9B8157 | ApiSet: undefined
 */
export function _0x04918A41BC9B8157(p0, p1, p2) {
    return Citizen.invokeNative('0x04918A41BC9B8157', p0, p1, p2);
}
/**
 * ```
 * Subtracts the second argument from the first, then returns whether the result is negative.
 * ```
 * Hash: 0xCB2CF5148012C8D0 | ApiSet: undefined
 */
export function isTimeLessThan(timeA, timeB) {
    return IsTimeLessThan(timeA, timeB);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x0CF6CC51AA18F0F8 | ApiSet: undefined
 */
export function _0x0CF6CC51AA18F0F8(p0, p1, p2) {
    return Citizen.invokeNative('0x0CF6CC51AA18F0F8', p0, p1, p2);
}
/**
 * Hash: 0x0EDE326D47CD0F3E | ApiSet: undefined
 */
export function _0x0EDE326D47CD0F3E(ped, player) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _player = player instanceof Entity ? player.remoteId() : player;
    return Citizen.invokeNative('0x0EDE326D47CD0F3E', _ped, _player);
}
/**
 * Hash: 0x1171A97A3D3981B6 | ApiSet: undefined
 */
export function _0x1171A97A3D3981B6(p2, p3) {
    return Citizen.invokeNative('0x1171A97A3D3981B6', p2, p3);
}
/**
 * Hash: 0x041C7F2A6C9894E6 | ApiSet: undefined
 */
export function _0x041C7F2A6C9894E6(p0, p1, p2) {
    return Citizen.invokeNative('0x041C7F2A6C9894E6', p0, p1, p2);
}
/**
 * ```
 * NETWORK_SET_*
 * ```
 * Hash: 0x0D77A82DC2D0DA59 | ApiSet: undefined
 */
export function _0x0D77A82DC2D0DA59() {
    return Citizen.invokeNative('0x0D77A82DC2D0DA59');
}
/**
 * Hash: 0x07EAB372C8841D99 | ApiSet: undefined
 */
export function _0x07EAB372C8841D99(p0, p1, p2) {
    return Citizen.invokeNative('0x07EAB372C8841D99', p0, p1, p2);
}
/**
 * ```
 * SET_NETWORK_*
 * ```
 * Hash: 0x13F1FCB111B820B0 | ApiSet: undefined
 */
export function _0x13F1FCB111B820B0(p0) {
    Citizen.invokeNative('0x13F1FCB111B820B0', p0);
}
/**
 * Hash: 0x1153FA02A659051C | ApiSet: undefined
 */
export function _0x1153FA02A659051C() {
    Citizen.invokeNative('0x1153FA02A659051C');
}
/**
 * Hash: 0x144DA052257AE7D8 | ApiSet: undefined
 */
export function _0x144DA052257AE7D8(p0) {
    Citizen.invokeNative('0x144DA052257AE7D8', p0);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x17C9E241111A674D | ApiSet: undefined
 */
export function _0x17C9E241111A674D(p0, p1) {
    Citizen.invokeNative('0x17C9E241111A674D', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x0F1A4B45B7693B95 | ApiSet: undefined
 */
export function _0x0F1A4B45B7693B95(p0, p1) {
    Citizen.invokeNative('0x0F1A4B45B7693B95', p0, p1);
}
/**
 * ```
 * NETWORK_IS_*
 * ```
 * Hash: 0x14922ED3E38761F0 | ApiSet: undefined
 */
export function _0x14922ED3E38761F0() {
    return Citizen.invokeNative('0x14922ED3E38761F0');
}
/**
 * Hash: 0x140E6A44870A11CE | ApiSet: undefined
 */
export function _0x140E6A44870A11CE() {
    Citizen.invokeNative('0x140E6A44870A11CE');
}
/**
 * Hash: 0x1398582B7F72B3ED | ApiSet: undefined
 */
export function _0x1398582B7F72B3ED(p0) {
    Citizen.invokeNative('0x1398582B7F72B3ED', p0);
}
/**
 * Hash: 0x1D610EB0FEA716D9 | ApiSet: undefined
 */
export function _0x1D610EB0FEA716D9(p0) {
    return Citizen.invokeNative('0x1D610EB0FEA716D9', p0);
}
/**
 * Hash: 0x162C23CA83ED0A62 | ApiSet: undefined
 */
export function _0x162C23CA83ED0A62(p0) {
    return Citizen.invokeNative('0x162C23CA83ED0A62', p0);
}
/**
 * ```
 * Checks some commerce stuff
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x155467ACA0F55705 | ApiSet: undefined
 */
export function _0x155467ACA0F55705() {
    return Citizen.invokeNative('0x155467ACA0F55705');
}
/**
 * Hash: 0x2302C0264EA58D31 | ApiSet: undefined
 */
export function _0x2302C0264EA58D31() {
    Citizen.invokeNative('0x2302C0264EA58D31');
}
/**
 * ```
 * IS_COMMERCE_*
 * ```
 * Hash: 0x1D4DC17C38FEAFF0 | ApiSet: undefined
 */
export function _0x1D4DC17C38FEAFF0() {
    return Citizen.invokeNative('0x1D4DC17C38FEAFF0');
}
/**
 * Hash: 0x24E4E51FC16305F9 | ApiSet: undefined
 */
export function _0x24E4E51FC16305F9() {
    return Citizen.invokeNative('0x24E4E51FC16305F9');
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x1F7BC3539F9E0224 | ApiSet: undefined
 */
export function _0x1F7BC3539F9E0224() {
    Citizen.invokeNative('0x1F7BC3539F9E0224');
}
/**
 * ```
 * Does nothing (it's a nullsub).
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x2555CF7DA5473794 | ApiSet: undefined
 */
export function _0x2555CF7DA5473794() {
    Citizen.invokeNative('0x2555CF7DA5473794');
}
/**
 * Hash: 0x1F8E00FB18239600 | ApiSet: undefined
 */
export function _0x1F8E00FB18239600(p0) {
    Citizen.invokeNative('0x1F8E00FB18239600', p0);
}
/**
 * Hash: 0x25D990F8E0E3F13C | ApiSet: undefined
 */
export function _0x25D990F8E0E3F13C() {
    Citizen.invokeNative('0x25D990F8E0E3F13C');
}
/**
 * Hash: 0x265559DA40B3F327 | ApiSet: undefined
 */
export function _0x265559DA40B3F327(p0) {
    Citizen.invokeNative('0x265559DA40B3F327', p0);
}
/**
 * Hash: 0x283B6062A2C01E9B | ApiSet: undefined
 */
export function _0x283B6062A2C01E9B() {
    Citizen.invokeNative('0x283B6062A2C01E9B');
}
/**
 * Hash: 0x261E97AD7BCF3D40 | ApiSet: undefined
 */
export function _0x261E97AD7BCF3D40(p0) {
    Citizen.invokeNative('0x261E97AD7BCF3D40', p0);
}
/**
 * Hash: 0x26F07DD83A5F7F98 | ApiSet: undefined
 */
export function _0x26F07DD83A5F7F98() {
    return Citizen.invokeNative('0x26F07DD83A5F7F98');
}
/**
 * Hash: 0x265635150FB0D82E | ApiSet: undefined
 */
export function _0x265635150FB0D82E() {
    Citizen.invokeNative('0x265635150FB0D82E');
}
/**
 * Hash: 0x2CE9D95E4051AECD | ApiSet: undefined
 */
export function _0x2CE9D95E4051AECD(p0) {
    Citizen.invokeNative('0x2CE9D95E4051AECD', p0);
}
/**
 * Hash: 0x2B1C623823DB0D9D | ApiSet: undefined
 */
export function _0x2B1C623823DB0D9D(p0, p1, p2, p3, p4, p5, p6) {
    return Citizen.invokeNative('0x2B1C623823DB0D9D', p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x2B51EDBEFC301339 | ApiSet: undefined
 */
export function _0x2B51EDBEFC301339(p0, p1) {
    return Citizen.invokeNative('0x2B51EDBEFC301339', p0, p1);
}
/**
 * Hash: 0x2D5DC831176D0114 | ApiSet: undefined
 */
export function _0x2D5DC831176D0114(p0) {
    return Citizen.invokeNative('0x2D5DC831176D0114', p0);
}
/**
 * Hash: 0x2BF66D2E7414F686 | ApiSet: undefined
 */
export function _0x2BF66D2E7414F686() {
    return Citizen.invokeNative('0x2BF66D2E7414F686');
}
/**
 * Hash: 0x2E0BF682CC778D49 | ApiSet: undefined
 */
export function _0x2E0BF682CC778D49(p0) {
    return Citizen.invokeNative('0x2E0BF682CC778D49', p0);
}
/**
 * Hash: 0x2E4C123D1C8A710E | ApiSet: undefined
 */
export function _0x2E4C123D1C8A710E(p2, p3, p4, p5, p6) {
    return Citizen.invokeNative('0x2E4C123D1C8A710E', p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x2DA41ED6E1FCD7A5 | ApiSet: undefined
 */
export function _0x2DA41ED6E1FCD7A5(p0) {
    return Citizen.invokeNative('0x2DA41ED6E1FCD7A5', p0);
}
/**
 * I've had this return the player's ped handle sometimes, but also other random entities.
 * Whatever p0 is, it's at least not synced to other players.
 * At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
 * But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
 * Hash: 0x37D5F739FD494675 | ApiSet: undefined
 */
export function _0x37D5F739FD494675(p0) {
    return Citizen.invokeNative('0x37D5F739FD494675', p0);
}
/**
 * Hash: 0x367EF5E2F439B4C6 | ApiSet: undefined
 */
export function _0x367EF5E2F439B4C6(p0) {
    Citizen.invokeNative('0x367EF5E2F439B4C6', p0);
}
/**
 * Hash: 0x32EBD154CB6B8B99 | ApiSet: undefined
 */
export function _0x32EBD154CB6B8B99(p0, p1, p2) {
    Citizen.invokeNative('0x32EBD154CB6B8B99', p0, p1, p2);
}
/**
 * Hash: 0x36391F397731595D | ApiSet: undefined
 */
export function _0x36391F397731595D(p0) {
    return Citizen.invokeNative('0x36391F397731595D', p0);
}
/**
 * Hash: 0x3855FB5EB2C5E8B2 | ApiSet: undefined
 */
export function _0x3855FB5EB2C5E8B2(p0) {
    return Citizen.invokeNative('0x3855FB5EB2C5E8B2', p0);
}
/**
 * Hash: 0x39917E1B4CB0F911 | ApiSet: undefined
 */
export function _0x39917E1B4CB0F911(p0) {
    Citizen.invokeNative('0x39917E1B4CB0F911', p0);
}
/**
 * Hash: 0x3FA36981311FA4FF | ApiSet: undefined
 */
export function _0x3FA36981311FA4FF(netId, state) {
    Citizen.invokeNative('0x3FA36981311FA4FF', netId, state);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x38B7C51AB1EDC7D8 | ApiSet: undefined
 */
export function _0x38B7C51AB1EDC7D8(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    Citizen.invokeNative('0x38B7C51AB1EDC7D8', _entity, toggle);
}
/**
 * nullsub, doesn't do anything
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x3FC795691834481D | ApiSet: undefined
 */
export function _0x3FC795691834481D(p0, p1) {
    Citizen.invokeNative('0x3FC795691834481D', p0, p1);
}
/**
 * ```
 * Sets some voice chat related value.
 * NETWORK_SET_*
 * ```
 * Hash: 0x3C5C1E2C2FF814B1 | ApiSet: undefined
 */
export function _0x3C5C1E2C2FF814B1(toggle) {
    Citizen.invokeNative('0x3C5C1E2C2FF814B1', toggle);
}
/**
 * Hash: 0x4237E822315D8BA9 | ApiSet: undefined
 */
export function _0x4237E822315D8BA9() {
    return Citizen.invokeNative('0x4237E822315D8BA9');
}
/**
 * Hash: 0x45E816772E93A9DB | ApiSet: undefined
 */
export function _0x45E816772E93A9DB() {
    return Citizen.invokeNative('0x45E816772E93A9DB');
}
/**
 * Hash: 0x4348BFDA56023A2F | ApiSet: undefined
 */
export function _0x4348BFDA56023A2F(p0, p1) {
    return Citizen.invokeNative('0x4348BFDA56023A2F', p0, p1);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x4A9FDE3A5A6D0437 | ApiSet: undefined
 */
export function _0x4A9FDE3A5A6D0437(toggle) {
    Citizen.invokeNative('0x4A9FDE3A5A6D0437', toggle);
}
/**
 * ```
 * related to:
 * NETWORK_BAIL
 * NETWORK_BAIL_TRANSITION
 * NETWORK_JOIN_GROUP_ACTIVITY
 * NETWORK_JOIN_TRANSITION
 * NETWORK_LAUNCH_TRANSITION
 * NETWORK_SESSION_HOST
 * NETWORK_SESSION_HOST_CLOSED
 * NETWORK_SESSION_HOST_FRIENDS_ONLY
 * NETWORK_SESSION_HOST_SINGLE_PLAYER
 * NETWORK_SESSION_VOICE_LEAVE
 * ```
 * Hash: 0x444C4525ECE0A4B9 | ApiSet: undefined
 */
export function _0x444C4525ECE0A4B9() {
    Citizen.invokeNative('0x444C4525ECE0A4B9');
}
/**
 * Hash: 0x4AD490AE1536933B | ApiSet: undefined
 */
export function _0x4AD490AE1536933B(p0, p1) {
    return Citizen.invokeNative('0x4AD490AE1536933B', p0, p1);
}
/**
 * Hash: 0x4811BBAC21C5FCD5 | ApiSet: undefined
 */
export function _0x4811BBAC21C5FCD5(p0) {
    Citizen.invokeNative('0x4811BBAC21C5FCD5', p0);
}
/**
 * Hash: 0x4C2A9FDC22377075 | ApiSet: undefined
 */
export function _0x4C2A9FDC22377075() {
    Citizen.invokeNative('0x4C2A9FDC22377075');
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x4C9034162368E206 | ApiSet: undefined
 */
export function _0x4C9034162368E206() {
    return Citizen.invokeNative('0x4C9034162368E206');
}
/**
 * Hash: 0x4D02279C83BE69FE | ApiSet: undefined
 */
export function _0x4D02279C83BE69FE() {
    return Citizen.invokeNative('0x4D02279C83BE69FE');
}
/**
 * Hash: 0x5324A0E3E4CE3570 | ApiSet: undefined
 */
export function _0x5324A0E3E4CE3570(p0, p1) {
    return Citizen.invokeNative('0x5324A0E3E4CE3570', p0, p1);
}
/**
 * Hash: 0x53C10C8BD774F2C9 | ApiSet: undefined
 */
export function _0x53C10C8BD774F2C9() {
    return Citizen.invokeNative('0x53C10C8BD774F2C9');
}
/**
 * Hash: 0x4DF7CFFF471A7FB1 | ApiSet: undefined
 */
export function _0x4DF7CFFF471A7FB1(p0) {
    return Citizen.invokeNative('0x4DF7CFFF471A7FB1', p0);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x560B423D73015E77 | ApiSet: undefined
 */
export function _0x560B423D73015E77(p0) {
    return Citizen.invokeNative('0x560B423D73015E77', p0);
}
/**
 * Hash: 0x59D421683D31835A | ApiSet: undefined
 */
export function _0x59D421683D31835A(p0) {
    Citizen.invokeNative('0x59D421683D31835A', p0);
}
/**
 * ```
 * _NETWORK_CAN_VIEW_* - _NETWORK_CAN_SESSION*
 * NETWORK_CAN_PLAY_GAMER_USER_CONTENT?
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x559EBF901A8C68E0 | ApiSet: undefined
 */
export function _0x559EBF901A8C68E0() {
    return Citizen.invokeNative('0x559EBF901A8C68E0');
}
/**
 * Hash: 0x5ECD378EE64450AB | ApiSet: undefined
 */
export function _0x5ECD378EE64450AB(p0) {
    Citizen.invokeNative('0x5ECD378EE64450AB', p0);
}
/**
 * Hash: 0x5539C3EBF104A53A | ApiSet: undefined
 */
export function _0x5539C3EBF104A53A(p0) {
    Citizen.invokeNative('0x5539C3EBF104A53A', p0);
}
/**
 * Hash: 0x5A34CD9C3C5BEC44 | ApiSet: undefined
 */
export function _0x5A34CD9C3C5BEC44(p0) {
    return Citizen.invokeNative('0x5A34CD9C3C5BEC44', p0);
}
/**
 * ```
 * IS_*
 * ```
 * Hash: 0x59328EB08C5CEB2B | ApiSet: undefined
 */
export function _0x59328EB08C5CEB2B() {
    return Citizen.invokeNative('0x59328EB08C5CEB2B');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x5C497525F803486B | ApiSet: undefined
 */
export function _0x5C497525F803486B() {
    Citizen.invokeNative('0x5C497525F803486B');
}
/**
 * ```
 * Returns true if profile setting 901 is set to true and sets it to false.
 * NETWORK_C*
 * ```
 * Hash: 0x60EDD13EB3AC1FF3 | ApiSet: undefined
 */
export function _0x60EDD13EB3AC1FF3() {
    return Citizen.invokeNative('0x60EDD13EB3AC1FF3');
}
/**
 * Hash: 0x584770794D758C18 | ApiSet: undefined
 */
export function _0x584770794D758C18(p0) {
    return Citizen.invokeNative('0x584770794D758C18', p0);
}
/**
 * Hash: 0x5E3AA4CA2B6FB0EE | ApiSet: undefined
 */
export function _0x5E3AA4CA2B6FB0EE(p0) {
    Citizen.invokeNative('0x5E3AA4CA2B6FB0EE', p0);
}
/**
 * ```
 * NETWORK_GET_NUM_*
 * ```
 * Hash: 0x617F49C2668E6155 | ApiSet: undefined
 */
export function _0x617F49C2668E6155() {
    return Citizen.invokeNative('0x617F49C2668E6155');
}
/**
 * Hash: 0x600F8CB31C7AAB6E | ApiSet: undefined
 */
export function _0x600F8CB31C7AAB6E(p0) {
    Citizen.invokeNative('0x600F8CB31C7AAB6E', p0);
}
/**
 * ```
 * NETWORK_GET_*
 * ```
 * Hash: 0x64D779659BC37B19 | ApiSet: undefined
 */
export function _0x64D779659BC37B19(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(Citizen.invokeNative('0x64D779659BC37B19', _entity));
}
/**
 * Hardcoded to return false.
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x64E5C4CC82847B73 | ApiSet: undefined
 */
export function _0x64E5C4CC82847B73() {
    return Citizen.invokeNative('0x64E5C4CC82847B73');
}
/**
 * Hash: 0x63B406D7884BFA95 | ApiSet: undefined
 */
export function _0x63B406D7884BFA95() {
    return Citizen.invokeNative('0x63B406D7884BFA95');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x6BFF5F84102DF80A | ApiSet: undefined
 */
export function _0x6BFF5F84102DF80A(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0x6BFF5F84102DF80A', _player);
}
/**
 * Hash: 0x67FC09BC554A75E5 | ApiSet: undefined
 */
export function _0x67FC09BC554A75E5() {
    return Citizen.invokeNative('0x67FC09BC554A75E5');
}
/**
 * Hash: 0x692D58DF40657E8C | ApiSet: undefined
 */
export function _0x692D58DF40657E8C(p0, p1, p2, p4, p5) {
    return Citizen.invokeNative('0x692D58DF40657E8C', p0, p1, p2, p4, p5);
}
/**
 * Hash: 0x6CE50E47F5543D0C | ApiSet: undefined
 */
export function _0x6CE50E47F5543D0C() {
    Citizen.invokeNative('0x6CE50E47F5543D0C');
}
/**
 * Hash: 0x68103E2247887242 | ApiSet: undefined
 */
export function _0x68103E2247887242() {
    Citizen.invokeNative('0x68103E2247887242');
}
/**
 * ```
 * Sets some voice chat related value.
 * NETWORK_SET_*
 * ```
 * Hash: 0x6A5D89D7769A40D8 | ApiSet: undefined
 */
export function _0x6A5D89D7769A40D8(toggle) {
    Citizen.invokeNative('0x6A5D89D7769A40D8', toggle);
}
/**
 * Hash: 0x702BC4D605522539 | ApiSet: undefined
 */
export function _0x702BC4D605522539(p0) {
    Citizen.invokeNative('0x702BC4D605522539', p0);
}
/**
 * Hash: 0x6FB7BB3607D27FA2 | ApiSet: undefined
 */
export function _0x6FB7BB3607D27FA2() {
    return Citizen.invokeNative('0x6FB7BB3607D27FA2');
}
/**
 * ```
 * Does nothing (it's a nullsub).
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x6FD992C4A1C1B986 | ApiSet: undefined
 */
export function _0x6FD992C4A1C1B986() {
    Citizen.invokeNative('0x6FD992C4A1C1B986');
}
/**
 * ```
 * Has something to do with a host request.
 * NETWORK_RE*
 * ```
 * Hash: 0x741A3D8380319A81 | ApiSet: undefined
 */
export function _0x741A3D8380319A81() {
    Citizen.invokeNative('0x741A3D8380319A81');
}
/**
 * Hash: 0x742B58F723233ED9 | ApiSet: undefined
 */
export function _0x742B58F723233ED9(p0) {
    return Citizen.invokeNative('0x742B58F723233ED9', p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x76B3F29D3F967692 | ApiSet: undefined
 */
export function _0x76B3F29D3F967692(p0, p1) {
    Citizen.invokeNative('0x76B3F29D3F967692', p0, p1);
}
/**
 * ```
 * Checks some commerce stuff
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x754615490A029508 | ApiSet: undefined
 */
export function _0x754615490A029508() {
    return Citizen.invokeNative('0x754615490A029508');
}
/**
 * Hash: 0x7808619F31FF22DB | ApiSet: undefined
 */
export function _0x7808619F31FF22DB() {
    return Citizen.invokeNative('0x7808619F31FF22DB');
}
/**
 * Hash: 0x78321BEA235FD8CD | ApiSet: undefined
 */
export function _0x78321BEA235FD8CD(p0, p1) {
    return Citizen.invokeNative('0x78321BEA235FD8CD', p0, p1);
}
/**
 * Hash: 0x7D395EA61622E116 | ApiSet: undefined
 */
export function _0x7D395EA61622E116(p0) {
    Citizen.invokeNative('0x7D395EA61622E116', p0);
}
/**
 * Hash: 0x793FF272D5B365F4 | ApiSet: undefined
 */
export function _0x793FF272D5B365F4() {
    return Citizen.invokeNative('0x793FF272D5B365F4');
}
/**
 * ```
 * Hardcoded to return zero.
 * ==== PS4 specific info ====
 * Returns some sort of unavailable reason:
 * -1 = REASON_INVALID
 * 0 = REASON_OTHER
 * 1 = REASON_SYSTEM_UPDATE
 * 2 = REASON_GAME_UPDATE
 * 3 = REASON_SIGNED_OUT
 * 4 = REASON_AGE
 * 5 = REASON_CONNECTION
 * =================================
 * ```
 * Hash: 0x74FB3E29E6D10FA9 | ApiSet: undefined
 */
export function _0x74FB3E29E6D10FA9() {
    return Citizen.invokeNative('0x74FB3E29E6D10FA9');
}
/**
 * ```
 * IS_*
 * ```
 * Hash: 0x7EF7649B64D7FF10 | ApiSet: undefined
 */
export function _0x7EF7649B64D7FF10(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return Citizen.invokeNative('0x7EF7649B64D7FF10', _entity);
}
/**
 * Hash: 0x77FADDCBE3499DF7 | ApiSet: undefined
 */
export function _0x77FADDCBE3499DF7(p0) {
    Citizen.invokeNative('0x77FADDCBE3499DF7', p0);
}
/**
 * Hash: 0x83FE8D7229593017 | ApiSet: undefined
 */
export function _0x83FE8D7229593017() {
    Citizen.invokeNative('0x83FE8D7229593017');
}
/**
 * Hash: 0x7DB53B37A2F211A0 | ApiSet: undefined
 */
export function _0x7DB53B37A2F211A0() {
    return Citizen.invokeNative('0x7DB53B37A2F211A0');
}
/**
 * NETWORK_SET_\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x8EF52ACAECC51D9C | ApiSet: undefined
 */
export function _0x8EF52ACAECC51D9C(toggle) {
    Citizen.invokeNative('0x8EF52ACAECC51D9C', toggle);
}
/**
 * Hash: 0x83660B734994124D | ApiSet: undefined
 */
export function _0x83660B734994124D(p0, p1) {
    return Citizen.invokeNative('0x83660B734994124D', p0, p1);
}
/**
 * Hash: 0x8B4FFC790CA131EF | ApiSet: undefined
 */
export function _0x8B4FFC790CA131EF(p0, p1, p2, p3) {
    return Citizen.invokeNative('0x8B4FFC790CA131EF', p0, p1, p2, p3);
}
/**
 * Hash: 0x7FCC39C46C3C03BD | ApiSet: undefined
 */
export function _0x7FCC39C46C3C03BD(p0) {
    return Citizen.invokeNative('0x7FCC39C46C3C03BD', p0);
}
/**
 * Hash: 0x88B588B41FF7868E | ApiSet: undefined
 */
export function _0x88B588B41FF7868E() {
    return Citizen.invokeNative('0x88B588B41FF7868E');
}
/**
 * Hash: 0x94538037EE44F5CF | ApiSet: undefined
 */
export function _0x94538037EE44F5CF(p0) {
    Citizen.invokeNative('0x94538037EE44F5CF', p0);
}
/**
 * Hash: 0x8B0C2964BA471961 | ApiSet: undefined
 */
export function _0x8B0C2964BA471961() {
    return Citizen.invokeNative('0x8B0C2964BA471961');
}
/**
 * Hash: 0x9465E683B12D3F6B | ApiSet: undefined
 */
export function _0x9465E683B12D3F6B() {
    Citizen.invokeNative('0x9465E683B12D3F6B');
}
/**
 * Hash: 0x973D76AA760A6CB6 | ApiSet: undefined
 */
export function _0x973D76AA760A6CB6(p0) {
    Citizen.invokeNative('0x973D76AA760A6CB6', p0);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x906CA41A4B74ECA4 | ApiSet: undefined
 */
export function _0x906CA41A4B74ECA4() {
    return Citizen.invokeNative('0x906CA41A4B74ECA4');
}
/**
 * Hash: 0x8C8D2739BA44AF0F | ApiSet: undefined
 */
export function _0x8C8D2739BA44AF0F(p0) {
    return Citizen.invokeNative('0x8C8D2739BA44AF0F', p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x9D724B400A7E8FFC | ApiSet: undefined
 */
export function _0x9D724B400A7E8FFC(p0, p1) {
    Citizen.invokeNative('0x9D724B400A7E8FFC', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x95BAF97C82464629 | ApiSet: undefined
 */
export function _0x95BAF97C82464629(p0, p1) {
    Citizen.invokeNative('0x95BAF97C82464629', p0, p1);
}
/**
 * ```
 * Sets some voice chat related value.
 * NETWORK_SET_*
 * ```
 * Hash: 0x9D7AFCBF21C51712 | ApiSet: undefined
 */
export function _0x9D7AFCBF21C51712(toggle) {
    Citizen.invokeNative('0x9D7AFCBF21C51712', toggle);
}
/**
 * Hash: 0x9FEDF86898F100E9 | ApiSet: undefined
 */
export function _0x9FEDF86898F100E9() {
    return Citizen.invokeNative('0x9FEDF86898F100E9');
}
/**
 * Hash: 0xA0FA4EC6A05DA44E | ApiSet: undefined
 */
export function _0xA0FA4EC6A05DA44E() {
    return Citizen.invokeNative('0xA0FA4EC6A05DA44E');
}
/**
 * ```
 * Appears to set whether a transition should be started when the session is migrating.
 * NETWORK_SET_*
 * ```
 * Hash: 0xA2E9C1AB8A92E8CD | ApiSet: undefined
 */
export function _0xA2E9C1AB8A92E8CD(toggle) {
    Citizen.invokeNative('0xA2E9C1AB8A92E8CD', toggle);
}
/**
 * Hash: 0xA12D3A5A3753CC23 | ApiSet: undefined
 */
export function _0xA12D3A5A3753CC23() {
    return Citizen.invokeNative('0xA12D3A5A3753CC23');
}
/**
 * Hash: 0xA306F470D1660581 | ApiSet: undefined
 */
export function _0xA306F470D1660581() {
    return Citizen.invokeNative('0xA306F470D1660581');
}
/**
 * ```
 * NativeDB Added Parameter 1: Entity entity
 * ```
 * Hash: 0xAA5FAFCD2C5F5E47 | ApiSet: undefined
 */
export function _0xAA5FAFCD2C5F5E47() {
    return new Vector3(Citizen.invokeNative('0xAA5FAFCD2C5F5E47'));
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xA6FCECCF4721D679 | ApiSet: undefined
 */
export function _0xA6FCECCF4721D679(p0) {
    Citizen.invokeNative('0xA6FCECCF4721D679', p0);
}
/**
 * Hash: 0xA8ACB6459542A8C8 | ApiSet: undefined
 */
export function _0xA8ACB6459542A8C8() {
    return Citizen.invokeNative('0xA8ACB6459542A8C8');
}
/**
 * Hash: 0xA7862BC5ED1DFD7E | ApiSet: undefined
 */
export function _0xA7862BC5ED1DFD7E(p0, p1) {
    return Citizen.invokeNative('0xA7862BC5ED1DFD7E', p0, p1);
}
/**
 * ```
 * gets 2 floats from the CNetGamePlayer of p0 and stores them in p1 and p2.
 * Possibly waypoint?
 * ```
 * Hash: 0xADB57E5B663CCA8B | ApiSet: undefined
 */
export function _0xADB57E5B663CCA8B(p0) {
    const _p0 = p0 instanceof Entity ? p0.remoteId() : p0;
    return Citizen.invokeNative('0xADB57E5B663CCA8B', _p0);
}
/**
 * Hash: 0xAEAB987727C5A8A4 | ApiSet: undefined
 */
export function _0xAEAB987727C5A8A4(p0) {
    return Citizen.invokeNative('0xAEAB987727C5A8A4', p0);
}
/**
 * Hash: 0xB13E88E655E5A3BC | ApiSet: undefined
 */
export function _0xB13E88E655E5A3BC() {
    Citizen.invokeNative('0xB13E88E655E5A3BC');
}
/**
 * ```
 * Does nothing (it's a nullsub).
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xAEDF1BC1C133D6E3 | ApiSet: undefined
 */
export function _0xAEDF1BC1C133D6E3() {
    Citizen.invokeNative('0xAEDF1BC1C133D6E3');
}
/**
 * Hash: 0xB5D3453C98456528 | ApiSet: undefined
 */
export function _0xB5D3453C98456528() {
    return Citizen.invokeNative('0xB5D3453C98456528');
}
/**
 * Hash: 0xB37E4E6A2388CA7B | ApiSet: undefined
 */
export function _0xB37E4E6A2388CA7B() {
    return Citizen.invokeNative('0xB37E4E6A2388CA7B');
}
/**
 * Hash: 0xB309EBEA797E001F | ApiSet: undefined
 */
export function _0xB309EBEA797E001F(p0) {
    return Citizen.invokeNative('0xB309EBEA797E001F', p0);
}
/**
 * ```
 * NETWORK_SESSION_IS_*
 * ```
 * Hash: 0xBDB6F89C729CF388 | ApiSet: undefined
 */
export function _0xBDB6F89C729CF388() {
    return Citizen.invokeNative('0xBDB6F89C729CF388');
}
/**
 * Hash: 0xBD545D44CCE70597 | ApiSet: undefined
 */
export function _0xBD545D44CCE70597() {
    return Citizen.invokeNative('0xBD545D44CCE70597');
}
/**
 * Hash: 0xB746D20B17F2A229 | ApiSet: undefined
 */
export function _0xB746D20B17F2A229() {
    return Citizen.invokeNative('0xB746D20B17F2A229');
}
/**
 * Hash: 0xC32EA7A2F6CA7557 | ApiSet: undefined
 */
export function _0xC32EA7A2F6CA7557() {
    return Citizen.invokeNative('0xC32EA7A2F6CA7557');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xB606E6CC59664972 | ApiSet: undefined
 */
export function _0xB606E6CC59664972(p0) {
    Citizen.invokeNative('0xB606E6CC59664972', p0);
}
/**
 * Hash: 0xBF22E0F32968E967 | ApiSet: undefined
 */
export function _0xBF22E0F32968E967(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    Citizen.invokeNative('0xBF22E0F32968E967', _player, p1);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xB9351A07A0D458B1 | ApiSet: undefined
 */
export function _0xB9351A07A0D458B1(p0) {
    return Citizen.invokeNative('0xB9351A07A0D458B1', p0);
}
/**
 * Hash: 0xBA7F0B77D80A4EB7 | ApiSet: undefined
 */
export function _0xBA7F0B77D80A4EB7(p0, p1) {
    Citizen.invokeNative('0xBA7F0B77D80A4EB7', p0, p1);
}
/**
 * Hash: 0xC434133D9BA52777 | ApiSet: undefined
 */
export function _0xC434133D9BA52777(p0) {
    return Citizen.invokeNative('0xC434133D9BA52777', p0);
}
/**
 * Hash: 0xC42DD763159F3461 | ApiSet: undefined
 */
export function _0xC42DD763159F3461() {
    return Citizen.invokeNative('0xC42DD763159F3461');
}
/**
 * NETWORK_S\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xCA59CCAE5D01E4CE | ApiSet: undefined
 */
export function _0xCA59CCAE5D01E4CE() {
    Citizen.invokeNative('0xCA59CCAE5D01E4CE');
}
/**
 * Hash: 0xC87E740D9F3872CC | ApiSet: undefined
 */
export function _0xC87E740D9F3872CC() {
    return Citizen.invokeNative('0xC87E740D9F3872CC');
}
/**
 * Hash: 0xCA575C391FEA25CC | ApiSet: undefined
 */
export function _0xCA575C391FEA25CC(p0) {
    Citizen.invokeNative('0xCA575C391FEA25CC', p0);
}
/**
 * Hash: 0xCFEB46DCD7D8D5EB | ApiSet: undefined
 */
export function _0xCFEB46DCD7D8D5EB(p0) {
    Citizen.invokeNative('0xCFEB46DCD7D8D5EB', p0);
}
/**
 * ```
 * NETWORK_SESSION_IS_*
 * ```
 * Hash: 0xD313DE83394AF134 | ApiSet: undefined
 */
export function _0xD313DE83394AF134() {
    return Citizen.invokeNative('0xD313DE83394AF134');
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xD6D7478CA62B8D41 | ApiSet: undefined
 */
export function _0xD6D7478CA62B8D41(p0, p1) {
    Citizen.invokeNative('0xD6D7478CA62B8D41', p0, p1);
}
/**
 * Hash: 0xE16AA70CE9BEEDC3 | ApiSet: undefined
 */
export function _0xE16AA70CE9BEEDC3(p0) {
    return Citizen.invokeNative('0xE16AA70CE9BEEDC3', p0);
}
/**
 * ```
 * NETWORK_IS_TRANSITION_*
 * ```
 * Hash: 0xC571D0E77D8BBC29 | ApiSet: undefined
 */
export function _0xC571D0E77D8BBC29() {
    return Citizen.invokeNative('0xC571D0E77D8BBC29');
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xDB663CC9FF3407A9 | ApiSet: undefined
 */
export function _0xDB663CC9FF3407A9(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return Citizen.invokeNative('0xDB663CC9FF3407A9', _player);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xE42D626EEC94E5D9 | ApiSet: undefined
 */
export function _0xE42D626EEC94E5D9(p0, p1, p2, p3) {
    return Citizen.invokeNative('0xE42D626EEC94E5D9', p0, p1, p2, p3);
}
/**
 * Hash: 0xE6717E652B8C8D8A | ApiSet: undefined
 */
export function _0xE6717E652B8C8D8A(p0, p1) {
    Citizen.invokeNative('0xE6717E652B8C8D8A', p0, p1);
}
/**
 * Hash: 0xCFEB8AF24FC1D0BB | ApiSet: undefined
 */
export function networkBlockJoinQueueInvites(toggle) {
    NetworkBlockJoinQueueInvites(toggle);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xEA8C0DDB10E2822A | ApiSet: undefined
 */
export function _0xEA8C0DDB10E2822A(p0, p1) {
    Citizen.invokeNative('0xEA8C0DDB10E2822A', p0, p1);
}
/**
 * Hash: 0xD7B6C73CAD419BCF | ApiSet: undefined
 */
export function _0xD7B6C73CAD419BCF(p0) {
    Citizen.invokeNative('0xD7B6C73CAD419BCF', p0);
}
/**
 * Hash: 0xEBF8284D8CADEB53 | ApiSet: undefined
 */
export function _0xEBF8284D8CADEB53() {
    Citizen.invokeNative('0xEBF8284D8CADEB53');
}
/**
 * Hash: 0xEBFA8D50ADDC54C4 | ApiSet: undefined
 */
export function _0xEBFA8D50ADDC54C4(p0) {
    return Citizen.invokeNative('0xEBFA8D50ADDC54C4', p0);
}
/**
 * ```
 * NETWORK_RE*
 * ```
 * Hash: 0xF083835B70BA9BFE | ApiSet: undefined
 */
export function _0xF083835B70BA9BFE() {
    Citizen.invokeNative('0xF083835B70BA9BFE');
}
/**
 * Hash: 0xEBCAB9E5048434F4 | ApiSet: undefined
 */
export function _0xEBCAB9E5048434F4() {
    return Citizen.invokeNative('0xEBCAB9E5048434F4');
}
/**
 * Hash: 0xF6F4383B7C92F11A | ApiSet: undefined
 */
export function _0xF6F4383B7C92F11A(p0) {
    Citizen.invokeNative('0xF6F4383B7C92F11A', p0);
}
/**
 * Hash: 0xF49ABC20D8552257 | ApiSet: undefined
 */
export function _0xF49ABC20D8552257(p0) {
    Citizen.invokeNative('0xF49ABC20D8552257', p0);
}
/**
 * Hash: 0xF814FEC6A19FD6E0 | ApiSet: undefined
 */
export function _0xF814FEC6A19FD6E0() {
    Citizen.invokeNative('0xF814FEC6A19FD6E0');
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xFAC18E7356BD3210 | ApiSet: undefined
 */
export function _0xFAC18E7356BD3210() {
    Citizen.invokeNative('0xFAC18E7356BD3210');
}
/**
 * Hash: 0xF287F506767CC8A9 | ApiSet: undefined
 */
export function _0xF287F506767CC8A9() {
    return Citizen.invokeNative('0xF287F506767CC8A9');
}
/**
 * Hash: 0xFAE628F1E9ADB239 | ApiSet: undefined
 */
export function _0xFAE628F1E9ADB239(p0, p1, p2) {
    if (typeof p0 === 'string')
        p0 = this.getHashKey(p0);
    if (typeof p2 === 'string')
        p2 = this.getHashKey(p2);
    Citizen.invokeNative('0xFAE628F1E9ADB239', p0, p1, p2);
}
/**
 * Hash: 0xFA2888E3833C8E96 | ApiSet: undefined
 */
export function _0xFA2888E3833C8E96() {
    Citizen.invokeNative('0xFA2888E3833C8E96');
}
/**
 * ```
 * gets the entity id of a network id
 * ```
 * Hash: 0xBFFEAB45A9A9094A | ApiSet: undefined
 */
export function netToEnt(netHandle) {
    return NetToEnt(netHandle);
}
/**
 * ```
 * NETWORK_RE*
 * Triggers a CEventNetworkInviteConfirmed event
 * ```
 * Hash: 0x62A0296C1BB1CEB3 | ApiSet: undefined
 */
export function networkAcceptInvite() {
    return NetworkAcceptInvite();
}
/**
 * Hash: 0xFB680D403909DC70 | ApiSet: undefined
 */
export function _0xFB680D403909DC70(p0, p1) {
    Citizen.invokeNative('0xFB680D403909DC70', p0, p1);
}
/**
 * ```
 * p0 is always 0. p1 is pointing to a global.
 * ```
 * Hash: 0xFB1F9381E80FA13F | ApiSet: undefined
 */
export function _0xFB1F9381E80FA13F(p0) {
    return Citizen.invokeNative('0xFB1F9381E80FA13F', p0);
}
/**
 * Hash: 0xFD75DABC0957BF33 | ApiSet: undefined
 */
export function _0xFD75DABC0957BF33(p0) {
    Citizen.invokeNative('0xFD75DABC0957BF33', p0);
}
/**
 * Hash: 0x972BC203BBC4C4D5 | ApiSet: undefined
 */
export function networkAccessTunableFloatHash(tunableContext, tunableName) {
    if (typeof tunableContext === 'string')
        tunableContext = this.getHashKey(tunableContext);
    if (typeof tunableName === 'string')
        tunableName = this.getHashKey(tunableName);
    return NetworkAccessTunableFloatHash(tunableContext, tunableName);
}
/**
 * ```
 * gets the object id of a network id
 * ```
 * Hash: 0xD8515F5FEA14CB3F | ApiSet: undefined
 */
export function netToObj(netHandle) {
    return NetToObj(netHandle);
}
/**
 * ```
 * gets the ped id of a network id
 * ```
 * Hash: 0xBDCD95FC216A8B3E | ApiSet: undefined
 */
export function netToPed(netHandle) {
    return NetToPed(netHandle);
}
/**
 * Hash: 0x367B936610BA360C | ApiSet: undefined
 */
export function netToVeh(netHandle) {
    return NetToVeh(netHandle);
}
/**
 * Hash: 0xAA6A47A573ABB75A | ApiSet: undefined
 */
export function networkAccessTunableBool(tunableContext, tunableName) {
    return NetworkAccessTunableBool(tunableContext, tunableName);
}
/**
 * Hash: 0xFA91550DF9318B22 | ApiSet: undefined
 */
export function networkAcceptPresenceInvite(p0) {
    return NetworkAcceptPresenceInvite(p0);
}
/**
 * Hash: 0xEA16B69D93D71A45 | ApiSet: undefined
 */
export function networkAccessTunableBoolHash(tunableContext, tunableName) {
    if (typeof tunableContext === 'string')
        tunableContext = this.getHashKey(tunableContext);
    if (typeof tunableName === 'string')
        tunableName = this.getHashKey(tunableName);
    return NetworkAccessTunableBoolHash(tunableContext, tunableName);
}
/**
 * Hash: 0xE5608CA7BC163A5F | ApiSet: undefined
 */
export function networkAccessTunableFloat(tunableContext, tunableName) {
    return NetworkAccessTunableFloat(tunableContext, tunableName);
}
/**
 * Hash: 0x8BE1146DFD5D4468 | ApiSet: undefined
 */
export function networkAccessTunableInt(tunableContext, tunableName) {
    return NetworkAccessTunableInt(tunableContext, tunableName);
}
/**
 * Hash: 0x40FCE03E50E8DBE8 | ApiSet: undefined
 */
export function networkAccessTunableIntHash(tunableContext, tunableName) {
    if (typeof tunableContext === 'string')
        tunableContext = this.getHashKey(tunableContext);
    if (typeof tunableName === 'string')
        tunableName = this.getHashKey(tunableName);
    return NetworkAccessTunableIntHash(tunableContext, tunableName);
}
/**
 * To remove, see: [`NETWORK_REMOVE_ENTITY_AREA`](#\_0x93CF869BAA0C4874).
 * See [`IS_POINT_IN_ANGLED_AREA`](#\_0x2A70BAE8883E4C81) for the definition of an angled area.
 * Hash: 0x376C6375BA60293A | ApiSet: undefined
 */
export function networkAddEntityAngledArea(x1, y1, z1, x2, y2, z2, width) {
    return NetworkAddEntityAngledArea(x1, y1, z1, x2, y2, z2, width);
}
/**
 * Hash: 0xC88156EBB786F8D5 | ApiSet: undefined
 */
export function networkActionFollowInvite() {
    return NetworkActionFollowInvite();
}
/**
 * Hash: 0x25B99872D588A101 | ApiSet: undefined
 */
export function networkAddEntityDisplayedBoundaries(p0, p1, p2, p3, p4, p5) {
    return NetworkAddEntityDisplayedBoundaries(p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x494C8FB299290269 | ApiSet: undefined
 */
export function networkAddEntityArea(p0, p1, p2, p3, p4, p5) {
    return NetworkAddEntityArea(p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x8E02D73914064223 | ApiSet: undefined
 */
export function networkAddFriend(message) {
    return NetworkAddFriend(message);
}
/**
 * Adds an entity to a network synchronised scene.
 * Hash: 0xF2404D68CBC855FA | ApiSet: undefined
 */
export function networkAddEntityToSynchronisedScene(entity, netScene, animDict, animName, blendIn, blendOut, flag) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkAddEntityToSynchronisedScene(_entity, netScene, animDict, animName, blendIn, blendOut, flag);
}
/**
 * ```
 * ..
 * ```
 * Hash: 0x236406F60CF216D6 | ApiSet: undefined
 */
export function networkAddFollowers(p1) {
    return NetworkAddFollowers(p1);
}
/**
 * Adds a map entity to a network synchronized scene. This native function is utilized only once as of game build 2944 within the casino_slots script.
 * Please note that it's only possible to add a single map entity to synchronised scenes.
 * It's advisable to initially locate the object and retrieve its actual coordinates using [`GET_CLOSEST_OBJECT_OF_TYPE`](#\_0xE143FA2249364369).
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x45F35C0EDC33B03B | ApiSet: undefined
 */
export function networkAddMapEntityToSynchronisedScene(netScene, modelHash, position, animDict, animName, blendInSpeed, blendOutSpeed, flags) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    NetworkAddMapEntityToSynchronisedScene(netScene, modelHash, position.x, position.y, position.z, animDict, animName, blendInSpeed, blendOutSpeed, flags);
}
/**
 * Hash: 0xCF8BD3B0BD6D42D7 | ApiSet: undefined
 */
export function networkAddSynchronisedSceneCamera(netScene, animDict, animName) {
    NetworkAddSynchronisedSceneCamera(netScene, animDict, animName);
}
/**
 * Adds a ped to a networked synchronized scene but extends [`NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE`](#\_0x742A637471BCECD9) to support IK flags.
 * There is barely any difference between this and [`NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE`](#\_0x742A637471BCECD9).
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xA5EAFE473E45C442 | ApiSet: undefined
 */
export function networkAddPedToSynchronisedSceneWithIk(ped, netSceneID, animDict, animClip, blendIn, blendOut, sceneFlags, ragdollFlags, moverBlendInDelta, ikFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    NetworkAddPedToSynchronisedSceneWithIk(_ped, netSceneID, animDict, animClip, blendIn, blendOut, sceneFlags, ragdollFlags, moverBlendInDelta, ikFlags);
}
/**
 * Adds a ped to a networked synchronised scene.
 * Synchronized scene playback flags (Also works in other `NETWORK_ADD_*_TO_SYNCHRONISED_SCENE` natives):
 * | Value     |                  Name                     |                                                             Notes                                                                |
 * | :-------: | :---------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------: |
 * | `0`       |  None                                     | No flag set.                                                                                                                     |
 * | `1`       | USE_PHYSICS                               | Allows the ped to have physics during the scene.                                                                                 |
 * | `2`       | TAG_SYNC_OUT                              | The task will do a tag synchronized blend out with the movement behaviour of the ped.                                            |
 * | `4`       | DONT_INTERRUPT                            | The scene will not be interrupted by external events.                                                                            |
 * | `8`       | ON_ABORT_STOP_SCENE                       | The scene will be stopped if the scripted task is aborted.                                                                       |
 * | `16`      | ABORT_ON_WEAPON_DAMAGE                    | The scene will be stopped if the ped is damaged by a weapon.                                                                     |
 * | `32`      | BLOCK_MOVER_UPDATE                        | The task will not update the mover.                                                                                              |
 * | `64`      | LOOP_WITHIN_SCENE                         | Animations within this scene will be looped until the scene is finished.                                                         |
 * | `128`     | PRESERVE_VELOCITY                         | The task will keep it's velocity when the scene is cleaned up/stopped. Do note that the `USE_PHYSICS` flag must also be present. |
 * | `256`     | EXPAND_PED_CAPSULE_FROM_SKELETON          | The task will apply the `ExpandPedCapsuleFromSkeleton` reset flag to the ped (See [`SET_PED_RESET_FLAG`](#\_0xC1E8A365BF3B29F2)). |
 * | `512`     | ACTIVATE_RAGDOLL_ON_COLLISION             | The ped will be ragdoll if it comes in contact with an object.                                                                   |
 * | `1024`    | HIDE_WEAPON                               | The ped's current weapon will be hidden during the scene.                                                                        |
 * | `2048`    | ABORT_ON_DEATH                            | The synchronised scene will be aborted if the ped dies.                                                                          |
 * | `4096`    | VEHICLE_ABORT_ON_LARGE_IMPACT             | If the scene is running on a vehicle, then it will be aborted if the vehicle takes a heavy collision with another vehicle.       |
 * | `8192`    | VEHICLE_ALLOW_PLAYER_ENTRY                | If the scene is on a vehicle, it allows players to enter it.                                                                     |
 * | `16384`   | PROCESS_ATTACHMENTS_ON_START              | Attachments will be processed at the start of the scene.                                                                         |
 * | `32768`   | NET_ON_EARLY_NON_PED_STOP_RETURN_TO_START | A non-ped entity will be returned to their starting position if the scene finishes early.                                        |
 * | `65536`   | SET_PED_OUT_OF_VEHICLE_AT_START           | If the ped is in a vehicle when the scene starts, it will be set out of the vehicle.                                             |
 * | `131072`  | NET_DISREGARD_ATTACHMENT_CHECKS           | Attachment checks will be disregarded when the scene is running.                                                                 |
 * These flags can be combined with the `|` operator.
 * Hash: 0x742A637471BCECD9 | ApiSet: undefined
 */
export function networkAddPedToSynchronisedScene(ped, netScene, animDict, animClip, blendInSpeed, blendOutSpeed, syncedSceneFlags, ragdollFlags, moverBlendInDelta, ikFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    NetworkAddPedToSynchronisedScene(_ped, netScene, animDict, animClip, blendInSpeed, blendOutSpeed, syncedSceneFlags, ragdollFlags, moverBlendInDelta, ikFlags);
}
/**
 * Hash: 0xFAFC23AEE23868DB | ApiSet: undefined
 */
export function networkAllocateTunablesRegistrationDataMap() {
    return NetworkAllocateTunablesRegistrationDataMap();
}
/**
 * Hash: 0x15337C7C268A27B2 | ApiSet: undefined
 */
export function networkAmIBlockedByGamer() {
    return NetworkAmIBlockedByGamer();
}
/**
 * Allows scripts to use attachment commands on entities (eg. [`ATTACH_ENTITY_TO_ENTITY`](#\_0x6B9BBD38AB0796DF)) that are not controlled by the client.
 * **Note:** This is only local and does not affect entities on other machines. This is used by the ferris wheel script to sync players on carts.
 * Hash: 0x267C78C60E806B9A | ApiSet: undefined
 */
export function networkAllowRemoteAttachmentModification(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkAllowRemoteAttachmentModification(_entity, toggle);
}
/**
 * Hash: 0xDF02A2C93F1F26DA | ApiSet: undefined
 */
export function networkAmIMutedByGamer() {
    return NetworkAmIMutedByGamer();
}
/**
 * Hash: 0x521638ADA1BA0D18 | ApiSet: undefined
 */
export function networkApplyTransitionParameter(p0, p1) {
    NetworkApplyTransitionParameter(p0, p1);
}
/**
 * Hash: 0x87F395D957D4353D | ApiSet: undefined
 */
export function networkAmIBlockedByPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkAmIBlockedByPlayer(_player);
}
/**
 * Hash: 0x9D6981DFC91A8604 | ApiSet: undefined
 */
export function networkAmIMutedByPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkAmIMutedByPlayer(_player);
}
/**
 * Hash: 0xE66C690248F11150 | ApiSet: undefined
 */
export function networkApplyPedScarData(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    NetworkApplyPedScarData(_ped, p1);
}
/**
 * Hash: 0x99B72C7ABDE5C910 | ApiSet: undefined
 */
export function networkApplyCachedPlayerHeadBlendData(ped, player) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkApplyCachedPlayerHeadBlendData(_ped, _player);
}
/**
 * Hash: 0xEBEFC2E77084F599 | ApiSet: undefined
 */
export function networkApplyTransitionParameterString(p0, string, p2) {
    NetworkApplyTransitionParameterString(p0, string, p2);
}
/**
 * ```
 * Getter for SET_NETWORK_CUTSCENE_ENTITIES.
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x66D6A5E9C511214A | ApiSet: undefined
 */
export function networkAreCutsceneEntities() {
    return NetworkAreCutsceneEntities();
}
/**
 * Hash: 0x57DBA049E110F217 | ApiSet: undefined
 */
export function networkAreHandlesTheSame() {
    return NetworkAreHandlesTheSame();
}
/**
 * Hash: 0xDBD2056652689917 | ApiSet: undefined
 */
export function networkApplyVoiceProximityOverride(position) {
    NetworkApplyVoiceProximityOverride(position.x, position.y, position.z);
}
/**
 * Hash: 0x2615AA2A695930C1 | ApiSet: undefined
 */
export function networkAreTransitionDetailsValid(p0) {
    return NetworkAreTransitionDetailsValid(p0);
}
/**
 * Hash: 0xBA9775570DB788CF | ApiSet: undefined
 */
export function networkAreSocialClubPoliciesCurrent() {
    return NetworkAreSocialClubPoliciesCurrent();
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x023782EFC70585EE | ApiSet: undefined
 */
export function networkBailTransitionQuickmatch() {
    NetworkBailTransitionQuickmatch();
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Added Parameter 2: int p1
 * NativeDB Added Parameter 3: int p2
 * ```
 * Hash: 0xEAA572036990CD1B | ApiSet: undefined
 */
export function networkBailTransition() {
    NetworkBailTransition();
}
/**
 * Hash: 0x478DCBD2A98B705A | ApiSet: undefined
 */
export function networkAttachSynchronisedSceneToEntity(netScene, entity, bone) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkAttachSynchronisedSceneToEntity(netScene, _entity, bone);
}
/**
 * Hash: 0xBD0BE0BFC927EAC1 | ApiSet: undefined
 */
export function networkCacheLocalPlayerHeadBlendData() {
    NetworkCacheLocalPlayerHeadBlendData();
}
/**
 * ```
 * NativeDB Added Parameter 1: int p0
 * NativeDB Added Parameter 2: int p1
 * NativeDB Added Parameter 3: int p2
 * ```
 * Hash: 0x95914459A87EBA28 | ApiSet: undefined
 */
export function networkBail() {
    NetworkBail();
}
/**
 * Hash: 0x6B07B9CE4D390375 | ApiSet: undefined
 */
export function networkBlockKickedPlayers(p0) {
    NetworkBlockKickedPlayers(p0);
}
/**
 * Hash: 0x34F9E9049454A7A0 | ApiSet: undefined
 */
export function networkBlockInvites(toggle) {
    NetworkBlockInvites(toggle);
}
/**
 * Hash: 0x580CE4438479CC61 | ApiSet: undefined
 */
export function networkCanBail() {
    return NetworkCanBail();
}
/**
 * Hash: 0xA150A4F065806B1F | ApiSet: undefined
 */
export function networkCanCommunicateWithGamer() {
    return NetworkCanCommunicateWithGamer();
}
/**
 * ```
 * 11 - Need to download tunables.
 * 12 - Need to download background script.
 * Returns 1 if the multiplayer is loaded, otherwhise 0.
 * ```
 * Hash: 0xAF50DA1A3F8B1BA4 | ApiSet: undefined
 */
export function networkCanAccessMultiplayer() {
    return NetworkCanAccessMultiplayer();
}
/**
 * Hash: 0x07DD29D5E22763F1 | ApiSet: undefined
 */
export function networkCanPlayMultiplayerWithGamer() {
    return NetworkCanPlayMultiplayerWithGamer();
}
/**
 * Hash: 0x135F9B7B7ADD2185 | ApiSet: undefined
 */
export function networkCanGamerPlayMultiplayerWithMe() {
    return NetworkCanGamerPlayMultiplayerWithMe();
}
/**
 * Hash: 0x7E782A910C362C25 | ApiSet: undefined
 */
export function networkCanEnterMultiplayer() {
    return NetworkCanEnterMultiplayer();
}
/**
 * Hash: 0xC927EC229934AF60 | ApiSet: undefined
 */
export function networkCanSetWaypoint() {
    return NetworkCanSetWaypoint();
}
/**
 * Hash: 0xB57A49545BA53CE7 | ApiSet: undefined
 */
export function networkCanViewGamerUserContent() {
    return NetworkCanViewGamerUserContent();
}
/**
 * Hash: 0x4EEBC3694E49C572 | ApiSet: undefined
 */
export function networkCanSessionEnd() {
    return NetworkCanSessionEnd();
}
/**
 * ```
 * Same as NETWORK_CAN_COMMUNICATE_WITH_GAMER
 * NETWORK_CAN_*
 * ```
 * Hash: 0x8F5D1AD832AEB06C | ApiSet: undefined
 */
export function networkCanCommunicateWithGamer2() {
    return NetworkCanCommunicateWithGamer2();
}
/**
 * Hash: 0xFB8F2A6F3DF08CBE | ApiSet: undefined
 */
export function networkCancelRespawnSearch() {
    NetworkCancelRespawnSearch();
}
/**
 * Hash: 0xEEEDA5E6D7080987 | ApiSet: undefined
 */
export function networkChangeTransitionSlots(p0, p1) {
    NetworkChangeTransitionSlots(p0, p1);
}
/**
 * Hash: 0x83F28CE49FBBFFBA | ApiSet: undefined
 */
export function networkCheckCommunicationPrivileges(p0, p1, p2) {
    return NetworkCheckCommunicationPrivileges(p0, p1, p2);
}
/**
 * Hash: 0xB3F64A6A91432477 | ApiSet: undefined
 */
export function networkClanAnyDownloadMembershipPending() {
    return NetworkClanAnyDownloadMembershipPending();
}
/**
 * ```
 * Only documented...
 * ```
 * Hash: 0x729E3401F0430686 | ApiSet: undefined
 */
export function networkClanAnimation(animDict, animName) {
    return NetworkClanAnimation(animDict, animName);
}
/**
 * Hash: 0x595F028698072DD9 | ApiSet: undefined
 */
export function networkCheckUserContentPrivileges(p0, p1, p2) {
    return NetworkCheckUserContentPrivileges(p0, p1, p2);
}
/**
 * Hash: 0x5B9E023DC6EBEDC0 | ApiSet: undefined
 */
export function networkClanDownloadMembershipPending() {
    return NetworkClanDownloadMembershipPending();
}
/**
 * Checks if the friendDataIndex in the friend data manager contains the data for the specified networkHandle
 * Hash: 0x44B37CDCAE765AAE | ApiSet: undefined
 */
export function networkCheckDataManagerSucceededForHandle(friendDataIndex) {
    return NetworkCheckDataManagerSucceededForHandle(friendDataIndex);
}
/**
 * Hash: 0xAAB11F6C4ADBC2C1 | ApiSet: undefined
 */
export function networkClanGetMembershipCount() {
    return NetworkClanGetMembershipCount();
}
/**
 * Hash: 0xA989044E70010ABE | ApiSet: undefined
 */
export function networkClanDownloadMembership() {
    return NetworkClanDownloadMembership();
}
/**
 * Hash: 0x48DE78AF2C8885B8 | ApiSet: undefined
 */
export function networkClanGetMembershipDesc(p1) {
    return NetworkClanGetMembershipDesc(p1);
}
/**
 * Hash: 0x1F471B79ACC90BEF | ApiSet: undefined
 */
export function networkClanGetLocalMembershipsCount() {
    return NetworkClanGetLocalMembershipsCount();
}
/**
 * Checks if a crew/membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP) is valid.
 * Hash: 0x48A59CF88D43DF0E | ApiSet: undefined
 */
export function networkClanGetMembershipValid(membershipIndex) {
    return NetworkClanGetMembershipValid(membershipIndex);
}
/**
 * Hash: 0xA134777FF7F33331 | ApiSet: undefined
 */
export function networkClanIsEmblemReady(p0) {
    return NetworkClanIsEmblemReady(p0);
}
/**
 * Hash: 0x5835D9CD92E83184 | ApiSet: undefined
 */
export function networkClanGetEmblemTxdName() {
    return NetworkClanGetEmblemTxdName();
}
/**
 * Retrieves a membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP).
 * Test C++ code:
 * https://pastebin.com/CD8wni4C
 * Hash: 0xC8BC2011F67B3411 | ApiSet: undefined
 */
export function networkClanGetMembership(membershipIndex) {
    return NetworkClanGetMembership(membershipIndex);
}
/**
 * ```
 * bufferSize is 35 in the scripts.
 * `bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.`
 * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
 * pastebin.com/cSZniHak
 * ```
 * Hash: 0xEEE6EACBE8874FBA | ApiSet: undefined
 */
export function networkClanPlayerGetDesc(bufferSize) {
    return NetworkClanPlayerGetDesc(bufferSize);
}
/**
 * Hash: 0x9FAAA4F4FC71F87F | ApiSet: undefined
 */
export function networkClanJoin(clanDesc) {
    return NetworkClanJoin(clanDesc);
}
/**
 * ```
 * bufferSize is 35 in the scripts.
 * ```
 * Hash: 0xF45352426FF3A4F0 | ApiSet: undefined
 */
export function networkClanGetUiFormattedTag(bufferSize, formattedTag) {
    return NetworkClanGetUiFormattedTag(bufferSize, formattedTag);
}
/**
 * ```
 * bufferSize is 35 in the scripts.
 * ```
 * Hash: 0x7543BB439F63792B | ApiSet: undefined
 */
export function networkClanIsRockstarClan(bufferSize) {
    return NetworkClanIsRockstarClan(bufferSize);
}
/**
 * Hash: 0x13518FF1C6B28938 | ApiSet: undefined
 */
export function networkClanRequestEmblem(p0) {
    return NetworkClanRequestEmblem(p0);
}
/**
 * Hash: 0xBB6E6FEE99D866B2 | ApiSet: undefined
 */
export function networkClanRemoteMembershipsAreInCache() {
    return NetworkClanRemoteMembershipsAreInCache();
}
/**
 * Hash: 0xB124B57F571D8F18 | ApiSet: undefined
 */
export function networkClanPlayerIsActive() {
    return NetworkClanPlayerIsActive();
}
/**
 * Hash: 0x113E6E3E50E286B0 | ApiSet: undefined
 */
export function networkClanReleaseEmblem(p0) {
    NetworkClanReleaseEmblem(p0);
}
/**
 * Hash: 0x6D14CCEE1B40381A | ApiSet: undefined
 */
export function networkClearFoundGamers() {
    NetworkClearFoundGamers();
}
/**
 * Hash: 0x058F43EC59A8631A | ApiSet: undefined
 */
export function networkClearFollowers() {
    NetworkClearFollowers();
}
/**
 * Hash: 0x579CCED0265D4896 | ApiSet: undefined
 */
export function networkClanServiceIsValid() {
    return NetworkClanServiceIsValid();
}
/**
 * Hash: 0xD972DF67326F966E | ApiSet: undefined
 */
export function networkClearClockTimeOverride() {
    NetworkClearClockTimeOverride();
}
/**
 * Hash: 0x439BFDE3CD0610F6 | ApiSet: undefined
 */
export function networkClearFollowInvite() {
    return NetworkClearFollowInvite();
}
/**
 * Hash: 0xFB3272229A82C759 | ApiSet: undefined
 */
export function networkClearTransitionCreatorHandle() {
    NetworkClearTransitionCreatorHandle();
}
/**
 * Hash: 0x1888694923EF4591 | ApiSet: undefined
 */
export function networkClearGroupActivity() {
    NetworkClearGroupActivity();
}
/**
 * Hash: 0x86E0660E4F5C956D | ApiSet: undefined
 */
export function networkClearGetGamerStatus() {
    NetworkClearGetGamerStatus();
}
/**
 * Hash: 0xE036A705F989E049 | ApiSet: undefined
 */
export function networkClearVoiceChannel() {
    NetworkClearVoiceChannel();
}
/**
 * Hash: 0x43F4DBA69710E01E | ApiSet: undefined
 */
export function networkCloseTransitionMatchmaking() {
    NetworkCloseTransitionMatchmaking();
}
/**
 * Hash: 0xF03755696450470C | ApiSet: undefined
 */
export function networkClearVoiceProximityOverride() {
    NetworkClearVoiceProximityOverride();
}
/**
 * Hash: 0xC2B82527CA77053E | ApiSet: undefined
 */
export function networkClearPropertyId() {
    NetworkClearPropertyId();
}
/**
 * Creates a networked synchronized scene.
 * Be sure to actually start the scene with [`NETWORK_START_SYNCHRONISED_SCENE`](#\_0x9A1B3FCDB36C8697) after you're done adding peds or entities to the scene.
 * Hash: 0x7CD6BC4C2BBDD526 | ApiSet: undefined
 */
export function networkCreateSynchronisedScene(position, xRot, yRot, zRot, rotationOrder, holdLastFrame, looped, phaseToStopScene, phaseToStartScene, animSpeed) {
    return NetworkCreateSynchronisedScene(position.x, position.y, position.z, xRot, yRot, zRot, rotationOrder, holdLastFrame, looped, phaseToStopScene, phaseToStartScene, animSpeed);
}
/**
 * Hash: 0xF9B83B77929D8863 | ApiSet: undefined
 */
export function networkDidFindGamersSucceed() {
    return NetworkDidFindGamersSucceed();
}
/**
 * This is what R\* uses to hide players in MP interiors.
 * To manage player visibility with NetworkConcealPlayer, here’s a solid approach:
 * <strong>General Population (players not in any instance):</strong>
 * *   Use NetworkConcealPlayer to hide players who are in any instance. This way, general population players won’t see or interact with instance players.
 * <strong>Instance Players (players in a specific instance):</strong>
 * *   Use NetworkConcealPlayer to hide players who aren’t in the same instance. Instance players can still see and interact with the general population but not with players in other instances.
 * This setup keeps instance players separate from each other while allowing interaction with the general population.
 * Hash: 0xBBDF066252829606 | ApiSet: undefined
 */
export function networkConcealPlayer(player, toggle, bAllowDamagingWhileConcealed) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkConcealPlayer(_player, toggle, bAllowDamagingWhileConcealed);
}
/**
 * Hash: 0x1632BE0AC1E62876 | ApiSet: undefined
 */
export function networkConcealEntity(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkConcealEntity(_entity, toggle);
}
/**
 * Hash: 0x407091CF6037118E | ApiSet: undefined
 */
export function networkDisableProximityMigration(netID) {
    NetworkDisableProximityMigration(netID);
}
/**
 * Hash: 0x9DD368BF06983221 | ApiSet: undefined
 */
export function networkDisableInvincibleFlashing(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkDisableInvincibleFlashing(_player, toggle);
}
/**
 * Hash: 0xC505036A35AFD01B | ApiSet: undefined
 */
export function networkDisableLeaveRemotePedBehind(toggle) {
    NetworkDisableLeaveRemotePedBehind(toggle);
}
/**
 * ```
 * Hardcoded to return -1.
 * ```
 * Hash: 0xD66C9E72B3CC4982 | ApiSet: undefined
 */
export function networkDisplaynamesFromHandlesStart(p1) {
    return NetworkDisplaynamesFromHandlesStart(p1);
}
/**
 * Hash: 0x5AE17C6B0134B7F1 | ApiSet: undefined
 */
export function networkDidGetGamerStatusSucceed() {
    return NetworkDidGetGamerStatusSucceed();
}
/**
 * ```
 * p2 is true 3/4 of the occurrences I found.
 * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
 * ```
 * Hash: 0x3AAD8B2FCA1E289F | ApiSet: undefined
 */
export function networkDoTransitionToFreemode(p1, p2, players, p4) {
    return NetworkDoTransitionToFreemode(p1, p2, players, p4);
}
/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0x71FB0EBCD4915D56 | ApiSet: undefined
 */
export function networkDoTransitionQuickmatch(p0, p1, p2, p3) {
    return NetworkDoTransitionQuickmatch(p0, p1, p2, p3);
}
/**
 * Hash: 0x3E9BB38102A589B0 | ApiSet: undefined
 */
export function networkDoTransitionToGame(p0, maxPlayers) {
    return NetworkDoTransitionToGame(p0, maxPlayers);
}
/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0xA091A5E44F0072E5 | ApiSet: undefined
 */
export function networkDoTransitionQuickmatchAsync(p0, p1, p2, p3) {
    return NetworkDoTransitionQuickmatchAsync(p0, p1, p2, p3);
}
/**
 * Hash: 0x85E5F8B9B898B20A | ApiSet: undefined
 */
export function networkDoesTunableExist(tunableContext, tunableName) {
    return NetworkDoesTunableExist(tunableContext, tunableName);
}
/**
 * Hash: 0x4665F51EFED00034 | ApiSet: undefined
 */
export function networkDoTransitionToNewGame(p0, maxPlayers, p2) {
    return NetworkDoTransitionToNewGame(p0, maxPlayers, p2);
}
/**
 * ```
 * NativeDB Added Parameter 7: Any p6
 * NativeDB Added Parameter 8: Any p7
 * ```
 * Hash: 0x9C4AB58491FDC98A | ApiSet: undefined
 */
export function networkDoTransitionQuickmatchWithGroup(p0, p1, p2, p3, p5) {
    return NetworkDoTransitionQuickmatchWithGroup(p0, p1, p2, p3, p5);
}
/**
 * Hash: 0x9E80A5BA8109F974 | ApiSet: undefined
 */
export function networkDoTransitionToNewFreemode(players, p3, p4, p5) {
    return NetworkDoTransitionToNewFreemode(players, p3, p4, p5);
}
/**
 * Hash: 0xD0AFAFF5A51D72F7 | ApiSet: undefined
 */
export function networkEndTutorialSession() {
    NetworkEndTutorialSession();
}
/**
 * Hash: 0x18A47D074708FD68 | ApiSet: undefined
 */
export function networkDoesEntityExistWithNetworkId(netId) {
    return NetworkDoesEntityExistWithNetworkId(netId);
}
/**
 * Hash: 0x38CE16C96BD11344 | ApiSet: undefined
 */
export function networkDoesNetworkIdExist(netId) {
    return NetworkDoesNetworkIdExist(netId);
}
/**
 * Hash: 0x2A5E0621DD815A9A | ApiSet: undefined
 */
export function networkExplodeHeli(heli, isAudible, isInvisible, netScriptEntityId) {
    const _heli = heli instanceof Entity ? heli.handle() : heli;
    NetworkExplodeHeli(_heli, isAudible, isInvisible, netScriptEntityId);
}
/**
 * Hash: 0xE4E53E1419D81127 | ApiSet: undefined
 */
export function networkDoesTunableExistHash(tunableContext, tunableName) {
    if (typeof tunableContext === 'string')
        tunableContext = this.getHashKey(tunableContext);
    if (typeof tunableName === 'string')
        tunableName = this.getHashKey(tunableName);
    return NetworkDoesTunableExistHash(tunableContext, tunableName);
}
/**
 * Hash: 0xE64A3CA08DFA37A9 | ApiSet: undefined
 */
export function networkEntityAreaDoesExist(areaHandle) {
    return NetworkEntityAreaDoesExist(areaHandle);
}
/**
 * Hash: 0x4A2D4E8BF4265B0F | ApiSet: undefined
 */
export function networkEntityAreaIsOccupied(areaHandle) {
    return NetworkEntityAreaIsOccupied(areaHandle);
}
/**
 * ```
 * In the console script dumps, this is only referenced once.
 * `NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);`
 * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
 * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
 * am_plane_takedown.c
 * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
 * armenian2.c
 * network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
 * fm_horde_controler.c
 * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
 * fm_mission_controller.c, has 6 hits so not going to list them.
 * Side note, setting the first parameter to 0 seems to mute sound or so?
 * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
 * ```
 * Hash: 0x301A42153C9AD707 | ApiSet: undefined
 */
export function networkExplodeVehicle(vehicle, isAudible, isInvisible, p3) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    NetworkExplodeVehicle(_vehicle, isAudible, isInvisible, p3);
}
/**
 * Fade the given entity back in, usually used after the entity has been faded out with [NETWORK_FADE_OUT_ENTITY](#\_0xDE564951F95E09ED)
 * When used on a entity which isn't invisible or faded out then the native will still work, it will just instanly make the ped invisible before fading in.
 * **Additional Parameters**:
 * *   **flash**: If set to true the entity will flash while fading in.
 * Hash: 0x1F4ED342ACEFE62D | ApiSet: undefined
 */
export function networkFadeInEntity(entity, bNetwork) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkFadeInEntity(_entity, bNetwork);
}
/**
 * ```
 * normal - transition like when your coming out of LSC
 * slow - transition like when you walk into a mission
 * ```
 * Hash: 0xDE564951F95E09ED | ApiSet: undefined
 */
export function networkFadeOutEntity(entity, normal, slow) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkFadeOutEntity(_entity, normal, slow);
}
/**
 * Hash: 0x64F62AFB081E260D | ApiSet: undefined
 */
export function networkFinishBroadcastingData() {
    NetworkFinishBroadcastingData();
}
/**
 * Hash: 0xF7B2CFDE5C9F700D | ApiSet: undefined
 */
export function networkFindMatchedGamers(p0, p1, p2, p3) {
    return NetworkFindMatchedGamers(p0, p1, p2, p3);
}
/**
 * Hash: 0xE532D6811B3A4D2A | ApiSet: undefined
 */
export function networkFindGamersInCrew(p0) {
    return NetworkFindGamersInCrew(p0);
}
/**
 * Hash: 0x73E2B500410DA5A2 | ApiSet: undefined
 */
export function networkGetActivityPlayerNum(p0) {
    return NetworkGetActivityPlayerNum(p0);
}
/**
 * Hash: 0xC9B43A33D09CADA7 | ApiSet: undefined
 */
export function networkForceLocalUseOfSyncedSceneCamera(sceneId) {
    NetworkForceLocalUseOfSyncedSceneCamera(sceneId);
}
/**
 * Hash: 0xF2FD55CB574BCC55 | ApiSet: undefined
 */
export function networkGamerHasHeadset() {
    return NetworkGamerHasHeadset();
}
/**
 * Hash: 0xB071E27958EF4CF0 | ApiSet: undefined
 */
export function networkGamertagFromHandlePending() {
    return NetworkGamertagFromHandlePending();
}
/**
 * Hash: 0x9F0C0A981D73FA56 | ApiSet: undefined
 */
export function networkGamertagFromHandleStart() {
    return NetworkGamertagFromHandleStart();
}
/**
 * Hash: 0xFD00798DBA7523DD | ApiSet: undefined
 */
export function networkGamertagFromHandleSucceeded() {
    return NetworkGamertagFromHandleSucceeded();
}
/**
 * ```
 * Same as _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER (0xD414BE129BB81B32)
 * ```
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x0E3A041ED6AC2B45 | ApiSet: undefined
 */
export function networkGetAverageLatencyForPlayer2(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetAverageLatencyForPlayer2(_player);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xD414BE129BB81B32 | ApiSet: undefined
 */
export function networkGetAverageLatencyForPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetAverageLatencyForPlayer(_player);
}
/**
 * Hash: 0x9614B71F8ADB982B | ApiSet: undefined
 */
export function networkGetAgeGroup() {
    return NetworkGetAgeGroup();
}
/**
 * Hash: 0x74881E6BCAE2327C | ApiSet: undefined
 */
export function networkGetCurrentlySelectedGamerHandleFromInviteMenu() {
    return NetworkGetCurrentlySelectedGamerHandleFromInviteMenu();
}
/**
 * ```
 * Return the content modifier id (the tunables context if you want) of a specific content.
 * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
 * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
 * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
 * ```
 * Hash: 0x187382F8A3E0A6C3 | ApiSet: undefined
 */
export function networkGetContentModifierListId(contentHash) {
    if (typeof contentHash === 'string')
        contentHash = this.getHashKey(contentHash);
    return NetworkGetContentModifierListId(contentHash);
}
/**
 * Hash: 0x97A770BEEF227E2B | ApiSet: undefined
 */
export function networkGetBackgroundLoadingRecipients(p0, p1) {
    return NetworkGetBackgroundLoadingRecipients(p0, p1);
}
/**
 * Hash: 0x7A1ADEEF01740A24 | ApiSet: undefined
 */
export function networkGetDestroyerOfNetworkId(netId) {
    return NetworkGetDestroyerOfNetworkId(netId);
}
/**
 * Hash: 0x4CACA84440FA26F6 | ApiSet: undefined
 */
export function networkGetDestroyerOfEntity(p0, p1) {
    return NetworkGetDestroyerOfEntity(p0, p1);
}
/**
 * ```
 * NETWORK_GET_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x350C23949E43686C | ApiSet: undefined
 */
export function networkGetAveragePacketLossForPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetAveragePacketLossForPlayer(_player);
}
/**
 * Get the local entity handle of the given network id
 * Through this native you can get back the entity that you previously converted to netid with [NetworkGetNetworkIdFromEntity](#\_0x9E35DAB6) or with the `ToNet` natives
 * Hash: 0xCE4E5D9B0A4FF560 | ApiSet: undefined
 */
export function networkGetEntityFromNetworkId(netId) {
    return NetworkGetEntityFromNetworkId(netId);
}
/**
 * Hash: 0x58CC181719256197 | ApiSet: undefined
 */
export function networkGetDisplaynamesFromHandles(p0, p1, p2) {
    return NetworkGetDisplaynamesFromHandles(p0, p1, p2);
}
/**
 * Hash: 0xC7827959479DCC78 | ApiSet: undefined
 */
export function networkGetEntityIsNetworked(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkGetEntityIsNetworked(_entity);
}
/**
 * Hash: 0x815F18AD865F057F | ApiSet: undefined
 */
export function networkGetEntityNetScriptId(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkGetEntityNetScriptId(_entity);
}
/**
 * Hash: 0x0991549DE4D64762 | ApiSet: undefined
 */
export function networkGetEntityIsLocal(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkGetEntityIsLocal(_entity);
}
/**
 * Hash: 0x203F1CFD823B27A4 | ApiSet: undefined
 */
export function networkGetFriendCount() {
    return NetworkGetFriendCount();
}
/**
 * Hash: 0x02A8BEC6FD9AF660 | ApiSet: undefined
 */
export function networkGetGamerStatusResult(p1) {
    return NetworkGetGamerStatusResult(p1);
}
/**
 * Hash: 0x4164F227D052E293 | ApiSet: undefined
 */
export function networkGetFriendNameFromIndex(friendIndex) {
    return NetworkGetFriendNameFromIndex(friendIndex);
}
/**
 * ```
 * scriptName examples:
 * "freemode", "AM_CR_SecurityVan", ...
 * Most of the time, these values are used:
 * p1 = -1
 * p2 = 0
 * ```
 * Hash: 0x1D6A14F1F9A736FC | ApiSet: undefined
 */
export function networkGetHostOfScript(scriptName, p1, p2) {
    return NetworkGetHostOfScript(scriptName, p1, p2);
}
/**
 * Hash: 0x42B2DAA6B596F5F8 | ApiSet: undefined
 */
export function networkGetEntityKillerOfPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetEntityKillerOfPlayer(_player);
}
/**
 * Hash: 0x2CC848A861D01493 | ApiSet: undefined
 */
export function networkGetGamerStatusFromQueue() {
    return NetworkGetGamerStatusFromQueue();
}
/**
 * Hash: 0x426141162EBE5CDB | ApiSet: undefined
 */
export function networkGetGamertagFromHandle() {
    return NetworkGetGamertagFromHandle();
}
/**
 * ```
 * Used by NetBlender
 * ```
 * Hash: 0x33DE49EDF4DDE77A | ApiSet: undefined
 */
export function networkGetLastVelocityReceived(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return new Vector3(NetworkGetLastVelocityReceived(_entity));
}
/**
 * Hash: 0x9DCFF2AFB68B3476 | ApiSet: undefined
 */
export function networkGetFoundGamer(p1) {
    return NetworkGetFoundGamer(p1);
}
/**
 * Hash: 0x6D03BFBD643B2A02 | ApiSet: undefined
 */
export function networkGetGlobalMultiplayerClock() {
    return NetworkGetGlobalMultiplayerClock();
}
/**
 * Hash: 0xE11EBBB2A783FE8B | ApiSet: undefined
 */
export function networkGetFriendName(friendIndex) {
    return NetworkGetFriendName(friendIndex);
}
/**
 * Hash: 0x638A3A81733086DB | ApiSet: undefined
 */
export function networkGetInstanceIdOfThisScript() {
    return NetworkGetInstanceIdOfThisScript();
}
/**
 * Hash: 0xC7B4D79B01FA7A5C | ApiSet: undefined
 */
export function networkGetHostOfThisScript() {
    return NetworkGetHostOfThisScript();
}
/**
 * Hash: 0xAFEBB0D5D8F687D2 | ApiSet: undefined
 */
export function networkGetMaxFriends() {
    return NetworkGetMaxFriends();
}
/**
 * ```
 * Seems to always return 0, but it's used in quite a few loops.
 * `for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)`
 * {
 * `if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)`
 * {
 * `var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));`
 * ```
 * Hash: 0xA6C90FBC38E395EE | ApiSet: undefined
 */
export function networkGetMaxNumParticipants() {
    return NetworkGetMaxNumParticipants();
}
/**
 * ```
 * Retrieves the local player's NetworkHandle* and stores it in the given buffer.
 * * Currently unknown struct
 * ```
 * Hash: 0xE86051786B66CD8E | ApiSet: undefined
 */
export function networkGetLocalHandle(bufferSize) {
    return NetworkGetLocalHandle(bufferSize);
}
/**
 * Get the network id of the given entity
 * An entity network id represents a given entity for other clients, it's a handle shared between clients, can be reconverted to a client entity handle.\
 * These (entity network IDs) can and will be reused, the network id will not change.
 * If you need to refer to an entity across machines (clients, or the server), you should use its network id.
 * Read more at [Network and local IDs](https://docs.fivem.net/docs/scripting-manual/networking/ids/)
 * Hash: 0xA11700682F3AD45C | ApiSet: undefined
 */
export function networkGetNetworkIdFromEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkGetNetworkIdFromEntity(_entity);
}
/**
 * Hash: 0x18D0456E86604654 | ApiSet: undefined
 */
export function networkGetNumParticipants() {
    return NetworkGetNumParticipants();
}
/**
 * Returns a local synchronized scene handle of a networked synchronised scene.
 * Hash: 0x02C40BF885C567B6 | ApiSet: undefined
 */
export function networkGetLocalSceneFromNetworkId(netSceneId) {
    return NetworkGetLocalSceneFromNetworkId(netSceneId);
}
/**
 * ```
 * Returns the amount of players connected in the current session. Only works when connected to a session/server.
 * ```
 * Hash: 0xA4A79DD2D9600654 | ApiSet: undefined
 */
export function networkGetNumConnectedPlayers() {
    return NetworkGetNumConnectedPlayers();
}
/**
 * Hash: 0xD38C4A6D047C019D | ApiSet: undefined
 */
export function networkGetNumBodyTrackers() {
    return NetworkGetNumBodyTrackers();
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xFF8FCF9FFC458A1C | ApiSet: undefined
 */
export function networkGetNumUnackedForPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetNumUnackedForPlayer(_player);
}
/**
 * Hash: 0xA1B043EE79A916FB | ApiSet: undefined
 */
export function networkGetNumFoundGamers() {
    return NetworkGetNumFoundGamers();
}
/**
 * Hash: 0xCEFA968912D0F78D | ApiSet: undefined
 */
export function networkGetNumPresenceInvites() {
    return NetworkGetNumPresenceInvites();
}
/**
 * Hash: 0x01ABCE5E7CBDA196 | ApiSet: undefined
 */
export function networkGetPlatformPartyUnk() {
    return NetworkGetPlatformPartyUnk();
}
/**
 * Hash: 0x1B84DF6AF2A46938 | ApiSet: undefined
 */
export function networkGetParticipantIndex(index) {
    return NetworkGetParticipantIndex(index);
}
/**
 * Hash: 0x3658E8CD94FC121A | ApiSet: undefined
 */
export function networkGetNumScriptParticipants(p1, p2) {
    return NetworkGetNumScriptParticipants(p1, p2);
}
/**
 * ```
 * NETWORK_GET_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x52C1EADAF7B10302 | ApiSet: undefined
 */
export function networkGetOldestResendCountForPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetOldestResendCountForPlayer(_player);
}
/**
 * Returns the coordinates of another player.
 * Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
 * Hash: 0x125E6D638B8605D4 | ApiSet: undefined
 */
export function networkGetPlayerCoords(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return new Vector3(NetworkGetPlayerCoords(_player));
}
/**
 * Hash: 0x120364DE2845DAF8 | ApiSet: undefined
 */
export function networkGetPlatformPartyMembers(dataSize) {
    return NetworkGetPlatformPartyMembers(dataSize);
}
/**
 * Hash: 0xCE5F689CF5A0A49D | ApiSet: undefined
 */
export function networkGetPlayerFromGamerHandle() {
    return NetworkGetPlayerFromGamerHandle();
}
/**
 * Hash: 0x24FB80D107371267 | ApiSet: undefined
 */
export function networkGetPlayerIndex(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetPlayerIndex(_player);
}
/**
 * ```
 * Returns the Player associated to a given Ped when in an online session.
 * ```
 * Hash: 0x6C0E2E0125610278 | ApiSet: undefined
 */
export function networkGetPlayerIndexFromPed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return NetworkGetPlayerIndexFromPed(_ped);
}
/**
 * Hash: 0x82377B65E943F72D | ApiSet: undefined
 */
export function networkGetPlayerOwnsWaypoint(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetPlayerOwnsWaypoint(_player);
}
/**
 * Hash: 0x21A1684A25C2867F | ApiSet: undefined
 */
export function networkGetPlayerLoudness(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetPlayerLoudness(_player);
}
/**
 * Hash: 0x24409FC4C55CB22D | ApiSet: undefined
 */
export function networkGetPresenceInviteContentId(p0) {
    return NetworkGetPresenceInviteContentId(p0);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x257ED0FADF750BCF | ApiSet: undefined
 */
export function networkGetPositionHashOfThisScript() {
    return NetworkGetPositionHashOfThisScript();
}
/**
 * Hash: 0x3B39236746714134 | ApiSet: undefined
 */
export function networkGetPlayerTutorialSessionInstance(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetPlayerTutorialSessionInstance(_player);
}
/**
 * Hash: 0x38D5B0FEBB086F75 | ApiSet: undefined
 */
export function networkGetPresenceInviteHandle(p0) {
    return NetworkGetPresenceInviteHandle(p0);
}
/**
 * Hash: 0x3DBF2DF0AEB7D289 | ApiSet: undefined
 */
export function networkGetPresenceInviteFromAdmin(p0) {
    return NetworkGetPresenceInviteFromAdmin(p0);
}
/**
 * Hash: 0xD39B3FFF8FFDD5BF | ApiSet: undefined
 */
export function networkGetPresenceInvitePlaylistLength(p0) {
    return NetworkGetPresenceInvitePlaylistLength(p0);
}
/**
 * Hash: 0xDFF09646E12EC386 | ApiSet: undefined
 */
export function networkGetPresenceInviteId(p0) {
    return NetworkGetPresenceInviteId(p0);
}
/**
 * Hash: 0xC080FF658B2E41DA | ApiSet: undefined
 */
export function networkGetPrimaryClanDataNew() {
    return NetworkGetPrimaryClanDataNew();
}
/**
 * Returns the Name of the inviter of the specific selected Invite.
 * Hash: 0x4962CC4AA2F345B7 | ApiSet: undefined
 */
export function networkGetPresenceInviteInviter(inviteIndex) {
    return NetworkGetPresenceInviteInviter(inviteIndex);
}
/**
 * The Native returns a hash of the session id as string from the specific invite index!
 * Hash: 0x26E1CD96B0903D60 | ApiSet: undefined
 */
export function networkGetPresenceInviteSessionId(inviteIndex) {
    return NetworkGetPresenceInviteSessionId(inviteIndex);
}
/**
 * Hash: 0xCE86D8191B762107 | ApiSet: undefined
 */
export function networkGetPrimaryClanDataStart(p1) {
    return NetworkGetPrimaryClanDataStart(p1);
}
/**
 * Hash: 0x8806CEBFABD3CE05 | ApiSet: undefined
 */
export function networkGetPresenceInviteIsTournament(p0) {
    return NetworkGetPresenceInviteIsTournament(p0);
}
/**
 * Hash: 0x728C4CC7920CD102 | ApiSet: undefined
 */
export function networkGetPresenceInvitePlaylistCurrent(p0) {
    return NetworkGetPresenceInvitePlaylistCurrent(p0);
}
/**
 * Hash: 0x042E4B70B93E6054 | ApiSet: undefined
 */
export function networkGetPrimaryClanDataCancel() {
    NetworkGetPrimaryClanDataCancel();
}
/**
 * Hash: 0xB5074DB804E28CE7 | ApiSet: undefined
 */
export function networkGetPrimaryClanDataPending() {
    return NetworkGetPrimaryClanDataPending();
}
/**
 * Hash: 0x9AA46BADAD0E27ED | ApiSet: undefined
 */
export function networkGetPrimaryClanDataClear() {
    return NetworkGetPrimaryClanDataClear();
}
/**
 * Hash: 0x5B4F04F19376A0BA | ApiSet: undefined
 */
export function networkGetPrimaryClanDataSuccess() {
    return NetworkGetPrimaryClanDataSuccess();
}
/**
 * Hash: 0x599E4FA1F87EB5FF | ApiSet: undefined
 */
export function networkGetRandomInt() {
    return NetworkGetRandomInt();
}
/**
 * Hash: 0x6C34F1208B8923FD | ApiSet: undefined
 */
export function networkGetRespawnResultFlags(p0) {
    return NetworkGetRespawnResultFlags(p0);
}
/**
 * Hash: 0x66B59CFFD78467AF | ApiSet: undefined
 */
export function networkGetRosPrivilege9() {
    return NetworkGetRosPrivilege9();
}
/**
 * ```
 * Same as GET_RANDOM_INT_IN_RANGE
 * ```
 * Hash: 0xE30CF56F1EFA5F43 | ApiSet: undefined
 */
export function networkGetRandomIntRanged(rangeStart, rangeEnd) {
    return NetworkGetRandomIntRanged(rangeStart, rangeEnd);
}
/**
 * Hash: 0x84F0F13120B4E098 | ApiSet: undefined
 */
export function networkGetTalkerProximity() {
    return NetworkGetTalkerProximity();
}
/**
 * ```
 * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
 * ```
 * Hash: 0x371EA43692861CF1 | ApiSet: undefined
 */
export function networkGetRespawnResult(randomInt) {
    const result = NetworkGetRespawnResult(randomInt);
    return [result[0], new Vector3(result[1], result[2], result[3]), result[2]];
}
/**
 * Hash: 0x593570C289A77688 | ApiSet: undefined
 */
export function networkGetRosPrivilege24() {
    return NetworkGetRosPrivilege24();
}
/**
 * Hash: 0x57D158647A6BFABF | ApiSet: undefined
 */
export function networkGetScriptStatus() {
    return NetworkGetScriptStatus();
}
/**
 * ```
 * Returns count.
 * ```
 * Hash: 0x73B000F7FBC55829 | ApiSet: undefined
 */
export function networkGetTransitionMembers(dataCount) {
    return NetworkGetTransitionMembers(dataCount);
}
/**
 * Hash: 0x2910669969E9535E | ApiSet: undefined
 */
export function networkGetThisScriptIsNetworkScript() {
    return NetworkGetThisScriptIsNetworkScript();
}
/**
 * Hash: 0x91B87C55093DE351 | ApiSet: undefined
 */
export function networkGetRosPrivilege25() {
    return NetworkGetRosPrivilege25();
}
/**
 * Hash: 0x5ED0356A0CE3A34F | ApiSet: undefined
 */
export function networkGetTimeoutTime() {
    return NetworkGetTimeoutTime();
}
/**
 * ```
 * Actually returns the version (TUNABLE_VERSION)
 * ```
 * Hash: 0x10BD227A753B0D84 | ApiSet: undefined
 */
export function networkGetTunableCloudCrc() {
    return NetworkGetTunableCloudCrc();
}
/**
 * Hash: 0xD45CB817D7E177D2 | ApiSet: undefined
 */
export function networkHandleFromFriend(friendIndex, bufferSize) {
    return NetworkHandleFromFriend(friendIndex, bufferSize);
}
/**
 * Hash: 0xDFFA5BE8381C3314 | ApiSet: undefined
 */
export function networkGetTargetingMode() {
    return NetworkGetTargetingMode();
}
/**
 * Hash: 0x65042B9774C4435E | ApiSet: undefined
 */
export function networkGetTransitionHost() {
    return NetworkGetTransitionHost();
}
/**
 * ```
 * Returns a handle to networkHandle* from the specified player handle and stores it in a given buffer.
 * * Currently unknown struct
 * Example:
 * `std::vector<UINT64> GetPlayerNetworkHandle(Player player) {`
 * const int size = 13;
 * `uint64_t *buffer = std::make_unique<uint64_t[]>(size).get();`
 * `NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast<int *>(buffer), 13);`
 * for (int i = 0; i < size; i++) {
 * `Log::Msg("networkhandle[%i]: %llx", i, buffer[i]);`
 * }
 * `std::vector<UINT64> result(buffer, buffer + sizeof(buffer));`
 * return result;
 * }
 * ```
 * Hash: 0x388EB2B86C73B6B3 | ApiSet: undefined
 */
export function networkHandleFromPlayer(player, bufferSize) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkHandleFromPlayer(_player, bufferSize);
}
/**
 * Hash: 0xCF61D4B4702EE9EB | ApiSet: undefined
 */
export function networkGetTotalNumPlayers() {
    return NetworkGetTotalNumPlayers();
}
/**
 * ```
 * NETWORK_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x3765C3A3E8192E10 | ApiSet: undefined
 */
export function networkGetUnreliableResendCountForPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkGetUnreliableResendCountForPlayer(_player);
}
/**
 * ```
 * Returns a NetworkHandle* from the specified member ID and stores it in a given buffer.
 * * Currently unknown struct
 * ```
 * Hash: 0xA0FD21BED61E5C4C | ApiSet: undefined
 */
export function networkHandleFromMemberId(memberId, bufferSize) {
    return NetworkHandleFromMemberId(memberId, bufferSize);
}
/**
 * Hash: 0x1353F87E89946207 | ApiSet: undefined
 */
export function networkHasAgeRestrictedProfile() {
    return NetworkHasAgeRestrictedProfile();
}
/**
 * Hash: 0x237D5336A9A54108 | ApiSet: undefined
 */
export function networkHasCachedPlayerHeadBlendData(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkHasCachedPlayerHeadBlendData(_player);
}
/**
 * Hash: 0x01BF60A500E28887 | ApiSet: undefined
 */
export function networkHasControlOfEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkHasControlOfEntity(_entity);
}
/**
 * ```
 * Returns a NetworkHandle* from the specified user ID and stores it in a given buffer.
 * * Currently unknown struct
 * ```
 * Hash: 0xDCD51DD8F87AEC5C | ApiSet: undefined
 */
export function networkHandleFromUserId(userId, bufferSize) {
    return NetworkHandleFromUserId(userId, bufferSize);
}
/**
 * Hash: 0xCB3C68ADB06195DF | ApiSet: undefined
 */
export function networkHasControlOfDoor(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return NetworkHasControlOfDoor(doorHash);
}
/**
 * Hash: 0x5BC9495F0B3B6FA6 | ApiSet: undefined
 */
export function networkHasControlOfPickup(pickup) {
    return NetworkHasControlOfPickup(pickup);
}
/**
 * Hash: 0x4D36070FE0215186 | ApiSet: undefined
 */
export function networkHasControlOfNetworkId(netId) {
    return NetworkHasControlOfNetworkId(netId);
}
/**
 * Hash: 0xB07D3185E11657A5 | ApiSet: undefined
 */
export function networkHasEntityBeenRegisteredWithThisThread(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkHasEntityBeenRegisteredWithThisThread(_entity);
}
/**
 * Hash: 0x76D9B976C4C09FDE | ApiSet: undefined
 */
export function networkHasFollowInvite() {
    return NetworkHasFollowInvite();
}
/**
 * ```
 * Returns true if dinput8.dll is present in the game directory.
 * You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
 * ```
 * Hash: 0x659CF2EF7F550C4F | ApiSet: undefined
 */
export function networkHasGameBeenAltered() {
    return NetworkHasGameBeenAltered();
}
/**
 * Hash: 0x71DC455F5CD1C2B1 | ApiSet: undefined
 */
export function networkHasInviteBeenAcked() {
    return NetworkHasInviteBeenAcked();
}
/**
 * Hash: 0x7284A47B3540E6CF | ApiSet: undefined
 */
export function networkHasInvitedGamerToTransition() {
    return NetworkHasInvitedGamerToTransition();
}
/**
 * Hash: 0x4D86CD31E8976ECE | ApiSet: undefined
 */
export function networkHasInvitedGamer() {
    return NetworkHasInvitedGamer();
}
/**
 * Hash: 0x9AC9CCBFA8C29795 | ApiSet: undefined
 */
export function networkHasPlayerStartedTransition(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkHasPlayerStartedTransition(_player);
}
/**
 * Hash: 0xE870F9F1F7B4F1FA | ApiSet: undefined
 */
export function networkHasHeadset() {
    return NetworkHasHeadset();
}
/**
 * ```
 * index is always 18 in scripts
 * ```
 * Hash: 0xA699957E60D80214 | ApiSet: undefined
 */
export function networkHasRosPrivilege(index) {
    return NetworkHasRosPrivilege(index);
}
/**
 * Hash: 0xC22912B1D85F26B1 | ApiSet: undefined
 */
export function networkHasRosPrivilegeEndDate(privilege) {
    const result = NetworkHasRosPrivilegeEndDate(privilege);
    return [result[0], result[1], new Vector3(result[2], result[3], result[4])];
}
/**
 * Hash: 0xAC8C7B9B88C4A668 | ApiSet: undefined
 */
export function networkHasPendingInvite() {
    return NetworkHasPendingInvite();
}
/**
 * Hash: 0x76BF03FADBF154F5 | ApiSet: undefined
 */
export function networkHasSocialNetworkingSharingPriv() {
    return NetworkHasSocialNetworkingSharingPriv();
}
/**
 * Hash: 0x5D10B3795F3FC886 | ApiSet: undefined
 */
export function networkHasReceivedHostBroadcastData() {
    return NetworkHasReceivedHostBroadcastData();
}
/**
 * Hash: 0x67A5589628E0CFF6 | ApiSet: undefined
 */
export function networkHasSocialClubAccount() {
    return NetworkHasSocialClubAccount();
}
/**
 * Hash: 0x3F9990BF5F22759C | ApiSet: undefined
 */
export function networkHasTransitionInviteBeenAcked() {
    return NetworkHasTransitionInviteBeenAcked();
}
/**
 * Hash: 0x58575AC3CF2CA8EC | ApiSet: undefined
 */
export function networkHashFromGamerHandle() {
    return NetworkHashFromGamerHandle();
}
/**
 * Hash: 0xAEEF48CDF5B6CE7C | ApiSet: undefined
 */
export function networkHaveCommunicationPrivileges(p0, player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkHaveCommunicationPrivileges(p0, _player);
}
/**
 * ```
 * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
 * ```
 * Hash: 0x85443FF4C328F53B | ApiSet: undefined
 */
export function networkHasValidRosCredentials() {
    return NetworkHasValidRosCredentials();
}
/**
 * Hash: 0x5EA784D197556507 | ApiSet: undefined
 */
export function networkHaveOnlinePrivilege2() {
    return NetworkHaveOnlinePrivilege2();
}
/**
 * Hash: 0xBC1D768F2F5D6C05 | ApiSet: undefined
 */
export function networkHashFromPlayerHandle(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkHashFromPlayerHandle(_player);
}
/**
 * Hash: 0xCCA4318E1AB03F1F | ApiSet: undefined
 */
export function networkHasViewGamerUserContentResult() {
    return NetworkHasViewGamerUserContentResult();
}
/**
 * Hash: 0x422D396F80A96547 | ApiSet: undefined
 */
export function networkHaveRosLeaderboardWritePriv() {
    return NetworkHaveRosLeaderboardWritePriv();
}
/**
 * Hash: 0xA0AD7E2AF5349F61 | ApiSet: undefined
 */
export function networkHaveRosCreateTicketPriv() {
    return NetworkHaveRosCreateTicketPriv();
}
/**
 * Hash: 0x8020A73847E0CA7D | ApiSet: undefined
 */
export function networkHaveRosBannedPriv() {
    return NetworkHaveRosBannedPriv();
}
/**
 * Hash: 0x5F91D5D0B36AA310 | ApiSet: undefined
 */
export function networkHaveRosMultiplayerPriv() {
    return NetworkHaveRosMultiplayerPriv();
}
/**
 * Hash: 0x25CB5A9F37BFD063 | ApiSet: undefined
 */
export function networkHaveOnlinePrivileges() {
    return NetworkHaveOnlinePrivileges();
}
/**
 * From what I can tell it looks like it does the following:
 * Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
 * You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
 * Hash: 0xA60BB5CE242BB254 | ApiSet: undefined
 */
export function networkHostTransition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    return NetworkHostTransition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * Hash: 0x72D918C99BCACC54 | ApiSet: undefined
 */
export function networkHaveUserContentPrivileges(p0) {
    return NetworkHaveUserContentPrivileges(p0);
}
/**
 * Hash: 0x12103B9E0C9F92FB | ApiSet: undefined
 */
export function networkIsActivitySpectator() {
    return NetworkIsActivitySpectator();
}
/**
 * Hash: 0x606E4D3E3CCCF3EB | ApiSet: undefined
 */
export function networkHaveRosSocialClubPriv() {
    return NetworkHaveRosSocialClubPriv();
}
/**
 * Hash: 0x05095437424397FA | ApiSet: undefined
 */
export function networkIsActivitySession() {
    return NetworkIsActivitySession();
}
/**
 * Hash: 0x6EA101606F6E4D81 | ApiSet: undefined
 */
export function networkIsAddingFriend() {
    return NetworkIsAddingFriend();
}
/**
 * Hash: 0x9D80CD1D0E6327DE | ApiSet: undefined
 */
export function networkInviteGamers(p1) {
    return NetworkInviteGamers(p1);
}
/**
 * Hash: 0x4A595C32F77DFF76 | ApiSet: undefined
 */
export function networkInviteGamersToTransition(p1) {
    return NetworkInviteGamersToTransition(p1);
}
/**
 * Hash: 0x2763BBAA72A7BCB9 | ApiSet: undefined
 */
export function networkIsActivitySpectatorFromHandle() {
    return NetworkIsActivitySpectatorFromHandle();
}
/**
 * Hash: 0xEFFB25453D8600F9 | ApiSet: undefined
 */
export function networkIsCableConnected() {
    return NetworkIsCableConnected();
}
/**
 * ```
 * This would be nice to see if someone is in party chat, but 2 sad notes.
 * 1) It only becomes true if said person is speaking in that party at the time.
 * 2) It will never, become true unless you are in that party with said person.
 * ```
 * Hash: 0x8DE9945BCC9AEC52 | ApiSet: undefined
 */
export function networkIsChattingInPlatformParty() {
    return NetworkIsChattingInPlatformParty();
}
/**
 * Hash: 0xD7C95D322FF57522 | ApiSet: undefined
 */
export function networkIsClockTimeOverridden() {
    return NetworkIsClockTimeOverridden();
}
/**
 * ```
 * NETWORK_IS_*
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x16D3D49902F697BB | ApiSet: undefined
 */
export function networkIsConnectionEndpointRelayServer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsConnectionEndpointRelayServer(_player);
}
/**
 * Hash: 0x9A4CF4F48AD77302 | ApiSet: undefined
 */
export function networkIsCloudAvailable() {
    return NetworkIsCloudAvailable();
}
/**
 * Hash: 0x8132C0EB8B2B3293 | ApiSet: undefined
 */
export function networkIsCloudBackgroundScriptRequestPending() {
    return NetworkIsCloudBackgroundScriptRequestPending();
}
/**
 * Hash: 0x87EB7A3FFCB314DB | ApiSet: undefined
 */
export function networkIsFriendHandleOnline() {
    return NetworkIsFriendHandleOnline();
}
/**
 * Hash: 0xC01E93FAC20C3346 | ApiSet: undefined
 */
export function networkIsDoorNetworked(doorHash) {
    if (typeof doorHash === 'string')
        doorHash = this.getHashKey(doorHash);
    return NetworkIsDoorNetworked(doorHash);
}
/**
 * Hash: 0x425A44533437B64D | ApiSet: undefined
 */
export function networkIsFriendOnline(name) {
    return NetworkIsFriendOnline(name);
}
/**
 * Note: This only works for vehicles, which appears to be a bug (since the setter *does* work for every entity type and the name is 99% correct).
 * Hash: 0x71302EC70689052A | ApiSet: undefined
 */
export function networkIsEntityConcealed(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkIsEntityConcealed(_entity);
}
/**
 * Hash: 0x422F32CC7E56ABAD | ApiSet: undefined
 */
export function networkIsEntityFading(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkIsEntityFading(_entity);
}
/**
 * Hash: 0x1A24A179F9B31654 | ApiSet: undefined
 */
export function networkIsFriend() {
    return NetworkIsFriend();
}
/**
 * Hash: 0xDDDF64C91BFCF0AA | ApiSet: undefined
 */
export function networkIsFindingGamers() {
    return NetworkIsFindingGamers();
}
/**
 * Hash: 0x57005C18827F3A28 | ApiSet: undefined
 */
export function networkIsFriendInMultiplayer(friendName) {
    return NetworkIsFriendInMultiplayer(friendName);
}
/**
 * Hash: 0xE944C4F5AF1B5883 | ApiSet: undefined
 */
export function networkIsGamerBlockedByMe() {
    return NetworkIsGamerBlockedByMe();
}
/**
 * Hash: 0x0F10B05DDF8D16E9 | ApiSet: undefined
 */
export function networkIsGamerInMySession() {
    return NetworkIsGamerInMySession();
}
/**
 * Hash: 0xBAD8F2A42B844821 | ApiSet: undefined
 */
export function networkIsFriendIndexOnline(friendIndex) {
    return NetworkIsFriendIndexOnline(friendIndex);
}
/**
 * ```
 * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
 * ```
 * Hash: 0x2EA9A3BEDF3F17B8 | ApiSet: undefined
 */
export function networkIsFriendInSameTitle(friendName) {
    return NetworkIsFriendInSameTitle(friendName);
}
/**
 * Hash: 0xCE60DE011B6C7978 | ApiSet: undefined
 */
export function networkIsGamerMutedByMe() {
    return NetworkIsGamerMutedByMe();
}
/**
 * Hash: 0x10FAB35428CCC9D7 | ApiSet: undefined
 */
export function networkIsGameInProgress() {
    return NetworkIsGameInProgress();
}
/**
 * Hash: 0x71C33B22606CD88A | ApiSet: undefined
 */
export function networkIsGamerTalking() {
    return NetworkIsGamerTalking();
}
/**
 * Hash: 0x94A8394D150B013A | ApiSet: undefined
 */
export function networkIsGettingGamerStatus() {
    return NetworkIsGettingGamerStatus();
}
/**
 * Hash: 0x6F79B93B0A8E4133 | ApiSet: undefined
 */
export function networkIsHandleValid(bufferSize) {
    return NetworkIsHandleValid(bufferSize);
}
/**
 * ```
 * If you are host, returns true else returns false.
 * ```
 * Hash: 0x8DB296B814EDDA07 | ApiSet: undefined
 */
export function networkIsHost() {
    return NetworkIsHost();
}
/**
 * Hash: 0x83CD99A1E6061AB5 | ApiSet: undefined
 */
export function networkIsHostOfThisScript() {
    return NetworkIsHostOfThisScript();
}
/**
 * ```
 * Hardcoded to return false.
 * ```
 * Hash: 0x2FC5650B0271CB57 | ApiSet: undefined
 */
export function networkIsInPlatformParty() {
    return NetworkIsInPlatformParty();
}
/**
 * Hash: 0x6CC27C9FA2040220 | ApiSet: undefined
 */
export function networkIsInMpCutscene() {
    return NetworkIsInMpCutscene();
}
/**
 * ```
 * Hardcoded to return false.
 * ```
 * Hash: 0xFD8B834A8BA05048 | ApiSet: undefined
 */
export function networkIsInPlatformPartyChat() {
    return NetworkIsInPlatformPartyChat();
}
/**
 * Hash: 0xCA97246103B63917 | ApiSet: undefined
 */
export function networkIsInSession() {
    return NetworkIsInSession();
}
/**
 * Hash: 0x68049AEFF83D8F0A | ApiSet: undefined
 */
export function networkIsInTransition() {
    return NetworkIsInTransition();
}
/**
 * ```
 * Note according to IDA TU27 X360(Console),
 * This native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.
 * Side note: This location just stops where it's at once jumped to.
 * Screenshot for side note,
 * h t t p ://i.imgur.com/m2ci1mF.png
 * h t t p://i.imgur.com/Z0Wx2B6.png
 * ```
 * Hash: 0x966C2BC2A7FE3F30 | ApiSet: undefined
 */
export function networkIsInParty() {
    return NetworkIsInParty();
}
/**
 * Checks if the networkHandle is the same as any other user that is signed in on the local machine.
 * For example, if your console has two or more users signed in (on different controllers), the profile that is not controlling the game would be "inactive".
 * Hash: 0x7E58745504313A2E | ApiSet: undefined
 */
export function networkIsInactiveProfile() {
    return NetworkIsInactiveProfile();
}
/**
 * Hash: 0xADA24309FE08DACF | ApiSet: undefined
 */
export function networkIsInTutorialSession() {
    return NetworkIsInTutorialSession();
}
/**
 * Hash: 0x8A8694B48715B000 | ApiSet: undefined
 */
export function networkIsLocalPlayerInvincible() {
    return NetworkIsLocalPlayerInvincible();
}
/**
 * Hash: 0x048746E388762E11 | ApiSet: undefined
 */
export function networkIsInSpectatorMode() {
    return NetworkIsInSpectatorMode();
}
/**
 * Hash: 0x9747292807126EDA | ApiSet: undefined
 */
export function networkIsMultiplayerDisabled() {
    return NetworkIsMultiplayerDisabled();
}
/**
 * Hash: 0x74698374C45701D2 | ApiSet: undefined
 */
export function networkIsOfflineInvitePending() {
    return NetworkIsOfflineInvitePending();
}
/**
 * Hash: 0xC0D2AF00BCC234CA | ApiSet: undefined
 */
export function networkIsLocalTalking() {
    return NetworkIsLocalTalking();
}
/**
 * ```
 * Note according to IDA TU27 X360(Console),
 * This native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.
 * Side note: This location just stops where it's at once jumped to.
 * Screenshot for side note,
 * h t t p ://i.imgur.com/m2ci1mF.png
 * h t t p://i.imgur.com/Z0Wx2B6.png
 * ```
 * Hash: 0x676ED266AADD31E0 | ApiSet: undefined
 */
export function networkIsPartyMember() {
    return NetworkIsPartyMember();
}
/**
 * Hash: 0x6FF8FF40B6357D45 | ApiSet: undefined
 */
export function networkIsParticipantActive(p0) {
    return NetworkIsParticipantActive(p0);
}
/**
 * Returns true if the specified network id is controlled by someone else.
 * Hash: 0x7242F8B741CE1086 | ApiSet: undefined
 */
export function networkIsNetworkIdAClone(netId) {
    return NetworkIsNetworkIdAClone(netId);
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0x0BE73DA6984A6E33 | ApiSet: undefined
 */
export function networkIsPendingFriend(p0) {
    return NetworkIsPendingFriend(p0);
}
/**
 * Hash: 0x3CA58F6CB7CBD784 | ApiSet: undefined
 */
export function networkIsPlayerAParticipant(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerAParticipant(_player);
}
/**
 * Hash: 0x57AF1F8E27483721 | ApiSet: undefined
 */
export function networkIsPlayerBlockedByMe(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerBlockedByMe(_player);
}
/**
 * Hash: 0xB8DFD30D6973E135 | ApiSet: undefined
 */
export function networkIsPlayerActive(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerActive(_player);
}
/**
 * Hash: 0x8C71288AE68EDE39 | ApiSet: undefined
 */
export function networkIsPlayerMutedByMe(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerMutedByMe(_player);
}
/**
 * Hash: 0x93DC1BE4E1ABE9D1 | ApiSet: undefined
 */
export function networkIsPlayerConnected(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerConnected(_player);
}
/**
 * Hash: 0x1AD5B71586B94820 | ApiSet: undefined
 */
export function networkIsPlayerAParticipantOnScript(player1, script, player2) {
    const _player1 = player1 instanceof Entity ? player1.remoteId() : player1;
    const _player2 = player2 instanceof Entity ? player2.remoteId() : player2;
    return NetworkIsPlayerAParticipantOnScript(_player1, script, _player2);
}
/**
 * Hash: 0x63F9EE203C3619F2 | ApiSet: undefined
 */
export function networkIsPlayerInMpCutscene(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerInMpCutscene(_player);
}
/**
 * ```
 * This checks if player is playing on gta online or not.
 * Please add an if and block your mod if this is "true".
 * ```
 * Hash: 0x9DE624D2FC4B603F | ApiSet: undefined
 */
export function networkIsSessionStarted() {
    return NetworkIsSessionStarted();
}
/**
 * Hash: 0x631DC5DFF4B110E3 | ApiSet: undefined
 */
export function networkIsPlayerFading(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerFading(_player);
}
/**
 * ```
 * returns true if someone is screaming or talking in a microphone
 * ```
 * Hash: 0x031E11F3D447647E | ApiSet: undefined
 */
export function networkIsPlayerTalking(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerTalking(_player);
}
/**
 * Hash: 0x919B3C98ED8292F9 | ApiSet: undefined
 */
export function networkIsPlayerConcealed(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerConcealed(_player);
}
/**
 * Hash: 0x8D11E61A4ABF49CC | ApiSet: undefined
 */
export function networkIsPsnAvailable() {
    return NetworkIsPsnAvailable();
}
/**
 * Hash: 0xD83C2B94E7508980 | ApiSet: undefined
 */
export function networkIsSessionActive() {
    return NetworkIsSessionActive();
}
/**
 * ```
 * NETWORK_ARE_*
 * ```
 * Hash: 0x9DE986FC9A87C474 | ApiSet: undefined
 */
export function networkIsPlayerEqualToIndex(player, index) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsPlayerEqualToIndex(_player, index);
}
/**
 * ```
 * Returns whether the player is signed into Social Club.
 * ```
 * Hash: 0x054354A99211EB96 | ApiSet: undefined
 */
export function networkIsSignedIn() {
    return NetworkIsSignedIn();
}
/**
 * Hash: 0x9D40DF90FAD26098 | ApiSet: undefined
 */
export function networkIsScriptActive(scriptName, player, p2, p3) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkIsScriptActive(scriptName, _player, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2245
 * ```
 * Hash: 0xDA7DE67F5FE5EE13 | ApiSet: undefined
 */
export function networkIsScriptActiveByHash(scriptHash, p1, p2, p3) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    return NetworkIsScriptActiveByHash(scriptHash, p1, p2, p3);
}
/**
 * Hash: 0xF4435D66A8E2905E | ApiSet: undefined
 */
export function networkIsSessionBusy() {
    return NetworkIsSessionBusy();
}
/**
 * ```
 * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
 * ```
 * Hash: 0x5FCF4D7069B09026 | ApiSet: undefined
 */
export function networkIsTextChatActive() {
    return NetworkIsTextChatActive();
}
/**
 * ```
 * Returns whether the game is not in offline mode.
 * seemed not to work for some ppl
 * ```
 * Hash: 0x1077788E268557C2 | ApiSet: undefined
 */
export function networkIsSignedOnline() {
    return NetworkIsSignedOnline();
}
/**
 * Hash: 0xD1110739EEADB592 | ApiSet: undefined
 */
export function networkIsThisScriptMarked(p0, p1, p2) {
    return NetworkIsThisScriptMarked(p0, p1, p2);
}
/**
 * Hash: 0x0DBD5D7E3C5BEC3B | ApiSet: undefined
 */
export function networkIsTransitionClosedCrew() {
    return NetworkIsTransitionClosedCrew();
}
/**
 * Hash: 0x520F3282A53D26B7 | ApiSet: undefined
 */
export function networkIsTransitionBusy() {
    return NetworkIsTransitionBusy();
}
/**
 * Hash: 0x6512765E3BE78C50 | ApiSet: undefined
 */
export function networkIsTransitionClosedFriends() {
    return NetworkIsTransitionClosedFriends();
}
/**
 * Hash: 0x5DC577201723960A | ApiSet: undefined
 */
export function networkIsTransitionSolo() {
    return NetworkIsTransitionSolo();
}
/**
 * Hash: 0x0B824797C9BF2159 | ApiSet: undefined
 */
export function networkIsTransitionHost() {
    return NetworkIsTransitionHost();
}
/**
 * Hash: 0x6B5C83BA3EFE6A10 | ApiSet: undefined
 */
export function networkIsTransitionHostFromHandle() {
    return NetworkIsTransitionHostFromHandle();
}
/**
 * Hash: 0x53FA83401D9C07FE | ApiSet: undefined
 */
export function networkIsTransitionStarted() {
    return NetworkIsTransitionStarted();
}
/**
 * Hash: 0x5A6AA44FF8E931E6 | ApiSet: undefined
 */
export function networkIsTransitionPrivate() {
    return NetworkIsTransitionPrivate();
}
/**
 * Hash: 0x292564C735375EDF | ApiSet: undefined
 */
export function networkIsTransitionMatchmaking() {
    return NetworkIsTransitionMatchmaking();
}
/**
 * Hash: 0x37A4494483B9F5C9 | ApiSet: undefined
 */
export function networkIsTransitionOpenToMatchmaking() {
    return NetworkIsTransitionOpenToMatchmaking();
}
/**
 * Hash: 0xFFE1E5B792D92B34 | ApiSet: undefined
 */
export function networkJoinPreviouslyFailedTransition() {
    return NetworkJoinPreviouslyFailedTransition();
}
/**
 * Hash: 0x9D7696D8F4FA6CB7 | ApiSet: undefined
 */
export function networkIsTransitionToGame() {
    return NetworkIsTransitionToGame();
}
/**
 * Hash: 0xD0A484CB2F829FBE | ApiSet: undefined
 */
export function networkIsTransitionVisibilityLocked() {
    return NetworkIsTransitionVisibilityLocked();
}
/**
 * Hash: 0x0467C11ED88B7D28 | ApiSet: undefined
 */
export function networkIsTunableCloudRequestPending() {
    return NetworkIsTunableCloudRequestPending();
}
/**
 * Hash: 0x35F0B98A8387274D | ApiSet: undefined
 */
export function networkIsTutorialSessionChangePending() {
    return NetworkIsTutorialSessionChangePending();
}
/**
 * Hash: 0x2DCF46CB1A4F0884 | ApiSet: undefined
 */
export function networkLaunchTransition() {
    return NetworkLaunchTransition();
}
/**
 * Hash: 0xA06509A691D12BE4 | ApiSet: undefined
 */
export function networkJoinGroupActivity() {
    return NetworkJoinGroupActivity();
}
/**
 * Hash: 0x59DF79317F85A7E0 | ApiSet: undefined
 */
export function networkJoinPreviouslyFailedSession() {
    return NetworkJoinPreviouslyFailedSession();
}
/**
 * Hash: 0x5728BB6D63E3FF1D | ApiSet: undefined
 */
export function networkMarkTransitionGamerAsFullyJoined() {
    return NetworkMarkTransitionGamerAsFullyJoined();
}
/**
 * Hash: 0xD23A1A815D21DB19 | ApiSet: undefined
 */
export function networkLeaveTransition() {
    return NetworkLeaveTransition();
}
/**
 * ```
 * int handle[76];
 * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
 * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
 * NETWORK_JOIN_TRANSITION(uVar2);
 * nothing doin.
 * ```
 * Hash: 0x9D060B08CD63321A | ApiSet: undefined
 */
export function networkJoinTransition(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkJoinTransition(_player);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x42BF1D2E723B6D7E | ApiSet: undefined
 */
export function networkOverrideClockMillisecondsPerGameMinute(ms) {
    NetworkOverrideClockMillisecondsPerGameMinute(ms);
}
/**
 * Hash: 0xC82630132081BB6F | ApiSet: undefined
 */
export function networkMemberIdFromGamerHandle() {
    return NetworkMemberIdFromGamerHandle();
}
/**
 * ```
 * This is used alongside the native,
 * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
 * ```
 * Hash: 0x97DD4C5944CC2E6A | ApiSet: undefined
 */
export function networkOverrideSendRestrictions(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkOverrideSendRestrictions(_player, toggle);
}
/**
 * Overrides the game clock time for the local player, allowing for manipulation of the in-game time. This native is effective in both multiplayer and singleplayer modes.
 * **Note:** Passing wrong data (e.g. hours above 23) will cause the game to crash.
 * Hash: 0xE679E3E06E363892 | ApiSet: undefined
 */
export function networkOverrideClockTime(hours, minutes, seconds) {
    NetworkOverrideClockTime(hours, minutes, seconds);
}
/**
 * Hash: 0x2B3A8F7CA3A38FDE | ApiSet: undefined
 */
export function networkOpenTransitionMatchmaking() {
    NetworkOpenTransitionMatchmaking();
}
/**
 * ```
 * Could possibly bypass being muted or automatically muted
 * ```
 * Hash: 0x3039AE5AD2C9C0C4 | ApiSet: undefined
 */
export function networkOverrideChatRestrictions(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkOverrideChatRestrictions(_player, toggle);
}
/**
 * Hash: 0x6F697A66CE78674E | ApiSet: undefined
 */
export function networkOverrideTeamRestrictions(team, toggle) {
    NetworkOverrideTeamRestrictions(team, toggle);
}
/**
 * ```
 * R* uses this to hear all player when spectating.
 * It allows you to hear other online players when their chat is on none, crew and or friends
 * ```
 * Hash: 0xDDF73E2B1FEC5AB4 | ApiSet: undefined
 */
export function networkOverrideReceiveRestrictions(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkOverrideReceiveRestrictions(_player, toggle);
}
/**
 * ```
 * p0 is always false in scripts.
 * ```
 * Hash: 0x0FF2862B61A58AF9 | ApiSet: undefined
 */
export function networkOverrideReceiveRestrictionsAll(toggle) {
    NetworkOverrideReceiveRestrictionsAll(toggle);
}
/**
 * Hash: 0xA7E30DE9272B6D49 | ApiSet: undefined
 */
export function networkOverrideCoordsAndHeading(entity, position, heading) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkOverrideCoordsAndHeading(_entity, position.x, position.y, position.z, heading);
}
/**
 * Hash: 0xAF66059A131AA269 | ApiSet: undefined
 */
export function networkOverrideTransitionChat(p0) {
    NetworkOverrideTransitionChat(p0);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xF0BC9BCD24A511D5 | ApiSet: undefined
 */
export function networkPedForceGameStateUpdate(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    NetworkPedForceGameStateUpdate(_ped);
}
/**
 * Hash: 0x57B192B4D4AD23D5 | ApiSet: undefined
 */
export function networkOverrideSendRestrictionsAll(toggle) {
    NetworkOverrideSendRestrictionsAll(toggle);
}
/**
 * Hash: 0x19D8DA0E5A68045A | ApiSet: undefined
 */
export function networkPlayerIsBadsport() {
    return NetworkPlayerIsBadsport();
}
/**
 * Hash: 0x172F75B6EE2233BA | ApiSet: undefined
 */
export function networkPlayerGetCheaterReason() {
    return NetworkPlayerGetCheaterReason();
}
/**
 * ```
 * Returns the name of a given player. Returns "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
 * ```
 * Hash: 0x7718D2E2060837D2 | ApiSet: undefined
 */
export function networkPlayerGetName(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkPlayerGetName(_player);
}
/**
 * Hash: 0x3FB99A8B08D18FD6 | ApiSet: undefined
 */
export function networkPlayerHasHeadset(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkPlayerHasHeadset(_player);
}
/**
 * Hash: 0x655B91F1495A9090 | ApiSet: undefined
 */
export function networkPlayerIsCheater() {
    return NetworkPlayerIsCheater();
}
/**
 * ```
 * Takes a 24 char buffer. Returns the buffer or "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
 * ```
 * Hash: 0x4927FC39CD0869A0 | ApiSet: undefined
 */
export function networkPlayerGetUserid(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkPlayerGetUserid(_player);
}
/**
 * Hash: 0x85A0EF54A500882C | ApiSet: undefined
 */
export function networkQueueGamerForStatus() {
    return NetworkQueueGamerForStatus();
}
/**
 * Hash: 0x06FAACD625D80CAA | ApiSet: undefined
 */
export function networkRegisterEntityAsNetworked(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkRegisterEntityAsNetworked(_entity);
}
/**
 * Hash: 0x3E9B2F01C50DF595 | ApiSet: undefined
 */
export function networkRegisterHostBroadcastVariables(numVars) {
    return NetworkRegisterHostBroadcastVariables(numVars);
}
/**
 * Hash: 0x565E430DB3B05BEC | ApiSet: undefined
 */
export function networkPlayerIndexIsCheater(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkPlayerIndexIsCheater(_player);
}
/**
 * ```
 * Checks if a specific value (BYTE) in CPlayerInfo is nonzero.
 * Returns always false in Singleplayer.
 * No longer used for dev checks since first mods were released on PS3 & 360.
 * R* now checks with the is_dlc_present native for the dlc hash 2532323046,
 * if that is present it will unlock dev stuff.
 * ```
 * Hash: 0x544ABDDA3B409B6D | ApiSet: undefined
 */
export function networkPlayerIsRockstarDev(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkPlayerIsRockstarDev(_player);
}
/**
 * Forces the "Are you sure you want to quit Grand Theft Auto V?" warning message (Same as when you Alt+F4) to show.
 * Doesn't work in singleplayer.
 * Hash: 0x45A83257ED02D9BC | ApiSet: undefined
 */
export function networkQuitMpToDesktop() {
    NetworkQuitMpToDesktop();
}
/**
 * Hash: 0x726E0375C7A26368 | ApiSet: undefined
 */
export function networkRemoveAllTransitionInvite() {
    NetworkRemoveAllTransitionInvite();
}
/**
 * Hash: 0x1950DAE9848A4739 | ApiSet: undefined
 */
export function networkRegisterTunableFloatHash(contextHash, nameHash) {
    if (typeof contextHash === 'string')
        contextHash = this.getHashKey(contextHash);
    if (typeof nameHash === 'string')
        nameHash = this.getHashKey(nameHash);
    return NetworkRegisterTunableFloatHash(contextHash, nameHash);
}
/**
 * Hash: 0x7524B431B2E6F7EE | ApiSet: undefined
 */
export function networkRemoveTransitionInvite() {
    return NetworkRemoveTransitionInvite();
}
/**
 * Hash: 0x697F508861875B42 | ApiSet: undefined
 */
export function networkRegisterTunableBoolHash(contextHash, nameHash) {
    if (typeof contextHash === 'string')
        contextHash = this.getHashKey(contextHash);
    if (typeof nameHash === 'string')
        nameHash = this.getHashKey(nameHash);
    return NetworkRegisterTunableBoolHash(contextHash, nameHash);
}
/**
 * Hash: 0x3C891A251567DFCE | ApiSet: undefined
 */
export function networkQueryRespawnResults() {
    return NetworkQueryRespawnResults();
}
/**
 * Hash: 0xF0210268DB0974B1 | ApiSet: undefined
 */
export function networkRemovePresenceInvite(p0) {
    return NetworkRemovePresenceInvite(p0);
}
/**
 * Hash: 0x42FB3B532D526E6C | ApiSet: undefined
 */
export function networkRequestCloudTunables() {
    NetworkRequestCloudTunables();
}
/**
 * Hash: 0x924426BFFD82E915 | ApiSet: undefined
 */
export function networkRequestCloudBackgroundScripts() {
    return NetworkRequestCloudBackgroundScripts();
}
/**
 * Hash: 0x93CF869BAA0C4874 | ApiSet: undefined
 */
export function networkRemoveEntityArea(p0) {
    return NetworkRemoveEntityArea(p0);
}
/**
 * Hash: 0x3364AA97340CA215 | ApiSet: undefined
 */
export function networkRegisterPlayerBroadcastVariables(numVars) {
    return NetworkRegisterPlayerBroadcastVariables(numVars);
}
/**
 * Hash: 0xB69317BF5E782347 | ApiSet: undefined
 */
export function networkRequestControlOfEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return NetworkRequestControlOfEntity(_entity);
}
/**
 * Hash: 0x5626D9D6810730D5 | ApiSet: undefined
 */
export function networkReportMyself() {
    NetworkReportMyself();
}
/**
 * Hash: 0x870DDFD5A4A796E4 | ApiSet: undefined
 */
export function networkRequestControlOfDoor(doorID) {
    return NetworkRequestControlOfDoor(doorID);
}
/**
 * Hash: 0x3A8B55FDA4C8DDEF | ApiSet: undefined
 */
export function networkRegisterTunableIntHash(contextHash, nameHash) {
    if (typeof contextHash === 'string')
        contextHash = this.getHashKey(contextHash);
    if (typeof nameHash === 'string')
        nameHash = this.getHashKey(nameHash);
    return NetworkRegisterTunableIntHash(contextHash, nameHash);
}
/**
 * Hash: 0xA670B3662FAFFBD0 | ApiSet: undefined
 */
export function networkRequestControlOfNetworkId(netId) {
    return NetworkRequestControlOfNetworkId(netId);
}
/**
 * ```
 * p4 and p5 are always 0 in scripts
 * ```
 * Hash: 0x9769F811D1785B03 | ApiSet: undefined
 */
export function networkRespawnCoords(player, position, p4, p5) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkRespawnCoords(_player, position.x, position.y, position.z, p4, p5);
}
/**
 * Hash: 0x72433699B4E6DD64 | ApiSet: undefined
 */
export function networkResetBodyTracker() {
    NetworkResetBodyTracker();
}
/**
 * Hash: 0xC3C7A6AFDB244624 | ApiSet: undefined
 */
export function networkSendInviteViaPresence(p2, p3) {
    return NetworkSendInviteViaPresence(p2, p3);
}
/**
 * Revives our local player who was previously dead.
 * **Note:** Call this once you resurrect the player (this does not need to be called every frame).
 * ```cpp
 * enum ePlayerSpawnLocation {
 * // system will decide
 * SPAWN_LOCATION_AUTOMATIC = 0,
 * SPAWN_LOCATION_NEAR_DEATH = 1,
 * SPAWN_LOCATION_NEAR_TEAM_MATES = 2,
 * // script defined area
 * SPAWN_LOCATION_MISSION_AREA = 3,
 * SPAWN_LOCATION_NEAR_OTHER_PLAYERS = 4,
 * SPAWN_LOCATION_NEAR_CURRENT_POSITION = 5,
 * SPAWN_LOCATION_AT_CURRENT_POSITION = 6,
 * SPAWN_LOCATION_NET_TEST_BED = 7,
 * SPAWN_LOCATION_CUSTOM_SPAWN_POINTS = 8,
 * SPAWN_LOCATION_OUTSIDE_SIMEON_GARAGE = 9,
 * SPAWN_LOCATION_NEAR_SPECIFIC_COORDS = 10,
 * SPAWN_LOCATION_AT_SPECIFIC_COORDS = 11,
 * SPAWN_LOCATION_AT_AIRPORT_ARRIVALS = 12,
 * SPAWN_LOCATION_AT_SPECIFIC_COORDS_IF_POSSIBLE = 13,
 * SPAWN_LOCATION_IN_SPECIFIC_ANGLED_AREA = 14,
 * SPAWN_LOCATION_NEAREST_RESPAWN_POINT = 15,
 * SPAWN_LOCATION_AT_SPECIFIC_COORDS_RACE_CORONA = 16,
 * SPAWN_LOCATION_INSIDE_GARAGE = 17,
 * SPAWN_LOCATION_INSIDE_PROPERTY = 18,
 * SPAWN_LOCATION_INSIDE_PROPERTY_OR_GARAGE = 19,
 * SPAWN_LOCATION_NEAR_DEATH_IMPROMPTU = 20,
 * SPAWN_LOCATION_NEAR_CURRENT_POSITION_SPREAD_OUT = 21,
 * SPAWN_LOCATION_NEAREST_RESPAWN_POINT_TO_SPECIFIC_COORDS = 22,
 * SPAWN_LOCATION_NEAREST_HOSPITAL = 23,
 * SPAWN_LOCATION_NEAREST_POLICE_STATION = 24,
 * SPAWN_LOCATION_NEAREST_HOTEL_TO_SPECIFIC_COORDS = 25,
 * SPAWN_LOCATION_MISSION_AREA_NEAR_CURRENT_POSITION = 26,
 * SPAWN_LOCATION_PRIVATE_YACHT = 27,
 * SPAWN_LOCATION_PRIVATE_YACHT_APARTMENT = 28,
 * SPAWN_LOCATION_PRIVATE_FRIEND_YACHT = 29,
 * SPAWN_LOCATION_PRIVATE_YACHT_NEAR_SHORE = 30,
 * SPAWN_LOCATION_NEAR_GANG_BOSS = 31,
 * SPAWN_LOCATION_NEAR_SPECIFIC_COORDS_WITH_GANG = 32,
 * SPAWN_LOCATION_GANG_DM = 33,
 * SPAWN_LOCATION_GANG_BOSS_PRIVATE_YACHT = 34,
 * SPAWN_LOCATION_OFFICE = 35,
 * SPAWN_LOCATION_CLUBHOUSE = 36,
 * SPAWN_LOCATION_NEAR_CURRENT_POSITION_AS_POSSIBLE = 37,
 * SPAWN_LOCATION_NEAR_CURRENT_PERCEIVED_POSITION = 38,
 * SPAWN_LOCATION_IE_WAREHOUSE = 39,
 * SPAWN_LOCATION_BUNKER = 40,
 * SPAWN_LOCATION_HANGAR = 41,
 * SPAWN_LOCATION_DEFUNCT_BASE = 42,
 * SPAWN_LOCATION_NIGHTCLUB = 43,
 * SPAWN_LOCATION_ARENA_GARAGE = 44,
 * SPAWN_LOCATION_CASINO = 45,
 * SPAWN_LOCATION_CASINO_APARTMENT = 46,
 * SPAWN_LOCATION_CASINO_OUTSIDE = 47,
 * SPAWN_LOCATION_ARCADE = 48,
 * SPAWN_LOCATION_CASINO_NIGHTCLUB = 49,
 * SPAWN_LOCATION_SUBMARINE = 50,
 * SPAWN_LOCATION_HEIST_ISLAND_NEAR_DEATH = 51,
 * SPAWN_LOCATION_HEIST_ISLAND_BEACH_PARTY = 52,
 * SPAWN_LOCATION_LAND_NEAR_SUBMARINE = 53,
 * SPAWN_LOCATION_CAR_MEET = 54,
 * SPAWN_LOCATION_AUTO_SHOP = 55,
 * SPAWN_LOCATION_FIXER_HQ = 56,
 * SPAWN_LOCATION_SITTING_SMOKING = 57,
 * SPAWN_LOCATION_DRUNK_WAKE_UP_MUSIC_STUDIO = 58,
 * SPAWN_LOCATION_MUSIC_STUDIO = 59,
 * TOTAL_SPAWN_LOCATIONS = 60
 * };
 * ```
 * ```cpp
 * enum eSpawnReason {
 * SPAWN_REASON_DEATH = 0,
 * SPAWN_REASON_TRANSITION,
 * SPAWN_REASON_MANUAL,
 * SPAWN_REASON_RESTORE_CHARACTER,
 * SPAWN_REASON_IN_VEHICLE
 * };
 * ```
 * ### Added parameters
 * *   **bUnpauseRenderPhases**: This boolean parameter will unpause the render phases when set to `true`.
 * *   **iSpawnLocation**: This integer parameter sets the player's spawn location metric for telemetry. See `ePlayerSpawnLocation` enum.
 * *   **iSpawnReason**: This integer parameter sets the player's spawn reason metric for telemetry. See `eSpawnReason` enum.
 * Hash: 0xEA23C49EAA83ACFB | ApiSet: undefined
 */
export function networkResurrectLocalPlayer(position, heading, nInvincibilityTime, bLeaveDeadPed) {
    NetworkResurrectLocalPlayer(position.x, position.y, position.z, heading, nInvincibilityTime, bLeaveDeadPed);
}
/**
 * ```
 * the first arg seems to be the network player handle (&handle) and the second var is pretty much always "" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1
 * does this send an invite to a player?
 * ```
 * Hash: 0x31D1D2B858D25E6B | ApiSet: undefined
 */
export function networkSendTransitionGamerInstruction(p1, p2, p3, p4) {
    return NetworkSendTransitionGamerInstruction(p1, p2, p3, p4);
}
/**
 * ```
 * String "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" is contained in the function in ida so this one is correct.
 * ```
 * Hash: 0xC116FF9B4D488291 | ApiSet: undefined
 */
export function networkSendPresenceTransitionInvite(p2, p3) {
    return NetworkSendPresenceTransitionInvite(p2, p3);
}
/**
 * Hash: 0xCAE55F48D3D7875C | ApiSet: undefined
 */
export function networkSessionAddActiveMatchmakingGroup(groupId) {
    NetworkSessionAddActiveMatchmakingGroup(groupId);
}
/**
 * Hash: 0xF1B84178F8674195 | ApiSet: undefined
 */
export function networkSeedRandomNumberGenerator(seed) {
    NetworkSeedRandomNumberGenerator(seed);
}
/**
 * Hash: 0xA73667484D7037C3 | ApiSet: undefined
 */
export function networkSessionBlockJoinRequests(toggle) {
    NetworkSessionBlockJoinRequests(toggle);
}
/**
 * Hash: 0xBE3E347A87ACEB82 | ApiSet: undefined
 */
export function networkSessionActivityQuickmatch(p0, p1, p2, p3) {
    return NetworkSessionActivityQuickmatch(p0, p1, p2, p3);
}
/**
 * Hash: 0xB4AB419E0D86ACAE | ApiSet: undefined
 */
export function networkSessionChangeSlots(p0, p1) {
    NetworkSessionChangeSlots(p0, p1);
}
/**
 * ```
 * Message is limited to 64 characters.
 * ```
 * Hash: 0x3A214F2EC889B100 | ApiSet: undefined
 */
export function networkSendTextMessage(message) {
    return NetworkSendTextMessage(message);
}
/**
 * Hash: 0x2FBF47B1B36D36F9 | ApiSet: undefined
 */
export function networkSessionCancelInvite() {
    NetworkSessionCancelInvite();
}
/**
 * ```
 * unknown params
 * p0 = 0, 2, or 999 (The global is 999 by default.)
 * p1 = 0 (Always in every script it's found in atleast.)
 * p2 = 0, 3, or 4 (Based on a var that is determined by a function.)
 * p3 = maxPlayers (It's obvious in x360 scripts it's always 18)
 * p4 = 0 (Always in every script it's found in atleast.)
 * p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)
 * p5 is reset to 0 if,
 * Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.
 * ```
 * Hash: 0x330ED4D05491934F | ApiSet: undefined
 */
export function networkSessionEnter(p0, p1, p2, maxPlayers, p4, p5) {
    return NetworkSessionEnter(p0, p1, p2, maxPlayers, p4, p5);
}
/**
 * ```
 * p0 is always false and p1 varies.
 * NETWORK_SESSION_END(0, 1)
 * NETWORK_SESSION_END(0, 0)
 * Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
 * ```
 * Hash: 0xA02E59562D711006 | ApiSet: undefined
 */
export function networkSessionEnd(p0, p1) {
    return NetworkSessionEnd(p0, p1);
}
/**
 * Hash: 0xD6D09A6F32F49EF1 | ApiSet: undefined
 */
export function networkSessionGetKickVote(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkSessionGetKickVote(_player);
}
/**
 * Hash: 0xE57397B4A3429DD0 | ApiSet: undefined
 */
export function networkSessionGetInviter() {
    return NetworkSessionGetInviter();
}
/**
 * Hash: 0x94BC51E9449D917F | ApiSet: undefined
 */
export function networkSessionCrewMatchmaking(p0, p1, p2, maxPlayers, p4) {
    return NetworkSessionCrewMatchmaking(p0, p1, p2, maxPlayers, p4);
}
/**
 * Hash: 0xA29177F7703B5644 | ApiSet: undefined
 */
export function networkSessionForceCancelInvite() {
    NetworkSessionForceCancelInvite();
}
/**
 * Hash: 0x2CFC76E0D087C994 | ApiSet: undefined
 */
export function networkSessionFriendMatchmaking(p0, p1, maxPlayers, p3) {
    return NetworkSessionFriendMatchmaking(p0, p1, maxPlayers, p3);
}
/**
 * ```
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * ```
 * Hash: 0x6F3D4ED9BEE4E61D | ApiSet: undefined
 */
export function networkSessionHost(p0, maxPlayers, p2) {
    return NetworkSessionHost(p0, maxPlayers, p2);
}
/**
 * Hash: 0xED34C0C02C098BB7 | ApiSet: undefined
 */
export function networkSessionHostClosed(p0, maxPlayers) {
    return NetworkSessionHostClosed(p0, maxPlayers);
}
/**
 * Hash: 0x56CE820830EF040B | ApiSet: undefined
 */
export function networkSessionGetMatchmakingGroupFree(p0) {
    return NetworkSessionGetMatchmakingGroupFree(p0);
}
/**
 * Hash: 0x74732C6CA90DA2B4 | ApiSet: undefined
 */
export function networkSessionIsClosedCrew() {
    return NetworkSessionIsClosedCrew();
}
/**
 * Hash: 0x53AFD64C6758F2F9 | ApiSet: undefined
 */
export function networkSessionGetPrivateSlots() {
    return NetworkSessionGetPrivateSlots();
}
/**
 * Hash: 0xCEF70AA5B3F89BA1 | ApiSet: undefined
 */
export function networkSessionIsPrivate() {
    return NetworkSessionIsPrivate();
}
/**
 * Hash: 0xFBCFA2EA2E206890 | ApiSet: undefined
 */
export function networkSessionIsClosedFriends() {
    return NetworkSessionIsClosedFriends();
}
/**
 * ```
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * ```
 * Hash: 0xB9CFD27A5D578D83 | ApiSet: undefined
 */
export function networkSessionHostFriendsOnly(p0, maxPlayers) {
    return NetworkSessionHostFriendsOnly(p0, maxPlayers);
}
/**
 * ```
 * Loads up the map that is loaded when beeing in mission creator
 * Player gets placed in a mix between online/offline mode
 * p0 is always 2 in R* scripts.
 * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
 * ```
 * Hash: 0xC74C33FCA52856D5 | ApiSet: undefined
 */
export function networkSessionHostSinglePlayer(p0) {
    NetworkSessionHostSinglePlayer(p0);
}
/**
 * ```
 * Only works as host.
 * ```
 * Hash: 0xFA8904DC5F304220 | ApiSet: undefined
 */
export function networkSessionKickPlayer(player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkSessionKickPlayer(_player);
}
/**
 * Hash: 0xBA416D68C631496A | ApiSet: undefined
 */
export function networkSessionIsVisible() {
    return NetworkSessionIsVisible();
}
/**
 * Hash: 0x855BC38818F6F684 | ApiSet: undefined
 */
export function networkSessionIsInVoiceSession() {
    return NetworkSessionIsInVoiceSession();
}
/**
 * Hash: 0xF3929C2379B60CCE | ApiSet: undefined
 */
export function networkSessionIsSolo() {
    return NetworkSessionIsSolo();
}
/**
 * Hash: 0xC6F8AB8A4189CF3A | ApiSet: undefined
 */
export function networkSessionJoinInvite() {
    NetworkSessionJoinInvite();
}
/**
 * Hash: 0xEF0912DDF7C4CB4B | ApiSet: undefined
 */
export function networkSessionIsVoiceSessionBusy() {
    return NetworkSessionIsVoiceSessionBusy();
}
/**
 * Hash: 0x271CC6AB59EBF9A5 | ApiSet: undefined
 */
export function networkSessionMarkVisible(toggle) {
    NetworkSessionMarkVisible(toggle);
}
/**
 * ```
 * playerTypes:
 * 0 = regular joiner
 * 4 = spectator
 * 8 = unknown
 * ```
 * Hash: 0x8B6A4DD0AF9CE215 | ApiSet: undefined
 */
export function networkSessionSetMatchmakingGroupMax(playerType, playerCount) {
    NetworkSessionSetMatchmakingGroupMax(playerType, playerCount);
}
/**
 * Hash: 0x3442775428FD2DAA | ApiSet: undefined
 */
export function networkSessionLeaveSinglePlayer() {
    NetworkSessionLeaveSinglePlayer();
}
/**
 * Hash: 0xF1EEA2DDA9FFA69D | ApiSet: undefined
 */
export function networkSessionSetMatchmakingMentalState(p0) {
    NetworkSessionSetMatchmakingMentalState(p0);
}
/**
 * Hash: 0x3F52E880AAF6C8CA | ApiSet: undefined
 */
export function networkSessionSetMatchmakingPropertyId(p0) {
    NetworkSessionSetMatchmakingPropertyId(p0);
}
/**
 * Hash: 0x49EC8030F5015F8B | ApiSet: undefined
 */
export function networkSessionSetMatchmakingGroup(matchmakingGroup) {
    NetworkSessionSetMatchmakingGroup(matchmakingGroup);
}
/**
 * Hash: 0xC19F6C8E7865A6FF | ApiSet: undefined
 */
export function networkSessionValidateJoin(p0) {
    NetworkSessionValidateJoin(p0);
}
/**
 * ```
 * Only one occurence in the scripts:
 * auto sub_cb43(auto a_0, auto a_1) {
 * if (g_2594CB._f1) {
 * `if (NETWORK::_855BC38818F6F684()) {`
 * `NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93);`
 * g_2594CB._f14\/\*{13}\*\/ = a_0._fB93;
 * g_2594CB._f4\/\*"64"\*\/ = a_1;
 * return 1;
 * }
 * }
 * return 0;
 * }
 * other:
 * looks like it passes a player in the paramater
 * Contains string "NETWORK_VOICE_CONNECT_TO_PLAYER" in ida
 * ```
 * Hash: 0xABD5E88B8A2D3DB2 | ApiSet: undefined
 */
export function networkSessionVoiceConnectToPlayer() {
    return NetworkSessionVoiceConnectToPlayer();
}
/**
 * Hash: 0x9C1556705F864230 | ApiSet: undefined
 */
export function networkSessionVoiceHost() {
    NetworkSessionVoiceHost();
}
/**
 * Hash: 0x7F8413B7FC2AA6B9 | ApiSet: undefined
 */
export function networkSessionVoiceRespondToRequest(p0, p1) {
    NetworkSessionVoiceRespondToRequest(p0, p1);
}
/**
 * Hash: 0x23DFB504655D0CE4 | ApiSet: undefined
 */
export function networkSessionWasInvited() {
    return NetworkSessionWasInvited();
}
/**
 * Hash: 0x6793E42BE02B575D | ApiSet: undefined
 */
export function networkSessionVoiceLeave() {
    NetworkSessionVoiceLeave();
}
/**
 * Hash: 0x75138790B4359A74 | ApiSet: undefined
 */
export function networkSetActivitySpectator(toggle) {
    NetworkSetActivitySpectator(toggle);
}
/**
 * Hash: 0x5C707A667DF8B9FA | ApiSet: undefined
 */
export function networkSetChoiceMigrateOptions(toggle, player) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    NetworkSetChoiceMigrateOptions(toggle, _player);
}
/**
 * Hash: 0x0E4F77F7B9D74D84 | ApiSet: undefined
 */
export function networkSetActivityPlayerMax(playerCount) {
    NetworkSetActivityPlayerMax(playerCount);
}
/**
 * Hash: 0x5B8ED3DB018927B1 | ApiSet: undefined
 */
export function networkSessionVoiceSetTimeout(timeout) {
    NetworkSessionVoiceSetTimeout(timeout);
}
/**
 * Hash: 0x796A87B3B68D1F3D | ApiSet: undefined
 */
export function networkSetCurrentDataManagerHandle() {
    return NetworkSetCurrentDataManagerHandle();
}
/**
 * Hash: 0x9D277B76D1D12222 | ApiSet: undefined
 */
export function networkSetActivitySpectatorMax(maxSpectators) {
    NetworkSetActivitySpectatorMax(maxSpectators);
}
/**
 * Hash: 0xD830567D88A1E873 | ApiSet: undefined
 */
export function networkSetEntityCanBlend(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkSetEntityCanBlend(_entity, toggle);
}
/**
 * ```cpp
 * enum eMpSettingSpawn
 * {
 * MP_SETTING_SPAWN_NULL = 0,
 * MP_SETTING_SPAWN_PROPERTY = 1,
 * MP_SETTING_SPAWN_LAST_POSITION = 2,
 * MP_SETTING_SPAWN_GARAGE = 3,
 * MP_SETTING_SPAWN_RANDOM = 4,
 * MP_SETTING_SPAWN_PRIVATE_YACHT = 5,
 * MP_SETTING_SPAWN_OFFICE = 6,
 * MP_SETTING_SPAWN_CLUBHOUSE = 7,
 * MP_SETTING_SPAWN_IE_WAREHOUSE = 8,
 * MP_SETTING_SPAWN_BUNKER = 9,
 * MP_SETTING_SPAWN_HANGAR = 10,
 * MP_SETTING_SPAWN_DEFUNCT_BASE = 11,
 * MP_SETTING_SPAWN_NIGHTCLUB = 12,
 * MP_SETTING_SPAWN_ARENA_GARAGE = 13,
 * MP_SETTING_SPAWN_CASINO_APARTMENT = 14,
 * MP_SETTING_SPAWN_ARCADE = 15,
 * MP_SETTING_SPAWN_SUBMARINE = 16,
 * MP_SETTING_SPAWN_CAR_MEET = 17,
 * MP_SETTING_SPAWN_AUTO_SHOP = 18,
 * MP_SETTING_SPAWN_FIXER_HQ = 19,
 * MP_SETTING_SPAWN_MAX = 20,
 * };
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0xAA6D5451DC3448B6 | ApiSet: undefined
 */
export function networkSetCurrentSpawnSetting(mpSettingSpawn) {
    if (typeof mpSettingSpawn === 'string')
        mpSettingSpawn = this.getHashKey(mpSettingSpawn);
    NetworkSetCurrentSpawnSetting(mpSettingSpawn);
}
/**
 * Hash: 0xF808475FA571D823 | ApiSet: undefined
 */
export function networkSetFriendlyFireOption(toggle) {
    NetworkSetFriendlyFireOption(toggle);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x2C863ACDCD12B3DB | ApiSet: undefined
 */
export function networkSetCurrentMissionId(missionId) {
    NetworkSetCurrentMissionId(missionId);
}
/**
 * Hash: 0x4BA166079D658ED4 | ApiSet: undefined
 */
export function networkSetEntityGhostedWithOwner(entity, p1) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkSetEntityGhostedWithOwner(_entity, p1);
}
/**
 * Hash: 0x9CA5DE655269FEC4 | ApiSet: undefined
 */
export function networkSetInMpCutscene(p0, p1) {
    NetworkSetInMpCutscene(p0, p1);
}
/**
 * ```
 * if set to true other network players can't see it
 * if set to false other network player can see it
 * =========================================
 * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
 * pc or last gen?
 * ^^ last-gen
 * ```
 * Hash: 0xF1CA12B18AEF5298 | ApiSet: undefined
 */
export function networkSetEntityInvisibleToNetwork(entity, toggle) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkSetEntityInvisibleToNetwork(_entity, toggle);
}
/**
 * Hash: 0x7206F674F2A3B1BB | ApiSet: undefined
 */
export function networkSetCurrentlySelectedGamerHandleFromInviteMenu() {
    return NetworkSetCurrentlySelectedGamerHandleFromInviteMenu();
}
/**
 * Hash: 0x423DE3854BB50894 | ApiSet: undefined
 */
export function networkSetInSpectatorMode(toggle, playerPed) {
    const _playerPed = playerPed instanceof Ped ? playerPed.handle() : playerPed;
    NetworkSetInSpectatorMode(toggle, _playerPed);
}
/**
 * Hash: 0x2D95C7E2D7E07307 | ApiSet: undefined
 */
export function networkSetLocalPlayerInvincibleTime(time) {
    NetworkSetLocalPlayerInvincibleTime(time);
}
/**
 * Hash: 0xCA2C8073411ECDB6 | ApiSet: undefined
 */
export function networkSetGamerInvitedToTransition() {
    return NetworkSetGamerInvitedToTransition();
}
/**
 * Hash: 0xFC18DB55AE19E046 | ApiSet: undefined
 */
export function networkSetInFreeCamMode(toggle) {
    NetworkSetInFreeCamMode(toggle);
}
/**
 * Hash: 0x419594E137637120 | ApiSet: undefined
 */
export function networkSetInSpectatorModeExtended(toggle, playerPed, p2) {
    const _playerPed = playerPed instanceof Ped ? playerPed.handle() : playerPed;
    NetworkSetInSpectatorModeExtended(toggle, _playerPed, p2);
}
/**
 * Sets whether or not an object (created using `CREATE_OBJECT`, or similar) should have its position/rotation synchronized,
 * even if it is a 'static' object (for example, having flag 32 - Static - set in its archetype definition).
 * This has to be called during the same frame the object is created/registered for network, as otherwise it may already
 * have a remote clone created.
 * Once a remote clone is created, changing this value will not have any effect on said clone.
 * Hash: 0x0379DAF89BA09AA5 | ApiSet: undefined
 */
export function networkSetObjectForceStaticBlend(object, enabled) {
    NetworkSetObjectForceStaticBlend(object, enabled);
}
/**
 * Hash: 0x3B3D11CD9FFCDFC9 | ApiSet: undefined
 */
export function networkSetMissionFinished() {
    NetworkSetMissionFinished();
}
/**
 * Hash: 0x524FF0AEFF9C3973 | ApiSet: undefined
 */
export function networkSetLocalPlayerSyncLookAt(toggle) {
    NetworkSetLocalPlayerSyncLookAt(toggle);
}
/**
 * Hash: 0x70DA3BF8DACD3210 | ApiSet: undefined
 */
export function networkSetOverrideSpectatorMode(toggle) {
    NetworkSetOverrideSpectatorMode(toggle);
}
/**
 * ```
 * On PC it's a nullsub which means it does absolutely nothing.
 * Now that Discord supports Rich Presence, R* might finally implement this for PC. Or maybe in future games like RDR2, GTA VI...
 * ```
 * Hash: 0x1DCCACDCFC569362 | ApiSet: undefined
 */
export function networkSetRichPresence(p0, p1, p2, p3) {
    NetworkSetRichPresence(p0, p1, p2, p3);
}
/**
 * Hash: 0x66F010A4B031A331 | ApiSet: undefined
 */
export function networkSetInviteOnCallForInviteMenu() {
    return NetworkSetInviteOnCallForInviteMenu();
}
/**
 * ```
 * value must be < 255
 * ```
 * Hash: 0x1775961C2FBBCB5C | ApiSet: undefined
 */
export function networkSetPropertyId(id) {
    NetworkSetPropertyId(id);
}
/**
 * Hash: 0x1B857666604B1A74 | ApiSet: undefined
 */
export function networkSetPlayerIsPassive(toggle) {
    NetworkSetPlayerIsPassive(toggle);
}
/**
 * Hash: 0x7AC752103856FB20 | ApiSet: undefined
 */
export function networkSetScriptReadyForEvents(toggle) {
    NetworkSetScriptReadyForEvents(toggle);
}
/**
 * Hash: 0xF46A1E03E8755980 | ApiSet: undefined
 */
export function networkSetNoSpectatorChat(toggle) {
    NetworkSetNoSpectatorChat(toggle);
}
/**
 * Hash: 0xCBF12D65F95AD686 | ApiSet: undefined
 */
export function networkSetTalkerProximity(value) {
    NetworkSetTalkerProximity(value);
}
/**
 * This native does absolutely nothing, just a nullsub
 * Hash: 0x3E200C2BCF4164EB | ApiSet: undefined
 */
export function networkSetRichPresenceString(p0, textLabel) {
    NetworkSetRichPresenceString(p0, textLabel);
}
/**
 * Hash: 0xD5B4883AC32F24C3 | ApiSet: undefined
 */
export function networkSetTeamOnlyChat(toggle) {
    NetworkSetTeamOnlyChat(toggle);
}
/**
 * Hash: 0x30DE938B516F0AD2 | ApiSet: undefined
 */
export function networkSetTransitionActivityId(p0) {
    NetworkSetTransitionActivityId(p0);
}
/**
 * Hash: 0x0C978FDA19692C2C | ApiSet: undefined
 */
export function networkSetTransitionVisibilityLock(p0, p1) {
    NetworkSetTransitionVisibilityLock(p0, p1);
}
/**
 * Hash: 0x1CA59E306ECB80A5 | ApiSet: undefined
 */
export function networkSetThisScriptIsNetworkScript(maxNumMissionParticipants, p1, instanceId) {
    NetworkSetThisScriptIsNetworkScript(maxNumMissionParticipants, p1, instanceId);
}
/**
 * ```
 * Used by Metric VEHICLE_DIST_DRIVEN
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x8C70252FC40F320B | ApiSet: undefined
 */
export function networkSetVehicleTestDrive(toggle) {
    NetworkSetVehicleTestDrive(toggle);
}
/**
 * Hash: 0xEF6212C2EFEF1A23 | ApiSet: undefined
 */
export function networkSetVoiceChannel(channel) {
    NetworkSetVoiceChannel(channel);
}
/**
 * Hash: 0xEF26739BCD9907D5 | ApiSet: undefined
 */
export function networkSetTransitionCreatorHandle() {
    return NetworkSetTransitionCreatorHandle();
}
/**
 * p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS` in the decompiled scripts.
 * Hash: 0x4BA92A18502BCA61 | ApiSet: undefined
 */
export function networkStartRespawnSearchInAngledAreaForPlayer(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkStartRespawnSearchInAngledAreaForPlayer(_player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags);
}
/**
 * ```
 * Allow vehicle wheels to be destructible even when the Vehicle entity is invincible.
 * ```
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x890E2C5ABED7236D | ApiSet: undefined
 */
export function networkSetVehicleWheelsDestructible(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    NetworkSetVehicleWheelsDestructible(_vehicle, toggle);
}
/**
 * ```
 * One of the first things it does is get the players ped.
 * Then it calls a function that is used in some tasks and ped based functions.
 * ```
 * p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS`, in the decompiled scripts.
 * Hash: 0x5A6FFA2433E2F14C | ApiSet: undefined
 */
export function networkStartRespawnSearchForPlayer(player, position, radius, p5, p6, p7, flags) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    return NetworkStartRespawnSearchForPlayer(_player, position.x, position.y, position.z, radius, p5, p6, p7, flags);
}
/**
 * Hash: 0xBABEC9E69A91C57B | ApiSet: undefined
 */
export function networkSetVoiceActive(toggle) {
    NetworkSetVoiceActive(toggle);
}
/**
 * Hash: 0x9A1B3FCDB36C8697 | ApiSet: undefined
 */
export function networkStartSynchronisedScene(netScene) {
    NetworkStartSynchronisedScene(netScene);
}
/**
 * ```
 * Example:
 * int playerHandle;
 * NETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13);
 * NETWORK_SHOW_PROFILE_UI(&playerHandle);
 * ```
 * Hash: 0x859ED1CEA343FCA8 | ApiSet: undefined
 */
export function networkShowProfileUi() {
    return NetworkShowProfileUi();
}
/**
 * ```
 * Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
 * ```
 * Hash: 0x82A2B386716608F1 | ApiSet: undefined
 */
export function networkShouldShowConnectivityTroubleshooting() {
    return NetworkShouldShowConnectivityTroubleshooting();
}
/**
 * Hash: 0x17E0198B3882C2CB | ApiSet: undefined
 */
export function networkStartSoloTutorialSession() {
    NetworkStartSoloTutorialSession();
}
/**
 * Hash: 0xC3BFED92026A2AAD | ApiSet: undefined
 */
export function networkTransitionTrack(hash, p1, p2, state, p4) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    NetworkTransitionTrack(hash, p1, p2, state, p4);
}
/**
 * ```
 * Always returns -1. Seems to be XB1 specific.
 * ```
 * Hash: 0xDEB2B99A1AF1A2A6 | ApiSet: undefined
 */
export function networkStartUserContentPermissionsCheck(netHandle) {
    return NetworkStartUserContentPermissionsCheck(netHandle);
}
/**
 * Hash: 0xC254481A4574CB2F | ApiSet: undefined
 */
export function networkStopSynchronisedScene(netScene) {
    NetworkStopSynchronisedScene(netScene);
}
/**
 * Hash: 0xB7C7F6AD6424304B | ApiSet: undefined
 */
export function networkUpdatePlayerScars() {
    NetworkUpdatePlayerScars();
}
/**
 * Hash: 0xA0682D67EF1FBA3D | ApiSet: undefined
 */
export function networkSuppressInvite(toggle) {
    NetworkSuppressInvite(toggle);
}
/**
 * ```
 * Returns defaultValue if the tunable doesn't exist.
 * ```
 * Hash: 0xC7420099936CE286 | ApiSet: undefined
 */
export function networkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue) {
    if (typeof tunableContext === 'string')
        tunableContext = this.getHashKey(tunableContext);
    if (typeof tunableName === 'string')
        tunableName = this.getHashKey(tunableName);
    return NetworkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue);
}
/**
 * ```
 * Lets objects spawn online simply do it like this:
 * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
 * ```
 * Hash: 0x99BFDC94A603E541 | ApiSet: undefined
 */
export function objToNet(object) {
    return ObjToNet(object);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xC1447451DDB512F0 | ApiSet: undefined
 */
export function networkUgcNav(p0, p1) {
    NetworkUgcNav(p0, p1);
}
/**
 * Hash: 0x7368E683BB9038D6 | ApiSet: undefined
 */
export function networkUnregisterNetworkedEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkUnregisterNetworkedEntity(_entity);
}
/**
 * ```
 * Return the local Participant ID
 * ```
 * Hash: 0x90986E8876CE0A83 | ApiSet: undefined
 */
export function participantId() {
    return ParticipantId();
}
/**
 * ```
 * Has a 3rd param (int) since patch [???].
 * ```
 * ```
 * NativeDB Added Parameter 3: int p2
 * ```
 * Hash: 0x58C21165F6545892 | ApiSet: undefined
 */
export function openCommerceStore(p0, p1) {
    OpenCommerceStore(p0, p1);
}
/**
 * Hash: 0xE26CCFF8094D8C74 | ApiSet: undefined
 */
export function refreshPlayerListStats(p0) {
    return RefreshPlayerListStats(p0);
}
/**
 * Hash: 0xCD71A4ECAB22709E | ApiSet: undefined
 */
export function networkUseLogarithmicBlendingThisFrame(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    NetworkUseLogarithmicBlendingThisFrame(_entity);
}
/**
 * ```
 * Old name: _NETWORK_SET_NETWORK_ID_DYNAMIC
 * ```
 * Hash: 0x2B1813ABA29016C5 | ApiSet: undefined
 */
export function networkUseHighPrecisionBlending(netID, toggle) {
    NetworkUseHighPrecisionBlending(netID, toggle);
}
/**
 * ```
 * Used in am_mp_property_ext and am_mp_property_int
 * ```
 * ```
 * NativeDB Added Parameter 2: Ped ped
 * ```
 * Hash: 0x715135F4B82AC90D | ApiSet: undefined
 */
export function removeAllStickyBombsFromEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    RemoveAllStickyBombsFromEntity(_entity);
}
/**
 * ```
 * gets the network id of a ped
 * ```
 * Hash: 0x0EDEC3C276198689 | ApiSet: undefined
 */
export function pedToNet(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return PedToNet(_ped);
}
/**
 * ```
 * Return the local Participant ID.
 * This native is exactly the same as 'PARTICIPANT_ID' native.
 * ```
 * Hash: 0x57A3BDDAD8E5AA0A | ApiSet: undefined
 */
export function participantIdToInt() {
    return ParticipantIdToInt();
}
/**
 * Hash: 0x42613035157E4208 | ApiSet: undefined
 */
export function reserveNetworkLocalVehicles(amount) {
    ReserveNetworkLocalVehicles(amount);
}
/**
 * ```
 * Internal logging string: SCRIPT_RESERVING_LOCAL_PEDS
 * ```
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x2C8DF5D129595281 | ApiSet: undefined
 */
export function reserveNetworkLocalPeds(amount) {
    ReserveNetworkLocalPeds(amount);
}
/**
 * Hash: 0x72D0706CD6CCDB58 | ApiSet: undefined
 */
export function releaseAllCommerceItemImages() {
    ReleaseAllCommerceItemImages();
}
/**
 * Hash: 0xB60FEBA45333D36F | ApiSet: undefined
 */
export function reserveNetworkMissionPeds(amount) {
    ReserveNetworkMissionPeds(amount);
}
/**
 * ```
 * NativeDB Added Parameter 1: Player player
 * NativeDB Added Parameter 2: int a
 * NativeDB Added Parameter 3: int b
 * ```
 * Hash: 0x472841A026D26D8B | ApiSet: undefined
 */
export function remoteCheatDetected() {
    return RemoteCheatDetected();
}
/**
 * ```
 * Internal logging string: SCRIPT_RESERVING_LOCAL_OBJECTS
 * ```
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x797F9C5E661D920E | ApiSet: undefined
 */
export function reserveNetworkLocalObjects(amount) {
    ReserveNetworkLocalObjects(amount);
}
/**
 * Hash: 0xA2F952104FC6DD4B | ApiSet: undefined
 */
export function requestCommerceItemImage(index) {
    return RequestCommerceItemImage(index);
}
/**
 * Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\_0x4BA166079D658ED4).
 * Hash: 0x17330EBF2F2124A8 | ApiSet: undefined
 */
export function resetGhostedEntityAlpha() {
    ResetGhostedEntityAlpha();
}
/**
 * Hash: 0x4E5C93BD0C32FBF8 | ApiSet: undefined
 */
export function reserveNetworkMissionObjects(amount) {
    ReserveNetworkMissionObjects(amount);
}
/**
 * Hash: 0xE0031D3C8F36AB82 | ApiSet: undefined
 */
export function setEntityVisibleInCutscene(p0, p1, p2) {
    SetEntityVisibleInCutscene(p0, p1, p2);
}
/**
 * Hash: 0x815E5E3073DA1D67 | ApiSet: undefined
 */
export function setBalanceAddMachine() {
    return SetBalanceAddMachine();
}
/**
 * Hash: 0xD1065D68947E7B6E | ApiSet: undefined
 */
export function setLocalPlayerVisibleInCutscene(p0, p1) {
    SetLocalPlayerVisibleInCutscene(p0, p1);
}
/**
 * Hash: 0x76B02E21ED27A469 | ApiSet: undefined
 */
export function reserveNetworkMissionVehicles(amount) {
    ReserveNetworkMissionVehicles(amount);
}
/**
 * Hash: 0xB8322EEB38BE7C26 | ApiSet: undefined
 */
export function setBalanceAddMachines(dataCount) {
    return SetBalanceAddMachines(dataCount);
}
/**
 * ```
 * `Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).`
 * ```
 * Hash: 0x838DA0936A24ED4D | ApiSet: undefined
 */
export function setNetworkEnableVehiclePositionCorrection(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetNetworkEnableVehiclePositionCorrection(_vehicle, toggle);
}
/**
 * Sets the provided entity visible for yourself for the current frame.
 * Hash: 0x241E289B5C059EDC | ApiSet: undefined
 */
export function setEntityLocallyVisible(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityLocallyVisible(_entity);
}
/**
 * Formerly incorrectly named `USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR` due to incorrect treatment of console vs. PC native registration.
 * Native name guessed through ordering.
 * ```
 * NativeDB Added Parameter 2: BOOL p1
 * ```
 * Hash: 0x5FFE9B4144F9712F | ApiSet: undefined
 */
export function setLocalPlayerAsGhost(toggle) {
    SetLocalPlayerAsGhost(toggle);
}
/**
 * Sets the provided entity not visible for yourself for the current frame.
 * Hash: 0xE135A9FF3F5D05D8 | ApiSet: undefined
 */
export function setEntityLocallyInvisible(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetEntityLocallyInvisible(_entity);
}
/**
 * Hash: 0xE5F773C1A1D9D168 | ApiSet: undefined
 */
export function setLocalPlayerInvisibleLocally(p0) {
    SetLocalPlayerInvisibleLocally(p0);
}
/**
 * Hash: 0xAAA553E7DD28A457 | ApiSet: undefined
 */
export function setNetworkCutsceneEntities(toggle) {
    SetNetworkCutsceneEntities(toggle);
}
/**
 * Sets the alpha value used by [`_SET_LOCAL_PLAYER_AS_GHOST`](#\_0x5FFE9B4144F9712F), [`SET_NETWORK_VEHICLE_AS_GHOST`](#\_0x6274C4712850841E), and [`_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`](#\_0x4BA166079D658ED4).
 * 'Solidness' cannot be achieved using 255 - this will have the opposite effect of it defaulting to 128 it seems (or just having no effect at all).
 * Hash: 0x658500AE6D723A7E | ApiSet: undefined
 */
export function setGhostedEntityAlpha(alpha) {
    SetGhostedEntityAlpha(alpha);
}
/**
 * ```
 * Whether or not another player is allowed to take control of the entity
 * ```
 * Hash: 0x299EEB23175895FC | ApiSet: undefined
 */
export function setNetworkIdCanMigrate(netId, toggle) {
    SetNetworkIdCanMigrate(netId, toggle);
}
/**
 * Hash: 0x7619364C82D3BF14 | ApiSet: undefined
 */
export function setLocalPlayerVisibleLocally(p0) {
    SetLocalPlayerVisibleLocally(p0);
}
/**
 * Hash: 0xE05E81A888FA63C8 | ApiSet: undefined
 */
export function setNetworkIdExistsOnAllMachines(netId, toggle) {
    SetNetworkIdExistsOnAllMachines(netId, toggle);
}
/**
 * Hash: 0xA8A024587329F36A | ApiSet: undefined
 */
export function setNetworkIdAlwaysExistsForPlayer(netId, player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetNetworkIdAlwaysExistsForPlayer(netId, _player, toggle);
}
/**
 * Hash: 0x6274C4712850841E | ApiSet: undefined
 */
export function setNetworkVehicleAsGhost(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetNetworkVehicleAsGhost(_vehicle, toggle);
}
/**
 * ```
 * `rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel`
 * ```
 * Hash: 0xA2A707979FE754DC | ApiSet: undefined
 */
export function setNetworkVehiclePositionUpdateMultiplier(vehicle, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetNetworkVehiclePositionUpdateMultiplier(_vehicle, multiplier);
}
/**
 * Hash: 0xA6928482543022B4 | ApiSet: undefined
 */
export function setNetworkIdVisibleInCutscene(netId, p1, p2) {
    SetNetworkIdVisibleInCutscene(netId, p1, p2);
}
/**
 * ```
 * NativeDB Added Parameter 3: Any p2
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0xEC51713AB6EC36E8 | ApiSet: undefined
 */
export function setNetworkVehicleRespotTimer(netId, time) {
    SetNetworkVehicleRespotTimer(netId, time);
}
/**
 * Enables ghosting between specific players. Name is between `_SET_RELATIONSHIP_GROUP_DONT_AFFECT_WANTED_LEVEL` and `SET_ROADS_BACK_TO_ORIGINAL`.
 * Hash: 0xA7C511FA1C5BDA38 | ApiSet: undefined
 */
export function setRelationshipToPlayer(player, p1) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetRelationshipToPlayer(_player, p1);
}
/**
 * Hash: 0x12B37D54667DB0B8 | ApiSet: undefined
 */
export function setPlayerInvisibleLocally(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerInvisibleLocally(_player, toggle);
}
/**
 * Hash: 0xFAA10F1FAFB11AF2 | ApiSet: undefined
 */
export function setPlayerVisibleLocally(player, toggle) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerVisibleLocally(_player, toggle);
}
/**
 * Hash: 0x3448505B6E35262D | ApiSet: undefined
 */
export function textureDownloadGetName(p0) {
    return TextureDownloadGetName(p0);
}
/**
 * Hash: 0x5776ED562C134687 | ApiSet: undefined
 */
export function textureDownloadHasFailed(p0) {
    return TextureDownloadHasFailed(p0);
}
/**
 * ```
 * Access to the store for shark cards etc...
 * ```
 * Hash: 0x9641A9FF718E9C5E | ApiSet: undefined
 */
export function setStoreEnabled(toggle) {
    SetStoreEnabled(toggle);
}
/**
 * Hash: 0x0B203B4AFDE53A4F | ApiSet: undefined
 */
export function titleTextureDownloadRequest(FilePath, Name, p2) {
    return TitleTextureDownloadRequest(FilePath, Name, p2);
}
/**
 * Disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
 * If you're already in SP then it'll re-load singleplayer.
 * You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
 * Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
 * Hash: 0x9ECA15ADFE141431 | ApiSet: undefined
 */
export function shutdownAndLoadMostRecentSave() {
    return ShutdownAndLoadMostRecentSave();
}
/**
 * ```
 * Starts a new singleplayer game (at the prologue).
 * ```
 * Hash: 0x593850C16A36B692 | ApiSet: undefined
 */
export function shutdownAndLaunchSinglePlayerGame() {
    ShutdownAndLaunchSinglePlayerGame();
}
/**
 * Hash: 0x16160DA74A8E74A2 | ApiSet: undefined
 */
export function textureDownloadRequest(FilePath, Name, p3) {
    return TextureDownloadRequest(FilePath, Name, p3);
}
/**
 * Hash: 0x61A885D3F7CFEE9A | ApiSet: undefined
 */
export function ugcClearOfflineQuery() {
    UgcClearOfflineQuery();
}
/**
 * Hash: 0xE9B99B6853181409 | ApiSet: undefined
 */
export function ugcCancelQuery() {
    UgcCancelQuery();
}
/**
 * Hash: 0x17440AA15D1D3739 | ApiSet: undefined
 */
export function ugcClearCreateResult() {
    UgcClearCreateResult();
}
/**
 * Hash: 0xBA96394A0EECFA65 | ApiSet: undefined
 */
export function ugcClearQueryResults() {
    UgcClearQueryResults();
}
/**
 * Hash: 0x487EB90B98E9FB19 | ApiSet: undefined
 */
export function textureDownloadRelease(p0) {
    TextureDownloadRelease(p0);
}
/**
 * Hash: 0xA1E5E0204A6FCC70 | ApiSet: undefined
 */
export function ugcClearModifyResult() {
    UgcClearModifyResult();
}
/**
 * ```
 * p1 = 6
 * ```
 * Hash: 0x46FB3ED415C7641C | ApiSet: undefined
 */
export function triggerScriptCrcCheckOnPlayer(player, p1, scriptHash) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    return TriggerScriptCrcCheckOnPlayer(_player, p1, scriptHash);
}
/**
 * Hash: 0x152D90E4C1B4738A | ApiSet: undefined
 */
export function ugcCopyContent() {
    return UgcCopyContent();
}
/**
 * Hash: 0xD5A4B59980401588 | ApiSet: undefined
 */
export function ugcGetBookmarkedContent(p0, p1) {
    return UgcGetBookmarkedContent(p0, p1);
}
/**
 * Hash: 0x941E5306BCD7C2C7 | ApiSet: undefined
 */
export function ugcDidGetSucceed() {
    return UgcDidGetSucceed();
}
/**
 * Hash: 0xA7BAB11E7C9C6C5A | ApiSet: undefined
 */
export function ugcGetContentCategory(p0) {
    return UgcGetContentCategory(p0);
}
/**
 * Hash: 0x40F7E66472DF3E5C | ApiSet: undefined
 */
export function ugcGetCachedDescription(p0, p1) {
    return UgcGetCachedDescription(p0, p1);
}
/**
 * Hash: 0x37025B27D9B658B1 | ApiSet: undefined
 */
export function ugcGetContentFileVersion(p0, p1) {
    return UgcGetContentFileVersion(p0, p1);
}
/**
 * Hash: 0xA9240A96C74CCA13 | ApiSet: undefined
 */
export function ugcGetContentIsVerified(p0) {
    return UgcGetContentIsVerified(p0);
}
/**
 * Hash: 0x993CBE59D350D225 | ApiSet: undefined
 */
export function ugcGetContentHasPlayerBookmarked(p0) {
    return UgcGetContentHasPlayerBookmarked(p0);
}
/**
 * Hash: 0x3A17A27D75C74887 | ApiSet: undefined
 */
export function ugcGetContentHash() {
    return UgcGetContentHash();
}
/**
 * Hash: 0x7CF0448787B23758 | ApiSet: undefined
 */
export function ugcGetContentDescriptionHash(p0) {
    return UgcGetContentDescriptionHash(p0);
}
/**
 * Hash: 0x32DD916F3F7C9672 | ApiSet: undefined
 */
export function ugcGetContentLanguage(p0) {
    return UgcGetContentLanguage(p0);
}
/**
 * Hash: 0xBF09786A7FCAB582 | ApiSet: undefined
 */
export function ugcGetContentName(p0) {
    return UgcGetContentName(p0);
}
/**
 * Hash: 0x70EA8DA57840F9BE | ApiSet: undefined
 */
export function ugcGetContentHasPlayerRecord(p0) {
    return UgcGetContentHasPlayerRecord(p0);
}
/**
 * Hash: 0xBAF6BABF9E7CCC13 | ApiSet: undefined
 */
export function ugcGetContentPath(p0) {
    return UgcGetContentPath(p0);
}
/**
 * ```
 * Return the mission id of a job.
 * ```
 * Hash: 0x55AA95F481D694D2 | ApiSet: undefined
 */
export function ugcGetContentId(p0) {
    return UgcGetContentId(p0);
}
/**
 * Hash: 0xE0A6138401BCB837 | ApiSet: undefined
 */
export function ugcGetContentNum() {
    return UgcGetContentNum();
}
/**
 * Hash: 0x3054F114121C21EA | ApiSet: undefined
 */
export function ugcGetContentIsPublished(p0) {
    return UgcGetContentIsPublished(p0);
}
/**
 * Hash: 0x1ACCFBA3D8DAB2EE | ApiSet: undefined
 */
export function ugcGetContentRating(p0, p1) {
    return UgcGetContentRating(p0, p1);
}
/**
 * Hash: 0x4E548C0D7AE39FF9 | ApiSet: undefined
 */
export function ugcGetContentRatingNegativeCount(p0, p1) {
    return UgcGetContentRatingNegativeCount(p0, p1);
}
/**
 * Hash: 0x87E5C46C187FE0AE | ApiSet: undefined
 */
export function ugcGetContentRatingPositiveCount(p0, p1) {
    return UgcGetContentRatingPositiveCount(p0, p1);
}
/**
 * Hash: 0xCFD115B373C0DF63 | ApiSet: undefined
 */
export function ugcGetContentUpdatedDate(p0) {
    return UgcGetContentUpdatedDate(p0);
}
/**
 * Hash: 0xCD67AD041A394C9C | ApiSet: undefined
 */
export function ugcGetContentUserId(p0) {
    return UgcGetContentUserId(p0);
}
/**
 * Hash: 0x759299C5BB31D2A9 | ApiSet: undefined
 */
export function ugcGetContentRatingCount(p0, p1) {
    return UgcGetContentRatingCount(p0, p1);
}
/**
 * Hash: 0xC55A0B40FFB1ED23 | ApiSet: undefined
 */
export function ugcGetCreateContentId() {
    return UgcGetCreateContentId();
}
/**
 * Hash: 0x769951E2455E2EB5 | ApiSet: undefined
 */
export function ugcGetContentTotal() {
    return UgcGetContentTotal();
}
/**
 * Hash: 0x9F6E2821885CAEE2 | ApiSet: undefined
 */
export function ugcGetCrewContent(p0, p1, p2) {
    return UgcGetCrewContent(p0, p1, p2);
}
/**
 * Hash: 0x703F12425ECA8BF5 | ApiSet: undefined
 */
export function ugcGetContentUserName(p0) {
    return UgcGetContentUserName(p0);
}
/**
 * Hash: 0xF9E1CCAE8BA4C281 | ApiSet: undefined
 */
export function ugcGetFriendContent(p0, p1) {
    return UgcGetFriendContent(p0, p1);
}
/**
 * Hash: 0xFBC5E768C7A77A6A | ApiSet: undefined
 */
export function ugcGetCreateResult() {
    return UgcGetCreateResult();
}
/**
 * Hash: 0x597F8DBA9B206FC7 | ApiSet: undefined
 */
export function ugcGetCreatorNum() {
    return UgcGetCreatorNum();
}
/**
 * Hash: 0x678BB03C1A3BD51E | ApiSet: undefined
 */
export function ugcGetGetByCategory(p0, p1, p2) {
    return UgcGetGetByCategory(p0, p1, p2);
}
/**
 * Hash: 0x3195F8DD0D531052 | ApiSet: undefined
 */
export function ugcGetMyContent(p0, p1) {
    return UgcGetMyContent(p0, p1);
}
/**
 * ```
 * Return the root content id of a job.
 * ```
 * Hash: 0xC0173D6BFF4E0348 | ApiSet: undefined
 */
export function ugcGetRootContentId(p0) {
    return UgcGetRootContentId(p0);
}
/**
 * Hash: 0x5A0A3D1A186A5508 | ApiSet: undefined
 */
export function ugcGetModifyResult() {
    return UgcGetModifyResult();
}
/**
 * Hash: 0xD53ACDBEF24A46E8 | ApiSet: undefined
 */
export function ugcIsGetting() {
    return UgcIsGetting();
}
/**
 * Hash: 0xEDF7F927136C224B | ApiSet: undefined
 */
export function ugcGetQueryResult() {
    return UgcGetQueryResult();
}
/**
 * Hash: 0x5E24341A7F92A74B | ApiSet: undefined
 */
export function ugcHasCreateFinished() {
    return UgcHasCreateFinished();
}
/**
 * Hash: 0x299EF3C576773506 | ApiSet: undefined
 */
export function ugcHasModifyFinished() {
    return UgcHasModifyFinished();
}
/**
 * Hash: 0x02ADA21EA2F6918F | ApiSet: undefined
 */
export function ugcHasGetFinished() {
    return UgcHasGetFinished();
}
/**
 * Hash: 0xF53E48461B71EECB | ApiSet: undefined
 */
export function ugcIsLanguageSupported(p0) {
    return UgcIsLanguageSupported(p0);
}
/**
 * Hash: 0x5CAE833B0EE0C500 | ApiSet: undefined
 */
export function ugcPoliciesMakePrivate(p0) {
    return UgcPoliciesMakePrivate(p0);
}
/**
 * Hash: 0xC7397A83F7A2A462 | ApiSet: undefined
 */
export function ugcQueryByContentIds(count, latestVersion, contentTypeName) {
    return UgcQueryByContentIds(count, latestVersion, contentTypeName);
}
/**
 * Hash: 0x1DE0F5F50D723CAA | ApiSet: undefined
 */
export function ugcPublish(contentId, baseContentId, contentTypeName) {
    return UgcPublish(contentId, baseContentId, contentTypeName);
}
/**
 * Hash: 0x274A1519DFC1094F | ApiSet: undefined
 */
export function ugcSetBookmarked(contentId, bookmarked, contentTypeName) {
    return UgcSetBookmarked(contentId, bookmarked, contentTypeName);
}
/**
 * Hash: 0x158EC424F35EC469 | ApiSet: undefined
 */
export function ugcQueryByContentId(contentId, latestVersion, contentTypeName) {
    return UgcQueryByContentId(contentId, latestVersion, contentTypeName);
}
/**
 * Hash: 0x6D4CB481FAC835E8 | ApiSet: undefined
 */
export function ugcQueryRecentlyCreatedContent(offset, count, contentTypeName, p3) {
    return UgcQueryRecentlyCreatedContent(offset, count, contentTypeName, p3);
}
/**
 * Hash: 0x308F96458B7087CC | ApiSet: undefined
 */
export function ugcTextureDownloadRequest(p1, p2, p3, p5) {
    return UgcTextureDownloadRequest(p1, p2, p3, p5);
}
/**
 * Hash: 0x9BF438815F5D96EA | ApiSet: undefined
 */
export function ugcQueryMyContent(p0, p1, p3, p4, p5) {
    return UgcQueryMyContent(p0, p1, p3, p4, p5);
}
/**
 * Hash: 0x7FD2990AF016795E | ApiSet: undefined
 */
export function ugcRequestContentDataFromParams(contentTypeName, contentId, p2, p3, p4) {
    return UgcRequestContentDataFromParams(contentTypeName, contentId, p2, p3, p4);
}
/**
 * Hash: 0x5E0165278F6339EE | ApiSet: undefined
 */
export function ugcRequestCachedDescription(p0) {
    return UgcRequestCachedDescription(p0);
}
/**
 * Hash: 0xD05D1A6C74DA3498 | ApiSet: undefined
 */
export function ugcSetDeleted(p1) {
    return UgcSetDeleted(p1);
}
/**
 * Hash: 0x171DF6A0C07FB3DC | ApiSet: undefined
 */
export function ugcRequestContentDataFromIndex(p0, p1) {
    return UgcRequestContentDataFromIndex(p0, p1);
}
/**
 * ```
 * calls from vehicle to net.
 * ```
 * Hash: 0xB4C94523F023419C | ApiSet: undefined
 */
export function vehToNet(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return VehToNet(_vehicle);
}
/**
 * Hash: 0xF98DDE0A8ED09323 | ApiSet: undefined
 */
export function ugcSetQueryDataFromOffline(p0) {
    UgcSetQueryDataFromOffline(p0);
}
/**
 * Hash: 0x77758139EC9B66C7 | ApiSet: undefined
 */
export function usePlayerColourInsteadOfTeamColour(toggle) {
    UsePlayerColourInsteadOfTeamColour(toggle);
}
/**
 * Hash: 0x5619BFA07CFD7833 | ApiSet: undefined
 */
export function addPedDecorationFromHashesInCorona(ped, collection, overlay) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof collection === 'string')
        collection = this.getHashKey(collection);
    if (typeof overlay === 'string')
        overlay = this.getHashKey(overlay);
    AddPedDecorationFromHashesInCorona(_ped, collection, overlay);
}
/**
 * ```
 * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
 * ```
 * Hash: 0x5BA652A0CD14DF2F | ApiSet: undefined
 */
export function addArmourToPed(ped, amount) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    AddArmourToPed(_ped, amount);
}
/**
 * ```
 * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
 * collection - PedDecorationCollection filename hash
 * overlay - Item name hash
 * Example:
 * Entry inside "mpbeach_overlays.xml" -
 * <Item>
 * <uvPos x="0.500000" y="0.500000" />
 * <scale x="0.600000" y="0.500000" />
 * <rotation value="0.000000" />
 * <nameHash>FM_Hair_Fuzz</nameHash>
 * <txdHash>mp_hair_fuzz</txdHash>
 * <txtHash>mp_hair_fuzz</txtHash>
 * <zone>ZONE_HEAD</zone>
 * <type>TYPE_TATTOO</type>
 * <faction>FM</faction>
 * <garment>All</garment>
 * <gender>GENDER_DONTCARE</gender>
 * <award />
 * <awardLevel />
 * </Item>
 * Code:
 * `PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))`
 * ```
 * Hash: 0x5F5D1665E352A839 | ApiSet: undefined
 */
export function addPedDecorationFromHashes(ped, collection, overlay) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof collection === 'string')
        collection = this.getHashKey(collection);
    if (typeof overlay === 'string')
        overlay = this.getHashKey(overlay);
    AddPedDecorationFromHashes(_ped, collection, overlay);
}
/**
 * Sets an area where scenarios are blocked
 * Hash: 0x1B5C85C612E5256E | ApiSet: undefined
 */
export function addScenarioBlockingArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ, network, cancelActive, blockPeds, blockVehicles) {
    return AddScenarioBlockingArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ, network, cancelActive, blockPeds, blockVehicles);
}
/**
 * ```
 * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
 * ```
 * Hash: 0xF372BC22FCB88606 | ApiSet: undefined
 */
export function addRelationshipGroup(name) {
    return AddRelationshipGroup(name);
}
/**
 * ```
 * damages a ped with the given amount
 * ----
 * armorFirst means it will damage/lower the armor first before damaging the player.
 * setting damageAmount to a negative amount will cause the player or the armor (depending on armorFirst) to be healed by damageAmount instead.
 * ```
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0x697157CED63F18D4 | ApiSet: undefined
 */
export function applyDamageToPed(ped, damageAmount, armorFirst) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ApplyDamageToPed(_ped, damageAmount, armorFirst);
}
/**
 * ```
 * scar
 * blushing
 * cs_flush_anger
 * cs_flush_anger_face
 * bruise
 * bruise_large
 * herpes
 * ArmorBullet
 * basic_dirt_cloth
 * basic_dirt_skin
 * cs_trev1_dirt
 * ```
 * Hash: 0x397C38AA7B4A5F83 | ApiSet: undefined
 */
export function applyPedDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ApplyPedDamageDecal(_ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
}
/**
 * ```
 * Found one occurence in re_crashrescue.c4
 * `PED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, "wound_sheet");`
 * ```
 * Hash: 0x83F7E01C7B769A26 | ApiSet: undefined
 */
export function applyPedBlood(ped, boneIndex, xRot, yRot, zRot, woundType) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ApplyPedBlood(_ped, boneIndex, xRot, yRot, zRot, woundType);
}
/**
 * Hash: 0x816F6981C60BF53B | ApiSet: undefined
 */
export function applyPedBloodDamageByZone(ped, p1, p2, p3, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ApplyPedBloodDamageByZone(_ped, p1, p2, p3, p4);
}
/**
 * Hash: 0xE43A13C9E4CCCBCF | ApiSet: undefined
 */
export function blockPedDeadBodyShockingEvents(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    BlockPedDeadBodyShockingEvents(_ped, toggle);
}
/**
 * Hash: 0x3311E47B91EDCBBC | ApiSet: undefined
 */
export function applyPedBloodByZone(ped, p1, p2, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return ApplyPedBloodByZone(_ped, p1, p2, p3);
}
/**
 * Hash: 0xEACEEDA81751915C | ApiSet: undefined
 */
export function canCreateRandomBikeRider() {
    return CanCreateRandomBikeRider();
}
/**
 * Applies blood damage to a ped with specific parameters for zone, UV offsets, rotation, scale, and initial aging.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xEF0D582CBF2D9B0F | ApiSet: undefined
 */
export function applyPedBloodSpecific(ped, component, u, v, rotation, scale, forcedFrame, preAge, bloodName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ApplyPedBloodSpecific(_ped, component, u, v, rotation, scale, forcedFrame, preAge, bloodName);
}
/**
 * Hash: 0x5EE2CAFF7F17770D | ApiSet: undefined
 */
export function canCreateRandomCops() {
    return CanCreateRandomCops();
}
/**
 * ```
 * Damage Packs:
 * "SCR_TrevorTreeBang"
 * "HOSPITAL_0"
 * "HOSPITAL_1"
 * "HOSPITAL_2"
 * "HOSPITAL_3"
 * "HOSPITAL_4"
 * "HOSPITAL_5"
 * "HOSPITAL_6"
 * "HOSPITAL_7"
 * "HOSPITAL_8"
 * "HOSPITAL_9"
 * "SCR_Dumpster"
 * "BigHitByVehicle"
 * "SCR_Finale_Michael_Face"
 * "SCR_Franklin_finb"
 * "SCR_Finale_Michael"
 * "SCR_Franklin_finb2"
 * "Explosion_Med"
 * "SCR_Torture"
 * "SCR_TracySplash"
 * "Skin_Melee_0"
 * Additional damage packs:
 * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
 * ```
 * Hash: 0x46DF918788CB093F | ApiSet: undefined
 */
export function applyPedDamagePack(ped, damagePack, damage, mult) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ApplyPedDamagePack(_ped, damagePack, damage, mult);
}
/**
 * Hash: 0xB8EB95E5B4E56978 | ApiSet: undefined
 */
export function canCreateRandomDriver() {
    return CanCreateRandomDriver();
}
/**
 * ```
 * Prevents the ped from going limp.
 * [Example: Can prevent peds from falling when standing on moving vehicles.]
 * ```
 * Hash: 0x128F79EDCECE4FD5 | ApiSet: undefined
 */
export function canPedRagdoll(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return CanPedRagdoll(_ped);
}
/**
 * Hash: 0x272E4723B56A3B96 | ApiSet: undefined
 */
export function attachSynchronizedSceneToEntity(sceneID, entity, boneIndex) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    AttachSynchronizedSceneToEntity(sceneID, _entity, boneIndex);
}
/**
 * Hash: 0x6CD5A433374D4CFB | ApiSet: undefined
 */
export function canPedSeeHatedPed(ped1, ped2) {
    const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
    const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
    return CanPedSeeHatedPed(_ped1, _ped2);
}
/**
 * Hash: 0xE6CA85E7259CE16B | ApiSet: undefined
 */
export function clearAllPedVehicleForcedSeatUsage(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearAllPedVehicleForcedSeatUsage(_ped);
}
/**
 * Hash: 0x3E8349C08E4B82E4 | ApiSet: undefined
 */
export function canCreateRandomPed(unk) {
    return CanCreateRandomPed(unk);
}
/**
 * Hash: 0xEAD42DE3610D0721 | ApiSet: undefined
 */
export function canPedInCombatSeeTarget(ped, target) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    return CanPedInCombatSeeTarget(_ped, _target);
}
/**
 * Hash: 0x726256CC1EEB182F | ApiSet: undefined
 */
export function clearFacialIdleAnimOverride(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearFacialIdleAnimOverride(_ped);
}
/**
 * Hash: 0x51AC07A44D4F5B8A | ApiSet: undefined
 */
export function canKnockPedOffVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return CanKnockPedOffVehicle(_ped);
}
/**
 * Hash: 0x8844BBFCE30AA9E9 | ApiSet: undefined
 */
export function clearPedAlternateWalkAnim(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedAlternateWalkAnim(_ped, p1);
}
/**
 * Hash: 0xCD8A7537A9B52F06 | ApiSet: undefined
 */
export function clearAllPedProps(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearAllPedProps(_ped);
}
/**
 * ```
 * CLEAR_PED_*
 * ```
 * Hash: 0xC79196DCB36F6121 | ApiSet: undefined
 */
export function clearPedCoverClipsetOverride(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedCoverClipsetOverride(_ped);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x637822DC2AFEEBF8 | ApiSet: undefined
 */
export function clearFacialClipsetOverride(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearFacialClipsetOverride(_ped);
}
/**
 * Hash: 0x4AFE3690D7E0B5AC | ApiSet: undefined
 */
export function clearPedDriveByClipsetOverride(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedDriveByClipsetOverride(_ped);
}
/**
 * Hash: 0x6585D955A68452A5 | ApiSet: undefined
 */
export function clearPedEnvDirt(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedEnvDirt(_ped);
}
/**
 * Hash: 0xD8D19675ED5FBDCE | ApiSet: undefined
 */
export function clearPedAlternateMovementAnim(ped, stance, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedAlternateMovementAnim(_ped, stance, p2);
}
/**
 * Clears the blood on a ped.
 * Hash: 0x8FE22675A5A45817 | ApiSet: undefined
 */
export function clearPedBloodDamage(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedBloodDamage(_ped);
}
/**
 * Hash: 0xE3B27E70CEAB9F0C | ApiSet: undefined
 */
export function clearPedDecorationsLeaveScars(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedDecorationsLeaveScars(_ped);
}
/**
 * Hash: 0x0E5173C163976E38 | ApiSet: undefined
 */
export function clearPedDecorations(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedDecorations(_ped);
}
/**
 * ```
 * Somehow related to changing ped's clothes.
 * ```
 * Hash: 0x56E3B78C5408D9F4 | ApiSet: undefined
 */
export function clearPedBloodDamageByZone(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedBloodDamageByZone(_ped, p1);
}
/**
 * Hash: 0x1280804F7CFD2D6C | ApiSet: undefined
 */
export function clearPedParachutePackVariation(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedParachutePackVariation(_ped);
}
/**
 * ```
 * p1: from 0 to 5 in the b617d scripts.
 * p2: "blushing" and "ALL" found in the b617d scripts.
 * ```
 * Hash: 0x523C79AEEFCC4A2A | ApiSet: undefined
 */
export function clearPedDamageDecalByZone(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedDamageDecalByZone(_ped, p1, p2);
}
/**
 * Hash: 0x0943E5B8E078E76E | ApiSet: undefined
 */
export function clearPedProp(ped, propId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedProp(_ped, propId);
}
/**
 * Hash: 0x8EF6B7AC68E2F01B | ApiSet: undefined
 */
export function clearPedLastDamageBone(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedLastDamageBone(_ped);
}
/**
 * ```
 * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
 * ```
 * Hash: 0x9C720776DAA43E7E | ApiSet: undefined
 */
export function clearPedWetness(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedWetness(_ped);
}
/**
 * ```
 * Clears the relationship between two groups. This should be called twice (once for each group).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 * Example:
 * `PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);`
 * `PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);`
 * ```
 * Hash: 0x5E29243FB56FC6D4 | ApiSet: undefined
 */
export function clearRelationshipBetweenGroups(relationship, group1, group2) {
    if (typeof group1 === 'string')
        group1 = this.getHashKey(group1);
    if (typeof group2 === 'string')
        group2 = this.getHashKey(group2);
    ClearRelationshipBetweenGroups(relationship, group1, group2);
}
/**
 * Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
 * Hash: 0xB50EB4CCB29704AC | ApiSet: undefined
 */
export function clearPedScubaGearVariation(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedScubaGearVariation(_ped);
}
/**
 * Hash: 0x2E05208086BA0651 | ApiSet: undefined
 */
export function clearPedNonCreationArea() {
    ClearPedNonCreationArea();
}
/**
 * ```
 * There seem to be 26 flags
 * ```
 * Hash: 0xD86D101FCFD00A4B | ApiSet: undefined
 */
export function clearRagdollBlockingFlags(ped, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearRagdollBlockingFlags(_ped, flags);
}
/**
 * Hash: 0x687C0B594907D2E8 | ApiSet: undefined
 */
export function clearPedStoredHatProp(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedStoredHatProp(_ped);
}
/**
 * Used one time in fmmc_launcher.c instead of CLONE_PED because ?
 * Hash: 0x668FD40BCBA5DE48 | ApiSet: undefined
 */
export function clonePedEx(ped, heading, isNetwork, bScriptHostPed, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return ClonePedEx(_ped, heading, isNetwork, bScriptHostPed, p4);
}
/**
 * Creates a copy of the passed ped, optionally setting it as local and/or shallow-copying the head blend data.
 * Hash: 0xEF29A16337FACADB | ApiSet: undefined
 */
export function clonePed(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return ClonePed(_ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
}
/**
 * ```
 * Creates a new NaturalMotion message.
 * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
 * messageId: The ID of the NaturalMotion message.
 * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
 * ```
 * Hash: 0x418EF2A1BCE56685 | ApiSet: undefined
 */
export function createNmMessage(startImmediately, messageId) {
    CreateNmMessage(startImmediately, messageId);
}
/**
 * ```
 * Copies ped's components and props to targetPed.
 * ```
 * Hash: 0xE952D6431689AD9A | ApiSet: undefined
 */
export function clonePedToTarget(ped, targetPed) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    ClonePedToTarget(_ped, _targetPed);
}
/**
 * ```
 * Creates a new ped group.
 * Groups can contain up to 8 peds.
 * The parameter is unused.
 * Returns a handle to the created group, or 0 if a group couldn't be created.
 * ```
 * Hash: 0x90370EBE0FEE1A3D | ApiSet: undefined
 */
export function createGroup(unused) {
    return CreateGroup(unused);
}
/**
 * Hash: 0x148B08C2D2ACB884 | ApiSet: undefined
 */
export function clonePedToTargetEx(ped, targetPed, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    ClonePedToTargetEx(_ped, _targetPed, p2);
}
/**
 * ```
 * vb.net
 * Dim ped_handle As Integer
 * With Game.Player.Character
 * Dim pos As Vector3 = .Position + .ForwardVector * 3
 * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
 * End With
 * Creates a Ped at the specified location, returns the Ped Handle.
 * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
 * ```
 * Hash: 0xB4AC7D0CF06BFE8F | ApiSet: undefined
 */
export function createRandomPed(posX, posY, posZ) {
    return CreateRandomPed(posX, posY, posZ);
}
/**
 * Hash: 0x8C4F3BF23B6237DB | ApiSet: undefined
 */
export function createParachuteBagObject(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return CreateParachuteBagObject(_ped, p1, p2);
}
/**
 * Hash: 0x7DD959874C1FD534 | ApiSet: undefined
 */
export function createPedInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreatePedInsideVehicle(_vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);
}
/**
 * Hash: 0x62EC273D00187DCA | ApiSet: undefined
 */
export function createSynchronizedScene2(position, radius, object) {
    if (typeof object === 'string')
        object = this.getHashKey(object);
    return CreateSynchronizedScene2(position.x, position.y, position.z, radius, object);
}
/**
 * Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading.
 * This ped will initially be owned by the creating script as a mission entity, and the model should be loaded already
 * (e.g. using REQUEST_MODEL).
 * Hash: 0xD49F9B0955C367DE | ApiSet: undefined
 */
export function createPed(pedType, modelHash, position, heading, isNetwork, bScriptHostPed) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreatePed(pedType, modelHash, position.x, position.y, position.z, heading, isNetwork, bScriptHostPed);
}
/**
 * ```
 * p6 always 2 (but it doesnt seem to matter...)
 * roll and pitch 0
 * yaw to Ped.rotation
 * ```
 * Hash: 0x8C18E0F9080ADD73 | ApiSet: undefined
 */
export function createSynchronizedScene(position, roll, pitch, yaw, p6) {
    return CreateSynchronizedScene(position.x, position.y, position.z, roll, pitch, yaw, p6);
}
/**
 * Hash: 0xA21C118553BBDF02 | ApiSet: undefined
 */
export function disableHeadBlendPaletteColor(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    DisableHeadBlendPaletteColor(_ped);
}
/**
 * Hash: 0x9B62392B474F44A0 | ApiSet: undefined
 */
export function createRandomPedAsDriver(vehicle, returnHandle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return CreateRandomPedAsDriver(_vehicle, returnHandle);
}
/**
 * Hash: 0x6D38F1F04CBB37EA | ApiSet: undefined
 */
export function detachSynchronizedScene(sceneID) {
    DetachSynchronizedScene(sceneID);
}
/**
 * Hash: 0x600048C60D5C2C51 | ApiSet: undefined
 */
export function disablePedHeatscaleOverride(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    DisablePedHeatscaleOverride(_ped);
}
/**
 * ```
 * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
 * ```
 * Hash: 0x9614299DCB53E54B | ApiSet: undefined
 */
export function deletePed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    DeletePed(_ped);
}
/**
 * Hash: 0xCC6E3B6BB69501F1 | ApiSet: undefined
 */
export function doesRelationshipGroupExist(groupHash) {
    if (typeof groupHash === 'string')
        groupHash = this.getHashKey(groupHash);
    return DoesRelationshipGroupExist(groupHash);
}
/**
 * Hash: 0xAFF4710E2A0A6C12 | ApiSet: undefined
 */
export function dropAmbientProp(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    DropAmbientProp(_ped);
}
/**
 * Hash: 0x7C6B0C22F9F40BBE | ApiSet: undefined
 */
export function doesGroupExist(groupId) {
    return DoesGroupExist(groupId);
}
/**
 * Hash: 0x4668D80430D6C299 | ApiSet: undefined
 */
export function finalizeHeadBlend(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    FinalizeHeadBlend(_ped);
}
/**
 * Hash: 0x8A24B067D175A7BD | ApiSet: undefined
 */
export function doesScenarioBlockingAreaExist(x1, y1, z1, x2, y2, z2) {
    return DoesScenarioBlockingAreaExist(x1, y1, z1, x2, y2, z2);
}
/**
 * Hash: 0x2208438012482A1A | ApiSet: undefined
 */
export function forcePedAiAndAnimationUpdate(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ForcePedAiAndAnimationUpdate(_ped, p1, p2);
}
/**
 * Applies lethal damage (FLT_MAX) to the `SKEL_Head` bone of the specified ped using the weapon passed, leading to the
 * ped's untimely demise.
 * The naming of the native is a legacy leftover (formerly EXPLODE_CHAR_HEAD in GTA3) as in the early 3D GTA games, lethal
 * damage to a ped head would 'explode' it.
 * Do note that this native function does not work in multiplayer/network environment.
 * Hash: 0x2D05CED3A38D0F3A | ApiSet: undefined
 */
export function explodePedHead(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    ExplodePedHead(_ped, weaponHash);
}
/**
 * ```cpp
 * enum ePedMotionState
 * {
 * MOTIONSTATE_NONE = -294553821, // MotionState_None
 * MOTIONSTATE_IDLE = -1871534317, // MotionState_Idle
 * MOTIONSTATE_WALK = -668482597, // MotionState_Walk
 * MOTIONSTATE_RUN = -530524, // MotionState_Run
 * MOTIONSTATE_SPRINT = -1115154469, // MotionState_Sprint
 * MOTIONSTATE_CROUCH_IDLE = 1140525470, // MotionState_Crouch_Idle
 * MOTIONSTATE_CROUCH_WALK = 147004056, // MotionState_Crouch_Walk
 * MOTIONSTATE_CROUCH_RUN = 898879241, // MotionState_Crouch_Run
 * MOTIONSTATE_DONOTHING = 247561816, // MotionState_DoNothing
 * MOTIONSTATE_ANIMATEDVELOCITY = 1427811395, // MotionState_AnimatedVelocity
 * MOTIONSTATE_INVEHICLE = -1797663347, // MotionState_InVehicle
 * MOTIONSTATE_AIMING = 1063765679, // MotionState_Aiming
 * MOTIONSTATE_DIVING_IDLE = 1212730861, // MotionState_Diving_Idle
 * MOTIONSTATE_DIVING_SWIM = -1855028596, // MotionState_Diving_Swim
 * MOTIONSTATE_SWIMMING_TREADWATER = -776007225, // MotionState_Swimming_TreadWater
 * MOTIONSTATE_DEAD = 230360860, // MotionState_Dead
 * MOTIONSTATE_STEALTH_IDLE = 1110276645, // MotionState_Stealth_Idle
 * MOTIONSTATE_STEALTH_WALK = 69908130, // MotionState_Stealth_Walk
 * MOTIONSTATE_STEALTH_RUN = -83133983, // MotionState_Stealth_Run
 * MOTIONSTATE_PARACHUTING = -1161760501, // MotionState_Parachuting
 * MOTIONSTATE_ACTIONMODE_IDLE = -633298724, // MotionState_ActionMode_Idle
 * MOTIONSTATE_ACTIONMODE_WALK = -762290521, // MotionState_ActionMode_Walk
 * MOTIONSTATE_ACTIONMODE_RUN = 834330132, // MotionState_ActionMode_Run
 * MOTIONSTATE_JETPACK = 1398696542 // MotionState_Jetpack
 * }
 * ```
 * Hash: 0xF28965D04F570DCA | ApiSet: undefined
 */
export function forcePedMotionState(ped, motionStateHash, shouldReset, updateState, forceAIPreCameraUpdate) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof motionStateHash === 'string')
        motionStateHash = this.getHashKey(motionStateHash);
    return ForcePedMotionState(_ped, motionStateHash, shouldReset, updateState, forceAIPreCameraUpdate);
}
/**
 * ```
 * p0: Ped Handle
 * p1: int i | 0 <= i <= 27
 * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
 * <BlindFireChance value="0.1"/>
 * <WeaponShootRateModifier value="1.0"/>
 * <TimeBetweenBurstsInCover value="1.25"/>
 * <BurstDurationInCover value="2.0"/>
 * <TimeBetweenPeeks value="10.0"/>
 * <WeaponAccuracy value="0.18"/>
 * <FightProficiency value="0.8"/>
 * <StrafeWhenMovingChance value="1.0"/>
 * <WalkWhenStrafingChance value="0.0"/>
 * <AttackWindowDistanceForCover value="55.0"/>
 * <TimeToInvalidateInjuredTarget value="9.0"/>
 * <TriggerChargeTime_Near value="4.0"/>
 * <TriggerChargeTime_Far value="10.0"/>
 * -------------Confirmed by editing combatbehavior.meta:
 * p1:
 * 0=BlindFireChance
 * 1=BurstDurationInCover
 * 3=TimeBetweenBurstsInCover
 * 4=TimeBetweenPeeks
 * 5=StrafeWhenMovingChance
 * 8=WalkWhenStrafingChance
 * 11=AttackWindowDistanceForCover
 * 12=TimeToInvalidateInjuredTarget
 * 16=OptimalCoverDistance
 * ```
 * Hash: 0x52DFF8A10508090A | ApiSet: undefined
 */
export function getCombatFloat(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetCombatFloat(_ped, p1);
}
/**
 * Hash: 0xFF287323B0E2C69A | ApiSet: undefined
 */
export function freezePedCameraRotation(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    FreezePedCameraRotation(_ped);
}
/**
 * Hash: 0x16E42E800B472221 | ApiSet: undefined
 */
export function forcePedToOpenParachute(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ForcePedToOpenParachute(_ped);
}
/**
 * Hash: 0xCD5003B097200F36 | ApiSet: undefined
 */
export function getDeadPedPickupCoords(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return new Vector3(GetDeadPedPickupCoords(_ped, p1, p2));
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0xBE22B26DD764C040 | ApiSet: undefined
 */
export function getAnimInitialOffsetPosition(animDict, animName, position, xRot, yRot, zRot, p8, p9) {
    return new Vector3(GetAnimInitialOffsetPosition(animDict, animName, position.x, position.y, position.z, xRot, yRot, zRot, p8, p9));
}
/**
 * ```
 * p1 may be a BOOL representing whether or not the group even exists
 * ```
 * Hash: 0x8DE69FE35CA09A45 | ApiSet: undefined
 */
export function getGroupSize(groupID) {
    return GetGroupSize(groupID);
}
/**
 * ```
 * Gets the closest ped in a radius.
 * Ped Types:
 * Any ped = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * ------------------
 * P4 P5 P7 P8
 * 1  0  x  x  = return nearest walking Ped
 * 1  x  0  x  = return nearest walking Ped
 * x  1  1  x  = return Ped you are using
 * 0  0  x  x  = no effect
 * 0  x  0  x  = no effect
 * x = can be 1 or 0. Does not have any obvious changes.
 * This function does not return ped who is:
 * 1. Standing still
 * 2. Driving
 * 3. Fleeing
 * 4. Attacking
 * This function only work if the ped is:
 * 1. walking normally.
 * 2. waiting to cross a road.
 * `Note: PED::GET_PED_NEARBY_PEDS works for more peds.`
 * ```
 * Hash: 0xC33AB876A77F8164 | ApiSet: undefined
 */
export function getClosestPed(position, radius, p4, p5, p7, p8, pedType) {
    return GetClosestPed(position.x, position.y, position.z, radius, p4, p5, p7, p8, pedType);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x4B805E6046EE9E47 | ApiSet: undefined
 */
export function getAnimInitialOffsetRotation(animDict, animName, position, xRot, yRot, zRot, p8, p9) {
    return new Vector3(GetAnimInitialOffsetRotation(animDict, animName, position.x, position.y, position.z, xRot, yRot, zRot, p8, p9));
}
/**
 * ```
 * Function just returns 0
 * void __fastcall ped__get_mount(NativeContext *a1)
 * {
 * NativeContext *v1; // rbx@1
 * v1 = a1;
 * GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
 * v1->Returns->Item1= 0;
 * }
 * ```
 * Hash: 0xE7E11B8DCBED1058 | ApiSet: undefined
 */
export function getMount(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetMount(_ped);
}
/**
 * Hash: 0x5486A79D9FBD342D | ApiSet: undefined
 */
export function getJackTarget(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetJackTarget(_ped);
}
/**
 * Hash: 0x18A3E9EE1297FD39 | ApiSet: undefined
 */
export function getMeleeTargetForPed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetMeleeTargetForPed(_ped);
}
/**
 * ```
 * Used for freemode (online) characters.
 * ```
 * Hash: 0xE5C0CF872C2AD150 | ApiSet: undefined
 */
export function getNumHairColors() {
    return GetNumHairColors();
}
/**
 * ```
 * Need to check behavior when drawableId = -1
 * ```
 * Hash: 0xA6E7F1CEB523E171 | ApiSet: undefined
 */
export function getNumberOfPedPropTextureVariations(ped, propId, drawableId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetNumberOfPedPropTextureVariations(_ped, propId, drawableId);
}
/**
 * Hash: 0xD1F7CA1535D22818 | ApiSet: undefined
 */
export function getNumMakeupColors() {
    return GetNumMakeupColors();
}
/**
 * Hash: 0x27561561732A7842 | ApiSet: undefined
 */
export function getNumberOfPedDrawableVariations(ped, componentId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetNumberOfPedDrawableVariations(_ped, componentId);
}
/**
 * Hash: 0x8F7156A3142A6BAD | ApiSet: undefined
 */
export function getNumberOfPedTextureVariations(ped, componentId, drawableId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetNumberOfPedTextureVariations(_ped, componentId, drawableId);
}
/**
 * Hash: 0x9483AF821605B1D8 | ApiSet: undefined
 */
export function getPedArmour(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedArmour(_ped);
}
/**
 * Hash: 0x5FAF9754E789FB47 | ApiSet: undefined
 */
export function getNumberOfPedPropDrawableVariations(ped, propId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetNumberOfPedPropDrawableVariations(_ped, propId);
}
/**
 * ```
 * from fm_mission_controller.c4 (variable names changed for clarity):
 * `int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());`
 * `PED::GET_GROUP_SIZE(group, &unused, &groupSize);`
 * if (groupSize >= 1) {
 * . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
 * `. . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);`
 * . . . . . . . . //and so on
 * ```
 * Hash: 0x51455483CF23ED97 | ApiSet: undefined
 */
export function getPedAsGroupMember(groupID, memberNumber) {
    return GetPedAsGroupMember(groupID, memberNumber);
}
/**
 * Hash: 0x37F4AD56ECBC0CD6 | ApiSet: undefined
 */
export function getPedAccuracy(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedAccuracy(_ped);
}
/**
 * ```
 * Returns the ped's alertness (0-3).
 * Values :
 * 0 : Neutral
 * 1 : Heard something (gun shot, hit, etc)
 * 2 : Knows (the origin of the event)
 * 3 : Fully alerted (is facing the event?)
 * If the Ped does not exist, returns -1.
 * ```
 * Hash: 0xF6AA118530443FD2 | ApiSet: undefined
 */
export function getPedAlertness(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedAlertness(_ped);
}
/**
 * Hash: 0xF9D9F7F2DB8E2FA0 | ApiSet: undefined
 */
export function getPedCombatRange(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedCombatRange(_ped);
}
/**
 * ```cpp
 * enum ePedBoneId : uint16_t
 * {
 * SKEL_ROOT = 0x0,
 * SKEL_Pelvis = 0x2E28,
 * SKEL_L_Thigh = 0xE39F,
 * SKEL_L_Calf = 0xF9BB,
 * SKEL_L_Foot = 0x3779,
 * SKEL_L_Toe0 = 0x83C,
 * EO_L_Foot = 0x84C5,
 * EO_L_Toe = 0x68BD,
 * IK_L_Foot = 0xFEDD,
 * PH_L_Foot = 0xE175,
 * MH_L_Knee = 0xB3FE,
 * SKEL_R_Thigh = 0xCA72,
 * SKEL_R_Calf = 0x9000,
 * SKEL_R_Foot = 0xCC4D,
 * SKEL_R_Toe0 = 0x512D,
 * EO_R_Foot = 0x1096,
 * EO_R_Toe = 0x7163,
 * IK_R_Foot = 0x8AAE,
 * PH_R_Foot = 0x60E6,
 * MH_R_Knee = 0x3FCF,
 * RB_L_ThighRoll = 0x5C57,
 * RB_R_ThighRoll = 0x192A,
 * SKEL_Spine_Root = 0xE0FD,
 * SKEL_Spine0 = 0x5C01,
 * SKEL_Spine1 = 0x60F0,
 * SKEL_Spine2 = 0x60F1,
 * SKEL_Spine3 = 0x60F2,
 * SKEL_L_Clavicle = 0xFCD9,
 * SKEL_L_UpperArm = 0xB1C5,
 * SKEL_L_Forearm = 0xEEEB,
 * SKEL_L_Hand = 0x49D9,
 * SKEL_L_Finger00 = 0x67F2,
 * SKEL_L_Finger01 = 0xFF9,
 * SKEL_L_Finger02 = 0xFFA,
 * SKEL_L_Finger10 = 0x67F3,
 * SKEL_L_Finger11 = 0x1049,
 * SKEL_L_Finger12 = 0x104A,
 * SKEL_L_Finger20 = 0x67F4,
 * SKEL_L_Finger21 = 0x1059,
 * SKEL_L_Finger22 = 0x105A,
 * SKEL_L_Finger30 = 0x67F5,
 * SKEL_L_Finger31 = 0x1029,
 * SKEL_L_Finger32 = 0x102A,
 * SKEL_L_Finger40 = 0x67F6,
 * SKEL_L_Finger41 = 0x1039,
 * SKEL_L_Finger42 = 0x103A,
 * PH_L_Hand = 0xEB95,
 * IK_L_Hand = 0x8CBD,
 * RB_L_ForeArmRoll = 0xEE4F,
 * RB_L_ArmRoll = 0x1470,
 * MH_L_Elbow = 0x58B7,
 * SKEL_R_Clavicle = 0x29D2,
 * SKEL_R_UpperArm = 0x9D4D,
 * SKEL_R_Forearm = 0x6E5C,
 * SKEL_R_Hand = 0xDEAD,
 * SKEL_R_Finger00 = 0xE5F2,
 * SKEL_R_Finger01 = 0xFA10,
 * SKEL_R_Finger02 = 0xFA11,
 * SKEL_R_Finger10 = 0xE5F3,
 * SKEL_R_Finger11 = 0xFA60,
 * SKEL_R_Finger12 = 0xFA61,
 * SKEL_R_Finger20 = 0xE5F4,
 * SKEL_R_Finger21 = 0xFA70,
 * SKEL_R_Finger22 = 0xFA71,
 * SKEL_R_Finger30 = 0xE5F5,
 * SKEL_R_Finger31 = 0xFA40,
 * SKEL_R_Finger32 = 0xFA41,
 * SKEL_R_Finger40 = 0xE5F6,
 * SKEL_R_Finger41 = 0xFA50,
 * SKEL_R_Finger42 = 0xFA51,
 * PH_R_Hand = 0x6F06,
 * IK_R_Hand = 0x188E,
 * RB_R_ForeArmRoll = 0xAB22,
 * RB_R_ArmRoll = 0x90FF,
 * MH_R_Elbow = 0xBB0,
 * SKEL_Neck_1 = 0x9995,
 * SKEL_Head = 0x796E,
 * IK_Head = 0x322C,
 * FACIAL_facialRoot = 0xFE2C,
 * FB_L_Brow_Out_000 = 0xE3DB,
 * FB_L_Lid_Upper_000 = 0xB2B6,
 * FB_L_Eye_000 = 0x62AC,
 * FB_L_CheekBone_000 = 0x542E,
 * FB_L_Lip_Corner_000 = 0x74AC,
 * FB_R_Lid_Upper_000 = 0xAA10,
 * FB_R_Eye_000 = 0x6B52,
 * FB_R_CheekBone_000 = 0x4B88,
 * FB_R_Brow_Out_000 = 0x54C,
 * FB_R_Lip_Corner_000 = 0x2BA6,
 * FB_Brow_Centre_000 = 0x9149,
 * FB_UpperLipRoot_000 = 0x4ED2,
 * FB_UpperLip_000 = 0xF18F,
 * FB_L_Lip_Top_000 = 0x4F37,
 * FB_R_Lip_Top_000 = 0x4537,
 * FB_Jaw_000 = 0xB4A0,
 * FB_LowerLipRoot_000 = 0x4324,
 * FB_LowerLip_000 = 0x508F,
 * FB_L_Lip_Bot_000 = 0xB93B,
 * FB_R_Lip_Bot_000 = 0xC33B,
 * FB_Tongue_000 = 0xB987,
 * RB_Neck_1 = 0x8B93,
 * SPR_L_Breast = 0xFC8E,
 * SPR_R_Breast = 0x885F,
 * IK_Root = 0xDD1C,
 * SKEL_Neck_2 = 0x5FD4,
 * SKEL_Pelvis1 = 0xD003,
 * SKEL_PelvisRoot = 0x45FC,
 * SKEL_SADDLE = 0x9524,
 * MH_L_CalfBack = 0x1013,
 * MH_L_ThighBack = 0x600D,
 * SM_L_Skirt = 0xC419,
 * MH_R_CalfBack = 0xB013,
 * MH_R_ThighBack = 0x51A3,
 * SM_R_Skirt = 0x7712,
 * SM_M_BackSkirtRoll = 0xDBB,
 * SM_L_BackSkirtRoll = 0x40B2,
 * SM_R_BackSkirtRoll = 0xC141,
 * SM_M_FrontSkirtRoll = 0xCDBB,
 * SM_L_FrontSkirtRoll = 0x9B69,
 * SM_R_FrontSkirtRoll = 0x86F1,
 * SM_CockNBalls_ROOT = 0xC67D,
 * SM_CockNBalls = 0x9D34,
 * MH_L_Finger00 = 0x8C63,
 * MH_L_FingerBulge00 = 0x5FB8,
 * MH_L_Finger10 = 0x8C53,
 * MH_L_FingerTop00 = 0xA244,
 * MH_L_HandSide = 0xC78A,
 * MH_Watch = 0x2738,
 * MH_L_Sleeve = 0x933C,
 * MH_R_Finger00 = 0x2C63,
 * MH_R_FingerBulge00 = 0x69B8,
 * MH_R_Finger10 = 0x2C53,
 * MH_R_FingerTop00 = 0xEF4B,
 * MH_R_HandSide = 0x68FB,
 * MH_R_Sleeve = 0x92DC,
 * FACIAL_jaw = 0xB21,
 * FACIAL_underChin = 0x8A95,
 * FACIAL_L_underChin = 0x234E,
 * FACIAL_chin = 0xB578,
 * FACIAL_chinSkinBottom = 0x98BC,
 * FACIAL_L_chinSkinBottom = 0x3E8F,
 * FACIAL_R_chinSkinBottom = 0x9E8F,
 * FACIAL_tongueA = 0x4A7C,
 * FACIAL_tongueB = 0x4A7D,
 * FACIAL_tongueC = 0x4A7E,
 * FACIAL_tongueD = 0x4A7F,
 * FACIAL_tongueE = 0x4A80,
 * FACIAL_L_tongueE = 0x35F2,
 * FACIAL_R_tongueE = 0x2FF2,
 * FACIAL_L_tongueD = 0x35F1,
 * FACIAL_R_tongueD = 0x2FF1,
 * FACIAL_L_tongueC = 0x35F0,
 * FACIAL_R_tongueC = 0x2FF0,
 * FACIAL_L_tongueB = 0x35EF,
 * FACIAL_R_tongueB = 0x2FEF,
 * FACIAL_L_tongueA = 0x35EE,
 * FACIAL_R_tongueA = 0x2FEE,
 * FACIAL_chinSkinTop = 0x7226,
 * FACIAL_L_chinSkinTop = 0x3EB3,
 * FACIAL_chinSkinMid = 0x899A,
 * FACIAL_L_chinSkinMid = 0x4427,
 * FACIAL_L_chinSide = 0x4A5E,
 * FACIAL_R_chinSkinMid = 0xF5AF,
 * FACIAL_R_chinSkinTop = 0xF03B,
 * FACIAL_R_chinSide = 0xAA5E,
 * FACIAL_R_underChin = 0x2BF4,
 * FACIAL_L_lipLowerSDK = 0xB9E1,
 * FACIAL_L_lipLowerAnalog = 0x244A,
 * FACIAL_L_lipLowerThicknessV = 0xC749,
 * FACIAL_L_lipLowerThicknessH = 0xC67B,
 * FACIAL_lipLowerSDK = 0x7285,
 * FACIAL_lipLowerAnalog = 0xD97B,
 * FACIAL_lipLowerThicknessV = 0xC5BB,
 * FACIAL_lipLowerThicknessH = 0xC5ED,
 * FACIAL_R_lipLowerSDK = 0xA034,
 * FACIAL_R_lipLowerAnalog = 0xC2D9,
 * FACIAL_R_lipLowerThicknessV = 0xC6E9,
 * FACIAL_R_lipLowerThicknessH = 0xC6DB,
 * FACIAL_nose = 0x20F1,
 * FACIAL_L_nostril = 0x7322,
 * FACIAL_L_nostrilThickness = 0xC15F,
 * FACIAL_noseLower = 0xE05A,
 * FACIAL_L_noseLowerThickness = 0x79D5,
 * FACIAL_R_noseLowerThickness = 0x7975,
 * FACIAL_noseTip = 0x6A60,
 * FACIAL_R_nostril = 0x7922,
 * FACIAL_R_nostrilThickness = 0x36FF,
 * FACIAL_noseUpper = 0xA04F,
 * FACIAL_L_noseUpper = 0x1FB8,
 * FACIAL_noseBridge = 0x9BA3,
 * FACIAL_L_nasolabialFurrow = 0x5ACA,
 * FACIAL_L_nasolabialBulge = 0xCD78,
 * FACIAL_L_cheekLower = 0x6907,
 * FACIAL_L_cheekLowerBulge1 = 0xE3FB,
 * FACIAL_L_cheekLowerBulge2 = 0xE3FC,
 * FACIAL_L_cheekInner = 0xE7AB,
 * FACIAL_L_cheekOuter = 0x8161,
 * FACIAL_L_eyesackLower = 0x771B,
 * FACIAL_L_eyeball = 0x1744,
 * FACIAL_L_eyelidLower = 0x998C,
 * FACIAL_L_eyelidLowerOuterSDK = 0xFE4C,
 * FACIAL_L_eyelidLowerOuterAnalog = 0xB9AA,
 * FACIAL_L_eyelashLowerOuter = 0xD7F6,
 * FACIAL_L_eyelidLowerInnerSDK = 0xF151,
 * FACIAL_L_eyelidLowerInnerAnalog = 0x8242,
 * FACIAL_L_eyelashLowerInner = 0x4CCF,
 * FACIAL_L_eyelidUpper = 0x97C1,
 * FACIAL_L_eyelidUpperOuterSDK = 0xAF15,
 * FACIAL_L_eyelidUpperOuterAnalog = 0x67FA,
 * FACIAL_L_eyelashUpperOuter = 0x27B7,
 * FACIAL_L_eyelidUpperInnerSDK = 0xD341,
 * FACIAL_L_eyelidUpperInnerAnalog = 0xF092,
 * FACIAL_L_eyelashUpperInner = 0x9B1F,
 * FACIAL_L_eyesackUpperOuterBulge = 0xA559,
 * FACIAL_L_eyesackUpperInnerBulge = 0x2F2A,
 * FACIAL_L_eyesackUpperOuterFurrow = 0xC597,
 * FACIAL_L_eyesackUpperInnerFurrow = 0x52A7,
 * FACIAL_forehead = 0x9218,
 * FACIAL_L_foreheadInner = 0x843,
 * FACIAL_L_foreheadInnerBulge = 0x767C,
 * FACIAL_L_foreheadOuter = 0x8DCB,
 * FACIAL_skull = 0x4221,
 * FACIAL_foreheadUpper = 0xF7D6,
 * FACIAL_L_foreheadUpperInner = 0xCF13,
 * FACIAL_L_foreheadUpperOuter = 0x509B,
 * FACIAL_R_foreheadUpperInner = 0xCEF3,
 * FACIAL_R_foreheadUpperOuter = 0x507B,
 * FACIAL_L_temple = 0xAF79,
 * FACIAL_L_ear = 0x19DD,
 * FACIAL_L_earLower = 0x6031,
 * FACIAL_L_masseter = 0x2810,
 * FACIAL_L_jawRecess = 0x9C7A,
 * FACIAL_L_cheekOuterSkin = 0x14A5,
 * FACIAL_R_cheekLower = 0xF367,
 * FACIAL_R_cheekLowerBulge1 = 0x599B,
 * FACIAL_R_cheekLowerBulge2 = 0x599C,
 * FACIAL_R_masseter = 0x810,
 * FACIAL_R_jawRecess = 0x93D4,
 * FACIAL_R_ear = 0x1137,
 * FACIAL_R_earLower = 0x8031,
 * FACIAL_R_eyesackLower = 0x777B,
 * FACIAL_R_nasolabialBulge = 0xD61E,
 * FACIAL_R_cheekOuter = 0xD32,
 * FACIAL_R_cheekInner = 0x737C,
 * FACIAL_R_noseUpper = 0x1CD6,
 * FACIAL_R_foreheadInner = 0xE43,
 * FACIAL_R_foreheadInnerBulge = 0x769C,
 * FACIAL_R_foreheadOuter = 0x8FCB,
 * FACIAL_R_cheekOuterSkin = 0xB334,
 * FACIAL_R_eyesackUpperInnerFurrow = 0x9FAE,
 * FACIAL_R_eyesackUpperOuterFurrow = 0x140F,
 * FACIAL_R_eyesackUpperInnerBulge = 0xA359,
 * FACIAL_R_eyesackUpperOuterBulge = 0x1AF9,
 * FACIAL_R_nasolabialFurrow = 0x2CAA,
 * FACIAL_R_temple = 0xAF19,
 * FACIAL_R_eyeball = 0x1944,
 * FACIAL_R_eyelidUpper = 0x7E14,
 * FACIAL_R_eyelidUpperOuterSDK = 0xB115,
 * FACIAL_R_eyelidUpperOuterAnalog = 0xF25A,
 * FACIAL_R_eyelashUpperOuter = 0xE0A,
 * FACIAL_R_eyelidUpperInnerSDK = 0xD541,
 * FACIAL_R_eyelidUpperInnerAnalog = 0x7C63,
 * FACIAL_R_eyelashUpperInner = 0x8172,
 * FACIAL_R_eyelidLower = 0x7FDF,
 * FACIAL_R_eyelidLowerOuterSDK = 0x1BD,
 * FACIAL_R_eyelidLowerOuterAnalog = 0x457B,
 * FACIAL_R_eyelashLowerOuter = 0xBE49,
 * FACIAL_R_eyelidLowerInnerSDK = 0xF351,
 * FACIAL_R_eyelidLowerInnerAnalog = 0xE13,
 * FACIAL_R_eyelashLowerInner = 0x3322,
 * FACIAL_L_lipUpperSDK = 0x8F30,
 * FACIAL_L_lipUpperAnalog = 0xB1CF,
 * FACIAL_L_lipUpperThicknessH = 0x37CE,
 * FACIAL_L_lipUpperThicknessV = 0x38BC,
 * FACIAL_lipUpperSDK = 0x1774,
 * FACIAL_lipUpperAnalog = 0xE064,
 * FACIAL_lipUpperThicknessH = 0x7993,
 * FACIAL_lipUpperThicknessV = 0x7981,
 * FACIAL_L_lipCornerSDK = 0xB1C,
 * FACIAL_L_lipCornerAnalog = 0xE568,
 * FACIAL_L_lipCornerThicknessUpper = 0x7BC,
 * FACIAL_L_lipCornerThicknessLower = 0xDD42,
 * FACIAL_R_lipUpperSDK = 0x7583,
 * FACIAL_R_lipUpperAnalog = 0x51CF,
 * FACIAL_R_lipUpperThicknessH = 0x382E,
 * FACIAL_R_lipUpperThicknessV = 0x385C,
 * FACIAL_R_lipCornerSDK = 0xB3C,
 * FACIAL_R_lipCornerAnalog = 0xEE0E,
 * FACIAL_R_lipCornerThicknessUpper = 0x54C3,
 * FACIAL_R_lipCornerThicknessLower = 0x2BBA,
 * MH_MulletRoot = 0x3E73,
 * MH_MulletScaler = 0xA1C2,
 * MH_Hair_Scale = 0xC664,
 * MH_Hair_Crown = 0x1675,
 * SM_Torch = 0x8D6,
 * FX_Light = 0x8959,
 * FX_Light_Scale = 0x5038,
 * FX_Light_Switch = 0xE18E,
 * BagRoot = 0xAD09,
 * BagPivotROOT = 0xB836,
 * BagPivot = 0x4D11,
 * BagBody = 0xAB6D,
 * BagBone_R = 0x937,
 * BagBone_L = 0x991,
 * SM_LifeSaver_Front = 0x9420,
 * SM_R_Pouches_ROOT = 0x2962,
 * SM_R_Pouches = 0x4141,
 * SM_L_Pouches_ROOT = 0x2A02,
 * SM_L_Pouches = 0x4B41,
 * SM_Suit_Back_Flapper = 0xDA2D,
 * SPR_CopRadio = 0x8245,
 * SM_LifeSaver_Back = 0x2127,
 * MH_BlushSlider = 0xA0CE,
 * SKEL_Tail_01 = 0x347,
 * SKEL_Tail_02 = 0x348,
 * MH_L_Concertina_B = 0xC988,
 * MH_L_Concertina_A = 0xC987,
 * MH_R_Concertina_B = 0xC8E8,
 * MH_R_Concertina_A = 0xC8E7,
 * MH_L_ShoulderBladeRoot = 0x8711,
 * MH_L_ShoulderBlade = 0x4EAF,
 * MH_R_ShoulderBladeRoot = 0x3A0A,
 * MH_R_ShoulderBlade = 0x54AF,
 * FB_R_Ear_000 = 0x6CDF,
 * SPR_R_Ear = 0x63B6,
 * FB_L_Ear_000 = 0x6439,
 * SPR_L_Ear = 0x5B10,
 * FB_TongueA_000 = 0x4206,
 * FB_TongueB_000 = 0x4207,
 * FB_TongueC_000 = 0x4208,
 * SKEL_L_Toe1 = 0x1D6B,
 * SKEL_R_Toe1 = 0xB23F,
 * SKEL_Tail_03 = 0x349,
 * SKEL_Tail_04 = 0x34A,
 * SKEL_Tail_05 = 0x34B,
 * SPR_Gonads_ROOT = 0xBFDE,
 * SPR_Gonads = 0x1C00,
 * FB_L_Brow_Out_001 = 0xE3DB,
 * FB_L_Lid_Upper_001 = 0xB2B6,
 * FB_L_Eye_001 = 0x62AC,
 * FB_L_CheekBone_001 = 0x542E,
 * FB_L_Lip_Corner_001 = 0x74AC,
 * FB_R_Lid_Upper_001 = 0xAA10,
 * FB_R_Eye_001 = 0x6B52,
 * FB_R_CheekBone_001 = 0x4B88,
 * FB_R_Brow_Out_001 = 0x54C,
 * FB_R_Lip_Corner_001 = 0x2BA6,
 * FB_Brow_Centre_001 = 0x9149,
 * FB_UpperLipRoot_001 = 0x4ED2,
 * FB_UpperLip_001 = 0xF18F,
 * FB_L_Lip_Top_001 = 0x4F37,
 * FB_R_Lip_Top_001 = 0x4537,
 * FB_Jaw_001 = 0xB4A0,
 * FB_LowerLipRoot_001 = 0x4324,
 * FB_LowerLip_001 = 0x508F,
 * FB_L_Lip_Bot_001 = 0xB93B,
 * FB_R_Lip_Bot_001 = 0xC33B,
 * FB_Tongue_001 = 0xB987
 * };
 * ```
 * Hash: 0x3F428D08BE5AAE31 | ApiSet: undefined
 */
export function getPedBoneIndex(ped, boneId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedBoneIndex(_ped, boneId);
}
/**
 * Hash: 0x5CCE68DBD5FE93EC | ApiSet: undefined
 */
export function getPedAsGroupLeader(groupID) {
    return GetPedAsGroupLeader(groupID);
}
/**
 * ```
 * Gets the position of the specified bone of the specified ped.
 * ped: The ped to get the position of a bone from.
 * boneId: The ID of the bone to get the position from. This is NOT the index.
 * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
 * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
 * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
 * ```
 * Hash: 0x17C07FC640E86B4E | ApiSet: undefined
 */
export function getPedBoneCoords(ped, boneId, offsetX, offsetY, offsetZ) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return new Vector3(GetPedBoneCoords(_ped, boneId, offsetX, offsetY, offsetZ));
}
/**
 * Hash: 0xDEA92412FCAEB3F5 | ApiSet: undefined
 */
export function getPedCombatMovement(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedCombatMovement(_ped);
}
/**
 * See [`SET_PED_CONFIG_FLAG`](#\_0x1913FE4CBF41C463).
 * Hash: 0x7EE53118C892B513 | ApiSet: undefined
 */
export function getPedConfigFlag(ped, flagId, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedConfigFlag(_ped, flagId, p2);
}
/**
 * ```
 * Returns the hash of the weapon/model/object that killed the ped.
 * ```
 * Hash: 0x16FFE42AB2D2DC59 | ApiSet: undefined
 */
export function getPedCauseOfDeath(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedCauseOfDeath(_ped);
}
/**
 * Hash: 0x3C06B8786DD94CD1 | ApiSet: undefined
 */
export function getPedDefensiveAreaPosition(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return new Vector3(GetPedDefensiveAreaPosition(_ped, p1));
}
/**
 * ```cpp
 * enum ePedDecorationZone
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_UNKNOWN = 6,
 * ZONE_NONE = 7
 * };
 * ```
 * Hash: 0x9FD452BFBE7A7A8B | ApiSet: undefined
 */
export function getPedDecorationZoneFromHashes(collection, overlay) {
    if (typeof collection === 'string')
        collection = this.getHashKey(collection);
    if (typeof overlay === 'string')
        overlay = this.getHashKey(overlay);
    return GetPedDecorationZoneFromHashes(collection, overlay);
}
/**
 * Hash: 0xF60165E1D2C5370B | ApiSet: undefined
 */
export function getPedCurrentMovementSpeed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedCurrentMovementSpeed(_ped);
}
/**
 * Hash: 0x71EAB450D86954A1 | ApiSet: undefined
 */
export function getPedDecorationsState(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedDecorationsState(_ped);
}
/**
 * Use [`SetPedIlluminatedClothingGlowIntensity`](#\_0x4E90D746056E273D) to set the illuminated clothing glow intensity for a specific ped.
 * Hash: 0x1461B28A06717D68 | ApiSet: undefined
 */
export function getPedEmissiveIntensity(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedEmissiveIntensity(_ped);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xBA656A3BB01BDEA3 | ApiSet: undefined
 */
export function getPedEventData(ped, eventType) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedEventData(_ped, eventType);
}
/**
 * ```
 * Ids
 * 0 - Head
 * 1 - Beard
 * 2 - Hair
 * 3 - Torso
 * 4 - Legs
 * 5 - Hands
 * 6 - Foot
 * 7 - Scarfs/Neck Accessories
 * 8 - Accessories 1
 * 9 - Accessories 2
 * 10- Decals
 * 11 - Auxiliary parts for torso
 * ```
 * Hash: 0x67F3780DD425D4FC | ApiSet: undefined
 */
export function getPedDrawableVariation(ped, componentId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedDrawableVariation(_ped, componentId);
}
/**
 * A getter for [`_SET_PED_EYE_COLOR`](#\_0x50B56988B170AFDF).
 * Hash: 0x76BBA2CEE66D47E9 | ApiSet: undefined
 */
export function getPedEyeColor(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedEyeColor(_ped);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x65671A4FB8218930 | ApiSet: undefined
 */
export function getPedDiesInWater(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedDiesInWater(_ped);
}
/**
 * ```
 * Returns the group id of which the specified ped is a member of.
 * ```
 * Hash: 0xF162E133B4E7A675 | ApiSet: undefined
 */
export function getPedGroupIndex(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedGroupIndex(_ped);
}
/**
 * Hash: 0x9C14D30395A51A3C | ApiSet: undefined
 */
export function getPedEnveffScale(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedEnveffScale(_ped);
}
/**
 * ```
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * Used when calling SET_PED_HEAD_BLEND_DATA.
 * ```
 * Hash: 0x68D353AB88B97E0C | ApiSet: undefined
 */
export function getPedHeadBlendFirstIndex(type) {
    return GetPedHeadBlendFirstIndex(type);
}
/**
 * ```
 * Used with freemode (online) characters.
 * ```
 * Hash: 0xCF1CE768BB43480E | ApiSet: undefined
 */
export function getPedHeadOverlayNum(overlayID) {
    return GetPedHeadOverlayNum(overlayID);
}
/**
 * ```
 * Gets the offset the specified ped has moved since the previous tick.
 * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
 * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
 * ```
 * Hash: 0xE0AF41401ADF87E3 | ApiSet: undefined
 */
export function getPedExtractedDisplacement(ped, worldSpace) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return new Vector3(GetPedExtractedDisplacement(_ped, worldSpace));
}
/**
 * ```
 * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
 * pass this struct in the second parameter
 * typedef struct
 * {
 * int shapeFirst, shapeSecond, shapeThird;
 * int skinFirst, skinSecond, skinThird;
 * float shapeMix, skinMix, thirdMix;
 * } headBlendData;
 * ```
 * Hash: 0x2746BD9D88C5C5D0 | ApiSet: undefined
 */
export function getPedHeadBlendData(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedHeadBlendData(_ped);
}
/**
 * Hash: 0x451294E859ECC018 | ApiSet: undefined
 */
export function getPedHelmetStoredHatPropIndex(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedHelmetStoredHatPropIndex(_ped);
}
/**
 * Input: Haircolor index, value between 0 and 63 (inclusive).
 * Output: RGB values for the haircolor specified in the input.
 * This is used with the hair color swatches scaleform.
 * Use [`_0x013E5CFC38CD5387`](#\_0x013E5CFC38CD5387) to get the makeup colors.
 * Hash: 0x4852FC386E2E1BB5 | ApiSet: undefined
 */
export function getPedHairRgbColor(hairColorIndex) {
    return GetPedHairRgbColor(hairColorIndex);
}
/**
 * Hash: 0x9D728C1E12BF5518 | ApiSet: undefined
 */
export function getPedHelmetStoredHatTexIndex(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedHelmetStoredHatTexIndex(_ped);
}
/**
 * Hash: 0x4700A416E8324EF3 | ApiSet: undefined
 */
export function getPedMaxHealth(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedMaxHealth(_ped);
}
/**
 * ```
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * ```
 * Hash: 0x5EF37013A6539C9D | ApiSet: undefined
 */
export function getPedHeadBlendNumHeads(type) {
    return GetPedHeadBlendNumHeads(type);
}
/**
 * ```
 * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
 * This might be the once removed native GET_PED_HEAD_OVERLAY.
 * ```
 * Hash: 0xA60EF3B6461A4D43 | ApiSet: undefined
 */
export function getPedHeadOverlayValue(ped, overlayID) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedHeadOverlayValue(_ped, overlayID);
}
/**
 * Input: Makeup color index, value between 0 and 63 (inclusive).
 * Output: RGB values for the makeup color specified in the input.
 * This is used with the makeup color swatches scaleform.
 * Use [`_0x4852FC386E2E1BB5`](#\_0x4852FC386E2E1BB5) to get the hair colors.
 * Hash: 0x013E5CFC38CD5387 | ApiSet: undefined
 */
export function getPedMakeupRgbColor(makeupColorIndex) {
    return GetPedMakeupRgbColor(makeupColorIndex);
}
/**
 * Hash: 0x3F69145BBA87BAE7 | ApiSet: undefined
 */
export function getPedMoney(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedMoney(_ped);
}
/**
 * Hash: 0xD75960F6BD9EA49C | ApiSet: undefined
 */
export function getPedLastDamageBone(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedLastDamageBone(_ped);
}
/**
 * ```
 * Returns size of array, passed into the second variable.
 * See below for usage information.
 * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
 * //Setup the array
 * const int numElements = 10;
 * const int arrSize = numElements * 2 + 2;
 * Any veh[arrSize];
 * //0 index is the size of the array
 * veh[0] = numElements;
 * `int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);`
 * if (veh != NULL)
 * {
 * //Simple loop to go through results
 * for (int i = 0; i < count; i++)
 * {
 * int offsettedID = i * 2 + 2;
 * //Make sure it exists
 * `if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))`
 * {
 * //Do something
 * }
 * }
 * }
 * Here's the right way to do it (console and pc):
 * pastebin.com/SsFej963
 * ```
 * Hash: 0xCFF869CBFA210D82 | ApiSet: undefined
 */
export function getPedNearbyVehicles(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedNearbyVehicles(_ped);
}
/**
 * ```
 * -1: no landing
 * 0: landing on both feet
 * 1: stumbling
 * 2: rolling
 * 3: ragdoll
 * ```
 * Hash: 0x8B9F1FC6AE8166C0 | ApiSet: undefined
 */
export function getPedParachuteLandingType(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedParachuteLandingType(_ped);
}
/**
 * Hash: 0xE3DD5F2A84B42281 | ApiSet: undefined
 */
export function getPedPaletteVariation(ped, componentId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedPaletteVariation(_ped, componentId);
}
/**
 * Hash: 0xEAF5F7E5AE7C6C9D | ApiSet: undefined
 */
export function getPedParachuteTintIndex(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedParachuteTintIndex(_ped);
}
/**
 * Hash: 0xE131A28626F81AB2 | ApiSet: undefined
 */
export function getPedPropTextureIndex(ped, componentId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedPropTextureIndex(_ped, componentId);
}
/**
 * Console/PC structure definitions and example: pastebin.com/SsFej963
 * For FiveM/Cfx.Re use-cases refer to: [`GET_GAME_POOL`](#\_0x2B9D4F50).
 * Hash: 0x23F8F5FC7E8C4A6B | ApiSet: undefined
 */
export function getPedNearbyPeds(ped, ignore) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedNearbyPeds(_ped, ignore);
}
/**
 * Hash: 0x898CC20EA75BACD8 | ApiSet: undefined
 */
export function getPedPropIndex(ped, componentId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedPropIndex(_ped, componentId);
}
/**
 * ```
 * Returns:
 * -1: Normal
 * 0: Wearing parachute on back
 * 1: Parachute opening
 * 2: Parachute open
 * 3: Falling to doom (e.g. after exiting parachute)
 * Normal means no parachute?
 * ```
 * Hash: 0x79CFD9827CC979B6 | ApiSet: undefined
 */
export function getPedParachuteState(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedParachuteState(_ped);
}
/**
 * Hash: 0x2057EF813397A772 | ApiSet: undefined
 */
export function getPedRagdollBoneIndex(ped, bone) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedRagdollBoneIndex(_ped, bone);
}
/**
 * Hash: 0xAF9E59B1B1FBF2A0 | ApiSet: undefined
 */
export function getPedResetFlag(ped, flagId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedResetFlag(_ped, flagId);
}
/**
 * Hash: 0x7DBDD04862D95F04 | ApiSet: undefined
 */
export function getPedRelationshipGroupHash(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedRelationshipGroupHash(_ped);
}
/**
 * Hash: 0x42FDD0F017B1E38E | ApiSet: undefined
 */
export function getPedRelationshipGroupDefaultHash(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedRelationshipGroupDefaultHash(_ped);
}
/**
 * ```
 * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
 * Is best to check if the Ped is dead before asking for its killer.
 * ```
 * Hash: 0x93C8B64DEB84728C | ApiSet: undefined
 */
export function getPedSourceOfDeath(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedSourceOfDeath(_ped);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x32C27A11307B01CC | ApiSet: undefined
 */
export function getPedTaskCombatTarget(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedTaskCombatTarget(_ped, p1);
}
/**
 * ```
 * Returns whether the entity is in stealth mode
 * ```
 * Hash: 0x7C2AC9CA66575FBF | ApiSet: undefined
 */
export function getPedStealthMovement(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedStealthMovement(_ped);
}
/**
 * Hash: 0x04A355E041E004E6 | ApiSet: undefined
 */
export function getPedTextureVariation(ped, componentId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedTextureVariation(_ped, componentId);
}
/**
 * Hash: 0x1E98817B311AE98A | ApiSet: undefined
 */
export function getPedTimeOfDeath(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedTimeOfDeath(_ped);
}
/**
 * Ped types:
 * ```cpp
 * enum ePedType
 * {
 * PED_TYPE_PLAYER_0 = 0,
 * PED_TYPE_PLAYER_1 = 1,
 * PED_TYPE_NETWORK_PLAYER = 2,
 * PED_TYPE_PLAYER_2 = 3,
 * PED_TYPE_CIVMALE = 4,
 * PED_TYPE_CIVFEMALE = 5,
 * PED_TYPE_COP = 6,
 * PED_TYPE_GANG_ALBANIAN = 7,
 * PED_TYPE_GANG_BIKER_1 = 8,
 * PED_TYPE_GANG_BIKER_2 = 9,
 * PED_TYPE_GANG_ITALIAN = 10,
 * PED_TYPE_GANG_RUSSIAN = 11,
 * PED_TYPE_GANG_RUSSIAN_2 = 12,
 * PED_TYPE_GANG_IRISH = 13,
 * PED_TYPE_GANG_JAMAICAN = 14,
 * PED_TYPE_GANG_AFRICAN_AMERICAN = 15,
 * PED_TYPE_GANG_KOREAN = 16,
 * PED_TYPE_GANG_CHINESE_JAPANESE = 17,
 * PED_TYPE_GANG_PUERTO_RICAN = 18,
 * PED_TYPE_DEALER = 19,
 * PED_TYPE_MEDIC = 20,
 * PED_TYPE_FIREMAN = 21,
 * PED_TYPE_CRIMINAL = 22,
 * PED_TYPE_BUM = 23,
 * PED_TYPE_PROSTITUTE = 24,
 * PED_TYPE_SPECIAL = 25,
 * PED_TYPE_MISSION = 26,
 * PED_TYPE_SWAT = 27,
 * PED_TYPE_ANIMAL = 28,
 * PED_TYPE_ARMY = 29
 * };
 * ```
 * Hash: 0xFF059E1E4C01E63C | ApiSet: undefined
 */
export function getPedType(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedType(_ped);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xEF2C71A32CAD5FBD | ApiSet: undefined
 */
export function getPedVisualFieldCenterAngle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedVisualFieldCenterAngle(_ped);
}
/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * Hash: 0xDB4EACD4AD0A5D6B | ApiSet: undefined
 */
export function getPedheadshotTxdString(id) {
    return GetPedheadshotTxdString(id);
}
/**
 * Hash: 0x9B128DC36C1E04CF | ApiSet: undefined
 */
export function getPedsJacker(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedsJacker(_ped);
}
/**
 * ```
 * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
 * Ped Types:
 * Any = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * ```
 * Hash: 0x876046A8E3A4B71C | ApiSet: undefined
 */
export function getRandomPedAtCoord(position, xRadius, yRadius, zRadius, pedType) {
    return GetRandomPedAtCoord(position.x, position.y, position.z, xRadius, yRadius, zRadius, pedType);
}
/**
 * Hash: 0x6A3975DEA89F9A17 | ApiSet: undefined
 */
export function getPlayerPedIsFollowing(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPlayerPedIsFollowing(_ped);
}
/**
 * ```
 * Gets the relationship between two peds. This should be called twice (once for each ped).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 * Example:
 * `PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);`
 * `PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);`
 * ```
 * Hash: 0xEBA5AD3A0EAF7121 | ApiSet: undefined
 */
export function getRelationshipBetweenPeds(ped1, ped2) {
    const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
    const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
    return GetRelationshipBetweenPeds(_ped1, _ped2);
}
/**
 * Hash: 0xF92691AED837A5FC | ApiSet: undefined
 */
export function getVehiclePedIsEntering(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetVehiclePedIsEntering(_ped);
}
/**
 * Hash: 0xD80932D577274D40 | ApiSet: undefined
 */
export function getSynchronizedSceneRate(sceneID) {
    return GetSynchronizedSceneRate(sceneID);
}
/**
 * ```
 * Gets the relationship between two groups. This should be called twice (once for each group).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * Example:
 * `PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);`
 * `PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);`
 * ```
 * Hash: 0x9E6B70061662AE5C | ApiSet: undefined
 */
export function getRelationshipBetweenGroups(group1, group2) {
    if (typeof group1 === 'string')
        group1 = this.getHashKey(group1);
    if (typeof group2 === 'string')
        group2 = this.getHashKey(group2);
    return GetRelationshipBetweenGroups(group1, group2);
}
/**
 * ```
 * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
 * ```
 * Hash: 0x6094AD011A2EA87D | ApiSet: undefined
 */
export function getVehiclePedIsUsing(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetVehiclePedIsUsing(_ped);
}
/**
 * Hash: 0x6F4C85ACD641BCD2 | ApiSet: undefined
 */
export function getSeatPedIsTryingToEnter(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetSeatPedIsTryingToEnter(_ped);
}
/**
 * Hash: 0xE4A310B1D7FA73CC | ApiSet: undefined
 */
export function getSynchronizedScenePhase(sceneID) {
    return GetSynchronizedScenePhase(sceneID);
}
/**
 * Hash: 0x654CD0A825161131 | ApiSet: undefined
 */
export function hasPedHeadBlendFinished(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return HasPedHeadBlendFinished(_ped);
}
/**
 * ```
 * GET_TIME_*
 * ```
 * Hash: 0x36B77BB84687C318 | ApiSet: undefined
 */
export function getTimeOfLastPedWeaponDamage(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetTimeOfLastPedWeaponDamage(_ped, weaponHash);
}
/**
 * Hash: 0x814FA8BE5449445D | ApiSet: undefined
 */
export function getVehiclePedIsTryingToEnter(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetVehiclePedIsTryingToEnter(_ped);
}
/**
 * Retrieves the vehicle the specified ped is currently in, or the last vehicle they were in.
 * Hash: 0x9A9112A0FE9A4713 | ApiSet: undefined
 */
export function getVehiclePedIsIn(ped, lastVehicle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetVehiclePedIsIn(_ped, lastVehicle);
}
/**
 * ```
 * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
 * If a message hasn't been created already, this function does nothing.
 * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
 * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * Call order:
 * SET_PED_TO_RAGDOLL
 * CREATE_NM_MESSAGE
 * GIVE_PED_NM_MESSAGE
 * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
 * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * ```
 * Hash: 0xB158DFCCC56E5C5B | ApiSet: undefined
 */
export function givePedNmMessage(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    GivePedNmMessage(_ped);
}
/**
 * Hash: 0xE4B5F4BF2CB24E65 | ApiSet: undefined
 */
export function hasActionModeAssetLoaded(asset) {
    return HasActionModeAssetLoaded(asset);
}
/**
 * Gives the ped a helmet. Can be removed by invoking [`REMOVE_PED_HELMET`](#\_0xA7B2458D0AD6DED8).
 * ```cpp
 * enum ePedCompFlags {
 * PV_FLAG_NONE                  = 0, // 0
 * PV_FLAG_BULKY                 = 1, // 1<<0
 * PV_FLAG_JOB                   = 2, // 1<<1
 * PV_FLAG_SUNNY                 = 4, // 1<<2
 * PV_FLAG_WET                   = 8, // 1<<3
 * PV_FLAG_COLD                  = 16, // 1<<4
 * PV_FLAG_NOT_IN_CAR            = 32, // 1<<5
 * PV_FLAG_BIKE_ONLY             = 64, // 1<<6
 * PV_FLAG_NOT_INDOORS           = 128, // 1<<7
 * PV_FLAG_FIRE_RETARDENT        = 256, // 1<<8
 * PV_FLAG_ARMOURED              = 512, // 1<<9
 * PV_FLAG_LIGHTLY_ARMOURED      = 1024, // 1<<10
 * PV_FLAG_HIGH_DETAIL           = 2048, // 1<<11
 * PV_FLAG_DEFAULT_HELMET        = 4096, // 1<<12
 * PV_FLAG_RANDOM_HELMET         = 8192, // 1<<13
 * PV_FLAG_SCRIPT_HELMET         = 16384, // 1<<14
 * PV_FLAG_FLIGHT_HELMET         = 32768, // 1<<15
 * PV_FLAG_HIDE_IN_FIRST_PERSON  = 65536, // 1<<16
 * PV_FLAG_USE_PHYSICS_HAT_2     = 131072, // 1<<17
 * PV_FLAG_PILOT_HELMET          = 262144 // 1<<18
 * };
 * ```
 * Hash: 0x54C7C4A94367717E | ApiSet: undefined
 */
export function givePedHelmet(ped, cannotRemove, helmetFlag, textureIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    GivePedHelmet(_ped, cannotRemove, helmetFlag, textureIndex);
}
/**
 * Hash: 0x876928DDDFCCC9CD | ApiSet: undefined
 */
export function hasPedheadshotImgUploadFailed() {
    return HasPedheadshotImgUploadFailed();
}
/**
 * Hash: 0x66680A92700F43DF | ApiSet: undefined
 */
export function hasPedPreloadVariationDataFinished(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return HasPedPreloadVariationDataFinished(_ped);
}
/**
 * Hash: 0x784002A632822099 | ApiSet: undefined
 */
export function hasPedPreloadPropDataFinished(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return HasPedPreloadPropDataFinished(_ped);
}
/**
 * Hash: 0xE977FC5B08AF3441 | ApiSet: undefined
 */
export function hasStealthModeAssetLoaded(asset) {
    return HasStealthModeAssetLoaded(asset);
}
/**
 * Hash: 0xE8A169E666CBC541 | ApiSet: undefined
 */
export function hasPedheadshotImgUploadSucceeded() {
    return HasPedheadshotImgUploadSucceeded();
}
/**
 * Hash: 0x4759CC730F947C81 | ApiSet: undefined
 */
export function instantlyFillPedPopulation() {
    InstantlyFillPedPopulation();
}
/**
 * Hash: 0x68772DB2B2526F9F | ApiSet: undefined
 */
export function isAnyHostilePedNearPoint(ped, position, radius) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsAnyHostilePedNearPoint(_ped, position.x, position.y, position.z, radius);
}
/**
 * Hash: 0x8507BCB710FA6DC0 | ApiSet: undefined
 */
export function hasPedReceivedEvent(ped, eventId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return HasPedReceivedEvent(_ped, eventId);
}
/**
 * Hash: 0x62AB793144DE75DC | ApiSet: undefined
 */
export function hidePedBloodDamageByZone(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    HidePedBloodDamageByZone(_ped, p1, p2);
}
/**
 * Hash: 0x083961498679DC9F | ApiSet: undefined
 */
export function isAnyPedNearPoint(position, radius) {
    return IsAnyPedNearPoint(position.x, position.y, position.z, radius);
}
/**
 * ```
 * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
 * ```
 * Hash: 0x12534C348C6CB68B | ApiSet: undefined
 */
export function isPedAPlayer(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedAPlayer(_ped);
}
/**
 * Hash: 0x7350823473013C02 | ApiSet: undefined
 */
export function haveAllStreamingRequestsCompleted(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return HaveAllStreamingRequestsCompleted(_ped);
}
/**
 * ```
 * xyz - relative to the world origin.
 * ```
 * Hash: 0x16EC4839969F9F5E | ApiSet: undefined
 */
export function isCopPedInArea3d(x1, y1, z1, x2, y2, z2) {
    return IsCopPedInArea3d(x1, y1, z1, x2, y2, z2);
}
/**
 * Hash: 0xE0A0AEC214B1FABA | ApiSet: undefined
 */
export function isConversationPedDead(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsConversationPedDead(_ped);
}
/**
 * Hash: 0x863B23EFDE9C5DF2 | ApiSet: undefined
 */
export function isPedBeingStealthKilled(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedBeingStealthKilled(_ped);
}
/**
 * Verifies whether a ped is firing within a specific area.
 * Hash: 0xA0D3D71EA1086C55 | ApiSet: undefined
 */
export function isAnyPedShootingInArea(minX, minY, minZ, maxX, maxY, maxZ, bHighlightArea, bDo3DCheck) {
    return IsAnyPedShootingInArea(minX, minY, minZ, maxX, maxY, maxZ, bHighlightArea, bDo3DCheck);
}
/**
 * Hash: 0x9A497FE2DF198913 | ApiSet: undefined
 */
export function isPedBeingJacked(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedBeingJacked(_ped);
}
/**
 * ```
 * p1 is always 0
 * ```
 * Hash: 0x4FBACCE3B4138EE8 | ApiSet: undefined
 */
export function isPedBeingStunned(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedBeingStunned(_ped, p1);
}
/**
 * Hash: 0x604E810189EE3A59 | ApiSet: undefined
 */
export function isPedBlushColorValid(colorID) {
    return IsPedBlushColorValid(colorID);
}
/**
 * Hash: 0xF41B5D290C99A3D6 | ApiSet: undefined
 */
export function isPedBlushColorValid2(colorId) {
    return IsPedBlushColorValid2(colorId);
}
/**
 * Hash: 0x3998B1276A3300E5 | ApiSet: undefined
 */
export function isPedAimingFromCover(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedAimingFromCover(_ped);
}
/**
 * Checks if the component variation is valid, this works great for randomizing components using loops.
 * Hash: 0xE825F6B6CEA7671D | ApiSet: undefined
 */
export function isPedComponentVariationValid(ped, componentId, drawableId, textureId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedComponentVariationValid(_ped, componentId, drawableId, textureId);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x09E7ECA981D9B210 | ApiSet: undefined
 */
export function isPedBodyBlemishValid(colorID) {
    return IsPedBodyBlemishValid(colorID);
}
/**
 * Hash: 0x5527B8246FEF9B11 | ApiSet: undefined
 */
export function isPedDiving(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedDiving(_ped);
}
/**
 * Hash: 0x53E8CB4F48BFE623 | ApiSet: undefined
 */
export function isPedClimbing(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedClimbing(_ped);
}
/**
 * Hash: 0xD125AE748725C6BC | ApiSet: undefined
 */
export function isPedDucking(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedDucking(_ped);
}
/**
 * ```
 * angle is ped's view cone
 * ```
 * Hash: 0xD71649DB0A545AA3 | ApiSet: undefined
 */
export function isPedFacingPed(ped, otherPed, angle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _otherPed = otherPed instanceof Ped ? otherPed.handle() : otherPed;
    return IsPedFacingPed(_ped, _otherPed, angle);
}
/**
 * Determines if a ped is dead. Contrary to what the name might suggest, it does not always detect when a ped is in the 'dying' phase (transitioning to death). The exception is when `checkMeleeDeathFlags` is set to `true`, which then includes peds in the midst of melee takedown moves as being in a dying state, even if the death task has not yet started.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x3317DEDB88C95038 | ApiSet: undefined
 */
export function isPedDeadOrDying(ped, checkMeleeDeathFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedDeadOrDying(_ped, checkMeleeDeathFlags);
}
/**
 * Hash: 0xFB92A102F1C4DFA3 | ApiSet: undefined
 */
export function isPedFalling(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedFalling(_ped);
}
/**
 * ```
 * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
 * If the handle is invalid, the function returns true.
 * ```
 * Hash: 0xD839450756ED5A80 | ApiSet: undefined
 */
export function isPedFatallyInjured(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedFatallyInjured(_ped);
}
/**
 * Hash: 0xBB062B2B5722478E | ApiSet: undefined
 */
export function isPedGettingIntoAVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedGettingIntoAVehicle(_ped);
}
/**
 * Hash: 0xBA63D9FE45412247 | ApiSet: undefined
 */
export function isPedDefensiveAreaActive(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedDefensiveAreaActive(_ped, p1);
}
/**
 * Hash: 0x451D05012CCEC234 | ApiSet: undefined
 */
export function isPedDoingBeastJump(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedDoingBeastJump(_ped);
}
/**
 * Hash: 0x9BB01E3834671191 | ApiSet: undefined
 */
export function isPedGroupMember(ped, groupId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedGroupMember(_ped, groupId);
}
/**
 * Hash: 0xB2C086CC1BF8F2BF | ApiSet: undefined
 */
export function isPedDoingDriveby(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedDoingDriveby(_ped);
}
/**
 * ```
 * Presumably returns the Entity that the Ped is currently diving out of the way of.
 * var num3;
 * `if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)`
 * `if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)`
 * ```
 * Hash: 0x414641C26E105898 | ApiSet: undefined
 */
export function isPedEvasiveDiving(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedEvasiveDiving(_ped);
}
/**
 * Hash: 0xE0D36E5D9E99CC21 | ApiSet: undefined
 */
export function isPedHairColorValid(colorID) {
    return IsPedHairColorValid(colorID);
}
/**
 * Hash: 0x9F65DBC537E59AD5 | ApiSet: undefined
 */
export function isPedGoingIntoCover(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedGoingIntoCover(_ped);
}
/**
 * Hash: 0xBBCCE00B381F8482 | ApiSet: undefined
 */
export function isPedFleeing(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedFleeing(_ped);
}
/**
 * Hash: 0xED6D8E27A43B8CDE | ApiSet: undefined
 */
export function isPedHairColorValid2(colorId) {
    return IsPedHairColorValid2(colorId);
}
/**
 * Hash: 0x5CD3CB88A7F8850D | ApiSet: undefined
 */
export function isPedHeadtrackingPed(ped1, ped2) {
    const _ped1 = ped1 instanceof Ped ? ped1.handle() : ped1;
    const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
    return IsPedHeadtrackingPed(_ped1, _ped2);
}
/**
 * Hash: 0x1C86D8AEF8254B78 | ApiSet: undefined
 */
export function isPedHangingOnToVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedHangingOnToVehicle(_ped);
}
/**
 * ```
 * Returns true/false if the ped is/isn't humanoid.
 * ```
 * Hash: 0xB980061DA992779D | ApiSet: undefined
 */
export function isPedHuman(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedHuman(_ped);
}
/**
 * Hash: 0xFCF37A457CB96DC0 | ApiSet: undefined
 */
export function isPedHeadingTowardsPosition(ped, position, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedHeadingTowardsPosition(_ped, position.x, position.y, position.z, p4);
}
/**
 * ```
 * Returns whether the specified ped is hurt.
 * ```
 * Hash: 0x5983BB449D7FDB12 | ApiSet: undefined
 */
export function isPedHurt(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedHurt(_ped);
}
/**
 * Hash: 0x813A0A7C9D2E831F | ApiSet: undefined
 */
export function isPedHeadtrackingEntity(ped, entity) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsPedHeadtrackingEntity(_ped, _entity);
}
/**
 * Hash: 0xB9496CE47546DB2C | ApiSet: undefined
 */
export function isPedHelmetUnk(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedHelmetUnk(_ped);
}
/**
 * Hash: 0x0BD04E29640C9C12 | ApiSet: undefined
 */
export function isPedInAnyPoliceVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnyPoliceVehicle(_ped);
}
/**
 * Hash: 0x5FFF4CFC74D8FB80 | ApiSet: undefined
 */
export function isPedInAnyPlane(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnyPlane(_ped);
}
/**
 * Hash: 0x2E0E1C2B4F6CB339 | ApiSet: undefined
 */
export function isPedInAnyBoat(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnyBoat(_ped);
}
/**
 * Hash: 0x298B91AE825E5705 | ApiSet: undefined
 */
export function isPedInAnyHeli(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnyHeli(_ped);
}
/**
 * Hash: 0x6E575D6A898AB852 | ApiSet: undefined
 */
export function isPedInAnyTaxi(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnyTaxi(_ped);
}
/**
 * Returns whether the specified ped is in any vehicle. If `atGetIn` is set to true, also returns true if the ped is
 * currently in the process of entering a vehicle (a specific stage check for `CTaskEnterVehicle`).
 * Hash: 0x997ABD671D25CA0B | ApiSet: undefined
 */
export function isPedInAnyVehicle(ped, atGetIn) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnyVehicle(_ped, atGetIn);
}
/**
 * Hash: 0xFBFC01CCFB35D99E | ApiSet: undefined
 */
export function isPedInAnySub(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnySub(_ped);
}
/**
 * Hash: 0x6F972C1AB75A1ED0 | ApiSet: undefined
 */
export function isPedInAnyTrain(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInAnyTrain(_ped);
}
/**
 * Hash: 0x845333B3150583AB | ApiSet: undefined
 */
export function isPedInCoverFacingLeft(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInCoverFacingLeft(_ped);
}
/**
 * Hash: 0x9134873537FA419C | ApiSet: undefined
 */
export function isPedInFlyingVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInFlyingVehicle(_ped);
}
/**
 * Examines whether the ped is engaged in combat; when given a target ped index, it confirms if the ped is actively fighting the specified target, returning true if engaged and false if not.
 * Hash: 0x4859F1FC66A6278E | ApiSet: undefined
 */
export function isPedInCombat(ped, target) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    return IsPedInCombat(_ped, _target);
}
/**
 * ```
 * p1 is nearly always 0 in the scripts.
 * ```
 * Hash: 0x60DFD0691A170B88 | ApiSet: undefined
 */
export function isPedInCover(ped, exceptUseWeapon) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInCover(_ped, exceptUseWeapon);
}
/**
 * Hash: 0x5891CAC5D4ACFF74 | ApiSet: undefined
 */
export function isPedInGroup(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInGroup(_ped);
}
/**
 * ```
 * Notes: The function only returns true while the ped is:
 * A.) Swinging a random melee attack (including pistol-whipping)
 * B.) Reacting to being hit by a melee attack (including pistol-whipping)
 * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
 * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
 * ```
 * Hash: 0x4E209B2C1EAD5159 | ApiSet: undefined
 */
export function isPedInMeleeCombat(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInMeleeCombat(_ped);
}
/**
 * Hash: 0x6A03BF943D767C93 | ApiSet: undefined
 */
export function isPedInHighCover(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInHighCover(_ped);
}
/**
 * Hash: 0x796D90EFB19AA332 | ApiSet: undefined
 */
export function isPedInModel(ped, modelHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return IsPedInModel(_ped, modelHash);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x082D79E15302F0C2 | ApiSet: undefined
 */
export function isPedInSphereAreaOfAnyEnemyPeds(ped, position, range) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInSphereAreaOfAnyEnemyPeds(_ped, position.x, position.y, position.z, range);
}
/**
 * Hash: 0x7DCE8BDA0F1C1200 | ApiSet: undefined
 */
export function isPedInParachuteFreeFall(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInParachuteFreeFall(_ped);
}
/**
 * ```
 * Gets a value indicating whether the specified ped is in the specified vehicle.
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * ```
 * Hash: 0xA3EE4A07279BB9DB | ApiSet: undefined
 */
export function isPedInVehicle(ped, vehicle, atGetIn) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsPedInVehicle(_ped, _vehicle, atGetIn);
}
/**
 * Hash: 0x4AE4FF911DFB61DA | ApiSet: undefined
 */
export function isPedJacking(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedJacking(_ped);
}
/**
 * ```
 * Returns true/false if the ped is/isn't male.
 * ```
 * Hash: 0x6D9F5FAA7488BA46 | ApiSet: undefined
 */
export function isPedMale(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedMale(_ped);
}
/**
 * Indicates whether this ped's health is below its injured threshold.
 * The default threshold is 100, these are stored in the `pedhealth.meta` file located in `common:\data\`
 * ### Below are some of the values
 * | InjuredHealthThreshold | Name      |
 * |------------------------|-----------|
 * | 100.000000             | Strong    |
 * | 100.000000             | Average   |
 * | 100.000000             | Weak      |
 * Hash: 0x84A2DD9AC37C35C1 | ApiSet: undefined
 */
export function isPedInjured(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInjured(_ped);
}
/**
 * Hash: 0xCEDABC5900A0BF97 | ApiSet: undefined
 */
export function isPedJumping(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedJumping(_ped);
}
/**
 * Hash: 0x3E802F11FBE27674 | ApiSet: undefined
 */
export function isPedLipstickColorValid2(colorId) {
    return IsPedLipstickColorValid2(colorId);
}
/**
 * Hash: 0x94495889E22C6479 | ApiSet: undefined
 */
export function isPedOnAnyBike(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedOnAnyBike(_ped);
}
/**
 * Hash: 0x433DDFFE2044B636 | ApiSet: undefined
 */
export function isPedJumpingOutOfVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedJumpingOutOfVehicle(_ped);
}
/**
 * Hash: 0x01FEE67DB37F59B2 | ApiSet: undefined
 */
export function isPedOnFoot(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedOnFoot(_ped);
}
/**
 * Hash: 0x0525A2C2562F3CD4 | ApiSet: undefined
 */
export function isPedLipstickColorValid(colorID) {
    return IsPedLipstickColorValid(colorID);
}
/**
 * Hash: 0xEC5F66E459AF3BB2 | ApiSet: undefined
 */
export function isPedOnSpecificVehicle(ped, vehicle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsPedOnSpecificVehicle(_ped, _vehicle);
}
/**
 * Hash: 0xC9D55B1A358A5BF7 | ApiSet: undefined
 */
export function isPedModel(ped, modelHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return IsPedModel(_ped, modelHash);
}
/**
 * ```
 * `Same function call as PED::GET_MOUNT, aka just returns 0`
 * ```
 * Hash: 0x460BC76A0E10655E | ApiSet: undefined
 */
export function isPedOnMount(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedOnMount(_ped);
}
/**
 * ```
 * IS_PED_*
 * Returns true if the ped is currently opening a door (CTaskOpenDoor).
 * ```
 * Hash: 0x26AF0E8E30BD2A2C | ApiSet: undefined
 */
export function isPedOpeningADoor(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedOpeningADoor(_ped);
}
/**
 * ```
 * Gets a value indicating whether the specified ped is on top of any vehicle.
 * Return 1 when ped is on vehicle.
 * Return 0 when ped is not on a vehicle.
 * ```
 * Hash: 0x67722AEB798E5FAB | ApiSet: undefined
 */
export function isPedOnVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedOnVehicle(_ped);
}
/**
 * Hash: 0xEBD0EDBA5BE957CF | ApiSet: undefined
 */
export function isPedPerformingDependentComboLimit(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedPerformingDependentComboLimit(_ped);
}
/**
 * Hash: 0xD6A86331A537A7B9 | ApiSet: undefined
 */
export function isPedProne(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedProne(_ped);
}
/**
 * Hash: 0xFD4CCDBCC59941B7 | ApiSet: undefined
 */
export function isPedPerformingStealthKill(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedPerformingStealthKill(_ped);
}
/**
 * Hash: 0xDCCA191DF9980FD7 | ApiSet: undefined
 */
export function isPedPerformingMeleeAction(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedPerformingMeleeAction(_ped);
}
/**
 * Hash: 0xC70B5FAE151982D8 | ApiSet: undefined
 */
export function isPedPlantingBomb(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedPlantingBomb(_ped);
}
/**
 * Hash: 0xD1871251F3B5ACD7 | ApiSet: undefined
 */
export function isPedRunningMeleeTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRunningMeleeTask(_ped);
}
/**
 * ```
 * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
 * ```
 * Hash: 0x47E4E977581C5B55 | ApiSet: undefined
 */
export function isPedRagdoll(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRagdoll(_ped);
}
/**
 * Hash: 0x625B774D75C87068 | ApiSet: undefined
 */
export function isPedRespondingToEvent(ped, event) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRespondingToEvent(_ped, event);
}
/**
 * ```
 * Returns whether the specified ped is reloading.
 * ```
 * Hash: 0x24B100C68C645951 | ApiSet: undefined
 */
export function isPedReloading(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedReloading(_ped);
}
/**
 * Hash: 0x81AA517FBBA05D39 | ApiSet: undefined
 */
export function isPedShaderEffectValid(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedShaderEffectValid(_ped);
}
/**
 * Hash: 0x2AFE52F782F25775 | ApiSet: undefined
 */
export function isPedRunningMobilePhoneTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRunningMobilePhoneTask(_ped);
}
/**
 * Hash: 0xE3B6097CC25AA69E | ApiSet: undefined
 */
export function isPedRunningRagdollTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRunningRagdollTask(_ped);
}
/**
 * Hash: 0x7E9DFE24AC1E58EF | ApiSet: undefined
 */
export function isPedShootingInArea(ped, x1, y1, z1, x2, y2, z2, p7, p8) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedShootingInArea(_ped, x1, y1, z1, x2, y2, z2, p7, p8);
}
/**
 * ```
 * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
 * ```
 * Hash: 0x530944F6F4B8A214 | ApiSet: undefined
 */
export function isPedStopped(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedStopped(_ped);
}
/**
 * ```
 * Returns whether the specified ped is shooting.
 * ```
 * Hash: 0x34616828CD07F1A1 | ApiSet: undefined
 */
export function isPedShooting(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedShooting(_ped);
}
/**
 * Hash: 0xC024869A53992F34 | ApiSet: undefined
 */
export function isPedSwimmingUnderWater(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedSwimmingUnderWater(_ped);
}
/**
 * ```
 * Detect if ped is in any vehicle
 * [True/False]
 * ```
 * Hash: 0x826AA586EDB9FEF8 | ApiSet: undefined
 */
export function isPedSittingInAnyVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedSittingInAnyVehicle(_ped);
}
/**
 * ```
 * Detect if ped is sitting in the specified vehicle
 * [True/False]
 * ```
 * Hash: 0xA808AA1D79230FC2 | ApiSet: undefined
 */
export function isPedSittingInVehicle(ped, vehicle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsPedSittingInVehicle(_ped, _vehicle);
}
/**
 * Hash: 0x9DE327631295B4C2 | ApiSet: undefined
 */
export function isPedSwimming(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedSwimming(_ped);
}
/**
 * Hash: 0x3795688A307E1EB6 | ApiSet: undefined
 */
export function isPedSwappingWeapon(Ped) {
    const _Ped = Ped instanceof Ped ? Ped.handle() : Ped;
    return IsPedSwappingWeapon(_Ped);
}
/**
 * Hash: 0x4C5E1F087CD10BB7 | ApiSet: undefined
 */
export function isPedTracked(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedTracked(_ped);
}
/**
 * If the ped is attempting to enter a locked vehicle.
 * Hash: 0x44D28D5DDFE5F68C | ApiSet: undefined
 */
export function isPedTryingToEnterALockedVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedTryingToEnterALockedVehicle(_ped);
}
/**
 * Hash: 0x14590DDBEDB1EC85 | ApiSet: undefined
 */
export function isPedTakingOffHelmet(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedTakingOffHelmet(_ped);
}
/**
 * See [`TASK_START_SCENARIO_IN_PLACE`](#\_0x142A02425FF02BD9) for a list of scenarios.
 * Hash: 0x1BF094736DD62C2E | ApiSet: undefined
 */
export function isPedUsingScenario(ped, scenario) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedUsingScenario(_ped, scenario);
}
/**
 * Hash: 0x00E73468D085F745 | ApiSet: undefined
 */
export function isPedUsingActionMode(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedUsingActionMode(_ped);
}
/**
 * Hash: 0x57AB4A3080F85143 | ApiSet: undefined
 */
export function isPedUsingAnyScenario(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedUsingAnyScenario(_ped);
}
/**
 * Hash: 0xEBB376779A760AA8 | ApiSet: undefined
 */
export function isPedheadshotImgUploadAvailable() {
    return IsPedheadshotImgUploadAvailable();
}
/**
 * Hash: 0x117C70D1F5730B5E | ApiSet: undefined
 */
export function isPedVaulting(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedVaulting(_ped);
}
/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * Hash: 0x7085228842B13A67 | ApiSet: undefined
 */
export function isPedheadshotReady(id) {
    return IsPedheadshotReady(id);
}
/**
 * Hash: 0x62522002E0C391BA | ApiSet: undefined
 */
export function isSynchronizedSceneLooped(sceneID) {
    return IsSynchronizedSceneLooped(sceneID);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x88274C11CF0D866D | ApiSet: undefined
 */
export function isScubaGearLightEnabled(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsScubaGearLightEnabled(_ped);
}
/**
 * ```
 * Returns true if the ped passed through the parenthesis is wearing a helmet.
 * ```
 * Hash: 0xF33BDFE19B309B19 | ApiSet: undefined
 */
export function isPedWearingHelmet(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedWearingHelmet(_ped);
}
/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * Hash: 0xA0A9668F158129A2 | ApiSet: undefined
 */
export function isPedheadshotValid(id) {
    return IsPedheadshotValid(id);
}
/**
 * ```
 * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
 * Target needs to be tracked.. won't work otherwise.
 * ```
 * Hash: 0x91C8E617F64188AC | ApiSet: undefined
 */
export function isTrackedPedVisible(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsTrackedPedVisible(_ped);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x6EC47A344923E1ED | ApiSet: undefined
 */
export function isScriptedScenarioPedUsingConditionalAnim(ped, animDict, anim) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsScriptedScenarioPedUsingConditionalAnim(_ped, animDict, anim);
}
/**
 * Hash: 0x7F2F4F13AC5257EF | ApiSet: undefined
 */
export function isSynchronizedSceneHoldLastFrame(sceneID) {
    return IsSynchronizedSceneHoldLastFrame(sceneID);
}
/**
 * Hash: 0x45BBCBA77C29A841 | ApiSet: undefined
 */
export function knockPedOffVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    KnockPedOffVehicle(_ped);
}
/**
 * ```
 * Returns true if a synchronized scene is running
 * ```
 * Hash: 0x25D39B935A038A26 | ApiSet: undefined
 */
export function isSynchronizedSceneRunning(sceneId) {
    return IsSynchronizedSceneRunning(sceneId);
}
/**
 * Hash: 0x6FD7816A36615F48 | ApiSet: undefined
 */
export function knockOffPedProp(ped, p1, p2, p3, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    KnockOffPedProp(_ped, p1, p2, p3, p4);
}
/**
 * Hash: 0x0B3E35AC043707D9 | ApiSet: undefined
 */
export function _0x0B3E35AC043707D9(p0, p1) {
    Citizen.invokeNative('0x0B3E35AC043707D9', p0, p1);
}
/**
 * Hash: 0x03EA03AF85A85CB7 | ApiSet: undefined
 */
export function _0x03EA03AF85A85CB7(ped, p1, p2, p3, p4, p5, p6, p7, p8) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x03EA03AF85A85CB7', _ped, p1, p2, p3, p4, p5, p6, p7, p8);
}
/**
 * ```
 * In agency_heist3b.c4, its like this 90% of the time:
 * `PED::_110F526AB784111F(ped, 0.099);`
 * `PED::SET_PED_ENVEFF_SCALE(ped, 1.0);`
 * `PED::_D69411AA0CEBF9E9(ped, 87, 81, 68);`
 * `PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);`
 * and its like this 10% of the time:
 * `PED::_110F526AB784111F(ped, 0.2);`
 * `PED::SET_PED_ENVEFF_SCALE(ped, 0.65);`
 * `PED::_D69411AA0CEBF9E9(ped, 74, 69, 60);`
 * `PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);`
 * ```
 * Hash: 0x110F526AB784111F | ApiSet: undefined
 */
export function _0x110F526AB784111F(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x110F526AB784111F', _ped, p1);
}
/**
 * Hash: 0x06087579E7AA85A9 | ApiSet: undefined
 */
export function _0x06087579E7AA85A9(p0, p1, p2, p3, p4, p5) {
    return Citizen.invokeNative('0x06087579E7AA85A9', p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * Only appears in lamar1 script.
 * ```
 * Hash: 0x1A330D297AAC6BC1 | ApiSet: undefined
 */
export function _0x1A330D297AAC6BC1(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x1A330D297AAC6BC1', _ped, p1);
}
/**
 * ```
 * SET_PED_STE*
 * ```
 * Hash: 0x2016C603D6B8987C | ApiSet: undefined
 */
export function _0x2016C603D6B8987C(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x2016C603D6B8987C', _ped, toggle);
}
/**
 * Hash: 0x0F62619393661D6E | ApiSet: undefined
 */
export function _0x0F62619393661D6E(p0, p1, p2) {
    Citizen.invokeNative('0x0F62619393661D6E', p0, p1, p2);
}
/**
 * Hash: 0x061CB768363D6424 | ApiSet: undefined
 */
export function _0x061CB768363D6424(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x061CB768363D6424', _ped, toggle);
}
/**
 * [`SET_VEHICLE_STEER_BIAS`](#\_0x42A8EC77D5150CBE) for peds, e.g., `_SET_PED_STEER_BIAS`.
 * Hash: 0x288DF530C92DAD6F | ApiSet: undefined
 */
export function _0x288DF530C92DAD6F(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x288DF530C92DAD6F', _ped, value);
}
/**
 * Hash: 0x2735233A786B1BEF | ApiSet: undefined
 */
export function _0x2735233A786B1BEF(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x2735233A786B1BEF', _ped, p1);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x1216E0BFA72CC703 | ApiSet: undefined
 */
export function _0x1216E0BFA72CC703(p0, p1) {
    Citizen.invokeNative('0x1216E0BFA72CC703', p0, p1);
}
/**
 * Hash: 0x2F3C3D9F50681DE4 | ApiSet: undefined
 */
export function _0x2F3C3D9F50681DE4(p0, p1) {
    Citizen.invokeNative('0x2F3C3D9F50681DE4', p0, p1);
}
/**
 * ```
 * GET_*
 * ```
 * Hash: 0x1E77FA7A62EE6C4C | ApiSet: undefined
 */
export function _0x1E77FA7A62EE6C4C(p0) {
    return Citizen.invokeNative('0x1E77FA7A62EE6C4C', p0);
}
/**
 * Hash: 0x25361A96E0F7E419 | ApiSet: undefined
 */
export function _0x25361A96E0F7E419(p0, p1, p2, p3) {
    return Citizen.invokeNative('0x25361A96E0F7E419', p0, p1, p2, p3);
}
/**
 * Hash: 0x2F074C904D85129E | ApiSet: undefined
 */
export function _0x2F074C904D85129E(p0, p1, p2, p3, p4, p5, p6) {
    Citizen.invokeNative('0x2F074C904D85129E', p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x2B694AFCF64E6994 | ApiSet: undefined
 */
export function _0x2B694AFCF64E6994(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x2B694AFCF64E6994', _ped, p1);
}
/**
 * ```
 * Checks if the specified unknown flag is set in the ped's model.
 * The engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags).
 * Game scripts exclusively check for flags 1 and 4.
 * ```
 * Hash: 0x46B05BCAE43856B0 | ApiSet: undefined
 */
export function _0x46B05BCAE43856B0(ped, flag) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x46B05BCAE43856B0', _ped, flag);
}
/**
 * Hash: 0x412F1364FA066CFB | ApiSet: undefined
 */
export function _0x412F1364FA066CFB(p0) {
    return Citizen.invokeNative('0x412F1364FA066CFB', p0);
}
/**
 * Hash: 0x2DFC81C9B9608549 | ApiSet: undefined
 */
export function _0x2DFC81C9B9608549(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x2DFC81C9B9608549', _ped);
}
/**
 * Hash: 0x3E9679C1DFCF422C | ApiSet: undefined
 */
export function _0x3E9679C1DFCF422C(p0, p1) {
    Citizen.invokeNative('0x3E9679C1DFCF422C', p0, p1);
}
/**
 * ```
 * SET_PED_ALLOW*
 * ```
 * Hash: 0x49E50BDB8BA4DAB2 | ApiSet: undefined
 */
export function _0x49E50BDB8BA4DAB2(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x49E50BDB8BA4DAB2', _ped, toggle);
}
/**
 * ```
 * GET_*
 * ```
 * Hash: 0x511F1A683387C7E2 | ApiSet: undefined
 */
export function _0x511F1A683387C7E2(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x511F1A683387C7E2', _ped);
}
/**
 * Hash: 0x336B3D200AB007CB | ApiSet: undefined
 */
export function _0x336B3D200AB007CB(p0, p1, p2, p3, p4) {
    return Citizen.invokeNative('0x336B3D200AB007CB', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x5A7F62FDA59759BD | ApiSet: undefined
 */
export function _0x5A7F62FDA59759BD() {
    Citizen.invokeNative('0x5A7F62FDA59759BD');
}
/**
 * Hash: 0x425AECF167663F48 | ApiSet: undefined
 */
export function _0x425AECF167663F48(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x425AECF167663F48', _ped, p1);
}
/**
 * Hash: 0x5407B7288D0478B7 | ApiSet: undefined
 */
export function _0x5407B7288D0478B7(p0) {
    return Citizen.invokeNative('0x5407B7288D0478B7', p0);
}
/**
 * Hash: 0x733C87D4CE22BEA2 | ApiSet: undefined
 */
export function _0x733C87D4CE22BEA2(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x733C87D4CE22BEA2', _ped);
}
/**
 * Hash: 0x9A77DFD295E29B09 | ApiSet: undefined
 */
export function _0x9A77DFD295E29B09(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x9A77DFD295E29B09', _ped, toggle);
}
/**
 * Hash: 0x9911F4A24485F653 | ApiSet: undefined
 */
export function _0x9911F4A24485F653(p0) {
    Citizen.invokeNative('0x9911F4A24485F653', p0);
}
/**
 * Hash: 0x9E30E91FB03A2CAF | ApiSet: undefined
 */
export function _0x9E30E91FB03A2CAF() {
    return Citizen.invokeNative('0x9E30E91FB03A2CAF');
}
/**
 * Hash: 0x5B6010B3CBC29095 | ApiSet: undefined
 */
export function _0x5B6010B3CBC29095(p0, p1) {
    Citizen.invokeNative('0x5B6010B3CBC29095', p0, p1);
}
/**
 * Hash: 0x9C6A6C19B6C0C496 | ApiSet: undefined
 */
export function _0x9C6A6C19B6C0C496(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x9C6A6C19B6C0C496', _ped);
}
/**
 * ```
 * Only called once in the scripts:
 * `if (sub_1abd() && (!PED::_A3F3564A5B3646C0(l_8C))) {`
 * if (sub_52e3("RESNA_CELLR", 0)) {
 * `PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(l_8C, 1);`
 * `PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(l_8C, 1);`
 * `PED::SET_PED_CAN_PLAY_VISEME_ANIMS(l_8C, 1, 0);`
 * l_184 += 1;
 * }
 * }
 * Checks something related to the mobile phone task.
 * IS_*
 * ```
 * Hash: 0xA3F3564A5B3646C0 | ApiSet: undefined
 */
export function _0xA3F3564A5B3646C0(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0xA3F3564A5B3646C0', _ped);
}
/**
 * ```
 * REQUEST_*
 * ```
 * Hash: 0x75BA1CB3B7D40CAF | ApiSet: undefined
 */
export function _0x75BA1CB3B7D40CAF(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x75BA1CB3B7D40CAF', _ped, p1);
}
/**
 * Hash: 0x711794453CFD692B | ApiSet: undefined
 */
export function _0x711794453CFD692B(p0, p1) {
    Citizen.invokeNative('0x711794453CFD692B', p0, p1);
}
/**
 * ```
 * CLEAR_PED_*
 * ```
 * Hash: 0x80054D7FCC70EEC6 | ApiSet: undefined
 */
export function _0x80054D7FCC70EEC6(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x80054D7FCC70EEC6', _ped);
}
/**
 * ```
 * SET_A*
 * ```
 * Hash: 0x87DDEB611B329A9C | ApiSet: undefined
 */
export function _0x87DDEB611B329A9C(multiplier) {
    Citizen.invokeNative('0x87DDEB611B329A9C', multiplier);
}
/**
 * Hash: 0x820E9892A77E97CD | ApiSet: undefined
 */
export function _0x820E9892A77E97CD(p0, p1) {
    Citizen.invokeNative('0x820E9892A77E97CD', p0, p1);
}
/**
 * Hash: 0xAAA6A3698A69E048 | ApiSet: undefined
 */
export function _0xAAA6A3698A69E048(p0) {
    return Citizen.invokeNative('0xAAA6A3698A69E048', p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xB282749D5E028163 | ApiSet: undefined
 */
export function _0xB282749D5E028163(p0, p1) {
    Citizen.invokeNative('0xB282749D5E028163', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xAD27D957598E49E9 | ApiSet: undefined
 */
export function _0xAD27D957598E49E9(ped, p1, p2, hash, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    Citizen.invokeNative('0xAD27D957598E49E9', _ped, p1, p2, hash, p4, p5);
}
/**
 * Hash: 0xA52D5247A4227E14 | ApiSet: undefined
 */
export function _0xA52D5247A4227E14(p0) {
    Citizen.invokeNative('0xA52D5247A4227E14', p0);
}
/**
 * ```
 * _SET_PED_HEAD_* - _SET_PED_HEARING_*
 * _SET_PED_HEALTH_...
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0xB3352E018D6F89DF | ApiSet: undefined
 */
export function _0xB3352E018D6F89DF(toggle) {
    Citizen.invokeNative('0xB3352E018D6F89DF', toggle);
}
/**
 * Hash: 0xB8B52E498014F5B0 | ApiSet: undefined
 */
export function _0xB8B52E498014F5B0(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0xB8B52E498014F5B0', _ped);
}
/**
 * Hash: 0xA660FAF550EB37E5 | ApiSet: undefined
 */
export function _0xA660FAF550EB37E5(p0, p1) {
    Citizen.invokeNative('0xA660FAF550EB37E5', p0, p1);
}
/**
 * Hash: 0xA9B61A329BFDCBEA | ApiSet: undefined
 */
export function _0xA9B61A329BFDCBEA(p0, p1) {
    Citizen.invokeNative('0xA9B61A329BFDCBEA', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xC30BDAEE47256C13 | ApiSet: undefined
 */
export function _0xC30BDAEE47256C13(p0) {
    return Citizen.invokeNative('0xC30BDAEE47256C13', p0);
}
/**
 * Hash: 0xD33DAA36272177C4 | ApiSet: undefined
 */
export function _0xD33DAA36272177C4(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xD33DAA36272177C4', _ped);
}
/**
 * ```
 * SET_PED_*
 * ```
 * Hash: 0xAFC976FD0580C7B3 | ApiSet: undefined
 */
export function _0xAFC976FD0580C7B3(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xAFC976FD0580C7B3', _ped, toggle);
}
/**
 * Hash: 0xE906EC930F5FE7C8 | ApiSet: undefined
 */
export function _0xE906EC930F5FE7C8(p0, p1) {
    Citizen.invokeNative('0xE906EC930F5FE7C8', p0, p1);
}
/**
 * Hash: 0xC2EE020F5FB4DB53 | ApiSet: undefined
 */
export function _0xC2EE020F5FB4DB53(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xC2EE020F5FB4DB53', _ped);
}
/**
 * Hash: 0xEA9960D07DADCF10 | ApiSet: undefined
 */
export function _0xEA9960D07DADCF10(p0) {
    return Citizen.invokeNative('0xEA9960D07DADCF10', p0);
}
/**
 * ```
 * SET_PED_*
 * Has most likely to do with some shooting attributes as it sets the float which is in the same range as shootRate.
 * ```
 * Hash: 0xEC4B4B3B9908052A | ApiSet: undefined
 */
export function _0xEC4B4B3B9908052A(ped, unk) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xEC4B4B3B9908052A', _ped, unk);
}
/**
 * Hash: 0xC56FBF2F228E1DAC | ApiSet: undefined
 */
export function _0xC56FBF2F228E1DAC(modelHash, p1, p2) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return Citizen.invokeNative('0xC56FBF2F228E1DAC', modelHash, p1, p2);
}
/**
 * ```
 * REQUEST_*
 * ```
 * Hash: 0xCD018C591F94CB43 | ApiSet: undefined
 */
export function _0xCD018C591F94CB43(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xCD018C591F94CB43', _ped, p1);
}
/**
 * Initial guess of native: `_IS_PED_WEARING_MOTORCYCLE_HELMET`.
 * Hash: 0xF2385935BFFD4D92 | ApiSet: undefined
 */
export function _0xF2385935BFFD4D92(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0xF2385935BFFD4D92', _ped);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xDFE68C4B787E1BFB | ApiSet: undefined
 */
export function _0xDFE68C4B787E1BFB(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xDFE68C4B787E1BFB', _ped);
}
/**
 * Hash: 0xCEDA60A74219D064 | ApiSet: undefined
 */
export function _0xCEDA60A74219D064(p0, p1) {
    Citizen.invokeNative('0xCEDA60A74219D064', p0, p1);
}
/**
 * ```
 * SET_PED_ALLOW*
 * toggle was always false except in one instance (b678).
 * The one time this is set to true seems to do with when you fail the mission.
 * ```
 * Hash: 0xF2BEBCDFAFDAA19E | ApiSet: undefined
 */
export function _0xF2BEBCDFAFDAA19E(toggle) {
    Citizen.invokeNative('0xF2BEBCDFAFDAA19E', toggle);
}
/**
 * Native to check whether [`_SET_PED_SCUBA_GEAR_VARIATION`](#\_0x36C6984C3ED0C911) is enabled/actived.
 * Hash: 0xFEC9A3B1820F3331 | ApiSet: undefined
 */
export function _0xFEC9A3B1820F3331(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0xFEC9A3B1820F3331', _ped);
}
/**
 * ```
 * Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
 * ```
 * Hash: 0xFF4803BC019852D9 | ApiSet: undefined
 */
export function _0xFF4803BC019852D9(p0, p1) {
    Citizen.invokeNative('0xFF4803BC019852D9', p0, p1);
}
/**
 * ```
 * GET_*
 * ```
 * Hash: 0xF033419D1B81FAE8 | ApiSet: undefined
 */
export function _0xF033419D1B81FAE8(p0) {
    return Citizen.invokeNative('0xF033419D1B81FAE8', p0);
}
/**
 * ```
 * FORCE_*
 * ```
 * Hash: 0xED3C76ADFA6D07C4 | ApiSet: undefined
 */
export function _0xED3C76ADFA6D07C4(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xED3C76ADFA6D07C4', _ped);
}
/**
 * Hash: 0xE1E65CA8AC9C00ED | ApiSet: undefined
 */
export function playFacialAnim(ped, animName, animDict) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayFacialAnim(_ped, animName, animDict);
}
/**
 * Hash: 0xFD325494792302D7 | ApiSet: undefined
 */
export function _0xFD325494792302D7(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xFD325494792302D7', _ped, toggle);
}
/**
 * SET_A\*
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xFAB944D4D481ACCB | ApiSet: undefined
 */
export function _0xFAB944D4D481ACCB(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xFAB944D4D481ACCB', _ped, toggle);
}
/**
 * Hash: 0x5D517B27CF6ECD04 | ApiSet: undefined
 */
export function releasePedheadshotImgUpload(id) {
    ReleasePedheadshotImgUpload(id);
}
/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * Hash: 0x4462658788425076 | ApiSet: undefined
 */
export function registerPedheadshot(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return RegisterPedheadshot(_ped);
}
/**
 * Hash: 0xF79F9DEF0AADE61A | ApiSet: undefined
 */
export function releasePedPreloadPropData(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ReleasePedPreloadPropData(_ped);
}
/**
 * Hash: 0xBA8805A1108A2515 | ApiSet: undefined
 */
export function registerPedheadshot3(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return RegisterPedheadshot3(_ped);
}
/**
 * Hash: 0x8EB2F69076AF7053 | ApiSet: undefined
 */
export function removeGroup(groupId) {
    RemoveGroup(groupId);
}
/**
 * ```
 * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
 * ```
 * Hash: 0x9222F300BF8354FE | ApiSet: undefined
 */
export function registerHatedTargetsAroundPed(ped, radius) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RegisterHatedTargetsAroundPed(_ped, radius);
}
/**
 * Hash: 0x13E940F88470FA51 | ApiSet: undefined
 */
export function removeActionModeAsset(asset) {
    RemoveActionModeAsset(asset);
}
/**
 * Hash: 0x5AAB586FFEC0FD96 | ApiSet: undefined
 */
export function releasePedPreloadVariationData(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ReleasePedPreloadVariationData(_ped);
}
/**
 * ```
 * Ped will no longer get angry when you stay near him.
 * ```
 * Hash: 0x74D4E028107450A9 | ApiSet: undefined
 */
export function removePedDefensiveArea(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RemovePedDefensiveArea(_ped, toggle);
}
/**
 * ```
 * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed.
 * ```
 * Hash: 0xAC6D445B994DF95E | ApiSet: undefined
 */
export function removePedElegantly() {
    return RemovePedElegantly();
}
/**
 * Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black.
 * <strong>Result of the example code:</strong>
 * <https://i.imgur.com/iHz8ztn.png>
 * Hash: 0x953563CE563143AF | ApiSet: undefined
 */
export function registerPedheadshotTransparent(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return RegisterPedheadshotTransparent(_ped);
}
/**
 * Hash: 0xED74007FFB146BC2 | ApiSet: undefined
 */
export function removePedFromGroup(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RemovePedFromGroup(_ped);
}
/**
 * ```
 * `PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.`
 * l_216 = RECSBRobber1
 * ```
 * Hash: 0x2F25D9AEFA34FBA2 | ApiSet: undefined
 */
export function registerTarget(ped, target) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    RegisterTarget(_ped, _target);
}
/**
 * Remove a helmet from a ped
 * Hash: 0xA7B2458D0AD6DED8 | ApiSet: undefined
 */
export function removePedHelmet(ped, instantly) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RemovePedHelmet(_ped, instantly);
}
/**
 * Hash: 0x2BC338A7B21F4608 | ApiSet: undefined
 */
export function requestPedVehicleVisibilityTracking(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RequestPedVehicleVisibilityTracking(_ped, p1);
}
/**
 * Hash: 0xB6BA2444AB393DA2 | ApiSet: undefined
 */
export function removeRelationshipGroup(groupHash) {
    if (typeof groupHash === 'string')
        groupHash = this.getHashKey(groupHash);
    RemoveRelationshipGroup(groupHash);
}
/**
 * Hash: 0xFDDB234CF74073D9 | ApiSet: undefined
 */
export function removePedPreferredCoverSet(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RemovePedPreferredCoverSet(_ped);
}
/**
 * Hash: 0x31D16B74C6E29D66 | ApiSet: undefined
 */
export function removeScenarioBlockingArea(scenarioBlockingIndex, bNetwork) {
    RemoveScenarioBlockingArea(scenarioBlockingIndex, bNetwork);
}
/**
 * Hash: 0x9219857D21F0E842 | ApiSet: undefined
 */
export function removeStealthModeAsset(asset) {
    RemoveStealthModeAsset(asset);
}
/**
 * Hash: 0x2A0A62FCDEE16D4F | ApiSet: undefined
 */
export function requestStealthModeAsset(asset) {
    RequestStealthModeAsset(asset);
}
/**
 * Hash: 0x290E2780BB7AA598 | ApiSet: undefined
 */
export function requestActionModeAsset(asset) {
    RequestActionModeAsset(asset);
}
/**
 * Hash: 0xD37401D78A929A49 | ApiSet: undefined
 */
export function removeScenarioBlockingAreas() {
    RemoveScenarioBlockingAreas();
}
/**
 * Hash: 0xF0DAEF2F545BEE25 | ApiSet: undefined
 */
export function requestPedheadshotImgUpload(id) {
    return RequestPedheadshotImgUpload(id);
}
/**
 * Hash: 0x63DAB4CCB3273205 | ApiSet: undefined
 */
export function resetGroupFormationDefaultSpacing(groupHandle) {
    ResetGroupFormationDefaultSpacing(groupHandle);
}
/**
 * Hash: 0x46E56A7CD1D63C3F | ApiSet: undefined
 */
export function resetAiMeleeWeaponDamageModifier() {
    ResetAiMeleeWeaponDamageModifier();
}
/**
 * Hash: 0x7D7A2E43E74E2EB8 | ApiSet: undefined
 */
export function requestPedVisibilityTracking(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RequestPedVisibilityTracking(_ped);
}
/**
 * Hash: 0x22EF8FF8778030EB | ApiSet: undefined
 */
export function resetPedInVehicleContext(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedInVehicleContext(_ped);
}
/**
 * Hash: 0xEA16670E7BA4743C | ApiSet: undefined
 */
export function resetAiWeaponDamageModifier() {
    ResetAiWeaponDamageModifier();
}
/**
 * Hash: 0x3AC1F7B898F30C05 | ApiSet: undefined
 */
export function resetPedVisibleDamage(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedVisibleDamage(_ped);
}
/**
 * Hash: 0xAA74EC0CB0AAEA2C | ApiSet: undefined
 */
export function resetPedMovementClipset(ped, transitionSpeed) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedMovementClipset(_ped, transitionSpeed);
}
/**
 * Hash: 0x20510814175EA477 | ApiSet: undefined
 */
export function resetPedStrafeClipset(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedStrafeClipset(_ped);
}
/**
 * ```
 * Resets the value for the last vehicle driven by the Ped.
 * ```
 * Hash: 0xBB8DE8CF6A8DD8BB | ApiSet: undefined
 */
export function resetPedLastVehicle(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedLastVehicle(_ped);
}
/**
 * Hash: 0x97B0DB5B4AA74E77 | ApiSet: undefined
 */
export function resetPedWeaponMovementClipset(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedWeaponMovementClipset(_ped);
}
/**
 * Hash: 0x9FA4664CF62E47E8 | ApiSet: undefined
 */
export function resetPedRagdollTimer(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResetPedRagdollTimer(_ped);
}
/**
 * Hash: 0x66460DEDDD417254 | ApiSet: undefined
 */
export function setAiMeleeWeaponDamageModifier(modifier) {
    SetAiMeleeWeaponDamageModifier(modifier);
}
/**
 * ```
 * This function will simply bring the dead person back to life.
 * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
 * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
 * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
 * ```
 * Hash: 0x71BC8E838B9C6035 | ApiSet: undefined
 */
export function resurrectPed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ResurrectPed(_ped);
}
/**
 * ```
 * It will revive/cure the injured ped. The condition is ped must not be dead.
 * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
 * This function is well suited there.
 * ```
 * Hash: 0x8D8ACD8388CD99CE | ApiSet: undefined
 */
export function reviveInjuredPed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ReviveInjuredPed(_ped);
}
/**
 * Prevents ambient peds from dropping their weapons for the current frame.
 * ```
 * NativeDB Introduced: v3258
 * ```
 * Hash: 0xC73EFFC5E043A8BA | ApiSet: undefined
 */
export function setBlockAmbientPedsFromDroppingWeaponsThisFrame() {
    SetBlockAmbientPedsFromDroppingWeaponsThisFrame();
}
/**
 * Hash: 0x1B1E2A40A65B8521 | ApiSet: undefined
 */
export function setAiWeaponDamageModifier(value) {
    SetAiWeaponDamageModifier(value);
}
/**
 * Hash: 0x6B0E6172C9A4D902 | ApiSet: undefined
 */
export function setAmbientPedsDropMoney(p0) {
    SetAmbientPedsDropMoney(p0);
}
/**
 * Hash: 0xFF41B4B141ED981C | ApiSet: undefined
 */
export function setCombatFloat(ped, combatType, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetCombatFloat(_ped, combatType, p2);
}
/**
 * Hash: 0x102E68B2024D536D | ApiSet: undefined
 */
export function setCreateRandomCops(toggle) {
    SetCreateRandomCops(toggle);
}
/**
 * ```
 * Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
 * ```
 * Hash: 0xDED5AF5A0EA4B297 | ApiSet: undefined
 */
export function setDriverRacingModifier(driver, modifier) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    SetDriverRacingModifier(_driver, modifier);
}
/**
 * Hash: 0x444CB7D7DBE6973D | ApiSet: undefined
 */
export function setCreateRandomCopsOnScenarios(toggle) {
    SetCreateRandomCopsOnScenarios(toggle);
}
/**
 * ```
 * Setting ped to true allows the ped to shoot "friendlies".
 * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
 * p1 = false & p2 = false for unable to aim at.
 * p1 = true & p2 = false for able to aim at.
 * ```
 * Hash: 0xB3B1CB349FF9C75D | ApiSet: undefined
 */
export function setCanAttackFriendly(ped, toggle, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetCanAttackFriendly(_ped, toggle, p2);
}
/**
 * Sets the IsHandCuffed (120) config flag on the ped. This blocks the ped from switching weapons (with the exception of switching to `weapon_unarmed`), makes the ped ragdoll on getting punched and forces a different get-up animation after ragdolling. The ped can also not vault over or climb on top of objects.
 * Used in combination with [SET_ENABLE_BOUND_ANKLES](#\_0xC52E0F855C58FC2E) in decompiled scripts.
 * Hash: 0xDF1AF8B5D56542FA | ApiSet: undefined
 */
export function setEnableHandcuffs(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetEnableHandcuffs(_ped, toggle);
}
/**
 * ```
 * `works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him`
 * ```
 * Hash: 0x9F8AA94D6D97DBF4 | ApiSet: undefined
 */
export function setBlockingOfNonTemporaryEvents(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetBlockingOfNonTemporaryEvents(_ped, toggle);
}
/**
 * ```
 * Enables diving motion when underwater.
 * ```
 * Hash: 0xF99F62004024D506 | ApiSet: undefined
 */
export function setEnableScuba(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetEnableScuba(_ped, toggle);
}
/**
 * ```
 * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
 * ```
 * Hash: 0xB195FFA8042FC5C3 | ApiSet: undefined
 */
export function setDriverAbility(driver, ability) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    SetDriverAbility(_driver, ability);
}
/**
 * Hash: 0x8A4986851C4EF6E7 | ApiSet: undefined
 */
export function setCreateRandomCopsNotOnScenarios(toggle) {
    SetCreateRandomCopsNotOnScenarios(toggle);
}
/**
 * Hash: 0xD2C5AA0C0E8D0F1E | ApiSet: undefined
 */
export function setEnablePedEnveffScale(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetEnablePedEnveffScale(_ped, toggle);
}
/**
 * ```
 * range 0.0f - 1.0f
 * ```
 * Hash: 0xA731F608CA104E3C | ApiSet: undefined
 */
export function setDriverAggressiveness(driver, aggressiveness) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    SetDriverAggressiveness(_driver, aggressiveness);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xEE2476B9EE4A094F | ApiSet: undefined
 */
export function setEnableScubaGearLight(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetEnableScubaGearLight(_ped, toggle);
}
/**
 * Used with [SET_ENABLE_HANDCUFFS](#\_0xDF1AF8B5D56542FA) in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
 * Hash: 0xC52E0F855C58FC2E | ApiSet: undefined
 */
export function setEnableBoundAnkles(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetEnableBoundAnkles(_ped, toggle);
}
/**
 * Hash: 0xFFC24B988B938B38 | ApiSet: undefined
 */
export function setFacialIdleAnimOverride(ped, animName, animDict) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetFacialIdleAnimOverride(_ped, animName, animDict);
}
/**
 * Hash: 0x129466ED55140F8D | ApiSet: undefined
 */
export function setForceFootstepUpdate(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetForceFootstepUpdate(_ped, toggle);
}
/**
 * Hash: 0xCB968B53FC7F916D | ApiSet: undefined
 */
export function setForceStepType(ped, p1, type, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetForceStepType(_ped, p1, type, p3);
}
/**
 * Clipsets:
 * "facials@gen_female@base"
 * "facials@gen_male@base"
 * "facials@p_m_zero@base"
 * Typically followed with [SET_FACIAL_IDLE_ANIM_OVERRIDE](#\_0xFFC24B988B938B38):
 * "mood_drunk\_1"
 * "mood_stressed\_1"
 * "mood_happy\_1"
 * "mood_talking\_1"
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x5687C7F05B39E401 | ApiSet: undefined
 */
export function setFacialClipsetOverride(ped, animDict) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetFacialClipsetOverride(_ped, animDict);
}
/**
 * Sets the IK target for a given IK part belonging to the ped.
 * **Please note:** The IK target will only be valid for one update, so it needs to be set for as long as it is needed (to avoid IK targets not being cleared and getting stuck enabled).
 * ```cpp
 * enum eIkPart {
 * IK_PART_INVALID = 0,
 * // head
 * IK_PART_HEAD = 1,
 * // spine
 * IK_PART_SPINE = 2,
 * // Left Arm
 * IK_PART_ARM_LEFT = 3,
 * // Right Arm
 * IK_PART_ARM_RIGHT = 4,
 * // Left Leg
 * IK_PART_LEG_LEFT = 5,
 * // Right Leg
 * IK_PART_LEG_RIGHT = 6
 * };
 * ```
 * ```cpp
 * enum eIkTargetFlags {
 * ITF_DEFAULT = 0,
 * // arm target relative to the handbone
 * ITF_ARM_TARGET_WRT_HANDBON = 1,
 * // arm target relative to the pointhelper
 * ITF_ARM_TARGET_WRT_POINTHELPER = 2,
 * // arm target relative to the ikhelper
 * ITF_ARM_TARGET_WRT_IKHELPE = 4,
 * // use animation tags directly
 * ITF_IK_TAG_MODE_NORMAL = 8,
 * // use animation tags in ALLOW mode
 * ITF_IK_TAG_MODE_ALLOW = 16,
 * // use animation tags in BLOCK mode
 * ITF_IK_TAG_MODE_BLOCK = 32,
 * // solve for orientation in addition to position
 * ITF_ARM_USE_ORIENTATION = 64
 * };
 * ```
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xC32779C16FCEECD9 | ApiSet: undefined
 */
export function setIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, ikTargetFlags, blendInDuration, blendOutDuration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entityLookAt = entityLookAt instanceof Entity ? entityLookAt.handle() : entityLookAt;
    SetIkTarget(_ped, ikIndex, _entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, ikTargetFlags, blendInDuration, blendOutDuration);
}
/**
 * ```
 * 0: Freedom to move
 * 1: Circle Around Leader
 * 2: Alternative Circle Around Leader
 * 3: Line, with Leader at center
 * 4: Arrow Formation
 * 5: "V" Formation
 * 6: Line Follow Formation
 * 7: Single Formation
 * 8: Pairwise
 * ```
 * Hash: 0xCE2F5FC3AF7E8C1E | ApiSet: undefined
 */
export function setGroupFormation(groupId, formationType) {
    SetGroupFormation(groupId, formationType);
}
/**
 * ```
 * Sets the range at which members will automatically leave the group.
 * ```
 * Hash: 0x4102C7858CFEE4E4 | ApiSet: undefined
 */
export function setGroupSeparationRange(groupHandle, separationRange) {
    SetGroupSeparationRange(groupHandle, separationRange);
}
/**
 * Hash: 0x1D9D45004C28C916 | ApiSet: undefined
 */
export function setGroupFormationSpacing(groupId, p1, p2, p3) {
    SetGroupFormationSpacing(groupId, p1, p2, p3);
}
/**
 * ```
 * name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
 * ```
 * Hash: 0x781DE8FA214E87D2 | ApiSet: undefined
 */
export function setMovementModeOverride(ped, name) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetMovementModeOverride(_ped, name);
}
/**
 * ```
 * accuracy = 0-100, 100 being perfectly accurate
 * ```
 * Hash: 0x7AEFB85C1D49DEB6 | ApiSet: undefined
 */
export function setPedAccuracy(ped, accuracy) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAccuracy(_ped, accuracy);
}
/**
 * ```
 * value ranges from 0 to 3.
 * ```
 * Hash: 0xDBA71115ED9941A6 | ApiSet: undefined
 */
export function setPedAlertness(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAlertness(_ped, value);
}
/**
 * Preview: https://gfycat.com/MaleRareAmazonparrot
 * Hash: 0xCC9682B8951C5229 | ApiSet: undefined
 */
export function setHeadBlendPaletteColor(ped, r, g, b, id) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetHeadBlendPaletteColor(_ped, r, g, b, id);
}
/**
 * ```
 * stance:
 * 0 = idle
 * 1 = walk
 * 2 = running
 * p5 = usually set to true
 * ```
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x90A43CC281FFAB46 | ApiSet: undefined
 */
export function setPedAlternateMovementAnim(ped, stance, animDictionary, animationName, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAlternateMovementAnim(_ped, stance, animDictionary, animationName, p4, p5);
}
/**
 * Hash: 0xDA1F1B7BE1A8766F | ApiSet: undefined
 */
export function setPedAllowedToDuck(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAllowedToDuck(_ped, toggle);
}
/**
 * Hash: 0x3C028C636A414ED9 | ApiSet: undefined
 */
export function setPedAllowVehiclesOverride(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAllowVehiclesOverride(_ped, toggle);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x6C60394CB4F75E9A | ApiSet: undefined
 */
export function setPedAlternateWalkAnim(ped, animDict, animName, p3, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAlternateWalkAnim(_ped, animDict, animName, p3, p4);
}
/**
 * ```
 * Sets the armor of the specified ped.
 * ped: The Ped to set the armor of.
 * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
 * ```
 * Hash: 0xCEA04D83135264CC | ApiSet: undefined
 */
export function setPedArmour(ped, amount) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedArmour(_ped, amount);
}
/**
 * ```
 * Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
 * ```
 * Hash: 0x2B5AA717A181FB4C | ApiSet: undefined
 */
export function setPedAoBlobRendering(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAoBlobRendering(_ped, toggle);
}
/**
 * ```
 * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
 * ```
 * Hash: 0xBB03C38DD3FB7FFD | ApiSet: undefined
 */
export function setPedAsCop(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAsCop(_ped, toggle);
}
/**
 * Hash: 0xC7F76DF27A5045A1 | ApiSet: undefined
 */
export function setPedAngledDefensiveArea(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAngledDefensiveArea(_ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * Hash: 0x9F3480FE65DB31B5 | ApiSet: undefined
 */
export function setPedAsGroupMember(ped, groupId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAsGroupMember(_ped, groupId);
}
/**
 * Hash: 0x2A7819605465FBCE | ApiSet: undefined
 */
export function setPedAsGroupLeader(ped, groupId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAsGroupLeader(_ped, groupId);
}
/**
 * Hash: 0x02A0C9720B854BFA | ApiSet: undefined
 */
export function setPedAsEnemy(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAsEnemy(_ped, toggle);
}
/**
 * Hash: 0x4F5F651ACCC9C4CF | ApiSet: undefined
 */
export function setPedBoundsOrientation(ped, p1, p2, p3, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedBoundsOrientation(_ped, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x576594E8D64375E2 | ApiSet: undefined
 */
export function setPedBlocksPathingWhenDead(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedBlocksPathingWhenDead(_ped, toggle);
}
/**
 * Hash: 0x6C3B4D6D13B4C841 | ApiSet: undefined
 */
export function setPedCanArmIk(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanArmIk(_ped, toggle);
}
/**
 * Hash: 0x137BBD05230DB22D | ApiSet: undefined
 */
export function setPedBlendFromParents(ped, father, mother, fathersSide, mothersSide) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _father = father instanceof Ped ? father.handle() : father;
    const _mother = mother instanceof Ped ? mother.handle() : mother;
    SetPedBlendFromParents(_ped, _father, _mother, fathersSide, mothersSide);
}
/**
 * Hash: 0xC1670E958EEE24E5 | ApiSet: undefined
 */
export function setPedCanBeDraggedOut(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanBeDraggedOut(_ped, toggle);
}
/**
 * Hash: 0x638C03B0F9878F57 | ApiSet: undefined
 */
export function setPedCanBeTargetedWhenInjured(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanBeTargetedWhenInjured(_ped, toggle);
}
/**
 * ```
 * state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
 * ```
 * Hash: 0x7A6535691B477C48 | ApiSet: undefined
 */
export function setPedCanBeKnockedOffVehicle(ped, state) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanBeKnockedOffVehicle(_ped, state);
}
/**
 * Hash: 0x63F58F7C80513AAD | ApiSet: undefined
 */
export function setPedCanBeTargetted(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanBeTargetted(_ped, toggle);
}
/**
 * Hash: 0xBF1CA77833E58F2C | ApiSet: undefined
 */
export function setPedCanBeTargettedByTeam(ped, team, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanBeTargettedByTeam(_ped, team, toggle);
}
/**
 * Hash: 0x6B7A646C242A7059 | ApiSet: undefined
 */
export function setPedCanEvasiveDive(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanEvasiveDive(_ped, toggle);
}
/**
 * ```
 * It simply makes the said ped to cower behind cover object(wall, desk, car)
 * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
 * ```
 * Hash: 0xCB7553CDCEF4A735 | ApiSet: undefined
 */
export function setPedCanCowerInCover(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanCowerInCover(_ped, toggle);
}
/**
 * It makes the ped lose (or not lose) their props (like glasses or helmets/hat) when someone punches or pushes the ped.
 * This is probably what's being used in GTA:O to keep players from knocking other player's hats/glasses off when in combat.
 * Hash: 0xE861D0B05C7662B8 | ApiSet: undefined
 */
export function setPedCanLosePropsOnDamage(ped, loseProps, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanLosePropsOnDamage(_ped, loseProps, p2);
}
/**
 * Hash: 0xC7EF1BA83230BA07 | ApiSet: undefined
 */
export function setPedCanBeShotInVehicle(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanBeShotInVehicle(_ped, toggle);
}
/**
 * Hash: 0xC11C18092C5530DC | ApiSet: undefined
 */
export function setPedCanHeadIk(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanHeadIk(_ped, toggle);
}
/**
 * Hash: 0x73518ECE2485412B | ApiSet: undefined
 */
export function setPedCanLegIk(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanLegIk(_ped, toggle);
}
/**
 * Hash: 0x4328652AE5769C71 | ApiSet: undefined
 */
export function setPedCanBeTargetedWithoutLos(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanBeTargetedWithoutLos(_ped, toggle);
}
/**
 * Hash: 0x33A60D8BDD6E508C | ApiSet: undefined
 */
export function setPedCanPlayInjuredAnims(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanPlayInjuredAnims(_ped, p1);
}
/**
 * Hash: 0xDF993EE5E90ABA25 | ApiSet: undefined
 */
export function setPedCanRagdollFromPlayerImpact(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanRagdollFromPlayerImpact(_ped, toggle);
}
/**
 * Hash: 0x66B57B72E0836A76 | ApiSet: undefined
 */
export function setPedCanBeTargettedByPlayer(ped, player, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPedCanBeTargettedByPlayer(_ped, _player, toggle);
}
/**
 * Hash: 0xED7F7EFE9FABF340 | ApiSet: undefined
 */
export function setPedCanSwitchWeapon(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanSwitchWeapon(_ped, toggle);
}
/**
 * Hash: 0x0EB0585D15254740 | ApiSet: undefined
 */
export function setPedCanPlayAmbientBaseAnims(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanPlayAmbientBaseAnims(_ped, toggle);
}
/**
 * Hash: 0x6373D1349925A70E | ApiSet: undefined
 */
export function setPedCanPlayAmbientAnims(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanPlayAmbientAnims(_ped, toggle);
}
/**
 * Hash: 0xF5846EDB26A98A24 | ApiSet: undefined
 */
export function setPedCanTorsoReactIk(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanTorsoReactIk(_ped, p1);
}
/**
 * Hash: 0xBAF20C5432058024 | ApiSet: undefined
 */
export function setPedCanPlayGestureAnims(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanPlayGestureAnims(_ped, toggle);
}
/**
 * Hash: 0xB128377056A54E2A | ApiSet: undefined
 */
export function setPedCanRagdoll(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanRagdoll(_ped, toggle);
}
/**
 * Hash: 0xC514825C507E3736 | ApiSet: undefined
 */
export function setPedCanPeekInCover(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanPeekInCover(_ped, toggle);
}
/**
 * Hash: 0x78C4E9961DB3EB5B | ApiSet: undefined
 */
export function setPedClothPackageIndex(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedClothPackageIndex(_ped, p1);
}
/**
 * ```
 * p2 usually 0
 * ```
 * Hash: 0xF833DDBA3B104D43 | ApiSet: undefined
 */
export function setPedCanPlayVisemeAnims(ped, toggle, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanPlayVisemeAnims(_ped, toggle, p2);
}
/**
 * Hash: 0xF2B7106D37947CE0 | ApiSet: undefined
 */
export function setPedCanTorsoIk(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanTorsoIk(_ped, toggle);
}
/**
 * Hash: 0x1CCE141467FF42A2 | ApiSet: undefined
 */
export function setPedCanSmashGlass(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanSmashGlass(_ped, p1, p2);
}
/**
 * ```
 * Overrides the ped's collision capsule radius for the current tick.
 * Must be called every tick to be effective.
 * Setting this to 0.001 will allow warping through some objects.
 * ```
 * Hash: 0x364DF566EC833DE2 | ApiSet: undefined
 */
export function setPedCapsule(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCapsule(_ped, value);
}
/**
 * ```
 * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
 * Only works in singleplayer
 * ```
 * Hash: 0x2E2F4240B3F24647 | ApiSet: undefined
 */
export function setPedCanTeleportToGroupLeader(pedHandle, groupHandle, toggle) {
    const _pedHandle = pedHandle instanceof Ped ? pedHandle.handle() : pedHandle;
    SetPedCanTeleportToGroupLeader(_pedHandle, groupHandle, toggle);
}
/**
 * Hash: 0xEC4686EC06434678 | ApiSet: undefined
 */
export function setPedCanUseAutoConversationLookat(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanUseAutoConversationLookat(_ped, toggle);
}
/**
 * Hash: 0x6647C5F6F5792496 | ApiSet: undefined
 */
export function setPedCanTorsoVehicleIk(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanTorsoVehicleIk(_ped, p1);
}
/**
 * Hash: 0x82A3D6D9CC2CB8E3 | ApiSet: undefined
 */
export function setPedClothProne(p0, p1) {
    SetPedClothProne(p0, p1);
}
/**
 * ```
 * Found in the b617d scripts:
 * `PED::_9DBA107B4937F809(v_7, "trevor_heist_cover_2h");`
 * SET_PED_MO*
 * ```
 * Hash: 0x9DBA107B4937F809 | ApiSet: undefined
 */
export function setPedCoverClipsetOverride(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCoverClipsetOverride(_ped, p1);
}
/**
 * These combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta.
 * So far, these are the equivalents found:
 * ```cpp
 * enum eCombatAttribute
 * {
 * CA_INVALID = -1,
 * // AI will only use cover if this is set
 * CA_USE_COVER = 0,
 * // AI will only use vehicles if this is set
 * CA_USE_VEHICLE = 1,
 * // AI will only driveby from a vehicle if this is set
 * CA_DO_DRIVEBYS = 2,
 * // Will be forced to stay in a ny vehicel if this isn't set
 * CA_LEAVE_VEHICLES = 3,
 * // This ped can make decisions on whether to strafe or not based on distance to destination, recent bullet events, etc.
 * CA_CAN_USE_DYNAMIC_STRAFE_DECISIONS	= 4,
 * // Ped will always fight upon getting threat response task
 * CA_ALWAYS_FIGHT = 5,
 * // If in combat and in a vehicle, the ped will flee rather than attacking
 * CA_FLEE_WHILST_IN_VEHICLE = 6,
 * // If in combat and chasing in a vehicle, the ped will keep a distance behind rather than ramming
 * CA_JUST_FOLLOW_VEHICLE = 7,
 * // Deprecated
 * CA_PLAY_REACTION_ANIMS = 8,
 * // Peds will scan for and react to dead peds found
 * CA_WILL_SCAN_FOR_DEAD_PEDS = 9,
 * // Deprecated
 * CA_IS_A_GUARD = 10,
 * // The ped will seek cover only
 * CA_JUST_SEEK_COVER = 11,
 * // Ped will only blind fire when in cover
 * CA_BLIND_FIRE_IN_COVER = 12,
 * // Ped may advance
 * CA_AGGRESSIVE = 13,
 * // Ped can investigate events such as distant gunfire, footsteps, explosions etc
 * CA_CAN_INVESTIGATE = 14,
 * // Ped can use a radio to call for backup (happens after a reaction)
 * CA_CAN_USE_RADIO = 15,
 * // Deprecated
 * CA_CAN_CAPTURE_ENEMY_PEDS = 16,
 * // Ped will always flee upon getting threat response task
 * CA_ALWAYS_FLEE = 17,
 * // Ped can do unarmed taunts in vehicle
 * CA_CAN_TAUNT_IN_VEHICLE = 20,
 * // Ped will be able to chase their targets if both are on foot and the target is running away
 * CA_CAN_CHASE_TARGET_ON_FOOT = 21,
 * // Ped can drag injured peds to safety
 * CA_WILL_DRAG_INJURED_PEDS_TO_SAFETY = 22,
 * // Ped will require LOS to the target it is aiming at before shooting
 * CA_REQUIRES_LOS_TO_SHOOT = 23,
 * // Ped is allowed to use proximity based fire rate (increasing fire rate at closer distances)
 * CA_USE_PROXIMITY_FIRING_RATE = 24,
 * // Normally peds can switch briefly to a secondary target in combat, setting this will prevent that
 * CA_DISABLE_SECONDARY_TARGET = 25,
 * // This will disable the flinching combat entry reactions for peds, instead only playing the turn and aim anims
 * CA_DISABLE_ENTRY_REACTIONS = 26,
 * // Force ped to be 100% accurate in all situations (added by Jay Reinebold)
 * CA_PERFECT_ACCURACY = 27,
 * // If we don't have cover and can't see our target it's possible we will advance, even if the target is in cover
 * CA_CAN_USE_FRUSTRATED_ADVANCE	= 28,
 * // This will have the ped move to defensive areas and within attack windows before performing the cover search
 * CA_MOVE_TO_LOCATION_BEFORE_COVER_SEARCH = 29,
 * // Allow shooting of our weapon even if we don't have LOS (this isn't X-ray vision as it only affects weapon firing)
 * CA_CAN_SHOOT_WITHOUT_LOS = 30,
 * // Ped will try to maintain a min distance to the target, even if using defensive areas (currently only for cover finding + usage)
 * CA_MAINTAIN_MIN_DISTANCE_TO_TARGET = 31,
 * // Allows ped to use steamed variations of peeking anims
 * CA_CAN_USE_PEEKING_VARIATIONS	= 34,
 * // Disables pinned down behaviors
 * CA_DISABLE_PINNED_DOWN = 35,
 * // Disables pinning down others
 * CA_DISABLE_PIN_DOWN_OTHERS = 36,
 * // When defensive area is reached the area is cleared and the ped is set to use defensive combat movement
 * CA_OPEN_COMBAT_WHEN_DEFENSIVE_AREA_IS_REACHED = 37,
 * // Disables bullet reactions
 * CA_DISABLE_BULLET_REACTIONS = 38,
 * // Allows ped to bust the player
 * CA_CAN_BUST = 39,
 * // This ped is ignored by other peds when wanted
 * CA_IGNORED_BY_OTHER_PEDS_WHEN_WANTED = 40,
 * // Ped is allowed to "jack" vehicles when needing to chase a target in combat
 * CA_CAN_COMMANDEER_VEHICLES = 41,
 * // Ped is allowed to flank
 * CA_CAN_FLANK = 42,
 * // Ped will switch to advance if they can't find cover
 * CA_SWITCH_TO_ADVANCE_IF_CANT_FIND_COVER = 43,
 * // Ped will switch to defensive if they are in cover
 * CA_SWITCH_TO_DEFENSIVE_IF_IN_COVER = 44,
 * // Ped will clear their primary defensive area when it is reached
 * CA_CLEAR_PRIMARY_DEFENSIVE_AREA_WHEN_REACHED = 45,
 * // Ped is allowed to fight armed peds when not armed
 * CA_CAN_FIGHT_ARMED_PEDS_WHEN_NOT_ARMED = 46,
 * // Ped is not allowed to use tactical points if set to use defensive movement (will only use cover)
 * CA_ENABLE_TACTICAL_POINTS_WHEN_DEFENSIVE = 47,
 * // Ped cannot adjust cover arcs when testing cover safety (atm done on corner cover points when  ped usingdefensive area + no LOS)
 * CA_DISABLE_COVER_ARC_ADJUSTMENTS = 48,
 * // Ped may use reduced accuracy with large number of enemies attacking the same local player target
 * CA_USE_ENEMY_ACCURACY_SCALING	= 49,
 * // Ped is allowed to charge the enemy position
 * CA_CAN_CHARGE = 50,
 * // When defensive area is reached the area is cleared and the ped is set to use will advance movement
 * CA_REMOVE_AREA_SET_WILL_ADVANCE_WHEN_DEFENSIVE_AREA_REACHED = 51,
 * // Use the vehicle attack mission during combat (only works on driver)
 * CA_USE_VEHICLE_ATTACK = 52,
 * // Use the vehicle attack mission during combat if the vehicle has mounted guns (only works on driver)
 * CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS = 53,
 * // Always equip best weapon in combat
 * CA_ALWAYS_EQUIP_BEST_WEAPON = 54,
 * // Ignores in water at depth visibility check
 * CA_CAN_SEE_UNDERWATER_PEDS = 55,
 * // Will prevent this ped from aiming at any AI targets that are in helicopters
 * CA_DISABLE_AIM_AT_AI_TARGETS_IN_HELIS = 56,
 * // Disables peds seeking due to no clear line of sight
 * CA_DISABLE_SEEK_DUE_TO_LINE_OF_SIGHT = 57,
 * // To be used when releasing missions peds if we don't want them fleeing from combat (mission peds already prevent flee)
 * CA_DISABLE_FLEE_FROM_COMBAT = 58,
 * // Disables target changes during vehicle pursuit
 * CA_DISABLE_TARGET_CHANGES_DURING_VEHICLE_PURSUIT = 59,
 * // Ped may throw a smoke grenade at player loitering in combat
 * CA_CAN_THROW_SMOKE_GRENADE = 60,
 * // Will clear a set defensive area if that area cannot be reached
 * CA_CLEAR_AREA_SET_DEFENSIVE_IF_DEFENSIVE_CANNOT_BE_REACHED = 62,
 * // Disable block from pursue during vehicle chases
 * CA_DISABLE_BLOCK_FROM_PURSUE_DURING_VEHICLE_CHASE = 64,
 * // Disable spin out during vehicle chases
 * CA_DISABLE_SPIN_OUT_DURING_VEHICLE_CHASE = 65,
 * // Disable cruise in front during block during vehicle chases
 * CA_DISABLE_CRUISE_IN_FRONT_DURING_BLOCK_DURING_VEHICLE_CHASE = 66,
 * // Makes it more likely that the ped will continue targeting a target with blocked los for a few seconds
 * CA_CAN_IGNORE_BLOCKED_LOS_WEIGHTING = 67,
 * // Disables the react to buddy shot behaviour.
 * CA_DISABLE_REACT_TO_BUDDY_SHOT = 68,
 * // Prefer pathing using navmesh over road nodes
 * CA_PREFER_NAVMESH_DURING_VEHICLE_CHASE = 69,
 * // Ignore road edges when avoiding
 * CA_ALLOWED_TO_AVOID_OFFROAD_DURING_VEHICLE_CHASE = 70,
 * // Permits ped to charge a target outside the assigned defensive area.
 * CA_PERMIT_CHARGE_BEYOND_DEFENSIVE_AREA = 71,
 * // This ped will switch to an RPG if target is in a vehicle, otherwise will use alternate weapon.
 * CA_USE_ROCKETS_AGAINST_VEHICLES_ONLY = 72,
 * // Disables peds moving to a tactical point without clear los
 * CA_DISABLE_TACTICAL_POINTS_WITHOUT_CLEAR_LOS = 73,
 * // Disables pull alongside during vehicle chase
 * CA_DISABLE_PULL_ALONGSIDE_DURING_VEHICLE_CHASE = 74,
 * // If set on a ped, they will not flee when all random peds flee is set to TRUE (they are still able to flee due to other reasons)
 * CA_DISABLE_ALL_RANDOMS_FLEE = 78,
 * // This ped will send out a script DeadPedSeenEvent when they see a dead ped
 * CA_WILL_GENERATE_DEAD_PED_SEEN_SCRIPT_EVENTS = 79,
 * // This will use the receiving peds sense range rather than the range supplied to the communicate event
 * CA_USE_MAX_SENSE_RANGE_WHEN_RECEIVING_EVENTS = 80,
 * // When aiming from a vehicle the ped will only aim at targets on his side of the vehicle
 * CA_RESTRICT_IN_VEHICLE_AIMING_TO_CURRENT_SIDE = 81,
 * // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming)
 * CA_USE_DEFAULT_BLOCKED_LOS_POSITION_AND_DIRECTION = 82,
 * // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming)
 * CA_REQUIRES_LOS_TO_AIM = 83,
 * // Allow vehicles spawned infront of target facing away to enter cruise and wait to block approaching target
 * CA_CAN_CRUISE_AND_BLOCK_IN_VEHICLE = 84,
 * // Peds flying aircraft will prefer to target other aircraft over entities on the ground
 * CA_PREFER_AIR_COMBAT_WHEN_IN_AIRCRAFT = 85,
 * //Allow peds flying aircraft to use dog fighting behaviours
 * CA_ALLOW_DOG_FIGHTING = 86,
 * // This will make the weight of targets who aircraft vehicles be reduced greatly compared to targets on foot or in ground based vehicles
 * CA_PREFER_NON_AIRCRAFT_TARGETS = 87,
 * //When peds are tasked to go to combat, they keep searching for a known target for a while before forcing an unknown one
 * CA_PREFER_KNOWN_TARGETS_WHEN_COMBAT_CLOSEST_TARGET = 88,
 * // Only allow mounted weapons to fire if within the correct attack angle (default 25-degree cone). On a flag in order to keep exiting behaviour and only fix in specific cases.
 * CA_FORCE_CHECK_ATTACK_ANGLE_FOR_MOUNTED_GUNS = 89,
 * // Blocks the firing state for passenger-controlled mounted weapons. Existing flags CA_USE_VEHICLE_ATTACK and CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS only work for drivers.
 * CA_BLOCK_FIRE_FOR_VEHICLE_PASSENGER_MOUNTED_GUNS = 90
 * };
 * ```
 * Hash: 0x9F7794730795E019 | ApiSet: undefined
 */
export function setPedCombatAttributes(ped, attributeIndex, enabled) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCombatAttributes(_ped, attributeIndex, enabled);
}
/**
 * ```
 * 100 would equal attack
 * less then 50ish would mean run away
 * Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta:
 * 0: CA_Poor
 * 1: CA_Average
 * 2: CA_Professional
 * Tested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.
 * ```
 * Hash: 0xC7622C0D36B2FDA8 | ApiSet: undefined
 */
export function setPedCombatAbility(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCombatAbility(_ped, p1);
}
/**
 * ```
 * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
 * ```
 * Hash: 0xA549131166868ED3 | ApiSet: undefined
 */
export function setPedCowerHash(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCowerHash(_ped, p1);
}
/**
 * ```
 * 0 - Stationary (Will just stand in place)
 * 1 - Defensive (Will try to find cover and very likely to blind fire)
 * 2 - Offensive (Will attempt to charge at enemy but take cover as well)
 * 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
 * ```
 * Hash: 0x4D9CA1009AFBD057 | ApiSet: undefined
 */
export function setPedCombatMovement(ped, combatMovement) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCombatMovement(_ped, combatMovement);
}
/**
 * Define the scope within which the ped will engage in combat with the target.
 * ```cpp
 * enum eCombatRange {
 * CR_NEAR = 0, // keeps within 5-15m
 * CR_MEDIUM = 1, // keeps within 7-30m
 * CR_FAR = 2, // keeps within 15-40m
 * CR_VERY_FAR = 3 // keeps within 22-45m
 * };
 * ```
 * Hash: 0x3C606747B23E497B | ApiSet: undefined
 */
export function setPedCombatRange(ped, range) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCombatRange(_ped, range);
}
/**
 * Hash: 0x4EF47FE21698A8B6 | ApiSet: undefined
 */
export function setPedDefensiveAreaAttachedToPed(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _attachPed = attachPed instanceof Ped ? attachPed.handle() : attachPed;
    SetPedDefensiveAreaAttachedToPed(_ped, _attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}
/**
 * This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model.
 * ### MP Freemode list of components
 * **0**: Face
 * **1**: Mask
 * **2**: Hair
 * **3**: Torso
 * **4**: Leg
 * **5**: Parachute / bag
 * **6**: Shoes
 * **7**: Accessory
 * **8**: Undershirt
 * **9**: Kevlar
 * **10**: Badge
 * **11**: Torso 2
 * List of Component IDs
 * ```cpp
 * // Components
 * enum ePedVarComp
 * {
 * PV_COMP_INVALID = 0xFFFFFFFF,
 * PV_COMP_HEAD = 0, // "HEAD"
 * PV_COMP_BERD = 1, // "BEARD"
 * PV_COMP_HAIR = 2, // "HAIR"
 * PV_COMP_UPPR = 3, // "UPPER"
 * PV_COMP_LOWR = 4, // "LOWER"
 * PV_COMP_HAND = 5, // "HAND"
 * PV_COMP_FEET = 6, // "FEET"
 * PV_COMP_TEEF = 7, // "TEETH"
 * PV_COMP_ACCS = 8, // "ACCESSORIES"
 * PV_COMP_TASK = 9, // "TASK"
 * PV_COMP_DECL = 10, // "DECL"
 * PV_COMP_JBIB = 11, // "JBIB"
 * PV_COMP_MAX = 12,
 * };
 * ```
 * Hash: 0x262B14F48D29DE80 | ApiSet: undefined
 */
export function setPedComponentVariation(ped, componentId, drawableId, textureId, paletteId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedComponentVariation(_ped, componentId, drawableId, textureId, paletteId);
}
/**
 * Hash: 0x87052FE446E07247 | ApiSet: undefined
 */
export function setPedCoordsNoGang(ped, posX, posY, posZ) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCoordsNoGang(_ped, posX, posY, posZ);
}
/**
 * ```
 * teleports ped to coords along with the vehicle ped is in
 * ```
 * Hash: 0x9AFEFF481A85AB2E | ApiSet: undefined
 */
export function setPedCoordsKeepVehicle(ped, posX, posY, posZ) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCoordsKeepVehicle(_ped, posX, posY, posZ);
}
/**
 * ```cpp
 * // Potential names and hash collisions included as comments
 * enum ePedConfigFlags {
 * CPED_CONFIG_FLAG_CreatedByFactory = 0,
 * CPED_CONFIG_FLAG_CanBeShotInVehicle = 1,
 * CPED_CONFIG_FLAG_NoCriticalHits = 2,
 * CPED_CONFIG_FLAG_DrownsInWater = 3,
 * CPED_CONFIG_FLAG_DrownsInSinkingVehicle = 4,
 * CPED_CONFIG_FLAG_DiesInstantlyWhenSwimming = 5,
 * CPED_CONFIG_FLAG_HasBulletProofVest = 6,
 * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
 * CPED_CONFIG_FLAG_NeverFallOffSkis = 8,
 * CPED_CONFIG_FLAG_NeverEverTargetThisPed = 9,
 * CPED_CONFIG_FLAG_ThisPedIsATargetPriority = 10,
 * CPED_CONFIG_FLAG_TargettableWithNoLos = 11,
 * CPED_CONFIG_FLAG_DoesntListenToPlayerGroupCommands = 12,
 * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
 * CPED_CONFIG_FLAG_DoesntDropWeaponsWhenDead = 14,
 * CPED_CONFIG_FLAG_SetDelayedWeaponAsCurrent = 15,
 * CPED_CONFIG_FLAG_KeepTasksAfterCleanUp = 16,
 * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
 * CPED_CONFIG_FLAG_HasAScriptBrain = 18,
 * CPED_CONFIG_FLAG_WaitingForScriptBrainToLoad = 19,
 * CPED_CONFIG_FLAG_AllowMedicsToReviveMe = 20,
 * CPED_CONFIG_FLAG_MoneyHasBeenGivenByScript = 21,
 * CPED_CONFIG_FLAG_NotAllowedToCrouch = 22,
 * CPED_CONFIG_FLAG_DeathPickupsPersist = 23,
 * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
 * CPED_CONFIG_FLAG_ForceDieIfInjured = 25,
 * CPED_CONFIG_FLAG_DontDragMeOutCar = 26,
 * CPED_CONFIG_FLAG_StayInCarOnJack = 27,
 * CPED_CONFIG_FLAG_ForceDieInCar = 28,
 * CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
 * CPED_CONFIG_FLAG_WillRemainOnBoatAfterMissionEnds = 30,
 * CPED_CONFIG_FLAG_DontStoreAsPersistent = 31,
 * CPED_CONFIG_FLAG_WillFlyThroughWindscreen = 32,
 * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
 * CPED_CONFIG_FLAG_HasHelmet = 34,
 * CPED_CONFIG_FLAG_UseHelmet = 35,
 * CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
 * CPED_CONFIG_FLAG_HideInCutscene = 37,
 * CPED_CONFIG_FLAG_PedIsEnemyToPlayer = 38,
 * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
 * CPED_CONFIG_FLAG_PedGeneratesDeadBodyEvents = 40,
 * CPED_CONFIG_FLAG_DontAttackPlayerWithoutWantedLevel = 41,
 * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
 * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
 * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
 * CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
 * _0xDB115BFA = 46,
 * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
 * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
 * CPED_CONFIG_FLAG_BlockGroupPedAimedAtResponse = 49,
 * CPED_CONFIG_FLAG_WillFollowLeaderAnyMeans = 50,
 * CPED_CONFIG_FLAG_BlippedByScript = 51,
 * CPED_CONFIG_FLAG_DrawRadarVisualField = 52,
 * CPED_CONFIG_FLAG_StopWeaponFiringOnImpact = 53,
 * CPED_CONFIG_FLAG_DissableAutoFallOffTests = 54,
 * CPED_CONFIG_FLAG_SteerAroundDeadBodies = 55,
 * CPED_CONFIG_FLAG_ConstrainToNavMesh = 56,
 * CPED_CONFIG_FLAG_SyncingAnimatedProps = 57,
 * CPED_CONFIG_FLAG_IsFiring = 58,
 * CPED_CONFIG_FLAG_WasFiring = 59,
 * CPED_CONFIG_FLAG_IsStanding = 60,
 * CPED_CONFIG_FLAG_WasStanding = 61,
 * CPED_CONFIG_FLAG_InVehicle = 62,
 * CPED_CONFIG_FLAG_OnMount = 63,
 * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
 * CPED_CONFIG_FLAG_IsSwimming = 65,
 * CPED_CONFIG_FLAG_WasSwimming = 66,
 * CPED_CONFIG_FLAG_IsSkiing = 67,
 * CPED_CONFIG_FLAG_IsSitting = 68,
 * CPED_CONFIG_FLAG_KilledByStealth = 69,
 * CPED_CONFIG_FLAG_KilledByTakedown = 70,
 * CPED_CONFIG_FLAG_Knockedout = 71,
 * CPED_CONFIG_FLAG_ClearRadarBlipOnDeath = 72,
 * CPED_CONFIG_FLAG_JustGotOffTrain = 73,
 * CPED_CONFIG_FLAG_JustGotOnTrain = 74,
 * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
 * CPED_CONFIG_FLAG_IsInTheAir = 76,
 * CPED_CONFIG_FLAG_KnockedUpIntoAir = 77,
 * CPED_CONFIG_FLAG_IsAimingGun = 78,
 * CPED_CONFIG_FLAG_HasJustLeftCar = 79,
 * CPED_CONFIG_FLAG_TargetWhenInjuredAllowed = 80,
 * CPED_CONFIG_FLAG_CurrLeftFootCollNM = 81,
 * CPED_CONFIG_FLAG_PrevLeftFootCollNM = 82,
 * CPED_CONFIG_FLAG_CurrRightFootCollNM = 83,
 * CPED_CONFIG_FLAG_PrevRightFootCollNM = 84,
 * CPED_CONFIG_FLAG_HasBeenBumpedInCar = 85,
 * CPED_CONFIG_FLAG_InWaterTaskQuitToClimbLadder = 86,
 * CPED_CONFIG_FLAG_NMTwoHandedWeaponBothHandsConstrained = 87,
 * CPED_CONFIG_FLAG_CreatedBloodPoolTimer = 88,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact = 89,
 * CPED_CONFIG_FLAG_GroupPedFailedToEnterCover = 90,
 * CPED_CONFIG_FLAG_AlreadyChattedOnPhone = 91,
 * CPED_CONFIG_FLAG_AlreadyReactedToPedOnRoof = 92,
 * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
 * CPED_CONFIG_FLAG_BlockCoweringInCover = 94,
 * CPED_CONFIG_FLAG_BlockPeekingInCover = 95,
 * CPED_CONFIG_FLAG_JustLeftCarNotCheckedForDoors = 96,
 * CPED_CONFIG_FLAG_VaultFromCover = 97,
 * CPED_CONFIG_FLAG_AutoConversationLookAts = 98,
 * CPED_CONFIG_FLAG_UsingCrouchedPedCapsule = 99,
 * CPED_CONFIG_FLAG_HasDeadPedBeenReported = 100,
 * CPED_CONFIG_FLAG_ForcedAim = 101,
 * CPED_CONFIG_FLAG_SteersAroundPeds = 102,
 * CPED_CONFIG_FLAG_SteersAroundObjects = 103,
 * CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
 * CPED_CONFIG_FLAG_ForceReload = 105,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
 * CPED_CONFIG_FLAG_IsBeingDraggedToSafety = 111,
 * CPED_CONFIG_FLAG_HasBeenDraggedToSafety = 112,
 * CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
 * CPED_CONFIG_FLAG_ForceScriptControlledKnockout = 114,
 * CPED_CONFIG_FLAG_FallOutOfVehicleWhenKilled = 115,
 * CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
 * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
 * CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
 * CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
 * CPED_CONFIG_FLAG_IsHandCuffed = 120,
 * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
 * CPED_CONFIG_FLAG_DisableMelee = 122,
 * CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
 * CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
 * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME = 125,
 * CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
 * CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
 * CPED_CONFIG_FLAG_CanBeAgitated = 128,
 * CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
 * CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
 * CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
 * CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
 * CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
 * CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
 * CPED_CONFIG_FLAG_IsScuba = 135,
 * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
 * CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
 * CPED_CONFIG_FLAG_RidingTrain = 138,
 * CPED_CONFIG_FLAG_ArrestResult = 139,
 * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
 * CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
 * CPED_CONFIG_FLAG_BumpedByPlayerVehicle = 142,
 * CPED_CONFIG_FLAG_DodgedPlayerVehicle = 143,
 * CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
 * CPED_CONFIG_FLAG_NoCopWantedAggro = 145,
 * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
 * CPED_CONFIG_FLAG_StairsDetected = 147,
 * CPED_CONFIG_FLAG_SlopeDetected = 148,
 * CPED_CONFIG_FLAG_HelmetHasBeenShot = 149,
 * CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
 * CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
 * CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
 * CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
 * CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
 * CPED_CONFIG_FLAG_CanPerformArrest = 155,
 * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
 * CPED_CONFIG_FLAG_CanBeArrested = 157,
 * CPED_CONFIG_FLAG_MoverConstrictedByOpposingCollisions = 158,
 * CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject = 160,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromMelee = 161,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet = 162,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning = 163,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromFalling = 164,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet = 165,
 * CPED_CONFIG_FLAG_IsInjured = 166,
 * CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
 * CPED_CONFIG_FLAG_SwimmingTasksRunning = 168,
 * CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
 * CPED_CONFIG_FLAG_ForceDirectEntry = 170,
 * CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
 * CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
 * CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
 * CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
 * CPED_CONFIG_FLAG_PlayerInContactWithKinematicPed = 175,
 * CPED_CONFIG_FLAG_PlayerInContactWithSomethingOtherThanKinematicPed = 176,
 * CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
 * CPED_CONFIG_FLAG_AdditionalRappellingPed = 178,
 * CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
 * CPED_CONFIG_FLAG_IsInCustody = 180,
 * CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
 * CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
 * CPED_CONFIG_FLAG_IsAgitated = 183,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
 * CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
 * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
 * CPED_CONFIG_FLAG_HasHurtStarted = 187,
 * CPED_CONFIG_FLAG_DisableHurt = 188,
 * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
 * CPED_CONFIG_FLAG_PedHadPhoneConversation = 190,
 * CPED_CONFIG_FLAG_BeganCrossingRoad = 191,
 * CPED_CONFIG_FLAG_WarpIntoLeadersVehicle = 192,
 * CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
 * CPED_CONFIG_FLAG_UsingScenario = 194,
 * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
 * CPED_CONFIG_FLAG_DontCollideWithKinematic = 196,
 * CPED_CONFIG_FLAG_ActivateOnSwitchFromLowPhysicsLod = 197,
 * CPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead = 198,
 * CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
 * CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
 * CPED_CONFIG_FLAG_UseDiminishingAmmoRate = 201,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
 * CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
 * CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
 * CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
 * CPED_CONFIG_FLAG_LowPhysicsLodMayPlaceOnNavMesh = 207,
 * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
 * CPED_CONFIG_FLAG_DodgedPlayer = 209,
 * CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
 * CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
 * CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
 * CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
 * CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
 * CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
 * CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
 * CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
 * CPED_CONFIG_FLAG_SteersAroundVehicles = 218,
 * CPED_CONFIG_FLAG_AllowPedInVehiclesOverrideTaskFlags = 219,
 * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
 * CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
 * CPED_CONFIG_FLAG_ScriptHasDisabledCollision = 222,
 * CPED_CONFIG_FLAG_UseAmbientModelScaling = 223,
 * CPED_CONFIG_FLAG_DontWatchFirstOnNextHurryAway = 224,
 * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
 * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
 * CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
 * CPED_CONFIG_FLAG_CanLosePropsOnDamage = 228,
 * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
 * CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
 * CPED_CONFIG_FLAG_HasShotBeenReactedToFromFront = 231,
 * CPED_CONFIG_FLAG_HasShotBeenReactedToFromBack = 232,
 * CPED_CONFIG_FLAG_HasShotBeenReactedToFromLeft = 233,
 * CPED_CONFIG_FLAG_HasShotBeenReactedToFromRight = 234,
 * CPED_CONFIG_FLAG_AllowBlockDeadPedRagdollActivation = 235,
 * CPED_CONFIG_FLAG_IsHoldingProp = 236,
 * CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
 * CPED_CONFIG_FLAG_ForcePlayNormalScenarioExitOnNextScriptCommand = 238,
 * CPED_CONFIG_FLAG_ForcePlayImmediateScenarioExitOnNextScriptCommand = 239,
 * CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
 * CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
 * CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
 * CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
 * CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
 * CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
 * CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
 * CPED_CONFIG_FLAG_InStrafeTransition = 247,
 * CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
 * CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
 * CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
 * CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
 * CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
 * CPED_CONFIG_FLAG_OnStairs = 253,
 * CPED_CONFIG_FLAG_SimulatingAiming = 254,
 * CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
 * CPED_CONFIG_FLAG_ParentCarIsBeingRemoved = 256,
 * CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
 * CPED_CONFIG_FLAG_CanLoseHelmetOnDamage = 258,
 * CPED_CONFIG_FLAG_NeverDoScenarioExitProbeChecks = 259,
 * CPED_CONFIG_FLAG_SuppressLowLODRagdollSwitchWhenCorpseSettles = 260,
 * CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
 * CPED_CONFIG_FLAG_JustLeftVehicleNeedsReset = 262,
 * CPED_CONFIG_FLAG_TeleportIfCantReachPlayer = 263,
 * CPED_CONFIG_FLAG_PedsInVehiclePositionNeedsReset = 264,
 * CPED_CONFIG_FLAG_PedsFullyInSeat = 265,
 * CPED_CONFIG_FLAG_AllowPlayerLockOnIfFriendly = 266,
 * CPED_CONFIG_FLAG_UseCameraHeadingForDesiredDirectionLockOnTest = 267,
 * CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
 * CPED_CONFIG_FLAG_OnStairSlope = 270,
 * CPED_CONFIG_FLAG_HasPlayedNMGetup = 271,
 * CPED_CONFIG_FLAG_DontBlipCop = 272,
 * CPED_CONFIG_FLAG_SpawnedAtExtendedRangeScenario = 273,
 * CPED_CONFIG_FLAG_WalkAlongsideLeaderWhenClose = 274,
 * CPED_CONFIG_FLAG_KillWhenTrapped = 275,
 * CPED_CONFIG_FLAG_EdgeDetected = 276,
 * CPED_CONFIG_FLAG_AlwaysWakeUpPhysicsOfIntersectedPeds = 277,
 * CPED_CONFIG_FLAG_EquippedAmbientLoadOutWeapon = 278,
 * CPED_CONFIG_FLAG_AvoidTearGas = 279,
 * CPED_CONFIG_FLAG_StoppedSpeechUponFreezing = 280,
 * CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
 * CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
 * CPED_CONFIG_FLAG_ThrownFromVehicleDueToExhaustion = 283,
 * CPED_CONFIG_FLAG_UpdateEnclosedSearchRegion = 284,
 * CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
 * CPED_CONFIG_FLAG_ShouldChargeNow = 286,
 * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
 * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
 * CPED_CONFIG_FLAG_AllowMinorReactionsAsMissionPed = 289,
 * CPED_CONFIG_FLAG_BlockDeadBodyShockingEventsWhenDead = 290,
 * CPED_CONFIG_FLAG_PedHasBeenSeen = 291,
 * CPED_CONFIG_FLAG_PedIsInReusePool = 292,
 * CPED_CONFIG_FLAG_PedWasReused = 293,
 * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
 * CPED_CONFIG_FLAG_MovedUsingLowLodPhysicsSinceLastActive = 295,
 * CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
 * CPED_CONFIG_FLAG_ForcePlayFleeScenarioExitOnNextScriptCommand = 297,
 * CPED_CONFIG_FLAG_JustBumpedIntoVehicle = 298,
 * CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
 * CPED_CONFIG_FLAG_ShouldThrowSmokeNow = 300,
 * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
 * CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
 * CPED_CONFIG_FLAG_CreatedByDispatch = 303,
 * CPED_CONFIG_FLAG_PointGunLeftHandSupporting = 304,
 * CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerPedImpact = 306,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromAiRagdollImpact = 307,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerRagdollImpact = 308,
 * CPED_CONFIG_FLAG_DisableQuadrupedSpring = 309,
 * CPED_CONFIG_FLAG_IsInCluster = 310,
 * CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
 * CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
 * CPED_CONFIG_FLAG_PreferInjuredGetup = 313,
 * CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
 * CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
 * CPED_CONFIG_FLAG_JackedAbandonedCar = 316,
 * CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
 * CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
 * CPED_CONFIG_FLAG_HasPortablePickupAttached = 319,
 * CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
 * CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
 * CPED_CONFIG_FLAG_HasHighHeels = 322,
 * CPED_CONFIG_FLAG_TreatAsAmbientPedForDriverLockOn = 323,
 * CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
 * CPED_CONFIG_FLAG_SpawnedAtScenario = 325,
 * CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
 * CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
 * CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
 * CPED_CONFIG_FLAG_DisableTalkTo = 329,
 * CPED_CONFIG_FLAG_DontBlip = 330,
 * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
 * CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
 * CPED_CONFIG_FLAG_ScriptForceNoTimesliceIntelligenceUpdate = 333,
 * CPED_CONFIG_FLAG_JackedOutOfMyVehicle = 334,
 * CPED_CONFIG_FLAG_WentIntoCombatAfterBeingJacked = 335,
 * CPED_CONFIG_FLAG_DontActivateRagdollForVehicleGrab = 336,
 * CPED_CONFIG_FLAG_ForcePackageCharacterCloth = 337,
 * CPED_CONFIG_FLAG_DontRemoveWithValidOrder = 338,
 * CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
 * CPED_CONFIG_FLAG_ForcedToStayInCoverDueToPlayerSwitch = 340,
 * CPED_CONFIG_FLAG_ForceProneCharacterCloth = 341,
 * CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
 * CPED_CONFIG_FLAG_InToStrafeTransition = 343,
 * CPED_CONFIG_FLAG_KilledByStandardMelee = 344,
 * CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
 * CPED_CONFIG_FLAG_ForcePlayDirectedNormalScenarioExitOnNextScriptCommand = 346,
 * CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
 * CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
 * CPED_CONFIG_FLAG_EquipJetpack = 349,
 * CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
 * CPED_CONFIG_FLAG_ScriptHasCompletelyDisabledCollision = 351,
 * CPED_CONFIG_FLAG_NeverDoScenarioNavChecks = 352,
 * CPED_CONFIG_FLAG_ForceSynchronousScenarioExitChecking = 353,
 * CPED_CONFIG_FLAG_ThrowingGrenadeWhileAiming = 354,
 * CPED_CONFIG_FLAG_HeadbobToRadioEnabled = 355,
 * CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
 * CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
 * CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
 * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
 * CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
 * CPED_CONFIG_FLAG_HasReserveParachute = 362,
 * CPED_CONFIG_FLAG_UseReserveParachute = 363,
 * CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
 * CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
 * CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromSmokeGrenade = 367,
 * CPED_CONFIG_FLAG_LinkMBRToOwnerOnChain = 368,
 * CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayer = 369,
 * CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayerVehicle = 370,
 * CPED_CONFIG_FLAG_InFPSUnholsterTransition = 371,
 * CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
 * CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
 * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
 * CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
 * CPED_CONFIG_FLAG_UseFPSUnholsterTransitionDuringCombatRoll = 376,
 * CPED_CONFIG_FLAG_ExitingFPSCombatRoll = 377,
 * CPED_CONFIG_FLAG_ScriptHasControlOfPlayer = 378,
 * CPED_CONFIG_FLAG_PlayFPSIdleFidgetsForProjectile = 379,
 * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
 * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInAircraft = 381,
 * CPED_CONFIG_FLAG_WasPlayingFPSGetup = 382,
 * CPED_CONFIG_FLAG_WasPlayingFPSMeleeActionResult = 383,
 * CPED_CONFIG_FLAG_PreferNoPriorityRemoval = 384,
 * CPED_CONFIG_FLAG_FPSFidgetsAbortedOnFire = 385,
 * CPED_CONFIG_FLAG_ForceFPSIKWithUpperBodyAnim = 386,
 * CPED_CONFIG_FLAG_SwitchingCharactersInFirstPerson = 387,
 * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
 * CPED_CONFIG_FLAG_HasBareFeet = 389,
 * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
 * CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
 * CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
 * CPED_CONFIG_FLAG_ResetLastVehicleOnVehicleExit = 393,
 * CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
 * CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
 * CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
 * CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
 * CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
 * CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
 * CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
 * CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
 * CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
 * CPED_CONFIG_FLAG_ChangeFromPermanentToAmbientPopTypeOnMigration = 403,
 * CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
 * CPED_CONFIG_FLAG_UsingLowriderLeans = 405,
 * CPED_CONFIG_FLAG_UsingAlternateLowriderLeans = 406,
 * CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
 * CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
 * CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
 * CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
 * CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
 * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
 * CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
 * CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
 * CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
 * CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
 * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
 * CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
 * CPED_CONFIG_FLAG_IsPerformingVehicleMelee = 420,
 * CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
 * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
 * CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamage = 423,
 * CPED_CONFIG_FLAG_AllowBikeAlternateAnimations = 424,
 * CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamageNonSynced = 425,
 * CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
 * CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
 * CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
 * CPED_CONFIG_FLAG_DisableStartEngine = 429,
 * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
 * CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
 * CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
 * CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
 * CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
 * CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
 * CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
 * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
 * CPED_CONFIG_FLAG_CreatedByConcealedPlayer = 439,
 * CPED_CONFIG_FLAG_PermanentlyDisablePotentialToBeWalkedIntoResponse = 440,
 * CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
 * CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
 * CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
 * CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
 * CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
 * CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
 * CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
 * CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
 * CPED_CONFIG_FLAG_FiresDummyRockets = 449,
 * CPED_CONFIG_FLAG_PedIsArresting = 450,
 * CPED_CONFIG_FLAG_IsDecoyPed = 451,
 * CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
 * CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
 * CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
 * CPED_CONFIG_FLAG_HitByTranqWeapon = 455,
 * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
 * CPED_CONFIG_FLAG_ForcedAimFromArrest = 457,
 * CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
 * _0x4376ABF2 = 459,
 * CPED_CONFIG_FLAG_RagdollFloatsIndefinitely = 460,
 * CPED_CONFIG_FLAG_BlockElectricWeaponDamage = 461,
 * _0x262A3B8E = 462,
 * _0x1AA79A25 = 463,
 * }
 * ```
 * Hash: 0x1913FE4CBF41C463 | ApiSet: undefined
 */
export function setPedConfigFlag(ped, flagId, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedConfigFlag(_ped, flagId, value);
}
/**
 * Hash: 0xD718A22995E2B4BC | ApiSet: undefined
 */
export function setPedDiesInSinkingVehicle(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDiesInSinkingVehicle(_ped, toggle);
}
/**
 * Hash: 0xE4723DB6E736CCFF | ApiSet: undefined
 */
export function setPedDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius, p6) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Entity ? target.handle() : target;
    SetPedDefensiveSphereAttachedToVehicle(_ped, _target, xOffset, yOffset, zOffset, radius, p6);
}
/**
 * Hash: 0x56CEF0AC79073BDE | ApiSet: undefined
 */
export function setPedDiesInWater(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDiesInWater(_ped, toggle);
}
/**
 * Hash: 0xAA5A7ECE2AA8FE70 | ApiSet: undefined
 */
export function setPedDesiredHeading(ped, heading) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDesiredHeading(_ped, heading);
}
/**
 * ```
 * Sets Ped Default Clothes
 * ```
 * Hash: 0x45EEE61580806D63 | ApiSet: undefined
 */
export function setPedDefaultComponentVariation(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDefaultComponentVariation(_ped);
}
/**
 * ```
 * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
 * ```
 * Hash: 0x030983CA930B692D | ApiSet: undefined
 */
export function setPedDucking(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDucking(_ped, toggle);
}
/**
 * Hash: 0x413C6C763A4AFFAD | ApiSet: undefined
 */
export function setPedDefensiveAreaDirection(ped, p1, p2, p3, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDefensiveAreaDirection(_ped, p1, p2, p3, p4);
}
/**
 * Hash: 0x5BA7919BED300023 | ApiSet: undefined
 */
export function setPedDiesWhenInjured(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDiesWhenInjured(_ped, toggle);
}
/**
 * Hash: 0xF9B8F91AAD3B953E | ApiSet: undefined
 */
export function setPedDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius, p6) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    SetPedDefensiveSphereAttachedToPed(_ped, _target, xOffset, yOffset, zOffset, radius, p6);
}
/**
 * **Usage:** Call this native every frame
 * Hash: 0x95E3D6257B166CF2 | ApiSet: undefined
 */
export function setPedDensityMultiplierThisFrame(multiplier) {
    SetPedDensityMultiplierThisFrame(multiplier);
}
/**
 * Hash: 0xED34AB6C5CB36520 | ApiSet: undefined
 */
export function setPedDriveByClipsetOverride(ped, clipset) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDriveByClipsetOverride(_ped, clipset);
}
/**
 * Hash: 0x2A30922C90C9B42C | ApiSet: undefined
 */
export function setPedDiesInVehicle(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDiesInVehicle(_ped, toggle);
}
/**
 * Hash: 0xEEB64139BA29A7CF | ApiSet: undefined
 */
export function setPedDiesInstantlyInWater(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDiesInstantlyInWater(_ped, toggle);
}
/**
 * ```
 * Something related to the environmental effects natives.
 * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
 * ```
 * Hash: 0xD69411AA0CEBF9E9 | ApiSet: undefined
 */
export function setPedEnveffColorModulator(ped, r, g, b) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedEnveffColorModulator(_ped, r, g, b);
}
/**
 * Hash: 0x97A790315D3831FD | ApiSet: undefined
 */
export function setPedEnableWeaponBlocking(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedEnableWeaponBlocking(_ped, toggle);
}
/**
 * ```
 * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
 * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
 * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
 * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
 * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
 * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
 * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
 * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
 * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
 * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
 * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
 * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
 * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
 * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
 * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
 * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
 * if anyone is interested firing pattern info: pastebin.com/Px036isB
 * ```
 * Hash: 0x9AC577F5A12AD8A9 | ApiSet: undefined
 */
export function setPedFiringPattern(ped, patternHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof patternHash === 'string')
        patternHash = this.getHashKey(patternHash);
    SetPedFiringPattern(_ped, patternHash);
}
/**
 * This native sets the glow intensity of illuminated clothing items.
 * This native does **NOT** need to be executed every tick.
 * This native is **NOT** synced with other connected players, you will have to set the opacity on the ped on all clients individually.
 * Glow intensity is a value between `0.0` and `1.0`.
 * In some older decompiled scripts this is known as `_SET_PED_REFLECTION_INTENSITY`.
 * Since there's no joaat hash for this, I find `_SET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY` more descriptive than `_SET_PED_REFLECTION_INTENSITY`.
 * Use [`GetPedIlluminatedClothingGlowIntensity`](#\_0x1461B28A06717D68) to get the illuminated clothing glow intensity of a specific ped.
 * Intensity: `1.0`:
 * ![](https://www.vespura.com/hi/i/2018-11-13\_17-03\_c2e23\_229.png)
 * Intensity: `0.0`:
 * ![](https://www.vespura.com/hi/i/2018-11-13\_17-03\_35c33\_230.png)
 * **Examples code result**:
 * ![](https://www.vespura.com/hi/i/2018-11-13\_17-11\_10199\_232.gif)
 * (Direct link if embed doesn't work: [here](https://www.vespura.com/hi/i/2018-11-13\_17-11\_10199\_232.gif))
 * Hash: 0x4E90D746056E273D | ApiSet: undefined
 */
export function setPedEmissiveIntensity(ped, intensity) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedEmissiveIntensity(_ped, intensity);
}
/**
 * Sets the various freemode face features, e.g. nose length, chin shape.
 * <strong>Indexes (From 0 to 19):</strong>
 * Parentheses indicate morph scale/direction as in (-1.0 to 1.0)
 * *   **0**: Nose Width (Thin/Wide)
 * *   **1**: Nose Peak (Up/Down)
 * *   **2**: Nose Length (Long/Short)
 * *   **3**: Nose Bone Curveness (Crooked/Curved)
 * *   **4**: Nose Tip (Up/Down)
 * *   **5**: Nose Bone Twist (Left/Right)
 * *   **6**: Eyebrow (Up/Down)
 * *   **7**: Eyebrow (In/Out)
 * *   **8**: Cheek Bones (Up/Down)
 * *   **9**: Cheek Sideways Bone Size (In/Out)
 * *   **10**: Cheek Bones Width (Puffed/Gaunt)
 * *   **11**: Eye Opening (Both) (Wide/Squinted)
 * *   **12**: Lip Thickness (Both) (Fat/Thin)
 * *   **13**: Jaw Bone Width (Narrow/Wide)
 * *   **14**: Jaw Bone Shape (Round/Square)
 * *   **15**: Chin Bone (Up/Down)
 * *   **16**: Chin Bone Length (In/Out or Backward/Forward)
 * *   **17**: Chin Bone Shape (Pointed/Square)
 * *   **18**: Chin Hole (Chin Bum)
 * *   **19**: Neck Thickness (Thin/Thick)
 * <strong>Note:</strong>
 * You may need to call [`SetPedHeadBlendData`](#\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.
 * Hash: 0x71A5C1DBA060049E | ApiSet: undefined
 */
export function setPedFaceFeature(ped, index, scale) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedFaceFeature(_ped, index, scale);
}
/**
 * Hash: 0x7FB17BA2E7DECA5B | ApiSet: undefined
 */
export function setPedGeneratesDeadBodyEvents(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedGeneratesDeadBodyEvents(_ped, toggle);
}
/**
 * ```
 * Values look to be between 0.0 and 1.0
 * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
 * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
 * ```
 * Hash: 0xBF29516833893561 | ApiSet: undefined
 */
export function setPedEnveffScale(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedEnveffScale(_ped, value);
}
/**
 * Used for freemode (online) characters.
 * Indices:
 * 1.  black
 * 2.  very light blue/green
 * 3.  dark blue
 * 4.  brown
 * 5.  darker brown
 * 6.  light brown
 * 7.  blue
 * 8.  light blue
 * 9.  pink
 * 10. yellow
 * 11. purple
 * 12. black
 * 13. dark green
 * 14. light brown
 * 15. yellow/black pattern
 * 16. light colored spiral pattern
 * 17. shiny red
 * 18. shiny half blue/half red
 * 19. half black/half light blue
 * 20. white/red perimter
 * 21. green snake
 * 22. red snake
 * 23. dark blue snake
 * 24. dark yellow
 * 25. bright yellow
 * 26. all black
 * 27. red small pupil
 * 28. devil blue/black
 * 29. white small pupil
 * 30. glossed over
 * Hash: 0x50B56988B170AFDF | ApiSet: undefined
 */
export function setPedEyeColor(ped, index) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedEyeColor(_ped, index);
}
/**
 * ```
 * From the scripts:
 * `PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),`
 * "ANIM_GROUP_GESTURE_MISS_FRA0");
 * `PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),`
 * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
 * ```
 * Hash: 0xDDF803377F94AAA8 | ApiSet: undefined
 */
export function setPedGestureGroup(ped, animGroupGesture) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedGestureGroup(_ped, animGroupGesture);
}
/**
 * Hash: 0xBC0ED94165A48BC2 | ApiSet: undefined
 */
export function setPedGetOutUpsideDownVehicle(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedGetOutUpsideDownVehicle(_ped, toggle);
}
/**
 * ```
 * bit 15 (0x8000) = force cower
 * ```
 * Hash: 0x70A2D1137C8ED7C9 | ApiSet: undefined
 */
export function setPedFleeAttributes(ped, attributeFlags, enable) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedFleeAttributes(_ped, attributeFlags, enable);
}
/**
 * Hash: 0x0BDDB8D9EC6BCF3C | ApiSet: undefined
 */
export function setPedGroupMemberPassengerIndex(ped, index) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedGroupMemberPassengerIndex(_ped, index);
}
/**
 * ```
 * enable or disable the gravity of a ped
 * Examples:
 * `PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);`
 * `PED::SET_PED_GRAVITY(Local_289[iVar0 \/\*20\*\/], 0x00000001);`
 * ```
 * Hash: 0x9FF447B6B6AD960A | ApiSet: undefined
 */
export function setPedGravity(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedGravity(_ped, toggle);
}
/**
 * Sets the tint index for the hair on the specified ped.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x4CFFC65454C93A49 | ApiSet: undefined
 */
export function setPedHairTint(ped, colorID, highlightColorID) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHairTint(_ped, colorID, highlightColorID);
}
/**
 * Hash: 0x33A8F7F7D5F7F33C | ApiSet: undefined
 */
export function setPedHearingRange(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHearingRange(_ped, value);
}
/**
 * ```
 * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
 * overlayID       Part                  Index, to disable
 * 0               Blemishes             0 - 23, 255
 * 1               Facial Hair           0 - 28, 255
 * 2               Eyebrows              0 - 33, 255
 * 3               Ageing                0 - 14, 255
 * 4               Makeup                0 - 74, 255
 * 5               Blush                 0 - 6, 255
 * 6               Complexion            0 - 11, 255
 * 7               Sun Damage            0 - 10, 255
 * 8               Lipstick              0 - 9, 255
 * 9               Moles/Freckles        0 - 17, 255
 * 10              Chest Hair            0 - 16, 255
 * 11              Body Blemishes        0 - 11, 255
 * 12              Add Body Blemishes    0 - 1, 255
 * ```
 * <strong>Note:</strong>
 * You may need to call [`SetPedHeadBlendData`](#\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.
 * Hash: 0x48F44967FA05CC1E | ApiSet: undefined
 */
export function setPedHeadOverlay(ped, overlayID, index, opacity) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHeadOverlay(_ped, overlayID, index, opacity);
}
/**
 * ```
 * Used for freemode (online) characters.
 * Called after SET_PED_HEAD_OVERLAY().
 * ```
 * <strong>Note:</strong>
 * You may need to call [`SetPedHeadBlendData`](#\_0x9414E18B9434C2FE) prior to calling this native in order for it to work.
 * Hash: 0x497BF74A7B9CB952 | ApiSet: undefined
 */
export function setPedHeadOverlayColor(ped, overlayID, colorType, colorID, secondColorID) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHeadOverlayColor(_ped, overlayID, colorType, colorID, secondColorID);
}
/**
 * Hash: 0xC1F6EBF9A3D55538 | ApiSet: undefined
 */
export function setPedHeatscaleOverride(ped, heatScale) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHeatscaleOverride(_ped, heatScale);
}
/**
 * ```
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 * Hash: 0x26D83693ED99291C | ApiSet: undefined
 */
export function setPedHelmetPropIndex(ped, propIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHelmetPropIndex(_ped, propIndex);
}
/**
 * Hash: 0xC0E78D5C2CE3EB25 | ApiSet: undefined
 */
export function setPedHelmetFlag(ped, helmetFlag) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHelmetFlag(_ped, helmetFlag);
}
/**
 * For more info please refer to [this](https://gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained) topic.
 * <strong>Other information:</strong>
 * IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br>
 * This native function is often called prior to calling natives such as:
 * *   [`SetPedHairColor`](#\_0xA23FE32C)
 * *   [`SetPedHeadOverlayColor`](#\_0x78935A27)
 * *   [`SetPedHeadOverlay`](#\_0xD28DBA90)
 * *   [`SetPedFaceFeature`](#\_0x6C8D4458)
 * Hash: 0x9414E18B9434C2FE | ApiSet: undefined
 */
export function setPedHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHeadBlendData(_ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
}
/**
 * Hash: 0x3F7325574E41B44D | ApiSet: undefined
 */
export function setPedHelmetUnk(ped, p1, p2, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHelmetUnk(_ped, p1, p2, p3);
}
/**
 * Sets whether a pedestrian should wear a helmet.
 * Hash: 0x560A43136EB58105 | ApiSet: undefined
 */
export function setPedHelmet(ped, bEnable) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHelmet(_ped, bEnable);
}
/**
 * Hash: 0xF107E836A70DCE05 | ApiSet: undefined
 */
export function setPedIdRange(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedIdRange(_ped, value);
}
/**
 * ```
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));`
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));`
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));`
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));`
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));`
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));`
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));`
 * `PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));`
 * ```
 * Hash: 0x530071295899A8C6 | ApiSet: undefined
 */
export function setPedInVehicleContext(ped, context) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof context === 'string')
        context = this.getHashKey(context);
    SetPedInVehicleContext(_ped, context);
}
/**
 * Hash: 0xF1550C4BD22582E2 | ApiSet: undefined
 */
export function setPedHelmetTextureIndex(ped, textureIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHelmetTextureIndex(_ped, textureIndex);
}
/**
 * Hash: 0x52D59AB61DDC05DD | ApiSet: undefined
 */
export function setPedHighlyPerceptive(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedHighlyPerceptive(_ped, toggle);
}
/**
 * Hash: 0x570389D1C3DE3C6B | ApiSet: undefined
 */
export function setPedIncreasedAvoidanceRadius(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedIncreasedAvoidanceRadius(_ped);
}
/**
 * ```
 * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
 * ```
 * Hash: 0xC396F5B86FF9FEBD | ApiSet: undefined
 */
export function setPedLegIkMode(ped, mode) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedLegIkMode(_ped, mode);
}
/**
 * Hash: 0xDC2C5C242AAC342B | ApiSet: undefined
 */
export function setPedLodMultiplier(ped, multiplier) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedLodMultiplier(_ped, multiplier);
}
/**
 * Hash: 0xF75B0D629E1C063D | ApiSet: undefined
 */
export function setPedIntoVehicle(ped, vehicle, seatIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPedIntoVehicle(_ped, _vehicle, seatIndex);
}
/**
 * Hash: 0x433083750C5E064A | ApiSet: undefined
 */
export function setPedMaxMoveBlendRatio(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMaxMoveBlendRatio(_ped, value);
}
/**
 * Set the maximum time a ped can stay underwater. Maximum seems to be 50 seconds.
 * Hash: 0x6BA428C528D9E522 | ApiSet: undefined
 */
export function setPedMaxTimeUnderwater(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMaxTimeUnderwater(_ped, value);
}
/**
 * Hash: 0x43C851690662113D | ApiSet: undefined
 */
export function setPedMaxTimeInWater(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMaxTimeInWater(_ped, value);
}
/**
 * Hash: 0x971D38760FBC02EF | ApiSet: undefined
 */
export function setPedKeepTask(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedKeepTask(_ped, toggle);
}
/**
 * Overwrites the minimum time the ped will stay on the ground for after being stunned. Setting this while the ped is stunned will not alter the duration of the current stun but will still effect future stuns.
 * Passing -1 into the second parameter `minTimeInMs` will reset the modifier, making it use the weapons original `DamageTime` as the stun duration (see `update/update.rpf/common/data/ai/weapons.meta`)
 * **NOTE**: Unlike what the native name implies, this works on any weapon that has its `DamageType` in the `weapons.meta` set to `ELECTRIC`.
 * Hash: 0xFA0675AB151073FA | ApiSet: undefined
 */
export function setPedMinGroundTimeForStungun(ped, minTimeInMs) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMinGroundTimeForStungun(_ped, minTimeInMs);
}
/**
 * ```
 * Maximum possible amount of money on MP is 2000. ~JX
 * -----------------------------------------------------------------------------
 * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
 * ```
 * Hash: 0xA9C8960E8684C1B5 | ApiSet: undefined
 */
export function setPedMoney(ped, amount) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMoney(_ped, amount);
}
/**
 * Hash: 0xE163A4BCE4DE6F11 | ApiSet: undefined
 */
export function setPedModelIsSuppressed(model, toggle) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    SetPedModelIsSuppressed(model, toggle);
}
/**
 * Hash: 0xF5F6378C4F3419D3 | ApiSet: undefined
 */
export function setPedMaxHealth(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMaxHealth(_ped, value);
}
/**
 * Hash: 0x01A898D26E2333DD | ApiSet: undefined
 */
export function setPedMinMoveBlendRatio(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMinMoveBlendRatio(_ped, value);
}
/**
 * Hash: 0x0A986918B102B448 | ApiSet: undefined
 */
export function setPedMotionBlur(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMotionBlur(_ped, toggle);
}
/**
 * ```
 * List of movement clipsets:
 * Thanks to elsewhat for list.
 * "ANIM_GROUP_MOVE_BALLISTIC"
 * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
 * "clipset@move@trash_fast_turn"
 * "FEMALE_FAST_RUNNER"
 * "missfbi4prepp1_garbageman"
 * "move_characters@franklin@fire"
 * "move_characters@Jimmy@slow@"
 * "move_characters@michael@fire"
 * "move_f@flee@a"
 * "move_f@scared"
 * "move_f@sexy@a"
 * "move_heist_lester"
 * "move_injured_generic"
 * "move_lester_CaneUp"
 * "move_m@bag"
 * "MOVE_M@BAIL_BOND_NOT_TAZERED"
 * "MOVE_M@BAIL_BOND_TAZERED"
 * "move_m@brave"
 * "move_m@casual@d"
 * "move_m@drunk@moderatedrunk"
 * "MOVE_M@DRUNK@MODERATEDRUNK"
 * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
 * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
 * "MOVE_M@DRUNK@VERYDRUNK"
 * "move_m@fire"
 * "move_m@gangster@var_e"
 * "move_m@gangster@var_f"
 * "move_m@gangster@var_i"
 * "move_m@JOG@"
 * "MOVE_M@PRISON_GAURD"
 * "MOVE_P_M_ONE"
 * "MOVE_P_M_ONE_BRIEFCASE"
 * "move_p_m_zero_janitor"
 * "move_p_m_zero_slow"
 * "move_ped_bucket"
 * "move_ped_crouched"
 * "move_ped_mop"
 * "MOVE_M@FEMME@"
 * "MOVE_F@FEMME@"
 * "MOVE_M@GANGSTER@NG"
 * "MOVE_F@GANGSTER@NG"
 * "MOVE_M@POSH@"
 * "MOVE_F@POSH@"
 * "MOVE_M@TOUGH_GUY@"
 * "MOVE_F@TOUGH_GUY@"
 * ~ NotCrunchyTaco
 * ```
 * Hash: 0xAF8A94EDE7712BEF | ApiSet: undefined
 */
export function setPedMovementClipset(ped, clipSet, transitionSpeed) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMovementClipset(_ped, clipSet, transitionSpeed);
}
/**
 * ```
 * NOTE: Debugging functions are not present in the retail version of the game.
 * *untested but char *name could also be a hash for a localized string
 * ```
 * Hash: 0x98EFA132A4117BE1 | ApiSet: undefined
 */
export function setPedNameDebug(ped, name) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedNameDebug(_ped, name);
}
/**
 * ```
 * The distance between these points, is the diagonal of a box (remember it's 3D).
 * ```
 * Hash: 0xEE01041D559983EA | ApiSet: undefined
 */
export function setPedNonCreationArea(x1, y1, z1, x2, y2, z2) {
    SetPedNonCreationArea(x1, y1, z1, x2, y2, z2);
}
/**
 * ```
 * Min: 0.00
 * Max: 10.00
 * Can be used in combo with fast run cheat.
 * When value is set to 10.00:
 * Sprinting without fast run cheat: 66 m/s
 * Sprinting with fast run cheat: 77 m/s
 * Needs to be looped!
 * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
 * ```
 * Hash: 0x085BF80FA50A39D1 | ApiSet: undefined
 */
export function setPedMoveRateOverride(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMoveRateOverride(_ped, value);
}
/**
 * ```
 * i could be time. Only example in the decompiled scripts uses it as -1.
 * ```
 * Hash: 0xAAD6D1ACF08F4612 | ApiSet: undefined
 */
export function setPedPinnedDown(ped, pinned, i) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedPinnedDown(_ped, pinned, i);
}
/**
 * Hash: 0xFE07FF6495D52E2A | ApiSet: undefined
 */
export function setPedPanicExitScenario(ped, position) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedPanicExitScenario(_ped, position.x, position.y, position.z);
}
/**
 * Hash: 0x9E8C908F41584ECD | ApiSet: undefined
 */
export function setPedMoveAnimsBlendOut(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedMoveAnimsBlendOut(_ped);
}
/**
 * Hash: 0x333FC8DB079B7186 | ApiSet: undefined
 */
export function setPedParachuteTintIndex(ped, tintIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedParachuteTintIndex(_ped, tintIndex);
}
/**
 * Hash: 0x3DBFC55D5C9BB447 | ApiSet: undefined
 */
export function setPedNeverLeavesGroup(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedNeverLeavesGroup(_ped, toggle);
}
/**
 * Hash: 0x2B16A3BFF1FBCE49 | ApiSet: undefined
 */
export function setPedPreloadPropData(ped, componentId, drawableId, textureId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedPreloadPropData(_ped, componentId, drawableId, textureId);
}
/**
 * Sets the palette index of a ped's phone.
 * | Value | Color      |
 * | :---: | :-----:    |
 * |  `0`  | Light Blue |
 * |  `1`  | Green      |
 * |  `2`  | Red        |
 * |  `3`  | Orange     |
 * |  `4`  | Grey       |
 * |  `5`  | Purple     |
 * |  `6`  | Pink       |
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x83A169EABCDB10A2 | ApiSet: undefined
 */
export function setPedPhonePaletteIdx(ped, index) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPhonePaletteIdx(_ped, index);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * ```
 * Points to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.
 * ```
 * Hash: 0x94D94BF1A75AED3D | ApiSet: undefined
 */
export function setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(_ped, toggle);
}
/**
 * Hash: 0xADB3F206518799E8 | ApiSet: undefined
 */
export function setPedRelationshipGroupDefaultHash(ped, hash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    SetPedRelationshipGroupDefaultHash(_ped, hash);
}
/**
 * Hash: 0x8421EB4DA7E391B9 | ApiSet: undefined
 */
export function setPedPreferredCoverSet(ped, itemSet) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPreferredCoverSet(_ped, itemSet);
}
/**
 * ```
 * from extreme3.c4
 * `PED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));`
 * p1 is probably componentId
 * ```
 * Hash: 0x39D55A620FCB6A3A | ApiSet: undefined
 */
export function setPedPreloadVariationData(ped, slot, drawableId, textureId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedPreloadVariationData(_ped, slot, drawableId, textureId);
}
/**
 * This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model.
 * ### MP Freemode list of props
 * **0**: Hats
 * **1**: Glasses
 * **2**: Ears
 * **6**: Watches
 * **7**: Bracelets
 * List of Prop IDs
 * ```cpp
 * enum eAnchorPoints
 * {
 * ANCHOR_HEAD = 0, // "p_head"
 * ANCHOR_EYES = 1, // "p_eyes"
 * ANCHOR_EARS = 2, // "p_ears"
 * ANCHOR_MOUTH = 3, // "p_mouth"
 * ANCHOR_LEFT_HAND = 4, // "p_lhand"
 * ANCHOR_RIGHT_HAND = 5, // "p_rhand"
 * ANCHOR_LEFT_WRIST = 6, // "p_lwrist"
 * ANCHOR_RIGHT_WRIST = 7, // "p_rwrist"
 * ANCHOR_HIP = 8, // "p_lhip"
 * ANCHOR_LEFT_FOOT = 9, // "p_lfoot"
 * ANCHOR_RIGHT_FOOT = 10, // "p_rfoot"
 * ANCHOR_PH_L_HAND = 11, // "ph_lhand"
 * ANCHOR_PH_R_HAND = 12, // "ph_rhand"
 * NUM_ANCHORS = 13,
 * };
 * ```
 * Hash: 0x93376B65A266EB5F | ApiSet: undefined
 */
export function setPedPropIndex(ped, componentId, drawableId, textureId, attach) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPropIndex(_ped, componentId, drawableId, textureId, attach);
}
/**
 * Hash: 0xC80A74AC829DDD92 | ApiSet: undefined
 */
export function setPedRelationshipGroupHash(ped, hash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    SetPedRelationshipGroupHash(_ped, hash);
}
/**
 * ```
 * This is only called once in the scripts.
 * sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
 * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
 * `PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());`
 * ```
 * Hash: 0xCD17B554996A8D9E | ApiSet: undefined
 */
export function setPedPrimaryLookat(ped, lookAt) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _lookAt = lookAt instanceof Ped ? lookAt.handle() : lookAt;
    SetPedPrimaryLookat(_ped, _lookAt);
}
/**
 * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
 * Needs to be recalled after each ragdoll from a Collision.
 * Hash: 0xF0A4F1BBF4FA7497 | ApiSet: undefined
 */
export function setPedRagdollOnCollision(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedRagdollOnCollision(_ped, toggle);
}
/**
 * This native sets a scuba mask for freemode models and an oxygen bottle for player_\* models. It works on freemode and player_\* models.
 * Hash: 0x36C6984C3ED0C911 | ApiSet: undefined
 */
export function setPedScubaGearVariation(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedScubaGearVariation(_ped);
}
/**
 * Hash: 0x01F6594B923B9251 | ApiSet: undefined
 */
export function setPedRagdollForceFall(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedRagdollForceFall(_ped);
}
/**
 * ```
 * p1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.
 * ```
 * Hash: 0xC8A9481A01E63C28 | ApiSet: undefined
 */
export function setPedRandomComponentVariation(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedRandomComponentVariation(_ped, p1);
}
/**
 * `PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);`
 * Known values:
 * Hash: 0xC1E8A365BF3B29F2 | ApiSet: undefined
 */
export function setPedResetFlag(ped, flagId, doReset) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedResetFlag(_ped, flagId, doReset);
}
/**
 * Hash: 0xF29CF591C4BF6CEE | ApiSet: undefined
 */
export function setPedSeeingRange(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedSeeingRange(_ped, value);
}
/**
 * Hash: 0xC44AA05345C992C6 | ApiSet: undefined
 */
export function setPedRandomProps(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedRandomProps(_ped);
}
/**
 * Hash: 0xEEED8FAFEC331A70 | ApiSet: undefined
 */
export function setPedShouldPlayFleeScenarioExit(ped, p1, p2, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedShouldPlayFleeScenarioExit(_ped, p1, p2, p3);
}
/**
 * Hash: 0xE88DA0751C22A2AD | ApiSet: undefined
 */
export function setPedReserveParachuteTintIndex(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedReserveParachuteTintIndex(_ped, p1);
}
/**
 * ```
 * shootRate 0-1000
 * ```
 * Hash: 0x614DA022990752DC | ApiSet: undefined
 */
export function setPedShootRate(ped, shootRate) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedShootRate(_ped, shootRate);
}
/**
 * Hash: 0xEDF4079F9D54C9A1 | ApiSet: undefined
 */
export function setPedStayInVehicleWhenJacked(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedStayInVehicleWhenJacked(_ped, toggle);
}
/**
 * When this ped receives its next script task, they will exit from their scenario using the normal scenario exit.
 * Exiting the scenario may take several frames while the ped is playing the exit animation.
 * If the ped is not currently using a scenario at the time of the command or 0,0,0 is specified as the reaction position,
 * then the ped will by default attempt to direct their exit forwards.
 * Hash: 0xEC6935EBE0847B90 | ApiSet: undefined
 */
export function setPedShouldPlayDirectedScenarioExit(ped, position) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedShouldPlayDirectedScenarioExit(_ped, position.x, position.y, position.z);
}
/**
 * Fires a weapon at a coordinate using a ped.
 * Hash: 0x96A05E4FB321B1BA | ApiSet: undefined
 */
export function setPedShootsAtCoord(ped, position, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedShootsAtCoord(_ped, position.x, position.y, position.z, toggle);
}
/**
 * Hash: 0xA3A9299C4F2ADB98 | ApiSet: undefined
 */
export function setPedShouldPlayNormalScenarioExit(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedShouldPlayNormalScenarioExit(_ped);
}
/**
 * Hash: 0x9D3151A373974804 | ApiSet: undefined
 */
export function setPedSphereDefensiveArea(ped, position, radius, p5, p6) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedSphereDefensiveArea(_ped, position.x, position.y, position.z, radius, p5, p6);
}
/**
 * Hash: 0xF1C03A5352243A30 | ApiSet: undefined
 */
export function setPedShouldPlayImmediateScenarioExit(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedShouldPlayImmediateScenarioExit(_ped);
}
/**
 * Hash: 0xEB6FB9D48DDE23EC | ApiSet: undefined
 */
export function setPedSteersAroundVehicles(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedSteersAroundVehicles(_ped, toggle);
}
/**
 * Hash: 0x1509C089ADC208BF | ApiSet: undefined
 */
export function setPedSteersAroundObjects(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedSteersAroundObjects(_ped, toggle);
}
/**
 * Hash: 0x46F2193B3AD1D891 | ApiSet: undefined
 */
export function setPedSteersAroundPeds(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedSteersAroundPeds(_ped, toggle);
}
/**
 * ```
 * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
 * ```
 * Hash: 0x88CBB5CEB96B7BD2 | ApiSet: undefined
 */
export function setPedStealthMovement(ped, p1, action) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedStealthMovement(_ped, p1, action);
}
/**
 * Hash: 0x29A28F3F8CF6D854 | ApiSet: undefined
 */
export function setPedStrafeClipset(ped, clipSet) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedStrafeClipset(_ped, clipSet);
}
/**
 * Allows marine animals to survive outside of water (R\* is using it for sharks).
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x100CD221F572F6E1 | ApiSet: undefined
 */
export function setPedSurvivesBeingOutOfWater(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedSurvivesBeingOutOfWater(_ped, toggle);
}
/**
 * Ped no longer takes critical damage modifiers if set to FALSE.
 * Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
 * Hash: 0xEBD76F2359F190AC | ApiSet: undefined
 */
export function setPedSuffersCriticalHits(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedSuffersCriticalHits(_ped, toggle);
}
/**
 * ```
 * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
 * ```
 * Hash: 0x27B0405F59637D1F | ApiSet: undefined
 */
export function setPedSweat(ped, sweat) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedSweat(_ped, sweat);
}
/**
 * ```
 * Only 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.
 * ```
 * Hash: 0x0703B9079823DA4A | ApiSet: undefined
 */
export function setPedTargetLossResponse(ped, responseType) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedTargetLossResponse(_ped, responseType);
}
/**
 * Hash: 0x112942C6E708F70B | ApiSet: undefined
 */
export function setPedToInformRespectedFriends(ped, radius, maxFriends) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedToInformRespectedFriends(_ped, radius, maxFriends);
}
/**
 * ```
 * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
 * ```
 * Hash: 0xD75ACCF5E0FB5367 | ApiSet: undefined
 */
export function setPedUsingActionMode(ped, p1, p2, action) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedUsingActionMode(_ped, p1, p2, action);
}
/**
 * p4/p5: Unusued in TU27
 * ### Ragdoll Types
 * **0**: CTaskNMRelax
 * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
 * **Else**: CTaskNMBalance
 * Hash: 0xAE99FB955581844A | ApiSet: undefined
 */
export function setPedToRagdoll(ped, minTime, maxTime, ragdollType, bAbortIfInjured, bAbortIfDead, bForceScriptControl) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedToRagdoll(_ped, minTime, maxTime, ragdollType, bAbortIfInjured, bAbortIfDead, bForceScriptControl);
}
/**
 * ```cpp
 * enum eNMFallType {
 * TYPE_FROM_HIGH = 0,
 * TYPE_OVER_WALL = 1,
 * TYPE_DOWN_STAIRS = 2,
 * TYPE_DIE_TYPES = 3,
 * TYPE_DIE_FROM_HIGH = 4,
 * TYPE_DIE_OVER_WALL = 5,
 * TYPE_DIE_DOWN_STAIRS = 6
 * }
 * ```
 * ```
 * Return variable is never used in R*'s scripts.
 * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
 * x, y, and z are coordinates, most likely to where the ped will fall.
 * p7 is probably the force of the fall, but untested, so I left the variable name the same.
 * p8 to p13 are always 0f in R*'s scripts.
 * (Simplified) Example of the usage of the function from R*'s scripts:
 * `ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);`
 * ```
 * Hash: 0xD76632D99E4966C8 | ApiSet: undefined
 */
export function setPedToRagdollWithFall(ped, minTime, maxTime, nFallType, dirX, dirY, dirZ, fGroundHeight, grab1X, grab1Y, grab1Z, grab2X, grab2Y, grab2Z) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedToRagdollWithFall(_ped, minTime, maxTime, nFallType, dirX, dirY, dirZ, fGroundHeight, grab1X, grab1Y, grab1Z, grab2X, grab2Y, grab2Z);
}
/**
 * Hash: 0x332B562EEDA62399 | ApiSet: undefined
 */
export function setPedToLoadCover(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedToLoadCover(_ped, toggle);
}
/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * ```
 * Hash: 0x952F06BEECD775CC | ApiSet: undefined
 */
export function setPedVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPedVehicleForcedSeatUsage(_ped, _vehicle, seatIndex, flags);
}
/**
 * Hash: 0x3B6405E8AB34A907 | ApiSet: undefined
 */
export function setPedVisualFieldCenterAngle(ped, angle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedVisualFieldCenterAngle(_ped, angle);
}
/**
 * Hash: 0x70793BDCA1E854D4 | ApiSet: undefined
 */
export function setPedVisualFieldMaxAngle(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedVisualFieldMaxAngle(_ped, value);
}
/**
 * ```
 * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
 * ```
 * Hash: 0x78D0B67629D75856 | ApiSet: undefined
 */
export function setPedVisualFieldMaxElevationAngle(ped, angle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedVisualFieldMaxElevationAngle(_ped, angle);
}
/**
 * Hash: 0x9C74B0BC831B753A | ApiSet: undefined
 */
export function setPedVisualFieldPeripheralRange(ped, range) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedVisualFieldPeripheralRange(_ped, range);
}
/**
 * ```
 * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
 * ```
 * Hash: 0x7A276EB2C224D70F | ApiSet: undefined
 */
export function setPedVisualFieldMinElevationAngle(ped, angle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedVisualFieldMinElevationAngle(_ped, angle);
}
/**
 * ```
 * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
 * ```
 * Hash: 0x44CB6447D2571AA0 | ApiSet: undefined
 */
export function setPedWetnessHeight(ped, height) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedWetnessHeight(_ped, height);
}
/**
 * Hash: 0x2622E35B77D3ACA2 | ApiSet: undefined
 */
export function setPedWeaponMovementClipset(ped, clipSet) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedWeaponMovementClipset(_ped, clipSet);
}
/**
 * ```
 * Min and max are usually 100.0 and 200.0
 * ```
 * Hash: 0xD8C3BE3EE94CAF2D | ApiSet: undefined
 */
export function setPopControlSphereThisFrame(position, min, max) {
    SetPopControlSphereThisFrame(position.x, position.y, position.z, min, max);
}
/**
 * ```
 * Sets the relationship between two groups. This should be called twice (once for each group).
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * Example:
 * `PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);`
 * `PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);`
 * ```
 * Hash: 0xBF25EB89375A37AD | ApiSet: undefined
 */
export function setRelationshipBetweenGroups(relationship, group1, group2) {
    if (typeof group1 === 'string')
        group1 = this.getHashKey(group1);
    if (typeof group2 === 'string')
        group2 = this.getHashKey(group2);
    SetRelationshipBetweenGroups(relationship, group1, group2);
}
/**
 * Hash: 0x2DB492222FB21E26 | ApiSet: undefined
 */
export function setPedVisualFieldMinAngle(ped, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedVisualFieldMinAngle(_ped, value);
}
/**
 * Hash: 0x5615E0C5EB2BC6E2 | ApiSet: undefined
 */
export function setRelationshipGroupDontAffectWantedLevel(group, p1) {
    if (typeof group === 'string')
        group = this.getHashKey(group);
    SetRelationshipGroupDontAffectWantedLevel(group, p1);
}
/**
 * ```
 * `combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function`
 * ```
 * Hash: 0xB5485E4907B53019 | ApiSet: undefined
 */
export function setPedWetnessEnabledThisFrame(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedWetnessEnabledThisFrame(_ped);
}
/**
 * ```
 * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
 * ```
 * Hash: 0x14F19A8782C8071E | ApiSet: undefined
 */
export function setScenarioPedsToBeReturnedByNextCommand(value) {
    SetScenarioPedsToBeReturnedByNextCommand(value);
}
/**
 * Set the number of scenario peds on the entire map
 * Hash: 0x7A556143A1C03898 | ApiSet: undefined
 */
export function setScenarioPedDensityMultiplierThisFrame(interiorMult, exteriorMult) {
    SetScenarioPedDensityMultiplierThisFrame(interiorMult, exteriorMult);
}
/**
 * Hash: 0x5086C7843552CF85 | ApiSet: undefined
 */
export function setScriptedConversionCoordThisFrame(position) {
    SetScriptedConversionCoordThisFrame(position.x, position.y, position.z);
}
/**
 * ```
 * Works for both player and peds, but some flags don't seem to work for the player (1, for example)
 * 1 - Blocks ragdolling when shot.
 * 2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
 * 4 - Blocks ragdolling when set on fire.
 * -----------------------------------------------------------------------
 * There seem to be 26 flags
 * ```
 * Hash: 0x26695EC767728D84 | ApiSet: undefined
 */
export function setRagdollBlockingFlags(ped, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetRagdollBlockingFlags(_ped, flags);
}
/**
 * Hash: 0x28157D43CF600981 | ApiSet: undefined
 */
export function setScenarioPedsSpawnInSphereArea(position, range, p4) {
    SetScenarioPedsSpawnInSphereArea(position.x, position.y, position.z, range, p4);
}
/**
 * Hash: 0xD9A897A4C6C2974F | ApiSet: undefined
 */
export function setSynchronizedSceneLooped(sceneID, toggle) {
    SetSynchronizedSceneLooped(sceneID, toggle);
}
/**
 * Hash: 0x5917BBA32D06C230 | ApiSet: undefined
 */
export function setScriptedAnimSeatOffset(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetScriptedAnimSeatOffset(_ped, p1);
}
/**
 * Hash: 0x734292F4F0ABF6D0 | ApiSet: undefined
 */
export function setSynchronizedScenePhase(sceneID, phase) {
    SetSynchronizedScenePhase(sceneID, phase);
}
/**
 * Hash: 0x394B9CD12435C981 | ApiSet: undefined
 */
export function setSynchronizedSceneHoldLastFrame(sceneID, toggle) {
    SetSynchronizedSceneHoldLastFrame(sceneID, toggle);
}
/**
 * Hash: 0xA635C11B8C44AFC2 | ApiSet: undefined
 */
export function spawnpointsGetNumSearchResults() {
    return SpawnpointsGetNumSearchResults();
}
/**
 * Hash: 0xB6C49F8A5E295A5D | ApiSet: undefined
 */
export function setSynchronizedSceneRate(sceneID, rate) {
    SetSynchronizedSceneRate(sceneID, rate);
}
/**
 * Hash: 0x6ACF6B7225801CD7 | ApiSet: undefined
 */
export function setSynchronizedSceneOrigin(sceneID, position, roll, pitch, yaw, p7) {
    SetSynchronizedSceneOrigin(sceneID, position.x, position.y, position.z, roll, pitch, yaw, p7);
}
/**
 * Hash: 0xA586FBEB32A53DBB | ApiSet: undefined
 */
export function spawnpointsIsSearchComplete() {
    return SpawnpointsIsSearchComplete();
}
/**
 * Hash: 0xB782F8238512BAD5 | ApiSet: undefined
 */
export function spawnpointsGetSearchResultFlags(p0) {
    return SpawnpointsGetSearchResultFlags(p0);
}
/**
 * Hash: 0x280C7E3AC7F56E90 | ApiSet: undefined
 */
export function spawnpointsGetSearchResult(randomInt) {
    return SpawnpointsGetSearchResult(randomInt);
}
/**
 * Hash: 0xFEE4A5459472A9F8 | ApiSet: undefined
 */
export function spawnpointsCancelSearch() {
    SpawnpointsCancelSearch();
}
/**
 * Hash: 0xB2AFF10216DEFA2F | ApiSet: undefined
 */
export function spawnpointsStartSearchInAngledArea(position, p3, p4, p5, p6, interiorFlags, scale, duration) {
    SpawnpointsStartSearchInAngledArea(position.x, position.y, position.z, p3, p4, p5, p6, interiorFlags, scale, duration);
}
/**
 * Hash: 0xF445DE8DA80A1792 | ApiSet: undefined
 */
export function spawnpointsIsSearchFailed() {
    return SpawnpointsIsSearchFailed();
}
/**
 * Hash: 0x3C67506996001F5E | ApiSet: undefined
 */
export function spawnpointsIsSearchActive() {
    return SpawnpointsIsSearchActive();
}
/**
 * Hash: 0xB47BD05FA66B40CF | ApiSet: undefined
 */
export function stopAnyPedModelBeingSuppressed() {
    StopAnyPedModelBeingSuppressed();
}
/**
 * Hash: 0x2DF9038C90AD5264 | ApiSet: undefined
 */
export function spawnpointsStartSearch(p0, p1, p2, p3, p4, interiorFlags, scale, duration) {
    SpawnpointsStartSearch(p0, p1, p2, p3, p4, interiorFlags, scale, duration);
}
/**
 * Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.\
 * Only to be used in very specific situations where the ped needs to be inside the car still but not attached.
 * Hash: 0xF9ACF4A08098EA25 | ApiSet: undefined
 */
export function specialFunctionDoNotUse(ped, noCollisionUntilClear) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SpecialFunctionDoNotUse(_ped, noCollisionUntilClear);
}
/**
 * ```
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * ```
 * Hash: 0x96B1361D9B24C2FF | ApiSet: undefined
 */
export function unregisterPedheadshot(id) {
    UnregisterPedheadshot(id);
}
/**
 * Hash: 0xCD9CC7E200A52A6F | ApiSet: undefined
 */
export function takeOwnershipOfSynchronizedScene(scene) {
    TakeOwnershipOfSynchronizedScene(scene);
}
/**
 * Hash: 0xC158D28142A34608 | ApiSet: undefined
 */
export function stopPedWeaponFiringWhenDropped(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopPedWeaponFiringWhenDropped(_ped);
}
/**
 * See [`SET_PED_HEAD_BLEND_DATA`](#\_0x9414E18B9434C2FE)
 * Hash: 0x723538F61C647C5A | ApiSet: undefined
 */
export function updatePedHeadBlendData(ped, shapeMix, skinMix, thirdMix) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    UpdatePedHeadBlendData(_ped, shapeMix, skinMix, thirdMix);
}
/**
 * Hash: 0x61767F73EACEED21 | ApiSet: undefined
 */
export function wasPedKnockedOut(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return WasPedKnockedOut(_ped);
}
/**
 * Verifies whether ped was eliminated through stealth.
 * Hash: 0xF9800AA1A771B000 | ApiSet: undefined
 */
export function wasPedKilledByStealth(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return WasPedKilledByStealth(_ped);
}
/**
 * Hash: 0x7F08E26039C7347C | ApiSet: undefined
 */
export function wasPedKilledByTakedown(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return WasPedKilledByTakedown(_ped);
}
/**
 * ```
 * Despite this function's name, it simply returns whether the specified handle is a Ped.
 * ```
 * Hash: 0x11B499C1E0FF8559 | ApiSet: undefined
 */
export function wasPedSkeletonUpdated(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return WasPedSkeletonUpdated(_ped);
}
/**
 * ```
 * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
 * ```
 * Hash: 0x11E019C8F43ACC8A | ApiSet: undefined
 */
export function ceil(value) {
    return Ceil(value);
}
/**
 * Returns the cosine of the given number.
 * Hash: 0xD0FFB162F40A139C | ApiSet: undefined
 */
export function cos(value) {
    return Cos(value);
}
/**
 * Hash: 0xF34EE736CF047844 | ApiSet: undefined
 */
export function floor(value) {
    return Floor(value);
}
/**
 * Hash: 0xF2DB717A73826179 | ApiSet: undefined
 */
export function round(value) {
    return Round(value);
}
/**
 * Hash: 0xE3621CC40F31FE2E | ApiSet: undefined
 */
export function pow(base, exponent) {
    return Pow(base, exponent);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xE816E655DE37FE20 | ApiSet: undefined
 */
export function log10(value) {
    return Log10(value);
}
/**
 * Sets the value for the timer A in milliseconds
 * Hash: 0xC1B1E9A034A63A62 | ApiSet: undefined
 */
export function settimera(value) {
    Settimera(value);
}
/**
 * ```
 * 0 = high
 * 1 = normal
 * 2 = low
 * ```
 * Hash: 0x42B65DEEF2EDF2A1 | ApiSet: undefined
 */
export function setThreadPriority(priority) {
    SetThreadPriority(priority);
}
/**
 * Sets the value for the timer B in milliseconds
 * Hash: 0x5AE11BC36633DE4E | ApiSet: undefined
 */
export function settimerb(value) {
    Settimerb(value);
}
/**
 * Left bit shifts a value.
 * It is advised you use the `<<` operator instead of this native. It does the same and is faster.
 * Hash: 0xEDD95A39E5544DE8 | ApiSet: undefined
 */
export function shiftLeft(value, bitShift) {
    return ShiftLeft(value, bitShift);
}
/**
 * Returns the sine of the given number.
 * Hash: 0x0BADBFA3B172435F | ApiSet: undefined
 */
export function sin(value) {
    return Sin(value);
}
/**
 * Right bit shifts a value.
 * It is advised you use the `>>` operator instead of this native. It does the same and is faster.
 * Hash: 0x97EF1E5BCE9DC075 | ApiSet: undefined
 */
export function shiftRight(value, bitShift) {
    return ShiftRight(value, bitShift);
}
/**
 * ```
 * Examples:
 * `g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);`
 * `l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);`
 * `SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);`
 * `SYSTEM::START_NEW_SCRIPT("emergencycall", 512);`
 * `SYSTEM::START_NEW_SCRIPT("emergencycall", 512);`
 * `SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);`
 * `SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);`
 * `SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);`
 * `SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);`
 * Decompiled examples of usage when starting a script:
 * `SCRIPT::REQUEST_SCRIPT(a_0);`
 * `if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {`
 * `SYSTEM::START_NEW_SCRIPT(a_0, v_3);`
 * `SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);`
 * return 1;
 * }
 * or:
 * v_2 = "MrsPhilips2";
 * `SCRIPT::REQUEST_SCRIPT(v_2);`
 * `while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {`
 * `SCRIPT::REQUEST_SCRIPT(v_2);`
 * `SYSTEM::WAIT(0);`
 * }
 * sub_8792(36);
 * `SYSTEM::START_NEW_SCRIPT(v_2, 17000);`
 * `SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);`
 * All native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi
 * ```
 * Hash: 0xE81651AD79516E48 | ApiSet: undefined
 */
export function startNewScript(scriptName, stackSize) {
    return StartNewScript(scriptName, stackSize);
}
/**
 * ```
 * return : script thread id, 0 if failed
 * Pass pointer to struct of args in p1, size of struct goes into p2
 * ```
 * Hash: 0xB8BA7F44DF1575E1 | ApiSet: undefined
 */
export function startNewScriptWithArgs(scriptName, argCount, stackSize) {
    return StartNewScriptWithArgs(scriptName, argCount, stackSize);
}
/**
 * Hash: 0x71D93B57D07F9804 | ApiSet: undefined
 */
export function sqrt(value) {
    return Sqrt(value);
}
/**
 * Hash: 0xC4BB298BD441BE78 | ApiSet: undefined
 */
export function startNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    return StartNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize);
}
/**
 * Hash: 0xC9D9444186B5A374 | ApiSet: undefined
 */
export function timerb() {
    return Timerb();
}
/**
 * ```
 * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
 * ```
 * Hash: 0x83666F9FB8FEBD4B | ApiSet: undefined
 */
export function timera() {
    return Timera();
}
/**
 * Hash: 0xEB1C67C3A5333A92 | ApiSet: undefined
 */
export function startNewScriptWithNameHash(scriptHash, stackSize) {
    if (typeof scriptHash === 'string')
        scriptHash = this.getHashKey(scriptHash);
    return StartNewScriptWithNameHash(scriptHash, stackSize);
}
/**
 * ```
 * Gets the current frame time.
 * ```
 * Hash: 0x0000000050597EE2 | ApiSet: undefined
 */
export function timestep() {
    return Timestep();
}
/**
 * Calculates the distance between two points in 3D space. For performance reasons, consider using direct mathematical calculations for distance, as they can be more efficient than calling this native function.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x2A488C176D52CCA5 | ApiSet: undefined
 */
export function vdist(x1, y1, z1, x2, y2, z2) {
    return Vdist(x1, y1, z1, x2, y2, z2);
}
/**
 * Hash: 0xBBDA792448DB5A89 | ApiSet: undefined
 */
export function toFloat(value) {
    return ToFloat(value);
}
/**
 * ```
 * Calculates the magnitude of a vector.
 * ```
 * Hash: 0x652D2EEEF1D3E62C | ApiSet: undefined
 */
export function vmag(position) {
    return Vmag(position.x, position.y, position.z);
}
/**
 * Calculates distance between vectors but does not perform Sqrt operations. Its way faster than [`VDIST`](#\_0x2A488C176D52CCA5), but it's not faster than direct mathematical calculations.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xB7A628320EFF8E47 | ApiSet: undefined
 */
export function vdist2(x1, y1, z1, x2, y2, z2) {
    return Vdist2(x1, y1, z1, x2, y2, z2);
}
/**
 * ```
 * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
 * ```
 * Hash: 0xA8CEACB4F35AE058 | ApiSet: undefined
 */
export function vmag2(position) {
    return Vmag2(position.x, position.y, position.z);
}
/**
 * ```
 * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
 * ```
 * Hash: 0x4EDE34FBADD967A6 | ApiSet: undefined
 */
export function wait(ms) {
    Wait(ms);
}
/**
 * Hash: 0x8E2A065ABDAE6994 | ApiSet: undefined
 */
export function allowPlayerSwitchAscent() {
    AllowPlayerSwitchAscent();
}
/**
 * Hash: 0x0BC3144DEB678666 | ApiSet: undefined
 */
export function addModelToCreatorBudget(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return AddModelToCreatorBudget(modelHash);
}
/**
 * Hash: 0x9BADDC94EF83B823 | ApiSet: undefined
 */
export function beginSrl() {
    BeginSrl();
}
/**
 * Hash: 0xAD5FDF34B81BFE79 | ApiSet: undefined
 */
export function allowPlayerSwitchDescent() {
    AllowPlayerSwitchDescent();
}
/**
 * Hash: 0x31B73D1EA9F01DA2 | ApiSet: undefined
 */
export function clearFocus() {
    ClearFocus();
}
/**
 * Hash: 0x2DA49C3B79856961 | ApiSet: undefined
 */
export function doesAnimDictExist(animDict) {
    return DoesAnimDictExist(animDict);
}
/**
 * Hash: 0x43D1680C6D19A8E9 | ApiSet: undefined
 */
export function allowPlayerSwitchPan() {
    AllowPlayerSwitchPan();
}
/**
 * Hash: 0x74DE2E8739086740 | ApiSet: undefined
 */
export function allowPlayerSwitchOutro() {
    AllowPlayerSwitchOutro();
}
/**
 * ```
 * x1, y1, z1 -- Coords of your ped model
 * x2, y2, z2 -- Coords of the ped you want to switch to
 * ```
 * Hash: 0xB5D7B26B45720E05 | ApiSet: undefined
 */
export function getIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2) {
    return GetIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xF741BD853611592D | ApiSet: undefined
 */
export function getGlobalWaterType() {
    return GetGlobalWaterType();
}
/**
 * Hash: 0xCE58B1CFB9290813 | ApiSet: undefined
 */
export function clearHdArea() {
    ClearHdArea();
}
/**
 * Hash: 0xBD605B8E0E18B3BB | ApiSet: undefined
 */
export function disableSwitchOutroFx() {
    DisableSwitchOutroFx();
}
/**
 * Hash: 0x0C15B0E443B2349D | ApiSet: undefined
 */
export function getLodscale() {
    return GetLodscale();
}
/**
 * Hash: 0x20F898A5D9782800 | ApiSet: undefined
 */
export function getPlayerShortSwitchState() {
    return GetPlayerShortSwitchState();
}
/**
 * Hash: 0xD4793DFF3AF2ABCD | ApiSet: undefined
 */
export function enableSwitchPauseBeforeDescent() {
    EnableSwitchPauseBeforeDescent();
}
/**
 * Hash: 0x08C2D6C52A3104BB | ApiSet: undefined
 */
export function getPlayerSwitchInterpOutDuration() {
    return GetPlayerSwitchInterpOutDuration();
}
/**
 * Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
 * Hash: 0x0A41540E63C9EE17 | ApiSet: undefined
 */
export function endSrl() {
    EndSrl();
}
/**
 * Hash: 0x78C0D93253149435 | ApiSet: undefined
 */
export function getPlayerSwitchJumpCutIndex() {
    return GetPlayerSwitchJumpCutIndex();
}
/**
 * Hash: 0x4060057271CEBC89 | ApiSet: undefined
 */
export function getNumberOfStreamingRequests() {
    return GetNumberOfStreamingRequests();
}
/**
 * ```
 * 0.0 = no memory used
 * 1.0 = all memory used
 * Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
 * GET_*
 * ```
 * Hash: 0x3D3D8B3BE5A83D35 | ApiSet: undefined
 */
export function getUsedCreatorModelMemoryPercentage() {
    return GetUsedCreatorModelMemoryPercentage();
}
/**
 * Hash: 0x470555300D10B2A5 | ApiSet: undefined
 */
export function getPlayerSwitchState() {
    return GetPlayerSwitchState();
}
/**
 * Hash: 0x5B48A06DD0E792A5 | ApiSet: undefined
 */
export function getPlayerSwitchInterpOutCurrentTime() {
    return GetPlayerSwitchInterpOutCurrentTime();
}
/**
 * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped.
 * Animation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\_0xAF8A94EDE7712BEF).
 * Hash: 0xC4EA073D86FB29B0 | ApiSet: undefined
 */
export function hasAnimSetLoaded(animSet) {
    return HasAnimSetLoaded(animSet);
}
/**
 * ```
 * Alias for HAS_ANIM_SET_LOADED.
 * ```
 * Hash: 0x318234F4F3738AF3 | ApiSet: undefined
 */
export function hasClipSetLoaded(clipSet) {
    return HasClipSetLoaded(clipSet);
}
/**
 * Hash: 0xB3C94A90D9FC9E62 | ApiSet: undefined
 */
export function getPlayerSwitchType() {
    return GetPlayerSwitchType();
}
/**
 * Hash: 0x8702416E512EC454 | ApiSet: undefined
 */
export function hasNamedPtfxAssetLoaded(fxName) {
    return HasNamedPtfxAssetLoaded(fxName);
}
/**
 * Hash: 0xD031A9162D01088C | ApiSet: undefined
 */
export function hasAnimDictLoaded(animDict) {
    return HasAnimDictLoaded(animDict);
}
/**
 * Hash: 0x2DDFF3FB9075D747 | ApiSet: undefined
 */
export function isEntityFocus(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityFocus(_entity);
}
/**
 * Hash: 0x22CCA434E368F03A | ApiSet: undefined
 */
export function hasCollisionForModelLoaded(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return HasCollisionForModelLoaded(model);
}
/**
 * Returns whether the specified model (archetype) is currently loaded.
 * Note that this will return 'true' even if the model has been requested and loaded by something other than the current script, if you're intending to actually use the model in a later frame, you should call REQUEST_MODEL anyway.
 * Hash: 0x98A4EB5D89A0C952 | ApiSet: undefined
 */
export function hasModelLoaded(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return HasModelLoaded(model);
}
/**
 * ```
 * Returns whether the specified model represents a vehicle.
 * ```
 * Hash: 0x19AAC8F07BFEC53E | ApiSet: undefined
 */
export function isModelAVehicle(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsModelAVehicle(model);
}
/**
 * Hash: 0x75816577FEA6DAD5 | ApiSet: undefined
 */
export function isModelAPed(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsModelAPed(model);
}
/**
 * ```
 * Returns whether the specified model exists in the game.
 * ```
 * Hash: 0xC0296A2EDF545E92 | ApiSet: undefined
 */
export function isModelValid(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsModelValid(model);
}
/**
 * Hash: 0x41CA5A33160EA4AB | ApiSet: undefined
 */
export function isNetworkLoadingScene() {
    return IsNetworkLoadingScene();
}
/**
 * Hash: 0xCA7D9B86ECA7481B | ApiSet: undefined
 */
export function hasPtfxAssetLoaded() {
    return HasPtfxAssetLoaded();
}
/**
 * Hash: 0x88A741E44A2B3495 | ApiSet: undefined
 */
export function isIplActive(iplName) {
    return IsIplActive(iplName);
}
/**
 * Hash: 0xA41A05B6CB741B85 | ApiSet: undefined
 */
export function isNewLoadSceneActive() {
    return IsNewLoadSceneActive();
}
/**
 * Hash: 0xB5A4DB34FE89B88A | ApiSet: undefined
 */
export function initCreatorBudget() {
    InitCreatorBudget();
}
/**
 * Hash: 0xBD6E84632DD4CB3F | ApiSet: undefined
 */
export function loadAllObjectsNow() {
    LoadAllObjectsNow();
}
/**
 * ```
 * Check if model is in cdimage(rpf)
 * ```
 * Hash: 0x35B9E0803292B641 | ApiSet: undefined
 */
export function isModelInCdimage(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsModelInCdimage(model);
}
/**
 * Hash: 0xDFA80CB25D0A19B3 | ApiSet: undefined
 */
export function isSwitchReadyForDescent() {
    return IsSwitchReadyForDescent();
}
/**
 * Hash: 0x01B8247A7A8B9AD1 | ApiSet: undefined
 */
export function isNewLoadSceneLoaded() {
    return IsNewLoadSceneLoaded();
}
/**
 * ```
 * Returns true if the player is currently switching, false otherwise.
 * (When the camera is in the sky moving from Trevor to Franklin for example)
 * ```
 * Hash: 0xD9D2CFFF49FAB35F | ApiSet: undefined
 */
export function isPlayerSwitchInProgress() {
    return IsPlayerSwitchInProgress();
}
/**
 * Hash: 0x5B74EA8CFD5E3E7E | ApiSet: undefined
 */
export function isSwitchSkippingDescent() {
    return IsSwitchSkippingDescent();
}
/**
 * Returns true when the srl from BEGIN_SRL is loaded.
 * Hash: 0xD0263801A4C5B0BB | ApiSet: undefined
 */
export function isSrlLoaded() {
    return IsSrlLoaded();
}
/**
 * Hash: 0x4448EB75B4904BDB | ApiSet: undefined
 */
export function loadScene(position) {
    LoadScene(position.x, position.y, position.z);
}
/**
 * Hash: 0xBC9823AB80A3DCAC | ApiSet: undefined
 */
export function isStreamvolActive() {
    return IsStreamvolActive();
}
/**
 * Hash: 0x03F1A106BDA7DD3E | ApiSet: undefined
 */
export function _0x03F1A106BDA7DD3E() {
    Citizen.invokeNative('0x03F1A106BDA7DD3E');
}
/**
 * Hash: 0x0811381EF5062FEC | ApiSet: undefined
 */
export function _0x0811381EF5062FEC(p0) {
    const _p0 = p0 instanceof Entity ? p0.handle() : p0;
    Citizen.invokeNative('0x0811381EF5062FEC', _p0);
}
/**
 * 0 - default
 * 1 - HeistIsland
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x7E3F55ED251B76D3 | ApiSet: undefined
 */
export function loadGlobalWaterType(waterType) {
    LoadGlobalWaterType(waterType);
}
/**
 * Hash: 0x472397322E92A856 | ApiSet: undefined
 */
export function _0x472397322E92A856() {
    Citizen.invokeNative('0x472397322E92A856');
}
/**
 * Hash: 0x1E9057A74FD73E23 | ApiSet: undefined
 */
export function _0x1E9057A74FD73E23() {
    Citizen.invokeNative('0x1E9057A74FD73E23');
}
/**
 * Hash: 0x20C6C7E4EB082A7F | ApiSet: undefined
 */
export function _0x20C6C7E4EB082A7F(p0) {
    Citizen.invokeNative('0x20C6C7E4EB082A7F', p0);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x4E52E752C76E7E7A | ApiSet: undefined
 */
export function _0x4E52E752C76E7E7A(p0) {
    Citizen.invokeNative('0x4E52E752C76E7E7A', p0);
}
/**
 * Hash: 0x63EB2B972A218CAC | ApiSet: undefined
 */
export function _0x63EB2B972A218CAC() {
    Citizen.invokeNative('0x63EB2B972A218CAC');
}
/**
 * Hash: 0x5068F488DDB54DD8 | ApiSet: undefined
 */
export function _0x5068F488DDB54DD8() {
    return Citizen.invokeNative('0x5068F488DDB54DD8');
}
/**
 * ```
 * Probably IS_SWITCH_*
 * ```
 * Hash: 0x933BBEEB8C61B5F4 | ApiSet: undefined
 */
export function _0x933BBEEB8C61B5F4() {
    return Citizen.invokeNative('0x933BBEEB8C61B5F4');
}
/**
 * Hash: 0x95A7DABDDBB78AE7 | ApiSet: undefined
 */
export function _0x95A7DABDDBB78AE7(iplName1, iplName2) {
    Citizen.invokeNative('0x95A7DABDDBB78AE7', iplName1, iplName2);
}
/**
 * Hash: 0x71E7B2E657449AAD | ApiSet: undefined
 */
export function _0x71E7B2E657449AAD() {
    return Citizen.invokeNative('0x71E7B2E657449AAD');
}
/**
 * Hash: 0xBED8CA5FF5E04113 | ApiSet: undefined
 */
export function _0xBED8CA5FF5E04113(p0, p1, p2, p3) {
    Citizen.invokeNative('0xBED8CA5FF5E04113', p0, p1, p2, p3);
}
/**
 * Hash: 0xBEB2D9A1D9A8F55A | ApiSet: undefined
 */
export function _0xBEB2D9A1D9A8F55A(p0, p1, p2, p3) {
    Citizen.invokeNative('0xBEB2D9A1D9A8F55A', p0, p1, p2, p3);
}
/**
 * Hash: 0xF4A0DADB70F57FA6 | ApiSet: undefined
 */
export function _0xF4A0DADB70F57FA6() {
    Citizen.invokeNative('0xF4A0DADB70F57FA6');
}
/**
 * Hash: 0xEF39EE20C537E98C | ApiSet: undefined
 */
export function _0xEF39EE20C537E98C(p0, p1, p2, p3, p4, p5) {
    Citizen.invokeNative('0xEF39EE20C537E98C', p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0xF8155A7F03DDFC8E | ApiSet: undefined
 */
export function _0xF8155A7F03DDFC8E(p0) {
    Citizen.invokeNative('0xF8155A7F03DDFC8E', p0);
}
/**
 * Hash: 0x64E630FAF5F60F44 | ApiSet: undefined
 */
export function networkStopLoadScene() {
    NetworkStopLoadScene();
}
/**
 * Hash: 0xFB199266061F820A | ApiSet: undefined
 */
export function _0xFB199266061F820A() {
    return Citizen.invokeNative('0xFB199266061F820A');
}
/**
 * Hash: 0xC4582015556D1C46 | ApiSet: undefined
 */
export function networkUpdateLoadScene() {
    return NetworkUpdateLoadScene();
}
/**
 * Hash: 0xC197616D221FF4A4 | ApiSet: undefined
 */
export function newLoadSceneStop() {
    NewLoadSceneStop();
}
/**
 * ```
 * if (!sub_8f12("START LOAD SCENE SAFE")) {
 * `if (CUTSCENE::GET_CUTSCENE_TIME() > 4178) {`
 * `STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);`
 * sub_8e9e("START LOAD SCENE SAFE", 1);
 * }
 * }
 * `(Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)`
 * ```
 * Hash: 0xACCFB4ACF53551B0 | ApiSet: undefined
 */
export function newLoadSceneStartSphere(position, radius, p4) {
    return NewLoadSceneStartSphere(position.x, position.y, position.z, radius, p4);
}
/**
 * ```
 * Alias for REMOVE_ANIM_SET.
 * ```
 * Hash: 0x01F73A131C18CD94 | ApiSet: undefined
 */
export function removeClipSet(clipSet) {
    RemoveClipSet(clipSet);
}
/**
 * ```
 * `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
 * `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
 * Returns True if success, used only 7 times in decompiled scripts of 1868
 * ```
 * Hash: 0x212A8D0D2BABFAC2 | ApiSet: undefined
 */
export function newLoadSceneStart(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7) {
    return NewLoadSceneStart(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
}
/**
 * This native is used to attribute the SRL that BeginSrl is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SetFocusArea because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
 * For instance, GTA:O opening cutscene.
 * https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
 * https://pastebin.com/zd9XYUWY : here is the content of a SRL file opened with codewalker.
 * Hash: 0x3D245789CE12982C | ApiSet: undefined
 */
export function prefetchSrl(srl) {
    PrefetchSrl(srl);
}
/**
 * ```
 * This allows you to override "extended distance scaling" setting. Needs to be called each frame.
 * Max scaling seems to be 200.0, normal is 1.0
 * See https://gfycat.com/DetailedHauntingIncatern
 * ```
 * Hash: 0xA76359FC80B2438E | ApiSet: undefined
 */
export function overrideLodscaleThisFrame(scaling) {
    OverrideLodscaleThisFrame(scaling);
}
/**
 * Hash: 0x88C6814073DD4A73 | ApiSet: undefined
 */
export function removePtfxAsset() {
    RemovePtfxAsset();
}
/**
 * Hash: 0xF66A602F829E2A06 | ApiSet: undefined
 */
export function removeAnimDict(animDict) {
    RemoveAnimDict(animDict);
}
/**
 * Unloads the specified animation set. An animation set provides movement animations for a ped.
 * Animation set and clip set are synonymous. See [`SET_PED_MOVEMENT_CLIPSET`](#\_0xAF8A94EDE7712BEF).
 * Hash: 0x16350528F93024B3 | ApiSet: undefined
 */
export function removeAnimSet(animSet) {
    RemoveAnimSet(animSet);
}
/**
 * IPL list can be found [here](https://gist.github.com/4mmonium/4c8a076b5f712a7cc64666003009a2e7).
 * Hash: 0xEE6C5AD3ECE0A82D | ApiSet: undefined
 */
export function removeIpl(iplName) {
    RemoveIpl(iplName);
}
/**
 * Hash: 0xF086AD9354FAC3A3 | ApiSet: undefined
 */
export function removeModelFromCreatorBudget(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    RemoveModelFromCreatorBudget(modelHash);
}
/**
 * Hash: 0xD3BD40951412FEF6 | ApiSet: undefined
 */
export function requestAnimDict(animDict) {
    RequestAnimDict(animDict);
}
/**
 * Hash: 0x5F61EBBE1A00F96D | ApiSet: undefined
 */
export function removeNamedPtfxAsset(fxName) {
    RemoveNamedPtfxAsset(fxName);
}
/**
 * Hash: 0x07503F7948F491A7 | ApiSet: undefined
 */
export function requestCollisionAtCoord(position) {
    RequestCollisionAtCoord(position.x, position.y, position.z);
}
/**
 * Hash: 0xC9156DC11411A9EA | ApiSet: undefined
 */
export function requestAdditionalCollisionAtCoord(position) {
    RequestAdditionalCollisionAtCoord(position.x, position.y, position.z);
}
/**
 * Hash: 0x923CB32A3B874FCB | ApiSet: undefined
 */
export function requestCollisionForModel(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    RequestCollisionForModel(model);
}
/**
 * Hash: 0xD2A71E1A77418A49 | ApiSet: undefined
 */
export function requestClipSet(clipSet) {
    RequestClipSet(clipSet);
}
/**
 * Starts loading the specified animation set. An animation set provides movement animations for a ped. See [`SET_PED_MOVEMENT_CLIPSET`](#\_0xAF8A94EDE7712BEF).
 * Hash: 0x6EA47DAE7FAD0EED | ApiSet: undefined
 */
export function requestAnimSet(animSet) {
    RequestAnimSet(animSet);
}
/**
 * ```
 * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");`
 * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");`
 * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");`
 * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");`
 * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");`
 * `STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");`
 * ```
 * Hash: 0x8A7A40100EDFEC58 | ApiSet: undefined
 */
export function requestModelsInRoom(interior, roomName) {
    RequestModelsInRoom(interior, roomName);
}
/**
 * Request a model (archetype) to be loaded for use by the current script. Use SET_MODEL_AS_NO_LONGER_NEEDED when done using the model in script.
 * Hash: 0x963D27A58DF860AC | ApiSet: undefined
 */
export function requestModel(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    RequestModel(model);
}
/**
 * Calls [`REQUEST_MODEL`](#\_0x963D27A58DF860AC) with the `STRFLAG_PRIORITY_LOAD` and `STRFLAG_FORCE_LOAD` set.
 * Hash: 0xA0261AEF7ACFC51E | ApiSet: undefined
 */
export function requestMenuPedModel(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    RequestMenuPedModel(model);
}
/**
 * ```
 * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
 * ```
 * Hash: 0x41B4893843BBDB74 | ApiSet: undefined
 */
export function requestIpl(iplName) {
    RequestIpl(iplName);
}
/**
 * ```
 * Override the area where the camera will render the terrain.
 * p3, p4 and p5 are usually set to 0.0
 * ```
 * Hash: 0xBB7454BAFF08FE25 | ApiSet: undefined
 */
export function setFocusPosAndVel(position, offsetX, offsetY, offsetZ) {
    SetFocusPosAndVel(position.x, position.y, position.z, offsetX, offsetY, offsetZ);
}
/**
 * ```
 * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
 * ```
 * Hash: 0x944955FB2A3935C8 | ApiSet: undefined
 */
export function requestPtfxAsset() {
    RequestPtfxAsset();
}
/**
 * ```
 * From the b678d decompiled scripts:
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");`
 * `STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");`
 * ```
 * Hash: 0xB80D8756B4668AB6 | ApiSet: undefined
 */
export function requestNamedPtfxAsset(fxName) {
    RequestNamedPtfxAsset(fxName);
}
/**
 * Hash: 0x717CD6E6FAEBBEDC | ApiSet: undefined
 */
export function setGamePausesForStreaming(toggle) {
    SetGamePausesForStreaming(toggle);
}
/**
 * Hash: 0xE37B76C387BE28ED | ApiSet: undefined
 */
export function setInteriorActive(interiorID, toggle) {
    SetInteriorActive(interiorID, toggle);
}
/**
 * ```
 * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
 * ```
 * Hash: 0x198F77705FA0931D | ApiSet: undefined
 */
export function setFocusEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetFocusEntity(_entity);
}
/**
 * ```
 * This is a NOP function. It does nothing at all.
 * ```
 * Hash: 0x42CBE54462D92634 | ApiSet: undefined
 */
export function setDitchPoliceModels(toggle) {
    SetDitchPoliceModels(toggle);
}
/**
 * Releases the script ownership assigned by REQUEST_MODEL. This command should be used when done using a specific model hash in script.
 * Hash: 0xE532F5D78798DAAB | ApiSet: undefined
 */
export function setModelAsNoLongerNeeded(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    SetModelAsNoLongerNeeded(model);
}
/**
 * Sets the memory budget level for ped population.
 * Hash: 0x8C95333CFC3340F3 | ApiSet: undefined
 */
export function setPedPopulationBudget(budgetLevel) {
    SetPedPopulationBudget(budgetLevel);
}
/**
 * Hash: 0xB85F26619073E775 | ApiSet: undefined
 */
export function setHdArea(position, radius) {
    SetHdArea(position.x, position.y, position.z, radius);
}
/**
 * ```
 * Possible p0 values:
 * "prologue"
 * "Prologue_Main"
 * ```
 * Hash: 0xAF12610C644A35C9 | ApiSet: undefined
 */
export function setMapdatacullboxEnabled(name, toggle) {
    SetMapdatacullboxEnabled(name, toggle);
}
/**
 * Hash: 0x5F2013F8BC24EE69 | ApiSet: undefined
 */
export function setPlayerShortSwitchStyle(style) {
    SetPlayerShortSwitchStyle(style);
}
/**
 * ```
 * All names can be found in playerswitchestablishingshots.meta
 * ```
 * Hash: 0x0FDE9DBFC0A6BC65 | ApiSet: undefined
 */
export function setPlayerSwitchEstablishingShot(name) {
    SetPlayerSwitchEstablishingShot(name);
}
/**
 * Enables the specified island. For more information, see islandhopper.meta
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x9A9D1BA639675CF1 | ApiSet: undefined
 */
export function setIslandEnabled(islandName, toggle) {
    SetIslandEnabled(islandName, toggle);
}
/**
 * Hash: 0x77B5F9A36BF96710 | ApiSet: undefined
 */
export function setReducePedModelBudget(toggle) {
    SetReducePedModelBudget(toggle);
}
/**
 * Hash: 0xC208B673CE446B61 | ApiSet: undefined
 */
export function setPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder) {
    SetPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
}
/**
 * Hash: 0x80C527893080CCF3 | ApiSet: undefined
 */
export function setReduceVehicleModelBudget(toggle) {
    SetReduceVehicleModelBudget(toggle);
}
/**
 * Hash: 0xCCE26000E9A6FAD7 | ApiSet: undefined
 */
export function shutdownCreatorBudget() {
    ShutdownCreatorBudget();
}
/**
 * Hash: 0x40AEFD1A244741F2 | ApiSet: undefined
 */
export function setRenderHdOnly(toggle) {
    SetRenderHdOnly(toggle);
}
/**
 * Hash: 0x95C0A5BBDC189AA1 | ApiSet: undefined
 */
export function stopPlayerSwitch() {
    StopPlayerSwitch();
}
/**
 * ```cpp
 * enum ePlayerSwitchType
 * {
 * SWITCH_TYPE_AUTO = 0,
 * SWITCH_TYPE_LONG = 1,
 * SWITCH_TYPE_MEDIUM = 2,
 * SWITCH_TYPE_SHORT = 3
 * };
 * ```
 * ```cpp
 * enum eSwitchFlags {
 * SKIP_INTRO = 1,
 * SKIP_OUTRO = 2,
 * PAUSE_BEFORE_PAN = 4,
 * PAUSE_BEFORE_OUTRO = 8,
 * SKIP_PAN = 16,
 * UNKNOWN_DEST = 32,
 * DESCENT_ONLY = 64,
 * START_FROM_CAMPOS = 128,
 * PAUSE_BEFORE_ASCENT = 256,
 * PAUSE_BEFORE_DESCENT = 512,
 * ALLOW_SNIPER_AIM_INTRO = 1024,
 * ALLOW_SNIPER_AIM_OUTRO = 2048,
 * SKIP_TOP_DESCENT = 4096,
 * SUPPRESS_OUTRO_FX = 8192,
 * SUPPRESS_INTRO_FX = 16384,
 * DELAY_ASCENT_FX = 32768
 * }
 * ```
 * Hash: 0xFAA23F2CBA159D67 | ApiSet: undefined
 */
export function startPlayerSwitch(from, to, flags, switchType) {
    const _from = from instanceof Ped ? from.handle() : from;
    const _to = to instanceof Ped ? to.handle() : to;
    StartPlayerSwitch(_from, _to, flags, switchType);
}
/**
 * Hash: 0x6E0C692677008888 | ApiSet: undefined
 */
export function setStreaming(toggle) {
    SetStreaming(toggle);
}
/**
 * ```
 * Always returns zero.
 * ```
 * Hash: 0x0AD9710CEE2F590F | ApiSet: undefined
 */
export function streamvolCreateLine(p0, p1, p2, p3, p4, p5, p6) {
    return StreamvolCreateLine(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x1EE7D8DF4425F053 | ApiSet: undefined
 */
export function streamvolDelete(unused) {
    StreamvolDelete(unused);
}
/**
 * Hash: 0xA74A541C6884E7B8 | ApiSet: undefined
 */
export function setSrlTime(p0) {
    SetSrlTime(p0);
}
/**
 * ```
 * Always returns zero.
 * ```
 * Hash: 0x219C7B8D53E429FD | ApiSet: undefined
 */
export function streamvolCreateSphere(position, rad, p4, p5) {
    return StreamvolCreateSphere(position.x, position.y, position.z, rad, p4, p5);
}
/**
 * Hash: 0x7D41E9D2D17C5B2D | ApiSet: undefined
 */
export function streamvolHasLoaded(unused) {
    return StreamvolHasLoaded(unused);
}
/**
 * Hash: 0xCB9E1EB3BE2AF4E9 | ApiSet: undefined
 */
export function setVehiclePopulationBudget(p0) {
    SetVehiclePopulationBudget(p0);
}
/**
 * Hash: 0x07C313F94746702C | ApiSet: undefined
 */
export function streamvolIsValid(unused) {
    return StreamvolIsValid(unused);
}
/**
 * You can check if the player is in a Switch state with [`IS_PLAYER_SWITCH_IN_PROGRESS`](#\_0xD9D2CFFF49FAB35F).
 * ***Note:** Doesn't act normally when used on Mount Chiliad.*
 * Hash: 0xAAB3200ED59016BC | ApiSet: undefined
 */
export function switchToMultiFirstpart(ped, flags, switchType) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SwitchToMultiFirstpart(_ped, flags, switchType);
}
/**
 * ```
 * Always returns zero.
 * ```
 * Hash: 0x1F3F018BC3AFA77C | ApiSet: undefined
 */
export function streamvolCreateFrustum(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
    return StreamvolCreateFrustum(p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
/**
 * After using [`SWITCH_TO_MULTI_FIRSTPART`](#\_0xAAB3200ED59016BC) , use this native to smoothly return the camera to the player's character.
 * Hash: 0xD8295AF639FD9CB8 | ApiSet: undefined
 */
export function switchToMultiSecondpart(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SwitchToMultiSecondpart(_ped);
}
/**
 * Hash: 0x80C75307B1C42837 | ApiSet: undefined
 */
export function getPackedBoolStatKey(index, spStat, charStat, character) {
    return GetPackedBoolStatKey(index, spStat, charStat, character);
}
/**
 * ```
 * Needs more research. Gets the stat name of a masked int?
 * section - values used in the decompiled scripts:
 * "_NGPSTAT_INT"
 * "_MP_NGPSTAT_INT"
 * "_MP_LRPSTAT_INT"
 * "_MP_APAPSTAT_INT"
 * "_MP_LR2PSTAT_INT"
 * "_MP_BIKEPSTAT_INT"
 * "_MP_IMPEXPPSTAT_INT"
 * "_MP_GUNRPSTAT_INT"
 * "_NGDLCPSTAT_INT"
 * "_MP_NGDLCPSTAT_INT"
 * "_DLCSMUGCHARPSTAT_INT"
 * "_GANGOPSPSTAT_INT"
 * "_BUSINESSBATPSTAT_INT"
 * "_ARENAWARSPSTAT_INT"
 * "_CASINOPSTAT_INT"
 * "_CASINOHSTPSTAT_INT"
 * ```
 * Hash: 0x2B4CDCA6F07FF3DA | ApiSet: undefined
 */
export function getNgstatIntHash(index, spStat, charStat, character, section) {
    return GetNgstatIntHash(index, spStat, charStat, character, section);
}
/**
 * ```
 * Needs more research. Gets the stat name of a masked bool?
 * section - values used in the decompiled scripts:
 * "_NGPSTAT_BOOL"
 * "_NGTATPSTAT_BOOL"
 * "_NGDLCPSTAT_BOOL"
 * "_DLCBIKEPSTAT_BOOL"
 * "_DLCGUNPSTAT_BOOL"
 * "_GUNTATPSTAT_BOOL"
 * "_DLCSMUGCHARPSTAT_BOOL"
 * "_GANGOPSPSTAT_BOOL"
 * "_BUSINESSBATPSTAT_BOOL"
 * "_ARENAWARSPSTAT_BOOL"
 * "_CASINOPSTAT_BOOL"
 * "_CASINOHSTPSTAT_BOOL"
 * "_HEIST3TATTOOSTAT_BOOL"
 * ```
 * Hash: 0xBA52FF538ED2BC71 | ApiSet: undefined
 */
export function getNgstatBoolHash(index, spStat, charStat, character, section) {
    return GetNgstatBoolHash(index, spStat, charStat, character, section);
}
/**
 * Hash: 0x792271AB35C356A4 | ApiSet: undefined
 */
export function hiredLimo(p0, p1) {
    HiredLimo(p0, p1);
}
/**
 * Hash: 0xC4BB08EE7907471E | ApiSet: undefined
 */
export function getPackedTuBoolStatKey(index, spStat, charStat, character) {
    return GetPackedTuBoolStatKey(index, spStat, charStat, character);
}
/**
 * Hash: 0x61E111E323419E07 | ApiSet: undefined
 */
export function getPackedIntStatKey(index, spStat, charStat, character) {
    return GetPackedIntStatKey(index, spStat, charStat, character);
}
/**
 * Hash: 0xD16C2AD6B8E32854 | ApiSet: undefined
 */
export function getPackedTuIntStatKey(index, spStat, charStat, character) {
    return GetPackedTuIntStatKey(index, spStat, charStat, character);
}
/**
 * Hash: 0xA9CDB1E3F0A49883 | ApiSet: undefined
 */
export function leaderboards2ReadByRow(p2, p4, p6) {
    return Leaderboards2ReadByRow(p2, p4, p6);
}
/**
 * Hash: 0x5CE587FB5A42C8C4 | ApiSet: undefined
 */
export function leaderboards2ReadByRadius(p1) {
    return Leaderboards2ReadByRadius(p1);
}
/**
 * Hash: 0xC30713A383BFBF0E | ApiSet: undefined
 */
export function leaderboards2ReadByHandle() {
    return Leaderboards2ReadByHandle();
}
/**
 * Hash: 0xF1AE5DCDBFCA2721 | ApiSet: undefined
 */
export function leaderboards2ReadByPlatform(gamerHandleCsv, platformName) {
    return Leaderboards2ReadByPlatform(gamerHandleCsv, platformName);
}
/**
 * Hash: 0xE662C8B759D08F3C | ApiSet: undefined
 */
export function leaderboards2ReadByScoreFloat(p1, p2) {
    return Leaderboards2ReadByScoreFloat(p1, p2);
}
/**
 * Hash: 0x7EEC7E4F6984A16A | ApiSet: undefined
 */
export function leaderboards2ReadByScoreInt(p1, p2) {
    return Leaderboards2ReadByScoreInt(p1, p2);
}
/**
 * Hash: 0x918B101666F9CB83 | ApiSet: undefined
 */
export function leaderboards2ReadFriendsByRow(p2, p3, p4, p5) {
    return Leaderboards2ReadFriendsByRow(p2, p3, p4, p5);
}
/**
 * Hash: 0xBA2C7DB0C129449A | ApiSet: undefined
 */
export function leaderboards2ReadByRank(p1, p2) {
    return Leaderboards2ReadByRank(p1, p2);
}
/**
 * Hash: 0xC980E62E33DF1D5C | ApiSet: undefined
 */
export function leaderboards2WriteDataForEventType() {
    return Leaderboards2WriteDataForEventType();
}
/**
 * Hash: 0xB9BB18E2C40142ED | ApiSet: undefined
 */
export function leaderboardsCacheDataRow() {
    return LeaderboardsCacheDataRow();
}
/**
 * Hash: 0xAE2206545888AE49 | ApiSet: undefined
 */
export function leaderboards2WriteData() {
    return Leaderboards2WriteData();
}
/**
 * Hash: 0xC38DC1E90D22547C | ApiSet: undefined
 */
export function leaderboards2ReadRankPrediction() {
    return Leaderboards2ReadRankPrediction();
}
/**
 * Hash: 0x9120E8DBA3D69273 | ApiSet: undefined
 */
export function leaderboardsGetCacheDataRow(p0, p1) {
    return LeaderboardsGetCacheDataRow(p0, p1);
}
/**
 * Hash: 0x428EAF89E24F6C36 | ApiSet: undefined
 */
export function leaderboardsDeaths(statName, value) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    LeaderboardsDeaths(statName, value);
}
/**
 * Hash: 0x9C51349BE6CDFE2C | ApiSet: undefined
 */
export function leaderboardsGetCacheExists(p0) {
    return LeaderboardsGetCacheExists(p0);
}
/**
 * Hash: 0xF04C1C27DA35F6C8 | ApiSet: undefined
 */
export function leaderboardsGetCacheTime(p0) {
    return LeaderboardsGetCacheTime(p0);
}
/**
 * Hash: 0x58A651CD201D89AD | ApiSet: undefined
 */
export function leaderboardsGetCacheNumberOfRows(p0) {
    return LeaderboardsGetCacheNumberOfRows(p0);
}
/**
 * Hash: 0xD4B02A6B476E1FDC | ApiSet: undefined
 */
export function leaderboardsClearCacheData() {
    LeaderboardsClearCacheData();
}
/**
 * Hash: 0xBF4FEF46DB7894D3 | ApiSet: undefined
 */
export function leaderboardsGetColumnType(p0, p1, p2) {
    return LeaderboardsGetColumnType(p0, p1, p2);
}
/**
 * Hash: 0x7CCE5C737A665701 | ApiSet: undefined
 */
export function leaderboardsReadClear(p0, p1, p2) {
    return LeaderboardsReadClear(p0, p1, p2);
}
/**
 * Hash: 0x2FB19228983E832C | ApiSet: undefined
 */
export function leaderboardsReadSuccessful(p0, p1, p2) {
    return LeaderboardsReadSuccessful(p0, p1, p2);
}
/**
 * Hash: 0xC4B5467A1886EA7E | ApiSet: undefined
 */
export function leaderboardsGetColumnId(p0, p1, p2) {
    return LeaderboardsGetColumnId(p0, p1, p2);
}
/**
 * Hash: 0x117B45156D7EFF2E | ApiSet: undefined
 */
export function leaderboardsGetNumberOfColumns(p0, p1) {
    return LeaderboardsGetNumberOfColumns(p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x0077F15613D36993 | ApiSet: undefined
 */
export function _0x0077F15613D36993(p0, p1, p2, p3) {
    Citizen.invokeNative('0x0077F15613D36993', p0, p1, p2, p3);
}
/**
 * Hash: 0xA31FD15197B192BD | ApiSet: undefined
 */
export function leaderboardsReadAnyPending() {
    return LeaderboardsReadAnyPending();
}
/**
 * Hash: 0x06EAF70AE066441E | ApiSet: undefined
 */
export function _0x06EAF70AE066441E(p0) {
    Citizen.invokeNative('0x06EAF70AE066441E', p0);
}
/**
 * Hash: 0xA34CB6E6F0DF4A0B | ApiSet: undefined
 */
export function leaderboardsReadClearAll() {
    return LeaderboardsReadClearAll();
}
/**
 * Hash: 0xAC392C8483342AC2 | ApiSet: undefined
 */
export function leaderboardsReadPending(p0, p1, p2) {
    return LeaderboardsReadPending(p0, p1, p2);
}
/**
 * Hash: 0x2E65248609523599 | ApiSet: undefined
 */
export function leaderboardsWriteAddColumnLong(p0, p1, p2) {
    LeaderboardsWriteAddColumnLong(p0, p1, p2);
}
/**
 * Hash: 0x03C2EEBB04B3FB72 | ApiSet: undefined
 */
export function _0x03C2EEBB04B3FB72(p0, p1, p2, p3, p4, p5, p6) {
    Citizen.invokeNative('0x03C2EEBB04B3FB72', p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x0BCA1D2C47B0D269 | ApiSet: undefined
 */
export function leaderboardsWriteAddColumn(p0, p1, p2) {
    LeaderboardsWriteAddColumn(p0, p1, p2);
}
/**
 * Hash: 0x015B03EE1C43E6EC | ApiSet: undefined
 */
export function _0x015B03EE1C43E6EC(p0) {
    Citizen.invokeNative('0x015B03EE1C43E6EC', p0);
}
/**
 * Hash: 0x0B565B0AAE56A0E8 | ApiSet: undefined
 */
export function _0x0B565B0AAE56A0E8(p0, p1, p2, p3, p4, p5, p6) {
    Citizen.invokeNative('0x0B565B0AAE56A0E8', p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x0D01D20616FC73FB | ApiSet: undefined
 */
export function _0x0D01D20616FC73FB(p0, p1) {
    Citizen.invokeNative('0x0D01D20616FC73FB', p0, p1);
}
/**
 * Hash: 0x0A9C7F36E5D7B683 | ApiSet: undefined
 */
export function _0x0A9C7F36E5D7B683(p0) {
    Citizen.invokeNative('0x0A9C7F36E5D7B683', p0);
}
/**
 * Hash: 0x0B8B7F74BF061C6D | ApiSet: undefined
 */
export function _0x0B8B7F74BF061C6D() {
    return Citizen.invokeNative('0x0B8B7F74BF061C6D');
}
/**
 * Hash: 0x14EDA9EE27BD1626 | ApiSet: undefined
 */
export function _0x14EDA9EE27BD1626(p0) {
    Citizen.invokeNative('0x14EDA9EE27BD1626', p0);
}
/**
 * Hash: 0x164C5FF663790845 | ApiSet: undefined
 */
export function _0x164C5FF663790845(p0) {
    Citizen.invokeNative('0x164C5FF663790845', p0);
}
/**
 * Hash: 0x14E0B2D1AD1044E0 | ApiSet: undefined
 */
export function _0x14E0B2D1AD1044E0() {
    return Citizen.invokeNative('0x14E0B2D1AD1044E0');
}
/**
 * Hash: 0x1A7CE7CD3E653485 | ApiSet: undefined
 */
export function _0x1A7CE7CD3E653485(p0) {
    Citizen.invokeNative('0x1A7CE7CD3E653485', p0);
}
/**
 * Hash: 0x1A8EA222F9C67DBB | ApiSet: undefined
 */
export function _0x1A8EA222F9C67DBB() {
    return Citizen.invokeNative('0x1A8EA222F9C67DBB');
}
/**
 * ```
 * `STATS::0x343B27E2(0);`
 * `STATS::0x343B27E2(1);`
 * `STATS::0x343B27E2(2);`
 * `STATS::0x343B27E2(3);`
 * `STATS::0x343B27E2(4);`
 * `STATS::0x343B27E2(5);`
 * `STATS::0x343B27E2(6);`
 * `STATS::0x343B27E2(7);`
 * Identical in ingamehud & maintransition.
 * ```
 * Hash: 0x26D7399B9587FE89 | ApiSet: undefined
 */
export function _0x26D7399B9587FE89(p0) {
    Citizen.invokeNative('0x26D7399B9587FE89', p0);
}
/**
 * Hash: 0x27AA1C973CACFE63 | ApiSet: undefined
 */
export function _0x27AA1C973CACFE63(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    Citizen.invokeNative('0x27AA1C973CACFE63', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * Hash: 0x282B6739644F4347 | ApiSet: undefined
 */
export function _0x282B6739644F4347(p0) {
    Citizen.invokeNative('0x282B6739644F4347', p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x2818FF6638CB09DE | ApiSet: undefined
 */
export function _0x2818FF6638CB09DE(p0) {
    Citizen.invokeNative('0x2818FF6638CB09DE', p0);
}
/**
 * Hash: 0x2CD90358F67D0AA8 | ApiSet: undefined
 */
export function _0x2CD90358F67D0AA8(p0) {
    Citizen.invokeNative('0x2CD90358F67D0AA8', p0);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x2D7A9B577E72385E | ApiSet: undefined
 */
export function _0x2D7A9B577E72385E(p0) {
    Citizen.invokeNative('0x2D7A9B577E72385E', p0);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x316DB59CD14C1774 | ApiSet: undefined
 */
export function _0x316DB59CD14C1774(p0) {
    Citizen.invokeNative('0x316DB59CD14C1774', p0);
}
/**
 * Hash: 0x28ECB8AC2F607DB2 | ApiSet: undefined
 */
export function _0x28ECB8AC2F607DB2(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0x28ECB8AC2F607DB2', p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x2FA3173480008493 | ApiSet: undefined
 */
export function _0x2FA3173480008493(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0x2FA3173480008493', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x32CAC93C9DE73D32 | ApiSet: undefined
 */
export function _0x32CAC93C9DE73D32() {
    return Citizen.invokeNative('0x32CAC93C9DE73D32');
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x2E0259BABC27A327 | ApiSet: undefined
 */
export function _0x2E0259BABC27A327(p0) {
    Citizen.invokeNative('0x2E0259BABC27A327', p0);
}
/**
 * Hash: 0x33D72899E24C3365 | ApiSet: undefined
 */
export function _0x33D72899E24C3365(p0, p1) {
    return Citizen.invokeNative('0x33D72899E24C3365', p0, p1);
}
/**
 * Hash: 0x34770B9CE0E03B91 | ApiSet: undefined
 */
export function _0x34770B9CE0E03B91(p0) {
    return Citizen.invokeNative('0x34770B9CE0E03B91', p0);
}
/**
 * Hash: 0x3DE3AA516FB126A4 | ApiSet: undefined
 */
export function _0x3DE3AA516FB126A4(p0) {
    Citizen.invokeNative('0x3DE3AA516FB126A4', p0);
}
/**
 * Hash: 0x3EBEAC6C3F81F6BD | ApiSet: undefined
 */
export function _0x3EBEAC6C3F81F6BD(p0) {
    Citizen.invokeNative('0x3EBEAC6C3F81F6BD', p0);
}
/**
 * Hash: 0x38491439B6BA7F7D | ApiSet: undefined
 */
export function _0x38491439B6BA7F7D(p0, p1) {
    return Citizen.invokeNative('0x38491439B6BA7F7D', p0, p1);
}
/**
 * ```
 * Sets profile setting 934
 * ```
 * Hash: 0x38BAAA5DD4C9D19F | ApiSet: undefined
 */
export function _0x38BAAA5DD4C9D19F(value) {
    Citizen.invokeNative('0x38BAAA5DD4C9D19F', value);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x4DC416F246A41FC8 | ApiSet: undefined
 */
export function _0x4DC416F246A41FC8(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0x4DC416F246A41FC8', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x419615486BBF1956 | ApiSet: undefined
 */
export function _0x419615486BBF1956(p0) {
    Citizen.invokeNative('0x419615486BBF1956', p0);
}
/**
 * Hash: 0x4C89FE2BDEB3F169 | ApiSet: undefined
 */
export function _0x4C89FE2BDEB3F169() {
    return Citizen.invokeNative('0x4C89FE2BDEB3F169');
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x4AFF7E02E485E92B | ApiSet: undefined
 */
export function _0x4AFF7E02E485E92B() {
    Citizen.invokeNative('0x4AFF7E02E485E92B');
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x53C31853EC9531FF | ApiSet: undefined
 */
export function _0x53C31853EC9531FF(p0) {
    Citizen.invokeNative('0x53C31853EC9531FF', p0);
}
/**
 * Hash: 0x55A8BECAF28A4EB7 | ApiSet: undefined
 */
export function _0x55A8BECAF28A4EB7() {
    return Citizen.invokeNative('0x55A8BECAF28A4EB7');
}
/**
 * ```
 * STAT_SET_*
 * ```
 * Hash: 0x5688585E6D563CD8 | ApiSet: undefined
 */
export function _0x5688585E6D563CD8(p0) {
    Citizen.invokeNative('0x5688585E6D563CD8', p0);
}
/**
 * Hash: 0x44919CC079BB60BF | ApiSet: undefined
 */
export function _0x44919CC079BB60BF(p0) {
    Citizen.invokeNative('0x44919CC079BB60BF', p0);
}
/**
 * Hash: 0x5BD5F255321C4AAF | ApiSet: undefined
 */
export function _0x5BD5F255321C4AAF(p0) {
    return Citizen.invokeNative('0x5BD5F255321C4AAF', p0);
}
/**
 * ```
 * Sets profile setting 935
 * ```
 * Hash: 0x55384438FC55AD8E | ApiSet: undefined
 */
export function _0x55384438FC55AD8E(value) {
    Citizen.invokeNative('0x55384438FC55AD8E', value);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x5BF29846C6527C54 | ApiSet: undefined
 */
export function _0x5BF29846C6527C54(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0x5BF29846C6527C54', p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x4FCDBD3F0A813C25 | ApiSet: undefined
 */
export function _0x4FCDBD3F0A813C25(p0, p1) {
    Citizen.invokeNative('0x4FCDBD3F0A813C25', p0, p1);
}
/**
 * Hash: 0x5A556B229A169402 | ApiSet: undefined
 */
export function _0x5A556B229A169402() {
    return Citizen.invokeNative('0x5A556B229A169402');
}
/**
 * Hash: 0x5FF2C33B13A02A11 | ApiSet: undefined
 */
export function _0x5FF2C33B13A02A11(p0) {
    Citizen.invokeNative('0x5FF2C33B13A02A11', p0);
}
/**
 * Hash: 0x53CAE13E9B426993 | ApiSet: undefined
 */
export function _0x53CAE13E9B426993(p0) {
    Citizen.invokeNative('0x53CAE13E9B426993', p0);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x5CDAED54B34B0ED0 | ApiSet: undefined
 */
export function _0x5CDAED54B34B0ED0(p0) {
    Citizen.invokeNative('0x5CDAED54B34B0ED0', p0);
}
/**
 * ```
 * example from completionpercentage_controller.ysc.c4
 * `if (STATS::_5EAD2BF6484852E4()) {`
 * `MISC::SET_BIT(g_17b95._f20df._ff10, 15);`
 * `STATS::_11FF1C80276097ED(0xe9ec4dd1, 200, 0);`
 * }
 * ```
 * Hash: 0x5EAD2BF6484852E4 | ApiSet: undefined
 */
export function _0x5EAD2BF6484852E4() {
    return Citizen.invokeNative('0x5EAD2BF6484852E4');
}
/**
 * Hash: 0x6551B1F7F6CD46EA | ApiSet: undefined
 */
export function _0x6551B1F7F6CD46EA(p0) {
    Citizen.invokeNative('0x6551B1F7F6CD46EA', p0);
}
/**
 * Hash: 0x60EEDC12AF66E846 | ApiSet: undefined
 */
export function _0x60EEDC12AF66E846(p0) {
    Citizen.invokeNative('0x60EEDC12AF66E846', p0);
}
/**
 * Hash: 0x629526ABA383BCAA | ApiSet: undefined
 */
export function _0x629526ABA383BCAA() {
    Citizen.invokeNative('0x629526ABA383BCAA');
}
/**
 * Hash: 0x6483C25849031C4F | ApiSet: undefined
 */
export function _0x6483C25849031C4F(p0, p1, p2) {
    return Citizen.invokeNative('0x6483C25849031C4F', p0, p1, p2);
}
/**
 * Hash: 0x6A60E43998228229 | ApiSet: undefined
 */
export function _0x6A60E43998228229(p0) {
    Citizen.invokeNative('0x6A60E43998228229', p0);
}
/**
 * Hash: 0x678F86D8FC040BDB | ApiSet: undefined
 */
export function _0x678F86D8FC040BDB(p0) {
    Citizen.invokeNative('0x678F86D8FC040BDB', p0);
}
/**
 * Hash: 0x6BC0ACD0673ACEBE | ApiSet: undefined
 */
export function _0x6BC0ACD0673ACEBE(p0) {
    return Citizen.invokeNative('0x6BC0ACD0673ACEBE', p0);
}
/**
 * Hash: 0x6E0A5253375C4584 | ApiSet: undefined
 */
export function _0x6E0A5253375C4584() {
    return Citizen.invokeNative('0x6E0A5253375C4584');
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x6A7F19756F1A9016 | ApiSet: undefined
 */
export function _0x6A7F19756F1A9016() {
    return Citizen.invokeNative('0x6A7F19756F1A9016');
}
/**
 * Hash: 0x6DEE77AFF8C21BD1 | ApiSet: undefined
 */
export function _0x6DEE77AFF8C21BD1() {
    return Citizen.invokeNative('0x6DEE77AFF8C21BD1');
}
/**
 * Hash: 0x6BCCF9948492FD85 | ApiSet: undefined
 */
export function _0x6BCCF9948492FD85(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0x6BCCF9948492FD85', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x723C1CE13FBFDB67 | ApiSet: undefined
 */
export function _0x723C1CE13FBFDB67(p0, p1) {
    Citizen.invokeNative('0x723C1CE13FBFDB67', p0, p1);
}
/**
 * Hash: 0x71B008056E5692D6 | ApiSet: undefined
 */
export function _0x71B008056E5692D6() {
    Citizen.invokeNative('0x71B008056E5692D6');
}
/**
 * Hash: 0x6F361B8889A792A3 | ApiSet: undefined
 */
export function _0x6F361B8889A792A3() {
    Citizen.invokeNative('0x6F361B8889A792A3');
}
/**
 * Hash: 0x7033EEFD9B28088E | ApiSet: undefined
 */
export function _0x7033EEFD9B28088E(p0) {
    Citizen.invokeNative('0x7033EEFD9B28088E', p0);
}
/**
 * Hash: 0x73001E34F85137F8 | ApiSet: undefined
 */
export function _0x73001E34F85137F8(p0) {
    Citizen.invokeNative('0x73001E34F85137F8', p0);
}
/**
 * ```
 * Sets profile setting 940 and 941
 * _SET_F* - _SET_G*
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x79D310A861697CC9 | ApiSet: undefined
 */
export function _0x79D310A861697CC9(profileSetting, settingValue) {
    Citizen.invokeNative('0x79D310A861697CC9', profileSetting, settingValue);
}
/**
 * Hash: 0x7B18DA61F6BAE9D5 | ApiSet: undefined
 */
export function _0x7B18DA61F6BAE9D5(p0) {
    Citizen.invokeNative('0x7B18DA61F6BAE9D5', p0);
}
/**
 * Hash: 0x7D36291161859389 | ApiSet: undefined
 */
export function _0x7D36291161859389(p0) {
    Citizen.invokeNative('0x7D36291161859389', p0);
}
/**
 * Hash: 0x7F2C4CDF2E82DF4C | ApiSet: undefined
 */
export function _0x7F2C4CDF2E82DF4C(p0) {
    return Citizen.invokeNative('0x7F2C4CDF2E82DF4C', p0);
}
/**
 * Hash: 0x7E6946F68A38B74F | ApiSet: undefined
 */
export function _0x7E6946F68A38B74F(p0) {
    return Citizen.invokeNative('0x7E6946F68A38B74F', p0);
}
/**
 * Hash: 0x7D8BA05688AD64C7 | ApiSet: undefined
 */
export function _0x7D8BA05688AD64C7(p0) {
    Citizen.invokeNative('0x7D8BA05688AD64C7', p0);
}
/**
 * ```
 * _PLAYSTATS_ROB_ARMOURD_TRUCK
 * ```
 * Hash: 0x7EEC2A316C250073 | ApiSet: undefined
 */
export function _0x7EEC2A316C250073(p0, p1, p2) {
    Citizen.invokeNative('0x7EEC2A316C250073', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x830C3A44EB3F2CF9 | ApiSet: undefined
 */
export function _0x830C3A44EB3F2CF9(p0) {
    Citizen.invokeNative('0x830C3A44EB3F2CF9', p0);
}
/**
 * Hash: 0x84A810B375E69C0E | ApiSet: undefined
 */
export function _0x84A810B375E69C0E() {
    return Citizen.invokeNative('0x84A810B375E69C0E');
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x810B5FCC52EC7FF0 | ApiSet: undefined
 */
export function _0x810B5FCC52EC7FF0(p0, p1, p2, p3) {
    Citizen.invokeNative('0x810B5FCC52EC7FF0', p0, p1, p2, p3);
}
/**
 * Hash: 0x84DFC579C2FC214C | ApiSet: undefined
 */
export function _0x84DFC579C2FC214C(p0) {
    Citizen.invokeNative('0x84DFC579C2FC214C', p0);
}
/**
 * Hash: 0x88087EE1F28024AE | ApiSet: undefined
 */
export function _0x88087EE1F28024AE(p0) {
    Citizen.invokeNative('0x88087EE1F28024AE', p0);
}
/**
 * Hash: 0x8B9CDBD6C566C38C | ApiSet: undefined
 */
export function _0x8B9CDBD6C566C38C() {
    return Citizen.invokeNative('0x8B9CDBD6C566C38C');
}
/**
 * Hash: 0x8D8ADB562F09A245 | ApiSet: undefined
 */
export function _0x8D8ADB562F09A245(p0) {
    Citizen.invokeNative('0x8D8ADB562F09A245', p0);
}
/**
 * Hash: 0x8989CBD7B4E82534 | ApiSet: undefined
 */
export function _0x8989CBD7B4E82534(p0, p1, p2, p3, p4, p5, p6) {
    Citizen.invokeNative('0x8989CBD7B4E82534', p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x930F504203F561C9 | ApiSet: undefined
 */
export function _0x930F504203F561C9(p0) {
    Citizen.invokeNative('0x930F504203F561C9', p0);
}
/**
 * Hash: 0x88578F6EC36B4A3A | ApiSet: undefined
 */
export function _0x88578F6EC36B4A3A(p0, p1) {
    return Citizen.invokeNative('0x88578F6EC36B4A3A', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x92FC0EEDFAC04A14 | ApiSet: undefined
 */
export function _0x92FC0EEDFAC04A14(p0, p1, p2, p3, p4, p5) {
    Citizen.invokeNative('0x92FC0EEDFAC04A14', p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x8EC74CEB042E7CFF | ApiSet: undefined
 */
export function _0x8EC74CEB042E7CFF(p0) {
    Citizen.invokeNative('0x8EC74CEB042E7CFF', p0);
}
/**
 * Hash: 0x98E2BC1CA26287C3 | ApiSet: undefined
 */
export function _0x98E2BC1CA26287C3() {
    Citizen.invokeNative('0x98E2BC1CA26287C3');
}
/**
 * Hash: 0x9B4BD21D69B1E609 | ApiSet: undefined
 */
export function _0x9B4BD21D69B1E609() {
    Citizen.invokeNative('0x9B4BD21D69B1E609');
}
/**
 * Hash: 0x8C9D11605E59D955 | ApiSet: undefined
 */
export function _0x8C9D11605E59D955(p0) {
    Citizen.invokeNative('0x8C9D11605E59D955', p0);
}
/**
 * Hash: 0x9A62EC95AE10E011 | ApiSet: undefined
 */
export function _0x9A62EC95AE10E011() {
    return Citizen.invokeNative('0x9A62EC95AE10E011');
}
/**
 * Hash: 0x96E6D5150DBF1C09 | ApiSet: undefined
 */
export function _0x96E6D5150DBF1C09(p0, p1, p2) {
    Citizen.invokeNative('0x96E6D5150DBF1C09', p0, p1, p2);
}
/**
 * Hash: 0xA0F93D5465B3094D | ApiSet: undefined
 */
export function _0xA0F93D5465B3094D() {
    return Citizen.invokeNative('0xA0F93D5465B3094D');
}
/**
 * Hash: 0xA3C53804BDB68ED2 | ApiSet: undefined
 */
export function _0xA3C53804BDB68ED2(p0, p1) {
    Citizen.invokeNative('0xA3C53804BDB68ED2', p0, p1);
}
/**
 * Hash: 0x9EC8858184CD253A | ApiSet: undefined
 */
export function _0x9EC8858184CD253A() {
    return Citizen.invokeNative('0x9EC8858184CD253A');
}
/**
 * Hash: 0xA761D4AC6115623D | ApiSet: undefined
 */
export function _0xA761D4AC6115623D() {
    return Citizen.invokeNative('0xA761D4AC6115623D');
}
/**
 * ```
 * `STATS::0xE3247582(0);`
 * `STATS::0xE3247582(1);`
 * `STATS::0xE3247582(2);`
 * `STATS::0xE3247582(3);`
 * `STATS::0xE3247582(4);`
 * `STATS::0xE3247582(5);`
 * `STATS::0xE3247582(6);`
 * ```
 * Hash: 0xA78B8FA58200DA56 | ApiSet: undefined
 */
export function _0xA78B8FA58200DA56(p0) {
    Citizen.invokeNative('0xA78B8FA58200DA56', p0);
}
/**
 * Hash: 0xA6F54BB2FFCA35EA | ApiSet: undefined
 */
export function _0xA6F54BB2FFCA35EA(p0) {
    Citizen.invokeNative('0xA6F54BB2FFCA35EA', p0);
}
/**
 * Hash: 0xAA525DFF66BB82F5 | ApiSet: undefined
 */
export function _0xAA525DFF66BB82F5(p0, p1, p2) {
    Citizen.invokeNative('0xAA525DFF66BB82F5', p0, p1, p2);
}
/**
 * Hash: 0xA736CF7FB7C5BFF4 | ApiSet: undefined
 */
export function _0xA736CF7FB7C5BFF4() {
    return Citizen.invokeNative('0xA736CF7FB7C5BFF4');
}
/**
 * Hash: 0xAFF47709F1D5DCCE | ApiSet: undefined
 */
export function _0xAFF47709F1D5DCCE() {
    return Citizen.invokeNative('0xAFF47709F1D5DCCE');
}
/**
 * Hash: 0xA8733668D1047B51 | ApiSet: undefined
 */
export function _0xA8733668D1047B51(p0) {
    Citizen.invokeNative('0xA8733668D1047B51', p0);
}
/**
 * ```
 * This function is hard-coded to always return 1.
 * NETWORK_IS_*
 * ```
 * Hash: 0xB3DA2606774A8E2D | ApiSet: undefined
 */
export function _0xB3DA2606774A8E2D() {
    return Citizen.invokeNative('0xB3DA2606774A8E2D');
}
/**
 * Hash: 0xBA9749CC94C1FD85 | ApiSet: undefined
 */
export function _0xBA9749CC94C1FD85() {
    return Citizen.invokeNative('0xBA9749CC94C1FD85');
}
/**
 * Hash: 0xA943FD1722E11EFD | ApiSet: undefined
 */
export function _0xA943FD1722E11EFD() {
    return Citizen.invokeNative('0xA943FD1722E11EFD');
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xB26F670685631727 | ApiSet: undefined
 */
export function _0xB26F670685631727(p0) {
    Citizen.invokeNative('0xB26F670685631727', p0);
}
/**
 * Hash: 0xBAA2F0490E146BE8 | ApiSet: undefined
 */
export function _0xBAA2F0490E146BE8(p0) {
    Citizen.invokeNative('0xBAA2F0490E146BE8', p0);
}
/**
 * Hash: 0xB1D2BB1E1631F5B1 | ApiSet: undefined
 */
export function _0xB1D2BB1E1631F5B1() {
    return Citizen.invokeNative('0xB1D2BB1E1631F5B1');
}
/**
 * Hash: 0xBF371CD2B64212FD | ApiSet: undefined
 */
export function _0xBF371CD2B64212FD(p0) {
    Citizen.invokeNative('0xBF371CD2B64212FD', p0);
}
/**
 * Hash: 0xBE3DB208333D9844 | ApiSet: undefined
 */
export function _0xBE3DB208333D9844() {
    return Citizen.invokeNative('0xBE3DB208333D9844');
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xC01D2470F22CDE5A | ApiSet: undefined
 */
export function _0xC01D2470F22CDE5A() {
    Citizen.invokeNative('0xC01D2470F22CDE5A');
}
/**
 * Hash: 0xBFAFDB5FAAA5C5AB | ApiSet: undefined
 */
export function _0xBFAFDB5FAAA5C5AB(p0) {
    Citizen.invokeNative('0xBFAFDB5FAAA5C5AB', p0);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xC03FAB2C2F92289B | ApiSet: undefined
 */
export function _0xC03FAB2C2F92289B(p0) {
    Citizen.invokeNative('0xC03FAB2C2F92289B', p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xC1E963C58664B556 | ApiSet: undefined
 */
export function _0xC1E963C58664B556(p0) {
    Citizen.invokeNative('0xC1E963C58664B556', p0);
}
/**
 * Hash: 0xBED9F5693F34ED17 | ApiSet: undefined
 */
export function _0xBED9F5693F34ED17(statName, p1) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return Citizen.invokeNative('0xBED9F5693F34ED17', statName, p1);
}
/**
 * Hash: 0xC0E0D686DDFC6EAE | ApiSet: undefined
 */
export function _0xC0E0D686DDFC6EAE() {
    return Citizen.invokeNative('0xC0E0D686DDFC6EAE');
}
/**
 * Sets profile setting 939
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xC67E2DA1CBE759E2 | ApiSet: undefined
 */
export function _0xC67E2DA1CBE759E2() {
    Citizen.invokeNative('0xC67E2DA1CBE759E2');
}
/**
 * Hash: 0xC141B8917E0017EC | ApiSet: undefined
 */
export function _0xC141B8917E0017EC() {
    Citizen.invokeNative('0xC141B8917E0017EC');
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xC14BD9F5337219B2 | ApiSet: undefined
 */
export function _0xC14BD9F5337219B2(p0) {
    Citizen.invokeNative('0xC14BD9F5337219B2', p0);
}
/**
 * Hash: 0xC6E0E2616A7576BB | ApiSet: undefined
 */
export function _0xC6E0E2616A7576BB() {
    return Citizen.invokeNative('0xC6E0E2616A7576BB');
}
/**
 * Hash: 0xD1C9B92BDD3F151D | ApiSet: undefined
 */
export function _0xD1C9B92BDD3F151D(p0, p1, p2) {
    Citizen.invokeNative('0xD1C9B92BDD3F151D', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xD4367D310F079DB0 | ApiSet: undefined
 */
export function _0xD4367D310F079DB0(p0, p1, p2, p3) {
    Citizen.invokeNative('0xD4367D310F079DB0', p0, p1, p2, p3);
}
/**
 * Hash: 0xCC25A4553DFBF9EA | ApiSet: undefined
 */
export function _0xCC25A4553DFBF9EA(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0xCC25A4553DFBF9EA', p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xDAF80797FC534BEC | ApiSet: undefined
 */
export function _0xDAF80797FC534BEC(p0) {
    Citizen.invokeNative('0xDAF80797FC534BEC', p0);
}
/**
 * Hash: 0xC847B43F369AC0B5 | ApiSet: undefined
 */
export function _0xC847B43F369AC0B5() {
    Citizen.invokeNative('0xC847B43F369AC0B5');
}
/**
 * Hash: 0xD558BEC0BBA7E8D2 | ApiSet: undefined
 */
export function _0xD558BEC0BBA7E8D2(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0xD558BEC0BBA7E8D2', p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xDFBD93BF2943E29B | ApiSet: undefined
 */
export function _0xDFBD93BF2943E29B(p0) {
    Citizen.invokeNative('0xDFBD93BF2943E29B', p0);
}
/**
 * Hash: 0xE496A53BA5F50A56 | ApiSet: undefined
 */
export function _0xE496A53BA5F50A56(p0) {
    return Citizen.invokeNative('0xE496A53BA5F50A56', p0);
}
/**
 * Hash: 0xD1A1EE3B4FA8E760 | ApiSet: undefined
 */
export function _0xD1A1EE3B4FA8E760(p0) {
    Citizen.invokeNative('0xD1A1EE3B4FA8E760', p0);
}
/**
 * Hash: 0xDEAAF77EB3687E97 | ApiSet: undefined
 */
export function _0xDEAAF77EB3687E97(p0) {
    return Citizen.invokeNative('0xDEAAF77EB3687E97', p0);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xD6CA58B3B53A0F22 | ApiSet: undefined
 */
export function _0xD6CA58B3B53A0F22(p0) {
    Citizen.invokeNative('0xD6CA58B3B53A0F22', p0);
}
/**
 * Hash: 0xE8853FBCE7D8D0D6 | ApiSet: undefined
 */
export function _0xE8853FBCE7D8D0D6() {
    return Citizen.invokeNative('0xE8853FBCE7D8D0D6');
}
/**
 * ```
 * STAT_LOAD_*
 * ```
 * Hash: 0xECB41AC6AB754401 | ApiSet: undefined
 */
export function _0xECB41AC6AB754401() {
    return Citizen.invokeNative('0xECB41AC6AB754401');
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xDFCDB14317A9B361 | ApiSet: undefined
 */
export function _0xDFCDB14317A9B361(p0) {
    Citizen.invokeNative('0xDFCDB14317A9B361', p0);
}
/**
 * Hash: 0xE3261D791EB44ACB | ApiSet: undefined
 */
export function _0xE3261D791EB44ACB(p0) {
    Citizen.invokeNative('0xE3261D791EB44ACB', p0);
}
/**
 * Hash: 0xF11F01D98113536A | ApiSet: undefined
 */
export function _0xF11F01D98113536A() {
    return Citizen.invokeNative('0xF11F01D98113536A');
}
/**
 * Hash: 0xF06A6F41CB445443 | ApiSet: undefined
 */
export function _0xF06A6F41CB445443(p0) {
    Citizen.invokeNative('0xF06A6F41CB445443', p0);
}
/**
 * Hash: 0xEDBF6C9B0D2C65C8 | ApiSet: undefined
 */
export function _0xEDBF6C9B0D2C65C8(p0) {
    Citizen.invokeNative('0xEDBF6C9B0D2C65C8', p0);
}
/**
 * Hash: 0xF534D94DFA2EAD26 | ApiSet: undefined
 */
export function _0xF534D94DFA2EAD26(p0, p1, p2, p3, p4) {
    Citizen.invokeNative('0xF534D94DFA2EAD26', p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xF9096193DF1F99D4 | ApiSet: undefined
 */
export function _0xF9096193DF1F99D4(p0) {
    Citizen.invokeNative('0xF9096193DF1F99D4', p0);
}
/**
 * Hash: 0xCEA553E35C2246E1 | ApiSet: undefined
 */
export function orderedBossVehicle(p0, p1, vehicleHash) {
    if (typeof vehicleHash === 'string')
        vehicleHash = this.getHashKey(vehicleHash);
    OrderedBossVehicle(p0, p1, vehicleHash);
}
/**
 * Hash: 0x79AB33F0FBFAC40C | ApiSet: undefined
 */
export function playstatsAcquiredHiddenPackage(p0) {
    PlaystatsAcquiredHiddenPackage(p0);
}
/**
 * Hash: 0xF8C54A461C3E11DC | ApiSet: undefined
 */
export function _0xF8C54A461C3E11DC() {
    return Citizen.invokeNative('0xF8C54A461C3E11DC');
}
/**
 * ```
 * Sets profile setting 933
 * ```
 * Hash: 0xF1A1803D3476F215 | ApiSet: undefined
 */
export function _0xF1A1803D3476F215(value) {
    Citizen.invokeNative('0xF1A1803D3476F215', value);
}
/**
 * Hash: 0xFCC228E07217FCAC | ApiSet: undefined
 */
export function _0xFCC228E07217FCAC(p0) {
    Citizen.invokeNative('0xFCC228E07217FCAC', p0);
}
/**
 * Hash: 0xF9F2922717B819EC | ApiSet: undefined
 */
export function _0xF9F2922717B819EC() {
    return Citizen.invokeNative('0xF9F2922717B819EC');
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x6F4F599753F8200A | ApiSet: undefined
 */
export function playstatsArenaWarSpectator(p0, p1, p2, p3, p4) {
    PlaystatsArenaWarSpectator(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xA071E0ED98F91286 | ApiSet: undefined
 */
export function playstatsActivityDone(p0, p1) {
    PlaystatsActivityDone(p0, p1);
}
/**
 * Hash: 0x46F917F6B4128FE4 | ApiSet: undefined
 */
export function playstatsAwardXp(amount, type, category) {
    if (typeof type === 'string')
        type = this.getHashKey(type);
    if (typeof category === 'string')
        category = this.getHashKey(category);
    PlaystatsAwardXp(amount, type, category);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x533A7D1EA58DF958 | ApiSet: undefined
 */
export function playstatsArcadegame(p0, p1, p2, p3, p4, p5) {
    PlaystatsArcadegame(p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xB479D9F0D48A1BC5 | ApiSet: undefined
 */
export function playstatsArenaWarsEnded() {
    return PlaystatsArenaWarsEnded();
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x1187CB58D7F3BED7 | ApiSet: undefined
 */
export function playstatsCarclubChallenge(p0, p1, p2, p3) {
    PlaystatsCarclubChallenge(p0, p1, p2, p3);
}
/**
 * Hash: 0x47B32F5611E6E483 | ApiSet: undefined
 */
export function playstatsAwardBadsport(id) {
    PlaystatsAwardBadsport(id);
}
/**
 * Hash: 0xD6781E42755531F7 | ApiSet: undefined
 */
export function playstatsBuyContraband() {
    return PlaystatsBuyContraband();
}
/**
 * Hash: 0x5009DFD741329729 | ApiSet: undefined
 */
export function playstatsBackgroundScriptAction(action, value) {
    PlaystatsBackgroundScriptAction(action, value);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xD5451C7BF151EB6F | ApiSet: undefined
 */
export function playstatsCasinoBlackjackLight(p0) {
    PlaystatsCasinoBlackjackLight(p0);
}
/**
 * Hash: 0x516FC96EB88EEFE5 | ApiSet: undefined
 */
export function playstatsBanAlert(p0) {
    PlaystatsBanAlert(p0);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x69C922B677621428 | ApiSet: undefined
 */
export function playstatsCarclubPrize(p0, p1) {
    PlaystatsCarclubPrize(p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xFF14D6FEEC507BBE | ApiSet: undefined
 */
export function playstatsCarclubPoints(p0) {
    PlaystatsCarclubPoints(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x3EAE97309727E7AD | ApiSet: undefined
 */
export function playstatsCasinoBlackjack(p0) {
    PlaystatsCasinoBlackjack(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x23A3CBCD50D54E47 | ApiSet: undefined
 */
export function playstatsCasinoInsidetrackLight(p0) {
    PlaystatsCasinoInsidetrackLight(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x1A0D4A6C336B7BC5 | ApiSet: undefined
 */
export function playstatsCasinoMissionEnded() {
    return PlaystatsCasinoMissionEnded();
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x0999F3F090EC5012 | ApiSet: undefined
 */
export function playstatsCasinoChip(p0) {
    PlaystatsCasinoChip(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x95101C443A84E7F1 | ApiSet: undefined
 */
export function playstatsCasinoRoulette(p0) {
    PlaystatsCasinoRoulette(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xE60054A0FAE8227F | ApiSet: undefined
 */
export function playstatsCasinoSlotmachineLight(p0) {
    PlaystatsCasinoSlotmachineLight(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x049F059625058A86 | ApiSet: undefined
 */
export function playstatsCasinoInsidetrack(p0) {
    PlaystatsCasinoInsidetrack(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x0C432C1435F5E4FA | ApiSet: undefined
 */
export function playstatsCasinoLuckyseven(p0) {
    PlaystatsCasinoLuckyseven(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xFCCCAC2BD3C1F180 | ApiSet: undefined
 */
export function playstatsCasinoStoryMissionEnded(p0, p1) {
    PlaystatsCasinoStoryMissionEnded(p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xF740FB339D471C35 | ApiSet: undefined
 */
export function playstatsCasinoThreecardpoker(p0) {
    PlaystatsCasinoThreecardpoker(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xEF5EC67D392B830A | ApiSet: undefined
 */
export function playstatsCasinoSlotmachine(p0) {
    PlaystatsCasinoSlotmachine(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x6572ABA3DE1197FC | ApiSet: undefined
 */
export function playstatsCasinoRouletteLight(p0) {
    PlaystatsCasinoRouletteLight(p0);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xC9001364B4388F22 | ApiSet: undefined
 */
export function playstatsCasinoThreecardpokerLight(p0) {
    PlaystatsCasinoThreecardpokerLight(p0);
}
/**
 * Hash: 0x34B973047A2268B9 | ApiSet: undefined
 */
export function playstatsClothChange(p0, p1, p2, p3, p4) {
    PlaystatsClothChange(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x0A50D2604E05CB94 | ApiSet: undefined
 */
export function playstatsChangeMcEmblem(p0, p1, p2, p3, p4) {
    PlaystatsChangeMcEmblem(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0xCD0A8A9338681CF2 | ApiSet: undefined
 */
export function playstatsCollectible(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    PlaystatsCollectible(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * Hash: 0x6058665D72302D3F | ApiSet: undefined
 */
export function playstatsCheatApplied(cheat) {
    PlaystatsCheatApplied(cheat);
}
/**
 * Hash: 0xAFC7E5E075A96F46 | ApiSet: undefined
 */
export function playstatsCrateCreated(p0, p1, p2) {
    PlaystatsCrateCreated(p0, p1, p2);
}
/**
 * Hash: 0xB7257BA2550EA10A | ApiSet: undefined
 */
export function playstatsCopyRankIntoNewSlot(p0, p1, p2, p3, p4, p5, p6) {
    PlaystatsCopyRankIntoNewSlot(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * ```
 * NativeDB Added Parameter 7: Any p6
 * NativeDB Added Parameter 8: Any p7
 * ```
 * Hash: 0x1CAE5D2E3F9A07F0 | ApiSet: undefined
 */
export function playstatsCrateDropMissionDone(p0, p1, p2, p3, p4, p5) {
    PlaystatsCrateDropMissionDone(p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x848B66100EE33B05 | ApiSet: undefined
 */
export function playstatsDupeDetection() {
    return PlaystatsDupeDetection();
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x66C7BB2416ED3FCE | ApiSet: undefined
 */
export function playstatsDroneUsage(p0, p1, p2) {
    PlaystatsDroneUsage(p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x0BC254FF3A911501 | ApiSet: undefined
 */
export function playstatsDarMissionEnd() {
    return PlaystatsDarMissionEnd();
}
/**
 * Hash: 0x2605663BD4F23B5D | ApiSet: undefined
 */
export function playstatsDefendContraband() {
    return PlaystatsDefendContraband();
}
/**
 * Hash: 0x501478855A6074CE | ApiSet: undefined
 */
export function playstatsEarnedMcPoints(p0, p1, p2, p3, p4, p5) {
    PlaystatsEarnedMcPoints(p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x878FF156D36E9956 | ApiSet: undefined
 */
export function playstatsEnterSessionPack() {
    return PlaystatsEnterSessionPack();
}
/**
 * Hash: 0x46326E13DA4E0546 | ApiSet: undefined
 */
export function playstatsDirectorMode() {
    return PlaystatsDirectorMode();
}
/**
 * Hash: 0x0F71DE29AB2258F1 | ApiSet: undefined
 */
export function playstatsFriendActivity(p0, p1) {
    PlaystatsFriendActivity(p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xFA5B74BAB8A7EF99 | ApiSet: undefined
 */
export function playstatsExtraEvent(p0) {
    PlaystatsExtraEvent(p0);
}
/**
 * Hash: 0x0EACDF8487D5155A | ApiSet: undefined
 */
export function playstatsGunrunMissionEnded() {
    return PlaystatsGunrunMissionEnded();
}
/**
 * Hash: 0xCB00196B31C39EB1 | ApiSet: undefined
 */
export function playstatsHoldUpMissionDone(p0, p1, p2, p3) {
    PlaystatsHoldUpMissionDone(p0, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x1E1497D0D2108115 | ApiSet: undefined
 */
export function playstatsH2InstanceEnd(p1, p2, p3) {
    return PlaystatsH2InstanceEnd(p1, p2, p3);
}
/**
 * ```
 * longest time being ilde?
 * ```
 * Hash: 0x5DA3A8DE8CB6226F | ApiSet: undefined
 */
export function playstatsIdleKick(time) {
    PlaystatsIdleKick(time);
}
/**
 * Hash: 0xF5BB8DAC426A52C0 | ApiSet: undefined
 */
export function playstatsJobBend() {
    return PlaystatsJobBend();
}
/**
 * Hash: 0x2B69F5074C894811 | ApiSet: undefined
 */
export function playstatsImportExportMissionDone(p0, p1, p2, p3) {
    PlaystatsImportExportMissionDone(p0, p1, p2, p3);
}
/**
 * Hash: 0xC5BE134EC7BA96A0 | ApiSet: undefined
 */
export function playstatsLeaveJobChain(p0, p1, p2, p3, p4) {
    PlaystatsLeaveJobChain(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Removed Parameter 4: Any p3
 * NativeDB Removed Parameter 5: Any p4
 * NativeDB Removed Parameter 6: Any p5
 * NativeDB Removed Parameter 7: Any p6
 * ```
 * Hash: 0xBC80E22DED931E3D | ApiSet: undefined
 */
export function playstatsMatchStarted(p0, p1, p2, p3, p4, p5, p6) {
    PlaystatsMatchStarted(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xD8AFB345A9C5CCBB | ApiSet: undefined
 */
export function playstatsH2FmprepEnd() {
    return PlaystatsH2FmprepEnd();
}
/**
 * Hash: 0xF4FF020A08BC8863 | ApiSet: undefined
 */
export function playstatsHeistSaveCheat(hash, p1) {
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    PlaystatsHeistSaveCheat(hash, p1);
}
/**
 * Hash: 0xC900596A63978C1D | ApiSet: undefined
 */
export function playstatsMissionCheckpoint(p1, p2, p3) {
    return PlaystatsMissionCheckpoint(p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0x887DAD63CF5B7908 | ApiSet: undefined
 */
export function playstatsInventory(p0) {
    PlaystatsInventory(p0);
}
/**
 * Hash: 0x7C4BB33A8CED7324 | ApiSet: undefined
 */
export function playstatsMissionOver(p1, p2, p3, p4, p5) {
    return PlaystatsMissionOver(p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x9572BD4DD6B72122 | ApiSet: undefined
 */
export function playstatsPegasaircraft(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    PlaystatsPegasaircraft(modelHash);
}
/**
 * Hash: 0xC19A2925C34D2231 | ApiSet: undefined
 */
export function playstatsMissionStarted(p1, p2, p3) {
    return PlaystatsMissionStarted(p1, p2, p3);
}
/**
 * Hash: 0x9C375C315099DDE4 | ApiSet: undefined
 */
export function playstatsRaceCheckpoint(p0, p1, p2, p3, p4) {
    PlaystatsRaceCheckpoint(p0, p1, p2, p3, p4);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0x69DEA3E9DB727B4C | ApiSet: undefined
 */
export function playstatsOddjobDone(p0, p1, p2) {
    PlaystatsOddjobDone(p0, p1, p2);
}
/**
 * Hash: 0x93054C88E6AA7C44 | ApiSet: undefined
 */
export function playstatsNpcInvite() {
    return PlaystatsNpcInvite();
}
/**
 * ```
 * NativeDB Introduced: v1734
 * ```
 * Hash: 0x35EEC6C2BC821A71 | ApiSet: undefined
 */
export function playstatsPassiveMode(p0, p1, p2, p3) {
    PlaystatsPassiveMode(p0, p1, p2, p3);
}
/**
 * Hash: 0x203B381133817079 | ApiSet: undefined
 */
export function playstatsPiMenuHideSettings() {
    return PlaystatsPiMenuHideSettings();
}
/**
 * Hash: 0xBA739D6D5A05D6E7 | ApiSet: undefined
 */
export function playstatsPropChange(p0, p1, p2, p3) {
    PlaystatsPropChange(p0, p1, p2, p3);
}
/**
 * Hash: 0x90D0622866E80445 | ApiSet: undefined
 */
export function playstatsQuickfixTool(element, item) {
    PlaystatsQuickfixTool(element, item);
}
/**
 * ```
 * NativeDB Removed Parameter 5: Any p4
 * NativeDB Removed Parameter 6: Any p5
 * NativeDB Removed Parameter 7: Any p6
 * NativeDB Removed Parameter 8: Any p7
 * NativeDB Removed Parameter 9: Any p8
 * NativeDB Removed Parameter 10: Any p9
 * ```
 * Hash: 0xADDD1C754E2E2914 | ApiSet: undefined
 */
export function playstatsRaceToPointMissionDone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    PlaystatsRaceToPointMissionDone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * Hash: 0x04D90BA8207ADA2D | ApiSet: undefined
 */
export function playstatsRecoverContraband() {
    return PlaystatsRecoverContraband();
}
/**
 * Hash: 0x71862B1D855F32E1 | ApiSet: undefined
 */
export function playstatsRandomMissionDone(name, p1, p2, p3) {
    PlaystatsRandomMissionDone(name, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x1A67DFBF1F5C3835 | ApiSet: undefined
 */
export function playstatsRobberyPrep(p0) {
    PlaystatsRobberyPrep(p0);
}
/**
 * Hash: 0xC7F2DE41D102BFB4 | ApiSet: undefined
 */
export function playstatsRankUp(rank) {
    PlaystatsRankUp(rank);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xBBA55BE9AAAABF44 | ApiSet: undefined
 */
export function playstatsRobberyFinale(p0) {
    PlaystatsRobberyFinale(p0);
}
/**
 * Hash: 0x121FB4DDDC2D5291 | ApiSet: undefined
 */
export function playstatsRosBet(amount, act, player, cm) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    PlaystatsRosBet(amount, act, _player, cm);
}
/**
 * Hash: 0xC729991A9065376E | ApiSet: undefined
 */
export function playstatsSellContraband() {
    return PlaystatsSellContraband();
}
/**
 * Sets a byte that is then used in session_host and session_join metrics when hosting or joining a session
 * Hash: 0xD1032E482629049E | ApiSet: undefined
 */
export function playstatsSetJoinType(joinType) {
    PlaystatsSetJoinType(joinType);
}
/**
 * Hash: 0xBE509B0A3693DE8B | ApiSet: undefined
 */
export function playstatsSpentPiCustomLoadout(amount) {
    PlaystatsSpentPiCustomLoadout(amount);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x6731DE84A38BFAD0 | ApiSet: undefined
 */
export function playstatsSpectatorWheelSpin(p0, p1, p2, p3) {
    PlaystatsSpectatorWheelSpin(p0, p1, p2, p3);
}
/**
 * Hash: 0x176852ACAAC173D1 | ApiSet: undefined
 */
export function playstatsShopItem(p0, p1, p2, p3, p4) {
    PlaystatsShopItem(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x320C35147D5B5DDD | ApiSet: undefined
 */
export function playstatsSmugMissionEnded() {
    return PlaystatsSmugMissionEnded();
}
/**
 * ```
 * PLAYSTATS_START_INVITE_DESPAWNING?
 * ```
 * Hash: 0x098760C7461724CD | ApiSet: undefined
 */
export function playstatsStartOfflineMode() {
    PlaystatsStartOfflineMode();
}
/**
 * Allows stunts to be triggered and sent as a `CEventNetworkStuntPerformed` event.
 * Event types are shown below:
 * ```cpp
 * enum eTrackedStuntType
 * {
 * ST_FRONTFLIP = 0,
 * ST_BACKFLIP = 1,
 * ST_SPIN = 2,
 * ST_WHEELIE = 3,
 * ST_STOPPIE = 4,
 * ST_BOWLING_PIN = 5,
 * ST_FOOTBALL = 6,
 * ST_ROLL = 7
 * };
 * ```
 * Hash: 0x928DBFB892638EF3 | ApiSet: undefined
 */
export function playstatsStartTrackingStunts() {
    PlaystatsStartTrackingStunts();
}
/**
 * Disallows CEventNetworkStuntPerformed to be triggered (Resets [`PLAYSTATS_START_TRACKING_STUNTS`](#\_0x928DBFB892638EF3)).
 * Hash: 0x8A800DACCC0DA55D | ApiSet: undefined
 */
export function playstatsStopTrackingStunts() {
    PlaystatsStopTrackingStunts();
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x35E39E5570358630 | ApiSet: undefined
 */
export function playstatsStoneHatchetEnd() {
    return PlaystatsStoneHatchetEnd();
}
/**
 * Hash: 0xE95C8A1875A02CA4 | ApiSet: undefined
 */
export function playstatsWeaponModeChange(weaponHash, componentHashTo, componentHashFrom) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof componentHashTo === 'string')
        componentHashTo = this.getHashKey(componentHashTo);
    if (typeof componentHashFrom === 'string')
        componentHashFrom = this.getHashKey(componentHashFrom);
    PlaystatsWeaponModeChange(weaponHash, componentHashTo, componentHashFrom);
}
/**
 * Hash: 0xDDF24D535060F811 | ApiSet: undefined
 */
export function playstatsWebsiteVisited(scaleformHash, p1) {
    if (typeof scaleformHash === 'string')
        scaleformHash = this.getHashKey(scaleformHash);
    PlaystatsWebsiteVisited(scaleformHash, p1);
}
/**
 * ```
 * Sets profile setting 866
 * SET_*
 * ```
 * Hash: 0xDAC073C7901F9E15 | ApiSet: undefined
 */
export function setHasContentUnlocksFlags(value) {
    SetHasContentUnlocksFlags(value);
}
/**
 * Hash: 0x11FF1C80276097ED | ApiSet: undefined
 */
export function presenceEventUpdatestatInt(statHash, value, p2) {
    if (typeof statHash === 'string')
        statHash = this.getHashKey(statHash);
    PresenceEventUpdatestatInt(statHash, value, p2);
}
/**
 * ```
 * Sets profile setting 501
 * ```
 * Hash: 0xF6792800AC95350D | ApiSet: undefined
 */
export function setSaveMigrationTransactionId(transactionId) {
    SetSaveMigrationTransactionId(transactionId);
}
/**
 * ```
 * Example:
 * for (v_2 = 0; v_2 <= 4; v_2 += 1) {
 * `STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);`
 * }
 * ```
 * Hash: 0xEB0A72181D4AA4AD | ApiSet: undefined
 */
export function statClearSlotForReload(statSlot) {
    return StatClearSlotForReload(statSlot);
}
/**
 * Hash: 0x11B5E6D2AE73F48E | ApiSet: undefined
 */
export function statGetBool(statHash, p2) {
    if (typeof statHash === 'string')
        statHash = this.getHashKey(statHash);
    return StatGetBool(statHash, p2);
}
/**
 * Hash: 0x30A6614C1F7799B8 | ApiSet: undefined
 */
export function presenceEventUpdatestatFloat(statHash, value, p2) {
    if (typeof statHash === 'string')
        statHash = this.getHashKey(statHash);
    PresenceEventUpdatestatFloat(statHash, value, p2);
}
/**
 * ```
 * p2 - Default value? Seems to be -1 most of the time.
 * ```
 * Hash: 0x10FE3F1B79F9B071 | ApiSet: undefined
 */
export function statGetBoolMasked(statName, mask, p2) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatGetBoolMasked(statName, mask, p2);
}
/**
 * Hash: 0xB475F27C6A994D65 | ApiSet: undefined
 */
export function setProfileSettingPrologueComplete() {
    SetProfileSettingPrologueComplete();
}
/**
 * Hash: 0xD7AE6C9C9C6AC54C | ApiSet: undefined
 */
export function statGetFloat(statHash, p2) {
    if (typeof statHash === 'string')
        statHash = this.getHashKey(statHash);
    return StatGetFloat(statHash, p2);
}
/**
 * Hash: 0x5473D4195058B2E4 | ApiSet: undefined
 */
export function statGetLicensePlate(statName) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatGetLicensePlate(statName);
}
/**
 * Hash: 0x49A49BED12794D70 | ApiSet: undefined
 */
export function statDeleteSlot(p0) {
    return StatDeleteSlot(p0);
}
/**
 * Hash: 0x7583B4BE4C5A41B5 | ApiSet: undefined
 */
export function statGetNumberOfMinutes(statName) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatGetNumberOfMinutes(statName);
}
/**
 * Hash: 0x8B0FACEFC36C824B | ApiSet: undefined
 */
export function statGetDate(statHash, p2, p3) {
    if (typeof statHash === 'string')
        statHash = this.getHashKey(statHash);
    return StatGetDate(statHash, p2, p3);
}
/**
 * ```
 * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_BOOL_MASKED"?
 * ```
 * Hash: 0xF4D8E7AC2A27758C | ApiSet: undefined
 */
export function statGetPackedBoolMask(p0) {
    return StatGetPackedBoolMask(p0);
}
/**
 * ```
 * p2 appears to always be -1
 * ```
 * Hash: 0x767FBC2AC802EF3D | ApiSet: undefined
 */
export function statGetInt(statHash, p2) {
    if (typeof statHash === 'string')
        statHash = this.getHashKey(statHash);
    return StatGetInt(statHash, p2);
}
/**
 * Hash: 0x567384DFA67029E6 | ApiSet: undefined
 */
export function statGetCancelSaveMigrationStatus() {
    return StatGetCancelSaveMigrationStatus();
}
/**
 * Hash: 0xF2D4B2FE415AAFC3 | ApiSet: undefined
 */
export function statGetNumberOfHours(statName) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatGetNumberOfHours(statName);
}
/**
 * Hash: 0xE0E854F5280FB769 | ApiSet: undefined
 */
export function statGetNumberOfDays(statName) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatGetNumberOfDays(statName);
}
/**
 * Hash: 0x655185A06D9EEAAB | ApiSet: undefined
 */
export function statGetMaskedInt(p0, p2, p3, p4) {
    return StatGetMaskedInt(p0, p2, p3, p4);
}
/**
 * Hash: 0x2CE056FF3723F00B | ApiSet: undefined
 */
export function statGetNumberOfSeconds(statName) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatGetNumberOfSeconds(statName);
}
/**
 * ```
 * Needs more research. Seems to return "STAT_UNKNOWN" if no such user id exists.
 * ```
 * Hash: 0x2365C388E393BBE2 | ApiSet: undefined
 */
export function statGetUserId(p0) {
    return StatGetUserId(p0);
}
/**
 * Hash: 0xA1750FFAFA181661 | ApiSet: undefined
 */
export function statLoadPending(p0) {
    return StatLoadPending(p0);
}
/**
 * ```
 * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
 * ```
 * Hash: 0x94F12ABF9C79E339 | ApiSet: undefined
 */
export function statGetPackedIntMask(p0) {
    return StatGetPackedIntMask(p0);
}
/**
 * Hash: 0xCE5AA445ABA8DEE0 | ApiSet: undefined
 */
export function statGetSaveMigrationConsumeContentUnlockStatus() {
    return StatGetSaveMigrationConsumeContentUnlockStatus();
}
/**
 * Hash: 0x350F82CCB186AA1B | ApiSet: undefined
 */
export function statGetPos(p0, p4) {
    return StatGetPos(p0, p4);
}
/**
 * Hash: 0x886913BBEACA68C1 | ApiSet: undefined
 */
export function statGetSaveMigrationStatus() {
    return StatGetSaveMigrationStatus();
}
/**
 * Hash: 0xA651443F437B1CE6 | ApiSet: undefined
 */
export function statLoad(p0) {
    return StatLoad(p0);
}
/**
 * ```
 * p1 is always -1 in the script files
 * ```
 * Hash: 0xE50384ACC2C3DB74 | ApiSet: undefined
 */
export function statGetString(statHash, p1) {
    if (typeof statHash === 'string')
        statHash = this.getHashKey(statHash);
    return StatGetString(statHash, p1);
}
/**
 * Hash: 0x9B5A68C6489E9909 | ApiSet: undefined
 */
export function statIncrement(statName, value) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    StatIncrement(statName, value);
}
/**
 * ```
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0xE07BCA305B82D2FD | ApiSet: undefined
 */
export function statSave(p0, p1, p2) {
    return StatSave(p0, p1, p2);
}
/**
 * ```
 * platformName must be one of the following: ps3, xbox360, ps4, xboxone
 * ```
 * Hash: 0xA5C80D8E768A9E66 | ApiSet: undefined
 */
export function statMigrateSave(platformName) {
    return StatMigrateSave(platformName);
}
/**
 * Hash: 0xF434A10BA01C37D0 | ApiSet: undefined
 */
export function statSetBlockSaves(toggle) {
    StatSetBlockSaves(toggle);
}
/**
 * Hash: 0x3270F67EED31FBC1 | ApiSet: undefined
 */
export function statSaveMigrationConsumeContentUnlock(contentId, srcPlatform, srcGamerHandle) {
    if (typeof contentId === 'string')
        contentId = this.getHashKey(contentId);
    return StatSaveMigrationConsumeContentUnlock(contentId, srcPlatform, srcGamerHandle);
}
/**
 * Hash: 0x4FEF53183C3C6414 | ApiSet: undefined
 */
export function statSaveMigrationCancel() {
    return StatSaveMigrationCancel();
}
/**
 * Hash: 0xC70DDCE56D0D3A99 | ApiSet: undefined
 */
export function statSaveMigrationStatusStart() {
    return StatSaveMigrationStatusStart();
}
/**
 * Hash: 0xBBB6AD006F1BBEA3 | ApiSet: undefined
 */
export function statSavePendingOrRequested() {
    return StatSavePendingOrRequested();
}
/**
 * Hash: 0x047CBED6F6F8B63C | ApiSet: undefined
 */
export function statSetCheatIsActive() {
    StatSetCheatIsActive();
}
/**
 * Hash: 0x7D3A583856F2C5AC | ApiSet: undefined
 */
export function statSavePending() {
    return StatSavePending();
}
/**
 * ```
 * Example:
 * `STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);`
 * ```
 * Hash: 0x4B33C4243DE0C432 | ApiSet: undefined
 */
export function statSetBool(statName, value, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetBool(statName, value, save);
}
/**
 * Hash: 0x5BC62EC1937B9E5B | ApiSet: undefined
 */
export function statSetBoolMasked(statName, value, mask, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetBoolMasked(statName, value, mask, save);
}
/**
 * ```
 * p1 always true.
 * ```
 * Hash: 0xC2F84B7F9C4D0C61 | ApiSet: undefined
 */
export function statSetCurrentPosixTime(statName, p1) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetCurrentPosixTime(statName, p1);
}
/**
 * ```
 * Example:
 * `STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);`
 * ```
 * Hash: 0x4851997F37FE9B3C | ApiSet: undefined
 */
export function statSetFloat(statName, value, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetFloat(statName, value, save);
}
/**
 * ```
 * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
 * The structure looks like this:
 * int year
 * int month
 * int day
 * int hour
 * int minute
 * int second
 * int millisecond
 * `The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.`
 * ```
 * Hash: 0x2C29BFB64F4FCBE4 | ApiSet: undefined
 */
export function statSetDate(statName, numFields, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetDate(statName, numFields, save);
}
/**
 * Hash: 0x69FF13266D7296DA | ApiSet: undefined
 */
export function statSetLicensePlate(statName, str) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetLicensePlate(statName, str);
}
/**
 * ```
 * The following values have been found in the decompiled scripts:
 * "RC_ABI1"
 * "RC_ABI2"
 * "RC_BA1"
 * "RC_BA2"
 * "RC_BA3"
 * "RC_BA3A"
 * "RC_BA3C"
 * "RC_BA4"
 * "RC_DRE1"
 * "RC_EPS1"
 * "RC_EPS2"
 * "RC_EPS3"
 * "RC_EPS4"
 * "RC_EPS5"
 * "RC_EPS6"
 * "RC_EPS7"
 * "RC_EPS8"
 * "RC_EXT1"
 * "RC_EXT2"
 * "RC_EXT3"
 * "RC_EXT4"
 * "RC_FAN1"
 * "RC_FAN2"
 * "RC_FAN3"
 * "RC_HAO1"
 * "RC_HUN1"
 * "RC_HUN2"
 * "RC_JOS1"
 * "RC_JOS2"
 * "RC_JOS3"
 * "RC_JOS4"
 * "RC_MAU1"
 * "RC_MIN1"
 * "RC_MIN2"
 * "RC_MIN3"
 * "RC_MRS1"
 * "RC_MRS2"
 * "RC_NI1"
 * "RC_NI1A"
 * "RC_NI1B"
 * "RC_NI1C"
 * "RC_NI1D"
 * "RC_NI2"
 * "RC_NI3"
 * "RC_OME1"
 * "RC_OME2"
 * "RC_PA1"
 * "RC_PA2"
 * "RC_PA3"
 * "RC_PA3A"
 * "RC_PA3B"
 * "RC_PA4"
 * "RC_RAM1"
 * "RC_RAM2"
 * "RC_RAM3"
 * "RC_RAM4"
 * "RC_RAM5"
 * "RC_SAS1"
 * "RC_TON1"
 * "RC_TON2"
 * "RC_TON3"
 * "RC_TON4"
 * "RC_TON5"
 * ```
 * Hash: 0x17695002FD8B2AE0 | ApiSet: undefined
 */
export function statSetGxtLabel(statName, value, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetGxtLabel(statName, value, save);
}
/**
 * Hash: 0xDB283FDE680FE72E | ApiSet: undefined
 */
export function statSetPos(statName, position, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetPos(statName, position.x, position.y, position.z, save);
}
/**
 * Hash: 0xB3271D7AB655B441 | ApiSet: undefined
 */
export function statSetInt(statName, value, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetInt(statName, value, save);
}
/**
 * Hash: 0x8CDDF1E452BABE11 | ApiSet: undefined
 */
export function statSetUserId(statName, value, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetUserId(statName, value, save);
}
/**
 * Hash: 0x7BBB1B54583ED410 | ApiSet: undefined
 */
export function statSetMaskedInt(statName, p1, p2, p3, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetMaskedInt(statName, p1, p2, p3, save);
}
/**
 * ```
 * Does not take effect immediately, unfortunately.
 * profileSetting seems to only be 936, 937 and 938 in scripts
 * ```
 * Hash: 0x68F01422BE1D838F | ApiSet: undefined
 */
export function statSetProfileSettingValue(profileSetting, value) {
    StatSetProfileSettingValue(profileSetting, value);
}
/**
 * Hash: 0xA87B2335D12531D7 | ApiSet: undefined
 */
export function statSetString(statName, value, save) {
    if (typeof statName === 'string')
        statName = this.getHashKey(statName);
    return StatSetString(statName, value, save);
}
/**
 * Hash: 0x0D0A9F0E7BD91E3C | ApiSet: undefined
 */
export function statSlotIsLoaded(p0) {
    return StatSlotIsLoaded(p0);
}
/**
 * ```
 * Gets the aggressiveness factor of the ocean waves.
 * ```
 * Hash: 0x2B2A2CC86778B619 | ApiSet: undefined
 */
export function getDeepOceanScaler() {
    return GetDeepOceanScaler();
}
/**
 * Retrieves the depth of the water beneath the specified position, accounting for the waves.
 * **Note:** The result might vary depending on the specific frame when this command is executed due to wave fluctuations.
 * Hash: 0xF6829842C06AE524 | ApiSet: undefined
 */
export function getWaterHeight(position) {
    return GetWaterHeight(position.x, position.y, position.z);
}
/**
 * Retrieves the depth of the water beneath the specified position, disregarding wave effects.
 * **Note:** The result remains consistent across different frames as it doesn't consider wave fluctuations.
 * Hash: 0x8EE6B53CE13A9794 | ApiSet: undefined
 */
export function getWaterHeightNoWaves(position) {
    return GetWaterHeightNoWaves(position.x, position.y, position.z);
}
/**
 * ```
 * p0 is the handle returned from _0xFDBF4CDBC07E1706
 * ```
 * Hash: 0xB1252E3E59A82AAF | ApiSet: undefined
 */
export function removeCurrentRise(p0) {
    RemoveCurrentRise(p0);
}
/**
 * Hash: 0x547237AA71AB44DE | ApiSet: undefined
 */
export function _0x547237AA71AB44DE(p0) {
    Citizen.invokeNative('0x547237AA71AB44DE', p0);
}
/**
 * ```
 * Sets the water height for a given position and radius.
 * ```
 * Hash: 0xC443FD757C3BA637 | ApiSet: undefined
 */
export function modifyWater(x, y, height, radius) {
    ModifyWater(x, y, height, radius);
}
/**
 * ```
 * Sets the waves intensity back to original (1.0 in most cases).
 * ```
 * Hash: 0x5E5E99285AE812DB | ApiSet: undefined
 */
export function resetDeepOceanScaler() {
    ResetDeepOceanScaler();
}
/**
 * Only 8 current rises can exist. If rises need to be changed, use REMOVE_EXTRA_CALMING_QUAD and then ADD_EXTRA_CALMING_QUAD again.
 * After removing a rise, you will be able to add a rise again.
 * Hash: 0xFDBF4CDBC07E1706 | ApiSet: undefined
 */
export function addExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height) {
    return AddExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height);
}
/**
 * Hash: 0xFFA5D878809819DB | ApiSet: undefined
 */
export function testProbeAgainstWater(x1, y1, z1, x2, y2, z2) {
    const result = TestProbeAgainstWater(x1, y1, z1, x2, y2, z2);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * ```
 * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
 * Works only ~200 meters around the player.
 * ```
 * Hash: 0xB96B00E976BE977F | ApiSet: undefined
 */
export function setDeepOceanScaler(intensity) {
    SetDeepOceanScaler(intensity);
}
/**
 * Hash: 0x2B3451FA1E3142E2 | ApiSet: undefined
 */
export function testVerticalProbeAgainstAllWater(position, flag) {
    return TestVerticalProbeAgainstAllWater(position.x, position.y, position.z, flag);
}
/**
 * Flags are identical to START_SHAPE_TEST\*, however, 128 is automatically set.
 * Hash: 0x8974647ED222EA5F | ApiSet: undefined
 */
export function testProbeAgainstAllWater(x1, y1, z1, x2, y2, z2, flag) {
    const result = TestProbeAgainstAllWater(x1, y1, z1, x2, y2, z2, flag);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0x2472622CE1F2D45F | ApiSet: undefined
 */
export function addAmmoToPedByType(ped, ammoType, ammo) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof ammoType === 'string')
        ammoType = this.getHashKey(ammoType);
    AddAmmoToPedByType(_ped, ammoType, ammo);
}
/**
 * Hash: 0x78F0424C34306220 | ApiSet: undefined
 */
export function addAmmoToPed(ped, weaponHash, ammo) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    AddAmmoToPed(_ped, weaponHash, ammo);
}
/**
 * Hash: 0xAC678E40BE7C74D2 | ApiSet: undefined
 */
export function clearEntityLastWeaponDamage(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    ClearEntityLastWeaponDamage(_entity);
}
/**
 * Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
 * Hash: 0x0E98F88A24C5F4B8 | ApiSet: undefined
 */
export function clearPedLastWeaponDamage(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedLastWeaponDamage(_ped);
}
/**
 * ```
 * this returns if you can use the weapon while using a parachute
 * ```
 * Hash: 0xBC7BE5ABC0879F74 | ApiSet: undefined
 */
export function canUseWeaponOnParachute(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return CanUseWeaponOnParachute(weaponHash);
}
/**
 * Create a weapon object that cannot be attached to a ped. If you want to create a weapon object that can be attached to a ped, use [`CREATE_OBJECT`](#\_0x509D5878EB39E842) instead.
 * ```
 * NativeDB Added Parameter 9: BOOL bRegisterAsNetworkObject
 * NativeDB Added Parameter 10: BOOL bScriptHostObject
 * ```
 * Hash: 0x9541D3CF0D398F36 | ApiSet: undefined
 */
export function createWeaponObject(weaponHash, ammoCount, position, bCreateDefaultComponents, scale, customModelHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return CreateWeaponObject(weaponHash, ammoCount, position.x, position.y, position.z, bCreateDefaultComponents, scale, customModelHash);
}
/**
 * Hash: 0x5CEE3DF569CECAB0 | ApiSet: undefined
 */
export function doesWeaponTakeWeaponComponent(weaponHash, componentHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return DoesWeaponTakeWeaponComponent(weaponHash, componentHash);
}
/**
 * Hash: 0x9DA58CDBF6BDBC08 | ApiSet: undefined
 */
export function createAirDefenceAngledArea(srcCoord1X, srcCoord1Y, srcCoord1Z, srcCoord2X, srcCoord2Y, srcCoord2Z, fWidth, weaponPositionX, weaponPositionY, weaponPositionZ, weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return CreateAirDefenceAngledArea(srcCoord1X, srcCoord1Y, srcCoord1Z, srcCoord2X, srcCoord2Y, srcCoord2Z, fWidth, weaponPositionX, weaponPositionY, weaponPositionZ, weaponHash);
}
/**
 * Hash: 0xCD79A550999D7D4F | ApiSet: undefined
 */
export function doesAirDefenseZoneExist(zoneId) {
    return DoesAirDefenseZoneExist(zoneId);
}
/**
 * Hash: 0x2E1202248937775C | ApiSet: undefined
 */
export function getAmmoInClip(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetAmmoInClip(_ped, weaponHash);
}
/**
 * ```
 * Enables laser sight on any weapon.
 * It doesn't work. Neither on tick nor OnKeyDown
 * ```
 * Hash: 0xC8B46D7727D864AA | ApiSet: undefined
 */
export function enableLaserSightRendering(toggle) {
    EnableLaserSightRendering(toggle);
}
/**
 * ```
 * `WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);`
 * ```
 * Hash: 0xFC4BD125DE7611E4 | ApiSet: undefined
 */
export function explodeProjectiles(ped, weaponHash, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    ExplodeProjectiles(_ped, weaponHash, p2);
}
/**
 * Both coordinates are from objects in the decompiled scripts.
 * Native related to [\_0xECDC202B25E5CF48](#\_0xECDC202B25E5CF48) p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
 * Hash: 0x91EF34584710BE99 | ApiSet: undefined
 */
export function createAirDefenceSphere(position, radius, weaponPositionX, weaponPositionY, weaponPositionZ, weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return CreateAirDefenceSphere(position.x, position.y, position.z, radius, weaponPositionX, weaponPositionY, weaponPositionZ, weaponHash);
}
/**
 * ```
 * `WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)`
 * From decompiled scripts
 * Returns total ammo in weapon
 * GTALua Example :
 * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
 * ```
 * Hash: 0x015A522136D7F951 | ApiSet: undefined
 */
export function getAmmoInPedWeapon(ped, weaponhash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponhash === 'string')
        weaponhash = this.getHashKey(weaponhash);
    return GetAmmoInPedWeapon(_ped, weaponhash);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x2857938C5D407AFA | ApiSet: undefined
 */
export function getAmmoInVehicleWeaponClip(vehicle, seat, ammo) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetAmmoInVehicleWeaponClip(_vehicle, seat, ammo);
}
/**
 * Hash: 0x44F1012B69313374 | ApiSet: undefined
 */
export function fireAirDefenseWeapon(zoneId, position) {
    FireAirDefenseWeapon(zoneId, position.x, position.y, position.z);
}
/**
 * Hash: 0x1017582BCD3832DC | ApiSet: undefined
 */
export function getCurrentPedVehicleWeapon(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetCurrentPedVehicleWeapon(_ped);
}
/**
 * Hash: 0x8483E98E8B888AE2 | ApiSet: undefined
 */
export function getBestPedWeapon(ped, ignoreAmmoCount) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetBestPedWeapon(_ped, ignoreAmmoCount);
}
/**
 * ```
 * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * ```
 * Hash: 0xF731332072F5156C | ApiSet: undefined
 */
export function getIsPedGadgetEquipped(ped, gadgetHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof gadgetHash === 'string')
        gadgetHash = this.getHashKey(gadgetHash);
    return GetIsPedGadgetEquipped(_ped, gadgetHash);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x3B390A939AF0B5FC | ApiSet: undefined
 */
export function getCurrentPedWeaponEntityIndex(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetCurrentPedWeaponEntityIndex(_ped);
}
/**
 * ```
 * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
 * p2 seems to be 1 most of the time; and is not implemented.
 * ```
 * Hash: 0x3A87E44BB9A01D54 | ApiSet: undefined
 */
export function getCurrentPedWeapon(ped, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetCurrentPedWeapon(_ped, p2);
}
/**
 * Hash: 0xDC16122C7A20C933 | ApiSet: undefined
 */
export function getMaxAmmo(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetMaxAmmo(_ped, weaponHash);
}
/**
 * Hash: 0x840F03E9041E2C9C | ApiSet: undefined
 */
export function getLockonDistanceOfCurrentPedWeapon(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetLockonDistanceOfCurrentPedWeapon(_ped);
}
/**
 * ```
 * p2 is mostly 1 in the scripts.
 * ```
 * Hash: 0xA38DCFFCEA8962FA | ApiSet: undefined
 */
export function getMaxAmmoInClip(ped, weaponHash, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetMaxAmmoInClip(_ped, weaponHash, p2);
}
/**
 * Hash: 0x585847C5E4E11709 | ApiSet: undefined
 */
export function getMaxAmmoByType(ped, ammoType) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof ammoType === 'string')
        ammoType = this.getHashKey(ammoType);
    return GetMaxAmmoByType(_ped, ammoType);
}
/**
 * Hash: 0x814C9D19DFD69679 | ApiSet: undefined
 */
export function getMaxRangeOfCurrentPedWeapon(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetMaxRangeOfCurrentPedWeapon(_ped);
}
/**
 * ```
 * Pass ped. Pass address of Vector3.
 * The coord will be put into the Vector3.
 * The return will determine whether there was a coord found or not.
 * ```
 * Hash: 0x6C4D0409BA1A2BC2 | ApiSet: undefined
 */
export function getPedLastWeaponImpactCoord(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const result = GetPedLastWeaponImpactCoord(_ped);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * ```
 * Returns the current ammo type of the specified ped's specified weapon.
 * MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
 * Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
 * ```
 * Hash: 0x7FEAD38B326B9F74 | ApiSet: undefined
 */
export function getPedAmmoTypeFromWeapon(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetPedAmmoTypeFromWeapon(_ped, weaponHash);
}
/**
 * Hash: 0x39D22031557946C1 | ApiSet: undefined
 */
export function getPedAmmoByType(ped, ammoType) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof ammoType === 'string')
        ammoType = this.getHashKey(ammoType);
    return GetPedAmmoByType(_ped, ammoType);
}
/**
 * Hash: 0xEFFED78E9011134D | ApiSet: undefined
 */
export function getPedWeapontypeInSlot(ped, weaponSlot) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponSlot === 'string')
        weaponSlot = this.getHashKey(weaponSlot);
    return GetPedWeapontypeInSlot(_ped, weaponSlot);
}
/**
 * Hash: 0x2B9EEDC07BD06B9F | ApiSet: undefined
 */
export function getPedWeaponTintIndex(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetPedWeaponTintIndex(_ped, weaponHash);
}
/**
 * ```
 * Returns the base/default ammo type of the specified ped's specified weapon.
 * Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
 * ```
 * Hash: 0xF489B44DD5AF4BD9 | ApiSet: undefined
 */
export function getPedAmmoTypeFromWeapon2(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetPedAmmoTypeFromWeapon2(_ped, weaponHash);
}
/**
 * Hash: 0x0A6DB4965674D243 | ApiSet: undefined
 */
export function getSelectedPedWeapon(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetSelectedPedWeapon(_ped);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0xD0AD348FFD7A6868 | ApiSet: undefined
 */
export function getVehicleWeaponReloadTime(vehicle, seat) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleWeaponReloadTime(_vehicle, seat);
}
/**
 * Hash: 0xF0A60040BE558F2D | ApiSet: undefined
 */
export function getPedWeaponLiveryColor(ped, weaponHash, camoComponentHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof camoComponentHash === 'string')
        camoComponentHash = this.getHashKey(camoComponentHash);
    return GetPedWeaponLiveryColor(_ped, weaponHash, camoComponentHash);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0xC8C6F4B1CDEB40EF | ApiSet: undefined
 */
export function getTimeBeforeVehicleWeaponReloadFinishes(vehicle, seat) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetTimeBeforeVehicleWeaponReloadFinishes(_vehicle, seat);
}
/**
 * Hash: 0xB3CAF387AE12E9F8 | ApiSet: undefined
 */
export function getWeaponComponentHudStats(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetWeaponComponentHudStats(componentHash);
}
/**
 * ```
 * // Returns the size of the default weapon component clip.
 * Use it like this:
 * char cClipSize[32];
 * Hash cur;
 * `if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))`
 * {
 * `if (WEAPON::IS_WEAPON_VALID(cur))`
 * {
 * `int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);`
 * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
 * vDrawString(cClipSize, 0.5f, 0.5f);
 * }
 * }
 * ```
 * Hash: 0x583BE370B1EC6EB4 | ApiSet: undefined
 */
export function getWeaponClipSize(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeaponClipSize(weaponHash);
}
/**
 * Hash: 0x0DB57B41EC1DB083 | ApiSet: undefined
 */
export function getWeaponComponentTypeModel(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetWeaponComponentTypeModel(componentHash);
}
/**
 * Hash: 0x4D1CB8DC40208A17 | ApiSet: undefined
 */
export function getWeaponComponentVariantExtraComponentModel(componentHash, extraComponentIndex) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetWeaponComponentVariantExtraComponentModel(componentHash, extraComponentIndex);
}
/**
 * ```
 * 0=unknown (or incorrect weaponHash)
 * 1= no damage (flare,snowball, petrolcan)
 * 2=melee
 * 3=bullet
 * 4=force ragdoll fall
 * 5=explosive (RPG, Railgun, grenade)
 * 6=fire(molotov)
 * 8=fall(WEAPON_HELI_CRASH)
 * 10=electric
 * 11=barbed wire
 * 12=extinguisher
 * 13=gas
 * 14=water cannon(WEAPON_HIT_BY_WATER_CANNON)
 * ```
 * Hash: 0x3BE0BB12D25FB305 | ApiSet: undefined
 */
export function getWeaponDamageType(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeaponDamageType(weaponHash);
}
/**
 * Hash: 0xB3EA4FEABF41464B | ApiSet: undefined
 */
export function getWeaponObjectLiveryColor(weaponObject, camoComponentHash) {
    if (typeof camoComponentHash === 'string')
        camoComponentHash = this.getHashKey(camoComponentHash);
    return GetWeaponObjectLiveryColor(weaponObject, camoComponentHash);
}
/**
 * This native does not return damages of weapons from the melee and explosive group.
 * Hash: 0x3133B907D8B32053 | ApiSet: undefined
 */
export function getWeaponDamage(weaponHash, componentHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetWeaponDamage(weaponHash, componentHash);
}
/**
 * Hash: 0x6558AC7C17BFEF58 | ApiSet: undefined
 */
export function getWeaponComponentVariantExtraComponentCount(componentHash) {
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return GetWeaponComponentVariantExtraComponentCount(componentHash);
}
/**
 * ```
 * Drops the current weapon and returns the object
 * Unknown behavior when unarmed.
 * ```
 * Hash: 0xCAE1DC9A0E22A16D | ApiSet: undefined
 */
export function getWeaponObjectFromPed(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetWeaponObjectFromPed(_ped, p1);
}
/**
 * Hash: 0xCD183314F7CD2E57 | ApiSet: undefined
 */
export function getWeaponObjectTintIndex(weapon) {
    return GetWeaponObjectTintIndex(weapon);
}
/**
 * Hash: 0x5DCF6C5CAB2E9BF7 | ApiSet: undefined
 */
export function getWeaponTintCount(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeaponTintCount(weaponHash);
}
/**
 * ```
 * // members should be aligned to 8 bytes by default but it's best to use alignas here, just to be sure
 * struct WeaponHudStatsData
 * {
 * alignas(8) uint8_t hudDamage; // 0x0000
 * alignas(8) uint8_t hudSpeed; // 0x0008
 * alignas(8) uint8_t hudCapacity; // 0x0010
 * alignas(8) uint8_t hudAccuracy; // 0x0018
 * alignas(8) uint8_t hudRange; // 0x0020
 * };
 * Usage:
 * WeaponHudStatsData data;
 * if (GET_WEAPON_HUD_STATS(weaponHash, (Any*)&data))
 * {
 * // uint8_t damagePercentage = data.hudDamage etc...
 * }
 * ```
 * Hash: 0xD92C739EE34C9EBA | ApiSet: undefined
 */
export function getWeaponHudStats(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeaponHudStats(weaponHash);
}
/**
 * Gets and returns the hash of the group of the specified weapon (group names can be found/changed under "Group" in the weapons' meta file).
 * Note that the group is **not** the same as the location on the weapon wheel.
 * Hash: 0xC3287EE3050FB74C | ApiSet: undefined
 */
export function getWeapontypeGroup(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeapontypeGroup(weaponHash);
}
/**
 * Hash: 0x4215460B9B8B7FA0 | ApiSet: undefined
 */
export function getWeapontypeSlot(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeapontypeSlot(weaponHash);
}
/**
 * ```
 * Returns the model of any weapon.
 * Can also take an ammo hash?
 * `sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));`
 * ```
 * Hash: 0xF46CDC33180FDA94 | ApiSet: undefined
 */
export function getWeapontypeModel(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeapontypeModel(weaponHash);
}
/**
 * Hash: 0x065D2AACAD8CF7A4 | ApiSet: undefined
 */
export function getWeaponTimeBetweenShots(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return GetWeaponTimeBetweenShots(weaponHash);
}
/**
 * List of all available loadouts:
 * ```
 * LOADOUT_DEFAULT
 * LOADOUT_ANIMAL
 * LOADOUT_COUGAR
 * LOADOUT_HILLBILLY
 * LOADOUT_CULT
 * LOADOUT_CHEAT_0
 * LOADOUT_CHEAT_1
 * LOADOUT_GUARD
 * LOADOUT_NETWORK_BOT
 * LOADOUT_LOST
 * LOADOUT_LOST_L1
 * LOADOUT_LOST_L2
 * LOADOUT_LOST_L3
 * LOADOUT_MEXICAN
 * LOADOUT_MEXICAN_L1
 * LOADOUT_MEXICAN_L2
 * LOADOUT_MEXICAN_L3
 * LOADOUT_FAMILY
 * LOADOUT_ASIAN
 * LOADOUT_SECUR
 * LOADOUT_POLICE_GUARD
 * LOADOUT_COP
 * LOADOUT_COP_L1
 * LOADOUT_COP_L2
 * LOADOUT_COP_L3
 * LOADOUT_SWAT
 * LOADOUT_SWAT_NO_LASER
 * LOADOUT_COP_SHOTGUN
 * LOADOUT_FIREMAN
 * LOADOUT_COP_HELI
 * LOADOUT_COP_BOAT
 * LOADOUT_ARMY
 * LOADOUT_ANIMAL_RETRIEVER
 * LOADOUT_SMALL_DOG
 * LOADOUT_TIGER_SHARK
 * LOADOUT_HAMMERHEAD_SHARK
 * LOADOUT_KILLER_WHALE
 * LOADOUT_BOAR
 * LOADOUT_PIG
 * LOADOUT_COYOTE
 * LOADOUT_DEER
 * LOADOUT_HEN
 * LOADOUT_RABBIT
 * LOADOUT_CAT
 * LOADOUT_COW
 * ```
 * Hash: 0x68F8BE6AF5CDF8A6 | ApiSet: undefined
 */
export function giveLoadoutToPed(ped, loadoutHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof loadoutHash === 'string')
        loadoutHash = this.getHashKey(loadoutHash);
    GiveLoadoutToPed(_ped, loadoutHash);
}
/**
 * Hash: 0xD966D51AA5B28BB9 | ApiSet: undefined
 */
export function giveWeaponComponentToPed(ped, weaponHash, componentHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    GiveWeaponComponentToPed(_ped, weaponHash, componentHash);
}
/**
 * ```
 * Gives a weapon to PED with a delay, example:
 * `WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)`
 * ```
 * Hash: 0xB282DC6EBD803C75 | ApiSet: undefined
 */
export function giveDelayedWeaponToPed(ped, weaponHash, ammoCount, bForceInHand) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    GiveDelayedWeaponToPed(_ped, weaponHash, ammoCount, bForceInHand);
}
/**
 * Hash: 0xB1FA61371AF7C4B7 | ApiSet: undefined
 */
export function giveWeaponObjectToPed(weaponObject, ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    GiveWeaponObjectToPed(weaponObject, _ped);
}
/**
 * ```
 * It determines what weapons caused damage:
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * ```
 * Hash: 0x2D343D2219CD027A | ApiSet: undefined
 */
export function hasPedBeenDamagedByWeapon(ped, weaponHash, weaponType) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return HasPedBeenDamagedByWeapon(_ped, weaponHash, weaponType);
}
/**
 * ```
 * addonHash:
 * `(use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)`
 * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
 * ```
 * Hash: 0x33E179436C0B31DB | ApiSet: undefined
 */
export function giveWeaponComponentToWeaponObject(weaponObject, addonHash) {
    if (typeof addonHash === 'string')
        addonHash = this.getHashKey(addonHash);
    GiveWeaponComponentToWeaponObject(weaponObject, addonHash);
}
/**
 * ```
 * It determines what weapons caused damage:
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * ```
 * Hash: 0x131D401334815E94 | ApiSet: undefined
 */
export function hasEntityBeenDamagedByWeapon(entity, weaponHash, weaponType) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return HasEntityBeenDamagedByWeapon(_entity, weaponHash, weaponType);
}
/**
 * ```
 * Third Parameter = unsure, but pretty sure it is weapon hash
 * --> get_hash_key("weapon_stickybomb")
 * Fourth Parameter = unsure, almost always -1
 * ```
 * Hash: 0x717C8481234E3B88 | ApiSet: undefined
 */
export function hasVehicleGotProjectileAttached(driver, vehicle, weaponHash, p3) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return HasVehicleGotProjectileAttached(_driver, _vehicle, weaponHash, p3);
}
/**
 * Hash: 0x76A18844E743BF91 | ApiSet: undefined
 */
export function hasWeaponGotWeaponComponent(weapon, addonHash) {
    if (typeof addonHash === 'string')
        addonHash = this.getHashKey(addonHash);
    return HasWeaponGotWeaponComponent(weapon, addonHash);
}
/**
 * Hash: 0xBF0FD6E56C964FCB | ApiSet: undefined
 */
export function giveWeaponToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    GiveWeaponToPed(_ped, weaponHash, ammoCount, isHidden, bForceInHand);
}
/**
 * Hash: 0xC593212475FAE340 | ApiSet: undefined
 */
export function hasPedGotWeaponComponent(ped, weaponHash, componentHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return HasPedGotWeaponComponent(_ped, weaponHash, componentHash);
}
/**
 * Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
 * | Bit value | Effect            |
 * |-----------|-------------------|
 * | 1         | Melee weapons     |
 * | 2         | Explosive weapons |
 * | 4         | Any other weapons |
 * Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
 * Hash: 0x475768A975D5AD17 | ApiSet: undefined
 */
export function isPedArmed(ped, typeFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedArmed(_ped, typeFlags);
}
/**
 * ```
 * p2 should be FALSE, otherwise it seems to always return FALSE
 * Bool does not check if the weapon is current equipped, unfortunately.
 * ```
 * Hash: 0x8DECB02F88F428BC | ApiSet: undefined
 */
export function hasPedGotWeapon(ped, weaponHash, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return HasPedGotWeapon(_ped, weaponHash, p2);
}
/**
 * Hash: 0x0D78DE0572D3969E | ApiSet: undefined
 */
export function isPedWeaponComponentActive(ped, weaponHash, componentHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    return IsPedWeaponComponentActive(_ped, weaponHash, componentHash);
}
/**
 * Hash: 0x36E353271F0E90EE | ApiSet: undefined
 */
export function hasWeaponAssetLoaded(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return HasWeaponAssetLoaded(weaponHash);
}
/**
 * ```
 * Hides the players weapon during a cutscene.
 * ```
 * Hash: 0x6F6981D2253C208F | ApiSet: undefined
 */
export function hidePedWeaponForScriptedCutscene(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    HidePedWeaponForScriptedCutscene(_ped, toggle);
}
/**
 * Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
 * Hash: 0x20AE33F3AC9C0033 | ApiSet: undefined
 */
export function makePedReload(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return MakePedReload(_ped);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x8062F07153F4446F | ApiSet: undefined
 */
export function hasWeaponReloadingInVehicle(vehicle, seat) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return HasWeaponReloadingInVehicle(_vehicle, seat);
}
/**
 * Hash: 0xDAB963831DBFD3F4 | ApiSet: undefined
 */
export function isAnyAirDefenseZoneInsideSphere(position, radius) {
    return IsAnyAirDefenseZoneInsideSphere(position.x, position.y, position.z, radius);
}
/**
 * Hash: 0x4B7620C47217126C | ApiSet: undefined
 */
export function isFlashLightOn(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsFlashLightOn(_ped);
}
/**
 * ```
 * This native returns a true or false value.
 * Ped ped = The ped whose weapon you want to check.
 * ```
 * Hash: 0x65F0C5AE05943EC7 | ApiSet: undefined
 */
export function isPedCurrentWeaponSilenced(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedCurrentWeaponSilenced(_ped);
}
/**
 * ```
 * SET_WEAPON_OBJECT_*
 * ```
 * Hash: 0x977CA98939E82E4B | ApiSet: undefined
 */
export function _0x977CA98939E82E4B(weaponObject, p1) {
    Citizen.invokeNative('0x977CA98939E82E4B', weaponObject, p1);
}
/**
 * Hash: 0xB80CA294F2F26749 | ApiSet: undefined
 */
export function isPedWeaponReadyToShoot(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedWeaponReadyToShoot(_ped);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xE6D2CEDD370FF98E | ApiSet: undefined
 */
export function _0xE6D2CEDD370FF98E(p0, p1) {
    Citizen.invokeNative('0xE6D2CEDD370FF98E', p0, p1);
}
/**
 * Hash: 0x937C71165CF334B3 | ApiSet: undefined
 */
export function isWeaponValid(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return IsWeaponValid(weaponHash);
}
/**
 * Hash: 0xA2C9AC24B4061285 | ApiSet: undefined
 */
export function _0xA2C9AC24B4061285(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return Citizen.invokeNative('0xA2C9AC24B4061285', _ped, weaponHash);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x24C024BA8379A70A | ApiSet: undefined
 */
export function _0x24C024BA8379A70A(p0, p1) {
    Citizen.invokeNative('0x24C024BA8379A70A', p0, p1);
}
/**
 * Hash: 0x1E45B34ADEBEE48E | ApiSet: undefined
 */
export function removeAllAirDefenseZones() {
    RemoveAllAirDefenseZones();
}
/**
 * Hash: 0x8C0D57EA686FAD87 | ApiSet: undefined
 */
export function refillAmmoInstantly(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return RefillAmmoInstantly(_ped);
}
/**
 * Hash: 0xE4DCEC7FD5B739A5 | ApiSet: undefined
 */
export function _0xE4DCEC7FD5B739A5(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0xE4DCEC7FD5B739A5', _ped);
}
/**
 * Parameter `p1` does not seem to be used or referenced in game binaries.\
 * **Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.
 * Hash: 0xF25DF915FA38C5F3 | ApiSet: undefined
 */
export function removeAllPedWeapons(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    RemoveAllPedWeapons(_ped, p1);
}
/**
 * Hash: 0xF7D82B0D66777611 | ApiSet: undefined
 */
export function removeWeaponComponentFromWeaponObject(weaponObject, addonHash) {
    if (typeof addonHash === 'string')
        addonHash = this.getHashKey(addonHash);
    RemoveWeaponComponentFromWeaponObject(weaponObject, addonHash);
}
/**
 * Hash: 0x1E8BE90C74FB4C09 | ApiSet: undefined
 */
export function removeWeaponComponentFromPed(ped, weaponHash, componentHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof componentHash === 'string')
        componentHash = this.getHashKey(componentHash);
    RemoveWeaponComponentFromPed(_ped, weaponHash, componentHash);
}
/**
 * Hash: 0x0ABF535877897560 | ApiSet: undefined
 */
export function removeAirDefenseZone(zoneId) {
    return RemoveAirDefenseZone(zoneId);
}
/**
 * If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
 * Hash: 0xFC52E0F37E446528 | ApiSet: undefined
 */
export function removeAllProjectilesOfType(weaponHash, explode) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    RemoveAllProjectilesOfType(weaponHash, explode);
}
/**
 * Hash: 0xAA08EF13F341C8FC | ApiSet: undefined
 */
export function removeWeaponAsset(weaponHash) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    RemoveWeaponAsset(weaponHash);
}
/**
 * Hash: 0x48164DBB970AC3F0 | ApiSet: undefined
 */
export function requestWeaponHighDetailModel(weaponObject) {
    const _weaponObject = weaponObject instanceof Entity ? weaponObject.handle() : weaponObject;
    RequestWeaponHighDetailModel(_weaponObject);
}
/**
 * ```
 * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
 * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
 * ```
 * Hash: 0x5443438F033E29C3 | ApiSet: undefined
 */
export function requestWeaponAsset(weaponHash, p1, p2) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    RequestWeaponAsset(weaponHash, p1, p2);
}
/**
 * ```
 * This native removes a specified weapon from your selected ped.
 * Weapon Hashes: pastebin.com/0wwDZgkF
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
 * C++:
 * `WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);`
 * The code above removes the knife from the player.
 * ```
 * Hash: 0x4899CB088EDF59B8 | ApiSet: undefined
 */
export function removeWeaponFromPed(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    RemoveWeaponFromPed(_ped, weaponHash);
}
/**
 * Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
 * Hash: 0xB4771B9AAF4E68E4 | ApiSet: undefined
 */
export function setCanPedEquipWeapon(ped, weaponHash, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetCanPedEquipWeapon(_ped, weaponHash, toggle);
}
/**
 * Hash: 0xDCD2A934D65CB497 | ApiSet: undefined
 */
export function setAmmoInClip(ped, weaponHash, ammo) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return SetAmmoInClip(_ped, weaponHash, ammo);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x873906720EE842C3 | ApiSet: undefined
 */
export function setAmmoInVehicleWeaponClip(vehicle, seat, ammo) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return SetAmmoInVehicleWeaponClip(_vehicle, seat, ammo);
}
/**
 * Enables/disables flashlight on ped's weapon.
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x988DB6FE9B3AC000 | ApiSet: undefined
 */
export function setFlashLightEnabled(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetFlashLightEnabled(_ped, toggle);
}
/**
 * Does the same as [`_SET_CAN_PED_SELECT_WEAPON`](#\_0xB4771B9AAF4E68E4) except for all weapons.
 * Hash: 0xEFF296097FF1E509 | ApiSet: undefined
 */
export function setCanPedEquipAllWeapons(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetCanPedEquipAllWeapons(_ped, toggle);
}
/**
 * Hash: 0xA4EFEF9440A5B0EF | ApiSet: undefined
 */
export function setPedAmmoToDrop(ped, ammo) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedAmmoToDrop(_ped, ammo);
}
/**
 * Hash: 0x75C55983C2C39DAA | ApiSet: undefined
 */
export function setCurrentPedVehicleWeapon(ped, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return SetCurrentPedVehicleWeapon(_ped, weaponHash);
}
/**
 * Hash: 0x8378627201D5497D | ApiSet: undefined
 */
export function setPedChanceOfFiringBlanks(ped, xBias, yBias) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedChanceOfFiringBlanks(_ped, xBias, yBias);
}
/**
 * Hash: 0xCEA66DAD478CD39B | ApiSet: undefined
 */
export function setFlashLightFadeDistance(distance) {
    return SetFlashLightFadeDistance(distance);
}
/**
 * Hash: 0xADF692B254977C0C | ApiSet: undefined
 */
export function setCurrentPedWeapon(ped, weaponHash, bForceInHand) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetCurrentPedWeapon(_ped, weaponHash, bForceInHand);
}
/**
 * Hash: 0x5FD1E1F011E76D7E | ApiSet: undefined
 */
export function setPedAmmoByType(ped, ammoType, ammo) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof ammoType === 'string')
        ammoType = this.getHashKey(ammoType);
    SetPedAmmoByType(_ped, ammoType, ammo);
}
/**
 * Restricts weapon selection when cycling through weapons, to select only vehicle weapons.
 * Hash: 0x50276EF8172F5F12 | ApiSet: undefined
 */
export function setPedCycleVehicleWeaponsOnly(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCycleVehicleWeaponsOnly(_ped);
}
/**
 * ```
 * NativeDB Added Parameter 4: BOOL p3
 * ```
 * Hash: 0x14E56BC5B5DB6A19 | ApiSet: undefined
 */
export function setPedAmmo(ped, weaponHash, ammo) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetPedAmmo(_ped, weaponHash, ammo);
}
/**
 * Hash: 0x476AE72C1D19D1A8 | ApiSet: undefined
 */
export function setPedDropsWeaponsWhenDead(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDropsWeaponsWhenDead(_ped, toggle);
}
/**
 * Hash: 0x183DADC6AA953186 | ApiSet: undefined
 */
export function setPedInfiniteAmmoClip(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedInfiniteAmmoClip(_ped, toggle);
}
/**
 * Hash: 0x3EDCB0505123623B | ApiSet: undefined
 */
export function setPedInfiniteAmmo(ped, toggle, weaponHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetPedInfiniteAmmo(_ped, toggle, weaponHash);
}
/**
 * Hash: 0x9FE5633880ECD8ED | ApiSet: undefined
 */
export function setPedWeaponLiveryColor(ped, weaponHash, camoComponentHash, colorIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    if (typeof camoComponentHash === 'string')
        camoComponentHash = this.getHashKey(camoComponentHash);
    SetPedWeaponLiveryColor(_ped, weaponHash, camoComponentHash, colorIndex);
}
/**
 * Hash: 0x6B7513D9966FBEC0 | ApiSet: undefined
 */
export function setPedDropsWeapon(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDropsWeapon(_ped);
}
/**
 * ```
 * Has 5 parameters since latest patches.
 * ```
 * Hash: 0x0725A4CCFDED9A70 | ApiSet: undefined
 */
export function setPedCurrentWeaponVisible(ped, visible, deselectWeapon, p3, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCurrentWeaponVisible(_ped, visible, deselectWeapon, p3, p4);
}
/**
 * Changes the selected ped aiming animation style, you can find the list of animations below.
 * These are stored in the `weaponanimations.meta` file located in `Grand Theft Auto V\update\update.rpf\common\data\ai\weaponanimations.meta`.
 * For Lua, it's best if you send the animation using [compile-time jenkins](https://cookbook.fivem.net/2019/06/23/lua-support-for-compile-time-jenkins-hashes/) hashes to avoid overhead. An example is shown down below.
 * ### Animations
 * ```cpp
 * enum eWeaponAnimationOverrides {
 * Ballistic = 0x5534A626,
 * Default = 0xE4DF46D5,
 * Franklin = 0x44C24694,
 * Gang = 0xBC066B98,
 * Michael = 0x55932F38,
 * MP_F_Freemode = 0xACB10C83,
 * Trevor = 0x2737D5AC,
 * Hillbilly = 0x8503D409,
 * Gang1H = 0x724A7AB7,
 * FirstPerson = 0xEE38E8E0,
 * FirstPersonAiming = 0xC76297A3,
 * FirstPersonRNG = 0xA4FDD608,
 * FirstPersonScope = 0x28117C22,
 * FirstPersonMichael = 0xEAA2550B,
 * FirstPersonMichaelAiming = 0x3E6FF30F,
 * FirstPersonMichaelRNG = 0xB7A826C1,
 * FirstPersonMichaelScope = 0xC554CF97,
 * FirstPersonFranklin = 0xC407163A,
 * FirstPersonFranklinAiming = 0x3D4B7B03,
 * FirstPersonFranklinRNG = 0xBE79B0B4,
 * FirstPersonFranklinScope = 0xAFEA6593,
 * FirstPersonTrevor = 0xA65D5351,
 * FirstPersonTrevorAiming = 0xF9BE8ED9,
 * FirstPersonTrevorRNG = 0xD181ED09,
 * FirstPersonTrevorScope = 0x34A67D6D,
 * FirstPersonMPFemale = 0x8431583F,
 * Fat = 0xC531A409,
 * SuperFat = 0x529E5780,
 * Female = 0x6D155A1B,
 * GangFemale = 0x678ADF82,
 * }
 * ```
 * Hash: 0x1055AC3A667F09D9 | ApiSet: undefined
 */
export function setWeaponAnimationOverride(ped, animStyle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof animStyle === 'string')
        animStyle = this.getHashKey(animStyle);
    SetWeaponAnimationOverride(_ped, animStyle);
}
/**
 * ```
 * Returns handle of the projectile.
 * ```
 * Hash: 0xB4C8D77C80C0421E | ApiSet: undefined
 */
export function setPedShootOrdnanceWeapon(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return SetPedShootOrdnanceWeapon(_ped, p1);
}
/**
 * Hash: 0x208A1888007FC0E6 | ApiSet: undefined
 */
export function setPedDropsInventoryWeapon(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetPedDropsInventoryWeapon(_ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
}
/**
 * Hash: 0xE620FD3512A04F18 | ApiSet: undefined
 */
export function setPickupAmmoAmountScaler(p0) {
    SetPickupAmmoAmountScaler(p0);
}
/**
 * ```
 * tintIndex can be the following:
 * 0 : Default/Black
 * 1 : Green
 * 2 : Gold
 * 3 : Pink
 * 4 : Army
 * 5 : LSPD
 * 6 : Orange
 * 7 : Platinum
 * tintIndex for MK2 weapons :
 * 0 : Classic Black
 * 1 : Classic Gray
 * 2 : Classic Two-Tone
 * 3 : Classic White
 * 4 : Classic Beige
 * 5 : Classic Green
 * 6 : Classic Blue
 * 7 : Classic Earth
 * 8 : Classic Brown & Black
 * 9 : Red Contrast
 * 10 : Blue Contrast
 * 11 : Yellow Contrast
 * 12 : Orange Contrast
 * 13 : Bold Pink
 * 14 : Bold Purple & Yellow
 * 15 : Bold Orange
 * 16 : Bold Green & Purple
 * 17 : Bold Red Features
 * 18 : Bold Green Features
 * 19 : Bold Cyan Features
 * 20 : Bold Yellow Features
 * 21 : Bold Red & White
 * 22 : Bold Blue & White
 * 23 : Metallic Gold
 * 24 : Metallic Platinum
 * 25 : Metallic Gray & Lilac
 * 26 : Metallic Purple & Lime
 * 27 : Metallic Red
 * 28 : Metallic Green
 * 29 : Metallic Blue
 * 30 : Metallic White & Aqua
 * 31 : Metallic Orange & Yellow
 * 32 : Mettalic Red and Yellow
 * ```
 * Hash: 0x50969B9B89ED5738 | ApiSet: undefined
 */
export function setPedWeaponTintIndex(ped, weaponHash, tintIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetPedWeaponTintIndex(_ped, weaponHash, tintIndex);
}
/**
 * ```
 * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * p2 is always true.
 * ```
 * Hash: 0xD0D7B1E680ED4A1A | ApiSet: undefined
 */
export function setPedGadget(ped, gadgetHash, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof gadgetHash === 'string')
        gadgetHash = this.getHashKey(gadgetHash);
    SetPedGadget(_ped, gadgetHash, p2);
}
/**
 * Changes the weapon damage output by the given multiplier value.
 * Does NOT need to be called every frame.
 * Hash: 0x4757F00BC6323CFE | ApiSet: undefined
 */
export function setWeaponDamageModifier(weaponHash, damageMultiplier) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetWeaponDamageModifier(weaponHash, damageMultiplier);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x4AE5AC8B852D642C | ApiSet: undefined
 */
export function setWeaponExplosionRadiusMultiplier(weaponHash, multiplier) {
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    SetWeaponExplosionRadiusMultiplier(weaponHash, multiplier);
}
/**
 * Hash: 0xF827589017D4E4A9 | ApiSet: undefined
 */
export function setWeaponObjectTintIndex(weapon, tintIndex) {
    SetWeaponObjectTintIndex(weapon, tintIndex);
}
/**
 * Hash: 0xECDC202B25E5CF48 | ApiSet: undefined
 */
export function setPlayerAirDefenseZoneFlag(player, zoneId, enable) {
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetPlayerAirDefenseZoneFlag(_player, zoneId, enable);
}
/**
 * Start a reload for a vehicle's weapon.
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x5B1513F27F279A44 | ApiSet: undefined
 */
export function triggerVehicleWeaponReload(vehicle, seat, ped) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return TriggerVehicleWeaponReload(_vehicle, seat, _ped);
}
/**
 * Hash: 0x5DA825A85D0EA6E6 | ApiSet: undefined
 */
export function setWeaponObjectLiveryColor(weaponObject, camoComponentHash, colorIndex) {
    if (typeof camoComponentHash === 'string')
        camoComponentHash = this.getHashKey(camoComponentHash);
    SetWeaponObjectLiveryColor(weaponObject, camoComponentHash, colorIndex);
}
/**
 * ```
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 * Modified example from "am_imp_exp.c4", line 6418:
 * `\/\* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));`
 * etc.
 * \*\/
 * `STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);`
 * `ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);`
 * ```
 * Hash: 0x5C0DE367AA0D911C | ApiSet: undefined
 */
export function clearPopscheduleOverrideVehicleModel(scheduleId) {
    ClearPopscheduleOverrideVehicleModel(scheduleId);
}
/**
 * ```
 * Returns a hash representing which part of the map the given coords are located.
 * Possible return values:
 * (Hash of) city -> -289320599
 * (Hash of) countryside -> 2072609373
 * C# Example :
 * Ped player = Game.Player.Character;
 * Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
 * ```
 * Hash: 0x7EE64D51E8498728 | ApiSet: undefined
 */
export function getHashOfMapAreaAtCoords(position) {
    return GetHashOfMapAreaAtCoords(position.x, position.y, position.z);
}
/**
 * ```
 * 'zoneName' corresponds to an entry in 'popzone.ipl'.
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 * ```
 * Hash: 0x98CD1D2934B76CC1 | ApiSet: undefined
 */
export function getZoneFromNameId(zoneName) {
    return GetZoneFromNameId(zoneName);
}
/**
 * Hash: 0x4334BC40AA0CB4BB | ApiSet: undefined
 */
export function getZonePopschedule(zoneId) {
    return GetZonePopschedule(zoneId);
}
/**
 * Hash: 0xBA5ECEEA120E5611 | ApiSet: undefined
 */
export function setZoneEnabled(zoneId, toggle) {
    SetZoneEnabled(zoneId, toggle);
}
/**
 * Hash: 0x27040C25DE6CB2F4 | ApiSet: undefined
 */
export function getZoneAtCoords(position) {
    return GetZoneAtCoords(position.x, position.y, position.z);
}
/**
 * ```
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 * PROL = Prologue / North Yankton
 * ISHeist = Cayo Perico Island
 * ```
 * Hash: 0xCD90657D4C30E1CA | ApiSet: undefined
 */
export function getNameOfZone(position) {
    return GetNameOfZone(position.x, position.y, position.z);
}
/**
 * ```
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 * Modified example from "am_imp_exp.c4", line 6406:
 * `\/\* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));`
 * etc.
 * \*\/
 * `ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);`
 * `STREAMING::REQUEST_MODEL(vehicleHash);`
 * ```
 * Hash: 0x5F7D596BAC2E7777 | ApiSet: undefined
 */
export function overridePopscheduleVehicleModel(scheduleId, vehicleHash) {
    if (typeof vehicleHash === 'string')
        vehicleHash = this.getHashKey(vehicleHash);
    OverridePopscheduleVehicleModel(scheduleId, vehicleHash);
}
/**
 * Gets the zone scumminess level, used to calculate the cellphone signal strength.
 * ```cpp
 * enum eZoneScumminess
 * {
 * SCUMMINESS_POSH = 0,
 * SCUMMINESS_NICE = 1,
 * SCUMMINESS_ABOVE_AVERAGE = 2,
 * SCUMMINESS_BELOW_AVERAGE = 3,
 * SCUMMINESS_CRAP = 4,
 * SCUMMINESS_SCUM = 5
 * }
 * ```
 * Hash: 0x5F7B268D15BA0739 | ApiSet: undefined
 */
export function getZoneScumminess(zoneId) {
    return GetZoneScumminess(zoneId);
}
/**
 * Hash: 0xD5C12A75C7B9497F | ApiSet: undefined
 */
export function addCoverPoint(p0, p1, p2, p3, p4, p5, p6, p7) {
    return AddCoverPoint(p0, p1, p2, p3, p4, p5, p6, p7);
}
/**
 * x2,y2 and z2 are the coordinates to which the ped should look at
 * Hash: 0x8EDF950167586B7C | ApiSet: undefined
 */
export function addPatrolRouteNode(id, guardScenario, x1, y1, z1, x2, y2, z2, waitTime) {
    AddPatrolRouteNode(id, guardScenario, x1, y1, z1, x2, y2, z2, waitTime);
}
/**
 * connects/links 2 [route nodes](#\_0x8EDF950167586B7C)\
 * image representing the cyclic example below:\
 * ![image](https://user-images.githubusercontent.com/55803068/188470866-c32c6a9f-a25d-4772-9b18-5be46e2c14a1.png)
 * Hash: 0x23083260DEC3A551 | ApiSet: undefined
 */
export function addPatrolRouteLink(id1, id2) {
    AddPatrolRouteLink(id1, id2);
}
/**
 * Hash: 0xD5002D78B7162E1B | ApiSet: undefined
 */
export function assistedMovementSetRouteProperties(route, props) {
    AssistedMovementSetRouteProperties(route, props);
}
/**
 * Hash: 0x85F462BADC7DA47F | ApiSet: undefined
 */
export function addVehicleSubtaskAttackPed(ped, ped2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
    AddVehicleSubtaskAttackPed(_ped, _ped2);
}
/**
 * Hash: 0x60F9A4393A21F741 | ApiSet: undefined
 */
export function assistedMovementIsRouteLoaded(route) {
    return AssistedMovementIsRouteLoaded(route);
}
/**
 * Hash: 0xC35B5CDB2824CF69 | ApiSet: undefined
 */
export function clearDrivebyTaskUnderneathDrivingTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearDrivebyTaskUnderneathDrivingTask(_ped);
}
/**
 * Hash: 0x45C597097DD7CB81 | ApiSet: undefined
 */
export function addCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9) {
    AddCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9);
}
/**
 * Hash: 0x13945951E16EF912 | ApiSet: undefined
 */
export function assistedMovementOverrideLoadDistanceThisFrame(dist) {
    AssistedMovementOverrideLoadDistanceThisFrame(dist);
}
/**
 * ```
 * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
 * ```
 * Hash: 0x817268968605947A | ApiSet: undefined
 */
export function assistedMovementRequestRoute(route) {
    AssistedMovementRequestRoute(route);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0xF6DC48E56BE1243A | ApiSet: undefined
 */
export function clearPedScriptTaskIfRunningThreatResponseNonTempTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedScriptTaskIfRunningThreatResponseNonTempTask(_ped);
}
/**
 * ```
 * x, y, z: offset in world coords from some entity.
 * ```
 * Hash: 0x5CF0D8F9BBA0DD75 | ApiSet: undefined
 */
export function addVehicleSubtaskAttackCoord(ped, position) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    AddVehicleSubtaskAttackCoord(_ped, position.x, position.y, position.z);
}
/**
 * Hash: 0xB043ECA801B8CBC1 | ApiSet: undefined
 */
export function closePatrolRoute() {
    ClosePatrolRoute();
}
/**
 * ```
 * CLEAR_*
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xDBBC7A2432524127 | ApiSet: undefined
 */
export function clearVehicleTasks(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ClearVehicleTasks(_vehicle);
}
/**
 * Clear a ped's tasks. Stop animations and other tasks created by scripts.
 * Hash: 0xE1EF3C1216AFF2CD | ApiSet: undefined
 */
export function clearPedTasks(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedTasks(_ped);
}
/**
 * ```
 * Forces the ped to use the mounted weapon.
 * Returns false if task is not possible.
 * ```
 * Hash: 0xDCFE42068FE0135A | ApiSet: undefined
 */
export function controlMountedWeapon(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return ControlMountedWeapon(_ped);
}
/**
 * Hash: 0xAF8A443CCC8018DC | ApiSet: undefined
 */
export function createPatrolRoute() {
    CreatePatrolRoute();
}
/**
 * Hash: 0x3548536485DD792B | ApiSet: undefined
 */
export function assistedMovementRemoveRoute(route) {
    AssistedMovementRemoveRoute(route);
}
/**
 * ```
 * Occurrences in the b617d scripts:
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "GRAPESEED_PLANES",
 * "KORTZ_SECURITY",
 * "LOST_BIKERS",
 * "LSA_Planes",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5"
 * "QUARRY",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE",
 * "Triathlon_1_Start",
 * "Triathlon_2_Start",
 * "Triathlon_3_Start"
 * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
 * `if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {`
 * `else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {`
 * ```
 * Hash: 0xF9034C136C9E00D3 | ApiSet: undefined
 */
export function doesScenarioGroupExist(scenarioGroup) {
    return DoesScenarioGroupExist(scenarioGroup);
}
/**
 * Hash: 0x176CECF6F920D707 | ApiSet: undefined
 */
export function clearPedSecondaryTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedSecondaryTask(_ped);
}
/**
 * For an example on how to use this please refer to [OPEN_SEQUENCE_TASK](#\_0xE8854A4326B9E12B)
 * #### NOTE
 * If you fail to call [`CLOSE_SEQUENCE_TASK`](#\_0x39E72BC99E6360CB) and `CLEAR_SEQUENCE_TASK` the sequence system can get stuck in a broken state until you restart your client.
 * Hash: 0x3841422E9C488D8C | ApiSet: undefined
 */
export function clearSequenceTask() {
    return ClearSequenceTask();
}
/**
 * Hash: 0x5A59271FFADD33C1 | ApiSet: undefined
 */
export function doesScenarioExistInArea(position, radius, b) {
    return DoesScenarioExistInArea(position.x, position.y, position.z, radius, b);
}
/**
 * For an example on how to use this please refer to [OPEN_SEQUENCE_TASK](#\_0xE8854A4326B9E12B)
 * #### NOTE
 * If you fail to call `CLOSE_SEQUENCE_TASK` and [`CLEAR_SEQUENCE_TASK`](#\_0x3841422E9C488D8C) this can get stuck in a broken state until you restart your client.
 * Hash: 0x39E72BC99E6360CB | ApiSet: undefined
 */
export function closeSequenceTask(taskSequenceId) {
    CloseSequenceTask(taskSequenceId);
}
/**
 * Immediately stops the pedestrian from whatever it's doing. The difference between this and [CLEAR_PED_TASKS](#\_0xE1EF3C1216AFF2CD) is that this one teleports the ped but does not change the position of the ped.
 * Hash: 0xAAA34F8A7CB32098 | ApiSet: undefined
 */
export function clearPedTasksImmediately(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    ClearPedTasksImmediately(_ped);
}
/**
 * Hash: 0x0A9D0C2A3BBC86C1 | ApiSet: undefined
 */
export function doesScenarioOfTypeExistInArea(p0, p1, p2, p3, p4, p5) {
    return DoesScenarioOfTypeExistInArea(p0, p1, p2, p3, p4, p5);
}
/**
 * ```
 * https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * ```
 * Hash: 0x534AEBA6E5ED4CAB | ApiSet: undefined
 */
export function getActiveVehicleMissionType(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetActiveVehicleMissionType(_vehicle);
}
/**
 * Hash: 0x3A8CADC7D37AACC5 | ApiSet: undefined
 */
export function getClipSetForScriptedGunTask(p0) {
    return GetClipSetForScriptedGunTask(p0);
}
/**
 * ```
 * From the b617d scripts:
 * `TASK::DELETE_PATROL_ROUTE("miss_merc0");`
 * `TASK::DELETE_PATROL_ROUTE("miss_merc1");`
 * `TASK::DELETE_PATROL_ROUTE("miss_merc2");`
 * `TASK::DELETE_PATROL_ROUTE("miss_dock");`
 * ```
 * Hash: 0x7767DD9D65E91319 | ApiSet: undefined
 */
export function deletePatrolRoute(patrolRoute) {
    DeletePatrolRoute(patrolRoute);
}
/**
 * ```
 * Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
 * ```
 * Hash: 0xB0760331C7AA4155 | ApiSet: undefined
 */
export function getIsTaskActive(ped, taskIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetIsTaskActive(_ped, taskIndex);
}
/**
 * ```
 * Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
 * Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
 * Looks like the native returns an int for the path's state:
 * 1 - ???
 * 2 - ???
 * 3 - Finished Generating
 * ```
 * Hash: 0xC6F5C0BCDC74D62D | ApiSet: undefined
 */
export function getNavmeshRouteDistanceRemaining(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetNavmeshRouteDistanceRemaining(_ped);
}
/**
 * ```
 * Checks if there is a cover point at position
 * ```
 * Hash: 0xA98B8E3C088E5A31 | ApiSet: undefined
 */
export function doesScriptedCoverPointExistAtCoords(position) {
    return DoesScriptedCoverPointExistAtCoords(position.x, position.y, position.z);
}
/**
 * Hash: 0xCB4E8BE8A0063C5D | ApiSet: undefined
 */
export function getIsWaypointRecordingLoaded(name) {
    return GetIsWaypointRecordingLoaded(name);
}
/**
 * Hash: 0x8517D4A6CA8513ED | ApiSet: undefined
 */
export function getPedDesiredMoveBlendRatio(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedDesiredMoveBlendRatio(_ped);
}
/**
 * Hash: 0xE6A877C64CAF1BC5 | ApiSet: undefined
 */
export function getPedWaypointDistance(p0) {
    return GetPedWaypointDistance(p0);
}
/**
 * Hash: 0x2720AAA75001E094 | ApiSet: undefined
 */
export function getPedWaypointProgress(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPedWaypointProgress(_ped);
}
/**
 * See [`GET_NAVMESH_ROUTE_DISTANCE_REMAINING`](#\_0xC6F5C0BCDC74D62D) for more details.
 * Hash: 0x632E831F382A0FA8 | ApiSet: undefined
 */
export function getNavmeshRouteResult(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetNavmeshRouteResult(_ped);
}
/**
 * Gets the status of a spesifed script-assigned task on the given ped. The return value is always an int between 0-7.
 * You can set taskHash to `SCRIPT_TASK_ANY` to check if any task is active, it will return 1 for active, 3 for no active.
 * `SCRIPT_TASK_INVALID` can be similarly used, it returns 7 if there are any active task, and 3 if there are no active tasks.
 * taskHash list: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
 * Returns:
 * ```
 * 0 = WAITING_TO_START_TASK
 * 1 = PERFORMING_TASK
 * 2 = DORMANT_TASK
 * 3 = VACANT_STAGE
 * 7 = TASK_FINISHED_OR_NOT_FOUND
 * ```
 * Hash: 0x77F1BEB8863288D5 | ApiSet: undefined
 */
export function getScriptTaskStatus(ped, taskHash) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof taskHash === 'string')
        taskHash = this.getHashKey(taskHash);
    return GetScriptTaskStatus(_ped, taskHash);
}
/**
 * Hash: 0x47619ABE8B268C60 | ApiSet: undefined
 */
export function getPhoneGestureAnimCurrentTime(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPhoneGestureAnimCurrentTime(_ped);
}
/**
 * Hash: 0x1EE0F68A7C25DEC6 | ApiSet: undefined
 */
export function getPhoneGestureAnimTotalTime(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetPhoneGestureAnimTotalTime(_ped);
}
/**
 * ```
 * returned values:
 * 0 to 7 = task that's currently in progress, 0 meaning the first one.
 * -1 no task sequence in progress.
 * ```
 * Hash: 0x00A9010CFE1E3533 | ApiSet: undefined
 */
export function getSequenceProgress(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetSequenceProgress(_ped);
}
/**
 * Hash: 0x594A1028FC2A3E85 | ApiSet: undefined
 */
export function getScriptedCoverPointCoords(coverpoint) {
    return new Vector3(GetScriptedCoverPointCoords(coverpoint));
}
/**
 * Hash: 0xA7FFBA498E4AAF67 | ApiSet: undefined
 */
export function getTaskMoveNetworkSignalBool(ped, signalName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetTaskMoveNetworkSignalBool(_ped, signalName);
}
/**
 * Hash: 0xB4F47213DF45A64C | ApiSet: undefined
 */
export function getTaskMoveNetworkEvent(ped, eventName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetTaskMoveNetworkEvent(_ped, eventName);
}
/**
 * Hash: 0x717E4D1F2048376D | ApiSet: undefined
 */
export function getTaskMoveNetworkState(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetTaskMoveNetworkState(_ped);
}
/**
 * Hash: 0xA5B769058763E497 | ApiSet: undefined
 */
export function getWaypointDistanceAlongRoute(p0, p1) {
    return GetWaypointDistanceAlongRoute(p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x44AB0B3AFECCE242 | ApiSet: undefined
 */
export function getTaskMoveNetworkSignalFloat(ped, signalName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return GetTaskMoveNetworkSignalFloat(_ped, signalName);
}
/**
 * Hash: 0x24A2AD74FA9814E2 | ApiSet: undefined
 */
export function isMoveBlendRatioSprinting(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsMoveBlendRatioSprinting(_ped);
}
/**
 * Hash: 0x9824CFF8FC66E159 | ApiSet: undefined
 */
export function getVehicleWaypointProgress(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleWaypointProgress(_vehicle);
}
/**
 * Hash: 0x8785E6E40C7A8818 | ApiSet: undefined
 */
export function isDrivebyTaskUnderneathDrivingTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsDrivebyTaskUnderneathDrivingTask(_ped);
}
/**
 * Hash: 0x416B62AC8B9E5BBD | ApiSet: undefined
 */
export function getVehicleWaypointTargetPoint(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleWaypointTargetPoint(_vehicle);
}
/**
 * Hash: 0xA320EF046186FA3B | ApiSet: undefined
 */
export function isMountedWeaponTaskUnderneathDrivingTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsMountedWeaponTaskUnderneathDrivingTask(_ped);
}
/**
 * Hash: 0xD4D8636C0199A939 | ApiSet: undefined
 */
export function isMoveBlendRatioRunning(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsMoveBlendRatioRunning(_ped);
}
/**
 * This is a stricter version of [`IS_PED_USING_ANY_SCENARIO`](#\_0x57AB4A3080F85143). It only returns true if the ped is playing the ambient animations associated with the scenario.
 * Hash: 0xAA135F9482C82CC3 | ApiSet: undefined
 */
export function isPedActiveInScenario(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedActiveInScenario(_ped);
}
/**
 * Hash: 0xF133BBBE91E1691F | ApiSet: undefined
 */
export function isMoveBlendRatioWalking(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsMoveBlendRatioWalking(_ped);
}
/**
 * Hash: 0x74E559B3BC910685 | ApiSet: undefined
 */
export function isPedCuffed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedCuffed(_ped);
}
/**
 * Hash: 0x2A74E1D5F2F00EEC | ApiSet: undefined
 */
export function isPedGettingUp(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedGettingUp(_ped);
}
/**
 * Hash: 0xC5286FFC176F28A2 | ApiSet: undefined
 */
export function isPedRunning(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRunning(_ped);
}
/**
 * Hash: 0x3DC52677769B4AE0 | ApiSet: undefined
 */
export function isPedRunningArrestTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedRunningArrestTask(_ped);
}
/**
 * Hash: 0x349CE7B56DAFD95C | ApiSet: undefined
 */
export function isMoveBlendRatioStill(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsMoveBlendRatioStill(_ped);
}
/**
 * Hash: 0x57E457CD2C0FC168 | ApiSet: undefined
 */
export function isPedSprinting(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedSprinting(_ped);
}
/**
 * Hash: 0x621C6E4729388E41 | ApiSet: undefined
 */
export function isPedPlayingBaseClipInScenario(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedPlayingBaseClipInScenario(_ped);
}
/**
 * ```
 * This function is hard-coded to always return 0.
 * ```
 * Hash: 0x90A09F3A45FED688 | ApiSet: undefined
 */
export function isPedBeingArrested(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedBeingArrested(_ped);
}
/**
 * ```
 * What's strafing?
 * ```
 * Hash: 0xE45B7F222DE47E09 | ApiSet: undefined
 */
export function isPedStrafing(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedStrafing(_ped);
}
/**
 * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
 * Hash: 0xDEB6D52126E7D640 | ApiSet: undefined
 */
export function isPedInWrithe(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedInWrithe(_ped);
}
/**
 * Hash: 0xAC29253EEF8F0180 | ApiSet: undefined
 */
export function isPedStill(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedStill(_ped);
}
/**
 * Hash: 0xB8EBB1E9D3588C10 | ApiSet: undefined
 */
export function isPlayingPhoneGestureAnim(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPlayingPhoneGestureAnim(_ped);
}
/**
 * Hash: 0x788756D73AC2E07C | ApiSet: undefined
 */
export function isScenarioOccupied(p0, p1, p2, p3, p4) {
    return IsScenarioOccupied(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0xDE4C184B2B9B071A | ApiSet: undefined
 */
export function isPedWalking(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsPedWalking(_ped);
}
/**
 * Hash: 0x30ED88D5E0C56A37 | ApiSet: undefined
 */
export function isTaskMoveNetworkReadyForTransition(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsTaskMoveNetworkReadyForTransition(_ped);
}
/**
 * Hash: 0xE03B3F2D3DC59B64 | ApiSet: undefined
 */
export function isWaypointPlaybackGoingOnForPed(p0) {
    return IsWaypointPlaybackGoingOnForPed(p0);
}
/**
 * ```
 * Occurrences in the b617d scripts:
 * "PROP_HUMAN_SEAT_CHAIR",
 * "WORLD_HUMAN_DRINKING",
 * "WORLD_HUMAN_HANG_OUT_STREET",
 * "WORLD_HUMAN_SMOKING",
 * "WORLD_MOUNTAIN_LION_WANDER",
 * "WORLD_HUMAN_DRINKING"
 * `Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.`
 * `scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.`
 * ```
 * Hash: 0x3A815DB3EA088722 | ApiSet: undefined
 */
export function isScenarioTypeEnabled(scenarioType) {
    return IsScenarioTypeEnabled(scenarioType);
}
/**
 * ```
 * Occurrences in the b617d scripts:
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "BLIMP",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "KORTZ_SECURITY",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5",
 * "Rampage1",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE"
 * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
 * `if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {`
 * `else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {`
 * ```
 * Hash: 0x367A09DED4E05B99 | ApiSet: undefined
 */
export function isScenarioGroupEnabled(scenarioGroup) {
    return IsScenarioGroupEnabled(scenarioGroup);
}
/**
 * Doesn't actually return anything.
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x0FFB3C758E8C07B9 | ApiSet: undefined
 */
export function _0x0FFB3C758E8C07B9(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x0FFB3C758E8C07B9', _ped, p1);
}
/**
 * ```
 * IS_*
 * ```
 * Hash: 0x3E38E28A1D80DDF6 | ApiSet: undefined
 */
export function _0x3E38E28A1D80DDF6(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0x3E38E28A1D80DDF6', _ped);
}
/**
 * Hash: 0xF5134943EA29868C | ApiSet: undefined
 */
export function isWaypointPlaybackGoingOnForVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsWaypointPlaybackGoingOnForVehicle(_vehicle);
}
/**
 * Hash: 0x921CE12C489C4C41 | ApiSet: undefined
 */
export function isTaskMoveNetworkActive(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return IsTaskMoveNetworkActive(_ped);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x29682E2CCF21E9B5 | ApiSet: undefined
 */
export function _0x29682E2CCF21E9B5(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
    Citizen.invokeNative('0x29682E2CCF21E9B5', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x8423541E8B3A1589 | ApiSet: undefined
 */
export function _0x8423541E8B3A1589(p0, p1, p2) {
    Citizen.invokeNative('0x8423541E8B3A1589', p0, p1, p2);
}
/**
 * ```
 * REMOVE_*
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xFA83CA6776038F64 | ApiSet: undefined
 */
export function _0xFA83CA6776038F64(position) {
    Citizen.invokeNative('0xFA83CA6776038F64', position.x, position.y, position.z);
}
/**
 * Hash: 0x1F351CF1C6475734 | ApiSet: undefined
 */
export function _0x1F351CF1C6475734(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
    Citizen.invokeNative('0x1F351CF1C6475734', p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * Related to [`_CLEAR_VEHICLE_TASKS`](#\_0xDBBC7A2432524127) and requires more research (e.g., \_CLEAR_VEHICLE_SECONDARY_TASKS).
 * ```
 * CLEAR_*
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x53DDC75BC3AC0A90 | ApiSet: undefined
 */
export function _0x53DDC75BC3AC0A90(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x53DDC75BC3AC0A90', _vehicle);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x9D252648778160DF | ApiSet: undefined
 */
export function _0x9D252648778160DF(p0) {
    return Citizen.invokeNative('0x9D252648778160DF', p0);
}
/**
 * Hash: 0x77A1EEC547E7FCF1 | ApiSet: undefined
 */
export function playEntityScriptedAnim(p0, p4, p5) {
    return PlayEntityScriptedAnim(p0, p4, p5);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x6100B3CEFD43452E | ApiSet: undefined
 */
export function _0x6100B3CEFD43452E(p0) {
    Citizen.invokeNative('0x6100B3CEFD43452E', p0);
}
/**
 * ```
 * Used only once in the scripts (fm_mission_controller) like so:
 * `TASK::_0xAB13A5565480B6D9(iLocal_3160, "Cutting");`
 * SET_*
 * ```
 * Hash: 0xAB13A5565480B6D9 | ApiSet: undefined
 */
export function _0xAB13A5565480B6D9(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return Citizen.invokeNative('0xAB13A5565480B6D9', _ped, p1);
}
/**
 * Hash: 0xAE287C923D891715 | ApiSet: undefined
 */
export function removeCoverPoint(coverpoint) {
    RemoveCoverPoint(coverpoint);
}
/**
 * Hash: 0x295E3CCEC879CCD7 | ApiSet: undefined
 */
export function pedHasUseScenarioTask(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return PedHasUseScenarioTask(_ped);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x8634CEF2522D987B | ApiSet: undefined
 */
export function _0x8634CEF2522D987B(ped, p1, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    Citizen.invokeNative('0x8634CEF2522D987B', _ped, p1, value);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x748040460F8DF5DC | ApiSet: undefined
 */
export function playAnimOnRunningScenario(ped, animDict, animName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    PlayAnimOnRunningScenario(_ped, animDict, animName);
}
/**
 * Hash: 0xDB6708C0B46F56D8 | ApiSet: undefined
 */
export function removeAllCoverBlockingAreas() {
    RemoveAllCoverBlockingAreas();
}
/**
 * ```
 * The patrol route name must starts with "miss_" to be properly created.
 * patrolRoutes found in the b617d scripts:
 * "miss_Ass0",
 * "miss_Ass1",
 * "miss_Ass2",
 * "miss_Ass3",
 * "miss_Ass4",
 * "miss_Ass5",
 * "miss_Ass6",
 * "MISS_PATROL_6",
 * "MISS_PATROL_7",
 * "MISS_PATROL_8",
 * "MISS_PATROL_9",
 * "miss_Tower_01",
 * "miss_Tower_02",
 * "miss_Tower_03",
 * "miss_Tower_04",
 * "miss_Tower_05",
 * "miss_Tower_06",
 * "miss_Tower_07",
 * "miss_Tower_08",
 * "miss_Tower_10"
 * ```
 * Hash: 0xA36BFB5EE89F3D82 | ApiSet: undefined
 */
export function openPatrolRoute(patrolRoute) {
    OpenPatrolRoute(patrolRoute);
}
/**
 * ### NOTE
 * If this returns 0 that means it failed to get a sequence id.
 * If you fail to call [`CLOSE_SEQUENCE_TASK`](#\_0x39E72BC99E6360CB) and [`CLEAR_SEQUENCE_TASK`](#\_0x3841422E9C488D8C) the sequence system can get stuck in a broken state until you restart your client.
 * Hash: 0xE8854A4326B9E12B | ApiSet: undefined
 */
export function openSequenceTask() {
    return OpenSequenceTask();
}
/**
 * Hash: 0x70033C3CC29A1FF4 | ApiSet: undefined
 */
export function setAnimLooped(p0, p1, p2, p3) {
    SetAnimLooped(p0, p1, p2, p3);
}
/**
 * Hash: 0xD01015C7316AE176 | ApiSet: undefined
 */
export function requestTaskMoveNetworkStateTransition(ped, name) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return RequestTaskMoveNetworkStateTransition(_ped, name);
}
/**
 * Hash: 0x032D49C5E359C847 | ApiSet: undefined
 */
export function setAnimRate(p0, p1, p2, p3) {
    SetAnimRate(p0, p1, p2, p3);
}
/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * Max number of loaded recordings is 32.
 * ```
 * Hash: 0x9EEFB62EB27B5792 | ApiSet: undefined
 */
export function requestWaypointRecording(name) {
    RequestWaypointRecording(name);
}
/**
 * Hash: 0xFF1B8B4AA1C25DC8 | ApiSet: undefined
 */
export function removeWaypointRecording(name) {
    RemoveWaypointRecording(name);
}
/**
 * Sets the driving style for a ped currently performing a driving task.
 * Each flag in the `eVehicleDrivingFlags` enum can be combined to create a driving style, with each enabling or disabling a specific driving behavior. The driving style can be set to one of the predefined driving styles, or a custom driving style can be created by combining the flags. This can be done by using the bitwise OR operator (`|`) to combine the flags or by adding the decimal values of the flags together.
 * ```cpp
 * enum eVehicleDrivingFlags
 * {
 * None = 0,
 * StopForVehicles = 1,
 * StopForPeds = 2,
 * SwerveAroundAllVehicles = 4,
 * SteerAroundStationaryVehicles = 8,
 * SteerAroundPeds = 16,
 * SteerAroundObjects = 32,
 * DontSteerAroundPlayerPed = 64,
 * StopAtTrafficLights = 128,
 * GoOffRoadWhenAvoiding = 256,
 * AllowGoingWrongWay = 512,
 * Reverse = 1024,
 * UseWanderFallbackInsteadOfStraightLine = 2048,
 * AvoidRestrictedAreas = 4096,
 * PreventBackgroundPathfinding = 8192,
 * AdjustCruiseSpeedBasedOnRoadSpeed = 16384,
 * UseShortCutLinks = 262144,
 * ChangeLanesAroundObstructions = 524288,
 * UseSwitchedOffNodes = 2097152,
 * PreferNavmeshRoute = 4194304,
 * PlaneTaxiMode = 8388608,
 * ForceStraightLine = 16777216,
 * UseStringPullingAtJunctions = 33554432,
 * TryToAvoidHighways = 536870912,
 * ForceJoinInRoadDirection = 1073741824,
 * StopAtDestination = 2147483648,
 * // StopForVehicles | StopForPeds | SteerAroundObjects | SteerAroundStationaryVehicles | StopAtTrafficLights | UseShortCutLinks | ChangeLanesAroundObstructions
 * DrivingModeStopForVehicles = 786603,
 * // StopForVehicles | StopForPeds | StopAtTrafficLights | UseShortCutLinks
 * DrivingModeStopForVehiclesStrict = 262275,
 * // SwerveAroundAllVehicles | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions | StopForVehicles
 * DrivingModeAvoidVehicles = 786469,
 * // SwerveAroundAllVehicles | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions
 * DrivingModeAvoidVehiclesReckless = 786468,
 * // StopForVehicles | SteerAroundStationaryVehicles | StopForPeds | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions
 * DrivingModeStopForVehiclesIgnoreLights = 786475,
 * // SwerveAroundAllVehicles | StopAtTrafficLights | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions | StopForVehicles
 * DrivingModeAvoidVehiclesObeyLights = 786597,
 * // SwerveAroundAllVehicles | StopAtTrafficLights | StopForPeds | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions | StopForVehicles
 * DrivingModeAvoidVehiclesStopForPedsObeyLights = 786599,
 * }
 * ```
 * Hash: 0xDACE1BE37D88AF67 | ApiSet: undefined
 */
export function setDriveTaskDrivingStyle(ped, drivingStyle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetDriveTaskDrivingStyle(_ped, drivingStyle);
}
/**
 * Hash: 0xDD902D0349AFAD3A | ApiSet: undefined
 */
export function resetScenarioGroupsEnabled() {
    ResetScenarioGroupsEnabled();
}
/**
 * Hash: 0x0D40EE2A7F2B2D6D | ApiSet: undefined
 */
export function resetScenarioTypesEnabled() {
    ResetScenarioTypesEnabled();
}
/**
 * Hash: 0x4202BBCB8684563D | ApiSet: undefined
 */
export function resetExclusiveScenarioGroup() {
    ResetExclusiveScenarioGroup();
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xDDF3CB5A0A4C0B49 | ApiSet: undefined
 */
export function setAnimPhase(entity, p1, p2, p3) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetAnimPhase(_entity, p1, p2, p3);
}
/**
 * Hash: 0x5C9B84BD7D31D908 | ApiSet: undefined
 */
export function setDriveTaskCruiseSpeed(driver, cruiseSpeed) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    SetDriveTaskCruiseSpeed(_driver, cruiseSpeed);
}
/**
 * Hash: 0x207F1A47C0342F48 | ApiSet: undefined
 */
export function setAnimWeight(p0, p1, p2, p3, p4) {
    SetAnimWeight(p0, p1, p2, p3, p4);
}
/**
 * ```
 * Groups found in the scripts used with this native:
 * "AMMUNATION",
 * "QUARRY",
 * "Triathlon_1",
 * "Triathlon_2",
 * "Triathlon_3"
 * ```
 * Hash: 0x535E97E1F7FC0C6A | ApiSet: undefined
 */
export function setExclusiveScenarioGroup(scenarioGroup) {
    SetExclusiveScenarioGroup(scenarioGroup);
}
/**
 * ```
 * For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
 * ```
 * Hash: 0xE5B302114D8162EE | ApiSet: undefined
 */
export function setDrivebyTaskTarget(shootingPed, targetPed, targetVehicle, position) {
    const _shootingPed = shootingPed instanceof Ped ? shootingPed.handle() : shootingPed;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    const _targetVehicle = targetVehicle instanceof Entity ? targetVehicle.handle() : targetVehicle;
    SetDrivebyTaskTarget(_shootingPed, _targetPed, _targetVehicle, position.x, position.y, position.z);
}
/**
 * ```
 * Birds will try to reach the given height.
 * ```
 * Hash: 0x6C6B148586F934F7 | ApiSet: undefined
 */
export function setGlobalMinBirdFlightHeight(height) {
    SetGlobalMinBirdFlightHeight(height);
}
/**
 * Hash: 0x404A5AA9B9F0B746 | ApiSet: undefined
 */
export function setDriveTaskMaxCruiseSpeed(p0, p1) {
    SetDriveTaskMaxCruiseSpeed(p0, p1);
}
/**
 * Hash: 0x8C825BDC7741D37C | ApiSet: undefined
 */
export function setHighFallTask(ped, duration, p2, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetHighFallTask(_ped, duration, p2, p3);
}
/**
 * <strong>This native does absolutely nothing, just a nullsub</strong>
 * Hash: 0xF1B9F16E89E2C93A | ApiSet: undefined
 */
export function setNextDesiredMoveState(p0) {
    SetNextDesiredMoveState(p0);
}
/**
 * ```
 * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
 * ```
 * ```
 * NativeDB Added Parameter 7: Any p6
 * NativeDB Added Parameter 8: Any p7
 * ```
 * Hash: 0xCCD892192C6D2BB9 | ApiSet: undefined
 */
export function setMountedWeaponTarget(shootingPed, targetPed, targetVehicle, position) {
    const _shootingPed = shootingPed instanceof Ped ? shootingPed.handle() : shootingPed;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    const _targetVehicle = targetVehicle instanceof Entity ? targetVehicle.handle() : targetVehicle;
    SetMountedWeaponTarget(_shootingPed, _targetPed, _targetVehicle, position.x, position.y, position.z);
}
/**
 * Hash: 0xC313379AF0FCEDA7 | ApiSet: undefined
 */
export function setParachuteTaskTarget(ped, position) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetParachuteTaskTarget(_ped, position.x, position.y, position.z);
}
/**
 * Prevents a ped from playing ambient idle animations.
 * **Note:** This native must be called every frame.
 * Hash: 0x8FD89A6240813FD0 | ApiSet: undefined
 */
export function setPedCanPlayAmbientIdles(ped, bBlockIdleClips, bRemoveIdleClipIfPlaying) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedCanPlayAmbientIdles(_ped, bBlockIdleClips, bRemoveIdleClipIfPlaying);
}
/**
 * Hash: 0x0729BAC1B8C64317 | ApiSet: undefined
 */
export function setParachuteTaskThrust(ped, thrust) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetParachuteTaskThrust(_ped, thrust);
}
/**
 * Hash: 0x4455517B28441E60 | ApiSet: undefined
 */
export function setPedPathAvoidFire(ped, avoidFire) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPathAvoidFire(_ped, avoidFire);
}
/**
 * Hash: 0x1E982AC8716912C5 | ApiSet: undefined
 */
export function setPedDesiredMoveBlendRatio(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedDesiredMoveBlendRatio(_ped, p1);
}
/**
 * Hash: 0xE361C5C71C431A4F | ApiSet: undefined
 */
export function setPedPathCanDropFromHeight(ped, Toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPathCanDropFromHeight(_ped, Toggle);
}
/**
 * Hash: 0x8E06A6FE76C9EFF4 | ApiSet: undefined
 */
export function setPedPathCanUseClimbovers(ped, Toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPathCanUseClimbovers(_ped, Toggle);
}
/**
 * Hash: 0x38FE1EC73743793C | ApiSet: undefined
 */
export function setPedPathPreferToAvoidWater(ped, avoidWater) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPathPreferToAvoidWater(_ped, avoidWater);
}
/**
 * Hash: 0xF35425A4204367EC | ApiSet: undefined
 */
export function setPedPathMayEnterWater(ped, mayEnterWater) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPathMayEnterWater(_ped, mayEnterWater);
}
/**
 * ```
 * Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
 * ```
 * Hash: 0x88E32DB8C1A4AA4B | ApiSet: undefined
 */
export function setPedPathClimbCostModifier(ped, modifier) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPathClimbCostModifier(_ped, modifier);
}
/**
 * Hash: 0xB0A6CFD2C69C1088 | ApiSet: undefined
 */
export function setTaskMoveNetworkSignalBool(ped, signalName, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetTaskMoveNetworkSignalBool(_ped, signalName, value);
}
/**
 * ```
 * seems to enable/disable specific scenario-types from happening in the game world.
 * Here are some scenario types from the scripts:
 * "WORLD_MOUNTAIN_LION_REST"
 * "WORLD_MOUNTAIN_LION_WANDER"
 * "DRIVE"
 * "WORLD_VEHICLE_POLICE_BIKE"
 * "WORLD_VEHICLE_POLICE_CAR"
 * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
 * "WORLD_VEHICLE_DRIVE_SOLO"
 * "WORLD_VEHICLE_BIKER"
 * "WORLD_VEHICLE_DRIVE_PASSENGERS"
 * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
 * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
 * "PROP_HUMAN_SEAT_CHAIR"
 * "WORLD_VEHICLE_ATTRACTOR"
 * "WORLD_HUMAN_LEANING"
 * "WORLD_HUMAN_HANG_OUT_STREET"
 * "WORLD_HUMAN_DRINKING"
 * "WORLD_HUMAN_SMOKING"
 * "WORLD_HUMAN_GUARD_STAND"
 * "WORLD_HUMAN_CLIPBOARD"
 * "WORLD_HUMAN_HIKER"
 * "WORLD_VEHICLE_EMPTY"
 * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
 * "WORLD_HUMAN_PAPARAZZI"
 * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
 * "WORLD_VEHICLE_PARK_PARALLEL"
 * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
 * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
 * "WORLD_VEHICLE_TRUCK_LOGS"
 * `scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.`
 * ```
 * Hash: 0xEB47EC4E34FB7EE1 | ApiSet: undefined
 */
export function setScenarioTypeEnabled(scenarioType, toggle) {
    SetScenarioTypeEnabled(scenarioType, toggle);
}
/**
 * ```
 * Occurrences in the b617d scripts: pastebin.com/Tvg2PRHU
 * ```
 * Hash: 0x02C8E5B49848664E | ApiSet: undefined
 */
export function setScenarioGroupEnabled(scenarioGroup, p1) {
    SetScenarioGroupEnabled(scenarioGroup, p1);
}
/**
 * Hash: 0x77A5B103C87F476E | ApiSet: undefined
 */
export function setPedPathCanUseLadders(ped, Toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetPedPathCanUseLadders(_ped, Toggle);
}
/**
 * ```
 * * Flag 1: Aggressive ramming of suspect
 * * Flag 2: Ram attempts
 * * Flag 8: Medium-aggressive boxing tactic with a bit of PIT
 * * Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
 * * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
 * ```
 * Hash: 0xCC665AAC360D31E7 | ApiSet: undefined
 */
export function setTaskVehicleChaseBehaviorFlag(ped, flag, set) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetTaskVehicleChaseBehaviorFlag(_ped, flag, set);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x373EF409B82697A3 | ApiSet: undefined
 */
export function setTaskMoveNetworkSignalFloat2(ped, signalName, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetTaskMoveNetworkSignalFloat2(_ped, signalName, value);
}
/**
 * ```
 * `p0 - PLAYER::PLAYER_PED_ID();`
 * p1 - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
 * p2 - From what i can see it goes up to 1f (maybe).
 * -LcGamingHD
 * `Example: TASK::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);`
 * ```
 * Hash: 0xD5BB4025AE449A4E | ApiSet: undefined
 */
export function setTaskMoveNetworkSignalFloat(ped, signalName, value) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetTaskMoveNetworkSignalFloat(_ped, signalName, value);
}
/**
 * Hash: 0xED98E10B0AFCE4B4 | ApiSet: undefined
 */
export function setPedWaypointRouteOffset(p0, p1, p2, p3) {
    return SetPedWaypointRouteOffset(p0, p1, p2, p3);
}
/**
 * Hash: 0x58C70CF3A41E4AE7 | ApiSet: undefined
 */
export function setSequenceToRepeat(taskSequenceId, repeat) {
    SetSequenceToRepeat(taskSequenceId, repeat);
}
/**
 * Hash: 0x639B642FACBE4EDD | ApiSet: undefined
 */
export function setTaskVehicleChaseIdealPursuitDistance(ped, distance) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetTaskVehicleChaseIdealPursuitDistance(_ped, distance);
}
/**
 * ```
 * Makes the specified ped achieve the specified heading.
 * pedHandle: The handle of the ped to assign the task to.
 * heading: The desired heading.
 * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
 * ```
 * Hash: 0x93B93A37987F1F3D | ApiSet: undefined
 */
export function taskAchieveHeading(ped, heading, timeout) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskAchieveHeading(_ped, heading, timeout);
}
/**
 * ```
 * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * ```
 * Hash: 0x9B53BB6E8943AF53 | ApiSet: undefined
 */
export function taskAimGunAtEntity(ped, entity, duration, bInstantBlendToAim) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    TaskAimGunAtEntity(_ped, _entity, duration, bInstantBlendToAim);
}
/**
 * ```
 * Looks like p1 may be a flag, still need to do some research, though.
 * ```
 * Hash: 0xEE08C992D238C5D1 | ApiSet: undefined
 */
export function stopAnimPlayback(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopAnimPlayback(_ped, p1, p2);
}
/**
 * Hash: 0x6671F3EEC681BDA1 | ApiSet: undefined
 */
export function taskAimGunAtCoord(ped, position, time, bInstantBlendToAim, bPlayAimIntro) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskAimGunAtCoord(_ped, position.x, position.y, position.z, time, bInstantBlendToAim, bPlayAimIntro);
}
/**
 * Hash: 0x8605AF0DE8B3A5AC | ApiSet: undefined
 */
export function taskAimGunScriptedWithTarget(ped, targetPed, position, iGunTaskType, bDisableBlockingClip, bForceAim) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    if (typeof iGunTaskType === 'string')
        iGunTaskType = this.getHashKey(iGunTaskType);
    TaskAimGunScriptedWithTarget(_ped, _targetPed, position.x, position.y, position.z, iGunTaskType, bDisableBlockingClip, bForceAim);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x97FF36A1D40EA00A | ApiSet: undefined
 */
export function stopAnimTask(ped, animDictionary, animationName, animExitSpeed) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    StopAnimTask(_ped, animDictionary, animationName, animExitSpeed);
}
/**
 * ```
 * p2 tend to be 16, 17 or 1
 * p3 to p7 tend to be 0.0
 * ```
 * Hash: 0x8C338E0263E4FD19 | ApiSet: undefined
 */
export function taskChatToPed(ped, target, p2, p3, p4, p5, p6, p7) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    TaskChatToPed(_ped, _target, p2, p3, p4, p5, p6, p7);
}
/**
 * ```
 * Example from "me_amanda1.ysc.c4":
 * `TASK::TASK_ARREST_PED(l_19F \/\* This is a Ped \*\/ , PLAYER::PLAYER_PED_ID());`
 * Example from "armenian1.ysc.c4":
 * `if (!PED::IS_PED_INJURED(l_B18[0\/\*1\*\/])) {`
 * `TASK::TASK_ARREST_PED(l_B18[0\/\*1\*\/], PLAYER::PLAYER_PED_ID());`
 * }
 * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
 * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
 * ```
 * Hash: 0xF3B9A78A178572B1 | ApiSet: undefined
 */
export function taskArrestPed(ped, target) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    TaskArrestPed(_ped, _target);
}
/**
 * Hash: 0x19D1B791CB3670FE | ApiSet: undefined
 */
export function taskAgitatedAction(ped, ped2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _ped2 = ped2 instanceof Ped ? ped2.handle() : ped2;
    TaskAgitatedAction(_ped, _ped2);
}
/**
 * Hash: 0x95A6C46A31D1917D | ApiSet: undefined
 */
export function taskClearDefensiveArea(p0) {
    TaskClearDefensiveArea(p0);
}
/**
 * Hash: 0x7A192BE16D373D00 | ApiSet: undefined
 */
export function taskAimGunScripted(ped, scriptTask, bDisableBlockingClip, bInstantBlendToAim) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof scriptTask === 'string')
        scriptTask = this.getHashKey(scriptTask);
    TaskAimGunScripted(_ped, scriptTask, bDisableBlockingClip, bInstantBlendToAim);
}
/**
 * All parameters except ped and boat are optional, with `pedTarget`, `vehicleTarget`, `x`, `y`, `z` being dependent on `missionType` (ie. Attack/Flee mission types require a target ped/vehicle, whereas GoTo mission types require either `x`, `y`, `z` or a target ped/vehicle).
 * If you don't want to use a parameter; pass `0.0f` for `x`, `y` and `z`, `0` for `pedTarget`, `vehicleTarget` and other int parameters, and `-1.0f` for the remaining float parameters.
 * ```cpp
 * enum eBoatMissionFlags
 * {
 * None = 0,
 * StopAtEnd = 1,
 * StopAtShore = 2,
 * AvoidShore = 4,
 * PreferForward = 8,
 * NeverStop = 16,
 * NeverNavMesh = 32,
 * NeverRoute = 64,
 * ForceBeached = 128,
 * UseWanderRoute = 256,
 * UseFleeRoute = 512,
 * NeverPause = 1024,
 * // StopAtEnd | StopAtShore | AvoidShore
 * DefaultSettings = 7,
 * // StopAtEnd | StopAtShore | AvoidShore | PreferForward | NeverNavMesh | NeverRoute
 * OpenOceanSettings = 111,
 * // StopAtEnd | StopAtShore | AvoidShore | PreferForward | NeverNavMesh | NeverPause
 * BoatTaxiSettings = 1071,
 * }
 * ```
 * Hash: 0x15C86013127CE63F | ApiSet: undefined
 */
export function taskBoatMission(ped, boat, vehicleTarget, pedTarget, position, missionType, speed, drivingStyle, radius, missionFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    const _vehicleTarget = vehicleTarget instanceof Entity ? vehicleTarget.handle() : vehicleTarget;
    const _pedTarget = pedTarget instanceof Ped ? pedTarget.handle() : pedTarget;
    TaskBoatMission(_ped, _boat, _vehicleTarget, _pedTarget, position.x, position.y, position.z, missionType, speed, drivingStyle, radius, missionFlags);
}
/**
 * Hash: 0xB6C987F9285A3814 | ApiSet: undefined
 */
export function taskClimbLadder(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskClimbLadder(_ped, p1);
}
/**
 * ```
 * Not clear what it actually does, but here's how script uses it -
 * `if (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...)`
 * {
 * `if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))`
 * {
 * `TASK::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());`
 * }
 * ...
 * }
 * Another one where it doesn't "look" at current player -
 * `TASK::TASK_PLAY_ANIM(l_3ED, "missheist_agency2aig_2", "look_at_phone_a", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0);`
 * `PED::_2208438012482A1A(l_3ED, 0, 0);`
 * `TASK::TASK_CLEAR_LOOK_AT(l_3ED);`
 * ```
 * Hash: 0x0F804F1DB19B9689 | ApiSet: undefined
 */
export function taskClearLookAt(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskClearLookAt(_ped);
}
/**
 * ```
 * Climbs or vaults the nearest thing.
 * ```
 * Hash: 0x89D9FCC2435112F1 | ApiSet: undefined
 */
export function taskClimb(ped, unused) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskClimb(_ped, unused);
}
/**
 * ```
 * Despite its name, it only attacks ONE hated target. The one closest hated target.
 * p2 seems to be always 0
 * ```
 * Hash: 0x7BF835BB9E2698C8 | ApiSet: undefined
 */
export function taskCombatHatedTargetsAroundPed(ped, radius, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskCombatHatedTargetsAroundPed(_ped, radius, p2);
}
/**
 * Hash: 0x2BBA30B854534A0C | ApiSet: undefined
 */
export function taskCombatHatedTargetsAroundPedTimed(p0, p1, p2, p3) {
    TaskCombatHatedTargetsAroundPedTimed(p0, p1, p2, p3);
}
/**
 * ```
 * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
 * ```
 * Hash: 0x4CF5F55DAC3280A0 | ApiSet: undefined
 */
export function taskCombatHatedTargetsInArea(ped, position, radius, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskCombatHatedTargetsInArea(_ped, position.x, position.y, position.z, radius, p5);
}
/**
 * Hash: 0x944F30DCB7096BDE | ApiSet: undefined
 */
export function taskCombatPedTimed(p0, ped, p2, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskCombatPedTimed(p0, _ped, p2, p3);
}
/**
 * ```
 * Makes the specified ped attack the target ped.
 * p2 should be 0
 * p3 should be 16
 * ```
 * Hash: 0xF166E48407BAC484 | ApiSet: undefined
 */
export function taskCombatPed(ped, targetPed, p2, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    TaskCombatPed(_ped, _targetPed, p2, p3);
}
/**
 * ```
 * speed 1.0 = walk, 2.0 = run
 * p5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle
 * p6 is always 0
 * ```
 * Hash: 0xC20E50AA46D09CA8 | ApiSet: undefined
 */
export function taskEnterVehicle(ped, vehicle, timeout, seatIndex, speed, flag, p6) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskEnterVehicle(_ped, _vehicle, timeout, seatIndex, speed, flag, p6);
}
/**
 * ```
 * Example:
 * `TASK::TASK_DRIVE_BY(l_467[1\/\*22\*\/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});`
 * Needs working example. Doesn't seem to do anything.
 * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
 * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
 * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
 * ```
 * Hash: 0x2F8AF0E82773A171 | ApiSet: undefined
 */
export function taskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) {
    const _driverPed = driverPed instanceof Ped ? driverPed.handle() : driverPed;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    const _targetVehicle = targetVehicle instanceof Entity ? targetVehicle.handle() : targetVehicle;
    if (typeof firingPattern === 'string')
        firingPattern = this.getHashKey(firingPattern);
    TaskDriveBy(_driverPed, _targetPed, _targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern);
}
/**
 * Hash: 0x79B258E397854D29 | ApiSet: undefined
 */
export function taskExitCover(p0, p1, p2, p3, p4) {
    TaskExitCover(p0, p1, p2, p3, p4);
}
/**
 * Hash: 0x7F93691AB4B92272 | ApiSet: undefined
 */
export function taskEveryoneLeaveVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskEveryoneLeaveVehicle(_vehicle);
}
/**
 * Clears the current point route. Call this before [TASK_EXTEND_ROUTE](#\_0x1E7889778264843A) and [TASK_FOLLOW_POINT_ROUTE](#\_0x595583281858626E).
 * Hash: 0x841142A1376E9006 | ApiSet: undefined
 */
export function taskFlushRoute() {
    TaskFlushRoute();
}
/**
 * The ped will act like NPC's involved in a gunfight. The ped will squat down with their heads held in place and look around.
 * Hash: 0x3EB1FE9E8E908E15 | ApiSet: undefined
 */
export function taskCower(ped, duration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskCower(_ped, duration);
}
/**
 * Sometimes a path may not be able to be found. This could happen because there simply isn't any way to get there, or maybe a bunch of dynamic objects have blocked the way,
 * or maybe the destination is too far away. In this case the ped will simply stand still.
 * To identify when this has happened, you can use GET_NAVMESH_ROUTE_RESULT. This will help you find situations where peds cannot get to their target.
 * ```cpp
 * enum eNavScriptFlags {
 * // Default flag
 * ENAV_DEFAULT = 0,
 * // Will ensure the ped continues to move whilst waiting for the path
 * // to be found, and will not slow down at the end of their route.
 * ENAV_NO_STOPPING = 1,
 * // Performs a slide-to-coord at the end of the task. This requires that the
 * // accompanying NAVDATA structure has the 'SlideToCoordHeading' member set correctly.
 * ENAV_ADV_SLIDE_TO_COORD_AND_ACHIEVE_HEADING_AT_END = 2,
 * // If the navmesh is not loaded in under the target position, then this will
 * // cause the ped to get as close as is possible on whatever navmesh is loaded.
 * // The navmesh must still be loaded at the path start.
 * ENAV_GO_FAR_AS_POSSIBLE_IF_TARGET_NAVMESH_NOT_LOADED = 4,
 * // Will allow navigation underwater - by default this is not allowed.
 * ENAV_ALLOW_SWIMMING_UNDERWATER = 8,
 * // Will only allow navigation on pavements. If the path starts or ends off
 * // the pavement, the command will fail. Likewise if no pavement-only route
 * // can be found even although the start and end are on pavement.
 * ENAV_KEEP_TO_PAVEMENTS = 16,
 * // Prevents the path from entering water at all.
 * ENAV_NEVER_ENTER_WATER = 32,
 * // Disables object-avoidance for this path. The ped may still make minor
 * // steering adjustments to avoid objects, but will not pathfind around them.
 * ENAV_DONT_AVOID_OBJECTS = 64,
 * // Specifies that the navmesh route will only be able to traverse up slopes
 * // which are under the angle specified, in the MaxSlopeNavigable member of the accompanying NAVDATA structure.
 * ENAV_ADVANCED_USE_MAX_SLOPE_NAVIGABLE = 128,
 * // Unused.
 * ENAV_STOP_EXACTLY = 512,
 * // The entity will look ahead in its path for a longer distance to make the
 * // walk/run start go more in the right direction.
 * ENAV_ACCURATE_WALKRUN_START = 1024,
 * // Disables ped-avoidance for this path while we move.
 * ENAV_DONT_AVOID_PEDS = 2048,
 * // If target pos is inside the boundingbox of an object it will otherwise be pushed out.
 * ENAV_DONT_ADJUST_TARGET_POSITION = 4096,
 * // Turns off the default behaviour, which is to stop exactly at the target position.
 * // Occasionally this can cause footsliding/skating problems.
 * ENAV_SUPPRESS_EXACT_STOP = 8192,
 * // Prevents the path-search from finding paths outside of this search distance.
 * // This can be used to prevent peds from finding long undesired routes.
 * ENAV_ADVANCED_USE_CLAMP_MAX_SEARCH_DISTANCE = 16384,
 * // Pulls out the paths from edges at corners for a longer distance, to prevent peds walking into stuff.
 * ENAV_PULL_FROM_EDGE_EXTRA = 32768
 * };
 * ```
 * Hash: 0x15D3A79D4E44B913 | ApiSet: undefined
 */
export function taskFollowNavMeshToCoord(ped, position, moveBlendRatio, time, radius, flags, finalHeading) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskFollowNavMeshToCoord(_ped, position.x, position.y, position.z, moveBlendRatio, time, radius, flags, finalHeading);
}
/**
 * Hash: 0x9C00E77AF14B2DFF | ApiSet: undefined
 */
export function taskGetOffBoat(ped, boat) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    TaskGetOffBoat(_ped, _boat);
}
/**
 * Hash: 0x17F58B88D085DBAC | ApiSet: undefined
 */
export function taskFollowNavMeshToCoordAdvanced(ped, position, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskFollowNavMeshToCoordAdvanced(_ped, position.x, position.y, position.z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f);
}
/**
 * ```
 * p6 always -1
 * p7 always 10.0
 * p8 always 1
 * ```
 * Hash: 0x304AE42E357B8C7E | ApiSet: undefined
 */
export function taskFollowToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    TaskFollowToOffsetOfEntity(_ped, _entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
}
/**
 * Adds a new point to the current point route; a maximum of 8 points can be added.
 * Call [TASK_FLUSH_ROUTE](#\_0x841142A1376E9006) before the first call to this. Call [TASK_FOLLOW_POINT_ROUTE](#\_0x595583281858626E) to make the Ped go the route.
 * Hash: 0x1E7889778264843A | ApiSet: undefined
 */
export function taskExtendRoute(position) {
    TaskExtendRoute(position.x, position.y, position.z);
}
/**
 * Tells a ped to go to a coord by any means.
 * ```cpp
 * enum eDrivingMode {
 * DF_StopForCars = 1,
 * DF_StopForPeds = 2,
 * DF_SwerveAroundAllCars = 4,
 * DF_SteerAroundStationaryCars = 8,
 * DF_SteerAroundPeds = 16,
 * DF_SteerAroundObjects = 32,
 * DF_DontSteerAroundPlayerPed = 64,
 * DF_StopAtLights = 128,
 * DF_GoOffRoadWhenAvoiding = 256,
 * DF_DriveIntoOncomingTraffic = 512,
 * DF_DriveInReverse = 1024,
 * // If pathfinding fails, cruise randomly instead of going on a straight line
 * DF_UseWanderFallbackInsteadOfStraightLine = 2048,
 * DF_AvoidRestrictedAreas = 4096,
 * // These only work on MISSION_CRUISE
 * DF_PreventBackgroundPathfinding = 8192,
 * DF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384,
 * DF_UseShortCutLinks =  262144,
 * DF_ChangeLanesAroundObstructions = 524288,
 * // cruise tasks ignore this anyway--only used for goto's
 * DF_UseSwitchedOffNodes =  2097152,
 * // if you're going to be primarily driving off road
 * DF_PreferNavmeshRoute =  4194304,
 * // Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly
 * DF_PlaneTaxiMode =  8388608,
 * DF_ForceStraightLine = 16777216,
 * DF_UseStringPullingAtJunctions = 33554432,
 * DF_AvoidHighways = 536870912,
 * DF_ForceJoinInRoadDirection = 1073741824,
 * // Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions
 * DRIVINGMODE_STOPFORCARS = 786603, // DF_StopForCars|DF_StopForPeds|DF_SteerAroundObjects|DF_SteerAroundStationaryCars|DF_StopAtLights|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,		// Obey lights too
 * // Like the above, but doesn't steer around anything in its way - will only wait instead.
 * DRIVINGMODE_STOPFORCARS_STRICT = 262275, // DF_StopForCars|DF_StopForPeds|DF_StopAtLights|DF_UseShortCutLinks, // Doesn't deviate an inch.
 * // Default "alerted" driving mode. drives around everything, doesn't obey lights
 * DRIVINGMODE_AVOIDCARS = 786469, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars,
 * // Very erratic driving. difference between this and AvoidCars is that it doesn't use the brakes at ALL to help with steering
 * DRIVINGMODE_AVOIDCARS_RECKLESS = 786468, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions,
 * // Smashes through everything
 * DRIVINGMODE_PLOUGHTHROUGH = 262144, // DF_UseShortCutLinks
 * // Drives normally except for the fact that it ignores lights
 * DRIVINGMODE_STOPFORCARS_IGNORELIGHTS = 786475, // DF_StopForCars|DF_SteerAroundStationaryCars|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions
 * // Try to swerve around everything, but stop for lights if necessary
 * DRIVINGMODE_AVOIDCARS_OBEYLIGHTS = 786597, // DF_SwerveAroundAllCars|DF_StopAtLights|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars
 * // Swerve around cars, be careful around peds, and stop for lights
 * DRIVINGMODE_AVOIDCARS_STOPFORPEDS_OBEYLIGHTS = 786599 // DF_SwerveAroundAllCars|DF_StopAtLights|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars
 * };
 * ```
 * Hash: 0x5BC448CB78FA3E88 | ApiSet: undefined
 */
export function taskGoToCoordAnyMeans(ped, position, fMoveBlendRatio, vehicle, bUseLongRangeVehiclePathing, drivingFlags, fMaxRangeToShootTargets) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskGoToCoordAnyMeans(_ped, position.x, position.y, position.z, fMoveBlendRatio, _vehicle, bUseLongRangeVehiclePathing, drivingFlags, fMaxRangeToShootTargets);
}
/**
 * Hash: 0x0759591819534F7B | ApiSet: undefined
 */
export function taskFollowWaypointRecording(p0, p1, p2, p3, p4) {
    TaskFollowWaypointRecording(p0, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Added Parameter 13: Any p12
 * ```
 * Hash: 0x1DD45F9ECFDB1BC9 | ApiSet: undefined
 */
export function taskGoToCoordAnyMeansExtraParams(ped, position, speed, p5, p6, walkingStyle, p8, p9, p10, p11) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskGoToCoordAnyMeansExtraParams(_ped, position.x, position.y, position.z, speed, p5, p6, walkingStyle, p8, p9, p10, p11);
}
/**
 * Hash: 0xD76B57B44F1E6F8B | ApiSet: undefined
 */
export function taskGoStraightToCoord(ped, position, speed, timeout, targetHeading, distanceToSlide) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskGoStraightToCoord(_ped, position.x, position.y, position.z, speed, timeout, targetHeading, distanceToSlide);
}
/**
 * Makes the ped go on a point route.
 * ```cpp
 * enum eFollowPointRouteMode {
 * TICKET_SINGLE = 0,
 * TICKET_RETURN = 1,
 * TICKET_SEASON = 2,
 * TICKET_LOOP = 3
 * }
 * ```
 * This native is often times used with [`TASK_FLUSH_ROUTE`](#\_0x841142A1376E9006) and [`TASK_EXTEND_ROUTE`](#\_0x1E7889778264843A)
 * Hash: 0x595583281858626E | ApiSet: undefined
 */
export function taskFollowPointRoute(ped, speed, routeMode) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskFollowPointRoute(_ped, speed, routeMode);
}
/**
 * See [`FORCE_PED_MOTION_STATE`](#\_0xF28965D04F570DCA)
 * Hash: 0x4F056E1AFFEF17AB | ApiSet: undefined
 */
export function taskForceMotionState(ped, state, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof state === 'string')
        state = this.getHashKey(state);
    TaskForceMotionState(_ped, state, p2);
}
/**
 * ```
 * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
 * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
 * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
 * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
 * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
 * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
 * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
 * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
 * Example:
 * enum AimFlag
 * {
 * AimAtFocusLocation,
 * AimAtGoToLocation
 * };
 * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
 * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
 * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
 * // 1st example
 * `TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f \/\*run\*\/, true \/\*shoot\*\/, 3.0f \/\*stop at\*\/, 0.0f \/\*noRoadsDistance\*\/, true \/\*always true\*\/, 0 \/\*possible flag\*\/, AimFlag::AimAtGoToLocation, -957453492 \/\*FullAuto pattern\*\/);`
 * // 2nd example
 * `TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f \/\*walk\*\/, false \/\*don't shoot\*\/, 3.0f \/\*stop at\*\/, 0.0f \/\*noRoadsDistance\*\/, true \/\*always true\*\/, 0 \/\*possible flag\*\/, AimFlag::AimAtFocusLocation, -957453492 \/\*FullAuto pattern\*\/);`
 * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
 * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
 * ```
 * Hash: 0xA55547801EB331FC | ApiSet: undefined
 */
export function taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) {
    const _pedHandle = pedHandle instanceof Ped ? pedHandle.handle() : pedHandle;
    if (typeof firingPattern === 'string')
        firingPattern = this.getHashKey(firingPattern);
    TaskGoToCoordAndAimAtHatedEntitiesNearCoord(_pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern);
}
/**
 * Hash: 0x61E360B7E040D12E | ApiSet: undefined
 */
export function taskGoStraightToCoordRelativeToEntity(entity1, entity2, p2, p3, p4, p5, p6) {
    const _entity1 = entity1 instanceof Entity ? entity1.handle() : entity1;
    const _entity2 = entity2 instanceof Entity ? entity2.handle() : entity2;
    TaskGoStraightToCoordRelativeToEntity(_entity1, _entity2, p2, p3, p4, p5, p6);
}
/**
 * Will make the ped move to a coordinate while aiming (and optionally shooting) at given coordinates.
 * Hash: 0x11315AB3385B8AC0 | ApiSet: undefined
 */
export function taskGoToCoordWhileAimingAtCoord(ped, position, aimAtX, aimAtY, aimAtZ, moveSpeed, shoot, p9, p10, p11, flags, p13, firingPattern) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof firingPattern === 'string')
        firingPattern = this.getHashKey(firingPattern);
    TaskGoToCoordWhileAimingAtCoord(_ped, position.x, position.y, position.z, aimAtX, aimAtY, aimAtZ, moveSpeed, shoot, p9, p10, p11, flags, p13, firingPattern);
}
/**
 * Instructs the ped to go to the entity with the given offset.
 * ```cpp
 * enum eSeekEntityOffsetFlags {
 * ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 1,
 * ESEEK_KEEP_TO_PAVEMENTS = 2
 * };
 * ```
 * Hash: 0xE39B4FF4FDEBDE27 | ApiSet: undefined
 */
export function taskGotoEntityOffset(ped, entity, duration, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    TaskGotoEntityOffset(_ped, _entity, duration, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags);
}
/**
 * ```
 * NativeDB Added Parameter 14: Any p13
 * ```
 * Hash: 0xB8ECD61F531A7B02 | ApiSet: undefined
 */
export function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, position, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(_ped, position.x, position.y, position.z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12);
}
/**
 * Hash: 0x04701832B739DCE5 | ApiSet: undefined
 */
export function taskGoToEntityWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
    TaskGoToEntityWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
}
/**
 * Hash: 0xD2A207EEBDF9889B | ApiSet: undefined
 */
export function taskGuardAssignedDefensiveArea(p0, p1, p2, p3, p4, p5, p6) {
    TaskGuardAssignedDefensiveArea(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Will make the ped move to a coordinate while aiming (and optionally shooting) at the given entity.
 * ```cpp
 * enum eFiringPatternHashes {
 * FIRING_PATTERN_DEFAULT = 0,
 * FIRING_PATTERN_BURST_FIRE = -687903391,
 * FIRING_PATTERN_BURST_FIRE_DRIVEBY = -753768974,
 * FIRING_PATTERN_FULL_AUTO = -957453492,
 * FIRING_PATTERN_SINGLE_SHOT = 1566631136,
 * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 2055493265,
 * FIRING_PATTERN_BURST_FIRE_HELI = -1857128337,
 * FIRING_PATTERN_SHORT_BURSTS = 445831135,
 * FIRING_PATTERN_BURST_FIRE_MICRO = 1122960381,
 * FIRING_PATTERN_SLOW_FIRE_TANK = -490063247,
 * FIRING_PATTERN_TAMPA_MORTAR = -1842093953
 * }
 * ```
 * Hash: 0xB2A16444EAD9AE47 | ApiSet: undefined
 */
export function taskGoToCoordWhileAimingAtEntity(ped, position, entityToAimAt, moveSpeed, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendAtAim, firingPattern, time) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entityToAimAt = entityToAimAt instanceof Entity ? entityToAimAt.handle() : entityToAimAt;
    if (typeof firingPattern === 'string')
        firingPattern = this.getHashKey(firingPattern);
    TaskGoToCoordWhileAimingAtEntity(_ped, position.x, position.y, position.z, _entityToAimAt, moveSpeed, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendAtAim, firingPattern, time);
}
/**
 * ```
 * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
 * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
 * `Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)`
 * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
 * ```
 * Hash: 0x6A071245EB0D1882 | ApiSet: undefined
 */
export function taskGoToEntity(entity, target, duration, distance, speed, p5, p6) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    const _target = target instanceof Entity ? target.handle() : target;
    TaskGoToEntity(_entity, _target, duration, distance, speed, p5, p6);
}
/**
 * ```
 * p0 - Guessing PedID
 * p1, p2, p3 - XYZ?
 * p4 - ???
 * p5 - Maybe the size of sphere from XYZ?
 * p6 - ???
 * p7, p8, p9 - XYZ again?
 * p10 - Maybe the size of sphere from second XYZ?
 * ```
 * Hash: 0xC946FE14BE0EB5E2 | ApiSet: undefined
 */
export function taskGuardSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
    const _p0 = p0 instanceof Ped ? p0.handle() : p0;
    TaskGuardSphereDefensiveArea(_p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}
/**
 * Instructs the ped to go to the entity with the given offset.
 * Hash: 0x338E7EF52B6095A9 | ApiSet: undefined
 */
export function taskGotoEntityOffsetXy(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    TaskGotoEntityOffsetXy(_ped, _entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags);
}
/**
 * ```
 * shootatEntity:
 * If true, peds will shoot at Entity till it is dead.
 * If false, peds will just walk till they reach the entity and will cease shooting.
 * ```
 * Hash: 0x97465886D35210E9 | ApiSet: undefined
 */
export function taskGoToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entityToWalkTo = entityToWalkTo instanceof Entity ? entityToWalkTo.handle() : entityToWalkTo;
    const _entityToAimAt = entityToAimAt instanceof Entity ? entityToAimAt.handle() : entityToAimAt;
    if (typeof firingPattern === 'string')
        firingPattern = this.getHashKey(firingPattern);
    TaskGoToEntityWhileAimingAtEntity(_ped, _entityToWalkTo, _entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern);
}
/**
 * ```
 * From re_prisonvanbreak:
 * `TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);`
 * ```
 * Hash: 0x4A58A47A72E3FCB4 | ApiSet: undefined
 */
export function taskGuardCurrentPosition(p0, p1, p2, p3) {
    const _p0 = p0 instanceof Ped ? p0.handle() : p0;
    TaskGuardCurrentPosition(_p0, p1, p2, p3);
}
/**
 * ```
 * eg
 * `TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);`
 * ped = Ped you want to perform this task.
 * target = the Entity they should aim at.
 * distanceToStopAt = distance from the target, where the ped should stop to aim.
 * StartAimingDist = distance where the ped should start to aim.
 * ```
 * Hash: 0xA9DA48FAB8A76C12 | ApiSet: undefined
 */
export function taskGotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Entity ? target.handle() : target;
    TaskGotoEntityAiming(_ped, _target, distanceToStopAt, StartAimingDist);
}
/**
 * ```
 * In the scripts, p3 was always -1.
 * p3 seems to be duration or timeout of turn animation.
 * Also facingPed can be 0 or -1 so ped will just raise hands up.
 * ```
 * Hash: 0xF2EAB31979A7F910 | ApiSet: undefined
 */
export function taskHandsUp(ped, duration, facingPed, p3, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _facingPed = facingPed instanceof Ped ? facingPed.handle() : facingPed;
    TaskHandsUp(_ped, duration, _facingPed, p3, p4);
}
/**
 * ```
 * Ped pilot should be in a heli.
 * EntityToFollow can be a vehicle or Ped.
 * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
 * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
 * ```
 * Hash: 0xAC83B1DB38D0ADA0 | ApiSet: undefined
 */
export function taskHeliChase(pilot, entityToFollow, position) {
    const _pilot = pilot instanceof Ped ? pilot.handle() : pilot;
    const _entityToFollow = entityToFollow instanceof Entity ? entityToFollow.handle() : entityToFollow;
    TaskHeliChase(_pilot, _entityToFollow, position.x, position.y, position.z);
}
/**
 * Flags are the same flags used in [`TASK_LEAVE_VEHICLE`](#\_0xD3DBCE61A490BE02)
 * Hash: 0x504D54DF3F6F2247 | ApiSet: undefined
 */
export function taskLeaveAnyVehicle(ped, p1, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskLeaveAnyVehicle(_ped, p1, flags);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xB385523325077210 | ApiSet: undefined
 */
export function taskHeliEscortHeli(pilot, heli1, heli2, p3, p4, p5) {
    const _pilot = pilot instanceof Ped ? pilot.handle() : pilot;
    const _heli1 = heli1 instanceof Entity ? heli1.handle() : heli1;
    const _heli2 = heli2 instanceof Entity ? heli2.handle() : heli2;
    TaskHeliEscortHeli(_pilot, _heli1, _heli2, p3, p4, p5);
}
/**
 * Hash: 0x6FA46612594F7973 | ApiSet: undefined
 */
export function taskLookAtCoord(entity, position, duration, p5, p6) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    TaskLookAtCoord(_entity, position.x, position.y, position.z, duration, p5, p6);
}
/**
 * All parameters except ped, heli and speed are optional, with `pedTarget`, `vehicleTarget`, `x`, `y`, `z` being dependent on `missionType` (ie. Attack/Flee mission types require a target ped/vehicle, whereas GoTo mission types require either `x`, `y`, `z` or a target ped/vehicle).
 * If you don't want to use a parameter; pass `0.0f` for `x`, `y` and `z`, `0` for `pedTarget`, `vehicleTarget`, `0` for other int parameters, and `-1.0f` for the remaining float parameters.
 * ```cpp
 * enum eHeliMissionFlags
 * {
 * None = 0,
 * AttainRequestedOrientation = 1,
 * DontModifyOrientation = 2,
 * DontModifyPitch = 4,
 * DontModifyThrottle = 8,
 * DontModifyRoll = 16,
 * LandOnArrival = 32,
 * DontDoAvoidance = 64,
 * StartEngineImmediately = 128,
 * ForceHeightMapAvoidance = 256,
 * DontClampProbesToDestination = 512,
 * EnableTimeslicingWhenPossible = 1024,
 * CircleOppositeDirection = 2048,
 * MaintainHeightAboveTerrain = 4096,
 * IgnoreHiddenEntitiesDuringLand = 8192,
 * DisableAllHeightMapAvoidance = 16384,
 * // ForceHeightMapAvoidance | DontDoAvoidance
 * HeightMapOnlyAvoidance = 320,
 * }
 * ```
 * Hash: 0xDAD029E187A2BEB4 | ApiSet: undefined
 */
export function taskHeliMission(ped, heli, vehicleTarget, pedTarget, position, missionType, speed, radius, heading, height, minHeight, slowDist, missionFlags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _heli = heli instanceof Entity ? heli.handle() : heli;
    const _vehicleTarget = vehicleTarget instanceof Entity ? vehicleTarget.handle() : vehicleTarget;
    const _pedTarget = pedTarget instanceof Ped ? pedTarget.handle() : pedTarget;
    TaskHeliMission(_ped, _heli, _vehicleTarget, _pedTarget, position.x, position.y, position.z, missionType, speed, radius, heading, height, minHeight, slowDist, missionFlags);
}
/**
 * ```
 * param3: duration in ms, use -1 to look forever
 * param4: using 2048 is fine
 * param5: using 3 is fine
 * ```
 * Hash: 0x69F4BE8C8CC4796C | ApiSet: undefined
 */
export function taskLookAtEntity(ped, lookAt, duration, unknown1, unknown2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _lookAt = lookAt instanceof Entity ? lookAt.handle() : lookAt;
    TaskLookAtEntity(_ped, _lookAt, duration, unknown1, unknown2);
}
/**
 * ```
 * Flags from decompiled scripts:
 * 0 = normal exit and closes door.
 * 1 = normal exit and closes door.
 * 16 = teleports outside, door kept closed.  (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally)
 * 64 = normal exit and closes door, maybe a bit slower animation than 0.
 * 256 = normal exit but does not close the door.
 * 4160 = ped is throwing himself out, even when the vehicle is still.
 * 262144 = ped moves to passenger seat first, then exits normally
 * Others to be tried out: 320, 512, 131072.
 * ```
 * Hash: 0xD3DBCE61A490BE02 | ApiSet: undefined
 */
export function taskLeaveVehicle(ped, vehicle, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskLeaveVehicle(_ped, _vehicle, flags);
}
/**
 * The given ped will try to open the nearest door to 'seat'.
 * Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
 * Hash: 0x965791A9A488A062 | ApiSet: undefined
 */
export function taskOpenVehicleDoor(ped, vehicle, timeOut, seat, speed) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskOpenVehicleDoor(_ped, _vehicle, timeOut, seat, speed);
}
/**
 * ```
 * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
 * v350: Ped ped, bool unused
 * v678: Ped ped, bool unused, bool flag1, bool flag2
 * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
 * ```
 * ```
 * NativeDB Added Parameter 3: Any p2
 * NativeDB Added Parameter 4: Any p3
 * ```
 * Hash: 0x0AE4086104E067B1 | ApiSet: undefined
 */
export function taskJump(ped, unused) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskJump(_ped, unused);
}
/**
 * ```
 * `makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED`
 * ```
 * Hash: 0xB33E291AFA6BD03A | ApiSet: undefined
 */
export function taskParachuteToTarget(ped, position) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskParachuteToTarget(_ped, position.x, position.y, position.z);
}
/**
 * ```
 * This function has a third parameter as well (bool).
 * Second parameter is unused.
 * seconds parameter was for jetpack in the early stages of gta and the hard coded code is now removed
 * ```
 * ```
 * NativeDB Added Parameter 3: BOOL p2
 * ```
 * Hash: 0xD2F1C53C97EE81AB | ApiSet: undefined
 */
export function taskParachute(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskParachute(_ped, p1);
}
/**
 * ```
 * Example:
 * `TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);`
 * ```
 * Hash: 0xD5B35BEA41919ACB | ApiSet: undefined
 */
export function taskMoveNetworkAdvancedByName(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskMoveNetworkAdvancedByName(_ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags);
}
/**
 * Hash: 0xD04FE6765D990A06 | ApiSet: undefined
 */
export function taskPedSlideToCoord(ped, position, heading, duration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPedSlideToCoord(_ped, position.x, position.y, position.z, heading, duration);
}
/**
 * Hash: 0x89221B16730234F0 | ApiSet: undefined
 */
export function taskPerformSequenceFromProgress(ped, taskIndex, progress1, progress2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPerformSequenceFromProgress(_ped, taskIndex, progress1, progress2);
}
/**
 * ```
 * Example:
 * `TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);`
 * ```
 * Hash: 0x2D537BA194896636 | ApiSet: undefined
 */
export function taskMoveNetworkByName(ped, task, multiplier, p3, animDict, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskMoveNetworkByName(_ped, task, multiplier, p3, animDict, flags);
}
/**
 * For an example on how to use this please refer to \[OPEN_SEQUENCE_TASK]\(#\_0xE8854A4326B9E12B
 * Hash: 0x8C33220C8D78CA0D | ApiSet: undefined
 */
export function taskPerformSequenceLocally(ped, taskSequenceId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPerformSequenceLocally(_ped, taskSequenceId);
}
/**
 * ```
 * Used only once in the scripts (am_mp_nightclub)
 * ```
 * ```
 * Used only once in the scripts (am_mp_nightclub)
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x3D45B0B355C5E0C9 | ApiSet: undefined
 */
export function taskMoveNetworkByNameWithInitParams(ped, p1, p3, p4, animDict, flags) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return TaskMoveNetworkByNameWithInitParams(_ped, p1, p3, p4, animDict, flags);
}
/**
 * Hash: 0xBF19721FA34D32C0 | ApiSet: undefined
 */
export function taskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) {
    const _pilot = pilot instanceof Ped ? pilot.handle() : pilot;
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    TaskPlaneLand(_pilot, _plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
}
/**
 * This tasks the ped to do nothing for the specified amount of miliseconds.
 * This is useful if you want to add a delay between tasks when using a sequence task.
 * Hash: 0xE73A266DB0CA9042 | ApiSet: undefined
 */
export function taskPause(ped, ms) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPause(_ped, ms);
}
/**
 * The given ped will try to drive the plane to the given coordinates and will then drive around the given coords (the plane will form 8s on the ground)
 * Hash: 0x92C360B5F15D2302 | ApiSet: undefined
 */
export function taskPlaneTaxi(pilot, aircraft, xPos, yPos, zPos, fCruiseSpeed, fTargetReachedDist) {
    const _pilot = pilot instanceof Ped ? pilot.handle() : pilot;
    const _aircraft = aircraft instanceof Entity ? aircraft.handle() : aircraft;
    TaskPlaneTaxi(_pilot, _aircraft, xPos, yPos, zPos, fCruiseSpeed, fTargetReachedDist);
}
/**
 * ```
 * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
 * "miss_Tower_01" (this went from 01 - 10)
 * "miss_Ass0" (0, 4, 6, 3)
 * "MISS_PATROL_8"
 * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
 * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
 * From the scripts
 * `TASK::OPEN_PATROL_ROUTE("miss_Ass0");`
 * `TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0\/\*3\*\/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
 * `TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1\/\*3\*\/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
 * `TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2\/\*3\*\/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));`
 * `TASK::ADD_PATROL_ROUTE_LINK(0, 1);`
 * `TASK::ADD_PATROL_ROUTE_LINK(1, 2);`
 * `TASK::ADD_PATROL_ROUTE_LINK(2, 0);`
 * `TASK::CLOSE_PATROL_ROUTE();`
 * `TASK::CREATE_PATROL_ROUTE();`
 * ```
 * Hash: 0xBDA5DF49D080FE4E | ApiSet: undefined
 */
export function taskPatrol(ped, p1, p2, p3, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPatrol(_ped, p1, p2, p3, p4);
}
/**
 * For an example on how to use this please refer to [OPEN_SEQUENCE_TASK](#\_0xE8854A4326B9E12B)
 * Hash: 0x5ABA3986D90D8A3B | ApiSet: undefined
 */
export function taskPerformSequence(ped, taskSequenceId) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPerformSequence(_ped, taskSequenceId);
}
/**
 * Gives the plane a mission (purpose or objective), the mission is passed onto the `iMissionIndex` parameter.
 * ```cpp
 * enum eVehicleMission {
 * MISSION_NONE = 0,
 * MISSION_CRUISE, // 1
 * MISSION_RAM, // 2
 * MISSION_BLOCK, // 3
 * MISSION_GOTO, // 4
 * MISSION_STOP, // 5
 * MISSION_ATTACK, // 6
 * MISSION_FOLLOW, // 7
 * MISSION_FLEE, // 8
 * MISSION_CIRCLE, // 9
 * MISSION_ESCORT_LEFT, // 10
 * MISSION_ESCORT_RIGHT, // 11
 * MISSION_ESCORT_REAR, // 12
 * MISSION_ESCORT_FRONT, // 13
 * MISSION_GOTO_RACING, // 14
 * MISSION_FOLLOW_RECORDING, // 15
 * MISSION_POLICE_BEHAVIOUR, // 16
 * MISSION_PARK_PERPENDICULAR, // 17
 * MISSION_PARK_PARALLEL, // 18
 * MISSION_LAND, // 19
 * MISSION_LAND_AND_WAIT, // 20
 * MISSION_CRASH, // 21
 * MISSION_PULL_OVER, // 22
 * MISSION_PROTECT // 23
 * };
 * ```
 * Hash: 0x23703CD154E83B88 | ApiSet: undefined
 */
export function taskPlaneMission(ped, vehicle, targetVehicle, targetPed, fTargetCoordX, fTargetCoordY, fTargetCoordZ, iMissionIndex, fCruiseSpeed, fTargetReachedDist, fOrientation, iFlightHeight, iMinHeightAboveTerrain, bPrecise) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _targetVehicle = targetVehicle instanceof Entity ? targetVehicle.handle() : targetVehicle;
    const _targetPed = targetPed instanceof Ped ? targetPed.handle() : targetPed;
    TaskPlaneMission(_ped, _vehicle, _targetVehicle, _targetPed, fTargetCoordX, fTargetCoordY, fTargetCoordZ, iMissionIndex, fCruiseSpeed, fTargetReachedDist, fOrientation, iFlightHeight, iMinHeightAboveTerrain, bPrecise);
}
/**
 * Hash: 0x5A4A6A6D3DC64F52 | ApiSet: undefined
 */
export function taskPedSlideToCoordHdgRate(ped, position, heading, p5, p6) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPedSlideToCoordHdgRate(_ped, position.x, position.y, position.z, heading, p5, p6);
}
/**
 * Hash: 0x2D2386F273FF7A25 | ApiSet: undefined
 */
export function taskPlaneChase(pilot, entityToFollow, position) {
    const _pilot = pilot instanceof Ped ? pilot.handle() : pilot;
    const _entityToFollow = entityToFollow instanceof Entity ? entityToFollow.handle() : entityToFollow;
    TaskPlaneChase(_pilot, _entityToFollow, position.x, position.y, position.z);
}
/**
 * Hash: 0x965FEC691D55E9BF | ApiSet: undefined
 */
export function taskPlantBomb(ped, position, heading) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPlantBomb(_ped, position.x, position.y, position.z, heading);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xF7F9DCCA89E7505B | ApiSet: undefined
 */
export function taskPlaneGotoPreciseVtol(ped, vehicle, p2, p3, p4, p5, p6, p7, p8, p9) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskPlaneGotoPreciseVtol(_ped, _vehicle, p2, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * ```cpp
 * enum eScriptedAnimFlags
 * {
 * AF_LOOPING = 1,
 * AF_HOLD_LAST_FRAME = 2,
 * AF_REPOSITION_WHEN_FINISHED = 4,
 * AF_NOT_INTERRUPTABLE = 8,
 * AF_UPPERBODY = 16,
 * AF_SECONDARY = 32,
 * AF_REORIENT_WHEN_FINISHED = 64,
 * AF_ABORT_ON_PED_MOVEMENT = 128,
 * AF_ADDITIVE = 256,
 * AF_TURN_OFF_COLLISION = 512,
 * AF_OVERRIDE_PHYSICS = 1024,
 * AF_IGNORE_GRAVITY = 2048,
 * AF_EXTRACT_INITIAL_OFFSET = 4096,
 * AF_EXIT_AFTER_INTERRUPTED = 8192,
 * AF_TAG_SYNC_IN = 16384,
 * AF_TAG_SYNC_OUT = 32768,
 * AF_TAG_SYNC_CONTINUOUS = 65536,
 * AF_FORCE_START = 131072,
 * AF_USE_KINEMATIC_PHYSICS = 262144,
 * AF_USE_MOVER_EXTRACTION = 524288,
 * AF_HIDE_WEAPON = 1048576,
 * AF_ENDS_IN_DEAD_POSE = 2097152,
 * AF_ACTIVATE_RAGDOLL_ON_COLLISION = 4194304,
 * AF_DONT_EXIT_ON_DEATH = 8388608,
 * AF_ABORT_ON_WEAPON_DAMAGE = 16777216,
 * AF_DISABLE_FORCED_PHYSICS_UPDATE = 33554432,
 * AF_PROCESS_ATTACHMENTS_ON_START = 67108864,
 * AF_EXPAND_PED_CAPSULE_FROM_SKELETON = 134217728,
 * AF_USE_ALTERNATIVE_FP_ANIM = 268435456,
 * AF_BLENDOUT_WRT_LAST_FRAME = 536870912,
 * AF_USE_FULL_BLENDING = 1073741824
 * }
 * ```
 * Hash: 0xEA47FE3719165B94 | ApiSet: undefined
 */
export function taskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPlayAnim(_ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
}
/**
 * ```
 * from armenian3.c4
 * `TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);`
 * ```
 * Hash: 0x1C6CD14A876FFE39 | ApiSet: undefined
 */
export function taskPutPedDirectlyIntoMelee(ped, meleeTarget, p2, p3, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _meleeTarget = meleeTarget instanceof Ped ? meleeTarget.handle() : meleeTarget;
    TaskPutPedDirectlyIntoMelee(_ped, _meleeTarget, p2, p3, p4, p5);
}
/**
 * ```
 * Example from the scripts:
 * `TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);`
 * =========================================================
 * ^^ No offense, but Idk how that would really help anyone.
 * As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
 * Known boneMaskTypes'
 * "BONEMASK_HEADONLY"
 * "BONEMASK_HEAD_NECK_AND_ARMS"
 * "BONEMASK_HEAD_NECK_AND_L_ARM"
 * "BONEMASK_HEAD_NECK_AND_R_ARM"
 * p4 known args - 0.0f, 0.5f, 0.25f
 * p5 known args - 0.0f, 0.25f
 * p6 known args - 1 if a global if check is passed.
 * p7 known args - 1 if a global if check is passed.
 * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
 * =========================================================
 * ```
 * Hash: 0x8FBB6758B3B3E9EC | ApiSet: undefined
 */
export function taskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, p4, p5, p6, p7) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPlayPhoneGestureAnimation(_ped, animDict, animation, boneMaskType, p4, p5, p6, p7);
}
/**
 * ```
 * From fm_mission_controller.c:
 * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
 * vVar28 = {0.094f, 0.02f, -0.005f};
 * vVar29 = {-92.24f, 63.64f, 150.24f};
 * func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
 * set_entity_lod_dist(net_to_ent(uVar30), 500);
 * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
 * Var31.imm_4 = 1065353216;
 * Var31.imm_5 = 1065353216;
 * Var31.imm_9 = 1065353216;
 * Var31.imm_10 = 1065353216;
 * Var31.imm_14 = 1065353216;
 * Var31.imm_15 = 1065353216;
 * Var31.imm_17 = 1040187392;
 * Var31.imm_18 = 1040187392;
 * Var31.imm_19 = -1;
 * Var32.imm_4 = 1065353216;
 * Var32.imm_5 = 1065353216;
 * Var32.imm_9 = 1065353216;
 * Var32.imm_10 = 1065353216;
 * Var32.imm_14 = 1065353216;
 * Var32.imm_15 = 1065353216;
 * Var32.imm_17 = 1040187392;
 * Var32.imm_18 = 1040187392;
 * Var32.imm_19 = -1;
 * Var31 = 1;
 * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
 * Var31.imm_2 = "idle";
 * Var31.imm_20 = 1048633;
 * Var31.imm_4 = 0.5f;
 * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
 * task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
 * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
 * remove_anim_dict("anim@heists@biolab@");
 * ```
 * Hash: 0x126EF75F1E17ABE5 | ApiSet: undefined
 */
export function taskScriptedAnimation(ped, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return TaskScriptedAnimation(_ped, p4, p5);
}
/**
 * ```
 * Only appears twice in the scripts.
 * `TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000);`
 * `TASK::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);`
 * ```
 * Hash: 0x09693B0312F91649 | ApiSet: undefined
 */
export function taskRappelFromHeli(ped, unused) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskRappelFromHeli(_ped, unused);
}
/**
 * Hash: 0x4172393E6BE1FECE | ApiSet: undefined
 */
export function taskPutPedDirectlyIntoCover(ped, position, timeout, p5, p6, p7, p8, p9, p10) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPutPedDirectlyIntoCover(_ped, position.x, position.y, position.z, timeout, p5, p6, p7, p8, p9, p10);
}
/**
 * Hash: 0x75AC2B60386D89F2 | ApiSet: undefined
 */
export function taskSeekCoverFromPos(ped, position, duration, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSeekCoverFromPos(_ped, position.x, position.y, position.z, duration, p5);
}
/**
 * ```
 * The 2nd param (unused) is not implemented.
 * -----------------------------------------------------------------------
 * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
 * `if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {`
 * `TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);`
 * }
 * ```
 * Hash: 0x62D2916F56B9CD2D | ApiSet: undefined
 */
export function taskReloadWeapon(ped, unused) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskReloadWeapon(_ped, unused);
}
/**
 * Similar in functionality to [`TASK_PLAY_ANIM`](#\_0xEA47FE3719165B94), except the position and rotation parameters let you specify the initial position and rotation of the task. The ped is teleported to the position specified.
 * [Animations list](https://alexguirre.github.io/animations-list/)
 * Hash: 0x83CDB10EA29B370B | ApiSet: undefined
 */
export function taskPlayAnimAdvanced(ped, animDictionary, animationName, posX, posY, posZ, rotX, rotY, rotZ, blendInSpeed, blendOutSpeed, duration, flag, animTime, p14, p15) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskPlayAnimAdvanced(_ped, animDictionary, animationName, posX, posY, posZ, rotX, rotY, rotZ, blendInSpeed, blendOutSpeed, duration, flag, animTime, p14, p15);
}
/**
 * Hash: 0x84D32B3BEC531324 | ApiSet: undefined
 */
export function taskSeekCoverFromPed(ped, target, duration, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    TaskSeekCoverFromPed(_ped, _target, duration, p3);
}
/**
 * ```
 * from michael2:
 * `TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);`
 * appears to be shorter variation
 * from michael3:
 * `TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);`
 * ```
 * Hash: 0x39246A6958EF072C | ApiSet: undefined
 */
export function taskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, p7, p8) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSeekCoverToCoords(_ped, x1, y1, z1, x2, y2, z2, p7, p8);
}
/**
 * Hash: 0xD43D95C7A869447F | ApiSet: undefined
 */
export function taskSeekCoverToCoverPoint(p0, p1, p2, p3, p4, p5, p6) {
    TaskSeekCoverToCoverPoint(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Attaches a ped to a rope and allows player control to rappel down a wall.
 * Disables all collisions while on the rope.
 * NativeDB Introduced: v1868
 * Hash: 0xEAF66ACDDC794793 | ApiSet: undefined
 */
export function taskRappelDownWall(ped, x1, y1, z1, x2, y2, z2, minZ, ropeId, clipset, p10) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskRappelDownWall(_ped, x1, y1, z1, x2, y2, z2, minZ, ropeId, clipset, p10);
}
/**
 * ```
 * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
 * ```
 * Hash: 0xEB8517DDA73720DA | ApiSet: undefined
 */
export function taskSetDecisionMaker(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof p1 === 'string')
        p1 = this.getHashKey(p1);
    TaskSetDecisionMaker(_ped, p1);
}
/**
 * ```
 * I cant believe I have to define this, this is one of the best natives.
 * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
 * Since it is a task, every time the native is called the ped will stop for a moment.
 * ```
 * Hash: 0x90D2156198831D69 | ApiSet: undefined
 */
export function taskSetBlockingOfNonTemporaryEvents(ped, toggle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSetBlockingOfNonTemporaryEvents(_ped, toggle);
}
/**
 * Hash: 0x72C896464915D1B1 | ApiSet: undefined
 */
export function taskReactAndFleePed(ped, fleeTarget) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _fleeTarget = fleeTarget instanceof Ped ? fleeTarget.handle() : fleeTarget;
    TaskReactAndFleePed(_ped, _fleeTarget);
}
/**
 * Hash: 0x933C06518B52A9A4 | ApiSet: undefined
 */
export function taskSetSphereDefensiveArea(p0, p1, p2, p3, p4) {
    TaskSetSphereDefensiveArea(p0, p1, p2, p3, p4);
}
/**
 * Makes a shark ped circle around specified coordinates.
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x60A19CF85FF4CEFA | ApiSet: undefined
 */
export function taskSharkCircleCoord(ped, position, moveBlendRatio, radius) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSharkCircleCoord(_ped, position.x, position.y, position.z, moveBlendRatio, radius);
}
/**
 * ```
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * ```
 * Hash: 0x46A6CC01E0826106 | ApiSet: undefined
 */
export function taskShootAtCoord(ped, position, duration, firingPattern) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    if (typeof firingPattern === 'string')
        firingPattern = this.getHashKey(firingPattern);
    TaskShootAtCoord(_ped, position.x, position.y, position.z, duration, firingPattern);
}
/**
 * Hash: 0x452419CBD838065B | ApiSet: undefined
 */
export function taskShockingEventReact(ped, eventHandle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskShockingEventReact(_ped, eventHandle);
}
/**
 * ```
 * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
 * Entity aimedentity;
 * `Player player = PLAYER::PLAYER_ID();`
 * `PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);`
 * //bg is an array of peds
 * `TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));`
 * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * ```
 * Hash: 0x08DA95E8298AE772 | ApiSet: undefined
 */
export function taskShootAtEntity(entity, target, duration, firingPattern) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    const _target = target instanceof Entity ? target.handle() : target;
    if (typeof firingPattern === 'string')
        firingPattern = this.getHashKey(firingPattern);
    TaskShootAtEntity(_entity, _target, duration, firingPattern);
}
/**
 * ```
 * NativeDB Added Parameter 2: BOOL p1
 * ```
 * Hash: 0x601736CFE536B0A0 | ApiSet: undefined
 */
export function taskSkyDive(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSkyDive(_ped);
}
/**
 * ```
 * Makes the specified ped shuffle to the next vehicle seat.
 * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
 * ```
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0x7AA80209BDA643EB | ApiSet: undefined
 */
export function taskShuffleToNextVehicleSeat(ped, vehicle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskShuffleToNextVehicleSeat(_ped, _vehicle);
}
/**
 * ```
 * Makes the specified ped flee the specified distance from the specified position.
 * ```
 * Hash: 0x94587F17E9C365D5 | ApiSet: undefined
 */
export function taskSmartFleeCoord(ped, position, distance, time, p6, p7) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSmartFleeCoord(_ped, position.x, position.y, position.z, distance, time, p6, p7);
}
/**
 * The ped will move or warp to the position and heading given, then start the scenario passed. See [`TASK_START_SCENARIO_IN_PLACE`](#\_0x142A02425FF02BD9) for a list of scenarios.
 * Hash: 0xFA4EFC79F69D4F07 | ApiSet: undefined
 */
export function taskStartScenarioAtPosition(ped, scenarioName, position, heading, timeToLeave, playIntro, warp) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskStartScenarioAtPosition(_ped, scenarioName, position.x, position.y, position.z, heading, timeToLeave, playIntro, warp);
}
/**
 * ```
 * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
 * ```
 * Hash: 0xAE032F8BBA959E90 | ApiSet: undefined
 */
export function taskStandGuard(ped, position, heading, scenarioName) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskStandGuard(_ped, position.x, position.y, position.z, heading, scenarioName);
}
/**
 * ```
 * Makes a ped run away from another ped (fleeTarget).
 * distance = ped will flee this distance.
 * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
 * ```
 * Hash: 0x22B0D0E37CCB840D | ApiSet: undefined
 */
export function taskSmartFleePed(ped, fleeTarget, distance, fleeTime, p4, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _fleeTarget = fleeTarget instanceof Ped ? fleeTarget.handle() : fleeTarget;
    TaskSmartFleePed(_ped, _fleeTarget, distance, fleeTime, p4, p5);
}
/**
 * ```
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0x3FA00D4F4641BFAE | ApiSet: undefined
 */
export function taskStopPhoneGestureAnimation(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskStopPhoneGestureAnimation(_ped);
}
/**
 * ```
 * Makes the specified ped stand still for (time) milliseconds.
 * ```
 * Hash: 0x919BE13EED931959 | ApiSet: undefined
 */
export function taskStandStill(ped, time) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskStandStill(_ped, time);
}
/**
 * ```
 * Stealth kill action name hashes:
 * stealth kills can be found here: Grand Theft Auto V\common.rpf\data\action\stealth_kills.meta
 * ...
 * {
 * "ACT_stealth_kill_a",
 * "ACT_stealth_kill_weapon",
 * "ACT_stealth_kill_b",
 * "ACT_stealth_kill_c",
 * "ACT_stealth_kill_d",
 * "ACT_stealth_kill_a_gardener"
 * }
 * Only known script using this native: fbi4_prep2
 * EXAMPLE:
 * `ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key("AR_stealth_kill_a"), 1f, 0);ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key("AR_stealth_kill_knife"), 1f, 0);`
 * `Also it may be important to note, that each time this task is called, it's followed by AI::CLEAR_PED_TASKS on the target`
 * ```
 * Hash: 0xAA5DC05579D60BD9 | ApiSet: undefined
 */
export function taskStealthKill(killer, target, actionType, p3, p4) {
    const _killer = killer instanceof Ped ? killer.handle() : killer;
    const _target = target instanceof Ped ? target.handle() : target;
    if (typeof actionType === 'string')
        actionType = this.getHashKey(actionType);
    TaskStealthKill(_killer, _target, actionType, p3, p4);
}
/**
 * Puts the ped into the given scenario immediately at their current location. [List of scenario names](https://pastebin.com/6mrYTdQv) or in `update/update.rpf/common/data/ai/scenarios.meta`.
 * Hash: 0x142A02425FF02BD9 | ApiSet: undefined
 */
export function taskStartScenarioInPlace(ped, scenarioName, timeToLeave, playIntroClip) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskStartScenarioInPlace(_ped, scenarioName, timeToLeave, playIntroClip);
}
/**
 * ```
 * Makes the ped run to take cover
 * ```
 * Hash: 0xE5DA8615A6180789 | ApiSet: undefined
 */
export function taskStayInCover(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskStayInCover(_ped);
}
/**
 * ```
 * This function is called on peds in vehicles.
 * anim: animation name
 * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
 * p5: no idea what it does but is usually -1
 * ```
 * Hash: 0x2047C02158D6405A | ApiSet: undefined
 */
export function taskSweepAimEntity(ped, anim, p2, p3, p4, p5, vehicle, p7, p8) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskSweepAimEntity(_ped, anim, p2, p3, p4, p5, _vehicle, p7, p8);
}
/**
 * Hash: 0x7AFE8FDC10BC07D2 | ApiSet: undefined
 */
export function taskSweepAimPosition(p0, p5, p6, p7, p8, p9, p10) {
    return TaskSweepAimPosition(p0, p5, p6, p7, p8, p9, p10);
}
/**
 * Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
 * p0 is always 0, p5 is always 1
 * p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
 * Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xC22B40579A498CA4 | ApiSet: undefined
 */
export function taskSubmarineGotoAndStop(p0, submarine, position, p5) {
    const _submarine = submarine instanceof Entity ? submarine.handle() : submarine;
    TaskSubmarineGotoAndStop(p0, _submarine, position.x, position.y, position.z, p5);
}
/**
 * Hash: 0xA21C51255B205245 | ApiSet: undefined
 */
export function taskSwapWeapon(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSwapWeapon(_ped, p1);
}
/**
 * ```
 * used in sequence task
 * both parameters seems to be always 0
 * ```
 * Hash: 0xAC96609B9995EDF8 | ApiSet: undefined
 */
export function taskToggleDuck(p0, p1) {
    TaskToggleDuck(p0, p1);
}
/**
 * ```
 * `TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);`
 * ```
 * Hash: 0xEEA929141F699854 | ApiSet: undefined
 */
export function taskSynchronizedScene(ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskSynchronizedScene(_ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9);
}
/**
 * ```
 * Actually has 3 params, not 2.
 * p0: Ped
 * p1: int (or bool?)
 * p2: int
 * ```
 * ```
 * NativeDB Added Parameter 3: Any p2
 * ```
 * Hash: 0xBD2A8EC3AF4DE7DB | ApiSet: undefined
 */
export function taskUseMobilePhone(ped, p1) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskUseMobilePhone(_ped, p1);
}
/**
 * ```
 * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
 * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
 * ---
 * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
 * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
 * ----------------------------------------------------
 * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
 * ```
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0x7285951DBF6B5A51 | ApiSet: undefined
 */
export function taskThrowProjectile(ped, position) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskThrowProjectile(_ped, position.x, position.y, position.z);
}
/**
 * ```
 * duration in milliseconds
 * ```
 * Hash: 0x1DDA930A0AC38571 | ApiSet: undefined
 */
export function taskTurnPedToFaceCoord(ped, position, duration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskTurnPedToFaceCoord(_ped, position.x, position.y, position.z, duration);
}
/**
 * ```
 * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * ```
 * Hash: 0x5AD23D40115353AC | ApiSet: undefined
 */
export function taskTurnPedToFaceEntity(ped, entity, duration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    TaskTurnPedToFaceEntity(_ped, _entity, duration);
}
/**
 * Hash: 0x9FDA1B3D7E7028B3 | ApiSet: undefined
 */
export function taskUseNearestScenarioChainToCoord(p0, p1, p2, p3, p4, p5) {
    TaskUseNearestScenarioChainToCoord(p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x5EE02954A14C69DB | ApiSet: undefined
 */
export function taskUseMobilePhoneTimed(ped, duration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskUseMobilePhoneTimed(_ped, duration);
}
/**
 * ```
 * Updated variables
 * `An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.`
 * ```
 * Hash: 0x277F471BA9DB000B | ApiSet: undefined
 */
export function taskUseNearestScenarioToCoord(ped, position, distance, duration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskUseNearestScenarioToCoord(_ped, position.x, position.y, position.z, distance, duration);
}
/**
 * Hash: 0x97A28E63F0BA5631 | ApiSet: undefined
 */
export function taskUseNearestScenarioChainToCoordWarp(p0, p1, p2, p3, p4, p5) {
    TaskUseNearestScenarioChainToCoordWarp(p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0xE41885592B08B097 | ApiSet: undefined
 */
export function taskVehicleAimAtPed(ped, target) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    TaskVehicleAimAtPed(_ped, _target);
}
/**
 * Hash: 0x447C1E9EF844BC0F | ApiSet: undefined
 */
export function taskVehicleAimAtCoord(ped, position) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskVehicleAimAtCoord(_ped, position.x, position.y, position.z);
}
/**
 * Hash: 0x58E2E0F23F6B76C3 | ApiSet: undefined
 */
export function taskUseNearestScenarioToCoordWarp(ped, position, radius, p5) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskUseNearestScenarioToCoordWarp(_ped, position.x, position.y, position.z, radius, p5);
}
/**
 * Drive randomly with no destination set.
 * Hash: 0x480142959D337D00 | ApiSet: undefined
 */
export function taskVehicleDriveWander(ped, vehicle, speed, drivingStyle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehicleDriveWander(_ped, _vehicle, speed, drivingStyle);
}
/**
 * ```
 * chases targetEnt fast and aggressively
 * --
 * Makes ped (needs to be in vehicle) chase targetEnt.
 * ```
 * Hash: 0x3C08A8E30363B353 | ApiSet: undefined
 */
export function taskVehicleChase(driver, targetEnt) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    const _targetEnt = targetEnt instanceof Entity ? targetEnt.handle() : targetEnt;
    TaskVehicleChase(_driver, _targetEnt);
}
/**
 * ```
 * info about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/
 * ---------------------------------------------------------------
 * Passing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.
 * P10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.
 * Here the e.g. code I used
 * Function.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);
 * ```
 * Hash: 0xE2A2AA2F659D77A7 | ApiSet: undefined
 */
export function taskVehicleDriveToCoord(ped, vehicle, position, speed, p6, vehicleModel, drivingMode, stopRange, p10) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    if (typeof vehicleModel === 'string')
        vehicleModel = this.getHashKey(vehicleModel);
    TaskVehicleDriveToCoord(_ped, _vehicle, position.x, position.y, position.z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
}
/**
 * ```
 * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
 * drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
 * ```
 * Hash: 0xFC545A9F0626E3B6 | ApiSet: undefined
 */
export function taskVehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _targetEntity = targetEntity instanceof Entity ? targetEntity.handle() : targetEntity;
    TaskVehicleFollow(_driver, _vehicle, _targetEntity, speed, drivingStyle, minDistance);
}
/**
 * ```
 * task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)
 * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
 * p3 = 786468
 * p4 = 0
 * p5 = 16
 * p6 = -1 (angle?)
 * p7/8/9 = usually v3.zero
 * p10 = bool (repeat?)
 * p11 = 1073741824
 * -khorio
 * ```
 * Hash: 0x3123FAA6DB1CF7ED | ApiSet: undefined
 */
export function taskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehicleFollowWaypointRecording(_ped, _vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9);
}
/**
 * ```
 * Makes a ped follow the targetVehicle with <minDistance> in between.
 * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
 * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
 * -1 = behind
 * 0 = ahead
 * 1 = left
 * 2 = right
 * 3 = back left
 * 4 = back right
 * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
 * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
 * ```
 * Hash: 0x0FA6E4B75F302400 | ApiSet: undefined
 */
export function taskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _targetVehicle = targetVehicle instanceof Entity ? targetVehicle.handle() : targetVehicle;
    TaskVehicleEscort(_ped, _vehicle, _targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
}
/**
 * You can let your character drive to the destination at the speed and driving style you set. You can use map marks to set the destination.
 * ```cpp
 * enum eDriveBehaviorFlags {
 * DF_StopForCars = 1,
 * DF_StopForPeds = 2,
 * DF_SwerveAroundAllCars = 4,
 * DF_SteerAroundStationaryCars = 8,
 * DF_SteerAroundPeds = 16,
 * DF_SteerAroundObjects = 32,
 * DF_DontSteerAroundPlayerPed = 64,
 * DF_StopAtLights = 128,
 * DF_GoOffRoadWhenAvoiding = 256,
 * DF_DriveIntoOncomingTraffic = 512,
 * DF_DriveInReverse = 1024,
 * DF_UseWanderFallbackInsteadOfStraightLine = 2048,
 * DF_AvoidRestrictedAreas = 4096,
 * DF_PreventBackgroundPathfinding = 8192, // **These only work on MISSION_CRUISE**
 * DF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384,
 * DF_UseShortCutLinks = 262144,
 * DF_ChangeLanesAroundObstructions = 524288,
 * DF_UseSwitchedOffNodes = 2097152,	//cruise tasks ignore this anyway--only used for goto's
 * DF_PreferNavmeshRoute = 4194304,	//if you're going to be primarily driving off road
 * DF_PlaneTaxiMode = 8388608, // Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly
 * DF_ForceStraightLine = 16777216,
 * DF_UseStringPullingAtJunctions = 33554432,
 * DF_AvoidHighways = 536870912,
 * DF_ForceJoinInRoadDirection = 1073741824
 * }
 * ```
 * Hash: 0x158BB33F920D360C | ApiSet: undefined
 */
export function taskVehicleDriveToCoordLongrange(ped, vehicle, position, speed, drivingStyle, stopRange) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehicleDriveToCoordLongrange(_ped, _vehicle, position.x, position.y, position.z, speed, drivingStyle, stopRange);
}
/**
 * All parameters except ped, vehicle, vehicleTarget and speed are optional; with `missionType` being only those that require a target entity.
 * If you don't want to use a parameter; pass `0` for int parameters, and `-1.0f` for the remaining float parameters.
 * ```cpp
 * enum eVehicleMissionType
 * {
 * None = 0,
 * Cruise = 1,
 * Ram = 2,
 * Block = 3,
 * GoTo = 4,
 * Stop = 5,
 * Attack = 6,
 * Follow = 7,
 * Flee = 8,
 * Circle = 9,
 * Escort = 12,
 * GoToRacing = 14,
 * FollowRecording = 15,
 * PoliceBehaviour = 16,
 * Land = 19,
 * LandAndWait = 20,
 * Crash = 21,
 * PullOver = 22,
 * HeliProtect = 23
 * }
 * ```
 * Hash: 0x659427E0EF36BCDE | ApiSet: undefined
 */
export function taskVehicleMission(ped, vehicle, vehicleTarget, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _vehicleTarget = vehicleTarget instanceof Entity ? vehicleTarget.handle() : vehicleTarget;
    TaskVehicleMission(_ped, _vehicle, _vehicleTarget, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic);
}
/**
 * ```
 * pilot, vehicle and altitude are rather self-explanatory.
 * p4: is unused variable in the function.
 * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
 * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
 * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
 * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
 * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
 * ```
 * Hash: 0x1E09C32048FEFD1C | ApiSet: undefined
 */
export function taskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7) {
    const _pilot = pilot instanceof Ped ? pilot.handle() : pilot;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _entityToFollow = entityToFollow instanceof Entity ? entityToFollow.handle() : entityToFollow;
    TaskVehicleHeliProtect(_pilot, _vehicle, _entityToFollow, targetSpeed, p4, radius, altitude, p7);
}
/**
 * ```
 * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
 * WARNING:
 * A behaviorFlag value of 0 will result in a clunky, stupid driver!
 * Recommended settings:
 * speed = 30.0f,
 * behaviorFlag = 156,
 * stoppingRange = 5.0f;
 * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
 * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
 * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
 * ```
 * Hash: 0x195AEEB13CEFE2EE | ApiSet: undefined
 */
export function taskVehicleGotoNavmesh(ped, vehicle, position, speed, behaviorFlag, stoppingRange) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehicleGotoNavmesh(_ped, _vehicle, position.x, position.y, position.z, speed, behaviorFlag, stoppingRange);
}
/**
 * ```
 * Modes:
 * 0 - ignore heading
 * 1 - park forward
 * 2 - park backwards
 * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
 * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
 * ```
 * Hash: 0x0F3E34E968EA374E | ApiSet: undefined
 */
export function taskVehiclePark(ped, vehicle, position, heading, mode, radius, keepEngineOn) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehiclePark(_ped, _vehicle, position.x, position.y, position.z, heading, mode, radius, keepEngineOn);
}
/**
 * All parameters except ped, vehicle, pedTarget and speed are optional; with `missionType` being only those that require a target entity.
 * If you don't want to use a parameter; pass `0` for int parameters, and `-1.0f` for the remaining float parameters.
 * Hash: 0x9454528DF15D657A | ApiSet: undefined
 */
export function taskVehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _pedTarget = pedTarget instanceof Ped ? pedTarget.handle() : pedTarget;
    TaskVehicleMissionPedTarget(_ped, _vehicle, _pedTarget, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic);
}
/**
 * All parameters except ped, vehicle, x, y, z and speed are optional; with `missionType` being only those that don't require a target entity.
 * If you don't want to use a parameter; pass `0` for int parameters, and `-1.0f` for the remaining float parameters.
 * Hash: 0xF0AF20AA7731F8C3 | ApiSet: undefined
 */
export function taskVehicleMissionCoorsTarget(ped, vehicle, position, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehicleMissionCoorsTarget(_ped, _vehicle, position.x, position.y, position.z, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic);
}
/**
 * Hash: 0x5190796ED39C9B6D | ApiSet: undefined
 */
export function taskVehicleShootAtCoord(ped, position, p4) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskVehicleShootAtCoord(_ped, position.x, position.y, position.z, p4);
}
/**
 * ```
 * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
 * Here's how its used -
 * `TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");`
 * `TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0\/\*1\*\/], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");`
 * FYI : Speedo is the name of van in which chop was put in the mission.
 * ```
 * Hash: 0x69F5C3BD0F3EBD89 | ApiSet: undefined
 */
export function taskVehiclePlayAnim(vehicle, animationSet, animationName) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehiclePlayAnim(_vehicle, animationSet, animationName);
}
/**
 * ```
 * Makes ped walk around the area.
 * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
 * ```
 * Hash: 0xBB9CE077274F6A1B | ApiSet: undefined
 */
export function taskWanderStandard(ped, p1, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskWanderStandard(_ped, p1, p2);
}
/**
 * Gives the vehicle a temporary action.
 * **Note**: For migrating objects, a `CScriptEntityStateChangeEvent` will be sent over the network to let other clients know that this object is being given a temporary action. At the same time, temporary actions cannot be applied to clones/remote objects.
 * ```cpp
 * enum eTempAction {
 * TA_NONE = 0,
 * TA_WAIT = 1,
 * TA_UNUSED = 2,
 * TA_BRAKE_REVERSE = 3,
 * TA_HANDBRAKE_TURN_LEFT = 4,
 * TA_HANDBRAKE_TURN_RIGHT = 5,
 * TA_HANDBRAKE_UNTIL_TIME_ENDS = 6,
 * TA_TURN_LEFT = 7,
 * TA_TURN_RIGHT = 8,
 * TA_ACCELERATE = 9,
 * TA_TURN_LEFT = 10,
 * TA_TURN_RIGHT = 11,
 * TA_UNUSED_12 = 12,
 * TA_TURN_LEFT_GO_REVERSE = 13,
 * TA_TURN_RIGHT_GO_REVERSE = 14,
 * TA_PLANE_FLY_UP = 15, // (crashes game if not in plane)
 * TA_PLANE_FLY_STRAIGHT = 16, // (crashes game if not in plane)
 * TA_PLANE_SHARP_LEFT = 17, // (crashes game if not in plane)
 * TA_PLANE_SHARP_RIGHT = 18, // (crashes game if not in plane)
 * TA_STRONG_BRAKE = 19,
 * TA_TURN_LEFT_AND_STOP = 20,
 * TA_TURN_RIGHT_AND_STOP = 21,
 * TA_GO_IN_REVERSE = 22,
 * TA_ACCELERATE_FAST = 23,
 * TA_BRAKE_ACTION = 24,
 * TA_HANDBRAKE_TURN_LEFT_MORE = 25,
 * TA_HANDBRAKE_TURN_RIGHT_MORE = 26,
 * TA_HANDBRAKE_BRAKE_STRAIGHT = 27,
 * TA_BRAKE_STRONG_REVERSE_ACCELERATION = 28,
 * TA_UNUSED_29 = 29,
 * TA_PERFORMS_BURNOUT = 30,
 * TA_REV_ENGINE = 31,
 * TA_ACCELERATE_VERY_STRONG = 32,
 * TA_SURFACE_IN_SUBMARINE = 33
 * };
 * ```
 * Hash: 0xC429DCEEB339E129 | ApiSet: undefined
 */
export function taskVehicleTempAction(driver, vehicle, action, time) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskVehicleTempAction(_driver, _vehicle, action, time);
}
/**
 * Hash: 0x10AB107B887214D8 | ApiSet: undefined
 */
export function taskVehicleShootAtPed(ped, target, p2) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    TaskVehicleShootAtPed(_ped, _target, p2);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Warp a ped into a vehicle.
 * **Note**: It's better to use [`TASK_ENTER_VEHICLE`](#\_0xC20E50AA46D09CA8) with the flag "warp" flag instead of this native.
 * Hash: 0x9A7D091411C5F684 | ApiSet: undefined
 */
export function taskWarpPedIntoVehicle(ped, vehicle, seatIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TaskWarpPedIntoVehicle(_ped, _vehicle, seatIndex);
}
/**
 * This task warps a ped directly into a cover position closest to the specified point. This can be used to quickly place peds in strategic positions during gameplay.
 * ```
 * NativeDB Introduced: 2545
 * ```
 * Hash: 0x6E01E9E8D89F8276 | ApiSet: undefined
 */
export function taskWarpPedDirectlyIntoCover(ped, time, canPeekAndAim, forceInitialFacingDirection, forceFaceLeft, coverIndex) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskWarpPedDirectlyIntoCover(_ped, time, canPeekAndAim, forceInitialFacingDirection, forceFaceLeft, coverIndex);
}
/**
 * Makes a ped wander/patrol around the specified area.
 * The ped will continue to wander after getting distracted, but only if this additional task is temporary, ie. killing a target, after killing the target it will continue to wander around.
 * Use `GetIsTaskActive(ped, 222)` to check if the ped is still wandering the area.
 * Hash: 0xE054346CA3A0F315 | ApiSet: undefined
 */
export function taskWanderInArea(ped, position, radius, minimalLength, timeBetweenWalks) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    TaskWanderInArea(_ped, position.x, position.y, position.z, radius, minimalLength, timeBetweenWalks);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x6919A2F136426098 | ApiSet: undefined
 */
export function taskWanderSpecific(p0, p1, p2, p3) {
    TaskWanderSpecific(p0, p1, p2, p3);
}
/**
 * Hash: 0x67406F2C8F87FC4F | ApiSet: undefined
 */
export function uncuffPed(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    UncuffPed(_ped);
}
/**
 * Hash: 0xA98FCAFD7893C834 | ApiSet: undefined
 */
export function updateTaskHandsUpDuration(ped, duration) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    UpdateTaskHandsUpDuration(_ped, duration);
}
/**
 * Hash: 0x9724FB59A3E72AD0 | ApiSet: undefined
 */
export function updateTaskAimGunScriptedTarget(p0, p1, p2, p3, p4, p5) {
    const _p0 = p0 instanceof Ped ? p0.handle() : p0;
    const _p1 = p1 instanceof Ped ? p1.handle() : p1;
    UpdateTaskAimGunScriptedTarget(_p0, _p1, p2, p3, p4, p5);
}
/**
 * ```
 * NativeDB Added Parameter 5: Any p4
 * NativeDB Added Parameter 6: Any p5
 * ```
 * Hash: 0xCDDC2B77CE54AC6E | ApiSet: undefined
 */
export function taskWrithe(ped, target, time, p3) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _target = target instanceof Ped ? target.handle() : target;
    TaskWrithe(_ped, _target, time, p3);
}
/**
 * Hash: 0xBB106883F5201FC4 | ApiSet: undefined
 */
export function updateTaskSweepAimPosition(p0, p1, p2, p3) {
    UpdateTaskSweepAimPosition(p0, p1, p2, p3);
}
/**
 * Hash: 0xE4973DBDBE6E44B3 | ApiSet: undefined
 */
export function updateTaskSweepAimEntity(ped, entity) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    UpdateTaskSweepAimEntity(_ped, _entity);
}
/**
 * Hash: 0x8A4E6AC373666BC5 | ApiSet: undefined
 */
export function vehicleWaypointPlaybackPause(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    VehicleWaypointPlaybackPause(_vehicle);
}
/**
 * Hash: 0x121F0593E0A431D7 | ApiSet: undefined
 */
export function vehicleWaypointPlaybackOverrideSpeed(vehicle, speed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    VehicleWaypointPlaybackOverrideSpeed(_vehicle, speed);
}
/**
 * Hash: 0x5A353B8E6B1095B5 | ApiSet: undefined
 */
export function useWaypointRecordingAsAssistedMovementRoute(name, p1, p2, p3) {
    UseWaypointRecordingAsAssistedMovementRoute(name, p1, p2, p3);
}
/**
 * Hash: 0x7D7D2B47FA788E85 | ApiSet: undefined
 */
export function waypointPlaybackOverrideSpeed(p0, p1, p2) {
    WaypointPlaybackOverrideSpeed(p0, p1, p2);
}
/**
 * Hash: 0xDC04FCAA7839D492 | ApiSet: undefined
 */
export function vehicleWaypointPlaybackResume(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    VehicleWaypointPlaybackResume(_vehicle);
}
/**
 * Hash: 0x5CEB25A7D2848963 | ApiSet: undefined
 */
export function vehicleWaypointPlaybackUseDefaultSpeed(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    VehicleWaypointPlaybackUseDefaultSpeed(_vehicle);
}
/**
 * Hash: 0x701375A7D43F01CB | ApiSet: undefined
 */
export function waypointPlaybackGetIsPaused(p0) {
    return WaypointPlaybackGetIsPaused(p0);
}
/**
 * Hash: 0x244F70C84C547D2D | ApiSet: undefined
 */
export function waypointPlaybackResume(p0, p1, p2, p3) {
    WaypointPlaybackResume(p0, p1, p2, p3);
}
/**
 * Hash: 0x057A25CFCC9DB671 | ApiSet: undefined
 */
export function waypointPlaybackStartShootingAtCoord(p0, p1, p2, p3, p4, p5) {
    WaypointPlaybackStartShootingAtCoord(p0, p1, p2, p3, p4, p5);
}
/**
 * Hash: 0x0F342546AA06FED5 | ApiSet: undefined
 */
export function waypointPlaybackPause(p0, p1, p2) {
    WaypointPlaybackPause(p0, p1, p2);
}
/**
 * Hash: 0x6599D834B12D0800 | ApiSet: undefined
 */
export function waypointPlaybackUseDefaultSpeed(p0) {
    WaypointPlaybackUseDefaultSpeed(p0);
}
/**
 * Hash: 0x20E330937C399D29 | ApiSet: undefined
 */
export function waypointPlaybackStartAimingAtPed(p0, p1, p2) {
    WaypointPlaybackStartAimingAtPed(p0, p1, p2);
}
/**
 * Hash: 0x8968400D900ED8B3 | ApiSet: undefined
 */
export function waypointPlaybackStartAimingAtCoord(p0, p1, p2, p3, p4) {
    WaypointPlaybackStartAimingAtCoord(p0, p1, p2, p3, p4);
}
/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * ```
 * Hash: 0xB629A298081F876F | ApiSet: undefined
 */
export function waypointRecordingGetClosestWaypoint(name, position) {
    return WaypointRecordingGetClosestWaypoint(name, position.x, position.y, position.z);
}
/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * ```
 * Hash: 0x5343532C01A07234 | ApiSet: undefined
 */
export function waypointRecordingGetNumPoints(name) {
    return WaypointRecordingGetNumPoints(name);
}
/**
 * Hash: 0x47EFA040EBB8E2EA | ApiSet: undefined
 */
export function waypointPlaybackStopAimingOrShooting(p0) {
    WaypointPlaybackStopAimingOrShooting(p0);
}
/**
 * Hash: 0xE70BA7B90F8390DC | ApiSet: undefined
 */
export function waypointPlaybackStartShootingAtPed(p0, p1, p2, p3) {
    WaypointPlaybackStartShootingAtPed(p0, p1, p2, p3);
}
/**
 * Hash: 0x005622AEBC33ACA9 | ApiSet: undefined
 */
export function waypointRecordingGetSpeedAtPoint(name, point) {
    return WaypointRecordingGetSpeedAtPoint(name, point);
}
/**
 * ```
 * For a full list of the points, see here: goo.gl/wIH0vn
 * ```
 * Hash: 0x2FB897405C90B361 | ApiSet: undefined
 */
export function waypointRecordingGetCoord(name, point) {
    const result = WaypointRecordingGetCoord(name, point);
    return new Vector3(result[1], result[2], result[3]);
}
/**
 * Hash: 0x2CE544C68FB812A0 | ApiSet: undefined
 */
export function addRoadNodeSpeedZone(position, radius, speed, p5) {
    return AddRoadNodeSpeedZone(position.x, position.y, position.z, radius, speed, p5);
}
/**
 * Hash: 0x54B0F614960F4A5F | ApiSet: undefined
 */
export function addVehicleCombatAngledAvoidanceArea(p0, p1, p2, p3, p4, p5, p6) {
    return AddVehicleCombatAngledAvoidanceArea(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * This native it's a debug native. Won't do anything.
 * Hash: 0xB264C4D2F2B0A78B | ApiSet: undefined
 */
export function allowAmbientVehiclesToAvoidAdverseConditions(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    AllowAmbientVehiclesToAvoidAdverseConditions(_vehicle);
}
/**
 * Hash: 0x99AD4CCCB128CBC9 | ApiSet: undefined
 */
export function addVehiclePhoneExplosiveDevice(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    AddVehiclePhoneExplosiveDevice(_vehicle);
}
/**
 * Hash: 0x2FA9923062DD396C | ApiSet: undefined
 */
export function addVehicleStuckCheckWithWarp(p0, p1, p2, p3, p4, p5, p6) {
    AddVehicleStuckCheckWithWarp(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * ```
 * Returns false if every seat is occupied.
 * ```
 * Hash: 0x2D34FC3BC4ADB780 | ApiSet: undefined
 */
export function areAnyVehicleSeatsFree(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return AreAnyVehicleSeatsFree(_vehicle);
}
/**
 * ```
 * Appears to return false if any window is broken.
 * ```
 * Hash: 0x11D862A3E977A9EF | ApiSet: undefined
 */
export function areAllVehicleWindowsIntact(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return AreAllVehicleWindowsIntact(_vehicle);
}
/**
 * Hash: 0xB72E26D81006005B | ApiSet: undefined
 */
export function addVehicleUpsidedownCheck(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    AddVehicleUpsidedownCheck(_vehicle);
}
/**
 * Returns true when the bomb bay doors of this plane are open. False if they're closed.
 * Hash: 0xD0917A423314BBA8 | ApiSet: undefined
 */
export function areBombBayDoorsOpen(aircraft) {
    const _aircraft = aircraft instanceof Entity ? aircraft.handle() : aircraft;
    return AreBombBayDoorsOpen(_aircraft);
}
/**
 * Hash: 0x5991A01434CE9677 | ApiSet: undefined
 */
export function arePlaneWingsIntact(plane) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    return ArePlaneWingsIntact(_plane);
}
/**
 * Only used with the "akula" in the decompiled native scripts.
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xAEF12960FA943792 | ApiSet: undefined
 */
export function areHeliStubWingsDeployed(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return AreHeliStubWingsDeployed(_vehicle);
}
/**
 * Returns whether the outrigger legs are deployed for the vehicle.
 * The Chernobog is one of the few vehicles with outrigger legs.
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x3A9128352EAC9E85 | ApiSet: undefined
 */
export function areOutriggerLegsDeployed(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return AreOutriggerLegsDeployed(_vehicle);
}
/**
 * Hash: 0xA1DD82F3CCF9A01E | ApiSet: undefined
 */
export function attachEntityToCargobob(vehicle, entity, p2, position) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    AttachEntityToCargobob(_vehicle, _entity, p2, position.x, position.y, position.z);
}
/**
 * Queries whether the control panels of a plane are intact. This native is used to determine the operational status of a plane's cockpit controls, which can affect the plane's flyability.
 * Hash: 0xF78F94D60248C737 | ApiSet: undefined
 */
export function arePlaneControlPanelsIntact(vehicle, checkForZeroHealth) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return ArePlaneControlPanelsIntact(_vehicle, checkForZeroHealth);
}
/**
 * Hash: 0x6A98C2ECF57FA5D4 | ApiSet: undefined
 */
export function attachContainerToHandlerFrame(handler, container) {
    const _handler = handler instanceof Entity ? handler.handle() : handler;
    const _container = container instanceof Entity ? container.handle() : container;
    AttachContainerToHandlerFrame(_handler, _container);
}
/**
 * Hash: 0x755D6D5267CBBD7E | ApiSet: undefined
 */
export function arePlanePropellersIntact(plane) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    return ArePlanePropellersIntact(_plane);
}
/**
 * Hash: 0x4127F1D84E347769 | ApiSet: undefined
 */
export function attachVehicleToCargobob(cargobob, vehicle, vehicleBoneIndex, position) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    AttachVehicleToCargobob(_cargobob, _vehicle, vehicleBoneIndex, position.x, position.y, position.z);
}
/**
 * This native makes the vehicle stop immediately, as it happens when we enter a multiplayer garage.
 * Hash: 0x260BE8F09E326A20 | ApiSet: undefined
 */
export function bringVehicleToHalt(vehicle, distance, duration, bControlVerticalVelocity) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    BringVehicleToHalt(_vehicle, distance, duration, bControlVerticalVelocity);
}
/**
 * ```
 * HookOffset defines where the hook is attached. leave at 0 for default attachment.
 * ```
 * Hash: 0x29A16F8D621C4508 | ApiSet: undefined
 */
export function attachVehicleToTowTruck(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ) {
    const _towTruck = towTruck instanceof Entity ? towTruck.handle() : towTruck;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    AttachVehicleToTowTruck(_towTruck, _vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
}
/**
 * Hash: 0x16B5E274BDE402F8 | ApiSet: undefined
 */
export function attachVehicleOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableColls) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _trailer = trailer instanceof Entity ? trailer.handle() : trailer;
    AttachVehicleOnToTrailer(_vehicle, _trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableColls);
}
/**
 * Determines whether the specified Cargobob can pick up a given entity.
 * Hash: 0x2C1D8B3B19E517CC | ApiSet: undefined
 */
export function canCargobobPickUpEntity(cargobob, entity) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return CanCargobobPickUpEntity(_cargobob, _entity);
}
/**
 * Hash: 0x3C7D42D58F770B54 | ApiSet: undefined
 */
export function attachVehicleToTrailer(vehicle, trailer, radius) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _trailer = trailer instanceof Entity ? trailer.handle() : trailer;
    AttachVehicleToTrailer(_vehicle, _trailer, radius);
}
/**
 * ```
 * NativeDB Introduced: 3095
 * ```
 * Resets or clears the nitrous system for a specified vehicle. You can check if a vehicle has nitrous with [`IS_NITROUS_ACTIVE`](#\_0x491E822B2C464FE4)
 * Hash: 0xC889AE921400E1ED | ApiSet: undefined
 */
export function clearNitrous(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ClearNitrous(_vehicle);
}
/**
 * Checks if a boat can be anchored at its present position without possibly intersecting collision later.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x26C10ECBDA5D043B | ApiSet: undefined
 */
export function canAnchorBoatHere(boat) {
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    return CanAnchorBoatHere(_boat);
}
/**
 * Checks if a boat can be anchored at its present position, ignoring any players standing on the boat.
 * ```
 * NativeDB Introduced: v678
 * ```
 * Hash: 0x24F4121D07579880 | ApiSet: undefined
 */
export function canAnchorBoatHereIgnorePlayers(boat) {
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    return CanAnchorBoatHereIgnorePlayers(_boat);
}
/**
 * Hash: 0x30785D90C956BF35 | ApiSet: undefined
 */
export function canShuffleSeat(vehicle, seatIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return CanShuffleSeat(_vehicle, seatIndex);
}
/**
 * Hash: 0x5FFBDEEC3E8E2009 | ApiSet: undefined
 */
export function clearVehicleCustomSecondaryColour(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ClearVehicleCustomSecondaryColour(_vehicle);
}
/**
 * Hash: 0x55E1D2758F34E437 | ApiSet: undefined
 */
export function clearVehicleCustomPrimaryColour(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ClearVehicleCustomPrimaryColour(_vehicle);
}
/**
 * Hash: 0xE01903C47C7AC89E | ApiSet: undefined
 */
export function clearLastDrivenVehicle() {
    ClearLastDrivenVehicle();
}
/**
 * Removes the cargen area of interest and resumes normal cargen spawning.
 * You can set the area of interest with [`SET_VEHICLE_GENERATOR_AREA_OF_INTEREST`](#\_0x9A75585FB2E54FAD)
 * Hash: 0x0A436B8643716D14 | ApiSet: undefined
 */
export function clearVehicleGeneratorAreaOfInterest() {
    ClearVehicleGeneratorAreaOfInterest();
}
/**
 * ```
 * Works for vehicles with a retractable landing gear
 * landing gear states:
 * 0: Deployed
 * 1: Closing
 * 2: Opening
 * 3: Retracted
 * ```
 * Hash: 0xCFC8BE9A5E1FE575 | ApiSet: undefined
 */
export function controlLandingGear(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ControlLandingGear(_vehicle, state);
}
/**
 * Hash: 0xAA3F739ABDDCF21F | ApiSet: undefined
 */
export function clearVehiclePhoneExplosiveDevice() {
    ClearVehiclePhoneExplosiveDevice();
}
/**
 * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
 * Hash: 0xE44A982368A4AF23 | ApiSet: undefined
 */
export function copyVehicleDamages(sourceVehicle, targetVehicle) {
    const _sourceVehicle = sourceVehicle instanceof Entity ? sourceVehicle.handle() : sourceVehicle;
    const _targetVehicle = targetVehicle instanceof Entity ? targetVehicle.handle() : targetVehicle;
    CopyVehicleDamages(_sourceVehicle, _targetVehicle);
}
/**
 * Hash: 0x3556041742A0DC74 | ApiSet: undefined
 */
export function closeBombBayDoors(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    CloseBombBayDoors(_vehicle);
}
/**
 * Train models must be [requested](#\_0x963D27A58DF860AC) before use. See trains.xml (located in `Grand Theft Auto V\update\update.rpf\common\data\levels\gta5\trains.xml`) for freight and metro variations.
 * Model names to request can be found by searching `model_name` in the file.
 * The `Lua` usage example provided down below has been provided in such way so users can test each and every train variation.
 * ### Newly added parameters (seen in 2372 build)
 * ```
 * NativeDB Added Parameter 6: BOOL isNetwork
 * NativeDB Added Parameter 7: BOOL netMissionEntity
 * ```
 * *   **isNetwork**: Whether to create a network object for the train. If false, the train exists only locally.
 * *   **netMissionEntity**: Whether to register the train as pinned to the script host in the R\* network model.
 * ### Train Models:
 * *   freight
 * ### Carriage Models:
 * *   freightcar
 * *   freightcar2 (Added v2372)
 * *   freightcont1
 * *   freightcont2
 * *   freightgrain
 * *   metrotrain
 * *   tankercar
 * ### Some train variations (default from trains.xml as of build 2372)
 * *   17. Very long train and freight variation.
 * *   18. Freight train only.
 * *   26. Double metro train (with both models flipped opposite to each other). This used to be `25` before the 2802 build, it also used to be `24` before the 2372 build.
 * Hash: 0x63C6CCA8E68AE8C8 | ApiSet: undefined
 */
export function createMissionTrain(variation, position, direction) {
    return CreateMissionTrain(variation, position.x, position.y, position.z, direction);
}
/**
 * Hash: 0x6D6AF961B72728AE | ApiSet: undefined
 */
export function clearVehicleRouteHistory(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ClearVehicleRouteHistory(_vehicle);
}
/**
 * Removes a scripted vehicle generator.
 * Hash: 0x22102C9ABFCF125D | ApiSet: undefined
 */
export function deleteScriptVehicleGenerator(vehicleGenerator) {
    DeleteScriptVehicleGenerator(vehicleGenerator);
}
/**
 * Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating
 * script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
 * ```
 * NativeDB Added Parameter 8: BOOL p7
 * ```
 * Hash: 0xAF35D0D2583051B0 | ApiSet: undefined
 */
export function createVehicle(modelHash, position, heading, isNetwork, netMissionEntity) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreateVehicle(modelHash, position.x, position.y, position.z, heading, isNetwork, netMissionEntity);
}
/**
 * ```
 * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
 * Parameters:
 * a/w/s - Generator position
 * heading - Generator heading
 * p4 - Unknown (always 5.0)
 * p5 - Unknown (always 3.0)
 * modelHash - Vehicle model hash
 * p7/8/9/10 - Unknown (always -1)
 * p11 - Unknown (usually TRUE, only one instance of FALSE)
 * p12/13 - Unknown (always FALSE)
 * p14 - Unknown (usally FALSE, only two instances of TRUE)
 * p15 - Unknown (always TRUE)
 * p16 - Unknown (always -1)
 * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);	CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
 * ```
 * Hash: 0x9DEF883114668116 | ApiSet: undefined
 */
export function createScriptVehicleGenerator(position, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return CreateScriptVehicleGenerator(position.x, position.y, position.z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
}
/**
 * Drops the Hook/Magnet on a cargobob
 * ```cpp
 * enum eCargobobHook
 * {
 * CARGOBOB_HOOK = 0,
 * CARGOBOB_MAGNET = 1,
 * };
 * ```
 * Hash: 0x7BEB0C7A235F6F3B | ApiSet: undefined
 */
export function createPickUpRopeForCargobob(cargobob, state) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    CreatePickUpRopeForCargobob(_cargobob, state);
}
/**
 * Detaches the specified entity currently being carried by a Cargobob.
 * Hash: 0xAF03011701811146 | ApiSet: undefined
 */
export function detachEntityFromCargobob(vehicle, entity) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return DetachEntityFromCargobob(_vehicle, _entity);
}
/**
 * Used to delete mission trains created with [`CREATE_MISSION_TRAIN`](#\_0x63C6CCA8E68AE8C8).
 * Hash: 0x5B76B14AE875C795 | ApiSet: undefined
 */
export function deleteMissionTrain(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DeleteMissionTrain(_vehicle);
}
/**
 * Hash: 0x736A718577F39C7D | ApiSet: undefined
 */
export function deleteAllTrains() {
    DeleteAllTrains();
}
/**
 * Hash: 0x0E21D3DF1051399D | ApiSet: undefined
 */
export function detachVehicleFromCargobob(cargobob, vehicle) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DetachVehicleFromCargobob(_cargobob, _vehicle);
}
/**
 * Hash: 0x7C0043FDFF6436BC | ApiSet: undefined
 */
export function detachContainerFromHandlerFrame(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DetachContainerFromHandlerFrame(_vehicle);
}
/**
 * ```
 * Deletes a vehicle.
 * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * eg how to use:
 * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * DELETE_VEHICLE(&vehicle);
 * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
 * ```
 * Hash: 0xEA386986E786A54F | ApiSet: undefined
 */
export function deleteVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DeleteVehicle(_vehicle);
}
/**
 * Hash: 0xD0E9CE05A1E68CD8 | ApiSet: undefined
 */
export function detachVehicleFromAnyTowTruck(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DetachVehicleFromAnyTowTruck(_vehicle);
}
/**
 * Hash: 0xADF7BE450512C12F | ApiSet: undefined
 */
export function detachVehicleFromAnyCargobob(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DetachVehicleFromAnyCargobob(_vehicle);
}
/**
 * ```
 * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
 * ```
 * Hash: 0xC2DB6B6708350ED8 | ApiSet: undefined
 */
export function detachVehicleFromTowTruck(towTruck, vehicle) {
    const _towTruck = towTruck instanceof Entity ? towTruck.handle() : towTruck;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DetachVehicleFromTowTruck(_towTruck, _vehicle);
}
/**
 * Hash: 0xEF49CF0270307CBE | ApiSet: undefined
 */
export function detonateVehiclePhoneExplosiveDevice() {
    DetonateVehiclePhoneExplosiveDevice();
}
/**
 * Hash: 0x32CAEDF24A583345 | ApiSet: undefined
 */
export function disableVehicleTurretMovementThisFrame(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DisableVehicleTurretMovementThisFrame(_vehicle);
}
/**
 * Hash: 0x90532EDF0D2BDD86 | ApiSet: undefined
 */
export function detachVehicleFromTrailer(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DetachVehicleFromTrailer(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x500873A45724C863 | ApiSet: undefined
 */
export function disableIndividualPlanePropeller(vehicle, propeller) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DisableIndividualPlanePropeller(_vehicle, propeller);
}
/**
 * Disables collision for this vehicle (maybe it also supports other entities, not sure).
 * Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
 * [Example video](https://streamable.com/6n45d5)
 * Not sure if there is a native (and if so, which one) that resets the collisions.
 * Hash: 0x75627043C6AA90AD | ApiSet: undefined
 */
export function disableVehicleWorldCollision(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DisableVehicleWorldCollision(_vehicle);
}
/**
 * ```
 * how does this work?
 * ```
 * Hash: 0xF4FC6A6F67D8D856 | ApiSet: undefined
 */
export function disableVehicleWeapon(disabled, weaponHash, vehicle, owner) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _owner = owner instanceof Ped ? owner.handle() : owner;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    DisableVehicleWeapon(disabled, weaponHash, _vehicle, _owner);
}
/**
 * ```
 * Returns true only when the hook is active, will return false if the magnet is active
 * ```
 * Hash: 0x1821D91AD4B56108 | ApiSet: undefined
 */
export function doesCargobobHavePickUpRope(cargobob) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    return DoesCargobobHavePickUpRope(_cargobob);
}
/**
 * Hash: 0x23428FC53C60919C | ApiSet: undefined
 */
export function disablePlaneAileron(vehicle, p1, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DisablePlaneAileron(_vehicle, p1, p2);
}
/**
 * ```
 * Checks via CVehicleModelInfo
 * ```
 * Hash: 0x1262D55792428154 | ApiSet: undefined
 */
export function doesExtraExist(vehicle, extraId) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesExtraExist(_vehicle, extraId);
}
/**
 * Hash: 0x83F813570FF519DE | ApiSet: undefined
 */
export function disableVehicleNeonLights(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    DisableVehicleNeonLights(_vehicle, toggle);
}
/**
 * Hash: 0xF6086BC836400876 | ApiSet: undefined
 */
export function doesScriptVehicleGeneratorExist(vehicleGenerator) {
    return DoesScriptVehicleGeneratorExist(vehicleGenerator);
}
/**
 * ```
 * Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
 * ```
 * Hash: 0x4E417C547182C84D | ApiSet: undefined
 */
export function doesVehicleAllowRappel(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleAllowRappel(_vehicle);
}
/**
 * Hash: 0x956B409B984D9BF7 | ApiSet: undefined
 */
export function doesVehicleExistWithDecorator(decorator) {
    return DoesVehicleExistWithDecorator(decorator);
}
/**
 * Determines whether the specified vehicle is equipped with a searchlight.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x99015ED7DBEA5113 | ApiSet: undefined
 */
export function doesVehicleHaveSearchlight(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleHaveSearchlight(_vehicle);
}
/**
 * ```
 * Returns true only when the magnet is active, will return false if the hook is active
 * ```
 * Hash: 0x6E08BF5B3722BAC9 | ApiSet: undefined
 */
export function doesCargobobHavePickupMagnet(cargobob) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    return DoesCargobobHavePickupMagnet(_cargobob);
}
/**
 * Determines whether a specific vehicle is equipped with a roof.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x8AC862B0B32C5B80 | ApiSet: undefined
 */
export function doesVehicleHaveRoof(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleHaveRoof(_vehicle);
}
/**
 * ```
 * Checks if vehicle tyre at index exists. Also returns false if tyre was removed.
 * ```
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x534E36D4DB9ECC5D | ApiSet: undefined
 */
export function doesVehicleTyreExist(vehicle, tyreIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleTyreExist(_vehicle, tyreIndex);
}
/**
 * ```
 * Maximum amount of vehicles with vehicle stuck check appears to be 16.
 * ```
 * Hash: 0x57E4C39DE5EE8470 | ApiSet: undefined
 */
export function doesVehicleHaveStuckVehicleCheck(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleHaveStuckVehicleCheck(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0xE43701C36CAFF1A4 | ApiSet: undefined
 */
export function doesVehicleHaveLandingGear(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleHaveLandingGear(_vehicle);
}
/**
 * Hash: 0xE38CB9D7D39FDBCC | ApiSet: undefined
 */
export function ejectJb700Roof(vehicle, position) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    EjectJb700Roof(_vehicle, position.x, position.y, position.z);
}
/**
 * Hash: 0x25ECB9F8017D98E0 | ApiSet: undefined
 */
export function doesVehicleHaveWeapons(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return DoesVehicleHaveWeapons(_vehicle);
}
/**
 * Enables individual propeller on a propeller plane. This native is the inverse of [`DISABLE_INDIVIDUAL_PLANE_PROPELLER`](#\_0x500873A45724C863).
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0xDC05D2777F855F44 | ApiSet: undefined
 */
export function enableIndividualPlanePropeller(plane, propeller) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    EnableIndividualPlanePropeller(_plane, propeller);
}
/**
 * ```
 * Explodes a selected vehicle.
 * Vehicle vehicle = Vehicle you want to explode.
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
 * ```
 * Hash: 0xBA71116ADF5B514C | ApiSet: undefined
 */
export function explodeVehicle(vehicle, isAudible, isInvisible) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ExplodeVehicle(_vehicle, isAudible, isInvisible);
}
/**
 * ```
 * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
 * ```
 * Hash: 0x1F2E4E06DEA8992B | ApiSet: undefined
 */
export function forcePlaybackRecordedVehicleUpdate(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ForcePlaybackRecordedVehicleUpdate(_vehicle, p1);
}
/**
 * ```
 * Finds the vehicle that is carrying this entity with a handler frame.
 * The model of the entity must be prop_contr_03b_ld or the function will return 0.
 * ```
 * Hash: 0x375E7FC44F21C8AB | ApiSet: undefined
 */
export function findVehicleCarryingThisEntity(entity) {
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return FindVehicleCarryingThisEntity(_entity);
}
/**
 * Hash: 0x786A4EB67B01BF0B | ApiSet: undefined
 */
export function explodeVehicleInCutscene(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ExplodeVehicleInCutscene(_vehicle, p1);
}
/**
 * Native is significantly more complicated than simply generating a random vector & length.
 * `The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport\_\__IsSphereVisible.`
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x8DC9675797123522 | ApiSet: undefined
 */
export function findRandomPointInSpace(ped) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    return new Vector3(FindRandomPointInSpace(_ped));
}
/**
 * For FiveM, use [`GET_GAME_POOL`](#\_0x2B9D4F50).
 * Hash: 0x9B8E1BF04B51F2E8 | ApiSet: undefined
 */
export function getAllVehicles() {
    return GetAllVehicles();
}
/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * This function is coded to not work on vehicles of type: `CBike`, `Bmx`, `CBoat`, `CTrain`, and `CSubmarine`.
 * Hash: 0x772282EBEB95E682 | ApiSet: undefined
 */
export function fixVehicleWindow(vehicle, windowIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    FixVehicleWindow(_vehicle, windowIndex);
}
/**
 * Forces a submarine to maintain neutral buoyancy for a specified duration, preventing it from rising when unoccupied or without a driver.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0xC67DB108A9ADE3BE | ApiSet: undefined
 */
export function forceSubmarineNeurtalBuoyancy(submarine, time) {
    const _submarine = submarine instanceof Entity ? submarine.handle() : submarine;
    ForceSubmarineNeurtalBuoyancy(_submarine, time);
}
/**
 * Hash: 0x33506883545AC0DF | ApiSet: undefined
 */
export function forceSubmarineSurfaceMode(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ForceSubmarineSurfaceMode(_vehicle, toggle);
}
/**
 * ```
 * `Same call as VEHICLE::_0x0F3B4D4E43177236`
 * ```
 * Hash: 0xC1F981A6F74F0C23 | ApiSet: undefined
 */
export function getBoatBoomPositionRatio2(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    GetBoatBoomPositionRatio2(_vehicle, p1);
}
/**
 * ```
 * Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
 * ```
 * Hash: 0x9078C0C5EF8C19E9 | ApiSet: undefined
 */
export function getCanVehicleJump(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetCanVehicleJump(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v3095
 * ```
 * Recharges the nitrous system of the specified vehicle to its maximum capacity. This action sets the nitrous charge duration to the maximum limit defined by previous settings applied through [`SET_OVERRIDE_NITROUS_LEVEL`](#\_0xC8E9B6B71B8E660D).
 * Hash: 0x1A2BCC8C636F9226 | ApiSet: undefined
 */
export function fullyChargeNitrous(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    FullyChargeNitrous(_vehicle);
}
/**
 * Hash: 0x6636C535F6CC2725 | ApiSet: undefined
 */
export function getBoatBoomPositionRatio(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetBoatBoomPositionRatio(_vehicle);
}
/**
 * ```
 * Example usage
 * `VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)`
 * x, y, z: Position to get closest vehicle to.
 * radius: Max radius to get a vehicle.
 * modelHash: Limit to vehicles with this model. 0 for any.
 * flags: The bitwise flags altering the function's behaviour.
 * Does not return police cars or helicopters.
 * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
 * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
 * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
 * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
 * Conversion of found flags to binary: pastebin.com/kghNFkRi
 * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
 * `It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT`
 * -------------------------------------------------------------------------
 * Conclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h
 * Use flag 127 to return police cars
 * ```
 * Hash: 0xF73EB622C4F1689B | ApiSet: undefined
 */
export function getClosestVehicle(position, radius, modelHash, flags) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetClosestVehicle(position.x, position.y, position.z, radius, modelHash, flags);
}
/**
 * Retrieves the agility for a specific boat model, including any vehicle mods. Unlike other vehicles where Rockstar Games typically assess performance based on traction, boats use agility as a measure. This static value is distinct from the traction metrics used for other vehicle types.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x5AA3F878A178C4FC | ApiSet: undefined
 */
export function getBoatVehicleModelAgility(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetBoatVehicleModelAgility(modelHash);
}
/**
 * Hash: 0x0F3B4D4E43177236 | ApiSet: undefined
 */
export function getBoatBoomPositionRatio3(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    GetBoatBoomPositionRatio3(_vehicle, p1);
}
/**
 * Returns the convertible state of the specified vehicle.
 * ```cpp
 * enum eRoofState {
 * RAISED = 0,
 * LOWERING = 1,
 * LOWERED = 2,
 * RAISING = 3,
 * CLOSING_BOOT = 4,
 * ROOF_STUCK_RAISED = 5,
 * ROOF_STUCK_LOWERED = 6
 * }
 * ```
 * Hash: 0xF8C397922FC03F41 | ApiSet: undefined
 */
export function getConvertibleRoofState(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetConvertibleRoofState(_vehicle);
}
/**
 * Gets the position of the cargobob hook, in world coords.
 * Hash: 0xCBDB9B923CACC92D | ApiSet: undefined
 */
export function getCargobobHookPosition(cargobob) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    return new Vector3(GetCargobobHookPosition(_cargobob));
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x71AFB258CCED3A27 | ApiSet: undefined
 */
export function getDoesVehicleHaveTombstone(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetDoesVehicleHaveTombstone(_vehicle);
}
/**
 * Hash: 0x42BC05C27A946054 | ApiSet: undefined
 */
export function getCurrentPlaybackForVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetCurrentPlaybackForVehicle(_vehicle);
}
/**
 * Returns the display name/text label (`gameName` in `vehicles.meta`) for the specified vehicle model.
 * Hash: 0xB215AAC32D25D019 | ApiSet: undefined
 */
export function getDisplayNameFromVehicleModel(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetDisplayNameFromVehicleModel(modelHash);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x2F5A72430E78C8D3 | ApiSet: undefined
 */
export function getDriftTyresEnabled(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetDriftTyresEnabled(_vehicle);
}
/**
 * Hash: 0x99093F60746708CA | ApiSet: undefined
 */
export function getEntityAttachedToCargobob(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetEntityAttachedToCargobob(_vehicle);
}
/**
 * Hash: 0xEFEA18DCF10F8F75 | ApiSet: undefined
 */
export function getEntityAttachedToTowTruck(towTruck) {
    const _towTruck = towTruck instanceof Entity ? towTruck.handle() : towTruck;
    return GetEntityAttachedToTowTruck(_towTruck);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0xC0572928C0ABFDA3 | ApiSet: undefined
 */
export function getEntryPositionOfDoor(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return new Vector3(GetEntryPositionOfDoor(_vehicle, doorIndex));
}
/**
 * Hash: 0xDCA174A42133F08C | ApiSet: undefined
 */
export function getHasRetractableWheels(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetHasRetractableWheels(_vehicle);
}
/**
 * ```
 * Max 1000.
 * At 0 the main rotor will stall.
 * ```
 * Hash: 0xE4CB7541F413D2C5 | ApiSet: undefined
 */
export function getHeliMainRotorHealth(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetHeliMainRotorHealth(_vehicle);
}
/**
 * Hash: 0x36D782F68B309BDA | ApiSet: undefined
 */
export function getHasRocketBoost(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetHasRocketBoost(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xAE8CE82A4219AC8C | ApiSet: undefined
 */
export function getHeliTailRotorHealth(heli) {
    const _heli = heli instanceof Entity ? heli.handle() : heli;
    return GetHeliTailRotorHealth(_heli);
}
/**
 * ```
 * Max 1000.
 * At -100 both helicopter rotors will stall.
 * ```
 * Hash: 0xAC51915D27E4A5F7 | ApiSet: undefined
 */
export function getHeliTailBoomHealth(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetHeliTailBoomHealth(_vehicle);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0x645F4B6E8499F632 | ApiSet: undefined
 */
export function getIsDoorValid(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsDoorValid(_vehicle, doorIndex);
}
/**
 * ```
 * From the driver's perspective, is the right headlight broken.
 * ```
 * Hash: 0xA7ECB73355EB2F20 | ApiSet: undefined
 */
export function getIsRightVehicleHeadlightDamaged(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsRightVehicleHeadlightDamaged(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x0BB5CBDDD0F25AE3 | ApiSet: undefined
 */
export function getHydraulicWheelValue(vehicle, wheelId) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetHydraulicWheelValue(_vehicle, wheelId);
}
/**
 * Checks if the vehicle is electric.
 * ```
 * NativeDB Introduced: v3258
 * ```
 * Hash: 0x1FCB07FE230B6639 | ApiSet: undefined
 */
export function getIsVehicleElectric(vehicleModel) {
    if (typeof vehicleModel === 'string')
        vehicleModel = this.getHashKey(vehicleModel);
    return GetIsVehicleElectric(vehicleModel);
}
/**
 * Checks whether the specified boat vehicle is capsized, meaning it has overturned or is upside down in the water.
 * Hash: 0xBA91D045575699AD | ApiSet: undefined
 */
export function getIsBoatCapsized(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsBoatCapsized(_vehicle);
}
/**
 * ```
 * From the driver's perspective, is the left headlight broken.
 * ```
 * Hash: 0x5EF77C9ADD3B11A3 | ApiSet: undefined
 */
export function getIsLeftVehicleHeadlightDamaged(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsLeftVehicleHeadlightDamaged(_vehicle);
}
/**
 * ```
 * Returns true when in a vehicle, false whilst entering/exiting.
 * ```
 * Hash: 0xAE31E7DF9B5B132E | ApiSet: undefined
 */
export function getIsVehicleEngineRunning(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsVehicleEngineRunning(_vehicle);
}
/**
 * ```
 * Returns whether this vehicle is currently disabled by an EMP mine.
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x0506ED94363AD905 | ApiSet: undefined
 */
export function getIsVehicleEmpDisabled(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsVehicleEmpDisabled(_vehicle);
}
/**
 * ```
 * Check if Vehicle Secondary is avaliable for customize
 * ```
 * Hash: 0x910A32E7AAD2656C | ApiSet: undefined
 */
export function getIsVehicleSecondaryColourCustom(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsVehicleSecondaryColourCustom(_vehicle);
}
/**
 * Hash: 0xF095C0405307B21B | ApiSet: undefined
 */
export function getIsVehiclePrimaryColourCustom(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsVehiclePrimaryColourCustom(_vehicle);
}
/**
 * Hash: 0xB2D06FAEDE65B577 | ApiSet: undefined
 */
export function getLastDrivenVehicle() {
    return GetLastDrivenVehicle();
}
/**
 * ```
 * Landing gear states:
 * 0: Deployed
 * 1: Closing (Retracting)
 * 3: Opening (Deploying)
 * 4: Retracted
 * 5: Broken
 * ```
 * Landing gear state 2 is never used.
 * Hash: 0x9B0F3DCA3DB0F4CD | ApiSet: undefined
 */
export function getLandingGearState(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetLandingGearState(_vehicle);
}
/**
 * ```
 * Second Param = LiveryIndex
 * example
 * `int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);`
 * for (int i = 0; i < count; i++)
 * {
 * `char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);`
 * }
 * this example will work fine to fetch all names
 * for example for Sanchez we get
 * SANC_LV1
 * SANC_LV2
 * SANC_LV3
 * SANC_LV4
 * SANC_LV5
 * Use _GET_LABEL_TEXT, to get the localized livery name.
 * ```
 * NOTE: You may need to set the vehicle's modKit to 0 by using this function [SET_VEHICLE_MOD_KIT](#\_0x1F2AA07F00B3217A) before getting the name, otherwise this native may return NULL.
 * Hash: 0xB4C7A93837C91A1F | ApiSet: undefined
 */
export function getLiveryName(vehicle, liveryIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetLiveryName(_vehicle, liveryIndex);
}
/**
 * Hash: 0x1DA0DA9CB3F0C8BF | ApiSet: undefined
 */
export function getIsWheelsLoweredStateActive(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsWheelsLoweredStateActive(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xA2459F72C14E2E8D | ApiSet: undefined
 */
export function getIsVehicleShuntBoostActive(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetIsVehicleShuntBoostActive(_vehicle);
}
/**
 * Retrieves the manufacturer's name for a specified vehicle.
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0xF7AF4F159FF99F97 | ApiSet: undefined
 */
export function getMakeNameFromVehicleModel(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetMakeNameFromVehicleModel(modelHash);
}
/**
 * ```
 * Returns last vehicle that was rammed by the given vehicle using the shunt boost.
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x04F2FA6E234162F7 | ApiSet: undefined
 */
export function getLastRammedVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetLastRammedVehicle(_vehicle);
}
/**
 * Hash: 0x33F2E3FE70EAAE1D | ApiSet: undefined
 */
export function getNumModKits(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetNumModKits(_vehicle);
}
/**
 * Hash: 0x83F969AA1EE2A664 | ApiSet: undefined
 */
export function getLastPedInVehicleSeat(vehicle, seatIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetLastPedInVehicleSeat(_vehicle, seatIndex);
}
/**
 * ```
 * Returns the text label of a mod type for a given vehicle
 * Use _GET_LABEL_TEXT to get the part name in the game's language
 * ```
 * Hash: 0x8935624F8C5592CC | ApiSet: undefined
 */
export function getModTextLabel(vehicle, modType, modValue) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetModTextLabel(_vehicle, modType, modValue);
}
/**
 * ```
 * Actually number of color combinations
 * ```
 * Hash: 0x3B963160CD65D41E | ApiSet: undefined
 */
export function getNumberOfVehicleColours(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetNumberOfVehicleColours(_vehicle);
}
/**
 * Hash: 0x51F0FEB9F6AE98C0 | ApiSet: undefined
 */
export function getModSlotName(vehicle, modType) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetModSlotName(_vehicle, modType);
}
/**
 * ```
 * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
 * ```
 * Hash: 0x4C4D6B2644F458CB | ApiSet: undefined
 */
export function getNumberOfVehicleNumberPlates() {
    return GetNumberOfVehicleNumberPlates();
}
/**
 * Gets the ped in the specified seat of the passed vehicle.
 * If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
 * **NativeDB Added Parameter 3**: BOOL p2 (uses a different GetOccupant function)
 * Hash: 0xBB40DD2270B65366 | ApiSet: undefined
 */
export function getPedInVehicleSeat(vehicle, seatIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetPedInVehicleSeat(_vehicle, seatIndex);
}
/**
 * ```
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * ```
 * Hash: 0xA551BE18C11A476D | ApiSet: undefined
 */
export function getNumModColors(paintType, p1) {
    return GetNumModColors(paintType, p1);
}
/**
 * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
 * See [`REQUEST_VEHICLE_RECORDING`](#\_0xAF514CABE74CBF15).
 * Hash: 0xD242728AA6F0FBA2 | ApiSet: undefined
 */
export function getPositionOfVehicleRecordingAtTime(recording, time, script) {
    return new Vector3(GetPositionOfVehicleRecordingAtTime(recording, time, script));
}
/**
 * ```
 * Returns how many possible mods a vehicle has for a given mod type
 * ```
 * Hash: 0xE38E9162A2500646 | ApiSet: undefined
 */
export function getNumVehicleMods(vehicle, modType) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetNumVehicleMods(_vehicle, modType);
}
/**
 * ```
 * Distance traveled in the vehicles current recording.
 * ```
 * Hash: 0x2DACD605FC681475 | ApiSet: undefined
 */
export function getPositionInRecording(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetPositionInRecording(_vehicle);
}
/**
 * Hash: 0x9D1224004B3A6707 | ApiSet: undefined
 */
export function getNumVehicleWindowTints() {
    return GetNumVehicleWindowTints();
}
/**
 * Hash: 0x92922A607497B14D | ApiSet: undefined
 */
export function getNumberOfVehicleDoors(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetNumberOfVehicleDoors(_vehicle);
}
/**
 * Hash: 0xC5574E0AEB86BA68 | ApiSet: undefined
 */
export function getRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6) {
    return GetRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0x218297BF0CFD853B | ApiSet: undefined
 */
export function getPedUsingVehicleDoor(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetPedUsingVehicleDoor(_vehicle, doorIndex);
}
/**
 * Hash: 0xB50807EABE20A8DC | ApiSet: undefined
 */
export function getRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6) {
    return GetRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6);
}
/**
 * Hash: 0x92523B76657A517D | ApiSet: undefined
 */
export function getPositionOfVehicleRecordingIdAtTime(id, time) {
    return new Vector3(GetPositionOfVehicleRecordingIdAtTime(id, time));
}
/**
 * ```
 * NativeDB Introduced: 3095
 * ```
 * Retrieves the remaining duration of nitrous boost available for the specified vehicle.
 * Hash: 0xBEC4B8653462450E | ApiSet: undefined
 */
export function getRemainingNitrousDuration(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetRemainingNitrousDuration(_vehicle);
}
/**
 * ```
 * Gets a random vehicle in a sphere at the specified position, of the specified radius.
 * x: The X-component of the position of the sphere.
 * y: The Y-component of the position of the sphere.
 * z: The Z-component of the position of the sphere.
 * radius: The radius of the sphere. Max is 9999.9004.
 * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
 * flags: The bitwise flags that modifies the behaviour of this function.
 * ```
 * Hash: 0x386F6CE5BAF6091C | ApiSet: undefined
 */
export function getRandomVehicleInSphere(position, radius, modelHash, flags) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetRandomVehicleInSphere(position.x, position.y, position.z, radius, modelHash, flags);
}
/**
 * Hash: 0xF0F2103EFAF8CBA7 | ApiSet: undefined
 */
export function getRotationOfVehicleRecordingIdAtTime(id, time) {
    return new Vector3(GetRotationOfVehicleRecordingIdAtTime(id, time));
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x55EAB010FAEE9380 | ApiSet: undefined
 */
export function getTyreHealth(vehicle, wheelIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetTyreHealth(_vehicle, wheelIndex);
}
/**
 * Determines if the submarine is operating below its designated crush depth.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x3E71D0B300B7AA79 | ApiSet: undefined
 */
export function getSubmarineIsUnderDesignDepth(submarine) {
    const _submarine = submarine instanceof Entity ? submarine.handle() : submarine;
    return GetSubmarineIsUnderDesignDepth(_submarine);
}
/**
 * ```
 * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
 * ```
 * Hash: 0x08AAFD0814722BC3 | ApiSet: undefined
 */
export function getTrainCarriage(train, trailerNumber) {
    const _train = train instanceof Entity ? train.handle() : train;
    return GetTrainCarriage(_train, trailerNumber);
}
/**
 * ```
 * Not present in the retail version! It's just a nullsub.
 * p0 always true (except in one case)
 * p1 a random vehicle hash loaded in memory
 * successIndicator: 0 if success, -1 if failed
 * ```
 * Hash: 0x055BF0AC0C34F4FD | ApiSet: undefined
 */
export function getRandomVehicleModelInMemory(p0) {
    return GetRandomVehicleModelInMemory(p0);
}
/**
 * Checks if a Submarine has any air leaks, when there is more than 4 the player will drown.
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x093D6DDCA5B8FBAE | ApiSet: undefined
 */
export function getSubmarineNumberOfAirLeaks(submarine) {
    const _submarine = submarine instanceof Entity ? submarine.handle() : submarine;
    return GetSubmarineNumberOfAirLeaks(_submarine);
}
/**
 * Hash: 0x0E48D1C262390950 | ApiSet: undefined
 */
export function getTotalDurationOfVehicleRecording(recording, script) {
    return GetTotalDurationOfVehicleRecording(recording, script);
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x6E387895952F4F71 | ApiSet: undefined
 */
export function getTyreWearMultiplier(vehicle, wheelIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetTyreWearMultiplier(_vehicle, wheelIndex);
}
/**
 * Hash: 0x2058206FBE79A8AD | ApiSet: undefined
 */
export function getRotationOfVehicleRecordingAtTime(recording, time) {
    return new Vector3(GetRotationOfVehicleRecordingAtTime(recording, time));
}
/**
 * Hash: 0x102D125411A7B6E6 | ApiSet: undefined
 */
export function getTotalDurationOfVehicleRecordingId(id) {
    return GetTotalDurationOfVehicleRecordingId(id);
}
/**
 * ```
 * Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
 * ```
 * Hash: 0x5746F3A7AB7FE544 | ApiSet: undefined
 */
export function getTimePositionInRecording(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetTimePositionInRecording(_vehicle);
}
/**
 * Retrieves a static value representing the maximum drive force of specific a vehicle, including any vehicle mods. This value does not change dynamically during gameplay. This value provides an approximation and should be considered alongside other performance metrics like top speed for a more comprehensive understanding of the vehicle's capabilities.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x5DD35C8D074E57AE | ApiSet: undefined
 */
export function getVehicleAcceleration(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleAcceleration(_vehicle);
}
/**
 * Gets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * In decompiled scripts this is used to check if the vehicle has enough bombs before a bomb can be dropped (bombs are dropped by using [`_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_WITH_EXTRA_PARAMS`](#\_0xBFE5756E7407064A)).
 * Use [`_SET_AIRCRAFT_BOMB_COUNT`](#\_0xF4B2ED59DEB5D774) to set the amount of bombs on that vehicle.
 * Hash: 0xEA12BD130D7569A1 | ApiSet: undefined
 */
export function getVehicleBombCount(aircraft) {
    const _aircraft = aircraft instanceof Entity ? aircraft.handle() : aircraft;
    return GetVehicleBombCount(_aircraft);
}
/**
 * ```
 * Returns an int
 * Vehicle Classes:
 * 0: Compacts
 * 1: Sedans
 * 2: SUVs
 * 3: Coupes
 * 4: Muscle
 * 5: Sports Classics
 * 6: Sports
 * 7: Super
 * 8: Motorcycles
 * 9: Off-road
 * 10: Industrial
 * 11: Utility
 * 12: Vans
 * 13: Cycles
 * 14: Boats
 * 15: Helicopters
 * 16: Planes
 * 17: Service
 * 18: Emergency
 * 19: Military
 * 20: Commercial
 * 21: Trains
 * 22: Open Wheel
 * char buffer[128];
 * `std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));`
 * `char* className = UI::_GET_LABEL_TEXT(buffer);`
 * ```
 * Hash: 0x29439776AAA00A62 | ApiSet: undefined
 */
export function getVehicleClass(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleClass(_vehicle);
}
/**
 * ```
 * Returns attached vehicle (Vehicle in parameter must be cargobob)
 * ```
 * Hash: 0x873B82D42AC2B9E5 | ApiSet: undefined
 */
export function getVehicleAttachedToCargobob(cargobob) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    return GetVehicleAttachedToCargobob(_cargobob);
}
/**
 * Hash: 0xE495D1EF4C91FD20 | ApiSet: undefined
 */
export function getVehicleCauseOfDestruction(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleCauseOfDestruction(_vehicle);
}
/**
 * ```
 * Seems related to vehicle health, like the one in IV.
 * Max 1000, min 0.
 * Vehicle does not necessarily explode or become undrivable at 0.
 * ```
 * Hash: 0xF271147EB7B40F12 | ApiSet: undefined
 */
export function getVehicleBodyHealth(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleBodyHealth(_vehicle);
}
/**
 * Hash: 0x2F83E7E45D9EA7AE | ApiSet: undefined
 */
export function getVehicleClassMaxAcceleration(vehicleClass) {
    return GetVehicleClassMaxAcceleration(vehicleClass);
}
/**
 * Hash: 0x00C09F246ABEDD82 | ApiSet: undefined
 */
export function getVehicleClassEstimatedMaxSpeed(vehicleClass) {
    return GetVehicleClassEstimatedMaxSpeed(vehicleClass);
}
/**
 * See [`SET_VEHICLE_CUSTOM_PRIMARY_COLOUR`](#\_0x7141766F91D15BEA) and [`SET_VEHICLE_CUSTOM_SECONDARY_COLOUR`](#\_0x36CED73BFED89754).
 * Hash: 0xF3CC740D36221548 | ApiSet: undefined
 */
export function getVehicleColor(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleColor(_vehicle);
}
/**
 * Hash: 0xA916396DF4154EE3 | ApiSet: undefined
 */
export function getVehicleCanActivateParachute(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleCanActivateParachute(_vehicle);
}
/**
 * Hash: 0x4F930AD022D6DE3B | ApiSet: undefined
 */
export function getVehicleClassMaxAgility(vehicleClass) {
    return GetVehicleClassMaxAgility(vehicleClass);
}
/**
 * Hash: 0x4BF54C16EC8FEC03 | ApiSet: undefined
 */
export function getVehicleClassMaxBraking(vehicleClass) {
    return GetVehicleClassMaxBraking(vehicleClass);
}
/**
 * ```
 * For a full enum, see here : pastebin.com/i2GGAjY0
 * char buffer[128];
 * `std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));`
 * `const char* className = HUD::_GET_LABEL_TEXT(buffer);`
 * ```
 * Hash: 0xDEDF1C8BD47C2200 | ApiSet: undefined
 */
export function getVehicleClassFromName(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleClassFromName(modelHash);
}
/**
 * Hash: 0xDBC86D85C5059461 | ApiSet: undefined
 */
export function getVehicleClassMaxTraction(vehicleClass) {
    return GetVehicleClassMaxTraction(vehicleClass);
}
/**
 * Hash: 0x6A842D197F845D56 | ApiSet: undefined
 */
export function getVehicleColourCombination(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleColourCombination(_vehicle);
}
/**
 * Hash: 0xA19435F193E081AC | ApiSet: undefined
 */
export function getVehicleColours(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleColours(_vehicle);
}
/**
 * Similar to [`_GET_AIRCRAFT_BOMB_COUNT`](#\_0xEA12BD130D7569A1), this gets the amount of countermeasures that are present on this vehicle.
 * Use [`_SET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\_0x9BDA23BF666F0855) to set the current amount.
 * Hash: 0xF846AA63DF56B804 | ApiSet: undefined
 */
export function getVehicleCountermeasureCount(aircraft) {
    const _aircraft = aircraft instanceof Entity ? aircraft.handle() : aircraft;
    return GetVehicleCountermeasureCount(_aircraft);
}
/**
 * ```cpp
 * enum eColourBitField {
 * HAS_BODY_COLOUR1 = 1,
 * HAS_BODY_COLOUR2 = 2,
 * HAS_BODY_COLOUR3 = 4,
 * HAS_BODY_COLOUR4 = 8,
 * HAS_BODY_COLOUR5 = 16
 * }
 * ```
 * Hash: 0xEEBFC7A7EFDC35B4 | ApiSet: undefined
 */
export function getVehicleColoursWhichCanBeSet(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleColoursWhichCanBeSet(_vehicle);
}
/**
 * Hash: 0xB64CF2CCA9D95F52 | ApiSet: undefined
 */
export function getVehicleCustomPrimaryColour(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleCustomPrimaryColour(_vehicle);
}
/**
 * Hash: 0xB7635E80A5C31BFF | ApiSet: undefined
 */
export function getVehicleDashboardColor(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleDashboardColor(_vehicle);
}
/**
 * ```
 * Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
 * GET_VEHICLE_*
 * ```
 * Hash: 0x36492C2F0D134C56 | ApiSet: undefined
 */
export function getVehicleCurrentSlipstreamDraft(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleCurrentSlipstreamDraft(_vehicle);
}
/**
 * Hash: 0x8389CD56CA8072DC | ApiSet: undefined
 */
export function getVehicleCustomSecondaryColour(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleCustomSecondaryColour(_vehicle);
}
/**
 * ```
 * The only example I can find of this function in the scripts, is this:
 * `struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);`
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * PC scripts:
 * `v_5\/\*{3}\*\/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);`
 * ```
 * Hash: 0x4EC6CFBC7B2E9536 | ApiSet: undefined
 */
export function getVehicleDeformationAtPos(vehicle, offsetX, offsetY, offsetZ) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return new Vector3(GetVehicleDeformationAtPos(_vehicle, offsetX, offsetY, offsetZ));
}
/**
 * A getter for [`SET_VEHICLE_DIRT_LEVEL`](#\_0x79D3B596FE44EE8B).
 * Hash: 0x8F17BC8BA08DA62B | ApiSet: undefined
 */
export function getVehicleDirtLevel(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleDirtLevel(_vehicle);
}
/**
 * Checks the angle of the door mapped from 0.0 - 1.0 where 0.0 is fully closed and 1.0 is fully open.
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0xFE3F9C29F7B32BD5 | ApiSet: undefined
 */
export function getVehicleDoorAngleRatio(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleDoorAngleRatio(_vehicle, doorIndex);
}
/**
 * Hash: 0xF6AF6CB341349015 | ApiSet: undefined
 */
export function getVehicleDoorsLockedForPlayer(vehicle, player) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _player = player instanceof Entity ? player.remoteId() : player;
    return GetVehicleDoorsLockedForPlayer(_vehicle, _player);
}
/**
 * Hash: 0x25BC98A59C2EA962 | ApiSet: undefined
 */
export function getVehicleDoorLockStatus(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleDoorLockStatus(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v3258
 * ```
 * **Note**: When using this native, the hash of the vehicle needs to be loaded into the client's memory. This can be done by requesting the model with [`REQUEST_MODEL`](#\_0x963D27A58DF860AC) or by simply having the vehicle spawned.
 * ```cpp
 * enum eVehicleDrivetrainType
 * {
 * INVALID = 0,
 * FWD = 1,
 * RWD = 2,
 * AWD = 3
 * };
 * ```
 * ```
 * NativeDB Introduced: v3258
 * ```
 * Hash: 0x1423725069EE1D14 | ApiSet: undefined
 */
export function getVehicleDrivetrainType(vehicleModel) {
    if (typeof vehicleModel === 'string')
        vehicleModel = this.getHashKey(vehicleModel);
    return GetVehicleDrivetrainType(vehicleModel);
}
/**
 * ```
 * formerly known as _GET_VEHICLE_PAINT_FADE
 * The result is a value from 0-1, where 0 is fresh paint.
 * ```
 * Hash: 0xA82819CAC9C4C403 | ApiSet: undefined
 */
export function getVehicleEnveffScale(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleEnveffScale(_vehicle);
}
/**
 * ```
 * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
 * Minimum: -4000
 * Maximum: 1000
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * ```
 * Hash: 0xC45D23BAF168AAB8 | ApiSet: undefined
 */
export function getVehicleEngineHealth(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleEngineHealth(_vehicle);
}
/**
 * Hash: 0x50634E348C8D44EF | ApiSet: undefined
 */
export function getVehicleHasKers(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleHasKers(_vehicle);
}
/**
 * Hash: 0x3BC4245933A166F7 | ApiSet: undefined
 */
export function getVehicleExtraColours(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleExtraColours(_vehicle);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0xCA4AC3EAAE46EC7B | ApiSet: undefined
 */
export function getVehicleIndividualDoorLockStatus(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleIndividualDoorLockStatus(_vehicle, doorIndex);
}
/**
 * Retrieves a static value representing the estimated max speed of a specific vehicle, including any vehicle mods. This value does not change dynamically during gameplay.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x53AF99BAA671CA47 | ApiSet: undefined
 */
export function getVehicleEstimatedMaxSpeed(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleEstimatedMaxSpeed(_vehicle);
}
/**
 * Hash: 0xBC9CFF381338CB4F | ApiSet: undefined
 */
export function getVehicleHasParachute(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleHasParachute(_vehicle);
}
/**
 * ```
 * NativeDB Added Parameter 2: float maxEngineHealth
 * NativeDB Added Parameter 3: float maxPetrolTankHealth
 * NativeDB Added Parameter 4: float maxBodyHealth
 * NativeDB Added Parameter 5: float maxMainRotorHealth
 * NativeDB Added Parameter 6: float maxTailRotorHealth
 * NativeDB Added Parameter 7: float maxUnkHealth
 * ```
 * Hash: 0xB8EF61207C2393A9 | ApiSet: undefined
 */
export function getVehicleHealthPercentage(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleHealthPercentage(_vehicle);
}
/**
 * Returns whether the specified vehicle is designated as a mercenary vehicle
 * Hash: 0xD4C4642CB7F50B5D | ApiSet: undefined
 */
export function getVehicleIsMercenary(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleIsMercenary(_vehicle);
}
/**
 * Hash: 0xDA62027C8BDB326E | ApiSet: undefined
 */
export function getVehicleFlightNozzlePosition(aircraft) {
    const _aircraft = aircraft instanceof Entity ? aircraft.handle() : aircraft;
    return GetVehicleFlightNozzlePosition(_aircraft);
}
/**
 * Hash: 0x7D1464D472D32136 | ApiSet: undefined
 */
export function getVehicleInteriorColor(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleInteriorColor(_vehicle);
}
/**
 * ```
 * Returns a value depending on the lock-on state of vehicle weapons.
 * 0: not locked on
 * 1: locking on
 * 2: locked on
 * ```
 * Hash: 0xE6B0E8CFC3633BF0 | ApiSet: undefined
 */
export function getVehicleHomingLockonState(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleHomingLockonState(_vehicle);
}
/**
 * Hash: 0xB91B4C20085BD12F | ApiSet: undefined
 */
export function getVehicleLightsState(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleLightsState(_vehicle);
}
/**
 * Hash: 0xAD7E85FC227197C4 | ApiSet: undefined
 */
export function getVehicleMaxBraking(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleMaxBraking(_vehicle);
}
/**
 * Hash: 0x8F5EBAB1F260CFCE | ApiSet: undefined
 */
export function getVehicleLockOnTarget(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleLockOnTarget(_vehicle);
}
/**
 * Hash: 0x28D37D4F71AC5C58 | ApiSet: undefined
 */
export function getVehicleLayoutHash(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleLayoutHash(_vehicle);
}
/**
 * Hash: 0xE8D65CA700C9A693 | ApiSet: undefined
 */
export function getVehicleModColor1(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModColor1(_vehicle);
}
/**
 * ```
 * returns a string which is the codename of the vehicle's currently selected secondary color
 * ```
 * Hash: 0x4967A516ED23A5A1 | ApiSet: undefined
 */
export function getVehicleModColor2Name(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModColor2Name(_vehicle);
}
/**
 * ```
 * Returns -1 if the vehicle has no livery
 * ```
 * Hash: 0x87B63E25A529D526 | ApiSet: undefined
 */
export function getVehicleLiveryCount(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleLiveryCount(_vehicle);
}
/**
 * ```
 * -1 = no livery
 * ```
 * Hash: 0x2BB9230590DA5E8A | ApiSet: undefined
 */
export function getVehicleLivery(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleLivery(_vehicle);
}
/**
 * ```
 * returns a string which is the codename of the vehicle's currently selected primary color
 * p1 is always 0
 * ```
 * Hash: 0xB45085B721EFD38C | ApiSet: undefined
 */
export function getVehicleModColor1Name(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModColor1Name(_vehicle, p1);
}
/**
 * ```
 * Can be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF
 * ```
 * Hash: 0x4593CF82AA179706 | ApiSet: undefined
 */
export function getVehicleModIdentifierHash(vehicle, modType, modIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModIdentifierHash(_vehicle, modType, modIndex);
}
/**
 * Hash: 0xA7C4F2C6E744A550 | ApiSet: undefined
 */
export function getVehicleMaxNumberOfPassengers(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleMaxNumberOfPassengers(_vehicle);
}
/**
 * Hash: 0xA132FB5370554DB0 | ApiSet: undefined
 */
export function getVehicleMaxTraction(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleMaxTraction(_vehicle);
}
/**
 * Hash: 0xFC058F5121E54C32 | ApiSet: undefined
 */
export function getVehicleModKitType(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModKitType(_vehicle);
}
/**
 * Hash: 0x81592BE4E3878728 | ApiSet: undefined
 */
export function getVehicleModColor2(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModColor2(_vehicle);
}
/**
 * Hash: 0x772960298DA26FDB | ApiSet: undefined
 */
export function getVehicleMod(vehicle, modType) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleMod(_vehicle, modType);
}
/**
 * Hash: 0x90A38E9838E0A8C1 | ApiSet: undefined
 */
export function getVehicleModModifierValue(vehicle, modType, modIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModModifierValue(_vehicle, modType, modIndex);
}
/**
 * Hash: 0x6325D1A044AE510D | ApiSet: undefined
 */
export function getVehicleModKit(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModKit(_vehicle);
}
/**
 * ```
 * Returns max speed (without mods) of the specified vehicle model in m/s.
 * ```
 * Hash: 0xF417C2502FFFED43 | ApiSet: undefined
 */
export function getVehicleModelEstimatedMaxSpeed(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelEstimatedMaxSpeed(modelHash);
}
/**
 * ```
 * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
 * ```
 * Hash: 0xB3924ECD70E095DC | ApiSet: undefined
 */
export function getVehicleModVariation(vehicle, modType) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleModVariation(_vehicle, modType);
}
/**
 * ```
 * GET_VEHICLE_MODEL_*
 * 9.8 * thrust if air vehicle, else 0.38 + drive force?
 * ```
 * Hash: 0x53409B5163D5B846 | ApiSet: undefined
 */
export function getVehicleModelEstimatedAgility(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelEstimatedAgility(modelHash);
}
/**
 * ```
 * Returns max braking of the specified vehicle model.
 * ```
 * Hash: 0xDC53FD41B4ED944C | ApiSet: undefined
 */
export function getVehicleModelMaxBraking(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelMaxBraking(modelHash);
}
/**
 * Returns the acceleration of the specified model.
 * Hash: 0x8C044C5C84505B6A | ApiSet: undefined
 */
export function getVehicleModelAcceleration(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelAcceleration(modelHash);
}
/**
 * ```
 * GET_VEHICLE_MODEL_*
 * Function pertains only to aviation vehicles.
 * ```
 * Hash: 0xC6AD107DDC9054CC | ApiSet: undefined
 */
export function getVehicleModelMaxKnots(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelMaxKnots(modelHash);
}
/**
 * ```
 * Returns max number of passengers (including the driver) for the specified vehicle model.
 * ```
 * Hash: 0x2AD93716F184EDA4 | ApiSet: undefined
 */
export function getVehicleModelNumberOfSeats(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelNumberOfSeats(modelHash);
}
/**
 * ```
 * Returns max traction of the specified vehicle model.
 * ```
 * Hash: 0x539DE94D44FDFD0D | ApiSet: undefined
 */
export function getVehicleModelMaxTraction(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelMaxTraction(modelHash);
}
/**
 * Hash: 0xBFBA3BA79CFF7EBF | ApiSet: undefined
 */
export function getVehicleModelMaxBrakingMaxMods(modelHash) {
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    return GetVehicleModelMaxBrakingMaxMods(modelHash);
}
/**
 * ```
 * Returns `nMonetaryValue` from handling.meta for specific model, which is the vehicle's monetary value.
 * ```
 * Hash: 0x5873C14A52D74236 | ApiSet: undefined
 */
export function getVehicleModelValue(vehicleModel) {
    if (typeof vehicleModel === 'string')
        vehicleModel = this.getHashKey(vehicleModel);
    return GetVehicleModelValue(vehicleModel);
}
/**
 * Hash: 0x2C8CBFE1EA5FC631 | ApiSet: undefined
 */
export function getVehicleNumberOfBrokenBones(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleNumberOfBrokenBones(_vehicle);
}
/**
 * Gets the color of the neon lights of the specified vehicle.
 * See [`_SET_VEHICLE_NEON_LIGHTS_COLOUR`](#\_0x8E0A582209A62695) for more information
 * Hash: 0x7619EEE8C886757F | ApiSet: undefined
 */
export function getVehicleNeonLightsColour(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleNeonLightsColour(_vehicle);
}
/**
 * ```
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * ```
 * Hash: 0x7D5DABE888D2D074 | ApiSet: undefined
 */
export function getVehiclePetrolTankHealth(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehiclePetrolTankHealth(_vehicle);
}
/**
 * ```
 * Also includes some "turnOffBones" when vehicle mods are installed.
 * ```
 * Hash: 0x42A4BEB35D372407 | ApiSet: undefined
 */
export function getVehicleNumberOfBrokenOffBones(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleNumberOfBrokenOffBones(_vehicle);
}
/**
 * ```
 * Returns the license plate text from a vehicle.  8 chars maximum.
 * ```
 * Hash: 0x7CE1CCB9B293020E | ApiSet: undefined
 */
export function getVehicleNumberPlateText(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleNumberPlateText(_vehicle);
}
/**
 * Returns index of the current vehicle's rooftop livery.
 * A getter for [\_SET_VEHICLE_ROOF_LIVERY](#\_0xA6D3A8750DC73270).
 * Hash: 0x60190048C0764A26 | ApiSet: undefined
 */
export function getVehicleRoofLivery(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleRoofLivery(_vehicle);
}
/**
 * ```
 * Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
 * ```
 * Hash: 0x24CB2137731FFE89 | ApiSet: undefined
 */
export function getVehicleNumberOfPassengers(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleNumberOfPassengers(_vehicle);
}
/**
 * See [`REQUEST_VEHICLE_RECORDING`](#\_0xAF514CABE74CBF15).
 * Hash: 0x21543C612379DB3C | ApiSet: undefined
 */
export function getVehicleRecordingId(recording, script) {
    return GetVehicleRecordingId(recording, script);
}
/**
 * ```
 * Outputs 2 Vector3's.
 * Scripts check if out2.x - out1.x > something.x
 * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
 * ```
 * Hash: 0xDF7E3EEB29642C38 | ApiSet: undefined
 */
export function getVehicleSuspensionBounds(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const result = GetVehicleSuspensionBounds(_vehicle);
    return [result[0], new Vector3(result[1], result[2], result[3]), new Vector3(result[2], result[3], result[4])];
}
/**
 * Returns the plates a vehicle has.
 * ```cpp
 * enum eVehiclePlateType
 * {
 * VPT_FRONT_AND_BACK_PLATES = 0,
 * VPT_FRONT_PLATES = 1,
 * VPT_BACK_PLATES = 2,
 * VPT_NONE = 3,
 * };
 * ```
 * Motorcycles with no visible plates will sometimes return a 2 for unknown reasons.
 * Hash: 0x9CCC9525BF2408E0 | ApiSet: undefined
 */
export function getVehiclePlateType(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehiclePlateType(_vehicle);
}
/**
 * ```cpp
 * enum eVehiclePlateIndicies {
 * SanAndreasCursive = 0,
 * SanAndreasBlack = 1,
 * SanAndreasBlue = 2,
 * SanAndreasPlain = 3,
 * SRExcept = 4,
 * NorthYankton = 5,
 * // All indicies below this require b3095
 * ECola = 6,
 * LasVenturas = 7,
 * LiberyCity = 8,
 * LSCarMeet = 9,
 * LSPanic = 10,
 * LSPounders = 11,
 * Sprunk = 12,
 * }
 * ```
 * Hash: 0xF11BC2DD9A3E7195 | ApiSet: undefined
 */
export function getVehicleNumberPlateTextIndex(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleNumberPlateTextIndex(_vehicle);
}
/**
 * ```
 * Gets the height of the vehicle's suspension.
 * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
 * 0.000 is the stock suspension.
 * 0.008 is Ultra Suspension.
 * ```
 * Hash: 0x53952FD2BAA19F17 | ApiSet: undefined
 */
export function getVehicleSuspensionHeight(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleSuspensionHeight(_vehicle);
}
/**
 * Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available.
 * Hash: 0x5ECB40269053C0D4 | ApiSet: undefined
 */
export function getVehicleRoofLiveryCount(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleRoofLiveryCount(_vehicle);
}
/**
 * Hash: 0xB635392A4938B3C3 | ApiSet: undefined
 */
export function getVehicleTyreSmokeColor(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleTyreSmokeColor(_vehicle);
}
/**
 * ```
 * Gets the trailer of a vehicle and puts it into the trailer parameter.
 * ```
 * Hash: 0x1CDD6BADC297830D | ApiSet: undefined
 */
export function getVehicleTrailerVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleTrailerVehicle(_vehicle);
}
/**
 * Hash: 0x8181CE2F25CB9BB7 | ApiSet: undefined
 */
export function getVehicleWeaponRestrictedAmmo(vehicle, weaponIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleWeaponRestrictedAmmo(_vehicle, weaponIndex);
}
/**
 * Hash: 0x678B9BB8C3F58FEB | ApiSet: undefined
 */
export function getVehicleTyresCanBurst(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleTyresCanBurst(_vehicle);
}
/**
 * ```
 * HAS_*
 * ```
 * Hash: 0x91D6DD290888CBAB | ApiSet: undefined
 */
export function hasFilledVehiclePopulation() {
    return HasFilledVehiclePopulation();
}
/**
 * Hash: 0x0EE21293DAD47C95 | ApiSet: undefined
 */
export function getVehicleWindowTint(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleWindowTint(_vehicle);
}
/**
 * Use [\_SET_VEHICLE_HEADLIGHTS_COLOUR](#\_0xE41033B25D003A07) to set the headlights color for the vehicle.
 * You must enable xenon headlights for this native to work properly.
 * ```cpp
 * enum eHeadlightColors {
 * Default = 255,
 * White = 0,
 * Blue = 1,
 * ElectricBlue = 2,
 * MintGreen = 3,
 * LimeGreen = 4,
 * Yellow = 5,
 * GoldenShower = 6,
 * Orange = 7,
 * Red = 8,
 * PonyPink = 9,
 * HotPink = 10,
 * Purple = 11,
 * Blacklight = 12
 * }
 * ```
 * Hash: 0x3DFF319A831E0CDB | ApiSet: undefined
 */
export function getVehicleXenonLightsColor(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleXenonLightsColor(_vehicle);
}
/**
 * Hash: 0x6ADAABD3068C5235 | ApiSet: undefined
 */
export function hasVehiclePhoneExplosiveDevice() {
    return HasVehiclePhoneExplosiveDevice();
}
/**
 * Hash: 0x06F43E5175EB6D96 | ApiSet: undefined
 */
export function hasPreloadModsFinished(p0) {
    return HasPreloadModsFinished(p0);
}
/**
 * Hash: 0x300D614A4C785FC4 | ApiSet: undefined
 */
export function hasVehicleRecordingBeenLoaded(recording) {
    return HasVehicleRecordingBeenLoaded(recording);
}
/**
 * ```cpp
 * enum eVehicleWheelType
 * {
 * VWT_SPORT = 0,
 * VWT_MUSCLE = 1,
 * VWT_LOWRIDER = 2,
 * VWT_SUV = 3,
 * VWT_OFFROAD = 4,
 * VWT_TUNER = 5,
 * VWT_BIKE = 6,
 * VWT_HIEND = 7,
 * // Benny's Original
 * VWT_SUPERMOD1 = 8,
 * // Benny's Bespoke
 * VWT_SUPERMOD2 = 9,
 * // Open Wheel
 * VWT_SUPERMOD3 = 10,
 * // Street
 * VWT_SUPERMOD4 = 11,
 * // Track
 * VWT_SUPERMOD5 = 12,
 * };
 * ```
 * Hash: 0xB3ED1BFB4BE636DC | ApiSet: undefined
 */
export function getVehicleWheelType(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return GetVehicleWheelType(_vehicle);
}
/**
 * Hash: 0x48ADC8A773564670 | ApiSet: undefined
 */
export function instantlyFillVehiclePopulation() {
    InstantlyFillVehiclePopulation();
}
/**
 * Hash: 0x1BBE0523B8DB9A21 | ApiSet: undefined
 */
export function hasVehicleAssetLoaded(vehicleAsset) {
    return HasVehicleAssetLoaded(vehicleAsset);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xAE71FB656C600587 | ApiSet: undefined
 */
export function hideVehicleTombstone(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    HideVehicleTombstone(_vehicle, toggle);
}
/**
 * Hash: 0x62CA17B74C435651 | ApiSet: undefined
 */
export function isAnyEntityAttachedToHandlerFrame(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsAnyEntityAttachedToHandlerFrame(_vehicle);
}
/**
 * Hash: 0x9A83F5F9963775EF | ApiSet: undefined
 */
export function haveVehicleModsStreamedIn(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return HaveVehicleModsStreamedIn(_vehicle);
}
/**
 * Hash: 0x9F243D3919F442FE | ApiSet: undefined
 */
export function isBigVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsBigVehicle(_vehicle);
}
/**
 * Hash: 0x291E373D483E7EE7 | ApiSet: undefined
 */
export function isAnyPedRappellingFromHeli(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsAnyPedRappellingFromHeli(_vehicle);
}
/**
 * Hash: 0x61E1DD6125A3EEE6 | ApiSet: undefined
 */
export function isAnyVehicleNearPoint(position, radius) {
    return IsAnyVehicleNearPoint(position.x, position.y, position.z, radius);
}
/**
 * Checks if a boat is currently anchored.
 * This native is a getter for [SET_BOAT_ANCHOR](#\_0x75DBEC174AEEAD10).
 * ```
 * NativeDB Introduced: v573
 * ```
 * Hash: 0xB0AD1238A709B1A2 | ApiSet: undefined
 */
export function isBoatAnchored(boat) {
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    return IsBoatAnchored(_boat);
}
/**
 * Hash: 0x89D630CF5EA96D23 | ApiSet: undefined
 */
export function isHandlerFrameAboveContainer(handler, container) {
    const _handler = handler instanceof Entity ? handler.handle() : handler;
    const _container = container instanceof Entity ? container.handle() : container;
    return IsHandlerFrameAboveContainer(_handler, _container);
}
/**
 * Hash: 0x57715966069157AD | ApiSet: undefined
 */
export function isEntityAttachedToHandlerFrame(vehicle, entity) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    return IsEntityAttachedToHandlerFrame(_vehicle, _entity);
}
/**
 * ```
 * Usage:
 * public bool isCopInRange(Vector3 Location, float Range)
 * {
 * return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
 * }
 * ```
 * Hash: 0x7EEF65D5F153E26A | ApiSet: undefined
 */
export function isCopVehicleInArea3d(x1, x2, y1, y2, z1, z2) {
    return IsCopVehicleInArea3d(x1, x2, y1, y2, z1, z2);
}
/**
 * Check if a entry point for a certain seat is clear, useful for checking if a vehicle seat is accesible.
 * If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
 * Keep in mind, with checkSide set to true, that only certain vehicles have entry points on both sides for the same seat, like motorcycles, most normal vehicles don't have this and if the native doesn't find a entry point with the given parameters it will always return false. So for most normal usecases leaving checkSide set to false would result in the expected behavior.
 * Hash: 0x639431E895B9AA57 | ApiSet: undefined
 */
export function isEntryPointForSeatClear(ped, vehicle, seatIndex, checkSide, leftSide) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsEntryPointForSeatClear(_ped, _vehicle, seatIndex, checkSide, leftSide);
}
/**
 * Hash: 0xBC74B4BE25EB6C8A | ApiSet: undefined
 */
export function isHeliPartBroken(vehicle, p1, p2, p3) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsHeliPartBroken(_vehicle, p1, p2, p3);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xAD464F2E18836BFC | ApiSet: undefined
 */
export function isMissionTrain(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsMissionTrain(_vehicle);
}
/**
 * Hash: 0x634148744F385576 | ApiSet: undefined
 */
export function isHeliLandingAreaBlocked(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsHeliLandingAreaBlocked(_vehicle);
}
/**
 * Hash: 0xB09D25E77C33EB3F | ApiSet: undefined
 */
export function isPedExclusiveDriverOfVehicle(ped, vehicle) {
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsPedExclusiveDriverOfVehicle(_ped, _vehicle);
}
/**
 * ```
 * NativeDB Introduced: 3095
 * ```
 * Determines if the nitrous is currently activated in the specified vehicle.
 * Hash: 0x491E822B2C464FE4 | ApiSet: undefined
 */
export function isNitrousActive(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsNitrousActive(_vehicle);
}
/**
 * Hash: 0xAEA8FD591FAD4106 | ApiSet: undefined
 */
export function isPlaybackUsingAiGoingOnForVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsPlaybackUsingAiGoingOnForVehicle(_vehicle);
}
/**
 * Hash: 0x1C8A4C2C19E68EEC | ApiSet: undefined
 */
export function isPlaybackGoingOnForVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsPlaybackGoingOnForVehicle(_vehicle);
}
/**
 * Hash: 0x4198AB0022B15F87 | ApiSet: undefined
 */
export function isPlaneLandingGearIntact(plane) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    return IsPlaneLandingGearIntact(_plane);
}
/**
 * Hash: 0x7504C0F113AB50FC | ApiSet: undefined
 */
export function isTaxiLightOn(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsTaxiLightOn(_vehicle);
}
/**
 * Hash: 0xB50C0B0CEDC6CE84 | ApiSet: undefined
 */
export function isThisModelABike(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelABike(model);
}
/**
 * Hash: 0xF7F203E31F96F6A1 | ApiSet: undefined
 */
export function isSeatWarpOnly(vehicle, seatIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsSeatWarpOnly(_vehicle, seatIndex);
}
/**
 * Hash: 0x45A9187928F4B9E3 | ApiSet: undefined
 */
export function isThisModelABoat(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelABoat(model);
}
/**
 * ```
 * To check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)
 * ```
 * Hash: 0x7F6DB52EEFC96DF8 | ApiSet: undefined
 */
export function isThisModelACar(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelACar(model);
}
/**
 * Hash: 0xBF94DD42F63BDED2 | ApiSet: undefined
 */
export function isThisModelABicycle(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelABicycle(model);
}
/**
 * Hash: 0xDCE4334788AF94EA | ApiSet: undefined
 */
export function isThisModelAHeli(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelAHeli(model);
}
/**
 * ```
 * Checks if model is a boat, then checks for FLAG_IS_JETSKI.
 * ```
 * Hash: 0x9537097412CF75FE | ApiSet: undefined
 */
export function isThisModelAJetski(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelAJetski(model);
}
/**
 * Hash: 0xA0948AB42D7BA0DE | ApiSet: undefined
 */
export function isThisModelAPlane(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelAPlane(model);
}
/**
 * Hash: 0x633F6F44A537EBB6 | ApiSet: undefined
 */
export function isThisModelAnAmphibiousCar(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelAnAmphibiousCar(model);
}
/**
 * Hash: 0x39DAC362EE65FA28 | ApiSet: undefined
 */
export function isThisModelAQuadbike(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelAQuadbike(model);
}
/**
 * Hash: 0x84B233A8C8FC8AE7 | ApiSet: undefined
 */
export function isToggleModOn(vehicle, modType) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsToggleModOn(_vehicle, modType);
}
/**
 * Hash: 0xD40148F22E81A1D9 | ApiSet: undefined
 */
export function isVehicleAttachedToCargobob(cargobob, vehicleAttached) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    const _vehicleAttached = vehicleAttached instanceof Entity ? vehicleAttached.handle() : vehicleAttached;
    return IsVehicleAttachedToCargobob(_cargobob, _vehicleAttached);
}
/**
 * Hash: 0xA1A9FC1C76A6730D | ApiSet: undefined
 */
export function isThisModelAnAmphibiousQuadbike(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelAnAmphibiousQuadbike(model);
}
/**
 * ```
 * Scripts verify that towTruck is the first parameter, not the second.
 * ```
 * Hash: 0x146DF9EC4C4B9FD4 | ApiSet: undefined
 */
export function isVehicleAttachedToTowTruck(towTruck, vehicle) {
    const _towTruck = towTruck instanceof Entity ? towTruck.handle() : towTruck;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleAttachedToTowTruck(_towTruck, _vehicle);
}
/**
 * Hash: 0xAB935175B22E822B | ApiSet: undefined
 */
export function isThisModelATrain(model) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsThisModelATrain(model);
}
/**
 * ```
 * Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
 * _IS_VEHICLE_*
 * ```
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xC69BB1D832A710EF | ApiSet: undefined
 */
export function isVehicleBeingHalted(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleBeingHalted(_vehicle);
}
/**
 * Determines if a vehicle is a convertible with an animatable roof. This native checks if the specified vehicle model features a convertible roof that can be lowered or raised through an animation.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x52F357A30698BCCE | ApiSet: undefined
 */
export function isVehicleAConvertible(vehicle, checkRoofExtras) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleAConvertible(_vehicle, checkRoofExtras);
}
/**
 * ```
 * Appears to return true if the vehicle has any damage, including cosmetically.
 * GET_*
 * ```
 * Hash: 0xBCDC5017D3CE1E9E | ApiSet: undefined
 */
export function isVehicleDamaged(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleDamaged(_vehicle);
}
/**
 * Hash: 0xE33FFA906CE74880 | ApiSet: undefined
 */
export function isTurretSeat(vehicle, seatIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsTurretSeat(_vehicle, seatIndex);
}
/**
 * Hash: 0xE7CF3C4F9F489F0C | ApiSet: undefined
 */
export function isVehicleAttachedToTrailer(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleAttachedToTrailer(_vehicle);
}
/**
 * Hash: 0x4319E335B71FFF34 | ApiSet: undefined
 */
export function isVehicleAlarmActivated(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleAlarmActivated(_vehicle);
}
/**
 * Only ever used once in decompiled scripts: **am_pi_menu**:
 * Returns true if the engine is on fire, or if the vehicle engine health is < 0 and it **has been** on fire.
 * It sometimes doesn't return true when the vehicle engine has been on fire, and has since been fixed. I'm not really sure what the exact conditions are.
 * This usually returns true even if there are no visible flames yet (engine health > 0). However if you monitor engine health you'll see that it starts decreasing as soon as this returns true.
 * Hash: 0xEC69ADF931AAE0C3 | ApiSet: undefined
 */
export function isVehicleEngineOnFire(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleEngineOnFire(_vehicle);
}
/**
 * ```
 * p1 is always 0 in the scripts.
 * p1 = check if vehicle is on fire
 * ```
 * Hash: 0x4C241E39B23DF959 | ApiSet: undefined
 */
export function isVehicleDriveable(vehicle, isOnFireCheck) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleDriveable(_vehicle, isOnFireCheck);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0xB8E181E559464527 | ApiSet: undefined
 */
export function isVehicleDoorDamaged(veh, doorID) {
    const _veh = veh instanceof Entity ? veh.handle() : veh;
    return IsVehicleDoorDamaged(_veh, doorID);
}
/**
 * Hash: 0x27B926779DEB502D | ApiSet: undefined
 */
export function isVehicleBumperBouncing(vehicle, frontBumper) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleBumperBouncing(_vehicle, frontBumper);
}
/**
 * ```
 * garageName example "Michael - Beverly Hills"
 * ```
 * Hash: 0xCEE4490CD57BB3C2 | ApiSet: undefined
 */
export function isVehicleInGarageArea(garageName, vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleInGarageArea(garageName, _vehicle);
}
/**
 * ```
 * Returns whether the specified vehicle is currently in a burnout.
 * vb.net
 * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
 * End Function
 * ```
 * Hash: 0x1297A88E081430EB | ApiSet: undefined
 */
export function isVehicleInBurnout(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleInBurnout(_vehicle);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0x3E933CFF7B111C22 | ApiSet: undefined
 */
export function isVehicleDoorFullyOpen(vehicle, doorIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleDoorFullyOpen(_vehicle, doorIndex);
}
/**
 * Hash: 0x468056A6BB6F3846 | ApiSet: undefined
 */
export function isVehicleBumperBrokenOff(vehicle, front) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleBumperBrokenOff(_vehicle, front);
}
/**
 * Hash: 0x423E8DE37D934D89 | ApiSet: undefined
 */
export function isVehicleModel(vehicle, model) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    if (typeof model === 'string')
        model = this.getHashKey(model);
    return IsVehicleModel(_vehicle, model);
}
/**
 * Hash: 0xD2E6822DBFD6C8BD | ApiSet: undefined
 */
export function isVehicleExtraTurnedOn(vehicle, extraId) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleExtraTurnedOn(_vehicle, extraId);
}
/**
 * Hash: 0x1F25887F3C104278 | ApiSet: undefined
 */
export function isVehicleHighDetail(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleHighDetail(_vehicle);
}
/**
 * Hash: 0x3D34E80EED4AE3BE | ApiSet: undefined
 */
export function isVehicleRocketBoostActive(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleRocketBoostActive(_vehicle);
}
/**
 * ```
 * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
 * End Function
 * ```
 * Hash: 0xB104CD1BABF302E2 | ApiSet: undefined
 */
export function isVehicleOnAllWheels(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleOnAllWheels(_vehicle);
}
/**
 * Hash: 0x00834EAC4A96E010 | ApiSet: undefined
 */
export function isVehicleModGen9Exclusive(vehicle, modType, modIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleModGen9Exclusive(_vehicle, modType, modIndex);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xA77DC70BD689A1E5 | ApiSet: undefined
 */
export function isVehicleInSubmarineMode(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleInSubmarineMode(_vehicle);
}
/**
 * Hash: 0xB5CC40FBCB586380 | ApiSet: undefined
 */
export function isVehicleSirenAudioOn(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleSirenAudioOn(_vehicle);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0xFC40CBF7B90CA77C | ApiSet: undefined
 */
export function setPlaneAvoidsOthers(plane, toggle) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    SetPlaneAvoidsOthers(_plane, toggle);
}
/**
 * ```
 * indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * ```
 * Hash: 0x8C4B92553E4766A5 | ApiSet: undefined
 */
export function isVehicleNeonLightEnabled(vehicle, index) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleNeonLightEnabled(_vehicle, index);
}
/**
 * Hash: 0x48C633E94A8142A7 | ApiSet: undefined
 */
export function isVehicleSlipstreamLeader(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleSlipstreamLeader(_vehicle);
}
/**
 * Returns whether the vehicle's lights and sirens are on.
 * Hash: 0x4C9BF537BE2634B2 | ApiSet: undefined
 */
export function isVehicleSirenOn(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleSirenOn(_vehicle);
}
/**
 * Does not work for vehicle of type: CBike, CBmx, CBoat, CTrain, CSubmarine.
 * Hash: 0x3DE51E9C80B116CF | ApiSet: undefined
 */
export function isVehicleParachuteActive(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleParachuteActive(_vehicle);
}
/**
 * Hash: 0x4AF9BD80EEBEB453 | ApiSet: undefined
 */
export function isVehicleStolen(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleStolen(_vehicle);
}
/**
 * ```
 * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
 * ```
 * Hash: 0xC0F97FCE55094987 | ApiSet: undefined
 */
export function isVehicleSearchlightOn(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleSearchlightOn(_vehicle);
}
/**
 * Seat indices range from -1 to [`GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS`](#\_0xA7C4F2C6E744A550) minus one.
 * ```cpp
 * `// CTaskExitVehicleSeat::eSeatPosition - 1`
 * enum eSeatPosition
 * {
 * SF_FrontDriverSide = -1,
 * SF_FrontPassengerSide = 0,
 * SF_BackDriverSide = 1,
 * SF_BackPassengerSide = 2,
 * SF_AltFrontDriverSide = 3,
 * SF_AltFrontPassengerSide = 4,
 * SF_AltBackDriverSide = 5,
 * SF_AltBackPassengerSide = 6,
 * };
 * ```
 * ```
 * NativeDB Added Parameter 3: BOOL isTaskRunning
 * isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
 * ```
 * Hash: 0x22AC59A870E6A669 | ApiSet: undefined
 */
export function isVehicleSeatFree(vehicle, seatIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleSeatFree(_vehicle, seatIndex);
}
/**
 * This native checks if the given vehicle is stopped at a red or amber traffic light junction, provided the driver's personality is set to not run amber lights.
 * Hash: 0x2959F696AE390A99 | ApiSet: undefined
 */
export function isVehicleStoppedAtTrafficLights(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleStoppedAtTrafficLights(_vehicle);
}
/**
 * ```
 * Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
 * ```
 * Hash: 0x8D474C8FAEFF6CDE | ApiSet: undefined
 */
export function isVehicleSprayable(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleSprayable(_vehicle);
}
/**
 * Hash: 0x563B65A643ED072E | ApiSet: undefined
 */
export function isVehicleWeaponDisabled(weaponHash, vehicle, owner) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _owner = owner instanceof Ped ? owner.handle() : owner;
    if (typeof weaponHash === 'string')
        weaponHash = this.getHashKey(weaponHash);
    return IsVehicleWeaponDisabled(weaponHash, _vehicle, _owner);
}
/**
 * Hash: 0xB497F06B288DCFDF | ApiSet: undefined
 */
export function isVehicleStuckOnRoof(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleStuckOnRoof(_vehicle);
}
/**
 * ```
 * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
 * For some vehicles it returns true if the current speed is <= 0.00039999999.
 * ```
 * Hash: 0x5721B434AD84D57A | ApiSet: undefined
 */
export function isVehicleStopped(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleStopped(_vehicle);
}
/**
 * Hash: 0x5335BE58C083E74E | ApiSet: undefined
 */
export function lowerRetractableWheels(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    LowerRetractableWheels(_vehicle);
}
/**
 * ```
 * p1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.
 * ```
 * Hash: 0x679BE1DAF71DA874 | ApiSet: undefined
 */
export function isVehicleStuckTimerUp(vehicle, p1, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleStuckTimerUp(_vehicle, p1, p2);
}
/**
 * Hash: 0x0581730AB9380412 | ApiSet: undefined
 */
export function _0x0581730AB9380412(p0, p1, p2, p3, p4, p5) {
    Citizen.invokeNative('0x0581730AB9380412', p0, p1, p2, p3, p4, p5);
}
/**
 * ```cpp
 * enum eVehicleWheels
 * {
 * WHEEL_LF = 0, // Vehicle Left front
 * WHEEL_RF = 1, // Vehicle Right front
 * WHEEL_LM = 2, // Vehicle Left middle
 * WHEEL_RM = 3, // Vehicle Right middle
 * WHEEL_LR = 4, // Vehicle Left rear
 * WHEEL_RR = 5, // Vehicle Right rear
 * WHEEL_BF = 6, // Bike front
 * WHEEL_BR = 7, // Bike rear
 * MAX_WHEELS = 8
 * };
 * ```
 * Hash: 0xBA291848A0815CA9 | ApiSet: undefined
 */
export function isVehicleTyreBurst(vehicle, wheelID, isBurstToRim) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleTyreBurst(_vehicle, wheelID, isBurstToRim);
}
/**
 * Lowers the roof on a convertible vehicle, utilizing any available animations for the action. This native is particularly useful for creating a realistic interaction with convertible vehicles by animating the process of lowering the roof.
 * You can check if the vehicle has an convertible roof using [`IS_VEHICLE_A_CONVERTIBLE`](#\_0x52F357A30698BCCE).
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xDED51F703D0FA83D | ApiSet: undefined
 */
export function lowerConvertibleRoof(vehicle, instantlyLower) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    LowerConvertibleRoof(_vehicle, instantlyLower);
}
/**
 * Hash: 0xAA0A52D24FB98293 | ApiSet: undefined
 */
export function isVehicleVisible(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleVisible(_vehicle);
}
/**
 * Hash: 0x93A3996368C94158 | ApiSet: undefined
 */
export function modifyVehicleTopSpeed(vehicle, value) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ModifyVehicleTopSpeed(_vehicle, value);
}
/**
 * Hash: 0x0419B167EE128F33 | ApiSet: undefined
 */
export function _0x0419B167EE128F33(p0, p1) {
    return Citizen.invokeNative('0x0419B167EE128F33', p0, p1);
}
/**
 * ```cpp
 * enum eWindowId {
 * VEH_EXT_WINDOW_LF = 0,
 * VEH_EXT_WINDOW_RF = 1,
 * VEH_EXT_WINDOW_LR = 2,
 * VEH_EXT_WINDOW_RR = 3,
 * VEH_EXT_WINDOW_LM = 4,
 * VEH_EXT_WINDOW_RM = 5,
 * VEH_EXT_WINDSCREEN = 6,
 * VEH_EXT_WINDSCREEN_R = 7,
 * }
 * ```
 * Hash: 0x46E571A0E20D01F1 | ApiSet: undefined
 */
export function isVehicleWindowIntact(vehicle, windowIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return IsVehicleWindowIntact(_vehicle, windowIndex);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x0205F5365292D2EB | ApiSet: undefined
 */
export function _0x0205F5365292D2EB(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x0205F5365292D2EB', _vehicle, p1);
}
/**
 * Hash: 0x065D03A9D6B2C6B5 | ApiSet: undefined
 */
export function _0x065D03A9D6B2C6B5(p0, p1) {
    Citizen.invokeNative('0x065D03A9D6B2C6B5', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x107A473D7A6647A9 | ApiSet: undefined
 */
export function _0x107A473D7A6647A9(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x107A473D7A6647A9', _vehicle);
}
/**
 * Hash: 0x2311DD7159F00582 | ApiSet: undefined
 */
export function _0x2311DD7159F00582(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x2311DD7159F00582', _vehicle, p1);
}
/**
 * Hash: 0x1312DDD8385AEE4E | ApiSet: undefined
 */
export function _0x1312DDD8385AEE4E(p0, p1) {
    Citizen.invokeNative('0x1312DDD8385AEE4E', p0, p1);
}
/**
 * ```
 * A vehicle recording playback flag only used in jewelry_heist
 * ```
 * Hash: 0x063AE2B2CC273588 | ApiSet: undefined
 */
export function _0x063AE2B2CC273588(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x063AE2B2CC273588', _vehicle, p1);
}
/**
 * Hash: 0x182F266C2D9E2BEB | ApiSet: undefined
 */
export function _0x182F266C2D9E2BEB(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x182F266C2D9E2BEB', _vehicle, p1);
}
/**
 * ```
 * SET_VEHICLE_W* (next character is either H or I)
 * ```
 * Hash: 0x2C4A1590ABF43E8B | ApiSet: undefined
 */
export function _0x2C4A1590ABF43E8B(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x2C4A1590ABF43E8B', _vehicle, p1);
}
/**
 * Hash: 0x35BB21DE06784373 | ApiSet: undefined
 */
export function _0x35BB21DE06784373(p0, p1) {
    Citizen.invokeNative('0x35BB21DE06784373', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x2310A8F9421EBF43 | ApiSet: undefined
 */
export function _0x2310A8F9421EBF43(p0) {
    Citizen.invokeNative('0x2310A8F9421EBF43', p0);
}
/**
 * Hash: 0x3441CAD2F2231923 | ApiSet: undefined
 */
export function _0x3441CAD2F2231923(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x3441CAD2F2231923', _vehicle, p1);
}
/**
 * Hash: 0x35E0654F4BAD7971 | ApiSet: undefined
 */
export function _0x35E0654F4BAD7971(p0) {
    Citizen.invokeNative('0x35E0654F4BAD7971', p0);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x407DC5E97DB1A4D3 | ApiSet: undefined
 */
export function _0x407DC5E97DB1A4D3(p0, p1) {
    Citizen.invokeNative('0x407DC5E97DB1A4D3', p0, p1);
}
/**
 * ```
 * CLEAR_VEHICLE_*
 * ```
 * Hash: 0x4419966C9936071A | ApiSet: undefined
 */
export function _0x4419966C9936071A(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x4419966C9936071A', _vehicle);
}
/**
 * ```
 * Does nothing. It's a nullsub.
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x36DE109527A2C0C4 | ApiSet: undefined
 */
export function _0x36DE109527A2C0C4(toggle) {
    Citizen.invokeNative('0x36DE109527A2C0C4', toggle);
}
/**
 * Hash: 0x41290B40FA63E6DA | ApiSet: undefined
 */
export function _0x41290B40FA63E6DA(p0) {
    Citizen.invokeNative('0x41290B40FA63E6DA', p0);
}
/**
 * ```
 * SET_*
 * ```
 * Hash: 0x428AD3E26C8D9EB0 | ApiSet: undefined
 */
export function _0x428AD3E26C8D9EB0(vehicle, position, p4) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x428AD3E26C8D9EB0', _vehicle, position.x, position.y, position.z, p4);
}
/**
 * Hash: 0x51DB102F4A3BA5E0 | ApiSet: undefined
 */
export function _0x51DB102F4A3BA5E0(toggle) {
    Citizen.invokeNative('0x51DB102F4A3BA5E0', toggle);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x4AD280EB48B2D8E6 | ApiSet: undefined
 */
export function _0x4AD280EB48B2D8E6(vehicle, togle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x4AD280EB48B2D8E6', _vehicle, togle);
}
/**
 * ```
 * Usually used alongside other vehicle door natives.
 * ```
 * Hash: 0x3B458DDB57038F08 | ApiSet: undefined
 */
export function _0x3B458DDB57038F08(vehicle, doorIndex, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x3B458DDB57038F08', _vehicle, doorIndex, toggle);
}
/**
 * Usex in decompiled scripts in combination with [`_GET_VEHICLE_SUSPENSION_BOUNDS`](#\_0xDF7E3EEB29642C38).
 * NativeDB Introduced: v1180
 * ```
 * // Example from fm_bj_race_controller.c
 * `if (!VEHICLE::_0x51F30DB60626A20E(uParam0->f_26, uParam0->f_12.f_3, uParam0->f_12, 2, 1) && !func_282(uParam0->f_6))`
 * {
 * `VEHICLE::_GET_VEHICLE_SUSPENSION_BOUNDS(*uParam0, &vVar15, &uVar16);`
 * `VEHICLE::_GET_VEHICLE_SUSPENSION_BOUNDS(uParam0->f_26, &vVar17, &uVar18);`
 * `fVar19 = SYSTEM::VDIST2(0f, 0f, vVar15.z, 0f, 0f, vVar17.z);`
 * uParam0->f_12.f_3.f_2 = (uParam0->f_12.f_3.f_2 + fVar19);
 * `if (!VEHICLE::_0x51F30DB60626A20E(uParam0->f_26, uParam0->f_12.f_3, uParam0->f_12, 2, 1))`
 * {
 * uParam0->f_12.f_3 = { uParam0->f_6 };
 * uParam0->f_12 = { uParam0->f_9 };
 * }
 * }
 * ```
 * Hash: 0x51F30DB60626A20E | ApiSet: undefined
 */
export function _0x51F30DB60626A20E(vehicle, position, rotX, rotY, rotZ, p7, p8) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return Citizen.invokeNative('0x51F30DB60626A20E', _vehicle, position.x, position.y, position.z, rotX, rotY, rotZ, p7, p8);
}
/**
 * Hash: 0x56EB5E94318D3FB6 | ApiSet: undefined
 */
export function _0x56EB5E94318D3FB6(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x56EB5E94318D3FB6', _vehicle, p1);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x430A7631A84C9BE7 | ApiSet: undefined
 */
export function _0x430A7631A84C9BE7(p0) {
    Citizen.invokeNative('0x430A7631A84C9BE7', p0);
}
/**
 * Hash: 0x5BA68A0840D546AC | ApiSet: undefined
 */
export function _0x5BA68A0840D546AC(p0, p1) {
    return Citizen.invokeNative('0x5BA68A0840D546AC', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0x59C3757B3B7408E8 | ApiSet: undefined
 */
export function _0x59C3757B3B7408E8(vehicle, toggle, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x59C3757B3B7408E8', _vehicle, toggle, p2);
}
/**
 * Hash: 0x4D9D109F63FEE1D4 | ApiSet: undefined
 */
export function _0x4D9D109F63FEE1D4(p0, p1) {
    Citizen.invokeNative('0x4D9D109F63FEE1D4', p0, p1);
}
/**
 * Hash: 0x5E569EC46EC21CAE | ApiSet: undefined
 */
export function _0x5E569EC46EC21CAE(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x5E569EC46EC21CAE', _vehicle, toggle);
}
/**
 * ```
 * Sets some health value. Looks like it's used for helis.
 * ```
 * Hash: 0x5EE5632F47AE9695 | ApiSet: undefined
 */
export function _0x5EE5632F47AE9695(vehicle, health) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x5EE5632F47AE9695', _vehicle, health);
}
/**
 * Hash: 0x6501129C9E0FFA05 | ApiSet: undefined
 */
export function _0x6501129C9E0FFA05(p0, p1) {
    Citizen.invokeNative('0x6501129C9E0FFA05', p0, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x5BBCF35BF6E456F7 | ApiSet: undefined
 */
export function _0x5BBCF35BF6E456F7(toggle) {
    Citizen.invokeNative('0x5BBCF35BF6E456F7', toggle);
}
/**
 * Hash: 0x65B080555EA48149 | ApiSet: undefined
 */
export function _0x65B080555EA48149(p0) {
    Citizen.invokeNative('0x65B080555EA48149', p0);
}
/**
 * Hash: 0x5845066D8A1EA7F7 | ApiSet: undefined
 */
export function _0x5845066D8A1EA7F7(vehicle, position, p4) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x5845066D8A1EA7F7', _vehicle, position.x, position.y, position.z, p4);
}
/**
 * Hash: 0x6EAAEFC76ACC311F | ApiSet: undefined
 */
export function _0x6EAAEFC76ACC311F(p0) {
    return Citizen.invokeNative('0x6EAAEFC76ACC311F', p0);
}
/**
 * Hash: 0x66E3AAFACE2D1EB8 | ApiSet: undefined
 */
export function _0x66E3AAFACE2D1EB8(p0, p1, p2) {
    Citizen.invokeNative('0x66E3AAFACE2D1EB8', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x6A973569BA094650 | ApiSet: undefined
 */
export function _0x6A973569BA094650(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x6A973569BA094650', _vehicle, p1);
}
/**
 * Hash: 0x72BECCF4B829522E | ApiSet: undefined
 */
export function _0x72BECCF4B829522E(p0, p1) {
    Citizen.invokeNative('0x72BECCF4B829522E', p0, p1);
}
/**
 * Last named native above this one is `TRACK_VEHICLE_VISIBILITY` and first named native below is `UNCUFF_PED`.
 * Unknown what it does, couldn't find good examples in the decompiled scripts.
 * Hash: 0x725012A415DBA050 | ApiSet: undefined
 */
export function _0x725012A415DBA050(p0, p2) {
    return Citizen.invokeNative('0x725012A415DBA050', p0, p2);
}
/**
 * Hash: 0x737E398138550FFF | ApiSet: undefined
 */
export function _0x737E398138550FFF(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x737E398138550FFF', _vehicle, toggle);
}
/**
 * Hash: 0x6EBFB22D646FFC18 | ApiSet: undefined
 */
export function _0x6EBFB22D646FFC18(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x6EBFB22D646FFC18', _vehicle, p1);
}
/**
 * Hash: 0x796A877E459B99EA | ApiSet: undefined
 */
export function _0x796A877E459B99EA(p0, p1, p2, p3) {
    Citizen.invokeNative('0x796A877E459B99EA', p0, p1, p2, p3);
}
/**
 * Hash: 0x78CEEE41F49F421F | ApiSet: undefined
 */
export function _0x78CEEE41F49F421F(p0, p1) {
    Citizen.invokeNative('0x78CEEE41F49F421F', p0, p1);
}
/**
 * Hash: 0x73561D4425A021A2 | ApiSet: undefined
 */
export function _0x73561D4425A021A2(p0, p1) {
    Citizen.invokeNative('0x73561D4425A021A2', p0, p1);
}
/**
 * Hash: 0x7BBE7FF626A591FE | ApiSet: undefined
 */
export function _0x7BBE7FF626A591FE(p0) {
    Citizen.invokeNative('0x7BBE7FF626A591FE', p0);
}
/**
 * Hash: 0x80E3357FDEF45C21 | ApiSet: undefined
 */
export function _0x80E3357FDEF45C21(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x80E3357FDEF45C21', _vehicle, toggle);
}
/**
 * ```
 * SET_VEHICLE_*
 * ```
 * Hash: 0x76D26A22750E849E | ApiSet: undefined
 */
export function _0x76D26A22750E849E(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x76D26A22750E849E', _vehicle);
}
/**
 * ```
 * SET_VEHICLE_AL*
 * ```
 * Hash: 0x7D6F9A3EF26136A0 | ApiSet: undefined
 */
export function _0x7D6F9A3EF26136A0(vehicle, toggle, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x7D6F9A3EF26136A0', _vehicle, toggle, p2);
}
/**
 * ```
 * NativeDB Introduced: v2189
 * ```
 * Hash: 0x8664170EF165C4A6 | ApiSet: undefined
 */
export function _0x8664170EF165C4A6(p0, p1) {
    Citizen.invokeNative('0x8664170EF165C4A6', p0, p1);
}
/**
 * ```
 * Does nothing. It's a nullsub.
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x82E0AC411E41A5B4 | ApiSet: undefined
 */
export function _0x82E0AC411E41A5B4(toggle) {
    Citizen.invokeNative('0x82E0AC411E41A5B4', toggle);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x8235F1BEAD557629 | ApiSet: undefined
 */
export function _0x8235F1BEAD557629(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x8235F1BEAD557629', _vehicle, toggle);
}
/**
 * Hash: 0x8533CAFDE1F0F336 | ApiSet: undefined
 */
export function _0x8533CAFDE1F0F336(p0) {
    return Citizen.invokeNative('0x8533CAFDE1F0F336', p0);
}
/**
 * Hash: 0x870B8B7A766615C8 | ApiSet: undefined
 */
export function _0x870B8B7A766615C8(p0, p1, p2) {
    Citizen.invokeNative('0x870B8B7A766615C8', p0, p1, p2);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x887FA38787DE8C72 | ApiSet: undefined
 */
export function _0x887FA38787DE8C72(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x887FA38787DE8C72', _vehicle);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x8821196D91FA2DE5 | ApiSet: undefined
 */
export function _0x8821196D91FA2DE5(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x8821196D91FA2DE5', _vehicle, toggle);
}
/**
 * Will disable a plane or a helicopter's need to swerve around object in its heightmap when using TASK_PLANE_MISSION or other AI / Pilot behavior.  Will ensure plane flys directly to it's destination or die trying! This native does NOT need to be called every frame, but instead, just called once on the vehicle (NOT THE PED) you're trying to disable avoidance for!
 * Hash: 0x8AA9180DE2FEDD45 | ApiSet: undefined
 */
export function enableAircraftObstacleAvoidance(vehicle, avoidObstacles) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    EnableAircraftObstacleAvoidance(_vehicle, avoidObstacles);
}
/**
 * Hash: 0x88BC673CA9E0AE99 | ApiSet: undefined
 */
export function _0x88BC673CA9E0AE99(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x88BC673CA9E0AE99', _vehicle, p1);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x9640E30A7F395E4B | ApiSet: undefined
 */
export function _0x9640E30A7F395E4B(vehicle, p1, p2, p3, p4) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x9640E30A7F395E4B', _vehicle, p1, p2, p3, p4);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x9849DE24FCF23CCC | ApiSet: undefined
 */
export function _0x9849DE24FCF23CCC(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x9849DE24FCF23CCC', _vehicle, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x8F0D5BA1C2CC91D7 | ApiSet: undefined
 */
export function _0x8F0D5BA1C2CC91D7(toggle) {
    Citizen.invokeNative('0x8F0D5BA1C2CC91D7', toggle);
}
/**
 * ```
 * Does nothing. It's a nullsub.
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x99A05839C46CE316 | ApiSet: undefined
 */
export function _0x99A05839C46CE316(toggle) {
    Citizen.invokeNative('0x99A05839C46CE316', toggle);
}
/**
 * Hash: 0x9D30687C57BAA0BB | ApiSet: undefined
 */
export function _0x9D30687C57BAA0BB(p0) {
    Citizen.invokeNative('0x9D30687C57BAA0BB', p0);
}
/**
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x97841634EF7DF1D6 | ApiSet: undefined
 */
export function _0x97841634EF7DF1D6(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x97841634EF7DF1D6', _vehicle, toggle);
}
/**
 * Hash: 0x9F3F689B814F2599 | ApiSet: undefined
 */
export function _0x9F3F689B814F2599(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x9F3F689B814F2599', _vehicle, p1);
}
/**
 * Hash: 0x9BDDC73CC6A115D4 | ApiSet: undefined
 */
export function _0x9BDDC73CC6A115D4(vehicle, p1, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x9BDDC73CC6A115D4', _vehicle, p1, p2);
}
/**
 * Hash: 0x99CAD8E7AFDB60FA | ApiSet: undefined
 */
export function _0x99CAD8E7AFDB60FA(vehicle, p1, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x99CAD8E7AFDB60FA', _vehicle, p1, p2);
}
/**
 * ```
 * Only used in R* Script fm_content_cargo
 * ```
 * ```
 * NativeDB Introduced: v2699
 * ```
 * Hash: 0xEF9D388F8D377F44 | ApiSet: undefined
 */
export function _0xEF9D388F8D377F44(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xEF9D388F8D377F44', _vehicle, p1);
}
/**
 * Hash: 0x9BECD4B9FEF3F8A6 | ApiSet: undefined
 */
export function _0x9BECD4B9FEF3F8A6(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0x9BECD4B9FEF3F8A6', _vehicle, p1);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xA4A9A4C40E615885 | ApiSet: undefined
 */
export function _0xA4A9A4C40E615885(p0) {
    Citizen.invokeNative('0xA4A9A4C40E615885', p0);
}
/**
 * Gets hash related to task happening with seat index
 * Native name: GET_I\*
 * Hash: 0xA01BC64DD4BFBBAC | ApiSet: undefined
 */
export function _0xA01BC64DD4BFBBAC(vehicle, seatIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return Citizen.invokeNative('0xA01BC64DD4BFBBAC', _vehicle, seatIndex);
}
/**
 * Hash: 0xA247F9EF01D8082E | ApiSet: undefined
 */
export function _0xA247F9EF01D8082E(p0) {
    Citizen.invokeNative('0xA247F9EF01D8082E', p0);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xAA653AE61924B0A0 | ApiSet: undefined
 */
export function _0xAA653AE61924B0A0(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xAA653AE61924B0A0', _vehicle, toggle);
}
/**
 * Hash: 0xA7DCDF4DED40A8F4 | ApiSet: undefined
 */
export function _0xA7DCDF4DED40A8F4(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xA7DCDF4DED40A8F4', _vehicle, p1);
}
/**
 * Hash: 0xA4822F1CF23F4810 | ApiSet: undefined
 */
export function _0xA4822F1CF23F4810(p3, p4, p5, p6, p7, p8) {
    const result = Citizen.invokeNative('0xA4822F1CF23F4810', p3, p4, p5, p6, p7, p8);
    return [result[0], new Vector3(result[1], result[2], result[3]), new Vector3(result[2], result[3], result[4]), new Vector3(result[3], result[4], result[5])];
}
/**
 * Hash: 0xAB04325045427AAE | ApiSet: undefined
 */
export function _0xAB04325045427AAE(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xAB04325045427AAE', _vehicle, p1);
}
/**
 * Hash: 0xAB31EF4DE6800CE9 | ApiSet: undefined
 */
export function _0xAB31EF4DE6800CE9(p0, p1) {
    Citizen.invokeNative('0xAB31EF4DE6800CE9', p0, p1);
}
/**
 * Hash: 0xAE3FEE8709B39DCB | ApiSet: undefined
 */
export function _0xAE3FEE8709B39DCB(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return Citizen.invokeNative('0xAE3FEE8709B39DCB', _vehicle);
}
/**
 * Hash: 0xB9562064627FF9DB | ApiSet: undefined
 */
export function _0xB9562064627FF9DB(p0, p1) {
    Citizen.invokeNative('0xB9562064627FF9DB', p0, p1);
}
/**
 * Hash: 0xAF60E6A2936F982A | ApiSet: undefined
 */
export function _0xAF60E6A2936F982A(p0, p1) {
    Citizen.invokeNative('0xAF60E6A2936F982A', p0, p1);
}
/**
 * ```
 * SET_C*
 * ```
 * Hash: 0xB2E0C0D6922D31F2 | ApiSet: undefined
 */
export function _0xB2E0C0D6922D31F2(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xB2E0C0D6922D31F2', _vehicle, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xB68CFAF83A02768D | ApiSet: undefined
 */
export function _0xB68CFAF83A02768D(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xB68CFAF83A02768D', _vehicle, toggle);
}
/**
 * Hash: 0xC0ED6438E6D39BA8 | ApiSet: undefined
 */
export function _0xC0ED6438E6D39BA8(p0, p1, p2) {
    Citizen.invokeNative('0xC0ED6438E6D39BA8', p0, p1, p2);
}
/**
 * Hash: 0xBB2333BB87DDD87F | ApiSet: undefined
 */
export function _0xBB2333BB87DDD87F(p0, p1) {
    Citizen.invokeNative('0xBB2333BB87DDD87F', p0, p1);
}
/**
 * Hash: 0xBE5C1255A1830FF5 | ApiSet: undefined
 */
export function _0xBE5C1255A1830FF5(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xBE5C1255A1830FF5', _vehicle, toggle);
}
/**
 * ```
 * SET_VEHICLE_LI*
 * ```
 * Hash: 0xC50CE861B55EAB8B | ApiSet: undefined
 */
export function _0xC50CE861B55EAB8B(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xC50CE861B55EAB8B', _vehicle, p1);
}
/**
 * Hash: 0xCF9159024555488C | ApiSet: undefined
 */
export function _0xCF9159024555488C(p0) {
    Citizen.invokeNative('0xCF9159024555488C', p0);
}
/**
 * Hash: 0xD3301660A57C9272 | ApiSet: undefined
 */
export function _0xD3301660A57C9272(p0) {
    Citizen.invokeNative('0xD3301660A57C9272', p0);
}
/**
 * Hash: 0xD3E51C0AB8C26EEE | ApiSet: undefined
 */
export function _0xD3E51C0AB8C26EEE(p0, p1) {
    return Citizen.invokeNative('0xD3E51C0AB8C26EEE', p0, p1);
}
/**
 * Vehicle must be a plane.
 * Native name is between SET_VEHICLE_BRAKE_LIGHTS and SET_VEHICLE_BULLDOZER_ARM_POSITION alphabetically.
 * Hash: 0xC361AA040D6637A8 | ApiSet: undefined
 */
export function _0xC361AA040D6637A8(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xC361AA040D6637A8', _vehicle, p1);
}
/**
 * Hash: 0xC4B3347BD68BD609 | ApiSet: undefined
 */
export function _0xC4B3347BD68BD609(p0) {
    Citizen.invokeNative('0xC4B3347BD68BD609', p0);
}
/**
 * Hash: 0xD4196117AF7BB974 | ApiSet: undefined
 */
export function _0xD4196117AF7BB974(p0, p1) {
    return Citizen.invokeNative('0xD4196117AF7BB974', p0, p1);
}
/**
 * ```
 * Related to locking the vehicle or something similar.
 * In the decompiled scripts, its always called after
 * `VEHICLE::_SET_EXCLUSIVE_DRIVER(a_0, 0, 0);`
 * `VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a_0, 1);`
 * `VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a_0, PLAYER::PLAYER_ID(), 0);`
 * ```
 * Hash: 0xDBC631F109350B8C | ApiSet: undefined
 */
export function _0xDBC631F109350B8C(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xDBC631F109350B8C', _vehicle, p1);
}
/**
 * ```
 * what does this do?
 * ```
 * Hash: 0xCFD778E7904C255E | ApiSet: undefined
 */
export function _0xCFD778E7904C255E(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xCFD778E7904C255E', _vehicle);
}
/**
 * Hash: 0xD565F438137F0E10 | ApiSet: undefined
 */
export function _0xD565F438137F0E10(p0, p1) {
    Citizen.invokeNative('0xD565F438137F0E10', p0, p1);
}
/**
 * Hash: 0xE05DD0E9707003A3 | ApiSet: undefined
 */
export function _0xE05DD0E9707003A3(p0, p1) {
    Citizen.invokeNative('0xE05DD0E9707003A3', p0, p1);
}
/**
 * ```
 * NativeDB Added Parameter 1: Vehicle vehicle
 * NativeDB Added Parameter 2: Any p1
 * ```
 * Hash: 0xDCE97BDF8A0EABC8 | ApiSet: undefined
 */
export function _0xDCE97BDF8A0EABC8() {
    Citizen.invokeNative('0xDCE97BDF8A0EABC8');
}
/**
 * Hash: 0xE5810AC70602F2F5 | ApiSet: undefined
 */
export function _0xE5810AC70602F2F5(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xE5810AC70602F2F5', _vehicle, p1);
}
/**
 * ```
 * GET_H*
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0xE8718FAF591FD224 | ApiSet: undefined
 */
export function _0xE8718FAF591FD224(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return Citizen.invokeNative('0xE8718FAF591FD224', _vehicle);
}
/**
 * ```
 * RESET_*
 * Resets the effect of 0x428AD3E26C8D9EB0
 * ```
 * Hash: 0xE2F53F172B45EDE1 | ApiSet: undefined
 */
export function _0xE2F53F172B45EDE1() {
    Citizen.invokeNative('0xE2F53F172B45EDE1');
}
/**
 * Hash: 0xED5EDE9E676643C9 | ApiSet: undefined
 */
export function _0xED5EDE9E676643C9(p0, p1) {
    Citizen.invokeNative('0xED5EDE9E676643C9', p0, p1);
}
/**
 * Hash: 0xE851E480B814D4BA | ApiSet: undefined
 */
export function _0xE851E480B814D4BA(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xE851E480B814D4BA', _vehicle, p1);
}
/**
 * Hash: 0xF25E02CB9C5818F8 | ApiSet: undefined
 */
export function _0xF25E02CB9C5818F8() {
    Citizen.invokeNative('0xF25E02CB9C5818F8');
}
/**
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xF8B49F5BA7F850E7 | ApiSet: undefined
 */
export function _0xF8B49F5BA7F850E7(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    Citizen.invokeNative('0xF8B49F5BA7F850E7', _vehicle, p1);
}
/**
 * Hash: 0xFAF2A78061FD9EF4 | ApiSet: undefined
 */
export function _0xFAF2A78061FD9EF4(p0, p1, p2, p3) {
    Citizen.invokeNative('0xFAF2A78061FD9EF4', p0, p1, p2, p3);
}
/**
 * Hash: 0x87E7F24270732CB1 | ApiSet: undefined
 */
export function openBombBayDoors(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    OpenBombBayDoors(_vehicle);
}
/**
 * ```
 * Implemented only for Trains.
 * ```
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xEC0C1D4922AF9754 | ApiSet: undefined
 */
export function networkUseHighPrecisionVehicleBlending(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    NetworkUseHighPrecisionVehicleBlending(_vehicle, toggle);
}
/**
 * Hash: 0xF051D9BFB6BA39C0 | ApiSet: undefined
 */
export function _0xF051D9BFB6BA39C0(p0) {
    Citizen.invokeNative('0xF051D9BFB6BA39C0', p0);
}
/**
 * Detaches the vehicle's windscreen.
 * Hash: 0x6D645D59FB5F5AD3 | ApiSet: undefined
 */
export function popOutVehicleWindscreen(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    PopOutVehicleWindscreen(_vehicle);
}
/**
 * Hash: 0xF3B0E0AED097A3F5 | ApiSet: undefined
 */
export function _0xF3B0E0AED097A3F5(p0, p1) {
    return Citizen.invokeNative('0xF3B0E0AED097A3F5', p0, p1);
}
/**
 * Hash: 0x445D79F995508307 | ApiSet: undefined
 */
export function releasePreloadMods(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ReleasePreloadMods(_vehicle);
}
/**
 * Hash: 0x632A689BF42301B1 | ApiSet: undefined
 */
export function pausePlaybackRecordedVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    PausePlaybackRecordedVehicle(_vehicle);
}
/**
 * ```
 * Retracts the hook on the cargobob.
 * Note: after you retract it the natives for dropping the hook no longer work
 * ```
 * Hash: 0x9768CF648F54C804 | ApiSet: undefined
 */
export function removePickUpRopeForCargobob(cargobob) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    RemovePickUpRopeForCargobob(_cargobob);
}
/**
 * Raises the roof on a convertible vehicle, utilizing any available animations for the action. This native is particularly useful for creating a realistic interaction with convertible vehicles by animating the process of raising the roof.
 * You can check if the vehicle has an convertible roof using [`IS_VEHICLE_A_CONVERTIBLE`](#\_0x52F357A30698BCCE).
 * To lower the convertible roof, you can use [`LOWER_CONVERTIBLE_ROOF`](#\_0xDED51F703D0FA83D).
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x8F5FB35D7E88FC70 | ApiSet: undefined
 */
export function raiseConvertibleRoof(vehicle, instantlyRaise) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RaiseConvertibleRoof(_vehicle, instantlyRaise);
}
/**
 * Hash: 0x00689CDE5F7C6787 | ApiSet: undefined
 */
export function removeVehicleHighDetailModel(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveVehicleHighDetailModel(_vehicle);
}
/**
 * Hash: 0xACE699C71AB9DEB5 | ApiSet: undefined
 */
export function removeVehicleAsset(vehicleAsset) {
    RemoveVehicleAsset(vehicleAsset);
}
/**
 * See [REQUEST_VEHICLE_RECORDING](#\_0xAF514CABE74CBF15)
 * Hash: 0xF1160ACCF98A3FC8 | ApiSet: undefined
 */
export function removeVehicleRecording(recording, script) {
    RemoveVehicleRecording(recording, script);
}
/**
 * Hash: 0x758F49C24925568A | ApiSet: undefined
 */
export function preloadVehicleMod(p0, modType, p2) {
    PreloadVehicleMod(p0, modType, p2);
}
/**
 * Hash: 0xE30524E1871F481D | ApiSet: undefined
 */
export function removeVehicleCombatAvoidanceArea(p0) {
    RemoveVehicleCombatAvoidanceArea(p0);
}
/**
 * Hash: 0xF660602546D27BA8 | ApiSet: undefined
 */
export function raiseRetractableWheels(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RaiseRetractableWheels(_vehicle);
}
/**
 * Remove the weird shadow applied by [\_SET_VEHICLE_SHADOW_EFFECT](#\_0x2A70BAE8883E4C81)
 * Hash: 0xF87D9F2301F7D206 | ApiSet: undefined
 */
export function removeVehicleShadowEffect(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveVehicleShadowEffect(_vehicle);
}
/**
 * Hash: 0x92D619E420858204 | ApiSet: undefined
 */
export function removeVehicleMod(vehicle, modType) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveVehicleMod(_vehicle, modType);
}
/**
 * Hash: 0x1033371FC8E842A7 | ApiSet: undefined
 */
export function removeRoadNodeSpeedZone(speedzone) {
    return RemoveRoadNodeSpeedZone(speedzone);
}
/**
 * Hash: 0x8386BFB614D06749 | ApiSet: undefined
 */
export function removeVehicleStuckCheck(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveVehicleStuckCheck(_vehicle);
}
/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * Hash: 0xA711568EEDB43069 | ApiSet: undefined
 */
export function removeVehicleWindow(vehicle, windowIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveVehicleWindow(_vehicle, windowIndex);
}
/**
 * Hash: 0xC53EB42A499A7E90 | ApiSet: undefined
 */
export function removeVehicleUpsidedownCheck(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RemoveVehicleUpsidedownCheck(_vehicle);
}
/**
 * Hash: 0x46A1E1A299EC4BBA | ApiSet: undefined
 */
export function removeVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, unk) {
    RemoveVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, unk);
}
/**
 * ```
 * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
 * vehicle found that have asset's:
 * cargobob3
 * submersible
 * blazer
 * ```
 * Hash: 0x81A15811460FAB3A | ApiSet: undefined
 */
export function requestVehicleAsset(vehicleHash, vehicleAsset) {
    if (typeof vehicleHash === 'string')
        vehicleHash = this.getHashKey(vehicleHash);
    RequestVehicleAsset(vehicleHash, vehicleAsset);
}
/**
 * ```
 * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
 * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
 * Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
 * ```
 * Hash: 0xAF514CABE74CBF15 | ApiSet: undefined
 */
export function requestVehicleRecording(recording, script) {
    RequestVehicleRecording(recording, script);
}
/**
 * ```
 * REQUEST_VEHICLE_*
 * ```
 * Hash: 0xDBA3C090E3D74690 | ApiSet: undefined
 */
export function requestVehicleDashboardScaleformMovie(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RequestVehicleDashboardScaleformMovie(_vehicle);
}
/**
 * Hash: 0xA6E9FDCB2C76785E | ApiSet: undefined
 */
export function requestVehicleHighDetailModel(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RequestVehicleHighDetailModel(_vehicle);
}
/**
 * ```
 * The inner function has a switch on the second parameter. It's the stuck timer index.
 * Here's some pseudo code I wrote for the inner function:
 * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
 * {
 * switch (timerIndex)
 * {
 * case 0:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * case 1:
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * case 2:
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * case 3:
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * case 4:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * break;
 * };
 * }
 * ```
 * Hash: 0xD7591B0065AFAA7A | ApiSet: undefined
 */
export function resetVehicleStuckTimer(vehicle, nullAttributes) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ResetVehicleStuckTimer(_vehicle, nullAttributes);
}
/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * Hash: 0x7AD9E6CE657D69E3 | ApiSet: undefined
 */
export function rollDownWindow(vehicle, windowIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RollDownWindow(_vehicle, windowIndex);
}
/**
 * ```
 * Roll down all the windows of the vehicle passed through the first parameter.
 * ```
 * Hash: 0x85796B0549DDE156 | ApiSet: undefined
 */
export function rollDownWindows(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RollDownWindows(_vehicle);
}
/**
 * Hash: 0x21D2E5662C1F6FED | ApiSet: undefined
 */
export function resetVehicleWheels(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ResetVehicleWheels(_vehicle, toggle);
}
/**
 * See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * Hash: 0x602E548F46E24D59 | ApiSet: undefined
 */
export function rollUpWindow(vehicle, windowIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    RollUpWindow(_vehicle, windowIndex);
}
/**
 * Hash: 0x34AD89078831A4BC | ApiSet: undefined
 */
export function setAllVehicleGeneratorsActive() {
    SetAllVehicleGeneratorsActive();
}
/**
 * Hash: 0x608207E7A8FB787C | ApiSet: undefined
 */
export function setAllLowPriorityVehicleGeneratorsActive(active) {
    SetAllLowPriorityVehicleGeneratorsActive(active);
}
/**
 * Hash: 0xC12321827687FE4D | ApiSet: undefined
 */
export function setAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, p6, p7) {
    SetAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, p6, p7);
}
/**
 * Hash: 0x90B6DA738A9A25DA | ApiSet: undefined
 */
export function setAmbientVehicleRangeMultiplierThisFrame(range) {
    SetAmbientVehicleRangeMultiplierThisFrame(range);
}
/**
 * ```
 * Only works on bikes, both X and Y work in the -1 - 1 range.
 * X forces the bike to turn left or right (-1, 1)
 * Y forces the bike to lean to the left or to the right (-1, 1)
 * Example with X -1/Y 1
 * http://i.imgur.com/TgIuAPJ.jpg
 * ```
 * Hash: 0x9CFA4896C3A53CBB | ApiSet: undefined
 */
export function setBikeOnStand(vehicle, x, y) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetBikeOnStand(_vehicle, x, y);
}
/**
 * Sets the anchor state for a boat.
 * ```
 * NativeDB Introduced: v323
 * ```
 * **Note**: You might want to check if you can use your anchor before with [CAN_ANCHOR_BOAT_HERE](#\_0x26C10ECBDA5D043B).
 * Hash: 0x75DBEC174AEEAD10 | ApiSet: undefined
 */
export function setBoatAnchor(boat, toggle) {
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    SetBoatAnchor(_boat, toggle);
}
/**
 * Sets the boat boom position for the `TR3` trailer.
 * Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
 * To get the current boom position ratio, use [GET_BOAT_BOOM_POSITION_RATIO](#\_0x6636C535F6CC2725).
 * Hash: 0xF488C566413B4232 | ApiSet: undefined
 */
export function setBoatBoomPositionRatio(vehicle, ratio) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetBoatBoomPositionRatio(_vehicle, ratio);
}
/**
 * Hash: 0x0A6A279F3AA4FD70 | ApiSet: undefined
 */
export function setBoatDisableAvoidance(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetBoatDisableAvoidance(_vehicle, p1);
}
/**
 * Hash: 0x8F719973E1445BA2 | ApiSet: undefined
 */
export function setBoatSinksWhenWrecked(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetBoatSinksWhenWrecked(_vehicle, toggle);
}
/**
 * Sets whether a boat should remain anchored even when a player is driving it.
 * **Note**: This native is always used with [SET_BOAT_ANCHOR](#\_0x75DBEC174AEEAD10).
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xE3EBAAE484798530 | ApiSet: undefined
 */
export function setBoatRemainsAnchoredWhilePlayerIsDriver(boat, toggle) {
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    SetBoatRemainsAnchoredWhilePlayerIsDriver(_boat, toggle);
}
/**
 * Hash: 0xBD32E46AA95C1DD2 | ApiSet: undefined
 */
export function setBoatIsSinking(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetBoatIsSinking(_vehicle);
}
/**
 * ```
 * Hardcoded to not work in multiplayer.
 * ```
 * Hash: 0x52BBA29D5EC69356 | ApiSet: undefined
 */
export function setCanResprayVehicle(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetCanResprayVehicle(_vehicle, state);
}
/**
 * Sets the distance from the player at which anchored boats switch between high and low LOD (Level of Detail) buoyancy mode.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xE842A9398079BD82 | ApiSet: undefined
 */
export function setBoatLowLodAnchorDistance(boat, value) {
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    SetBoatLowLodAnchorDistance(_boat, value);
}
/**
 * Hash: 0x1201E8A3290A3B98 | ApiSet: undefined
 */
export function setCamberedWheelsDisabled(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetCamberedWheelsDisabled(_vehicle, toggle);
}
/**
 * Hash: 0x685D5561680D088B | ApiSet: undefined
 */
export function setCargobobPickupMagnetFalloff(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetCargobobPickupMagnetFalloff(_vehicle, p1);
}
/**
 * Hash: 0xED8286F71A819BAA | ApiSet: undefined
 */
export function setCargobobPickupMagnetPullStrength(cargobob, p1) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetCargobobPickupMagnetPullStrength(_cargobob, p1);
}
/**
 * ```
 * Something to do with "high speed bump severity"?
 * if (!sub_87a46("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER")) {
 * `VEHICLE::_84FD40F56075E816(0.0);`
 * sub_8795b("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER", 1);
 * }
 * ```
 * Hash: 0x84FD40F56075E816 | ApiSet: undefined
 */
export function setCarHighSpeedBumpSeverityMultiplier(multiplier) {
    SetCarHighSpeedBumpSeverityMultiplier(multiplier);
}
/**
 * ```
 * Stops the cargobob from being able to attach any vehicle
 * ```
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x94A68DA412C4007D | ApiSet: undefined
 */
export function setCargobobHookCanAttach(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetCargobobHookCanAttach(_vehicle, toggle);
}
/**
 * Hash: 0x6D8EAC07506291FB | ApiSet: undefined
 */
export function setCargobobPickupMagnetPullRopeLength(cargobob, p1) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetCargobobPickupMagnetPullRopeLength(_cargobob, p1);
}
/**
 * Hash: 0xBCBFCD9D1DAC19E2 | ApiSet: undefined
 */
export function setCargobobPickupMagnetStrength(cargobob, strength) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetCargobobPickupMagnetStrength(_cargobob, strength);
}
/**
 * Prevents a specified entity from being detached from a Cargobob, even in the event of collisions.
 * Hash: 0x1F34B0626C594380 | ApiSet: undefined
 */
export function setCargobobExcludeFromPickupEntity(cargobob, entity) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetCargobobExcludeFromPickupEntity(_cargobob, _entity);
}
/**
 * Hash: 0x66979ACF5102FD2F | ApiSet: undefined
 */
export function setCargobobPickupMagnetReducedFalloff(cargobob, p1) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetCargobobPickupMagnetReducedFalloff(_cargobob, p1);
}
/**
 * Stops cargobob from being able to detach the attached vehicle.
 * Hash: 0x571FEB383F629926 | ApiSet: undefined
 */
export function setCargobobForceDontDetachVehicle(cargobob, toggle) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetCargobobForceDontDetachVehicle(_cargobob, toggle);
}
/**
 * ```
 * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
 * ```
 * Hash: 0x9A665550F8DA349B | ApiSet: undefined
 */
export function setCargobobPickupMagnetActive(cargobob, isActive) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetCargobobPickupMagnetActive(_cargobob, isActive);
}
/**
 * Hash: 0x0D5F65A8F4EBDAB5 | ApiSet: undefined
 */
export function setCargobobPickupRopeType(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetCargobobPickupRopeType(_vehicle, state);
}
/**
 * Hash: 0xA17BAD153B51547E | ApiSet: undefined
 */
export function setCargobobPickupMagnetEffectRadius(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetCargobobPickupMagnetEffectRadius(_vehicle, p1);
}
/**
 * Hash: 0xE301BD63E9E13CF0 | ApiSet: undefined
 */
export function setCargobobPickupMagnetReducedStrength(cargobob, vehicle) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetCargobobPickupMagnetReducedStrength(_cargobob, _vehicle);
}
/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xB251E0B33E58B424 | ApiSet: undefined
 */
export function setDeployHeliStubWings(vehicle, deploy, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDeployHeliStubWings(_vehicle, deploy, p2);
}
/**
 * This works on helicopters and planes.
 * Prevents a helicopter from exploding due to relatively minor body damage.
 * ```
 * NativeDB Introduced: v1103
 * ```
 * Hash: 0xEDBC8405B3895CC9 | ApiSet: undefined
 */
export function setDisableHeliExplodeFromBodyDamage(helicopter, disableExplode) {
    const _helicopter = helicopter instanceof Entity ? helicopter.handle() : helicopter;
    SetDisableHeliExplodeFromBodyDamage(_helicopter, disableExplode);
}
/**
 * This native is used to latch or unlatch the convertible roof of a vehicle. It allows for direct control over the roof's mechanism without actually opening or closing the roof. This can be useful for scenarios where you need to prepare a vehicle's roof to be opened or closed by another action or to ensure it remains fixed in its current state regardless of other interactions.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x1A78AD3D8240536F | ApiSet: undefined
 */
export function setConvertibleRoofLatchState(vehicle, bLatched) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetConvertibleRoofLatchState(_vehicle, bLatched);
}
/**
 * Hash: 0xCF1182F682F65307 | ApiSet: undefined
 */
export function setCargobobPickupRopeDampingMultiplier(cargobob, p1) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetCargobobPickupRopeDampingMultiplier(_cargobob, p1);
}
/**
 * Enables or disables the convertible roof on vehicles that support old-style GTA IV roofs, which are not animated. Setting `toggle` to true will apply the roof to the vehicle, and setting it to false will remove the roof, assuming the vehicle has versions with and without a roof.
 * If you want to lock or unlock the roof mechanism, use [`SET_CONVERTIBLE_ROOF_LATCH_STATE`](#\_0x1A78AD3D8240536F).
 * You can check if the vehicle has a roof with [`DOES_VEHICLE_HAVE_ROOF`](#\_0x8AC862B0B32C5B80).
 * ```
 * NativeDB Introduced: v323
 * ```
 * #### Vehicles with both roofed and roofless versions (others may exist; this list is compiled from decompiled scripts).
 * *   chino
 * *   voltic
 * *   buccaneer
 * *   buccaneer2
 * *   chino2
 * *   faction
 * *   faction2
 * *   mamba
 * Hash: 0xF39C4F538B5124C2 | ApiSet: undefined
 */
export function setConvertibleRoof(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetConvertibleRoof(_vehicle, toggle);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Prevents the plane from exploding when taking body damage if the inflictor is an AI-controlled vehicle. Only works for planes.
 * Hash: 0xB0B7DF5CB876FF5E | ApiSet: undefined
 */
export function setDisableExplodeFromBodyDamageReceivedByAiVehicle(plane, disable) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    SetDisableExplodeFromBodyDamageReceivedByAiVehicle(_plane, disable);
}
/**
 * This only works for planes.
 * Prevents a vehicle from exploding upon sustaining body damage from physical collisions.
 * For helicopters, you might want to check [`SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE`](#\_0xEDBC8405B3895CC9) instead.
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x26E13D440E7F6064 | ApiSet: undefined
 */
export function setDisableExplodeFromBodyDamageOnCollision(vehicle, disableExplode) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableExplodeFromBodyDamageOnCollision(_vehicle, disableExplode);
}
/**
 * Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0xE615BB7A7752C76A | ApiSet: undefined
 */
export function setDisableTurretMovementThisFrame(vehicle, turretIdx) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableTurretMovementThisFrame(_vehicle, turretIdx);
}
/**
 * Disables the additional physics forces applied to BMX bikes that enable them to perform tricks.
 * ```
 * NativeDB Introduced: v463
 * ```
 * Hash: 0x26D99D5A82FD18E8 | ApiSet: undefined
 */
export function setDisableBmxExtraTrickForces(disableExtraTrickForces) {
    SetDisableBmxExtraTrickForces(disableExtraTrickForces);
}
/**
 * ```
 * True stops vtols from switching modes. Doesn't stop the sound though.
 * ```
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xCE2B43770B655F8F | ApiSet: undefined
 */
export function setDisableVehicleFlightNozzlePosition(vehicle, direction) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableVehicleFlightNozzlePosition(_vehicle, direction);
}
/**
 * Hash: 0xD4B8E3D1917BC86B | ApiSet: undefined
 */
export function setDisableRandomTrainsThisFrame(toggle) {
    SetDisableRandomTrainsThisFrame(toggle);
}
/**
 * Hash: 0xB088E9A47AE6EDD5 | ApiSet: undefined
 */
export function setDisableSuperdummyMode(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableSuperdummyMode(_vehicle, p1);
}
/**
 * Hash: 0x25367DE49D64CF16 | ApiSet: undefined
 */
export function setDisablePretendOccupants(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisablePretendOccupants(_vehicle, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x143921E45EC44D62 | ApiSet: undefined
 */
export function setDisableVehicleUnk(toggle) {
    SetDisableVehicleUnk(toggle);
}
/**
 * Hash: 0x91A0BD635321F145 | ApiSet: undefined
 */
export function setDisableVehicleEngineFires(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableVehicleEngineFires(_vehicle, toggle);
}
/**
 * Disables wings for `Deluxo` and `Oppressor MK II`. For the Deluxo, it retracts the wings immediately, preventing flight. For the Oppressor Mk II, the wings retract after landing and take-off is not possible, though it can still glide if launched into the air.
 * Hash: 0x2D55FE374D5FDB91 | ApiSet: undefined
 */
export function setDisableHoverModeFlight(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableHoverModeFlight(_vehicle, toggle);
}
/**
 * Hash: 0x97CE68CB032583F0 | ApiSet: undefined
 */
export function setForceHdVehicle(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetForceHdVehicle(_vehicle, toggle);
}
/**
 * Hash: 0x37C8252A7C92D017 | ApiSet: undefined
 */
export function setDisableVehiclePetrolTankDamage(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableVehiclePetrolTankDamage(_vehicle, toggle);
}
/**
 * Sets whether a boat should remain in the non-physical, low LOD anchor mode even when a player is driving it.
 * **Note**: This native requires [SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER](#\_0xE3EBAAE484798530) to be set to `true` to work properly.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0xB28B1FE5BFADD7F5 | ApiSet: undefined
 */
export function setForceLowLodAnchorMode(boat, toggle) {
    const _boat = boat instanceof Entity ? boat.handle() : boat;
    SetForceLowLodAnchorMode(_boat, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x211E95CE9903940C | ApiSet: undefined
 */
export function setDisableVehicleUnk2(toggle) {
    SetDisableVehicleUnk2(toggle);
}
/**
 * Hash: 0x465BF26AB9684352 | ApiSet: undefined
 */
export function setDisableVehiclePetrolTankFires(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableVehiclePetrolTankFires(_vehicle, toggle);
}
/**
 * Hash: 0x2AFD795EEAC8D30D | ApiSet: undefined
 */
export function setGarbageTrucks(toggle) {
    SetGarbageTrucks(toggle);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x5AC79C98C5C17F05 | ApiSet: undefined
 */
export function setDriftTyresEnabled(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDriftTyresEnabled(_vehicle, toggle);
}
/**
 * R\* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
 * Hash: 0x1087BC8EC540DAEB | ApiSet: undefined
 */
export function setDisableVehicleWindowCollisions(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetDisableVehicleWindowCollisions(_vehicle, toggle);
}
/**
 * ```
 * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
 * ```
 * Hash: 0xF796359A959DF65D | ApiSet: undefined
 */
export function setDistantCarsEnabled(toggle) {
    SetDistantCarsEnabled(toggle);
}
/**
 * Enable/Disables global slipstream physics
 * Hash: 0xE6C0C80B8C867537 | ApiSet: undefined
 */
export function setEnableVehicleSlipstreaming(toggle) {
    SetEnableVehicleSlipstreaming(toggle);
}
/**
 * Hash: 0x26324F33423F3CC3 | ApiSet: undefined
 */
export function setFarDrawVehicles(toggle) {
    SetFarDrawVehicles(toggle);
}
/**
 * Set a specific offset for helis chasing target in combat
 * ```
 * NativeDB Introduced: v1180
 * ```
 * Hash: 0x0A3F820A9A9A9AC5 | ApiSet: undefined
 */
export function setHeliCombatOffset(vehicle, position) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHeliCombatOffset(_vehicle, position.x, position.y, position.z);
}
/**
 * Hash: 0x4056EA1105F5ABD7 | ApiSet: undefined
 */
export function setHeliMainRotorHealth(vehicle, health) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHeliMainRotorHealth(_vehicle, health);
}
/**
 * Enables or disables the ability for a helicopter's tail boom to break off.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x3EC8BF18AA453FE9 | ApiSet: undefined
 */
export function setHeliTailBoomCanBreakOff(heli, toggle) {
    const _heli = heli instanceof Entity ? heli.handle() : heli;
    SetHeliTailBoomCanBreakOff(_heli, toggle);
}
/**
 * Despite its name, this works on Helicopters and Planes.
 * Sets the speed of the helicopter blades in percentage of the full speed.
 * Hash: 0xFD280B4D7F3ABC4D | ApiSet: undefined
 */
export function setHeliBladesSpeed(vehicle, speed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHeliBladesSpeed(_vehicle, speed);
}
/**
 * Hash: 0xFE205F38AAA58E5B | ApiSet: undefined
 */
export function setHeliTailRotorHealth(vehicle, health) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHeliTailRotorHealth(_vehicle, health);
}
/**
 * Hash: 0xE6F13851780394DA | ApiSet: undefined
 */
export function setHeliTurbulenceScalar(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHeliTurbulenceScalar(_vehicle, p1);
}
/**
 * ```
 * value between 0.0 and 1.0
 * ```
 * Hash: 0x6E0859B530A365CC | ApiSet: undefined
 */
export function setHelicopterRollPitchYawMult(helicopter, multiplier) {
    const _helicopter = helicopter instanceof Entity ? helicopter.handle() : helicopter;
    SetHelicopterRollPitchYawMult(_helicopter, multiplier);
}
/**
 * ```
 * 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
 * ```
 * Hash: 0x37EBBF3117BD6A25 | ApiSet: undefined
 */
export function setForkliftForkHeight(vehicle, height) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetForkliftForkHeight(_vehicle, height);
}
/**
 * This native allows opening or closing the wings of the Deluxo/Oppressor. For the Deluxo, wing deployment depends on sufficient altitude.
 * Hash: 0x70A252F60A3E036B | ApiSet: undefined
 */
export function setHoverModeWingRatio(vehicle, ratio) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHoverModeWingRatio(_vehicle, ratio);
}
/**
 * Hash: 0x28B18377EB6E25F6 | ApiSet: undefined
 */
export function setHydraulicRaised(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHydraulicRaised(_vehicle, toggle);
}
/**
 * Hash: 0x8EA86DF356801C7D | ApiSet: undefined
 */
export function setHydraulicWheelState(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHydraulicWheelState(_vehicle, state);
}
/**
 * Despite its name, this works on Helicopters and Planes.
 * Sets the speed of the helicopter blades to full speed.
 * This is equivalent to calling `SetHeliBladesSpeed(vehicleHandle, 1.0);`
 * Hash: 0xA178472EBB8AE60D | ApiSet: undefined
 */
export function setHeliBladesFullSpeed(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHeliBladesFullSpeed(_vehicle);
}
/**
 * ```
 * Sets vehicle wheel hydraulic states transition. Known states:
 * 0 - reset
 * 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
 * 2 - jump using wheel
 * ```
 * Hash: 0xC24075310A8B9CD1 | ApiSet: undefined
 */
export function setHydraulicWheelStateTransition(vehicle, wheelId, state, value, p4) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHydraulicWheelStateTransition(_vehicle, wheelId, state, value, p4);
}
/**
 * Hash: 0xACFB2463CC22BED2 | ApiSet: undefined
 */
export function setLastDrivenVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetLastDrivenVehicle(_vehicle);
}
/**
 * ```
 * Works only on vehicles that support hydraulic.
 * ```
 * Hash: 0x84EA99C62CB3EF0C | ApiSet: undefined
 */
export function setHydraulicWheelValue(vehicle, wheelId, value) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetHydraulicWheelValue(_vehicle, wheelId, value);
}
/**
 * Makes a helicopter resistant to multiple explosions. When enabled, helicopters can survive two or more explosions.
 * ```
 * NativeDB Introduced: 2545
 * ```
 * Hash: 0x8074CC1886802912 | ApiSet: undefined
 */
export function setHeliResistToExplosion(helicopter, bResistToExplosion) {
    const _helicopter = helicopter instanceof Entity ? helicopter.handle() : helicopter;
    SetHeliResistToExplosion(_helicopter, bResistToExplosion);
}
/**
 * Hash: 0xBC3CCA5844452B06 | ApiSet: undefined
 */
export function setLightsCutoffDistanceTweak(distance) {
    SetLightsCutoffDistanceTweak(distance);
}
/**
 * Enables or disables the opening of a vehicle's rear doors in the event of a sticky bomb explosion. This native is effective for armored vehicles, such as the Stockade (Brinks vehicle), allowing the rear doors to be opened through controlled explosions, which might otherwise remain locked due to the vehicle nature.
 * Hash: 0x1B212B26DD3C04DF | ApiSet: undefined
 */
export function setOpenRearDoorsOnExplosion(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetOpenRearDoorsOnExplosion(_vehicle, toggle);
}
/**
 * ```
 * NativeDB Introduced: 3095
 * ```
 * Activates or deactivates the nitrous system in the specified vehicle, based on the boolean value provided.
 * You can clear the nitrous with [`CLEAR_NITROUS`](#\_0xC889AE921400E1ED), if you want to have more control on the nitrous and those settings, use [`SET_OVERRIDE_NITROUS_LEVEL`](#\_0xC8E9B6B71B8E660D)
 * Hash: 0x465EEA70AF251045 | ApiSet: undefined
 */
export function setNitrousIsActive(vehicle, isActive) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetNitrousIsActive(_vehicle, isActive);
}
/**
 * ```
 * p1 is always 0
 * ```
 * Hash: 0xBBE7648349B49BE8 | ApiSet: undefined
 */
export function setMissionTrainAsNoLongerNeeded(train, p1) {
    const _train = train instanceof Entity ? train.handle() : train;
    SetMissionTrainAsNoLongerNeeded(_train, p1);
}
/**
 * Hash: 0x591CA673AA6AB736 | ApiSet: undefined
 */
export function setMissionTrainCoords(train, position) {
    const _train = train instanceof Entity ? train.handle() : train;
    SetMissionTrainCoords(_train, position.x, position.y, position.z);
}
/**
 * Set state to true to extend the wings, false to retract them.
 * Hash: 0x544996C0081ABDEB | ApiSet: undefined
 */
export function setOppressorTransformState(vehicle, extend) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetOppressorTransformState(_vehicle, extend);
}
/**
 * Hash: 0xCAA15F13EBD417FF | ApiSet: undefined
 */
export function setNumberOfParkedVehicles(value) {
    SetNumberOfParkedVehicles(value);
}
/**
 * ```
 * NativeDB Introduced: v1604
 * NativeDB Added Parameter 2 (2060): float durationMod : A multiplier applied to the default nitrous duration (default is 3 seconds).
 * NativeDB Added Parameter 3 (2060): float power : A multiplier applied to the default nitrous power multiplier (default is 3).
 * NativeDB Added Parameter 4 (2060): float rechargeTime : A multiplier applied to the default nitrous recharge rate.
 * NativeDB Added Parameter 5 (2060): BOOL disableSound : A boolean to disable the default nitrous sound when the nitrous is active.
 * ```
 * Overrides the default settings of a vehicle's nitrous system, allowing custom control over its performance characteristics.
 * Hash: 0xC8E9B6B71B8E660D | ApiSet: undefined
 */
export function setOverrideNitrousLevel(vehicle, override) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetOverrideNitrousLevel(_vehicle, override);
}
/**
 * ```
 * min: 1.9f, max: 100.0f
 * ```
 * Hash: 0x877C1EAEAC531023 | ApiSet: undefined
 */
export function setPickupRopeLengthForCargobob(cargobob, length1, length2, state) {
    const _cargobob = cargobob instanceof Entity ? cargobob.handle() : cargobob;
    SetPickupRopeLengthForCargobob(_cargobob, length1, length2, state);
}
/**
 * Hash: 0xEAE6DCC7EEE3DB1D | ApiSet: undefined
 */
export function setParkedVehicleDensityMultiplierThisFrame(multiplier) {
    SetParkedVehicleDensityMultiplierThisFrame(multiplier);
}
/**
 * ```
 * Works just like SET_VEHICLE_ENGINE_HEALTH, didn't saw any difference. But this native works only for planes.
 * ```
 * Hash: 0x2A86A0475B6A1434 | ApiSet: undefined
 */
export function setPlaneEngineHealth(vehicle, health) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlaneEngineHealth(_vehicle, health);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0xDD8A2D3337F04196 | ApiSet: undefined
 */
export function setPlaneControlSectionsShouldBreakOffFromExplosions(plane, toggle) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    SetPlaneControlSectionsShouldBreakOffFromExplosions(_plane, toggle);
}
/**
 * Hash: 0x6683AB880E427778 | ApiSet: undefined
 */
export function setPlaybackSpeed(vehicle, speed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlaybackSpeed(_vehicle, speed);
}
/**
 * Hash: 0x4C815EB175086F84 | ApiSet: undefined
 */
export function setPlanePropellersHealth(plane, health) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    SetPlanePropellersHealth(_plane, health);
}
/**
 * Hash: 0xE16142B94664DEFD | ApiSet: undefined
 */
export function setPlaneResistToExplosion(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlaneResistToExplosion(_vehicle, toggle);
}
/**
 * Sets flag on vehicle that changes behaviour in relation to when player gets wanted level
 * Hash: 0x4E74E62E0A97E901 | ApiSet: undefined
 */
export function setPoliceFocusWillTrackVehicle(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPoliceFocusWillTrackVehicle(_vehicle, p1);
}
/**
 * This native sets the turbulence multiplier. It only works for planes.
 * 0.0 = no turbulence at all.
 * 1.0 = heavy turbulence.
 * Works by just calling it once, does not need to be called every tick.
 * Hash: 0xAD2D28A1AFDFF131 | ApiSet: undefined
 */
export function setPlaneTurbulenceMultiplier(vehicle, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlaneTurbulenceMultiplier(_vehicle, multiplier);
}
/**
 * Adjusts the scale of damage applied to a specified section of a plane.
 * In the decompiled scripts the `damageScale` is always set to `0f` (maybe to disable damages on the specified section)
 * ```cpp
 * enum ePlaneDamageSection {
 * WING_L = 0,
 * WING_R = 1,
 * TAIL = 2,
 * ENGINE_L = 3,
 * ENGINE_R = 4,
 * ELEVATOR_L = 5,
 * ELEVATOR_R = 6,
 * AILERON_L = 7,
 * AILERON_R = 8,
 * RUDDER = 9,
 * RUDDER_2 = 10,
 * AIRBRAKE_L = 11,
 * AIRBRAKE_R = 12
 * }
 * ```
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0x0BBB9A7A8FFE931B | ApiSet: undefined
 */
export function setPlaneSectionDamageScale(vehicle, damageSection, damageScale) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlaneSectionDamageScale(_vehicle, damageSection, damageScale);
}
/**
 * Hash: 0xBCDF8BAF56C87B6A | ApiSet: undefined
 */
export function setPlayersLastVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlayersLastVehicle(_vehicle);
}
/**
 * ```
 * Time is number of milliseconds before reverting, zero for indefinitely.
 * ```
 * Hash: 0x6E63860BBB190730 | ApiSet: undefined
 */
export function setPlaybackToUseAiTryToRevertBackLater(vehicle, time, drivingStyle, p3) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlaybackToUseAiTryToRevertBackLater(_vehicle, time, drivingStyle, p3);
}
/**
 * Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
 * Hash: 0xA549C3B37EA28131 | ApiSet: undefined
 */
export function setPlaybackToUseAi(vehicle, drivingStyle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetPlaybackToUseAi(_vehicle, drivingStyle);
}
/**
 * Hash: 0x84436EC293B1415F | ApiSet: undefined
 */
export function setRandomBoats(toggle) {
    SetRandomBoats(toggle);
}
/**
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0xDA5E12F728DB30CA | ApiSet: undefined
 */
export function setRandomBoatsInMp(toggle) {
    SetRandomBoatsInMp(toggle);
}
/**
 * Hash: 0xB3B3359379FE77D3 | ApiSet: undefined
 */
export function setRandomVehicleDensityMultiplierThisFrame(multiplier) {
    SetRandomVehicleDensityMultiplierThisFrame(multiplier);
}
/**
 * Enables spawning random trains on the preset tracks.
 * Requires [`SWITCH_TRAIN_TRACK`](#\_0xFD813BB7DB977F20) and [`SET_TRAIN_TRACK_SPAWN_FREQUENCY`](#\_0x21973BBF8D17EDFA) to be set.
 * Hash: 0x80D9F74197EA47D9 | ApiSet: undefined
 */
export function setRandomTrains(toggle) {
    SetRandomTrains(toggle);
}
/**
 * ```
 * Only called once in the decompiled scripts. Presumably activates the specified generator.
 * ```
 * Hash: 0xD9D620E0AC6DC4B0 | ApiSet: undefined
 */
export function setScriptVehicleGenerator(vehicleGenerator, enabled) {
    SetScriptVehicleGenerator(vehicleGenerator, enabled);
}
/**
 * Lowers the vehicle's stance. Only works for vehicles that support this feature.
 * ```
 * NativeDB Introduced: v2372
 * ```
 * Hash: 0x3A375167F5782A65 | ApiSet: undefined
 */
export function setReduceDriftVehicleSuspension(vehicle, enable) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetReduceDriftVehicleSuspension(_vehicle, enable);
}
/**
 * ```
 * makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
 * ```
 * Hash: 0x317B11A312DF5534 | ApiSet: undefined
 */
export function setRenderTrainAsDerailed(train, toggle) {
    const _train = train instanceof Entity ? train.handle() : train;
    SetRenderTrainAsDerailed(_train, toggle);
}
/**
 * Hash: 0xC59872A5134879C7 | ApiSet: undefined
 */
export function setSubmarineCrushDepths(vehicle, toggle, depth1, depth2, depth3) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetSubmarineCrushDepths(_vehicle, toggle, depth1, depth2, depth3);
}
/**
 * Allows locking the hover/non-hover mode of a vehicle, such as the flying mode of the `Deluxo`. In the decompiled scripts, this native is used on `oppressor2` but couldn't get it to work on it.
 * Hash: 0xF1211889DF15A763 | ApiSet: undefined
 */
export function setSpecialFlightModeAllowed(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetSpecialFlightModeAllowed(_vehicle, toggle);
}
/**
 * Sets whether the trailer can attach to vehicles
 * Hash: 0x2FA2494B47FDD009 | ApiSet: undefined
 */
export function setTrailerAttachmentEnabled(vehicle, enabled) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTrailerAttachmentEnabled(_vehicle, enabled);
}
/**
 * Used alongside [`SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO`](#\_0x438B3D7CA026FE91), this function initiates hover transformation for vehicles with a hover mode, like the `Deluxo`, based on a specified ratio (0.0 to 1.0). Incorrect values can glitch the vehicle. Without pairing, vehicles revert to car mode. Ineffective on the `oppressor2`
 * Hash: 0xD138FA15C9776837 | ApiSet: undefined
 */
export function setSpecialFlightModeRatio(vehicle, ratio) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetSpecialFlightModeRatio(_vehicle, ratio);
}
/**
 * According to decompiled scripts this should work with the `deluxo` and `oppressor2` vehicles.
 * Does nothing when used on `oppressor2`.
 * For the deluxo:
 * *   Set `state` to `0.0`: Fully transform to a 'road' vehicle (non-hover mode).
 * *   Set `state` to `1.0`: Fully transform to a 'flying' vehicle (hover mode).
 * If you set it to something like 0.5, then something [weird happens](https://streamable.com/p6wmr), you end up in some 50% hover mode, 50% not hover mode.
 * This doesn't need to be called every tick, just once and the vehicle will transform to that state at the usual transform speed. It'll just stop transforming when it reaches the state you provided.
 * Once this native is used then players will just be able to hit the vehicle transform key to toggle the transformation cycle; it won't block users from using the key.
 * Hash: 0x438B3D7CA026FE91 | ApiSet: undefined
 */
export function setSpecialFlightModeTargetRatio(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetSpecialFlightModeTargetRatio(_vehicle, state);
}
/**
 * Hash: 0xB893215D8D4C015B | ApiSet: undefined
 */
export function setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane, height) {
    const _plane = plane instanceof Entity ? plane.handle() : plane;
    SetTaskVehicleGotoPlaneMinHeightAboveTerrain(_plane, height);
}
/**
 * Used to control train speed, can be used to start and stop its movement as well.
 * Hash: 0x16469284DB8C62B5 | ApiSet: undefined
 */
export function setTrainCruiseSpeed(train, speed) {
    const _train = train instanceof Entity ? train.handle() : train;
    SetTrainCruiseSpeed(_train, speed);
}
/**
 * Hash: 0x2A8F319B392E7B3F | ApiSet: undefined
 */
export function setTrailerInverseMassScale(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTrailerInverseMassScale(_vehicle, p1);
}
/**
 * ```
 * This is not tested - it's just an assumption.
 * Doesn't seem to work.  I'll try with an int instead. --JT
 * Read the scripts, im dumpass.
 * Doesn't work at all, wether with an bool neither an int
 * `if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {`
 * `VEHICLE::SET_TAXI_LIGHTS(l_115, 1);`
 * }
 * ```
 * Hash: 0x598803E85E8448D9 | ApiSet: undefined
 */
export function setTaxiLights(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTaxiLights(_vehicle, state);
}
/**
 * ```
 * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
 * ```
 * Hash: 0x95CF53B3D687F9FA | ApiSet: undefined
 */
export function setTrailerLegsRaised(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTrailerLegsRaised(_vehicle);
}
/**
 * Hash: 0xAA0BC91BE0B796E3 | ApiSet: undefined
 */
export function setTrainSpeed(train, speed) {
    const _train = train instanceof Entity ? train.handle() : train;
    SetTrainSpeed(_train, speed);
}
/**
 * ```
 * Inverse of 0x95CF53B3D687F9FA
 * ```
 * ```
 * NativeDB Added Parameter 1: Vehicle vehicle
 * ```
 * Hash: 0x878C75C09FBDB942 | ApiSet: undefined
 */
export function setTrailerLegsLowered() {
    SetTrailerLegsLowered();
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x74C68EF97645E79D | ApiSet: undefined
 */
export function setTyreHealth(vehicle, wheelIndex, health) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTyreHealth(_vehicle, wheelIndex, health);
}
/**
 * Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted. In decompiled scripts the only value used for transformRate is 2.5.
 * Hash: 0x498218259FB7C72D | ApiSet: undefined
 */
export function setTransformRateForAnimation(vehicle, transformRate) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTransformRateForAnimation(_vehicle, transformRate);
}
/**
 * ```
 * Only called once inside main_persitant with the parameters, 0
 * ```
 * Hash: 0x21973BBF8D17EDFA | ApiSet: undefined
 */
export function setTrainTrackSpawnFrequency(trackIndex, frequency) {
    SetTrainTrackSpawnFrequency(trackIndex, frequency);
}
/**
 * ```
 * Controls how fast the tires wear out.
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtss" (Soft): 2.2
 * "owrtsm" (Medium): 1.7
 * "owrtsh" (Hard): 1.2
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * ```
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0x392183BB9EA57697 | ApiSet: undefined
 */
export function setTyreSoftnessMultiplier(vehicle, wheelIndex, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTyreSoftnessMultiplier(_vehicle, wheelIndex, multiplier);
}
/**
 * Changes the key used to transform a vehicle into submarine mode. When set to true, the transformation key switches from the default raise/lower convertible roof key (usually 'H') to the special vehicle transformation key (usually 'X').
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x41B9FB92EDED32A6 | ApiSet: undefined
 */
export function setTransformToSubmarineUsesAlternateInput(vehicle, useAlternateInput) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTransformToSubmarineUsesAlternateInput(_vehicle, useAlternateInput);
}
/**
 * ```
 * NativeDB Introduced: v1868
 * ```
 * Hash: 0x01894E2EDE923CA2 | ApiSet: undefined
 */
export function setTyreWearMultiplier(vehicle, wheelIndex, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTyreWearMultiplier(_vehicle, wheelIndex, multiplier);
}
/**
 * This native is used to simulate a high-speed impact for a vehicle when it collides with a breakable object (frag). It's particularly useful in scripted sequences where a vehicle is required to break through a barrier but might not actually be moving at a sufficient speed to do so realistically. Note that this setting is temporary and will reset after one frame, so it needs to be called every frame for a lasting effect.
 * Hash: 0x1F9FB66F3A3842D2 | ApiSet: undefined
 */
export function setVehicleActAsIfHighSpeedForFragSmashing(vehicle, actHighSpeed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleActAsIfHighSpeedForFragSmashing(_vehicle, actHighSpeed);
}
/**
 * ```
 * Controls how much traction the wheel loses.
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtds" (Soft): 0.05
 * "owrtdm" (Medium): 0.45
 * "owrtdh" (Hard): 0.8
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * ```
 * ```
 * NativeDB Introduced: v2060
 * ```
 * Hash: 0xC970D0E0FC31D768 | ApiSet: undefined
 */
export function setTyreTractionLossMultiplier(vehicle, wheelIndex, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetTyreTractionLossMultiplier(_vehicle, wheelIndex, multiplier);
}
/**
 * Hash: 0xCDE5E70C1DDB954C | ApiSet: undefined
 */
export function setVehicleAlarm(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleAlarm(_vehicle, state);
}
/**
 * Hash: 0xDFFCEF48E511DB48 | ApiSet: undefined
 */
export function setVehicleActiveDuringPlayback(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleActiveDuringPlayback(_vehicle, toggle);
}
/**
 * Hash: 0x8BA6F76BC53A1493 | ApiSet: undefined
 */
export function setVehicleAutomaticallyAttaches(vehicle, p1, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return SetVehicleAutomaticallyAttaches(_vehicle, p1, p2);
}
/**
 * Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
 * Hash: 0xF06A16CA55D138D8 | ApiSet: undefined
 */
export function setUseHigherVehicleJumpForce(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetUseHigherVehicleJumpForce(_vehicle, toggle);
}
/**
 * ```
 * Makes the vehicle accept no passengers.
 * ```
 * Hash: 0x5D14D4154BFE7B2C | ApiSet: undefined
 */
export function setVehicleAllowNoPassengersLockon(veh, toggle) {
    const _veh = veh instanceof Entity ? veh.handle() : veh;
    SetVehicleAllowNoPassengersLockon(_veh, toggle);
}
/**
 * Hash: 0xE4E2FD323574965C | ApiSet: undefined
 */
export function setVehicleBrake(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleBrake(_vehicle, toggle);
}
/**
 * Hash: 0x92B35082E0B42F66 | ApiSet: undefined
 */
export function setVehicleBrakeLights(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleBrakeLights(_vehicle, toggle);
}
/**
 * Hash: 0x21115BCD6E44656A | ApiSet: undefined
 */
export function setVehicleActiveForPedNavigation(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleActiveForPedNavigation(_vehicle, toggle);
}
/**
 * Sets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * In decompiled scripts this is used to deduct from or add to the count whenever bombs are dropped or purchased/restocked.
 * Use [`_GET_AIRCRAFT_BOMB_COUNT`](#\_0xEA12BD130D7569A1) to get the amount of bombs on that vehicle.
 * Hash: 0xF4B2ED59DEB5D774 | ApiSet: undefined
 */
export function setVehicleBombCount(aircraft, bombCount) {
    const _aircraft = aircraft instanceof Entity ? aircraft.handle() : aircraft;
    SetVehicleBombCount(_aircraft, bombCount);
}
/**
 * ```
 * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
 * ```
 * Hash: 0xFB8794444A7D60FB | ApiSet: undefined
 */
export function setVehicleBurnout(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleBurnout(_vehicle, toggle);
}
/**
 * ```
 * p2 often set to 1000.0 in the decompiled scripts.
 * ```
 * Hash: 0xB77D05AC8C78AADB | ApiSet: undefined
 */
export function setVehicleBodyHealth(vehicle, value) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleBodyHealth(_vehicle, value);
}
/**
 * ```
 * SET_VEHICLE_AL*
 * ```
 * Hash: 0x1DDA078D12879EEE | ApiSet: undefined
 */
export function setVehicleCanBeLockedOn(vehicle, canBeLockedOn, unk) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanBeLockedOn(_vehicle, canBeLockedOn, unk);
}
/**
 * Hash: 0x300504B23BD3B711 | ApiSet: undefined
 */
export function setVehicleCanBeUsedByFleeingPeds(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanBeUsedByFleeingPeds(_vehicle, toggle);
}
/**
 * Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
 * Hash: 0xF8EBCCC96ADB9FB7 | ApiSet: undefined
 */
export function setVehicleBulldozerArmPosition(vehicle, position, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleBulldozerArmPosition(_vehicle, position, p2);
}
/**
 * Hash: 0x0CDDA42F9E360CA6 | ApiSet: undefined
 */
export function setVehicleCanDeformWheels(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanDeformWheels(_vehicle, toggle);
}
/**
 * Hash: 0x59BF8C3D52C92F66 | ApiSet: undefined
 */
export function setVehicleCanBreak(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanBreak(_vehicle, toggle);
}
/**
 * ```
 * This has not yet been tested - it's just an assumption of what the types could be.
 * ```
 * Hash: 0x3750146A28097A82 | ApiSet: undefined
 */
export function setVehicleCanBeTargetted(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanBeTargetted(_vehicle, state);
}
/**
 * Hash: 0x4C7028F78FFD3681 | ApiSet: undefined
 */
export function setVehicleCanBeVisiblyDamaged(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanBeVisiblyDamaged(_vehicle, state);
}
/**
 * Hash: 0x428BACCDF5E26EAD | ApiSet: undefined
 */
export function setVehicleCanSaveInGarage(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanSaveInGarage(_vehicle, toggle);
}
/**
 * Hash: 0x192547247864DFDD | ApiSet: undefined
 */
export function setVehicleCanLeakPetrol(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanLeakPetrol(_vehicle, toggle);
}
/**
 * colorPrimary & colorSecondary are the paint indexes for the vehicle.
 * For a list of valid paint indexes, view: pastebin.com/pwHci0xK
 * Hash: 0x4F1D4BE3A7F24601 | ApiSet: undefined
 */
export function setVehicleColours(vehicle, colorPrimary, colorSecondary) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleColours(_vehicle, colorPrimary, colorSecondary);
}
/**
 * Hash: 0x206BC5DC9D1AC70A | ApiSet: undefined
 */
export function setVehicleCanEngineOperateOnFire(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanEngineOperateOnFire(_vehicle, toggle);
}
/**
 * ```
 * <1.0 - Decreased torque
 * =1.0 - Default torque
 * >1.0 - Increased torque
 * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
 * value - is between 0.2 and 1.8 in the decompiled scripts.
 * This needs to be called every frame to take effect.
 * ```
 * Hash: 0xB59E4BD37AE292DB | ApiSet: undefined
 */
export function setVehicleCheatPowerIncrease(vehicle, value) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCheatPowerIncrease(_vehicle, value);
}
/**
 * ```
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * ```
 * Hash: 0x7141766F91D15BEA | ApiSet: undefined
 */
export function setVehicleCustomPrimaryColour(vehicle, r, g, b) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCustomPrimaryColour(_vehicle, r, g, b);
}
/**
 * Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter).
 * Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)
 * Hash: 0x33E8CD3322E2FE31 | ApiSet: undefined
 */
export function setVehicleColourCombination(vehicle, colorCombination) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleColourCombination(_vehicle, colorCombination);
}
/**
 * Similar to [`_SET_AIRCRAFT_BOMB_COUNT`](#\_0xF4B2ED59DEB5D774), this sets the amount of countermeasures that are present on this vehicle.
 * Use [`_GET_AIRCRAFT_COUNTERMEASURE_COUNT`](#\_0xF846AA63DF56B804) to get the current amount.
 * Hash: 0x9BDA23BF666F0855 | ApiSet: undefined
 */
export function setVehicleCountermeasureCount(aircraft, count) {
    const _aircraft = aircraft instanceof Entity ? aircraft.handle() : aircraft;
    SetVehicleCountermeasureCount(_aircraft, count);
}
/**
 * Hash: 0x51BB2D88D31A914B | ApiSet: undefined
 */
export function setVehicleCanLeakOil(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCanLeakOil(_vehicle, toggle);
}
/**
 * ```
 * SET_VEHICLE_D*
 * ```
 * Hash: 0x4E20D2A627011E8E | ApiSet: undefined
 */
export function setVehicleDamageModifier(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return SetVehicleDamageModifier(_vehicle, p1);
}
/**
 * ```
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * ```
 * Hash: 0x36CED73BFED89754 | ApiSet: undefined
 */
export function setVehicleCustomSecondaryColour(vehicle, r, g, b) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCustomSecondaryColour(_vehicle, r, g, b);
}
/**
 * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
 * Radius of effect damage applied in a sphere at impact location
 * When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
 * Hash: 0xA1DD317EA8FD4F29 | ApiSet: undefined
 */
export function setVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDamage(_vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel);
}
/**
 * ```
 * Previously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)
 * from Decrypted Scripts I found
 * `VEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2\/\*2\*\/], 420.0);`
 * ```
 * Hash: 0xA46413066687A328 | ApiSet: undefined
 */
export function setVehicleCeilingHeight(vehicle, height) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleCeilingHeight(_vehicle, height);
}
/**
 * <strong>Usage:</strong>
 * *   Use this native inside a looped function.
 * *   Values:
 * *   `0.0` = no vehicles on streets
 * *   `1.0` = normal vehicles on streets
 * `1.0` Seems to be the maximum.
 * Hash: 0x245A6883D966D537 | ApiSet: undefined
 */
export function setVehicleDensityMultiplierThisFrame(multiplier) {
    SetVehicleDensityMultiplierThisFrame(multiplier);
}
/**
 * Hash: 0x6089CDF6A57F326C | ApiSet: undefined
 */
export function setVehicleDashboardColor(vehicle, color) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDashboardColor(_vehicle, color);
}
/**
 * ```
 * This fixes the deformation of a vehicle but the vehicle health doesn't improve
 * ```
 * Hash: 0x953DA1E1B12C0491 | ApiSet: undefined
 */
export function setVehicleDeformationFixed(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDeformationFixed(_vehicle);
}
/**
 * ```
 * Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
 * Doesn't work for planes/helis.
 * ```
 * Hash: 0x5B91B229243351A8 | ApiSet: undefined
 */
export function setVehicleControlsInverted(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleControlsInverted(_vehicle, state);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0x2FA133A4A9D37ED8 | ApiSet: undefined
 */
export function setVehicleDoorCanBreak(vehicle, doorIndex, isBreakable) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorCanBreak(_vehicle, doorIndex, isBreakable);
}
/**
 * Sets the dirt level of the passed vehicle.
 * Hash: 0x79D3B596FE44EE8B | ApiSet: undefined
 */
export function setVehicleDirtLevel(vehicle, dirtLevel) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDirtLevel(_vehicle, dirtLevel);
}
/**
 * Hash: 0x2B6747FAA9DB9D6B | ApiSet: undefined
 */
export function setVehicleDisableTowing(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDisableTowing(_vehicle, toggle);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0xD4D4F6A4AB575A33 | ApiSet: undefined
 */
export function setVehicleDoorBroken(vehicle, doorIndex, deleteDoor) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorBroken(_vehicle, doorIndex, deleteDoor);
}
/**
 * Sets the specified door index open on the passed vehicle. See [`IS_VEHICLE_DOOR_FULLY_OPEN`](#\_0x3E933CFF7B111C22).
 * Hash: 0x7C65DAC73C35C862 | ApiSet: undefined
 */
export function setVehicleDoorOpen(vehicle, doorIndex, loose, openInstantly) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorOpen(_vehicle, doorIndex, loose, openInstantly);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0xF2BFA0430F0A0FCB | ApiSet: undefined
 */
export function setVehicleDoorControl(vehicle, doorIndex, speed, angle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorControl(_vehicle, doorIndex, speed, angle);
}
/**
 * See eDoorId declared in [`SET_VEHICLE_DOOR_SHUT`](#\_0x93D9BD300D7789E5)
 * Hash: 0xA5A9653A8D2CAF48 | ApiSet: undefined
 */
export function setVehicleDoorLatched(vehicle, doorIndex, forceClose, lock, p4) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorLatched(_vehicle, doorIndex, forceClose, lock, p4);
}
/**
 * Hash: 0xA2F80B8D040727CC | ApiSet: undefined
 */
export function setVehicleDoorsLockedForAllPlayers(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorsLockedForAllPlayers(_vehicle, toggle);
}
/**
 * Locks the doors of a specified vehicle to a defined lock state, affecting how players and NPCs can interact with the vehicle.
 * ```
 * NativeDB Introduced: v323
 * ```
 * ```cpp
 * enum eVehicleLockState {
 * // No specific lock state, vehicle behaves according to the game's default settings.
 * VEHICLELOCK_NONE = 0,
 * // Vehicle is fully unlocked, allowing free entry by players and NPCs.
 * VEHICLELOCK_UNLOCKED = 1,
 * // Vehicle is locked, preventing entry by players and NPCs.
 * VEHICLELOCK_LOCKED = 2,
 * // Vehicle locks out only players, allowing NPCs to enter.
 * VEHICLELOCK_LOCKOUT_PLAYER_ONLY = 3,
 * // Vehicle is locked once a player enters, preventing others from entering.
 * VEHICLELOCK_LOCKED_PLAYER_INSIDE = 4,
 * // Vehicle starts in a locked state, but may be unlocked through game events.
 * VEHICLELOCK_LOCKED_INITIALLY = 5,
 * // Forces the vehicle's doors to shut and lock.
 * VEHICLELOCK_FORCE_SHUT_DOORS = 6,
 * // Vehicle is locked but can still be damaged.
 * VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7,
 * // Vehicle is locked, but its trunk/boot remains unlocked.
 * VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED = 8,
 * // Vehicle is locked and does not allow passengers, except for the driver.
 * VEHICLELOCK_LOCKED_NO_PASSENGERS = 9,
 * // Vehicle is completely locked, preventing entry entirely, even if previously inside.
 * VEHICLELOCK_CANNOT_ENTER = 10
 * };
 * ```
 * Hash: 0xB664292EAECF7FA6 | ApiSet: undefined
 */
export function setVehicleDoorsLocked(vehicle, doorLockStatus) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorsLocked(_vehicle, doorLockStatus);
}
/**
 * ```
 * NativeDB Introduced: v1365
 * ```
 * Hash: 0x203B527D1B77904C | ApiSet: undefined
 */
export function setVehicleDoorsLockedForUnk(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorsLockedForUnk(_vehicle, toggle);
}
/**
 * Hash: 0x517AAF684BB50CD1 | ApiSet: undefined
 */
export function setVehicleDoorsLockedForPlayer(vehicle, player, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _player = player instanceof Entity ? player.remoteId() : player;
    SetVehicleDoorsLockedForPlayer(_vehicle, _player, toggle);
}
/**
 * Sets the specified door index shut on the passed vehicle.
 * ```cpp
 * enum eDoorId
 * {
 * VEH_EXT_DOOR_DSIDE_F = 0,
 * VEH_EXT_DOOR_DSIDE_R = 1,
 * VEH_EXT_DOOR_PSIDE_F = 2,
 * VEH_EXT_DOOR_PSIDE_R = 3,
 * VEH_EXT_BONNET = 4,
 * VEH_EXT_BOOT = 5,
 * // 0x872E72B8 = 0xFFFFFFFF,
 * }
 * ```
 * Hash: 0x93D9BD300D7789E5 | ApiSet: undefined
 */
export function setVehicleDoorShut(vehicle, doorIndex, closeInstantly) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorShut(_vehicle, doorIndex, closeInstantly);
}
/**
 * Hash: 0xB81F6D4A8F5EEBA8 | ApiSet: undefined
 */
export function setVehicleDoorsLockedForTeam(vehicle, team, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorsLockedForTeam(_vehicle, team, toggle);
}
/**
 * Hash: 0x9737A37136F07E75 | ApiSet: undefined
 */
export function setVehicleDoorsLockedForNonScriptPlayers(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorsLockedForNonScriptPlayers(_vehicle, toggle);
}
/**
 * ```
 * Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
 * youtu.be/3arlUxzHl5Y
 * i.imgur.com/WrNpYFs.jpg
 * ```
 * Hash: 0x068F64F2470F9656 | ApiSet: undefined
 */
export function setVehicleDropsMoneyWhenBlownUp(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDropsMoneyWhenBlownUp(_vehicle, toggle);
}
/**
 * Starts or stops the engine on the specified vehicle.
 * From what I've tested when I do this to a helicopter the propellers turn off after the engine has started.
 * Hash: 0x2497C4717C8B881E | ApiSet: undefined
 */
export function setVehicleEngineOn(vehicle, value, instantly, disableAutoStart) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleEngineOn(_vehicle, value, instantly, disableAutoStart);
}
/**
 * Hash: 0x983765856F2564F9 | ApiSet: undefined
 */
export function setVehicleEngineCanDegrade(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleEngineCanDegrade(_vehicle, toggle);
}
/**
 * ```
 * Closes all doors of a vehicle:
 * ```
 * Hash: 0x781B3D62BB013EF5 | ApiSet: undefined
 */
export function setVehicleDoorsShut(vehicle, closeInstantly) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleDoorsShut(_vehicle, closeInstantly);
}
/**
 * Incorrectly named `SET_VEHICLE_EXCLUSIVE_DRIVER`; likely `SET_VEHICLE_ALLOW_*`.
 * Toggles a flag related to `SET_VEHICLE_EXCLUSIVE_DRIVER`, however, doesn't enable that feature (or trigger script events related to it).
 * See [`_SET_VEHICLE_EXCLUSIVE_DRIVER_2`](#\_0xB5C51B5502E85E83).
 * ```
 * NativeDB Removed Parameter 2: int index
 * ```
 * Hash: 0x41062318F23ED854 | ApiSet: undefined
 */
export function setVehicleExclusiveDriver(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleExclusiveDriver(_vehicle, toggle);
}
/**
 * ```
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
 * -------------------------
 * Minimum: -4000
 * Maximum: 1000
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * ```
 * Hash: 0x45F6D8EEF34ABEF1 | ApiSet: undefined
 */
export function setVehicleEngineHealth(vehicle, health) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleEngineHealth(_vehicle, health);
}
/**
 * ```
 * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
 * ```
 * Hash: 0x71B0892EC081D60A | ApiSet: undefined
 */
export function setVehicleExplodesOnHighExplosionDamage(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleExplodesOnHighExplosionDamage(_vehicle, toggle);
}
/**
 * Examples with a besra:
 * *   [fade value `0.0`](https://i.imgur.com/DXNk63e.jpg)
 * *   [fade value `0.5`](https://i.imgur.com/2Vb35fq.jpg)
 * *   [fade value `1.0`](https://i.imgur.com/aa8cxaD.jpg)
 * The parameter fade is a value from 0-1, where 0 is fresh paint.
 * Hash: 0x3AFDC536C3D01674 | ApiSet: undefined
 */
export function setVehicleEnveffScale(vehicle, fade) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleEnveffScale(_vehicle, fade);
}
/**
 * The **actual** [`SET_VEHICLE_EXCLUSIVE_DRIVER`](#\_0x41062318F23ED854) native.
 * Hash: 0xB5C51B5502E85E83 | ApiSet: undefined
 */
export function setVehicleExclusiveDriver2(vehicle, ped, index) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetVehicleExclusiveDriver2(_vehicle, _ped, index);
}
/**
 * ```
 * Max value is 32767
 * ```
 * Hash: 0x79DF7E806202CE01 | ApiSet: undefined
 */
export function setVehicleExtendedRemovalRange(vehicle, range) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleExtendedRemovalRange(_vehicle, range);
}
/**
 * ```
 * They use the same color indexs as SET_VEHICLE_COLOURS.
 * ```
 * Hash: 0x2036F561ADD12E33 | ApiSet: undefined
 */
export function setVehicleExtraColours(vehicle, pearlescentColor, wheelColor) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleExtraColours(_vehicle, pearlescentColor, wheelColor);
}
/**
 * ```
 * NativeDB Introduced: v3407
 * ```
 * Hash: 0x84D7FFD223CAAFFD | ApiSet: undefined
 */
export function setVehicleExplosiveDamageScale(vehicle, scale) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return SetVehicleExplosiveDamageScale(_vehicle, scale);
}
/**
 * Fix a given vehicle.
 * If the vehicle's engine's broken then you cannot fix it with this native.
 * Hash: 0x115722B1B9C14C1C | ApiSet: undefined
 */
export function setVehicleFixed(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleFixed(_vehicle);
}
/**
 * ```
 * Note: only some vehicle have extras
 * extra ids are from 1 - 9 depending on the vehicle
 * -------------------------------------------------
 * ^ not sure if outdated or simply wrong. Max extra ID for b944 is 14
 * -------------------------------------------------
 * p2 is not a on/off toggle. mostly 0 means on and 1 means off.
 * not sure if it really should be a BOOL.
 * -------------------------------------------------
 * Confirmed p2 does not work as a bool. Changed to int. [0=on, 1=off]
 * ```
 * Hash: 0x7EE3A3C5E4A40CC9 | ApiSet: undefined
 */
export function setVehicleExtra(vehicle, extraId, disable) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleExtra(_vehicle, extraId, disable);
}
/**
 * Hash: 0x9AA47FFF660CB932 | ApiSet: undefined
 */
export function setVehicleFlightNozzlePositionImmediate(vehicle, angle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleFlightNozzlePositionImmediate(_vehicle, angle);
}
/**
 * Hash: 0xB055A34527CB8FD7 | ApiSet: undefined
 */
export function setVehicleForceAfterburner(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleForceAfterburner(_vehicle, toggle);
}
/**
 * Hash: 0x30D779DE7C4F6DD3 | ApiSet: undefined
 */
export function setVehicleFlightNozzlePosition(vehicle, angleRatio) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleFlightNozzlePosition(_vehicle, angleRatio);
}
/**
 * ```
 * Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
 * ```
 * Hash: 0x279D50DE5652D935 | ApiSet: undefined
 */
export function setVehicleGeneratesEngineShockingEvents(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleGeneratesEngineShockingEvents(_vehicle, toggle);
}
/**
 * ```
 * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
 * Speed is in meters per second
 * You can convert meters/s to mph here:
 * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
 * ```
 * Hash: 0xAB54A438726D25D5 | ApiSet: undefined
 */
export function setVehicleForwardSpeed(vehicle, speed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleForwardSpeed(_vehicle, speed);
}
/**
 * ```
 * It switch to highbeam when p1 is set to true.
 * ```
 * Hash: 0x8B7FD87F0DDB421E | ApiSet: undefined
 */
export function setVehicleFullbeam(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleFullbeam(_vehicle, toggle);
}
/**
 * Hash: 0x684785568EF26A22 | ApiSet: undefined
 */
export function setVehicleHandbrake(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHandbrake(_vehicle, toggle);
}
/**
 * ```
 * Seems to be related to the metal parts, not tyres (like i was expecting lol)
 * Must be called every tick.
 * ```
 * Hash: 0x1837AF7C627009BA | ApiSet: undefined
 */
export function setVehicleFrictionOverride(vehicle, friction) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleFrictionOverride(_vehicle, friction);
}
/**
 * Specifies an area of interest where cargens will focus on spawning vehicles
 * You can clear the area of interest with [`CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST`](#\_0x0A436B8643716D14)
 * Hash: 0x9A75585FB2E54FAD | ApiSet: undefined
 */
export function setVehicleGeneratorAreaOfInterest(position, radius) {
    SetVehicleGeneratorAreaOfInterest(position.x, position.y, position.z, radius);
}
/**
 * Hash: 0x89F149B6131E57DA | ApiSet: undefined
 */
export function setVehicleGravity(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleGravity(_vehicle, toggle);
}
/**
 * Hash: 0x02398B627547189C | ApiSet: undefined
 */
export function setVehicleHasBeenDrivenFlag(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHasBeenDrivenFlag(_vehicle, toggle);
}
/**
 * Hash: 0x2B5F9D2AF1F1722D | ApiSet: undefined
 */
export function setVehicleHasBeenOwnedByPlayer(vehicle, owned) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHasBeenOwnedByPlayer(_vehicle, owned);
}
/**
 * Hash: 0x10655FAB9915623D | ApiSet: undefined
 */
export function setVehicleHandlingHashForAi(vehicle, hash) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    if (typeof hash === 'string')
        hash = this.getHashKey(hash);
    SetVehicleHandlingHashForAi(_vehicle, hash);
}
/**
 * Hash: 0xD8050E0EB60CF274 | ApiSet: undefined
 */
export function setVehicleHasMutedSirens(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHasMutedSirens(_vehicle, toggle);
}
/**
 * Sets whether the vehicle's lights can be broken.
 * ```
 * NativeDB Introduced: v323
 * ```
 * Hash: 0x1AA8A837D2169D94 | ApiSet: undefined
 */
export function setVehicleHasUnbreakableLights(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHasUnbreakableLights(_vehicle, toggle);
}
/**
 * ```
 * Sets the turn signal enabled for a vehicle.
 * Set turnSignal to 1 for left light, 0 for right light.
 * ```
 * Hash: 0xB5D45264751B7DF0 | ApiSet: undefined
 */
export function setVehicleIndicatorLights(vehicle, turnSignal, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleIndicatorLights(_vehicle, turnSignal, toggle);
}
/**
 * ```
 * if true, axles won't bend.
 * ```
 * Hash: 0x92F0CF722BC4202F | ApiSet: undefined
 */
export function setVehicleHasStrongAxles(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHasStrongAxles(_vehicle, toggle);
}
/**
 * Sets the vehicle headlight shadow flags.
 * ```
 * NativeDB Introduced: v323
 * ```
 * ```cpp
 * enum eVehicleHeadlightShadowFlags {
 * // Default (Lights can be toggled between off, normal and high beams)
 * NO_HEADLIGHT_SHADOWS = 0,
 * // Lights Disabled (Lights are fully disabled, cannot be toggled)
 * HEADLIGHTS_CAST_DYNAMIC_SHADOWS = 1,
 * // Always On (Lights can be toggled between normal and high beams)
 * HEADLIGHTS_CAST_STATIC_SHADOWS = 2,
 * HEADLIGHTS_CAST_FULL_SHADOWS = 3
 * };
 * ```
 * Hash: 0x1FD09E7390A74D54 | ApiSet: undefined
 */
export function setVehicleHeadlightShadows(vehicle, flag) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleHeadlightShadows(_vehicle, flag);
}
/**
 * Hash: 0xBC2042F090AF6AD3 | ApiSet: undefined
 */
export function setVehicleInteriorlight(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleInteriorlight(_vehicle, toggle);
}
/**
 * ```
 * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
 * ```
 * Hash: 0x31B927BBC44156CD | ApiSet: undefined
 */
export function setVehicleIsConsideredByPlayer(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleIsConsideredByPlayer(_vehicle, toggle);
}
/**
 * Hash: 0x06582AFF74894C75 | ApiSet: undefined
 */
export function setVehicleInactiveDuringPlayback(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleInactiveDuringPlayback(_vehicle, toggle);
}
/**
 * Hash: 0xBE70724027F85BCD | ApiSet: undefined
 */
export function setVehicleIndividualDoorsLocked(vehicle, doorIndex, doorLockStatus) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleIndividualDoorsLocked(_vehicle, doorIndex, doorLockStatus);
}
/**
 * Hash: 0x67B2C79AA7FF5738 | ApiSet: undefined
 */
export function setVehicleIsStolen(vehicle, isStolen) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleIsStolen(_vehicle, isStolen);
}
/**
 * Hash: 0xF40DD601A65F7F19 | ApiSet: undefined
 */
export function setVehicleInteriorColor(vehicle, color) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleInteriorColor(_vehicle, color);
}
/**
 * Hash: 0x99C82F8A139F3E4E | ApiSet: undefined
 */
export function setVehicleKersAllowed(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleKersAllowed(_vehicle, toggle);
}
/**
 * This native sets whether a specific vehicle influences the player's wanted level when it is involved in an incident that typically triggers a wanted response, such as being marked as a "victim" vehicle.
 * This is particularly useful when utilizing the wanted system from GTA, and you want to prevent a vehicle from affecting the wanted level when it is stolen. In the decompiled scripts this native is only used to disable the influence of the vehicle on the wanted level.
 * Hash: 0x0AD9E8F87FF7C16F | ApiSet: undefined
 */
export function setVehicleInfluencesWantedLevel(vehicle, influenceWantedLevel) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleInfluencesWantedLevel(_vehicle, influenceWantedLevel);
}
/**
 * This multiplier has no limit, by default the game has this set to `1.0`.
 * Hash: 0xB385454F8791F57C | ApiSet: undefined
 */
export function setVehicleLightMultiplier(vehicle, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleLightMultiplier(_vehicle, multiplier);
}
/**
 * Calling this native will keep a vehicle's engine running after exiting.
 * Hash: 0xB8FBC8B1330CA9B4 | ApiSet: undefined
 */
export function setVehicleKeepEngineOnWhenAbandoned(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleKeepEngineOnWhenAbandoned(_vehicle, toggle);
}
/**
 * ```
 * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
 * ```
 * Hash: 0x07116E24E9D1929D | ApiSet: undefined
 */
export function setVehicleIsRacing(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleIsRacing(_vehicle, toggle);
}
/**
 * Hash: 0x93AE6A61BE015BF1 | ApiSet: undefined
 */
export function setVehicleLodMultiplier(vehicle, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleLodMultiplier(_vehicle, multiplier);
}
/**
 * Sets the vehicle lights state. Allowing for different lighting modes.
 * ```
 * NativeDB Introduced: v323
 * ```
 * ```cpp
 * enum eVehicleLightSetting {
 * // Normal light behavior. Lights cycle through off, then low beams, then high beams.
 * // Note: It's affected by day or night; high beams don't exist in daytime.
 * NO_VEHICLE_LIGHT_OVERRIDE = 0,
 * // Vehicle doesn't have lights, always off.
 * FORCE_VEHICLE_LIGHTS_OFF  = 1,
 * // Vehicle has always-on lights.
 * // During day: Cycles between low beams and high beams.
 * // At night: Cycles between low beams, low beams, and high beams.
 * FORCE_VEHICLE_LIGHTS_ON   = 2,
 * // Sets vehicle lights on. Behaves like normal lights (same as 0).
 * SET_VEHICLE_LIGHTS_ON     = 3,
 * // Sets vehicle lights off. Behaves like normal lights (same as 0).
 * SET_VEHICLE_LIGHTS_OFF    = 4
 * };
 * ```
 * Hash: 0x34E710FF01247C5A | ApiSet: undefined
 */
export function setVehicleLights(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleLights(_vehicle, state);
}
/**
 * To reset the max speed, set the `speed` value to `0.0` or lower.
 * Hash: 0xBAA045B4E42F3C06 | ApiSet: undefined
 */
export function setVehicleMaxSpeed(vehicle, speed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleMaxSpeed(_vehicle, speed);
}
/**
 * ```
 * Sets the wanted state of this vehicle.
 * ```
 * Hash: 0xF7EC25A3EBEEC726 | ApiSet: undefined
 */
export function setVehicleIsWanted(vehicle, state) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleIsWanted(_vehicle, state);
}
/**
 * ```
 * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
 * ```
 * Hash: 0x1F2AA07F00B3217A | ApiSet: undefined
 */
export function setVehicleModKit(vehicle, modKit) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleModKit(_vehicle, modKit);
}
/**
 * ```
 * Changes the secondary paint type and color
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * color: number of the color
 * ```
 * Hash: 0x816562BADFDEC83E | ApiSet: undefined
 */
export function setVehicleModColor2(vehicle, paintType, color) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleModColor2(_vehicle, paintType, color);
}
/**
 * ```
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * color: number of the color.
 * p3 seems to always be 0.
 * ```
 * Hash: 0x43FEB945EE7F85B8 | ApiSet: undefined
 */
export function setVehicleModColor1(vehicle, paintType, color, pearlescentColor) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleModColor1(_vehicle, paintType, color, pearlescentColor);
}
/**
 * Hash: 0x60BF608F1B8CD1B6 | ApiSet: undefined
 */
export function setVehicleLivery(vehicle, livery) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleLivery(_vehicle, livery);
}
/**
 * ```
 * seems to make the vehicle stop spawning naturally in traffic. Here's an essential example:
 * `VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY("taco"), true);`
 * ```
 * Hash: 0x0FC2D89AC25A5814 | ApiSet: undefined
 */
export function setVehicleModelIsSuppressed(model, suppressed) {
    if (typeof model === 'string')
        model = this.getHashKey(model);
    SetVehicleModelIsSuppressed(model, suppressed);
}
/**
 * ```cpp
 * // eVehicleModType values modified to conform to script native reorganization (see 0x140D25327 in 1604).
 * enum eVehicleModType
 * {
 * VMT_SPOILER = 0,
 * VMT_BUMPER_F = 1,
 * VMT_BUMPER_R = 2,
 * VMT_SKIRT = 3,
 * VMT_EXHAUST = 4,
 * VMT_CHASSIS = 5,
 * VMT_GRILL = 6,
 * VMT_BONNET = 7,
 * VMT_WING_L = 8,
 * VMT_WING_R = 9,
 * VMT_ROOF = 10,
 * VMT_ENGINE = 11,
 * VMT_BRAKES = 12,
 * VMT_GEARBOX = 13,
 * VMT_HORN = 14,
 * VMT_SUSPENSION = 15,
 * VMT_ARMOUR = 16,
 * VMT_NITROUS = 17,
 * VMT_TURBO = 18,
 * VMT_SUBWOOFER = 19,
 * VMT_TYRE_SMOKE = 20,
 * VMT_HYDRAULICS = 21,
 * VMT_XENON_LIGHTS = 22,
 * VMT_WHEELS = 23,
 * VMT_WHEELS_REAR_OR_HYDRAULICS = 24,
 * VMT_PLTHOLDER = 25,
 * VMT_PLTVANITY = 26,
 * VMT_INTERIOR1 = 27,
 * VMT_INTERIOR2 = 28,
 * VMT_INTERIOR3 = 29,
 * VMT_INTERIOR4 = 30,
 * VMT_INTERIOR5 = 31,
 * VMT_SEATS = 32,
 * VMT_STEERING = 33,
 * VMT_KNOB = 34,
 * VMT_PLAQUE = 35,
 * VMT_ICE = 36,
 * VMT_TRUNK = 37,
 * VMT_HYDRO = 38,
 * VMT_ENGINEBAY1 = 39,
 * VMT_ENGINEBAY2 = 40,
 * VMT_ENGINEBAY3 = 41,
 * VMT_CHASSIS2 = 42,
 * VMT_CHASSIS3 = 43,
 * VMT_CHASSIS4 = 44,
 * VMT_CHASSIS5 = 45,
 * VMT_DOOR_L = 46,
 * VMT_DOOR_R = 47,
 * VMT_LIVERY_MOD = 48,
 * VMT_LIGHTBAR = 49,
 * };
 * ```
 * Hash: 0x6AF0636DDEDCB6DD | ApiSet: undefined
 */
export function setVehicleMod(vehicle, modType, modIndex, customTires) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleMod(_vehicle, modType, modIndex, customTires);
}
/**
 * This method is utilized solely for debugging purposes and is functional only in debug builds of the game. Please note that its functionality may not be available in the retail version.
 * Hash: 0xBFDF984E2C22B94F | ApiSet: undefined
 */
export function setVehicleNameDebug(vehicle, name) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleNameDebug(_vehicle, name);
}
/**
 * Hash: 0xFBA550EA44404EE6 | ApiSet: undefined
 */
export function setVehicleNeedsToBeHotwired(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleNeedsToBeHotwired(_vehicle, toggle);
}
/**
 * ```
 * NativeDB Introduced: v1493
 * ```
 * Hash: 0xB93B2867F7B479D1 | ApiSet: undefined
 */
export function setVehicleNeonLightsColor2(vehicle, color) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleNeonLightsColor2(_vehicle, color);
}
/**
 * Sets the color of the neon lights on the specified vehicle.
 * RGB values and colour names taken from the decompiled scripts:
 * | Colour         |  R  |  G  |  B  |
 * |---------------|:---:|:---:|:---:|
 * | White         | 222 | 222 | 255 |
 * | Blue          | 2   | 21  | 255 |
 * | Electric Blue | 3   | 83  | 255 |
 * | Mint Green    | 0   | 255 | 140 |
 * | Lime Green    | 94  | 255 | 1   |
 * | Yellow        | 255 | 255 | 0   |
 * | Golden Shower | 255 | 150 | 0   |
 * | Orange        | 255 | 62  | 0   |
 * | Red           | 255 | 1   | 1   |
 * | Pony Pink     | 255 | 50  | 100 |
 * | Hot Pink      | 255 | 5   | 190 |
 * | Purple        | 35  | 1   | 255 |
 * | Blacklight    | 15  | 3   | 255 |
 * Hash: 0x8E0A582209A62695 | ApiSet: undefined
 */
export function setVehicleNeonLightsColour(vehicle, r, g, b) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleNeonLightsColour(_vehicle, r, g, b);
}
/**
 * ```
 * Sets the neon lights of the specified vehicle on/off.
 * Indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * ```
 * Hash: 0x2AA720E4287BF269 | ApiSet: undefined
 */
export function setVehicleNeonLightEnabled(vehicle, index, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleNeonLightEnabled(_vehicle, index, toggle);
}
/**
 * ```
 * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
 * ```
 * Hash: 0xF19D095E42D430CC | ApiSet: undefined
 */
export function setVehicleOutOfControl(vehicle, killDriver, explodeOnImpact) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleOutOfControl(_vehicle, killDriver, explodeOnImpact);
}
/**
 * Please refer to [`GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX`](#\_0xF11BC2DD9A3E7195) for plate indicies.
 * Hash: 0x9088EB5A43FFB0A1 | ApiSet: undefined
 */
export function setVehicleNumberPlateTextIndex(vehicle, plateIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleNumberPlateTextIndex(_vehicle, plateIndex);
}
/**
 * ```
 * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
 * ```
 * ```
 * NativeDB Added Parameter 2: float p1
 * ```
 * Hash: 0x49733E92263139D1 | ApiSet: undefined
 */
export function setVehicleOnGroundProperly(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return SetVehicleOnGroundProperly(_vehicle);
}
/**
 * Hash: 0x0BFFB028B3DD0A97 | ApiSet: undefined
 */
export function setVehicleParachuteActive(vehicle, active) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleParachuteActive(_vehicle, active);
}
/**
 * Hash: 0x5AFEEDD9BB2899D7 | ApiSet: undefined
 */
export function setVehicleProvidesCover(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleProvidesCover(_vehicle, toggle);
}
/**
 * ```
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * ```
 * Hash: 0x70DB57649FA8D0D8 | ApiSet: undefined
 */
export function setVehiclePetrolTankHealth(vehicle, health) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehiclePetrolTankHealth(_vehicle, health);
}
/**
 * Hash: 0x95A88F0B409CDA47 | ApiSet: undefined
 */
export function setVehicleNumberPlateText(vehicle, plateText) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleNumberPlateText(_vehicle, plateText);
}
/**
 * Hash: 0xEFC13B1CE30D755D | ApiSet: undefined
 */
export function setVehicleRampLaunchModifier(vehicle, p1) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRampLaunchModifier(_vehicle, p1);
}
/**
 * Hash: 0x756AE6E962168A04 | ApiSet: undefined
 */
export function setVehicleRampUpwardsLaunchMotion(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRampUpwardsLaunchMotion(_vehicle, toggle);
}
/**
 * ```
 * parachuteModel = 230075693
 * ```
 * Hash: 0x4D610C6B56031351 | ApiSet: undefined
 */
export function setVehicleParachuteModel(vehicle, modelHash) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    if (typeof modelHash === 'string')
        modelHash = this.getHashKey(modelHash);
    SetVehicleParachuteModel(_vehicle, modelHash);
}
/**
 * ```
 * Reduces grip significantly so it's hard to go anywhere.
 * ```
 * Hash: 0x222FF6A823D122E2 | ApiSet: undefined
 */
export function setVehicleReduceGrip(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleReduceGrip(_vehicle, toggle);
}
/**
 * ```
 * colorIndex = 0 - 7
 * ```
 * Hash: 0xA74AD2439468C883 | ApiSet: undefined
 */
export function setVehicleParachuteTextureVariation(vehicle, textureVariation) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleParachuteTextureVariation(_vehicle, textureVariation);
}
/**
 * Hash: 0x1BBAC99C0BC53656 | ApiSet: undefined
 */
export function setVehicleRampSidewaysLaunchMotion(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRampSidewaysLaunchMotion(_vehicle, toggle);
}
/**
 * Hash: 0xE00F2AB100B76E89 | ApiSet: undefined
 */
export function setVehicleRocketBoostRefillTime(vehicle, time) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRocketBoostRefillTime(_vehicle, time);
}
/**
 * Often used in conjunction with: [SET_VEHICLE_REDUCE_GRIP](#\_0x222FF6A823D122E2).
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x6DEE944E1EE90CFB | ApiSet: undefined
 */
export function setVehicleReduceTraction(vehicle, val) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleReduceTraction(_vehicle, val);
}
/**
 * Hash: 0x28D034A93FE31BF5 | ApiSet: undefined
 */
export function setVehicleReceivesRampDamage(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleReceivesRampDamage(_vehicle, toggle);
}
/**
 * Hash: 0x09606148B6C71DEF | ApiSet: undefined
 */
export function setVehicleRudderBroken(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRudderBroken(_vehicle, toggle);
}
/**
 * Hash: 0xFEB2DDED3509562E | ApiSet: undefined
 */
export function setVehicleRocketBoostPercentage(vehicle, percentage) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRocketBoostPercentage(_vehicle, percentage);
}
/**
 * Hash: 0x81E1552E35DC3839 | ApiSet: undefined
 */
export function setVehicleRocketBoostActive(vehicle, active) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRocketBoostActive(_vehicle, active);
}
/**
 * Used to set the tornado custom (convertible) rooftop livery.
 * Livery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even.
 * Might work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom.
 * Hash: 0xA6D3A8750DC73270 | ApiSet: undefined
 */
export function setVehicleRoofLivery(vehicle, livery) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleRoofLivery(_vehicle, livery);
}
/**
 * ```
 * Adds some kind of shadow to the vehicle.
 * -1 disables the effect.
 * DISABLE_*
 * ```
 * Hash: 0xF0E4BA16D1DB546C | ApiSet: undefined
 */
export function setVehicleShadowEffect(vehicle, p1, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleShadowEffect(_vehicle, p1, p2);
}
/**
 * ```
 * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
 * ```
 * Hash: 0x9D44FCCE98450843 | ApiSet: undefined
 */
export function setVehicleSilent(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleSilent(_vehicle, toggle);
}
/**
 * ```
 * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
 * `WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);`
 * ```
 * Hash: 0x74CD9A9327A282EA | ApiSet: undefined
 */
export function setVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget) {
    const _driver = driver instanceof Ped ? driver.handle() : driver;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    SetVehicleShootAtTarget(_driver, _entity, xTarget, yTarget, zTarget);
}
/**
 * ```
 * Activate siren on vehicle (Only works if the vehicle has a siren).
 * ```
 * Hash: 0xF4924635A19EB37D | ApiSet: undefined
 */
export function setVehicleSiren(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleSiren(_vehicle, toggle);
}
/**
 * ```
 * Locks the vehicle's steering to the desired angle, explained below.
 * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
 * Steer bias:
 * -1.0 = full right
 * 0.0 = centered steering
 * 1.0 = full left
 * ```
 * Hash: 0x42A8EC77D5150CBE | ApiSet: undefined
 */
export function setVehicleSteerBias(vehicle, value) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleSteerBias(_vehicle, value);
}
/**
 * ```
 * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
 * ```
 * Hash: 0x3E8C8727991A8A0B | ApiSet: undefined
 */
export function setVehicleStrong(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleStrong(_vehicle, toggle);
}
/**
 * ```
 * Only works during nighttime.
 * ```
 * Hash: 0x14E85C5EE7A4D542 | ApiSet: undefined
 */
export function setVehicleSearchlight(heli, toggle, canBeUsedByAI) {
    const _heli = heli instanceof Entity ? heli.handle() : heli;
    SetVehicleSearchlight(_heli, toggle, canBeUsedByAI);
}
/**
 * ```
 * Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
 * ============================================
 * May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
 * Btw, func_1333 ends up calling this func which uses this native,
 * void func_1338(int iParam0)//Position
 * {
 * `ENTITY::FREEZE_ENTITY_POSITION(iParam0, true);`
 * `ENTITY::SET_ENTITY_COLLISION(iParam0, false, 0);`
 * `ENTITY::SET_ENTITY_INVINCIBLE(iParam0, true);`
 * `VEHICLE::_0xDF594D8D(iParam0, true);`
 * }
 * ```
 * Hash: 0x1CF38D529D7441D9 | ApiSet: undefined
 */
export function setVehicleSt(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleSt(_vehicle, toggle);
}
/**
 * Hash: 0x56B94C6D7127DFBA | ApiSet: undefined
 */
export function setVehicleTankTurretPosition(vehicle, position, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTankTurretPosition(_vehicle, position, p2);
}
/**
 * Hash: 0x9007A2F21DC108D4 | ApiSet: undefined
 */
export function setVehicleSteeringBiasScalar(vehicle, scalar) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleSteeringBiasScalar(_vehicle, scalar);
}
/**
 * Hash: 0x1093408B4B9D1146 | ApiSet: undefined
 */
export function setVehicleTurretSpeedThisFrame(vehicle, speed) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTurretSpeedThisFrame(_vehicle, speed);
}
/**
 * ```
 * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
 * ```
 * Hash: 0xFE54B92A344583CA | ApiSet: undefined
 */
export function setVehicleTowTruckArmPosition(vehicle, position) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTowTruckArmPosition(_vehicle, position);
}
/**
 * Hash: 0x2E0A74E1002380B1 | ApiSet: undefined
 */
export function setVehicleTimedExplosion(vehicle, ped, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _ped = ped instanceof Ped ? ped.handle() : ped;
    SetVehicleTimedExplosion(_vehicle, _ped, toggle);
}
/**
 * ```
 * tyreIndex = 0 to 4 on normal vehicles
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * ```
 * Hash: 0x6E13FC662B882D1D | ApiSet: undefined
 */
export function setVehicleTyreFixed(vehicle, tyreIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTyreFixed(_vehicle, tyreIndex);
}
/**
 * ```
 * Toggles specific flag on turret
 * ```
 * ```
 * NativeDB Introduced: v1290
 * ```
 * Hash: 0xC60060EB0D8AC7B1 | ApiSet: undefined
 */
export function setVehicleTurretUnk(vehicle, index, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTurretUnk(_vehicle, index, toggle);
}
/**
 * Hash: 0x8ABA6AF54B942B95 | ApiSet: undefined
 */
export function setVehicleUndriveable(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleUndriveable(_vehicle, toggle);
}
/**
 * ```
 * `"To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)`
 * to burst all tyres type it 8 times where p1 = 0 to 7.
 * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * ```
 * Hash: 0xEC6A202EE4960385 | ApiSet: undefined
 */
export function setVehicleTyreBurst(vehicle, index, onRim, p3) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTyreBurst(_vehicle, index, onRim, p3);
}
/**
 * ```
 * Sets the tire smoke's color of this vehicle.
 * vehicle: The vehicle that is the target of this method.
 * r: The red level in the RGB color code.
 * g: The green level in the RGB color code.
 * b: The blue level in the RGB color code.
 * Note:
 * setting r,g,b to 0 will give the car independance day tyre smoke
 * ```
 * Hash: 0xB5BA80F839791C0F | ApiSet: undefined
 */
export function setVehicleTyreSmokeColor(vehicle, r, g, b) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTyreSmokeColor(_vehicle, r, g, b);
}
/**
 * ```
 * Allows you to toggle bulletproof tires.
 * ```
 * Hash: 0xEB9DC3C7D8596C46 | ApiSet: undefined
 */
export function setVehicleTyresCanBurst(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleTyresCanBurst(_vehicle, toggle);
}
/**
 * Hash: 0x45A561A9421AB6AD | ApiSet: undefined
 */
export function setVehicleUnkDamageMultiplier(vehicle, multiplier) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleUnkDamageMultiplier(_vehicle, multiplier);
}
/**
 * ```
 * NativeDB Introduced: v3095
 * ```
 * Enables or disables the use of the vehicle's horn button for activating the nitrous system.
 * Hash: 0x1980F68872CC2C3D | ApiSet: undefined
 */
export function setVehicleUseHornButtonForNitrous(vehicle, bToggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleUseHornButtonForNitrous(_vehicle, bToggle);
}
/**
 * Hash: 0x86B4B6212CB8B627 | ApiSet: undefined
 */
export function setVehicleWeaponsDisabled(vehicle, weaponSlot) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleWeaponsDisabled(_vehicle, weaponSlot);
}
/**
 * Hash: 0xE023E8AC4EF7C117 | ApiSet: undefined
 */
export function setVehicleUseCutsceneWheelCompression(p0, p1, p2, p3) {
    const _p0 = p0 instanceof Entity ? p0.handle() : p0;
    return SetVehicleUseCutsceneWheelCompression(_p0, p1, p2, p3);
}
/**
 * Sets a limited number of ammo for a particular vehicle weapon index on a vehicle.
 * Information about weapon indexes can be found in `handling.meta`.
 * In the example given below, `uWeaponHash` defines weapon hashes for the vehicle. Each `<Item>` corresponds to an index starting from `0`.
 * ```
 * <uWeaponHash>
 * <Item>VEHICLE_WEAPON_PLAYER_BUZZARD</Item>  <!-- Index: 0 -->
 * <Item>VEHICLE_WEAPON_SPACE_ROCKET</Item>    <!-- Index: 1 -->
 * <Item>VEHICLE_WEAPON_SEARCHLIGHT</Item>     <!-- Index: 2 -->
 * </uWeaponHash>
 * ```
 * Hash: 0x44CD1F493DB2A0A6 | ApiSet: undefined
 */
export function setVehicleWeaponRestrictedAmmo(vehicle, weaponIndex, ammoCount) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleWeaponRestrictedAmmo(_vehicle, weaponIndex, ammoCount);
}
/**
 * Hash: 0x1D97D1E3A70A649F | ApiSet: undefined
 */
export function setVehicleUseAlternateHandling(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleUseAlternateHandling(_vehicle, toggle);
}
/**
 * Hash: 0x29B18B4FD460CA8F | ApiSet: undefined
 */
export function setVehicleWheelsCanBreak(vehicle, enabled) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleWheelsCanBreak(_vehicle, enabled);
}
/**
 * ```
 * vehicle must be a plane
 * ```
 * Hash: 0xCAC66558B944DA67 | ApiSet: undefined
 */
export function setVehicleUsesLargeRearRamp(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleUsesLargeRearRamp(_vehicle, toggle);
}
/**
 * Hash: 0xA37B9A517B133349 | ApiSet: undefined
 */
export function setVehicleWheelsCanBreakOffWhenBlowUp(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleWheelsCanBreakOffWhenBlowUp(_vehicle, toggle);
}
/**
 * ```cpp
 * enum WindowTints
 * {
 * WINDOWTINT_NONE = 0,
 * WINDOWTINT_PURE_BLACK = 1,
 * WINDOWTINT_DARKSMOKE = 2,
 * WINDOWTINT_LIGHTSMOKE = 3,
 * WINDOWTINT_STOCK = 4,
 * WINDOWTINT_LIMO = 5,
 * WINDOWTINT_GREEN = 6
 * };
 * ```
 * Hash: 0x57C51E6BAD752696 | ApiSet: undefined
 */
export function setVehicleWindowTint(vehicle, tint) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleWindowTint(_vehicle, tint);
}
/**
 * Refer to [GET_VEHICLE_WHEEL_TYPE](#\_0xB3ED1BFB4BE636DC) for wheel types.
 * Hash: 0x487EB21CC7295BA1 | ApiSet: undefined
 */
export function setVehicleWheelType(vehicle, wheelType) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleWheelType(_vehicle, wheelType);
}
/**
 * Paint index goes from 0 to 12.
 * You can find the list of colors and ids here: [\_GET_VEHICLE_HEADLIGHTS_COLOUR](#\_0x3DFF319A831E0CDB)
 * Hash: 0xE41033B25D003A07 | ApiSet: undefined
 */
export function setVehicleXenonLightsColor(vehicle, color) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleXenonLightsColor(_vehicle, color);
}
/**
 * Smashes a vehicles window. See eWindowId declared in [`IS_VEHICLE_WINDOW_INTACT`](#\_0x46E571A0E20D01F1).
 * Hash: 0x9E5B5E4D2CCD2259 | ApiSet: undefined
 */
export function smashVehicleWindow(vehicle, windowIndex) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SmashVehicleWindow(_vehicle, windowIndex);
}
/**
 * Hash: 0xC45C27EF50F36ADC | ApiSet: undefined
 */
export function setVehicleUsePlayerLightSettings(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleUsePlayerLightSettings(_vehicle, toggle);
}
/**
 * ```
 * AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
 * 0x1F2E4E06DEA8992B is a related native that deals with the AI physics for such recordings.
 * ```
 * Hash: 0x29DE5FA52D00428C | ApiSet: undefined
 */
export function startPlaybackRecordedVehicleUsingAi(vehicle, recording, speed, drivingStyle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    return StartPlaybackRecordedVehicleUsingAi(_vehicle, recording, speed, drivingStyle);
}
/**
 * ```
 * Related to monster trucks in native scripts.
 * ```
 * ```
 * NativeDB Introduced: v1604
 * ```
 * Hash: 0x2970EAA18FD5E42F | ApiSet: undefined
 */
export function setVehicleWheelsDealDamage(vehicle, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SetVehicleWheelsDealDamage(_vehicle, toggle);
}
/**
 * Hash: 0xAB8E2EDA0C0A5883 | ApiSet: undefined
 */
export function skipToEndAndStopPlaybackRecordedVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SkipToEndAndStopPlaybackRecordedVehicle(_vehicle);
}
/**
 * Hash: 0xB8FF7AB45305C345 | ApiSet: undefined
 */
export function startVehicleAlarm(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    StartVehicleAlarm(_vehicle);
}
/**
 * ```
 * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
 * ```
 * Hash: 0x9438F7AD68771A20 | ApiSet: undefined
 */
export function skipTimeInPlaybackRecordedVehicle(vehicle, time) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    SkipTimeInPlaybackRecordedVehicle(_vehicle, time);
}
/**
 * Hash: 0x0F87E938BDF29D66 | ApiSet: undefined
 */
export function stopAllGarageActivity() {
    StopAllGarageActivity();
}
/**
 * `p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).`
 * See [`REQUEST_VEHICLE_RECORDING`](#\_0xAF514CABE74CBF15).
 * Hash: 0x3F878F92B3A7A071 | ApiSet: undefined
 */
export function startPlaybackRecordedVehicle(vehicle, recording, script, p3) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    StartPlaybackRecordedVehicle(_vehicle, recording, script, p3);
}
/**
 * Enables or disables a vehicle mod by index (`modType`) for a given vehicle.
 * `eVehicleModType` enum, used for `modType` index can be found under [`SET_VEHICLE_MOD`](#\_0x6AF0636DDEDCB6DD).
 * Hash: 0x2A1F4F37F95BAD08 | ApiSet: undefined
 */
export function toggleVehicleMod(vehicle, modType, toggle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    ToggleVehicleMod(_vehicle, modType, toggle);
}
/**
 * ```
 * in script hook .net
 * Vehicle v = ...;
 * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
 * ```
 * Hash: 0x64473AEFDCF47DCA | ApiSet: undefined
 */
export function trackVehicleVisibility(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TrackVehicleVisibility(_vehicle);
}
/**
 * Hash: 0x374706271354CB18 | ApiSet: undefined
 */
export function stabiliseEntityAttachedToHeli(vehicle, entity, p2) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    const _entity = entity instanceof Entity ? entity.handle() : entity;
    StabiliseEntityAttachedToHeli(_vehicle, _entity, p2);
}
/**
 * Transforms the `stormberg` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * Hash: 0x2A69FFD1B42BFF9E | ApiSet: undefined
 */
export function transformToCar(vehicle, instantly) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TransformToCar(_vehicle, instantly);
}
/**
 * ```
 * flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
 * time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
 * ```
 * Hash: 0x7D80FD645D4DA346 | ApiSet: undefined
 */
export function startPlaybackRecordedVehicleWithFlags(vehicle, recording, script, flags, time, drivingStyle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    StartPlaybackRecordedVehicleWithFlags(_vehicle, recording, script, flags, time, drivingStyle);
}
/**
 * Sounds the horn for the specified vehicle. Note that if a player is in the vehicle, it will only sound briefly.
 * Hash: 0x9C8C6504B5B63D2C | ApiSet: undefined
 */
export function startVehicleHorn(vehicle, duration, mode, forever) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    if (typeof mode === 'string')
        mode = this.getHashKey(mode);
    StartVehicleHorn(_vehicle, duration, mode, forever);
}
/**
 * ```
 * Stops CTaskBringVehicleToHalt
 * ```
 * Hash: 0x7C06330BFDDA182E | ApiSet: undefined
 */
export function stopBringVehicleToHalt(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    StopBringVehicleToHalt(_vehicle);
}
/**
 * Hash: 0x54833611C17ABDEA | ApiSet: undefined
 */
export function stopPlaybackRecordedVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    StopPlaybackRecordedVehicle(_vehicle);
}
/**
 * Transforms the `stormberg` to its "water vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * Hash: 0xBE4C854FFDB6EEBE | ApiSet: undefined
 */
export function transformToSubmarine(vehicle, instantly) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    TransformToSubmarine(_vehicle, instantly);
}
/**
 * Toggles whether ambient trains can spawn on the specified track or not.
 * | trackId | File | Description |
 * | --- | --- | --- |
 * | 0 | `trains1.dat` | Main track around SA |
 * | 1 | `trains2.dat` | Davis Quartz Quarry branch |
 * | 2 | `trains3.dat` | Second track alongside live track along Roy Lewenstein Blv. |
 * | 3 | `trains4.dat` | Metro track circuit |
 * | 4 | `trains5.dat` | Branch in Mirror Park Railyard |
 * | 5 | `trains6.dat` | Branch in Mirror Park Railyard |
 * | 6 | `trains7.dat` | LS branch to Mirror Park Railyard |
 * | 7 | `trains8.dat` | Overground part of metro track along Forum Dr. |
 * | 8 | `trains9.dat` | Branch to Mirror Park Railyard |
 * | 9 | `trains10.dat` | Yankton train |
 * | 10 | `trains11.dat` | Part of metro track near mission row |
 * | 11 | `trains12.dat` | Yankton prologue mission train |
 * Tracks IDs `0` and `3` are the main tracks you find trains on during normal gameplay, all the others are used during missions and are not complete tracks.
 * Hash: 0xFD813BB7DB977F20 | ApiSet: undefined
 */
export function switchTrainTrack(trackId, state) {
    SwitchTrainTrack(trackId, state);
}
/**
 * Hash: 0x8879EE09268305D5 | ApiSet: undefined
 */
export function unpausePlaybackRecordedVehicle(vehicle) {
    const _vehicle = vehicle instanceof Entity ? vehicle.handle() : vehicle;
    UnpausePlaybackRecordedVehicle(_vehicle);
}
export * from "@risingmedia/fivem-shared";
